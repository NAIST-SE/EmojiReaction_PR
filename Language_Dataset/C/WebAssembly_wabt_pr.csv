WebAssembly/wabt,https://github.com/WebAssembly/wabt,49,2016-03-09T19:51:25Z,2016-03-09T20:09:32Z,2016-03-09T20:09:34Z,MERGED,True,29,55,4,https://github.com/binji,Inline data segments,3,[],https://github.com/WebAssembly/wabt/pull/49,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/49,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,49,2016-03-09T19:51:25Z,2016-03-09T20:09:32Z,2016-03-09T20:09:34Z,MERGED,True,29,55,4,https://github.com/binji,Inline data segments,3,[],https://github.com/WebAssembly/wabt/pull/49,https://github.com/titzer,2,https://github.com/WebAssembly/wabt/pull/49#issuecomment-194481278,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,50,2016-03-10T13:18:33Z,2016-03-10T13:18:40Z,2016-03-10T19:21:44Z,MERGED,True,3968,2714,61,https://github.com/titzer,sections have size and name as string,1,[],https://github.com/WebAssembly/wabt/pull/50,https://github.com/titzer,1,https://github.com/WebAssembly/wabt/pull/50,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,55,2016-03-14T18:11:57Z,2016-03-14T18:23:01Z,2016-08-04T08:08:44Z,MERGED,True,4,1,2,https://github.com/Cellule,Windows: vsnprintf,1,[],https://github.com/WebAssembly/wabt/pull/55,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/55,Implementation of vsnprintf was under the wrong check on Windows.,Implementation of vsnprintf was under the wrong check on Windows.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,55,2016-03-14T18:11:57Z,2016-03-14T18:23:01Z,2016-08-04T08:08:44Z,MERGED,True,4,1,2,https://github.com/Cellule,Windows: vsnprintf,1,[],https://github.com/WebAssembly/wabt/pull/55,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/55#issuecomment-196453238,Implementation of vsnprintf was under the wrong check on Windows.,"Yeah, I wasn't exactly sure about what was broken/fixed. My understanding is that snprintf/vsnprintf do not null-terminate in older vs2013 and earlier, but that snprintf was added in vs2015, and vsnprintf was updated to null-terminate as well. So on vs2015, wasm_sprintf and wasm_vsnprint could just be #defined to  snprintf and vsnprintf. But maybe it's just best to always wrap them on msvc.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,55,2016-03-14T18:11:57Z,2016-03-14T18:23:01Z,2016-08-04T08:08:44Z,MERGED,True,4,1,2,https://github.com/Cellule,Windows: vsnprintf,1,[],https://github.com/WebAssembly/wabt/pull/55,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/55#issuecomment-196454372,Implementation of vsnprintf was under the wrong check on Windows.,"oh, and lgtm :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,56,2016-03-18T08:23:12Z,2016-03-20T06:25:36Z,2016-03-20T12:42:08Z,MERGED,True,679,687,5,None,Rename the 'not' operator to 'i32.eqz' and add 'i64.eqz'.,1,[],https://github.com/WebAssembly/wabt/pull/56,None,1,https://github.com/WebAssembly/wabt/pull/56,It fitted the 'convert' type of operator so this was used - not sure if it's what you would want.,It fitted the 'convert' type of operator so this was used - not sure if it's what you would want.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,56,2016-03-18T08:23:12Z,2016-03-20T06:25:36Z,2016-03-20T12:42:08Z,MERGED,True,679,687,5,None,Rename the 'not' operator to 'i32.eqz' and add 'i64.eqz'.,1,[],https://github.com/WebAssembly/wabt/pull/56,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/56#issuecomment-198454655,It fitted the 'convert' type of operator so this was used - not sure if it's what you would want.,"Looks like a good start, but the build is failing.
The convert type is probably the best bet, yeah -- it looks like the spec repo added a new TEST type, but I'd rather not add a new expression type for just this.
Also, I have a CL locally that removes all the operator type stuff and just uses the opcode, FYI",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,56,2016-03-18T08:23:12Z,2016-03-20T06:25:36Z,2016-03-20T12:42:08Z,MERGED,True,679,687,5,None,Rename the 'not' operator to 'i32.eqz' and add 'i64.eqz'.,1,[],https://github.com/WebAssembly/wabt/pull/56,None,3,https://github.com/WebAssembly/wabt/pull/56#issuecomment-198541148,It fitted the 'convert' type of operator so this was used - not sure if it's what you would want.,"Rebased. The failure looks like the d8 version might be out of sync, and it works locally, or do some 64 bit operators not yet work on d8-32bit and is this used in checks here?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,56,2016-03-18T08:23:12Z,2016-03-20T06:25:36Z,2016-03-20T12:42:08Z,MERGED,True,679,687,5,None,Rename the 'not' operator to 'i32.eqz' and add 'i64.eqz'.,1,[],https://github.com/WebAssembly/wabt/pull/56,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/56#issuecomment-198566581,It fitted the 'convert' type of operator so this was used - not sure if it's what you would want.,"Oh yeah, the version of d8 is pinned, so it probably doesn't have i64.eqz. I'll update it. Also, it looks like you'll need to update the lexer to get i64.eqz as well, that's failing on the gcc bot.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,56,2016-03-18T08:23:12Z,2016-03-20T06:25:36Z,2016-03-20T12:42:08Z,MERGED,True,679,687,5,None,Rename the 'not' operator to 'i32.eqz' and add 'i64.eqz'.,1,[],https://github.com/WebAssembly/wabt/pull/56,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/56#issuecomment-198569830,It fitted the 'convert' type of operator so this was used - not sure if it's what you would want.,"OK, updated v8.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,56,2016-03-18T08:23:12Z,2016-03-20T06:25:36Z,2016-03-20T12:42:08Z,MERGED,True,679,687,5,None,Rename the 'not' operator to 'i32.eqz' and add 'i64.eqz'.,1,[],https://github.com/WebAssembly/wabt/pull/56,None,6,https://github.com/WebAssembly/wabt/pull/56#issuecomment-198591724,It fitted the 'convert' type of operator so this was used - not sure if it's what you would want.,Thank you. Updated. ptal.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,56,2016-03-18T08:23:12Z,2016-03-20T06:25:36Z,2016-03-20T12:42:08Z,MERGED,True,679,687,5,None,Rename the 'not' operator to 'i32.eqz' and add 'i64.eqz'.,1,[],https://github.com/WebAssembly/wabt/pull/56,None,7,https://github.com/WebAssembly/wabt/pull/56#issuecomment-198856125,It fitted the 'convert' type of operator so this was used - not sure if it's what you would want.,Thank you. Updated. ptal.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,56,2016-03-18T08:23:12Z,2016-03-20T06:25:36Z,2016-03-20T12:42:08Z,MERGED,True,679,687,5,None,Rename the 'not' operator to 'i32.eqz' and add 'i64.eqz'.,1,[],https://github.com/WebAssembly/wabt/pull/56,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/56#issuecomment-198858018,It fitted the 'convert' type of operator so this was used - not sure if it's what you would want.,"lgtm, thanks",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,57,2016-03-21T03:23:56Z,2016-03-22T05:30:27Z,2016-03-22T05:30:27Z,MERGED,True,4758,979,108,https://github.com/binji,Binary reader,36,[],https://github.com/WebAssembly/wabt/pull/57,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/57,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,58,2016-03-21T06:52:14Z,2016-03-21T14:47:07Z,2016-03-21T14:47:07Z,MERGED,True,382,226,5,https://github.com/binji,"remove getopt, use WasmOptionParser instead",1,[],https://github.com/WebAssembly/wabt/pull/58,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/58,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,59,2016-03-21T18:17:53Z,2016-03-21T19:52:03Z,2016-03-21T19:52:03Z,MERGED,True,23,6,3,https://github.com/binji,Add options to build without GTest submodule,1,[],https://github.com/WebAssembly/wabt/pull/59,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/59,This is used by the Wasm waterfall.,This is used by the Wasm waterfall.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,59,2016-03-21T18:17:53Z,2016-03-21T19:52:03Z,2016-03-21T19:52:03Z,MERGED,True,23,6,3,https://github.com/binji,Add options to build without GTest submodule,1,[],https://github.com/WebAssembly/wabt/pull/59,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/59#issuecomment-199410705,This is used by the Wasm waterfall.,@dschuff FYI,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,59,2016-03-21T18:17:53Z,2016-03-21T19:52:03Z,2016-03-21T19:52:03Z,MERGED,True,23,6,3,https://github.com/binji,Add options to build without GTest submodule,1,[],https://github.com/WebAssembly/wabt/pull/59,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/59#issuecomment-199412873,This is used by the Wasm waterfall.,This doesn't quite work for me when I tried it with a no-submodules checkout. Still looking into it.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,60,2016-03-21T22:24:45Z,2016-03-21T22:33:08Z,2016-03-21T22:33:08Z,MERGED,True,243,231,83,https://github.com/binji,Override exes,2,[],https://github.com/WebAssembly/wabt/pull/60,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/60,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,61,2016-03-29T12:33:11Z,2016-03-29T17:16:54Z,2016-03-29T17:16:54Z,MERGED,True,6,7,1,https://github.com/ossy-szeged,Update README.rst,1,[],https://github.com/WebAssembly/wabt/pull/61,https://github.com/ossy-szeged,1,https://github.com/WebAssembly/wabt/pull/61,"Readme isn't up-to-date, examples should be updated to work with the recent V8.","Readme isn't up-to-date, examples should be updated to work with the recent V8.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,61,2016-03-29T12:33:11Z,2016-03-29T17:16:54Z,2016-03-29T17:16:54Z,MERGED,True,6,7,1,https://github.com/ossy-szeged,Update README.rst,1,[],https://github.com/WebAssembly/wabt/pull/61,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/61#issuecomment-203007095,"Readme isn't up-to-date, examples should be updated to work with the recent V8.","lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,63,2016-04-01T22:58:52Z,2016-04-01T22:59:48Z,2016-04-01T22:59:48Z,MERGED,True,7,2,4,https://github.com/binji,add afl-fuzzing setup again to Makefile,1,[],https://github.com/WebAssembly/wabt/pull/63,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/63,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,64,2016-04-03T09:08:23Z,2016-04-03T09:26:11Z,2016-04-03T09:26:11Z,MERGED,True,411,344,2,https://github.com/binji,switch from ReST to markdown,1,[],https://github.com/WebAssembly/wabt/pull/64,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/64,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,66,2016-04-07T16:49:21Z,2016-04-16T09:14:30Z,2016-04-16T09:16:17Z,CLOSED,False,1269,398,22,None,Multiple values support.,1,[],https://github.com/WebAssembly/wabt/pull/66,None,1,https://github.com/WebAssembly/wabt/pull/66,"This is a WIP branch adding some multiple-value expression support to the interpreter. It uses bottom up typing and demonstrates that even this single pass compiler can get enough type information to generate useful output, and that adding type information to blocks is not necessary.  The code is rough, far from optimized, but this seems to be enough to demonstration the type system and the ability to handle these operations which is the main goal.
The extensions:

The values operator constructs a multiple value expression from its arguments and the values type subsumes the current void and single values types: (values) == (nop) (values (i32.const 1)) == (i32.const 1)). A single value is consumed from each argument and the rest discarded: (values (values (i32.const 1) (i32.const 2)) (values (i32.const 3) (i32.const 4)) == (values (i32.const 1) (i32.const 3))
The conc_values operator constructs a multiple value expression from the concatenation of all the values of its arguments. For example (conc_values (i32.const1) (nop) (values (i32.const 2) (i32.const 3))) == (values (i32.const1) (i32.const 2) (i32.const 3)) Valid code must have a fixed number of values for each argument to ensure that the number of consumed values for each expression is static, for example the follow is invalid: (conc_values (if (i32.const 1) (nop) (i32.const 1))). This operator would challenge top-down typing which might require encoding the number of values consumed from each argument.
The mv_call operator is similar to the call operator but accepts a single expression argument and passes all the values to the callee. For example (mv_call $f (values (i32.const1) (i32.const 2))) == (call $f (i32.const1) (i32.const 2))). This could be generalized to accept multiple arguments and concatenate all the values like conc_values but this can done with (mv_call $f (conc_values ...)) so would just be an extra convenience.
Where there are multiple exits or input/outputs for an operator, such as block/break if select, the type system accepts conflicting value types and missing values so long as they are not consumed. This makes it convenient and efficient to discard unused values which is a nice property in a language in which all operators are expressions. In the limit this gives the current behaviour for the single values types and the void/zero-value type, where single values can be discarded when not used. For example (i32.add (call $fn_returning_i32_f32) (call $fn_returning_i32)) is valid and (i32.add (call $fn_returning_i32_f32) (call $fn_returning_i32_f64)) is valid, and in both cases only the first value is consumed.
The br br_if return and potentially the br_table operators pass on all the values of their single expression. The text syntax accepts a missing expression which is encoded as a nop: (br $l) == (br $l (nop)) == (br $l (values)). For example (values (i32.const 1) (i32.const 2)) == (block (values (i32.const 1) (i32.const 2))) == (block $l (br $l (values (i32.const 1) (i32.const 2))))
Functions can return multiple values. For example (func $f1 (result i32 i64) (values (i32.const 1) (i64.const 2))) for which (call $f1) => (values (i32.const 1) (i64.const 2)). The interpreter supports returning multiple values for exported functions.
A block1 operator returns the values of the first expression and discards the values of all other block top level expressions, in contrast to the block operator that returns the values of the last expression. Combined with block this allows returning the values of an arbitrary expression in an effective block. For example (block (exp1) (block1 (exp2) (exp3))) returns the values of (exp2).
TODO Support for storing multiple values into multiple local variables would also be needed to make this viable, perhaps this could be a pick-style operation allowing some values to be ignored and some used multiple times, or just the first-n values, lots of options.
TODO Support could also be added for picking/duplicating values if this helped.

The type system:

The base types are empty and values. The empty type is the set of no types and represents the type of unreachable code. The values type is a sequence of value types, i32, i64, f32, f64, plus the union type which represents any of i32, i64, f32, or f64, plus an optional type which also includes the value being missing.
Where an expression has potentially multiple result types at runtime, the result is computed with a union operation. The union of any type with the empty type is itself. The union of values types is computed per element. If either value is the optional type or missing then the result type is optional, otherwise if the types differ the result type is union, otherwise the types are the same and this is the result type for the element. Note that this computation is an expansion of the set of result value types, not the most specific, but wasm only validly consumes values elements with a matching type, or expressions with a fixed number of values, so the union operators can be simplified to a flat sequence. For example, the precise union applied to (if (cond) (values (i32.const 1) (f32.const 2)) (values (f32.const 3) (i32.const 4))) is (or (values i32 f32) (values f32 i32)), but it is sufficient for wasm to expand this set to (values union union) == (or (values i32 i32) (values i32 i64) (values i32 f32) (values i32 f64) (values i64 i32) ...).
Type checking is a subset relationship - the actual type must be a subset of the expected type. Wasm consumers always expected a fixed number of values and all values consumed have a fixed expected type, so the expected type can not be the empty type or have values type elements of type union or optional. (Todo an expected element type for non-consumed elements). If the actual type is the empty type then this test is always true for any expected type as the empty set is a subset of all sets. If the actual and expected types are values types then all the consumed expected element types must match their respective element in the actual type, and other elements in the actual type are ignored.","This is a WIP branch adding some multiple-value expression support to the interpreter. It uses bottom up typing and demonstrates that even this single pass compiler can get enough type information to generate useful output, and that adding type information to blocks is not necessary.  The code is rough, far from optimized, but this seems to be enough to demonstration the type system and the ability to handle these operations which is the main goal.
The extensions:

The values operator constructs a multiple value expression from its arguments and the values type subsumes the current void and single values types: (values) == (nop) (values (i32.const 1)) == (i32.const 1)). A single value is consumed from each argument and the rest discarded: (values (values (i32.const 1) (i32.const 2)) (values (i32.const 3) (i32.const 4)) == (values (i32.const 1) (i32.const 3))
The conc_values operator constructs a multiple value expression from the concatenation of all the values of its arguments. For example (conc_values (i32.const1) (nop) (values (i32.const 2) (i32.const 3))) == (values (i32.const1) (i32.const 2) (i32.const 3)) Valid code must have a fixed number of values for each argument to ensure that the number of consumed values for each expression is static, for example the follow is invalid: (conc_values (if (i32.const 1) (nop) (i32.const 1))). This operator would challenge top-down typing which might require encoding the number of values consumed from each argument.
The mv_call operator is similar to the call operator but accepts a single expression argument and passes all the values to the callee. For example (mv_call $f (values (i32.const1) (i32.const 2))) == (call $f (i32.const1) (i32.const 2))). This could be generalized to accept multiple arguments and concatenate all the values like conc_values but this can done with (mv_call $f (conc_values ...)) so would just be an extra convenience.
Where there are multiple exits or input/outputs for an operator, such as block/break if select, the type system accepts conflicting value types and missing values so long as they are not consumed. This makes it convenient and efficient to discard unused values which is a nice property in a language in which all operators are expressions. In the limit this gives the current behaviour for the single values types and the void/zero-value type, where single values can be discarded when not used. For example (i32.add (call $fn_returning_i32_f32) (call $fn_returning_i32)) is valid and (i32.add (call $fn_returning_i32_f32) (call $fn_returning_i32_f64)) is valid, and in both cases only the first value is consumed.
The br br_if return and potentially the br_table operators pass on all the values of their single expression. The text syntax accepts a missing expression which is encoded as a nop: (br $l) == (br $l (nop)) == (br $l (values)). For example (values (i32.const 1) (i32.const 2)) == (block (values (i32.const 1) (i32.const 2))) == (block $l (br $l (values (i32.const 1) (i32.const 2))))
Functions can return multiple values. For example (func $f1 (result i32 i64) (values (i32.const 1) (i64.const 2))) for which (call $f1) => (values (i32.const 1) (i64.const 2)). The interpreter supports returning multiple values for exported functions.
A block1 operator returns the values of the first expression and discards the values of all other block top level expressions, in contrast to the block operator that returns the values of the last expression. Combined with block this allows returning the values of an arbitrary expression in an effective block. For example (block (exp1) (block1 (exp2) (exp3))) returns the values of (exp2).
TODO Support for storing multiple values into multiple local variables would also be needed to make this viable, perhaps this could be a pick-style operation allowing some values to be ignored and some used multiple times, or just the first-n values, lots of options.
TODO Support could also be added for picking/duplicating values if this helped.

The type system:

The base types are empty and values. The empty type is the set of no types and represents the type of unreachable code. The values type is a sequence of value types, i32, i64, f32, f64, plus the union type which represents any of i32, i64, f32, or f64, plus an optional type which also includes the value being missing.
Where an expression has potentially multiple result types at runtime, the result is computed with a union operation. The union of any type with the empty type is itself. The union of values types is computed per element. If either value is the optional type or missing then the result type is optional, otherwise if the types differ the result type is union, otherwise the types are the same and this is the result type for the element. Note that this computation is an expansion of the set of result value types, not the most specific, but wasm only validly consumes values elements with a matching type, or expressions with a fixed number of values, so the union operators can be simplified to a flat sequence. For example, the precise union applied to (if (cond) (values (i32.const 1) (f32.const 2)) (values (f32.const 3) (i32.const 4))) is (or (values i32 f32) (values f32 i32)), but it is sufficient for wasm to expand this set to (values union union) == (or (values i32 i32) (values i32 i64) (values i32 f32) (values i32 f64) (values i64 i32) ...).
Type checking is a subset relationship - the actual type must be a subset of the expected type. Wasm consumers always expected a fixed number of values and all values consumed have a fixed expected type, so the expected type can not be the empty type or have values type elements of type union or optional. (Todo an expected element type for non-consumed elements). If the actual type is the empty type then this test is always true for any expected type as the empty set is a subset of all sets. If the actual and expected types are values types then all the consumed expected element types must match their respective element in the actual type, and other elements in the actual type are ignored.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,66,2016-04-07T16:49:21Z,2016-04-16T09:14:30Z,2016-04-16T09:16:17Z,CLOSED,False,1269,398,22,None,Multiple values support.,1,[],https://github.com/WebAssembly/wabt/pull/66,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/66#issuecomment-207546228,"This is a WIP branch adding some multiple-value expression support to the interpreter. It uses bottom up typing and demonstrates that even this single pass compiler can get enough type information to generate useful output, and that adding type information to blocks is not necessary.  The code is rough, far from optimized, but this seems to be enough to demonstration the type system and the ability to handle these operations which is the main goal.
The extensions:

The values operator constructs a multiple value expression from its arguments and the values type subsumes the current void and single values types: (values) == (nop) (values (i32.const 1)) == (i32.const 1)). A single value is consumed from each argument and the rest discarded: (values (values (i32.const 1) (i32.const 2)) (values (i32.const 3) (i32.const 4)) == (values (i32.const 1) (i32.const 3))
The conc_values operator constructs a multiple value expression from the concatenation of all the values of its arguments. For example (conc_values (i32.const1) (nop) (values (i32.const 2) (i32.const 3))) == (values (i32.const1) (i32.const 2) (i32.const 3)) Valid code must have a fixed number of values for each argument to ensure that the number of consumed values for each expression is static, for example the follow is invalid: (conc_values (if (i32.const 1) (nop) (i32.const 1))). This operator would challenge top-down typing which might require encoding the number of values consumed from each argument.
The mv_call operator is similar to the call operator but accepts a single expression argument and passes all the values to the callee. For example (mv_call $f (values (i32.const1) (i32.const 2))) == (call $f (i32.const1) (i32.const 2))). This could be generalized to accept multiple arguments and concatenate all the values like conc_values but this can done with (mv_call $f (conc_values ...)) so would just be an extra convenience.
Where there are multiple exits or input/outputs for an operator, such as block/break if select, the type system accepts conflicting value types and missing values so long as they are not consumed. This makes it convenient and efficient to discard unused values which is a nice property in a language in which all operators are expressions. In the limit this gives the current behaviour for the single values types and the void/zero-value type, where single values can be discarded when not used. For example (i32.add (call $fn_returning_i32_f32) (call $fn_returning_i32)) is valid and (i32.add (call $fn_returning_i32_f32) (call $fn_returning_i32_f64)) is valid, and in both cases only the first value is consumed.
The br br_if return and potentially the br_table operators pass on all the values of their single expression. The text syntax accepts a missing expression which is encoded as a nop: (br $l) == (br $l (nop)) == (br $l (values)). For example (values (i32.const 1) (i32.const 2)) == (block (values (i32.const 1) (i32.const 2))) == (block $l (br $l (values (i32.const 1) (i32.const 2))))
Functions can return multiple values. For example (func $f1 (result i32 i64) (values (i32.const 1) (i64.const 2))) for which (call $f1) => (values (i32.const 1) (i64.const 2)). The interpreter supports returning multiple values for exported functions.
A block1 operator returns the values of the first expression and discards the values of all other block top level expressions, in contrast to the block operator that returns the values of the last expression. Combined with block this allows returning the values of an arbitrary expression in an effective block. For example (block (exp1) (block1 (exp2) (exp3))) returns the values of (exp2).
TODO Support for storing multiple values into multiple local variables would also be needed to make this viable, perhaps this could be a pick-style operation allowing some values to be ignored and some used multiple times, or just the first-n values, lots of options.
TODO Support could also be added for picking/duplicating values if this helped.

The type system:

The base types are empty and values. The empty type is the set of no types and represents the type of unreachable code. The values type is a sequence of value types, i32, i64, f32, f64, plus the union type which represents any of i32, i64, f32, or f64, plus an optional type which also includes the value being missing.
Where an expression has potentially multiple result types at runtime, the result is computed with a union operation. The union of any type with the empty type is itself. The union of values types is computed per element. If either value is the optional type or missing then the result type is optional, otherwise if the types differ the result type is union, otherwise the types are the same and this is the result type for the element. Note that this computation is an expansion of the set of result value types, not the most specific, but wasm only validly consumes values elements with a matching type, or expressions with a fixed number of values, so the union operators can be simplified to a flat sequence. For example, the precise union applied to (if (cond) (values (i32.const 1) (f32.const 2)) (values (f32.const 3) (i32.const 4))) is (or (values i32 f32) (values f32 i32)), but it is sufficient for wasm to expand this set to (values union union) == (or (values i32 i32) (values i32 i64) (values i32 f32) (values i32 f64) (values i64 i32) ...).
Type checking is a subset relationship - the actual type must be a subset of the expected type. Wasm consumers always expected a fixed number of values and all values consumed have a fixed expected type, so the expected type can not be the empty type or have values type elements of type union or optional. (Todo an expected element type for non-consumed elements). If the actual type is the empty type then this test is always true for any expected type as the empty set is a subset of all sets. If the actual and expected types are values types then all the consumed expected element types must match their respective element in the actual type, and other elements in the actual type are ignored.","Interesting, thanks for sharing this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,66,2016-04-07T16:49:21Z,2016-04-16T09:14:30Z,2016-04-16T09:16:17Z,CLOSED,False,1269,398,22,None,Multiple values support.,1,[],https://github.com/WebAssembly/wabt/pull/66,None,3,https://github.com/WebAssembly/wabt/pull/66#issuecomment-210779393,"This is a WIP branch adding some multiple-value expression support to the interpreter. It uses bottom up typing and demonstrates that even this single pass compiler can get enough type information to generate useful output, and that adding type information to blocks is not necessary.  The code is rough, far from optimized, but this seems to be enough to demonstration the type system and the ability to handle these operations which is the main goal.
The extensions:

The values operator constructs a multiple value expression from its arguments and the values type subsumes the current void and single values types: (values) == (nop) (values (i32.const 1)) == (i32.const 1)). A single value is consumed from each argument and the rest discarded: (values (values (i32.const 1) (i32.const 2)) (values (i32.const 3) (i32.const 4)) == (values (i32.const 1) (i32.const 3))
The conc_values operator constructs a multiple value expression from the concatenation of all the values of its arguments. For example (conc_values (i32.const1) (nop) (values (i32.const 2) (i32.const 3))) == (values (i32.const1) (i32.const 2) (i32.const 3)) Valid code must have a fixed number of values for each argument to ensure that the number of consumed values for each expression is static, for example the follow is invalid: (conc_values (if (i32.const 1) (nop) (i32.const 1))). This operator would challenge top-down typing which might require encoding the number of values consumed from each argument.
The mv_call operator is similar to the call operator but accepts a single expression argument and passes all the values to the callee. For example (mv_call $f (values (i32.const1) (i32.const 2))) == (call $f (i32.const1) (i32.const 2))). This could be generalized to accept multiple arguments and concatenate all the values like conc_values but this can done with (mv_call $f (conc_values ...)) so would just be an extra convenience.
Where there are multiple exits or input/outputs for an operator, such as block/break if select, the type system accepts conflicting value types and missing values so long as they are not consumed. This makes it convenient and efficient to discard unused values which is a nice property in a language in which all operators are expressions. In the limit this gives the current behaviour for the single values types and the void/zero-value type, where single values can be discarded when not used. For example (i32.add (call $fn_returning_i32_f32) (call $fn_returning_i32)) is valid and (i32.add (call $fn_returning_i32_f32) (call $fn_returning_i32_f64)) is valid, and in both cases only the first value is consumed.
The br br_if return and potentially the br_table operators pass on all the values of their single expression. The text syntax accepts a missing expression which is encoded as a nop: (br $l) == (br $l (nop)) == (br $l (values)). For example (values (i32.const 1) (i32.const 2)) == (block (values (i32.const 1) (i32.const 2))) == (block $l (br $l (values (i32.const 1) (i32.const 2))))
Functions can return multiple values. For example (func $f1 (result i32 i64) (values (i32.const 1) (i64.const 2))) for which (call $f1) => (values (i32.const 1) (i64.const 2)). The interpreter supports returning multiple values for exported functions.
A block1 operator returns the values of the first expression and discards the values of all other block top level expressions, in contrast to the block operator that returns the values of the last expression. Combined with block this allows returning the values of an arbitrary expression in an effective block. For example (block (exp1) (block1 (exp2) (exp3))) returns the values of (exp2).
TODO Support for storing multiple values into multiple local variables would also be needed to make this viable, perhaps this could be a pick-style operation allowing some values to be ignored and some used multiple times, or just the first-n values, lots of options.
TODO Support could also be added for picking/duplicating values if this helped.

The type system:

The base types are empty and values. The empty type is the set of no types and represents the type of unreachable code. The values type is a sequence of value types, i32, i64, f32, f64, plus the union type which represents any of i32, i64, f32, or f64, plus an optional type which also includes the value being missing.
Where an expression has potentially multiple result types at runtime, the result is computed with a union operation. The union of any type with the empty type is itself. The union of values types is computed per element. If either value is the optional type or missing then the result type is optional, otherwise if the types differ the result type is union, otherwise the types are the same and this is the result type for the element. Note that this computation is an expansion of the set of result value types, not the most specific, but wasm only validly consumes values elements with a matching type, or expressions with a fixed number of values, so the union operators can be simplified to a flat sequence. For example, the precise union applied to (if (cond) (values (i32.const 1) (f32.const 2)) (values (f32.const 3) (i32.const 4))) is (or (values i32 f32) (values f32 i32)), but it is sufficient for wasm to expand this set to (values union union) == (or (values i32 i32) (values i32 i64) (values i32 f32) (values i32 f64) (values i64 i32) ...).
Type checking is a subset relationship - the actual type must be a subset of the expected type. Wasm consumers always expected a fixed number of values and all values consumed have a fixed expected type, so the expected type can not be the empty type or have values type elements of type union or optional. (Todo an expected element type for non-consumed elements). If the actual type is the empty type then this test is always true for any expected type as the empty set is a subset of all sets. If the actual and expected types are values types then all the consumed expected element types must match their respective element in the actual type, and other elements in the actual type are ignored.","I see little prospect of this making the cut. A wasm focused on expressionless operators might be far simpler and meet the use cases where the call operator just returns multiple values to multiple local variables.
If I can be permitted to express an opinion. Expressions in wasm seem to have brought it well into the bike-shedding territory and made progress almost impossible. Whatever the outcome for expressions it seems that they will just be some baggage to work around, to be canonicalized into a more primitive expressionless form and re-built into expressions for presentation. The pre-order/post-order saga seems unnecessary without expressions. I have seen a number of issues with the type system and been unable to make progress. I started out thinking that expressions were the saving grace for wasm but have come full circle and have completely given up on them. Giving up on expressions in the wasm code section does not mean giving up on them in the file as a whole, as they can be rebuilt with the aid of meta information for presentation. I have re-encoded AngryBots using a simple expressionless encoding, and already uncompressed it is only 15% larger, and brotli encoded is 16% larger, and I see some prospect of closing this gap. I have explored writing a few of the expressionless instructions in v8 and their decoding seems efficient.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,67,2016-04-09T17:29:53Z,2016-04-10T02:55:42Z,2016-04-10T02:55:49Z,MERGED,True,1351,1026,35,https://github.com/binji,Various cleanup and bug fixes,6,[],https://github.com/WebAssembly/wabt/pull/67,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/67,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,68,2016-05-06T19:28:59Z,2016-05-06T20:47:23Z,2016-05-06T20:47:24Z,MERGED,True,120,34,3,https://github.com/binji,Fix a bug with bad .wasm files popping past the start of a label,3,[],https://github.com/WebAssembly/wabt/pull/68,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/68,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,69,2016-05-09T20:03:55Z,2016-05-10T18:38:26Z,2016-05-10T18:38:26Z,MERGED,True,910,674,7,https://github.com/binji,parse split segment strings; modules as binaries,1,[],https://github.com/WebAssembly/wabt/pull/69,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/69,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,70,2016-05-10T00:26:22Z,2016-05-10T20:55:08Z,2016-05-10T20:55:08Z,CLOSED,False,295,105,86,https://github.com/binji,Spidermonkey,2,[],https://github.com/WebAssembly/wabt/pull/70,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/70,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,71,2016-05-10T22:15:54Z,2016-05-12T18:16:56Z,2016-05-12T18:16:56Z,CLOSED,False,57,47,7,https://github.com/binji,fix build-sm script to use GH archive,1,[],https://github.com/WebAssembly/wabt/pull/71,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/71,"You can't git clone to a specific commit SHA, so we just download the
source archive from Github.","You can't git clone to a specific commit SHA, so we just download the
source archive from Github.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,73,2016-05-11T23:42:14Z,2016-05-12T14:33:16Z,2016-05-12T14:33:16Z,MERGED,True,687,557,12,https://github.com/binji,defer decoding binary modules in assert_invalid,1,[],https://github.com/WebAssembly/wabt/pull/73,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/73,"If we decode the binary module when parsing, then any errors will be
displayed too early. Instead, we store the binary data, ready to be
decoded.
This is only done for assert_invalid, where we assume that the module
will not actually be used. Otherwise, it is more convenient to always
have a WasmModule, so we decode directly while parsing the AST.","If we decode the binary module when parsing, then any errors will be
displayed too early. Instead, we store the binary data, ready to be
decoded.
This is only done for assert_invalid, where we assume that the module
will not actually be used. Otherwise, it is more convenient to always
have a WasmModule, so we decode directly while parsing the AST.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,74,2016-05-13T18:26:23Z,2016-05-13T21:21:34Z,2016-05-13T21:21:34Z,MERGED,True,819,753,13,https://github.com/binji,some fixes/updates to match the spec tests,1,[],https://github.com/WebAssembly/wabt/pull/74,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/74,"syntactic sugar for function exports (func ""export"" ...)
fix bug w/ source text chars >= 128 (char vs. unsigned char)
fix bug in type checker with empty expression lists","syntactic sugar for function exports (func ""export"" ...)
fix bug w/ source text chars >= 128 (char vs. unsigned char)
fix bug in type checker with empty expression lists",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,75,2016-05-16T21:34:55Z,2016-05-17T19:13:24Z,2016-05-17T19:13:24Z,MERGED,True,1700,452,16,https://github.com/binji,Update JavaScript API,5,[],https://github.com/WebAssembly/wabt/pull/75,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/75,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,76,2016-05-18T21:48:32Z,2016-05-18T21:51:13Z,2016-05-18T21:51:13Z,CLOSED,False,2227,151,28,https://github.com/binji,update spec tests,1,[],https://github.com/WebAssembly/wabt/pull/76,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/76,"Parse memory pages as uint64, as we need to check whether it's invalid
in assert_invalid, and one of the spec tests uses the value 2**32.
Update WASM_MAX_PAGES to 65535 (not 65536)
Add the new spec tests: binary.wast, break-drop.wast and
typecheck.wast. A couple of these were added before, but weren't added
as .txt files in the test directory.","Parse memory pages as uint64, as we need to check whether it's invalid
in assert_invalid, and one of the spec tests uses the value 2**32.
Update WASM_MAX_PAGES to 65535 (not 65536)
Add the new spec tests: binary.wast, break-drop.wast and
typecheck.wast. A couple of these were added before, but weren't added
as .txt files in the test directory.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,77,2016-05-23T21:53:58Z,2016-05-24T21:57:30Z,2016-05-24T21:57:31Z,MERGED,True,53,28,5,https://github.com/Cellule,Fix build for Win32,2,[],https://github.com/WebAssembly/wabt/pull/77,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/77,"Fix implementation of ctz64, clz64 & popcnt64 for Win32
Fixed a few warnings in msvc.
The current ctz implementation for 32 & 64 bits were incorrect as _BitScanForward has the same result as __builtin_ctz. I don't know why we used to do return sizeof(unsigned long) * 8 - (index + 1);
I haven't fully tested the with the product yet. I mostly focused on making sure the ctz/clz/popcnt implementations were correct.","Fix implementation of ctz64, clz64 & popcnt64 for Win32
Fixed a few warnings in msvc.
The current ctz implementation for 32 & 64 bits were incorrect as _BitScanForward has the same result as __builtin_ctz. I don't know why we used to do return sizeof(unsigned long) * 8 - (index + 1);
I haven't fully tested the with the product yet. I mostly focused on making sure the ctz/clz/popcnt implementations were correct.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,77,2016-05-23T21:53:58Z,2016-05-24T21:57:30Z,2016-05-24T21:57:31Z,MERGED,True,53,28,5,https://github.com/Cellule,Fix build for Win32,2,[],https://github.com/WebAssembly/wabt/pull/77,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/77#issuecomment-221166461,"Fix implementation of ctz64, clz64 & popcnt64 for Win32
Fixed a few warnings in msvc.
The current ctz implementation for 32 & 64 bits were incorrect as _BitScanForward has the same result as __builtin_ctz. I don't know why we used to do return sizeof(unsigned long) * 8 - (index + 1);
I haven't fully tested the with the product yet. I mostly focused on making sure the ctz/clz/popcnt implementations were correct.","Thanks, I really should test on windows more often :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,77,2016-05-23T21:53:58Z,2016-05-24T21:57:30Z,2016-05-24T21:57:31Z,MERGED,True,53,28,5,https://github.com/Cellule,Fix build for Win32,2,[],https://github.com/WebAssembly/wabt/pull/77,https://github.com/Cellule,3,https://github.com/WebAssembly/wabt/pull/77#issuecomment-221186249,"Fix implementation of ctz64, clz64 & popcnt64 for Win32
Fixed a few warnings in msvc.
The current ctz implementation for 32 & 64 bits were incorrect as _BitScanForward has the same result as __builtin_ctz. I don't know why we used to do return sizeof(unsigned long) * 8 - (index + 1);
I haven't fully tested the with the product yet. I mostly focused on making sure the ctz/clz/popcnt implementations were correct.","Alright, I'll make the changes tomorrow.
I started testing and there are a few places that needs updating, mostly because Windows uses \ in paths.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,77,2016-05-23T21:53:58Z,2016-05-24T21:57:30Z,2016-05-24T21:57:31Z,MERGED,True,53,28,5,https://github.com/Cellule,Fix build for Win32,2,[],https://github.com/WebAssembly/wabt/pull/77,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/77#issuecomment-221413401,"Fix implementation of ctz64, clz64 & popcnt64 for Win32
Fixed a few warnings in msvc.
The current ctz implementation for 32 & 64 bits were incorrect as _BitScanForward has the same result as __builtin_ctz. I don't know why we used to do return sizeof(unsigned long) * 8 - (index + 1);
I haven't fully tested the with the product yet. I mostly focused on making sure the ctz/clz/popcnt implementations were correct.","lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,78,2016-05-26T17:20:48Z,2016-06-02T16:10:22Z,2016-06-02T16:10:22Z,MERGED,True,138,9,9,https://github.com/ddcc,fix bugs found by afl and asan,1,[],https://github.com/WebAssembly/wabt/pull/78,https://github.com/ddcc,1,https://github.com/WebAssembly/wabt/pull/78,"There were a couple of integer underflows and overflows that could result in out-of-bounds memory accesses, and some uninitialized memory that could result in bad calls to the free pointer of the memory allocator.","There were a couple of integer underflows and overflows that could result in out-of-bounds memory accesses, and some uninitialized memory that could result in bad calls to the free pointer of the memory allocator.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,78,2016-05-26T17:20:48Z,2016-06-02T16:10:22Z,2016-06-02T16:10:22Z,MERGED,True,138,9,9,https://github.com/ddcc,fix bugs found by afl and asan,1,[],https://github.com/WebAssembly/wabt/pull/78,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/78#issuecomment-222058098,"There were a couple of integer underflows and overflows that could result in out-of-bounds memory accesses, and some uninitialized memory that could result in bad calls to the free pointer of the memory allocator.","Thanks for this! A few things: have you joined the community group? Also, you mention that you found these via AFL, do you have the test cases that were produced that caused these failures? It would be nice to add them as regression tests.
It looks like the Travis failure you have is due to not updating the prebuilt Bison parser, AFAICT.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,78,2016-05-26T17:20:48Z,2016-06-02T16:10:22Z,2016-06-02T16:10:22Z,MERGED,True,138,9,9,https://github.com/ddcc,fix bugs found by afl and asan,1,[],https://github.com/WebAssembly/wabt/pull/78,https://github.com/ddcc,3,https://github.com/WebAssembly/wabt/pull/78#issuecomment-222203445,"There were a couple of integer underflows and overflows that could result in out-of-bounds memory accesses, and some uninitialized memory that could result in bad calls to the free pointer of the memory allocator.","Yeah, I've joined the community group through Google. I have a couple of the test cases, but they are WASM files, and it looks like the current test infrastructure is only set up to run WAST. Additionally, they fail validation by the disassembler/assembler.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,78,2016-05-26T17:20:48Z,2016-06-02T16:10:22Z,2016-06-02T16:10:22Z,MERGED,True,138,9,9,https://github.com/ddcc,fix bugs found by afl and asan,1,[],https://github.com/WebAssembly/wabt/pull/78,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/78#issuecomment-222282596,"There were a couple of integer underflows and overflows that could result in out-of-bounds memory accesses, and some uninitialized memory that could result in bad calls to the free pointer of the memory allocator.","You can kinda write wasm files by hand (see the test/binary/* tests). It's an ad-hoc format designed to be just one step up from writing binary data directly, but you should be able to write bytes directly too.
No worries if this is too tedious to do, the fixes you have here look good already. I just wouldn't want them to break again. :) Fortunately, it looks like the new asserts should help w/ that.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,78,2016-05-26T17:20:48Z,2016-06-02T16:10:22Z,2016-06-02T16:10:22Z,MERGED,True,138,9,9,https://github.com/ddcc,fix bugs found by afl and asan,1,[],https://github.com/WebAssembly/wabt/pull/78,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/78#issuecomment-223067356,"There were a couple of integer underflows and overflows that could result in out-of-bounds memory accesses, and some uninitialized memory that could result in bad calls to the free pointer of the memory allocator.","OK, I took a look at the memory leak. It looks like the WasmMemoryWriter allocated at wasm-binary-reader-interpreter.c:1846 is leaking when the binary reading fails. It's because the writer is normally given to the output module on success via wasm_steal_mem_writer_output_buffer. So the solution is to add this to the else branch:
  } else {
    wasm_close_mem_writer(&ctx.istream_writer);
  }

Also, it looks like you broke run-tests.py by removing the --out-dir option in run-gen-wasm-interp.py.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,78,2016-05-26T17:20:48Z,2016-06-02T16:10:22Z,2016-06-02T16:10:22Z,MERGED,True,138,9,9,https://github.com/ddcc,fix bugs found by afl and asan,1,[],https://github.com/WebAssembly/wabt/pull/78,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/78#issuecomment-223340823,"There were a couple of integer underflows and overflows that could result in out-of-bounds memory accesses, and some uninitialized memory that could result in bad calls to the free pointer of the memory allocator.","Awesome, lgtm",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,80,2016-05-28T02:42:01Z,2016-05-28T03:13:07Z,2016-05-28T03:13:11Z,MERGED,True,220,63,8,https://github.com/binji,add flags to turn off AST checking in sexpr-wasm,1,[],https://github.com/WebAssembly/wabt/pull/80,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/80,"--no-check disables all checking except for validating names (without
which you couldn't generate a binary file).
--no-check-assert-invalid skips running the assert_invalid checks
in spec test files.","--no-check disables all checking except for validating names (without
which you couldn't generate a binary file).
--no-check-assert-invalid skips running the assert_invalid checks
in spec test files.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,83,2016-06-07T00:29:30Z,2016-06-07T20:59:40Z,2016-06-08T17:07:33Z,CLOSED,False,4002,4417,21,https://github.com/Cellule,Support tests for Windows,9,[],https://github.com/WebAssembly/wabt/pull/83,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/83,"Fixes #81
Implements #42
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.
Added support for ch.exe (run-js.py and polyfills in js scripts)
Todo, currently no script to build/download ch.exe it has to be built separately.
run-tests.py
Added an option to run tests in series.
Added an option to pause at first error and prompts to retry the command with verbose (in series only) then prompts if should continue testing.
Prints the last command executed on failing tests in the summary to help reproduce the error.
I think there might be still some work to be done for Windows, but I thought I would submit what I have so far.","Fixes #81
Implements #42
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.
Added support for ch.exe (run-js.py and polyfills in js scripts)
Todo, currently no script to build/download ch.exe it has to be built separately.
run-tests.py
Added an option to run tests in series.
Added an option to pause at first error and prompts to retry the command with verbose (in series only) then prompts if should continue testing.
Prints the last command executed on failing tests in the summary to help reproduce the error.
I think there might be still some work to be done for Windows, but I thought I would submit what I have so far.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,83,2016-06-07T00:29:30Z,2016-06-07T20:59:40Z,2016-06-08T17:07:33Z,CLOSED,False,4002,4417,21,https://github.com/Cellule,Support tests for Windows,9,[],https://github.com/WebAssembly/wabt/pull/83,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/83#issuecomment-224407557,"Fixes #81
Implements #42
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.
Added support for ch.exe (run-js.py and polyfills in js scripts)
Todo, currently no script to build/download ch.exe it has to be built separately.
run-tests.py
Added an option to run tests in series.
Added an option to pause at first error and prompts to retry the command with verbose (in series only) then prompts if should continue testing.
Prints the last command executed on failing tests in the summary to help reproduce the error.
I think there might be still some work to be done for Windows, but I thought I would submit what I have so far.",Any chance you can separate this into a few separate PRs? I think it will be easier to review that way.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,83,2016-06-07T00:29:30Z,2016-06-07T20:59:40Z,2016-06-08T17:07:33Z,CLOSED,False,4002,4417,21,https://github.com/Cellule,Support tests for Windows,9,[],https://github.com/WebAssembly/wabt/pull/83,https://github.com/Cellule,3,https://github.com/WebAssembly/wabt/pull/83#issuecomment-224408651,"Fixes #81
Implements #42
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.
Added support for ch.exe (run-js.py and polyfills in js scripts)
Todo, currently no script to build/download ch.exe it has to be built separately.
run-tests.py
Added an option to run tests in series.
Added an option to pause at first error and prompts to retry the command with verbose (in series only) then prompts if should continue testing.
Prints the last command executed on failing tests in the summary to help reproduce the error.
I think there might be still some work to be done for Windows, but I thought I would submit what I have so far.",Sure I'll see what I can do,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,83,2016-06-07T00:29:30Z,2016-06-07T20:59:40Z,2016-06-08T17:07:33Z,CLOSED,False,4002,4417,21,https://github.com/Cellule,Support tests for Windows,9,[],https://github.com/WebAssembly/wabt/pull/83,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/83#issuecomment-224660117,"Fixes #81
Implements #42
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.
Added support for ch.exe (run-js.py and polyfills in js scripts)
Todo, currently no script to build/download ch.exe it has to be built separately.
run-tests.py
Added an option to run tests in series.
Added an option to pause at first error and prompts to retry the command with verbose (in series only) then prompts if should continue testing.
Prints the last command executed on failing tests in the summary to help reproduce the error.
I think there might be still some work to be done for Windows, but I thought I would submit what I have so far.",Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,84,2016-06-07T20:58:28Z,2016-08-04T08:07:19Z,2016-08-04T08:09:17Z,CLOSED,False,3,11,2,https://github.com/Cellule,Make return arity 1 only if function return type is not void,1,[],https://github.com/WebAssembly/wabt/pull/84,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/84,"Fixes #82
Determine the arity of the return opcode from the return type instead of the presence of an expression next to it.
Fix the faulty baseline for spec/functions.txt","Fixes #82
Determine the arity of the return opcode from the return type instead of the presence of an expression next to it.
Fix the faulty baseline for spec/functions.txt",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,84,2016-06-07T20:58:28Z,2016-08-04T08:07:19Z,2016-08-04T08:09:17Z,CLOSED,False,3,11,2,https://github.com/Cellule,Make return arity 1 only if function return type is not void,1,[],https://github.com/WebAssembly/wabt/pull/84,https://github.com/Cellule,2,https://github.com/WebAssembly/wabt/pull/84#issuecomment-237482752,"Fixes #82
Determine the arity of the return opcode from the return type instead of the presence of an expression next to it.
Fix the faulty baseline for spec/functions.txt",No longer needed by WebAssembly/design#741,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,85,2016-06-07T23:01:39Z,2016-06-07T23:49:52Z,2016-06-07T23:49:52Z,MERGED,True,1,0,1,https://github.com/njuwangchen,update the step of cloning,1,[],https://github.com/WebAssembly/wabt/pull/85,https://github.com/njuwangchen,1,https://github.com/WebAssembly/wabt/pull/85,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,85,2016-06-07T23:01:39Z,2016-06-07T23:49:52Z,2016-06-07T23:49:52Z,MERGED,True,1,0,1,https://github.com/njuwangchen,update the step of cloning,1,[],https://github.com/WebAssembly/wabt/pull/85,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/85#issuecomment-224448148,,Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,86,2016-06-08T01:08:12Z,2016-06-17T18:26:31Z,2016-08-04T08:08:49Z,MERGED,True,3757,4334,14,https://github.com/Cellule,Fix Windows,6,[],https://github.com/WebAssembly/wabt/pull/86,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/86,"Fixes #81
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.","Fixes #81
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,86,2016-06-08T01:08:12Z,2016-06-17T18:26:31Z,2016-08-04T08:08:49Z,MERGED,True,3757,4334,14,https://github.com/Cellule,Fix Windows,6,[],https://github.com/WebAssembly/wabt/pull/86,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/86#issuecomment-224665115,"Fixes #81
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.","The Travis build seems to be failing, any idea what's broken?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,86,2016-06-08T01:08:12Z,2016-06-17T18:26:31Z,2016-08-04T08:08:49Z,MERGED,True,3757,4334,14,https://github.com/Cellule,Fix Windows,6,[],https://github.com/WebAssembly/wabt/pull/86,https://github.com/Cellule,3,https://github.com/WebAssembly/wabt/pull/86#issuecomment-224666634,"Fixes #81
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.","There seems to be a problem with the json encoding, I'll verify.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,86,2016-06-08T01:08:12Z,2016-06-17T18:26:31Z,2016-08-04T08:08:49Z,MERGED,True,3757,4334,14,https://github.com/Cellule,Fix Windows,6,[],https://github.com/WebAssembly/wabt/pull/86,https://github.com/Cellule,4,https://github.com/WebAssembly/wabt/pull/86#issuecomment-224734943,"Fixes #81
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.","It doesn't repro on my Linux box, can you verify if it repros for you ?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,86,2016-06-08T01:08:12Z,2016-06-17T18:26:31Z,2016-08-04T08:08:49Z,MERGED,True,3757,4334,14,https://github.com/Cellule,Fix Windows,6,[],https://github.com/WebAssembly/wabt/pull/86,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/86#issuecomment-224763876,"Fixes #81
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.","Yeah, it looks like it is happening because the filename isn't null-terminated.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,86,2016-06-08T01:08:12Z,2016-06-17T18:26:31Z,2016-08-04T08:08:49Z,MERGED,True,3757,4334,14,https://github.com/Cellule,Fix Windows,6,[],https://github.com/WebAssembly/wabt/pull/86,https://github.com/Cellule,6,https://github.com/WebAssembly/wabt/pull/86#issuecomment-224779300,"Fixes #81
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.","Thanks, I forgot that strlen() didn't count the null terminator",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,86,2016-06-08T01:08:12Z,2016-06-17T18:26:31Z,2016-08-04T08:08:49Z,MERGED,True,3757,4334,14,https://github.com/Cellule,Fix Windows,6,[],https://github.com/WebAssembly/wabt/pull/86,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/86#issuecomment-224952377,"Fixes #81
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.",lgtm w/ a few nits,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,86,2016-06-08T01:08:12Z,2016-06-17T18:26:31Z,2016-08-04T08:08:49Z,MERGED,True,3757,4334,14,https://github.com/Cellule,Fix Windows,6,[],https://github.com/WebAssembly/wabt/pull/86,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/86#issuecomment-226845277,"Fixes #81
Several forward & backward slash fixes where paths were assumed to always have forward slash.
Changed stdout/stderr output to binary to eliminate \r\r\n outputs
Changed the lexer to use binary files and teach it about carriage return when searching for line offset.
-fseek() on an offset taken from a text file in mode text is unreliable because there can be some conversion on fread() (e.g.: \r\n => \n)
Changed the diff tool to remove/ignore end lines, there were too many differences between the output on Windows and Linux with end lines.","Sorry, forgot to merge this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,87,2016-06-08T01:08:44Z,2016-06-08T17:09:25Z,2016-08-04T08:09:04Z,MERGED,True,37,10,5,https://github.com/Cellule,Teach test scripts about ch.exe,1,[],https://github.com/WebAssembly/wabt/pull/87,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/87,"Added support for ch.exe (run-js.py and polyfills in js scripts)
Todo, currently no script to build/download ch.exe it has to be built separately.","Added support for ch.exe (run-js.py and polyfills in js scripts)
Todo, currently no script to build/download ch.exe it has to be built separately.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,87,2016-06-08T01:08:44Z,2016-06-08T17:09:25Z,2016-08-04T08:09:04Z,MERGED,True,37,10,5,https://github.com/Cellule,Teach test scripts about ch.exe,1,[],https://github.com/WebAssembly/wabt/pull/87,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/87#issuecomment-224660691,"Added support for ch.exe (run-js.py and polyfills in js scripts)
Todo, currently no script to build/download ch.exe it has to be built separately.","lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,88,2016-06-08T01:10:21Z,2016-06-17T18:32:28Z,2016-08-04T08:09:08Z,MERGED,True,229,58,7,https://github.com/Cellule,Tests verbosity,3,[],https://github.com/WebAssembly/wabt/pull/88,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/88,"Implements #42
Closes #44 ?
Added an option to run tests in series.
Added an option to pause at first error and prompts to retry the command with verbose (in series only) then prompts if should continue testing.
Prints the last command executed on failing tests in the summary to help reproduce the error.
Theses options helps to reproduced and see what is causing a test to fail","Implements #42
Closes #44 ?
Added an option to run tests in series.
Added an option to pause at first error and prompts to retry the command with verbose (in series only) then prompts if should continue testing.
Prints the last command executed on failing tests in the summary to help reproduce the error.
Theses options helps to reproduced and see what is causing a test to fail",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,88,2016-06-08T01:10:21Z,2016-06-17T18:32:28Z,2016-08-04T08:09:08Z,MERGED,True,229,58,7,https://github.com/Cellule,Tests verbosity,3,[],https://github.com/WebAssembly/wabt/pull/88,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/88#issuecomment-224716138,"Implements #42
Closes #44 ?
Added an option to run tests in series.
Added an option to pause at first error and prompts to retry the command with verbose (in series only) then prompts if should continue testing.
Prints the last command executed on failing tests in the summary to help reproduce the error.
Theses options helps to reproduced and see what is causing a test to fail","Thanks, a few suggestions but otherwise looks good. Looking forward to having --print-cmd :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,88,2016-06-08T01:10:21Z,2016-06-17T18:32:28Z,2016-08-04T08:09:08Z,MERGED,True,229,58,7,https://github.com/Cellule,Tests verbosity,3,[],https://github.com/WebAssembly/wabt/pull/88,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/88#issuecomment-226846765,"Implements #42
Closes #44 ?
Added an option to run tests in series.
Added an option to pause at first error and prompts to retry the command with verbose (in series only) then prompts if should continue testing.
Prints the last command executed on failing tests in the summary to help reproduce the error.
Theses options helps to reproduced and see what is causing a test to fail","Sorry, should have reviewed this before. :-}
lgtm",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,89,2016-06-13T20:43:33Z,2016-06-17T20:36:59Z,2016-06-17T20:37:01Z,MERGED,True,3,3783,102,https://github.com/binji,remove JavaScript engine testing,1,[],https://github.com/WebAssembly/wabt/pull/89,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/89,"It's not really the appropriate place to handle it. Now that we have
wasm-wast and wasm-interp, we can at least verify that the tools are
internally consistent.
Resolves #79.","It's not really the appropriate place to handle it. Now that we have
wasm-wast and wasm-interp, we can at least verify that the tools are
internally consistent.
Resolves #79.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,89,2016-06-13T20:43:33Z,2016-06-17T20:36:59Z,2016-06-17T20:37:01Z,MERGED,True,3,3783,102,https://github.com/binji,remove JavaScript engine testing,1,[],https://github.com/WebAssembly/wabt/pull/89,https://github.com/Cellule,2,https://github.com/WebAssembly/wabt/pull/89#issuecomment-226669281,"It's not really the appropriate place to handle it. Now that we have
wasm-wast and wasm-interp, we can at least verify that the tools are
internally consistent.
Resolves #79.","This looks good to me, pretty much the same changes I made when testing on my side.
👍",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,90,2016-06-17T22:42:24Z,2016-06-24T20:46:22Z,2016-06-25T01:46:03Z,MERGED,True,5928,4417,48,https://github.com/binji,Fix tests after testsuite update,1,[],https://github.com/WebAssembly/wabt/pull/90,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/90,"Modify AST parser to disallow any other order than param, result,
local.
Allow parsing all var integers as int64 (the lookups will fail later.)
Fix interpreter logic determining whether to adjust the stack; we were
correctly handling the case where unreachable was being used in an
expression (the value stack is adjusted ""up"" as if a value was
actually produced), but the same behavior is required for br,
br_table and return.","Modify AST parser to disallow any other order than param, result,
local.
Allow parsing all var integers as int64 (the lookups will fail later.)
Fix interpreter logic determining whether to adjust the stack; we were
correctly handling the case where unreachable was being used in an
expression (the value stack is adjusted ""up"" as if a value was
actually produced), but the same behavior is required for br,
br_table and return.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,90,2016-06-17T22:42:24Z,2016-06-24T20:46:22Z,2016-06-25T01:46:03Z,MERGED,True,5928,4417,48,https://github.com/binji,Fix tests after testsuite update,1,[],https://github.com/WebAssembly/wabt/pull/90,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/90#issuecomment-226898438,"Modify AST parser to disallow any other order than param, result,
local.
Allow parsing all var integers as int64 (the lookups will fail later.)
Fix interpreter logic determining whether to adjust the stack; we were
correctly handling the case where unreachable was being used in an
expression (the value stack is adjusted ""up"" as if a value was
actually produced), but the same behavior is required for br,
br_table and return.","Can't land this yet, need to wait for https://github.com/WebAssembly/testsuite to update.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,90,2016-06-17T22:42:24Z,2016-06-24T20:46:22Z,2016-06-25T01:46:03Z,MERGED,True,5928,4417,48,https://github.com/binji,Fix tests after testsuite update,1,[],https://github.com/WebAssembly/wabt/pull/90,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/90#issuecomment-228457717,"Modify AST parser to disallow any other order than param, result,
local.
Allow parsing all var integers as int64 (the lookups will fail later.)
Fix interpreter logic determining whether to adjust the stack; we were
correctly handling the case where unreachable was being used in an
expression (the value stack is adjusted ""up"" as if a value was
actually produced), but the same behavior is required for br,
br_table and return.","testsuite updated, landing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,91,2016-07-06T21:06:28Z,2016-07-06T22:25:09Z,2016-07-06T22:25:11Z,MERGED,True,324,66,25,https://github.com/binji,functions have an implicit block scope,1,[],https://github.com/WebAssembly/wabt/pull/91,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/91,"(func (br 0)) is valid, because the function introduces an implicit
block scope. This change also updates the testsuite (which has tests for
this behavior).","(func (br 0)) is valid, because the function introduces an implicit
block scope. This change also updates the testsuite (which has tests for
this behavior).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,93,2016-07-18T22:25:34Z,2016-07-18T23:34:12Z,2016-07-18T23:34:13Z,MERGED,True,161,134,12,https://github.com/binji,WasmFuncDeclaration does not always set `sig`,1,[],https://github.com/WebAssembly/wabt/pull/93,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/93,"Prior to this change, the AST parser would always set sig, even if the
function had no explicit signature (i.e. it used a function type
variable instead).
This is OK, but it makes the flag confusing.
WASM_FUNC_DECLARATION_FLAG_HAS_SIGNATURE will be clear and
wasm_decl_has_signature will return false, but sig will be valid.
This change makes it so sig is only set when there is an explicit
signature. The correct way to get the function signature is to call
wasm_decl_get_signature, which will check whether there is a func
type, and if not, will check for an explicit function signature.","Prior to this change, the AST parser would always set sig, even if the
function had no explicit signature (i.e. it used a function type
variable instead).
This is OK, but it makes the flag confusing.
WASM_FUNC_DECLARATION_FLAG_HAS_SIGNATURE will be clear and
wasm_decl_has_signature will return false, but sig will be valid.
This change makes it so sig is only set when there is an explicit
signature. The correct way to get the function signature is to call
wasm_decl_get_signature, which will check whether there is a func
type, and if not, will check for an explicit function signature.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,94,2016-07-20T22:51:27Z,2016-07-20T22:53:01Z,2016-07-20T22:53:03Z,MERGED,True,763,2,3,https://github.com/binji,use the wasm-wast verbose flag,1,[],https://github.com/WebAssembly/wabt/pull/94,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/94,"The --verbose flag has been there for a while, but wasn't hooked up to
anything. Now it displays info while reading from the binary file, which
could be useful for debugging.","The --verbose flag has been there for a while, but wasn't hooked up to
anything. Now it displays info while reading from the binary file, which
could be useful for debugging.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,95,2016-08-04T08:11:27Z,2016-08-04T23:23:21Z,2016-08-05T01:38:31Z,MERGED,True,7,5,3,https://github.com/Cellule,Fix warnings visual studio,1,[],https://github.com/WebAssembly/wabt/pull/95,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/95,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,95,2016-08-04T08:11:27Z,2016-08-04T23:23:21Z,2016-08-05T01:38:31Z,MERGED,True,7,5,3,https://github.com/Cellule,Fix warnings visual studio,1,[],https://github.com/WebAssembly/wabt/pull/95,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/95#issuecomment-237715277,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,96,2016-08-05T01:26:43Z,2016-08-05T03:15:18Z,2016-08-05T03:15:19Z,MERGED,True,988,669,50,https://github.com/binji,"update testsuite, handle implicit func types",1,[],https://github.com/WebAssembly/wabt/pull/96,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/96,"Change 7c482b1a of the spec repo now requires that implicit function
types are created when creating a new func or import, but only when the
type is not explicitly specified, and the have not been specified. For
example:
(func (param i32))
(import ""foo"" ""bar"" (result i32)

This was previously done in sexpr-wasm when writing the binary, but now
these types can be referenced by call_import, so it has to be handled
earlier.
Since all signatures are now defined in the module, I made it so the
function signature is shared with the module function types. The tricky
part here is when a function type and an explicit signature are both
specified:
(func (type $t) (param f32) ...)

In this case, we need to keep the explicit signature around long enough
to be checked against the function type, so it must be owned by the
function. The WASM_FUNC_DECLARATION_FLAG_SHARED_SIGNATURE flag specifies
this case.
To simplify code that uses the AST, I reverted many of the
changes introduced in 73e5bc7. Now the function declaration's signature
is always valid to access, and will have been resolved if it was
specified with a func type instead of an explicit signature.
Some other changes:

There was a bug in the interpreter's f32.demote/f64 rounding when
given a value that is very close to positive or negative F32_MAX
Added update-spec-tests.py to more easily update the spec tests in
test/interp/spec/*.txt from the files in
third_party/testsuite/*.wast. Previously I would just do it
manually.","Change 7c482b1a of the spec repo now requires that implicit function
types are created when creating a new func or import, but only when the
type is not explicitly specified, and the have not been specified. For
example:
(func (param i32))
(import ""foo"" ""bar"" (result i32)

This was previously done in sexpr-wasm when writing the binary, but now
these types can be referenced by call_import, so it has to be handled
earlier.
Since all signatures are now defined in the module, I made it so the
function signature is shared with the module function types. The tricky
part here is when a function type and an explicit signature are both
specified:
(func (type $t) (param f32) ...)

In this case, we need to keep the explicit signature around long enough
to be checked against the function type, so it must be owned by the
function. The WASM_FUNC_DECLARATION_FLAG_SHARED_SIGNATURE flag specifies
this case.
To simplify code that uses the AST, I reverted many of the
changes introduced in 73e5bc7. Now the function declaration's signature
is always valid to access, and will have been resolved if it was
specified with a func type instead of an explicit signature.
Some other changes:

There was a bug in the interpreter's f32.demote/f64 rounding when
given a value that is very close to positive or negative F32_MAX
Added update-spec-tests.py to more easily update the spec tests in
test/interp/spec/*.txt from the files in
third_party/testsuite/*.wast. Previously I would just do it
manually.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,97,2016-08-23T08:54:45Z,2016-08-23T16:49:15Z,2016-08-23T16:49:15Z,MERGED,True,3,1,1,https://github.com/gahaas,Fix error message in the generated invoke function,1,[],https://github.com/WebAssembly/wabt/pull/97,https://github.com/gahaas,1,https://github.com/WebAssembly/wabt/pull/97,"The error message wanted to print some file name and line number, but these values are not passed to invoke(). Additionally I propose to increase the passed and failed counters in invoke.","The error message wanted to print some file name and line number, but these values are not passed to invoke(). Additionally I propose to increase the passed and failed counters in invoke.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,97,2016-08-23T08:54:45Z,2016-08-23T16:49:15Z,2016-08-23T16:49:15Z,MERGED,True,3,1,1,https://github.com/gahaas,Fix error message in the generated invoke function,1,[],https://github.com/WebAssembly/wabt/pull/97,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/97#issuecomment-241797865,"The error message wanted to print some file name and line number, but these values are not passed to invoke(). Additionally I propose to increase the passed and failed counters in invoke.","lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,102,2016-09-20T22:07:21Z,2016-09-21T21:44:10Z,2016-09-21T21:44:10Z,MERGED,True,59,48,10,https://github.com/citisolo,PR for Rename sexpr-wasm binaries #100,8,[],https://github.com/WebAssembly/wabt/pull/102,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/102,"Hi , I have renamed the binaries  to the suggested names and created some symlinks that keep the testsuite (sexpr-wasm -> wast2wasm and wasm-wast -> wasm2wast) in-tact","Hi , I have renamed the binaries  to the suggested names and created some symlinks that keep the testsuite (sexpr-wasm -> wast2wasm and wasm-wast -> wasm2wast) in-tact",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,102,2016-09-20T22:07:21Z,2016-09-21T21:44:10Z,2016-09-21T21:44:10Z,MERGED,True,59,48,10,https://github.com/citisolo,PR for Rename sexpr-wasm binaries #100,8,[],https://github.com/WebAssembly/wabt/pull/102,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/102#issuecomment-248679803,"Hi , I have renamed the binaries  to the suggested names and created some symlinks that keep the testsuite (sexpr-wasm -> wast2wasm and wasm-wast -> wasm2wast) in-tact","Oh, and have you joined the WebAssembly community group?",True,{'THUMBS_UP': ['https://github.com/citisolo']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,103,2016-09-21T21:41:55Z,2016-09-21T23:30:00Z,2016-09-21T23:30:04Z,MERGED,True,10,8,6,https://github.com/sbc100,Improve error message on bad file version,1,[],https://github.com/WebAssembly/wabt/pull/103,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/103,"As a newcomer it was not obvious what version wasm-interp
was expecting and what I had provided.","As a newcomer it was not obvious what version wasm-interp
was expecting and what I had provided.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,103,2016-09-21T21:41:55Z,2016-09-21T23:30:00Z,2016-09-21T23:30:04Z,MERGED,True,10,8,6,https://github.com/sbc100,Improve error message on bad file version,1,[],https://github.com/WebAssembly/wabt/pull/103,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/103#issuecomment-248752073,"As a newcomer it was not obvious what version wasm-interp
was expecting and what I had provided.",lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,103,2016-09-21T21:41:55Z,2016-09-21T23:30:00Z,2016-09-21T23:30:04Z,MERGED,True,10,8,6,https://github.com/sbc100,Improve error message on bad file version,1,[],https://github.com/WebAssembly/wabt/pull/103,https://github.com/KarlSchimpf,3,https://github.com/WebAssembly/wabt/pull/103#issuecomment-248752382,"As a newcomer it was not obvious what version wasm-interp
was expecting and what I had provided.","LGTM
Karl Schimpf
On Wed, Sep 21, 2016 at 2:43 PM, Ben Smith notifications@github.com wrote:

lgtm
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#103 (comment),
or mute the thread
https://github.com/notifications/unsubscribe-auth/ALRbVzqQJBTnsHYwiQxFLFHeW9Yqpkpbks5qsaUbgaJpZM4KDT1d
.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,103,2016-09-21T21:41:55Z,2016-09-21T23:30:00Z,2016-09-21T23:30:04Z,MERGED,True,10,8,6,https://github.com/sbc100,Improve error message on bad file version,1,[],https://github.com/WebAssembly/wabt/pull/103,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/103#issuecomment-248773027,"As a newcomer it was not obvious what version wasm-interp
was expecting and what I had provided.","I was waiting for Travis, but the mac builds are really slow.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,104,2016-09-22T01:05:24Z,2016-09-23T01:39:37Z,2016-09-23T01:39:42Z,MERGED,True,120,123,59,https://github.com/sbc100,Fix broken 'run-tests' target,1,[],https://github.com/WebAssembly/wabt/pull/104,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/104,"This is followup to (#102) which renamed the executable
files.  It propagated the rename the tools and test
runner.
It also fixes the 'run-tests' target which was passing
the wrong argument name to the run_tests.py script.","This is followup to (#102) which renamed the executable
files.  It propagated the rename the tools and test
runner.
It also fixes the 'run-tests' target which was passing
the wrong argument name to the run_tests.py script.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,104,2016-09-22T01:05:24Z,2016-09-23T01:39:37Z,2016-09-23T01:39:42Z,MERGED,True,120,123,59,https://github.com/sbc100,Fix broken 'run-tests' target,1,[],https://github.com/WebAssembly/wabt/pull/104,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/104#issuecomment-248970710,"This is followup to (#102) which renamed the executable
files.  It propagated the rename the tools and test
runner.
It also fixes the 'run-tests' target which was passing
the wrong argument name to the run_tests.py script.",Seems broken on Travis: scripts/travis-test.sh: line 56: SEXPR2WASM: unbound variable,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,104,2016-09-22T01:05:24Z,2016-09-23T01:39:37Z,2016-09-23T01:39:42Z,MERGED,True,120,123,59,https://github.com/sbc100,Fix broken 'run-tests' target,1,[],https://github.com/WebAssembly/wabt/pull/104,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/104#issuecomment-249075509,"This is followup to (#102) which renamed the executable
files.  It propagated the rename the tools and test
runner.
It also fixes the 'run-tests' target which was passing
the wrong argument name to the run_tests.py script.",Good to go now.  Can you take one more look since I made a few more changed to make the bots happy.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,104,2016-09-22T01:05:24Z,2016-09-23T01:39:37Z,2016-09-23T01:39:42Z,MERGED,True,120,123,59,https://github.com/sbc100,Fix broken 'run-tests' target,1,[],https://github.com/WebAssembly/wabt/pull/104,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/104#issuecomment-249078428,"This is followup to (#102) which renamed the executable
files.  It propagated the rename the tools and test
runner.
It also fixes the 'run-tests' target which was passing
the wrong argument name to the run_tests.py script.",lgtm!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,105,2016-09-22T22:14:09Z,2016-09-23T00:42:40Z,2016-09-23T00:42:43Z,MERGED,True,852,950,106,https://github.com/binji,fix the test/parse/* tests for binary_0xc,1,[],https://github.com/WebAssembly/wabt/pull/105,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/105,@sbc100 PTAL,@sbc100 PTAL,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,106,2016-09-22T22:28:19Z,2016-09-23T01:06:54Z,2016-09-23T01:06:54Z,CLOSED,False,885,983,120,https://github.com/binji,Binary 0xc rename import export tests,2,[],https://github.com/WebAssembly/wabt/pull/106,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/106,depends on #105.,depends on #105.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,107,2016-09-23T03:51:01Z,2016-09-23T17:37:49Z,2016-09-23T18:17:02Z,MERGED,True,174,76,24,https://github.com/binji,"parse tests for {im,ex}porting tables, etc.",1,[],https://github.com/WebAssembly/wabt/pull/107,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/107,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,108,2016-09-23T21:16:35Z,2016-09-23T21:43:25Z,2016-09-23T21:43:34Z,MERGED,True,233,172,21,https://github.com/binji,fix binary tests for binary_0xc,1,[],https://github.com/WebAssembly/wabt/pull/108,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/108,@sbc100 @KarlSchimpf PTAL,@sbc100 @KarlSchimpf PTAL,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,109,2016-09-23T21:46:18Z,2016-09-23T21:57:04Z,2016-09-23T21:57:04Z,MERGED,True,74,67,9,https://github.com/binji,fix roundtrip tests for binary_0xc,1,[],https://github.com/WebAssembly/wabt/pull/109,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/109,Also fix writing user-defined sections.,Also fix writing user-defined sections.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,109,2016-09-23T21:46:18Z,2016-09-23T21:57:04Z,2016-09-23T21:57:04Z,MERGED,True,74,67,9,https://github.com/binji,fix roundtrip tests for binary_0xc,1,[],https://github.com/WebAssembly/wabt/pull/109,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/109#issuecomment-249310290,Also fix writing user-defined sections.,@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,110,2016-09-23T21:54:59Z,2016-09-23T23:16:27Z,2016-09-23T23:16:27Z,CLOSED,False,24,22,12,https://github.com/binji,fix typecheck and regress tests for binary_0xc,1,[],https://github.com/WebAssembly/wabt/pull/110,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/110,@sbc100 @KarlSchimpf,@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/111,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.","Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.",True,{'THUMBS_UP': ['https://github.com/sbc100']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249658547,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.","I figured it'd be better to wait to change the code until after 0xc lands, and change URL references until we change the repo name (presumably we do want to do that?)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249658712,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.","(oh also you'll notice that I'm proposing that WABT be the way we spell the name in text, rather than ""wabbit"").",True,{'THUMBS_UP': ['https://github.com/sbc100']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/dschuff,4,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249659052,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.",Implements part of #101,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249662482,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.",I like the spelling.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249669904,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.","lgtm, I guess I figured it would be fine to rename the repo first, because GH automatically redirects anyway. But we can wait and do it after 0xc lands instead.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/dschuff,7,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249674758,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.","Oh, I didn't realize that GH will redirect the URLs. I guess it doesn't really matter. Anyway this is pretty independent and can go in whenever. Is renaming the repo something that you can do? Or do we have to get one of the admins to do it?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/dschuff,8,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249675512,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.",wrt 0xc I was mostly concerned about conflicts in the code but there's actually not mention of sexpr-anything in there anyway. So yeah let's just rename the repo and I'll update the rest of README.md in this PR.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/binji,9,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249687220,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.","Pretty sure it redirects... maybe? :)
And yeah, I can't rename but I think @s3ththompson can.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/s3ththompson,10,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249707069,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.","Yes repo URLs as well as git requests all redirect from previous location. Let me know explicitly whenever you're ready to change and I'll rename!
(As an aside, I have a minor preference for keeping wabt lowercase in (just) the repo name given GitHub naming trends, but that's a minor detail)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/dschuff,11,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249708552,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.",I'm ready whenever @binji is :) lowercase wabt is fine for the repo name.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/binji,12,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249727563,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.","Yep, ready whenever. Shouldn't break anything. fingers crossed",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,111,2016-09-26T18:39:10Z,2016-09-27T00:26:00Z,2016-09-27T00:26:11Z,MERGED,True,16,6,2,https://github.com/dschuff,Introduction to WABT,4,[],https://github.com/WebAssembly/wabt/pull/111,https://github.com/s3ththompson,13,https://github.com/WebAssembly/wabt/pull/111#issuecomment-249728502,"Introduces the name change from ""sexpr-wasm-prototype"" to WABT in
README.md but does not yet change all the URL references or code
references.",Done! Added some next steps in #101,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,112,2016-09-27T00:59:38Z,2016-09-27T15:57:46Z,2016-10-07T05:57:46Z,MERGED,True,1,1,1,https://github.com/dschuff,Update Travis links for wabt,1,[],https://github.com/WebAssembly/wabt/pull/112,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/112,Travis seems to have updated.,Travis seems to have updated.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,113,2016-09-27T19:02:16Z,2016-09-27T20:42:55Z,2016-09-27T20:42:55Z,MERGED,True,569,764,37,https://github.com/binji,fix most of the interp tests,1,[],https://github.com/WebAssembly/wabt/pull/113,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/113,Still need to do imports,Still need to do imports,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,113,2016-09-27T19:02:16Z,2016-09-27T20:42:55Z,2016-09-27T20:42:55Z,MERGED,True,569,764,37,https://github.com/binji,fix most of the interp tests,1,[],https://github.com/WebAssembly/wabt/pull/113,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/113#issuecomment-249964649,Still need to do imports,@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,114,2016-09-28T02:14:39Z,2016-09-28T05:47:32Z,2016-09-28T05:47:32Z,MERGED,True,2,3,1,https://github.com/creationix,Use `--recursive` in clone example to make easier.,1,[],https://github.com/WebAssembly/wabt/pull/114,https://github.com/creationix,1,https://github.com/WebAssembly/wabt/pull/114,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,114,2016-09-28T02:14:39Z,2016-09-28T05:47:32Z,2016-09-28T05:47:32Z,MERGED,True,2,3,1,https://github.com/creationix,Use `--recursive` in clone example to make easier.,1,[],https://github.com/WebAssembly/wabt/pull/114,https://github.com/creationix,2,https://github.com/WebAssembly/wabt/pull/114#issuecomment-250054032,,I can change the commit message or add a description to this PR if there is a preferred format.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,114,2016-09-28T02:14:39Z,2016-09-28T05:47:32Z,2016-09-28T05:47:32Z,MERGED,True,2,3,1,https://github.com/creationix,Use `--recursive` in clone example to make easier.,1,[],https://github.com/WebAssembly/wabt/pull/114,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/114#issuecomment-250077564,,"lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,115,2016-09-28T15:41:16Z,2016-09-28T19:09:37Z,2016-09-28T19:09:42Z,MERGED,True,316,0,6,https://github.com/KarlSchimpf,Add diagnostic tool to count usage of opcodes in wasm files.,7,[],https://github.com/WebAssembly/wabt/pull/115,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/115,Adds diagnostic tool wasmoptcnt to take a wasm file and write out the number of times each opcode is used.,Adds diagnostic tool wasmoptcnt to take a wasm file and write out the number of times each opcode is used.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,116,2016-09-28T19:18:34Z,2016-09-28T19:19:21Z,2016-09-28T19:23:41Z,CLOSED,False,21253,17111,493,https://github.com/KarlSchimpf,Fix travis builds,30,[],https://github.com/WebAssembly/wabt/pull/116,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/116,Adds patches to remove problems with Travis builds.,Adds patches to remove problems with Travis builds.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,117,2016-09-28T19:34:29Z,2016-09-28T22:18:46Z,2016-09-28T22:39:35Z,MERGED,True,8,1,4,https://github.com/KarlSchimpf,Fix Travis build issues.,6,[],https://github.com/WebAssembly/wabt/pull/117,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/117,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,117,2016-09-28T19:34:29Z,2016-09-28T22:18:46Z,2016-09-28T22:39:35Z,MERGED,True,8,1,4,https://github.com/KarlSchimpf,Fix Travis build issues.,6,[],https://github.com/WebAssembly/wabt/pull/117,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/117#issuecomment-250288366,,"cool, lgtm",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,117,2016-09-28T19:34:29Z,2016-09-28T22:18:46Z,2016-09-28T22:39:35Z,MERGED,True,8,1,4,https://github.com/KarlSchimpf,Fix Travis build issues.,6,[],https://github.com/WebAssembly/wabt/pull/117,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/117#issuecomment-250289910,,"At this point we should probably just do what all the other cross-platform projects do and have some things like  #define WABT_UNUSED(value) void(value) and maybe also something like
/// LLVM_BUILTIN_UNREACHABLE - On compilers which support it, expands
/// to an expression which states that it is undefined behavior for the
/// compiler to reach this point.  Otherwise is not defined.
#if __has_builtin(__builtin_unreachable) || LLVM_GNUC_PREREQ(4, 5, 0)
# define LLVM_BUILTIN_UNREACHABLE __builtin_unreachable()
#elif defined(_MSC_VER)
# define LLVM_BUILTIN_UNREACHABLE __assume(false)
#endif",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,117,2016-09-28T19:34:29Z,2016-09-28T22:18:46Z,2016-09-28T22:39:35Z,MERGED,True,8,1,4,https://github.com/KarlSchimpf,Fix Travis build issues.,6,[],https://github.com/WebAssembly/wabt/pull/117,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/117#issuecomment-250294674,,"Agree about #define WABT_UNUSED(value) void(value), I thought I already had that, actually. Though I already use WASM_UNUSED for __attribute__((unused)), so I was thinking of calling it WASM_USE.
Switching WASM over to WABT is a good idea, but I'd prefer doing that separately.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,117,2016-09-28T19:34:29Z,2016-09-28T22:18:46Z,2016-09-28T22:39:35Z,MERGED,True,8,1,4,https://github.com/KarlSchimpf,Fix Travis build issues.,6,[],https://github.com/WebAssembly/wabt/pull/117,https://github.com/dschuff,5,https://github.com/WebAssembly/wabt/pull/117#issuecomment-250299074,,Could call them WASM_ATTRIBUTE_UNUSED and maybe something like UNREFERENCED_PARAMETER like we have in NaCl? Athough i guess parameter isn't quite right for this case.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,117,2016-09-28T19:34:29Z,2016-09-28T22:18:46Z,2016-09-28T22:39:35Z,MERGED,True,8,1,4,https://github.com/KarlSchimpf,Fix Travis build issues.,6,[],https://github.com/WebAssembly/wabt/pull/117,https://github.com/KarlSchimpf,6,https://github.com/WebAssembly/wabt/pull/117#issuecomment-250301482,,"Defined WABT_BUILTIN_UNREACHABLE and changed code to use WASM_USE(x).  Undid non C99 change, and will fix later (by forcing compilers to use C99).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,117,2016-09-28T19:34:29Z,2016-09-28T22:18:46Z,2016-09-28T22:39:35Z,MERGED,True,8,1,4,https://github.com/KarlSchimpf,Fix Travis build issues.,6,[],https://github.com/WebAssembly/wabt/pull/117,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/117#issuecomment-250309655,,"The WABT vs. WASM prefix is tickling my OCD a little, but I'll get over it. :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,120,2016-09-28T22:33:08Z,2016-09-28T22:40:37Z,2016-09-28T22:40:37Z,CLOSED,False,5,0,1,https://github.com/binji,disable interp/ and spec/ tests to make build green,1,[],https://github.com/WebAssembly/wabt/pull/120,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/120,We'll re-enable these as we fix the tests.,We'll re-enable these as we fix the tests.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,120,2016-09-28T22:33:08Z,2016-09-28T22:40:37Z,2016-09-28T22:40:37Z,CLOSED,False,5,0,1,https://github.com/binji,disable interp/ and spec/ tests to make build green,1,[],https://github.com/WebAssembly/wabt/pull/120,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/120#issuecomment-250321165,We'll re-enable these as we fix the tests.,@KarlSchimpf @sbc100,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,121,2016-09-28T22:40:00Z,2016-09-29T14:24:16Z,2016-09-29T14:24:19Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix non-assert use of result in sprint_limits.,2,[],https://github.com/WebAssembly/wabt/pull/121,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/121,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,121,2016-09-28T22:40:00Z,2016-09-29T14:24:16Z,2016-09-29T14:24:19Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix non-assert use of result in sprint_limits.,2,[],https://github.com/WebAssembly/wabt/pull/121,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/121#issuecomment-250323196,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,122,2016-09-28T22:48:02Z,2016-09-28T23:43:32Z,2016-09-28T23:43:34Z,MERGED,True,1,1,1,https://github.com/binji,update spec tests to HEAD,1,[],https://github.com/WebAssembly/wabt/pull/122,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/122,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,122,2016-09-28T22:48:02Z,2016-09-28T23:43:32Z,2016-09-28T23:43:34Z,MERGED,True,1,1,1,https://github.com/binji,update spec tests to HEAD,1,[],https://github.com/WebAssembly/wabt/pull/122,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/122#issuecomment-250332212,,I assume this is HEAD of the binary_0xc branch of https://github.com/WebAssembly/testsuite which in turn matches the contents of the HEAD of the binary_0xc branch of the spec repo?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,122,2016-09-28T22:48:02Z,2016-09-28T23:43:32Z,2016-09-28T23:43:34Z,MERGED,True,1,1,1,https://github.com/binji,update spec tests to HEAD,1,[],https://github.com/WebAssembly/wabt/pull/122,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/122#issuecomment-250332304,,"Yep, I'll update the comment to make that clearer.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,123,2016-09-29T00:38:02Z,2016-09-29T01:10:03Z,2016-09-29T01:10:06Z,MERGED,True,5,2,1,https://github.com/sbc100,Add `install` build target,1,[],https://github.com/WebAssembly/wabt/pull/123,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/123,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,123,2016-09-29T00:38:02Z,2016-09-29T01:10:03Z,2016-09-29T01:10:06Z,MERGED,True,5,2,1,https://github.com/sbc100,Add `install` build target,1,[],https://github.com/WebAssembly/wabt/pull/123,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/123#issuecomment-250341293,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,124,2016-09-29T01:10:03Z,2016-09-29T16:55:15Z,2016-09-29T16:55:15Z,CLOSED,False,334,353,6,https://github.com/binji,fix ASAN and LSAN builds,1,[],https://github.com/WebAssembly/wabt/pull/124,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/124,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,124,2016-09-29T01:10:03Z,2016-09-29T16:55:15Z,2016-09-29T16:55:15Z,CLOSED,False,334,353,6,https://github.com/binji,fix ASAN and LSAN builds,1,[],https://github.com/WebAssembly/wabt/pull/124,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/124#issuecomment-250345082,,@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,125,2016-09-29T15:16:21Z,2016-09-29T18:27:41Z,2016-09-29T18:27:44Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix initialization errors in Travis for read_table and read_memory.,2,[],https://github.com/WebAssembly/wabt/pull/125,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/125,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,125,2016-09-29T15:16:21Z,2016-09-29T18:27:41Z,2016-09-29T18:27:44Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix initialization errors in Travis for read_table and read_memory.,2,[],https://github.com/WebAssembly/wabt/pull/125,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/125#issuecomment-250504305,,What tool is it that finds these?  Are they actually used before they are written to?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,125,2016-09-29T15:16:21Z,2016-09-29T18:27:41Z,2016-09-29T18:27:44Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix initialization errors in Travis for read_table and read_memory.,2,[],https://github.com/WebAssembly/wabt/pull/125,https://github.com/KarlSchimpf,3,https://github.com/WebAssembly/wabt/pull/125#issuecomment-250504783,,"The gcc tools (on Travis) generate these warnings, which are then converted to errors.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,125,2016-09-29T15:16:21Z,2016-09-29T18:27:41Z,2016-09-29T18:27:44Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix initialization errors in Travis for read_table and read_memory.,2,[],https://github.com/WebAssembly/wabt/pull/125,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/125#issuecomment-250505589,,"Interesting, are they just being conservative and saying that all locals must be initialized?   I don't know what ben's policy has been so far for stuff like this.  @binji?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,125,2016-09-29T15:16:21Z,2016-09-29T18:27:41Z,2016-09-29T18:27:44Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix initialization errors in Travis for read_table and read_memory.,2,[],https://github.com/WebAssembly/wabt/pull/125,https://github.com/KarlSchimpf,5,https://github.com/WebAssembly/wabt/pull/125#issuecomment-250507859,,"I looked a little harder.
I just realized that in_u32_leb128 has an else clause RAISE_ERROR() that doesn't assign out_value. Hence the problem. I will fix by fixing that case instead!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,125,2016-09-29T15:16:21Z,2016-09-29T18:27:41Z,2016-09-29T18:27:44Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix initialization errors in Travis for read_table and read_memory.,2,[],https://github.com/WebAssembly/wabt/pull/125,https://github.com/KarlSchimpf,6,https://github.com/WebAssembly/wabt/pull/125#issuecomment-250535096,,"Ok, fixing the else case in in_u32_leb128 to assign the output argument fixes the problem. Please review again.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,125,2016-09-29T15:16:21Z,2016-09-29T18:27:41Z,2016-09-29T18:27:44Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix initialization errors in Travis for read_table and read_memory.,2,[],https://github.com/WebAssembly/wabt/pull/125,https://github.com/KarlSchimpf,7,https://github.com/WebAssembly/wabt/pull/125#issuecomment-250535251,,"The remaining problems are more ""import"" tests that are failing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,125,2016-09-29T15:16:21Z,2016-09-29T18:27:41Z,2016-09-29T18:27:44Z,MERGED,True,1,0,1,https://github.com/KarlSchimpf,Fix initialization errors in Travis for read_table and read_memory.,2,[],https://github.com/WebAssembly/wabt/pull/125,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/125#issuecomment-250550800,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,126,2016-09-29T18:53:32Z,2016-09-29T18:54:34Z,2016-09-30T22:45:59Z,MERGED,True,21288,17151,494,https://github.com/binji,Merging binary-0xc into master,36,[],https://github.com/WebAssembly/wabt/pull/126,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/126,"(I'm going to do this manually, but I thought I should make a PR for it anyway).","(I'm going to do this manually, but I thought I should make a PR for it anyway).",True,{'HOORAY': ['https://github.com/dschuff']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,127,2016-09-29T21:20:31Z,2016-09-29T21:27:00Z,2016-09-29T21:27:08Z,MERGED,True,6,0,1,https://github.com/jgravelle-google,Update known test failures for 0xc,1,[],https://github.com/WebAssembly/wabt/pull/127,https://github.com/jgravelle-google,1,https://github.com/WebAssembly/wabt/pull/127,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,128,2016-09-29T21:45:04Z,2016-09-30T22:05:26Z,2016-09-30T22:05:27Z,MERGED,True,403,265,8,https://github.com/binji,fix interp tests,1,[],https://github.com/WebAssembly/wabt/pull/128,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/128,"elem segment entries should be func_index not sig_index
change the call_stack and value_stack tops to pointers instead of
integers; this is more convenient for the interpreter, and means we
don't have to convert back and forth between the two when calling to
helper functions (e.g. call_import)
pass dummy results WasmInterpreterTypedValueVector to
run_export_wrapper, it's required now
rename all uses of vs_ -> value_stack_, cs_ -> call_stack_
destroy the func_imports array when destroying the
WasmInterpreterModule.","elem segment entries should be func_index not sig_index
change the call_stack and value_stack tops to pointers instead of
integers; this is more convenient for the interpreter, and means we
don't have to convert back and forth between the two when calling to
helper functions (e.g. call_import)
pass dummy results WasmInterpreterTypedValueVector to
run_export_wrapper, it's required now
rename all uses of vs_ -> value_stack_, cs_ -> call_stack_
destroy the func_imports array when destroying the
WasmInterpreterModule.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,128,2016-09-29T21:45:04Z,2016-09-30T22:05:26Z,2016-09-30T22:05:27Z,MERGED,True,403,265,8,https://github.com/binji,fix interp tests,1,[],https://github.com/WebAssembly/wabt/pull/128,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/128#issuecomment-250600578,"elem segment entries should be func_index not sig_index
change the call_stack and value_stack tops to pointers instead of
integers; this is more convenient for the interpreter, and means we
don't have to convert back and forth between the two when calling to
helper functions (e.g. call_import)
pass dummy results WasmInterpreterTypedValueVector to
run_export_wrapper, it's required now
rename all uses of vs_ -> value_stack_, cs_ -> call_stack_
destroy the func_imports array when destroying the
WasmInterpreterModule.","Ah, just realized I merged some other stuff into this commit, so the description doesn't have all the changes.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,128,2016-09-29T21:45:04Z,2016-09-30T22:05:26Z,2016-09-30T22:05:27Z,MERGED,True,403,265,8,https://github.com/binji,fix interp tests,1,[],https://github.com/WebAssembly/wabt/pull/128,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/128#issuecomment-250604322,"elem segment entries should be func_index not sig_index
change the call_stack and value_stack tops to pointers instead of
integers; this is more convenient for the interpreter, and means we
don't have to convert back and forth between the two when calling to
helper functions (e.g. call_import)
pass dummy results WasmInterpreterTypedValueVector to
run_export_wrapper, it's required now
rename all uses of vs_ -> value_stack_, cs_ -> call_stack_
destroy the func_imports array when destroying the
WasmInterpreterModule.",@sbc100 @KarlSchimpf take a look at the most recent commit description for more info,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,128,2016-09-29T21:45:04Z,2016-09-30T22:05:26Z,2016-09-30T22:05:27Z,MERGED,True,403,265,8,https://github.com/binji,fix interp tests,1,[],https://github.com/WebAssembly/wabt/pull/128,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/128#issuecomment-250857941,"elem segment entries should be func_index not sig_index
change the call_stack and value_stack tops to pointers instead of
integers; this is more convenient for the interpreter, and means we
don't have to convert back and forth between the two when calling to
helper functions (e.g. call_import)
pass dummy results WasmInterpreterTypedValueVector to
run_export_wrapper, it's required now
rename all uses of vs_ -> value_stack_, cs_ -> call_stack_
destroy the func_imports array when destroying the
WasmInterpreterModule.",ping,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,129,2016-09-29T23:30:42Z,2016-09-30T18:48:19Z,2016-09-30T18:48:19Z,MERGED,True,1588,1482,9,https://github.com/binji,parse assert_malformed and assert_unlinkable,1,[],https://github.com/WebAssembly/wabt/pull/129,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/129,These are not implemented yet.,These are not implemented yet.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,129,2016-09-29T23:30:42Z,2016-09-30T18:48:19Z,2016-09-30T18:48:19Z,MERGED,True,1588,1482,9,https://github.com/binji,parse assert_malformed and assert_unlinkable,1,[],https://github.com/WebAssembly/wabt/pull/129,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/129#issuecomment-250621166,These are not implemented yet.,@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,130,2016-09-29T23:43:44Z,2016-09-30T06:55:51Z,2016-09-30T06:55:53Z,MERGED,True,11,15,4,https://github.com/binji,fix a bug when checking whether a segment is valid,1,[],https://github.com/WebAssembly/wabt/pull/130,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/130,"A segment has to fit in the initial size, not the max size. Also, when
building on a 32-bit arch, the offset must be cast to a 64-bit int so
the overflow check works properly.","A segment has to fit in the initial size, not the max size. Also, when
building on a 32-bit arch, the offset must be cast to a 64-bit int so
the overflow check works properly.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,134,2016-09-30T19:26:24Z,2016-09-30T19:49:23Z,2016-09-30T20:40:36Z,MERGED,True,0,6,1,https://github.com/sbc100,Remove known failures related to `call_indirect with no table`,1,[],https://github.com/WebAssembly/wabt/pull/134,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/134,These are now passing on the waterfall.,These are now passing on the waterfall.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,134,2016-09-30T19:26:24Z,2016-09-30T19:49:23Z,2016-09-30T20:40:36Z,MERGED,True,0,6,1,https://github.com/sbc100,Remove known failures related to `call_indirect with no table`,1,[],https://github.com/WebAssembly/wabt/pull/134,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/134#issuecomment-250831730,These are now passing on the waterfall.,"@jgravelle-google @dschuff, this is due to recent binaryan fix right?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,134,2016-09-30T19:26:24Z,2016-09-30T19:49:23Z,2016-09-30T20:40:36Z,MERGED,True,0,6,1,https://github.com/sbc100,Remove known failures related to `call_indirect with no table`,1,[],https://github.com/WebAssembly/wabt/pull/134,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/134#issuecomment-250846974,These are now passing on the waterfall.,"Yes, from WebAssembly/binaryen#722, thanks for the fix.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,135,2016-09-30T21:35:06Z,2016-09-30T21:52:02Z,2016-09-30T21:52:02Z,CLOSED,False,10,3,2,https://github.com/binji,fix typechecking bug in `check_n_types`,1,[],https://github.com/WebAssembly/wabt/pull/135,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/135,"Given a type stack and a block signature , check_n_types should check
that the signature is at the top of the stack. For example:
type stack:       [... , i32, f32, i32]
block signature:  [f32, i32]
A block signature with > 1 types is not currently allowed, but is
supported in the code.
The previous code was wrong, and only checked that the signature was at
the bottom of the type stack, in reverse.","Given a type stack and a block signature , check_n_types should check
that the signature is at the top of the stack. For example:
type stack:       [... , i32, f32, i32]
block signature:  [f32, i32]
A block signature with > 1 types is not currently allowed, but is
supported in the code.
The previous code was wrong, and only checked that the signature was at
the bottom of the type stack, in reverse.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,135,2016-09-30T21:35:06Z,2016-09-30T21:52:02Z,2016-09-30T21:52:02Z,CLOSED,False,10,3,2,https://github.com/binji,fix typechecking bug in `check_n_types`,1,[],https://github.com/WebAssembly/wabt/pull/135,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/135#issuecomment-250857917,"Given a type stack and a block signature , check_n_types should check
that the signature is at the top of the stack. For example:
type stack:       [... , i32, f32, i32]
block signature:  [f32, i32]
A block signature with > 1 types is not currently allowed, but is
supported in the code.
The previous code was wrong, and only checked that the signature was at
the bottom of the type stack, in reverse.",@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,136,2016-09-30T22:12:25Z,2016-09-30T22:46:26Z,2016-10-03T17:37:19Z,MERGED,True,4,0,1,https://github.com/dschuff,"Implement logging_on_{memory,table}_count",4,[],https://github.com/WebAssembly/wabt/pull/136,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/136,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,136,2016-09-30T22:12:25Z,2016-09-30T22:46:26Z,2016-10-03T17:37:19Z,MERGED,True,4,0,1,https://github.com/dschuff,"Implement logging_on_{memory,table}_count",4,[],https://github.com/WebAssembly/wabt/pull/136,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/136#issuecomment-250868921,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,137,2016-09-30T22:17:58Z,2016-09-30T22:32:39Z,2016-09-30T22:32:40Z,MERGED,True,33,34,4,https://github.com/binji,br_table depth immediates are LEB128,1,[],https://github.com/WebAssembly/wabt/pull/137,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/137,This fixes issue #133.,This fixes issue #133.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,138,2016-09-30T23:09:51Z,2016-09-30T23:36:14Z,2016-09-30T23:36:14Z,MERGED,True,16,27,5,https://github.com/binji,br_if keeps its value on the stack,1,[],https://github.com/WebAssembly/wabt/pull/138,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/138,This fixes issue #131.,This fixes issue #131.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,138,2016-09-30T23:09:51Z,2016-09-30T23:36:14Z,2016-09-30T23:36:14Z,MERGED,True,16,27,5,https://github.com/binji,br_if keeps its value on the stack,1,[],https://github.com/WebAssembly/wabt/pull/138,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/138#issuecomment-250872605,This fixes issue #131.,@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,140,2016-09-30T23:58:34Z,2016-10-01T04:10:50Z,2016-10-01T04:10:51Z,MERGED,True,456,364,69,https://github.com/binji,append END opcode at end of function,1,[],https://github.com/WebAssembly/wabt/pull/140,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/140,This fixes #132.,This fixes #132.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,140,2016-09-30T23:58:34Z,2016-10-01T04:10:50Z,2016-10-01T04:10:51Z,MERGED,True,456,364,69,https://github.com/binji,append END opcode at end of function,1,[],https://github.com/WebAssembly/wabt/pull/140,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/140#issuecomment-250877939,This fixes #132.,@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,141,2016-10-02T21:46:26Z,2016-10-03T18:06:28Z,2016-10-03T18:06:29Z,MERGED,True,94,44,11,https://github.com/binji,fix displayed index when writing out wast files,1,[],https://github.com/WebAssembly/wabt/pull/141,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/141,"Also:

change block comment to ""label"" instead of ""exit""
remove text parameter to write_end_block, it's always ""end""
write decimal float values for float constants (it's easier to read
than hex floats)
fix assertion in begin_global_init_expr, it wasn't taking into account
imported globals
add some new tests that show the correct indexing behavior when
importing funcs, tables, memories and globals","Also:

change block comment to ""label"" instead of ""exit""
remove text parameter to write_end_block, it's always ""end""
write decimal float values for float constants (it's easier to read
than hex floats)
fix assertion in begin_global_init_expr, it wasn't taking into account
imported globals
add some new tests that show the correct indexing behavior when
importing funcs, tables, memories and globals",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,142,2016-10-03T20:58:06Z,2016-10-03T22:40:41Z,2016-10-04T09:21:57Z,MERGED,True,155,59,9,https://github.com/binji,implement assert_malformed,1,[],https://github.com/WebAssembly/wabt/pull/142,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/142,"Checking for malformed modules is almost the same as checking for
invalid modules, the difference being that assert_malformed only tries
to decode the binary format, but doesn't do any other validation.

Renamed check_assert_invalid -> check_assert_invalid_and_malformed
Add wasm_default_assert_malformed_source_error_callback, which is the
same as the assert_invalid one, but prints out ""assert_malformed""
instead
Add some basic tests for assert_malformed","Checking for malformed modules is almost the same as checking for
invalid modules, the difference being that assert_malformed only tries
to decode the binary format, but doesn't do any other validation.

Renamed check_assert_invalid -> check_assert_invalid_and_malformed
Add wasm_default_assert_malformed_source_error_callback, which is the
same as the assert_invalid one, but prints out ""assert_malformed""
instead
Add some basic tests for assert_malformed",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,144,2016-10-04T16:08:53Z,2016-10-04T16:15:57Z,2016-10-04T16:15:57Z,MERGED,True,4,0,2,https://github.com/binji,fix bug defining a global by an imported global,1,[],https://github.com/WebAssembly/wabt/pull/144,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/144,"Because the index space of globals merges imported and defined locals,
the checker's Context::current_global_index must be incremented for when
checking both.
Fixes #143.","Because the index space of globals merges imported and defined locals,
the checker's Context::current_global_index must be incremented for when
checking both.
Fixes #143.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,144,2016-10-04T16:08:53Z,2016-10-04T16:15:57Z,2016-10-04T16:15:57Z,MERGED,True,4,0,2,https://github.com/binji,fix bug defining a global by an imported global,1,[],https://github.com/WebAssembly/wabt/pull/144,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/144#issuecomment-251434619,"Because the index space of globals merges imported and defined locals,
the checker's Context::current_global_index must be incremented for when
checking both.
Fixes #143.",@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,145,2016-10-05T04:06:14Z,2016-10-05T16:32:42Z,2016-10-05T16:32:45Z,MERGED,True,16,2,2,https://github.com/sbc100,Fix crash bug when -d specified without -v,1,[],https://github.com/WebAssembly/wabt/pull/145,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/145,"Initialize the s_log_stream in all cases since its
used with -v and -d both.
Add a test for -d on its own.","Initialize the s_log_stream in all cases since its
used with -v and -d both.
Add a test for -d on its own.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,145,2016-10-05T04:06:14Z,2016-10-05T16:32:42Z,2016-10-05T16:32:45Z,MERGED,True,16,2,2,https://github.com/sbc100,Fix crash bug when -d specified without -v,1,[],https://github.com/WebAssembly/wabt/pull/145,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/145#issuecomment-251583397,"Initialize the s_log_stream in all cases since its
used with -v and -d both.
Add a test for -d on its own.",oops! lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,146,2016-10-05T07:32:08Z,2016-10-05T16:57:06Z,2016-10-05T16:57:06Z,CLOSED,False,63,32,3,https://github.com/binji,don't try to evaluate imported globals,1,[],https://github.com/WebAssembly/wabt/pull/146,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/146,"Imported globals don't have an initializer expression until they're
linked, so they can't be evaluated in the normal check pass.","Imported globals don't have an initializer expression until they're
linked, so they can't be evaluated in the normal check pass.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,146,2016-10-05T07:32:08Z,2016-10-05T16:57:06Z,2016-10-05T16:57:06Z,CLOSED,False,63,32,3,https://github.com/binji,don't try to evaluate imported globals,1,[],https://github.com/WebAssembly/wabt/pull/146,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/146#issuecomment-251602777,"Imported globals don't have an initializer expression until they're
linked, so they can't be evaluated in the normal check pass.",@dschuff,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,146,2016-10-05T07:32:08Z,2016-10-05T16:57:06Z,2016-10-05T16:57:06Z,CLOSED,False,63,32,3,https://github.com/binji,don't try to evaluate imported globals,1,[],https://github.com/WebAssembly/wabt/pull/146,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/146#issuecomment-251603892,"Imported globals don't have an initializer expression until they're
linked, so they can't be evaluated in the normal check pass.",This is another bug exposed by the example in #143.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,146,2016-10-05T07:32:08Z,2016-10-05T16:57:06Z,2016-10-05T16:57:06Z,CLOSED,False,63,32,3,https://github.com/binji,don't try to evaluate imported globals,1,[],https://github.com/WebAssembly/wabt/pull/146,https://github.com/dschuff,4,https://github.com/WebAssembly/wabt/pull/146#issuecomment-251710397,"Imported globals don't have an initializer expression until they're
linked, so they can't be evaluated in the normal check pass.","lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,147,2016-10-05T20:55:44Z,2016-10-12T00:06:27Z,2016-10-12T00:06:36Z,MERGED,True,166,122,8,https://github.com/sbc100,Add WasmBinaryReaderContext type which is passed to reader callback,1,[],https://github.com/WebAssembly/wabt/pull/147,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/147,"This includes the user_data pointer that was previously
passed but also includes information about the current
reader context such as the offset with in the binary.","This includes the user_data pointer that was previously
passed but also includes information about the current
reader context such as the offset with in the binary.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,147,2016-10-05T20:55:44Z,2016-10-12T00:06:27Z,2016-10-12T00:06:36Z,MERGED,True,166,122,8,https://github.com/sbc100,Add WasmBinaryReaderContext type which is passed to reader callback,1,[],https://github.com/WebAssembly/wabt/pull/147,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/147#issuecomment-251797291,"This includes the user_data pointer that was previously
passed but also includes information about the current
reader context such as the offset with in the binary.",@binji does this approach look reasonable?  I've only changed on_error and begin_signature_section callbacks so far.. what to check I'm on the right track.  (doing this without copying the data would require a bigger refactor I think).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,147,2016-10-05T20:55:44Z,2016-10-12T00:06:27Z,2016-10-12T00:06:36Z,MERGED,True,166,122,8,https://github.com/sbc100,Add WasmBinaryReaderContext type which is passed to reader callback,1,[],https://github.com/WebAssembly/wabt/pull/147,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/147#issuecomment-252798633,"This includes the user_data pointer that was previously
passed but also includes information about the current
reader context such as the offset with in the binary.",@binji PTAL,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,148,2016-10-06T00:24:18Z,2016-10-06T20:30:29Z,2016-10-06T20:30:30Z,MERGED,True,2049,2279,70,https://github.com/binji,Fix most of the spec tests,1,[],https://github.com/WebAssembly/wabt/pull/148,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/148,"The only ones that are failing are imports, exports, linking and start.
Fixes:

Make sure to assign loc_ for WasmVar
Imports must occur before any definition, not just a definition of the
same kind
Check that load/store alignment is not larger than natural alignment
Always check type stack at the end of the check_block; that way an
empty block is still validated
Only allow one memory or table, including imports
Don't allow importing or exporting mutable globals
Loop label signature is for the fallthrough at the bottom, not the
branch target. This was implemented properly in the AST checker, but
not in binary-reader-interpreter
top_type_is_any will check if there is ANY anywhere on the type
stack; previously this check did not look past the top label's type
stack limit
drop_types_for_return may be called without having enough values on
the type stack; for example, at the end of a function the ends with
return
properly handle cleaning up the type stack for the interpreter when
branching to the implicit function label
rename invoke -> action a few places","The only ones that are failing are imports, exports, linking and start.
Fixes:

Make sure to assign loc_ for WasmVar
Imports must occur before any definition, not just a definition of the
same kind
Check that load/store alignment is not larger than natural alignment
Always check type stack at the end of the check_block; that way an
empty block is still validated
Only allow one memory or table, including imports
Don't allow importing or exporting mutable globals
Loop label signature is for the fallthrough at the bottom, not the
branch target. This was implemented properly in the AST checker, but
not in binary-reader-interpreter
top_type_is_any will check if there is ANY anywhere on the type
stack; previously this check did not look past the top label's type
stack limit
drop_types_for_return may be called without having enough values on
the type stack; for example, at the end of a function the ends with
return
properly handle cleaning up the type stack for the interpreter when
branching to the implicit function label
rename invoke -> action a few places",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,148,2016-10-06T00:24:18Z,2016-10-06T20:30:29Z,2016-10-06T20:30:30Z,MERGED,True,2049,2279,70,https://github.com/binji,Fix most of the spec tests,1,[],https://github.com/WebAssembly/wabt/pull/148,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/148#issuecomment-251836818,"The only ones that are failing are imports, exports, linking and start.
Fixes:

Make sure to assign loc_ for WasmVar
Imports must occur before any definition, not just a definition of the
same kind
Check that load/store alignment is not larger than natural alignment
Always check type stack at the end of the check_block; that way an
empty block is still validated
Only allow one memory or table, including imports
Don't allow importing or exporting mutable globals
Loop label signature is for the fallthrough at the bottom, not the
branch target. This was implemented properly in the AST checker, but
not in binary-reader-interpreter
top_type_is_any will check if there is ANY anywhere on the type
stack; previously this check did not look past the top label's type
stack limit
drop_types_for_return may be called without having enough values on
the type stack; for example, at the end of a function the ends with
return
properly handle cleaning up the type stack for the interpreter when
branching to the implicit function label
rename invoke -> action a few places","@KarlSchimpf @sbc100
This is a pretty big PR, but a lot of the bulk is just rebasing the tests. I can split it up if that would make it easier to review, though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,149,2016-10-06T19:03:17Z,2016-10-06T22:30:59Z,2016-10-06T22:31:03Z,MERGED,True,458,37,4,https://github.com/KarlSchimpf,"Collect commonly used  instructions, not just opcodes.",4,[],https://github.com/WebAssembly/wabt/pull/149,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/149,Extends wasmopcodecnt to find most commonly used instructions as well (based on results of AngryBots12.wasm).,Extends wasmopcodecnt to find most commonly used instructions as well (based on results of AngryBots12.wasm).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,149,2016-10-06T19:03:17Z,2016-10-06T22:30:59Z,2016-10-06T22:31:03Z,MERGED,True,458,37,4,https://github.com/KarlSchimpf,"Collect commonly used  instructions, not just opcodes.",4,[],https://github.com/WebAssembly/wabt/pull/149,https://github.com/KarlSchimpf,2,https://github.com/WebAssembly/wabt/pull/149#issuecomment-252088950,Extends wasmopcodecnt to find most commonly used instructions as well (based on results of AngryBots12.wasm).,Fixed issues raised by binji.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,150,2016-10-06T21:21:30Z,2016-10-06T22:50:28Z,2016-10-06T22:50:28Z,MERGED,True,2246,2231,78,https://github.com/binji,Refactor all uses of s_opcode_ to use functions,1,[],https://github.com/WebAssembly/wabt/pull/150,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/150,@KarlSchimpf,@KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,151,2016-10-06T21:41:34Z,2016-10-06T22:51:00Z,2016-10-06T22:51:00Z,CLOSED,False,24,7,1,https://github.com/binji,Allow adding elem segments to imported table,1,[],https://github.com/WebAssembly/wabt/pull/151,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/151,"This was allowed by the AST checker, but not the binary reader.
This fixes another bug parsing emscripten's hello world wast (see issue #143).","This was allowed by the AST checker, but not the binary reader.
This fixes another bug parsing emscripten's hello world wast (see issue #143).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,151,2016-10-06T21:41:34Z,2016-10-06T22:51:00Z,2016-10-06T22:51:00Z,CLOSED,False,24,7,1,https://github.com/binji,Allow adding elem segments to imported table,1,[],https://github.com/WebAssembly/wabt/pull/151,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/151#issuecomment-252097498,"This was allowed by the AST checker, but not the binary reader.
This fixes another bug parsing emscripten's hello world wast (see issue #143).",So fast. :-) Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,153,2016-10-07T02:49:02Z,2016-10-07T21:26:05Z,2016-10-07T21:26:08Z,MERGED,True,386,379,1,https://github.com/sbc100,Split out read_function_body into its own funcion,1,[],https://github.com/WebAssembly/wabt/pull/153,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/153,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,154,2016-10-07T02:59:56Z,2016-10-07T16:59:55Z,2016-12-09T19:45:10Z,MERGED,True,4858,4856,73,https://github.com/sbc100,Remove trailing whitespace from hexdumps,1,[],https://github.com/WebAssembly/wabt/pull/154,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/154,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,155,2016-10-07T21:04:44Z,2016-10-07T21:31:02Z,2016-10-07T21:31:02Z,CLOSED,False,240,354,11,https://github.com/binji,Fix start spec test,1,[],https://github.com/WebAssembly/wabt/pull/155,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/155,"Rename call_import -> call_host
Move host func callback to WasmInterpreterThread
Export call_host as wasm_call_host
In general, use function indexes instead of function offsets into the
instruction stream
modify run_function to use a function index, so it works with host
functions or defined functions","Rename call_import -> call_host
Move host func callback to WasmInterpreterThread
Export call_host as wasm_call_host
In general, use function indexes instead of function offsets into the
instruction stream
modify run_function to use a function index, so it works with host
functions or defined functions",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,155,2016-10-07T21:04:44Z,2016-10-07T21:31:02Z,2016-10-07T21:31:02Z,CLOSED,False,240,354,11,https://github.com/binji,Fix start spec test,1,[],https://github.com/WebAssembly/wabt/pull/155,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/155#issuecomment-252365501,"Rename call_import -> call_host
Move host func callback to WasmInterpreterThread
Export call_host as wasm_call_host
In general, use function indexes instead of function offsets into the
instruction stream
modify run_function to use a function index, so it works with host
functions or defined functions","Yeah, a little better... :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,157,2016-10-07T23:06:03Z,2016-10-11T21:38:43Z,2016-10-11T21:38:44Z,CLOSED,False,137,464,7,https://github.com/binji,Fix emscripten build to work with 0xc,1,[],https://github.com/WebAssembly/wabt/pull/157,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/157,Also remove all the interpreter stuff. It's still in flux.,Also remove all the interpreter stuff. It's still in flux.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,157,2016-10-07T23:06:03Z,2016-10-11T21:38:43Z,2016-10-11T21:38:44Z,CLOSED,False,137,464,7,https://github.com/binji,Fix emscripten build to work with 0xc,1,[],https://github.com/WebAssembly/wabt/pull/157,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/157#issuecomment-252386624,Also remove all the interpreter stuff. It's still in flux.,@KarlSchimpf @sbc100,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,157,2016-10-07T23:06:03Z,2016-10-11T21:38:43Z,2016-10-11T21:38:44Z,CLOSED,False,137,464,7,https://github.com/binji,Fix emscripten build to work with 0xc,1,[],https://github.com/WebAssembly/wabt/pull/157,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/157#issuecomment-252702426,Also remove all the interpreter stuff. It's still in flux.,ping,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,159,2016-10-07T23:34:53Z,2016-10-10T18:54:17Z,2016-10-10T18:54:17Z,MERGED,True,192,48,13,https://github.com/binji,Add wasmopcodecnt tests,1,[],https://github.com/WebAssembly/wabt/pull/159,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/159,"Also rename the last few places using SexprWasm, WasmWast. Make
formatting a little nicer too.
Fixes #156.","Also rename the last few places using SexprWasm, WasmWast. Make
formatting a little nicer too.
Fixes #156.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,159,2016-10-07T23:34:53Z,2016-10-10T18:54:17Z,2016-10-10T18:54:17Z,MERGED,True,192,48,13,https://github.com/binji,Add wasmopcodecnt tests,1,[],https://github.com/WebAssembly/wabt/pull/159,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/159#issuecomment-252386633,"Also rename the last few places using SexprWasm, WasmWast. Make
formatting a little nicer too.
Fixes #156.",@KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,161,2016-10-11T02:30:24Z,2016-10-12T20:32:50Z,2016-10-13T23:00:16Z,MERGED,True,3074,651,90,https://github.com/sbc100,Add wasmdump binary for inspecting wasm files,2,[],https://github.com/WebAssembly/wabt/pull/161,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/161,"Run this tool to as part of the 'dump' tests rather
than using the -d flag to wast2wasm.","Run this tool to as part of the 'dump' tests rather
than using the -d flag to wast2wasm.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,161,2016-10-11T02:30:24Z,2016-10-12T20:32:50Z,2016-10-13T23:00:16Z,MERGED,True,3074,651,90,https://github.com/sbc100,Add wasmdump binary for inspecting wasm files,2,[],https://github.com/WebAssembly/wabt/pull/161,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/161#issuecomment-252795463,"Run this tool to as part of the 'dump' tests rather
than using the -d flag to wast2wasm.",Depends on #147,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,161,2016-10-11T02:30:24Z,2016-10-12T20:32:50Z,2016-10-13T23:00:16Z,MERGED,True,3074,651,90,https://github.com/sbc100,Add wasmdump binary for inspecting wasm files,2,[],https://github.com/WebAssembly/wabt/pull/161,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/161#issuecomment-253100463,"Run this tool to as part of the 'dump' tests rather
than using the -d flag to wast2wasm.",PTAL,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,161,2016-10-11T02:30:24Z,2016-10-12T20:32:50Z,2016-10-13T23:00:16Z,MERGED,True,3074,651,90,https://github.com/sbc100,Add wasmdump binary for inspecting wasm files,2,[],https://github.com/WebAssembly/wabt/pull/161,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/161#issuecomment-253119244,"Run this tool to as part of the 'dump' tests rather
than using the -d flag to wast2wasm.","lgtm % travis. We can fix up some of the other output later. (I noticed function locals aren't written currently, for example).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,162,2016-10-11T20:14:55Z,2016-10-28T17:00:41Z,2016-12-09T19:44:16Z,CLOSED,False,158,6,3,https://github.com/KarlSchimpf,Add command-line flags to control reports of wasmopcodecnt.,1,[],https://github.com/WebAssembly/wabt/pull/162,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/162,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,162,2016-10-11T20:14:55Z,2016-10-28T17:00:41Z,2016-12-09T19:44:16Z,CLOSED,False,158,6,3,https://github.com/KarlSchimpf,Add command-line flags to control reports of wasmopcodecnt.,1,[],https://github.com/WebAssembly/wabt/pull/162,https://github.com/KarlSchimpf,2,https://github.com/WebAssembly/wabt/pull/162#issuecomment-256973182,,Closing. Doesn't seem to be needed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,163,2016-10-13T20:21:11Z,2016-10-13T23:32:32Z,2016-10-13T23:32:32Z,CLOSED,False,1460,1391,20,https://github.com/binji,Update testsuite and fix tests,1,[],https://github.com/WebAssembly/wabt/pull/163,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/163,"offset= and align= can now specify hex values
data and elem segment offsets are now not checked; they can be out of
order or overlapping, and even out-of-bounds if the size is zero
added the new tests skip-stack-guard-page and unwind","offset= and align= can now specify hex values
data and elem segment offsets are now not checked; they can be out of
order or overlapping, and even out-of-bounds if the size is zero
added the new tests skip-stack-guard-page and unwind",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,163,2016-10-13T20:21:11Z,2016-10-13T23:32:32Z,2016-10-13T23:32:32Z,CLOSED,False,1460,1391,20,https://github.com/binji,Update testsuite and fix tests,1,[],https://github.com/WebAssembly/wabt/pull/163,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/163#issuecomment-253627519,"offset= and align= can now specify hex values
data and elem segment offsets are now not checked; they can be out of
order or overlapping, and even out-of-bounds if the size is zero
added the new tests skip-stack-guard-page and unwind",@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,164,2016-10-13T22:38:26Z,2016-10-13T22:48:21Z,2016-10-27T17:38:03Z,MERGED,True,1,1,1,https://github.com/dschuff,Add wasmdump to list of intall targets,1,[],https://github.com/WebAssembly/wabt/pull/164,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/164,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,164,2016-10-13T22:38:26Z,2016-10-13T22:48:21Z,2016-10-27T17:38:03Z,MERGED,True,1,1,1,https://github.com/dschuff,Add wasmdump to list of intall targets,1,[],https://github.com/WebAssembly/wabt/pull/164,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/164#issuecomment-253659322,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,165,2016-10-13T23:28:03Z,2016-10-13T23:28:26Z,2016-10-18T20:47:33Z,CLOSED,False,7,0,1,https://github.com/binji,Allow failures on the OSX build,1,[],https://github.com/WebAssembly/wabt/pull/165,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/165,"They OSX builds are very slow to run; it's good to test them, but
they're unlikely to differ from the Linux builds significantly.","They OSX builds are very slow to run; it's good to test them, but
they're unlikely to differ from the Linux builds significantly.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,165,2016-10-13T23:28:03Z,2016-10-13T23:28:26Z,2016-10-18T20:47:33Z,CLOSED,False,7,0,1,https://github.com/binji,Allow failures on the OSX build,1,[],https://github.com/WebAssembly/wabt/pull/165,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/165#issuecomment-254633520,"They OSX builds are very slow to run; it's good to test them, but
they're unlikely to differ from the Linux builds significantly.",Why did you close this?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,165,2016-10-13T23:28:03Z,2016-10-13T23:28:26Z,2016-10-18T20:47:33Z,CLOSED,False,7,0,1,https://github.com/binji,Allow failures on the OSX build,1,[],https://github.com/WebAssembly/wabt/pull/165,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/165#issuecomment-254634610,"They OSX builds are very slow to run; it's good to test them, but
they're unlikely to differ from the Linux builds significantly.","I pushed this manually here: 7d9d479. But I think I rebased it, so it has a different SHA so GH didn't realize they're the same.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,166,2016-10-17T12:56:41Z,2016-10-17T18:59:46Z,2016-10-17T18:59:46Z,MERGED,True,41,22,6,https://github.com/citisolo,updated selected test files to new flat format #139,1,[],https://github.com/WebAssembly/wabt/pull/166,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/166,"Converted a select few  tests from AST format to new ""flat"" format","Converted a select few  tests from AST format to new ""flat"" format",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,168,2016-10-18T02:54:42Z,2016-10-18T08:24:30Z,2016-10-18T08:24:30Z,MERGED,True,1,1,1,https://github.com/rongjiecomputer,Replace zx with PRIzx,1,[],https://github.com/WebAssembly/wabt/pull/168,https://github.com/rongjiecomputer,1,https://github.com/WebAssembly/wabt/pull/168,Mingw-w64 gcc and MSVC don't have %zx or %zd.,Mingw-w64 gcc and MSVC don't have %zx or %zd.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,168,2016-10-18T02:54:42Z,2016-10-18T08:24:30Z,2016-10-18T08:24:30Z,MERGED,True,1,1,1,https://github.com/rongjiecomputer,Replace zx with PRIzx,1,[],https://github.com/WebAssembly/wabt/pull/168,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/168#issuecomment-254440299,Mingw-w64 gcc and MSVC don't have %zx or %zd.,"lgtm, thanks",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,169,2016-10-18T11:18:22Z,2016-10-18T18:59:20Z,2016-10-18T18:59:20Z,MERGED,True,307,239,21,https://github.com/citisolo,Update tests syntax to new flat syntax,2,[],https://github.com/WebAssembly/wabt/pull/169,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/169,few more tests from dump directory added,few more tests from dump directory added,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,169,2016-10-18T11:18:22Z,2016-10-18T18:59:20Z,2016-10-18T18:59:20Z,MERGED,True,307,239,21,https://github.com/citisolo,Update tests syntax to new flat syntax,2,[],https://github.com/WebAssembly/wabt/pull/169,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/169#issuecomment-254605395,few more tests from dump directory added,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,170,2016-10-19T18:50:47Z,2016-10-19T18:51:23Z,2016-10-25T19:04:23Z,MERGED,True,5,5,6,https://github.com/binji,Move executable sources to src/exe,1,[],https://github.com/WebAssembly/wabt/pull/170,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/170,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,170,2016-10-19T18:50:47Z,2016-10-19T18:51:23Z,2016-10-25T19:04:23Z,MERGED,True,5,5,6,https://github.com/binji,Move executable sources to src/exe,1,[],https://github.com/WebAssembly/wabt/pull/170,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/170#issuecomment-254950912,,"src/exe was surprising to me (""we have executables as source? are they checked-in binaries""). Maybe src/tools would be clearer? It would separate them from the common code (which, if it became more diverse, could be separated into different libs a la src/lib). LLVM and Binaryen have similar structure.",True,{'THUMBS_UP': ['https://github.com/sbc100']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,170,2016-10-19T18:50:47Z,2016-10-19T18:51:23Z,2016-10-25T19:04:23Z,MERGED,True,5,5,6,https://github.com/binji,Move executable sources to src/exe,1,[],https://github.com/WebAssembly/wabt/pull/170,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/170#issuecomment-254951247,,"sgtm, I'll rename after landing the wastfmt change",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,170,2016-10-19T18:50:47Z,2016-10-19T18:51:23Z,2016-10-25T19:04:23Z,MERGED,True,5,5,6,https://github.com/binji,Move executable sources to src/exe,1,[],https://github.com/WebAssembly/wabt/pull/170,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/170#issuecomment-256076696,,"I agree 'exe' sounds wrong.  Its a windows-ism at best.
I like src/lib/ or src/libwabt/ for library sources.. and just src/ for the entry points.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,170,2016-10-19T18:50:47Z,2016-10-19T18:51:23Z,2016-10-25T19:04:23Z,MERGED,True,5,5,6,https://github.com/binji,Move executable sources to src/exe,1,[],https://github.com/WebAssembly/wabt/pull/170,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/170#issuecomment-256143829,,"I'd like src/lib better if we go that route. I like src/tools for now, though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,171,2016-10-19T19:29:49Z,2016-10-19T23:35:34Z,2016-10-19T23:35:34Z,CLOSED,False,299,58,8,https://github.com/binji,wastfmt: tool to reformat and desugar a wast file,1,[],https://github.com/WebAssembly/wabt/pull/171,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/171,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,171,2016-10-19T19:29:49Z,2016-10-19T23:35:34Z,2016-10-19T23:35:34Z,CLOSED,False,299,58,8,https://github.com/binji,wastfmt: tool to reformat and desugar a wast file,1,[],https://github.com/WebAssembly/wabt/pull/171,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/171#issuecomment-254947208,,@dschuff,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,171,2016-10-19T19:29:49Z,2016-10-19T23:35:34Z,2016-10-19T23:35:34Z,CLOSED,False,299,58,8,https://github.com/binji,wastfmt: tool to reformat and desugar a wast file,1,[],https://github.com/WebAssembly/wabt/pull/171,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/171#issuecomment-254962377,,"true, true. I've been pretty good about writing tests, though :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,171,2016-10-19T19:29:49Z,2016-10-19T23:35:34Z,2016-10-19T23:35:34Z,CLOSED,False,299,58,8,https://github.com/binji,wastfmt: tool to reformat and desugar a wast file,1,[],https://github.com/WebAssembly/wabt/pull/171,https://github.com/dschuff,4,https://github.com/WebAssembly/wabt/pull/171#issuecomment-254962547,,Yup; hence the LGTM :),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,172,2016-10-19T20:01:36Z,2016-10-19T21:38:08Z,2016-10-19T21:38:08Z,MERGED,True,725,447,40,https://github.com/citisolo,Update tests syntax to new flat syntax,3,[],https://github.com/WebAssembly/wabt/pull/172,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/172,"converted twenty more tests , more to come","converted twenty more tests , more to come",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,172,2016-10-19T20:01:36Z,2016-10-19T21:38:08Z,2016-10-19T21:38:08Z,MERGED,True,725,447,40,https://github.com/citisolo,Update tests syntax to new flat syntax,3,[],https://github.com/WebAssembly/wabt/pull/172,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/172#issuecomment-254948494,"converted twenty more tests , more to come",lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,173,2016-10-19T23:41:03Z,2016-10-19T23:42:05Z,2016-10-19T23:42:05Z,MERGED,True,6,6,7,https://github.com/binji,Rename src/exe -> src/tools,1,[],https://github.com/WebAssembly/wabt/pull/173,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/173,,,True,{'THUMBS_UP': ['https://github.com/dschuff']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,174,2016-10-20T20:04:00Z,2016-10-20T20:42:01Z,2016-10-20T20:42:01Z,MERGED,True,1147,685,64,https://github.com/citisolo,Update tests syntax to new flat syntax,4,[],https://github.com/WebAssembly/wabt/pull/174,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/174,another batch,another batch,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,174,2016-10-20T20:04:00Z,2016-10-20T20:42:01Z,2016-10-20T20:42:01Z,MERGED,True,1147,685,64,https://github.com/citisolo,Update tests syntax to new flat syntax,4,[],https://github.com/WebAssembly/wabt/pull/174,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/174#issuecomment-255222130,another batch,"lgtm, thanks",True,{'THUMBS_UP': ['https://github.com/citisolo']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,175,2016-10-20T20:36:57Z,2016-10-20T20:44:32Z,2016-10-20T20:44:32Z,CLOSED,False,4098,4098,74,https://github.com/binji,Remap the operator encoding for binary 0xd,1,[],https://github.com/WebAssembly/wabt/pull/175,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/175,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,175,2016-10-20T20:36:57Z,2016-10-20T20:44:32Z,2016-10-20T20:44:32Z,CLOSED,False,4098,4098,74,https://github.com/binji,Remap the operator encoding for binary 0xd,1,[],https://github.com/WebAssembly/wabt/pull/175,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/175#issuecomment-255221030,,See WebAssembly/design#826,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,175,2016-10-20T20:36:57Z,2016-10-20T20:44:32Z,2016-10-20T20:44:32Z,CLOSED,False,4098,4098,74,https://github.com/binji,Remap the operator encoding for binary 0xd,1,[],https://github.com/WebAssembly/wabt/pull/175,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/175#issuecomment-255222326,,I guess we should maybe have a binary-0xd branch?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,175,2016-10-20T20:36:57Z,2016-10-20T20:44:32Z,2016-10-20T20:44:32Z,CLOSED,False,4098,4098,74,https://github.com/binji,Remap the operator encoding for binary 0xd,1,[],https://github.com/WebAssembly/wabt/pull/175,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/175#issuecomment-255222591,,"Hm, guess so.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,176,2016-10-20T20:45:48Z,2016-10-24T20:01:56Z,2016-10-24T20:01:56Z,MERGED,True,4273,4272,76,https://github.com/binji,Remap the operator encoding for binary 0xd,1,[],https://github.com/WebAssembly/wabt/pull/176,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/176,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,176,2016-10-20T20:45:48Z,2016-10-24T20:01:56Z,2016-10-24T20:01:56Z,MERGED,True,4273,4272,76,https://github.com/binji,Remap the operator encoding for binary 0xd,1,[],https://github.com/WebAssembly/wabt/pull/176,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/176#issuecomment-255828503,,@KarlSchimpf The last failure was due to the GH DNS outage last friday :-|,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,178,2016-10-21T20:22:12Z,2016-10-24T18:54:37Z,2016-10-24T18:54:38Z,MERGED,True,1146,682,18,https://github.com/binji,Refactor interpreter for linking support,1,[],https://github.com/WebAssembly/wabt/pull/178,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/178,"Create WasmInterpreterEnvironment to hold all modules, functions,
globals, tables and memories
There are now three index spaces: ""module"", ""environment"" and
""defined"".

The ""module"" index space matches up w/ the normal WebAssembly index
space, which is distinct for functions, globals, tables, etc.
The ""environment"" index space is a combined index space for all loaded
modules.
The ""defined"" index space only includes defined objects, not
imported objects. This is used, for example, when iterating over the
code section; the function bodies are only specified for defined
functions.


A thread is implicitly associated with a module and environment, so
simplify many function signatures to remove those additional arguments
Any importable kind can be imported from a host module. Unfortunately,
since the spec tests require polymorphic imports, the importing
mechanism must be callback-based
When interpreting spec tests, the environment and all modules must be
retained throughout
Move the binding hash code out of wasm-ast.{c,h} =>
wasm-binding-hash.{c,h}
Add wasm_init_output_buffer, for initializing the environment's
instruction stream independently from a WasmMemoryWriter
Add wasm_init_mem_writer_existing for initializing a WasmMemoryWriter
given an existing WasmOutputBuffer
Add predefined ""spectest"" module, with a generic function import.
Still need to implement the spectest table, memory and global imports","Create WasmInterpreterEnvironment to hold all modules, functions,
globals, tables and memories
There are now three index spaces: ""module"", ""environment"" and
""defined"".

The ""module"" index space matches up w/ the normal WebAssembly index
space, which is distinct for functions, globals, tables, etc.
The ""environment"" index space is a combined index space for all loaded
modules.
The ""defined"" index space only includes defined objects, not
imported objects. This is used, for example, when iterating over the
code section; the function bodies are only specified for defined
functions.


A thread is implicitly associated with a module and environment, so
simplify many function signatures to remove those additional arguments
Any importable kind can be imported from a host module. Unfortunately,
since the spec tests require polymorphic imports, the importing
mechanism must be callback-based
When interpreting spec tests, the environment and all modules must be
retained throughout
Move the binding hash code out of wasm-ast.{c,h} =>
wasm-binding-hash.{c,h}
Add wasm_init_output_buffer, for initializing the environment's
instruction stream independently from a WasmMemoryWriter
Add wasm_init_mem_writer_existing for initializing a WasmMemoryWriter
given an existing WasmOutputBuffer
Add predefined ""spectest"" module, with a generic function import.
Still need to implement the spectest table, memory and global imports",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,178,2016-10-21T20:22:12Z,2016-10-24T18:54:37Z,2016-10-24T18:54:38Z,MERGED,True,1146,682,18,https://github.com/binji,Refactor interpreter for linking support,1,[],https://github.com/WebAssembly/wabt/pull/178,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/178#issuecomment-255456035,"Create WasmInterpreterEnvironment to hold all modules, functions,
globals, tables and memories
There are now three index spaces: ""module"", ""environment"" and
""defined"".

The ""module"" index space matches up w/ the normal WebAssembly index
space, which is distinct for functions, globals, tables, etc.
The ""environment"" index space is a combined index space for all loaded
modules.
The ""defined"" index space only includes defined objects, not
imported objects. This is used, for example, when iterating over the
code section; the function bodies are only specified for defined
functions.


A thread is implicitly associated with a module and environment, so
simplify many function signatures to remove those additional arguments
Any importable kind can be imported from a host module. Unfortunately,
since the spec tests require polymorphic imports, the importing
mechanism must be callback-based
When interpreting spec tests, the environment and all modules must be
retained throughout
Move the binding hash code out of wasm-ast.{c,h} =>
wasm-binding-hash.{c,h}
Add wasm_init_output_buffer, for initializing the environment's
instruction stream independently from a WasmMemoryWriter
Add wasm_init_mem_writer_existing for initializing a WasmMemoryWriter
given an existing WasmOutputBuffer
Add predefined ""spectest"" module, with a generic function import.
Still need to implement the spectest table, memory and global imports",@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,179,2016-10-21T23:23:36Z,2016-10-24T20:09:11Z,2016-10-24T20:09:11Z,MERGED,True,850,699,5,https://github.com/binji,Create module_bindings hash in WasmScript,1,[],https://github.com/WebAssembly/wabt/pull/179,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/179,"Actions have an optional module_var, which can reference any module, not
just the last one.","Actions have an optional module_var, which can reference any module, not
just the last one.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,179,2016-10-21T23:23:36Z,2016-10-24T20:09:11Z,2016-10-24T20:09:11Z,MERGED,True,850,699,5,https://github.com/binji,Create module_bindings hash in WasmScript,1,[],https://github.com/WebAssembly/wabt/pull/179,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/179#issuecomment-255487992,"Actions have an optional module_var, which can reference any module, not
just the last one.",this depends on #178,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,180,2016-10-22T21:00:13Z,2016-10-25T20:14:37Z,2016-10-25T21:56:34Z,MERGED,True,2263,1058,87,https://github.com/citisolo,Update tests syntax to new flat syntax,8,[],https://github.com/WebAssembly/wabt/pull/180,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/180,more tests,more tests,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,180,2016-10-22T21:00:13Z,2016-10-25T20:14:37Z,2016-10-25T21:56:34Z,MERGED,True,2263,1058,87,https://github.com/citisolo,Update tests syntax to new flat syntax,8,[],https://github.com/WebAssembly/wabt/pull/180,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/180#issuecomment-256162141,more tests,"lgtm. By the way, next time you push a change, can you update it so it doesn't include the previous commits? It would make reviewing a bit easier. Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,180,2016-10-22T21:00:13Z,2016-10-25T20:14:37Z,2016-10-25T21:56:34Z,MERGED,True,2263,1058,87,https://github.com/citisolo,Update tests syntax to new flat syntax,8,[],https://github.com/WebAssembly/wabt/pull/180,https://github.com/citisolo,3,https://github.com/WebAssembly/wabt/pull/180#issuecomment-256174895,more tests,"Sorry I didn't realize I was doing that.  How would I update it , what I've been doing is just pushing to the branch?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,180,2016-10-22T21:00:13Z,2016-10-25T20:14:37Z,2016-10-25T21:56:34Z,MERGED,True,2263,1058,87,https://github.com/citisolo,Update tests syntax to new flat syntax,8,[],https://github.com/WebAssembly/wabt/pull/180,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/180#issuecomment-256188749,more tests,I think you just need to update your branch to wabt:master.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,182,2016-10-24T18:38:28Z,2016-10-24T23:24:18Z,2016-10-24T23:24:18Z,MERGED,True,474,466,87,https://github.com/binji,Fix types for binary 0xd,1,[],https://github.com/WebAssembly/wabt/pull/182,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/182,"All types are unified (i32,i64,f32,f64,func,anyfunc,void)
Can't use array to get type name; use wasm_get_type_name instead
Encode types as vs7 (i.e. Signed LEB128 with max length 1 byte)
Change version to 0xd","All types are unified (i32,i64,f32,f64,func,anyfunc,void)
Can't use array to get type name; use wasm_get_type_name instead
Encode types as vs7 (i.e. Signed LEB128 with max length 1 byte)
Change version to 0xd",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,183,2016-10-24T20:47:09Z,2016-10-24T23:46:57Z,2016-10-24T23:46:57Z,MERGED,True,74,53,6,https://github.com/binji,Add reserved immediate to three operators,1,[],https://github.com/WebAssembly/wabt/pull/183,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/183,"call_indirect, grow_memory and current_memory all take an additional
immediate which must be zero. After the MVP, this will be used to allow
specifying a table or memory index.","call_indirect, grow_memory and current_memory all take an additional
immediate which must be zero. After the MVP, this will be used to allow
specifying a table or memory index.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,183,2016-10-24T20:47:09Z,2016-10-24T23:46:57Z,2016-10-24T23:46:57Z,MERGED,True,74,53,6,https://github.com/binji,Add reserved immediate to three operators,1,[],https://github.com/WebAssembly/wabt/pull/183,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/183#issuecomment-255861499,"call_indirect, grow_memory and current_memory all take an additional
immediate which must be zero. After the MVP, this will be used to allow
specifying a table or memory index.",Depends on #182. Take a look a the last commit for now.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,184,2016-10-25T01:39:26Z,2016-10-25T20:12:35Z,2016-10-27T19:15:32Z,MERGED,True,2,2,2,https://github.com/Cellule,Win32 build,1,[],https://github.com/WebAssembly/wabt/pull/184,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/184,Do not treat warning as errors on Windows. Fix WABT_UNREACHABLE to use __assume(0) on Windows,Do not treat warning as errors on Windows. Fix WABT_UNREACHABLE to use __assume(0) on Windows,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,184,2016-10-25T01:39:26Z,2016-10-25T20:12:35Z,2016-10-27T19:15:32Z,MERGED,True,2,2,2,https://github.com/Cellule,Win32 build,1,[],https://github.com/WebAssembly/wabt/pull/184,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/184#issuecomment-256079062,Do not treat warning as errors on Windows. Fix WABT_UNREACHABLE to use __assume(0) on Windows,"Is there a particular warning that's been firing, or just different ones? (btw  I want to set up a windows CI; I just filed #186 and I'd be happy to have input into how it's configured).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,184,2016-10-25T01:39:26Z,2016-10-25T20:12:35Z,2016-10-27T19:15:32Z,MERGED,True,2,2,2,https://github.com/Cellule,Win32 build,1,[],https://github.com/WebAssembly/wabt/pull/184,https://github.com/Cellule,3,https://github.com/WebAssembly/wabt/pull/184#issuecomment-256152659,Do not treat warning as errors on Windows. Fix WABT_UNREACHABLE to use __assume(0) on Windows,"There are a lot of warnings, mostly conversions from int64 to int32.
I thought about fixing the warnings, but it seems the warnings are not a blocker on the CI so it's just been annoying to fix on Windows every time I sync up the repo.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,184,2016-10-25T01:39:26Z,2016-10-25T20:12:35Z,2016-10-27T19:15:32Z,MERGED,True,2,2,2,https://github.com/Cellule,Win32 build,1,[],https://github.com/WebAssembly/wabt/pull/184,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/184#issuecomment-256161695,Do not treat warning as errors on Windows. Fix WABT_UNREACHABLE to use __assume(0) on Windows,"OK, might be good to re-enable this when we set up a windows CI. For now, lgtm.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,184,2016-10-25T01:39:26Z,2016-10-25T20:12:35Z,2016-10-27T19:15:32Z,MERGED,True,2,2,2,https://github.com/Cellule,Win32 build,1,[],https://github.com/WebAssembly/wabt/pull/184,https://github.com/dschuff,5,https://github.com/WebAssembly/wabt/pull/184#issuecomment-256713735,Do not treat warning as errors on Windows. Fix WABT_UNREACHABLE to use __assume(0) on Windows,Just a FYI; for some reason this commit didn't make it onto master when we merged 0xd; I just rebased it as ac925dc,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,184,2016-10-25T01:39:26Z,2016-10-25T20:12:35Z,2016-10-27T19:15:32Z,MERGED,True,2,2,2,https://github.com/Cellule,Win32 build,1,[],https://github.com/WebAssembly/wabt/pull/184,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/184#issuecomment-256716230,Do not treat warning as errors on Windows. Fix WABT_UNREACHABLE to use __assume(0) on Windows,"Whoops, probably because I manually merged. :-|",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,184,2016-10-25T01:39:26Z,2016-10-25T20:12:35Z,2016-10-27T19:15:32Z,MERGED,True,2,2,2,https://github.com/Cellule,Win32 build,1,[],https://github.com/WebAssembly/wabt/pull/184,https://github.com/dschuff,7,https://github.com/WebAssembly/wabt/pull/184#issuecomment-256717792,Do not treat warning as errors on Windows. Fix WABT_UNREACHABLE to use __assume(0) on Windows,"Come to think of it, I don't see any warnings other than C4244; would it make sense to disable just that and keep -WX or are there others?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,184,2016-10-25T01:39:26Z,2016-10-25T20:12:35Z,2016-10-27T19:15:32Z,MERGED,True,2,2,2,https://github.com/Cellule,Win32 build,1,[],https://github.com/WebAssembly/wabt/pull/184,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/184#issuecomment-256741566,Do not treat warning as errors on Windows. Fix WABT_UNREACHABLE to use __assume(0) on Windows,"Weird, it looks like it's called C4244 for VS2015 and C4267 for VS2015 Win64.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,187,2016-10-25T19:14:07Z,2016-10-25T19:59:52Z,2016-10-25T19:59:52Z,MERGED,True,72,72,3,https://github.com/binji,Reorder some f32/f64 ops,1,[],https://github.com/WebAssembly/wabt/pull/187,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/187,Fixes #185.,Fixes #185.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,187,2016-10-25T19:14:07Z,2016-10-25T19:59:52Z,2016-10-25T19:59:52Z,MERGED,True,72,72,3,https://github.com/binji,Reorder some f32/f64 ops,1,[],https://github.com/WebAssembly/wabt/pull/187,https://github.com/Cellule,2,https://github.com/WebAssembly/wabt/pull/187#issuecomment-256153060,Fixes #185.,Thanks a lot for the quick fix,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,189,2016-10-25T22:34:23Z,2016-10-26T17:23:43Z,2016-10-27T17:38:03Z,MERGED,True,42,6,2,https://github.com/dschuff,Add appveyor.yml from Binaryen,3,[],https://github.com/WebAssembly/wabt/pull/189,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/189,Also update gen-emscripten-exported-json.py to comply (almost) with PEP8,Also update gen-emscripten-exported-json.py to comply (almost) with PEP8,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,189,2016-10-25T22:34:23Z,2016-10-26T17:23:43Z,2016-10-27T17:38:03Z,MERGED,True,42,6,2,https://github.com/dschuff,Add appveyor.yml from Binaryen,3,[],https://github.com/WebAssembly/wabt/pull/189,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/189#issuecomment-256197980,Also update gen-emscripten-exported-json.py to comply (almost) with PEP8,For #186,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,190,2016-10-26T12:14:42Z,2016-10-27T21:28:32Z,2016-10-27T21:28:32Z,MERGED,True,50,33,13,https://github.com/citisolo,Update tests syntax to new flat syntax,11,[],https://github.com/WebAssembly/wabt/pull/190,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/190,converted tests from parse/asserts,converted tests from parse/asserts,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,190,2016-10-26T12:14:42Z,2016-10-27T21:28:32Z,2016-10-27T21:28:32Z,MERGED,True,50,33,13,https://github.com/citisolo,Update tests syntax to new flat syntax,11,[],https://github.com/WebAssembly/wabt/pull/190,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/190#issuecomment-256774864,converted tests from parse/asserts,thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,191,2016-10-26T17:36:04Z,2016-10-26T18:29:28Z,2016-10-27T17:38:02Z,MERGED,True,3,3,2,https://github.com/dschuff,Move import to top of Python file,3,[],https://github.com/WebAssembly/wabt/pull/191,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/191,to satisfy Appveyor's version of flake8,to satisfy Appveyor's version of flake8,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,191,2016-10-26T17:36:04Z,2016-10-26T18:29:28Z,2016-10-27T17:38:02Z,MERGED,True,3,3,2,https://github.com/dschuff,Move import to top of Python file,3,[],https://github.com/WebAssembly/wabt/pull/191,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/191#issuecomment-256423336,to satisfy Appveyor's version of flake8,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,191,2016-10-26T17:36:04Z,2016-10-26T18:29:28Z,2016-10-27T17:38:02Z,MERGED,True,3,3,2,https://github.com/dschuff,Move import to top of Python file,3,[],https://github.com/WebAssembly/wabt/pull/191,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/191#issuecomment-256436169,to satisfy Appveyor's version of flake8,"OK, this makes flake8 pass, so it can land. Now we are getting to the actual build, where we are failing to get gtest. I guess that's just a matter of getting the git cloning right?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,192,2016-10-28T01:06:07Z,2016-10-31T23:58:52Z,2016-12-09T19:46:15Z,MERGED,True,470,41,77,https://github.com/sbc100,wasmdump improvments,5,[],https://github.com/WebAssembly/wabt/pull/192,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/192,"Split into three different passes: headers, details, and raw
Nest imports correctly
Show element count as part of section header rather than on its
own line","Split into three different passes: headers, details, and raw
Nest imports correctly
Show element count as part of section header rather than on its
own line",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,192,2016-10-28T01:06:07Z,2016-10-31T23:58:52Z,2016-12-09T19:46:15Z,MERGED,True,470,41,77,https://github.com/sbc100,wasmdump improvments,5,[],https://github.com/WebAssembly/wabt/pull/192,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/192#issuecomment-256981485,"Split into three different passes: headers, details, and raw
Nest imports correctly
Show element count as part of section header rather than on its
own line","Hm, might need to come up with a flag to prevent printing the filename or something; the dump tests are all broken.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,192,2016-10-28T01:06:07Z,2016-10-31T23:58:52Z,2016-12-09T19:46:15Z,MERGED,True,470,41,77,https://github.com/sbc100,wasmdump improvments,5,[],https://github.com/WebAssembly/wabt/pull/192,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/192#issuecomment-257369458,"Split into three different passes: headers, details, and raw
Nest imports correctly
Show element count as part of section header rather than on its
own line",Ended up only printing the basename to avoid the testing issue.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,192,2016-10-28T01:06:07Z,2016-10-31T23:58:52Z,2016-12-09T19:46:15Z,MERGED,True,470,41,77,https://github.com/sbc100,wasmdump improvments,5,[],https://github.com/WebAssembly/wabt/pull/192,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/192#issuecomment-257405448,"Split into three different passes: headers, details, and raw
Nest imports correctly
Show element count as part of section header rather than on its
own line","Looks like there is a compile failure in the format string for 32-bit:
/home/travis/build/WebAssembly/wabt/src/wasm-binary-reader-objdump.c: In function ‘on_import_table’:
/home/travis/build/WebAssembly/wabt/src/wasm-binary-reader-objdump.c:380:7: error: format ‘%zx’ expects argument of type ‘size_t’, but argument 4 has type ‘uint64_t’ [-Werror=format=]
       elem_limits->max);
       ^",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,193,2016-10-28T22:22:40Z,2016-11-01T00:51:35Z,2016-11-01T08:58:11Z,MERGED,True,128,115,22,https://github.com/citisolo,Update tests syntax to new flat syntax,13,[],https://github.com/WebAssembly/wabt/pull/193,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/193,more tests,more tests,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,193,2016-10-28T22:22:40Z,2016-11-01T00:51:35Z,2016-11-01T08:58:11Z,MERGED,True,128,115,22,https://github.com/citisolo,Update tests syntax to new flat syntax,13,[],https://github.com/WebAssembly/wabt/pull/193,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/193#issuecomment-257462304,more tests,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,193,2016-10-28T22:22:40Z,2016-11-01T00:51:35Z,2016-11-01T08:58:11Z,MERGED,True,128,115,22,https://github.com/citisolo,Update tests syntax to new flat syntax,13,[],https://github.com/WebAssembly/wabt/pull/193,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/193#issuecomment-257463632,more tests,"BTW, I took a look at your fork. It seems that the simplest way to fix the history in the PR is to reset your master to wabt:master, then build your next PRs on a new branch from that master. I suggested that you merge before, but that's unfortunately making your fork's history contain the same commit twice!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,193,2016-10-28T22:22:40Z,2016-11-01T00:51:35Z,2016-11-01T08:58:11Z,MERGED,True,128,115,22,https://github.com/citisolo,Update tests syntax to new flat syntax,13,[],https://github.com/WebAssembly/wabt/pull/193,https://github.com/citisolo,4,https://github.com/WebAssembly/wabt/pull/193#issuecomment-257517642,more tests,"Got it, I'll reset and make a new branch",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,194,2016-10-29T00:21:29Z,2016-10-29T00:22:00Z,2016-10-29T00:22:01Z,MERGED,True,12,11,2,https://github.com/binji,Update emscripten demo to 0xd,1,[],https://github.com/WebAssembly/wabt/pull/194,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/194,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,195,2016-10-29T00:24:05Z,2016-10-29T00:25:09Z,2016-10-29T00:25:09Z,MERGED,True,1,1,1,https://github.com/binji,Update demo link in README.md to 0xd,1,[],https://github.com/WebAssembly/wabt/pull/195,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/195,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,196,2016-10-29T00:49:59Z,2016-10-29T00:50:32Z,2016-10-29T00:50:32Z,MERGED,True,19,14,1,https://github.com/binji,Update demo examples to linear format,1,[],https://github.com/WebAssembly/wabt/pull/196,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/196,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,197,2016-10-31T20:18:20Z,2016-10-31T20:42:45Z,2016-12-09T19:46:16Z,MERGED,True,3,4,2,https://github.com/sbc100,Convert WasmType into an enum,1,[],https://github.com/WebAssembly/wabt/pull/197,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/197,"Fix the bug in logging_begin_global that was exposed by the
using an explictly type here.","Fix the bug in logging_begin_global that was exposed by the
using an explictly type here.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,197,2016-10-31T20:18:20Z,2016-10-31T20:42:45Z,2016-12-09T19:46:16Z,MERGED,True,3,4,2,https://github.com/sbc100,Convert WasmType into an enum,1,[],https://github.com/WebAssembly/wabt/pull/197,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/197#issuecomment-257414243,"Fix the bug in logging_begin_global that was exposed by the
using an explictly type here.",lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,199,2016-11-01T21:07:02Z,2016-11-03T18:06:04Z,2016-11-03T18:06:04Z,CLOSED,False,115,89,19,https://github.com/citisolo,Update tests syntax to new flat syntax more tests,7,[],https://github.com/WebAssembly/wabt/pull/199,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/199,another batch of tests converted to the new flat syntax,another batch of tests converted to the new flat syntax,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,199,2016-11-01T21:07:02Z,2016-11-03T18:06:04Z,2016-11-03T18:06:04Z,CLOSED,False,115,89,19,https://github.com/citisolo,Update tests syntax to new flat syntax more tests,7,[],https://github.com/WebAssembly/wabt/pull/199,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/199#issuecomment-258002163,another batch of tests converted to the new flat syntax,"Sorry to bug you about this, but it still is showing previous commits. I think you'll need to do something like this (assuming your upstream remote points to webassembly/wabt):
git checkout master
git reset upstream/master --hard
git checkout update_tests_syntax_to_new_flat_syntax_more_tests
git rebase master

Not 100% sure about that, but the basic idea should get you to a state where your master branch is aligned w/ wabt/master.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,199,2016-11-01T21:07:02Z,2016-11-03T18:06:04Z,2016-11-03T18:06:04Z,CLOSED,False,115,89,19,https://github.com/citisolo,Update tests syntax to new flat syntax more tests,7,[],https://github.com/WebAssembly/wabt/pull/199,https://github.com/citisolo,3,https://github.com/WebAssembly/wabt/pull/199#issuecomment-258019948,another batch of tests converted to the new flat syntax,"Terribly sorry about this, I'll do that right away should i delete the previous branch, how do I check if everything is straight ?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,199,2016-11-01T21:07:02Z,2016-11-03T18:06:04Z,2016-11-03T18:06:04Z,CLOSED,False,115,89,19,https://github.com/citisolo,Update tests syntax to new flat syntax more tests,7,[],https://github.com/WebAssembly/wabt/pull/199,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/199#issuecomment-258022663,another batch of tests converted to the new flat syntax,"No problem, thanks again for rewriting all these tests!
I guess there are a few things you can check. If you run git log upstream/master... it shouldn't display anything. This means that your master is the same as the upstream master. Then when you run git log master... from your test branch, you should just see the two commits you added most recently. Finally, when you upload the PR, it should show just those two commits, and none of the previous ones you already landed. Hope that helps!",True,{'THUMBS_UP': ['https://github.com/citisolo']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,199,2016-11-01T21:07:02Z,2016-11-03T18:06:04Z,2016-11-03T18:06:04Z,CLOSED,False,115,89,19,https://github.com/citisolo,Update tests syntax to new flat syntax more tests,7,[],https://github.com/WebAssembly/wabt/pull/199,https://github.com/citisolo,5,https://github.com/WebAssembly/wabt/pull/199#issuecomment-258156424,another batch of tests converted to the new flat syntax,"seems like somethings still wrong bare with me , trying to sort it out",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,200,2016-11-02T23:05:11Z,2016-11-03T20:08:46Z,2016-11-03T20:08:47Z,MERGED,True,1397,1255,22,https://github.com/binji,Use a new format for the spec JSON writer/parser,1,[],https://github.com/WebAssembly/wabt/pull/200,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/200,"The previous spec JSON format was defined around modules. This is
because the previous spec tests would only run assertions on the most
recently read module. In addition, the previous spec writer would write
the assertions as new exported functions in the module, and run those.
The primary reason for doing this was to allow for passing/returning i64
values, which was necessary to test in a JavaScript host.
Now that the primary host for running the spec tests is wasm-interp, we
no longer need do bundle assertions into the module. Also, some of the
new spec tests allow running exported functions on a module that is not
the most-recently-read module.
The new spec test format is now defined around commands. The commands
map directly to the spec format commands, e.g. module,
assert_invalid, assert_trap, etc.","The previous spec JSON format was defined around modules. This is
because the previous spec tests would only run assertions on the most
recently read module. In addition, the previous spec writer would write
the assertions as new exported functions in the module, and run those.
The primary reason for doing this was to allow for passing/returning i64
values, which was necessary to test in a JavaScript host.
Now that the primary host for running the spec tests is wasm-interp, we
no longer need do bundle assertions into the module. Also, some of the
new spec tests allow running exported functions on a module that is not
the most-recently-read module.
The new spec test format is now defined around commands. The commands
map directly to the spec format commands, e.g. module,
assert_invalid, assert_trap, etc.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,200,2016-11-02T23:05:11Z,2016-11-03T20:08:46Z,2016-11-03T20:08:47Z,MERGED,True,1397,1255,22,https://github.com/binji,Use a new format for the spec JSON writer/parser,1,[],https://github.com/WebAssembly/wabt/pull/200,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/200#issuecomment-258026106,"The previous spec JSON format was defined around modules. This is
because the previous spec tests would only run assertions on the most
recently read module. In addition, the previous spec writer would write
the assertions as new exported functions in the module, and run those.
The primary reason for doing this was to allow for passing/returning i64
values, which was necessary to test in a JavaScript host.
Now that the primary host for running the spec tests is wasm-interp, we
no longer need do bundle assertions into the module. Also, some of the
new spec tests allow running exported functions on a module that is not
the most-recently-read module.
The new spec test format is now defined around commands. The commands
map directly to the spec format commands, e.g. module,
assert_invalid, assert_trap, etc.",@sbc100 @KarlSchimpf,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,200,2016-11-02T23:05:11Z,2016-11-03T20:08:46Z,2016-11-03T20:08:47Z,MERGED,True,1397,1255,22,https://github.com/binji,Use a new format for the spec JSON writer/parser,1,[],https://github.com/WebAssembly/wabt/pull/200,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/200#issuecomment-258258597,"The previous spec JSON format was defined around modules. This is
because the previous spec tests would only run assertions on the most
recently read module. In addition, the previous spec writer would write
the assertions as new exported functions in the module, and run those.
The primary reason for doing this was to allow for passing/returning i64
values, which was necessary to test in a JavaScript host.
Now that the primary host for running the spec tests is wasm-interp, we
no longer need do bundle assertions into the module. Also, some of the
new spec tests allow running exported functions on a module that is not
the most-recently-read module.
The new spec test format is now defined around commands. The commands
map directly to the spec format commands, e.g. module,
assert_invalid, assert_trap, etc.",rebased to master,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,200,2016-11-02T23:05:11Z,2016-11-03T20:08:46Z,2016-11-03T20:08:47Z,MERGED,True,1397,1255,22,https://github.com/binji,Use a new format for the spec JSON writer/parser,1,[],https://github.com/WebAssembly/wabt/pull/200,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/200#issuecomment-258258979,"The previous spec JSON format was defined around modules. This is
because the previous spec tests would only run assertions on the most
recently read module. In addition, the previous spec writer would write
the assertions as new exported functions in the module, and run those.
The primary reason for doing this was to allow for passing/returning i64
values, which was necessary to test in a JavaScript host.
Now that the primary host for running the spec tests is wasm-interp, we
no longer need do bundle assertions into the module. Also, some of the
new spec tests allow running exported functions on a module that is not
the most-recently-read module.
The new spec test format is now defined around commands. The commands
map directly to the spec format commands, e.g. module,
assert_invalid, assert_trap, etc.","I believe Sam and Karl aren't in today. I'll land, and fix issues in later PRs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,201,2016-11-02T23:16:54Z,2016-11-03T19:57:10Z,2016-11-03T19:57:11Z,MERGED,True,37,6,4,https://github.com/binji,Fix appveyor for MSYS build,1,[],https://github.com/WebAssembly/wabt/pull/201,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/201,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,201,2016-11-02T23:16:54Z,2016-11-03T19:57:10Z,2016-11-03T19:57:11Z,MERGED,True,37,6,4,https://github.com/binji,Fix appveyor for MSYS build,1,[],https://github.com/WebAssembly/wabt/pull/201,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/201#issuecomment-258028372,,@dschuff,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,201,2016-11-02T23:16:54Z,2016-11-03T19:57:10Z,2016-11-03T19:57:11Z,MERGED,True,37,6,4,https://github.com/binji,Fix appveyor for MSYS build,1,[],https://github.com/WebAssembly/wabt/pull/201,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/201#issuecomment-258044632,,"Yay, finally.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,201,2016-11-02T23:16:54Z,2016-11-03T19:57:10Z,2016-11-03T19:57:11Z,MERGED,True,37,6,4,https://github.com/binji,Fix appveyor for MSYS build,1,[],https://github.com/WebAssembly/wabt/pull/201,https://github.com/dschuff,4,https://github.com/WebAssembly/wabt/pull/201#issuecomment-258045068,,"Yay!
Sorry I started on this a few days ago and never got back to it...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,201,2016-11-02T23:16:54Z,2016-11-03T19:57:10Z,2016-11-03T19:57:11Z,MERGED,True,37,6,4,https://github.com/binji,Fix appveyor for MSYS build,1,[],https://github.com/WebAssembly/wabt/pull/201,https://github.com/dschuff,5,https://github.com/WebAssembly/wabt/pull/201#issuecomment-258045142,,Now we can put the appveyor badge on README.md :),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,202,2016-11-03T18:06:59Z,2016-11-04T17:34:42Z,2016-11-04T17:34:42Z,MERGED,True,115,89,19,https://github.com/citisolo,more parse tests converted #139,1,[],https://github.com/WebAssembly/wabt/pull/202,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/202,"deleted the old branch and started afresh with this new branch , a few tests to start off with","deleted the old branch and started afresh with this new branch , a few tests to start off with",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,202,2016-11-03T18:06:59Z,2016-11-04T17:34:42Z,2016-11-04T17:34:42Z,MERGED,True,115,89,19,https://github.com/citisolo,more parse tests converted #139,1,[],https://github.com/WebAssembly/wabt/pull/202,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/202#issuecomment-258497717,"deleted the old branch and started afresh with this new branch , a few tests to start off with","Thanks, lgtm!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,204,2016-11-04T19:00:22Z,2016-11-05T02:51:09Z,2016-11-05T02:51:09Z,MERGED,True,184,38,8,https://github.com/binji,Fix the export spec test,1,[],https://github.com/WebAssembly/wabt/pull/204,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/204,"Implement the ""get"" action, for reading exported globals
Fix invoke/get checking when given action has a named module
Fix module name binding when parsing wast","Implement the ""get"" action, for reading exported globals
Fix invoke/get checking when given action has a named module
Fix module name binding when parsing wast",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,205,2016-11-07T14:49:01Z,2016-11-07T21:58:19Z,2016-11-07T21:58:19Z,MERGED,True,162,81,34,https://github.com/citisolo,Convert tests to new flat syntax,4,[],https://github.com/WebAssembly/wabt/pull/205,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/205,"submitting more tests, tried to make it as clean as possible , please highlight any issues with the commit","submitting more tests, tried to make it as clean as possible , please highlight any issues with the commit",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,205,2016-11-07T14:49:01Z,2016-11-07T21:58:19Z,2016-11-07T21:58:19Z,MERGED,True,162,81,34,https://github.com/citisolo,Convert tests to new flat syntax,4,[],https://github.com/WebAssembly/wabt/pull/205,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/205#issuecomment-258976081,"submitting more tests, tried to make it as clean as possible , please highlight any issues with the commit",lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,206,2016-11-07T20:14:10Z,2016-11-07T21:40:39Z,2016-11-07T21:40:39Z,MERGED,True,80,55,3,https://github.com/binji,Simplify the default error handler,1,[],https://github.com/WebAssembly/wabt/pull/206,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/206,"These changes are useful for handling errors via the default binary
error handler in wasm-interp.","These changes are useful for handling errors via the default binary
error handler in wasm-interp.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,207,2016-11-07T20:44:30Z,2016-11-08T00:12:56Z,2016-11-08T00:12:56Z,CLOSED,False,1126,1058,20,https://github.com/binji,Update spec tests,2,[],https://github.com/WebAssembly/wabt/pull/207,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/207,"These changes are useful for handling errors via the default binary
error handler in wasm-interp.","These changes are useful for handling errors via the default binary
error handler in wasm-interp.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,208,2016-11-07T21:53:37Z,2016-11-08T16:02:38Z,2016-11-08T16:02:38Z,MERGED,True,716,146,13,https://github.com/binji,Fix spec imports test,1,[],https://github.com/WebAssembly/wabt/pull/208,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/208,"Properly handle registering an unnamed module (most recently read) in
AST parser
register command has optional name in spec JSON format
Implement spectest_import_{table,memory,global}
Implement on_register_command in wasm-interp (wires up module binding)
Implement assert_unlinkable
Set module's table_index and memory_index when importing table/memory
Translate {get,set}_global index from module -> environment index
space
Don't close the environment's istream writer if the module read fails;
this will destroy the output buffer. Just leave it as is, with extra
unused data in the environment
Add registered_module_bindings hash; this has the registered name of
the module (not to be confused with the module name, which is internal
only)
Add {GET,SET}_GLOBAL opcodes to wasm_trace_pc and wasm_disassemble
Add new trap when calling a function via call_indirect, when the table
element hasn't been initialized (via an elem segment)
Check the limits of tables + memories when importing
Check the function signature when importing
Use callback for printing errors from a host import; this lets us
redirect the output the same way other errors are
Add environment ""marks"". Similar to allocator marks, allows you to
backup to a previous state when an operation fails (such as
successfully reading a module that was supposed to fail)","Properly handle registering an unnamed module (most recently read) in
AST parser
register command has optional name in spec JSON format
Implement spectest_import_{table,memory,global}
Implement on_register_command in wasm-interp (wires up module binding)
Implement assert_unlinkable
Set module's table_index and memory_index when importing table/memory
Translate {get,set}_global index from module -> environment index
space
Don't close the environment's istream writer if the module read fails;
this will destroy the output buffer. Just leave it as is, with extra
unused data in the environment
Add registered_module_bindings hash; this has the registered name of
the module (not to be confused with the module name, which is internal
only)
Add {GET,SET}_GLOBAL opcodes to wasm_trace_pc and wasm_disassemble
Add new trap when calling a function via call_indirect, when the table
element hasn't been initialized (via an elem segment)
Check the limits of tables + memories when importing
Check the function signature when importing
Use callback for printing errors from a host import; this lets us
redirect the output the same way other errors are
Add environment ""marks"". Similar to allocator marks, allows you to
backup to a previous state when an operation fails (such as
successfully reading a module that was supposed to fail)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,208,2016-11-07T21:53:37Z,2016-11-08T16:02:38Z,2016-11-08T16:02:38Z,MERGED,True,716,146,13,https://github.com/binji,Fix spec imports test,1,[],https://github.com/WebAssembly/wabt/pull/208,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/208#issuecomment-259016194,"Properly handle registering an unnamed module (most recently read) in
AST parser
register command has optional name in spec JSON format
Implement spectest_import_{table,memory,global}
Implement on_register_command in wasm-interp (wires up module binding)
Implement assert_unlinkable
Set module's table_index and memory_index when importing table/memory
Translate {get,set}_global index from module -> environment index
space
Don't close the environment's istream writer if the module read fails;
this will destroy the output buffer. Just leave it as is, with extra
unused data in the environment
Add registered_module_bindings hash; this has the registered name of
the module (not to be confused with the module name, which is internal
only)
Add {GET,SET}_GLOBAL opcodes to wasm_trace_pc and wasm_disassemble
Add new trap when calling a function via call_indirect, when the table
element hasn't been initialized (via an elem segment)
Check the limits of tables + memories when importing
Check the function signature when importing
Use callback for printing errors from a host import; this lets us
redirect the output the same way other errors are
Add environment ""marks"". Similar to allocator marks, allows you to
backup to a previous state when an operation fails (such as
successfully reading a module that was supposed to fail)","Fixed all bot failures and rebased, PTAL.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,209,2016-11-08T18:33:15Z,2016-11-08T18:59:13Z,2016-11-08T18:59:13Z,MERGED,True,241,177,6,https://github.com/binji,Fix spec/linking test,1,[],https://github.com/WebAssembly/wabt/pull/209,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/209,"The func_fixups table is specified in the ""defined"" index-space, not
module
Always fill function tables with the unitialized value when created
The global_index_mapping table should include imported globals
Use the ""defined"" global index space when initializing module globals
Write table_index to istream for call_indirect
Write memory_index to istream for all memory ops
WasmInterpreterThread should not be tied to a particular module;
originally this was to match it to a given module's memory or table,
but now those values are in the instruction stream
Use just one WasmInterpreterThread now in wasm-interp
Lazily allocate thread's host_args vector, rather than trying to
determine the maximum size from all signatures","The func_fixups table is specified in the ""defined"" index-space, not
module
Always fill function tables with the unitialized value when created
The global_index_mapping table should include imported globals
Use the ""defined"" global index space when initializing module globals
Write table_index to istream for call_indirect
Write memory_index to istream for all memory ops
WasmInterpreterThread should not be tied to a particular module;
originally this was to match it to a given module's memory or table,
but now those values are in the instruction stream
Use just one WasmInterpreterThread now in wasm-interp
Lazily allocate thread's host_args vector, rather than trying to
determine the maximum size from all signatures",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,210,2016-11-08T19:00:14Z,2016-11-08T20:27:07Z,2016-11-08T20:27:07Z,MERGED,True,5,6,2,https://github.com/binji,Fix spec/binary test,1,[],https://github.com/WebAssembly/wabt/pull/210,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/210,"Also, don't fail in wasm_read_file when reading a file of size 0.","Also, don't fail in wasm_read_file when reading a file of size 0.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,211,2016-11-08T19:46:17Z,2016-11-10T01:01:22Z,2016-11-10T01:01:22Z,MERGED,True,330,121,29,https://github.com/citisolo,Convert tests to new flat syntax,7,[],https://github.com/WebAssembly/wabt/pull/211,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/211,"submitting more tests, I can see old commits in the history , just wondering  if they end up syncing when the pr is merged or if I should squash these ?","submitting more tests, I can see old commits in the history , just wondering  if they end up syncing when the pr is merged or if I should squash these ?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,212,2016-11-10T00:31:14Z,2016-11-10T22:29:46Z,2016-11-10T22:29:46Z,CLOSED,False,32,14,3,https://github.com/binji,Don't read data outside the section boundaries,1,[],https://github.com/WebAssembly/wabt/pull/212,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/212,Fixes issue #177.,Fixes issue #177.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,213,2016-11-10T01:06:18Z,2016-11-10T22:29:46Z,2016-11-10T22:29:46Z,CLOSED,False,48,41,4,https://github.com/binji,Don't allow defined globals without an init expr,1,[],https://github.com/WebAssembly/wabt/pull/213,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/213,This fixes issue #188.,This fixes issue #188.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,216,2016-11-12T04:00:27Z,2016-11-14T20:08:30Z,2016-11-14T20:08:31Z,MERGED,True,58,4,4,https://github.com/binji,Allow named imports in the names section,1,[],https://github.com/WebAssembly/wabt/pull/216,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/216,"This worked before, but only if there was a defined function as well.
I believe this should fix #214 and #215.","This worked before, but only if there was a defined function as well.
I believe this should fix #214 and #215.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,217,2016-11-12T14:03:19Z,2016-11-14T22:58:05Z,2016-11-14T22:58:06Z,MERGED,True,166,65,9,https://github.com/citisolo,Convert tests to new flat syntax,9,[],https://github.com/WebAssembly/wabt/pull/217,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/217,more tests,more tests,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,217,2016-11-12T14:03:19Z,2016-11-14T22:58:05Z,2016-11-14T22:58:06Z,MERGED,True,166,65,9,https://github.com/citisolo,Convert tests to new flat syntax,9,[],https://github.com/WebAssembly/wabt/pull/217,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/217#issuecomment-260491206,more tests,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,218,2016-11-14T22:41:23Z,2016-11-16T18:21:49Z,2016-11-16T18:21:50Z,CLOSED,False,610,358,13,https://github.com/binji,Add wast_resolve_names_* as a separate pass,1,[],https://github.com/WebAssembly/wabt/pull/218,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/218,"This used to be handled by wasm_check_ast, but is clunkier than having a
separate pass.","This used to be handled by wasm_check_ast, but is clunkier than having a
separate pass.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,218,2016-11-14T22:41:23Z,2016-11-16T18:21:49Z,2016-11-16T18:21:50Z,CLOSED,False,610,358,13,https://github.com/binji,Add wast_resolve_names_* as a separate pass,1,[],https://github.com/WebAssembly/wabt/pull/218,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/218#issuecomment-260743154,"This used to be handled by wasm_check_ast, but is clunkier than having a
separate pass.",@sbc100 @KarlSchimpf ptal (looks like the failure on travis is a flake),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,218,2016-11-14T22:41:23Z,2016-11-16T18:21:49Z,2016-11-16T18:21:50Z,CLOSED,False,610,358,13,https://github.com/binji,Add wast_resolve_names_* as a separate pass,1,[],https://github.com/WebAssembly/wabt/pull/218,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/218#issuecomment-260795812,"This used to be handled by wasm_check_ast, but is clunkier than having a
separate pass.","Yeah, I think so. ast-validator? or maybe just ast-validate? I've been naming the files as nouns (reader/writer/etc.) but perhaps it makes less sense in this case.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,218,2016-11-14T22:41:23Z,2016-11-16T18:21:49Z,2016-11-16T18:21:50Z,CLOSED,False,610,358,13,https://github.com/binji,Add wast_resolve_names_* as a separate pass,1,[],https://github.com/WebAssembly/wabt/pull/218,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/218#issuecomment-260797912,"This used to be handled by wasm_check_ast, but is clunkier than having a
separate pass.","Why the ast- prefix on the filename?  alternatively, why isn't the new file called ast-resolve-names?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,218,2016-11-14T22:41:23Z,2016-11-16T18:21:49Z,2016-11-16T18:21:50Z,CLOSED,False,610,358,13,https://github.com/binji,Add wast_resolve_names_* as a separate pass,1,[],https://github.com/WebAssembly/wabt/pull/218,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/218#issuecomment-260807460,"This used to be handled by wasm_check_ast, but is clunkier than having a
separate pass.","Hm, good point. I guess I added it originally for the parser and lexer. But yeah, probably not needed for anything else, it's reasonable to assume that they work on the AST.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,218,2016-11-14T22:41:23Z,2016-11-16T18:21:49Z,2016-11-16T18:21:50Z,CLOSED,False,610,358,13,https://github.com/binji,Add wast_resolve_names_* as a separate pass,1,[],https://github.com/WebAssembly/wabt/pull/218,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/218#issuecomment-261006811,"This used to be handled by wasm_check_ast, but is clunkier than having a
separate pass.","Happy for this to land as-is, with any renaming as followup.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,219,2016-11-15T00:31:17Z,2016-11-15T00:50:26Z,2016-11-15T00:50:28Z,MERGED,True,18,2,3,https://github.com/sbc100,Add tests for 'wasmdump -h',1,[],https://github.com/WebAssembly/wabt/pull/219,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/219,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,220,2016-11-15T01:46:16Z,2016-11-19T00:20:14Z,2016-12-09T19:43:20Z,MERGED,True,86,30,10,https://github.com/sbc100,Parse arbitrary user sections,3,[],https://github.com/WebAssembly/wabt/pull/220,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/220,"Handle user sections interspersed with other section
types and add tests from these.
Switch from calling these sections ""Unknown"" to
""User"".
Fixes #214","Handle user sections interspersed with other section
types and add tests from these.
Switch from calling these sections ""Unknown"" to
""User"".
Fixes #214",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,221,2016-11-16T18:49:11Z,2016-11-19T20:52:58Z,2016-11-19T20:52:58Z,CLOSED,False,28,26,4,https://github.com/binji,Rename check to validate in most places,1,[],https://github.com/WebAssembly/wabt/pull/221,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/221,"Still have the --no-check flags, though.","Still have the --no-check flags, though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,222,2016-11-17T11:27:59Z,2016-11-17T18:35:14Z,2016-11-21T18:06:53Z,MERGED,True,536,192,20,https://github.com/citisolo,Convert tests to new flat syntax,12,[],https://github.com/WebAssembly/wabt/pull/222,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/222,converted parse and roundtrip tests to new flat syntax,converted parse and roundtrip tests to new flat syntax,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,222,2016-11-17T11:27:59Z,2016-11-17T18:35:14Z,2016-11-21T18:06:53Z,MERGED,True,536,192,20,https://github.com/citisolo,Convert tests to new flat syntax,12,[],https://github.com/WebAssembly/wabt/pull/222,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/222#issuecomment-261329720,converted parse and roundtrip tests to new flat syntax,"great, lgtm",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,223,2016-11-21T22:03:28Z,2016-11-21T23:17:17Z,2016-12-09T19:46:14Z,MERGED,True,2,1,1,https://github.com/dschuff,Update README.md,1,[],https://github.com/WebAssembly/wabt/pull/223,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/223,"Add windows build status, and document wast-desugar tool.","Add windows build status, and document wast-desugar tool.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,223,2016-11-21T22:03:28Z,2016-11-21T23:17:17Z,2016-12-09T19:46:14Z,MERGED,True,2,1,1,https://github.com/dschuff,Update README.md,1,[],https://github.com/WebAssembly/wabt/pull/223,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/223#issuecomment-262095656,"Add windows build status, and document wast-desugar tool.",lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,224,2016-11-22T01:06:50Z,2016-11-22T23:11:31Z,2016-11-22T23:11:31Z,MERGED,True,82,47,12,https://github.com/citisolo,Converted typecheck tests to flat syntax,1,[],https://github.com/WebAssembly/wabt/pull/224,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/224,more tests,more tests,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,224,2016-11-22T01:06:50Z,2016-11-22T23:11:31Z,2016-11-22T23:11:31Z,MERGED,True,82,47,12,https://github.com/citisolo,Converted typecheck tests to flat syntax,1,[],https://github.com/WebAssembly/wabt/pull/224,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/224#issuecomment-262393882,more tests,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,225,2016-11-23T00:53:49Z,2016-11-23T18:40:53Z,2016-12-09T19:46:13Z,MERGED,True,45,1,3,https://github.com/sbc100,wasmdump: Dump contents of `name` section,2,[],https://github.com/WebAssembly/wabt/pull/225,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/225,"Also add --dump-verbose flag to run-wasmdump.py in order to
be able test the output of wasmdump -v","Also add --dump-verbose flag to run-wasmdump.py in order to
be able test the output of wasmdump -v",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,226,2016-11-23T19:08:17Z,2016-12-01T00:18:59Z,2016-12-09T19:46:01Z,MERGED,True,223,161,25,https://github.com/sbc100,Wasmdump improvments,7,[],https://github.com/WebAssembly/wabt/pull/226,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/226,fixes #167,fixes #167,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,226,2016-11-23T19:08:17Z,2016-12-01T00:18:59Z,2016-12-09T19:46:01Z,MERGED,True,223,161,25,https://github.com/sbc100,Wasmdump improvments,7,[],https://github.com/WebAssembly/wabt/pull/226,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/226#issuecomment-263382580,fixes #167,"Hm, looks like OS/X doesn't print negative nan; maybe it's being canonicalized?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,226,2016-11-23T19:08:17Z,2016-12-01T00:18:59Z,2016-12-09T19:46:01Z,MERGED,True,223,161,25,https://github.com/sbc100,Wasmdump improvments,7,[],https://github.com/WebAssembly/wabt/pull/226,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/226#issuecomment-263756728,fixes #167,"To handle the OS/X nan canonicalization, you can use wasm_write_float_hex and wasm_write_double_hex from literal.h instead. Or you could check for the values being nan (x != x) and special case that.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,226,2016-11-23T19:08:17Z,2016-12-01T00:18:59Z,2016-12-09T19:46:01Z,MERGED,True,223,161,25,https://github.com/sbc100,Wasmdump improvments,7,[],https://github.com/WebAssembly/wabt/pull/226,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/226#issuecomment-263758037,fixes #167,Switching to %g looks like it made travis happy.. unless I'm missing something?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,226,2016-11-23T19:08:17Z,2016-12-01T00:18:59Z,2016-12-09T19:46:01Z,MERGED,True,223,161,25,https://github.com/sbc100,Wasmdump improvments,7,[],https://github.com/WebAssembly/wabt/pull/226,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/226#issuecomment-263758255,fixes #167,OIC travis can be green even when OSX is not yet passing,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,226,2016-11-23T19:08:17Z,2016-12-01T00:18:59Z,2016-12-09T19:46:01Z,MERGED,True,223,161,25,https://github.com/sbc100,Wasmdump improvments,7,[],https://github.com/WebAssembly/wabt/pull/226,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/226#issuecomment-263758313,fixes #167,"Yeah, it's because OSX build is slow... :-|",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,227,2016-11-23T23:27:41Z,2016-11-28T20:47:44Z,2016-11-28T20:47:44Z,MERGED,True,207,135,27,https://github.com/citisolo,Convert tests to new flat syntax,4,[],https://github.com/WebAssembly/wabt/pull/227,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/227,more tests,more tests,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,228,2016-11-24T02:28:30Z,2017-01-11T14:21:23Z,2017-01-11T14:21:27Z,MERGED,True,1810,31,25,https://github.com/sbc100,Add support for linkable modules,16,[],https://github.com/WebAssembly/wabt/pull/228,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/228,"This change adds support for writing wasm modules such
that they are compatible with the proposed linking spec:
https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md
Basically this means that wast2wasm will generate and extra
'reloc' section and will pad any LEBs in the code section
that might require relocation.
This mode is activated by passing the -c flag to wast2wasm.
Also, start work on wasm-link which should be able to link
such modules together.","This change adds support for writing wasm modules such
that they are compatible with the proposed linking spec:
https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md
Basically this means that wast2wasm will generate and extra
'reloc' section and will pad any LEBs in the code section
that might require relocation.
This mode is activated by passing the -c flag to wast2wasm.
Also, start work on wasm-link which should be able to link
such modules together.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,228,2016-11-24T02:28:30Z,2017-01-11T14:21:23Z,2017-01-11T14:21:27Z,MERGED,True,1810,31,25,https://github.com/sbc100,Add support for linkable modules,16,[],https://github.com/WebAssembly/wabt/pull/228,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/228#issuecomment-262676229,"This change adds support for writing wasm modules such
that they are compatible with the proposed linking spec:
https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md
Basically this means that wast2wasm will generate and extra
'reloc' section and will pad any LEBs in the code section
that might require relocation.
This mode is activated by passing the -c flag to wast2wasm.
Also, start work on wasm-link which should be able to link
such modules together.",This is very much a work in progress PR.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,229,2016-11-30T18:31:21Z,2016-12-05T23:42:24Z,2016-12-05T23:42:24Z,CLOSED,False,934,159,18,https://github.com/binji,Fix gen-spec-js.py,1,[],https://github.com/WebAssembly/wabt/pull/229,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/229,This now (mostly) matches the output from the spec interpreter.,This now (mostly) matches the output from the spec interpreter.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,229,2016-11-30T18:31:21Z,2016-12-05T23:42:24Z,2016-12-05T23:42:24Z,CLOSED,False,934,159,18,https://github.com/binji,Fix gen-spec-js.py,1,[],https://github.com/WebAssembly/wabt/pull/229,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/229#issuecomment-264323925,This now (mostly) matches the output from the spec interpreter.,@sbc100 ptal,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,230,2016-12-01T02:13:21Z,2016-12-02T19:25:06Z,2016-12-09T19:43:39Z,MERGED,True,52,17,5,https://github.com/sbc100,Improve handling of globals in wasmdump,3,[],https://github.com/WebAssembly/wabt/pull/230,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/230,"Also, fix bug in on_error handling.","Also, fix bug in on_error handling.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,230,2016-12-01T02:13:21Z,2016-12-02T19:25:06Z,2016-12-09T19:43:39Z,MERGED,True,52,17,5,https://github.com/sbc100,Improve handling of globals in wasmdump,3,[],https://github.com/WebAssembly/wabt/pull/230,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/230#issuecomment-264535561,"Also, fix bug in on_error handling.","Nice, lgtm",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,231,2016-12-02T18:06:00Z,2016-12-05T18:25:39Z,2016-12-09T19:46:01Z,MERGED,True,46,46,8,https://github.com/sbc100,Rename `user` sections to `custom` sections,2,[],https://github.com/WebAssembly/wabt/pull/231,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/231,As per WebAssembly/design#87,As per WebAssembly/design#87,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,232,2016-12-02T21:24:59Z,2016-12-05T18:54:02Z,2016-12-09T19:43:58Z,MERGED,True,41,5,4,https://github.com/sbc100,Add wasm_get_section_name to binary.h,1,[],https://github.com/WebAssembly/wabt/pull/232,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/232,"This function is also useful for the linker proof-of-concept
I'm working on.","This function is also useful for the linker proof-of-concept
I'm working on.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,232,2016-12-02T21:24:59Z,2016-12-05T18:54:02Z,2016-12-09T19:43:58Z,MERGED,True,41,5,4,https://github.com/sbc100,Add wasm_get_section_name to binary.h,1,[],https://github.com/WebAssembly/wabt/pull/232,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/232#issuecomment-264571344,"This function is also useful for the linker proof-of-concept
I'm working on.",lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,234,2016-12-06T00:03:40Z,2016-12-07T01:31:43Z,2016-12-07T01:31:43Z,CLOSED,False,171,89,6,https://github.com/binji,"Implement assert_{malformed,unlinkable,uninstantiable}",1,[],https://github.com/WebAssembly/wabt/pull/234,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/234,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,235,2016-12-06T01:37:53Z,2016-12-06T02:43:16Z,2016-12-08T21:03:53Z,MERGED,True,6,5,1,https://github.com/Cellule,Escape source filename when writing to json,1,[],https://github.com/WebAssembly/wabt/pull/235,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/235,\ are used in paths on Windows and need to be escaped to be valid json,\ are used in paths on Windows and need to be escaped to be valid json,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,235,2016-12-06T01:37:53Z,2016-12-06T02:43:16Z,2016-12-08T21:03:53Z,MERGED,True,6,5,1,https://github.com/Cellule,Escape source filename when writing to json,1,[],https://github.com/WebAssembly/wabt/pull/235,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/235#issuecomment-265044909,\ are used in paths on Windows and need to be escaped to be valid json,"lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,236,2016-12-07T20:12:17Z,2016-12-07T22:50:58Z,2016-12-09T19:46:00Z,MERGED,True,35,11,4,https://github.com/sbc100,wasmdump: improve print of tables and elements,2,[],https://github.com/WebAssembly/wabt/pull/236,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/236,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,236,2016-12-07T20:12:17Z,2016-12-07T22:50:58Z,2016-12-09T19:46:00Z,MERGED,True,35,11,4,https://github.com/sbc100,wasmdump: improve print of tables and elements,2,[],https://github.com/WebAssembly/wabt/pull/236,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/236#issuecomment-265589525,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/237,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.","Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/237#issuecomment-265840907,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.",@sbc100,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/237#issuecomment-265853644,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.","Interesting, I've usually found that going the other direction (threading->multiprocessing) makes things more reliable for python programs. Do you have any idea what's causing the flakiness?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/237#issuecomment-265854120,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.","No, not sure. :-|",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/dschuff,5,https://github.com/WebAssembly/wabt/pull/237#issuecomment-265855968,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.","well, it's worth a shot anyway, especially since you've already done the work. In general I would prefer multiprocessing over threading (it's a newer interface and as I said I believe it's easier to use and more reliable), so if this doesn't help the problem we should maybe revert it eventually.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/dschuff,6,https://github.com/WebAssembly/wabt/pull/237#issuecomment-265856092,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.",oh also a new github feature: you can explicitly request review from a particular person,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/237#issuecomment-265874846,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.",Neat!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/237#issuecomment-265877303,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.","I think perhaps the issue is that I'm managing the queues, processes, and termination directly; perhaps using multiprocessing.Pool instead would fix the issues as well. It just seems like an annoying bug to track down, considering it only seems to happen on Travis.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/sbc100,9,https://github.com/WebAssembly/wabt/pull/237#issuecomment-265885922,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.","@dschuff for some reason my gut tells me the exact opposite.  i.e. multi-processing is a fragile hack who's only/main purpose in life is to work around python's silly GIL implementation detail.  In that past I remember having trouble with multiprocessing and finding it less intuitive than multithreading (which I'm used to from so many of other languages).   My intuition could be wrong / out-of-date though.
No opinion on this change specifically though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/dschuff,10,https://github.com/WebAssembly/wabt/pull/237#issuecomment-266061216,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.",@binji were you planning on trying something else instead of this? Or did you find through some other means that it didn't help?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,237,2016-12-08T00:16:28Z,2016-12-08T23:03:59Z,2016-12-09T18:13:16Z,CLOSED,False,42,30,1,https://github.com/binji,"Use threading, not multiprocessing, in run-tests",1,[],https://github.com/WebAssembly/wabt/pull/237,https://github.com/binji,11,https://github.com/WebAssembly/wabt/pull/237#issuecomment-266082283,"Hopefully this will fix the stability when running the tests on Travis.
On my machine, this does run 2x slower, but it's still pretty fast.","No, this was merged, it just didn't show up that way in GH for some reason.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,238,2016-12-08T20:30:21Z,2016-12-08T22:55:00Z,2016-12-08T22:57:17Z,MERGED,True,38,8,4,https://github.com/sbc100,wasmdump: dump data segements,3,[],https://github.com/WebAssembly/wabt/pull/238,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/238,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,238,2016-12-08T20:30:21Z,2016-12-08T22:55:00Z,2016-12-08T22:57:17Z,MERGED,True,38,8,4,https://github.com/sbc100,wasmdump: dump data segements,3,[],https://github.com/WebAssembly/wabt/pull/238,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/238#issuecomment-265876672,,"nice, lgtm",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,239,2016-12-09T00:49:40Z,2016-12-10T01:14:30Z,2016-12-10T01:14:30Z,MERGED,True,1048,871,21,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/239,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/239,"Non-imported globals can not be used in initializer expressions
block/loop/if labels can be repeated at the end
get_global index in initializer expression should reference use module
index space, not ""defined"" global index space","Non-imported globals can not be used in initializer expressions
block/loop/if labels can be repeated at the end
get_global index in initializer expression should reference use module
index space, not ""defined"" global index space",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,240,2016-12-09T20:40:12Z,2016-12-09T23:16:55Z,2016-12-09T23:16:57Z,MERGED,True,11,2,2,https://github.com/sbc100,wasmdump: add memory index to segment info,1,[],https://github.com/WebAssembly/wabt/pull/240,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/240,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,240,2016-12-09T20:40:12Z,2016-12-09T23:16:55Z,2016-12-09T23:16:57Z,MERGED,True,11,2,2,https://github.com/sbc100,wasmdump: add memory index to segment info,1,[],https://github.com/WebAssembly/wabt/pull/240,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/240#issuecomment-266118276,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,241,2016-12-09T23:02:02Z,2016-12-10T22:09:26Z,2016-12-12T19:35:38Z,MERGED,True,55,28,4,https://github.com/Cellule,Adjust asserts to allow writing invalid modules,2,[],https://github.com/WebAssembly/wabt/pull/241,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/241,I was able to convert all assert_invalid tests in the spec repository using this change,I was able to convert all assert_invalid tests in the spec repository using this change,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,241,2016-12-09T23:02:02Z,2016-12-10T22:09:26Z,2016-12-12T19:35:38Z,MERGED,True,55,28,4,https://github.com/Cellule,Adjust asserts to allow writing invalid modules,2,[],https://github.com/WebAssembly/wabt/pull/241,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/241#issuecomment-266148387,I was able to convert all assert_invalid tests in the spec repository using this change,"Cool, I figured it would require more work-arounds.
I'm OK with modifying the asserts, but I don't like the additional is_invalid member on the WasmModule. It looks like you could plumb a WasmBool through write_invalid_module, write_raw_module and write_module and add this as an option to wasm_write_binary_module in the WasmWriteBinaryOptions struct instead. I think that would be a bit cleaner.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,241,2016-12-09T23:02:02Z,2016-12-10T22:09:26Z,2016-12-12T19:35:38Z,MERGED,True,55,28,4,https://github.com/Cellule,Adjust asserts to allow writing invalid modules,2,[],https://github.com/WebAssembly/wabt/pull/241,https://github.com/Cellule,3,https://github.com/WebAssembly/wabt/pull/241#issuecomment-266167191,I was able to convert all assert_invalid tests in the spec repository using this change,It seems there is some more work to do in wasm-interp to support assert_invalid case,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,241,2016-12-09T23:02:02Z,2016-12-10T22:09:26Z,2016-12-12T19:35:38Z,MERGED,True,55,28,4,https://github.com/Cellule,Adjust asserts to allow writing invalid modules,2,[],https://github.com/WebAssembly/wabt/pull/241,https://github.com/Cellule,4,https://github.com/WebAssembly/wabt/pull/241#issuecomment-266167733,I was able to convert all assert_invalid tests in the spec repository using this change,"I think I have fixed the error in wasm-interp.
However, I wasn't able to make running the assert_invalid scenario correctly in the interpreter.
I think it's better to leave the implementation to another PR and let this move on to at least generate invalid cases for now",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,242,2016-12-10T22:26:34Z,2016-12-10T22:27:35Z,2016-12-12T19:09:00Z,MERGED,True,37,34,3,https://github.com/binji,"clang-format, and python3 support in gen-spec-js.py",1,[],https://github.com/WebAssembly/wabt/pull/242,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/242,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,242,2016-12-10T22:26:34Z,2016-12-10T22:27:35Z,2016-12-12T19:09:00Z,MERGED,True,37,34,3,https://github.com/binji,"clang-format, and python3 support in gen-spec-js.py",1,[],https://github.com/WebAssembly/wabt/pull/242,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/242#issuecomment-266502335,,This is a good idea; I wonder how we can keep it from regressing? I wonder if travis has python3?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,242,2016-12-10T22:26:34Z,2016-12-10T22:27:35Z,2016-12-12T19:09:00Z,MERGED,True,37,34,3,https://github.com/binji,"clang-format, and python3 support in gen-spec-js.py",1,[],https://github.com/WebAssembly/wabt/pull/242,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/242#issuecomment-266521746,,I bet we can install it.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,243,2016-12-12T08:16:10Z,2016-12-12T19:10:01Z,2016-12-12T19:10:02Z,MERGED,True,146,0,14,https://github.com/binji,"Add new ""fail"" spec tests",1,[],https://github.com/WebAssembly/wabt/pull/243,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/243,I forgot to add these when I last updated the testsuite..,I forgot to add these when I last updated the testsuite..,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,244,2016-12-13T00:32:29Z,2016-12-13T19:00:47Z,2016-12-13T19:01:05Z,MERGED,True,13,7,3,https://github.com/sbc100,wasmdump: improve printing of limits,1,[],https://github.com/WebAssembly/wabt/pull/244,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/244,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,244,2016-12-13T00:32:29Z,2016-12-13T19:00:47Z,2016-12-13T19:01:05Z,MERGED,True,13,7,3,https://github.com/sbc100,wasmdump: improve printing of limits,1,[],https://github.com/WebAssembly/wabt/pull/244,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/244#issuecomment-266609908,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,245,2016-12-13T19:22:31Z,2016-12-15T01:44:37Z,2016-12-16T01:10:49Z,MERGED,True,342,263,19,https://github.com/sbc100,Make some binary reading/writing utilities public,6,[],https://github.com/WebAssembly/wabt/pull/245,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/245,"This is mostly a refactor to make some of the internal
binary reading/writing utilities public and available
to the wasm linker prototype that I'm working on.","This is mostly a refactor to make some of the internal
binary reading/writing utilities public and available
to the wasm linker prototype that I'm working on.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,246,2016-12-15T01:44:43Z,2016-12-15T19:50:50Z,2016-12-16T04:08:05Z,MERGED,True,26,0,2,https://github.com/sbc100,Add check for sections that end before they are expected too,2,[],https://github.com/WebAssembly/wabt/pull/246,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/246,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,247,2016-12-15T21:57:55Z,2016-12-16T00:31:24Z,2016-12-16T00:31:25Z,MERGED,True,715,579,25,https://github.com/binji,Update testsuite to f71cbe72bd5f4fb871bee39a9dc1278fa662a8a5,1,[],https://github.com/WebAssembly/wabt/pull/247,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/247,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,248,2016-12-16T00:31:53Z,2016-12-19T19:48:52Z,2016-12-19T19:48:52Z,CLOSED,False,424,450,3,https://github.com/binji,Rewrite the binary section reader code,1,[],https://github.com/WebAssembly/wabt/pull/248,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/248,"The previous way took advantage of the fact that WebAssembly sections
have a required order, but ultimately it made the code more complicated
and fragile.
This change makes parsing more natural; read each section and dispatch
to a function that knows how to parse it.","The previous way took advantage of the fact that WebAssembly sections
have a required order, but ultimately it made the code more complicated
and fragile.
This change makes parsing more natural; read each section and dispatch
to a function that knows how to parse it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,249,2016-12-19T13:06:46Z,2016-12-19T23:47:58Z,2016-12-19T23:47:58Z,CLOSED,False,1,1,1,https://github.com/citisolo,Fix orphaned symlinks,7,[],https://github.com/WebAssembly/wabt/pull/249,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/249,symlinks were not being cleaned along with executables they pointed to leaving broken symlinks on every clean. Added the two symlinks to the 'clean' property for the project,symlinks were not being cleaned along with executables they pointed to leaving broken symlinks on every clean. Added the two symlinks to the 'clean' property for the project,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,249,2016-12-19T13:06:46Z,2016-12-19T23:47:58Z,2016-12-19T23:47:58Z,CLOSED,False,1,1,1,https://github.com/citisolo,Fix orphaned symlinks,7,[],https://github.com/WebAssembly/wabt/pull/249,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/249#issuecomment-268055842,symlinks were not being cleaned along with executables they pointed to leaving broken symlinks on every clean. Added the two symlinks to the 'clean' property for the project,Looks like this branch includes a bunch of extraneous/duplicate commits.   Perhaps rebase?,True,{'THUMBS_UP': ['https://github.com/citisolo']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,249,2016-12-19T13:06:46Z,2016-12-19T23:47:58Z,2016-12-19T23:47:58Z,CLOSED,False,1,1,1,https://github.com/citisolo,Fix orphaned symlinks,7,[],https://github.com/WebAssembly/wabt/pull/249,https://github.com/citisolo,3,https://github.com/WebAssembly/wabt/pull/249#issuecomment-268112366,symlinks were not being cleaned along with executables they pointed to leaving broken symlinks on every clean. Added the two symlinks to the 'clean' property for the project,Agreed. This PR is all messed up so I'm going to close this and reopen a newer cleaner one,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,250,2016-12-19T21:36:18Z,2016-12-20T19:25:06Z,2016-12-20T19:25:08Z,MERGED,True,17,0,2,https://github.com/binji,Validate function vars in elem segments,1,[],https://github.com/WebAssembly/wabt/pull/250,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/250,They must reference a valid function.,They must reference a valid function.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,251,2016-12-19T23:48:05Z,2016-12-20T00:01:54Z,2016-12-20T00:01:54Z,MERGED,True,1,1,1,https://github.com/citisolo, Added symlinks to 'make clean' rule ,1,[],https://github.com/WebAssembly/wabt/pull/251,https://github.com/citisolo,1,https://github.com/WebAssembly/wabt/pull/251,Added symlinks to 'make clean' rule so no broken symlinks are left hanging around after a clean,Added symlinks to 'make clean' rule so no broken symlinks are left hanging around after a clean,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,251,2016-12-19T23:48:05Z,2016-12-20T00:01:54Z,2016-12-20T00:01:54Z,MERGED,True,1,1,1,https://github.com/citisolo, Added symlinks to 'make clean' rule ,1,[],https://github.com/WebAssembly/wabt/pull/251,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/251#issuecomment-268114651,Added symlinks to 'make clean' rule so no broken symlinks are left hanging around after a clean,"lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,252,2016-12-20T21:25:18Z,2016-12-20T21:45:17Z,2016-12-20T21:45:30Z,MERGED,True,33,18,3,https://github.com/sbc100,Add a couple of string slice utility functions,1,[],https://github.com/WebAssembly/wabt/pull/252,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/252,"These are needed to support the wasm-link utility
that will hopefully be landing soon.","These are needed to support the wasm-link utility
that will hopefully be landing soon.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,253,2016-12-21T21:51:38Z,2017-01-06T23:03:39Z,2017-01-06T23:04:34Z,MERGED,True,65,16,7,https://github.com/binji,wasm2wast: parse the name section by default,1,[],https://github.com/WebAssembly/wabt/pull/253,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/253,You can now disable this behavior by passing --no-debug-names.,You can now disable this behavior by passing --no-debug-names.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,253,2016-12-21T21:51:38Z,2017-01-06T23:03:39Z,2017-01-06T23:04:34Z,MERGED,True,65,16,7,https://github.com/binji,wasm2wast: parse the name section by default,1,[],https://github.com/WebAssembly/wabt/pull/253,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/253#issuecomment-268650475,You can now disable this behavior by passing --no-debug-names.,FYI: @sunfishcode,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,253,2016-12-21T21:51:38Z,2017-01-06T23:03:39Z,2017-01-06T23:04:34Z,MERGED,True,65,16,7,https://github.com/binji,wasm2wast: parse the name section by default,1,[],https://github.com/WebAssembly/wabt/pull/253,https://github.com/sunfishcode,3,https://github.com/WebAssembly/wabt/pull/253#issuecomment-268650917,You can now disable this behavior by passing --no-debug-names.,\o/,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,253,2016-12-21T21:51:38Z,2017-01-06T23:03:39Z,2017-01-06T23:04:34Z,MERGED,True,65,16,7,https://github.com/binji,wasm2wast: parse the name section by default,1,[],https://github.com/WebAssembly/wabt/pull/253,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/253#issuecomment-270791730,You can now disable this behavior by passing --no-debug-names.,@sbc100 PTAL,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,253,2016-12-21T21:51:38Z,2017-01-06T23:03:39Z,2017-01-06T23:04:34Z,MERGED,True,65,16,7,https://github.com/binji,wasm2wast: parse the name section by default,1,[],https://github.com/WebAssembly/wabt/pull/253,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/253#issuecomment-270904788,You can now disable this behavior by passing --no-debug-names.,otherwise lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,253,2016-12-21T21:51:38Z,2017-01-06T23:03:39Z,2017-01-06T23:04:34Z,MERGED,True,65,16,7,https://github.com/binji,wasm2wast: parse the name section by default,1,[],https://github.com/WebAssembly/wabt/pull/253,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/253#issuecomment-271031247,You can now disable this behavior by passing --no-debug-names.,done!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,253,2016-12-21T21:51:38Z,2017-01-06T23:03:39Z,2017-01-06T23:04:34Z,MERGED,True,65,16,7,https://github.com/binji,wasm2wast: parse the name section by default,1,[],https://github.com/WebAssembly/wabt/pull/253,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/253#issuecomment-271034340,You can now disable this behavior by passing --no-debug-names.,"Aw, I changed the PR name, but it didn't change the commit name by default. Sorry about that.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,254,2016-12-22T00:35:15Z,2016-12-23T00:11:27Z,2016-12-23T00:11:31Z,MERGED,True,1,1,1,https://github.com/jfbastien,"""Copied from"" is so inelegant",2,[],https://github.com/WebAssembly/wabt/pull/254,https://github.com/jfbastien,1,https://github.com/WebAssembly/wabt/pull/254,Wording is better this way.,Wording is better this way.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,254,2016-12-22T00:35:15Z,2016-12-23T00:11:27Z,2016-12-23T00:11:31Z,MERGED,True,1,1,1,https://github.com/jfbastien,"""Copied from"" is so inelegant",2,[],https://github.com/WebAssembly/wabt/pull/254,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/254#issuecomment-268890404,Wording is better this way.,"Hm, yes it is a bit weird. I copied the template from there, but then that gets put into the generated output, which makes the sentence inaccurate. That said, ""as generated by"" isn't quite right either. I guess I would prefer just being explicit and saying the template is from , generated by , where the tool is gen-spec-js.py.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,254,2016-12-22T00:35:15Z,2016-12-23T00:11:27Z,2016-12-23T00:11:31Z,MERGED,True,1,1,1,https://github.com/jfbastien,"""Copied from"" is so inelegant",2,[],https://github.com/WebAssembly/wabt/pull/254,https://github.com/jfbastien,3,https://github.com/WebAssembly/wabt/pull/254#issuecomment-268901442,Wording is better this way.,@binji gotcha. How about this?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,254,2016-12-22T00:35:15Z,2016-12-23T00:11:27Z,2016-12-23T00:11:31Z,MERGED,True,1,1,1,https://github.com/jfbastien,"""Copied from"" is so inelegant",2,[],https://github.com/WebAssembly/wabt/pull/254,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/254#issuecomment-268918496,Wording is better this way.,Perfect :),True,"{'HOORAY': ['https://github.com/jfbastien'], 'THUMBS_UP': ['https://github.com/saambarati']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,255,2016-12-23T03:49:48Z,2017-01-05T22:35:24Z,2017-01-05T22:35:26Z,MERGED,True,1289,1303,254,https://github.com/binji,Update test/run-tests.py,1,[],https://github.com/WebAssembly/wabt/pull/255,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/255,"Write all intermediate output to out/
Use real paths for all test names (i.e. include ""test/"")
A few Python3 fixes","Write all intermediate output to out/
Use real paths for all test names (i.e. include ""test/"")
A few Python3 fixes",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,257,2016-12-24T21:38:49Z,2016-12-25T21:01:44Z,2016-12-25T21:01:44Z,MERGED,True,164,3,5,https://github.com/binji,Write modules w/ invalid segments,1,[],https://github.com/WebAssembly/wabt/pull/257,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/257,"The binary writer should write invalid modules. This change allows
writing data/element segments if there is no memory/table segment,
respectively. It also writes the full init_expr, even if that would be
invalid.
Fixes issue #256.","The binary writer should write invalid modules. This change allows
writing data/element segments if there is no memory/table segment,
respectively. It also writes the full init_expr, even if that would be
invalid.
Fixes issue #256.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,260,2016-12-27T18:52:41Z,2016-12-27T19:11:09Z,2016-12-27T19:11:13Z,MERGED,True,1,1,1,https://github.com/saambarati,Update gen-spec-prefix.js,1,[],https://github.com/WebAssembly/wabt/pull/260,https://github.com/saambarati,1,https://github.com/WebAssembly/wabt/pull/260,See: #259,See: #259,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,260,2016-12-27T18:52:41Z,2016-12-27T19:11:09Z,2016-12-27T19:11:13Z,MERGED,True,1,1,1,https://github.com/saambarati,Update gen-spec-prefix.js,1,[],https://github.com/WebAssembly/wabt/pull/260,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/260#issuecomment-269368961,See: #259,"lgtm, though I should mention that this code is copied from the spec repo, so you'll likely want to update that too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,261,2016-12-27T20:02:45Z,2016-12-28T00:05:35Z,2016-12-28T00:05:37Z,MERGED,True,98,13,11,https://github.com/binji,Fix some binary reader bugs found by fuzzing,1,[],https://github.com/WebAssembly/wabt/pull/261,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/261,"Change assertions in apply-names to failures
Fix off-by-one bug in binary-reader-ast get_label_at
Keep track of last known section code, so the same section cannot be
specified twice, with a custom section between.","Change assertions in apply-names to failures
Fix off-by-one bug in binary-reader-ast get_label_at
Keep track of last known section code, so the same section cannot be
specified twice, with a custom section between.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,263,2017-01-03T20:05:17Z,2017-01-03T23:38:34Z,2017-01-03T23:38:36Z,MERGED,True,3,1,1,https://github.com/binji,"On FreeBSD, alloca is in stdlib.h",1,[],https://github.com/WebAssembly/wabt/pull/263,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/263,This should fix issue #262.,This should fix issue #262.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,264,2017-01-03T21:48:41Z,2017-01-03T23:40:06Z,2017-01-03T23:40:09Z,MERGED,True,33,51,5,https://github.com/binji,Fail when running wast2wasm w/ no module,1,[],https://github.com/WebAssembly/wabt/pull/264,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/264,This fixes issue #160.,This fixes issue #160.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,265,2017-01-05T18:14:25Z,2017-01-05T21:29:16Z,2017-01-05T21:29:20Z,MERGED,True,9,6,3,https://github.com/dschuff,Add extra casts in headers to remove warnings when building in C++ mode,3,[],https://github.com/WebAssembly/wabt/pull/265,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/265,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,265,2017-01-05T18:14:25Z,2017-01-05T21:29:16Z,2017-01-05T21:29:20Z,MERGED,True,9,6,3,https://github.com/dschuff,Add extra casts in headers to remove warnings when building in C++ mode,3,[],https://github.com/WebAssembly/wabt/pull/265,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/265#issuecomment-270738114,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,266,2017-01-06T17:39:15Z,2017-01-06T19:18:30Z,2017-01-09T18:56:11Z,MERGED,True,1,1,1,https://github.com/sbc100,Remove use python3-only newline argument to open(),1,[],https://github.com/WebAssembly/wabt/pull/266,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/266,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,266,2017-01-06T17:39:15Z,2017-01-06T19:18:30Z,2017-01-09T18:56:11Z,MERGED,True,1,1,1,https://github.com/sbc100,Remove use python3-only newline argument to open(),1,[],https://github.com/WebAssembly/wabt/pull/266,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/266#issuecomment-270967670,,"Huh, how did this pass on travis? well, lgtm
EDIT: I see, this is only for rebasing tests, so isn't tested.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,268,2017-01-07T00:21:14Z,2017-01-07T23:12:49Z,2017-01-07T23:12:51Z,MERGED,True,17,6,1,https://github.com/binji,"wast2wasm: don't write .0.wasm, w/ --spec",1,[],https://github.com/WebAssembly/wabt/pull/268,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/268,"When running wast2wasm with --spec, but without -o (so no .json file is
written), all modules were being written as .0.wasm, .1.wasm, etc. This
change will prevent those modules from being written too.","When running wast2wasm with --spec, but without -o (so no .json file is
written), all modules were being written as .0.wasm, .1.wasm, etc. This
change will prevent those modules from being written too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,269,2017-01-07T00:41:33Z,2017-01-09T21:34:31Z,2017-01-09T21:34:34Z,MERGED,True,27,2,3,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/269,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/269,"Also, update assert_malformed to initialize the environment so the
""spectest"" module is available.","Also, update assert_malformed to initialize the environment so the
""spectest"" module is available.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,270,2017-01-09T19:19:52Z,2017-01-10T14:21:34Z,2017-01-10T14:21:38Z,MERGED,True,15,8,2,https://github.com/sbc100,wasmdump: allow raw dump of specific section,1,[],https://github.com/WebAssembly/wabt/pull/270,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/270,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,270,2017-01-09T19:19:52Z,2017-01-10T14:21:34Z,2017-01-10T14:21:38Z,MERGED,True,15,8,2,https://github.com/sbc100,wasmdump: allow raw dump of specific section,1,[],https://github.com/WebAssembly/wabt/pull/270,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/270#issuecomment-271414492,,"Nice, lgtm",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,271,2017-01-11T16:10:32Z,2017-01-20T19:43:39Z,2017-01-23T20:38:43Z,MERGED,True,1312,710,22,https://github.com/sbc100,Add symbol resolution to wasm-link,28,[],https://github.com/WebAssembly/wabt/pull/271,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/271,"Symbols exported by one module can now be consumed
by another module at link time.  Imports that can
be resolved at link time are removed the output.
Any unresolved imported remaining in the output
binary are considered and error unless the -r flag
is passed.
Also split binary reading logic out of wasm-link.c
into its own binary-reader-linker file.","Symbols exported by one module can now be consumed
by another module at link time.  Imports that can
be resolved at link time are removed the output.
Any unresolved imported remaining in the output
binary are considered and error unless the -r flag
is passed.
Also split binary reading logic out of wasm-link.c
into its own binary-reader-linker file.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,271,2017-01-11T16:10:32Z,2017-01-20T19:43:39Z,2017-01-23T20:38:43Z,MERGED,True,1312,710,22,https://github.com/sbc100,Add symbol resolution to wasm-link,28,[],https://github.com/WebAssembly/wabt/pull/271,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/271#issuecomment-272513373,"Symbols exported by one module can now be consumed
by another module at link time.  Imports that can
be resolved at link time are removed the output.
Any unresolved imported remaining in the output
binary are considered and error unless the -r flag
is passed.
Also split binary reading logic out of wasm-link.c
into its own binary-reader-linker file.","@binji ptal.  Let me know if you want to to split this up.  I could for example split out the refactor of the reader, or the change the wasmdump formatting for relocations.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,273,2017-01-11T17:34:37Z,2017-01-12T13:44:11Z,2017-01-12T13:44:13Z,MERGED,True,70,99,13,https://github.com/sbc100,Pass --bindir to test helpers rather than full path to each tool,1,[],https://github.com/WebAssembly/wabt/pull/273,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/273,This simplifies the invocations and aids maintainability.,This simplifies the invocations and aids maintainability.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,273,2017-01-11T17:34:37Z,2017-01-12T13:44:11Z,2017-01-12T13:44:13Z,MERGED,True,70,99,13,https://github.com/sbc100,Pass --bindir to test helpers rather than full path to each tool,1,[],https://github.com/WebAssembly/wabt/pull/273,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/273#issuecomment-272014340,This simplifies the invocations and aids maintainability.,Awesome! lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,276,2017-01-17T18:22:35Z,2017-01-18T23:20:26Z,2017-01-18T23:20:29Z,MERGED,True,554,520,15,https://github.com/sbc100,Add support for yapf python formatting tool,2,[],https://github.com/WebAssembly/wabt/pull/276,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/276,"This changs adds .style.yapf to define the python style
we are using.
I also ran yapf over all the python files:
$ yapf -i git ls-files *.py
Going forward, we should probably add a travis test to
prevent regressions.  We should probably also switch to
more conventional 4-space indentation, which is used by
almost everybody outside of Google.","This changs adds .style.yapf to define the python style
we are using.
I also ran yapf over all the python files:
$ yapf -i git ls-files *.py
Going forward, we should probably add a travis test to
prevent regressions.  We should probably also switch to
more conventional 4-space indentation, which is used by
almost everybody outside of Google.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,276,2017-01-17T18:22:35Z,2017-01-18T23:20:26Z,2017-01-18T23:20:29Z,MERGED,True,554,520,15,https://github.com/sbc100,Add support for yapf python formatting tool,2,[],https://github.com/WebAssembly/wabt/pull/276,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/276#issuecomment-273276237,"This changs adds .style.yapf to define the python style
we are using.
I also ran yapf over all the python files:
$ yapf -i git ls-files *.py
Going forward, we should probably add a travis test to
prevent regressions.  We should probably also switch to
more conventional 4-space indentation, which is used by
almost everybody outside of Google.","hm, yapf seems to be fighting the flake8 plugin on appveyor",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,276,2017-01-17T18:22:35Z,2017-01-18T23:20:26Z,2017-01-18T23:20:29Z,MERGED,True,554,520,15,https://github.com/sbc100,Add support for yapf python formatting tool,2,[],https://github.com/WebAssembly/wabt/pull/276,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/276#issuecomment-273276407,"This changs adds .style.yapf to define the python style
we are using.
I also ran yapf over all the python files:
$ yapf -i git ls-files *.py
Going forward, we should probably add a travis test to
prevent regressions.  We should probably also switch to
more conventional 4-space indentation, which is used by
almost everybody outside of Google.","Other than that, lgtm. Some of the edits I don't like that much, but I can deal. :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,278,2017-01-17T23:08:18Z,2017-01-18T19:08:41Z,2017-01-18T19:08:43Z,MERGED,True,70,104,10,https://github.com/binji,Always use function index space in wasmdump,1,[],https://github.com/WebAssembly/wabt/pull/278,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/278,This fixes issue #277.,This fixes issue #277.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,278,2017-01-17T23:08:18Z,2017-01-18T19:08:41Z,2017-01-18T19:08:43Z,MERGED,True,70,104,10,https://github.com/binji,Always use function index space in wasmdump,1,[],https://github.com/WebAssembly/wabt/pull/278,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/278#issuecomment-273555926,This fixes issue #277.,Great! lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,279,2017-01-18T19:24:59Z,2017-01-18T20:51:07Z,2017-01-18T20:51:10Z,MERGED,True,2,5,1,https://github.com/sbc100,Remove duplicate copy of section string names,1,[],https://github.com/WebAssembly/wabt/pull/279,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/279,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,279,2017-01-18T19:24:59Z,2017-01-18T20:51:07Z,2017-01-18T20:51:10Z,MERGED,True,2,5,1,https://github.com/sbc100,Remove duplicate copy of section string names,1,[],https://github.com/WebAssembly/wabt/pull/279,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/279#issuecomment-273597843,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,280,2017-01-18T19:32:16Z,2017-01-18T21:52:40Z,2017-03-23T04:16:56Z,CLOSED,False,9,14,2,https://github.com/sbc100,Use sudo: false in travis builds,3,[],https://github.com/WebAssembly/wabt/pull/280,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/280,"This should allow the use of faster, container based
linux VMs.","This should allow the use of faster, container based
linux VMs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,280,2017-01-18T19:32:16Z,2017-01-18T21:52:40Z,2017-03-23T04:16:56Z,CLOSED,False,9,14,2,https://github.com/sbc100,Use sudo: false in travis builds,3,[],https://github.com/WebAssembly/wabt/pull/280,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/280#issuecomment-273613309,"This should allow the use of faster, container based
linux VMs.",Abandoning because we need sudo to get a 32-bit build environment running.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,281,2017-01-18T22:08:16Z,2017-01-19T01:00:39Z,2017-01-19T01:00:42Z,MERGED,True,3,7,3,https://github.com/sbc100,Flake8 travis,2,[],https://github.com/WebAssembly/wabt/pull/281,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/281,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,281,2017-01-18T22:08:16Z,2017-01-19T01:00:39Z,2017-01-19T01:00:42Z,MERGED,True,3,7,3,https://github.com/sbc100,Flake8 travis,2,[],https://github.com/WebAssembly/wabt/pull/281,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/281#issuecomment-273618362,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,282,2017-01-18T23:20:39Z,2017-01-19T18:41:19Z,2017-01-19T18:41:22Z,MERGED,True,2,3,2,https://github.com/sbc100,Allow more names than function in binary-reader,1,[],https://github.com/WebAssembly/wabt/pull/282,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/282,"ast-binary-reader will still fail if there are too
many names but the binary-reader itself will allow this
since the spec allows it.","ast-binary-reader will still fail if there are too
many names but the binary-reader itself will allow this
since the spec allows it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,282,2017-01-18T23:20:39Z,2017-01-19T18:41:19Z,2017-01-19T18:41:22Z,MERGED,True,2,3,2,https://github.com/sbc100,Allow more names than function in binary-reader,1,[],https://github.com/WebAssembly/wabt/pull/282,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/282#issuecomment-273635391,"ast-binary-reader will still fail if there are too
many names but the binary-reader itself will allow this
since the spec allows it.","Probably should fix the binary-reader-ast too, but I guess that's fine for another PR",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,283,2017-01-20T00:19:21Z,2017-01-20T01:01:37Z,2017-01-20T01:01:39Z,MERGED,True,114,72,6,https://github.com/binji,Pass import_index to binary reader import callbacks,1,[],https://github.com/WebAssembly/wabt/pull/283,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/283,"It was being passed before as ""index"", which is confusing because the
other callbacks have recently been changed to pass the
func/global/memory/table index instead.","It was being passed before as ""index"", which is confusing because the
other callbacks have recently been changed to pass the
func/global/memory/table index instead.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,284,2017-01-20T16:56:52Z,2017-01-20T17:57:48Z,2017-01-20T17:57:51Z,MERGED,True,20,23,5,https://github.com/sbc100,Improve wasmdump command line options,2,[],https://github.com/WebAssembly/wabt/pull/284,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/284,"These changes make wasmdump more closely match objdump.
Change -v/--verbose to -x/--details.  Change -r/--raw to
-s/--full-contents.  Error out unless on of -x/-d/-r/-h is
specified.  Previously wasmdump would simply print nothing
at all which was confusing.","These changes make wasmdump more closely match objdump.
Change -v/--verbose to -x/--details.  Change -r/--raw to
-s/--full-contents.  Error out unless on of -x/-d/-r/-h is
specified.  Previously wasmdump would simply print nothing
at all which was confusing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,285,2017-01-20T23:51:34Z,2017-01-23T19:18:54Z,2017-03-23T04:16:43Z,MERGED,True,366,190,90,https://github.com/sbc100,Add function names and relocations to wasmdump disassembly,2,[],https://github.com/WebAssembly/wabt/pull/285,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/285,Relocations are only shown if -r is passed.,Relocations are only shown if -r is passed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,285,2017-01-20T23:51:34Z,2017-01-23T19:18:54Z,2017-03-23T04:16:43Z,MERGED,True,366,190,90,https://github.com/sbc100,Add function names and relocations to wasmdump disassembly,2,[],https://github.com/WebAssembly/wabt/pull/285,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/285#issuecomment-274578457,Relocations are only shown if -r is passed.,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,287,2017-01-23T04:48:29Z,2017-01-23T20:00:25Z,2017-01-23T20:00:27Z,MERGED,True,38,1,2,https://github.com/binji,Don't apply names in name section to globals,1,[],https://github.com/WebAssembly/wabt/pull/287,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/287,"The name section currently only provides names for functions and locals.
This fixes issue #286.","The name section currently only provides names for functions and locals.
This fixes issue #286.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,288,2017-01-23T18:35:35Z,2017-01-23T19:02:49Z,2017-01-23T19:02:52Z,MERGED,True,6,24,3,https://github.com/binji,Remove index assertions in binary-writer.c,1,[],https://github.com/WebAssembly/wabt/pull/288,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/288,"These assertions aren't useful if we allow writing invalid modules. I
asked @Cellule to pipe through is_invalid instead, but now I think
it's better to just remove the assertions.","These assertions aren't useful if we allow writing invalid modules. I
asked @Cellule to pipe through is_invalid instead, but now I think
it's better to just remove the assertions.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,289,2017-01-24T00:02:33Z,2017-01-24T16:51:54Z,2017-01-24T16:51:56Z,MERGED,True,21,8,3,https://github.com/sbc100,Fix reading of custom section relocations,1,[],https://github.com/WebAssembly/wabt/pull/289,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/289,"The string name of the target section comes before
the relocation count.
This was not tested because we don't currently generate
any relocations for custom sections, so I also added
a binary/relocs.txt test to generate a binary that
does.","The string name of the target section comes before
the relocation count.
This was not tested because we don't currently generate
any relocations for custom sections, so I also added
a binary/relocs.txt test to generate a binary that
does.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,289,2017-01-24T00:02:33Z,2017-01-24T16:51:54Z,2017-01-24T16:51:56Z,MERGED,True,21,8,3,https://github.com/sbc100,Fix reading of custom section relocations,1,[],https://github.com/WebAssembly/wabt/pull/289,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/289#issuecomment-274658799,"The string name of the target section comes before
the relocation count.
This was not tested because we don't currently generate
any relocations for custom sections, so I also added
a binary/relocs.txt test to generate a binary that
does.",lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,290,2017-01-24T00:38:38Z,2017-01-24T00:57:10Z,2017-01-24T01:01:17Z,MERGED,True,4888,5548,11,https://github.com/Cellule,Assert exhaustion,2,['enhancement'],https://github.com/WebAssembly/wabt/pull/290,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/290,"Added support for assert_exhaustion type which was added in WebAssembly/spec#388
note: I wasn't able to install re2c 0.16 on my machine so the generated code might differ more than it should","Added support for assert_exhaustion type which was added in WebAssembly/spec#388
note: I wasn't able to install re2c 0.16 on my machine so the generated code might differ more than it should",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,290,2017-01-24T00:38:38Z,2017-01-24T00:57:10Z,2017-01-24T01:01:17Z,MERGED,True,4888,5548,11,https://github.com/Cellule,Assert exhaustion,2,['enhancement'],https://github.com/WebAssembly/wabt/pull/290,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/290#issuecomment-274668178,"Added support for assert_exhaustion type which was added in WebAssembly/spec#388
note: I wasn't able to install re2c 0.16 on my machine so the generated code might differ more than it should","Nice, lgtm!",True,{'LAUGH': ['https://github.com/Cellule']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,291,2017-01-24T01:29:00Z,2017-01-24T19:16:37Z,2017-01-24T19:16:39Z,MERGED,True,196,120,8,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/291,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/291,"Also:

Check all data/elem segments before updating memory/tables
assert_exhaustion should check for call stack or value stack
exhaustion.
Don't allow out-of-bound size 0 data segments","Also:

Check all data/elem segments before updating memory/tables
assert_exhaustion should check for call stack or value stack
exhaustion.
Don't allow out-of-bound size 0 data segments",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,293,2017-01-25T23:21:15Z,2017-01-26T21:17:38Z,2017-01-26T21:17:41Z,MERGED,True,137,41,6,https://github.com/binji,Resolve names in assert_invalid modules,1,[],https://github.com/WebAssembly/wabt/pull/293,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/293,"Names should be resolved in assert_invalid modules, even when running
wast2wasm with --no-check-assert-invalid-and-malformed.
This fixes issue #292.","Names should be resolved in assert_invalid modules, even when running
wast2wasm with --no-check-assert-invalid-and-malformed.
This fixes issue #292.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,293,2017-01-25T23:21:15Z,2017-01-26T21:17:38Z,2017-01-26T21:17:41Z,MERGED,True,137,41,6,https://github.com/binji,Resolve names in assert_invalid modules,1,[],https://github.com/WebAssembly/wabt/pull/293,https://github.com/Cellule,2,https://github.com/WebAssembly/wabt/pull/293#issuecomment-275495176,"Names should be resolved in assert_invalid modules, even when running
wast2wasm with --no-check-assert-invalid-and-malformed.
This fixes issue #292.",LGTM,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,294,2017-01-26T08:14:29Z,2017-01-27T19:00:35Z,2017-01-27T19:00:38Z,MERGED,True,1548,47,27,https://github.com/binji,Implement assert_invalid for wasm-interp,1,[],https://github.com/WebAssembly/wabt/pull/294,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/294,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,294,2017-01-26T08:14:29Z,2017-01-27T19:00:35Z,2017-01-27T19:00:38Z,MERGED,True,1548,47,27,https://github.com/binji,Implement assert_invalid for wasm-interp,1,[],https://github.com/WebAssembly/wabt/pull/294,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/294#issuecomment-275537868,,@sbc100 ptal,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,295,2017-01-27T04:16:40Z,2017-01-27T18:52:52Z,2017-01-27T18:52:52Z,MERGED,True,2,2,1,https://github.com/jayphelps,Update README now that wasm2wast defaults to including debug names,1,[],https://github.com/WebAssembly/wabt/pull/295,https://github.com/jayphelps,1,https://github.com/WebAssembly/wabt/pull/295,"As of #253, wasm2wast now includes debug-names by default, letting you opt-out via --no-debug-names.
I also noticed that now wasm2wast and wast2wasm are inconsistent in that regard. The later still defaulting to excluding debug names. Is that intentional? Happy to PR if it too should be reversed. There's mostly a tradition of toolchains requiring opt-in for optimizations like excluding debug names, but I'm new around here 🤓","As of #253, wasm2wast now includes debug-names by default, letting you opt-out via --no-debug-names.
I also noticed that now wasm2wast and wast2wasm are inconsistent in that regard. The later still defaulting to excluding debug names. Is that intentional? Happy to PR if it too should be reversed. There's mostly a tradition of toolchains requiring opt-in for optimizations like excluding debug names, but I'm new around here 🤓",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,295,2017-01-27T04:16:40Z,2017-01-27T18:52:52Z,2017-01-27T18:52:52Z,MERGED,True,2,2,1,https://github.com/jayphelps,Update README now that wasm2wast defaults to including debug names,1,[],https://github.com/WebAssembly/wabt/pull/295,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/295#issuecomment-275743537,"As of #253, wasm2wast now includes debug-names by default, letting you opt-out via --no-debug-names.
I also noticed that now wasm2wast and wast2wasm are inconsistent in that regard. The later still defaulting to excluding debug names. Is that intentional? Happy to PR if it too should be reversed. There's mostly a tradition of toolchains requiring opt-in for optimizations like excluding debug names, but I'm new around here 🤓","Thanks! My thoughts as to difference between wast2wasm and wasm2wast: when you're converting from binary to text, it is generally useful to use the names section if it exists. When you're converting from text to binary, you only want to add the names section for debugging purposes.
I think of it like passing -g to gcc. :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,296,2017-01-28T11:52:02Z,2017-01-30T18:31:44Z,2017-01-30T18:31:46Z,MERGED,True,14,3629,40,https://github.com/binji,"Remove assert_{invalid,malformed} checks from wast2wast",1,[],https://github.com/WebAssembly/wabt/pull/296,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/296,"Now that assert_invalid is checked by wasm-interp, all spec assertions
can be handled by the interpreter. Having a subset that are also handled
by wast2wasm is not useful.
Also, there was a bug in the option parser where passing an option that
didn't match could still work if a prefix was valid.","Now that assert_invalid is checked by wasm-interp, all spec assertions
can be handled by the interpreter. Having a subset that are also handled
by wast2wasm is not useful.
Also, there was a bug in the option parser where passing an option that
didn't match could still work if a prefix was valid.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,296,2017-01-28T11:52:02Z,2017-01-30T18:31:44Z,2017-01-30T18:31:46Z,MERGED,True,14,3629,40,https://github.com/binji,"Remove assert_{invalid,malformed} checks from wast2wast",1,[],https://github.com/WebAssembly/wabt/pull/296,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/296#issuecomment-276148398,"Now that assert_invalid is checked by wasm-interp, all spec assertions
can be handled by the interpreter. Having a subset that are also handled
by wast2wasm is not useful.
Also, there was a bug in the option parser where passing an option that
didn't match could still work if a prefix was valid.","I took another look at the tests, and I'm pretty sure I'm not removing any coverage. Always good to double check :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,297,2017-01-29T03:18:52Z,2017-01-30T03:02:50Z,2017-01-30T03:02:52Z,MERGED,True,74,50,4,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/297,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/297,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,298,2017-01-31T06:43:50Z,2017-02-01T01:16:19Z,2017-02-01T01:16:22Z,MERGED,True,19024,13320,81,https://github.com/binji,Rename all wasm prefixes to wabt,1,[],https://github.com/WebAssembly/wabt/pull/298,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/298,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,298,2017-01-31T06:43:50Z,2017-02-01T01:16:19Z,2017-02-01T01:16:22Z,MERGED,True,19024,13320,81,https://github.com/binji,Rename all wasm prefixes to wabt,1,[],https://github.com/WebAssembly/wabt/pull/298,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/298#issuecomment-276545685,,"Yes, CALLBACK is local to ast.c. I was trying to be careful about using the prefix only for external names. Probably made a few mistakes, though :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,300,2017-02-01T22:50:26Z,2017-02-02T00:46:09Z,2017-02-02T00:46:12Z,MERGED,True,95,154,11,https://github.com/binji,Update emscripten build and demo,1,[],https://github.com/WebAssembly/wabt/pull/300,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/300,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,301,2017-02-02T21:32:10Z,2017-02-02T22:28:05Z,2017-03-23T04:16:30Z,MERGED,True,1,1,1,https://github.com/dschuff,Add missing EXTERN_C_END to validator.h,1,[],https://github.com/WebAssembly/wabt/pull/301,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/301,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,302,2017-02-11T01:46:58Z,2017-02-14T19:05:44Z,2017-02-14T19:05:47Z,MERGED,True,1398,1014,61,https://github.com/binji,Full typechecking for unreachable code,1,[],https://github.com/WebAssembly/wabt/pull/302,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/302,"The typechecking is now shared between the validator and
binary-reader-interpreter as well.

Shared the various LabelType enumerations -> WabtLabelType.
Fixed the ""invalid depth"" errors, the max value was incorrect.
Removed some tests that aren't useful anymore:

interp/if-then-br hasn't been useful for a while, but now is even
less so because it doesn't validate without dropping the i32.const
from the true branch
typecheck/bad-br-multi-type isn't possible because the block must
specify the signature for the br.
typecheck/bad-label-multi-type used to test matching signature for
fallthrough and br, but isn't possible because of block signatures.","The typechecking is now shared between the validator and
binary-reader-interpreter as well.

Shared the various LabelType enumerations -> WabtLabelType.
Fixed the ""invalid depth"" errors, the max value was incorrect.
Removed some tests that aren't useful anymore:

interp/if-then-br hasn't been useful for a while, but now is even
less so because it doesn't validate without dropping the i32.const
from the true branch
typecheck/bad-br-multi-type isn't possible because the block must
specify the signature for the br.
typecheck/bad-label-multi-type used to test matching signature for
fallthrough and br, but isn't possible because of block signatures.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,303,2017-02-14T22:24:26Z,2017-02-15T17:06:10Z,2017-02-15T17:06:18Z,MERGED,True,50,1,3,https://github.com/binji,Add coverage build,1,[],https://github.com/WebAssembly/wabt/pull/303,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/303,This should be helpful in determining which (of any) of the wabt-specific tests we can remove in favor of the spec tests.,This should be helpful in determining which (of any) of the wabt-specific tests we can remove in favor of the spec tests.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,303,2017-02-14T22:24:26Z,2017-02-15T17:06:10Z,2017-02-15T17:06:18Z,MERGED,True,50,1,3,https://github.com/binji,Add coverage build,1,[],https://github.com/WebAssembly/wabt/pull/303,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/303#issuecomment-280072009,This should be helpful in determining which (of any) of the wabt-specific tests we can remove in favor of the spec tests.,"Maybe so, that'd be pretty cool. :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,305,2017-02-15T23:11:15Z,2017-02-16T19:02:52Z,2017-02-16T19:02:55Z,MERGED,True,118,6,3,https://github.com/binji,Fix bug in wasm2wast w/ many imports,1,[],https://github.com/WebAssembly/wabt/pull/305,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/305,"This fixes issue #304.
Unfortunately not possible to test the same issue with tables and memories because those are restricted to 0 or 1.","This fixes issue #304.
Unfortunately not possible to test the same issue with tables and memories because those are restricted to 0 or 1.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,307,2017-02-17T07:17:55Z,2017-02-18T00:32:20Z,2017-02-18T00:32:23Z,MERGED,True,2354,3677,80,https://github.com/binji,Remove WabtAllocator,1,[],https://github.com/WebAssembly/wabt/pull/307,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/307,"It complicates the code everywhere. It's faster to use a stack
allocator, but not worth the trouble for maintainability.","It complicates the code everywhere. It's faster to use a stack
allocator, but not worth the trouble for maintainability.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,309,2017-02-22T20:14:40Z,2017-02-24T00:19:53Z,2017-02-24T20:27:30Z,MERGED,True,2321,2254,54,https://github.com/binji,Switch C files to CC files,1,[],https://github.com/WebAssembly/wabt/pull/309,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/309,"Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.","Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,309,2017-02-22T20:14:40Z,2017-02-24T00:19:53Z,2017-02-24T20:27:30Z,MERGED,True,2321,2254,54,https://github.com/binji,Switch C files to CC files,1,[],https://github.com/WebAssembly/wabt/pull/309,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/309#issuecomment-281828183,"Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.","Should we use static_cast instead of C-style casts? If we like google/chromium style I believe the answer is yes, right?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,309,2017-02-22T20:14:40Z,2017-02-24T00:19:53Z,2017-02-24T20:27:30Z,MERGED,True,2321,2254,54,https://github.com/binji,Switch C files to CC files,1,[],https://github.com/WebAssembly/wabt/pull/309,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/309#issuecomment-281828438,"Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.","oh man, I prefaced that last post with <not-sure-if-troll-or-not> but github scrubbed it....",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,309,2017-02-22T20:14:40Z,2017-02-24T00:19:53Z,2017-02-24T20:27:30Z,MERGED,True,2321,2254,54,https://github.com/binji,Switch C files to CC files,1,[],https://github.com/WebAssembly/wabt/pull/309,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/309#issuecomment-281831996,"Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.","Should we use static_cast instead of C-style casts? If we like google/chromium style I believe the answer is yes, right?

Yes, definitely. I just figured it would make sense to scrub the entire codebase of C-style casts in separate PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,309,2017-02-22T20:14:40Z,2017-02-24T00:19:53Z,2017-02-24T20:27:30Z,MERGED,True,2321,2254,54,https://github.com/binji,Switch C files to CC files,1,[],https://github.com/WebAssembly/wabt/pull/309,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/309#issuecomment-282147277,"Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.","OK, looks like appveyor is finally happy. Travis should be OK too, PTAL",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,309,2017-02-22T20:14:40Z,2017-02-24T00:19:53Z,2017-02-24T20:27:30Z,MERGED,True,2321,2254,54,https://github.com/binji,Switch C files to CC files,1,[],https://github.com/WebAssembly/wabt/pull/309,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/309#issuecomment-282184467,"Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.","OMG C++!  Got for it, its the nineties.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,309,2017-02-22T20:14:40Z,2017-02-24T00:19:53Z,2017-02-24T20:27:30Z,MERGED,True,2321,2254,54,https://github.com/binji,Switch C files to CC files,1,[],https://github.com/WebAssembly/wabt/pull/309,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/309#issuecomment-282184652,"Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.","Also, can we start using python3 features now 😨",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,309,2017-02-22T20:14:40Z,2017-02-24T00:19:53Z,2017-02-24T20:27:30Z,MERGED,True,2321,2254,54,https://github.com/binji,Switch C files to CC files,1,[],https://github.com/WebAssembly/wabt/pull/309,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/309#issuecomment-282395691,"Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.","Hey, watch it or we'll switch to haskell.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,309,2017-02-22T20:14:40Z,2017-02-24T00:19:53Z,2017-02-24T20:27:30Z,MERGED,True,2321,2254,54,https://github.com/binji,Switch C files to CC files,1,[],https://github.com/WebAssembly/wabt/pull/309,https://github.com/binji,9,https://github.com/WebAssembly/wabt/pull/309#issuecomment-282395964,"Mostly this involves adding additional casts. Though there are a few
more substantial changes:

The default method for relocating parser stacks no longer works
because Bison assumes that C++ values can't be memcpy'd. Ours can, but
there's no easy way to make the generated code do the right thing, so
we do it manually
Removed all uses of WabtBool and replaced with bool
Renamed all uses of export and mutable -> export_ and mutable_
Casting an invalid value to an enum triggers ubsan, so we have to be a
little more careful about when we do it (see binary-reader.c:read_sections())
It's illegal to forward-declare enums, so we just #include instead.
Designated initializers are not allowed in g++, so we have to switch
them to lazily initialized structures instead. Pretty horrible, so it
will be nice to have a better solution for C++.","(as for python3: never)
(serious answer: nice to support 2 and 3 (currently broken btw))",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,310,2017-02-23T01:04:49Z,2017-02-25T00:48:29Z,2017-02-25T00:57:02Z,MERGED,True,187,185,102,https://github.com/dschuff,Update wasm binary format label to 1,5,[],https://github.com/WebAssembly/wabt/pull/310,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/310,"Rebaseline tests, but no other changes.","Rebaseline tests, but no other changes.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,310,2017-02-23T01:04:49Z,2017-02-25T00:48:29Z,2017-02-25T00:57:02Z,MERGED,True,187,185,102,https://github.com/dschuff,Update wasm binary format label to 1,5,[],https://github.com/WebAssembly/wabt/pull/310,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/310#issuecomment-281857088,"Rebaseline tests, but no other changes.","The spec tests and interpeter still use 0xd, so we may have to disable the spec tests or do some other hackery to keep them working?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,310,2017-02-23T01:04:49Z,2017-02-25T00:48:29Z,2017-02-25T00:57:02Z,MERGED,True,187,185,102,https://github.com/dschuff,Update wasm binary format label to 1,5,[],https://github.com/WebAssembly/wabt/pull/310,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/310#issuecomment-281864064,"Rebaseline tests, but no other changes.",Can we get the spec tests and interpreter updated?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,310,2017-02-23T01:04:49Z,2017-02-25T00:48:29Z,2017-02-25T00:57:02Z,MERGED,True,187,185,102,https://github.com/dschuff,Update wasm binary format label to 1,5,[],https://github.com/WebAssembly/wabt/pull/310,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/310#issuecomment-282079947,"Rebaseline tests, but no other changes.","Yeah, I'd rather update the spec tests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,310,2017-02-23T01:04:49Z,2017-02-25T00:48:29Z,2017-02-25T00:57:02Z,MERGED,True,187,185,102,https://github.com/dschuff,Update wasm binary format label to 1,5,[],https://github.com/WebAssembly/wabt/pull/310,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/310#issuecomment-282377622,"Rebaseline tests, but no other changes.","OK, I've landed the update to v1 in the spec repo, and updated github.com/WebAssembly/testsuite. You should be able to just update wabt's testsuite submodule to latest to fix this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,311,2017-02-23T20:35:25Z,2017-02-23T21:39:17Z,2017-02-23T21:39:19Z,MERGED,True,249,85,14,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/311,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/311,"Fixed a few typechecker errors:

br_table must have consistent type signature for all branch targets
if without else cannot have a signature","Fixed a few typechecker errors:

br_table must have consistent type signature for all branch targets
if without else cannot have a signature",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,312,2017-02-23T22:47:54Z,2017-02-24T01:37:28Z,2017-02-24T19:55:10Z,MERGED,True,18,59,1,https://github.com/binji,Use multiprocessing.pool,1,[],https://github.com/WebAssembly/wabt/pull/312,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/312,"This replaces the ad-hoc mechanism we used before with threads. We'll
have to keep an eye on the Travis build, as we switched away from
multiprocessing before because it would flake occasionally. Hopefully
multiprocessing.pool doesn't have the same issue.
This also removes should_stop_on_error from the RunMultiThreaded path,
as it isn't allowed anyway (it early-outs when parsing arguments).","This replaces the ad-hoc mechanism we used before with threads. We'll
have to keep an eye on the Travis build, as we switched away from
multiprocessing before because it would flake occasionally. Hopefully
multiprocessing.pool doesn't have the same issue.
This also removes should_stop_on_error from the RunMultiThreaded path,
as it isn't allowed anyway (it early-outs when parsing arguments).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,312,2017-02-23T22:47:54Z,2017-02-24T01:37:28Z,2017-02-24T19:55:10Z,MERGED,True,18,59,1,https://github.com/binji,Use multiprocessing.pool,1,[],https://github.com/WebAssembly/wabt/pull/312,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/312#issuecomment-282162922,"This replaces the ad-hoc mechanism we used before with threads. We'll
have to keep an eye on the Travis build, as we switched away from
multiprocessing before because it would flake occasionally. Hopefully
multiprocessing.pool doesn't have the same issue.
This also removes should_stop_on_error from the RunMultiThreaded path,
as it isn't allowed anyway (it early-outs when parsing arguments).","Yeah, not sure why I wasn't using pool in the first place. 🙄",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,312,2017-02-23T22:47:54Z,2017-02-24T01:37:28Z,2017-02-24T19:55:10Z,MERGED,True,18,59,1,https://github.com/binji,Use multiprocessing.pool,1,[],https://github.com/WebAssembly/wabt/pull/312,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/312#issuecomment-282380662,"This replaces the ad-hoc mechanism we used before with threads. We'll
have to keep an eye on the Travis build, as we switched away from
multiprocessing before because it would flake occasionally. Hopefully
multiprocessing.pool doesn't have the same issue.
This also removes should_stop_on_error from the RunMultiThreaded path,
as it isn't allowed anyway (it early-outs when parsing arguments).",Was there any noticeable change in execution speed?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,312,2017-02-23T22:47:54Z,2017-02-24T01:37:28Z,2017-02-24T19:55:10Z,MERGED,True,18,59,1,https://github.com/binji,Use multiprocessing.pool,1,[],https://github.com/WebAssembly/wabt/pull/312,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/312#issuecomment-282388711,"This replaces the ad-hoc mechanism we used before with threads. We'll
have to keep an eye on the Travis build, as we switched away from
multiprocessing before because it would flake occasionally. Hopefully
multiprocessing.pool doesn't have the same issue.
This also removes should_stop_on_error from the RunMultiThreaded path,
as it isn't allowed anyway (it early-outs when parsing arguments).","Just tested on my desktop, speed seems to be basically the same.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,313,2017-02-23T23:43:49Z,2017-02-28T02:19:04Z,2017-02-28T02:19:06Z,MERGED,True,24,5,3,https://github.com/binji,Update gen-spec-js to support assert_exhaustion,1,[],https://github.com/WebAssembly/wabt/pull/313,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/313,,,True,{'HOORAY': ['https://github.com/jfbastien']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,313,2017-02-23T23:43:49Z,2017-02-28T02:19:04Z,2017-02-28T02:19:06Z,MERGED,True,24,5,3,https://github.com/binji,Update gen-spec-js to support assert_exhaustion,1,[],https://github.com/WebAssembly/wabt/pull/313,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/313#issuecomment-282158534,,FYI @jfbastien,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,313,2017-02-23T23:43:49Z,2017-02-28T02:19:04Z,2017-02-28T02:19:06Z,MERGED,True,24,5,3,https://github.com/binji,Update gen-spec-js to support assert_exhaustion,1,[],https://github.com/WebAssembly/wabt/pull/313,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/313#issuecomment-282162057,,Added test.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,313,2017-02-23T23:43:49Z,2017-02-28T02:19:04Z,2017-02-28T02:19:06Z,MERGED,True,24,5,3,https://github.com/binji,Update gen-spec-js to support assert_exhaustion,1,[],https://github.com/WebAssembly/wabt/pull/313,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/313#issuecomment-282920141,,Anyone wanna take a look? :-D,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,313,2017-02-23T23:43:49Z,2017-02-28T02:19:04Z,2017-02-28T02:19:06Z,MERGED,True,24,5,3,https://github.com/binji,Update gen-spec-js to support assert_exhaustion,1,[],https://github.com/WebAssembly/wabt/pull/313,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/313#issuecomment-282921405,,"That magical, huh?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,315,2017-02-24T00:57:59Z,2017-02-24T18:45:41Z,2017-02-24T18:45:44Z,MERGED,True,191,203,38,https://github.com/binji,Change NULL -> nullptr,1,[],https://github.com/WebAssembly/wabt/pull/315,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/315,Also switch to using C++11.,Also switch to using C++11.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,317,2017-02-24T20:56:24Z,2017-02-25T00:49:49Z,2017-02-25T00:49:53Z,MERGED,True,303,304,40,https://github.com/binji,Remove struct and enum typedefs,1,[],https://github.com/WebAssembly/wabt/pull/317,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/317,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,318,2017-02-26T04:23:12Z,2017-02-28T03:54:17Z,2017-02-28T03:54:17Z,MERGED,True,13,7,2,https://github.com/jayphelps,Use perror to output error messages when reading files,1,[],https://github.com/WebAssembly/wabt/pull/318,https://github.com/jayphelps,1,https://github.com/WebAssembly/wabt/pull/318,"Example: unable to read file /path/to/file: No such file or directory
Modified it locally when debugging an issue on my end, figured I might as well PR..
Also changed the single sprintf usage to wabt_snprintf","Example: unable to read file /path/to/file: No such file or directory
Modified it locally when debugging an issue on my end, figured I might as well PR..
Also changed the single sprintf usage to wabt_snprintf",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,318,2017-02-26T04:23:12Z,2017-02-28T03:54:17Z,2017-02-28T03:54:17Z,MERGED,True,13,7,2,https://github.com/jayphelps,Use perror to output error messages when reading files,1,[],https://github.com/WebAssembly/wabt/pull/318,https://github.com/jayphelps,2,https://github.com/WebAssembly/wabt/pull/318#issuecomment-282916699,"Example: unable to read file /path/to/file: No such file or directory
Modified it locally when debugging an issue on my end, figured I might as well PR..
Also changed the single sprintf usage to wabt_snprintf","ah yes, PATH_MAX from limits.h isn't available on Windows. I recall there being some equivalent  like FILE_MAX MAX_PATH or something..I'll check later, if someone here knows, lmk.
Edit: I don't have a handy windows toolchain so I just pushed what I think works. We'll see in a moment. 🤞",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,318,2017-02-26T04:23:12Z,2017-02-28T03:54:17Z,2017-02-28T03:54:17Z,MERGED,True,13,7,2,https://github.com/jayphelps,Use perror to output error messages when reading files,1,[],https://github.com/WebAssembly/wabt/pull/318,https://github.com/jayphelps,3,https://github.com/WebAssembly/wabt/pull/318#issuecomment-282925865,"Example: unable to read file /path/to/file: No such file or directory
Modified it locally when debugging an issue on my end, figured I might as well PR..
Also changed the single sprintf usage to wabt_snprintf","Looks like that did it, though I noticed No tests were found!!! at the end 😏  prolly known.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,318,2017-02-26T04:23:12Z,2017-02-28T03:54:17Z,2017-02-28T03:54:17Z,MERGED,True,13,7,2,https://github.com/jayphelps,Use perror to output error messages when reading files,1,[],https://github.com/WebAssembly/wabt/pull/318,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/318#issuecomment-282934819,"Example: unable to read file /path/to/file: No such file or directory
Modified it locally when debugging an issue on my end, figured I might as well PR..
Also changed the single sprintf usage to wabt_snprintf","Yep, probably should file a bug :)
Here we go: #326.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,319,2017-02-27T07:06:57Z,2017-03-07T00:51:04Z,2017-03-07T00:51:06Z,MERGED,True,492,478,2,https://github.com/binji,Check that bison stacks are trivially copyable,1,[],https://github.com/WebAssembly/wabt/pull/319,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/319,Fixes issue #314.,Fixes issue #314.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,319,2017-02-27T07:06:57Z,2017-03-07T00:51:04Z,2017-03-07T00:51:06Z,MERGED,True,492,478,2,https://github.com/binji,Check that bison stacks are trivially copyable,1,[],https://github.com/WebAssembly/wabt/pull/319,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/319#issuecomment-282908728,Fixes issue #314.,Blah: http://stackoverflow.com/questions/25123458/is-trivially-copyable-is-not-a-member-of-std,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,319,2017-02-27T07:06:57Z,2017-03-07T00:51:04Z,2017-03-07T00:51:06Z,MERGED,True,492,478,2,https://github.com/binji,Check that bison stacks are trivially copyable,1,[],https://github.com/WebAssembly/wabt/pull/319,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/319#issuecomment-284565527,Fixes issue #314.,"OK, switching this to using std::move instead of checking for being trivially copyable. This is a better solution anyway, since we'll likely want to add destructors to Token.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,320,2017-02-27T08:56:55Z,2017-02-28T02:09:37Z,2017-02-28T02:09:39Z,MERGED,True,1908,1838,40,https://github.com/binji,"Require C++-style casts, disallow C-style casts",1,[],https://github.com/WebAssembly/wabt/pull/320,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/320,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,323,2017-02-28T00:33:53Z,2017-02-28T00:47:43Z,2017-02-28T00:47:46Z,MERGED,True,4,0,1,https://github.com/binji,Roll back to previous MSYS2,1,[],https://github.com/WebAssembly/wabt/pull/323,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/323,"Looks like MSYS was rev'd from 5.3.0 -> 6.3.0 recently, breaking the appveyor bots, see https://ci.appveyor.com/project/WebAssembly/wabt/build/1.0.610/job/o0ad22qnjcjg1x62 for example.
This change uses the old image for now. We should figure out what's wrong w/ the errors there though.","Looks like MSYS was rev'd from 5.3.0 -> 6.3.0 recently, breaking the appveyor bots, see https://ci.appveyor.com/project/WebAssembly/wabt/build/1.0.610/job/o0ad22qnjcjg1x62 for example.
This change uses the old image for now. We should figure out what's wrong w/ the errors there though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,323,2017-02-28T00:33:53Z,2017-02-28T00:47:43Z,2017-02-28T00:47:46Z,MERGED,True,4,0,1,https://github.com/binji,Roll back to previous MSYS2,1,[],https://github.com/WebAssembly/wabt/pull/323,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/323#issuecomment-282905205,"Looks like MSYS was rev'd from 5.3.0 -> 6.3.0 recently, breaking the appveyor bots, see https://ci.appveyor.com/project/WebAssembly/wabt/build/1.0.610/job/o0ad22qnjcjg1x62 for example.
This change uses the old image for now. We should figure out what's wrong w/ the errors there though.","I think something changed in the headers so PRIu64 isn't working anymore, but just on MSYS. See #324. My guess is that it is mapping to %llu instead of %I64u but gcc doesn't like it. Not sure why, though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,327,2017-02-28T09:22:30Z,2017-02-28T09:56:42Z,2017-02-28T09:56:42Z,CLOSED,False,10,4,2,https://github.com/rongjiecomputer,Mingw64 workaround,1,[],https://github.com/WebAssembly/wabt/pull/327,https://github.com/rongjiecomputer,1,https://github.com/WebAssembly/wabt/pull/327,Compiles on my local machine.,Compiles on my local machine.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,329,2017-03-01T10:24:53Z,2017-03-01T22:14:41Z,2017-03-01T22:14:44Z,MERGED,True,3840,3829,132,https://github.com/binji,Make most enumerations into enum classes,1,[],https://github.com/WebAssembly/wabt/pull/329,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/329,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,329,2017-03-01T10:24:53Z,2017-03-01T22:14:41Z,2017-03-01T22:14:44Z,MERGED,True,3840,3829,132,https://github.com/binji,Make most enumerations into enum classes,1,[],https://github.com/WebAssembly/wabt/pull/329,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/329#issuecomment-283406318,,"Seems like chromium style says it still uses MACRO_STYLE for enum values

True, but it sounds like that was for legacy reasons, the Google C++ style guide says to use kMixedCase. Could do that here instead, I suppose.

Seems like going with that style would result in a much smaller change as none of the test output would change? (maybe?)

Yes, but the names match better with the binary document this way, so... :-) Do you have a preference for MACRO_STYLE? I don't like that it looks like it could be a macro. And it's kind of ugly, especially for enum class, where it would be EnumType::ENUM_VALUE.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,329,2017-03-01T10:24:53Z,2017-03-01T22:14:41Z,2017-03-01T22:14:44Z,MERGED,True,3840,3829,132,https://github.com/binji,Make most enumerations into enum classes,1,[],https://github.com/WebAssembly/wabt/pull/329,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/329#issuecomment-283488450,,Gonna land this because I think having enum classes is better overall. Let's continue discussion of style on #308.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,330,2017-03-01T22:36:47Z,2017-03-02T05:50:12Z,2017-03-02T05:50:15Z,MERGED,True,16,16,6,https://github.com/binji,Update CMake and Makefile to use .hh instead of .h,1,[],https://github.com/WebAssembly/wabt/pull/330,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/330,"The built-in CMake rules look for an .hh file instead of a .h when
building for C++. Without it, the build will always think that the
generated parser is stale and rebuild it.","The built-in CMake rules look for an .hh file instead of a .h when
building for C++. Without it, the build will always think that the
generated parser is stale and rebuild it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,331,2017-03-01T22:36:58Z,2017-03-03T07:14:32Z,2017-03-03T07:14:43Z,MERGED,True,8975,9137,69,https://github.com/binji,Replace the Wabt/wabt prefix with a C++ namespace,1,[],https://github.com/WebAssembly/wabt/pull/331,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/331,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,331,2017-03-01T22:36:58Z,2017-03-03T07:14:32Z,2017-03-03T07:14:43Z,MERGED,True,8975,9137,69,https://github.com/binji,Replace the Wabt/wabt prefix with a C++ namespace,1,[],https://github.com/WebAssembly/wabt/pull/331,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/331#issuecomment-283818363,,"@KarlSchimpf I've changed alloc/realloc/free -> wabt_alloc/wabt_realloc/wabt_free. This is a bit clunky, but as I mentioned above, it will likely all be removed soon anyway. PTAL",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,332,2017-03-03T23:51:21Z,2017-03-06T19:34:38Z,2017-03-06T19:34:40Z,MERGED,True,1138,1203,24,https://github.com/binji,Use new/delete instead of malloc/free,1,[],https://github.com/WebAssembly/wabt/pull/332,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/332,"Also switch some void* -> char*, because it removes some unnecessary
casts. C++ does not like void*.","Also switch some void* -> char*, because it removes some unnecessary
casts. C++ does not like void*.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,335,2017-03-06T07:29:46Z,2017-03-06T07:43:21Z,2017-03-06T15:54:45Z,MERGED,True,3,1,1,https://github.com/binji,Only run flake8 on Travis Linux,1,[],https://github.com/WebAssembly/wabt/pull/335,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/335,It isn't installed on Mac. This fixes the mac build (issue #325).,It isn't installed on Mac. This fixes the mac build (issue #325).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,336,2017-03-06T08:09:07Z,2017-03-06T08:27:25Z,2017-03-06T08:27:28Z,MERGED,True,21,27,1,https://github.com/binji,Use the CMAKE_STANDARD property on all targets,1,[],https://github.com/WebAssembly/wabt/pull/336,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/336,"Hoping this resolves compilation issues some folks are having on Mac OS
X.","Hoping this resolves compilation issues some folks are having on Mac OS
X.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,337,2017-03-06T10:54:11Z,2017-03-06T23:07:59Z,2017-03-06T23:07:59Z,MERGED,True,291,93,14,https://github.com/pipcet,Extensible name section support,8,[],https://github.com/WebAssembly/wabt/pull/337,https://github.com/pipcet,1,https://github.com/WebAssembly/wabt/pull/337,"This PR should change the code to support the new extensible name section rather than the previous now-obsolete layout.
However, I've so far been unable to find any code (except for my own) that produces or reads the new format, so it's not as well-tested as it should be; it might be worth waiting for adoption in other tools, in any case.
See #334.","This PR should change the code to support the new extensible name section rather than the previous now-obsolete layout.
However, I've so far been unable to find any code (except for my own) that produces or reads the new format, so it's not as well-tested as it should be; it might be worth waiting for adoption in other tools, in any case.
See #334.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,337,2017-03-06T10:54:11Z,2017-03-06T23:07:59Z,2017-03-06T23:07:59Z,MERGED,True,291,93,14,https://github.com/pipcet,Extensible name section support,8,[],https://github.com/WebAssembly/wabt/pull/337,https://github.com/pipcet,2,https://github.com/WebAssembly/wabt/pull/337#issuecomment-284365045,"This PR should change the code to support the new extensible name section rather than the previous now-obsolete layout.
However, I've so far been unable to find any code (except for my own) that produces or reads the new format, so it's not as well-tested as it should be; it might be worth waiting for adoption in other tools, in any case.
See #334.","@binji:

We'll want to support the other name sections for wasm2wast (binary-reader-ast) and wasmdump (binary-reader-objdump), but that seems reasonable to do in a separate PR.

I'm not sure I understand; are you saying you want to keep support for the old pre-MVP format?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,337,2017-03-06T10:54:11Z,2017-03-06T23:07:59Z,2017-03-06T23:07:59Z,MERGED,True,291,93,14,https://github.com/pipcet,Extensible name section support,8,[],https://github.com/WebAssembly/wabt/pull/337,https://github.com/pipcet,3,https://github.com/WebAssembly/wabt/pull/337#issuecomment-284368416,"This PR should change the code to support the new extensible name section rather than the previous now-obsolete layout.
However, I've so far been unable to find any code (except for my own) that produces or reads the new format, so it's not as well-tested as it should be; it might be worth waiting for adoption in other tools, in any case.
See #334.","Oops, thought it was running the tests locally, but it wasn't. I'll fix those.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,337,2017-03-06T10:54:11Z,2017-03-06T23:07:59Z,2017-03-06T23:07:59Z,MERGED,True,291,93,14,https://github.com/pipcet,Extensible name section support,8,[],https://github.com/WebAssembly/wabt/pull/337,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/337#issuecomment-284501971,"This PR should change the code to support the new extensible name section rather than the previous now-obsolete layout.
However, I've so far been unable to find any code (except for my own) that produces or reads the new format, so it's not as well-tested as it should be; it might be worth waiting for adoption in other tools, in any case.
See #334.","I'm not sure I understand; are you saying you want to keep support for the old pre-MVP format?

Sorry, I said we want to support the other name sections but I meant we want to support reading the new kinds of names in those files (e.g. names of labels, globals, memories, etc.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,337,2017-03-06T10:54:11Z,2017-03-06T23:07:59Z,2017-03-06T23:07:59Z,MERGED,True,291,93,14,https://github.com/pipcet,Extensible name section support,8,[],https://github.com/WebAssembly/wabt/pull/337,https://github.com/pipcet,5,https://github.com/WebAssembly/wabt/pull/337#issuecomment-284542352,"This PR should change the code to support the new extensible name section rather than the previous now-obsolete layout.
However, I've so far been unable to find any code (except for my own) that produces or reads the new format, so it's not as well-tested as it should be; it might be worth waiting for adoption in other tools, in any case.
See #334.","I meant we want to support reading the new kinds of names in those files (e.g. names of labels, globals, memories, etc.)

I may have missed something (again), but the spec doesn't mention those yet. I'm in favor of adding those as soon as they appear in the spec.
(There are quite a few commits now, so let me know if and when you want to merge so I can squash them into a single commit to keep the history readable.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,337,2017-03-06T10:54:11Z,2017-03-06T23:07:59Z,2017-03-06T23:07:59Z,MERGED,True,291,93,14,https://github.com/pipcet,Extensible name section support,8,[],https://github.com/WebAssembly/wabt/pull/337,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/337#issuecomment-284544652,"This PR should change the code to support the new extensible name section rather than the previous now-obsolete layout.
However, I've so far been unable to find any code (except for my own) that produces or reads the new format, so it's not as well-tested as it should be; it might be worth waiting for adoption in other tools, in any case.
See #334.","You're right, I assumed they had been added since that was the purpose of restructuring the name section. :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,337,2017-03-06T10:54:11Z,2017-03-06T23:07:59Z,2017-03-06T23:07:59Z,MERGED,True,291,93,14,https://github.com/pipcet,Extensible name section support,8,[],https://github.com/WebAssembly/wabt/pull/337,https://github.com/pipcet,7,https://github.com/WebAssembly/wabt/pull/337#issuecomment-284558461,"This PR should change the code to support the new extensible name section rather than the previous now-obsolete layout.
However, I've so far been unable to find any code (except for my own) that produces or reads the new format, so it's not as well-tested as it should be; it might be worth waiting for adoption in other tools, in any case.
See #334.","Thanks! I've addressed those two, do let me know if you spot anything else.
I've joined the CG now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,337,2017-03-06T10:54:11Z,2017-03-06T23:07:59Z,2017-03-06T23:07:59Z,MERGED,True,291,93,14,https://github.com/pipcet,Extensible name section support,8,[],https://github.com/WebAssembly/wabt/pull/337,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/337#issuecomment-284564510,"This PR should change the code to support the new extensible name section rather than the previous now-obsolete layout.
However, I've so far been unable to find any code (except for my own) that produces or reads the new format, so it's not as well-tested as it should be; it might be worth waiting for adoption in other tools, in any case.
See #334.",Great!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,338,2017-03-06T15:42:50Z,2017-03-07T15:33:24Z,2017-03-23T04:16:16Z,MERGED,True,57,35,8,https://github.com/sbc100,Add --debug flag to wasmdump and wasm-link,2,[],https://github.com/WebAssembly/wabt/pull/338,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/338,"Enable logging in the binary reader when the --debug
flag is passed to wasmdump and wasm-link.
Also don't wrap on_error when logging is enabled otherwise
tools that don't set on_error such as wasmdump won't see
any errors (since the reader will think a handler is installed).","Enable logging in the binary reader when the --debug
flag is passed to wasmdump and wasm-link.
Also don't wrap on_error when logging is enabled otherwise
tools that don't set on_error such as wasmdump won't see
any errors (since the reader will think a handler is installed).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,340,2017-03-07T17:03:14Z,2017-03-07T19:00:56Z,2017-03-23T04:16:00Z,MERGED,True,1,3,1,https://github.com/sbc100,Don't dump debug info more than once in wasmdump,1,[],https://github.com/WebAssembly/wabt/pull/340,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/340,"We need only include debug logging in the prepass
which is unconditionally performed at the start.","We need only include debug logging in the prepass
which is unconditionally performed at the start.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,341,2017-03-08T02:32:34Z,2017-03-08T04:27:25Z,2017-03-08T20:00:28Z,MERGED,True,14,14,6,https://github.com/Cellule,Use wabt_snprintf instead of calling snprintf directly,1,[],https://github.com/WebAssembly/wabt/pull/341,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/341,"I tried to use a compiler without snprintf and it was causing me some problems.
When I realized that there was a version in wabt, I figured the wabt version was supposed to be used everywhere, but since most compilers has snprintf it hasn't been an issue before.","I tried to use a compiler without snprintf and it was causing me some problems.
When I realized that there was a version in wabt, I figured the wabt version was supposed to be used everywhere, but since most compilers has snprintf it hasn't been an issue before.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,342,2017-03-08T21:50:27Z,2017-03-09T20:52:15Z,2017-03-09T20:52:17Z,MERGED,True,174,202,6,https://github.com/binji,Remove src/array.h and use std::vector instead,1,[],https://github.com/WebAssembly/wabt/pull/342,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/342,"This caused the IntepreterModule destructor to become deleted, since the
import array is now a std::vector, in a union member.
This change also fixes the fallout from that by separating
InterpreterModule into HostInterpreterModule and
DefinedInterpreterModule, both derived from InterpreterModule, instead
of using a union.","This caused the IntepreterModule destructor to become deleted, since the
import array is now a std::vector, in a union member.
This change also fixes the fallout from that by separating
InterpreterModule into HostInterpreterModule and
DefinedInterpreterModule, both derived from InterpreterModule, instead
of using a union.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,342,2017-03-08T21:50:27Z,2017-03-09T20:52:15Z,2017-03-09T20:52:17Z,MERGED,True,174,202,6,https://github.com/binji,Remove src/array.h and use std::vector instead,1,[],https://github.com/WebAssembly/wabt/pull/342,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/342#issuecomment-285443891,"This caused the IntepreterModule destructor to become deleted, since the
import array is now a std::vector, in a union member.
This change also fixes the fallout from that by separating
InterpreterModule into HostInterpreterModule and
DefinedInterpreterModule, both derived from InterpreterModule, instead
of using a union.","Hm, the mingw build is still failing. Looks like as soon as you include <vector> and <stdio.h> it switches to mingw_printf and the format specifier checks stop working. Really tempted to just turn these off for mingw.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,343,2017-03-09T01:28:46Z,2017-03-09T09:45:33Z,2017-03-09T09:45:36Z,CLOSED,False,6,4,2,https://github.com/binji,"Disable print checking on mingw64, roll appveyor",1,[],https://github.com/WebAssembly/wabt/pull/343,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/343,"It's not clear why, but it appears that the printf format checking isn't
correct on mingw64, see issue #324.","It's not clear why, but it appears that the printf format checking isn't
correct on mingw64, see issue #324.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,343,2017-03-09T01:28:46Z,2017-03-09T09:45:33Z,2017-03-09T09:45:36Z,CLOSED,False,6,4,2,https://github.com/binji,"Disable print checking on mingw64, roll appveyor",1,[],https://github.com/WebAssembly/wabt/pull/343,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/343#issuecomment-285225999,"It's not clear why, but it appears that the printf format checking isn't
correct on mingw64, see issue #324.","This is causing failures on 5.3.0 as well, see https://ci.appveyor.com/project/WebAssembly/wabt/build/1.0.689.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,344,2017-03-09T06:14:33Z,2017-03-09T08:55:41Z,2017-03-09T08:55:41Z,MERGED,True,2,5,2,https://github.com/rongjiecomputer,[Mingw64] fix print format warning,3,[],https://github.com/WebAssembly/wabt/pull/344,https://github.com/rongjiecomputer,1,https://github.com/WebAssembly/wabt/pull/344,"Partial fix for #324
In my previous test.cpp example in #324:

Change both or just one of stdio.h and stdint.h to cstdio and cstdint: warnings.
Add stdlib.h: warnings.

After checking stdlib.h, I found out that it includes cstdlib for C++ code and this (for some reason I do not know) is the culprit of the print format warnings. Adding -D_GLIBCXX_INCLUDE_NEXT_C_HEADERS=1 solves this issue.
This only fixes print format warnings -Wformat=.","Partial fix for #324
In my previous test.cpp example in #324:

Change both or just one of stdio.h and stdint.h to cstdio and cstdint: warnings.
Add stdlib.h: warnings.

After checking stdlib.h, I found out that it includes cstdlib for C++ code and this (for some reason I do not know) is the culprit of the print format warnings. Adding -D_GLIBCXX_INCLUDE_NEXT_C_HEADERS=1 solves this issue.
This only fixes print format warnings -Wformat=.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,344,2017-03-09T06:14:33Z,2017-03-09T08:55:41Z,2017-03-09T08:55:41Z,MERGED,True,2,5,2,https://github.com/rongjiecomputer,[Mingw64] fix print format warning,3,[],https://github.com/WebAssembly/wabt/pull/344,https://github.com/rongjiecomputer,2,https://github.com/WebAssembly/wabt/pull/344#issuecomment-285266081,"Partial fix for #324
In my previous test.cpp example in #324:

Change both or just one of stdio.h and stdint.h to cstdio and cstdint: warnings.
Add stdlib.h: warnings.

After checking stdlib.h, I found out that it includes cstdlib for C++ code and this (for some reason I do not know) is the culprit of the print format warnings. Adding -D_GLIBCXX_INCLUDE_NEXT_C_HEADERS=1 solves this issue.
This only fixes print format warnings -Wformat=.","First commit passes GCC 5.3.0, let's try GCC 6.3.0.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,344,2017-03-09T06:14:33Z,2017-03-09T08:55:41Z,2017-03-09T08:55:41Z,MERGED,True,2,5,2,https://github.com/rongjiecomputer,[Mingw64] fix print format warning,3,[],https://github.com/WebAssembly/wabt/pull/344,https://github.com/rongjiecomputer,3,https://github.com/WebAssembly/wabt/pull/344#issuecomment-285268541,"Partial fix for #324
In my previous test.cpp example in #324:

Change both or just one of stdio.h and stdint.h to cstdio and cstdint: warnings.
Add stdlib.h: warnings.

After checking stdlib.h, I found out that it includes cstdlib for C++ code and this (for some reason I do not know) is the culprit of the print format warnings. Adding -D_GLIBCXX_INCLUDE_NEXT_C_HEADERS=1 solves this issue.
This only fixes print format warnings -Wformat=.","I was expecting some -Wodr warnings (appear in local build), but looks like they are gone on appveyor. Strange.
@binji Good enough to merge?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,344,2017-03-09T06:14:33Z,2017-03-09T08:55:41Z,2017-03-09T08:55:41Z,MERGED,True,2,5,2,https://github.com/rongjiecomputer,[Mingw64] fix print format warning,3,[],https://github.com/WebAssembly/wabt/pull/344,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/344#issuecomment-285271843,"Partial fix for #324
In my previous test.cpp example in #324:

Change both or just one of stdio.h and stdint.h to cstdio and cstdint: warnings.
Add stdlib.h: warnings.

After checking stdlib.h, I found out that it includes cstdlib for C++ code and this (for some reason I do not know) is the culprit of the print format warnings. Adding -D_GLIBCXX_INCLUDE_NEXT_C_HEADERS=1 solves this issue.
This only fixes print format warnings -Wformat=.","Cool, I was looking into this too. I found that
#define __STDC_FORMAT_MACROS 1
#include <inttypes.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
  uint64_t i = 0;
  printf(""foo %"" PRIu64 ""\n"", i);
  return 0;
}

Will use the VC runtime printf and %I64u, whereas
#define __STDC_FORMAT_MACROS 1
#include <inttypes.h>
#include <stdlib.h>
#include <stdio.h>

int main() {
  uint64_t i = 0;
  printf(""foo %"" PRIu64 ""\n"", i);
  return 0;
}

(swapping order of stdlib.h and stdio.h) will use mingw_vprintf and %llu.
Defining _GLIBCXX_INCLUDE_NEXT_C_HEADERS=1 first seems to fix both of them to use VC runtime printf. I'm not super happy about having to define this, but it seems like something is busted with the headers anyway, so I'm OK to merge.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,344,2017-03-09T06:14:33Z,2017-03-09T08:55:41Z,2017-03-09T08:55:41Z,MERGED,True,2,5,2,https://github.com/rongjiecomputer,[Mingw64] fix print format warning,3,[],https://github.com/WebAssembly/wabt/pull/344,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/344#issuecomment-285292177,"Partial fix for #324
In my previous test.cpp example in #324:

Change both or just one of stdio.h and stdint.h to cstdio and cstdint: warnings.
Add stdlib.h: warnings.

After checking stdlib.h, I found out that it includes cstdlib for C++ code and this (for some reason I do not know) is the culprit of the print format warnings. Adding -D_GLIBCXX_INCLUDE_NEXT_C_HEADERS=1 solves this issue.
This only fixes print format warnings -Wformat=.",Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,345,2017-03-09T07:49:56Z,2017-03-09T23:04:22Z,2017-03-09T23:04:22Z,MERGED,True,1,1,1,https://github.com/jayphelps,use array of chars instead of pointer to chars so sizeof is correct,1,[],https://github.com/WebAssembly/wabt/pull/345,https://github.com/jayphelps,1,https://github.com/WebAssembly/wabt/pull/345,In #318 I incorrectly used sizeof on a pointer 🤦‍♂️ which obviously is not correct.,In #318 I incorrectly used sizeof on a pointer 🤦‍♂️ which obviously is not correct.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,345,2017-03-09T07:49:56Z,2017-03-09T23:04:22Z,2017-03-09T23:04:22Z,MERGED,True,1,1,1,https://github.com/jayphelps,use array of chars instead of pointer to chars so sizeof is correct,1,[],https://github.com/WebAssembly/wabt/pull/345,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/345#issuecomment-285303102,In #318 I incorrectly used sizeof on a pointer 🤦‍♂️ which obviously is not correct.,"Oops, missed that myself. Looks like msvc won't let you use strlen here, but you can change the string to const char format[] = ""unable to read file %s""; and then sizeof will do the right thing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,345,2017-03-09T07:49:56Z,2017-03-09T23:04:22Z,2017-03-09T23:04:22Z,MERGED,True,1,1,1,https://github.com/jayphelps,use array of chars instead of pointer to chars so sizeof is correct,1,[],https://github.com/WebAssembly/wabt/pull/345,https://github.com/jayphelps,3,https://github.com/WebAssembly/wabt/pull/345#issuecomment-285494301,In #318 I incorrectly used sizeof on a pointer 🤦‍♂️ which obviously is not correct.,@binji done. Seems good.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,345,2017-03-09T07:49:56Z,2017-03-09T23:04:22Z,2017-03-09T23:04:22Z,MERGED,True,1,1,1,https://github.com/jayphelps,use array of chars instead of pointer to chars so sizeof is correct,1,[],https://github.com/WebAssembly/wabt/pull/345,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/345#issuecomment-285512672,In #318 I incorrectly used sizeof on a pointer 🤦‍♂️ which obviously is not correct.,Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,346,2017-03-09T19:10:20Z,2017-03-09T19:30:52Z,2017-03-09T21:59:29Z,MERGED,True,13,5,2,https://github.com/binji,Fix mingw build by defining _POSIX,1,[],https://github.com/WebAssembly/wabt/pull/346,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/346,"mingw32 tries to support both VC runtime printf and a POSIX-compliant
printf. It seems to randomly choose between the two, depending on
arbitrary factors like header include order. This change forces us to
always use the POSIX-compliant printf on mingw, and also changes the
WABT_PRINTF_FORMAT attribute to use the POSIX-compliant tag too
(gnu_printf, since printf defaults to ms_printf).
This seems to resolve the issues for #324, as well as the ones I found
in #342 as well.","mingw32 tries to support both VC runtime printf and a POSIX-compliant
printf. It seems to randomly choose between the two, depending on
arbitrary factors like header include order. This change forces us to
always use the POSIX-compliant printf on mingw, and also changes the
WABT_PRINTF_FORMAT attribute to use the POSIX-compliant tag too
(gnu_printf, since printf defaults to ms_printf).
This seems to resolve the issues for #324, as well as the ones I found
in #342 as well.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,346,2017-03-09T19:10:20Z,2017-03-09T19:30:52Z,2017-03-09T21:59:29Z,MERGED,True,13,5,2,https://github.com/binji,Fix mingw build by defining _POSIX,1,[],https://github.com/WebAssembly/wabt/pull/346,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/346#issuecomment-285497080,"mingw32 tries to support both VC runtime printf and a POSIX-compliant
printf. It seems to randomly choose between the two, depending on
arbitrary factors like header include order. This change forces us to
always use the POSIX-compliant printf on mingw, and also changes the
WABT_PRINTF_FORMAT attribute to use the POSIX-compliant tag too
(gnu_printf, since printf defaults to ms_printf).
This seems to resolve the issues for #324, as well as the ones I found
in #342 as well.",lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,347,2017-03-10T02:41:08Z,2017-03-10T03:34:59Z,2017-03-10T17:03:41Z,MERGED,True,202,328,25,https://github.com/binji,Move loop variable into for loop header,1,[],https://github.com/WebAssembly/wabt/pull/347,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/347,,,True,{'HOORAY': ['https://github.com/sbc100']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,347,2017-03-10T02:41:08Z,2017-03-10T03:34:59Z,2017-03-10T17:03:41Z,MERGED,True,202,328,25,https://github.com/binji,Move loop variable into for loop header,1,[],https://github.com/WebAssembly/wabt/pull/347,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/347#issuecomment-285725021,,Hurrah!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,348,2017-03-10T14:48:44Z,2017-03-10T18:40:22Z,2017-03-10T18:40:23Z,MERGED,True,70,37,6,https://github.com/pipcet,binary reader API: pass module/field names to on_import_*,2,[],https://github.com/WebAssembly/wabt/pull/348,https://github.com/pipcet,1,https://github.com/WebAssembly/wabt/pull/348,"I think our binary reader API can be improved by passing module/field names to the specific on_import_{func,table,...} methods rather than requiring users to store the names in their private context.
There's no real reason to think of a function import, say, as two events: it's a single event, with many parameters, but that's not a problem for the current C++ code. Particularly for simple translating binary readers, saving temporary data in between calls that you're assuming are always paired makes the code slightly less readable.","I think our binary reader API can be improved by passing module/field names to the specific on_import_{func,table,...} methods rather than requiring users to store the names in their private context.
There's no real reason to think of a function import, say, as two events: it's a single event, with many parameters, but that's not a problem for the current C++ code. Particularly for simple translating binary readers, saving temporary data in between calls that you're assuming are always paired makes the code slightly less readable.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,348,2017-03-10T14:48:44Z,2017-03-10T18:40:22Z,2017-03-10T18:40:23Z,MERGED,True,70,37,6,https://github.com/pipcet,binary reader API: pass module/field names to on_import_*,2,[],https://github.com/WebAssembly/wabt/pull/348,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/348#issuecomment-285749883,"I think our binary reader API can be improved by passing module/field names to the specific on_import_{func,table,...} methods rather than requiring users to store the names in their private context.
There's no real reason to think of a function import, say, as two events: it's a single event, with many parameters, but that's not a problem for the current C++ code. Particularly for simple translating binary readers, saving temporary data in between calls that you're assuming are always paired makes the code slightly less readable.","Looks like a good change, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,349,2017-03-10T19:01:21Z,2017-03-11T01:01:46Z,2017-03-11T01:01:49Z,MERGED,True,334,405,4,https://github.com/binji,Remove all uses of WABT_VECTOR from interpreter,1,[],https://github.com/WebAssembly/wabt/pull/349,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/349,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,350,2017-03-10T23:37:44Z,2017-03-13T20:00:54Z,2017-03-13T20:02:15Z,MERGED,True,18,8,5,https://github.com/sbc100,Add more detailed errors and logging to binary-reader,5,[],https://github.com/WebAssembly/wabt/pull/350,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/350,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,350,2017-03-10T23:37:44Z,2017-03-13T20:00:54Z,2017-03-13T20:02:15Z,MERGED,True,18,8,5,https://github.com/sbc100,Add more detailed errors and logging to binary-reader,5,[],https://github.com/WebAssembly/wabt/pull/350,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/350#issuecomment-286195994,,still lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,351,2017-03-11T01:15:07Z,2017-03-13T23:32:12Z,2017-03-13T23:32:14Z,MERGED,True,344,113,20,https://github.com/binji,Fix crash using binary reader logging with error,1,[],https://github.com/WebAssembly/wabt/pull/351,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/351,"When the binary logging is turned on, it can't use the
reader->on_error directly since that function expects that the
user_data is the BinaryReaderInterpreter context (for example), but it
is actually the LoggingContext.
Some additional changes:

Add a test that uses logging and succeeds
Add a test that uses logging and has an error
Change the run-*-interp.py scripts to use -t for tracing and -v
for logging","When the binary logging is turned on, it can't use the
reader->on_error directly since that function expects that the
user_data is the BinaryReaderInterpreter context (for example), but it
is actually the LoggingContext.
Some additional changes:

Add a test that uses logging and succeeds
Add a test that uses logging and has an error
Change the run-*-interp.py scripts to use -t for tracing and -v
for logging",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,352,2017-03-13T20:00:19Z,2017-03-13T22:54:17Z,2017-03-13T22:59:44Z,MERGED,True,132,83,18,https://github.com/sbc100,"Update relocation encoding to latest ""spec""",2,[],https://github.com/WebAssembly/wabt/pull/352,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/352,"This brings wabt into line with what llvm is now
producing and what is soon that land in the
tool-conventions ""spec"" for static linking.
Adds 'index' and (options) 'addend' to relocations.
Define Relec in common.h rather than once for each
tool.","This brings wabt into line with what llvm is now
producing and what is soon that land in the
tool-conventions ""spec"" for static linking.
Adds 'index' and (options) 'addend' to relocations.
Define Relec in common.h rather than once for each
tool.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,353,2017-03-14T18:40:48Z,2017-03-14T19:02:35Z,2017-03-14T19:02:36Z,MERGED,True,2,2,2,https://github.com/binji,Update testsuite to 066e17da (spec e0778664),1,[],https://github.com/WebAssembly/wabt/pull/353,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/353,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,355,2017-03-15T00:12:47Z,2017-03-17T20:56:10Z,2017-03-30T21:19:43Z,MERGED,True,30,34,2,https://github.com/binji,Add install target to Makefile,1,[],https://github.com/WebAssembly/wabt/pull/355,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/355,"This means running make will generate a bin dir and put all the binaries in there. Similarly, make clang-debug-asan will install those binaries to the bin dir as well.","This means running make will generate a bin dir and put all the binaries in there. Similarly, make clang-debug-asan will install those binaries to the bin dir as well.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,355,2017-03-15T00:12:47Z,2017-03-17T20:56:10Z,2017-03-30T21:19:43Z,MERGED,True,30,34,2,https://github.com/binji,Add install target to Makefile,1,[],https://github.com/WebAssembly/wabt/pull/355,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/355#issuecomment-287440235,"This means running make will generate a bin dir and put all the binaries in there. Similarly, make clang-debug-asan will install those binaries to the bin dir as well.",Changed so all target doesn't install by default.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,356,2017-03-15T20:49:08Z,2017-03-15T23:29:37Z,2017-03-15T23:29:39Z,MERGED,True,57,0,15,https://github.com/binji,Fix potential one-definition-rule breaking structs,1,[],https://github.com/WebAssembly/wabt/pull/356,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/356,"Context is the most common potential problem here, but I noticed that
wasm-link.h had some others too (DataSegment and Export).
These probably aren't an issue yet, since they all have trivial
constructors. As soon as we add non-trivial types to these they break
though.","Context is the most common potential problem here, but I noticed that
wasm-link.h had some others too (DataSegment and Export).
These probably aren't an issue yet, since they all have trivial
constructors. As soon as we add non-trivial types to these they break
though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,356,2017-03-15T20:49:08Z,2017-03-15T23:29:37Z,2017-03-15T23:29:39Z,MERGED,True,57,0,15,https://github.com/binji,Fix potential one-definition-rule breaking structs,1,[],https://github.com/WebAssembly/wabt/pull/356,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/356#issuecomment-286898564,"Context is the most common potential problem here, but I noticed that
wasm-link.h had some others too (DataSegment and Export).
These probably aren't an issue yet, since they all have trivial
constructors. As soon as we add non-trivial types to these they break
though.",Looks like the Travis error is a flaky git fetch.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,357,2017-03-16T00:01:36Z,2017-03-16T21:49:06Z,2017-03-16T21:49:08Z,MERGED,True,1043,1046,31,https://github.com/binji,Use std::unordered_multimap for BindingHash,3,[],https://github.com/WebAssembly/wabt/pull/357,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/357,"This change can't really be done in isolation, since once we add members
with constructors to a struct, it is no longer has a trivial
constructor. This propagates through all types that use it, etc.
There are a number of changes that are ugly, but hopefully reduced the
amount of code that needed to change. In particular, I changed some
union members to pointers so they would stay trivially constructable.
Another tricky change is the handling of duplicate bindings: previously
we just relied on the fact that our hash implementation would be
consistent. A nicer solution is to display the duplicated bindings in
source order. There's probably a nicer way to do this; bikeshedding
welcome. :-)","This change can't really be done in isolation, since once we add members
with constructors to a struct, it is no longer has a trivial
constructor. This propagates through all types that use it, etc.
There are a number of changes that are ugly, but hopefully reduced the
amount of code that needed to change. In particular, I changed some
union members to pointers so they would stay trivially constructable.
Another tricky change is the handling of duplicate bindings: previously
we just relied on the fact that our hash implementation would be
consistent. A nicer solution is to display the duplicated bindings in
source order. There's probably a nicer way to do this; bikeshedding
welcome. :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,357,2017-03-16T00:01:36Z,2017-03-16T21:49:06Z,2017-03-16T21:49:08Z,MERGED,True,1043,1046,31,https://github.com/binji,Use std::unordered_multimap for BindingHash,3,[],https://github.com/WebAssembly/wabt/pull/357,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/357#issuecomment-287141675,"This change can't really be done in isolation, since once we add members
with constructors to a struct, it is no longer has a trivial
constructor. This propagates through all types that use it, etc.
There are a number of changes that are ugly, but hopefully reduced the
amount of code that needed to change. In particular, I changed some
union members to pointers so they would stay trivially constructable.
Another tricky change is the handling of duplicate bindings: previously
we just relied on the fact that our hash implementation would be
consistent. A nicer solution is to display the duplicated bindings in
source order. There's probably a nicer way to do this; bikeshedding
welcome. :-)","Agreed, I was trying to reduce the amount of stuff that needed to change, but maybe I erred on too little. I'll see if I can clean up some things.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,358,2017-03-16T21:39:31Z,2017-03-17T01:27:39Z,2017-03-17T01:27:47Z,MERGED,True,114,3,76,https://github.com/sbc100,Add callback for end opcode and end of function,2,[],https://github.com/WebAssembly/wabt/pull/358,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/358,"Without this objdump doesn't show the final byte/opcode
of each function.","Without this objdump doesn't show the final byte/opcode
of each function.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,359,2017-03-17T05:37:22Z,2017-03-17T18:45:13Z,2017-03-17T20:57:26Z,MERGED,True,1022,22,8,https://github.com/binji,"Add wabt::string_view, based on C++17 string_view",1,[],https://github.com/WebAssembly/wabt/pull/359,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/359,"This change also adds wabt-unittests with string_view tests, and runs them on appveyor and travis.","This change also adds wabt-unittests with string_view tests, and runs them on appveyor and travis.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,360,2017-03-17T17:53:47Z,2017-03-17T18:23:45Z,2017-03-17T18:23:48Z,MERGED,True,8,4,1,https://github.com/jgravelle-google,Define __STDC_*_MACROS for all non-MSVC compilers,1,[],https://github.com/WebAssembly/wabt/pull/360,https://github.com/jgravelle-google,1,https://github.com/WebAssembly/wabt/pull/360,This should make the waterfall's Travis build happy,This should make the waterfall's Travis build happy,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,360,2017-03-17T17:53:47Z,2017-03-17T18:23:45Z,2017-03-17T18:23:48Z,MERGED,True,8,4,1,https://github.com/jgravelle-google,Define __STDC_*_MACROS for all non-MSVC compilers,1,[],https://github.com/WebAssembly/wabt/pull/360,https://github.com/jgravelle-google,2,https://github.com/WebAssembly/wabt/pull/360#issuecomment-287426773,This should make the waterfall's Travis build happy,More context: http://en.cppreference.com/w/cpp/types/integer#Notes,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,361,2017-03-20T08:33:07Z,2017-03-21T17:11:03Z,2017-03-27T00:10:44Z,MERGED,True,2,2,2,https://github.com/Cellule,Fix lexing from binary buffer,1,['bug'],https://github.com/WebAssembly/wabt/pull/361,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/361,"Fix bug when lexing from buffer where subsequent read from the buffer overwrites bytes still available.
Once the lexing reaches the end of the current read buffer, it currently copies the remaining bytes at the beginning of the read buffer instead of the end. This means it overwrites bytes that hasn't been read yet.
ie:
// full wast  `(module (func $dummy))`
// initial buffer size = 12
// Before Fill()
lexer->buffer = ""(module (fun"";
lexer->token = ""(fun"";
// calling fill because there is not enough content left in the read buffer

// after fill now
lexer->token = lexer->buffer = "" $dummy))"";

// after fill with this fix
lexer->token = lexer->buffer = ""(func $dummy))""","Fix bug when lexing from buffer where subsequent read from the buffer overwrites bytes still available.
Once the lexing reaches the end of the current read buffer, it currently copies the remaining bytes at the beginning of the read buffer instead of the end. This means it overwrites bytes that hasn't been read yet.
ie:
// full wast  `(module (func $dummy))`
// initial buffer size = 12
// Before Fill()
lexer->buffer = ""(module (fun"";
lexer->token = ""(fun"";
// calling fill because there is not enough content left in the read buffer

// after fill now
lexer->token = lexer->buffer = "" $dummy))"";

// after fill with this fix
lexer->token = lexer->buffer = ""(func $dummy))""",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,361,2017-03-20T08:33:07Z,2017-03-21T17:11:03Z,2017-03-27T00:10:44Z,MERGED,True,2,2,2,https://github.com/Cellule,Fix lexing from binary buffer,1,['bug'],https://github.com/WebAssembly/wabt/pull/361,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/361#issuecomment-287997427,"Fix bug when lexing from buffer where subsequent read from the buffer overwrites bytes still available.
Once the lexing reaches the end of the current read buffer, it currently copies the remaining bytes at the beginning of the read buffer instead of the end. This means it overwrites bytes that hasn't been read yet.
ie:
// full wast  `(module (func $dummy))`
// initial buffer size = 12
// Before Fill()
lexer->buffer = ""(module (fun"";
lexer->token = ""(fun"";
// calling fill because there is not enough content left in the read buffer

// after fill now
lexer->token = lexer->buffer = "" $dummy))"";

// after fill with this fix
lexer->token = lexer->buffer = ""(func $dummy))""",Thanks for this! Do you know of a repro for this bug? I'd like to prevent a regression here.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,361,2017-03-20T08:33:07Z,2017-03-21T17:11:03Z,2017-03-27T00:10:44Z,MERGED,True,2,2,2,https://github.com/Cellule,Fix lexing from binary buffer,1,['bug'],https://github.com/WebAssembly/wabt/pull/361,https://github.com/Cellule,3,https://github.com/WebAssembly/wabt/pull/361#issuecomment-288003278,"Fix bug when lexing from buffer where subsequent read from the buffer overwrites bytes still available.
Once the lexing reaches the end of the current read buffer, it currently copies the remaining bytes at the beginning of the read buffer instead of the end. This means it overwrites bytes that hasn't been read yet.
ie:
// full wast  `(module (func $dummy))`
// initial buffer size = 12
// Before Fill()
lexer->buffer = ""(module (fun"";
lexer->token = ""(fun"";
// calling fill because there is not enough content left in the read buffer

// after fill now
lexer->token = lexer->buffer = "" $dummy))"";

// after fill with this fix
lexer->token = lexer->buffer = ""(func $dummy))""","I don't know if there is a binary in wabt that uses binary buffer as input.
I am using wabt in chakra to parse the spec test. One in particular that failed parsing because of this is br_table.wast, but any wast bigger than ~60kb will have an issue because of this.
Maybe you can make wast2wasm to fully read and cache the .wast input and use the lexer with the cached buffer to test this code path.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,361,2017-03-20T08:33:07Z,2017-03-21T17:11:03Z,2017-03-27T00:10:44Z,MERGED,True,2,2,2,https://github.com/Cellule,Fix lexing from binary buffer,1,['bug'],https://github.com/WebAssembly/wabt/pull/361,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/361#issuecomment-288149711,"Fix bug when lexing from buffer where subsequent read from the buffer overwrites bytes still available.
Once the lexing reaches the end of the current read buffer, it currently copies the remaining bytes at the beginning of the read buffer instead of the end. This means it overwrites bytes that hasn't been read yet.
ie:
// full wast  `(module (func $dummy))`
// initial buffer size = 12
// Before Fill()
lexer->buffer = ""(module (fun"";
lexer->token = ""(fun"";
// calling fill because there is not enough content left in the read buffer

// after fill now
lexer->token = lexer->buffer = "" $dummy))"";

// after fill with this fix
lexer->token = lexer->buffer = ""(func $dummy))""","OK, makes sense. I opened an issue to create a regression test, but let's land this for now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,362,2017-03-21T01:10:47Z,2017-03-23T17:36:13Z,2017-03-27T00:10:31Z,CLOSED,False,84,42,2,https://github.com/Cellule,MSVC++ 12.0 float hex string parse workaround,1,[],https://github.com/WebAssembly/wabt/pull/362,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/362,"Allow parse_double_hex and parse_float_hex to parse strings without a power.
In MSVC++ 12.0 (and previous versions ?) the float parsing doesn't support hex strings.
Not totally sure if it's a bug or just not supported, but this change is a workaround it for older MSVC compilers.
I tried to minimize changes to not affect modern compilers as strtof and strtod give the right result.
I used parse_float_hex and parse_double_hex to parse hex strings and fallback on normal implementation if not an hex string.","Allow parse_double_hex and parse_float_hex to parse strings without a power.
In MSVC++ 12.0 (and previous versions ?) the float parsing doesn't support hex strings.
Not totally sure if it's a bug or just not supported, but this change is a workaround it for older MSVC compilers.
I tried to minimize changes to not affect modern compilers as strtof and strtod give the right result.
I used parse_float_hex and parse_double_hex to parse hex strings and fallback on normal implementation if not an hex string.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,362,2017-03-21T01:10:47Z,2017-03-23T17:36:13Z,2017-03-27T00:10:31Z,CLOSED,False,84,42,2,https://github.com/Cellule,MSVC++ 12.0 float hex string parse workaround,1,[],https://github.com/WebAssembly/wabt/pull/362,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/362#issuecomment-288159763,"Allow parse_double_hex and parse_float_hex to parse strings without a power.
In MSVC++ 12.0 (and previous versions ?) the float parsing doesn't support hex strings.
Not totally sure if it's a bug or just not supported, but this change is a workaround it for older MSVC compilers.
I tried to minimize changes to not affect modern compilers as strtof and strtod give the right result.
I used parse_float_hex and parse_double_hex to parse hex strings and fallback on normal implementation if not an hex string.","Is this affecting some new code? I checked to see where strtof and strtod are used, and it's currently only in literal.cc, where it's only used when it's known that there are no hex floats.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,362,2017-03-21T01:10:47Z,2017-03-23T17:36:13Z,2017-03-27T00:10:31Z,CLOSED,False,84,42,2,https://github.com/Cellule,MSVC++ 12.0 float hex string parse workaround,1,[],https://github.com/WebAssembly/wabt/pull/362,https://github.com/Cellule,3,https://github.com/WebAssembly/wabt/pull/362#issuecomment-288206091,"Allow parse_double_hex and parse_float_hex to parse strings without a power.
In MSVC++ 12.0 (and previous versions ?) the float parsing doesn't support hex strings.
Not totally sure if it's a bug or just not supported, but this change is a workaround it for older MSVC compilers.
I tried to minimize changes to not affect modern compilers as strtof and strtod give the right result.
I used parse_float_hex and parse_double_hex to parse hex strings and fallback on normal implementation if not an hex string.","Is this affecting some new code? I checked to see where strtof and strtod are used, and it's currently only in literal.cc, where it's only used when it's known that there are no hex floats.

It is not affecting new code. Only older MSVC compiler have bad float parsing implementation.
Right now (f32.const 0xf32) is a valid float format and we'll parse it in literal.cc parse_float with LiteralType::Int
I noticed that some recent changes prevent building in VS 2013. Notably the use of constexpr and noexcept keywords.
I wonder if we want to keep supporting VS2013, initially I was doing this work because we were supporting it in Chakra, but we are talking about dropping support soon chakra-core/ChakraCore#2549",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,362,2017-03-21T01:10:47Z,2017-03-23T17:36:13Z,2017-03-27T00:10:31Z,CLOSED,False,84,42,2,https://github.com/Cellule,MSVC++ 12.0 float hex string parse workaround,1,[],https://github.com/WebAssembly/wabt/pull/362,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/362#issuecomment-288267686,"Allow parse_double_hex and parse_float_hex to parse strings without a power.
In MSVC++ 12.0 (and previous versions ?) the float parsing doesn't support hex strings.
Not totally sure if it's a bug or just not supported, but this change is a workaround it for older MSVC compilers.
I tried to minimize changes to not affect modern compilers as strtof and strtod give the right result.
I used parse_float_hex and parse_double_hex to parse hex strings and fallback on normal implementation if not an hex string.","It is not affecting new code. Only older MSVC compiler have bad float parsing implementation.
Right now (f32.const 0xf32) is a valid float format and we'll parse it in literal.cc parse_float with LiteralType::Int

That seems to be the correct behavior (checked against spec interpreter). Makes sense, I think, since we don't want to make the lexer context-sensitive.

I noticed that some recent changes prevent building in VS 2013. Notably the use of constexpr and noexcept keywords.
I wonder if we want to keep supporting VS2013, initially I was doing this work because we were supporting it in Chakra, but we are talking about dropping support soon chakra-core/ChakraCore#2549

I'm not opposed to supporting VS2013 for now (though I know some others are eager to drop it). If we decide to keep it, we'll have to add an appveyor build so it doesn't regress.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,362,2017-03-21T01:10:47Z,2017-03-23T17:36:13Z,2017-03-27T00:10:31Z,CLOSED,False,84,42,2,https://github.com/Cellule,MSVC++ 12.0 float hex string parse workaround,1,[],https://github.com/WebAssembly/wabt/pull/362,https://github.com/Cellule,5,https://github.com/WebAssembly/wabt/pull/362#issuecomment-288800446,"Allow parse_double_hex and parse_float_hex to parse strings without a power.
In MSVC++ 12.0 (and previous versions ?) the float parsing doesn't support hex strings.
Not totally sure if it's a bug or just not supported, but this change is a workaround it for older MSVC compilers.
I tried to minimize changes to not affect modern compilers as strtof and strtod give the right result.
I used parse_float_hex and parse_double_hex to parse hex strings and fallback on normal implementation if not an hex string.","I will close this PR for now.
I found out that some other compiler also have similar issue. I have to investigate what to do about it. I will probably just make a patch for windows",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,364,2017-03-21T22:59:35Z,2017-03-22T19:59:20Z,2017-03-23T04:16:01Z,MERGED,True,85,75,9,https://github.com/sbc100,wasmdump: Improve printing on relocation information,2,[],https://github.com/WebAssembly/wabt/pull/364,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/364,"Print the addend and make it more clear what the
different offsets mean.","Print the addend and make it more clear what the
different offsets mean.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,364,2017-03-21T22:59:35Z,2017-03-22T19:59:20Z,2017-03-23T04:16:01Z,MERGED,True,85,75,9,https://github.com/sbc100,wasmdump: Improve printing on relocation information,2,[],https://github.com/WebAssembly/wabt/pull/364,https://github.com/pipcet,2,https://github.com/WebAssembly/wabt/pull/364#issuecomment-288259017,"Print the addend and make it more clear what the
different offsets mean.","This is horribly nitpicky, but is there an official line on whether it's R_WEBASSEMBLY_FUNC_INDEX_LEB or R_FUNC_INDEX_LEB?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,364,2017-03-21T22:59:35Z,2017-03-22T19:59:20Z,2017-03-23T04:16:01Z,MERGED,True,85,75,9,https://github.com/sbc100,wasmdump: Improve printing on relocation information,2,[],https://github.com/WebAssembly/wabt/pull/364,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/364#issuecomment-288520318,"Print the addend and make it more clear what the
different offsets mean.",I think I used R_FUNC_INDEX_LEB so save on horizontal space and fit more one line.  Its also somewhat redundant since all relocations are by definition web assembly.  Perhaps I should also drop the R_ to avoid confusion with the names in the Linking.md document?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,366,2017-03-22T17:16:29Z,2017-03-23T04:14:17Z,2017-03-23T04:14:20Z,MERGED,True,3477,3819,40,https://github.com/binji,Replace wabt::*vector with std::vector,5,[],https://github.com/WebAssembly/wabt/pull/366,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/366,"This propagates through a lot of code since std::vector will call
constructors and destructors. In particular, this CL adds many default
constructors and destructors to previously POD types. Many of them are
only there to construct Var and StringSlice types, so they likely
can be removed when those have their own constructors.
Since unions members cannot contain constructors or destructors
(without additional implementation), this CL changes those members to
pointers instead. (Perhaps in a future CL these will be std::variant
instead of union, so the members can be value types again.)","This propagates through a lot of code since std::vector will call
constructors and destructors. In particular, this CL adds many default
constructors and destructors to previously POD types. Many of them are
only there to construct Var and StringSlice types, so they likely
can be removed when those have their own constructors.
Since unions members cannot contain constructors or destructors
(without additional implementation), this CL changes those members to
pointers instead. (Perhaps in a future CL these will be std::variant
instead of union, so the members can be value types again.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,366,2017-03-22T17:16:29Z,2017-03-23T04:14:17Z,2017-03-23T04:14:20Z,MERGED,True,3477,3819,40,https://github.com/binji,Replace wabt::*vector with std::vector,5,[],https://github.com/WebAssembly/wabt/pull/366,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/366#issuecomment-288606867,"This propagates through a lot of code since std::vector will call
constructors and destructors. In particular, this CL adds many default
constructors and destructors to previously POD types. Many of them are
only there to construct Var and StringSlice types, so they likely
can be removed when those have their own constructors.
Since unions members cannot contain constructors or destructors
(without additional implementation), this CL changes those members to
pointers instead. (Perhaps in a future CL these will be std::variant
instead of union, so the members can be value types again.)","Pretty sure I got all the places where it was easy to switch to a range-based for. There are some others that use the index which probably could switch, but I figure it's better to do those later if we want.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,367,2017-03-23T19:26:49Z,2017-03-23T20:33:30Z,2017-03-24T17:15:35Z,MERGED,True,58,42,1,https://github.com/Cellule,Windows parse hexfloat,1,[],https://github.com/WebAssembly/wabt/pull/367,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/367,"Use parse_double_hex and parse_float_hex to parse float hexstring on Windows because some crt implementations of strtof and strtod doesn't support hexstrings.
This is related to #362.
After some more thought I decided to approach this issue differently.
First of all, I don't think we should try to keep supporting Visual Studio 2013. There are way too many things that needs to be changed to support it and I don't think it is worth it.
However, in chakra, we are using an older version of the crt that has that strtof/strtod bug. The main issue being not supporting hexstrings. Which this pull request fixes.
There is some precision bugs in the implementation which is not a big deal and hopefully we'll update the crt version soon and this problem will go away.
I hope that this change is not too invasive and can be merged in the mainline. It would avoid the need for a fork of wabt for our purposes","Use parse_double_hex and parse_float_hex to parse float hexstring on Windows because some crt implementations of strtof and strtod doesn't support hexstrings.
This is related to #362.
After some more thought I decided to approach this issue differently.
First of all, I don't think we should try to keep supporting Visual Studio 2013. There are way too many things that needs to be changed to support it and I don't think it is worth it.
However, in chakra, we are using an older version of the crt that has that strtof/strtod bug. The main issue being not supporting hexstrings. Which this pull request fixes.
There is some precision bugs in the implementation which is not a big deal and hopefully we'll update the crt version soon and this problem will go away.
I hope that this change is not too invasive and can be merged in the mainline. It would avoid the need for a fork of wabt for our purposes",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,368,2017-03-24T19:13:06Z,2017-03-24T21:44:37Z,2017-03-24T21:44:40Z,MERGED,True,3883,3534,34,https://github.com/binji,Support arithmetic/canonical NaN; update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/368,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/368,"Positive NaN (+nan) is defined as being a NaN value where the sign bit
is clear, the exponent is all ones, and the tag has only the ""quiet"" bit
set. The quiet bit is the most-significant bit of the tag. For example,
for a 32-bit float, +nan is 0x7cf00000.
""Canonical NaN"" is either +nan or -nan, where -nan is +nan with the sign
bit set.
""Arithmetic NaN"" is defined as any other quiet NaN (i.e. the quiet bit
must be set, but any other bit can be either 0 or 1.)
This change doesn't update the interpreter because it is only a
loosening of the previous NaN behavior.","Positive NaN (+nan) is defined as being a NaN value where the sign bit
is clear, the exponent is all ones, and the tag has only the ""quiet"" bit
set. The quiet bit is the most-significant bit of the tag. For example,
for a 32-bit float, +nan is 0x7cf00000.
""Canonical NaN"" is either +nan or -nan, where -nan is +nan with the sign
bit set.
""Arithmetic NaN"" is defined as any other quiet NaN (i.e. the quiet bit
must be set, but any other bit can be either 0 or 1.)
This change doesn't update the interpreter because it is only a
loosening of the previous NaN behavior.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,368,2017-03-24T19:13:06Z,2017-03-24T21:44:37Z,2017-03-24T21:44:40Z,MERGED,True,3883,3534,34,https://github.com/binji,Support arithmetic/canonical NaN; update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/368,https://github.com/sunfishcode,2,https://github.com/WebAssembly/wabt/pull/368#issuecomment-289142913,"Positive NaN (+nan) is defined as being a NaN value where the sign bit
is clear, the exponent is all ones, and the tag has only the ""quiet"" bit
set. The quiet bit is the most-significant bit of the tag. For example,
for a 32-bit float, +nan is 0x7cf00000.
""Canonical NaN"" is either +nan or -nan, where -nan is +nan with the sign
bit set.
""Arithmetic NaN"" is defined as any other quiet NaN (i.e. the quiet bit
must be set, but any other bit can be either 0 or 1.)
This change doesn't update the interpreter because it is only a
loosening of the previous NaN behavior.","I took a quick look at the implementation here, and it looks correct to me.",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,372,2017-03-29T20:18:49Z,2017-03-29T21:09:41Z,2017-03-29T21:09:43Z,MERGED,True,14,17,3,https://github.com/sbc100,wasmdump: Fix output of local names,1,[],https://github.com/WebAssembly/wabt/pull/372,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/372,"Previously we could nest the local names inside the
function names, but in the new names sections the locals
all come later on.","Previously we could nest the local names inside the
function names, but in the new names sections the locals
all come later on.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,373,2017-03-29T21:09:52Z,2017-03-29T21:17:14Z,2017-03-29T21:17:14Z,CLOSED,False,55,51,3,https://github.com/sbc100,wasmlink: Fix function indexes in name section,1,[],https://github.com/WebAssembly/wabt/pull/373,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/373,"The code was assuming that all functions were named
and using a simple increment rather than calculating
the actual function index in the new binary.","The code was assuming that all functions were named
and using a simple increment rather than calculating
the actual function index in the new binary.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,373,2017-03-29T21:09:52Z,2017-03-29T21:17:14Z,2017-03-29T21:17:14Z,CLOSED,False,55,51,3,https://github.com/sbc100,wasmlink: Fix function indexes in name section,1,[],https://github.com/WebAssembly/wabt/pull/373,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/373#issuecomment-290228723,"The code was assuming that all functions were named
and using a simple increment rather than calculating
the actual function index in the new binary.",Gonna split this up,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,374,2017-03-29T21:34:54Z,2017-03-29T23:09:44Z,2017-03-30T04:07:48Z,MERGED,True,46,41,2,https://github.com/sbc100,wasmlink: Fix function indexes in name section,1,[],https://github.com/WebAssembly/wabt/pull/374,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/374,"The code was assuming that all functions were named
and using a simple increment rather than calculating
the actual function index in the new binary.","The code was assuming that all functions were named
and using a simple increment rather than calculating
the actual function index in the new binary.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,374,2017-03-29T21:34:54Z,2017-03-29T23:09:44Z,2017-03-30T04:07:48Z,MERGED,True,46,41,2,https://github.com/sbc100,wasmlink: Fix function indexes in name section,1,[],https://github.com/WebAssembly/wabt/pull/374,https://github.com/pipcet,2,https://github.com/WebAssembly/wabt/pull/374#issuecomment-290292282,"The code was assuming that all functions were named
and using a simple increment rather than calculating
the actual function index in the new binary.","I'm confused by this PR; we have the following code in binary-reader-linker.cc:
    /* We don't currently support merging name sections unless they contain
     * a name for every function. */
    uint32_t total_funcs = binary->function_imports.size();
    for (const std::unique_ptr<Section>& section : binary->sections) {
      if (section->section_code == BinarySection::Function) {
        total_funcs += section->count;
        break;
      }
    }
    if (total_funcs != sec->count) {
      WABT_FATAL(""name section count (%d) does not match function count (%d)\n"",
                 sec->count, total_funcs);
    }

So how can this PR make a difference?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,374,2017-03-29T21:34:54Z,2017-03-29T23:09:44Z,2017-03-30T04:07:48Z,MERGED,True,46,41,2,https://github.com/sbc100,wasmlink: Fix function indexes in name section,1,[],https://github.com/WebAssembly/wabt/pull/374,https://github.com/pipcet,3,https://github.com/WebAssembly/wabt/pull/374#issuecomment-290294847,"The code was assuming that all functions were named
and using a simple increment rather than calculating
the actual function index in the new binary.","It seems wasm2wast actually writes an empty name for the unnamed function:
0000068: 046e 616d 6501 3105 000d 2469 6d70 6f72  .name.1...$impor
0000078: 745f 6675 6e63 3101 0d24 696d 706f 7274  t_func1..$import
0000088: 5f66 756e 6332 0206 246e 616d 6531 0306  _func2..$name1..
0000098: 246e 616d 6532 0400 0226 0500 0001 0002  $name2...&......
00000a8: 0100 0724 7061 7261 6d31 0301 0007 2470  ...$param1....$p
00000b8: 6172 616d 3204 0100 0724 7061 7261 6d32  aram2....$param2

(the relevant bit is the 0400 at offset 0x9e).
Which is one bug hiding behind another one, I guess.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,374,2017-03-29T21:34:54Z,2017-03-29T23:09:44Z,2017-03-30T04:07:48Z,MERGED,True,46,41,2,https://github.com/sbc100,wasmlink: Fix function indexes in name section,1,[],https://github.com/WebAssembly/wabt/pull/374,https://github.com/pipcet,4,https://github.com/WebAssembly/wabt/pull/374#issuecomment-290296879,"The code was assuming that all functions were named
and using a simple increment rather than calculating
the actual function index in the new binary.","Test patch here: https://github.com/WebAssembly/wabt/compare/master...pipcet:fix-empty-function-name?expand=1
That breaks test/link/names.txt, and it's incomplete because it doesn't handle the locals section, so no PR yet.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,375,2017-03-29T21:49:41Z,2017-03-30T21:12:48Z,2017-03-30T21:20:03Z,MERGED,True,126,7,7,https://github.com/sbc100,Verify the sizes of the sub-sections within the name section,7,[],https://github.com/WebAssembly/wabt/pull/375,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/375,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,375,2017-03-29T21:49:41Z,2017-03-30T21:12:48Z,2017-03-30T21:20:03Z,MERGED,True,126,7,7,https://github.com/sbc100,Verify the sizes of the sub-sections within the name section,7,[],https://github.com/WebAssembly/wabt/pull/375,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/375#issuecomment-290478271,,If its OK with you all we can add a flag in a separate PR when we address #378,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,375,2017-03-29T21:49:41Z,2017-03-30T21:12:48Z,2017-03-30T21:20:03Z,MERGED,True,126,7,7,https://github.com/sbc100,Verify the sizes of the sub-sections within the name section,7,[],https://github.com/WebAssembly/wabt/pull/375,https://github.com/pipcet,3,https://github.com/WebAssembly/wabt/pull/375#issuecomment-290482221,,"My preference is to do that: merge this first, then #376, and then #378 should be possible to fix by putting a filter class between the BinaryReader and the context.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,376,2017-03-29T23:01:04Z,2017-03-30T21:17:30Z,2017-03-30T21:17:33Z,MERGED,True,4359,4142,47,https://github.com/binji,Use classes + virtual functions for BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/376,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/376,"This adds a few new classes:

BinaryReader: the abstract base class
BinaryReaderNop: implements all of BinaryReader, but does nothing
LoggingBinaryReader: logs calls through BinaryReader, and forwards to
another BinaryReader

Typically this means we can remove the Context structs from these
implementations, since that data can just move into the BinaryReader
subclasses.
I also took the opportunity to rename the new member functions to
MixedCase instead of snake_case, since that's more common in C++.","This adds a few new classes:

BinaryReader: the abstract base class
BinaryReaderNop: implements all of BinaryReader, but does nothing
LoggingBinaryReader: logs calls through BinaryReader, and forwards to
another BinaryReader

Typically this means we can remove the Context structs from these
implementations, since that data can just move into the BinaryReader
subclasses.
I also took the opportunity to rename the new member functions to
MixedCase instead of snake_case, since that's more common in C++.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,376,2017-03-29T23:01:04Z,2017-03-30T21:17:30Z,2017-03-30T21:17:33Z,MERGED,True,4359,4142,47,https://github.com/binji,Use classes + virtual functions for BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/376,https://github.com/pipcet,2,https://github.com/WebAssembly/wabt/pull/376#issuecomment-290262812,"This adds a few new classes:

BinaryReader: the abstract base class
BinaryReaderNop: implements all of BinaryReader, but does nothing
LoggingBinaryReader: logs calls through BinaryReader, and forwards to
another BinaryReader

Typically this means we can remove the Context structs from these
implementations, since that data can just move into the BinaryReader
subclasses.
I also took the opportunity to rename the new member functions to
MixedCase instead of snake_case, since that's more common in C++.","Would it make sense to make state a member of the BinaryReader class rather than passing it by reference to all callbacks? Not a hundred percent clean to have a data member in the abstract base class, but it would save a lot of code...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,376,2017-03-29T23:01:04Z,2017-03-30T21:17:30Z,2017-03-30T21:17:33Z,MERGED,True,4359,4142,47,https://github.com/binji,Use classes + virtual functions for BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/376,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/376#issuecomment-290263554,"This adds a few new classes:

BinaryReader: the abstract base class
BinaryReaderNop: implements all of BinaryReader, but does nothing
LoggingBinaryReader: logs calls through BinaryReader, and forwards to
another BinaryReader

Typically this means we can remove the Context structs from these
implementations, since that data can just move into the BinaryReader
subclasses.
I also took the opportunity to rename the new member functions to
MixedCase instead of snake_case, since that's more common in C++.","@pipcet I had it that way at first, but it makes the forwarding in LoggingBinaryReader clunky, since you have to copy the values in before every callback. This seemed less error-prone, and would expand to other things too (like having a ChainBinaryReader or whatever). What do you think?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,376,2017-03-29T23:01:04Z,2017-03-30T21:17:30Z,2017-03-30T21:17:33Z,MERGED,True,4359,4142,47,https://github.com/binji,Use classes + virtual functions for BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/376,https://github.com/pipcet,4,https://github.com/WebAssembly/wabt/pull/376#issuecomment-290273550,"This adds a few new classes:

BinaryReader: the abstract base class
BinaryReaderNop: implements all of BinaryReader, but does nothing
LoggingBinaryReader: logs calls through BinaryReader, and forwards to
another BinaryReader

Typically this means we can remove the Context structs from these
implementations, since that data can just move into the BinaryReader
subclasses.
I also took the opportunity to rename the new member functions to
MixedCase instead of snake_case, since that's more common in C++.","@binji I see. I must say I'd still prefer not to have that state argument, which appears to be unused 90% of the time. It's like having two void * arguments in a C callback...
I must confess I can't think of a perfectly clean way of doing this, my best attempt is:
When parsing starts, the BinaryReader's BeginModule method is called with a BinaryReader::State* state argument. The base class simply stores that argument and provides a getInputOffset() method to access the offset (that appears to be the only part that is actually used?).
That would be the least code, I think (LoggingReader can pass through the state pointer rather than having to copy data) and shouldn't reduce performance, while still allowing the state class to grow to include more state.
It's a bit C-like in using actual pointers though, so I fully understand if you prefer leaving things as in the PR; either way, I think, this PR is a huge improvement.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,376,2017-03-29T23:01:04Z,2017-03-30T21:17:30Z,2017-03-30T21:17:33Z,MERGED,True,4359,4142,47,https://github.com/binji,Use classes + virtual functions for BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/376,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/376#issuecomment-290274700,"This adds a few new classes:

BinaryReader: the abstract base class
BinaryReaderNop: implements all of BinaryReader, but does nothing
LoggingBinaryReader: logs calls through BinaryReader, and forwards to
another BinaryReader

Typically this means we can remove the Context structs from these
implementations, since that data can just move into the BinaryReader
subclasses.
I also took the opportunity to rename the new member functions to
MixedCase instead of snake_case, since that's more common in C++.","Yeah, that's not bad. I'll try it out and see.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,376,2017-03-29T23:01:04Z,2017-03-30T21:17:30Z,2017-03-30T21:17:33Z,MERGED,True,4359,4142,47,https://github.com/binji,Use classes + virtual functions for BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/376,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/376#issuecomment-290279333,"This adds a few new classes:

BinaryReader: the abstract base class
BinaryReaderNop: implements all of BinaryReader, but does nothing
LoggingBinaryReader: logs calls through BinaryReader, and forwards to
another BinaryReader

Typically this means we can remove the Context structs from these
implementations, since that data can just move into the BinaryReader
subclasses.
I also took the opportunity to rename the new member functions to
MixedCase instead of snake_case, since that's more common in C++.","Thanks for the suggestion, @pipcet. This is much nicer.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,377,2017-03-29T23:10:39Z,2017-03-30T01:00:46Z,2017-03-30T01:26:45Z,MERGED,True,31,44,1,https://github.com/sbc100,Cleanup default test tools declartion in run-tests.py,1,[],https://github.com/WebAssembly/wabt/pull/377,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/377,"There was a bunch of redundant splitting and joining
going on.","There was a bunch of redundant splitting and joining
going on.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,377,2017-03-29T23:10:39Z,2017-03-30T01:00:46Z,2017-03-30T01:26:45Z,MERGED,True,31,44,1,https://github.com/sbc100,Cleanup default test tools declartion in run-tests.py,1,[],https://github.com/WebAssembly/wabt/pull/377,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/377#issuecomment-290255993,"There was a bunch of redundant splitting and joining
going on.","Thanks, lgtm",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,379,2017-03-30T00:17:22Z,2017-03-31T19:32:13Z,2017-03-31T19:32:16Z,MERGED,True,12,6,1,https://github.com/sbc100,Add -p option to run-tests.py to show the commands it runs,3,[],https://github.com/WebAssembly/wabt/pull/379,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/379,"Without this it can be hard to dig down that find out
exactly what is being run","Without this it can be hard to dig down that find out
exactly what is being run",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,379,2017-03-30T00:17:22Z,2017-03-31T19:32:13Z,2017-03-31T19:32:16Z,MERGED,True,12,6,1,https://github.com/sbc100,Add -p option to run-tests.py to show the commands it runs,3,[],https://github.com/WebAssembly/wabt/pull/379,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/379#issuecomment-290558796,"Without this it can be hard to dig down that find out
exactly what is being run","I removed the limitation on -j1, and I don't pass it through to the child because that would cause the expected test output to fail",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,379,2017-03-30T00:17:22Z,2017-03-31T19:32:13Z,2017-03-31T19:32:16Z,MERGED,True,12,6,1,https://github.com/sbc100,Add -p option to run-tests.py to show the commands it runs,3,[],https://github.com/WebAssembly/wabt/pull/379,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/379#issuecomment-290561314,"Without this it can be hard to dig down that find out
exactly what is being run",sgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,380,2017-03-30T21:23:58Z,2017-03-30T21:24:17Z,2017-03-30T21:24:20Z,MERGED,True,0,4,1,https://github.com/binji,Don't force color diagnostics on Clang,1,[],https://github.com/WebAssembly/wabt/pull/380,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/380,"It breaks my Vim workflow :) But seriously, we should just figure out a
nicer way to handle this with Ninja if that's what we want.","It breaks my Vim workflow :) But seriously, we should just figure out a
nicer way to handle this with Ninja if that's what we want.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,381,2017-03-30T21:40:34Z,2017-03-31T22:59:09Z,2017-03-31T22:59:13Z,MERGED,True,191,153,10,https://github.com/sbc100,Allow names section to be sparse,8,[],https://github.com/WebAssembly/wabt/pull/381,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/381,"Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.","Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,381,2017-03-30T21:40:34Z,2017-03-31T22:59:09Z,2017-03-31T22:59:13Z,MERGED,True,191,153,10,https://github.com/sbc100,Allow names section to be sparse,8,[],https://github.com/WebAssembly/wabt/pull/381,https://github.com/pipcet,2,https://github.com/WebAssembly/wabt/pull/381#issuecomment-290565346,"Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.","#374 for context.
I don't think this change is correct as it stands, I'll comment in the code. In addition, it's not clear to me how we should handle empty names—the spec appears to allow them, which would require us using std::optional<> or rolling our own.
The other limitation is this patch handles sparse ""name"".function subsections, but not sparse ""name"".locals subsections.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,381,2017-03-30T21:40:34Z,2017-03-31T22:59:09Z,2017-03-31T22:59:13Z,MERGED,True,191,153,10,https://github.com/sbc100,Allow names section to be sparse,8,[],https://github.com/WebAssembly/wabt/pull/381,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/381#issuecomment-290569100,"Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.",I removed to assert and added a test to make sure the binary-reader verified the function indexes.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,381,2017-03-30T21:40:34Z,2017-03-31T22:59:09Z,2017-03-31T22:59:13Z,MERGED,True,191,153,10,https://github.com/sbc100,Allow names section to be sparse,8,[],https://github.com/WebAssembly/wabt/pull/381,https://github.com/pipcet,4,https://github.com/WebAssembly/wabt/pull/381#issuecomment-290569169,"Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.","Now I've found my thinko, this looks good to me, but the related code in wasm-link.cc, which now becomes relevant because of the dropped constraint, looks questionable:
  for (const std::unique_ptr<LinkerInputBinary>& binary: ctx->inputs) {
    for (size_t i = 0; i < binary->debug_names.size(); i++) {
      if (binary->debug_names[i].empty())
        continue;
      if (i < binary->function_imports.size()) {
        if (!binary->function_imports[i].active)
          continue;
      }
      write_u32_leb128(stream, i + binary->function_index_offset, ""function index"");
      write_string(stream, binary->debug_names[i], ""function name"");
    }
  }

Does that do the right thing for imports which are not active? My assumption and the previous code agreed that inactive imports wouldn't be emitted, so we should be writing i + binary->function_index_offset - delta, delta being a per-binary count of inactive imports discovered so far.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,381,2017-03-30T21:40:34Z,2017-03-31T22:59:09Z,2017-03-31T22:59:13Z,MERGED,True,191,153,10,https://github.com/sbc100,Allow names section to be sparse,8,[],https://github.com/WebAssembly/wabt/pull/381,https://github.com/pipcet,5,https://github.com/WebAssembly/wabt/pull/381#issuecomment-290574786,"Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.","Hmm. I'm adding some tests (just trivial variations on test/link/names.txt), and seeing odd behavior and segfaults (for example, a module without a function section but with imports causes a segfault as OnFunctionCount is never called).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,381,2017-03-30T21:40:34Z,2017-03-31T22:59:09Z,2017-03-31T22:59:13Z,MERGED,True,191,153,10,https://github.com/sbc100,Allow names section to be sparse,8,[],https://github.com/WebAssembly/wabt/pull/381,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/381#issuecomment-290574957,"Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.",Good catch.  I didn't think of that.  Will add fix and add another test case.  Thanks for the thorough review!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,381,2017-03-30T21:40:34Z,2017-03-31T22:59:09Z,2017-03-31T22:59:13Z,MERGED,True,191,153,10,https://github.com/sbc100,Allow names section to be sparse,8,[],https://github.com/WebAssembly/wabt/pull/381,https://github.com/pipcet,7,https://github.com/WebAssembly/wabt/pull/381#issuecomment-290576553,"Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.",https://github.com/WebAssembly/wabt/compare/master...pipcet:name-tests?expand=1 for two of the tests.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,381,2017-03-30T21:40:34Z,2017-03-31T22:59:09Z,2017-03-31T22:59:13Z,MERGED,True,191,153,10,https://github.com/sbc100,Allow names section to be sparse,8,[],https://github.com/WebAssembly/wabt/pull/381,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/381#issuecomment-290580304,"Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.","Ah, your names2.txt does seems to expose a bug in wasm-link.   However, it not caused by this change, and in fact this change exposes it as an error rather then a SEGFAULT.     So I think we should address that separately.  It looks like its generating a negative function index in the names section is clearly wrong.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,381,2017-03-30T21:40:34Z,2017-03-31T22:59:09Z,2017-03-31T22:59:13Z,MERGED,True,191,153,10,https://github.com/sbc100,Allow names section to be sparse,8,[],https://github.com/WebAssembly/wabt/pull/381,https://github.com/pipcet,9,https://github.com/WebAssembly/wabt/pull/381#issuecomment-290670919,"Only emit names for function that actually have one.
Previously we were emitting empty strings for functions
without names.  The new version of the names section
allow for a sparse list.
Also, cleanup the funtion name handling in wasm-link.","Thanks for investigating, and fixing the segfault! Yes, the issue is in wasm-link.cc; there's what's maybe a fix at
https://github.com/pipcet/wabt/tree/fix-names.
Addressing it separately makes sense to me, it's in wasm-link.cc which this PR doesn't touch.
(There's one test failure caused by the new error message.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,382,2017-03-30T22:20:43Z,2017-03-31T17:27:39Z,2017-03-31T17:27:41Z,MERGED,True,3,5,1,https://github.com/binji,Properly handle keyboard interrupt in run-tests.py,1,[],https://github.com/WebAssembly/wabt/pull/382,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/382,"We shouldn't eat Exceptions, just our own local Errors; that way bugs in
the test runner propagate out to give us nice stack traces.","We shouldn't eat Exceptions, just our own local Errors; that way bugs in
the test runner propagate out to give us nice stack traces.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,383,2017-03-31T18:44:48Z,2017-03-31T22:19:00Z,2017-03-31T22:21:23Z,MERGED,True,12,3,1,https://github.com/sbc100,Return non-zero on travis if tests fail,7,[],https://github.com/WebAssembly/wabt/pull/383,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/383,"Oops, we were silently ignoring tests failures on travis.
Also turn on -v when running travis tests so it records the tests it runs","Oops, we were silently ignoring tests failures on travis.
Also turn on -v when running travis tests so it records the tests it runs",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,384,2017-03-31T23:31:41Z,2017-04-03T19:30:37Z,2017-04-03T19:36:19Z,MERGED,True,71,45,3,https://github.com/pipcet,Fix function name indices for imported functions,4,[],https://github.com/WebAssembly/wabt/pull/384,https://github.com/pipcet,1,https://github.com/WebAssembly/wabt/pull/384,"When linking, a source binary's imported function indices and its implemented function indices can be non-contiguous; the previous code didn't catch that.","When linking, a source binary's imported function indices and its implemented function indices can be non-contiguous; the previous code didn't catch that.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,384,2017-03-31T23:31:41Z,2017-04-03T19:30:37Z,2017-04-03T19:36:19Z,MERGED,True,71,45,3,https://github.com/pipcet,Fix function name indices for imported functions,4,[],https://github.com/WebAssembly/wabt/pull/384,https://github.com/pipcet,2,https://github.com/WebAssembly/wabt/pull/384#issuecomment-290883740,"When linking, a source binary's imported function indices and its implemented function indices can be non-contiguous; the previous code didn't catch that.","@sbc100 I think I fixed relocate_func_index (by caching, to avoid O(n^2) behavior--I still hope to run this on glibc soon :-) ). However, it changes the test output again, and I'd really like to make sure that the new output is correct and the old one wasn't. If you could have a look, that'd be great.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,384,2017-03-31T23:31:41Z,2017-04-03T19:30:37Z,2017-04-03T19:36:19Z,MERGED,True,71,45,3,https://github.com/pipcet,Fix function name indices for imported functions,4,[],https://github.com/WebAssembly/wabt/pull/384,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/384#issuecomment-291226280,"When linking, a source binary's imported function indices and its implemented function indices can be non-contiguous; the previous code didn't catch that.",I guess that fact that only the names test has a delta means that we could use some better test coverage elsewhere because this bug effects more than just names I think.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,384,2017-03-31T23:31:41Z,2017-04-03T19:30:37Z,2017-04-03T19:36:19Z,MERGED,True,71,45,3,https://github.com/pipcet,Fix function name indices for imported functions,4,[],https://github.com/WebAssembly/wabt/pull/384,https://github.com/pipcet,4,https://github.com/WebAssembly/wabt/pull/384#issuecomment-291243091,"When linking, a source binary's imported function indices and its implemented function indices can be non-contiguous; the previous code didn't catch that.","Cool. I can't merge, so feel free to when you're happy with the code, or let me know if anything further needs changing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,385,2017-04-01T01:11:41Z,2017-04-05T00:09:16Z,2017-04-05T00:09:21Z,MERGED,True,135,87,15,https://github.com/binji,Run tests on AppVeyor,12,[],https://github.com/WebAssembly/wabt/pull/385,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/385,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,385,2017-04-01T01:11:41Z,2017-04-05T00:09:16Z,2017-04-05T00:09:21Z,MERGED,True,135,87,15,https://github.com/binji,Run tests on AppVeyor,12,[],https://github.com/WebAssembly/wabt/pull/385,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/385#issuecomment-290882628,,"This almost works, the only thing that's failing is conversion from converting 0x8000000000000401 to double on Win64. Seems that v8 ran into the same issue: https://codereview.chromium.org/1738623003.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,385,2017-04-01T01:11:41Z,2017-04-05T00:09:16Z,2017-04-05T00:09:21Z,MERGED,True,135,87,15,https://github.com/binji,Run tests on AppVeyor,12,[],https://github.com/WebAssembly/wabt/pull/385,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/385#issuecomment-291665571,,"OK, this seems to be working, PTAL",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,387,2017-04-04T01:59:04Z,2017-04-04T17:34:07Z,2017-04-04T17:49:08Z,MERGED,True,42,1,2,https://github.com/sbc100,Add dump test that shows inline relocations,1,[],https://github.com/WebAssembly/wabt/pull/387,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/387,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,388,2017-04-04T02:26:34Z,2017-04-04T18:45:42Z,2017-04-04T18:45:45Z,MERGED,True,123,101,9,https://github.com/sbc100,[wasmlink] Relocate indexes in the gererated reloc section,2,[],https://github.com/WebAssembly/wabt/pull/388,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/388,"We recently switched to embedding the index of the relocation
within the relocation entry itself but overlooked the fact
that this needs to be updated when writing out the linked
reloc section.","We recently switched to embedding the index of the relocation
within the relocation entry itself but overlooked the fact
that this needs to be updated when writing out the linked
reloc section.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,388,2017-04-04T02:26:34Z,2017-04-04T18:45:42Z,2017-04-04T18:45:45Z,MERGED,True,123,101,9,https://github.com/sbc100,[wasmlink] Relocate indexes in the gererated reloc section,2,[],https://github.com/WebAssembly/wabt/pull/388,https://github.com/pipcet,2,https://github.com/WebAssembly/wabt/pull/388#issuecomment-291568900,"We recently switched to embedding the index of the relocation
within the relocation entry itself but overlooked the fact
that this needs to be updated when writing out the linked
reloc section.","It looks like the old code used the unrelocated indices? That is certainly wrong. I've looked over the test output for a while, and the new output seems correct to me.
Is there anywhere else we're using relocated function indices that we might have missed?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,388,2017-04-04T02:26:34Z,2017-04-04T18:45:42Z,2017-04-04T18:45:45Z,MERGED,True,123,101,9,https://github.com/sbc100,[wasmlink] Relocate indexes in the gererated reloc section,2,[],https://github.com/WebAssembly/wabt/pull/388,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/388#issuecomment-291569575,"We recently switched to embedding the index of the relocation
within the relocation entry itself but overlooked the fact
that this needs to be updated when writing out the linked
reloc section.","There may be other places, yes.  I suggest we look into doing more execution tests on the resulting binaries, and fixing issues as we find time.  As an incremental improvement I think this change stands alone quite nicely though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,388,2017-04-04T02:26:34Z,2017-04-04T18:45:42Z,2017-04-04T18:45:45Z,MERGED,True,123,101,9,https://github.com/sbc100,[wasmlink] Relocate indexes in the gererated reloc section,2,[],https://github.com/WebAssembly/wabt/pull/388,https://github.com/pipcet,4,https://github.com/WebAssembly/wabt/pull/388#issuecomment-291571619,"We recently switched to embedding the index of the relocation
within the relocation entry itself but overlooked the fact
that this needs to be updated when writing out the linked
reloc section.","I agree! I'm not any kind of official reviewer, obviously, but I've taken the time to look at the test output in detail (and added some extra debugging code at https://github.com/WebAssembly/wabt/compare/master...pipcet:extra-debugging?expand=1 which might or might not be useful for doing that), and it all looks good to me, as does the code except for the (very) minor nits.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,388,2017-04-04T02:26:34Z,2017-04-04T18:45:42Z,2017-04-04T18:45:45Z,MERGED,True,123,101,9,https://github.com/sbc100,[wasmlink] Relocate indexes in the gererated reloc section,2,[],https://github.com/WebAssembly/wabt/pull/388,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/388#issuecomment-291574115,"We recently switched to embedding the index of the relocation
within the relocation entry itself but overlooked the fact
that this needs to be updated when writing out the linked
reloc section.",I totally appreciate your feedback/reviews!   I added support for another reloc type and a fatal error on any other time (types we don't currently support/test).  Thanks for taking the time to look at this stuff in detail.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,390,2017-04-04T21:18:33Z,2017-04-05T00:00:32Z,2017-04-15T04:01:27Z,MERGED,True,25,2,2,https://github.com/binji,Fix type-checking bug w/ br_table and loop,1,[],https://github.com/WebAssembly/wabt/pull/390,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/390,"If a loop has a signature, it is the signature for fallthrough, not for
the branch target. So a br_table to the loop label should always be
void.
This fixes issue #389.","If a loop has a signature, it is the signature for fallthrough, not for
the branch target. So a br_table to the loop label should always be
void.
This fixes issue #389.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,391,2017-04-04T23:22:32Z,2017-04-05T18:28:36Z,2017-04-05T18:28:36Z,MERGED,True,88,88,85,https://github.com/pipcet,Use 8 hex digits for wasm version rather than 6,4,[],https://github.com/WebAssembly/wabt/pull/391,https://github.com/pipcet,1,https://github.com/WebAssembly/wabt/pull/391,"Very definitely a cosmetic issue, but I think 0x00000001 or 0x1 are both preferrable to 0x000001.","Very definitely a cosmetic issue, but I think 0x00000001 or 0x1 are both preferrable to 0x000001.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,391,2017-04-04T23:22:32Z,2017-04-05T18:28:36Z,2017-04-05T18:28:36Z,MERGED,True,88,88,85,https://github.com/pipcet,Use 8 hex digits for wasm version rather than 6,4,[],https://github.com/WebAssembly/wabt/pull/391,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/391#issuecomment-291683805,"Very definitely a cosmetic issue, but I think 0x00000001 or 0x1 are both preferrable to 0x000001.","I'm fine with it either way. @sbc100, opinion?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,391,2017-04-04T23:22:32Z,2017-04-05T18:28:36Z,2017-04-05T18:28:36Z,MERGED,True,88,88,85,https://github.com/pipcet,Use 8 hex digits for wasm version rather than 6,4,[],https://github.com/WebAssembly/wabt/pull/391,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/391#issuecomment-291923984,"Very definitely a cosmetic issue, but I think 0x00000001 or 0x1 are both preferrable to 0x000001.","Not a big deal I guess, but perhaps just 0x1 is better.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,391,2017-04-04T23:22:32Z,2017-04-05T18:28:36Z,2017-04-05T18:28:36Z,MERGED,True,88,88,85,https://github.com/pipcet,Use 8 hex digits for wasm version rather than 6,4,[],https://github.com/WebAssembly/wabt/pull/391,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/391#issuecomment-291930222,"Very definitely a cosmetic issue, but I think 0x00000001 or 0x1 are both preferrable to 0x000001.","Agreed, do you mind switching it to just 0x1, @pipcet?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,391,2017-04-04T23:22:32Z,2017-04-05T18:28:36Z,2017-04-05T18:28:36Z,MERGED,True,88,88,85,https://github.com/pipcet,Use 8 hex digits for wasm version rather than 6,4,[],https://github.com/WebAssembly/wabt/pull/391,https://github.com/pipcet,5,https://github.com/WebAssembly/wabt/pull/391#issuecomment-291931376,"Very definitely a cosmetic issue, but I think 0x00000001 or 0x1 are both preferrable to 0x000001.","Of course not, I was just being lazy and waiting for #395 to land first :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,392,2017-04-05T00:15:29Z,2017-04-06T19:22:11Z,2017-04-06T19:22:13Z,MERGED,True,56,21,21,https://github.com/binji,Update testsuite to spec f1b89dfaf379060c7e35eb90b7daeb14d4ade3f7,2,[],https://github.com/WebAssembly/wabt/pull/392,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/392,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,392,2017-04-05T00:15:29Z,2017-04-06T19:22:11Z,2017-04-06T19:22:13Z,MERGED,True,56,21,21,https://github.com/binji,Update testsuite to spec f1b89dfaf379060c7e35eb90b7daeb14d4ade3f7,2,[],https://github.com/WebAssembly/wabt/pull/392,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/392#issuecomment-291929563,,"Fails on Windows x64, seems to be the truncation+nearest tests w/ assert_return_arithmetic_nan:
(assert_return_arithmetic_nan (invoke ""trunc"" (f32.const -nan:0x200000)))
(assert_return_arithmetic_nan (invoke ""trunc"" (f32.const nan:0x200000)))
(assert_return_arithmetic_nan (invoke ""nearest"" (f32.const -nan:0x200000)))
(assert_return_arithmetic_nan (invoke ""nearest"" (f32.const nan:0x200000)))
(assert_return_arithmetic_nan (invoke ""trunc"" (f64.const -nan:0x4000000000000)))
(assert_return_arithmetic_nan (invoke ""trunc"" (f64.const nan:0x4000000000000)))
(assert_return_arithmetic_nan (invoke ""nearest"" (f64.const -nan:0x4000000000000)))
(assert_return_arithmetic_nan (invoke ""nearest"" (f64.const nan:0x4000000000000)))",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,392,2017-04-05T00:15:29Z,2017-04-06T19:22:11Z,2017-04-06T19:22:13Z,MERGED,True,56,21,21,https://github.com/binji,Update testsuite to spec f1b89dfaf379060c7e35eb90b7daeb14d4ade3f7,2,[],https://github.com/WebAssembly/wabt/pull/392,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/392#issuecomment-292015381,,Fixed; seems that win64 truncf/nearbyintf don't set the quiet bit.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,393,2017-04-05T00:17:33Z,2017-04-05T18:29:12Z,2017-04-05T18:29:16Z,CLOSED,False,2,0,1,https://github.com/sbc100,[wasmdump] Don't print opcodes unless we are disassembling,1,[],https://github.com/WebAssembly/wabt/pull/393,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/393,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,393,2017-04-05T00:17:33Z,2017-04-05T18:29:12Z,2017-04-05T18:29:16Z,CLOSED,False,2,0,1,https://github.com/sbc100,[wasmdump] Don't print opcodes unless we are disassembling,1,[],https://github.com/WebAssembly/wabt/pull/393,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/393#issuecomment-291687108,,"lgtm, tests? :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,393,2017-04-05T00:17:33Z,2017-04-05T18:29:12Z,2017-04-05T18:29:16Z,CLOSED,False,2,0,1,https://github.com/sbc100,[wasmdump] Don't print opcodes unless we are disassembling,1,[],https://github.com/WebAssembly/wabt/pull/393,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/393#issuecomment-291930070,,Removing in favor of #395?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,394,2017-04-05T01:03:00Z,2017-04-05T01:19:13Z,2017-04-15T04:00:40Z,MERGED,True,3,1,1,https://github.com/dschuff,Disable 3 warnings on MSVC and build with warnings as errors.,2,[],https://github.com/WebAssembly/wabt/pull/394,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/394,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,395,2017-04-05T01:19:03Z,2017-04-05T21:59:08Z,2017-04-05T21:59:12Z,MERGED,True,312,307,3,https://github.com/sbc100,Refactor wasmdump so that the disassembly pass has its own reader class,6,[],https://github.com/WebAssembly/wabt/pull/395,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/395,"Its almost a pure refactor of the code in binary-reader-objdump.cc.  The one exception is the
change in the way the header printing is done.","Its almost a pure refactor of the code in binary-reader-objdump.cc.  The one exception is the
change in the way the header printing is done.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,396,2017-04-05T18:26:40Z,2017-04-05T20:57:28Z,2017-04-05T20:57:34Z,MERGED,True,0,5,1,https://github.com/jgravelle-google,Remove waterfall's known failures,1,[],https://github.com/WebAssembly/wabt/pull/396,https://github.com/jgravelle-google,1,https://github.com/WebAssembly/wabt/pull/396,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,397,2017-04-08T10:21:38Z,2017-04-08T19:02:23Z,2017-04-09T03:17:17Z,MERGED,True,3,3,1,https://github.com/Wallbraker,"Opcodes i64.clz, i64.ctz and i64.popcnt only have one argument",1,[],https://github.com/WebAssembly/wabt/pull/397,https://github.com/Wallbraker,1,https://github.com/WebAssembly/wabt/pull/397,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,397,2017-04-08T10:21:38Z,2017-04-08T19:02:23Z,2017-04-09T03:17:17Z,MERGED,True,3,3,1,https://github.com/Wallbraker,"Opcodes i64.clz, i64.ctz and i64.popcnt only have one argument",1,[],https://github.com/WebAssembly/wabt/pull/397,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/397#issuecomment-292738653,,"Good catch, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,397,2017-04-08T10:21:38Z,2017-04-08T19:02:23Z,2017-04-09T03:17:17Z,MERGED,True,3,3,1,https://github.com/Wallbraker,"Opcodes i64.clz, i64.ctz and i64.popcnt only have one argument",1,[],https://github.com/WebAssembly/wabt/pull/397,https://github.com/pipcet,3,https://github.com/WebAssembly/wabt/pull/397#issuecomment-292759547,,"Is the code correct for f32.nearest and similar floating-point opcodes with a single argument? Right now it's:
  V(F32, F32, F32, 0, 0x8b, F32Abs, ""f32.abs"")                        \
  V(F32, F32, F32, 0, 0x8c, F32Neg, ""f32.neg"")                        \
  V(F32, F32, F32, 0, 0x8d, F32Ceil, ""f32.ceil"")                      \
  V(F32, F32, F32, 0, 0x8e, F32Floor, ""f32.floor"")                    \
  V(F32, F32, F32, 0, 0x8f, F32Trunc, ""f32.trunc"")                    \
  V(F32, F32, F32, 0, 0x90, F32Nearest, ""f32.nearest"")                \
  V(F32, F32, F32, 0, 0x91, F32Sqrt, ""f32.sqrt"")                      \",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,397,2017-04-08T10:21:38Z,2017-04-08T19:02:23Z,2017-04-09T03:17:17Z,MERGED,True,3,3,1,https://github.com/Wallbraker,"Opcodes i64.clz, i64.ctz and i64.popcnt only have one argument",1,[],https://github.com/WebAssembly/wabt/pull/397,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/397#issuecomment-292760891,,"Yeah, it looks like those are incorrect too. It isn't causing any bugs currently because any code that uses this macro already knows to ignore that argument. But it's good to fix.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,398,2017-04-13T05:27:24Z,2017-04-13T06:24:02Z,2017-04-13T06:24:07Z,MERGED,True,1,1,1,https://github.com/jfbastien,Is English no good,1,[],https://github.com/WebAssembly/wabt/pull/398,https://github.com/jfbastien,1,https://github.com/WebAssembly/wabt/pull/398,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,398,2017-04-13T05:27:24Z,2017-04-13T06:24:02Z,2017-04-13T06:24:07Z,MERGED,True,1,1,1,https://github.com/jfbastien,Is English no good,1,[],https://github.com/WebAssembly/wabt/pull/398,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/398#issuecomment-293796036,,"Sweet, thanks.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,399,2017-04-14T01:25:16Z,2017-04-16T23:07:04Z,2017-04-17T18:01:36Z,MERGED,True,715,810,25,https://github.com/binji,Refactor Stream/Writer; write as C++,5,[],https://github.com/WebAssembly/wabt/pull/399,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/399,"I also took the opportunity to make classes for
ASTWriter/BinaryWriter/BinaryWriterSpec.","I also took the opportunity to make classes for
ASTWriter/BinaryWriter/BinaryWriterSpec.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,399,2017-04-14T01:25:16Z,2017-04-16T23:07:04Z,2017-04-17T18:01:36Z,MERGED,True,715,810,25,https://github.com/binji,Refactor Stream/Writer; write as C++,5,[],https://github.com/WebAssembly/wabt/pull/399,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/399#issuecomment-294062676,"I also took the opportunity to make classes for
ASTWriter/BinaryWriter/BinaryWriterSpec.","Hm, probably should have left the other class refactors for another PR, I'll revert those first.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,399,2017-04-14T01:25:16Z,2017-04-16T23:07:04Z,2017-04-17T18:01:36Z,MERGED,True,715,810,25,https://github.com/binji,Refactor Stream/Writer; write as C++,5,[],https://github.com/WebAssembly/wabt/pull/399,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/399#issuecomment-294065661,"I also took the opportunity to make classes for
ASTWriter/BinaryWriter/BinaryWriterSpec.","OK, that's a bit simpler.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,399,2017-04-14T01:25:16Z,2017-04-16T23:07:04Z,2017-04-17T18:01:36Z,MERGED,True,715,810,25,https://github.com/binji,Refactor Stream/Writer; write as C++,5,[],https://github.com/WebAssembly/wabt/pull/399,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/399#issuecomment-294379388,"I also took the opportunity to make classes for
ASTWriter/BinaryWriter/BinaryWriterSpec.","Annoyingly, still don't have appveyor + travis builds. I've tested locally and everything seems OK. Guess I'll resolve any issues that come up later.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,399,2017-04-14T01:25:16Z,2017-04-16T23:07:04Z,2017-04-17T18:01:36Z,MERGED,True,715,810,25,https://github.com/binji,Refactor Stream/Writer; write as C++,5,[],https://github.com/WebAssembly/wabt/pull/399,https://github.com/dschuff,5,https://github.com/WebAssembly/wabt/pull/399#issuecomment-294533871,"I also took the opportunity to make classes for
ASTWriter/BinaryWriter/BinaryWriterSpec.",The wabt github services seem to be up again (e.g. https://travis-ci.org/WebAssembly/wabt/builds/222855450). Still can't get Binaryen to work though...,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,399,2017-04-14T01:25:16Z,2017-04-16T23:07:04Z,2017-04-17T18:01:36Z,MERGED,True,715,810,25,https://github.com/binji,Refactor Stream/Writer; write as C++,5,[],https://github.com/WebAssembly/wabt/pull/399,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/399#issuecomment-294537729,"I also took the opportunity to make classes for
ASTWriter/BinaryWriter/BinaryWriterSpec.",Looks like it's working to me: https://travis-ci.org/WebAssembly/binaryen,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,399,2017-04-14T01:25:16Z,2017-04-16T23:07:04Z,2017-04-17T18:01:36Z,MERGED,True,715,810,25,https://github.com/binji,Refactor Stream/Writer; write as C++,5,[],https://github.com/WebAssembly/wabt/pull/399,https://github.com/dschuff,7,https://github.com/WebAssembly/wabt/pull/399#issuecomment-294544318,"I also took the opportunity to make classes for
ASTWriter/BinaryWriter/BinaryWriterSpec.",Yeah I think it just came back online in the last half hour or so.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,400,2017-04-15T01:45:13Z,2017-04-18T21:52:02Z,2017-04-18T21:52:07Z,MERGED,True,96,74,4,https://github.com/binji,Define the implicit func type before the function,1,[],https://github.com/WebAssembly/wabt/pull/400,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/400,"When a function is defined without an explicit type, it will first
search the already defined (implicitly or otherwise) func types. If one
is found, it will use it. Otherwise it will define its own and use that.
The code previously would define this new type after the function, which
works but doesn't roundtrip properly because it ends up defining the
same func type twice.","When a function is defined without an explicit type, it will first
search the already defined (implicitly or otherwise) func types. If one
is found, it will use it. Otherwise it will define its own and use that.
The code previously would define this new type after the function, which
works but doesn't roundtrip properly because it ends up defining the
same func type twice.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,400,2017-04-15T01:45:13Z,2017-04-18T21:52:02Z,2017-04-18T21:52:07Z,MERGED,True,96,74,4,https://github.com/binji,Define the implicit func type before the function,1,[],https://github.com/WebAssembly/wabt/pull/400,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/400#issuecomment-294994683,"When a function is defined without an explicit type, it will first
search the already defined (implicitly or otherwise) func types. If one
is found, it will use it. Otherwise it will define its own and use that.
The code previously would define this new type after the function, which
works but doesn't roundtrip properly because it ends up defining the
same func type twice.","Looks like the only failures here are from the appveyor build which are fixed on master, so landing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,401,2017-04-17T17:15:17Z,2017-04-18T17:22:56Z,2017-04-18T17:22:58Z,MERGED,True,10,3,1,https://github.com/binji,Fix uninitialized value in binary-writer-spec,1,[],https://github.com/WebAssembly/wabt/pull/401,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/401,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,401,2017-04-17T17:15:17Z,2017-04-18T17:22:56Z,2017-04-18T17:22:58Z,MERGED,True,10,3,1,https://github.com/binji,Fix uninitialized value in binary-writer-spec,1,[],https://github.com/WebAssembly/wabt/pull/401,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/401#issuecomment-294917235,,"Hm, I'm concerned about the failures on AppVeyor, but I'm guessing those were already there. I think this is a good change for now and I'll investigate the win64 failures stuff in the next PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,402,2017-04-18T19:58:13Z,2017-04-18T20:45:49Z,2017-04-18T20:45:51Z,MERGED,True,8,4,2,https://github.com/binji,Fix appveyor build after a4751fe7,1,[],https://github.com/WebAssembly/wabt/pull/402,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/402,"The MSVC vector debug checks don't like accessing the address of the end
of the vector, even if you never read the value -- we were doing this
when writing a size of 0 in MemoryWriter::{Write,Move}Data.
Also fixed some CMake warnings.","The MSVC vector debug checks don't like accessing the address of the end
of the vector, even if you never read the value -- we were doing this
when writing a size of 0 in MemoryWriter::{Write,Move}Data.
Also fixed some CMake warnings.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,403,2017-04-20T22:11:09Z,2017-04-24T22:18:57Z,2017-04-24T22:18:59Z,MERGED,True,885,745,24,https://github.com/binji,"Change {Source,Binary}ErrorHandler to C++",2,[],https://github.com/WebAssembly/wabt/pull/403,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/403,"Added some new classes:

BinaryErrorHandler: abstract base class
BinaryErrorHandlerFile: writes errors to a FILE*
SourceErrorHandler: abstract base class
SourceErrorHandlerNop: eats all errors
SourceErrorHandlerFile: writes errors to a FILE*

There are some specific ones as well:

BinaryErrorHandlerAssert: used in wasm-interp to handle writing out a
custom header with assertion ""failures""; i.e. places where the error
handler should fire.
BinaryErrorHandlerModule: used when parsing a .wast, but there's an
embedded binary file.","Added some new classes:

BinaryErrorHandler: abstract base class
BinaryErrorHandlerFile: writes errors to a FILE*
SourceErrorHandler: abstract base class
SourceErrorHandlerNop: eats all errors
SourceErrorHandlerFile: writes errors to a FILE*

There are some specific ones as well:

BinaryErrorHandlerAssert: used in wasm-interp to handle writing out a
custom header with assertion ""failures""; i.e. places where the error
handler should fire.
BinaryErrorHandlerModule: used when parsing a .wast, but there's an
embedded binary file.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,404,2017-04-24T18:37:35Z,2017-04-24T20:29:26Z,2017-04-24T20:29:29Z,MERGED,True,1058,1005,3,https://github.com/binji,"Make ASTWriter, BinaryWriter, BinaryWriterSpec C++ classes",2,[],https://github.com/WebAssembly/wabt/pull/404,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/404,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,405,2017-04-25T00:24:18Z,2017-04-25T17:13:50Z,2017-04-25T17:13:52Z,MERGED,True,112,103,1,https://github.com/sbc100,Split read_custom_section smaller functions,1,[],https://github.com/WebAssembly/wabt/pull/405,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/405,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,406,2017-04-25T21:48:54Z,2017-04-26T00:11:43Z,2017-04-26T00:37:08Z,MERGED,True,78,66,17,https://github.com/sbc100,Improve wasmdump output for relocations and data segments,2,[],https://github.com/WebAssembly/wabt/pull/406,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/406,"For data segments, print the file offsets so they match
the file offsets shown when dumping relocations.
For relocations, only show the addend when one is present
and correctly display negative addends in the same way that
objdump does (e.g. symbol_foo-0x10 and symbol_foo+0x10)","For data segments, print the file offsets so they match
the file offsets shown when dumping relocations.
For relocations, only show the addend when one is present
and correctly display negative addends in the same way that
objdump does (e.g. symbol_foo-0x10 and symbol_foo+0x10)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,407,2017-04-26T00:01:57Z,2017-04-26T05:09:57Z,2017-04-26T05:09:59Z,MERGED,True,360,1276,10,https://github.com/binji,Fix emscripten demo and libwabt.js,2,[],https://github.com/WebAssembly/wabt/pull/407,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/407,"This removes the more complicated emscripten wrapper we used before, in
favor of something that is much simpler.


Remove the onInputKey handling in the demo so it doesn't auto-indent
(it was broken now that we have the flat syntax)


Simplify emscripten-helpers to provide very simple C-function wrappers
around the wast2wasm API:

wabt_parse_ast
wabt_resolve_names_script
wabt_validate_script
wabt_write_binary_module



The tricky part is that some functions return multiple values, so those are returned as structs as well:

WabtParseAstResult
WabtWriteBinaryModuleResult","This removes the more complicated emscripten wrapper we used before, in
favor of something that is much simpler.


Remove the onInputKey handling in the demo so it doesn't auto-indent
(it was broken now that we have the flat syntax)


Simplify emscripten-helpers to provide very simple C-function wrappers
around the wast2wasm API:

wabt_parse_ast
wabt_resolve_names_script
wabt_validate_script
wabt_write_binary_module



The tricky part is that some functions return multiple values, so those are returned as structs as well:

WabtParseAstResult
WabtWriteBinaryModuleResult",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,407,2017-04-26T00:01:57Z,2017-04-26T05:09:57Z,2017-04-26T05:09:59Z,MERGED,True,360,1276,10,https://github.com/binji,Fix emscripten demo and libwabt.js,2,[],https://github.com/WebAssembly/wabt/pull/407,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/407#issuecomment-297200932,"This removes the more complicated emscripten wrapper we used before, in
favor of something that is much simpler.


Remove the onInputKey handling in the demo so it doesn't auto-indent
(it was broken now that we have the flat syntax)


Simplify emscripten-helpers to provide very simple C-function wrappers
around the wast2wasm API:

wabt_parse_ast
wabt_resolve_names_script
wabt_validate_script
wabt_write_binary_module



The tricky part is that some functions return multiple values, so those are returned as structs as well:

WabtParseAstResult
WabtWriteBinaryModuleResult","Regardless of memory init, we should switch to asynchronous loading so we can use wasm :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,407,2017-04-26T00:01:57Z,2017-04-26T05:09:57Z,2017-04-26T05:09:59Z,MERGED,True,360,1276,10,https://github.com/binji,Fix emscripten demo and libwabt.js,2,[],https://github.com/WebAssembly/wabt/pull/407,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/407#issuecomment-297201017,"This removes the more complicated emscripten wrapper we used before, in
favor of something that is much simpler.


Remove the onInputKey handling in the demo so it doesn't auto-indent
(it was broken now that we have the flat syntax)


Simplify emscripten-helpers to provide very simple C-function wrappers
around the wast2wasm API:

wabt_parse_ast
wabt_resolve_names_script
wabt_validate_script
wabt_write_binary_module



The tricky part is that some functions return multiple values, so those are returned as structs as well:

WabtParseAstResult
WabtWriteBinaryModuleResult","Yeah, I guess so.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,407,2017-04-26T00:01:57Z,2017-04-26T05:09:57Z,2017-04-26T05:09:59Z,MERGED,True,360,1276,10,https://github.com/binji,Fix emscripten demo and libwabt.js,2,[],https://github.com/WebAssembly/wabt/pull/407,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/407#issuecomment-297207851,"This removes the more complicated emscripten wrapper we used before, in
favor of something that is much simpler.


Remove the onInputKey handling in the demo so it doesn't auto-indent
(it was broken now that we have the flat syntax)


Simplify emscripten-helpers to provide very simple C-function wrappers
around the wast2wasm API:

wabt_parse_ast
wabt_resolve_names_script
wabt_validate_script
wabt_write_binary_module



The tricky part is that some functions return multiple values, so those are returned as structs as well:

WabtParseAstResult
WabtWriteBinaryModuleResult",Added back in wabt.ready as a Promise (that is always resolved).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,409,2017-04-26T05:22:53Z,2017-04-26T05:23:01Z,2017-04-26T05:23:04Z,MERGED,True,1,1,1,https://github.com/binji,Update the online demo link in README.md,1,[],https://github.com/WebAssembly/wabt/pull/409,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/409,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,410,2017-04-26T19:25:40Z,2017-04-26T20:32:41Z,2017-04-26T20:32:44Z,MERGED,True,40,28,6,https://github.com/binji,Update the testsuite,1,[],https://github.com/WebAssembly/wabt/pull/410,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/410,"This exposed a small bug where an empty init expr would have type 0,
which would print as ""(null)"" since it didn't exist.","This exposed a small bug where an empty init expr would have type 0,
which would print as ""(null)"" since it didn't exist.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,411,2017-04-26T19:31:01Z,2017-05-03T22:00:08Z,2017-05-03T22:00:12Z,MERGED,True,81,36,5,https://github.com/sbc100,wasmdump: support multiple input files,3,[],https://github.com/WebAssembly/wabt/pull/411,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/411,"This mimics how objdump behaves. Also makes the code more
readable.
Looking into adding a test for this but looks tricky with the current framework.","This mimics how objdump behaves. Also makes the code more
readable.
Looking into adding a test for this but looks tricky with the current framework.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,411,2017-04-26T19:31:01Z,2017-05-03T22:00:08Z,2017-05-03T22:00:12Z,MERGED,True,81,36,5,https://github.com/sbc100,wasmdump: support multiple input files,3,[],https://github.com/WebAssembly/wabt/pull/411,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/411#issuecomment-297517835,"This mimics how objdump behaves. Also makes the code more
readable.
Looking into adding a test for this but looks tricky with the current framework.",Added a test,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,411,2017-04-26T19:31:01Z,2017-05-03T22:00:08Z,2017-05-03T22:00:12Z,MERGED,True,81,36,5,https://github.com/sbc100,wasmdump: support multiple input files,3,[],https://github.com/WebAssembly/wabt/pull/411,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/411#issuecomment-297529710,"This mimics how objdump behaves. Also makes the code more
readable.
Looking into adding a test for this but looks tricky with the current framework.",Does the test change look good to you?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,411,2017-04-26T19:31:01Z,2017-05-03T22:00:08Z,2017-05-03T22:00:12Z,MERGED,True,81,36,5,https://github.com/sbc100,wasmdump: support multiple input files,3,[],https://github.com/WebAssembly/wabt/pull/411,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/411#issuecomment-297530556,"This mimics how objdump behaves. Also makes the code more
readable.
Looking into adding a test for this but looks tricky with the current framework.",I don't see a test...?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,411,2017-04-26T19:31:01Z,2017-05-03T22:00:08Z,2017-05-03T22:00:12Z,MERGED,True,81,36,5,https://github.com/sbc100,wasmdump: support multiple input files,3,[],https://github.com/WebAssembly/wabt/pull/411,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/411#issuecomment-297531384,"This mimics how objdump behaves. Also makes the code more
readable.
Looking into adding a test for this but looks tricky with the current framework.","Oops, forgot to add the new test file.  Also i changed test/run-wasmdump.py so that it runs wasmdump in a single invocation rather than once per file so we get implicit coverage already.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,411,2017-04-26T19:31:01Z,2017-05-03T22:00:08Z,2017-05-03T22:00:12Z,MERGED,True,81,36,5,https://github.com/sbc100,wasmdump: support multiple input files,3,[],https://github.com/WebAssembly/wabt/pull/411,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/411#issuecomment-297531420,"This mimics how objdump behaves. Also makes the code more
readable.
Looking into adding a test for this but looks tricky with the current framework.","Cool, looks good.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,412,2017-04-27T02:21:35Z,2017-04-27T23:34:08Z,2017-04-27T23:34:10Z,MERGED,True,401,306,13,https://github.com/binji,"Move Opcode/OpcodeInfo to opcode.{c,h}",3,[],https://github.com/WebAssembly/wabt/pull/412,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/412,"I forgot to set s_initialized to true in init_opcode_info, which meant
that it was really slow (on my laptop, parsing AngryBots.wast, 75% of
the time was spent in init_opcode_info). Whoops.
I could have fixed it by just setting s_initialized to true, but instead
I just filled in the gaps with operations called ""Invalid_0x16"" etc.
I also took this as an opportunity to move the opcode stuff into its own
files.","I forgot to set s_initialized to true in init_opcode_info, which meant
that it was really slow (on my laptop, parsing AngryBots.wast, 75% of
the time was spent in init_opcode_info). Whoops.
I could have fixed it by just setting s_initialized to true, but instead
I just filled in the gaps with operations called ""Invalid_0x16"" etc.
I also took this as an opportunity to move the opcode stuff into its own
files.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,412,2017-04-27T02:21:35Z,2017-04-27T23:34:08Z,2017-04-27T23:34:10Z,MERGED,True,401,306,13,https://github.com/binji,"Move Opcode/OpcodeInfo to opcode.{c,h}",3,[],https://github.com/WebAssembly/wabt/pull/412,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/412#issuecomment-297846979,"I forgot to set s_initialized to true in init_opcode_info, which meant
that it was really slow (on my laptop, parsing AngryBots.wast, 75% of
the time was spent in init_opcode_info). Whoops.
I could have fixed it by just setting s_initialized to true, but instead
I just filled in the gaps with operations called ""Invalid_0x16"" etc.
I also took this as an opportunity to move the opcode stuff into its own
files.","Updated to use opcode.def.h, PTAL",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,413,2017-05-02T22:37:28Z,2017-05-04T23:31:47Z,2017-05-04T23:31:49Z,MERGED,True,1551,1557,39,https://github.com/binji,Rename all occurences of AST,1,[],https://github.com/WebAssembly/wabt/pull/413,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/413,"ast.{cc,h} => ir.{cc,h}
binary-reader-ast.{cc,h} => binary-reader-ir.{cc,h}
ast-writer.{cc,h} => wat-writer.{cc,h}

Everything else changes ast => wast.
When deciding between wast vs. wat, the wat format should only allow for
a single module, without assertions.","ast.{cc,h} => ir.{cc,h}
binary-reader-ast.{cc,h} => binary-reader-ir.{cc,h}
ast-writer.{cc,h} => wat-writer.{cc,h}

Everything else changes ast => wast.
When deciding between wast vs. wat, the wat format should only allow for
a single module, without assertions.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,413,2017-05-02T22:37:28Z,2017-05-04T23:31:47Z,2017-05-04T23:31:49Z,MERGED,True,1551,1557,39,https://github.com/binji,Rename all occurences of AST,1,[],https://github.com/WebAssembly/wabt/pull/413,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/413#issuecomment-299331705,"ast.{cc,h} => ir.{cc,h}
binary-reader-ast.{cc,h} => binary-reader-ir.{cc,h}
ast-writer.{cc,h} => wat-writer.{cc,h}

Everything else changes ast => wast.
When deciding between wast vs. wat, the wat format should only allow for
a single module, without assertions.","This is a big change, but there's not really anything interesting going on aside from the name choices.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,414,2017-05-04T15:04:57Z,2017-05-04T22:55:09Z,2017-05-04T22:55:09Z,MERGED,True,2,0,1,https://github.com/cowboyd,note CMake version dependency on OSX,2,[],https://github.com/WebAssembly/wabt/pull/414,https://github.com/cowboyd,1,https://github.com/WebAssembly/wabt/pull/414,"With CMake version <= 3.1 on OSX you will see errors like the following because of https://cmake.org/Bug/view.php?id=15355
Make Error in CMakeLists.txt:
  Target ""hexfloat_test"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wabt-unittests"" requires the language dialect ""CXX11"" (with
  compiler extensions), but CMake does not know the compile flags to use to
  enable it.


CMake Error in CMakeLists.txt:
  Target ""wasm-interp"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasm-link"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasm2wast"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasmdump"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasmopcodecnt"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wast-desugar"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wast2wasm"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.","With CMake version <= 3.1 on OSX you will see errors like the following because of https://cmake.org/Bug/view.php?id=15355
Make Error in CMakeLists.txt:
  Target ""hexfloat_test"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wabt-unittests"" requires the language dialect ""CXX11"" (with
  compiler extensions), but CMake does not know the compile flags to use to
  enable it.


CMake Error in CMakeLists.txt:
  Target ""wasm-interp"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasm-link"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasm2wast"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasmdump"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasmopcodecnt"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wast-desugar"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wast2wasm"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,414,2017-05-04T15:04:57Z,2017-05-04T22:55:09Z,2017-05-04T22:55:09Z,MERGED,True,2,0,1,https://github.com/cowboyd,note CMake version dependency on OSX,2,[],https://github.com/WebAssembly/wabt/pull/414,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/414#issuecomment-299275348,"With CMake version <= 3.1 on OSX you will see errors like the following because of https://cmake.org/Bug/view.php?id=15355
Make Error in CMakeLists.txt:
  Target ""hexfloat_test"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wabt-unittests"" requires the language dialect ""CXX11"" (with
  compiler extensions), but CMake does not know the compile flags to use to
  enable it.


CMake Error in CMakeLists.txt:
  Target ""wasm-interp"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasm-link"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasm2wast"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasmdump"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wasmopcodecnt"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wast-desugar"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.


CMake Error in CMakeLists.txt:
  Target ""wast2wasm"" requires the language dialect ""CXX11"" (with compiler
  extensions), but CMake does not know the compile flags to use to enable it.","Thanks! One question about the version number, otherwise lgtm",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,415,2017-05-05T06:41:25Z,2017-05-05T07:02:07Z,2017-05-05T07:02:09Z,MERGED,True,3155,3305,6,https://github.com/binji,Remove unused terminals from lexer,1,[],https://github.com/WebAssembly/wabt/pull/415,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/415,"There were some old ones still around, like if_else and call_import.","There were some old ones still around, like if_else and call_import.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/416,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.","The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/416#issuecomment-299992790,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.",Do we really need to add the try/catch stuff?  Isn't allocation failure basically a crash?  Does the fuzzer really cause alloc failures?  How?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/416#issuecomment-299995188,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.","Yes, we don't disable exceptions (though maybe we should), so allocation failure throws bad_alloc. And yes, the fuzzer causes allocation failures because it runs with a very small ulimit memory size. If you don't catch the allocation failure it just terminates which looks like a crash.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/416#issuecomment-299995535,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.","Hm, looks like -fno-exceptions will just turn a throw into an abort anyway, which won't really improve matters.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/416#issuecomment-300007053,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.",I think we should build with -fno-exceptions like chromium (and v8?).  How do other projects that use this flag deal with this issue?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/416#issuecomment-300009197,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.","I did a quick search to see if anybody does this, but didn't find anything. Looks like the nicest way would be to conditionally compile in the use of exceptions for afl-fuzz builds.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/416#issuecomment-300009949,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.",If there is no simpler way then I guess thats fine.  In any case if you are going to add try/catch around the body of the main functions I think you should split out the try body to avoid extra nesting and make the try catch statements close together visually.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/416#issuecomment-300628450,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.","Added WITH_EXCEPTIONS option, disabled by default.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/binji,9,https://github.com/WebAssembly/wabt/pull/416#issuecomment-300917750,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.",Any further comments on this one?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,416,2017-05-05T18:06:02Z,2017-05-12T23:34:55Z,2017-05-12T23:34:57Z,MERGED,True,328,196,17,https://github.com/binji,"Add fuzzing helper scripts, fix fuzzing bugs",2,[],https://github.com/WebAssembly/wabt/pull/416,https://github.com/binji,10,https://github.com/WebAssembly/wabt/pull/416#issuecomment-301208179,"The fuzzing dictionary was old, so I updated it. Also, I've added some
simple fuzzing shell scripts that make it a bit easier to run.
Bug fixes:

Validate function index in local name section before calling callback.
Fix invalid assert in parse_{float,double}_infinity, which assumed
that ""infinity"" is required (it could be ""inf"").
Bail out of resolve local names if there is no current function (e.g.
if attempting to resolve names in an elem offset expression).
Catch bad_alloc in wast2wasm and wasm2wast. Without this, afl-fuzz
will see allocation failure as a crash.","Landing, assuming there are no further issues.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,418,2017-05-07T10:19:01Z,2017-05-09T00:46:47Z,2017-05-09T00:48:32Z,MERGED,True,25,25,1,https://github.com/Alhadis,Add highlights to readme code-blocks,2,[],https://github.com/WebAssembly/wabt/pull/418,https://github.com/Alhadis,1,https://github.com/WebAssembly/wabt/pull/418,Nothing groundbreaking going on here. This PR simply improves the readability of the readme's code samples by colouring comments and output lines differently.,Nothing groundbreaking going on here. This PR simply improves the readability of the readme's code samples by colouring comments and output lines differently.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,418,2017-05-07T10:19:01Z,2017-05-09T00:46:47Z,2017-05-09T00:48:32Z,MERGED,True,25,25,1,https://github.com/Alhadis,Add highlights to readme code-blocks,2,[],https://github.com/WebAssembly/wabt/pull/418,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/418#issuecomment-299721558,Nothing groundbreaking going on here. This PR simply improves the readability of the readme's code samples by colouring comments and output lines differently.,Looks pretty good. What's the difference between sh and console? Have you joined the community group?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,418,2017-05-07T10:19:01Z,2017-05-09T00:46:47Z,2017-05-09T00:48:32Z,MERGED,True,25,25,1,https://github.com/Alhadis,Add highlights to readme code-blocks,2,[],https://github.com/WebAssembly/wabt/pull/418,https://github.com/Alhadis,3,https://github.com/WebAssembly/wabt/pull/418#issuecomment-299730584,Nothing groundbreaking going on here. This PR simply improves the readability of the readme's code samples by colouring comments and output lines differently.,"The language package which GItHub uses to provide shell highlighting has two different forms:

sh: For highlighting shell-script source code
console: For highlighting code samples in readmes (such as this one)

The latter will colour differently every line which doesn't start with a prompt symbol. It also won't highlight comments (since some shells use # as a prompt string).
Hope that makes sense.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,418,2017-05-07T10:19:01Z,2017-05-09T00:46:47Z,2017-05-09T00:48:32Z,MERGED,True,25,25,1,https://github.com/Alhadis,Add highlights to readme code-blocks,2,[],https://github.com/WebAssembly/wabt/pull/418,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/418#issuecomment-299735425,Nothing groundbreaking going on here. This PR simply improves the readability of the readme's code samples by colouring comments and output lines differently.,"Thanks, that makes sense. Well, this looks good to me. I'm happy to merge, as long as you join the community group. Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,418,2017-05-07T10:19:01Z,2017-05-09T00:46:47Z,2017-05-09T00:48:32Z,MERGED,True,25,25,1,https://github.com/Alhadis,Add highlights to readme code-blocks,2,[],https://github.com/WebAssembly/wabt/pull/418,https://github.com/Alhadis,5,https://github.com/WebAssembly/wabt/pull/418#issuecomment-300025791,Nothing groundbreaking going on here. This PR simply improves the readability of the readme's code samples by colouring comments and output lines differently.,@binji Joined.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,418,2017-05-07T10:19:01Z,2017-05-09T00:46:47Z,2017-05-09T00:48:32Z,MERGED,True,25,25,1,https://github.com/Alhadis,Add highlights to readme code-blocks,2,[],https://github.com/WebAssembly/wabt/pull/418,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/418#issuecomment-300030009,Nothing groundbreaking going on here. This PR simply improves the readability of the readme's code samples by colouring comments and output lines differently.,Thanks!,True,{'THUMBS_UP': ['https://github.com/Alhadis']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,420,2017-05-08T23:01:28Z,2017-05-09T00:56:24Z,2017-05-09T00:56:25Z,MERGED,True,93,0,2,https://github.com/sbc100,Add wasmdump support for start section,1,[],https://github.com/WebAssembly/wabt/pull/420,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/420,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,421,2017-05-10T00:18:37Z,2017-05-10T17:59:22Z,2017-05-10T17:59:25Z,MERGED,True,10,10,4,https://github.com/sbc100,Improve error messages in binary reader,2,[],https://github.com/WebAssembly/wabt/pull/421,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/421,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,422,2017-05-10T17:02:18Z,2017-05-10T20:09:49Z,2017-06-04T02:25:36Z,CLOSED,False,72,1,3,https://github.com/sbc100,[wasmdump] Don't assume names section is in order,4,[],https://github.com/WebAssembly/wabt/pull/422,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/422,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,422,2017-05-10T17:02:18Z,2017-05-10T20:09:49Z,2017-06-04T02:25:36Z,CLOSED,False,72,1,3,https://github.com/sbc100,[wasmdump] Don't assume names section is in order,4,[],https://github.com/WebAssembly/wabt/pull/422,https://github.com/pipcet,2,https://github.com/WebAssembly/wabt/pull/422#issuecomment-300594080,,My understanding is the spec mandates that the name section is in order. We should probably just throw an error?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,422,2017-05-10T17:02:18Z,2017-05-10T20:09:49Z,2017-06-04T02:25:36Z,CLOSED,False,72,1,3,https://github.com/sbc100,[wasmdump] Don't assume names section is in order,4,[],https://github.com/WebAssembly/wabt/pull/422,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/422#issuecomment-300594767,,I don't see anything in the spec about saying that the indexs have to be in order.  Perhaps I missed something?  I'm not sure if @lukewagner intended it perhaps?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,422,2017-05-10T17:02:18Z,2017-05-10T20:09:49Z,2017-06-04T02:25:36Z,CLOSED,False,72,1,3,https://github.com/sbc100,[wasmdump] Don't assume names section is in order,4,[],https://github.com/WebAssembly/wabt/pull/422,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/422#issuecomment-300596265,,"Ah, @pipcet is right: https://github.com/WebAssembly/design/blob/master/BinaryEncoding.md#name-map

sequence of naming sorted by index",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,422,2017-05-10T17:02:18Z,2017-05-10T20:09:49Z,2017-06-04T02:25:36Z,CLOSED,False,72,1,3,https://github.com/sbc100,[wasmdump] Don't assume names section is in order,4,[],https://github.com/WebAssembly/wabt/pull/422,https://github.com/pipcet,5,https://github.com/WebAssembly/wabt/pull/422#issuecomment-300597679,,"Sorry for not providing the reference; yes, I meant the bit @binji quoted.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,422,2017-05-10T17:02:18Z,2017-05-10T20:09:49Z,2017-06-04T02:25:36Z,CLOSED,False,72,1,3,https://github.com/sbc100,[wasmdump] Don't assume names section is in order,4,[],https://github.com/WebAssembly/wabt/pull/422,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/422#issuecomment-300598190,,"Ah, I didn't notice this.  Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,423,2017-05-10T19:43:16Z,2017-05-10T19:56:31Z,2017-05-10T19:56:35Z,MERGED,True,93,0,86,https://github.com/sbc100,Regenerate expected test output,1,[],https://github.com/WebAssembly/wabt/pull/423,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/423,"The expected test output was out of sync because whitespace
at the start and end of stdout doesn't cause test failures
(because stdout/stderr are stripped before comparison).","The expected test output was out of sync because whitespace
at the start and end of stdout doesn't cause test failures
(because stdout/stderr are stripped before comparison).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,423,2017-05-10T19:43:16Z,2017-05-10T19:56:31Z,2017-05-10T19:56:35Z,MERGED,True,93,0,86,https://github.com/sbc100,Regenerate expected test output,1,[],https://github.com/WebAssembly/wabt/pull/423,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/423#issuecomment-300592827,"The expected test output was out of sync because whitespace
at the start and end of stdout doesn't cause test failures
(because stdout/stderr are stripped before comparison).",How was this generated? Can you fix run-tests to do this?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,423,2017-05-10T19:43:16Z,2017-05-10T19:56:31Z,2017-05-10T19:56:35Z,MERGED,True,93,0,86,https://github.com/sbc100,Regenerate expected test output,1,[],https://github.com/WebAssembly/wabt/pull/423,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/423#issuecomment-300593215,"The expected test output was out of sync because whitespace
at the start and end of stdout doesn't cause test failures
(because stdout/stderr are stripped before comparison).",I just ran run-tests -r to generate.    I thought about fixing run-tests a while ago but it seemed like a unlikely occurrence with a trivial fix (regen all).  In any case the fix can be in a followup?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,423,2017-05-10T19:43:16Z,2017-05-10T19:56:31Z,2017-05-10T19:56:35Z,MERGED,True,93,0,86,https://github.com/sbc100,Regenerate expected test output,1,[],https://github.com/WebAssembly/wabt/pull/423,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/423#issuecomment-300593976,"The expected test output was out of sync because whitespace
at the start and end of stdout doesn't cause test failures
(because stdout/stderr are stripped before comparison).",#423 .. in case we want this fixed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,425,2017-05-10T20:03:01Z,2017-05-10T21:24:04Z,2017-05-10T21:24:07Z,MERGED,True,41,31,5,https://github.com/sbc100,[wasmdump] Show function names along with relocations,1,[],https://github.com/WebAssembly/wabt/pull/425,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/425,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,426,2017-05-10T21:24:26Z,2017-05-24T18:35:56Z,2017-05-24T18:36:00Z,MERGED,True,215,24,8,https://github.com/sbc100,Ensure entries in name section appear in order,3,[],https://github.com/WebAssembly/wabt/pull/426,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/426,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,426,2017-05-10T21:24:26Z,2017-05-24T18:35:56Z,2017-05-24T18:36:00Z,MERGED,True,215,24,8,https://github.com/sbc100,Ensure entries in name section appear in order,3,[],https://github.com/WebAssembly/wabt/pull/426,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/426#issuecomment-303475451,,Added a bunch more tests,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,426,2017-05-10T21:24:26Z,2017-05-24T18:35:56Z,2017-05-24T18:36:00Z,MERGED,True,215,24,8,https://github.com/sbc100,Ensure entries in name section appear in order,3,[],https://github.com/WebAssembly/wabt/pull/426,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/426#issuecomment-303571478,,@binji could you take another look since I added a bunch more test cases and rebased,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,427,2017-05-11T00:23:02Z,2017-05-11T00:59:06Z,2017-05-11T00:59:09Z,MERGED,True,15,15,5,https://github.com/sbc100,"Update relocation names to match ""spec""",1,[],https://github.com/WebAssembly/wabt/pull/427,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/427,Sorry no tests for these names since they are not generated from .wast format yet.,Sorry no tests for these names since they are not generated from .wast format yet.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,428,2017-05-11T05:32:44Z,2017-05-11T20:52:42Z,2017-05-11T20:52:45Z,MERGED,True,10051,91,10,https://github.com/binji,Use codemirror for wast2wasm JS demo,1,[],https://github.com/WebAssembly/wabt/pull/428,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/428,"This also includes a simple codemirror syntax highlighter for the wast
format, using the simple-mode.js codemirror plugin.
I've also moved the examples out from demo.js to examples.js.
The codemirror.css and codemirror.js files are marked as binary so they
don't show up in diffs; we shouldn't be patching them anyway.","This also includes a simple codemirror syntax highlighter for the wast
format, using the simple-mode.js codemirror plugin.
I've also moved the examples out from demo.js to examples.js.
The codemirror.css and codemirror.js files are marked as binary so they
don't show up in diffs; we shouldn't be patching them anyway.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,429,2017-05-11T15:05:40Z,2017-05-19T18:12:34Z,2017-05-19T18:12:37Z,MERGED,True,1387,8,14,https://github.com/binji,"Implement UTF-8 validation, update testsuite",1,[],https://github.com/WebAssembly/wabt/pull/429,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/429,"This is enough to pass the testuite, but doesn't yet validate utf8
strings in the text format.","This is enough to pass the testuite, but doesn't yet validate utf8
strings in the text format.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,429,2017-05-11T15:05:40Z,2017-05-19T18:12:34Z,2017-05-19T18:12:37Z,MERGED,True,1387,8,14,https://github.com/binji,"Implement UTF-8 validation, update testsuite",1,[],https://github.com/WebAssembly/wabt/pull/429,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/429#issuecomment-300917894,"This is enough to pass the testuite, but doesn't yet validate utf8
strings in the text format.",Looks like there are additional tests here to handle the text format utf8 stuff. So this should be OK to land without for now.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,430,2017-05-11T20:58:52Z,2017-05-11T23:25:55Z,2017-05-11T23:25:58Z,MERGED,True,28,22,5,https://github.com/sbc100,[wasmdump] Make export section more readable,2,[],https://github.com/WebAssembly/wabt/pull/430,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/430,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,431,2017-05-12T04:35:33Z,2017-05-12T05:09:38Z,2017-05-12T05:09:41Z,MERGED,True,592,613,38,https://github.com/binji,Use C++ style C headers (e.g. <cstdlib>),1,[],https://github.com/WebAssembly/wabt/pull/431,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/431,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,432,2017-05-12T06:49:28Z,,2021-05-31T19:28:31Z,OPEN,False,8127,2,7,https://github.com/dschuff,Sourcemaps WIP,12,[],https://github.com/WebAssembly/wabt/pull/432,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/432,"Not ready to go yet, but just to get this up here.
API is a little rough, and no support for serialization/deserialization yet, but has the basic functions of adding mappings and generating segments. Also tests.","Not ready to go yet, but just to get this up here.
API is a little rough, and no support for serialization/deserialization yet, but has the basic functions of adding mappings and generating segments. Also tests.",True,"{'HEART': ['https://github.com/jamen', 'https://github.com/Mischi']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,432,2017-05-12T06:49:28Z,,2021-05-31T19:28:31Z,OPEN,False,8127,2,7,https://github.com/dschuff,Sourcemaps WIP,12,[],https://github.com/WebAssembly/wabt/pull/432,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/432#issuecomment-301154580,"Not ready to go yet, but just to get this up here.
API is a little rough, and no support for serialization/deserialization yet, but has the basic functions of adding mappings and generating segments. Also tests.","Most of the way to printing. TODO: VLQs, parsing. Now would be a good time for a round of review.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,432,2017-05-12T06:49:28Z,,2021-05-31T19:28:31Z,OPEN,False,8127,2,7,https://github.com/dschuff,Sourcemaps WIP,12,[],https://github.com/WebAssembly/wabt/pull/432,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/432#issuecomment-301155108,"Not ready to go yet, but just to get this up here.
API is a little rough, and no support for serialization/deserialization yet, but has the basic functions of adding mappings and generating segments. Also tests.","Sorry, got started looking at this then got distracted. :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,433,2017-05-12T23:27:04Z,2017-05-15T17:07:22Z,2017-05-15T17:07:25Z,MERGED,True,2635,2617,43,https://github.com/binji,Use Index/Address/Offset instead of uint32_t,2,[],https://github.com/WebAssembly/wabt/pull/433,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/433,"An Index is an index into one of the WebAssembly index spaces. It also
is used for counts for these spaces, as well as parameter counts and
result counts.
An Address is an index into linear memory, or the size of a data
region in linear memory.
An Offset is an offset into the host's file or memory buffer.
This fixes issue #322.","An Index is an index into one of the WebAssembly index spaces. It also
is used for counts for these spaces, as well as parameter counts and
result counts.
An Address is an index into linear memory, or the size of a data
region in linear memory.
An Offset is an offset into the host's file or memory buffer.
This fixes issue #322.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,433,2017-05-12T23:27:04Z,2017-05-15T17:07:22Z,2017-05-15T17:07:25Z,MERGED,True,2635,2617,43,https://github.com/binji,Use Index/Address/Offset instead of uint32_t,2,[],https://github.com/WebAssembly/wabt/pull/433,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/433#issuecomment-301320166,"An Index is an index into one of the WebAssembly index spaces. It also
is used for counts for these spaces, as well as parameter counts and
result counts.
An Address is an index into linear memory, or the size of a data
region in linear memory.
An Offset is an offset into the host's file or memory buffer.
This fixes issue #322.",Can you explain why you used Index for things like param counts?   This doesn't really seem like a index space in the same why... but either way this change seem like an improvement.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,433,2017-05-12T23:27:04Z,2017-05-15T17:07:22Z,2017-05-15T17:07:25Z,MERGED,True,2635,2617,43,https://github.com/binji,Use Index/Address/Offset instead of uint32_t,2,[],https://github.com/WebAssembly/wabt/pull/433,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/433#issuecomment-301340510,"An Index is an index into one of the WebAssembly index spaces. It also
is used for counts for these spaces, as well as parameter counts and
result counts.
An Address is an index into linear memory, or the size of a data
region in linear memory.
An Offset is an offset into the host's file or memory buffer.
This fixes issue #322.","Can you explain why you used Index for things like param counts?

Well, the spec uses localidx for accessing via get_local etc., so it seemed reasonable. I was considering using a different typedef for counts vs. indexes (for example using Address for linear memory sizes seems a bit weird), but I don't know that it would actually make things clearer.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,437,2017-05-15T21:38:25Z,2017-05-18T15:50:41Z,2017-05-18T15:50:41Z,CLOSED,False,48,7,4,https://github.com/winksaville,WIP: DO NOT COMMIT,2,[],https://github.com/WebAssembly/wabt/pull/437,https://github.com/winksaville,1,https://github.com/WebAssembly/wabt/pull/437,"Add module_name to FunctionImport and GlobalImport
Remove WABT_LINK_MODULE_NAME and thus it does not assuming it's always
__extern.
This is NOT passing tests and it just for review purposes.","Add module_name to FunctionImport and GlobalImport
Remove WABT_LINK_MODULE_NAME and thus it does not assuming it's always
__extern.
This is NOT passing tests and it just for review purposes.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,437,2017-05-15T21:38:25Z,2017-05-18T15:50:41Z,2017-05-18T15:50:41Z,CLOSED,False,48,7,4,https://github.com/winksaville,WIP: DO NOT COMMIT,2,[],https://github.com/WebAssembly/wabt/pull/437,https://github.com/winksaville,2,https://github.com/WebAssembly/wabt/pull/437#issuecomment-302446915,"Add module_name to FunctionImport and GlobalImport
Remove WABT_LINK_MODULE_NAME and thus it does not assuming it's always
__extern.
This is NOT passing tests and it just for review purposes.",Superseded by #440,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,438,2017-05-18T00:44:08Z,2017-05-18T19:46:25Z,2017-05-19T16:18:19Z,MERGED,True,48,25,3,https://github.com/sbc100,Add support for type relocations,1,[],https://github.com/WebAssembly/wabt/pull/438,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/438,"This relocation type is used for the signature type
immediate of the call_indirect instruction.","This relocation type is used for the signature type
immediate of the call_indirect instruction.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,438,2017-05-18T00:44:08Z,2017-05-18T19:46:25Z,2017-05-19T16:18:19Z,MERGED,True,48,25,3,https://github.com/sbc100,Add support for type relocations,1,[],https://github.com/WebAssembly/wabt/pull/438,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/438#issuecomment-302519414,"This relocation type is used for the signature type
immediate of the call_indirect instruction.",@KarlSchimpf can you take a look since binji is OOO?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/winksaville,1,https://github.com/WebAssembly/wabt/pull/440,"Currently a module name must be __extern with this change any module
name is allowed.","Currently a module name must be __extern with this change any module
name is allowed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/winksaville,2,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302448644,"Currently a module name must be __extern with this change any module
name is allowed.",I'll look at add/modify tests.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/winksaville,3,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302516520,"Currently a module name must be __extern with this change any module
name is allowed.","There are now a couple tests, is this adequate?
Question: In an import statement you can provide a module_name but I don't see where you can actually name a module? I would have expected something like below where I give the name anything to the second module which is the module_name used when importing baz:
(module
  (import ""__extern"" ""missing0"" (func $import_func0))
  (import ""_extern1"" ""missing1"" (func))
  (import ""anything"" ""baz"" (func $import_func1))
  (import ""extern2"" ""missing2"" (func $import_func2))
  (export ""foo"" (func $name1))
  (func $name1 (param $param1 i32)
     i32.const 1
     call 2)
  (func $name2 (param $param2 i64)
     i64.const 1
     call 3)
  (func (param $param2 i64))
)
(module ""anything""
  (export ""baz"" (func 0))
  (func $name3 (param $param3 i32)
     i32.const 2
     call 0)
)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/winksaville,4,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302516941,"Currently a module name must be __extern with this change any module
name is allowed.","I'm a member of the w3.org/community/webassembly search for saville, if that's what you mean.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/winksaville,5,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302518514,"Currently a module name must be __extern with this change any module
name is allowed.","I suggesting waiting until the CI checks have completed before committing, just to be safe :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/winksaville,6,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302537866,"Currently a module name must be __extern with this change any module
name is allowed.","@sbc100, commit at will.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302547702,"Currently a module name must be __extern with this change any module
name is allowed.","In answer to your question about module names, currently for the linker prototype and the linking conventions in https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md we don't take advantage of wasm's two level namespace.  For s2wasm (and the lld port I'm working on) we simply put all symbols inside the 'env' module.  In the future we could start using the two level namespace, in particular I can see this being useful for dynamic linking.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/winksaville,8,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302562683,"Currently a module name must be __extern with this change any module
name is allowed.","@sbc100, thanks for the info on module linking, but how do you name a module?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/sbc100,9,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302567861,"Currently a module name must be __extern with this change any module
name is allowed.","wasm modules don't have names.   Or maybe it makes more sense to say that we haven't defined a convention for that the module field of the imports means. At least not for static linking.    We currently use a flat namespace, as most C/C++ developers expect.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/winksaville,10,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302595277,"Currently a module name must be __extern with this change any module
name is allowed.","I find that odd, especially since import statements have a module name. Historically I come from an embedded world (although that was awhile ago) and have used things like linker scripts to control where various sections are placed. Obviously its early days for wasm, but I'm quite excited about wasm in more than just web systems and see wider possibilities.
Anyway, can you suggest the best place I might ask about module name support? Or maybe you suggest ""forget it for now"" ;)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/sbc100,11,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302765370,"Currently a module name must be __extern with this change any module
name is allowed.","You might want to open a bug in the design repo?   However, I imagine that that answer will be that how modules are linked together is outside of the code spec and belongs in the tooling conventions.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,440,2017-05-18T15:33:49Z,2017-05-18T21:29:13Z,2017-05-19T20:00:33Z,MERGED,True,65,48,5,https://github.com/winksaville,Allow any module name,5,[],https://github.com/WebAssembly/wabt/pull/440,https://github.com/winksaville,12,https://github.com/WebAssembly/wabt/pull/440#issuecomment-302797846,"Currently a module name must be __extern with this change any module
name is allowed.","I'll do that and we'll see what happens, txs.
…
On Fri, May 19, 2017 at 10:36 AM Sam Clegg ***@***.***> wrote:
 You might want to open a bug in the design repo? However, I imagine that
 that answer will be that how modules are linked together is outside of the
 code spec and belongs in the tooling conventions.

 —
 You are receiving this because you authored the thread.


 Reply to this email directly, view it on GitHub
 <#440 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AA-hHB-AoFQMjqmanzYs7potb8i-tnQOks5r7dMhgaJpZM4Nfa3G>
 .",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,441,2017-05-18T21:35:28Z,2017-05-19T17:15:41Z,2017-05-19T17:15:43Z,MERGED,True,94,76,29,https://github.com/sbc100,[wasmdump] Display function names at call sites in disassembly,1,[],https://github.com/WebAssembly/wabt/pull/441,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/441,"Also print Index types as decimal rather than hex
since this seems to be the convention elsewhere.","Also print Index types as decimal rather than hex
since this seems to be the convention elsewhere.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/guybedford,1,https://github.com/WebAssembly/wabt/pull/442,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/guybedford,2,https://github.com/WebAssembly/wabt/pull/442#issuecomment-302622128,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","I've added a further adjustment for flexibility, to allow a single exported memory to have any custom name, as long as it is the only memory export.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/442#issuecomment-302764396,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","I've been thinking about this a little more, and also working on the port of lld linker that has to do this kind of thing too.
There is what I've been thinking:  Exporting of memory should be an option to the linker, and nothing to do with the input objects.  The memories of the input objects are already combined into a single memory.  The only question is than, should we export this and what should its name be?    s2wasm by default will always export its memory unless you pass --import-memory.  Perhaps we should mirror this behavior, and default to exporting.
So this means I think we should probably just ignore any memory exports in the input objects (or perhaps error out if there are any).  What do you think?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/guybedford,4,https://github.com/WebAssembly/wabt/pull/442#issuecomment-303042187,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","While the ABI is still converging it seems to make sense to allow maximum flexibility. I'm all for a flag for --import-memory at least until there comes a point (if ever) where a decision needs to be made for the C/C++ ABI to move forward.
That said, I think it can be useful to have linkers built on flexible principles in their own way. Since the --import-memory flag is roughly part of the ABI, a linker can already see if the memory is imported or exported, so shouldn't need this as a new input option I don't think, as it has this information already.
I've added an adjustment to the PR where instead of assuming the name ""memory"" for memory exports, it will just pick up on any name used, and only merge the memory exports when they all share the same name, throwing an error otherwise.
Let me know if that makes sense?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/guybedford,5,https://github.com/WebAssembly/wabt/pull/442#issuecomment-303058769,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","@sbc100 while I've got you, I apologise for going off-topic and I appreciate the answer is much more nuanced than the question, but I have no idea where this should be posted. Is there an inhibiting reason why we can't already initialize the stack top in the LLVM IR output today - for Web Assembly to set the data address 4 to the initial memory pages * page size in the output?
Edit: at least for the case of a memory export output this would be a useful default.
Edit2: I see that s2wasm has the -i and -s options to set the initial memory and stack size respectively. I suppose LLVM may get a similar type of option when compiling directly to Web Assembly in due course?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/442#issuecomment-303179208,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","Yes, I'm looking at adding options like -i and -s to my port of lld.   Its really a link time thing to make those decisions I think.  This is why is was thinking the import/export or memory should also be a link-time-only thing and any memory imports/export in the object files should be either ignored completely, or cause a link error.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/guybedford,7,https://github.com/WebAssembly/wabt/pull/442#issuecomment-303311225,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","I guess I'm picturing this linker as working against the assumptions of Web Assembly linking within the browser. That is I can wire up imports and perform any type of linking operation I like in the browser. So a linker tool like this one should be able to inline that same semantic statically, as long as I can define which imports and exports are which. It would be great to see this tool or a similar reach a place where the linker could handle things like custom import name maps and selective inlining of subtrees for simple optimization.
On the other hand, lld should match the binary linking conventions for consistency between targets, where the single-namespace applies, and the target ABI and output should be strictly specified or selected.
So perhaps it's a matter of where this project sits on the gradient between the two. If generic browser linking as described in the first paragraph seems a non-goal for this project, I'd be happy to be more explicit and include a --import-memory flag or similar.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/guybedford,8,https://github.com/WebAssembly/wabt/pull/442#issuecomment-303429585,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","@sbc100 I've been thinking about this a little more, and I completely agree actually, an --import-memory option would definitely be useful for the linker regardless. Just because the source modules are written with memory exports doesn't mean you'd not want the output modules to be able to do another thing.
The question then is what edge cases the above hits with different variations, and also if we need to think about this wrt multiple memories so it doesn't fall over when that happens. Will put some more thought to what it means for the implementation.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/sbc100,9,https://github.com/WebAssembly/wabt/pull/442#issuecomment-303460167,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","I wouldn't worry too much about multiple memories in wasm-link.  If/when that happens its going be a lot of work to support.  Also, I am hoping that lld will be ready by then and perhaps wasm-link might not even exist anymore?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/guybedford,10,https://github.com/WebAssembly/wabt/pull/442#issuecomment-304026561,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.",Are we good to merge here? An --import-memory option could likely be added at a later point I think.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,442,2017-05-19T06:23:44Z,2017-05-29T09:53:17Z,2017-05-29T09:53:17Z,CLOSED,False,99,3,3,https://github.com/guybedford,Supporting memory exports in wasm-link,3,[],https://github.com/WebAssembly/wabt/pull/442,https://github.com/guybedford,11,https://github.com/WebAssembly/wabt/pull/442#issuecomment-304622035,"PR for #439.
This only allows memories called ""memory"" to be coalesced as a single memory export. This seems the simplest way to support exported memory, although does further ingrain the ""memory"" name as a convention. Perhaps wasm-link could take advantage of multiple memories in future, which would avoid the need to have to do these memory merges, and linked modules could retain their original memories and memory names.","@sbc100 I agree, and have created #462 here instead for this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,443,2017-05-20T00:53:11Z,2017-05-22T18:18:23Z,2017-05-22T18:33:53Z,MERGED,True,19,14,6,https://github.com/sbc100,[wasmdump] Include debug names for functions,1,[],https://github.com/WebAssembly/wabt/pull/443,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/443,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,444,2017-05-21T19:16:45Z,2017-05-22T20:47:05Z,2017-05-22T20:47:08Z,MERGED,True,59,24,7,https://github.com/binji,Update testsuite; fix bug w/ \0 in export name,1,[],https://github.com/WebAssembly/wabt/pull/444,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/444,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,446,2017-05-22T08:52:10Z,2017-05-22T23:02:59Z,2017-05-22T23:03:02Z,MERGED,True,51,51,25,https://github.com/binji,Fix disassembly of 64-bit values in wasmdump,2,[],https://github.com/WebAssembly/wabt/pull/446,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/446,Fixes #445.,Fixes #445.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,446,2017-05-22T08:52:10Z,2017-05-22T23:02:59Z,2017-05-22T23:03:02Z,MERGED,True,51,51,25,https://github.com/binji,Fix disassembly of 64-bit values in wasmdump,2,[],https://github.com/WebAssembly/wabt/pull/446,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/446#issuecomment-303218163,Fixes #445.,"@phil-el good point, though I'd actually prefer to have OnOpcodeUint32 print as decimal instead of hex too. It looks like this callback is only used in i32.const, current_memory, grow_memory. All of which should probably print as ""%u"" instead of ""%#x"", I think. @sbc100, wdyt?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,446,2017-05-22T08:52:10Z,2017-05-22T23:02:59Z,2017-05-22T23:03:02Z,MERGED,True,51,51,25,https://github.com/binji,Fix disassembly of 64-bit values in wasmdump,2,[],https://github.com/WebAssembly/wabt/pull/446,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/446#issuecomment-303219575,Fixes #445.,sgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,449,2017-05-22T18:23:41Z,2017-05-23T16:09:16Z,2017-05-23T16:09:22Z,MERGED,True,143,124,10,https://github.com/sbc100,Don't include leading $ in wasm binary name section,2,[],https://github.com/WebAssembly/wabt/pull/449,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/449,Attempt at fixing #448 .. still need to figure out how to strip the $ on parse.,Attempt at fixing #448 .. still need to figure out how to strip the $ on parse.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,449,2017-05-22T18:23:41Z,2017-05-23T16:09:16Z,2017-05-23T16:09:22Z,MERGED,True,143,124,10,https://github.com/sbc100,Don't include leading $ in wasm binary name section,2,[],https://github.com/WebAssembly/wabt/pull/449,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/449#issuecomment-303246369,Attempt at fixing #448 .. still need to figure out how to strip the $ on parse.,"You could strip it in the parser, but then the names wouldn't be as nice in errors, I think. Probably the simplest place to do it is in binary-writer.cc, just add a new function write_name instead of write_str that strips the initial $, I think.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,449,2017-05-22T18:23:41Z,2017-05-23T16:09:16Z,2017-05-23T16:09:22Z,MERGED,True,143,124,10,https://github.com/sbc100,Don't include leading $ in wasm binary name section,2,[],https://github.com/WebAssembly/wabt/pull/449,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/449#issuecomment-303246611,Attempt at fixing #448 .. still need to figure out how to strip the $ on parse.,"Also, for the same reason, it might be nicer to prepend the ""$"" in binary-reader-ir.cc instead of wat-writer.cc.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,449,2017-05-22T18:23:41Z,2017-05-23T16:09:16Z,2017-05-23T16:09:22Z,MERGED,True,143,124,10,https://github.com/sbc100,Don't include leading $ in wasm binary name section,2,[],https://github.com/WebAssembly/wabt/pull/449,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/449#issuecomment-303256434,Attempt at fixing #448 .. still need to figure out how to strip the $ on parse.,OK.. ptal,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,450,2017-05-23T03:36:03Z,2017-05-23T17:41:50Z,2017-05-23T17:41:53Z,MERGED,True,1,1,1,https://github.com/binji,Use + with $(MAKE) to use jobserver,1,[],https://github.com/WebAssembly/wabt/pull/450,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/450,"Without this, Make complains:
make[1]: warning: jobserver unavailable: using -j1.  Add '+' to
parent make rule.","Without this, Make complains:
make[1]: warning: jobserver unavailable: using -j1.  Add '+' to
parent make rule.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,450,2017-05-23T03:36:03Z,2017-05-23T17:41:50Z,2017-05-23T17:41:53Z,MERGED,True,1,1,1,https://github.com/binji,Use + with $(MAKE) to use jobserver,1,[],https://github.com/WebAssembly/wabt/pull/450,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/450#issuecomment-303450589,"Without this, Make complains:
make[1]: warning: jobserver unavailable: using -j1.  Add '+' to
parent make rule.",What does this actually do?  (other than stop the warning being printed),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,450,2017-05-23T03:36:03Z,2017-05-23T17:41:50Z,2017-05-23T17:41:53Z,MERGED,True,1,1,1,https://github.com/binji,Use + with $(MAKE) to use jobserver,1,[],https://github.com/WebAssembly/wabt/pull/450,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/450#issuecomment-303475465,"Without this, Make complains:
make[1]: warning: jobserver unavailable: using -j1.  Add '+' to
parent make rule.","Oh, without it you can't build in parallel. make -j10 just uses -j1.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,451,2017-05-23T05:28:15Z,2017-05-23T19:22:10Z,2017-05-23T19:22:12Z,MERGED,True,595,516,5,https://github.com/binji,Clean up BinaryReader; rename to BinaryReaderDelegate,2,[],https://github.com/WebAssembly/wabt/pull/451,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/451,This removes the use of setjmp/longjmp as well.,This removes the use of setjmp/longjmp as well.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,451,2017-05-23T05:28:15Z,2017-05-23T19:22:10Z,2017-05-23T19:22:12Z,MERGED,True,595,516,5,https://github.com/binji,Clean up BinaryReader; rename to BinaryReaderDelegate,2,[],https://github.com/WebAssembly/wabt/pull/451,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/451#issuecomment-303476034,This removes the use of setjmp/longjmp as well.,"The callgraph didn't change, setjmp/longjmp was used to throw exceptions, but now I just bubble the errors up the stack.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,451,2017-05-23T05:28:15Z,2017-05-23T19:22:10Z,2017-05-23T19:22:12Z,MERGED,True,595,516,5,https://github.com/binji,Clean up BinaryReader; rename to BinaryReaderDelegate,2,[],https://github.com/WebAssembly/wabt/pull/451,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/451#issuecomment-303498649,This removes the use of setjmp/longjmp as well.,"OK, renamed OnError -> PrintError. Also switched some if (...) { PrintError(...); return to ERROR_UNLESS(...). Take a look at 9442c76.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,451,2017-05-23T05:28:15Z,2017-05-23T19:22:10Z,2017-05-23T19:22:12Z,MERGED,True,595,516,5,https://github.com/binji,Clean up BinaryReader; rename to BinaryReaderDelegate,2,[],https://github.com/WebAssembly/wabt/pull/451,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/451#issuecomment-303504692,This removes the use of setjmp/longjmp as well.,"Sorry!
/me races to land first... :-P",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,452,2017-05-23T17:58:50Z,2017-05-23T19:00:43Z,2017-05-23T19:00:46Z,MERGED,True,105,74,6,https://github.com/sbc100,Add debug names to wasm-link tests,1,[],https://github.com/WebAssembly/wabt/pull/452,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/452,"Also, have wasmdump list debug names for function table
elements.
These changes make it easier to interpret the wasm-link
test outputs.","Also, have wasmdump list debug names for function table
elements.
These changes make it easier to interpret the wasm-link
test outputs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,453,2017-05-23T19:53:42Z,2017-05-23T23:57:13Z,2017-05-23T23:57:15Z,MERGED,True,86,72,4,https://github.com/sbc100,[wasm-link] Add some helper methods to LinkerInputBinary,4,[],https://github.com/WebAssembly/wabt/pull/453,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/453,"Make things a little more C++-y and some helper methods
to make the code more clear.","Make things a little more C++-y and some helper methods
to make the code more clear.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,454,2017-05-23T22:24:47Z,2017-05-24T00:01:04Z,2017-05-24T00:01:06Z,MERGED,True,1633,1678,6,https://github.com/binji,Move interpreter stuff into its own namespace,1,[],https://github.com/WebAssembly/wabt/pull/454,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/454,"The only names that conflict are wabt::Opcode vs.
interpreter::Opcode and wabt::Result vs. interpreter::Result.
Other names would conflict too (e.g. FuncSignature) but those aren't
ever included in the interpreter-related code.","The only names that conflict are wabt::Opcode vs.
interpreter::Opcode and wabt::Result vs. interpreter::Result.
Other names would conflict too (e.g. FuncSignature) but those aren't
ever included in the interpreter-related code.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,455,2017-05-25T18:57:32Z,2017-05-25T20:52:25Z,2017-06-04T02:24:14Z,MERGED,True,109,108,87,https://github.com/sbc100,Rename wasmdump to wasm-objdump,2,[],https://github.com/WebAssembly/wabt/pull/455,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/455,"This is more consistent with how llvm and binutils
name such tools.","This is more consistent with how llvm and binutils
name such tools.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,456,2017-05-25T19:18:50Z,2017-05-25T20:52:36Z,2017-05-25T21:20:37Z,MERGED,True,1,1,1,https://github.com/sbc100,Change default tools path from 'out' to 'bin',1,[],https://github.com/WebAssembly/wabt/pull/456,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/456,This is where 'make install' will put stuff by default.,This is where 'make install' will put stuff by default.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,457,2017-05-25T19:44:42Z,2017-05-26T17:57:58Z,2017-06-02T17:47:05Z,MERGED,True,21,25,1,https://github.com/sbc100,Only use single line test output if attached to a tty,2,[],https://github.com/WebAssembly/wabt/pull/457,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/457,"This means we get verbose test output when (for example)
running within ninja.","This means we get verbose test output when (for example)
running within ninja.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,458,2017-05-25T21:17:59Z,2017-05-31T22:12:24Z,2017-05-31T22:12:27Z,MERGED,True,536,417,6,https://github.com/binji,Clean up the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/458,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/458,"Make interpreter::Thread and interpreter::Environment into C++ classes
Move function running code into interpreter (was in wasm-interp)
Move environment searching functions into interpreter (was in
binary-reader-interpreter)
Remove free functions, use member functions on Environment/Thread
instead.","Make interpreter::Thread and interpreter::Environment into C++ classes
Move function running code into interpreter (was in wasm-interp)
Move environment searching functions into interpreter (was in
binary-reader-interpreter)
Remove free functions, use member functions on Environment/Thread
instead.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,458,2017-05-25T21:17:59Z,2017-05-31T22:12:24Z,2017-05-31T22:12:27Z,MERGED,True,536,417,6,https://github.com/binji,Clean up the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/458,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/458#issuecomment-305237169,"Make interpreter::Thread and interpreter::Environment into C++ classes
Move function running code into interpreter (was in wasm-interp)
Move environment searching functions into interpreter (was in
binary-reader-interpreter)
Remove free functions, use member functions on Environment/Thread
instead.",@sbc100 ping,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,458,2017-05-25T21:17:59Z,2017-05-31T22:12:24Z,2017-05-31T22:12:27Z,MERGED,True,536,417,6,https://github.com/binji,Clean up the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/458,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/458#issuecomment-305332954,"Make interpreter::Thread and interpreter::Environment into C++ classes
Move function running code into interpreter (was in wasm-interp)
Move environment searching functions into interpreter (was in
binary-reader-interpreter)
Remove free functions, use member functions on Environment/Thread
instead.","Yeah, it's mostly moving stuff around and writing in more of a C++ way.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,460,2017-05-26T17:19:34Z,2017-05-26T21:23:01Z,2017-05-26T21:23:03Z,MERGED,True,875,42,18,https://github.com/binji,Add support for folding expressions in wat-writer,1,[],https://github.com/WebAssembly/wabt/pull/460,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/460,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,460,2017-05-26T17:19:34Z,2017-05-26T21:23:01Z,2017-05-26T21:23:03Z,MERGED,True,875,42,18,https://github.com/binji,Add support for folding expressions in wat-writer,1,[],https://github.com/WebAssembly/wabt/pull/460,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/460#issuecomment-304370983,,"I thought we were moving away from this syntax?

Nope, it's going to be official.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,461,2017-05-27T09:25:23Z,2017-06-01T18:40:21Z,2017-06-01T19:28:29Z,CLOSED,False,128,0,1,https://github.com/guybedford,Reduced link error test case (#447),1,[],https://github.com/WebAssembly/wabt/pull/461,https://github.com/guybedford,1,https://github.com/WebAssembly/wabt/pull/461,"Here's the test case from #447.
It seems to be hitting this invalid assertion:
Assertion failed: (IsValidFunctionIndex(index)), function IsFunctionImport, file /Users/guybedford/projects/wabt/src/tools/wasm-link.cc, line 158.

Just let me know if I can do anything further to assist.","Here's the test case from #447.
It seems to be hitting this invalid assertion:
Assertion failed: (IsValidFunctionIndex(index)), function IsFunctionImport, file /Users/guybedford/projects/wabt/src/tools/wasm-link.cc, line 158.

Just let me know if I can do anything further to assist.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,461,2017-05-27T09:25:23Z,2017-06-01T18:40:21Z,2017-06-01T19:28:29Z,CLOSED,False,128,0,1,https://github.com/guybedford,Reduced link error test case (#447),1,[],https://github.com/WebAssembly/wabt/pull/461,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/461#issuecomment-305582727,"Here's the test case from #447.
It seems to be hitting this invalid assertion:
Assertion failed: (IsValidFunctionIndex(index)), function IsFunctionImport, file /Users/guybedford/projects/wabt/src/tools/wasm-link.cc, line 158.

Just let me know if I can do anything further to assist.",Looks like this is fixed. Thanks for the reduced test case!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,461,2017-05-27T09:25:23Z,2017-06-01T18:40:21Z,2017-06-01T19:28:29Z,CLOSED,False,128,0,1,https://github.com/guybedford,Reduced link error test case (#447),1,[],https://github.com/WebAssembly/wabt/pull/461,https://github.com/guybedford,3,https://github.com/WebAssembly/wabt/pull/461#issuecomment-305595800,"Here's the test case from #447.
It seems to be hitting this invalid assertion:
Assertion failed: (IsValidFunctionIndex(index)), function IsFunctionImport, file /Users/guybedford/projects/wabt/src/tools/wasm-link.cc, line 158.

Just let me know if I can do anything further to assist.","Sure, thanks for the quick fix here. Will report back if I find anything else (and no pressure to fix of course).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,462,2017-05-29T09:51:41Z,2017-06-09T08:36:39Z,2017-06-09T17:09:41Z,CLOSED,False,225,9,6,https://github.com/guybedford,Support memory imports in wasm-link,7,[],https://github.com/WebAssembly/wabt/pull/462,https://github.com/guybedford,1,https://github.com/WebAssembly/wabt/pull/462,"Alternative to #442, this supports imported memory coalescing in a similar way.
The way I've done this is that the namespace names don't have to match, but the import names do have to match. We can potentially restrict this to the namespace names matching as well?
I've also added an error message for the exported memory case to clearly disallow that.
There's a small refactoring of the memory limits combining here too, where if two memories combine, and both have no maximum, a maximum is not imposed. But if one has a maximum, then the maximum is set as that maximum plus the initial of the other without a maximum. Tried to come up with something as sensible as possible but feedback welcome too.","Alternative to #442, this supports imported memory coalescing in a similar way.
The way I've done this is that the namespace names don't have to match, but the import names do have to match. We can potentially restrict this to the namespace names matching as well?
I've also added an error message for the exported memory case to clearly disallow that.
There's a small refactoring of the memory limits combining here too, where if two memories combine, and both have no maximum, a maximum is not imposed. But if one has a maximum, then the maximum is set as that maximum plus the initial of the other without a maximum. Tried to come up with something as sensible as possible but feedback welcome too.",True,{'THUMBS_UP': ['https://github.com/jayphelps']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,462,2017-05-29T09:51:41Z,2017-06-09T08:36:39Z,2017-06-09T17:09:41Z,CLOSED,False,225,9,6,https://github.com/guybedford,Support memory imports in wasm-link,7,[],https://github.com/WebAssembly/wabt/pull/462,https://github.com/guybedford,2,https://github.com/WebAssembly/wabt/pull/462#issuecomment-304642609,"Alternative to #442, this supports imported memory coalescing in a similar way.
The way I've done this is that the namespace names don't have to match, but the import names do have to match. We can potentially restrict this to the namespace names matching as well?
I've also added an error message for the exported memory case to clearly disallow that.
There's a small refactoring of the memory limits combining here too, where if two memories combine, and both have no maximum, a maximum is not imposed. But if one has a maximum, then the maximum is set as that maximum plus the initial of the other without a maximum. Tried to come up with something as sensible as possible but feedback welcome too.",@sbc100 if you can advise re the one comment above that would be great!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,462,2017-05-29T09:51:41Z,2017-06-09T08:36:39Z,2017-06-09T17:09:41Z,CLOSED,False,225,9,6,https://github.com/guybedford,Support memory imports in wasm-link,7,[],https://github.com/WebAssembly/wabt/pull/462,https://github.com/guybedford,3,https://github.com/WebAssembly/wabt/pull/462#issuecomment-305594452,"Alternative to #442, this supports imported memory coalescing in a similar way.
The way I've done this is that the namespace names don't have to match, but the import names do have to match. We can potentially restrict this to the namespace names matching as well?
I've also added an error message for the exported memory case to clearly disallow that.
There's a small refactoring of the memory limits combining here too, where if two memories combine, and both have no maximum, a maximum is not imposed. But if one has a maximum, then the maximum is set as that maximum plus the initial of the other without a maximum. Tried to come up with something as sensible as possible but feedback welcome too.","I've fixed up the memory merging issue here.
To demonstrate a simple example that this enables, and the coalescing behaviour:
a.wast
(module
  (memory $mem 2)
)

b.wast
(module
  (import ""envB"" ""memory"" (memory $0 3 8))
  (func $foo (result i32)
    (i32.const 41)
  )
)

-> linked ab.wast
(module
  (type (;0;) (func (result i32)))
  (import ""envB"" ""memory"" (memory (;0;) 5 10))
  (func (;0;) (type 0) (result i32)
    i32.const 41))

where the 5 initial is the sum of the two initials (between the import and the non-imported memory), and the 10 maximum is the sum of the 8 max with the 2 initial.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,462,2017-05-29T09:51:41Z,2017-06-09T08:36:39Z,2017-06-09T17:09:41Z,CLOSED,False,225,9,6,https://github.com/guybedford,Support memory imports in wasm-link,7,[],https://github.com/WebAssembly/wabt/pull/462,https://github.com/jayphelps,4,https://github.com/WebAssembly/wabt/pull/462#issuecomment-305695576,"Alternative to #442, this supports imported memory coalescing in a similar way.
The way I've done this is that the namespace names don't have to match, but the import names do have to match. We can potentially restrict this to the namespace names matching as well?
I've also added an error message for the exported memory case to clearly disallow that.
There's a small refactoring of the memory limits combining here too, where if two memories combine, and both have no maximum, a maximum is not imposed. But if one has a maximum, then the maximum is set as that maximum plus the initial of the other without a maximum. Tried to come up with something as sensible as possible but feedback welcome too.",nit: existing test filenames are snake_case but these new ones are hyphen-ated 😄,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,462,2017-05-29T09:51:41Z,2017-06-09T08:36:39Z,2017-06-09T17:09:41Z,CLOSED,False,225,9,6,https://github.com/guybedford,Support memory imports in wasm-link,7,[],https://github.com/WebAssembly/wabt/pull/462,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/462#issuecomment-305814429,"Alternative to #442, this supports imported memory coalescing in a similar way.
The way I've done this is that the namespace names don't have to match, but the import names do have to match. We can potentially restrict this to the namespace names matching as well?
I've also added an error message for the exported memory case to clearly disallow that.
There's a small refactoring of the memory limits combining here too, where if two memories combine, and both have no maximum, a maximum is not imposed. But if one has a maximum, then the maximum is set as that maximum plus the initial of the other without a maximum. Tried to come up with something as sensible as possible but feedback welcome too.","@jayphelps well, we're a bit inconsistent here. :-) All the tests I added originally were hyphenated, but the spec tests match the name of the wast file, so they're snake_case. And you're right, all of the link directory tests are snake_case too.",True,{'HOORAY': ['https://github.com/jayphelps']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,462,2017-05-29T09:51:41Z,2017-06-09T08:36:39Z,2017-06-09T17:09:41Z,CLOSED,False,225,9,6,https://github.com/guybedford,Support memory imports in wasm-link,7,[],https://github.com/WebAssembly/wabt/pull/462,https://github.com/guybedford,6,https://github.com/WebAssembly/wabt/pull/462#issuecomment-307330496,"Alternative to #442, this supports imported memory coalescing in a similar way.
The way I've done this is that the namespace names don't have to match, but the import names do have to match. We can potentially restrict this to the namespace names matching as well?
I've also added an error message for the exported memory case to clearly disallow that.
There's a small refactoring of the memory limits combining here too, where if two memories combine, and both have no maximum, a maximum is not imposed. But if one has a maximum, then the maximum is set as that maximum plus the initial of the other without a maximum. Tried to come up with something as sensible as possible but feedback welcome too.","I think the issue here is that this is really an LLVM WASM ABI linker and not a generic WASM module linker, when the PR here is confusing it for the latter.
If the goal is ever to move towards generic WASM module linking, with flexible ABI detection, I'd be happy to work on this further.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,462,2017-05-29T09:51:41Z,2017-06-09T08:36:39Z,2017-06-09T17:09:41Z,CLOSED,False,225,9,6,https://github.com/guybedford,Support memory imports in wasm-link,7,[],https://github.com/WebAssembly/wabt/pull/462,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/462#issuecomment-307441511,"Alternative to #442, this supports imported memory coalescing in a similar way.
The way I've done this is that the namespace names don't have to match, but the import names do have to match. We can potentially restrict this to the namespace names matching as well?
I've also added an error message for the exported memory case to clearly disallow that.
There's a small refactoring of the memory limits combining here too, where if two memories combine, and both have no maximum, a maximum is not imposed. But if one has a maximum, then the maximum is set as that maximum plus the initial of the other without a maximum. Tried to come up with something as sensible as possible but feedback welcome too.","@guybedford It's a good point, and probably worth pointing out in the docs. @sbc100 do you mind updating the README (and perhaps the command help too) to make this clearer?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,462,2017-05-29T09:51:41Z,2017-06-09T08:36:39Z,2017-06-09T17:09:41Z,CLOSED,False,225,9,6,https://github.com/guybedford,Support memory imports in wasm-link,7,[],https://github.com/WebAssembly/wabt/pull/462,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/462#issuecomment-307446126,"Alternative to #442, this supports imported memory coalescing in a similar way.
The way I've done this is that the namespace names don't have to match, but the import names do have to match. We can potentially restrict this to the namespace names matching as well?
I've also added an error message for the exported memory case to clearly disallow that.
There's a small refactoring of the memory limits combining here too, where if two memories combine, and both have no maximum, a maximum is not imposed. But if one has a maximum, then the maximum is set as that maximum plus the initial of the other without a maximum. Tried to come up with something as sensible as possible but feedback welcome too.",I opened #489 to clarify,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,463,2017-05-30T21:00:28Z,2017-05-31T20:42:17Z,2017-06-02T08:40:33Z,MERGED,True,183,10,2,https://github.com/sbc100,Update relocation offsets when fixing up section size,1,[],https://github.com/WebAssembly/wabt/pull/463,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/463,Fixes #447,Fixes #447,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,463,2017-05-30T21:00:28Z,2017-05-31T20:42:17Z,2017-06-02T08:40:33Z,MERGED,True,183,10,2,https://github.com/sbc100,Update relocation offsets when fixing up section size,1,[],https://github.com/WebAssembly/wabt/pull/463,https://github.com/guybedford,2,https://github.com/WebAssembly/wabt/pull/463#issuecomment-305726606,Fixes #447,"Thanks so much for the quick fix here, hope it wasn't too much of a distraction.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,464,2017-05-30T21:37:22Z,2017-05-31T20:43:06Z,2017-05-31T20:43:09Z,MERGED,True,17,25,1,https://github.com/sbc100,Cleanup logging in wasm-link,1,[],https://github.com/WebAssembly/wabt/pull/464,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/464,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,465,2017-05-31T22:07:39Z,2017-06-01T00:00:09Z,2017-06-01T00:00:11Z,MERGED,True,126,4,9,https://github.com/binji,Add option to generate inline exports in wat-writer,2,[],https://github.com/WebAssembly/wabt/pull/465,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/465,This addresses issue #436.,This addresses issue #436.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,466,2017-06-02T01:09:48Z,2017-06-02T20:35:24Z,2017-06-02T20:35:26Z,MERGED,True,2617,2707,19,https://github.com/binji,Cleanup Lexer,4,[],https://github.com/WebAssembly/wabt/pull/466,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/466,"Add class LexerSource: it encapsulates reading data from a source,
either buffer or file.
Add class LexerSourceLineFinder: it uses a LexerSource to read a line
from the source for displaying in errors. It lazily caches line
numbers -> file offsets, so no work is done unless an error occurs.
Make WastLexer a class instead of a struct.","Add class LexerSource: it encapsulates reading data from a source,
either buffer or file.
Add class LexerSourceLineFinder: it uses a LexerSource to read a line
from the source for displaying in errors. It lazily caches line
numbers -> file offsets, so no work is done unless an error occurs.
Make WastLexer a class instead of a struct.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,467,2017-06-02T01:24:40Z,2017-06-02T16:28:21Z,2017-06-02T16:28:24Z,MERGED,True,116,115,1,https://github.com/sbc100,Use override keyword where appropriate,1,[],https://github.com/WebAssembly/wabt/pull/467,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/467,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,469,2017-06-02T18:17:50Z,2017-06-02T21:20:33Z,2017-06-02T21:20:35Z,MERGED,True,17,3,2,https://github.com/binji,Fix assert in wasm2wast with invalid br var,1,[],https://github.com/WebAssembly/wabt/pull/469,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/469,"WatWriter can't rely on the module having been previously validated.
Fixes #468.","WatWriter can't rely on the module having been previously validated.
Fixes #468.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,471,2017-06-02T22:33:49Z,2017-06-03T00:20:50Z,2017-06-03T00:20:52Z,MERGED,True,413,354,8,https://github.com/binji,Make ExprVisitor into C++ class,2,[],https://github.com/WebAssembly/wabt/pull/471,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/471,"Add ExprVisitor::Delegate for callbacks, and ExprVisitor::DelegateNop
when some functions aren't implemented (similar to BinaryReader).","Add ExprVisitor::Delegate for callbacks, and ExprVisitor::DelegateNop
when some functions aren't implemented (similar to BinaryReader).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,472,2017-06-03T01:38:19Z,2017-06-03T21:20:05Z,2017-06-03T21:20:08Z,MERGED,True,406,344,3,https://github.com/binji,"Use C++ classes for {apply,resolve,generate}-names",1,[],https://github.com/WebAssembly/wabt/pull/472,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/472,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,474,2017-06-03T22:53:45Z,2017-06-07T17:37:01Z,2017-06-07T17:37:04Z,MERGED,True,539,471,9,https://github.com/binji,Validate block signatures w/ multiple types,1,[],https://github.com/WebAssembly/wabt/pull/474,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/474,"The parser and typechecker allow multiple types in block signatures:
block i32 i32
  ...
end

But these are not currently supported in the MVP, and there is no way to
serialize them. This change makes them a validation error.
This change also fixes the default location handling of non-terminal
nodes in the parser; they used to look weird because they would use the
ending column from the last symbol in the rule, even if that symbol was
on a different line.
Fixes #473.","The parser and typechecker allow multiple types in block signatures:
block i32 i32
  ...
end

But these are not currently supported in the MVP, and there is no way to
serialize them. This change makes them a validation error.
This change also fixes the default location handling of non-terminal
nodes in the parser; they used to look weird because they would use the
ending column from the last symbol in the rule, even if that symbol was
on a different line.
Fixes #473.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,475,2017-06-04T00:00:41Z,2017-06-04T00:22:18Z,2017-06-04T00:22:20Z,MERGED,True,407,417,4,https://github.com/binji,Make TypeChecker into C++ class,1,[],https://github.com/WebAssembly/wabt/pull/475,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/475,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,475,2017-06-04T00:00:41Z,2017-06-04T00:22:18Z,2017-06-04T00:22:20Z,MERGED,True,407,417,4,https://github.com/binji,Make TypeChecker into C++ class,1,[],https://github.com/WebAssembly/wabt/pull/475,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/475#issuecomment-306009469,,"Assuming this is uncontroversial, landing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,476,2017-06-04T00:32:16Z,2017-06-04T00:59:04Z,2017-06-04T00:59:06Z,MERGED,True,460,429,1,https://github.com/binji,Make Validator into C++ class,1,[],https://github.com/WebAssembly/wabt/pull/476,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/476,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,476,2017-06-04T00:32:16Z,2017-06-04T00:59:04Z,2017-06-04T00:59:06Z,MERGED,True,460,429,1,https://github.com/binji,Make Validator into C++ class,1,[],https://github.com/WebAssembly/wabt/pull/476,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/476#issuecomment-306010632,,Assuming this cleanup is uncontroversial. Landing.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,479,2017-06-06T19:10:50Z,2017-06-07T02:23:19Z,2017-06-07T02:23:23Z,MERGED,True,50,50,3,https://github.com/sbc100,[objdump] Split out state from ObjdumpOptions,2,[],https://github.com/WebAssembly/wabt/pull/479,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/479,"Also, use C++ constructor inheritance to avoid some
boilerplate constructors.","Also, use C++ constructor inheritance to avoid some
boilerplate constructors.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,480,2017-06-07T02:22:14Z,2017-06-07T18:16:07Z,2017-06-07T18:16:11Z,MERGED,True,27,6,1,https://github.com/sbc100,Store all test intermediate files in output directory,3,[],https://github.com/WebAssembly/wabt/pull/480,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/480,"Previously we would you temp directories that we would
clean up after the test run.  This way the intermediates
are always available for inspection after a run.","Previously we would you temp directories that we would
clean up after the test run.  This way the intermediates
are always available for inspection after a run.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,480,2017-06-07T02:22:14Z,2017-06-07T18:16:07Z,2017-06-07T18:16:11Z,MERGED,True,27,6,1,https://github.com/sbc100,Store all test intermediate files in output directory,3,[],https://github.com/WebAssembly/wabt/pull/480,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/480#issuecomment-306861280,"Previously we would you temp directories that we would
clean up after the test run.  This way the intermediates
are always available for inspection after a run.",I think as followup change we could move some of the arg parsing and setup into a shared location so all these scripts behave the same.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,480,2017-06-07T02:22:14Z,2017-06-07T18:16:07Z,2017-06-07T18:16:11Z,MERGED,True,27,6,1,https://github.com/sbc100,Store all test intermediate files in output directory,3,[],https://github.com/WebAssembly/wabt/pull/480,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/480#issuecomment-306863668,"Previously we would you temp directories that we would
clean up after the test run.  This way the intermediates
are always available for inspection after a run.","OK, I reverted the controversial parts.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,481,2017-06-07T02:25:29Z,2017-06-07T17:30:29Z,2017-06-07T17:30:32Z,MERGED,True,75,70,19,https://github.com/sbc100,[objdump] Be more explicit about type and element indexes,1,[],https://github.com/WebAssembly/wabt/pull/481,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/481,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,481,2017-06-07T02:25:29Z,2017-06-07T17:30:29Z,2017-06-07T17:30:32Z,MERGED,True,75,70,19,https://github.com/sbc100,[objdump] Be more explicit about type and element indexes,1,[],https://github.com/WebAssembly/wabt/pull/481,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/481#issuecomment-306867459,,"Yes, I was concerted about the the elem indexes being interpreted as being absolute table indexes.  However,  i think this is presenting more information, and TBH all of the objects I deal with have segments with init_expr = 0.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,482,2017-06-07T06:26:55Z,2017-06-07T19:45:09Z,2017-06-07T19:45:12Z,MERGED,True,10069,9771,102,https://github.com/binji,Update testsuite; various lexing/parsing fixes,3,[],https://github.com/WebAssembly/wabt/pull/482,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/482,"Lexer changes:

Switch re2c parser to UTF-8 parser. This can almost be done ""for
free"" with a flag, but required a bit of work to allow us to catch
malformed UTF-8 as well.
Change the re2c fill value to 0xff, since it's never a valid UTF-8 byte.
Allow for more reserved tokens (basically any ascii aside from
parentheses, double-quote, and semi-colon)
Remove ""infinity"" from lexer, only ""inf"" is allowed now.
Change definition of EOF token, it was implemented incorrectly. The
correct way to handle it is to only return it from FILL when there is no
more data to fill.
\r is a valid escape.

Parser changes:

Changes to match the spec parser:

block signatures use (result <type>) syntax
func/global/table/memory can have multiple inline exports
inline imports are handled in func definition instead of import
definition
allow for inline modules (i.e. no ""(module ...)"" s-expr required)


Remove FuncField. This was previously used for parsing
params/results/locals, but it's less code to just parse
right-recursive (i.e. backward) and insert everything at the front.
This requires reversing the indexes in the BindingHash too.
Remove the nasty macros APPEND_FIELD_TO_LIST,
APPEND_ITEM_TO_VECTOR, APPEND_INLINE_EXPORT, and
CHECK_IMPORT_ORDERING. This behavior is all handled by
append_module_fields now.
All inline imports/exports are handled by returning additional
ModuleFields in a list. This removes the need for OptionalExport,
ExportedFunc, ExportedGlobal, ExportedTable, and
ExportedMemory.
Use ""opt"" suffix instead of ""non_empty"" prefix, e.g.:

text_list => text_list_opt, non_empty_text_list => text_list


The locations changed for some symbols, typically the use the name
following the LPAR now, e.g. (import
^^^^^^","Lexer changes:

Switch re2c parser to UTF-8 parser. This can almost be done ""for
free"" with a flag, but required a bit of work to allow us to catch
malformed UTF-8 as well.
Change the re2c fill value to 0xff, since it's never a valid UTF-8 byte.
Allow for more reserved tokens (basically any ascii aside from
parentheses, double-quote, and semi-colon)
Remove ""infinity"" from lexer, only ""inf"" is allowed now.
Change definition of EOF token, it was implemented incorrectly. The
correct way to handle it is to only return it from FILL when there is no
more data to fill.
\r is a valid escape.

Parser changes:

Changes to match the spec parser:

block signatures use (result <type>) syntax
func/global/table/memory can have multiple inline exports
inline imports are handled in func definition instead of import
definition
allow for inline modules (i.e. no ""(module ...)"" s-expr required)


Remove FuncField. This was previously used for parsing
params/results/locals, but it's less code to just parse
right-recursive (i.e. backward) and insert everything at the front.
This requires reversing the indexes in the BindingHash too.
Remove the nasty macros APPEND_FIELD_TO_LIST,
APPEND_ITEM_TO_VECTOR, APPEND_INLINE_EXPORT, and
CHECK_IMPORT_ORDERING. This behavior is all handled by
append_module_fields now.
All inline imports/exports are handled by returning additional
ModuleFields in a list. This removes the need for OptionalExport,
ExportedFunc, ExportedGlobal, ExportedTable, and
ExportedMemory.
Use ""opt"" suffix instead of ""non_empty"" prefix, e.g.:

text_list => text_list_opt, non_empty_text_list => text_list


The locations changed for some symbols, typically the use the name
following the LPAR now, e.g. (import
^^^^^^",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,482,2017-06-07T06:26:55Z,2017-06-07T19:45:09Z,2017-06-07T19:45:12Z,MERGED,True,10069,9771,102,https://github.com/binji,Update testsuite; various lexing/parsing fixes,3,[],https://github.com/WebAssembly/wabt/pull/482,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/482#issuecomment-306872323,"Lexer changes:

Switch re2c parser to UTF-8 parser. This can almost be done ""for
free"" with a flag, but required a bit of work to allow us to catch
malformed UTF-8 as well.
Change the re2c fill value to 0xff, since it's never a valid UTF-8 byte.
Allow for more reserved tokens (basically any ascii aside from
parentheses, double-quote, and semi-colon)
Remove ""infinity"" from lexer, only ""inf"" is allowed now.
Change definition of EOF token, it was implemented incorrectly. The
correct way to handle it is to only return it from FILL when there is no
more data to fill.
\r is a valid escape.

Parser changes:

Changes to match the spec parser:

block signatures use (result <type>) syntax
func/global/table/memory can have multiple inline exports
inline imports are handled in func definition instead of import
definition
allow for inline modules (i.e. no ""(module ...)"" s-expr required)


Remove FuncField. This was previously used for parsing
params/results/locals, but it's less code to just parse
right-recursive (i.e. backward) and insert everything at the front.
This requires reversing the indexes in the BindingHash too.
Remove the nasty macros APPEND_FIELD_TO_LIST,
APPEND_ITEM_TO_VECTOR, APPEND_INLINE_EXPORT, and
CHECK_IMPORT_ORDERING. This behavior is all handled by
append_module_fields now.
All inline imports/exports are handled by returning additional
ModuleFields in a list. This removes the need for OptionalExport,
ExportedFunc, ExportedGlobal, ExportedTable, and
ExportedMemory.
Use ""opt"" suffix instead of ""non_empty"" prefix, e.g.:

text_list => text_list_opt, non_empty_text_list => text_list


The locations changed for some symbols, typically the use the name
following the LPAR now, e.g. (import
^^^^^^","That changes the .y are mostly opaque to me.

Yeah, I tried to keep this minimal, but the changes to the spec parser kind of required a rewrite. The code is much cleaner this way, and the test coverage is pretty good so ¯_(ツ)_/¯",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,483,2017-06-08T00:16:22Z,2017-06-22T20:58:14Z,2017-06-22T20:58:17Z,MERGED,True,151,4,10,https://github.com/sbc100,"Add parsing and objdump support for updated ""linking"" section",3,[],https://github.com/WebAssembly/wabt/pull/483,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/483,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,483,2017-06-08T00:16:22Z,2017-06-22T20:58:14Z,2017-06-22T20:58:17Z,MERGED,True,151,4,10,https://github.com/sbc100,"Add parsing and objdump support for updated ""linking"" section",3,[],https://github.com/WebAssembly/wabt/pull/483,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/483#issuecomment-310247061,,Should be ready to go now..,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,483,2017-06-08T00:16:22Z,2017-06-22T20:58:14Z,2017-06-22T20:58:17Z,MERGED,True,151,4,10,https://github.com/sbc100,"Add parsing and objdump support for updated ""linking"" section",3,[],https://github.com/WebAssembly/wabt/pull/483,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/483#issuecomment-310473636,,Added a test.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,483,2017-06-08T00:16:22Z,2017-06-22T20:58:14Z,2017-06-22T20:58:17Z,MERGED,True,151,4,10,https://github.com/sbc100,"Add parsing and objdump support for updated ""linking"" section",3,[],https://github.com/WebAssembly/wabt/pull/483,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/483#issuecomment-310499199,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,484,2017-06-08T18:30:09Z,2017-06-12T01:35:43Z,2017-06-12T01:35:46Z,MERGED,True,6788,6472,93,https://github.com/binji,Update testsuite; more lexer/parser changes,4,[],https://github.com/WebAssembly/wabt/pull/484,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/484,"Add support for quoted modules: (module quote ""..."")
Binary modules must be annotated: (module binary ""..."")
Multiple result blocks are no longer a parser error:
(func (result i32) (result i32) ...)
Function types can specify unused bind variables:
(type (func (param $foo)))
Rename RawModule -> ScriptModule. This encapsulates a module that
may not be parsed yet, whether binary or ""quoted"".
Validate load/store offsets and alignment in the parser, not in the
validator. The spec tests assume that you can catch these errors with
assert_malformed.
Parse wast files in wasm-interp when checking malformed/invalid/etc.
modules. This allows us to run all assertions at the same time, which
is nice. wasm-interp should probably be renamed, though.
Two tests in type.wast fail because they use:
(assert_invalid (module quote ""..."")). I'd prefer that we don't
support this, since it's unnecessary, and additional work. I'll fix in
a follow-up CL if we decide this is worth keeping.","Add support for quoted modules: (module quote ""..."")
Binary modules must be annotated: (module binary ""..."")
Multiple result blocks are no longer a parser error:
(func (result i32) (result i32) ...)
Function types can specify unused bind variables:
(type (func (param $foo)))
Rename RawModule -> ScriptModule. This encapsulates a module that
may not be parsed yet, whether binary or ""quoted"".
Validate load/store offsets and alignment in the parser, not in the
validator. The spec tests assume that you can catch these errors with
assert_malformed.
Parse wast files in wasm-interp when checking malformed/invalid/etc.
modules. This allows us to run all assertions at the same time, which
is nice. wasm-interp should probably be renamed, though.
Two tests in type.wast fail because they use:
(assert_invalid (module quote ""..."")). I'd prefer that we don't
support this, since it's unnecessary, and additional work. I'll fix in
a follow-up CL if we decide this is worth keeping.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,484,2017-06-08T18:30:09Z,2017-06-12T01:35:43Z,2017-06-12T01:35:46Z,MERGED,True,6788,6472,93,https://github.com/binji,Update testsuite; more lexer/parser changes,4,[],https://github.com/WebAssembly/wabt/pull/484,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/484#issuecomment-307443428,"Add support for quoted modules: (module quote ""..."")
Binary modules must be annotated: (module binary ""..."")
Multiple result blocks are no longer a parser error:
(func (result i32) (result i32) ...)
Function types can specify unused bind variables:
(type (func (param $foo)))
Rename RawModule -> ScriptModule. This encapsulates a module that
may not be parsed yet, whether binary or ""quoted"".
Validate load/store offsets and alignment in the parser, not in the
validator. The spec tests assume that you can catch these errors with
assert_malformed.
Parse wast files in wasm-interp when checking malformed/invalid/etc.
modules. This allows us to run all assertions at the same time, which
is nice. wasm-interp should probably be renamed, though.
Two tests in type.wast fail because they use:
(assert_invalid (module quote ""..."")). I'd prefer that we don't
support this, since it's unnecessary, and additional work. I'll fix in
a follow-up CL if we decide this is worth keeping.","Hm, looks slash vs. backslash problems on windows.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,485,2017-06-08T18:46:48Z,2017-06-08T21:05:52Z,2017-06-08T21:05:54Z,MERGED,True,8,5,1,https://github.com/binji,Check bison/re2c versions and fallback to prebuilt,1,[],https://github.com/WebAssembly/wabt/pull/485,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/485,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,486,2017-06-09T08:50:22Z,2017-06-09T17:18:59Z,2017-06-14T07:12:41Z,MERGED,True,17,0,1,https://github.com/guybedford,Disable memory imports/exports in linker,1,[],https://github.com/WebAssembly/wabt/pull/486,https://github.com/guybedford,1,https://github.com/WebAssembly/wabt/pull/486,"At least this sets the current interface assumptions.
I tend to think detection of a global mutable export like cur_stack_pointer and a global const like stack_start, should be a detectable ABI convention allowing automatic handling of memory import merging in this case based on stack_start -> stack_startA + stack_startB, and also that the concept of relying on relocatable sections existing will just contribute to fragmenting linker ABI assumptions. But I have no leverage apart from purely saying so in these discussions!","At least this sets the current interface assumptions.
I tend to think detection of a global mutable export like cur_stack_pointer and a global const like stack_start, should be a detectable ABI convention allowing automatic handling of memory import merging in this case based on stack_start -> stack_startA + stack_startB, and also that the concept of relying on relocatable sections existing will just contribute to fragmenting linker ABI assumptions. But I have no leverage apart from purely saying so in these discussions!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,486,2017-06-09T08:50:22Z,2017-06-09T17:18:59Z,2017-06-14T07:12:41Z,MERGED,True,17,0,1,https://github.com/guybedford,Disable memory imports/exports in linker,1,[],https://github.com/WebAssembly/wabt/pull/486,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/486#issuecomment-307448090,"At least this sets the current interface assumptions.
I tend to think detection of a global mutable export like cur_stack_pointer and a global const like stack_start, should be a detectable ABI convention allowing automatic handling of memory import merging in this case based on stack_start -> stack_startA + stack_startB, and also that the concept of relying on relocatable sections existing will just contribute to fragmenting linker ABI assumptions. But I have no leverage apart from purely saying so in these discussions!",I agree regarding the stack pointer handling. The linker can/should be able to detect which global is the stack pointer and unify/handle accordingly.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,486,2017-06-09T08:50:22Z,2017-06-09T17:18:59Z,2017-06-14T07:12:41Z,MERGED,True,17,0,1,https://github.com/guybedford,Disable memory imports/exports in linker,1,[],https://github.com/WebAssembly/wabt/pull/486,https://github.com/guybedford,3,https://github.com/WebAssembly/wabt/pull/486#issuecomment-308340493,"At least this sets the current interface assumptions.
I tend to think detection of a global mutable export like cur_stack_pointer and a global const like stack_start, should be a detectable ABI convention allowing automatic handling of memory import merging in this case based on stack_start -> stack_startA + stack_startB, and also that the concept of relying on relocatable sections existing will just contribute to fragmenting linker ABI assumptions. But I have no leverage apart from purely saying so in these discussions!","@sbc100 from a contract point of view it's definitely worth having more early errors for that case, as the ability to get halfway there is what led to a false sense of progress. As a naive user I just assumed that any wasm binary should be linkable in the sense that one can statically merge it with another, based on a stack/memory merge strategy or an import/export merge strategy when multiple memories are supported. Having to have a specific type of binary to be able to link just seemed to break the naive mental model I had (and largely because I'm speaking as a lazy JS dev here!).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,487,2017-06-09T16:56:45Z,2017-06-09T23:09:36Z,2017-06-09T23:09:38Z,MERGED,True,42,71,8,https://github.com/binji,Use C++ callbacks in BindingHash::FindDuplicates,1,[],https://github.com/WebAssembly/wabt/pull/487,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/487,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,488,2017-06-09T16:56:56Z,2017-06-09T22:05:17Z,2017-06-09T22:05:20Z,MERGED,True,106,134,3,https://github.com/binji,Use C++ class for HostImportDelegate,1,[],https://github.com/WebAssembly/wabt/pull/488,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/488,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,490,2017-06-10T20:17:01Z,2017-06-11T23:32:08Z,2017-06-11T23:32:11Z,MERGED,True,6788,5532,18,https://github.com/KarlSchimpf,Add syntax for try blocks to the wast parser.,12,[],https://github.com/WebAssembly/wabt/pull/490,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/490,"Adds the syntax for the proposed try blocks to the wast parser.
Currently only wast2wasm knows about this syntax (using the CL argument ""--except""),
Added two tests (in test-exceptions) that are incomplete, but do parse.
Also modified the wast parser so that debugging can be turned on (see wast2wasm --debug-parser flag).","Adds the syntax for the proposed try blocks to the wast parser.
Currently only wast2wasm knows about this syntax (using the CL argument ""--except""),
Added two tests (in test-exceptions) that are incomplete, but do parse.
Also modified the wast parser so that debugging can be turned on (see wast2wasm --debug-parser flag).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,490,2017-06-10T20:17:01Z,2017-06-11T23:32:08Z,2017-06-11T23:32:11Z,MERGED,True,6788,5532,18,https://github.com/KarlSchimpf,Add syntax for try blocks to the wast parser.,12,[],https://github.com/WebAssembly/wabt/pull/490,https://github.com/KarlSchimpf,2,https://github.com/WebAssembly/wabt/pull/490#issuecomment-307649155,"Adds the syntax for the proposed try blocks to the wast parser.
Currently only wast2wasm knows about this syntax (using the CL argument ""--except""),
Added two tests (in test-exceptions) that are incomplete, but do parse.
Also modified the wast parser so that debugging can be turned on (see wast2wasm --debug-parser flag).","Fixed issues, ready for review.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,491,2017-06-11T03:26:40Z,2017-06-14T08:07:15Z,2017-06-14T08:07:18Z,MERGED,True,882,318,16,https://github.com/binji,Add wasm2wast functionality,1,[],https://github.com/WebAssembly/wabt/pull/491,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/491,"Add demo index landing page
Move old demo index -> wast2wasm/index.html
Add demo for wasm2wast
Fix wast2wasm example (i64 -> (result i64))
Fix bug in BinaryReaderIR w/ debug names:
The debug name don't have a '$', and add it in when converting to IR.
This worked properly for func->name, but wasn't updated for the func
bindings.
Fix bug when setting default values in JS:
foo || true will never be false, need to check for undefined
specifically.
Fix bug in allocateBuffer; the offset in TypedArray.set is the
offset of the source buffer not the destination. You have to create a
new view to change the destination offset.
Add new functionality to the emscripten build:

Read binary file into WasmModule
Converting from WasmScript/WasmModule to text or binary


Wrap libwabt.js module in IIFE so as to not pollute the global
namespace with emscripten junk","Add demo index landing page
Move old demo index -> wast2wasm/index.html
Add demo for wasm2wast
Fix wast2wasm example (i64 -> (result i64))
Fix bug in BinaryReaderIR w/ debug names:
The debug name don't have a '$', and add it in when converting to IR.
This worked properly for func->name, but wasn't updated for the func
bindings.
Fix bug when setting default values in JS:
foo || true will never be false, need to check for undefined
specifically.
Fix bug in allocateBuffer; the offset in TypedArray.set is the
offset of the source buffer not the destination. You have to create a
new view to change the destination offset.
Add new functionality to the emscripten build:

Read binary file into WasmModule
Converting from WasmScript/WasmModule to text or binary


Wrap libwabt.js module in IIFE so as to not pollute the global
namespace with emscripten junk",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,491,2017-06-11T03:26:40Z,2017-06-14T08:07:15Z,2017-06-14T08:07:18Z,MERGED,True,882,318,16,https://github.com/binji,Add wasm2wast functionality,1,[],https://github.com/WebAssembly/wabt/pull/491,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/491#issuecomment-308278358,"Add demo index landing page
Move old demo index -> wast2wasm/index.html
Add demo for wasm2wast
Fix wast2wasm example (i64 -> (result i64))
Fix bug in BinaryReaderIR w/ debug names:
The debug name don't have a '$', and add it in when converting to IR.
This worked properly for func->name, but wasn't updated for the func
bindings.
Fix bug when setting default values in JS:
foo || true will never be false, need to check for undefined
specifically.
Fix bug in allocateBuffer; the offset in TypedArray.set is the
offset of the source buffer not the destination. You have to create a
new view to change the destination offset.
Add new functionality to the emscripten build:

Read binary file into WasmModule
Converting from WasmScript/WasmModule to text or binary


Wrap libwabt.js module in IIFE so as to not pollute the global
namespace with emscripten junk","@sbc100 mind taking a look? It's kind of a big change, so I could look at breaking it up if that helps.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,492,2017-06-12T00:15:22Z,2017-06-12T23:10:18Z,2017-06-12T23:10:20Z,MERGED,True,880,816,19,https://github.com/binji,Use CamelCase names and member functions in ir.h,3,[],https://github.com/WebAssembly/wabt/pull/492,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/492,"Remove destroy_var; use destructor instead
Add Var copy/move constructor/assignment operator.","Remove destroy_var; use destructor instead
Add Var copy/move constructor/assignment operator.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,494,2017-06-12T19:00:19Z,2017-06-13T21:25:11Z,2017-06-13T21:25:15Z,MERGED,True,7258,6606,24,https://github.com/KarlSchimpf,Add exception declarations and examples.,16,[],https://github.com/WebAssembly/wabt/pull/494,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/494,"Extends the wast parser to recognize exception declarations, including local, imported, and exported.
Also fixed labeling issues with try blocks and rethrows. Fixes catch_all section that doesn't get an arguments.
Adds examples of these new extensions. Also updates the examples to include throws and rethrows.","Extends the wast parser to recognize exception declarations, including local, imported, and exported.
Also fixed labeling issues with try blocks and rethrows. Fixes catch_all section that doesn't get an arguments.
Adds examples of these new extensions. Also updates the examples to include throws and rethrows.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,497,2017-06-13T23:00:18Z,2017-06-14T08:07:49Z,2017-06-14T08:07:52Z,MERGED,True,600,817,17,https://github.com/binji,Make OptionParser into C++ class,2,[],https://github.com/WebAssembly/wabt/pull/497,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/497,"Added a new feature where you can specify how many arguments are
allowed. It is an error to provide too many or too few.
Also add ""help"" tests for all of the other tools.","Added a new feature where you can specify how many arguments are
allowed. It is an error to provide too many or too few.
Also add ""help"" tests for all of the other tools.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,498,2017-06-14T00:33:05Z,2017-06-14T02:32:04Z,2017-06-14T02:32:06Z,MERGED,True,17,14,3,https://github.com/binji,Fix emscripten build,1,[],https://github.com/WebAssembly/wabt/pull/498,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/498,This was broken after I refactored the lexer.,This was broken after I refactored the lexer.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,499,2017-06-14T00:38:05Z,2017-06-14T02:32:15Z,2017-06-14T02:32:17Z,MERGED,True,15,3,2,https://github.com/binji,Fix bug in BinaryReaderIR w/ debug names,1,[],https://github.com/WebAssembly/wabt/pull/499,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/499,"The debug name don't have a '$', and add it in when converting to IR.
This worked properly for func->name, but wasn't updated for the func
bindings.","The debug name don't have a '$', and add it in when converting to IR.
This worked properly for func->name, but wasn't updated for the func
bindings.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,500,2017-06-15T23:44:27Z,2017-06-19T17:17:47Z,2017-06-19T17:17:49Z,MERGED,True,250,257,15,https://github.com/binji,Rewrite wabt::Opcode as C++ class,1,[],https://github.com/WebAssembly/wabt/pull/500,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/500,"The class stores just one enum, so should be optimized to be passed as a
register. Since it is an object, the get_opcode_* accessors can now be
members:
get_opcode_name(opcode) => opcode.GetName()

One side-effect of this change is that the opcode enumeration does not
match its binary encoding. This is a potential source of errors, but
will allows us to use a contiguous set of values for the enumeration, so
Opcode::GetInfo is an O(1) lookup. It will also be beneficial when
adding operators with prefixed encodings.","The class stores just one enum, so should be optimized to be passed as a
register. Since it is an object, the get_opcode_* accessors can now be
members:
get_opcode_name(opcode) => opcode.GetName()

One side-effect of this change is that the opcode enumeration does not
match its binary encoding. This is a potential source of errors, but
will allows us to use a contiguous set of values for the enumeration, so
Opcode::GetInfo is an O(1) lookup. It will also be beneficial when
adding operators with prefixed encodings.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,500,2017-06-15T23:44:27Z,2017-06-19T17:17:47Z,2017-06-19T17:17:49Z,MERGED,True,250,257,15,https://github.com/binji,Rewrite wabt::Opcode as C++ class,1,[],https://github.com/WebAssembly/wabt/pull/500,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/500#issuecomment-308894890,"The class stores just one enum, so should be optimized to be passed as a
register. Since it is an object, the get_opcode_* accessors can now be
members:
get_opcode_name(opcode) => opcode.GetName()

One side-effect of this change is that the opcode enumeration does not
match its binary encoding. This is a potential source of errors, but
will allows us to use a contiguous set of values for the enumeration, so
Opcode::GetInfo is an O(1) lookup. It will also be beneficial when
adding operators with prefixed encodings.","I was looking into what it would take to add the saturating float->int operators, and realized they can't be added without changing the way we handle operator encodings.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,500,2017-06-15T23:44:27Z,2017-06-19T17:17:47Z,2017-06-19T17:17:49Z,MERGED,True,250,257,15,https://github.com/binji,Rewrite wabt::Opcode as C++ class,1,[],https://github.com/WebAssembly/wabt/pull/500,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/500#issuecomment-309502720,"The class stores just one enum, so should be optimized to be passed as a
register. Since it is an object, the get_opcode_* accessors can now be
members:
get_opcode_name(opcode) => opcode.GetName()

One side-effect of this change is that the opcode enumeration does not
match its binary encoding. This is a potential source of errors, but
will allows us to use a contiguous set of values for the enumeration, so
Opcode::GetInfo is an O(1) lookup. It will also be beneficial when
adding operators with prefixed encodings.",@KarlSchimpf ping,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,501,2017-06-16T00:31:59Z,2017-06-16T00:37:42Z,2017-06-16T00:37:43Z,MERGED,True,45,4,1,https://github.com/binji,Add some documentation for building on Windows,1,[],https://github.com/WebAssembly/wabt/pull/501,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/501,See issue #496.,See issue #496.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,502,2017-06-16T01:31:06Z,2017-06-17T00:32:19Z,2017-06-17T00:32:21Z,MERGED,True,9,19,2,https://github.com/binji,Use custom command to copy to bin/,1,[],https://github.com/WebAssembly/wabt/pull/502,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/502,"The last build will always be in the bin directory. This also means that
make install will install to the ""normal"" place for that OS, e.g.
/usr/local/bin.
Fixes #495.","The last build will always be in the bin directory. This also means that
make install will install to the ""normal"" place for that OS, e.g.
/usr/local/bin.
Fixes #495.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,503,2017-06-16T20:26:43Z,2017-06-20T01:34:07Z,2017-06-20T01:34:10Z,MERGED,True,325,554,1,https://github.com/binji,Share float parse code literal.cc with templates,2,[],https://github.com/WebAssembly/wabt/pull/503,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/503,"This will make it easier to update the parser to disallow out-of-range
hexfloat values (added recently to the spec parser).","This will make it easier to update the parser to disallow out-of-range
hexfloat values (added recently to the spec parser).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,503,2017-06-16T20:26:43Z,2017-06-20T01:34:07Z,2017-06-20T01:34:10Z,MERGED,True,325,554,1,https://github.com/binji,Share float parse code literal.cc with templates,2,[],https://github.com/WebAssembly/wabt/pull/503,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/503#issuecomment-309553749,"This will make it easier to update the parser to disallow out-of-range
hexfloat values (added recently to the spec parser).","BTW: I ran the hexfloat tests locally after this change. Unfortunately, these tests don't run on the bots because they're too slow.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,503,2017-06-16T20:26:43Z,2017-06-20T01:34:07Z,2017-06-20T01:34:10Z,MERGED,True,325,554,1,https://github.com/binji,Share float parse code literal.cc with templates,2,[],https://github.com/WebAssembly/wabt/pull/503,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/503#issuecomment-309618904,"This will make it easier to update the parser to disallow out-of-range
hexfloat values (added recently to the spec parser).","No missing preposition, but I could word it better. EDIT: Oh, yeah maybe ""in"" :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,504,2017-06-17T02:11:17Z,2017-06-19T00:14:06Z,2017-06-30T18:18:26Z,MERGED,True,1,0,1,https://github.com/sbc100,Add USES_TERMINAL to run-tests cmake target,1,[],https://github.com/WebAssembly/wabt/pull/504,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/504,"This means that when run via ninja the output is sent
directly to the TTY rather then buffered, which in
turn means test output is displayed as it happens
and using the single-line TTY-based output method.","This means that when run via ninja the output is sent
directly to the TTY rather then buffered, which in
turn means test output is displayed as it happens
and using the single-line TTY-based output method.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,505,2017-06-17T03:32:32Z,2017-06-19T00:13:41Z,2017-06-19T00:13:43Z,MERGED,True,15,4,4,https://github.com/sbc100,Error out of parse errors in gen-wasm.py,1,[],https://github.com/WebAssembly/wabt/pull/505,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/505,"Previously gen-wasm.py would return 0 on parse errors
rather than bailing out and causing tests to fail.","Previously gen-wasm.py would return 0 on parse errors
rather than bailing out and causing tests to fail.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,506,2017-06-17T17:55:50Z,2017-06-17T23:32:51Z,2017-06-18T00:31:24Z,MERGED,True,3524,3308,8,https://github.com/KarlSchimpf,Modify lexer to look past parenthesis when needed for conflicts.,17,[],https://github.com/WebAssembly/wabt/pull/506,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/506,"One of the problems with the wast parser is that the s-expression rules are difficult to write because one needs to look past the parenthesis (to the following opcode) to resolve conflicts.
Because of this, one needs to be very careful, and write right-recursive rules, to avoid conflicts in the generated LR parser. This not only complicates grammar updates, but forces the parse stack to be unbounded.
This PR focuses on fixing this problem, by allowing the generation of tokens of the form LPAR_NAME for tokens ""LPAR ""NAME"". These tokens can be used in the grammar to disambiguate rules containing
LPAR NAME
with
LPAR_NAME LPAR NAME
to remove shift/reduce conflicts in the grammar.
This new lexing capability is used to simplify  the s-expression form of catch blocks.","One of the problems with the wast parser is that the s-expression rules are difficult to write because one needs to look past the parenthesis (to the following opcode) to resolve conflicts.
Because of this, one needs to be very careful, and write right-recursive rules, to avoid conflicts in the generated LR parser. This not only complicates grammar updates, but forces the parse stack to be unbounded.
This PR focuses on fixing this problem, by allowing the generation of tokens of the form LPAR_NAME for tokens ""LPAR ""NAME"". These tokens can be used in the grammar to disambiguate rules containing
LPAR NAME
with
LPAR_NAME LPAR NAME
to remove shift/reduce conflicts in the grammar.
This new lexing capability is used to simplify  the s-expression form of catch blocks.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,506,2017-06-17T17:55:50Z,2017-06-17T23:32:51Z,2017-06-18T00:31:24Z,MERGED,True,3524,3308,8,https://github.com/KarlSchimpf,Modify lexer to look past parenthesis when needed for conflicts.,17,[],https://github.com/WebAssembly/wabt/pull/506,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/506#issuecomment-309248767,"One of the problems with the wast parser is that the s-expression rules are difficult to write because one needs to look past the parenthesis (to the following opcode) to resolve conflicts.
Because of this, one needs to be very careful, and write right-recursive rules, to avoid conflicts in the generated LR parser. This not only complicates grammar updates, but forces the parse stack to be unbounded.
This PR focuses on fixing this problem, by allowing the generation of tokens of the form LPAR_NAME for tokens ""LPAR ""NAME"". These tokens can be used in the grammar to disambiguate rules containing
LPAR NAME
with
LPAR_NAME LPAR NAME
to remove shift/reduce conflicts in the grammar.
This new lexing capability is used to simplify  the s-expression form of catch blocks.","Thanks, looks much nicer!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,508,2017-06-19T01:00:51Z,2017-06-19T17:00:06Z,2017-06-19T17:00:08Z,MERGED,True,20,30,11,https://github.com/binji,Remove option default macros,1,[],https://github.com/WebAssembly/wabt/pull/508,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/508,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,509,2017-06-19T01:01:13Z,2017-06-19T16:59:52Z,2017-06-19T16:59:54Z,MERGED,True,525,527,5,https://github.com/binji,Enable and fix warnings for re2c,1,[],https://github.com/WebAssembly/wabt/pull/509,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/509,"Fix argument parsing in FindRE2C to allow multiple flags
Condition enum must be generated by re2c
A couple of characters didn't need to be escaped: / and ^
<LINE_COMMENT> [^\n]* allowed empty strings
<*> [^] conflicted with similar states in other conditions","Fix argument parsing in FindRE2C to allow multiple flags
Condition enum must be generated by re2c
A couple of characters didn't need to be escaped: / and ^
<LINE_COMMENT> [^\n]* allowed empty strings
<*> [^] conflicted with similar states in other conditions",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,510,2017-06-19T01:06:00Z,2017-06-19T17:00:21Z,2017-06-19T18:39:26Z,MERGED,True,199,5,2,https://github.com/binji,Fix for writing wat file with long indentation,1,[],https://github.com/WebAssembly/wabt/pull/510,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/510,"There was a dumb infinite loop because of confusion between indent and
indent_.","There was a dumb infinite loop because of confusion between indent and
indent_.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,511,2017-06-19T17:28:56Z,2017-06-19T18:14:10Z,2017-06-19T18:14:12Z,MERGED,True,5,1,1,https://github.com/binji,Check for USES_TERMINAL support in CMakeLists.txt,1,[],https://github.com/WebAssembly/wabt/pull/511,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/511,Without this you get a weird error on older versions of CMake.,Without this you get a weird error on older versions of CMake.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,512,2017-06-19T18:42:55Z,2017-06-22T01:05:57Z,2017-06-22T01:06:00Z,MERGED,True,32,0,2,https://github.com/sbc100,Allow duplicate names in the name section,2,[],https://github.com/WebAssembly/wabt/pull/512,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/512,"While this was previously allowed, it would result
in an invalid wast file since mutliple functions
would end up with the same name.
When generating labels we now add a unique numeric
suffix (.1, .2 etc) a la llvm-link.
We could add magic behaviour to strip these out
again when producing the name sectio in wast2wasm
which would allow for cleaner roundtrip, but might
cuase confusion/issues for those who might want
to legitametly name thier functions with such
suffixes.","While this was previously allowed, it would result
in an invalid wast file since mutliple functions
would end up with the same name.
When generating labels we now add a unique numeric
suffix (.1, .2 etc) a la llvm-link.
We could add magic behaviour to strip these out
again when producing the name sectio in wast2wasm
which would allow for cleaner roundtrip, but might
cuase confusion/issues for those who might want
to legitametly name thier functions with such
suffixes.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,513,2017-06-20T01:13:02Z,2017-06-20T01:25:19Z,2017-06-20T01:25:21Z,MERGED,True,225,161,2,https://github.com/binji,Move testing info into test/README.md,1,[],https://github.com/WebAssembly/wabt/pull/513,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/513,Also update some of the information there.,Also update some of the information there.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,514,2017-06-20T21:35:58Z,2017-06-22T14:59:10Z,2017-06-22T14:59:57Z,MERGED,True,1034,782,28,https://github.com/KarlSchimpf,Fix the validator to be able to validate exception handling constructs.,35,[],https://github.com/WebAssembly/wabt/pull/514,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/514,"Fixes the validator to be able to validate exception handling constructs.
Also updates:
the expr-visitor to be able to handle exception constructs.
the name resolver to be able to handle exception constructs.
the type checker to be able to handle exception constructs.

Also updates wast-desugar to be able to turn on debugging of the wast parser.","Fixes the validator to be able to validate exception handling constructs.
Also updates:
the expr-visitor to be able to handle exception constructs.
the name resolver to be able to handle exception constructs.
the type checker to be able to handle exception constructs.

Also updates wast-desugar to be able to turn on debugging of the wast parser.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,514,2017-06-20T21:35:58Z,2017-06-22T14:59:10Z,2017-06-22T14:59:57Z,MERGED,True,1034,782,28,https://github.com/KarlSchimpf,Fix the validator to be able to validate exception handling constructs.,35,[],https://github.com/WebAssembly/wabt/pull/514,https://github.com/KarlSchimpf,2,https://github.com/WebAssembly/wabt/pull/514#issuecomment-310200889,"Fixes the validator to be able to validate exception handling constructs.
Also updates:
the expr-visitor to be able to handle exception constructs.
the name resolver to be able to handle exception constructs.
the type checker to be able to handle exception constructs.

Also updates wast-desugar to be able to turn on debugging of the wast parser.","This PR is ready to reviewed again.
Note: The bots are failing due to ""memory"" leakage of 4 bytes when there is an error on the ""throw"" or the ""rethrow"" Expr. I haven't figured out the cause yet.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,514,2017-06-20T21:35:58Z,2017-06-22T14:59:10Z,2017-06-22T14:59:57Z,MERGED,True,1034,782,28,https://github.com/KarlSchimpf,Fix the validator to be able to validate exception handling constructs.,35,[],https://github.com/WebAssembly/wabt/pull/514,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/514#issuecomment-310214598,"Fixes the validator to be able to validate exception handling constructs.
Also updates:
the expr-visitor to be able to handle exception constructs.
the name resolver to be able to handle exception constructs.
the type checker to be able to handle exception constructs.

Also updates wast-desugar to be able to turn on debugging of the wast parser.",It looks like the memory leak comes from the name field of Exception. It needs to be destroyed manually (still working on switching over to using string_view and std::string...),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,514,2017-06-20T21:35:58Z,2017-06-22T14:59:10Z,2017-06-22T14:59:57Z,MERGED,True,1034,782,28,https://github.com/KarlSchimpf,Fix the validator to be able to validate exception handling constructs.,35,[],https://github.com/WebAssembly/wabt/pull/514,https://github.com/KarlSchimpf,4,https://github.com/WebAssembly/wabt/pull/514#issuecomment-310216694,"Fixes the validator to be able to validate exception handling constructs.
Also updates:
the expr-visitor to be able to handle exception constructs.
the name resolver to be able to handle exception constructs.
the type checker to be able to handle exception constructs.

Also updates wast-desugar to be able to turn on debugging of the wast parser.","The problem is the name field, but it is because struct VAR, which has VERY SUBTLE constructor/assignment versions (i.e. var(Var&&) and var(const Var&), operator=(Var&&) and operator=(const Var&).
In particular, the (Var&&) version doesn't create a copy but the (const Var&) does.
I can't tell when/why each version is used (by reading the code), so I'm getting unexpected results in one context.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,514,2017-06-20T21:35:58Z,2017-06-22T14:59:10Z,2017-06-22T14:59:57Z,MERGED,True,1034,782,28,https://github.com/KarlSchimpf,Fix the validator to be able to validate exception handling constructs.,35,[],https://github.com/WebAssembly/wabt/pull/514,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/514#issuecomment-310218181,"Fixes the validator to be able to validate exception handling constructs.
Also updates:
the expr-visitor to be able to handle exception constructs.
the name resolver to be able to handle exception constructs.
the type checker to be able to handle exception constructs.

Also updates wast-desugar to be able to turn on debugging of the wast parser.","Yes, unfortunately Var needs to have a move constructor/assignment operator so it can properly handle the union members. It would be much nicer with std::variant...
But I don't see what this has to do with the memory leak.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,514,2017-06-20T21:35:58Z,2017-06-22T14:59:10Z,2017-06-22T14:59:57Z,MERGED,True,1034,782,28,https://github.com/KarlSchimpf,Fix the validator to be able to validate exception handling constructs.,35,[],https://github.com/WebAssembly/wabt/pull/514,https://github.com/KarlSchimpf,6,https://github.com/WebAssembly/wabt/pull/514#issuecomment-310220797,"Fixes the validator to be able to validate exception handling constructs.
Also updates:
the expr-visitor to be able to handle exception constructs.
the name resolver to be able to handle exception constructs.
the type checker to be able to handle exception constructs.

Also updates wast-desugar to be able to turn on debugging of the wast parser.","​​
​It happens when I call Expr::CreateThrow() and Expr::CreateRethrow() in
wast-parser.y

I haven't yet figured out whether it is due to the parameter being passed
in, or the assignment in the body of the form:

   expr->(re)throw_.var = var;

One of these two contexts is creating a duplicate string, that doesn't
happen with similar code such as Expr::CreateBr().



   ​

Karl Schimpf
…
On Wed, Jun 21, 2017 at 3:03 PM, Ben Smith ***@***.***> wrote:
 Yes, unfortunately Var needs to have a move constructor/assignment
 operator so it can properly handle the union members. It would be much
 nicer with std::variant...

 But I don't see what this has to do with the memory leak.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#514 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/ALRbV2ElQblomp0S6NaefWhIx1WESFLMks5sGZMxgaJpZM4OAMEh>
 .",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,514,2017-06-20T21:35:58Z,2017-06-22T14:59:10Z,2017-06-22T14:59:57Z,MERGED,True,1034,782,28,https://github.com/KarlSchimpf,Fix the validator to be able to validate exception handling constructs.,35,[],https://github.com/WebAssembly/wabt/pull/514,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/514#issuecomment-310230282,"Fixes the validator to be able to validate exception handling constructs.
Also updates:
the expr-visitor to be able to handle exception constructs.
the name resolver to be able to handle exception constructs.
the type checker to be able to handle exception constructs.

Also updates wast-desugar to be able to turn on debugging of the wast parser.","It happens when I call Expr::CreateThrow() and Expr::CreateRethrow() in
wast-parser.y

I don't think that's correct -- I pulled your change -- it seems that you just need to add:
Exception::~Exception() { destroy_string_slice(&name); }

That fixed the leak when I tried it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,514,2017-06-20T21:35:58Z,2017-06-22T14:59:10Z,2017-06-22T14:59:57Z,MERGED,True,1034,782,28,https://github.com/KarlSchimpf,Fix the validator to be able to validate exception handling constructs.,35,[],https://github.com/WebAssembly/wabt/pull/514,https://github.com/KarlSchimpf,8,https://github.com/WebAssembly/wabt/pull/514#issuecomment-310406483,"Fixes the validator to be able to validate exception handling constructs.
Also updates:
the expr-visitor to be able to handle exception constructs.
the name resolver to be able to handle exception constructs.
the type checker to be able to handle exception constructs.

Also updates wast-desugar to be able to turn on debugging of the wast parser.",binji - Thanks for finding the memory leak!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,515,2017-06-21T00:42:32Z,2017-06-22T20:57:22Z,2017-06-22T20:57:24Z,MERGED,True,236,77,7,https://github.com/binji,Update the testsuite; fix literal parsing issues,3,[],https://github.com/WebAssembly/wabt/pull/515,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/515,"Return error when floats overflow (used to return inf)
Significantly simplfy the significand parser in FloatParser::ParseHex
Add some new parse tests to hexfloat.cc; the previous tests only
checked valid/canonical strings","Return error when floats overflow (used to return inf)
Significantly simplfy the significand parser in FloatParser::ParseHex
Add some new parse tests to hexfloat.cc; the previous tests only
checked valid/canonical strings",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,515,2017-06-21T00:42:32Z,2017-06-22T20:57:22Z,2017-06-22T20:57:24Z,MERGED,True,236,77,7,https://github.com/binji,Update the testsuite; fix literal parsing issues,3,[],https://github.com/WebAssembly/wabt/pull/515,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/515#issuecomment-310475156,"Return error when floats overflow (used to return inf)
Significantly simplfy the significand parser in FloatParser::ParseHex
Add some new parse tests to hexfloat.cc; the previous tests only
checked valid/canonical strings",@sbc100 ping,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,516,2017-06-21T21:21:15Z,2017-06-22T20:58:26Z,2017-06-22T20:58:28Z,MERGED,True,324,143,19,https://github.com/binji,Add validation to wasm2wast,3,[],https://github.com/WebAssembly/wabt/pull/516,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/516,"Modify Location so it can reference a binary file offset
Set node locations in BinaryReaderIR
Modify SourceErrorHandler to print text or binary locations","Modify Location so it can reference a binary file offset
Set node locations in BinaryReaderIR
Modify SourceErrorHandler to print text or binary locations",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,516,2017-06-21T21:21:15Z,2017-06-22T20:58:26Z,2017-06-22T20:58:28Z,MERGED,True,324,143,19,https://github.com/binji,Add validation to wasm2wast,3,[],https://github.com/WebAssembly/wabt/pull/516,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/516#issuecomment-310212633,"Modify Location so it can reference a binary file offset
Set node locations in BinaryReaderIR
Modify SourceErrorHandler to print text or binary locations","Sorry, do you mean I should clarify the PR description?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,516,2017-06-21T21:21:15Z,2017-06-22T20:58:26Z,2017-06-22T20:58:28Z,MERGED,True,324,143,19,https://github.com/binji,Add validation to wasm2wast,3,[],https://github.com/WebAssembly/wabt/pull/516,https://github.com/KarlSchimpf,3,https://github.com/WebAssembly/wabt/pull/516#issuecomment-310213535,"Modify Location so it can reference a binary file offset
Set node locations in BinaryReaderIR
Modify SourceErrorHandler to print text or binary locations","Sorry, it appears that GitHub lost my code comments!  Will try to add them again.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,517,2017-06-22T04:32:15Z,2017-06-24T02:25:32Z,2017-06-24T02:25:34Z,MERGED,True,208,11,9,https://github.com/binji,Add color output in SourceErrorHandler,5,[],https://github.com/WebAssembly/wabt/pull/517,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/517,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,517,2017-06-22T04:32:15Z,2017-06-24T02:25:32Z,2017-06-24T02:25:34Z,MERGED,True,208,11,9,https://github.com/binji,Add color output in SourceErrorHandler,5,[],https://github.com/WebAssembly/wabt/pull/517,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/517#issuecomment-310450874,,"Good idea, I was looking at chalk to see how they check for a color terminal. Seems pretty complex, so I wanted to punt until we have users who can test them. They seem to have added a FORCE_COLOR environment variable as a top-level override, so maybe we should just follow that.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,517,2017-06-22T04:32:15Z,2017-06-24T02:25:32Z,2017-06-24T02:25:34Z,MERGED,True,208,11,9,https://github.com/binji,Add color output in SourceErrorHandler,5,[],https://github.com/WebAssembly/wabt/pull/517,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/517#issuecomment-310452505,,"yuk:
if ('TRAVIS' in env || env.CI === 'Travis') {
			return 1;

yes an override env var sounds good.  Happy to be in a followup CL",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,517,2017-06-22T04:32:15Z,2017-06-24T02:25:32Z,2017-06-24T02:25:34Z,MERGED,True,208,11,9,https://github.com/binji,Add color output in SourceErrorHandler,5,[],https://github.com/WebAssembly/wabt/pull/517,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/517#issuecomment-310458121,,"Looks like ENABLE_VIRTUAL_TERMINAL_PROCESSING is only supported in windows 10, so we should fall back to SetConsoleTextAttribute like binaryen does.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,517,2017-06-22T04:32:15Z,2017-06-24T02:25:32Z,2017-06-24T02:25:34Z,MERGED,True,208,11,9,https://github.com/binji,Add color output in SourceErrorHandler,5,[],https://github.com/WebAssembly/wabt/pull/517,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/517#issuecomment-310527290,,"OK, for now it's win10 only, and color output is disabled on Windows otherwise. ptal",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,517,2017-06-22T04:32:15Z,2017-06-24T02:25:32Z,2017-06-24T02:25:34Z,MERGED,True,208,11,9,https://github.com/binji,Add color output in SourceErrorHandler,5,[],https://github.com/WebAssembly/wabt/pull/517,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/517#issuecomment-310796690,,"Yeah, I'll add a test.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,517,2017-06-22T04:32:15Z,2017-06-24T02:25:32Z,2017-06-24T02:25:34Z,MERGED,True,208,11,9,https://github.com/binji,Add color output in SourceErrorHandler,5,[],https://github.com/WebAssembly/wabt/pull/517,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/517#issuecomment-310798562,,"Also added ability to set environment variables in test, PTAL",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,518,2017-06-22T21:10:34Z,2017-06-23T16:24:32Z,2017-06-23T16:24:36Z,MERGED,True,119,10,3,https://github.com/KarlSchimpf,Update the binary writer to handle try/catch/throw/rethrow instructions.,3,[],https://github.com/WebAssembly/wabt/pull/518,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/518,"Defines how to write the contents of exception handling instructions.
Note: It doesn't yet handle exception declarations.","Defines how to write the contents of exception handling instructions.
Note: It doesn't yet handle exception declarations.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,518,2017-06-22T21:10:34Z,2017-06-23T16:24:32Z,2017-06-23T16:24:36Z,MERGED,True,119,10,3,https://github.com/KarlSchimpf,Update the binary writer to handle try/catch/throw/rethrow instructions.,3,[],https://github.com/WebAssembly/wabt/pull/518,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/518#issuecomment-310517781,"Defines how to write the contents of exception handling instructions.
Note: It doesn't yet handle exception declarations.","Ah, I was gonna suggest you write a test -- but it looks like the tests you have are now producing output! (that's what's failing on the bots)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,519,2017-06-23T17:07:23Z,2017-06-23T18:52:30Z,2017-06-24T22:37:46Z,MERGED,True,5,2,2,https://github.com/KarlSchimpf,Fix circular array to create/destroy elements.,5,[],https://github.com/WebAssembly/wabt/pull/519,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/519,"The current implementation of a circular array did not construct/destruct the elements in its contents array. This PR fixes this problem.
Note: This problem was pointed out by @winksaville. He showed that if you compile with -Werror that you get warnings (converted to errors) about assigning to uninitialized data.
The fix is to use a placement new to construct the elements in the constructor, and to call the destructor on all elements in the destructor.","The current implementation of a circular array did not construct/destruct the elements in its contents array. This PR fixes this problem.
Note: This problem was pointed out by @winksaville. He showed that if you compile with -Werror that you get warnings (converted to errors) about assigning to uninitialized data.
The fix is to use a placement new to construct the elements in the constructor, and to call the destructor on all elements in the destructor.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,519,2017-06-23T17:07:23Z,2017-06-23T18:52:30Z,2017-06-24T22:37:46Z,MERGED,True,5,2,2,https://github.com/KarlSchimpf,Fix circular array to create/destroy elements.,5,[],https://github.com/WebAssembly/wabt/pull/519,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/519#issuecomment-310758366,"The current implementation of a circular array did not construct/destruct the elements in its contents array. This PR fixes this problem.
Note: This problem was pointed out by @winksaville. He showed that if you compile with -Werror that you get warnings (converted to errors) about assigning to uninitialized data.
The fix is to use a placement new to construct the elements in the constructor, and to call the destructor on all elements in the destructor.",But we do compile with -Werror.. are there more warnings we can enable?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,519,2017-06-23T17:07:23Z,2017-06-23T18:52:30Z,2017-06-24T22:37:46Z,MERGED,True,5,2,2,https://github.com/KarlSchimpf,Fix circular array to create/destroy elements.,5,[],https://github.com/WebAssembly/wabt/pull/519,https://github.com/KarlSchimpf,3,https://github.com/WebAssembly/wabt/pull/519#issuecomment-310758803,"The current implementation of a circular array did not construct/destruct the elements in its contents array. This PR fixes this problem.
Note: This problem was pointed out by @winksaville. He showed that if you compile with -Werror that you get warnings (converted to errors) about assigning to uninitialized data.
The fix is to use a placement new to construct the elements in the constructor, and to call the destructor on all elements in the destructor.","-Wuninitialized

Karl Schimpf
…
On Fri, Jun 23, 2017 at 12:54 PM, Sam Clegg ***@***.***> wrote:
 But we do compile with -Werror.. are there more warnings we can enable?

 —
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub
 <#519 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/ALRbV_UJqfOYS9QXUvkYNH9Se_FkejLWks5sHBf_gaJpZM4OD0dz>
 .",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,519,2017-06-23T17:07:23Z,2017-06-23T18:52:30Z,2017-06-24T22:37:46Z,MERGED,True,5,2,2,https://github.com/KarlSchimpf,Fix circular array to create/destroy elements.,5,[],https://github.com/WebAssembly/wabt/pull/519,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/519#issuecomment-310768131,"The current implementation of a circular array did not construct/destruct the elements in its contents array. This PR fixes this problem.
Note: This problem was pointed out by @winksaville. He showed that if you compile with -Werror that you get warnings (converted to errors) about assigning to uninitialized data.
The fix is to use a placement new to construct the elements in the constructor, and to call the destructor on all elements in the destructor.",Hmm strange.. we run with -Wall which according to the manual includes -Wuninitialized.  Perhaps its a particular new version of clang/gcc that is better at finding cases?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,519,2017-06-23T17:07:23Z,2017-06-23T18:52:30Z,2017-06-24T22:37:46Z,MERGED,True,5,2,2,https://github.com/KarlSchimpf,Fix circular array to create/destroy elements.,5,[],https://github.com/WebAssembly/wabt/pull/519,https://github.com/winksaville,5,https://github.com/WebAssembly/wabt/pull/519#issuecomment-310867055,"The current implementation of a circular array did not construct/destruct the elements in its contents array. This PR fixes this problem.
Note: This problem was pointed out by @winksaville. He showed that if you compile with -Werror that you get warnings (converted to errors) about assigning to uninitialized data.
The fix is to use a placement new to construct the elements in the constructor, and to call the destructor on all elements in the destructor.","I'm using 7.1.1 of c++:
$ /usr/bin/c++ --version
c++ (GCC) 7.1.1 20170516
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

And I'm still seeing the error:
$ make build-wabt
ninja -C /home/wink/prgs/llvmwasm-builder/build/wabt -j 3
ninja: Entering directory `/home/wink/prgs/llvmwasm-builder/build/wabt'
[8/59] Building CXX object CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o
FAILED: CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o 
/usr/bin/c++  -D__STDC_FORMAT_MACROS=1 -D__STDC_LIMIT_MACROS=1 -I/home/wink/prgs/llvmwasm-builder/src/wabt/src -I. -I/home/wink/prgs/llvmwasm-builder/src/wabt/third_party/gtest/googletest -I/home/wink/prgs/llvmwasm-builder/src/wabt/third_party/gtest/googletest/include -O3 -DNDEBUG   -Wall -Wextra -Werror -Wno-unused-parameter -Wpointer-arith -g -std=c++11 -Wold-style-cast -Wuninitialized -fno-exceptions -Wno-clobbered -MD -MT CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o -MF CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o.d -o CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o -c wast-lexer-gen.cc
In file included from /home/wink/prgs/llvmwasm-builder/src/wabt/src/wast-lexer.cc:24:0:
/home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h: In member function ‘void wabt::WastLexer::PushLookaheadToken()’:
/home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h:91:5: error: ‘tok’ is used uninitialized in this function [-Werror=uninitialized]
     contents_[position(size_++)] = value;
     ^~~~~~~~~
/home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h: In member function ‘void wabt::WastLexer::SetLookaheadToken(int)’:
/home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h:91:5: error: ‘tok’ is used uninitialized in this function [-Werror=uninitialized]
     contents_[position(size_++)] = value;
     ^~~~~~~~~
/home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h: In member function ‘int wabt::WastLexer::GetToken(wabt::Token*, wabt::Location*, wabt::WastParser*)’:
/home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h:91:5: error: ‘tok’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
     contents_[position(size_++)] = value;
     ^~~~~~~~~
/home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h:91:5: error: ‘tok’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
     contents_[position(size_++)] = value;
     ^~~~~~~~~
cc1plus: all warnings being treated as errors
[10/59] Building CXX object CMakeFiles/libwabt.dir/src/binary-reader-logging.cc.o
ninja: build stopped: subcommand failed.
make: *** [Makefile:106: build-wabt] Error 1

My ToT is:
$ git log -1
commit 4df75ce065c26b0c0244964e924692f19df17111 (HEAD -> master, origin/master, origin/HEAD)
Author: KarlSchimpf <karlschimpf@gmail.com>
Date:   Sat Jun 24 08:29:15 2017 -0700

    Fix binary writer to handle exception declarations. (#526)
    
    * Binry binary exception declarations.
    
    * Fix exception test that now succeed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,519,2017-06-23T17:07:23Z,2017-06-23T18:52:30Z,2017-06-24T22:37:46Z,MERGED,True,5,2,2,https://github.com/KarlSchimpf,Fix circular array to create/destroy elements.,5,[],https://github.com/WebAssembly/wabt/pull/519,https://github.com/KarlSchimpf,6,https://github.com/WebAssembly/wabt/pull/519#issuecomment-310868597,"The current implementation of a circular array did not construct/destruct the elements in its contents array. This PR fixes this problem.
Note: This problem was pointed out by @winksaville. He showed that if you compile with -Werror that you get warnings (converted to errors) about assigning to uninitialized data.
The fix is to use a placement new to construct the elements in the constructor, and to call the destructor on all elements in the destructor.","​The one flag you are using, that I can't repeat on the version of clang I
have is -Wno-clobber. Without it, I do not get any errors (or warnings).

I'm not sure at the moment how to ""fix"" since I can't repeat!

Karl Schimpf
…
On Sat, Jun 24, 2017 at 2:31 PM, Wink Saville ***@***.***> wrote:
 I'm using 7.1.1 of c++:

 $ /usr/bin/c++ --version
 c++ (GCC) 7.1.1 20170516
 Copyright (C) 2017 Free Software Foundation, Inc.
 This is free software; see the source for copying conditions.  There is NO
 warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

 And I'm still seeing the error:

 $ make build-wabt
 ninja -C /home/wink/prgs/llvmwasm-builder/build/wabt -j 3
 ninja: Entering directory `/home/wink/prgs/llvmwasm-builder/build/wabt'
 [8/59] Building CXX object CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o
 FAILED: CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o
 /usr/bin/c++  -D__STDC_FORMAT_MACROS=1 -D__STDC_LIMIT_MACROS=1 -I/home/wink/prgs/llvmwasm-builder/src/wabt/src -I. -I/home/wink/prgs/llvmwasm-builder/src/wabt/third_party/gtest/googletest -I/home/wink/prgs/llvmwasm-builder/src/wabt/third_party/gtest/googletest/include -O3 -DNDEBUG   -Wall -Wextra -Werror -Wno-unused-parameter -Wpointer-arith -g -std=c++11 -Wold-style-cast -Wuninitialized -fno-exceptions -Wno-clobbered -MD -MT CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o -MF CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o.d -o CMakeFiles/libwabt.dir/wast-lexer-gen.cc.o -c wast-lexer-gen.cc
 In file included from /home/wink/prgs/llvmwasm-builder/src/wabt/src/wast-lexer.cc:24:0:
 /home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h: In member function ‘void wabt::WastLexer::PushLookaheadToken()’:
 /home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h:91:5: error: ‘tok’ is used uninitialized in this function [-Werror=uninitialized]
      contents_[position(size_++)] = value;
      ^~~~~~~~~
 /home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h: In member function ‘void wabt::WastLexer::SetLookaheadToken(int)’:
 /home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h:91:5: error: ‘tok’ is used uninitialized in this function [-Werror=uninitialized]
      contents_[position(size_++)] = value;
      ^~~~~~~~~
 /home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h: In member function ‘int wabt::WastLexer::GetToken(wabt::Token*, wabt::Location*, wabt::WastParser*)’:
 /home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h:91:5: error: ‘tok’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
      contents_[position(size_++)] = value;
      ^~~~~~~~~
 /home/wink/prgs/llvmwasm-builder/src/wabt/src/circular-array.h:91:5: error: ‘tok’ may be used uninitialized in this function [-Werror=maybe-uninitialized]
      contents_[position(size_++)] = value;
      ^~~~~~~~~
 cc1plus: all warnings being treated as errors
 [10/59] Building CXX object CMakeFiles/libwabt.dir/src/binary-reader-logging.cc.o
 ninja: build stopped: subcommand failed.
 make: *** [Makefile:106: build-wabt] Error 1

 My ToT is:

 $ git log -1
 commit 4df75ce (HEAD -> master, origin/master, origin/HEAD)
 Author: KarlSchimpf ***@***.***>
 Date:   Sat Jun 24 08:29:15 2017 -0700

     Fix binary writer to handle exception declarations. (#526)

     * Binry binary exception declarations.

     * Fix exception test that now succeed.

 —
 You are receiving this because you modified the open/close state.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,519,2017-06-23T17:07:23Z,2017-06-23T18:52:30Z,2017-06-24T22:37:46Z,MERGED,True,5,2,2,https://github.com/KarlSchimpf,Fix circular array to create/destroy elements.,5,[],https://github.com/WebAssembly/wabt/pull/519,https://github.com/winksaville,7,https://github.com/WebAssembly/wabt/pull/519#issuecomment-310868734,"The current implementation of a circular array did not construct/destruct the elements in its contents array. This PR fixes this problem.
Note: This problem was pointed out by @winksaville. He showed that if you compile with -Werror that you get warnings (converted to errors) about assigning to uninitialized data.
The fix is to use a placement new to construct the elements in the constructor, and to call the destructor on all elements in the destructor.",I've created PR #530 which fixes it for me using GCC c++ 7.1.1,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,519,2017-06-23T17:07:23Z,2017-06-23T18:52:30Z,2017-06-24T22:37:46Z,MERGED,True,5,2,2,https://github.com/KarlSchimpf,Fix circular array to create/destroy elements.,5,[],https://github.com/WebAssembly/wabt/pull/519,https://github.com/winksaville,8,https://github.com/WebAssembly/wabt/pull/519#issuecomment-310869965,"The current implementation of a circular array did not construct/destruct the elements in its contents array. This PR fixes this problem.
Note: This problem was pointed out by @winksaville. He showed that if you compile with -Werror that you get warnings (converted to errors) about assigning to uninitialized data.
The fix is to use a placement new to construct the elements in the constructor, and to call the destructor on all elements in the destructor.","Just tested ToT with PR #530 and all is well, txs!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,520,2017-06-23T19:40:02Z,2017-06-23T23:01:07Z,2017-06-23T23:01:10Z,MERGED,True,203,61,6,https://github.com/sbc100,Improve display of data segments,3,[],https://github.com/WebAssembly/wabt/pull/520,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/520,"Use the virtual address (init offset) when display
the data rather that the file offset.
Show the segment size in the header.","Use the virtual address (init offset) when display
the data rather that the file offset.
Show the segment size in the header.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,521,2017-06-23T19:49:22Z,2017-06-23T20:46:01Z,2017-06-23T20:46:04Z,MERGED,True,22,22,22,https://github.com/sbc100,Consistent comments when ending anonymous namespace,2,[],https://github.com/WebAssembly/wabt/pull/521,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/521,This matches the wording prefered by llvm.,This matches the wording prefered by llvm.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,522,2017-06-23T19:50:24Z,2017-06-23T19:50:36Z,2017-06-23T19:50:38Z,MERGED,True,1,1,1,https://github.com/sbc100,Fix spelling error from #483,1,[],https://github.com/WebAssembly/wabt/pull/522,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/522,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,523,2017-06-23T20:37:15Z,2017-06-23T21:13:05Z,2017-06-23T21:13:08Z,MERGED,True,60,8,7,https://github.com/KarlSchimpf,Fix dereference of null pointer in validator.,3,[],https://github.com/WebAssembly/wabt/pull/523,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/523,"Discovered that one of the exception tests was failing because of a null pointer dereference. This CL fixes the problem.
It also adds -v to exception test files (with exceptions) so that we are capturing how the constructs are being compiled into the binary form.","Discovered that one of the exception tests was failing because of a null pointer dereference. This CL fixes the problem.
It also adds -v to exception test files (with exceptions) so that we are capturing how the constructs are being compiled into the binary form.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,524,2017-06-23T21:23:50Z,2017-06-24T01:42:00Z,2017-06-26T20:27:01Z,MERGED,True,1308,1460,14,https://github.com/binji,Refactor Expr as class hierarchy instead of union,2,[],https://github.com/WebAssembly/wabt/pull/524,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/524,"This has the benefit of making things much more type-safe, as well as
simplifying destroying member variables.
For now, many of the members are still raw pointers, but they probably
should become unique_ptrs or ordinary values.","This has the benefit of making things much more type-safe, as well as
simplifying destroying member variables.
For now, many of the members are still raw pointers, but they probably
should become unique_ptrs or ordinary values.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,525,2017-06-23T21:52:25Z,2017-09-01T00:40:41Z,2017-09-01T00:40:44Z,MERGED,True,20,18,4,https://github.com/sbc100,Add type check to data segment offset,2,[],https://github.com/WebAssembly/wabt/pull/525,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/525,"This is a conservative check that we can do in the binary
reader itself.  More extensive checking is still done in the
interpreter (i.e. vefiying the type of the global).","This is a conservative check that we can do in the binary
reader itself.  More extensive checking is still done in the
interpreter (i.e. vefiying the type of the global).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,526,2017-06-23T21:55:29Z,2017-06-24T15:29:16Z,2017-06-24T15:29:22Z,MERGED,True,101,23,5,https://github.com/KarlSchimpf,Fix binary writer to handle exception declarations.,3,[],https://github.com/WebAssembly/wabt/pull/526,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/526,"Generate exception section, imported exceptions, and exported exceptions. At this point, we can successfully convert wast files with exceptions to their corresponding wasm files.
Also updates exceptions to reflect the changes.","Generate exception section, imported exceptions, and exported exceptions. At this point, we can successfully convert wast files with exceptions to their corresponding wasm files.
Also updates exceptions to reflect the changes.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,527,2017-06-23T22:04:22Z,2017-12-19T18:20:54Z,2017-12-19T18:36:38Z,CLOSED,False,1,2,1,https://github.com/sbc100,Use add add_custom_command rather than add_custom_target,1,[],https://github.com/WebAssembly/wabt/pull/527,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/527,"add_custom_target means that build is alwasy dirty and will
always execute the copy commands.  add_custom_command means
the copy will only be trigged if the binaries get rebuilt.
This means the ninja build will report nothing to do if
it is re-run without changing any inputs.","add_custom_target means that build is alwasy dirty and will
always execute the copy commands.  add_custom_command means
the copy will only be trigged if the binaries get rebuilt.
This means the ninja build will report nothing to do if
it is re-run without changing any inputs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,527,2017-06-23T22:04:22Z,2017-12-19T18:20:54Z,2017-12-19T18:36:38Z,CLOSED,False,1,2,1,https://github.com/sbc100,Use add add_custom_command rather than add_custom_target,1,[],https://github.com/WebAssembly/wabt/pull/527,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/527#issuecomment-310783291,"add_custom_target means that build is alwasy dirty and will
always execute the copy commands.  add_custom_command means
the copy will only be trigged if the binaries get rebuilt.
This means the ninja build will report nothing to do if
it is re-run without changing any inputs.","The downside is that the contents of bin is not always what you expect.. because if you do ninja -C dir1.. then ninja -C dir2.. the second ninja command might not do anything and the binaries from dir1 might still be in bin...
But its a little annoying to have a ninja build that always build stuff.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,527,2017-06-23T22:04:22Z,2017-12-19T18:20:54Z,2017-12-19T18:36:38Z,CLOSED,False,1,2,1,https://github.com/sbc100,Use add add_custom_command rather than add_custom_target,1,[],https://github.com/WebAssembly/wabt/pull/527,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/527#issuecomment-310795313,"add_custom_target means that build is alwasy dirty and will
always execute the copy commands.  add_custom_command means
the copy will only be trigged if the binaries get rebuilt.
This means the ninja build will report nothing to do if
it is re-run without changing any inputs.","Yeah, that's why I did it this way. Because sometimes I switch between a release build and a debug build, but I always want bin/ to be correct.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,527,2017-06-23T22:04:22Z,2017-12-19T18:20:54Z,2017-12-19T18:36:38Z,CLOSED,False,1,2,1,https://github.com/sbc100,Use add add_custom_command rather than add_custom_target,1,[],https://github.com/WebAssembly/wabt/pull/527,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/527#issuecomment-310799636,"add_custom_target means that build is alwasy dirty and will
always execute the copy commands.  add_custom_command means
the copy will only be trigged if the binaries get rebuilt.
This means the ninja build will report nothing to do if
it is re-run without changing any inputs.",I guess I would be OK with this if there were some way to force copy the files to bin. Maybe in the Makefile? That way I could just run that target instead and always get the behavior I want.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,527,2017-06-23T22:04:22Z,2017-12-19T18:20:54Z,2017-12-19T18:36:38Z,CLOSED,False,1,2,1,https://github.com/sbc100,Use add add_custom_command rather than add_custom_target,1,[],https://github.com/WebAssembly/wabt/pull/527,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/527#issuecomment-352842907,"add_custom_target means that build is alwasy dirty and will
always execute the copy commands.  add_custom_command means
the copy will only be trigged if the binaries get rebuilt.
This means the ninja build will report nothing to do if
it is re-run without changing any inputs.",@sbc100 any thoughts on this or should we close?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,528,2017-06-24T16:10:20Z,2017-06-24T22:08:13Z,2017-06-24T22:08:17Z,MERGED,True,16,10,4,https://github.com/KarlSchimpf,Clean up errors messages for bad rethrow instruction.,1,[],https://github.com/WebAssembly/wabt/pull/528,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/528,"Cleans up the error messages for rethrows.
In particular, it only reports on valid depth values (associated with the catch they appear in).","Cleans up the error messages for rethrows.
In particular, it only reports on valid depth values (associated with the catch they appear in).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,529,2017-06-24T19:59:12Z,2017-06-24T22:43:51Z,2017-06-24T22:43:53Z,MERGED,True,202,29,7,https://github.com/KarlSchimpf,Make wast-desugar work for exception handling.,3,[],https://github.com/WebAssembly/wabt/pull/529,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/529,"Updates generate/apply names, as well as the wat writer, allowing wast-desugar to work.
Also fixes the following nits:


Fixes NameApplier::UseNameForVar() to not leak a string slice (i.e. don't override name if
it exists).


Removes unnecessary ""Module"" arguments in class NameApplier (it is already a field).","Updates generate/apply names, as well as the wat writer, allowing wast-desugar to work.
Also fixes the following nits:


Fixes NameApplier::UseNameForVar() to not leak a string slice (i.e. don't override name if
it exists).


Removes unnecessary ""Module"" arguments in class NameApplier (it is already a field).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,530,2017-06-24T22:05:36Z,2017-06-24T22:33:29Z,2017-06-27T03:56:52Z,MERGED,True,2,0,1,https://github.com/winksaville,Fix ununitailzed value_ in LexToken,1,[],https://github.com/WebAssembly/wabt/pull/530,https://github.com/winksaville,1,https://github.com/WebAssembly/wabt/pull/530,This fixes an uninitialized warning/error when compiling with c++ 7.1.1.,This fixes an uninitialized warning/error when compiling with c++ 7.1.1.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,530,2017-06-24T22:05:36Z,2017-06-24T22:33:29Z,2017-06-27T03:56:52Z,MERGED,True,2,0,1,https://github.com/winksaville,Fix ununitailzed value_ in LexToken,1,[],https://github.com/WebAssembly/wabt/pull/530,https://github.com/winksaville,2,https://github.com/WebAssembly/wabt/pull/530#issuecomment-310869696,This fixes an uninitialized warning/error when compiling with c++ 7.1.1.,"@KarlSchimpf can you pull it, I can't.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,530,2017-06-24T22:05:36Z,2017-06-24T22:33:29Z,2017-06-27T03:56:52Z,MERGED,True,2,0,1,https://github.com/winksaville,Fix ununitailzed value_ in LexToken,1,[],https://github.com/WebAssembly/wabt/pull/530,https://github.com/KarlSchimpf,3,https://github.com/WebAssembly/wabt/pull/530#issuecomment-310869778,This fixes an uninitialized warning/error when compiling with c++ 7.1.1.,Trying now.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,530,2017-06-24T22:05:36Z,2017-06-24T22:33:29Z,2017-06-27T03:56:52Z,MERGED,True,2,0,1,https://github.com/winksaville,Fix ununitailzed value_ in LexToken,1,[],https://github.com/WebAssembly/wabt/pull/530,https://github.com/KarlSchimpf,4,https://github.com/WebAssembly/wabt/pull/530#issuecomment-310869946,This fixes an uninitialized warning/error when compiling with c++ 7.1.1.,Committed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,530,2017-06-24T22:05:36Z,2017-06-24T22:33:29Z,2017-06-27T03:56:52Z,MERGED,True,2,0,1,https://github.com/winksaville,Fix ununitailzed value_ in LexToken,1,[],https://github.com/WebAssembly/wabt/pull/530,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/530#issuecomment-311122020,This fixes an uninitialized warning/error when compiling with c++ 7.1.1.,"What is c++ 7.1.1 ?  Is that a gcc version ?
Would using ""= 0"" in the declaration have the same effect?  I wonder if we should prefer that in general (especially when the constructor body is empty)?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,530,2017-06-24T22:05:36Z,2017-06-24T22:33:29Z,2017-06-27T03:56:52Z,MERGED,True,2,0,1,https://github.com/winksaville,Fix ununitailzed value_ in LexToken,1,[],https://github.com/WebAssembly/wabt/pull/530,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/530#issuecomment-311124882,This fixes an uninitialized warning/error when compiling with c++ 7.1.1.,"Yeah, I'd like to move toward using those more often, since I find them to be clearer generally.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,531,2017-06-25T19:14:47Z,2017-06-26T19:19:05Z,2017-06-26T20:52:59Z,CLOSED,False,2235,1755,21,https://github.com/KarlSchimpf,Fix the wat writer to be able to fold exception handling constructs.,8,[],https://github.com/WebAssembly/wabt/pull/531,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/531,"Implements expression folding for exception handling constructs in the wat writer.
Also adds the following for debugging:


Names to  the enum ExprType.


Adds (compile-time) conditional debugging trace code to wat-writer.cc, making it easier to see how the IR is being translated.","Implements expression folding for exception handling constructs in the wat writer.
Also adds the following for debugging:


Names to  the enum ExprType.


Adds (compile-time) conditional debugging trace code to wat-writer.cc, making it easier to see how the IR is being translated.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,531,2017-06-25T19:14:47Z,2017-06-26T19:19:05Z,2017-06-26T20:52:59Z,CLOSED,False,2235,1755,21,https://github.com/KarlSchimpf,Fix the wat writer to be able to fold exception handling constructs.,8,[],https://github.com/WebAssembly/wabt/pull/531,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/531#issuecomment-311141523,"Implements expression folding for exception handling constructs in the wat writer.
Also adds the following for debugging:


Names to  the enum ExprType.


Adds (compile-time) conditional debugging trace code to wat-writer.cc, making it easier to see how the IR is being translated.",I'm finding this a bit difficult to review because it has my merged changes included (the cast stuff). Do you think you could rebase instead?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,531,2017-06-25T19:14:47Z,2017-06-26T19:19:05Z,2017-06-26T20:52:59Z,CLOSED,False,2235,1755,21,https://github.com/KarlSchimpf,Fix the wat writer to be able to fold exception handling constructs.,8,[],https://github.com/WebAssembly/wabt/pull/531,https://github.com/KarlSchimpf,3,https://github.com/WebAssembly/wabt/pull/531#issuecomment-311155760,"Implements expression folding for exception handling constructs in the wat writer.
Also adds the following for debugging:


Names to  the enum ExprType.


Adds (compile-time) conditional debugging trace code to wat-writer.cc, making it easier to see how the IR is being translated.",Could not rebase in same branch. So I created a new PR #533 to continue this PR.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,531,2017-06-25T19:14:47Z,2017-06-26T19:19:05Z,2017-06-26T20:52:59Z,CLOSED,False,2235,1755,21,https://github.com/KarlSchimpf,Fix the wat writer to be able to fold exception handling constructs.,8,[],https://github.com/WebAssembly/wabt/pull/531,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/531#issuecomment-311156212,"Implements expression folding for exception handling constructs in the wat writer.
Also adds the following for debugging:


Names to  the enum ExprType.


Adds (compile-time) conditional debugging trace code to wat-writer.cc, making it easier to see how the IR is being translated.","Oh, OK. Sorry about that!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,532,2017-06-25T20:36:11Z,2017-06-25T21:26:10Z,2017-06-25T21:26:13Z,MERGED,True,1828,1747,13,https://github.com/binji,Use type hierarchy for ModuleField instead of union,1,[],https://github.com/WebAssembly/wabt/pull/532,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/532,"Also added LLVM-style casting free functions:

isa: returns true if the object is of type T
cast: converts object to T* or asserts
dyn_cast: converts object to T* or returns nullptr","Also added LLVM-style casting free functions:

isa: returns true if the object is of type T
cast: converts object to T* or asserts
dyn_cast: converts object to T* or returns nullptr",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,533,2017-06-26T19:17:40Z,2017-06-26T20:51:11Z,2017-06-26T20:51:14Z,MERGED,True,377,6,11,https://github.com/KarlSchimpf,Fix wat writer to fold exception handling constructs.,4,[],https://github.com/WebAssembly/wabt/pull/533,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/533,This is a rebased version of PR #531.,This is a rebased version of PR #531.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,533,2017-06-26T19:17:40Z,2017-06-26T20:51:11Z,2017-06-26T20:51:14Z,MERGED,True,377,6,11,https://github.com/KarlSchimpf,Fix wat writer to fold exception handling constructs.,4,[],https://github.com/WebAssembly/wabt/pull/533,https://github.com/KarlSchimpf,2,https://github.com/WebAssembly/wabt/pull/533#issuecomment-311169629,This is a rebased version of PR #531.,Ready for review again.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,534,2017-06-26T20:20:18Z,2017-06-26T23:11:08Z,2017-06-27T03:56:47Z,MERGED,True,1,3,1,https://github.com/winksaville,Explicitly initialize LexToken.value_ with 0,1,[],https://github.com/WebAssembly/wabt/pull/534,https://github.com/winksaville,1,https://github.com/WebAssembly/wabt/pull/534,"As suggested by Sam Clegg (@sbc100) this is a simpler solution to
my first solution, PR #530.","As suggested by Sam Clegg (@sbc100) this is a simpler solution to
my first solution, PR #530.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,535,2017-06-26T22:57:24Z,2017-06-27T03:50:39Z,2017-06-27T03:56:45Z,MERGED,True,332,384,8,https://github.com/winksaville,Add default constructor for Location and Const,1,[],https://github.com/WebAssembly/wabt/pull/535,https://github.com/winksaville,1,https://github.com/WebAssembly/wabt/pull/535,"This fixes some TODO's although may not be exactly right but is passing
the tests for me.
I've initialized all union fields to 0 and I assume the compiler will
remove any unnecessary initialization.","This fixes some TODO's although may not be exactly right but is passing
the tests for me.
I've initialized all union fields to 0 and I assume the compiler will
remove any unnecessary initialization.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,535,2017-06-26T22:57:24Z,2017-06-27T03:50:39Z,2017-06-27T03:56:45Z,MERGED,True,332,384,8,https://github.com/winksaville,Add default constructor for Location and Const,1,[],https://github.com/WebAssembly/wabt/pull/535,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/535#issuecomment-311207110,"This fixes some TODO's although may not be exactly right but is passing
the tests for me.
I've initialized all union fields to 0 and I assume the compiler will
remove any unnecessary initialization.","Bot failure is because you updated wast-parser.y, so you need to also run make update-bison too (to update the prebuilt parser)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,536,2017-06-27T07:30:37Z,2017-06-27T15:35:50Z,2017-06-27T15:35:50Z,MERGED,True,9,2,2,https://github.com/dcodeIO,Support for CommonJS and AMD loaders in libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/536,https://github.com/dcodeIO,1,https://github.com/WebAssembly/wabt/pull/536,"It is currently necessary to postprocess libwabt.js to support different kinds of module loaders, especially CommonJS-style require and AMD-style define. This PR adds CommonJS and AMD module loader support directly to wabt.pre/post.js and exposes wabt as a global var only if neither is available.
Unfortunately, I haven't yet figured out where exactly libwabt.js is built with emscripten, so the new generated file is not included. In case you decide to merge the PR, I would appreciate if libwabt.js could be updated as well.","It is currently necessary to postprocess libwabt.js to support different kinds of module loaders, especially CommonJS-style require and AMD-style define. This PR adds CommonJS and AMD module loader support directly to wabt.pre/post.js and exposes wabt as a global var only if neither is available.
Unfortunately, I haven't yet figured out where exactly libwabt.js is built with emscripten, so the new generated file is not included. In case you decide to merge the PR, I would appreciate if libwabt.js could be updated as well.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,536,2017-06-27T07:30:37Z,2017-06-27T15:35:50Z,2017-06-27T15:35:50Z,MERGED,True,9,2,2,https://github.com/dcodeIO,Support for CommonJS and AMD loaders in libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/536,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/536#issuecomment-311396306,"It is currently necessary to postprocess libwabt.js to support different kinds of module loaders, especially CommonJS-style require and AMD-style define. This PR adds CommonJS and AMD module loader support directly to wabt.pre/post.js and exposes wabt as a global var only if neither is available.
Unfortunately, I haven't yet figured out where exactly libwabt.js is built with emscripten, so the new generated file is not included. In case you decide to merge the PR, I would appreciate if libwabt.js could be updated as well.","libwabt.js is currently built by me running make emscripten-release and copying the result from the output directory into the demo directory. ;-)
It would be much better to have this automated, but for now I can just update this manually.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,538,2017-06-27T15:28:12Z,2017-06-27T16:08:57Z,2017-06-27T17:29:23Z,MERGED,True,308,319,7,https://github.com/binji,Use type hierarchy for Command instead of union,1,[],https://github.com/WebAssembly/wabt/pull/538,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/538,"Also remove CommandType::AssertInvalidNonBinary. It was only used for
the case when assert_invalid could not generate a binary file because
names could not be resolved. This error is now handled by
assert_malformed with a quoted binary.","Also remove CommandType::AssertInvalidNonBinary. It was only used for
the case when assert_invalid could not generate a binary file because
names could not be resolved. This error is now handled by
assert_malformed with a quoted binary.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,539,2017-06-27T15:45:21Z,2017-06-27T15:45:33Z,2017-06-27T15:45:37Z,MERGED,True,11,12,1,https://github.com/binji,Update libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/539,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/539,This includes the new CommonJS/AMD loader syntax.,This includes the new CommonJS/AMD loader syntax.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,540,2017-06-28T17:41:11Z,2017-06-28T22:38:12Z,2017-06-30T16:48:12Z,MERGED,True,697,700,31,https://github.com/KarlSchimpf,Remove WABT_ZERO_MEMORY WABT_FAILED and WABT_SUCCEEDED macros.,3,[],https://github.com/WebAssembly/wabt/pull/540,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/540,"Changed these macros to inline functions.
This change was prompted by the difficulty of using WABT_ZERO_MEMORY to clear the contents of this in a constructor.","Changed these macros to inline functions.
This change was prompted by the difficulty of using WABT_ZERO_MEMORY to clear the contents of this in a constructor.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,541,2017-06-28T21:59:31Z,2017-06-28T22:32:42Z,2017-06-28T23:45:56Z,MERGED,True,1,1,1,https://github.com/Cellule,Fix GetConsoleMode use in color.cc,1,['bug'],https://github.com/WebAssembly/wabt/pull/541,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/541,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,542,2017-06-28T23:13:02Z,2017-06-29T17:47:13Z,2017-06-29T17:47:16Z,MERGED,True,1211,0,3,https://github.com/binji,Add intrusive_list implementation,1,[],https://github.com/WebAssembly/wabt/pull/542,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/542,"This will be used to replace lists of Exprs, ModuleFields, and other
manual linked lists.","This will be used to replace lists of Exprs, ModuleFields, and other
manual linked lists.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,544,2017-06-30T00:12:03Z,2017-06-30T17:34:22Z,2017-06-30T17:34:25Z,MERGED,True,860,910,12,https://github.com/binji,Use intrusive_list for Expr,2,[],https://github.com/WebAssembly/wabt/pull/544,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/544,"Nothing much special here, but it is becoming increasingly annoying that
the parser Token cannot have value types (so everything must be moved
then deleted).","Nothing much special here, but it is becoming increasingly annoying that
the parser Token cannot have value types (so everything must be moved
then deleted).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,544,2017-06-30T00:12:03Z,2017-06-30T17:34:22Z,2017-06-30T17:34:25Z,MERGED,True,860,910,12,https://github.com/binji,Use intrusive_list for Expr,2,[],https://github.com/WebAssembly/wabt/pull/544,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/544#issuecomment-312328123,"Nothing much special here, but it is becoming increasingly annoying that
the parser Token cannot have value types (so everything must be moved
then deleted).","I agree that having to allocate/delete in the parser is annoying, but (at the moment) don't see an obvious solution.

Yeah, it is an annoying limitation of the bison parsing model (at least the C skeleton). At this point there's enough clunkiness, I started thinking about switching to a recursive descent parser. But don't worry, there are more important things to do first. :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,545,2017-06-30T21:02:07Z,2017-07-01T19:30:56Z,2017-07-01T19:30:59Z,MERGED,True,450,35,17,https://github.com/KarlSchimpf,Extend binary reader to handle exception constructs.,15,[],https://github.com/WebAssembly/wabt/pull/545,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/545,"Extends the binary reader to handle exception constructs.
Also updates wasm2wast to be able to read binary files with exceptions in them.
Also updates run-roundtrip.py to understand new command line arguments for exceptions.","Extends the binary reader to handle exception constructs.
Also updates wasm2wast to be able to read binary files with exceptions in them.
Also updates run-roundtrip.py to understand new command line arguments for exceptions.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,546,2017-07-02T21:28:05Z,2017-07-02T23:47:25Z,2017-07-02T23:47:28Z,MERGED,True,8,15,4,https://github.com/KarlSchimpf,Fix handling of exception section.,1,[],https://github.com/WebAssembly/wabt/pull/546,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/546,"According to the proposal for exception handling, only exceptions not imported should be defined in the exceptions section.
This PR fixes the code, which assumed all exceptions appear in the exception section.","According to the proposal for exception handling, only exceptions not imported should be defined in the exceptions section.
This PR fixes the code, which assumed all exceptions appear in the exception section.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,547,2017-07-03T17:05:47Z,2017-07-03T21:01:20Z,2017-07-04T00:25:03Z,MERGED,True,352,20,9,https://github.com/KarlSchimpf,Adds the concept of exceptions to wasm-objdump,4,[],https://github.com/WebAssembly/wabt/pull/547,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/547,"Modifies the wasm objdump code to understand exceptions.
Adds command-line argument --future-exceptions to wasm-objdump and run-objdump.py.
Modifies class BinaryReaderNop so that its default behavior can be defined by a flag that defines if
exception handling should be accepted.","Modifies the wasm objdump code to understand exceptions.
Adds command-line argument --future-exceptions to wasm-objdump and run-objdump.py.
Modifies class BinaryReaderNop so that its default behavior can be defined by a flag that defines if
exception handling should be accepted.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,548,2017-07-04T03:49:08Z,2017-07-04T16:35:34Z,2017-07-04T16:35:40Z,MERGED,True,60,35,2,https://github.com/binji,Fix inline export for multiple exported kinds,1,[],https://github.com/WebAssembly/wabt/pull/548,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/548,"It is possible to export the same func (or global, memory, etc.) twice
with a different name. This is supported by the inline export format,
but was broken -- it would only print the name of the last export.","It is possible to export the same func (or global, memory, etc.) twice
with a different name. This is supported by the inline export format,
but was broken -- it would only print the name of the last export.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,549,2017-07-04T21:14:41Z,2017-07-04T21:16:35Z,2017-07-04T21:16:35Z,CLOSED,False,40,2,2,https://github.com/KarlSchimpf,Add inline exports to wat-writer.,2,[],https://github.com/WebAssembly/wabt/pull/549,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/549,"Noticed that inline exports was not handled for exceptions. This PR adds the missing code, and a test to verify it works.","Noticed that inline exports was not handled for exceptions. This PR adds the missing code, and a test to verify it works.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,549,2017-07-04T21:14:41Z,2017-07-04T21:16:35Z,2017-07-04T21:16:35Z,CLOSED,False,40,2,2,https://github.com/KarlSchimpf,Add inline exports to wat-writer.,2,[],https://github.com/WebAssembly/wabt/pull/549,https://github.com/KarlSchimpf,2,https://github.com/WebAssembly/wabt/pull/549#issuecomment-312956397,"Noticed that inline exports was not handled for exceptions. This PR adds the missing code, and a test to verify it works.",Closing. My  development state is bad.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,550,2017-07-04T21:20:10Z,2017-07-05T17:44:09Z,2017-07-05T17:44:12Z,MERGED,True,22,2,2,https://github.com/KarlSchimpf,Add inline exports to wat-writer.,3,[],https://github.com/WebAssembly/wabt/pull/550,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/550,"Noticed that inline exports were not handled. This PR fixes that omission, and adds a test.","Noticed that inline exports were not handled. This PR fixes that omission, and adds a test.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,551,2017-07-04T21:39:13Z,2017-07-05T17:43:35Z,2017-07-05T17:43:41Z,MERGED,True,103,0,3,https://github.com/KarlSchimpf,Add more test examples for wasm-objdump.,2,[],https://github.com/WebAssembly/wabt/pull/551,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/551,"Added more test examples for wasm-objdump, and requested by @binji.","Added more test examples for wasm-objdump, and requested by @binji.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,552,2017-07-05T18:26:08Z,2017-07-05T18:57:19Z,2017-07-05T18:57:25Z,MERGED,True,172,171,8,https://github.com/KarlSchimpf,Move exception section to just before code section.,1,[],https://github.com/WebAssembly/wabt/pull/552,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/552,"When looking at the V8 compiler, and wasm-interp, the details of exceptions must be known before the code section is processed (i.e. translated). This PR moves the (named) exception section to immediately before the code section.","When looking at the V8 compiler, and wasm-interp, the details of exceptions must be known before the code section is processed (i.e. translated). This PR moves the (named) exception section to immediately before the code section.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,553,2017-07-06T02:04:05Z,2017-07-06T20:07:24Z,2017-07-06T20:07:27Z,MERGED,True,2465,2588,290,https://github.com/binji,"Remove BinaryErrorHandler, rename SourceErrorHandler",3,[],https://github.com/WebAssembly/wabt/pull/553,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/553,"Since SourceErrorHandler can support binary locations, it doesn't make
much sense to have two different error handlers. There is now only an
ErrorHandler base class, and the first argument specifies whether the
error handler is expecting text or binary locations.","Since SourceErrorHandler can support binary locations, it doesn't make
much sense to have two different error handlers. There is now only an
ErrorHandler base class, and the first argument specifies whether the
error handler is expecting text or binary locations.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,554,2017-07-06T06:06:49Z,2017-07-06T16:58:34Z,2017-07-06T16:58:37Z,MERGED,True,412,457,9,https://github.com/binji,Use intrusive list for ModuleFields,1,[],https://github.com/WebAssembly/wabt/pull/554,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/554,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,554,2017-07-06T06:06:49Z,2017-07-06T16:58:34Z,2017-07-06T16:58:37Z,MERGED,True,412,457,9,https://github.com/binji,Use intrusive list for ModuleFields,1,[],https://github.com/WebAssembly/wabt/pull/554,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/554#issuecomment-313455649,,I borrowed the name from boost: http://www.boost.org/doc/libs/1_64_0/doc/html/intrusive.html,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,554,2017-07-06T06:06:49Z,2017-07-06T16:58:34Z,2017-07-06T16:58:37Z,MERGED,True,412,457,9,https://github.com/binji,Use intrusive list for ModuleFields,1,[],https://github.com/WebAssembly/wabt/pull/554,https://github.com/KarlSchimpf,3,https://github.com/WebAssembly/wabt/pull/554#issuecomment-313455664,,"Its intrusive, because the list structure is part of the object being built, rather than the list being separate data structures. For example, std::list  and std::deque aren't intrusive because the list is defined separately from the elements.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,555,2017-07-06T16:43:20Z,2017-09-01T15:49:15Z,2017-09-01T15:49:20Z,MERGED,True,123,31,20,https://github.com/sbc100,Add support data-size and alignment linking metadata,4,[],https://github.com/WebAssembly/wabt/pull/555,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/555,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,556,2017-07-06T21:37:27Z,2017-07-07T00:30:02Z,2017-07-07T00:30:05Z,MERGED,True,733,733,13,https://github.com/binji,Use std::string instead of StringSlice in Var,2,[],https://github.com/WebAssembly/wabt/pull/556,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/556,"This change keeps the union, but hides it behind accessors. The
implementation is a bit complex since std::string requires constructors
and destructors to be called. As a result we have to use placement new
and explicit destructors.","This change keeps the union, but hides it behind accessors. The
implementation is a bit complex since std::string requires constructors
and destructors to be called. As a result we have to use placement new
and explicit destructors.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,558,2017-07-07T00:58:50Z,2017-07-07T07:52:25Z,2017-07-07T07:52:27Z,MERGED,True,5,7,2,https://github.com/binji,Fix location of error in wasm2wast,1,[],https://github.com/WebAssembly/wabt/pull/558,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/558,"Errors are binary locations, not text.
See #557.","Errors are binary locations, not text.
See #557.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,559,2017-07-07T19:45:29Z,2017-07-07T21:09:43Z,2017-07-07T21:16:42Z,MERGED,True,1039,1170,19,https://github.com/binji,Remove uses of StringSlice from IR,1,[],https://github.com/WebAssembly/wabt/pull/559,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/559,"All member variables are now std::string, and most parameters are
string_view. This allows us to remove many of the destructors.","All member variables are now std::string, and most parameters are
string_view. This allows us to remove many of the destructors.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,559,2017-07-07T19:45:29Z,2017-07-07T21:09:43Z,2017-07-07T21:16:42Z,MERGED,True,1039,1170,19,https://github.com/binji,Remove uses of StringSlice from IR,1,[],https://github.com/WebAssembly/wabt/pull/559,https://github.com/KarlSchimpf,2,https://github.com/WebAssembly/wabt/pull/559#issuecomment-313778683,"All member variables are now std::string, and most parameters are
string_view. This allows us to remove many of the destructors.",LGTM + 1 nit.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,559,2017-07-07T19:45:29Z,2017-07-07T21:09:43Z,2017-07-07T21:16:42Z,MERGED,True,1039,1170,19,https://github.com/binji,Remove uses of StringSlice from IR,1,[],https://github.com/WebAssembly/wabt/pull/559,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/559#issuecomment-313793488,"All member variables are now std::string, and most parameters are
string_view. This allows us to remove many of the destructors.",@KarlSchimpf where's the nit? :-),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,560,2017-07-07T22:05:59Z,2017-07-07T22:36:47Z,2017-07-07T22:36:49Z,MERGED,True,31,29,5,https://github.com/binji,Clean up BinaryWriterSpec::GetModuleFilename,1,[],https://github.com/WebAssembly/wabt/pull/560,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/560,"This previously had an upper limit to the extension length.
I've also taken this opportunity to modify the Writer and Stream APIs to
take string_view instead of const char* for filenames.","This previously had an upper limit to the extension length.
I've also taken this opportunity to modify the Writer and Stream APIs to
take string_view instead of const char* for filenames.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,561,2017-07-07T23:36:05Z,2017-07-10T17:22:54Z,2017-07-10T17:22:57Z,MERGED,True,281,285,11,https://github.com/binji,Use string_view for all BinaryReader callbacks,3,[],https://github.com/WebAssembly/wabt/pull/561,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/561,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,561,2017-07-07T23:36:05Z,2017-07-10T17:22:54Z,2017-07-10T17:22:57Z,MERGED,True,281,285,11,https://github.com/binji,Use string_view for all BinaryReader callbacks,3,[],https://github.com/WebAssembly/wabt/pull/561,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/561#issuecomment-313825069,,Needs #562.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,562,2017-07-08T00:03:52Z,2017-07-10T17:22:15Z,2017-07-10T17:22:19Z,MERGED,True,6,3,2,https://github.com/binji,Fix bug in string_view::rfind,1,[],https://github.com/WebAssembly/wabt/pull/562,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/562,"The position needs to be clamped when the needle is larger than the
haystack.","The position needs to be clamped when the needle is larger than the
haystack.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,563,2017-07-10T20:50:36Z,2017-07-10T22:19:51Z,2017-07-10T22:19:53Z,MERGED,True,41,47,14,https://github.com/binji,Always pass string_view by value,1,[],https://github.com/WebAssembly/wabt/pull/563,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/563,"It's a value type, so it should be passed by value, just like int, etc.
For x64-clang linux ABI, it seems to be passed in two registers rather
than requiring indirection, so may be faster too.","It's a value type, so it should be passed by value, just like int, etc.
For x64-clang linux ABI, it seems to be passed in two registers rather
than requiring indirection, so may be faster too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,564,2017-07-10T23:20:11Z,2017-07-14T18:05:45Z,2017-07-14T18:05:47Z,MERGED,True,1025,745,4,https://github.com/binji,Use templates instead of macros in interpreter,1,[],https://github.com/WebAssembly/wabt/pull/564,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/564,"There's still more to be done, but this is a decent cleanup.","There's still more to be done, but this is a decent cleanup.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,564,2017-07-10T23:20:11Z,2017-07-14T18:05:45Z,2017-07-14T18:05:47Z,MERGED,True,1025,745,4,https://github.com/binji,Use templates instead of macros in interpreter,1,[],https://github.com/WebAssembly/wabt/pull/564,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/564#issuecomment-315144793,"There's still more to be done, but this is a decent cleanup.","Works, but I'm not particularly happy with this solution. For future reference, the problem is that on MSVC ia32, it will use SSE2 for calculating float math, but all calling conventions pass floats/doubles via x87 registers instead of xmm registers unless you use the __vectorcall calling convention. This causes incorrect rounding in some cases.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,564,2017-07-10T23:20:11Z,2017-07-14T18:05:45Z,2017-07-14T18:05:47Z,MERGED,True,1025,745,4,https://github.com/binji,Use templates instead of macros in interpreter,1,[],https://github.com/WebAssembly/wabt/pull/564,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/564#issuecomment-315145088,"There's still more to be done, but this is a decent cleanup.",I think a better solution is to always keep the float/double as an integer value at function boundaries. So Add/Sub/etc. should bitcast on entry and exit.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,564,2017-07-10T23:20:11Z,2017-07-14T18:05:45Z,2017-07-14T18:05:47Z,MERGED,True,1025,745,4,https://github.com/binji,Use templates instead of macros in interpreter,1,[],https://github.com/WebAssembly/wabt/pull/564,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/564#issuecomment-315224700,"There's still more to be done, but this is a decent cleanup.","OK, I think this is better. PTAL",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,564,2017-07-10T23:20:11Z,2017-07-14T18:05:45Z,2017-07-14T18:05:47Z,MERGED,True,1025,745,4,https://github.com/binji,Use templates instead of macros in interpreter,1,[],https://github.com/WebAssembly/wabt/pull/564,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/564#issuecomment-315427307,"There's still more to be done, but this is a decent cleanup.","Yeah, I kept trying to find a way to make it simpler, but this was as good as I could do. If you have any ideas, I'd love to hear them!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,566,2017-07-12T06:51:10Z,2017-07-12T18:13:26Z,2017-07-12T18:13:30Z,MERGED,True,2,2,2,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/566,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/566,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,567,2017-07-12T06:58:37Z,2017-07-13T02:42:31Z,2017-07-13T02:42:33Z,MERGED,True,637,654,10,https://github.com/binji,Use std::vector for DataSegment data,1,[],https://github.com/WebAssembly/wabt/pull/567,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/567,"Also switch ScriptModule data to std::vector
In wast-parser.y:

Change DupTextList to write to std::vector
quoted_text uses CopyStringContents instead of DupTextList","Also switch ScriptModule data to std::vector
In wast-parser.y:

Change DupTextList to write to std::vector
quoted_text uses CopyStringContents instead of DupTextList",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,568,2017-07-12T20:25:51Z,2017-07-12T21:28:46Z,2017-07-12T21:28:50Z,MERGED,True,22,10,2,https://github.com/KarlSchimpf,Make placement construct/destructs easier to read.,2,[],https://github.com/WebAssembly/wabt/pull/568,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/568,"Because of union constructs, various fields need to be constructed using placement new and destructed by calling the appropriate destructor.
This PR defines templates Construct() and Destruct() to make it cleaner and easier to read.","Because of union constructs, various fields need to be constructed using placement new and destructed by calling the appropriate destructor.
This PR defines templates Construct() and Destruct() to make it cleaner and easier to read.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,569,2017-07-14T00:37:26Z,2017-07-14T18:06:00Z,2017-07-14T18:06:03Z,MERGED,True,200,279,5,https://github.com/binji,Remove StringSlice from interpreter,1,[],https://github.com/WebAssembly/wabt/pull/569,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/569,Use std::string or string_view instead.,Use std::string or string_view instead.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,572,2017-07-14T18:57:35Z,2017-07-14T21:37:35Z,2017-07-14T21:37:38Z,MERGED,True,55,69,9,https://github.com/binji,Rename read_file -> ReadFile; now returns vector,3,[],https://github.com/WebAssembly/wabt/pull/572,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/572,"It would be nicer to have the various read_* functions not take a void*,
size_t pair either, but that's work for another PR (perhaps introducing
a span-like API?)
I've also been considering having ReadFile return a wrapper object
instead, so this could just mmap the file.
Fixes #570.","It would be nicer to have the various read_* functions not take a void*,
size_t pair either, but that's work for another PR (perhaps introducing
a span-like API?)
I've also been considering having ReadFile return a wrapper object
instead, so this could just mmap the file.
Fixes #570.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,573,2017-07-14T19:44:49Z,2017-08-16T17:12:04Z,2017-08-16T17:12:07Z,MERGED,True,1978,1217,63,https://github.com/binji,Add saturating float truncation operators,3,[],https://github.com/WebAssembly/wabt/pull/573,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/573,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,573,2017-07-14T19:44:49Z,2017-08-16T17:12:04Z,2017-08-16T17:12:07Z,MERGED,True,1978,1217,63,https://github.com/binji,Add saturating float truncation operators,3,[],https://github.com/WebAssembly/wabt/pull/573,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/573#issuecomment-315451224,,I still need to add flags (--future-trunc-sat?) but otherwise everything else is implemented.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,574,2017-07-14T22:36:47Z,2017-12-19T18:17:20Z,2017-12-19T18:42:03Z,CLOSED,False,169,183,11,https://github.com/KarlSchimpf,Make the exception section a known section.,1,[],https://github.com/WebAssembly/wabt/pull/574,https://github.com/KarlSchimpf,1,https://github.com/WebAssembly/wabt/pull/574,"Change the (experimental) exception section to a known section with value 13.
It also accepts a name section as a known section with value 12.","Change the (experimental) exception section to a known section with value 13.
It also accepts a name section as a known section with value 12.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,574,2017-07-14T22:36:47Z,2017-12-19T18:17:20Z,2017-12-19T18:42:03Z,CLOSED,False,169,183,11,https://github.com/KarlSchimpf,Make the exception section a known section.,1,[],https://github.com/WebAssembly/wabt/pull/574,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/574#issuecomment-352842413,"Change the (experimental) exception section to a known section with value 13.
It also accepts a name section as a known section with value 12.","Closing, since the exception proposal seems to be moving in a different direction.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,574,2017-07-14T22:36:47Z,2017-12-19T18:17:20Z,2017-12-19T18:42:03Z,CLOSED,False,169,183,11,https://github.com/KarlSchimpf,Make the exception section a known section.,1,[],https://github.com/WebAssembly/wabt/pull/574,https://github.com/eholk,3,https://github.com/WebAssembly/wabt/pull/574#issuecomment-352848937,"Change the (experimental) exception section to a known section with value 13.
It also accepts a name section as a known section with value 12.","I think we're still likely to have an exception section, but we might as well just do another PR once we know for sure.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,575,2017-07-17T18:38:03Z,2017-07-17T20:30:59Z,2017-07-17T20:31:01Z,MERGED,True,17,30,3,https://github.com/binji,Remove uses of StringSlice from wasm-link,1,[],https://github.com/WebAssembly/wabt/pull/575,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/575,"Also remove SectionDataCustom from wasm-link.h; it doesn't seem to be
used.","Also remove SectionDataCustom from wasm-link.h; it doesn't seem to be
used.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,576,2017-07-17T20:53:43Z,2017-07-17T22:23:23Z,2017-07-17T22:23:25Z,MERGED,True,772,964,12,https://github.com/binji,Remove StringSlice,2,[],https://github.com/WebAssembly/wabt/pull/576,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/576,"Added StringTerminal only used by the lexer and parser, since we need an
object that has a non-trivial constructor/destructor (so it can be
included in the Token union).
Name all terminal Token members with t_ prefix
Rename Literal -> LiteralTerminal, and only use for the lexer/parser.
Move LiteralType to literal.h
Use std::vectorstd::string for TextList and rename to TextVector
Renamed CopyStringContents -> UnescapeString, and make it a template
so it can write to a std::string and a std::vector.
Rename DupTextList -> UnescapeTextVector, and simplify it
considerably.","Added StringTerminal only used by the lexer and parser, since we need an
object that has a non-trivial constructor/destructor (so it can be
included in the Token union).
Name all terminal Token members with t_ prefix
Rename Literal -> LiteralTerminal, and only use for the lexer/parser.
Move LiteralType to literal.h
Use std::vectorstd::string for TextList and rename to TextVector
Renamed CopyStringContents -> UnescapeString, and make it a template
so it can write to a std::string and a std::vector.
Rename DupTextList -> UnescapeTextVector, and simplify it
considerably.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,577,2017-07-18T00:51:54Z,2017-07-18T05:03:47Z,2017-07-18T05:03:50Z,MERGED,True,872,1088,2,https://github.com/binji,Add MoveAndDelete helper function to parser,2,[],https://github.com/WebAssembly/wabt/pull/577,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/577,"This combines the std::move + delete behavior that was used throughout
wast-parser.y in a cleaner way.
I've also renamed the other helper functions to MixedCase, and added the
PrependAndDelete and AppendAndDelete helper functions too.","This combines the std::move + delete behavior that was used throughout
wast-parser.y in a cleaner way.
I've also renamed the other helper functions to MixedCase, and added the
PrependAndDelete and AppendAndDelete helper functions too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,578,2017-07-18T16:44:57Z,2017-07-19T16:22:52Z,2017-07-19T16:22:54Z,MERGED,True,15,15,4,https://github.com/binji,Properly forward argument packs,1,[],https://github.com/WebAssembly/wabt/pull/578,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/578,"The pattern should be
template <typename... Args>
void foo(Args&&... args) {
  bar(std::forward<Args>(args)...);
}","The pattern should be
template <typename... Args>
void foo(Args&&... args) {
  bar(std::forward<Args>(args)...);
}",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,579,2017-07-19T17:56:48Z,2017-07-19T20:17:11Z,2017-07-19T20:17:13Z,MERGED,True,1433,1457,57,https://github.com/binji,Rename snake_case to MixedCase.,4,[],https://github.com/WebAssembly/wabt/pull/579,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/579,There are no functional changes.,There are no functional changes.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,580,2017-07-22T00:33:05Z,2017-07-25T05:41:03Z,2017-07-25T05:41:06Z,MERGED,True,448,262,12,https://github.com/binji,Refactor wasm-opcodecnt.,6,[],https://github.com/WebAssembly/wabt/pull/580,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/580,"Simplify some of the code using map instead of vector. Also added the
ability to count immediates of any opcode.","Simplify some of the code using map instead of vector. Also added the
ability to count immediates of any opcode.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,581,2017-07-25T08:34:09Z,2017-07-26T03:38:18Z,2017-07-26T03:38:20Z,MERGED,True,24,14,3,https://github.com/binji,Opcodecnt: Write hex representation of constants,1,[],https://github.com/WebAssembly/wabt/pull/581,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/581,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,582,2017-07-25T21:29:03Z,2017-07-26T22:20:06Z,2017-07-26T22:20:09Z,MERGED,True,4290,3211,26,https://github.com/binji,Update testsuite,3,[],https://github.com/WebAssembly/wabt/pull/582,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/582,"Implicit function types are now appended to the module, not directly
after the function/import that uses them.
Float and int literals can have an underscore separating digits.","Implicit function types are now appended to the module, not directly
after the function/import that uses them.
Float and int literals can have an underscore separating digits.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,583,2017-07-26T03:40:21Z,2017-07-26T04:50:26Z,2017-07-26T04:50:28Z,MERGED,True,357,323,1,https://github.com/binji,Use C++ class in wasm-interp instead of Context,1,[],https://github.com/WebAssembly/wabt/pull/583,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/583,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,584,2017-07-26T06:06:54Z,2017-07-26T06:36:42Z,2017-07-26T06:36:45Z,MERGED,True,276,288,1,https://github.com/binji,"wasm-link: Remove Context, use C++ class instead.",1,[],https://github.com/WebAssembly/wabt/pull/584,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/584,Some other cleanup too.,Some other cleanup too.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,587,2017-07-29T01:02:38Z,2017-07-30T04:37:16Z,2017-07-30T04:37:19Z,MERGED,True,15,4,2,https://github.com/binji,Fix tee_local typechecking bug w/ polymorphic stack,1,[],https://github.com/WebAssembly/wabt/pull/587,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/587,"The previous type-checking code just made sure the value on the top of
the stack is the correct type. This isn't sufficient when the stack is
polymorphic, because the concrete type is not pushed onto the stack.
Fixes #586.","The previous type-checking code just made sure the value on the top of
the stack is the correct type. This isn't sufficient when the stack is
polymorphic, because the concrete type is not pushed onto the stack.
Fixes #586.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,589,2017-07-31T17:47:42Z,2017-07-31T19:06:21Z,2017-07-31T19:06:23Z,MERGED,True,19,2,2,https://github.com/binji,Fix type-checking bug in br_if w/ polymorphic stack,2,[],https://github.com/WebAssembly/wabt/pull/589,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/589,"Similar to issue #586, it is necessary to pop and re-push the type on
the top of the stack when validating br_if, because otherwise the
concerete type is not pushed on the stack (i.e. the top remains
polymorphic).
Fixes #588.","Similar to issue #586, it is necessary to pop and re-push the type on
the top of the stack when validating br_if, because otherwise the
concerete type is not pushed on the stack (i.e. the top remains
polymorphic).
Fixes #588.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,590,2017-08-03T18:00:24Z,2017-08-03T18:35:18Z,2017-08-03T19:05:06Z,MERGED,True,9,1,2,https://github.com/Alhadis,Add WAST highlighting to *.txt files in tests directories,2,[],https://github.com/WebAssembly/wabt/pull/590,https://github.com/Alhadis,1,https://github.com/WebAssembly/wabt/pull/590,"This PR uses some GitHub-specific gitattributes to enable WAST's syntax highlighting for *.txt test-files. They're currently being highlighted as plain text, because .txt isn't listed as a registered WebAssembly extension.
I also made sure to keep the files from counting toward the repository's language summary. Data and prose-type languages are always excluded by default (which is why you're not seeing Text occupy 45% of the codebase)... but since WebAssembly is a programming language, the reclassification would make them all count toward the usage total, potentially replacing the project's status as a C++ project.
Excluding large, ancillary files in this manner is actually common practice, and GitHub even excludes by default commonly-used filepaths which would otherwise threaten to grossly misidentify the language of a user's project.
If the explanation I added to .gitattributes regarding vendored files is too verbose, just let me know.","This PR uses some GitHub-specific gitattributes to enable WAST's syntax highlighting for *.txt test-files. They're currently being highlighted as plain text, because .txt isn't listed as a registered WebAssembly extension.
I also made sure to keep the files from counting toward the repository's language summary. Data and prose-type languages are always excluded by default (which is why you're not seeing Text occupy 45% of the codebase)... but since WebAssembly is a programming language, the reclassification would make them all count toward the usage total, potentially replacing the project's status as a C++ project.
Excluding large, ancillary files in this manner is actually common practice, and GitHub even excludes by default commonly-used filepaths which would otherwise threaten to grossly misidentify the language of a user's project.
If the explanation I added to .gitattributes regarding vendored files is too verbose, just let me know.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,590,2017-08-03T18:00:24Z,2017-08-03T18:35:18Z,2017-08-03T19:05:06Z,MERGED,True,9,1,2,https://github.com/Alhadis,Add WAST highlighting to *.txt files in tests directories,2,[],https://github.com/WebAssembly/wabt/pull/590,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/590#issuecomment-320053908,"This PR uses some GitHub-specific gitattributes to enable WAST's syntax highlighting for *.txt test-files. They're currently being highlighted as plain text, because .txt isn't listed as a registered WebAssembly extension.
I also made sure to keep the files from counting toward the repository's language summary. Data and prose-type languages are always excluded by default (which is why you're not seeing Text occupy 45% of the codebase)... but since WebAssembly is a programming language, the reclassification would make them all count toward the usage total, potentially replacing the project's status as a C++ project.
Excluding large, ancillary files in this manner is actually common practice, and GitHub even excludes by default commonly-used filepaths which would otherwise threaten to grossly misidentify the language of a user's project.
If the explanation I added to .gitattributes regarding vendored files is too verbose, just let me know.","Looks good, thanks!",True,{'THUMBS_UP': ['https://github.com/Alhadis']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,591,2017-08-11T23:08:06Z,2017-08-15T21:36:21Z,2017-08-15T21:36:23Z,MERGED,True,4215,15390,114,https://github.com/binji,Rewrite parser as recursive descent,5,[],https://github.com/WebAssembly/wabt/pull/591,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/591,"Remove Bison dependency
Remove pre-generated parser files
Rename build config from no-re2c-bison to no-re2c
Add a simple make_unique implementation
Move handling of module bindings into ir.cc
Simplify lexer

Remove lookahead, the parser handles this now
Unify Token/LexerToken, it only contains terminal values now
Refactor setting token type and value into one function (e.g.
LITERAL, RETURN => RETURN_LITERAL)


New Parser

Uses two tokens of lookahead (use Peek(), PeekAfter())
Consume() consumes one token of any kind
Match(t) consumes the current token if it matches
PeekMatch(t) returns true iff the token matches, but doesn't consume
Basic error synchronization; plenty of room for improvement here","Remove Bison dependency
Remove pre-generated parser files
Rename build config from no-re2c-bison to no-re2c
Add a simple make_unique implementation
Move handling of module bindings into ir.cc
Simplify lexer

Remove lookahead, the parser handles this now
Unify Token/LexerToken, it only contains terminal values now
Refactor setting token type and value into one function (e.g.
LITERAL, RETURN => RETURN_LITERAL)


New Parser

Uses two tokens of lookahead (use Peek(), PeekAfter())
Consume() consumes one token of any kind
Match(t) consumes the current token if it matches
PeekMatch(t) returns true iff the token matches, but doesn't consume
Basic error synchronization; plenty of room for improvement here",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,592,2017-08-18T02:53:36Z,2017-08-18T03:34:09Z,2017-08-18T03:34:11Z,MERGED,True,192,187,7,https://github.com/binji,Refactor interpreter imports,1,[],https://github.com/WebAssembly/wabt/pull/592,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/592,"Create Import derived classes instead of using union
Use cast/dyn_cast for interpreter Func and Module (Defined vs. Host)
Remove OnImport callback in BinaryReaderInterpreter; do all the work
in the kind-specific callbacks (e.g. OnImportFunc)","Create Import derived classes instead of using union
Use cast/dyn_cast for interpreter Func and Module (Defined vs. Host)
Remove OnImport callback in BinaryReaderInterpreter; do all the work
in the kind-specific callbacks (e.g. OnImportFunc)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,593,2017-08-23T14:13:28Z,2017-08-24T05:59:40Z,2017-08-24T05:59:40Z,MERGED,True,3,1,1,https://github.com/reklatsmasters,added missing function in emscripten export,2,[],https://github.com/WebAssembly/wabt/pull/593,https://github.com/reklatsmasters,1,https://github.com/WebAssembly/wabt/pull/593,This commit added missing functions to the export table.  This functions used in wabt.post.js.,This commit added missing functions to the export table.  This functions used in wabt.post.js.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,594,2017-08-25T00:37:33Z,2017-08-25T00:37:38Z,2017-08-25T00:37:40Z,MERGED,True,15,12,2,https://github.com/binji,Update libwabt.js and fix a wast2wasm example,1,[],https://github.com/WebAssembly/wabt/pull/594,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/594,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,595,2017-08-26T05:58:06Z,2017-08-27T03:48:01Z,2017-08-28T18:22:44Z,MERGED,True,1238,1279,18,https://github.com/binji,Clean up various structs in ir.h,4,[],https://github.com/WebAssembly/wabt/pull/595,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/595,"Nicer static constructors for Const (e.g. Const::F32())
Protect type member when used as discriminant in type hierarchy
(e.g. Expr, ModuleField, etc.)
Remove pointer member fields where possible. Where not, use std::unique_ptr instead.
Remove nearly all uses of unions (Var and Const still use them)","Nicer static constructors for Const (e.g. Const::F32())
Protect type member when used as discriminant in type hierarchy
(e.g. Expr, ModuleField, etc.)
Remove pointer member fields where possible. Where not, use std::unique_ptr instead.
Remove nearly all uses of unions (Var and Const still use them)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,595,2017-08-26T05:58:06Z,2017-08-27T03:48:01Z,2017-08-28T18:22:44Z,MERGED,True,1238,1279,18,https://github.com/binji,Clean up various structs in ir.h,4,[],https://github.com/WebAssembly/wabt/pull/595,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/595#issuecomment-325175375,"Nicer static constructors for Const (e.g. Const::F32())
Protect type member when used as discriminant in type hierarchy
(e.g. Expr, ModuleField, etc.)
Remove pointer member fields where possible. Where not, use std::unique_ptr instead.
Remove nearly all uses of unions (Var and Const still use them)","This looks like a big change, but most of it is just switching -> to . and similar. Gonna land now, but feel free to comment on confusing/weird/incorrect bits, and I'll address in future PRs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,596,2017-08-28T14:58:15Z,2017-08-28T18:11:55Z,2017-08-28T18:44:17Z,CLOSED,False,0,1,1,https://github.com/dcodeIO,Removed duplicate initialization of EMSCRIPTEN_DIR var in Makefile,1,[],https://github.com/WebAssembly/wabt/pull/596,https://github.com/dcodeIO,1,https://github.com/WebAssembly/wabt/pull/596,"Should now allow overriding the variable with a custom emscripten location.
For reference, EMSCRIPTEN_DIR is already conditionally set here.","Should now allow overriding the variable with a custom emscripten location.
For reference, EMSCRIPTEN_DIR is already conditionally set here.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,596,2017-08-28T14:58:15Z,2017-08-28T18:11:55Z,2017-08-28T18:44:17Z,CLOSED,False,0,1,1,https://github.com/dcodeIO,Removed duplicate initialization of EMSCRIPTEN_DIR var in Makefile,1,[],https://github.com/WebAssembly/wabt/pull/596,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/596#issuecomment-325416853,"Should now allow overriding the variable with a custom emscripten location.
For reference, EMSCRIPTEN_DIR is already conditionally set here.","Oops, I didn't notice this, thanks for catching! This isn't the right fix though -- those directory names are meant to be used to generate the subdirectories under out/.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,596,2017-08-28T14:58:15Z,2017-08-28T18:11:55Z,2017-08-28T18:44:17Z,CLOSED,False,0,1,1,https://github.com/dcodeIO,Removed duplicate initialization of EMSCRIPTEN_DIR var in Makefile,1,[],https://github.com/WebAssembly/wabt/pull/596,https://github.com/dcodeIO,3,https://github.com/WebAssembly/wabt/pull/596#issuecomment-325432383,"Should now allow overriding the variable with a custom emscripten location.
For reference, EMSCRIPTEN_DIR is already conditionally set here.","I see, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,597,2017-08-28T17:22:33Z,2017-08-28T17:59:51Z,2017-08-28T17:59:53Z,MERGED,True,4,4,1,https://github.com/binji,Rename EMSCRIPTEN_DIR -> EMCC_DIR in Makefile,1,[],https://github.com/WebAssembly/wabt/pull/597,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/597,"EMSCRIPTEN_DIR is meant to be the root directory to find the emscripten
binaries, and EMCC_DIR is meant to be the name of the subdirectory under
out/ where emscripten build artifacts live.
See #596.","EMSCRIPTEN_DIR is meant to be the root directory to find the emscripten
binaries, and EMCC_DIR is meant to be the name of the subdirectory under
out/ where emscripten build artifacts live.
See #596.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,598,2017-08-28T18:22:28Z,2017-08-29T18:52:45Z,2017-08-29T18:52:47Z,MERGED,True,63,63,3,https://github.com/binji,Only use auto where the type is obvious from context,1,[],https://github.com/WebAssembly/wabt/pull/598,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/598,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,599,2017-08-30T04:40:00Z,2017-08-30T05:23:10Z,2017-08-30T22:47:08Z,MERGED,True,25,64,1,https://github.com/binji,Use AppendField in binary-reader-ir.cc,1,[],https://github.com/WebAssembly/wabt/pull/599,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/599,"This matches the behavior in wast-parser.cc, and is clearer.","This matches the behavior in wast-parser.cc, and is clearer.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,600,2017-08-30T05:44:27Z,2017-08-30T06:24:48Z,2017-08-30T06:24:50Z,MERGED,True,136,197,17,https://github.com/binji,Move Result to its own file (result.h),1,[],https://github.com/WebAssembly/wabt/pull/600,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/600,"Unify all uses of CHECK_RESULT
Use CHECK_RESULT in a few more places
Add operator| and operator|= to Result, use it instead of
COMBINE_RESULT
Change a few occurrences of !Succeeded to Failed","Unify all uses of CHECK_RESULT
Use CHECK_RESULT in a few more places
Add operator| and operator|= to Result, use it instead of
COMBINE_RESULT
Change a few occurrences of !Succeeded to Failed",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,601,2017-08-30T06:26:58Z,2017-08-30T07:10:25Z,2017-08-30T07:10:28Z,MERGED,True,303,297,90,https://github.com/binji,"Always include quoted headers like ""src/foo.h""",1,[],https://github.com/WebAssembly/wabt/pull/601,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/601,This way the names won't conflict with other headers with the same name.,This way the names won't conflict with other headers with the same name.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,602,2017-08-30T22:46:18Z,2017-08-31T05:15:45Z,2017-08-31T05:15:47Z,MERGED,True,230,168,9,https://github.com/binji,Use std::unique_ptr in intrusive-list API,1,[],https://github.com/WebAssembly/wabt/pull/602,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/602,"By using std::unique_ptr in more function signatures, we can avoid calls
to std::unique_ptr<T>::release.
This change also moves wabt::MakeUnique into src/make-unique.h so it
can be used in intrusive-list.h and test-intrusive-list.cc without
pulling in all of common.h.","By using std::unique_ptr in more function signatures, we can avoid calls
to std::unique_ptr<T>::release.
This change also moves wabt::MakeUnique into src/make-unique.h so it
can be used in intrusive-list.h and test-intrusive-list.cc without
pulling in all of common.h.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,603,2017-08-31T19:30:46Z,2017-08-31T22:07:54Z,2017-08-31T22:07:56Z,MERGED,True,104,107,15,https://github.com/binji,Update relocation names to match tool convention doc,1,[],https://github.com/WebAssembly/wabt/pull/603,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/603,See https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md#relocation-sections,See https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md#relocation-sections,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,603,2017-08-31T19:30:46Z,2017-08-31T22:07:54Z,2017-08-31T22:07:56Z,MERGED,True,104,107,15,https://github.com/binji,Update relocation names to match tool convention doc,1,[],https://github.com/WebAssembly/wabt/pull/603,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/603#issuecomment-326433487,See https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md#relocation-sections,"Still waiting on mac travis builder. I don't think there will be an issues. If there is, I'll fix in a subsequent PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,604,2017-08-31T22:16:48Z,2017-09-01T15:48:33Z,2017-09-01T15:48:36Z,MERGED,True,32,6,3,https://github.com/sbc100,Add more support for symbol types in linking section,2,[],https://github.com/WebAssembly/wabt/pull/604,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/604,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,605,2017-09-01T18:12:25Z,2017-09-01T19:03:15Z,2017-09-01T19:03:17Z,MERGED,True,37,34,6,https://github.com/binji,Return unique_ptr<Script> from parser,1,[],https://github.com/WebAssembly/wabt/pull/605,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/605,"This removes a few more places we were using delete. I also checked
the emscripten build and found that the previous change to
wabt::Result broke this, so I fixed those too.","This removes a few more places we were using delete. I also checked
the emscripten build and found that the previous change to
wabt::Result broke this, so I fixed those too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,606,2017-09-01T18:27:12Z,2017-09-01T23:01:04Z,2017-09-01T23:01:07Z,MERGED,True,36,36,1,https://github.com/sbc100,Remove some overuse of `auto` in wasm-link.cc,1,[],https://github.com/WebAssembly/wabt/pull/606,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/606,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,607,2017-09-01T18:28:26Z,2017-09-05T21:15:16Z,2017-09-05T21:15:18Z,MERGED,True,19,29,6,https://github.com/sbc100,Remove default cases from enum switches,4,[],https://github.com/WebAssembly/wabt/pull/607,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/607,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,608,2017-09-01T22:18:14Z,2017-09-04T17:41:40Z,2017-09-04T17:41:43Z,MERGED,True,12,1,2,https://github.com/binji,Fix parsing bug in ParseCommandList,1,[],https://github.com/WebAssembly/wabt/pull/608,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/608,"This would previously fire an assert because it was attempting to
ParseCommand when IsCommand was false.","This would previously fire an assert because it was attempting to
ParseCommand when IsCommand was false.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,609,2017-09-01T22:26:57Z,2017-09-04T17:42:34Z,2017-09-04T17:42:36Z,MERGED,True,338,249,8,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/609,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/609,"Mostly just updating test expectations
Function signatures need to be checked as part of parsing (see
assert_malformed test in testsuite/func.wast; added
ValidateFuncSignatures for this.","Mostly just updating test expectations
Function signatures need to be checked as part of parsing (see
assert_malformed test in testsuite/func.wast; added
ValidateFuncSignatures for this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,610,2017-09-01T23:48:09Z,2017-09-05T19:27:11Z,2017-09-05T21:24:49Z,MERGED,True,1981,1569,19,https://github.com/binji,"Add i{32,64}.extend{8,16,32}_s operators",2,[],https://github.com/WebAssembly/wabt/pull/610,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/610,Also add thread feature (via --enable-threads).,Also add thread feature (via --enable-threads).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,610,2017-09-01T23:48:09Z,2017-09-05T19:27:11Z,2017-09-05T21:24:49Z,MERGED,True,1981,1569,19,https://github.com/binji,"Add i{32,64}.extend{8,16,32}_s operators",2,[],https://github.com/WebAssembly/wabt/pull/610,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/610#issuecomment-327269486,Also add thread feature (via --enable-threads).,"lgtm, but why are these new sign extend operators linked to threading?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,610,2017-09-01T23:48:09Z,2017-09-05T19:27:11Z,2017-09-05T21:24:49Z,MERGED,True,1981,1569,19,https://github.com/binji,"Add i{32,64}.extend{8,16,32}_s operators",2,[],https://github.com/WebAssembly/wabt/pull/610,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/610#issuecomment-327270915,Also add thread feature (via --enable-threads).,"It's a bit weird, but they were introduced w/ the threading proposal (because they'll work in tandem w/ the atomic zero-extending instructions). Do you think it's worth separating them out? It seems like it would be annoying to have to pass two flags to use sign-extension and atomics in that case.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,610,2017-09-01T23:48:09Z,2017-09-05T19:27:11Z,2017-09-05T21:24:49Z,MERGED,True,1981,1569,19,https://github.com/binji,"Add i{32,64}.extend{8,16,32}_s operators",2,[],https://github.com/WebAssembly/wabt/pull/610,https://github.com/dschuff,4,https://github.com/WebAssembly/wabt/pull/610#issuecomment-327307643,Also add thread feature (via --enable-threads).,I think one flag makes sense since it enables both features.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,610,2017-09-01T23:48:09Z,2017-09-05T19:27:11Z,2017-09-05T21:24:49Z,MERGED,True,1981,1569,19,https://github.com/binji,"Add i{32,64}.extend{8,16,32}_s operators",2,[],https://github.com/WebAssembly/wabt/pull/610,https://github.com/dschuff,5,https://github.com/WebAssembly/wabt/pull/610#issuecomment-327307891,Also add thread feature (via --enable-threads).,"Or I guess I should say, enables both features in the platform. Might not matter so much for WABT, but even for more user-facing tools like emscripten, there will just be one control and one feature test.",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,611,2017-09-04T20:03:54Z,2017-09-05T05:22:17Z,2017-09-05T05:22:19Z,MERGED,True,2,0,1,https://github.com/binji,Fix file descriptor leak in writer.cc,1,[],https://github.com/WebAssembly/wabt/pull/611,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/611,Fixes #571.,Fixes #571.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,612,2017-09-07T04:37:18Z,2017-09-07T05:24:11Z,2017-09-07T05:24:14Z,MERGED,True,209,144,8,https://github.com/binji,Move LEB128 stuff to its own file,1,[],https://github.com/WebAssembly/wabt/pull/612,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/612,Also rename some of the functions.,Also rename some of the functions.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,613,2017-09-07T05:51:00Z,2017-09-07T06:28:43Z,2017-09-07T06:28:45Z,MERGED,True,382,495,19,https://github.com/binji,"Remove Writer class, move functionality into Stream",2,[],https://github.com/WebAssembly/wabt/pull/613,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/613,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,614,2017-09-07T08:37:55Z,2017-09-07T18:33:50Z,2017-09-07T18:33:53Z,MERGED,True,324,21,8,https://github.com/binji,Generate $var names from import/export names,3,[],https://github.com/WebAssembly/wabt/pull/614,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/614,"Also make sure that we don't accidentally generate names that are
already used.","Also make sure that we don't accidentally generate names that are
already used.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,615,2017-09-08T00:27:02Z,2017-09-08T03:33:52Z,2017-09-08T03:33:54Z,MERGED,True,445,448,6,https://github.com/binji,Append trailing underscore on private member names,1,[],https://github.com/WebAssembly/wabt/pull/615,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/615,"Most classes already did this, but there were some that needed to be
fixed.","Most classes already did this, but there were some that needed to be
fixed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,616,2017-09-08T06:55:07Z,2017-09-08T07:17:38Z,2017-09-08T07:17:41Z,MERGED,True,93,93,48,https://github.com/binji,Rename wasm2wast -> wasm2wat,1,[],https://github.com/WebAssembly/wabt/pull/616,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/616,See issue #543.,See issue #543.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,617,2017-09-08T07:21:36Z,2017-09-08T14:35:34Z,2017-09-08T14:35:37Z,MERGED,True,346,192,61,https://github.com/binji,"Rename wast2wasm -> wat2wasm, wast2json",1,[],https://github.com/WebAssembly/wabt/pull/617,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/617,"wat2wasm only parses wat files (individual modules)
wast2json parses spec test files and generates json + wasm

See issue #543.","wat2wasm only parses wat files (individual modules)
wast2json parses spec test files and generates json + wasm

See issue #543.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,618,2017-09-08T21:51:32Z,2017-09-08T22:53:38Z,2017-09-09T00:12:57Z,MERGED,True,240,271,6,https://github.com/binji,Move Interpreter::Opcodes into Opcode,1,[],https://github.com/WebAssembly/wabt/pull/618,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/618,"Having the interpreter use its own opcodes was convenient because it
adds a few additional codes (e.g. alloca, br_unless, etc).
As soon as we add the atomic instructions, this count goes above 1-byte,
so we need some mechanism for storing those codes. We could just
increase the opcode size to uint16_t, but it's simpler to just use the
same encoding as the WebAssembly binary format.
The one drawback is that mapping from the encoding to Opcode is a
log2(n) operation currently. This doesn't affect the speed of running
tests at all because it is too insignificant, but it's worth mentioning.","Having the interpreter use its own opcodes was convenient because it
adds a few additional codes (e.g. alloca, br_unless, etc).
As soon as we add the atomic instructions, this count goes above 1-byte,
so we need some mechanism for storing those codes. We could just
increase the opcode size to uint16_t, but it's simpler to just use the
same encoding as the WebAssembly binary format.
The one drawback is that mapping from the encoding to Opcode is a
log2(n) operation currently. This doesn't affect the speed of running
tests at all because it is too insignificant, but it's worth mentioning.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,618,2017-09-08T21:51:32Z,2017-09-08T22:53:38Z,2017-09-09T00:12:57Z,MERGED,True,240,271,6,https://github.com/binji,Move Interpreter::Opcodes into Opcode,1,[],https://github.com/WebAssembly/wabt/pull/618,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/618#issuecomment-328240580,"Having the interpreter use its own opcodes was convenient because it
adds a few additional codes (e.g. alloca, br_unless, etc).
As soon as we add the atomic instructions, this count goes above 1-byte,
so we need some mechanism for storing those codes. We could just
increase the opcode size to uint16_t, but it's simpler to just use the
same encoding as the WebAssembly binary format.
The one drawback is that mapping from the encoding to Opcode is a
log2(n) operation currently. This doesn't affect the speed of running
tests at all because it is too insignificant, but it's worth mentioning.",Why not define the enum to have the same values as the encoding?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,618,2017-09-08T21:51:32Z,2017-09-08T22:53:38Z,2017-09-09T00:12:57Z,MERGED,True,240,271,6,https://github.com/binji,Move Interpreter::Opcodes into Opcode,1,[],https://github.com/WebAssembly/wabt/pull/618,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/618#issuecomment-328240711,"Having the interpreter use its own opcodes was convenient because it
adds a few additional codes (e.g. alloca, br_unless, etc).
As soon as we add the atomic instructions, this count goes above 1-byte,
so we need some mechanism for storing those codes. We could just
increase the opcode size to uint16_t, but it's simpler to just use the
same encoding as the WebAssembly binary format.
The one drawback is that mapping from the encoding to Opcode is a
log2(n) operation currently. This doesn't affect the speed of running
tests at all because it is too insignificant, but it's worth mentioning.","Because the encoding uses a prefix byte followed by LEB, so it can't really map 1-1. Maybe it would be fine to just do (prefix << 8) | opcode though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,619,2017-09-08T22:52:51Z,2017-09-08T23:54:19Z,2017-09-08T23:54:21Z,MERGED,True,2,1,1,https://github.com/binji,Add virtual destructor to Stream,1,[],https://github.com/WebAssembly/wabt/pull/619,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/619,"Seems to be causing a warning on some builds; I didn't see it on Travis,
though.","Seems to be causing a warning on some builds; I didn't see it on Travis,
though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,619,2017-09-08T22:52:51Z,2017-09-08T23:54:19Z,2017-09-08T23:54:21Z,MERGED,True,2,1,1,https://github.com/binji,Add virtual destructor to Stream,1,[],https://github.com/WebAssembly/wabt/pull/619,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/619#issuecomment-328239096,"Seems to be causing a warning on some builds; I didn't see it on Travis,
though.",Landing since this will likely fix the waterfall failures.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,622,2017-09-12T21:25:54Z,2017-09-12T23:30:50Z,2017-09-12T23:30:52Z,MERGED,True,119,56,15,https://github.com/binji,Only allow parsing one module with wat2wasm,1,[],https://github.com/WebAssembly/wabt/pull/622,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/622,".wat files can only contain one module, and no assertions.
This fixes issue #621.",".wat files can only contain one module, and no assertions.
This fixes issue #621.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,624,2017-09-13T22:51:10Z,2017-09-14T00:26:23Z,2017-09-14T01:59:29Z,MERGED,True,3,2,2,https://github.com/Cellule,Add an interface to enable features,2,[],https://github.com/WebAssembly/wabt/pull/624,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/624,Make it possible for a consumer other than a console application to set features.,Make it possible for a consumer other than a console application to set features.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,625,2017-09-14T01:05:09Z,2017-09-14T01:45:30Z,2017-09-14T01:45:32Z,MERGED,True,317,11,2,https://github.com/binji,Support non-POD types in CircularArray,1,[],https://github.com/WebAssembly/wabt/pull/625,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/625,"This is necessary if we want to allow Token to have a destructor.
Also add some tests for the API.","This is necessary if we want to allow Token to have a destructor.
Also add some tests for the API.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,626,2017-09-14T01:59:23Z,2017-09-15T02:06:19Z,2017-09-15T02:06:22Z,MERGED,True,1128,979,10,https://github.com/binji,Fix potential use-after-free in WastLexer,2,[],https://github.com/WebAssembly/wabt/pull/626,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/626,"Fixes issue #623.

Move Token into its own file.
Add WastParser tests. These ones are used because the source text is
very large, and it may be useful to generate parser tests
programmatically in the future too.
Reorganize TokenType by the union data member it uses. This makes it
easier to determine which member needs to be
constructed/copied/destroyed.

Bare (no data)
Literal
Opcode
String
Type


Make Token store its string/literal data directly, rather than share
with lexer. This actually fixes the bug.
Fix a couple of line-printing bugs:

Very long tokens (e.g. ""a"" 20000 times) are now clamped to 80 chars.
Very long lines are displayed properly in errors (e.g. a line with
65000 columns).



Fix a couple of line printing bugs, add tests","Fixes issue #623.

Move Token into its own file.
Add WastParser tests. These ones are used because the source text is
very large, and it may be useful to generate parser tests
programmatically in the future too.
Reorganize TokenType by the union data member it uses. This makes it
easier to determine which member needs to be
constructed/copied/destroyed.

Bare (no data)
Literal
Opcode
String
Type


Make Token store its string/literal data directly, rather than share
with lexer. This actually fixes the bug.
Fix a couple of line-printing bugs:

Very long tokens (e.g. ""a"" 20000 times) are now clamped to 80 chars.
Very long lines are displayed properly in errors (e.g. a line with
65000 columns).



Fix a couple of line printing bugs, add tests",True,{'HOORAY': ['https://github.com/Cellule']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,628,2017-09-15T00:18:38Z,2017-09-15T02:05:06Z,2017-09-15T02:05:09Z,MERGED,True,17,24,6,https://github.com/sbc100,Enable all reader features in objdump,1,[],https://github.com/WebAssembly/wabt/pull/628,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/628,"Objdump should really make a best effort to display
anything its given.  There are other tools that are
better suited for validation.
Partial fix for #627","Objdump should really make a best effort to display
anything its given.  There are other tools that are
better suited for validation.
Partial fix for #627",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,629,2017-09-15T01:19:32Z,2017-09-20T00:14:35Z,2017-09-20T00:14:42Z,CLOSED,False,26,4,2,https://github.com/sbc100,Correctly report the value of bad opcodes,1,[],https://github.com/WebAssembly/wabt/pull/629,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/629,"Previously we were always reporting 0.
Partial fix for #627","Previously we were always reporting 0.
Partial fix for #627",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,629,2017-09-15T01:19:32Z,2017-09-20T00:14:35Z,2017-09-20T00:14:42Z,CLOSED,False,26,4,2,https://github.com/sbc100,Correctly report the value of bad opcodes,1,[],https://github.com/WebAssembly/wabt/pull/629,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/629#issuecomment-330708867,"Previously we were always reporting 0.
Partial fix for #627",Closing since #630 landed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,630,2017-09-16T00:42:49Z,2017-09-19T19:07:20Z,2017-09-19T19:07:23Z,MERGED,True,99,18,4,https://github.com/binji,Correctly report the value of bad opcodes,2,[],https://github.com/WebAssembly/wabt/pull/630,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/630,"Previously the opcode would always return 0.
Since Opcode only stores an enumeration, we represent invalid opcodes
as a negative number. This way Opcode::GetInfo can return the invalid
prefix and opcode number.
For now, these values are both 1-byte, but the current encoding can
be expanded to 2**24 opcodes.
This is a partial fix for #627.","Previously the opcode would always return 0.
Since Opcode only stores an enumeration, we represent invalid opcodes
as a negative number. This way Opcode::GetInfo can return the invalid
prefix and opcode number.
For now, these values are both 1-byte, but the current encoding can
be expanded to 2**24 opcodes.
This is a partial fix for #627.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,630,2017-09-16T00:42:49Z,2017-09-19T19:07:20Z,2017-09-19T19:07:23Z,MERGED,True,99,18,4,https://github.com/binji,Correctly report the value of bad opcodes,2,[],https://github.com/WebAssembly/wabt/pull/630,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/630#issuecomment-329933105,"Previously the opcode would always return 0.
Since Opcode only stores an enumeration, we represent invalid opcodes
as a negative number. This way Opcode::GetInfo can return the invalid
prefix and opcode number.
For now, these values are both 1-byte, but the current encoding can
be expanded to 2**24 opcodes.
This is a partial fix for #627.","Forked this from your PR @sbc100, hope you don't mind.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,630,2017-09-16T00:42:49Z,2017-09-19T19:07:20Z,2017-09-19T19:07:23Z,MERGED,True,99,18,4,https://github.com/binji,Correctly report the value of bad opcodes,2,[],https://github.com/WebAssembly/wabt/pull/630,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/630#issuecomment-330640024,"Previously the opcode would always return 0.
Since Opcode only stores an enumeration, we represent invalid opcodes
as a negative number. This way Opcode::GetInfo can return the invalid
prefix and opcode number.
For now, these values are both 1-byte, but the current encoding can
be expanded to 2**24 opcodes.
This is a partial fix for #627.",I added a comment to help explain a bit.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,632,2017-09-18T22:19:17Z,2017-09-20T06:23:43Z,2017-09-20T06:23:46Z,MERGED,True,2236,2152,15,https://github.com/dschuff,Parse and dump shared limits fields,7,[],https://github.com/WebAssembly/wabt/pull/632,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/632,Wat and binary support for shared memory limits fields.,Wat and binary support for shared memory limits fields.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,632,2017-09-18T22:19:17Z,2017-09-20T06:23:43Z,2017-09-20T06:23:46Z,MERGED,True,2236,2152,15,https://github.com/dschuff,Parse and dump shared limits fields,7,[],https://github.com/WebAssembly/wabt/pull/632,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/632#issuecomment-330372803,Wat and binary support for shared memory limits fields.,"I should add that this is still sort of WIP; I just realized I forgot binary output, and I have a test failure but right now I'm mostly using it to debug Binaryen output.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,633,2017-09-19T18:34:45Z,2017-09-20T16:49:59Z,2017-09-20T16:50:02Z,MERGED,True,7246,1886,43,https://github.com/binji,Add Atomic instructions,1,[],https://github.com/WebAssembly/wabt/pull/633,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/633,"This adds support for all atomic instructions, enabled via the --enable-threads flag.
It supports all tools: parsing text, decoding binary, validation, and interpreting. It does not currently ensure that the memory is marked as shared; that flag is not supported in wabt yet.","This adds support for all atomic instructions, enabled via the --enable-threads flag.
It supports all tools: parsing text, decoding binary, validation, and interpreting. It does not currently ensure that the memory is marked as shared; that flag is not supported in wabt yet.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,633,2017-09-19T18:34:45Z,2017-09-20T16:49:59Z,2017-09-20T16:50:02Z,MERGED,True,7246,1886,43,https://github.com/binji,Add Atomic instructions,1,[],https://github.com/WebAssembly/wabt/pull/633,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/633#issuecomment-330653853,"This adds support for all atomic instructions, enabled via the --enable-threads flag.
It supports all tools: parsing text, decoding binary, validation, and interpreting. It does not currently ensure that the memory is marked as shared; that flag is not supported in wabt yet.",Do you plan to land this soon? If so I'll rebase #632 on top of it.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,633,2017-09-19T18:34:45Z,2017-09-20T16:49:59Z,2017-09-20T16:50:02Z,MERGED,True,7246,1886,43,https://github.com/binji,Add Atomic instructions,1,[],https://github.com/WebAssembly/wabt/pull/633,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/633#issuecomment-330668456,"This adds support for all atomic instructions, enabled via the --enable-threads flag.
It supports all tools: parsing text, decoding binary, validation, and interpreting. It does not currently ensure that the memory is marked as shared; that flag is not supported in wabt yet.","Pretty soon, just need to add a few more tests and fix the build failures.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,633,2017-09-19T18:34:45Z,2017-09-20T16:49:59Z,2017-09-20T16:50:02Z,MERGED,True,7246,1886,43,https://github.com/binji,Add Atomic instructions,1,[],https://github.com/WebAssembly/wabt/pull/633,https://github.com/dschuff,4,https://github.com/WebAssembly/wabt/pull/633#issuecomment-330676325,"This adds support for all atomic instructions, enabled via the --enable-threads flag.
It supports all tools: parsing text, decoding binary, validation, and interpreting. It does not currently ensure that the memory is marked as shared; that flag is not supported in wabt yet.","632 might be ready now, but GH doesn't seem to be dispatching any builds to Travis or AppVeyor right now :/",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,634,2017-09-21T23:30:54Z,2017-09-22T01:24:55Z,2017-09-22T01:24:57Z,MERGED,True,9994,18,4,https://github.com/binji,Add tracing/logging output for atomic instructions,2,[],https://github.com/WebAssembly/wabt/pull/634,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/634,"I forgot to add these in the last PR. It's easy to miss since there was
a default case on both switch statements.
This PR removes the default cases and explicitly enumerates the invalid
cases. It also adds two tests of all opcodes that can be
traced/disassembled in the interpreter.","I forgot to add these in the last PR. It's easy to miss since there was
a default case on both switch statements.
This PR removes the default cases and explicitly enumerates the invalid
cases. It also adds two tests of all opcodes that can be
traced/disassembled in the interpreter.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,635,2017-09-22T01:26:28Z,2017-09-22T07:55:45Z,2017-09-22T07:55:47Z,MERGED,True,174,162,3,https://github.com/binji,Move Leb128 reading functions to leb128.cc,1,[],https://github.com/WebAssembly/wabt/pull/635,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/635,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,636,2017-09-22T20:50:29Z,2017-09-27T02:02:55Z,2017-09-27T02:02:57Z,MERGED,True,67,16,8,https://github.com/binji,[wasm-objdump] Continue reading sections on error,1,[],https://github.com/WebAssembly/wabt/pull/636,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/636,"wasm-objdump wants to always try to read as much of the binary as
possible. This change adds a new BinaryReader option called
stop_on_first_error which can be set to false to enable this
behavior.
Currently this will bail on any error in a section, but will try to read
the next section. We may expand the error-handling behavior to try and
recover inside of a section as well, but it's probably best to keep it
simple for now.
Because wasm-objdump does multiple passes over the binary, the errors
would normally be displayed multiple times. We also add a OnError
override which will suppress the error message for all passes other than
the first.
I took this opportunity to clean up a binary-reader.cc a little too:

Remove IN_SIZE macro and use a template instead
Change C comments to C++ comments","wasm-objdump wants to always try to read as much of the binary as
possible. This change adds a new BinaryReader option called
stop_on_first_error which can be set to false to enable this
behavior.
Currently this will bail on any error in a section, but will try to read
the next section. We may expand the error-handling behavior to try and
recover inside of a section as well, but it's probably best to keep it
simple for now.
Because wasm-objdump does multiple passes over the binary, the errors
would normally be displayed multiple times. We also add a OnError
override which will suppress the error message for all passes other than
the first.
I took this opportunity to clean up a binary-reader.cc a little too:

Remove IN_SIZE macro and use a template instead
Change C comments to C++ comments",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,636,2017-09-22T20:50:29Z,2017-09-27T02:02:55Z,2017-09-27T02:02:57Z,MERGED,True,67,16,8,https://github.com/binji,[wasm-objdump] Continue reading sections on error,1,[],https://github.com/WebAssembly/wabt/pull/636,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/636#issuecomment-332011135,"wasm-objdump wants to always try to read as much of the binary as
possible. This change adds a new BinaryReader option called
stop_on_first_error which can be set to false to enable this
behavior.
Currently this will bail on any error in a section, but will try to read
the next section. We may expand the error-handling behavior to try and
recover inside of a section as well, but it's probably best to keep it
simple for now.
Because wasm-objdump does multiple passes over the binary, the errors
would normally be displayed multiple times. We also add a OnError
override which will suppress the error message for all passes other than
the first.
I took this opportunity to clean up a binary-reader.cc a little too:

Remove IN_SIZE macro and use a template instead
Change C comments to C++ comments",@sbc100 ping!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,636,2017-09-22T20:50:29Z,2017-09-27T02:02:55Z,2017-09-27T02:02:57Z,MERGED,True,67,16,8,https://github.com/binji,[wasm-objdump] Continue reading sections on error,1,[],https://github.com/WebAssembly/wabt/pull/636,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/636#issuecomment-332283970,"wasm-objdump wants to always try to read as much of the binary as
possible. This change adds a new BinaryReader option called
stop_on_first_error which can be set to false to enable this
behavior.
Currently this will bail on any error in a section, but will try to read
the next section. We may expand the error-handling behavior to try and
recover inside of a section as well, but it's probably best to keep it
simple for now.
Because wasm-objdump does multiple passes over the binary, the errors
would normally be displayed multiple times. We also add a OnError
override which will suppress the error message for all passes other than
the first.
I took this opportunity to clean up a binary-reader.cc a little too:

Remove IN_SIZE macro and use a template instead
Change C comments to C++ comments",Would it be easy to split the cleanup (comments + templates) into its own CL?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,636,2017-09-22T20:50:29Z,2017-09-27T02:02:55Z,2017-09-27T02:02:57Z,MERGED,True,67,16,8,https://github.com/binji,[wasm-objdump] Continue reading sections on error,1,[],https://github.com/WebAssembly/wabt/pull/636,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/636#issuecomment-332286710,"wasm-objdump wants to always try to read as much of the binary as
possible. This change adds a new BinaryReader option called
stop_on_first_error which can be set to false to enable this
behavior.
Currently this will bail on any error in a section, but will try to read
the next section. We may expand the error-handling behavior to try and
recover inside of a section as well, but it's probably best to keep it
simple for now.
Because wasm-objdump does multiple passes over the binary, the errors
would normally be displayed multiple times. We also add a OnError
override which will suppress the error message for all passes other than
the first.
I took this opportunity to clean up a binary-reader.cc a little too:

Remove IN_SIZE macro and use a template instead
Change C comments to C++ comments","@sbc100 Yeah, probably should. I'm always trying to sneak stuff in... :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,638,2017-09-23T00:40:55Z,2017-09-23T01:33:05Z,2017-09-23T01:33:07Z,MERGED,True,14,2,3,https://github.com/binji,Fix assertion in wat2wasm for `(module (test))`,1,[],https://github.com/WebAssembly/wabt/pull/638,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/638,This fixes issue #637.,This fixes issue #637.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,638,2017-09-23T00:40:55Z,2017-09-23T01:33:05Z,2017-09-23T01:33:07Z,MERGED,True,14,2,3,https://github.com/binji,Fix assertion in wat2wasm for `(module (test))`,1,[],https://github.com/WebAssembly/wabt/pull/638,https://github.com/Cellule,2,https://github.com/WebAssembly/wabt/pull/638#issuecomment-331591204,This fixes issue #637.,👍,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,640,2017-09-27T02:01:28Z,2017-09-27T02:02:03Z,2017-09-27T02:02:06Z,MERGED,True,29,23,1,https://github.com/binji,Some cleanup in binary-reader.cc,1,[],https://github.com/WebAssembly/wabt/pull/640,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/640,"Remove IN_SIZE macro and use a template instead
Change C comments to C++ comments","Remove IN_SIZE macro and use a template instead
Change C comments to C++ comments",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,640,2017-09-27T02:01:28Z,2017-09-27T02:02:03Z,2017-09-27T02:02:06Z,MERGED,True,29,23,1,https://github.com/binji,Some cleanup in binary-reader.cc,1,[],https://github.com/WebAssembly/wabt/pull/640,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/640#issuecomment-332386952,"Remove IN_SIZE macro and use a template instead
Change C comments to C++ comments",Split out from #636.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,641,2017-09-27T23:59:06Z,2017-09-28T05:53:39Z,2017-09-28T05:53:42Z,MERGED,True,4147,3863,19,https://github.com/binji,Validate that atomic accesses have shared memory,2,[],https://github.com/WebAssembly/wabt/pull/641,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/641,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,642,2017-09-28T07:26:51Z,2017-09-28T08:05:39Z,2017-09-28T08:05:42Z,MERGED,True,32,32,16,https://github.com/binji,Rename `wast-desugar` to `wat-desugar`.,1,[],https://github.com/WebAssembly/wabt/pull/642,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/642,See issue #543.,See issue #543.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,643,2017-10-02T23:31:03Z,2017-10-03T17:28:35Z,2017-10-03T17:28:37Z,MERGED,True,5433,5080,12,https://github.com/binji,Add spectest-interp tool; split from wasm-interp,1,[],https://github.com/WebAssembly/wabt/pull/643,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/643,"wasm-interp tool now only runs .wasm file, not spec tests
wasm-interp has a new flag --host-print for importing a print
function named ""host.print""
spectest-interp tool runs only .json files","wasm-interp tool now only runs .wasm file, not spec tests
wasm-interp has a new flag --host-print for importing a print
function named ""host.print""
spectest-interp tool runs only .json files",True,{'THUMBS_UP': ['https://github.com/caasi']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,644,2017-10-03T18:06:50Z,2017-10-03T22:56:34Z,2017-10-03T22:56:36Z,MERGED,True,217,364,5,https://github.com/binji,Share code between wasm-interp and spectest-interp,1,[],https://github.com/WebAssembly/wabt/pull/644,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/644,"Also:

Add TypedValues typedef (for std::vector<TypedValue>)
Fix bug when displaying very large numbers in the interpreter; length
was capped at 100 characters","Also:

Add TypedValues typedef (for std::vector<TypedValue>)
Fix bug when displaying very large numbers in the interpreter; length
was capped at 100 characters",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,645,2017-10-05T18:32:41Z,2017-10-05T19:22:50Z,2017-10-05T19:22:52Z,MERGED,True,734,595,1,https://github.com/binji,Refactor spectest-interp,1,[],https://github.com/WebAssembly/wabt/pull/645,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/645,"Separate SpecJSONParser into JSONParser and CommandRunner. Also add
the spectest namespace to avoid defining ambiguous names at the global
scope.
It's cleaner this way, and it will also make it easier to handle the new
threads command, which contains subcommands that need to be run in
parallel.","Separate SpecJSONParser into JSONParser and CommandRunner. Also add
the spectest namespace to avoid defining ambiguous names at the global
scope.
It's cleaner this way, and it will also make it easier to handle the new
threads command, which contains subcommands that need to be run in
parallel.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,646,2017-10-05T23:57:41Z,2017-10-06T04:47:41Z,2017-10-06T04:47:44Z,MERGED,True,8592,8090,34,https://github.com/binji,"Add `i{32,64}.wait` and `wake` operators",3,[],https://github.com/WebAssembly/wabt/pull/646,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/646,This implements everything except the interpreter.,This implements everything except the interpreter.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,647,2017-10-06T18:23:07Z,2017-10-06T23:40:59Z,2017-10-06T23:41:02Z,MERGED,True,41,13,8,https://github.com/binji,Fix some fuzzer-found regressions,3,[],https://github.com/WebAssembly/wabt/pull/647,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/647,"Assertion/hang when parsing an invalid value type list
Assertion parsing an invalid module field
Assertion when two start sections are specified, and one of them has a
named function","Assertion/hang when parsing an invalid value type list
Assertion parsing an invalid module field
Assertion when two start sections are specified, and one of them has a
named function",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,648,2017-10-10T17:44:30Z,2017-10-10T18:33:48Z,2017-10-10T18:33:52Z,MERGED,True,96,81,3,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/648,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/648,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,649,2017-10-12T18:55:32Z,2017-10-12T19:22:39Z,2017-10-12T19:22:42Z,MERGED,True,359,383,9,https://github.com/binji,Rename interpreter -> interp everywhere,1,[],https://github.com/WebAssembly/wabt/pull/649,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/649,"We already used interp in a few places, may as well be consistent.","We already used interp in a few places, may as well be consistent.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,650,2017-10-12T19:35:17Z,2017-10-12T21:07:18Z,2017-10-12T21:07:21Z,MERGED,True,257,253,4,https://github.com/binji,Refactor interpreter execution,2,[],https://github.com/WebAssembly/wabt/pull/650,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/650,"Move Thread::Run* functions into Executor. The executor abstracts
over any execution, which will allow us to simulated multi-threaded
execution (which would be awkward to implement with an API on the
Thread object).
Add ExecResult type which wraps an interp::Result and the results
from the function. There are too many things called Result now, so
perhaps some should be renamed. Not sure what to call them though.
Expose some of the low-level functionality of Thread as public
member functions. This means that it is possible to get Thread into
an invalid state, but IMO that's OK since the assumption is that you
know what you're doing if you use the Thread API.
Simplify value_stack and call_stack to use array indexes instead of
pointers.
Remove the call_stack_return_top. This was used to handle calling
back and forth between the interpreter and the host, but this is not
currently done anywhere anymore. It's probably better to remove this
functionality until it is used (if ever).","Move Thread::Run* functions into Executor. The executor abstracts
over any execution, which will allow us to simulated multi-threaded
execution (which would be awkward to implement with an API on the
Thread object).
Add ExecResult type which wraps an interp::Result and the results
from the function. There are too many things called Result now, so
perhaps some should be renamed. Not sure what to call them though.
Expose some of the low-level functionality of Thread as public
member functions. This means that it is possible to get Thread into
an invalid state, but IMO that's OK since the assumption is that you
know what you're doing if you use the Thread API.
Simplify value_stack and call_stack to use array indexes instead of
pointers.
Remove the call_stack_return_top. This was used to handle calling
back and forth between the interpreter and the host, but this is not
currently done anywhere anymore. It's probably better to remove this
functionality until it is used (if ever).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,652,2017-10-13T22:21:50Z,2017-10-13T22:58:02Z,2017-10-13T22:58:05Z,MERGED,True,145,184,1,https://github.com/binji,Small cleanup of `CommandRunner`,1,[],https://github.com/WebAssembly/wabt/pull/652,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/652,"RunAction now returns an ExecResult
Remove handling of passed_ and total_ from command handlers
Simplify command handlers to have similar structure -- try to error
out early and fall through to success at the bottom.","RunAction now returns an ExecResult
Remove handling of passed_ and total_ from command handlers
Simplify command handlers to have similar structure -- try to error
out early and fall through to success at the bottom.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,653,2017-10-13T23:05:38Z,2017-10-14T07:12:29Z,2017-10-14T07:12:32Z,MERGED,True,716,2,3,https://github.com/binji,Validate utf-8 encoding in text format,1,[],https://github.com/WebAssembly/wabt/pull/653,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/653,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,654,2017-10-13T23:52:53Z,2017-10-14T07:15:39Z,2017-10-14T07:15:42Z,MERGED,True,199,79,14,https://github.com/binji,Update output of gen-spec-js to match spec,1,[],https://github.com/WebAssembly/wabt/pull/654,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/654,"Use ""call"" and ""get"" helpers instead of accessing exports directly
Don't use $$ for the most recent instance, instead always use a
numbered instance (e.g. $3)
Add comments before each command with file and line number","Use ""call"" and ""get"" helpers instead of accessing exports directly
Don't use $$ for the most recent instance, instead always use a
numbered instance (e.g. $3)
Add comments before each command with file and line number",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,655,2017-10-14T07:37:54Z,2017-10-15T18:18:16Z,2017-10-15T18:18:16Z,MERGED,True,1195,129,11,https://github.com/krisselden,Update demos to add JS eval to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/655,https://github.com/krisselden,1,https://github.com/WebAssembly/wabt/pull/655,Some minor redesign of demos.,Some minor redesign of demos.,True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,655,2017-10-14T07:37:54Z,2017-10-15T18:18:16Z,2017-10-15T18:18:16Z,MERGED,True,1195,129,11,https://github.com/krisselden,Update demos to add JS eval to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/655,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/655#issuecomment-336680849,Some minor redesign of demos.,"Very cool! Thanks for doing this. The only thing I was wondering was about whether it makes sense to use template strings, rest params and let, but I guess they've been around for a long time now so there's not much worry.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,655,2017-10-14T07:37:54Z,2017-10-15T18:18:16Z,2017-10-15T18:18:16Z,MERGED,True,1195,129,11,https://github.com/krisselden,Update demos to add JS eval to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/655,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/655#issuecomment-336681104,Some minor redesign of demos.,"By the way, can you join the community group? It's required to contribute to WebAssembly GH projects. Sorry I forgot to mention this before.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,655,2017-10-14T07:37:54Z,2017-10-15T18:18:16Z,2017-10-15T18:18:16Z,MERGED,True,1195,129,11,https://github.com/krisselden,Update demos to add JS eval to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/655,https://github.com/krisselden,4,https://github.com/WebAssembly/wabt/pull/655#issuecomment-336683052,Some minor redesign of demos.,"As far as I know, there is no browser that supports WebAssembly that does not also support the features I used.
I created an account and filled out the form requesting to join as a collaborator.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,655,2017-10-14T07:37:54Z,2017-10-15T18:18:16Z,2017-10-15T18:18:16Z,MERGED,True,1195,129,11,https://github.com/krisselden,Update demos to add JS eval to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/655,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/655#issuecomment-336730453,Some minor redesign of demos.,"As far as I know, there is no browser that supports WebAssembly that does not also support the features I used.

Right, but the library was compiled w/ asm.js so didn't require WebAssembly before. In any case, I think it should be fine.

I created an account and filled out the form requesting to join as a collaborator.

Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,656,2017-10-16T23:58:39Z,2017-10-17T19:24:27Z,2017-10-17T19:32:08Z,MERGED,True,78,2,8,https://github.com/sbc100,wasm-objdump: Add support for data segment info,2,[],https://github.com/WebAssembly/wabt/pull/656,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/656,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,657,2017-10-19T00:28:51Z,2017-10-19T18:00:40Z,2017-10-19T18:00:43Z,MERGED,True,15,2,2,https://github.com/binji,Set the `loc` member in `Const`,1,[],https://github.com/WebAssembly/wabt/pull/657,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/657,"After the switch to the recursive descent parser, this wasn't properly
being set. As a result, certain errors would not have a proper location.","After the switch to the recursive descent parser, this wasn't properly
being set. As a result, certain errors would not have a proper location.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,658,2017-10-23T03:02:08Z,2017-10-23T04:10:34Z,2017-10-23T04:10:36Z,MERGED,True,18,3,1,https://github.com/binji,Support newer ubsan with -fno-sanitize-recover=all,1,[],https://github.com/WebAssembly/wabt/pull/658,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/658,"UBSAN normally will only print errors and continue, but you can use
-fno-sanitize-recover to have it abort with an error message. At some
point the flag was made to require a parameter. We want to support both,
so we check at configuration time which one is allowed by the compiler.","UBSAN normally will only print errors and continue, but you can use
-fno-sanitize-recover to have it abort with an error message. At some
point the flag was made to require a parameter. We want to support both,
so we check at configuration time which one is allowed by the compiler.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,659,2017-10-23T21:38:42Z,2017-10-23T22:10:12Z,2017-10-23T22:10:14Z,MERGED,True,1,2,1,https://github.com/binji,Use simpler way to check for unaligned atomics,1,[],https://github.com/WebAssembly/wabt/pull/659,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/659,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,660,2017-10-24T21:40:04Z,2017-10-25T16:37:32Z,2017-10-25T16:37:34Z,MERGED,True,100,101,4,https://github.com/binji,Rename the counting builtins (clz/ctz/popcount),6,[],https://github.com/WebAssembly/wabt/pull/660,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/660,"Put them in the wabt namespace and follow the normal naming convention
(MixedCase).
More importantly, these are now defined for all inputs, instead of using
__builtin_c[tl]z* directly which are undefined for 0.","Put them in the wabt namespace and follow the normal naming convention
(MixedCase).
More importantly, these are now defined for all inputs, instead of using
__builtin_c[tl]z* directly which are undefined for 0.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,661,2017-10-26T18:48:15Z,2017-10-26T21:09:29Z,2017-10-26T21:09:31Z,MERGED,True,29,37,23,https://github.com/binji,Change shared memory text syntax,1,[],https://github.com/WebAssembly/wabt/pull/661,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/661,"This used to be (shared <min> <max>) and is now <min> <max> shared.
See WebAssembly/threads#74.","This used to be (shared <min> <max>) and is now <min> <max> shared.
See WebAssembly/threads#74.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,662,2017-10-27T18:31:26Z,2017-10-30T18:17:05Z,2017-10-30T18:17:08Z,MERGED,True,879,943,60,https://github.com/binji,Better type-checking errors,4,[],https://github.com/WebAssembly/wabt/pull/662,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/662,"Instead of printing errors on every failure, accumulate errors for each
operation. If any fails, then print a message. It changes errors such
as:
error: type mismatch in i64.store, expected i32 but got f32.
error: type mismatch in i64.store, expected i64 but got i32.

to:
error: type mismatch in i64.store, expected [i32, i64] but got [f32, i32]","Instead of printing errors on every failure, accumulate errors for each
operation. If any fails, then print a message. It changes errors such
as:
error: type mismatch in i64.store, expected i32 but got f32.
error: type mismatch in i64.store, expected i64 but got i32.

to:
error: type mismatch in i64.store, expected [i32, i64] but got [f32, i32]",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,664,2017-10-31T22:40:56Z,2017-11-01T05:10:49Z,2017-11-01T05:10:51Z,MERGED,True,255,2,39,https://github.com/binji,Add wasm-validate tool,1,[],https://github.com/WebAssembly/wabt/pull/664,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/664,"It's currently identical to wasm2wat, without the part to write out a
.wat file.","It's currently identical to wasm2wat, without the part to write out a
.wat file.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,664,2017-10-31T22:40:56Z,2017-11-01T05:10:49Z,2017-11-01T05:10:51Z,MERGED,True,255,2,39,https://github.com/binji,Add wasm-validate tool,1,[],https://github.com/WebAssembly/wabt/pull/664,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/664#issuecomment-340928843,"It's currently identical to wasm2wat, without the part to write out a
.wat file.",This is the final part of issue #543.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,665,2017-11-02T06:56:18Z,2017-11-03T04:19:02Z,2017-11-03T04:19:05Z,MERGED,True,51,7,2,https://github.com/binji,Fix bad folding w/ imports and generating names,1,[],https://github.com/WebAssembly/wabt/pull/665,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/665,"The name generation pass was adding an entry to the function binding
hash, but using the import index instead of the function/global/etc.
index. As a result, subsequent lookups would return the wrong function.
In this case, it would cause the wat folding code to use a function with
the wrong number of parameters.","The name generation pass was adding an entry to the function binding
hash, but using the import index instead of the function/global/etc.
index. As a result, subsequent lookups would return the wrong function.
In this case, it would cause the wat folding code to use a function with
the wrong number of parameters.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,666,2017-11-03T20:44:35Z,2017-11-03T21:58:36Z,2017-11-03T21:58:38Z,MERGED,True,39,11,2,https://github.com/sbc100,[wasm-objdump] Improve support for displaying imports,1,[],https://github.com/WebAssembly/wabt/pull/666,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/666,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,667,2017-11-11T19:25:36Z,2017-11-11T21:36:35Z,2017-11-11T21:36:37Z,MERGED,True,330,183,27,https://github.com/binji,Update testsuite; call_indirect has new syntax,2,[],https://github.com/WebAssembly/wabt/pull/667,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/667,"The call_indirect instruction now allows the type to be specified
inline or via the common ""type use"" syntax (or both):
call_indirect (type $t1) ...
call_indirect (param i32 f32) (result f64) ...
call_indirect (type $t2) (param i32) ...

This means that CallIndirectExpr changes from storing a Var (the
referenced func type) to a FuncDeclaration, which can store both a
type use and a function signature. Most of the changes here are fallout
from that change.
The other major change is that function signature resolution and error
checking now needs to iterate over a functions expr list looking for
call_indirect instructions. I'm not sure if this is a significant
overhead in parsing/validation yet, but there are plenty of ways to
optimize it if it ends up in profiles.","The call_indirect instruction now allows the type to be specified
inline or via the common ""type use"" syntax (or both):
call_indirect (type $t1) ...
call_indirect (param i32 f32) (result f64) ...
call_indirect (type $t2) (param i32) ...

This means that CallIndirectExpr changes from storing a Var (the
referenced func type) to a FuncDeclaration, which can store both a
type use and a function signature. Most of the changes here are fallout
from that change.
The other major change is that function signature resolution and error
checking now needs to iterate over a functions expr list looking for
call_indirect instructions. I'm not sure if this is a significant
overhead in parsing/validation yet, but there are plenty of ways to
optimize it if it ends up in profiles.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,669,2017-11-14T00:21:28Z,2017-11-14T02:54:04Z,2017-11-14T02:54:06Z,MERGED,True,396,396,16,https://github.com/binji,Use `.wat` extension for wast2json-generated files,1,[],https://github.com/WebAssembly/wabt/pull/669,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/669,Fixes #668.,Fixes #668.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,669,2017-11-14T00:21:28Z,2017-11-14T02:54:04Z,2017-11-14T02:54:06Z,MERGED,True,396,396,16,https://github.com/binji,Use `.wat` extension for wast2json-generated files,1,[],https://github.com/WebAssembly/wabt/pull/669,https://github.com/sunfishcode,2,https://github.com/WebAssembly/wabt/pull/669#issuecomment-344106565,Fixes #668.,lgtm :),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,671,2017-11-14T01:03:09Z,2017-11-14T17:14:53Z,2017-11-14T17:14:55Z,MERGED,True,8,1,3,https://github.com/binji,Fix error message w/ inconsistent br_table labels,1,[],https://github.com/WebAssembly/wabt/pull/671,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/671,"When I refactored the type-checker to produce nicer error messages, I
forgot to handle this error:
(block
  (block (result f32)
    i32.const 0
    br_table 0 1 ...

The label signatures are inconsistent, which is invalid. The
type-checker was returning the proper result (error) but wasn't printing
an error message.
Fixes #670.","When I refactored the type-checker to produce nicer error messages, I
forgot to handle this error:
(block
  (block (result f32)
    i32.const 0
    br_table 0 1 ...

The label signatures are inconsistent, which is invalid. The
type-checker was returning the proper result (error) but wasn't printing
an error message.
Fixes #670.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,672,2017-11-21T00:06:22Z,2017-11-21T22:51:35Z,2017-11-21T22:51:37Z,MERGED,True,5735,5695,33,https://github.com/binji,"Rename {wake,wait} -> atomic.{wake,wait}",2,[],https://github.com/WebAssembly/wabt/pull/672,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/672,This was recently changed in the spec.,This was recently changed in the spec.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,673,2017-11-21T23:15:35Z,2017-11-23T17:21:34Z,2017-11-23T17:23:35Z,CLOSED,False,38,5,1,https://github.com/kripken,Add various math operations to c-writer,1,[],https://github.com/WebAssembly/wabt/pull/673,https://github.com/kripken,1,https://github.com/WebAssembly/wabt/pull/673,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,673,2017-11-21T23:15:35Z,2017-11-23T17:21:34Z,2017-11-23T17:23:35Z,CLOSED,False,38,5,1,https://github.com/kripken,Add various math operations to c-writer,1,[],https://github.com/WebAssembly/wabt/pull/673,https://github.com/kripken,2,https://github.com/WebAssembly/wabt/pull/673#issuecomment-346193269,,Heh it looks like this conflicts with code that just landed which does the same stuff... so this can probably be closed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,673,2017-11-21T23:15:35Z,2017-11-23T17:21:34Z,2017-11-23T17:23:35Z,CLOSED,False,38,5,1,https://github.com/kripken,Add various math operations to c-writer,1,[],https://github.com/WebAssembly/wabt/pull/673,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/673#issuecomment-346194845,,"Ah, thanks! Yeah, I started trying to see if I can pass the spec tests, so I'm implementing these even though no big wasm files I've found use them.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,673,2017-11-21T23:15:35Z,2017-11-23T17:21:34Z,2017-11-23T17:23:35Z,CLOSED,False,38,5,1,https://github.com/kripken,Add various math operations to c-writer,1,[],https://github.com/WebAssembly/wabt/pull/673,https://github.com/kripken,4,https://github.com/WebAssembly/wabt/pull/673#issuecomment-346212406,,"The binaryen fuzzer emits them, that's how I noticed ;)",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,673,2017-11-21T23:15:35Z,2017-11-23T17:21:34Z,2017-11-23T17:23:35Z,CLOSED,False,38,5,1,https://github.com/kripken,Add various math operations to c-writer,1,[],https://github.com/WebAssembly/wabt/pull/673,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/673#issuecomment-346670556,,(deleted mostly because origin/maths and origin/master both have the same prefix so my tab completion gets stuck :-}),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,676,2017-11-23T11:28:50Z,2017-11-23T17:13:42Z,2017-11-23T17:13:42Z,MERGED,True,1,1,1,https://github.com/mirkosertic,"#675 Enable ""write_debug_names"" option in WAT2WASM online demo",1,[],https://github.com/WebAssembly/wabt/pull/676,https://github.com/mirkosertic,1,https://github.com/WebAssembly/wabt/pull/676,Enabling this options allows better debugging in latest Firefox and Chrome.,Enabling this options allows better debugging in latest Firefox and Chrome.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/677,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/677#issuecomment-347362985,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","@binji Review please!
@arunetm fyi",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/677#issuecomment-347757578,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","@binji
Thanks for your review and nice comments. please check my questions about the comments. thanks again.
@arunetm FYI",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/lizhengxing,4,https://github.com/WebAssembly/wabt/pull/677#issuecomment-351928724,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","@binji
Sorry, Some other issues blocked me submit the updated PR later.
Please review it if you are available, thanks!
The main changes are:

updated the PR according to upstream's comments.
added some tests.

@arunetm FYI",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/lizhengxing,5,https://github.com/WebAssembly/wabt/pull/677#issuecomment-352104426,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","@binji
Thanks for your review. I will update the PR. thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/lizhengxing,6,https://github.com/WebAssembly/wabt/pull/677#issuecomment-352130931,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","@binji
I updated the PR according to your suggestion except for the hardcode for simd value size.
BTW:

Running test/run-tests.py --enable-simd -v --bindir out/clang/Debug/ will meet
""run-tests.py: error: unrecognized arguments: --enable-simd""

Would you please take a look for it?

Some tests may be mixed simd and non-simd functions, How should I control the --enable-simd test option when I submit a PR.

Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/677#issuecomment-352143974,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","You can specify the flags in the test file itself, so in test/parse/expr/bad-const-v128-type-i32-expected.txt, you can write:
;;; ERROR: 1
;;; FLAGS: --enable-simd
(module (func v128.const ...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/lizhengxing,8,https://github.com/WebAssembly/wabt/pull/677#issuecomment-352146658,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","@binji
Thanks!
How about test/parse/expr/const.txt?  extract the v128.const to another dedicated test file or use ""FLAGS: --enable-simd"" in test/parse/expr/const.txt?
@arunetm FYI",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/binji,9,https://github.com/WebAssembly/wabt/pull/677#issuecomment-352149535,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","How about test/parse/expr/const.txt? extract the v128.const to another dedicated test file or use ""FLAGS: --enable-simd"" in test/parse/expr/const.txt?

It's OK to just add the --enable-simd flag to that file.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,677,2017-11-27T23:24:11Z,2017-12-16T01:49:16Z,2017-12-16T01:49:16Z,MERGED,True,3658,3315,30,https://github.com/lizhengxing,   Wabt simd v128.const instruction initial PR:,1,[],https://github.com/WebAssembly/wabt/pull/677,https://github.com/lizhengxing,10,https://github.com/WebAssembly/wabt/pull/677#issuecomment-352149882,"This is an initial PR for Wabt simd support to get some early feedback.
This PR only implement the v128.const instruction.
It will construct a simd 128-bits const.
The expected wat format is:
v128.const i32 0x00000000 0x11111111 0x22222222 0x33333333
For simplify, this PR only implement the wat2wasm and wasm2wat functions.
The following PRs will implement the full functions in Wabt.
such as: Interp, objdump, logging, etc....","@binji
Thanks!
I updated the test files, please review it again once you are available .
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,678,2017-11-28T23:28:19Z,2017-11-29T00:46:41Z,2017-11-29T01:06:40Z,MERGED,True,17,18,10,https://github.com/sbc100,Fix ubsan build and remove workaround in favor of ubsan.blacklist,2,[],https://github.com/WebAssembly/wabt/pull/678,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/678,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,678,2017-11-28T23:28:19Z,2017-11-29T00:46:41Z,2017-11-29T01:06:40Z,MERGED,True,17,18,10,https://github.com/sbc100,Fix ubsan build and remove workaround in favor of ubsan.blacklist,2,[],https://github.com/WebAssembly/wabt/pull/678,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/678#issuecomment-347699590,,Do you know how to check for clang version in cmake so we can warn about doing ubsan with clang < 3.8?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,682,2017-12-01T20:36:09Z,2017-12-02T23:19:16Z,2017-12-02T23:19:18Z,MERGED,True,196,62,8,https://github.com/sbc100,wat2wasm: Always write output to a file,1,[],https://github.com/WebAssembly/wabt/pull/682,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/682,"This involves deriving the output filename from the input
filename when none is otherwise specified.
Also split out filename handling utilities and add unittests
for them.","This involves deriving the output filename from the input
filename when none is otherwise specified.
Also split out filename handling utilities and add unittests
for them.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,682,2017-12-01T20:36:09Z,2017-12-02T23:19:16Z,2017-12-02T23:19:18Z,MERGED,True,196,62,8,https://github.com/sbc100,wat2wasm: Always write output to a file,1,[],https://github.com/WebAssembly/wabt/pull/682,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/682#issuecomment-348608050,"This involves deriving the output filename from the input
filename when none is otherwise specified.
Also split out filename handling utilities and add unittests
for them.",Happy to split out the filename utiiity function into its own change if you prefer?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,682,2017-12-01T20:36:09Z,2017-12-02T23:19:16Z,2017-12-02T23:19:18Z,MERGED,True,196,62,8,https://github.com/sbc100,wat2wasm: Always write output to a file,1,[],https://github.com/WebAssembly/wabt/pull/682,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/682#issuecomment-348645720,"This involves deriving the output filename from the input
filename when none is otherwise specified.
Also split out filename handling utilities and add unittests
for them.",Done,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,683,2017-12-01T23:25:30Z,2017-12-01T23:53:02Z,2017-12-06T01:10:37Z,MERGED,True,16,11,1,https://github.com/sbc100,Remove some duplication in run-tests.py,1,[],https://github.com/WebAssembly/wabt/pull/683,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/683,This change means that we alwasys parse one of the TOOLS for a given TestInfo.  Previously we had some hardcoded defaults which duplicated the TOOLS entries,This change means that we alwasys parse one of the TOOLS for a given TestInfo.  Previously we had some hardcoded defaults which duplicated the TOOLS entries,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,684,2017-12-01T23:53:49Z,2017-12-02T23:18:56Z,2017-12-06T01:10:27Z,MERGED,True,41,42,10,https://github.com/sbc100,Make more use of string_view over 'const char *',2,[],https://github.com/WebAssembly/wabt/pull/684,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/684,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,686,2017-12-03T20:44:53Z,2017-12-03T21:08:38Z,2017-12-03T21:08:38Z,MERGED,True,3,1,1,https://github.com/reklatsmasters,add missing check in libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/686,https://github.com/reklatsmasters,1,https://github.com/WebAssembly/wabt/pull/686,WasmModule#lexer property can be null in readWasm().,WasmModule#lexer property can be null in readWasm().,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,686,2017-12-03T20:44:53Z,2017-12-03T21:08:38Z,2017-12-03T21:08:38Z,MERGED,True,3,1,1,https://github.com/reklatsmasters,add missing check in libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/686,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/686#issuecomment-348814701,WasmModule#lexer property can be null in readWasm().,Good catch!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,687,2017-12-04T23:46:57Z,2017-12-06T08:44:11Z,2017-12-06T08:44:13Z,MERGED,True,51,1,2,https://github.com/binji,Replace invalid characters with `_` in wat-writer,1,[],https://github.com/WebAssembly/wabt/pull/687,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/687,"We should add a way to express all names that are valid in the binary
format in the text format. Until then, it's better to be able to
produce a valid wat file.
See issue #685.","We should add a way to express all names that are valid in the binary
format in the text format. Until then, it's better to be able to
produce a valid wat file.
See issue #685.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,687,2017-12-04T23:46:57Z,2017-12-06T08:44:11Z,2017-12-06T08:44:13Z,MERGED,True,51,1,2,https://github.com/binji,Replace invalid characters with `_` in wat-writer,1,[],https://github.com/WebAssembly/wabt/pull/687,https://github.com/jtgeibel,2,https://github.com/WebAssembly/wabt/pull/687#issuecomment-349496587,"We should add a way to express all names that are valid in the binary
format in the text format. Until then, it's better to be able to
produce a valid wat file.
See issue #685.","I've been thinking more about long term solutions and have a few ideas to float.  I've tried to combine existing constructs defined in the spec so that existing code can be leveraged.
At call sites, if has_invalid_chars is true then we could fall back on the function index and provide a comment.  The comment would be encoded as a string, mainly to handle the case where a symbol contains a U+0A which would end the line comment.  This would also align with how string literals end up encoded in the data section.  It would look like this:
(call $traditional_symbol
  (get_local $p0)
  (get_local $p1)))
(call 35 ;; ""core::fmt::num::<impl core::fmt::Display for usize>::fmt::h2012ce6f955e8c94""
  (get_local $p0)
  (get_local $p1)))

At the function declaration, to use the comment trick we would need to move the type, param, and result fields to the next line.  It would look like this:
(func 35 ;; ""core::fmt::num::<impl core::fmt::Display for usize>::fmt::h2012ce6f955e8c94""
  (type $t3) (param $p0 i32) (param $p1 i32) (result i32)
  (local $l0 i32) (local $l1 i32) (local $l2 i32) (local $l3 i32)
  ...

Alternatively, it may be possible to add a (name ""..."") construct to the spec.
(func 35 (name ""core::fmt::num::<impl core::fmt::Display for usize>::fmt::h2012ce6f955e8c94"") (type $t3) (param $p0 i32) (param $p1 i32) (result i32)
  (local $l0 i32) (local $l1 i32) (local $l2 i32) (local $l3 i32)
  ...

I think the main advantage of this option is that it would make it easier when parsing a .wat file than trying to detect a magic comment.  I guess this brings me to a question.  In general is it expected that wasm2wat | wat2wasm produces byte identical output and if so does that apply to the custom name section?  If that isn't a goal, then we would just accept that strange symbols may not survive the round-trip.  If this is a goal, then we would also have to consider how this intersects with disambiguation of identical symbols and named local variables.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,687,2017-12-04T23:46:57Z,2017-12-06T08:44:11Z,2017-12-06T08:44:13Z,MERGED,True,51,1,2,https://github.com/binji,Replace invalid characters with `_` in wat-writer,1,[],https://github.com/WebAssembly/wabt/pull/687,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/687#issuecomment-349498918,"We should add a way to express all names that are valid in the binary
format in the text format. Until then, it's better to be able to
produce a valid wat file.
See issue #685.","I guess this brings me to a question. In general is it expected that wasm2wat | wat2wasm produces byte identical output and if so does that apply to the custom name section?

Personally I think it should, in general. Since you can express short varints with a longer length they won't necessarily by byte identical, but they'll mean the same thing.
The broader topic of round-tripping custom sections came up here as well: WebAssembly/design#1153. Using the annotation syntax there, it might look like:
(func $myFunc (@name ""myFunkyNameFunc()[];;;"")
  ...
)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,687,2017-12-04T23:46:57Z,2017-12-06T08:44:11Z,2017-12-06T08:44:13Z,MERGED,True,51,1,2,https://github.com/binji,Replace invalid characters with `_` in wat-writer,1,[],https://github.com/WebAssembly/wabt/pull/687,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/687#issuecomment-349572568,"We should add a way to express all names that are valid in the binary
format in the text format. Until then, it's better to be able to
produce a valid wat file.
See issue #685.",Gonna land this for now since it is better than producing a bad .wat file.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,688,2017-12-06T00:42:25Z,2017-12-06T01:02:57Z,2017-12-06T01:02:59Z,MERGED,True,11,0,2,https://github.com/sbc100,Always create linking section with write relocatable wasm files,3,[],https://github.com/WebAssembly/wabt/pull/688,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/688,Fixes #681,Fixes #681,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,689,2017-12-06T01:00:46Z,2017-12-06T03:10:05Z,2017-12-06T03:10:08Z,MERGED,True,44,47,8,https://github.com/sbc100,Refactor code for write section headers,2,[],https://github.com/WebAssembly/wabt/pull/689,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/689,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,690,2017-12-06T08:33:57Z,2017-12-07T19:12:03Z,2017-12-07T19:12:07Z,MERGED,True,119,21,10,https://github.com/binji,Import/export mutable globals w/ threads enabled,1,[],https://github.com/WebAssembly/wabt/pull/690,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/690,This matches the threads proposal.,This matches the threads proposal.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,691,2017-12-09T20:06:03Z,2017-12-09T23:29:27Z,2017-12-12T00:09:04Z,MERGED,True,617,324,47,https://github.com/binji,[cleanup] Always use braces with if,1,[],https://github.com/WebAssembly/wabt/pull/691,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/691,,,True,{'HOORAY': ['https://github.com/kripken']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,691,2017-12-09T20:06:03Z,2017-12-09T23:29:27Z,2017-12-12T00:09:04Z,MERGED,True,617,324,47,https://github.com/binji,[cleanup] Always use braces with if,1,[],https://github.com/WebAssembly/wabt/pull/691,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/691#issuecomment-350877015,,Hmm.. llvm has the opposite policy and I've grown the like it for being concise.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,691,2017-12-09T20:06:03Z,2017-12-09T23:29:27Z,2017-12-12T00:09:04Z,MERGED,True,617,324,47,https://github.com/binji,[cleanup] Always use braces with if,1,[],https://github.com/WebAssembly/wabt/pull/691,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/691#issuecomment-350900577,,"There are things I like about it too, but it's pretty rare to see it in a style guide these days. To the extent that new languages don't even allow it! I figure we should try to be on the right side of history here. :-)",True,{'THUMBS_UP': ['https://github.com/kripken']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,692,2017-12-11T22:12:30Z,2017-12-12T00:08:05Z,2017-12-12T00:08:07Z,MERGED,True,74,0,14,https://github.com/binji,Add deprecation warning to wasm-link,1,[],https://github.com/WebAssembly/wabt/pull/692,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/692,See issue #679.,See issue #679.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,694,2017-12-15T19:20:51Z,2017-12-15T20:11:12Z,2017-12-15T20:11:15Z,MERGED,True,8,0,8,https://github.com/binji,Add SIMD feature flag.,1,[],https://github.com/WebAssembly/wabt/pull/694,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/694,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,695,2017-12-18T18:29:26Z,2020-01-18T00:26:50Z,2020-01-30T02:44:52Z,CLOSED,False,22,28,17,https://github.com/sbc100,Drop support for python2,3,[],https://github.com/WebAssembly/wabt/pull/695,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/695,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,695,2017-12-18T18:29:26Z,2020-01-18T00:26:50Z,2020-01-30T02:44:52Z,CLOSED,False,22,28,17,https://github.com/sbc100,Drop support for python2,3,[],https://github.com/WebAssembly/wabt/pull/695,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/695#issuecomment-352530163,,"I've been trying to keep things 2/3 compatible. AFAIK it's mostly there, since I do a bunch of testing on my arch laptop (which defaults to python3)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,695,2017-12-18T18:29:26Z,2020-01-18T00:26:50Z,2020-01-30T02:44:52Z,CLOSED,False,22,28,17,https://github.com/sbc100,Drop support for python2,3,[],https://github.com/WebAssembly/wabt/pull/695,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/695#issuecomment-352532450,,"I know .. but I've been wanting to experiment with type annotations.      And I was kinda thinking, why do we need python2 compat here?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,695,2017-12-18T18:29:26Z,2020-01-18T00:26:50Z,2020-01-30T02:44:52Z,CLOSED,False,22,28,17,https://github.com/sbc100,Drop support for python2,3,[],https://github.com/WebAssembly/wabt/pull/695,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/695#issuecomment-352533563,,"Ah, I see.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,695,2017-12-18T18:29:26Z,2020-01-18T00:26:50Z,2020-01-30T02:44:52Z,CLOSED,False,22,28,17,https://github.com/sbc100,Drop support for python2,3,[],https://github.com/WebAssembly/wabt/pull/695,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/695#issuecomment-575844435,,"This is pretty old, and we have python3 testing on CI now. Let's close this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,695,2017-12-18T18:29:26Z,2020-01-18T00:26:50Z,2020-01-30T02:44:52Z,CLOSED,False,22,28,17,https://github.com/sbc100,Drop support for python2,3,[],https://github.com/WebAssembly/wabt/pull/695,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/695#issuecomment-580057406,,But this change was to drop support for python2.. which allows us to cleanup some stuff.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,695,2017-12-18T18:29:26Z,2020-01-18T00:26:50Z,2020-01-30T02:44:52Z,CLOSED,False,22,28,17,https://github.com/sbc100,Drop support for python2,3,[],https://github.com/WebAssembly/wabt/pull/695,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/695#issuecomment-580059119,,Reopened as #1321,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,696,2017-12-18T18:43:12Z,2017-12-18T20:09:39Z,2017-12-18T20:09:56Z,MERGED,True,0,0,1,https://github.com/sbc100,Rename appveyor.yml -> .appveyor.yml,1,[],https://github.com/WebAssembly/wabt/pull/696,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/696,"This is in line with the other config files at the
top level such as .travis.yml, and is a supported
alternative name for appveyor.yml","This is in line with the other config files at the
top level such as .travis.yml, and is a supported
alternative name for appveyor.yml",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,697,2017-12-18T18:45:17Z,2017-12-18T19:27:27Z,2017-12-18T19:30:26Z,MERGED,True,8,4,2,https://github.com/sbc100,Fix coverage build with clang,1,[],https://github.com/WebAssembly/wabt/pull/697,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/697,"This change fixes the clang-debug-cov and test-clang-debug-cov targets.
I still couldn't get scripts/coverage.sh clang to run since due to what looks like
some kind of incompatibility between the generated .gdca files and the lcov/gcov
on my system (Ubuntu/Trusty).","This change fixes the clang-debug-cov and test-clang-debug-cov targets.
I still couldn't get scripts/coverage.sh clang to run since due to what looks like
some kind of incompatibility between the generated .gdca files and the lcov/gcov
on my system (Ubuntu/Trusty).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,698,2017-12-18T19:14:56Z,2017-12-19T18:16:36Z,2017-12-19T18:16:36Z,MERGED,True,8,0,3,https://github.com/lizhengxing,Add SIMD suppor in run-interp.py/run-objdump.py/run-roundtrip.py,1,[],https://github.com/WebAssembly/wabt/pull/698,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/698,"Currently run-interp.py doesn't recongize --enable-simd flag in test file.
This PR add SIMD suppor in run-interp.py/run-objdump.py/run-roundtrip.py.","Currently run-interp.py doesn't recongize --enable-simd flag in test file.
This PR add SIMD suppor in run-interp.py/run-objdump.py/run-roundtrip.py.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,698,2017-12-18T19:14:56Z,2017-12-19T18:16:36Z,2017-12-19T18:16:36Z,MERGED,True,8,0,3,https://github.com/lizhengxing,Add SIMD suppor in run-interp.py/run-objdump.py/run-roundtrip.py,1,[],https://github.com/WebAssembly/wabt/pull/698,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/698#issuecomment-352529901,"Currently run-interp.py doesn't recongize --enable-simd flag in test file.
This PR add SIMD suppor in run-interp.py/run-objdump.py/run-roundtrip.py.","@binji
Currently run-interp.py doesn't recongize --enable-simd flag in test file. I added the --enable-simd flag support in run-interp.py/run-objdump.py/run-roundtrip.py files.
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,699,2017-12-19T01:26:34Z,2018-01-02T19:08:24Z,2018-01-02T19:08:26Z,MERGED,True,79,75,18,https://github.com/sbc100,Add support for init function in linking metadata,2,[],https://github.com/WebAssembly/wabt/pull/699,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/699,"Add support for init function in linking metadata
Also remove support for DataAlignment which was removed
from the ""spec"" (Linking.md) and only output DataSize
if its non-zero.","Add support for init function in linking metadata
Also remove support for DataAlignment which was removed
from the ""spec"" (Linking.md) and only output DataSize
if its non-zero.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,700,2017-12-19T19:52:59Z,2017-12-20T00:27:49Z,2017-12-20T00:27:52Z,MERGED,True,43,1,4,https://github.com/binji,Fix bug when writing inline exports for import,1,[],https://github.com/WebAssembly/wabt/pull/700,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/700,"The (import... syntax doesn't allow for inline exports, but the wat
writer assumed that all exports would be written inline, so the exports
would be omitted.
This CL fixes it by writing the exports normally:
(module
  (import ""foo"" ""bar"" (func))
  (export ""baz"" (func 0))
)

It is also possible to fix this by writing the imports inline, but this
is not currently supported by the .wat writer:
(module
  (func (export ""baz"") (import ""foo"" ""bar""))
)","The (import... syntax doesn't allow for inline exports, but the wat
writer assumed that all exports would be written inline, so the exports
would be omitted.
This CL fixes it by writing the exports normally:
(module
  (import ""foo"" ""bar"" (func))
  (export ""baz"" (func 0))
)

It is also possible to fix this by writing the imports inline, but this
is not currently supported by the .wat writer:
(module
  (func (export ""baz"") (import ""foo"" ""bar""))
)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,701,2017-12-19T20:20:40Z,2017-12-19T22:00:38Z,2017-12-19T22:00:41Z,MERGED,True,1,0,1,https://github.com/binji,Run wabt-unittests in coverage script,1,[],https://github.com/WebAssembly/wabt/pull/701,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/701,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,702,2017-12-19T21:45:08Z,2017-12-20T00:27:34Z,2017-12-20T00:27:34Z,MERGED,True,76,15,8,https://github.com/lizhengxing,Wabt simd v128.const instruction PR (Part 2):,1,[],https://github.com/WebAssembly/wabt/pull/702,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/702,"This is a sequential PR of Wabt simd v128.const instruction initial PR (096f7ab)
The PR implement wasm interp, objdump and validate functions for v128.const.","This is a sequential PR of Wabt simd v128.const instruction initial PR (096f7ab)
The PR implement wasm interp, objdump and validate functions for v128.const.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,702,2017-12-19T21:45:08Z,2017-12-20T00:27:34Z,2017-12-20T00:27:34Z,MERGED,True,76,15,8,https://github.com/lizhengxing,Wabt simd v128.const instruction PR (Part 2):,1,[],https://github.com/WebAssembly/wabt/pull/702,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/702#issuecomment-352895870,"This is a sequential PR of Wabt simd v128.const instruction initial PR (096f7ab)
The PR implement wasm interp, objdump and validate functions for v128.const.","@binji
This is part 2 of v128.const instruction PR, please review it, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,702,2017-12-19T21:45:08Z,2017-12-20T00:27:34Z,2017-12-20T00:27:34Z,MERGED,True,76,15,8,https://github.com/lizhengxing,Wabt simd v128.const instruction PR (Part 2):,1,[],https://github.com/WebAssembly/wabt/pull/702,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/702#issuecomment-352914590,"This is a sequential PR of Wabt simd v128.const instruction initial PR (096f7ab)
The PR implement wasm interp, objdump and validate functions for v128.const.","@binji
Updated the PR, please check it, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,703,2017-12-20T00:52:18Z,2018-01-02T19:07:38Z,2018-01-02T19:07:41Z,MERGED,True,207,38,10,https://github.com/binji,Add WatWriter option for inline imports,2,[],https://github.com/WebAssembly/wabt/pull/703,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/703,"Inline imports are more flexible than regular imports, since they can be
combined with inline exports. For example:
(func (export ""baz"") (import ""foo"" ""bar"") (param i32))","Inline imports are more flexible than regular imports, since they can be
combined with inline exports. For example:
(func (export ""baz"") (import ""foo"" ""bar"") (param i32))",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,704,2017-12-20T20:20:04Z,2017-12-25T22:05:25Z,2017-12-26T18:46:01Z,MERGED,True,3270,3168,8,https://github.com/lizhengxing,SIMD: i8x16.splat instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/704,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/704,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,704,2017-12-20T20:20:04Z,2017-12-25T22:05:25Z,2017-12-26T18:46:01Z,MERGED,True,3270,3168,8,https://github.com/lizhengxing,SIMD: i8x16.splat instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/704,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/704#issuecomment-353172245,,"@binji
This PR implements the simd i8x16.splat instruction. Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,704,2017-12-20T20:20:04Z,2017-12-25T22:05:25Z,2017-12-26T18:46:01Z,MERGED,True,3270,3168,8,https://github.com/lizhengxing,SIMD: i8x16.splat instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/704,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/704#issuecomment-353463265,,"@binji
The PR was updated according to your suggestion. PTAL!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,705,2017-12-26T19:11:04Z,2017-12-26T22:14:14Z,2017-12-26T22:14:14Z,MERGED,True,3224,2924,6,https://github.com/lizhengxing,SIMD: i16x8.splat i32x4.splat i64x2.splat f32x4.splat f64x2.splat ins…,1,[],https://github.com/WebAssembly/wabt/pull/705,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/705,…truction implementation.,…truction implementation.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,705,2017-12-26T19:11:04Z,2017-12-26T22:14:14Z,2017-12-26T22:14:14Z,MERGED,True,3224,2924,6,https://github.com/lizhengxing,SIMD: i16x8.splat i32x4.splat i64x2.splat f32x4.splat f64x2.splat ins…,1,[],https://github.com/WebAssembly/wabt/pull/705,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/705#issuecomment-354002573,…truction implementation.,"@binji
This PR implements the simd i16x8 / i32x4 / i64x2 / f32x4 / f64x2.splat instructions. PTAL, Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,705,2017-12-26T19:11:04Z,2017-12-26T22:14:14Z,2017-12-26T22:14:14Z,MERGED,True,3224,2924,6,https://github.com/lizhengxing,SIMD: i16x8.splat i32x4.splat i64x2.splat f32x4.splat f64x2.splat ins…,1,[],https://github.com/WebAssembly/wabt/pull/705,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/705#issuecomment-354016133,…truction implementation.,"@binji
Update the PR according to feedbacks, PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,706,2017-12-27T21:57:00Z,2018-01-10T17:45:10Z,2018-01-10T17:45:10Z,MERGED,True,1857,1771,8,https://github.com/lizhengxing,SIMD i8x16.add implementation.,1,[],https://github.com/WebAssembly/wabt/pull/706,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/706,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,706,2017-12-27T21:57:00Z,2018-01-10T17:45:10Z,2018-01-10T17:45:10Z,MERGED,True,1857,1771,8,https://github.com/lizhengxing,SIMD i8x16.add implementation.,1,[],https://github.com/WebAssembly/wabt/pull/706,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/706#issuecomment-354183600,,"@binji
This is the i8x16.add implementation PR, PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,706,2017-12-27T21:57:00Z,2018-01-10T17:45:10Z,2018-01-10T17:45:10Z,MERGED,True,1857,1771,8,https://github.com/lizhengxing,SIMD i8x16.add implementation.,1,[],https://github.com/WebAssembly/wabt/pull/706,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/706#issuecomment-356566582,,"@binji
Done. PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,707,2018-01-07T11:46:39Z,2018-01-07T19:10:35Z,2018-01-07T19:10:35Z,MERGED,True,1,1,1,https://github.com/ColinEberhardt,fixed broken links,1,[],https://github.com/WebAssembly/wabt/pull/707,https://github.com/ColinEberhardt,1,https://github.com/WebAssembly/wabt/pull/707,,,True,{'THUMBS_UP': ['https://github.com/pepyakin']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,708,2018-01-07T19:48:38Z,2018-01-07T20:29:35Z,2018-01-07T20:29:37Z,MERGED,True,33,0,2,https://github.com/binji,"Apply global names in imported globals, data, elem",1,[],https://github.com/WebAssembly/wabt/pull/708,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/708,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,709,2018-01-07T20:30:25Z,2018-01-07T21:27:03Z,2018-01-07T21:27:06Z,MERGED,True,38,21,2,https://github.com/binji,Always write expected action types in .json output,1,[],https://github.com/WebAssembly/wabt/pull/709,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/709,"This is useful to determine what the signature of the action's function
was. Without this, it is impossible to tell the difference in function
signature between these two functions:
(func $f1 (param i32) (result i32) ...)
(func $f2 (param i32) ...)
Because they have the same parameter list, and the result is discarded:
(invoke ""f1"") (i32.const 1)
(invoke ""f2"") (i32.const 1)","This is useful to determine what the signature of the action's function
was. Without this, it is impossible to tell the difference in function
signature between these two functions:
(func $f1 (param i32) (result i32) ...)
(func $f2 (param i32) ...)
Because they have the same parameter list, and the result is discarded:
(invoke ""f1"") (i32.const 1)
(invoke ""f2"") (i32.const 1)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,710,2018-01-08T00:30:13Z,2018-01-09T01:35:01Z,2018-01-09T01:35:07Z,MERGED,True,3793,7,84,https://github.com/binji,Add wasm2c tool,1,[],https://github.com/WebAssembly/wabt/pull/710,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/710,"Add wasm2c, a new tool that reads a .wasm file and generates a C
source file and its accompanying header file. The C output currently
only supports gcc/clang compilers, since it uses builtins for some
functionality.
The resulting C code is not standalone; there are runtime functions that
must be provided, as well as pointers to all imports.
The C runtime symbols that must be provided are as follows:

void wasm_rt_trap(wasm_rt_trap_t code):
Called when the WebAssembly code traps. This function must not return.
u32 wasm_rt_register_func_type(u32 param_count, u32 result_count, ...):
Register a function type with the given signature. This function must
check whether this signature has already been registered and return
the original index.
void wasm_rt_allocate_memory(wasm_rt_memory_t*, u32 initial, u32 max):
Allocate the memory buffer for the given memory object, given the
number of pages. The memory must be zeroed before returning.
u32 wasm_rt_grow_memory(wasm_rt_memory_t*, u32 delta):
Grow memory by the given number of pages. If allocation fails, or the
new pages size is larger than the maximum, return -1. Otherwise return
the previous number of pages. The newly allocated memory must be
zeroed.
void wasm_rt_allocate_table(wasm_rt_table_t*, u32 initial, u32 max):
Allocate the buffer for the given table object. The buffer must be
zeroed before returning.
u32 wasm_rt_call_stack_depth:
A symbol that tracks the current call stack depth. If this value
exceeds WASM_RT_MAX_CALL_STACK_DEPTH then a trap occurs. This value
defaults to 500, but can redefined.

An example implementation can be found in spec-wasm2c-prefix.c.
All functionality from the WebAssembly MVP is supported, and the
generated code passes all of the core spec tests. There is a new test
tool called run-spec-wasm2c.py which runs the following:

wast2json to convert the spec test to json and wasm files
wasm2c to convert the wasm to C source and headers
a C compiler (default cc) to compile and link all C source files,
including a C test runner (spec-wasm2c-prefix.c)
Finally, the resulting executable to produce output","Add wasm2c, a new tool that reads a .wasm file and generates a C
source file and its accompanying header file. The C output currently
only supports gcc/clang compilers, since it uses builtins for some
functionality.
The resulting C code is not standalone; there are runtime functions that
must be provided, as well as pointers to all imports.
The C runtime symbols that must be provided are as follows:

void wasm_rt_trap(wasm_rt_trap_t code):
Called when the WebAssembly code traps. This function must not return.
u32 wasm_rt_register_func_type(u32 param_count, u32 result_count, ...):
Register a function type with the given signature. This function must
check whether this signature has already been registered and return
the original index.
void wasm_rt_allocate_memory(wasm_rt_memory_t*, u32 initial, u32 max):
Allocate the memory buffer for the given memory object, given the
number of pages. The memory must be zeroed before returning.
u32 wasm_rt_grow_memory(wasm_rt_memory_t*, u32 delta):
Grow memory by the given number of pages. If allocation fails, or the
new pages size is larger than the maximum, return -1. Otherwise return
the previous number of pages. The newly allocated memory must be
zeroed.
void wasm_rt_allocate_table(wasm_rt_table_t*, u32 initial, u32 max):
Allocate the buffer for the given table object. The buffer must be
zeroed before returning.
u32 wasm_rt_call_stack_depth:
A symbol that tracks the current call stack depth. If this value
exceeds WASM_RT_MAX_CALL_STACK_DEPTH then a trap occurs. This value
defaults to 500, but can redefined.

An example implementation can be found in spec-wasm2c-prefix.c.
All functionality from the WebAssembly MVP is supported, and the
generated code passes all of the core spec tests. There is a new test
tool called run-spec-wasm2c.py which runs the following:

wast2json to convert the spec test to json and wasm files
wasm2c to convert the wasm to C source and headers
a C compiler (default cc) to compile and link all C source files,
including a C test runner (spec-wasm2c-prefix.c)
Finally, the resulting executable to produce output",True,"{'HOORAY': ['https://github.com/brion', 'https://github.com/JoshuaKGoldberg', 'https://github.com/Becavalier', 'https://github.com/eholk', 'https://github.com/darko20'], 'THUMBS_UP': ['https://github.com/chicoxyzzy', 'https://github.com/ColinEberhardt', 'https://github.com/pepyakin', 'https://github.com/Becavalier']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,710,2018-01-08T00:30:13Z,2018-01-09T01:35:01Z,2018-01-09T01:35:07Z,MERGED,True,3793,7,84,https://github.com/binji,Add wasm2c tool,1,[],https://github.com/WebAssembly/wabt/pull/710,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/710#issuecomment-355869433,"Add wasm2c, a new tool that reads a .wasm file and generates a C
source file and its accompanying header file. The C output currently
only supports gcc/clang compilers, since it uses builtins for some
functionality.
The resulting C code is not standalone; there are runtime functions that
must be provided, as well as pointers to all imports.
The C runtime symbols that must be provided are as follows:

void wasm_rt_trap(wasm_rt_trap_t code):
Called when the WebAssembly code traps. This function must not return.
u32 wasm_rt_register_func_type(u32 param_count, u32 result_count, ...):
Register a function type with the given signature. This function must
check whether this signature has already been registered and return
the original index.
void wasm_rt_allocate_memory(wasm_rt_memory_t*, u32 initial, u32 max):
Allocate the memory buffer for the given memory object, given the
number of pages. The memory must be zeroed before returning.
u32 wasm_rt_grow_memory(wasm_rt_memory_t*, u32 delta):
Grow memory by the given number of pages. If allocation fails, or the
new pages size is larger than the maximum, return -1. Otherwise return
the previous number of pages. The newly allocated memory must be
zeroed.
void wasm_rt_allocate_table(wasm_rt_table_t*, u32 initial, u32 max):
Allocate the buffer for the given table object. The buffer must be
zeroed before returning.
u32 wasm_rt_call_stack_depth:
A symbol that tracks the current call stack depth. If this value
exceeds WASM_RT_MAX_CALL_STACK_DEPTH then a trap occurs. This value
defaults to 500, but can redefined.

An example implementation can be found in spec-wasm2c-prefix.c.
All functionality from the WebAssembly MVP is supported, and the
generated code passes all of the core spec tests. There is a new test
tool called run-spec-wasm2c.py which runs the following:

wast2json to convert the spec test to json and wasm files
wasm2c to convert the wasm to C source and headers
a C compiler (default cc) to compile and link all C source files,
including a C test runner (spec-wasm2c-prefix.c)
Finally, the resulting executable to produce output",Travis failure looks like bot flake.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,710,2018-01-08T00:30:13Z,2018-01-09T01:35:01Z,2018-01-09T01:35:07Z,MERGED,True,3793,7,84,https://github.com/binji,Add wasm2c tool,1,[],https://github.com/WebAssembly/wabt/pull/710,https://github.com/pepyakin,3,https://github.com/WebAssembly/wabt/pull/710#issuecomment-355935880,"Add wasm2c, a new tool that reads a .wasm file and generates a C
source file and its accompanying header file. The C output currently
only supports gcc/clang compilers, since it uses builtins for some
functionality.
The resulting C code is not standalone; there are runtime functions that
must be provided, as well as pointers to all imports.
The C runtime symbols that must be provided are as follows:

void wasm_rt_trap(wasm_rt_trap_t code):
Called when the WebAssembly code traps. This function must not return.
u32 wasm_rt_register_func_type(u32 param_count, u32 result_count, ...):
Register a function type with the given signature. This function must
check whether this signature has already been registered and return
the original index.
void wasm_rt_allocate_memory(wasm_rt_memory_t*, u32 initial, u32 max):
Allocate the memory buffer for the given memory object, given the
number of pages. The memory must be zeroed before returning.
u32 wasm_rt_grow_memory(wasm_rt_memory_t*, u32 delta):
Grow memory by the given number of pages. If allocation fails, or the
new pages size is larger than the maximum, return -1. Otherwise return
the previous number of pages. The newly allocated memory must be
zeroed.
void wasm_rt_allocate_table(wasm_rt_table_t*, u32 initial, u32 max):
Allocate the buffer for the given table object. The buffer must be
zeroed before returning.
u32 wasm_rt_call_stack_depth:
A symbol that tracks the current call stack depth. If this value
exceeds WASM_RT_MAX_CALL_STACK_DEPTH then a trap occurs. This value
defaults to 500, but can redefined.

An example implementation can be found in spec-wasm2c-prefix.c.
All functionality from the WebAssembly MVP is supported, and the
generated code passes all of the core spec tests. There is a new test
tool called run-spec-wasm2c.py which runs the following:

wast2json to convert the spec test to json and wasm files
wasm2c to convert the wasm to C source and headers
a C compiler (default cc) to compile and link all C source files,
including a C test runner (spec-wasm2c-prefix.c)
Finally, the resulting executable to produce output","For those who just wondering how output looks like I hacked a demo:
https://pepyakin.github.io/wabt/wasm2c/index.html
it is rough copy of wat2wasm atm since I don't have a much time, but i think it could serve as a demo
source: https://github.com/pepyakin/wabt
UPD
FWIW, looks like wasm2c compiled with emscripten has some problems with Vars,

for example
(module
  (func $addTwo (param i32 i32) (result i32)
    get_local 0
    get_local 1
    i32.add)
  (export ""addTwo"" (func $addTwo)))
gets compiled to
static u32 addTwo(u32 _, u32 __0) {
  FUNC_PROLOGUE;
  u32 i0, i1;
  i0 = _;
  i1 = _;
  i0 += i1;
  FUNC_EPILOGUE;
  return i0;
}
and this
(module
  (func $fac (param f64) (result f64)
    get_local 0
    f64.const 1
    f64.lt
    if (result f64)
      f64.const 1
    else
      get_local 0
      get_local 0
      f64.const 1
      f64.sub
      call $fac
      f64.mul
    end)
  (export ""fac"" (func $fac)))",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,710,2018-01-08T00:30:13Z,2018-01-09T01:35:01Z,2018-01-09T01:35:07Z,MERGED,True,3793,7,84,https://github.com/binji,Add wasm2c tool,1,[],https://github.com/WebAssembly/wabt/pull/710,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/710#issuecomment-356082247,"Add wasm2c, a new tool that reads a .wasm file and generates a C
source file and its accompanying header file. The C output currently
only supports gcc/clang compilers, since it uses builtins for some
functionality.
The resulting C code is not standalone; there are runtime functions that
must be provided, as well as pointers to all imports.
The C runtime symbols that must be provided are as follows:

void wasm_rt_trap(wasm_rt_trap_t code):
Called when the WebAssembly code traps. This function must not return.
u32 wasm_rt_register_func_type(u32 param_count, u32 result_count, ...):
Register a function type with the given signature. This function must
check whether this signature has already been registered and return
the original index.
void wasm_rt_allocate_memory(wasm_rt_memory_t*, u32 initial, u32 max):
Allocate the memory buffer for the given memory object, given the
number of pages. The memory must be zeroed before returning.
u32 wasm_rt_grow_memory(wasm_rt_memory_t*, u32 delta):
Grow memory by the given number of pages. If allocation fails, or the
new pages size is larger than the maximum, return -1. Otherwise return
the previous number of pages. The newly allocated memory must be
zeroed.
void wasm_rt_allocate_table(wasm_rt_table_t*, u32 initial, u32 max):
Allocate the buffer for the given table object. The buffer must be
zeroed before returning.
u32 wasm_rt_call_stack_depth:
A symbol that tracks the current call stack depth. If this value
exceeds WASM_RT_MAX_CALL_STACK_DEPTH then a trap occurs. This value
defaults to 500, but can redefined.

An example implementation can be found in spec-wasm2c-prefix.c.
All functionality from the WebAssembly MVP is supported, and the
generated code passes all of the core spec tests. There is a new test
tool called run-spec-wasm2c.py which runs the following:

wast2json to convert the spec test to json and wasm files
wasm2c to convert the wasm to C source and headers
a C compiler (default cc) to compile and link all C source files,
including a C test runner (spec-wasm2c-prefix.c)
Finally, the resulting executable to produce output","@pepyakin Yeah, that's pretty strange. I'll take a look.
BTW, thanks for setting up this demo! It's pretty cool to play around with :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,710,2018-01-08T00:30:13Z,2018-01-09T01:35:01Z,2018-01-09T01:35:07Z,MERGED,True,3793,7,84,https://github.com/binji,Add wasm2c tool,1,[],https://github.com/WebAssembly/wabt/pull/710,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/710#issuecomment-356151889,"Add wasm2c, a new tool that reads a .wasm file and generates a C
source file and its accompanying header file. The C output currently
only supports gcc/clang compilers, since it uses builtins for some
functionality.
The resulting C code is not standalone; there are runtime functions that
must be provided, as well as pointers to all imports.
The C runtime symbols that must be provided are as follows:

void wasm_rt_trap(wasm_rt_trap_t code):
Called when the WebAssembly code traps. This function must not return.
u32 wasm_rt_register_func_type(u32 param_count, u32 result_count, ...):
Register a function type with the given signature. This function must
check whether this signature has already been registered and return
the original index.
void wasm_rt_allocate_memory(wasm_rt_memory_t*, u32 initial, u32 max):
Allocate the memory buffer for the given memory object, given the
number of pages. The memory must be zeroed before returning.
u32 wasm_rt_grow_memory(wasm_rt_memory_t*, u32 delta):
Grow memory by the given number of pages. If allocation fails, or the
new pages size is larger than the maximum, return -1. Otherwise return
the previous number of pages. The newly allocated memory must be
zeroed.
void wasm_rt_allocate_table(wasm_rt_table_t*, u32 initial, u32 max):
Allocate the buffer for the given table object. The buffer must be
zeroed before returning.
u32 wasm_rt_call_stack_depth:
A symbol that tracks the current call stack depth. If this value
exceeds WASM_RT_MAX_CALL_STACK_DEPTH then a trap occurs. This value
defaults to 500, but can redefined.

An example implementation can be found in spec-wasm2c-prefix.c.
All functionality from the WebAssembly MVP is supported, and the
generated code passes all of the core spec tests. There is a new test
tool called run-spec-wasm2c.py which runs the following:

wast2json to convert the spec test to json and wasm files
wasm2c to convert the wasm to C source and headers
a C compiler (default cc) to compile and link all C source files,
including a C test runner (spec-wasm2c-prefix.c)
Finally, the resulting executable to produce output","@pepyakin Ah, so the problem is that the WriteC function expects that the module has been validated, but also that all vars are named. You can do this in JS with module.generateNames and module.applyNames. The kind of annoying thing is that module.validate expects that all vars are indexes. So you end up having to do this:
...
module.resolveNames();
module.validate();
module.generateNames();
module.applyNames();
var cOutput = module.toC();",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,711,2018-01-09T23:25:52Z,2018-01-10T03:09:46Z,2018-01-10T03:09:48Z,MERGED,True,2068,2061,41,https://github.com/binji,Fix run-tests.py when STDIN_FILE is used > 1 times,1,[],https://github.com/WebAssembly/wabt/pull/711,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/711,"Each test should be run with its own directory of outputs, so the tests
can be run in parallel without clobbering results. Since I added wasm2c,
the spec .wast files were being used twice, but using the same output
directory. This would often work properly in a full run, but was flaky,
since they both write .json and .wasm files with the same names.
This fix gives them their own directories by always using the directory
name of the test.","Each test should be run with its own directory of outputs, so the tests
can be run in parallel without clobbering results. Since I added wasm2c,
the spec .wast files were being used twice, but using the same output
directory. This would often work properly in a full run, but was flaky,
since they both write .json and .wasm files with the same names.
This fix gives them their own directories by always using the directory
name of the test.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,712,2018-01-10T06:57:37Z,2018-01-11T00:32:11Z,2018-01-11T00:32:13Z,MERGED,True,575,241,7,https://github.com/binji,Use templates for generating wasm2c source,1,[],https://github.com/WebAssembly/wabt/pull/712,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/712,"This uses a very simple template syntax, without any advanced features:
%%top
...
%%bottom
...

This template will generate output with two C strings:
const char SECTION_NAME(top)[] = ...
...
const char SECTION_NAME(bottom)[] = ...
...

To update the generated files, run make update-wasm2c.","This uses a very simple template syntax, without any advanced features:
%%top
...
%%bottom
...

This template will generate output with two C strings:
const char SECTION_NAME(top)[] = ...
...
const char SECTION_NAME(bottom)[] = ...
...

To update the generated files, run make update-wasm2c.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,712,2018-01-10T06:57:37Z,2018-01-11T00:32:11Z,2018-01-11T00:32:13Z,MERGED,True,575,241,7,https://github.com/binji,Use templates for generating wasm2c source,1,[],https://github.com/WebAssembly/wabt/pull/712,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/712#issuecomment-356780800,"This uses a very simple template syntax, without any advanced features:
%%top
...
%%bottom
...

This template will generate output with two C strings:
const char SECTION_NAME(top)[] = ...
...
const char SECTION_NAME(bottom)[] = ...
...

To update the generated files, run make update-wasm2c.",Looks like the only failure is the ubsan bot failure that I recently fixed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,713,2018-01-10T08:02:56Z,2018-01-11T00:08:44Z,2018-01-11T00:08:46Z,MERGED,True,2,11,2,https://github.com/binji,Use default clang install on travis for ubsan,2,[],https://github.com/WebAssembly/wabt/pull/713,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/713,"The Travis image was updated recently (blog says Dec 12th), which
updates clang to 5.0.0.","The Travis image was updated recently (blog says Dec 12th), which
updates clang to 5.0.0.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,714,2018-01-11T00:03:14Z,2018-01-16T19:38:54Z,2018-01-16T19:38:54Z,MERGED,True,2085,1968,7,https://github.com/lizhengxing,SIMD i16x8.add / i32x4.add / i64x2.add implementation.,1,[],https://github.com/WebAssembly/wabt/pull/714,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/714,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,714,2018-01-11T00:03:14Z,2018-01-16T19:38:54Z,2018-01-16T19:38:54Z,MERGED,True,2085,1968,7,https://github.com/lizhengxing,SIMD i16x8.add / i32x4.add / i64x2.add implementation.,1,[],https://github.com/WebAssembly/wabt/pull/714,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/714#issuecomment-356779744,,"@binji
simd i16x8.add / i32x4.add / i64x2.add implementation, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,717,2018-01-17T19:24:26Z,2018-01-17T20:27:53Z,2018-01-17T20:27:56Z,MERGED,True,36,9,3,https://github.com/binji,Check that name section is after known sections,1,[],https://github.com/WebAssembly/wabt/pull/717,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/717,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,717,2018-01-17T19:24:26Z,2018-01-17T20:27:53Z,2018-01-17T20:27:56Z,MERGED,True,36,9,3,https://github.com/binji,Check that name section is after known sections,1,[],https://github.com/WebAssembly/wabt/pull/717,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/717#issuecomment-358434178,,Travis failure seems to be unrelated (i686 bot couldn't download gcc?),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,718,2018-01-17T21:00:29Z,2018-01-18T01:08:54Z,2018-01-18T01:08:56Z,MERGED,True,179,163,20,https://github.com/binji,Use `section` in gen-wasm tests for subsections,1,[],https://github.com/WebAssembly/wabt/pull/718,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/718,This is easier to read and handles the byte length automatically.,This is easier to read and handles the byte length automatically.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,719,2018-01-17T23:57:14Z,2018-01-18T01:09:06Z,2018-01-18T01:09:08Z,MERGED,True,113,83,3,https://github.com/binji,Move `test/hexfloat.cc` to `src/test-hexfloat.cc`,1,[],https://github.com/WebAssembly/wabt/pull/719,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/719,"The hexfloat test was the first C++ test added, and is a bit different
than the other gtest-based tests because it is very slow (it tests
parsing/writing hexfloats for 32-bit floats exhausitvely.)
This change moves the test to the src directory (where other
gtest-based tests live) and separates out the faster tests so they can
be included in wabt-unittests.","The hexfloat test was the first C++ test added, and is a bit different
than the other gtest-based tests because it is very slow (it tests
parsing/writing hexfloats for 32-bit floats exhausitvely.)
This change moves the test to the src directory (where other
gtest-based tests live) and separates out the faster tests so they can
be included in wabt-unittests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,720,2018-01-18T00:15:47Z,2018-01-18T01:09:17Z,2018-01-18T01:09:17Z,MERGED,True,1866,1725,7,https://github.com/lizhengxing,SIMD sub implementation.,1,[],https://github.com/WebAssembly/wabt/pull/720,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/720,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,720,2018-01-18T00:15:47Z,2018-01-18T01:09:17Z,2018-01-18T01:09:17Z,MERGED,True,1866,1725,7,https://github.com/lizhengxing,SIMD sub implementation.,1,[],https://github.com/WebAssembly/wabt/pull/720,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/720#issuecomment-358494074,,"@binji
Simd sub implementation. PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,721,2018-01-18T17:52:14Z,2018-01-18T19:35:24Z,2018-01-18T19:35:24Z,MERGED,True,2141,2012,7,https://github.com/lizhengxing,SIMD i8x16.mul / i16x8.mul / i32x4.mul implementation.,1,[],https://github.com/WebAssembly/wabt/pull/721,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/721,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,721,2018-01-18T17:52:14Z,2018-01-18T19:35:24Z,2018-01-18T19:35:24Z,MERGED,True,2141,2012,7,https://github.com/lizhengxing,SIMD i8x16.mul / i16x8.mul / i32x4.mul implementation.,1,[],https://github.com/WebAssembly/wabt/pull/721,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/721#issuecomment-358727695,,"@binji
PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,722,2018-01-18T19:05:46Z,2018-01-18T20:56:56Z,2018-01-18T20:56:58Z,MERGED,True,67,25,21,https://github.com/binji,"Add feature flags for sign-ext., mutable-globals",1,[],https://github.com/WebAssembly/wabt/pull/722,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/722,Also reorder the flags so they are alphabetical order.,Also reorder the flags so they are alphabetical order.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,723,2018-01-18T22:13:12Z,2018-01-19T01:29:46Z,2018-01-19T01:29:46Z,MERGED,True,2208,2036,8,https://github.com/lizhengxing,SIMD i8x16.neg / i16x8.neg / i32x4.neg / i64x2.neg implementation.,1,[],https://github.com/WebAssembly/wabt/pull/723,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/723,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,723,2018-01-18T22:13:12Z,2018-01-19T01:29:46Z,2018-01-19T01:29:46Z,MERGED,True,2208,2036,8,https://github.com/lizhengxing,SIMD i8x16.neg / i16x8.neg / i32x4.neg / i64x2.neg implementation.,1,[],https://github.com/WebAssembly/wabt/pull/723,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/723#issuecomment-358799422,,"@binji
SIMD neg instructions implementation. PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,723,2018-01-18T22:13:12Z,2018-01-19T01:29:46Z,2018-01-19T01:29:46Z,MERGED,True,2208,2036,8,https://github.com/lizhengxing,SIMD i8x16.neg / i16x8.neg / i32x4.neg / i64x2.neg implementation.,1,[],https://github.com/WebAssembly/wabt/pull/723,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/723#issuecomment-358828719,,"@binji
updated the PR for windows platform. PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,725,2018-01-19T00:57:01Z,2018-01-19T17:59:20Z,2018-01-19T17:59:23Z,MERGED,True,480,374,13,https://github.com/binji,Allow multiple commands per test in test runner,3,[],https://github.com/WebAssembly/wabt/pull/725,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/725,"This CL allows each test to specify more than one command, each of which
will be run, in order, as long as the previous commands all return
errorcode 0.
For example:
;;; EXE: %(command1)s
;;; FLAGS: --foo=1 --stuff
;;; EXE: %(command2)s
;;; FLAGS: --other-things

The goal here is to remove many of the test wrapper scripts (e.g.
test/run-interp, test/run-objdump, etc.) by having their
functionality represented by multiple commands instead, then wrapped
into a TOOL definition.","This CL allows each test to specify more than one command, each of which
will be run, in order, as long as the previous commands all return
errorcode 0.
For example:
;;; EXE: %(command1)s
;;; FLAGS: --foo=1 --stuff
;;; EXE: %(command2)s
;;; FLAGS: --other-things

The goal here is to remove many of the test wrapper scripts (e.g.
test/run-interp, test/run-objdump, etc.) by having their
functionality represented by multiple commands instead, then wrapped
into a TOOL definition.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,725,2018-01-19T00:57:01Z,2018-01-19T17:59:20Z,2018-01-19T17:59:23Z,MERGED,True,480,374,13,https://github.com/binji,Allow multiple commands per test in test runner,3,[],https://github.com/WebAssembly/wabt/pull/725,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/725#issuecomment-358847222,"This CL allows each test to specify more than one command, each of which
will be run, in order, as long as the previous commands all return
errorcode 0.
For example:
;;; EXE: %(command1)s
;;; FLAGS: --foo=1 --stuff
;;; EXE: %(command2)s
;;; FLAGS: --other-things

The goal here is to remove many of the test wrapper scripts (e.g.
test/run-interp, test/run-objdump, etc.) by having their
functionality represented by multiple commands instead, then wrapped
into a TOOL definition.","OK, this should be a bit cleaner, PTAL!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,726,2018-01-19T06:47:08Z,2018-01-19T17:58:43Z,2018-01-19T17:58:43Z,MERGED,True,4,4,1,https://github.com/lizhengxing,Fix for SIMD i8x16.neg / i16x8.neg / i32x4.neg / i64x2.neg implementation. (#723),1,[],https://github.com/WebAssembly/wabt/pull/726,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/726,"SIMD neg are unary instructions and at wrong place in Disassemble() in interp.cc, This
Fix move them to the right place.","SIMD neg are unary instructions and at wrong place in Disassemble() in interp.cc, This
Fix move them to the right place.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,726,2018-01-19T06:47:08Z,2018-01-19T17:58:43Z,2018-01-19T17:58:43Z,MERGED,True,4,4,1,https://github.com/lizhengxing,Fix for SIMD i8x16.neg / i16x8.neg / i32x4.neg / i64x2.neg implementation. (#723),1,[],https://github.com/WebAssembly/wabt/pull/726,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/726#issuecomment-358881338,"SIMD neg are unary instructions and at wrong place in Disassemble() in interp.cc, This
Fix move them to the right place.","@binji
Fix one bug in SIMD neg PR, PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,726,2018-01-19T06:47:08Z,2018-01-19T17:58:43Z,2018-01-19T17:58:43Z,MERGED,True,4,4,1,https://github.com/lizhengxing,Fix for SIMD i8x16.neg / i16x8.neg / i32x4.neg / i64x2.neg implementation. (#723),1,[],https://github.com/WebAssembly/wabt/pull/726,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/726#issuecomment-359042561,"SIMD neg are unary instructions and at wrong place in Disassemble() in interp.cc, This
Fix move them to the right place.",Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,727,2018-01-19T21:45:57Z,2018-01-22T00:16:54Z,2018-01-22T00:16:54Z,MERGED,True,1551,1332,7,https://github.com/lizhengxing,SIMD saturating add implementation.,1,[],https://github.com/WebAssembly/wabt/pull/727,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/727,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,727,2018-01-19T21:45:57Z,2018-01-22T00:16:54Z,2018-01-22T00:16:54Z,MERGED,True,1551,1332,7,https://github.com/lizhengxing,SIMD saturating add implementation.,1,[],https://github.com/WebAssembly/wabt/pull/727,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/727#issuecomment-359098089,,"@binji
SIMD saturating add implementation. PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,727,2018-01-19T21:45:57Z,2018-01-22T00:16:54Z,2018-01-22T00:16:54Z,MERGED,True,1551,1332,7,https://github.com/lizhengxing,SIMD saturating add implementation.,1,[],https://github.com/WebAssembly/wabt/pull/727,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/727#issuecomment-359147036,,"@binji
PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,728,2018-01-20T00:29:46Z,2018-01-21T18:26:48Z,2018-01-21T18:26:51Z,MERGED,True,345,345,237,https://github.com/binji,Rename run args,2,[],https://github.com/WebAssembly/wabt/pull/728,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/728,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,729,2018-01-21T18:28:59Z,2018-01-22T01:41:26Z,2018-01-22T01:41:28Z,MERGED,True,32,25,1,https://github.com/binji,[test] `RUN` command has optional args,2,[],https://github.com/WebAssembly/wabt/pull/729,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/729,Also fix bug when printing the last command that failed.,Also fix bug when printing the last command that failed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,729,2018-01-21T18:28:59Z,2018-01-22T01:41:26Z,2018-01-22T01:41:28Z,MERGED,True,32,25,1,https://github.com/binji,[test] `RUN` command has optional args,2,[],https://github.com/WebAssembly/wabt/pull/729,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/729#issuecomment-359283999,Also fix bug when printing the last command that failed.,"Maybe include an example that uses this new option?

The next PR has one (see https://github.com/WebAssembly/wabt/tree/tool-multi-cmd).

(Also. its sunday!)

I did most of this on Friday, just wanted to get the PR up so I could build on Travis! :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,730,2018-01-22T01:45:16Z,2018-01-22T05:59:44Z,2018-01-22T05:59:46Z,MERGED,True,51,173,27,https://github.com/binji,Remove `run-interp.py`; use `RUN` commands instead,1,[],https://github.com/WebAssembly/wabt/pull/730,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/730,"Many of the test/run-* Python scripts are essentially the python
equivalent of shell scripts. They require tedious maintenance whenever
the tools change, and have a significant amount of copied code. This CL
removes run-interp.py as a relatively simple initial example.","Many of the test/run-* Python scripts are essentially the python
equivalent of shell scripts. They require tedious maintenance whenever
the tools change, and have a significant amount of copied code. This CL
removes run-interp.py as a relatively simple initial example.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,731,2018-01-24T00:11:02Z,2018-01-24T00:56:43Z,2018-09-18T04:56:17Z,MERGED,True,2,0,1,https://github.com/sbc100,Print symbol names when dumping table relocations,1,[],https://github.com/WebAssembly/wabt/pull/731,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/731,"These relocations point to function index space so we
can print the name of the function here.","These relocations point to function index space so we
can print the name of the function here.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,732,2018-01-24T22:51:54Z,2018-01-25T00:27:29Z,2018-01-25T00:27:32Z,MERGED,True,136,246,93,https://github.com/binji,Remove `run-objdump.py`; replace with `RUN` cmds,2,[],https://github.com/WebAssembly/wabt/pull/732,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/732,"This CL introduces two new TOOLs for tests:

run-objdump-gen-wasm: Run objdump on wasm files generated by
gen-wasm.py.
run-objdump-spec: Run objdump on wasm files generated by
wast2json. For now, this requires each test to specify the files
manually: %(temp_file)s.0.wasm %(temp_file)s.1.wasm etc.

gen_wasm_py has been added as a new RUN variable as well.","This CL introduces two new TOOLs for tests:

run-objdump-gen-wasm: Run objdump on wasm files generated by
gen-wasm.py.
run-objdump-spec: Run objdump on wasm files generated by
wast2json. For now, this requires each test to specify the files
manually: %(temp_file)s.0.wasm %(temp_file)s.1.wasm etc.

gen_wasm_py has been added as a new RUN variable as well.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,733,2018-01-25T00:34:02Z,2018-01-25T01:31:49Z,2018-01-25T01:31:51Z,MERGED,True,2,84,2,https://github.com/binji,Replace `run-opcodecnt.py` with `RUN` commands,1,[],https://github.com/WebAssembly/wabt/pull/733,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/733,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/icefoxen,1,https://github.com/WebAssembly/wabt/pull/734,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/734#issuecomment-360570560,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","Thanks, this change looks good. We'll probably want to make a real C API at some point, but for now this is the best place to do it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/734#issuecomment-360649269,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","BTW, have you joined the WebAssembly CG? For now, it's required to contribute to WebAssembly projects (though this topic is coming up for discussion at tomorrow's CG meeting.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/icefoxen,4,https://github.com/WebAssembly/wabt/pull/734#issuecomment-360655997,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","That's kinda goofy, but ok, I'll sign up.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/icefoxen,5,https://github.com/WebAssembly/wabt/pull/734#issuecomment-360692069,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","Ok, I think this is done and ready to be merged, but frankly I am not sure I did it right because it's 1 am and I don't think the unit test suite even builds this code.  I can't find docs on how to build with emscripten so for the moment this is what we get.
Also, joined the WebAssembly CG.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/pepyakin,6,https://github.com/WebAssembly/wabt/pull/734#issuecomment-360719253,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","That is just awesome, thanks @icefoxen !",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/icefoxen,7,https://github.com/WebAssembly/wabt/pull/734#issuecomment-360882524,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","Ok, it builds now.  Thank you!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/pepyakin,8,https://github.com/WebAssembly/wabt/pull/734#issuecomment-361584679,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","I'm wondering, is it feasible to export spec tests directly in C API, i.e. without roundtriping to wasm and JSON files?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/icefoxen,9,https://github.com/WebAssembly/wabt/pull/734#issuecomment-361592948,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","I don't know, that's a good question...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/binji,10,https://github.com/WebAssembly/wabt/pull/734#issuecomment-361688434,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","Yeah, currently it writes all files to the filesystem, but it would be better if it wrote them to a bunch of Streams like WriteBinaryModule does.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/pepyakin,11,https://github.com/WebAssembly/wabt/pull/734#issuecomment-361912876,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","Or maybe we can go further! What if we expose Script in C API?

  
    
      wabt/src/tools/spectest-interp.cc
    
    
        Lines 100 to 104
      in
      1f735e8
    
  
  
    

        
          
           class Script { 
        

        
          
            public: 
        

        
          
             std::string filename; 
        

        
          
             CommandPtrVector commands; 
        

        
          
           }; 
        
    
  


Or in case wabt-rs maybe we can employ rust-bindgen to generate bindings directly to C++?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,734,2018-01-25T18:34:11Z,2018-01-26T21:35:05Z,2018-01-31T17:54:38Z,MERGED,True,77,0,2,https://github.com/icefoxen,Creating emscripten-exported C bindings for wast handling functions.,3,[],https://github.com/WebAssembly/wabt/pull/734,https://github.com/binji,12,https://github.com/WebAssembly/wabt/pull/734#issuecomment-362015425,"The goal is to make it possible to run wast2json from an external library binding to the C functions, so we can make a Rust binding for them: pepyakin/wabt-rs#1
A little WIP; I need to bind WriteBinarySpecScript and maybe one or two other utility things but I wanted to get this out there to see if this is something you would consider accepting.","Ah, I see what you mean. Yes, we should add a C API for this. I think it would expose this Script though:

  
    
      wabt/src/ir.h
    
    
        Lines 947 to 957
      in
      0a57e72
    
  
  
    

        
          
           struct Script { 
        

        
          
             WABT_DISALLOW_COPY_AND_ASSIGN(Script); 
        

        
          
             Script() = default; 
        

        
          
            
        

        
          
             const Module* GetFirstModule() const; 
        

        
          
             Module* GetFirstModule(); 
        

        
          
             const Module* GetModule(const Var&) const; 
        

        
          
            
        

        
          
             CommandPtrVector commands; 
        

        
          
             BindingHash module_bindings; 
        

        
          
           };",True,{'THUMBS_UP': ['https://github.com/pepyakin']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,735,2018-01-25T22:46:42Z,2018-01-25T23:47:18Z,2018-01-25T23:47:21Z,MERGED,True,517,344,182,https://github.com/binji,`wat2wasm` is no longer default TOOL for tests,1,[],https://github.com/WebAssembly/wabt/pull/735,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/735,The TOOL must specified explicitly.,The TOOL must specified explicitly.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,736,2018-01-26T01:12:40Z,2018-01-26T01:13:37Z,2018-01-26T01:13:39Z,MERGED,True,138,0,136,https://github.com/binji,Fix: don't allow a test with an empty command list,1,[],https://github.com/WebAssembly/wabt/pull/736,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/736,"Since wat2wasm is no longer the default TOOL, it must be specified in
all tests without a RUN or TOOL directive. The previous CL removed the
default, but didn't fix the tests that had no directives.","Since wat2wasm is no longer the default TOOL, it must be specified in
all tests without a RUN or TOOL directive. The previous CL removed the
default, but didn't fix the tests that had no directives.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,737,2018-01-26T01:14:48Z,2018-01-26T19:31:39Z,2018-01-28T21:03:08Z,MERGED,True,126,98,48,https://github.com/binji,Support different returncodes per command in tests,1,[],https://github.com/WebAssembly/wabt/pull/737,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/737,"Each command can specify its expected returncode. If the returncode
doesn't match when the command is run, then no further commands are run
for that test.
This change also requires all ERROR directives to be specified after the
RUN commands, since they are added to a command in the same way as ARGS.","Each command can specify its expected returncode. If the returncode
doesn't match when the command is run, then no further commands are run
for that test.
This change also requires all ERROR directives to be specified after the
RUN commands, since they are added to a command in the same way as ARGS.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,738,2018-01-26T19:37:00Z,2018-01-26T22:24:22Z,2018-01-26T22:24:24Z,MERGED,True,80,460,49,https://github.com/binji,Replace `run-gen-wasm*.py` with `RUN` commands,1,[],https://github.com/WebAssembly/wabt/pull/738,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/738,"This adds a new TOOL: run-gen-wasm-bad which is the same as
run-gen-wasm, but assumes that both wasm2wat and wasm-validate
will fail with an error.","This adds a new TOOL: run-gen-wasm-bad which is the same as
run-gen-wasm, but assumes that both wasm2wat and wasm-validate
will fail with an error.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,739,2018-01-26T21:47:59Z,2018-01-26T22:13:38Z,2018-01-26T22:13:38Z,MERGED,True,6,6,1,https://github.com/dcodeIO,Fixes for building libwabt.js with latest Emscripten,2,[],https://github.com/WebAssembly/wabt/pull/739,https://github.com/dcodeIO,1,https://github.com/WebAssembly/wabt/pull/739,Seems that some of the library functions are no longer exported by default. This PR should fix their uses in wabt.post.js by calling them directly.,Seems that some of the library functions are no longer exported by default. This PR should fix their uses in wabt.post.js by calling them directly.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,740,2018-01-26T23:12:45Z,2018-01-27T08:26:16Z,2018-01-27T08:26:20Z,MERGED,True,39,0,3,https://github.com/kripken,Verify emscripten build compiles on travis,7,[],https://github.com/WebAssembly/wabt/pull/740,https://github.com/kripken,1,https://github.com/WebAssembly/wabt/pull/740,Fixes #158.,Fixes #158.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,741,2018-01-27T00:17:48Z,2018-01-27T02:11:47Z,2018-01-27T02:11:49Z,MERGED,True,4,102,3,https://github.com/binji,Replace `run-gen-spec-js.py` with `RUN` commands,1,[],https://github.com/WebAssembly/wabt/pull/741,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/741,"This does remove some functionality (the ability to run directly with a
specified JS-engine), but it wasn't actually tested anywhere. IMO, it's
better to just remove for simplicity's sake.","This does remove some functionality (the ability to run directly with a
specified JS-engine), but it wasn't actually tested anywhere. IMO, it's
better to just remove for simplicity's sake.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,742,2018-01-30T20:10:33Z,2018-01-30T22:11:35Z,2018-01-31T00:11:40Z,MERGED,True,23,262,14,https://github.com/binji,Replace `run-wasm-link.py` with `RUN` commands,1,[],https://github.com/WebAssembly/wabt/pull/742,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/742,"The interp test modifies the spectest JSON before running, so is too
complex to turn into a RUN command. wasm-link is deprecated, though,
so it IMO it is fine to remove this test.","The interp test modifies the spectest JSON before running, so is too
complex to turn into a RUN command. wasm-link is deprecated, though,
so it IMO it is fine to remove this test.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,743,2018-01-31T16:47:04Z,2018-01-31T16:49:38Z,2018-01-31T16:49:52Z,CLOSED,False,1,1,1,https://github.com/hidden1994,fix path for windows cmake build,1,[],https://github.com/WebAssembly/wabt/pull/743,https://github.com/hidden1994,1,https://github.com/WebAssembly/wabt/pull/743,"cmake --build .. --config DEBUG --target install
should be
cmake --build . --config DEBUG --target install
It was produsing error otherwise: Error: could not load cache, because it pointer to wabt directory and not wabt\build","cmake --build .. --config DEBUG --target install
should be
cmake --build . --config DEBUG --target install
It was produsing error otherwise: Error: could not load cache, because it pointer to wabt directory and not wabt\build",True,{'HOORAY': ['https://github.com/ldm0']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,744,2018-02-01T01:46:16Z,2018-02-11T18:30:28Z,2018-02-11T18:30:30Z,MERGED,True,219,113,4,https://github.com/binji,Use Streams in the WriteBinarySpecScript API,2,[],https://github.com/WebAssembly/wabt/pull/744,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/744,"WriteBinarySpecScript writes a JSON file and its associated module
files (either .wasm or .wat files). The previous API wrote directly
to the filesystem, but it is more useful to allow the caller to specify
where to write the output instead.
The function now provides a callback WriteBinarySpecStreamFactory,
which takes a filename as parameter and returns a Stream to write to.
There is also a convenience function that will write the results to a
vector of filename/MemoryStream pairs.","WriteBinarySpecScript writes a JSON file and its associated module
files (either .wasm or .wat files). The previous API wrote directly
to the filesystem, but it is more useful to allow the caller to specify
where to write the output instead.
The function now provides a callback WriteBinarySpecStreamFactory,
which takes a filename as parameter and returns a Stream to write to.
There is also a convenience function that will write the results to a
vector of filename/MemoryStream pairs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,744,2018-02-01T01:46:16Z,2018-02-11T18:30:28Z,2018-02-11T18:30:30Z,MERGED,True,219,113,4,https://github.com/binji,Use Streams in the WriteBinarySpecScript API,2,[],https://github.com/WebAssembly/wabt/pull/744,https://github.com/pepyakin,2,https://github.com/WebAssembly/wabt/pull/744#issuecomment-364439095,"WriteBinarySpecScript writes a JSON file and its associated module
files (either .wasm or .wat files). The previous API wrote directly
to the filesystem, but it is more useful to allow the caller to specify
where to write the output instead.
The function now provides a callback WriteBinarySpecStreamFactory,
which takes a filename as parameter and returns a Stream to write to.
There is also a convenience function that will write the results to a
vector of filename/MemoryStream pairs.",Hello @sbc100 ! Could you please take a look at this?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,744,2018-02-01T01:46:16Z,2018-02-11T18:30:28Z,2018-02-11T18:30:30Z,MERGED,True,219,113,4,https://github.com/binji,Use Streams in the WriteBinarySpecScript API,2,[],https://github.com/WebAssembly/wabt/pull/744,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/744#issuecomment-364577070,"WriteBinarySpecScript writes a JSON file and its associated module
files (either .wasm or .wat files). The previous API wrote directly
to the filesystem, but it is more useful to allow the caller to specify
where to write the output instead.
The function now provides a callback WriteBinarySpecStreamFactory,
which takes a filename as parameter and returns a Stream to write to.
There is also a convenience function that will write the results to a
vector of filename/MemoryStream pairs.",WriteBinarySpecStreamFactory .. what is this Java a project?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,744,2018-02-01T01:46:16Z,2018-02-11T18:30:28Z,2018-02-11T18:30:30Z,MERGED,True,219,113,4,https://github.com/binji,Use Streams in the WriteBinarySpecScript API,2,[],https://github.com/WebAssembly/wabt/pull/744,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/744#issuecomment-364760560,"WriteBinarySpecScript writes a JSON file and its associated module
files (either .wasm or .wat files). The previous API wrote directly
to the filesystem, but it is more useful to allow the caller to specify
where to write the output instead.
The function now provides a callback WriteBinarySpecStreamFactory,
which takes a filename as parameter and returns a Stream to write to.
There is also a convenience function that will write the results to a
vector of filename/MemoryStream pairs.","WriteBinarySpecStreamFactory .. what is this Java a project?

Ha! I didn't like it much either, do you have a better name?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,747,2018-02-06T20:01:17Z,2018-02-07T03:30:54Z,2018-02-07T03:30:54Z,MERGED,True,1596,1377,7,https://github.com/lizhengxing,SIMD saturating sub implementation.,1,[],https://github.com/WebAssembly/wabt/pull/747,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/747,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,747,2018-02-06T20:01:17Z,2018-02-07T03:30:54Z,2018-02-07T03:30:54Z,MERGED,True,1596,1377,7,https://github.com/lizhengxing,SIMD saturating sub implementation.,1,[],https://github.com/WebAssembly/wabt/pull/747,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/747#issuecomment-363547323,,"@binji
This is simd saturating sub implementation, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,750,2018-02-07T18:56:45Z,2018-02-07T22:45:27Z,2018-02-07T22:45:27Z,MERGED,True,1714,1659,7,https://github.com/lizhengxing,SIMD i8x16.shl implementation.,1,[],https://github.com/WebAssembly/wabt/pull/750,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/750,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,750,2018-02-07T18:56:45Z,2018-02-07T22:45:27Z,2018-02-07T22:45:27Z,MERGED,True,1714,1659,7,https://github.com/lizhengxing,SIMD i8x16.shl implementation.,1,[],https://github.com/WebAssembly/wabt/pull/750,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/750#issuecomment-363873001,,"@binji
i8x16.shl implementation, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,751,2018-02-08T05:23:21Z,2018-02-13T06:06:03Z,2018-02-13T06:06:04Z,MERGED,True,2021,1892,7,https://github.com/lizhengxing,SIMD i16x8/i32x4/i64x2 shl implementation.,1,[],https://github.com/WebAssembly/wabt/pull/751,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/751,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,751,2018-02-08T05:23:21Z,2018-02-13T06:06:03Z,2018-02-13T06:06:04Z,MERGED,True,2021,1892,7,https://github.com/lizhengxing,SIMD i16x8/i32x4/i64x2 shl implementation.,1,[],https://github.com/WebAssembly/wabt/pull/751,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/751#issuecomment-364006204,,"@binji
SIMD i16x8/i32x4/i64x2 shl implementation. PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,751,2018-02-08T05:23:21Z,2018-02-13T06:06:03Z,2018-02-13T06:06:04Z,MERGED,True,2021,1892,7,https://github.com/lizhengxing,SIMD i16x8/i32x4/i64x2 shl implementation.,1,[],https://github.com/WebAssembly/wabt/pull/751,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/751#issuecomment-365005442,,"@binji
Updated the tests, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,753,2018-02-11T15:55:55Z,2018-02-11T18:30:56Z,2018-02-11T18:31:00Z,MERGED,True,7,4,1,https://github.com/binji,Fix segfault in wat2wasm when loading invalid file,1,[],https://github.com/WebAssembly/wabt/pull/753,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/753,See issue #748.,See issue #748.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,755,2018-02-13T17:12:07Z,2018-02-14T03:11:42Z,2018-02-14T03:11:42Z,MERGED,True,1945,1641,7,https://github.com/lizhengxing,SIMD right shift by scalar instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/755,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/755,"Including:
i8x16.shr_s, i8x16.shr_u
i16x8.shr_s, i16x8.shr_u
i32x4.shr_s, i32x4.shr_u
i64x2.shr_s, i64x2.shr_u","Including:
i8x16.shr_s, i8x16.shr_u
i16x8.shr_s, i16x8.shr_u
i32x4.shr_s, i32x4.shr_u
i64x2.shr_s, i64x2.shr_u",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,755,2018-02-13T17:12:07Z,2018-02-14T03:11:42Z,2018-02-14T03:11:42Z,MERGED,True,1945,1641,7,https://github.com/lizhengxing,SIMD right shift by scalar instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/755,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/755#issuecomment-365336105,"Including:
i8x16.shr_s, i8x16.shr_u
i16x8.shr_s, i16x8.shr_u
i32x4.shr_s, i32x4.shr_u
i64x2.shr_s, i64x2.shr_u","@binji
Simd Right shift by scalar implementation PR. PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,755,2018-02-13T17:12:07Z,2018-02-14T03:11:42Z,2018-02-14T03:11:42Z,MERGED,True,1945,1641,7,https://github.com/lizhengxing,SIMD right shift by scalar instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/755,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/755#issuecomment-365437149,"Including:
i8x16.shr_s, i8x16.shr_u
i16x8.shr_s, i16x8.shr_u
i32x4.shr_s, i32x4.shr_u
i64x2.shr_s, i64x2.shr_u","@binji
Updated the tests, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,756,2018-02-13T18:42:51Z,2018-02-13T19:37:19Z,2018-02-13T19:37:22Z,MERGED,True,31,20,6,https://github.com/binji,Don't allow memory to be shared by default,1,[],https://github.com/WebAssembly/wabt/pull/756,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/756,Shared memory is only allowed with the --enable-threads flag.,Shared memory is only allowed with the --enable-threads flag.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,757,2018-02-14T01:26:26Z,2018-02-14T06:08:48Z,2018-02-14T06:08:50Z,MERGED,True,98,100,15,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/757,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/757,"The spectest module's functions and globals are no longer overloaded, so
their implementations in spectest-interp and spec-wasm2c-prefix.c
have to be changed as well.","The spectest module's functions and globals are no longer overloaded, so
their implementations in spectest-interp and spec-wasm2c-prefix.c
have to be changed as well.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,758,2018-02-14T05:52:42Z,2018-02-14T18:08:03Z,2018-02-14T18:08:03Z,MERGED,True,2521,2382,8,https://github.com/lizhengxing,SIMD Bitwise logic instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/758,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/758,"Including:
v128.and, v128.or, v128.xor, v128.not","Including:
v128.and, v128.or, v128.xor, v128.not",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,758,2018-02-14T05:52:42Z,2018-02-14T18:08:03Z,2018-02-14T18:08:03Z,MERGED,True,2521,2382,8,https://github.com/lizhengxing,SIMD Bitwise logic instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/758,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/758#issuecomment-365503966,"Including:
v128.and, v128.or, v128.xor, v128.not","@binji
Simd Bitwise logic instructions implementation. PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,759,2018-02-14T19:42:38Z,2018-02-19T18:59:23Z,2018-02-20T06:20:32Z,MERGED,True,2882,2709,26,https://github.com/lizhengxing,SIMD v128.bitselect instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/759,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/759,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,759,2018-02-14T19:42:38Z,2018-02-19T18:59:23Z,2018-02-20T06:20:32Z,MERGED,True,2882,2709,26,https://github.com/lizhengxing,SIMD v128.bitselect instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/759,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/759#issuecomment-365722438,,"@binji
V128.bitselect implementation. PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,759,2018-02-14T19:42:38Z,2018-02-19T18:59:23Z,2018-02-20T06:20:32Z,MERGED,True,2882,2709,26,https://github.com/lizhengxing,SIMD v128.bitselect instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/759,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/759#issuecomment-366389106,,"@binji
re-implement the simd v128 bitselect instruction, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,759,2018-02-14T19:42:38Z,2018-02-19T18:59:23Z,2018-02-20T06:20:32Z,MERGED,True,2882,2709,26,https://github.com/lizhengxing,SIMD v128.bitselect instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/759,https://github.com/lizhengxing,4,https://github.com/WebAssembly/wabt/pull/759#issuecomment-366877835,,"@binji
Welcome!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,761,2018-02-15T23:20:19Z,2018-02-16T03:23:16Z,2018-02-16T03:23:18Z,MERGED,True,27,0,2,https://github.com/binji,Add try/catch around calls to reserve,1,[],https://github.com/WebAssembly/wabt/pull/761,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/761,"Only when exceptions are enabled via the CMake WITH_EXCEPTIONS option.
See issue #760.","Only when exceptions are enabled via the CMake WITH_EXCEPTIONS option.
See issue #760.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,761,2018-02-15T23:20:19Z,2018-02-16T03:23:16Z,2018-02-16T03:23:18Z,MERGED,True,27,0,2,https://github.com/binji,Add try/catch around calls to reserve,1,[],https://github.com/WebAssembly/wabt/pull/761,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/761#issuecomment-366120739,"Only when exceptions are enabled via the CMake WITH_EXCEPTIONS option.
See issue #760.",I didn't know we supported exception.. why?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,761,2018-02-15T23:20:19Z,2018-02-16T03:23:16Z,2018-02-16T03:23:18Z,MERGED,True,27,0,2,https://github.com/binji,Add try/catch around calls to reserve,1,[],https://github.com/WebAssembly/wabt/pull/761,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/761#issuecomment-366129753,"Only when exceptions are enabled via the CMake WITH_EXCEPTIONS option.
See issue #760.","We mostly don't support exceptions, but provide it as an option because when an exception would be thrown (e.g. std::bad_alloc) the process is terminated as a crash. So if you're fuzzing, this looks like an error and hides other ""real"" errors.
This PR doesn't really improve things much, but it since reserve is just an optimization, if it does throw std::bad_alloc we can just catch and ignore it, which will mean the memory allocation will either fail later or won't fail at all since the reservation wasn't actually needed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,763,2018-02-20T06:35:40Z,2018-02-21T08:09:33Z,2018-02-21T08:09:33Z,MERGED,True,2456,1978,7,https://github.com/lizhengxing,SIMD Boolean horizontal reductions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/763,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/763,"Including:
(i8x16/i16x8/i32x4/i64x2).any_true
(i8x16/i16x8/i32x4/i64x2).all_true","Including:
(i8x16/i16x8/i32x4/i64x2).any_true
(i8x16/i16x8/i32x4/i64x2).all_true",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,763,2018-02-20T06:35:40Z,2018-02-21T08:09:33Z,2018-02-21T08:09:33Z,MERGED,True,2456,1978,7,https://github.com/lizhengxing,SIMD Boolean horizontal reductions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/763,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/763#issuecomment-366880801,"Including:
(i8x16/i16x8/i32x4/i64x2).any_true
(i8x16/i16x8/i32x4/i64x2).all_true","@binji
Simd Boolean implementation, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,763,2018-02-20T06:35:40Z,2018-02-21T08:09:33Z,2018-02-21T08:09:33Z,MERGED,True,2456,1978,7,https://github.com/lizhengxing,SIMD Boolean horizontal reductions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/763,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/763#issuecomment-367244588,"Including:
(i8x16/i16x8/i32x4/i64x2).any_true
(i8x16/i16x8/i32x4/i64x2).all_true","Great, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,764,2018-02-21T04:37:10Z,2018-02-21T06:25:46Z,2018-02-21T06:25:48Z,MERGED,True,310,202,1,https://github.com/binji,Use ExprVisitor in Validator,1,[],https://github.com/WebAssembly/wabt/pull/764,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/764,"This will make it easier to use a non-recursive visiting strategy that
can be reused elsewhere.","This will make it easier to use a non-recursive visiting strategy that
can be reused elsewhere.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,765,2018-02-21T06:26:37Z,2018-02-21T19:58:02Z,2018-02-21T19:58:05Z,MERGED,True,188,21,2,https://github.com/binji,Rewrite ExprVisitor to be non-recursive,2,[],https://github.com/WebAssembly/wabt/pull/765,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/765,"This will help with wasm modules that have very deeply nested blocks.
See issue #752.","This will help with wasm modules that have very deeply nested blocks.
See issue #752.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,765,2018-02-21T06:26:37Z,2018-02-21T19:58:02Z,2018-02-21T19:58:05Z,MERGED,True,188,21,2,https://github.com/binji,Rewrite ExprVisitor to be non-recursive,2,[],https://github.com/WebAssembly/wabt/pull/765,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/765#issuecomment-367404322,"This will help with wasm modules that have very deeply nested blocks.
See issue #752.","Done, PTAL",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,766,2018-02-21T16:35:36Z,2018-02-21T17:28:59Z,2018-02-21T17:28:59Z,MERGED,True,2655,2478,7,https://github.com/lizhengxing,SIMD Comparison Equality instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/766,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/766,"Including:
(i8x16/i16x8/i32x4/f32x4/f64x2).eq","Including:
(i8x16/i16x8/i32x4/f32x4/f64x2).eq",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,766,2018-02-21T16:35:36Z,2018-02-21T17:28:59Z,2018-02-21T17:28:59Z,MERGED,True,2655,2478,7,https://github.com/lizhengxing,SIMD Comparison Equality instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/766,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/766#issuecomment-367387256,"Including:
(i8x16/i16x8/i32x4/f32x4/f64x2).eq","@binji
Simd EQ implementation, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,767,2018-02-21T19:45:15Z,2018-02-21T22:54:01Z,2018-02-21T22:54:02Z,MERGED,True,2674,2477,7,https://github.com/lizhengxing,SIMD Comparison Non-Equality instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/767,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/767,"Including:
(i8x16/i16x8/i32x4/f32x4/f64x2).ne","Including:
(i8x16/i16x8/i32x4/f32x4/f64x2).ne",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,767,2018-02-21T19:45:15Z,2018-02-21T22:54:01Z,2018-02-21T22:54:02Z,MERGED,True,2674,2477,7,https://github.com/lizhengxing,SIMD Comparison Non-Equality instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/767,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/767#issuecomment-367447703,"Including:
(i8x16/i16x8/i32x4/f32x4/f64x2).ne","@binji
Simd Non-Equality implementation, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,768,2018-02-21T23:00:12Z,2018-02-22T02:26:43Z,2018-02-22T02:26:46Z,MERGED,True,280,181,1,https://github.com/binji,Use ExprVisitor in WatWriter,2,[],https://github.com/WebAssembly/wabt/pull/768,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/768,"Since ExprVisitor is non-recursive, this will allow modules with deeply
nested blocks to be written.
See issue #752.","Since ExprVisitor is non-recursive, this will allow modules with deeply
nested blocks to be written.
See issue #752.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,769,2018-02-22T22:06:01Z,2018-03-05T22:03:02Z,2018-03-05T22:03:05Z,MERGED,True,374,117,20,https://github.com/sbc100,Add support for new symbol table format,6,[],https://github.com/WebAssembly/wabt/pull/769,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/769,This should not land until the upstream support in llvm also lands,This should not land until the upstream support in llvm also lands,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,769,2018-02-22T22:06:01Z,2018-03-05T22:03:02Z,2018-03-05T22:03:05Z,MERGED,True,374,117,20,https://github.com/sbc100,Add support for new symbol table format,6,[],https://github.com/WebAssembly/wabt/pull/769,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/769#issuecomment-369410768,This should not land until the upstream support in llvm also lands,"refactored, PTAL",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,770,2018-02-22T23:26:59Z,2018-02-23T19:48:06Z,2018-02-23T19:48:07Z,MERGED,True,2747,2493,7,https://github.com/lizhengxing,SIMD Comparison Less than instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/770,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/770,"Including:
i8x16.lt_s, i8x16_lt_u
i16x8.lt_s, i16x8_lt_u
i32x4.lt_s, i32x4_lt_u
f32x4.lt
f64x2.lt","Including:
i8x16.lt_s, i8x16_lt_u
i16x8.lt_s, i16x8_lt_u
i32x4.lt_s, i32x4_lt_u
f32x4.lt
f64x2.lt",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,770,2018-02-22T23:26:59Z,2018-02-23T19:48:06Z,2018-02-23T19:48:07Z,MERGED,True,2747,2493,7,https://github.com/lizhengxing,SIMD Comparison Less than instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/770,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/770#issuecomment-367858166,"Including:
i8x16.lt_s, i8x16_lt_u
i16x8.lt_s, i16x8_lt_u
i32x4.lt_s, i32x4_lt_u
f32x4.lt
f64x2.lt","@binji
SIMD less than implementation, PTAL!
Thanks!
@aruntem FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,771,2018-02-26T17:34:12Z,2018-02-26T19:52:02Z,2018-02-26T19:52:02Z,MERGED,True,2467,2229,7,https://github.com/lizhengxing,SIMD Comparison Less than or equal instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/771,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/771,"Including:
i8x16.le_s, i8x16_le_u
i16x8.le_s, i16x8_le_u
i32x4.le_s, i32x4_le_u
f32x4.le
f64x2.le","Including:
i8x16.le_s, i8x16_le_u
i16x8.le_s, i16x8_le_u
i32x4.le_s, i32x4_le_u
f32x4.le
f64x2.le",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,771,2018-02-26T17:34:12Z,2018-02-26T19:52:02Z,2018-02-26T19:52:02Z,MERGED,True,2467,2229,7,https://github.com/lizhengxing,SIMD Comparison Less than or equal instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/771,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/771#issuecomment-368583206,"Including:
i8x16.le_s, i8x16_le_u
i16x8.le_s, i16x8_le_u
i32x4.le_s, i32x4_le_u
f32x4.le
f64x2.le","@binji
SIMD Comparison Less than or equal instructions , PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,772,2018-02-27T06:14:25Z,2018-02-27T18:51:10Z,2018-02-27T18:51:10Z,MERGED,True,2825,2567,7,https://github.com/lizhengxing,SIMD Comparison Greater than instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/772,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/772,"Including:
i8x16.gt_s, i8x16_gt_u
i16x8.gt_s, i16x8_gt_u
i32x4.gt_s, i32x4_gt_u
f32x4.gt
f64x2.gt","Including:
i8x16.gt_s, i8x16_gt_u
i16x8.gt_s, i16x8_gt_u
i32x4.gt_s, i32x4_gt_u
f32x4.gt
f64x2.gt",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,772,2018-02-27T06:14:25Z,2018-02-27T18:51:10Z,2018-02-27T18:51:10Z,MERGED,True,2825,2567,7,https://github.com/lizhengxing,SIMD Comparison Greater than instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/772,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/772#issuecomment-368759498,"Including:
i8x16.gt_s, i8x16_gt_u
i16x8.gt_s, i16x8_gt_u
i32x4.gt_s, i32x4_gt_u
f32x4.gt
f64x2.gt","@binji
SIMD greater than instructions, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,773,2018-02-28T02:57:10Z,2018-03-03T01:48:11Z,2018-03-03T01:48:13Z,MERGED,True,8966,9289,76,https://github.com/binji,WIP on support for level1 exception spec,3,[],https://github.com/WebAssembly/wabt/pull/773,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/773,"Implemented:

Parsing try, if_except, throw, rethrow
Validation
Binary and text output

Still missing:

except_ref for locals
Interpreter implementation","Implemented:

Parsing try, if_except, throw, rethrow
Validation
Binary and text output

Still missing:

except_ref for locals
Interpreter implementation",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,773,2018-02-28T02:57:10Z,2018-03-03T01:48:11Z,2018-03-03T01:48:13Z,MERGED,True,8966,9289,76,https://github.com/binji,WIP on support for level1 exception spec,3,[],https://github.com/WebAssembly/wabt/pull/773,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/773#issuecomment-370105737,"Implemented:

Parsing try, if_except, throw, rethrow
Validation
Binary and text output

Still missing:

except_ref for locals
Interpreter implementation","OK, gonna land this. @KarlSchimpf, feel free to add comments if you have any, I'll fix in later PRs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,774,2018-02-28T04:21:48Z,2018-02-28T05:20:36Z,2018-02-28T05:20:39Z,MERGED,True,1,1,1,https://github.com/binji,Fix run-tests.py when a roundtrip tests fails,1,[],https://github.com/WebAssembly/wabt/pull/774,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/774,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,775,2018-02-28T04:24:58Z,2018-02-28T06:30:17Z,2018-02-28T06:30:21Z,MERGED,True,5,28,1,https://github.com/binji,Use GetTypeName in binary-reader-objdump.cc,1,[],https://github.com/WebAssembly/wabt/pull/775,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/775,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,776,2018-02-28T04:29:31Z,2018-02-28T07:24:39Z,2018-02-28T07:24:42Z,MERGED,True,4,4,2,https://github.com/binji,Fix token name order,1,[],https://github.com/WebAssembly/wabt/pull/776,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/776,"WAIT and WAKE were in the wrong place. I also moved TERNARY up so it the
list is in alphabetic order.","WAIT and WAKE were in the wrong place. I also moved TERNARY up so it the
list is in alphabetic order.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,778,2018-02-28T17:27:52Z,2018-02-28T17:38:22Z,2018-02-28T17:38:22Z,MERGED,True,2532,2294,7,https://github.com/lizhengxing,SIMD Comparison Greater than or equal instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/778,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/778,"Including:
i8x16.ge_s, i8x16_ge_u
i16x8.ge_s, i16x8_ge_u
i32x4.ge_s, i32x4_ge_u
f32x4.ge
f64x2.ge","Including:
i8x16.ge_s, i8x16_ge_u
i16x8.ge_s, i16x8_ge_u
i32x4.ge_s, i32x4_ge_u
f32x4.ge
f64x2.ge",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,778,2018-02-28T17:27:52Z,2018-02-28T17:38:22Z,2018-02-28T17:38:22Z,MERGED,True,2532,2294,7,https://github.com/lizhengxing,SIMD Comparison Greater than or equal instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/778,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/778#issuecomment-369315871,"Including:
i8x16.ge_s, i8x16_ge_u
i16x8.ge_s, i16x8_ge_u
i32x4.ge_s, i32x4_ge_u
f32x4.ge
f64x2.ge","@binji
Simd greater than or eq instructions, PTAL!
Thanks!
@aruntem FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,779,2018-02-28T17:58:46Z,2018-02-28T19:23:47Z,2018-02-28T19:23:47Z,MERGED,True,1990,1898,7,https://github.com/lizhengxing,SIMD (f32x4/f64x2).neg implementation.,1,[],https://github.com/WebAssembly/wabt/pull/779,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/779,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,779,2018-02-28T17:58:46Z,2018-02-28T19:23:47Z,2018-02-28T19:23:47Z,MERGED,True,1990,1898,7,https://github.com/lizhengxing,SIMD (f32x4/f64x2).neg implementation.,1,[],https://github.com/WebAssembly/wabt/pull/779,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/779#issuecomment-369326514,,"@binji
SIMD (f32x4/f64x2).neg implementation, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,780,2018-02-28T18:41:42Z,2018-03-01T03:23:44Z,2018-03-01T03:23:47Z,MERGED,True,230,114,8,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/780,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/780,"Fix edge case elem segment bounds checking
Fix bounds checking when importing spectest table","Fix edge case elem segment bounds checking
Fix bounds checking when importing spectest table",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,781,2018-02-28T20:36:14Z,2018-02-28T22:47:20Z,2018-03-01T00:27:25Z,MERGED,True,8,9,1,https://github.com/sbc100,Use uint8 when reading import kind,1,[],https://github.com/WebAssembly/wabt/pull/781,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/781,"This matches the spec (and the existing code which already exists
in this file for export kind).","This matches the spec (and the existing code which already exists
in this file for export kind).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,782,2018-02-28T20:49:51Z,2018-03-01T16:05:14Z,2018-03-01T16:05:18Z,MERGED,True,17,21,5,https://github.com/sbc100,Match value type enum to spec values and read/write as uint8_t,1,[],https://github.com/WebAssembly/wabt/pull/782,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/782,"These seems to match what is in the spec where these values
are specified as single type terminals.
See: https://webassembly.github.io/spec/core/binary/types.html","These seems to match what is in the spec where these values
are specified as single type terminals.
See: https://webassembly.github.io/spec/core/binary/types.html",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,782,2018-02-28T20:49:51Z,2018-03-01T16:05:14Z,2018-03-01T16:05:18Z,MERGED,True,17,21,5,https://github.com/sbc100,Match value type enum to spec values and read/write as uint8_t,1,[],https://github.com/WebAssembly/wabt/pull/782,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/782#issuecomment-369398688,"These seems to match what is in the spec where these values
are specified as single type terminals.
See: https://webassembly.github.io/spec/core/binary/types.html",The spec and BinaryFormat.md also seem to disagree somewhat on this.  The BinaryFormat.md seems to use varint7 .. where as (I think) the spec specified a raw byte.  Am I wrong?  Should we update BinaryFormat.md?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,782,2018-02-28T20:49:51Z,2018-03-01T16:05:14Z,2018-03-01T16:05:18Z,MERGED,True,17,21,5,https://github.com/sbc100,Match value type enum to spec values and read/write as uint8_t,1,[],https://github.com/WebAssembly/wabt/pull/782,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/782#issuecomment-369399662,"These seems to match what is in the spec where these values
are specified as single type terminals.
See: https://webassembly.github.io/spec/core/binary/types.html","BinaryEncoding.md hasn't been updated in a while, I wouldn't rely on it for anything anymore.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,783,2018-03-01T06:35:21Z,2018-03-02T01:36:39Z,2018-03-02T01:36:39Z,MERGED,True,2728,2643,7,https://github.com/lizhengxing,SIMD (f32x4/f64x2).abs implementation.,1,[],https://github.com/WebAssembly/wabt/pull/783,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/783,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,783,2018-03-01T06:35:21Z,2018-03-02T01:36:39Z,2018-03-02T01:36:39Z,MERGED,True,2728,2643,7,https://github.com/lizhengxing,SIMD (f32x4/f64x2).abs implementation.,1,[],https://github.com/WebAssembly/wabt/pull/783,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/783#issuecomment-369489495,,"@binji
SIMD (f32x4/f64x2).abs implementation. PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,784,2018-03-02T17:59:31Z,2018-03-02T19:28:07Z,2018-03-03T06:57:18Z,MERGED,True,2817,2657,7,https://github.com/lizhengxing,SIMD Floating-point min and max implementation.,1,[],https://github.com/WebAssembly/wabt/pull/784,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/784,"Including:
f32x4.min, f64x2.min, f32x4.max, f64x2.max","Including:
f32x4.min, f64x2.min, f32x4.max, f64x2.max",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,784,2018-03-02T17:59:31Z,2018-03-02T19:28:07Z,2018-03-03T06:57:18Z,MERGED,True,2817,2657,7,https://github.com/lizhengxing,SIMD Floating-point min and max implementation.,1,[],https://github.com/WebAssembly/wabt/pull/784,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/784#issuecomment-370000807,"Including:
f32x4.min, f64x2.min, f32x4.max, f64x2.max","@binji
Simd f32x4.min, f64x2.min, f32x4.max, f64x2.max implementation. PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,785,2018-03-03T06:41:15Z,2018-03-03T06:46:25Z,2018-03-03T06:46:48Z,CLOSED,False,2522,2368,7,https://github.com/lizhengxing,SIMD Floating-point add and sub implementation.,1,[],https://github.com/WebAssembly/wabt/pull/785,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/785,"Including:
f32x4.add, f64x2.add, f32x4.sub, f64x2.sub","Including:
f32x4.add, f64x2.add, f32x4.sub, f64x2.sub",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,786,2018-03-03T07:00:42Z,2018-03-04T04:14:52Z,2018-03-04T04:14:52Z,MERGED,True,8128,7833,7,https://github.com/lizhengxing,SIMD Floating-point add and sub implementation.,1,[],https://github.com/WebAssembly/wabt/pull/786,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/786,"Including:
f32x4.add, f64x2.add, f32x4.sub, f64x2.sub","Including:
f32x4.add, f64x2.add, f32x4.sub, f64x2.sub",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,786,2018-03-03T07:00:42Z,2018-03-04T04:14:52Z,2018-03-04T04:14:52Z,MERGED,True,8128,7833,7,https://github.com/lizhengxing,SIMD Floating-point add and sub implementation.,1,[],https://github.com/WebAssembly/wabt/pull/786,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/786#issuecomment-370125416,"Including:
f32x4.add, f64x2.add, f32x4.sub, f64x2.sub","@binji
Simd float add/sub implementation PR, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,787,2018-03-05T17:52:05Z,2018-03-05T18:22:26Z,2018-03-05T18:22:26Z,MERGED,True,2879,2711,7,https://github.com/lizhengxing,SIMD Floating-point div and mul implementation.,1,[],https://github.com/WebAssembly/wabt/pull/787,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/787,"Including:
f32x4.div, f64x2.div, f32x4.mul, f64x2.mul","Including:
f32x4.div, f64x2.div, f32x4.mul, f64x2.mul",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,787,2018-03-05T17:52:05Z,2018-03-05T18:22:26Z,2018-03-05T18:22:26Z,MERGED,True,2879,2711,7,https://github.com/lizhengxing,SIMD Floating-point div and mul implementation.,1,[],https://github.com/WebAssembly/wabt/pull/787,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/787#issuecomment-370504731,"Including:
f32x4.div, f64x2.div, f32x4.mul, f64x2.mul","@binji
SIMD div/mul instructions, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,788,2018-03-05T21:59:05Z,2018-03-06T05:56:31Z,2018-03-06T05:56:34Z,MERGED,True,43,39,1,https://github.com/sbc100,Use early return in PrintStackIfFailed,3,[],https://github.com/WebAssembly/wabt/pull/788,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/788,Also add some missing braces.,Also add some missing braces.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,789,2018-03-05T22:04:57Z,2018-03-05T23:58:09Z,2018-03-05T23:58:09Z,MERGED,True,2433,2343,7,https://github.com/lizhengxing,SIMD (f32x4/f64x2).sqrt implementation.,1,[],https://github.com/WebAssembly/wabt/pull/789,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/789,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,789,2018-03-05T22:04:57Z,2018-03-05T23:58:09Z,2018-03-05T23:58:09Z,MERGED,True,2433,2343,7,https://github.com/lizhengxing,SIMD (f32x4/f64x2).sqrt implementation.,1,[],https://github.com/WebAssembly/wabt/pull/789,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/789#issuecomment-370583925,,"@binji
SIMD (f32x4/f64x2).sqrt implementation. PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,790,2018-03-06T00:37:00Z,2018-03-06T01:14:16Z,2018-03-06T01:14:18Z,MERGED,True,111,119,1,https://github.com/sbc100,Refactor BinaryWriter so the module being written is a member,2,[],https://github.com/WebAssembly/wabt/pull/790,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/790,"We already have a bunch of module-specific members so this
class is already only single-use anyway.","We already have a bunch of module-specific members so this
class is already only single-use anyway.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,791,2018-03-06T00:58:45Z,2018-03-06T05:42:11Z,2018-03-06T05:42:14Z,MERGED,True,32,14,2,https://github.com/binji,Always set the expr's loc value in binary reader,1,[],https://github.com/WebAssembly/wabt/pull/791,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/791,"If this is not done, the error reporting just prints location 0, which
is not useful.","If this is not done, the error reporting just prints location 0, which
is not useful.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,792,2018-03-06T01:14:50Z,2018-03-06T05:27:21Z,2018-03-06T05:27:24Z,MERGED,True,4,4,2,https://github.com/sbc100,Write linking metadata before relocations,1,[],https://github.com/WebAssembly/wabt/pull/792,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/792,"This is so that relocations can refer to the symbol table
entries.  The Linking.md spec will soon be updated to
reflect his requirement.","This is so that relocations can refer to the symbol table
entries.  The Linking.md spec will soon be updated to
reflect his requirement.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,793,2018-03-06T01:27:50Z,2018-03-06T05:56:10Z,2018-03-06T05:56:13Z,MERGED,True,6,2325,25,https://github.com/sbc100,Remove wasm-link tool,3,[],https://github.com/WebAssembly/wabt/pull/793,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/793,"This is been superseded by lld and we no longer have the
bandwidth to maintain a separate linker.","This is been superseded by lld and we no longer have the
bandwidth to maintain a separate linker.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,794,2018-03-06T06:42:03Z,2018-03-07T03:38:07Z,2018-03-07T03:41:41Z,MERGED,True,170,44,6,https://github.com/sbc100,Generate symbol table when creating relocations in binary-writer.cc,5,[],https://github.com/WebAssembly/wabt/pull/794,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/794,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,795,2018-03-06T17:24:16Z,2018-03-07T07:21:55Z,2018-03-07T07:21:55Z,MERGED,True,3047,2750,8,https://github.com/lizhengxing,SIMD Integer to floating point conversion implementation.,1,[],https://github.com/WebAssembly/wabt/pull/795,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/795,"Including:
f32x4.convert_s/i32x4
f32x4.convert_u/i32x4
f64x2.convert_s/i64x2
f64x2.convert_u/i64x2","Including:
f32x4.convert_s/i32x4
f32x4.convert_u/i32x4
f64x2.convert_s/i64x2
f64x2.convert_u/i64x2",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,795,2018-03-06T17:24:16Z,2018-03-07T07:21:55Z,2018-03-07T07:21:55Z,MERGED,True,3047,2750,8,https://github.com/lizhengxing,SIMD Integer to floating point conversion implementation.,1,[],https://github.com/WebAssembly/wabt/pull/795,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/795#issuecomment-370859894,"Including:
f32x4.convert_s/i32x4
f32x4.convert_u/i32x4
f64x2.convert_s/i64x2
f64x2.convert_u/i64x2","@binji
SIMD float convert instructions, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,795,2018-03-06T17:24:16Z,2018-03-07T07:21:55Z,2018-03-07T07:21:55Z,MERGED,True,3047,2750,8,https://github.com/lizhengxing,SIMD Integer to floating point conversion implementation.,1,[],https://github.com/WebAssembly/wabt/pull/795,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/795#issuecomment-370961072,"Including:
f32x4.convert_s/i32x4
f32x4.convert_u/i32x4
f64x2.convert_s/i64x2
f64x2.convert_u/i64x2","@binji
Updated the PR, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,795,2018-03-06T17:24:16Z,2018-03-07T07:21:55Z,2018-03-07T07:21:55Z,MERGED,True,3047,2750,8,https://github.com/lizhengxing,SIMD Integer to floating point conversion implementation.,1,[],https://github.com/WebAssembly/wabt/pull/795,https://github.com/lizhengxing,4,https://github.com/WebAssembly/wabt/pull/795#issuecomment-371045946,"Including:
f32x4.convert_s/i32x4
f32x4.convert_u/i32x4
f64x2.convert_s/i64x2
f64x2.convert_u/i64x2","@binji
updated the PR, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,796,2018-03-07T00:32:30Z,2018-03-07T03:15:04Z,2018-03-07T03:15:10Z,MERGED,True,23,12,10,https://github.com/sbc100,objdump: Use the export name for a function if one exists,2,[],https://github.com/WebAssembly/wabt/pull/796,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/796,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,796,2018-03-07T00:32:30Z,2018-03-07T03:15:04Z,2018-03-07T03:15:10Z,MERGED,True,23,12,10,https://github.com/sbc100,objdump: Use the export name for a function if one exists,2,[],https://github.com/WebAssembly/wabt/pull/796,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/796#issuecomment-370979611,,"Not sure what to do about the display of non-ascii, but it seems like that problem already exists.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,796,2018-03-07T00:32:30Z,2018-03-07T03:15:04Z,2018-03-07T03:15:10Z,MERGED,True,23,12,10,https://github.com/sbc100,objdump: Use the export name for a function if one exists,2,[],https://github.com/WebAssembly/wabt/pull/796,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/796#issuecomment-370998955,,"Nice, lgtm!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,797,2018-03-07T17:14:57Z,2018-03-07T19:23:28Z,2018-03-07T19:23:28Z,MERGED,True,2995,2664,7,https://github.com/lizhengxing,SIMD Floating point to integer with saturation implementation.,1,[],https://github.com/WebAssembly/wabt/pull/797,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/797,"Including:
i32x4.trunc_s/f32x4:sat
i32x4.trunc_u/f32x4:sat
i64x2.trunc_s/f64x2:sat
i64x2.trunc_u/f64x2:sat","Including:
i32x4.trunc_s/f32x4:sat
i32x4.trunc_u/f32x4:sat
i64x2.trunc_s/f64x2:sat
i64x2.trunc_u/f64x2:sat",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,797,2018-03-07T17:14:57Z,2018-03-07T19:23:28Z,2018-03-07T19:23:28Z,MERGED,True,2995,2664,7,https://github.com/lizhengxing,SIMD Floating point to integer with saturation implementation.,1,[],https://github.com/WebAssembly/wabt/pull/797,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/797#issuecomment-371212039,"Including:
i32x4.trunc_s/f32x4:sat
i32x4.trunc_u/f32x4:sat
i64x2.trunc_s/f64x2:sat
i64x2.trunc_u/f64x2:sat","@binji
SIMD float trunc with saturation instructions, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,800,2018-03-09T00:49:24Z,2018-03-09T03:02:39Z,2018-03-09T03:02:41Z,MERGED,True,15,10,2,https://github.com/sbc100,Improve output for object of symbol table,3,[],https://github.com/WebAssembly/wabt/pull/800,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/800,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,801,2018-03-09T06:10:21Z,2018-03-09T08:36:41Z,2018-03-09T08:36:41Z,MERGED,True,3289,3187,7,https://github.com/lizhengxing,SIMD v128.load/v128.store implementation.,1,[],https://github.com/WebAssembly/wabt/pull/801,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/801,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,801,2018-03-09T06:10:21Z,2018-03-09T08:36:41Z,2018-03-09T08:36:41Z,MERGED,True,3289,3187,7,https://github.com/lizhengxing,SIMD v128.load/v128.store implementation.,1,[],https://github.com/WebAssembly/wabt/pull/801,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/801#issuecomment-371723100,,"@binji
SIMD v128 load/store implementation, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,802,2018-03-09T17:31:22Z,2018-03-13T18:18:35Z,2018-03-13T18:18:35Z,MERGED,True,2622,2364,27,https://github.com/lizhengxing,Simd i8x16.extract_lane_s instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/802,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/802,"Including:

All necessary code for SIMD lanes accessing.
i8x16.extract_lane_s implementation.","Including:

All necessary code for SIMD lanes accessing.
i8x16.extract_lane_s implementation.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,802,2018-03-09T17:31:22Z,2018-03-13T18:18:35Z,2018-03-13T18:18:35Z,MERGED,True,2622,2364,27,https://github.com/lizhengxing,Simd i8x16.extract_lane_s instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/802,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/802#issuecomment-371884474,"Including:

All necessary code for SIMD lanes accessing.
i8x16.extract_lane_s implementation.","@binji
SIMD i8x16.extract_lane_s implementation, PTAL!
SIMD Lane accessing instructions implementation is a little bit complex. It might take you much time to review it. Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,802,2018-03-09T17:31:22Z,2018-03-13T18:18:35Z,2018-03-13T18:18:35Z,MERGED,True,2622,2364,27,https://github.com/lizhengxing,Simd i8x16.extract_lane_s instruction implementation.,1,[],https://github.com/WebAssembly/wabt/pull/802,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/802#issuecomment-372416735,"Including:

All necessary code for SIMD lanes accessing.
i8x16.extract_lane_s implementation.","@binji
Updated the PR according to your suggestions, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,803,2018-03-10T01:41:19Z,2018-05-09T22:10:11Z,2018-05-09T22:10:13Z,MERGED,True,336,4,4,https://github.com/binji,Add some documentation for wasm2c,1,[],https://github.com/WebAssembly/wabt/pull/803,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/803,"Also remove WASM_RT_DEFINE_EXTERNAL, as it doesn't seem to be used.","Also remove WASM_RT_DEFINE_EXTERNAL, as it doesn't seem to be used.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,803,2018-03-10T01:41:19Z,2018-05-09T22:10:11Z,2018-05-09T22:10:13Z,MERGED,True,336,4,4,https://github.com/binji,Add some documentation for wasm2c,1,[],https://github.com/WebAssembly/wabt/pull/803,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/803#issuecomment-371991902,"Also remove WASM_RT_DEFINE_EXTERNAL, as it doesn't seem to be used.","WIP currently, but I thought I'd add a PR early so folks could take a look.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,803,2018-03-10T01:41:19Z,2018-05-09T22:10:11Z,2018-05-09T22:10:13Z,MERGED,True,336,4,4,https://github.com/binji,Add some documentation for wasm2c,1,[],https://github.com/WebAssembly/wabt/pull/803,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/803#issuecomment-373870254,"Also remove WASM_RT_DEFINE_EXTERNAL, as it doesn't seem to be used.","Still working on this, but found it was nicer to factor out the wasm_rt* stuff first: #813",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,803,2018-03-10T01:41:19Z,2018-05-09T22:10:11Z,2018-05-09T22:10:13Z,MERGED,True,336,4,4,https://github.com/binji,Add some documentation for wasm2c,1,[],https://github.com/WebAssembly/wabt/pull/803,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/803#issuecomment-387890811,"Also remove WASM_RT_DEFINE_EXTERNAL, as it doesn't seem to be used.",Coming back to this now. Going to land what I have and add more in another PR.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,806,2018-03-13T22:29:12Z,2018-03-15T18:22:42Z,2018-03-15T18:22:42Z,MERGED,True,3349,2903,10,https://github.com/lizhengxing,Simd remaining Extract Lane instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/806,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/806,"Including:
i8x16.extract_lane_u
i16x8.extract_lane_s
i16x8.extract_lane_u
i32x4.extract_lane
i64x2.extract_lane
f32x4.extract_lane
f64x2.extract_lane","Including:
i8x16.extract_lane_u
i16x8.extract_lane_s
i16x8.extract_lane_u
i32x4.extract_lane
i64x2.extract_lane
f32x4.extract_lane
f64x2.extract_lane",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,806,2018-03-13T22:29:12Z,2018-03-15T18:22:42Z,2018-03-15T18:22:42Z,MERGED,True,3349,2903,10,https://github.com/lizhengxing,Simd remaining Extract Lane instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/806,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/806#issuecomment-372841048,"Including:
i8x16.extract_lane_u
i16x8.extract_lane_s
i16x8.extract_lane_u
i32x4.extract_lane
i64x2.extract_lane
f32x4.extract_lane
f64x2.extract_lane","@binji
SIMD remaining extract lane instructions, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,808,2018-03-15T18:14:50Z,2018-03-15T21:20:44Z,2018-03-15T21:20:47Z,MERGED,True,70,0,8,https://github.com/binji,Print locals in objdump disassembly,2,[],https://github.com/WebAssembly/wabt/pull/808,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/808,Fixes issue #807.,Fixes issue #807.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,808,2018-03-15T18:14:50Z,2018-03-15T21:20:44Z,2018-03-15T21:20:47Z,MERGED,True,70,0,8,https://github.com/binji,Print locals in objdump disassembly,2,[],https://github.com/WebAssembly/wabt/pull/808,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/808#issuecomment-373474045,Fixes issue #807.,"Hm, I guess it would be nicer to show the actual bytes that generate that info too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,808,2018-03-15T18:14:50Z,2018-03-15T21:20:44Z,2018-03-15T21:20:47Z,MERGED,True,70,0,8,https://github.com/binji,Print locals in objdump disassembly,2,[],https://github.com/WebAssembly/wabt/pull/808,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/808#issuecomment-373489808,Fixes issue #807.,"Discussed offline, decided it would be better to show bytes, and disassembly only. PTAL!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,808,2018-03-15T18:14:50Z,2018-03-15T21:20:44Z,2018-03-15T21:20:47Z,MERGED,True,70,0,8,https://github.com/binji,Print locals in objdump disassembly,2,[],https://github.com/WebAssembly/wabt/pull/808,https://github.com/eholk,4,https://github.com/WebAssembly/wabt/pull/808#issuecomment-373491376,Fixes issue #807.,Thanks for getting this done so quickly! I applied the patch locally and it helped me debug my issue.,True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,809,2018-03-15T22:25:14Z,2018-03-15T23:31:08Z,2018-03-15T23:31:08Z,MERGED,True,3795,3245,10,https://github.com/lizhengxing,Simd Replace Lane instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/809,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/809,"Including:
i8x16.replace_lane
i16x8.replace_lane
i32x4.replace_lane
i64x2.replace_lane
f32x4.replace_lane
f64x2.replace_lane","Including:
i8x16.replace_lane
i16x8.replace_lane
i32x4.replace_lane
i64x2.replace_lane
f32x4.replace_lane
f64x2.replace_lane",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,809,2018-03-15T22:25:14Z,2018-03-15T23:31:08Z,2018-03-15T23:31:08Z,MERGED,True,3795,3245,10,https://github.com/lizhengxing,Simd Replace Lane instructions implementation.,1,[],https://github.com/WebAssembly/wabt/pull/809,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/809#issuecomment-373542472,"Including:
i8x16.replace_lane
i16x8.replace_lane
i32x4.replace_lane
i64x2.replace_lane
f32x4.replace_lane
f64x2.replace_lane","@binji
SImd lane replace instructions, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,810,2018-03-15T23:49:00Z,2018-03-16T18:37:38Z,2018-03-16T18:37:40Z,MERGED,True,117,76,4,https://github.com/binji,Small cleanup to simd extract/replace lane,4,[],https://github.com/WebAssembly/wabt/pull/810,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/810,Also add a typecheck test.,Also add a typecheck test.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,810,2018-03-15T23:49:00Z,2018-03-16T18:37:38Z,2018-03-16T18:37:40Z,MERGED,True,117,76,4,https://github.com/binji,Small cleanup to simd extract/replace lane,4,[],https://github.com/WebAssembly/wabt/pull/810,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/810#issuecomment-373558766,Also add a typecheck test.,"@lizhengxing hope you don't mind, thought I'd do a little cleanup. I figured it would be easier than adding lots of comments to the PRs. If you prefer the other way, just ask!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,810,2018-03-15T23:49:00Z,2018-03-16T18:37:38Z,2018-03-16T18:37:40Z,MERGED,True,117,76,4,https://github.com/binji,Small cleanup to simd extract/replace lane,4,[],https://github.com/WebAssembly/wabt/pull/810,https://github.com/lizhengxing,3,https://github.com/WebAssembly/wabt/pull/810#issuecomment-373763930,Also add a typecheck test.,"@binji
Awesome! I haven't any comments for the PR.
Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,811,2018-03-16T01:09:08Z,2018-03-16T03:46:47Z,2018-03-16T03:46:47Z,MERGED,True,4519,4289,27,https://github.com/lizhengxing,SIMD v8x16.shuffle implementation.,1,[],https://github.com/WebAssembly/wabt/pull/811,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/811,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,811,2018-03-16T01:09:08Z,2018-03-16T03:46:47Z,2018-03-16T03:46:47Z,MERGED,True,4519,4289,27,https://github.com/lizhengxing,SIMD v8x16.shuffle implementation.,1,[],https://github.com/WebAssembly/wabt/pull/811,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/811#issuecomment-373571585,,"@binji
SIMD v8x16.shuffle instruction, PTAL!
Thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,812,2018-03-16T17:23:13Z,2018-03-16T19:31:10Z,2018-03-16T19:31:12Z,MERGED,True,12,3,2,https://github.com/sbc100,objdump: Report elem count for each elem segment,1,[],https://github.com/WebAssembly/wabt/pull/812,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/812,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,813,2018-03-16T22:17:20Z,2018-03-20T19:12:12Z,2018-03-20T19:12:15Z,MERGED,True,371,215,7,https://github.com/binji,"Separate out wasm-rt.h and wasm-rt-impl.{c,h}",1,[],https://github.com/WebAssembly/wabt/pull/813,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/813,This makes it easier to use outside of running wasm2c spec tests.,This makes it easier to use outside of running wasm2c spec tests.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,813,2018-03-16T22:17:20Z,2018-03-20T19:12:12Z,2018-03-20T19:12:15Z,MERGED,True,371,215,7,https://github.com/binji,"Separate out wasm-rt.h and wasm-rt-impl.{c,h}",1,[],https://github.com/WebAssembly/wabt/pull/813,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/813#issuecomment-374721525,This makes it easier to use outside of running wasm2c spec tests.,"This is mostly just reorganizing code, so I'm gonna land for now. Feel free to add comments if you notice any issues.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,814,2018-03-16T22:50:25Z,2018-03-16T23:49:32Z,2018-03-16T23:49:35Z,MERGED,True,436,396,51,https://github.com/binji,Run clang-format over all the files,1,[],https://github.com/WebAssembly/wabt/pull/814,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/814,"I also fixed some for/if to use braces if I noticed it. This is a
non-functional change.","I also fixed some for/if to use braces if I noticed it. This is a
non-functional change.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,815,2018-03-17T00:14:58Z,2018-03-17T01:02:27Z,2018-03-17T01:02:29Z,MERGED,True,35,5,2,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/815,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/815,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,816,2018-03-21T21:47:50Z,2018-03-21T23:25:07Z,2018-03-21T23:25:10Z,MERGED,True,10345,4559,3,https://github.com/binji,"Add SIMD tests to {logging,tracing}-all-opcodes",2,[],https://github.com/WebAssembly/wabt/pull/816,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/816,Also fix tracing for *.splat opcodes.,Also fix tracing for *.splat opcodes.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,817,2018-03-23T00:00:22Z,2018-03-23T00:32:27Z,2018-03-23T00:32:30Z,MERGED,True,1,1,1,https://github.com/Cellule,Windows warn unused annotation build break,1,[],https://github.com/WebAssembly/wabt/pull/817,https://github.com/Cellule,1,https://github.com/WebAssembly/wabt/pull/817,"Remove Check_Return annotation on Windows because that annotation must be a prefix to the function not a suffix which was breaking the code analysis on binary-reader.cc.
Couldn't find a way to reconcile clang/gcc/msvc to all use a prefix or suffix for that annotation, furthermore it is not used a lot in the project anyway.","Remove Check_Return annotation on Windows because that annotation must be a prefix to the function not a suffix which was breaking the code analysis on binary-reader.cc.
Couldn't find a way to reconcile clang/gcc/msvc to all use a prefix or suffix for that annotation, furthermore it is not used a lot in the project anyway.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,820,2018-03-28T06:48:08Z,2018-03-28T20:43:12Z,2018-03-28T20:43:16Z,MERGED,True,143,60,10,https://github.com/binji,Store local types as Type+Count pairs,1,[],https://github.com/WebAssembly/wabt/pull/820,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/820,"Since the binary format stores locals as Type+Count pairs, it is easy to
generate a function with a huge number of locals. The text format has
no way to compress this, so the resulting file will be huge.
However, if the binary file has an error, it would be useful to be able
to catch it without allocating a huge number of locals.
To do so, we store all locals as Type+Count pairs in the IR as well, and
provide accessor functions for getting the number of local types, the
type of a particular local index, etc.
This fixes issue #819.","Since the binary format stores locals as Type+Count pairs, it is easy to
generate a function with a huge number of locals. The text format has
no way to compress this, so the resulting file will be huge.
However, if the binary file has an error, it would be useful to be able
to catch it without allocating a huge number of locals.
To do so, we store all locals as Type+Count pairs in the IR as well, and
provide accessor functions for getting the number of local types, the
type of a particular local index, etc.
This fixes issue #819.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,821,2018-03-28T21:43:16Z,2018-03-28T23:04:25Z,2018-03-28T23:04:28Z,MERGED,True,40,22,2,https://github.com/binji,Use `ReadCount` function in BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/821,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/821,"See #760 for more info.
We assume that a count precedes a list of items that are at least one
byte that are all contained in the same section. As a result, we can do
an up-front check to prevent over-allocation. This is the same technique
that the spec interpreter uses.","See #760 for more info.
We assume that a count precedes a list of items that are at least one
byte that are all contained in the same section. As a result, we can do
an up-front check to prevent over-allocation. This is the same technique
that the spec interpreter uses.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,824,2018-04-05T02:58:30Z,2018-04-05T04:43:21Z,2018-04-05T04:43:24Z,MERGED,True,19,3,3,https://github.com/binji,Don't allow the `v128` type without the simd flag,1,[],https://github.com/WebAssembly/wabt/pull/824,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/824,See issue #823.,See issue #823.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,825,2018-04-06T00:22:01Z,2018-04-06T17:40:13Z,2018-04-06T17:40:16Z,MERGED,True,18,0,2,https://github.com/binji,Error on running wasm2c with `--enable-*` flags,1,[],https://github.com/WebAssembly/wabt/pull/825,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/825,None of the feature flags are currently supported. Fixes issue #823.,None of the feature flags are currently supported. Fixes issue #823.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,827,2018-04-10T06:22:19Z,2018-04-10T17:16:08Z,2018-04-10T17:16:12Z,MERGED,True,38,12,6,https://github.com/binji,Don't allow a local decl count of 0,1,[],https://github.com/WebAssembly/wabt/pull/827,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/827,"Also clean up LocalTypes a bit, so we can ensure that decls_ never
has a count of 0.
Fixes issue #826. Thanks for finding @opticaliqlusion!","Also clean up LocalTypes a bit, so we can ensure that decls_ never
has a count of 0.
Fixes issue #826. Thanks for finding @opticaliqlusion!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,829,2018-04-20T23:34:03Z,2018-04-21T01:38:11Z,2018-04-21T01:38:11Z,MERGED,True,4,0,1,https://github.com/dcodeIO,Enable memory growth when compiling libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/829,https://github.com/dcodeIO,1,https://github.com/WebAssembly/wabt/pull/829,"This should fix memory issues as described in wasdk/WebAssemblyStudio#202 (comment).
Options are taken from Binaryen's build-js.sh script. One downside in enabling memory growth is that the code will emit as ""almost asm""; instead of ""use asm"";, but it seems that can't be avoided if the goal is to support any size of WASM binaries.","This should fix memory issues as described in wasdk/WebAssemblyStudio#202 (comment).
Options are taken from Binaryen's build-js.sh script. One downside in enabling memory growth is that the code will emit as ""almost asm""; instead of ""use asm"";, but it seems that can't be avoided if the goal is to support any size of WASM binaries.",True,{'THUMBS_UP': ['https://github.com/MaxGraey']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,829,2018-04-20T23:34:03Z,2018-04-21T01:38:11Z,2018-04-21T01:38:11Z,MERGED,True,4,0,1,https://github.com/dcodeIO,Enable memory growth when compiling libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/829,https://github.com/kripken,2,https://github.com/WebAssembly/wabt/pull/829#issuecomment-383248927,"This should fix memory issues as described in wasdk/WebAssemblyStudio#202 (comment).
Options are taken from Binaryen's build-js.sh script. One downside in enabling memory growth is that the code will emit as ""almost asm""; instead of ""use asm"";, but it seems that can't be avoided if the goal is to support any size of WASM binaries.","Looks like good options, but note that -s ELIMINATE_DUPLICATE_FUNCTIONS=1 will make build times longer (just in asm.js, not in wasm), and --llvm-lto 1 should be tested carefully (LLVM LTO is not on by default anywhere AFAIK and had bugs in the past).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,829,2018-04-20T23:34:03Z,2018-04-21T01:38:11Z,2018-04-21T01:38:11Z,MERGED,True,4,0,1,https://github.com/dcodeIO,Enable memory growth when compiling libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/829,https://github.com/dcodeIO,3,https://github.com/WebAssembly/wabt/pull/829#issuecomment-383249207,"This should fix memory issues as described in wasdk/WebAssemblyStudio#202 (comment).
Options are taken from Binaryen's build-js.sh script. One downside in enabling memory growth is that the code will emit as ""almost asm""; instead of ""use asm"";, but it seems that can't be avoided if the goal is to support any size of WASM binaries.","--llvm-lto 1 should be tested carefully (LLVM LTO is not on by default anywhere AFAIK and had bugs in the past)

Thanks for the insights! Fwiw, I've tested the generated binary using the new options against this simple test suite and it didn't trigger any errors.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,830,2018-04-23T22:09:29Z,2018-05-03T20:28:34Z,2018-05-08T02:35:29Z,MERGED,True,39,52,10,https://github.com/sbc100,Refer to target section by index in relocation section,2,[],https://github.com/WebAssembly/wabt/pull/830,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/830,See WebAssembly/tool-conventions#52,See WebAssembly/tool-conventions#52,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,830,2018-04-23T22:09:29Z,2018-05-03T20:28:34Z,2018-05-08T02:35:29Z,MERGED,True,39,52,10,https://github.com/sbc100,Refer to target section by index in relocation section,2,[],https://github.com/WebAssembly/wabt/pull/830,https://github.com/SanderSpies,2,https://github.com/WebAssembly/wabt/pull/830#issuecomment-386253230,See WebAssembly/tool-conventions#52,"Not sure if it should be in this PR, but to get it to work I needed to add the linking version.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,830,2018-04-23T22:09:29Z,2018-05-03T20:28:34Z,2018-05-08T02:35:29Z,MERGED,True,39,52,10,https://github.com/sbc100,Refer to target section by index in relocation section,2,[],https://github.com/WebAssembly/wabt/pull/830,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/830#issuecomment-386425731,See WebAssembly/tool-conventions#52,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,831,2018-04-30T19:05:40Z,2018-05-01T17:55:46Z,2018-05-09T18:38:18Z,MERGED,True,74,5,12,https://github.com/binji,Read and write module names in the names section,1,[],https://github.com/WebAssembly/wabt/pull/831,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/831,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,831,2018-04-30T19:05:40Z,2018-05-01T17:55:46Z,2018-05-09T18:38:18Z,MERGED,True,74,5,12,https://github.com/binji,Read and write module names in the names section,1,[],https://github.com/WebAssembly/wabt/pull/831,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/831#issuecomment-385560721,,Yep: https://webassembly.github.io/spec/core/appendix/custom.html#binary-modulenamesec,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,831,2018-04-30T19:05:40Z,2018-05-01T17:55:46Z,2018-05-09T18:38:18Z,MERGED,True,74,5,12,https://github.com/binji,Read and write module names in the names section,1,[],https://github.com/WebAssembly/wabt/pull/831,https://github.com/lukewagner,3,https://github.com/WebAssembly/wabt/pull/831#issuecomment-387491592,,"Thanks, works great!  At first I thought it didn't work because the first thing I tried was wasm-objdump -x.  But wasm2wat shows the module name great, so I think maybe just wasm-objdump could print the module name?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,831,2018-04-30T19:05:40Z,2018-05-01T17:55:46Z,2018-05-09T18:38:18Z,MERGED,True,74,5,12,https://github.com/binji,Read and write module names in the names section,1,[],https://github.com/WebAssembly/wabt/pull/831,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/831#issuecomment-387835385,,"But wasm2wat shows the module name great, so I think maybe just wasm-objdump could print the module name?

Added in #833.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,832,2018-05-03T19:38:55Z,2018-05-07T19:08:13Z,2018-05-07T19:09:36Z,MERGED,True,49,1,4,https://github.com/lizhengxing,Fix one bug for converting v128.shuffle from wasm format to wat format.,1,[],https://github.com/WebAssembly/wabt/pull/832,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/832,"When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.","When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,832,2018-05-03T19:38:55Z,2018-05-07T19:08:13Z,2018-05-07T19:09:36Z,MERGED,True,49,1,4,https://github.com/lizhengxing,Fix one bug for converting v128.shuffle from wasm format to wat format.,1,[],https://github.com/WebAssembly/wabt/pull/832,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/832#issuecomment-386412404,"When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.","@binji
One bug fix, PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,832,2018-05-03T19:38:55Z,2018-05-07T19:08:13Z,2018-05-07T19:09:36Z,MERGED,True,49,1,4,https://github.com/lizhengxing,Fix one bug for converting v128.shuffle from wasm format to wat format.,1,[],https://github.com/WebAssembly/wabt/pull/832,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/832#issuecomment-386428464,"When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.","Hm, interesting. I wonder why this wasn't caught with the roundtrip tests. I suppose those only run with parse tests. Can you add a parse test for this? Perhaps add a new file in test/parse/expr/simd.txt. Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,832,2018-05-03T19:38:55Z,2018-05-07T19:08:13Z,2018-05-07T19:09:36Z,MERGED,True,49,1,4,https://github.com/lizhengxing,Fix one bug for converting v128.shuffle from wasm format to wat format.,1,[],https://github.com/WebAssembly/wabt/pull/832,https://github.com/lizhengxing,4,https://github.com/WebAssembly/wabt/pull/832#issuecomment-386445387,"When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.","@binji
Sure, But maybe a little bit late as I'm busying in other issue. Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,832,2018-05-03T19:38:55Z,2018-05-07T19:08:13Z,2018-05-07T19:09:36Z,MERGED,True,49,1,4,https://github.com/lizhengxing,Fix one bug for converting v128.shuffle from wasm format to wat format.,1,[],https://github.com/WebAssembly/wabt/pull/832,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/832#issuecomment-386650236,"When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.","No problem, there's no rush!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,832,2018-05-03T19:38:55Z,2018-05-07T19:08:13Z,2018-05-07T19:09:36Z,MERGED,True,49,1,4,https://github.com/lizhengxing,Fix one bug for converting v128.shuffle from wasm format to wat format.,1,[],https://github.com/WebAssembly/wabt/pull/832,https://github.com/lizhengxing,6,https://github.com/WebAssembly/wabt/pull/832#issuecomment-387148945,"When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.","@binji
Updated the PR, PTAL, thanks!
@arunetm FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,832,2018-05-03T19:38:55Z,2018-05-07T19:08:13Z,2018-05-07T19:09:36Z,MERGED,True,49,1,4,https://github.com/lizhengxing,Fix one bug for converting v128.shuffle from wasm format to wat format.,1,[],https://github.com/WebAssembly/wabt/pull/832,https://github.com/lizhengxing,7,https://github.com/WebAssembly/wabt/pull/832#issuecomment-387158811,"When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.","@binji
I tested this PR on local machine and passed all tests, But it still met a check error on wabt server.
Woud you please give some hints of this check error as I'm still busying in other work?
Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,832,2018-05-03T19:38:55Z,2018-05-07T19:08:13Z,2018-05-07T19:09:36Z,MERGED,True,49,1,4,https://github.com/lizhengxing,Fix one bug for converting v128.shuffle from wasm format to wat format.,1,[],https://github.com/WebAssembly/wabt/pull/832,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/832#issuecomment-387170163,"When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.","I tested this PR on local machine and passed all tests, But it still met a check error on wabt server.
Woud you please give some hints of this check error as I'm still busying in other work?

Sorry, there was an emscripten regression that caused this. I've fixed the bug upstream but the fix hasn't been rolled out yet.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,832,2018-05-03T19:38:55Z,2018-05-07T19:08:13Z,2018-05-07T19:09:36Z,MERGED,True,49,1,4,https://github.com/lizhengxing,Fix one bug for converting v128.shuffle from wasm format to wat format.,1,[],https://github.com/WebAssembly/wabt/pull/832,https://github.com/lizhengxing,9,https://github.com/WebAssembly/wabt/pull/832#issuecomment-387170897,"When converting v128.shuffle from wasm format to wat format, the '$' char
must be removed as the const value in v128.shuffle instruction expects
a valid simd v128 const format,
i.e. 0xXXX 0xXXX 0xXXX 0xXXX or Int32 Int32 Int32 Int32
otherwise it will encounter errors when converting
v128.shuffle from wat format back to wasm format again.","@binji
Got it, thank you very much!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,833,2018-05-07T19:16:15Z,2018-05-07T20:56:14Z,2018-05-07T20:56:16Z,MERGED,True,131,25,11,https://github.com/binji,Add flag to ignore errors in custom sections,2,[],https://github.com/WebAssembly/wabt/pull/833,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/833,"If a wasm engine fails to parse a custom section, it must not be an
error. In wabt we often won't want to continue if a custom section can't
be parsed, but it still may be useful to be able to continue.
This change adds a new flag --ignore-custom-section-errors to
wasm2wat and wasm-validate, which will partially parse a custom
section with errors. This could lead to some strange behavior (partially
completed data structures), but generally should be safe to do.
See issue #378 and the discussion on pull #830 for more info.","If a wasm engine fails to parse a custom section, it must not be an
error. In wabt we often won't want to continue if a custom section can't
be parsed, but it still may be useful to be able to continue.
This change adds a new flag --ignore-custom-section-errors to
wasm2wat and wasm-validate, which will partially parse a custom
section with errors. This could lead to some strange behavior (partially
completed data structures), but generally should be safe to do.
See issue #378 and the discussion on pull #830 for more info.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,834,2018-05-08T18:29:12Z,2018-05-08T23:17:17Z,2018-05-08T23:17:19Z,MERGED,True,64,13,4,https://github.com/binji,Display module name in wasm-objdump,4,[],https://github.com/WebAssembly/wabt/pull/834,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/834,See comment here: #831 (comment),See comment here: #831 (comment),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,834,2018-05-08T18:29:12Z,2018-05-08T23:17:17Z,2018-05-08T23:17:19Z,MERGED,True,64,13,4,https://github.com/binji,Display module name in wasm-objdump,4,[],https://github.com/WebAssembly/wabt/pull/834,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/834#issuecomment-387498456,See comment here: #831 (comment),"Maybe we should display the module name somewhere else more prominent than the name section, but I didn't really see an obvious place to do that.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,834,2018-05-08T18:29:12Z,2018-05-08T23:17:17Z,2018-05-08T23:17:19Z,MERGED,True,64,13,4,https://github.com/binji,Display module name in wasm-objdump,4,[],https://github.com/WebAssembly/wabt/pull/834,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/834#issuecomment-387536935,See comment here: #831 (comment),"Yes, how about one the first line which currently:
module-name.wasm:	file format wasm 0x1
Could be:
module-name.wasm[my_module]:	file format wasm 0x1",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,835,2018-05-09T23:07:37Z,2018-05-22T17:13:34Z,2018-05-22T17:13:37Z,MERGED,True,436,1,7,https://github.com/binji,More work on the wasm2c documentation,2,[],https://github.com/WebAssembly/wabt/pull/835,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/835,"Move wasm2c.md -> wasm2c/README.md
Described how to use it, and put it near the top of the doc
Added the sources and generated files","Move wasm2c.md -> wasm2c/README.md
Described how to use it, and put it near the top of the doc
Added the sources and generated files",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,837,2018-05-11T19:09:43Z,2018-05-14T19:09:41Z,2018-05-15T09:34:50Z,MERGED,True,35,2,3,https://github.com/binji,Fix bug with --ignore-custom-section-errors flag,1,[],https://github.com/WebAssembly/wabt/pull/837,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/837,"If the stop_on_first_error flag was set, it would still stop
reading the wasm file, even if --ignore-custom-section-errors flag was
set.
Fixes issue #836.","If the stop_on_first_error flag was set, it would still stop
reading the wasm file, even if --ignore-custom-section-errors flag was
set.
Fixes issue #836.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,839,2018-05-14T21:06:33Z,2018-05-14T22:30:38Z,2018-05-14T22:30:43Z,MERGED,True,14,10,2,https://github.com/sbc100,wasm-objdump: Clearly distinguish undefined symbols in symbol table,2,[],https://github.com/WebAssembly/wabt/pull/839,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/839,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,839,2018-05-14T21:06:33Z,2018-05-14T22:30:38Z,2018-05-14T22:30:43Z,MERGED,True,14,10,2,https://github.com/sbc100,wasm-objdump: Clearly distinguish undefined symbols in symbol table,2,[],https://github.com/WebAssembly/wabt/pull/839,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/839#issuecomment-388977994,,Can you describe this a bit more in the CL description?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,840,2018-05-14T21:14:28Z,2018-05-17T17:11:31Z,2018-05-17T17:11:34Z,MERGED,True,0,41,9,https://github.com/sbc100,Remove old sub-sections types from linking section,1,[],https://github.com/WebAssembly/wabt/pull/840,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/840,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,841,2018-05-14T22:10:22Z,2018-05-14T22:16:21Z,2018-05-16T16:46:30Z,MERGED,True,11,1,2,https://github.com/sbc100,Fix broken version check on metadata section,1,[],https://github.com/WebAssembly/wabt/pull/841,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/841,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,841,2018-05-14T22:10:22Z,2018-05-14T22:16:21Z,2018-05-16T16:46:30Z,MERGED,True,11,1,2,https://github.com/sbc100,Fix broken version check on metadata section,1,[],https://github.com/WebAssembly/wabt/pull/841,https://github.com/shepmaster,2,https://github.com/WebAssembly/wabt/pull/841#issuecomment-389376482,,"Howdy! This exposes an error when using WASM generated by Rust:
error: invalid linking metadata version: 3

Is there a flag I should be using for this? We are using
wasm2wat \
    --fold-exprs \
    --generate-names \
    --inline-exports \",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,841,2018-05-14T22:10:22Z,2018-05-14T22:16:21Z,2018-05-16T16:46:30Z,MERGED,True,11,1,2,https://github.com/sbc100,Fix broken version check on metadata section,1,[],https://github.com/WebAssembly/wabt/pull/841,https://github.com/shepmaster,3,https://github.com/WebAssembly/wabt/pull/841#issuecomment-389376737,,Perhaps related to the discussion in #838,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,841,2018-05-14T22:10:22Z,2018-05-14T22:16:21Z,2018-05-16T16:46:30Z,MERGED,True,11,1,2,https://github.com/sbc100,Fix broken version check on metadata section,1,[],https://github.com/WebAssembly/wabt/pull/841,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/841#issuecomment-389379250,,"Yes, you may be able to use --ignore-custom-section-errors.  The problem should fix itself once Rust pulls  in a new llvm version.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,841,2018-05-14T22:10:22Z,2018-05-14T22:16:21Z,2018-05-16T16:46:30Z,MERGED,True,11,1,2,https://github.com/sbc100,Fix broken version check on metadata section,1,[],https://github.com/WebAssembly/wabt/pull/841,https://github.com/shepmaster,5,https://github.com/WebAssembly/wabt/pull/841#issuecomment-389540823,,"Hmm, the flag doesn't seem to take effect; perhaps I'm doing something wrong?
$ wasm2wat --help | grep ignore-custom
      --ignore-custom-section-errors          Ignore errors in custom sections

$ wasm2wat --fold-exprs --generate-names --inline-exports --ignore-custom-section-errors -o /tmp/out.wat target/wasm32-unknown-unknown/debug/playground.wasm.gc
002f892: error: invalid linking metadata version: 3",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,841,2018-05-14T22:10:22Z,2018-05-14T22:16:21Z,2018-05-16T16:46:30Z,MERGED,True,11,1,2,https://github.com/sbc100,Fix broken version check on metadata section,1,[],https://github.com/WebAssembly/wabt/pull/841,https://github.com/shepmaster,6,https://github.com/WebAssembly/wabt/pull/841#issuecomment-389587820,,Moved discussion to #842.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,843,2018-05-16T23:47:17Z,2018-05-17T02:21:20Z,2018-05-17T02:21:23Z,MERGED,True,103,53,19,https://github.com/binji,"Print ""warning"" for ignored custom section errors",1,[],https://github.com/WebAssembly/wabt/pull/843,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/843,"The previous message said ""error"", which makes it look like the output
is not created, so change the message to ""warning"" instead.
The error handling code is pretty ugly and can use a refactor, but that
would be a much larger change.","The previous message said ""error"", which makes it look like the output
is not created, so change the message to ""warning"" instead.
The error handling code is pretty ugly and can use a refactor, but that
would be a much larger change.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,845,2018-05-20T23:09:03Z,2018-05-21T23:28:28Z,2018-05-21T23:28:31Z,MERGED,True,142,206,3,https://github.com/binji,Fix token enum/string mismatch; move to token.def,1,[],https://github.com/WebAssembly/wabt/pull/845,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/845,This fixes issue #844.,This fixes issue #844.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,846,2018-05-22T23:13:04Z,2018-05-29T16:46:09Z,2018-05-29T16:46:12Z,MERGED,True,133,15,10,https://github.com/sbc100,Add support for new relocation types used in DWARF sections,2,[],https://github.com/WebAssembly/wabt/pull/846,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/846,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,848,2018-05-25T21:56:27Z,2018-05-29T15:50:48Z,2018-05-29T15:50:51Z,MERGED,True,1,1,1,https://github.com/sbc100,Revert appendix to original form,1,[],https://github.com/WebAssembly/wabt/pull/848,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/848,"This is designed to be boiler plate and the preceding paragraph
doesn't make sense without the parts in square brackets.","This is designed to be boiler plate and the preceding paragraph
doesn't make sense without the parts in square brackets.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,849,2018-05-26T07:54:50Z,2018-05-27T07:21:39Z,2018-05-27T07:21:42Z,MERGED,True,9084,9161,36,https://github.com/binji,"Update spec tests; rename {grow,current}_memory",2,[],https://github.com/WebAssembly/wabt/pull/849,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/849,"grow_memory -> memory.grow
current_memory -> memory.size
This could have been a smaller change, but I took the opportunity to
rename the Token types, Expr types, and callback functions too. Many of
these are sorted alphabetically, so I resorted based on their new names.","grow_memory -> memory.grow
current_memory -> memory.size
This could have been a smaller change, but I took the opportunity to
rename the Token types, Expr types, and callback functions too. Many of
these are sorted alphabetically, so I resorted based on their new names.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,851,2018-06-02T00:03:28Z,2018-06-04T17:09:38Z,2018-06-04T17:09:44Z,MERGED,True,114,94,2,https://github.com/sbc100,[objdump] Include elem segment offset when printing table elements,2,[],https://github.com/WebAssembly/wabt/pull/851,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/851,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,855,2018-06-04T20:53:00Z,2018-06-04T22:39:40Z,2018-06-04T22:39:42Z,MERGED,True,41,51,7,https://github.com/binji,Fix emscripten build,2,[],https://github.com/WebAssembly/wabt/pull/855,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/855,"It's not correct to use --pre-js and --post-js to wrap the module in
a function instance; instead we're supposed to use -s MODULARIZE=1.
This still keeps the build as (almost) asm.js, as switching to wasm is a
bit more work (we need to preload the wasm binary module).
This fixes issue #853.","It's not correct to use --pre-js and --post-js to wrap the module in
a function instance; instead we're supposed to use -s MODULARIZE=1.
This still keeps the build as (almost) asm.js, as switching to wasm is a
bit more work (we need to preload the wasm binary module).
This fixes issue #853.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,855,2018-06-04T20:53:00Z,2018-06-04T22:39:40Z,2018-06-04T22:39:42Z,MERGED,True,41,51,7,https://github.com/binji,Fix emscripten build,2,[],https://github.com/WebAssembly/wabt/pull/855,https://github.com/kripken,2,https://github.com/WebAssembly/wabt/pull/855#issuecomment-394505185,"It's not correct to use --pre-js and --post-js to wrap the module in
a function instance; instead we're supposed to use -s MODULARIZE=1.
This still keeps the build as (almost) asm.js, as switching to wasm is a
bit more work (we need to preload the wasm binary module).
This fixes issue #853.","lgtm. And sorry for the confusion with those emcc APIs, we only recently realized that bad things could happen if the optimizer was not aware of the scoping issue, and so started to issue an error for people adding an enclosing scope themselves.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,855,2018-06-04T20:53:00Z,2018-06-04T22:39:40Z,2018-06-04T22:39:42Z,MERGED,True,41,51,7,https://github.com/binji,Fix emscripten build,2,[],https://github.com/WebAssembly/wabt/pull/855,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/855#issuecomment-394505998,"It's not correct to use --pre-js and --post-js to wrap the module in
a function instance; instead we're supposed to use -s MODULARIZE=1.
This still keeps the build as (almost) asm.js, as switching to wasm is a
bit more work (we need to preload the wasm binary module).
This fixes issue #853.","No problem, I just didn't really know why it broke. The error probably should have clued me in, but it didn't really click until you explained it. :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,856,2018-06-04T22:46:19Z,2018-06-05T07:26:11Z,2018-06-05T07:26:15Z,MERGED,True,86,29,9,https://github.com/binji,Better type-check errors locs @ end of block,1,[],https://github.com/WebAssembly/wabt/pull/856,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/856,"Some type-checking only occurs at the end of a block, but the location
that is generated uses the last expression of that block. This can be
confusing if there are nested blocks, e.g.
1  block (result i32)
2    block
3      nop
4    end
5  end

This should produce an error at line 5, not line 3.
This PR stores the locations of the end of a block (either the end or
the closing parenthesis) so its easier to understand where the error
occurred.","Some type-checking only occurs at the end of a block, but the location
that is generated uses the last expression of that block. This can be
confusing if there are nested blocks, e.g.
1  block (result i32)
2    block
3      nop
4    end
5  end

This should produce an error at line 5, not line 3.
This PR stores the locations of the end of a block (either the end or
the closing parenthesis) so its easier to understand where the error
occurred.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,858,2018-06-05T15:27:55Z,2018-06-05T20:52:47Z,2018-06-05T20:52:52Z,MERGED,True,4,2,2,https://github.com/Kimundi,Fix GCC 8 error due to `-Werror=class-memaccess`.,1,[],https://github.com/WebAssembly/wabt/pull/858,https://github.com/Kimundi,1,https://github.com/WebAssembly/wabt/pull/858,Closes #857,Closes #857,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,858,2018-06-05T15:27:55Z,2018-06-05T20:52:47Z,2018-06-05T20:52:52Z,MERGED,True,4,2,2,https://github.com/Kimundi,Fix GCC 8 error due to `-Werror=class-memaccess`.,1,[],https://github.com/WebAssembly/wabt/pull/858,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/858#issuecomment-394828462,Closes #857,"Looks good, thanks! Have you joined the WebAssembly community group? We can only accept patches from CG members.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,858,2018-06-05T15:27:55Z,2018-06-05T20:52:47Z,2018-06-05T20:52:52Z,MERGED,True,4,2,2,https://github.com/Kimundi,Fix GCC 8 error due to `-Werror=class-memaccess`.,1,[],https://github.com/WebAssembly/wabt/pull/858,https://github.com/Kimundi,3,https://github.com/WebAssembly/wabt/pull/858#issuecomment-394842132,Closes #857,"Hm, to be honest I'm somewhat reluctant to join somewhere just to post a 2 line bugfix. :) Let me look at it in more detail...
EDIT:
I signed up now.",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,858,2018-06-05T15:27:55Z,2018-06-05T20:52:47Z,2018-06-05T20:52:52Z,MERGED,True,4,2,2,https://github.com/Kimundi,Fix GCC 8 error due to `-Werror=class-memaccess`.,1,[],https://github.com/WebAssembly/wabt/pull/858,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/858#issuecomment-394856201,Closes #857,Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,860,2018-06-06T04:35:33Z,2018-06-06T14:52:13Z,2018-06-06T14:52:13Z,MERGED,True,3,3,1,https://github.com/ahorn,Use named offset type and clean up PushRep doc,1,[],https://github.com/WebAssembly/wabt/pull/860,https://github.com/ahorn,1,https://github.com/WebAssembly/wabt/pull/860,"Slightly OCD perhaps, fixes minor inconsistencies in the interpreter header.","Slightly OCD perhaps, fixes minor inconsistencies in the interpreter header.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,860,2018-06-06T04:35:33Z,2018-06-06T14:52:13Z,2018-06-06T14:52:13Z,MERGED,True,3,3,1,https://github.com/ahorn,Use named offset type and clean up PushRep doc,1,[],https://github.com/WebAssembly/wabt/pull/860,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/860#issuecomment-395097234,"Slightly OCD perhaps, fixes minor inconsistencies in the interpreter header.","lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,861,2018-06-14T00:06:53Z,2018-06-14T22:16:43Z,2018-06-14T22:16:46Z,MERGED,True,5374,3897,70,https://github.com/binji,Add support for multi-value proposal,4,[],https://github.com/WebAssembly/wabt/pull/861,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/861,"Use the --enable-multi-value flag to enable.
A lot of code already ""worked"" with multi-value, and just needed to
remove the restrictions. Most of the other changes are modifying the
callback APIs to be more general, e.g. taking more than 1 result type.

Types are now stored as the negative values; this works nicely with
the encoding of inline function types (used for block signatures),
which are always positive values.
Remove BlockSignature and use BlockDeclaration instead, which
is just a typedef to FuncSignature. This allows for explicit or
implicit type specifications on the block signatures.
Allow for >1 ""keep"" values in the DropKeep interpreter instruction","Use the --enable-multi-value flag to enable.
A lot of code already ""worked"" with multi-value, and just needed to
remove the restrictions. Most of the other changes are modifying the
callback APIs to be more general, e.g. taking more than 1 result type.

Types are now stored as the negative values; this works nicely with
the encoding of inline function types (used for block signatures),
which are always positive values.
Remove BlockSignature and use BlockDeclaration instead, which
is just a typedef to FuncSignature. This allows for explicit or
implicit type specifications on the block signatures.
Allow for >1 ""keep"" values in the DropKeep interpreter instruction",True,"{'THUMBS_UP': ['https://github.com/MaxGraey', 'https://github.com/lin7sh', 'https://github.com/pyfisch']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,862,2018-06-15T18:02:19Z,2018-06-15T20:11:24Z,2018-06-15T20:11:27Z,MERGED,True,39,0,2,https://github.com/binji,Fix integer overflow w/ too many locals,1,[],https://github.com/WebAssembly/wabt/pull/862,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/862,The maximum number of locals in a function is 2**32-1.,The maximum number of locals in a function is 2**32-1.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,865,2018-06-18T11:47:32Z,2018-06-18T18:06:00Z,2018-07-19T07:59:23Z,MERGED,True,1,3,1,https://github.com/rrrapha,Relax the check for alloca,1,[],https://github.com/WebAssembly/wabt/pull/865,https://github.com/rrrapha,1,https://github.com/WebAssembly/wabt/pull/865,Resolves #864,Resolves #864,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,865,2018-06-18T11:47:32Z,2018-06-18T18:06:00Z,2018-07-19T07:59:23Z,MERGED,True,1,3,1,https://github.com/rrrapha,Relax the check for alloca,1,[],https://github.com/WebAssembly/wabt/pull/865,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/865#issuecomment-398143958,Resolves #864,"lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,867,2018-06-25T18:26:11Z,2018-06-25T21:49:41Z,2018-06-25T21:49:44Z,MERGED,True,1,1,1,https://github.com/binji,Fix typo in BinaryReaderLogging::OnFunctionSymbol,1,[],https://github.com/WebAssembly/wabt/pull/867,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/867,Fixes #866.,Fixes #866.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,869,2018-06-25T21:54:24Z,2018-06-25T22:44:43Z,2018-06-25T22:44:45Z,MERGED,True,1,1,1,https://github.com/binji,[wasm2c] Fix bad realloc in wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/869,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/869,Fixes issue #868.,Fixes issue #868.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,873,2018-07-14T11:54:22Z,2018-07-19T08:09:38Z,2018-07-20T10:35:27Z,CLOSED,False,5,2,2,https://github.com/rrrapha,"Use the wasm-objdump option -h for --help only, not for --headers",2,[],https://github.com/WebAssembly/wabt/pull/873,https://github.com/rrrapha,1,https://github.com/WebAssembly/wabt/pull/873,Resolves #872,Resolves #872,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,873,2018-07-14T11:54:22Z,2018-07-19T08:09:38Z,2018-07-20T10:35:27Z,CLOSED,False,5,2,2,https://github.com/rrrapha,"Use the wasm-objdump option -h for --help only, not for --headers",2,[],https://github.com/WebAssembly/wabt/pull/873,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/873#issuecomment-406356918,Resolves #872,Was there something wrong with this PR? I was going to land it.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,873,2018-07-14T11:54:22Z,2018-07-19T08:09:38Z,2018-07-20T10:35:27Z,CLOSED,False,5,2,2,https://github.com/rrrapha,"Use the wasm-objdump option -h for --help only, not for --headers",2,[],https://github.com/WebAssembly/wabt/pull/873,https://github.com/rrrapha,3,https://github.com/WebAssembly/wabt/pull/873#issuecomment-406561941,Resolves #872,"Sorry for the confusion.. you can of course merge this if you want. ;)
I'm not convinced this is the best solution though (see my latest comment here: #872).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,876,2018-07-20T00:48:54Z,2018-07-24T20:41:31Z,2018-07-24T23:25:52Z,MERGED,True,72,0,3,https://github.com/binji,Binary releases for travis/appveyor,6,[],https://github.com/WebAssembly/wabt/pull/876,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/876,I doubt this will work on the first try.,I doubt this will work on the first try.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,877,2018-07-24T21:23:04Z,2018-08-03T04:05:15Z,2018-08-03T10:07:30Z,MERGED,True,18,21,13,https://github.com/rrrapha,Remove short option for --help ,3,[],https://github.com/WebAssembly/wabt/pull/877,https://github.com/rrrapha,1,https://github.com/WebAssembly/wabt/pull/877,Resolves #872,Resolves #872,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,877,2018-07-24T21:23:04Z,2018-08-03T04:05:15Z,2018-08-03T10:07:30Z,MERGED,True,18,21,13,https://github.com/rrrapha,Remove short option for --help ,3,[],https://github.com/WebAssembly/wabt/pull/877,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/877#issuecomment-410138384,Resolves #872,"Sorry, didn't notice this!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,878,2018-07-24T23:24:01Z,2018-07-24T23:25:30Z,2018-07-24T23:25:52Z,CLOSED,False,72,0,3,https://github.com/binji,Binary release,6,[],https://github.com/WebAssembly/wabt/pull/878,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/878,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,879,2018-07-24T23:26:01Z,2018-07-25T21:38:27Z,2018-07-25T21:38:31Z,MERGED,True,64,5,4,https://github.com/binji,Some fixes for binary releases,5,[],https://github.com/WebAssembly/wabt/pull/879,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/879,"Create the artifacts before they are packaged (before_deploy happens
afterward)
MacOS doesn't have sha256, so use python","Create the artifacts before they are packaged (before_deploy happens
afterward)
MacOS doesn't have sha256, so use python",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,880,2018-07-25T18:39:54Z,2018-07-25T22:30:43Z,2018-07-25T22:30:45Z,MERGED,True,4,9,2,https://github.com/binji,[emscripten] Use long instead of int for ssize_t,3,[],https://github.com/WebAssembly/wabt/pull/880,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/880,This was recently changed in emscripten.,This was recently changed in emscripten.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,882,2018-07-30T14:31:58Z,2018-07-30T20:38:01Z,2018-07-30T20:48:40Z,MERGED,True,35,30,1,https://github.com/axic,Add BUILD_TOOLS option to CMake,1,[],https://github.com/WebAssembly/wabt/pull/882,https://github.com/axic,1,https://github.com/WebAssembly/wabt/pull/882,This is useful for projects importing wabt only for libwabt.,This is useful for projects importing wabt only for libwabt.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,882,2018-07-30T14:31:58Z,2018-07-30T20:38:01Z,2018-07-30T20:48:40Z,MERGED,True,35,30,1,https://github.com/axic,Add BUILD_TOOLS option to CMake,1,[],https://github.com/WebAssembly/wabt/pull/882,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/882#issuecomment-409001881,This is useful for projects importing wabt only for libwabt.,Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,882,2018-07-30T14:31:58Z,2018-07-30T20:38:01Z,2018-07-30T20:48:40Z,MERGED,True,35,30,1,https://github.com/axic,Add BUILD_TOOLS option to CMake,1,[],https://github.com/WebAssembly/wabt/pull/882,https://github.com/axic,3,https://github.com/WebAssembly/wabt/pull/882#issuecomment-409005158,This is useful for projects importing wabt only for libwabt.,Thanks for merging!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,884,2018-08-03T04:25:31Z,2018-08-03T19:28:01Z,2018-08-03T19:28:04Z,MERGED,True,893,311,34,https://github.com/binji,Update testsuite; enable mut. globals by default,2,[],https://github.com/WebAssembly/wabt/pull/884,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/884,"The newest testsuite update enables mutable globals by default, which
matches the v1 WebAssembly spec.
This change changes the default for all wabt tools, and changes the flag
to --disable-mutable-globals in case you need the previous behavior.
This flag will likely be removed in the future.","The newest testsuite update enables mutable globals by default, which
matches the v1 WebAssembly spec.
This change changes the default for all wabt tools, and changes the flag
to --disable-mutable-globals in case you need the previous behavior.
This flag will likely be removed in the future.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,886,2018-08-04T00:24:21Z,2018-08-04T01:16:52Z,2018-08-06T21:40:44Z,MERGED,True,2,2,1,https://github.com/poemm,handle traps in host functions,1,[],https://github.com/WebAssembly/wabt/pull/886,https://github.com/poemm,1,https://github.com/WebAssembly/wabt/pull/886,"With these changes, when my host function returns interp::Result::TrapHostTrapped, execution traps as desired.
By the way, great work on wabt! Useful tools!","With these changes, when my host function returns interp::Result::TrapHostTrapped, execution traps as desired.
By the way, great work on wabt! Useful tools!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,886,2018-08-04T00:24:21Z,2018-08-04T01:16:52Z,2018-08-06T21:40:44Z,MERGED,True,2,2,1,https://github.com/poemm,handle traps in host functions,1,[],https://github.com/WebAssembly/wabt/pull/886,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/886#issuecomment-410411588,"With these changes, when my host function returns interp::Result::TrapHostTrapped, execution traps as desired.
By the way, great work on wabt! Useful tools!","Thanks for the fix!
I took a look at https://github.com/poemm/pywebassembly too. Pretty cool stuff! I like that it follows the spec very closely; I started working on something similar in JS but stalled a bit. :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,886,2018-08-04T00:24:21Z,2018-08-04T01:16:52Z,2018-08-06T21:40:44Z,MERGED,True,2,2,1,https://github.com/poemm,handle traps in host functions,1,[],https://github.com/WebAssembly/wabt/pull/886,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/886#issuecomment-410861757,"With these changes, when my host function returns interp::Result::TrapHostTrapped, execution traps as desired.
By the way, great work on wabt! Useful tools!","BTW, I added a test for this here: #887",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,887,2018-08-06T08:10:01Z,2018-08-06T18:53:01Z,2018-08-06T18:53:04Z,MERGED,True,133,0,2,https://github.com/binji,[interp] Add test for trapping host functions,1,[],https://github.com/WebAssembly/wabt/pull/887,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/887,"The previous change fixed a bug that occurs if a host function traps.
This change adds a test for that case, both for when the host function
is called directly and via call_indirect.","The previous change fixed a bug that occurs if a host function traps.
This change adds a test for that case, both for when the host function
is called directly and via call_indirect.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,888,2018-08-07T07:03:47Z,2018-08-07T15:49:49Z,2018-08-07T15:49:52Z,MERGED,True,114,116,31,https://github.com/binji,Pass Option structs by const reference,2,[],https://github.com/WebAssembly/wabt/pull/888,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/888,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,889,2018-08-13T06:02:31Z,2018-08-13T19:00:01Z,2018-08-13T19:00:04Z,MERGED,True,352,390,8,https://github.com/binji,[interp] Simplify host module imports,2,[],https://github.com/WebAssembly/wabt/pull/889,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/889,"Importing from host modules used to be handled by a delegate, which is a
powerful enough solution to allow for all host import behaviors, but
makes the common case difficult and clunky.
It also assumed that every imported function/global/etc. needed to be
newly created and added to the environment, which is OK (though
wasteful) for functions, but is incorrect for mutable values like
memories and globals.
This change simplifies the common case by providing a set of functions
on HostModule that can be used to add exports, e.g.
AppendFuncExport(""add"", {{Type::I32, Type::I32}, {Type::I32}},
                 AddFunc);

A generic interface for functions is provided as well, to allow for
automatically generating functions as needed. This is currently used for
functions like ""host.print"" in wasm-interp.","Importing from host modules used to be handled by a delegate, which is a
powerful enough solution to allow for all host import behaviors, but
makes the common case difficult and clunky.
It also assumed that every imported function/global/etc. needed to be
newly created and added to the environment, which is OK (though
wasteful) for functions, but is incorrect for mutable values like
memories and globals.
This change simplifies the common case by providing a set of functions
on HostModule that can be used to add exports, e.g.
AppendFuncExport(""add"", {{Type::I32, Type::I32}, {Type::I32}},
                 AddFunc);

A generic interface for functions is provided as well, to allow for
automatically generating functions as needed. This is currently used for
functions like ""host.print"" in wasm-interp.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,890,2018-08-14T01:34:22Z,2018-08-14T08:21:18Z,2018-08-14T18:50:31Z,MERGED,True,187,3,1,https://github.com/binji,[interp] Add rot13 interpreter example,2,[],https://github.com/WebAssembly/wabt/pull/890,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/890,"This demonstrates sharing memory between a WebAssembly module and the
embedder.","This demonstrates sharing memory between a WebAssembly module and the
embedder.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,890,2018-08-14T01:34:22Z,2018-08-14T08:21:18Z,2018-08-14T18:50:31Z,MERGED,True,187,3,1,https://github.com/binji,[interp] Add rot13 interpreter example,2,[],https://github.com/WebAssembly/wabt/pull/890,https://github.com/Adlai-Holler,2,https://github.com/WebAssembly/wabt/pull/890#issuecomment-412977514,"This demonstrates sharing memory between a WebAssembly module and the
embedder.",Wow this is extremely useful as a demonstration of a minimal buffer mutation API! Thanks @binji I'll be borrowing this 😀,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,891,2018-08-14T09:16:33Z,2018-08-14T18:23:03Z,2018-08-14T18:23:06Z,MERGED,True,41,13,6,https://github.com/binji,[wasm2c] Add spec tests; fix update-spec-tests.py,2,[],https://github.com/WebAssembly/wabt/pull/891,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/891,"update-spec-tests.py now will update the tests in the
test/wasm2c/spec directory.","update-spec-tests.py now will update the tests in the
test/wasm2c/spec directory.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,893,2018-08-14T20:41:44Z,2018-08-15T21:27:43Z,2018-08-15T21:27:43Z,MERGED,True,1,1,1,https://github.com/penzn,Update Gtest to current revision,1,[],https://github.com/WebAssembly/wabt/pull/893,https://github.com/penzn,1,https://github.com/WebAssembly/wabt/pull/893,Closes #892,Closes #892,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,893,2018-08-14T20:41:44Z,2018-08-15T21:27:43Z,2018-08-15T21:27:43Z,MERGED,True,1,1,1,https://github.com/penzn,Update Gtest to current revision,1,[],https://github.com/WebAssembly/wabt/pull/893,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/893#issuecomment-413046979,Closes #892,"Thanks! Yes, updating gtest seems like a good idea, though it looks like it currently fails on the Travis build because of a warning. Do you mind fixing this? If not I can take a look.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,893,2018-08-14T20:41:44Z,2018-08-15T21:27:43Z,2018-08-15T21:27:43Z,MERGED,True,1,1,1,https://github.com/penzn,Update Gtest to current revision,1,[],https://github.com/WebAssembly/wabt/pull/893,https://github.com/penzn,3,https://github.com/WebAssembly/wabt/pull/893#issuecomment-413331763,Closes #892,"I am going to rollback the revision a little bit. There is a commit in gtest that introduces ""missing initializer"" warning, which is unfortunate. With this revision it should be good with both Visual Studion and GCC/Clang.
Waiting for the builds.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,893,2018-08-14T20:41:44Z,2018-08-15T21:27:43Z,2018-08-15T21:27:43Z,MERGED,True,1,1,1,https://github.com/penzn,Update Gtest to current revision,1,[],https://github.com/WebAssembly/wabt/pull/893,https://github.com/penzn,4,https://github.com/WebAssembly/wabt/pull/893#issuecomment-413335482,Closes #892,"Alternatively, it can be solved by silencing the warning. I can do it if that works for you better.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,893,2018-08-14T20:41:44Z,2018-08-15T21:27:43Z,2018-08-15T21:27:43Z,MERGED,True,1,1,1,https://github.com/penzn,Update Gtest to current revision,1,[],https://github.com/WebAssembly/wabt/pull/893,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/893#issuecomment-413343007,Closes #892,"Yeah, we can probably just silence the warning in the future. But I think it's fine to just use the older version for now, as long as it fixes the bug.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,895,2018-08-15T19:53:27Z,2018-08-15T21:26:01Z,2018-08-15T21:26:03Z,MERGED,True,37,11,7,https://github.com/binji,Fix: set_global on immutable global is invalid,1,[],https://github.com/WebAssembly/wabt/pull/895,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/895,"There is a spec test for this, but spectest-interp only runs the
validator in binary-reader-interp.cc, which is different than the
validator in validator.cc. This is necessarily so, since some
checks only make sense when the module is linked or instantiated.
This fixes issue #894.","There is a spec test for this, but spectest-interp only runs the
validator in binary-reader-interp.cc, which is different than the
validator in validator.cc. This is necessarily so, since some
checks only make sense when the module is linked or instantiated.
This fixes issue #894.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,896,2018-08-16T10:21:04Z,2018-08-17T21:45:53Z,2018-08-18T18:15:33Z,MERGED,True,329,0,6,https://github.com/rrrapha,add minimal manpages (mdoc-formatted),1,[],https://github.com/WebAssembly/wabt/pull/896,https://github.com/rrrapha,1,https://github.com/WebAssembly/wabt/pull/896,Resolves #417,Resolves #417,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,896,2018-08-16T10:21:04Z,2018-08-17T21:45:53Z,2018-08-18T18:15:33Z,MERGED,True,329,0,6,https://github.com/rrrapha,add minimal manpages (mdoc-formatted),1,[],https://github.com/WebAssembly/wabt/pull/896,https://github.com/rrrapha,2,https://github.com/WebAssembly/wabt/pull/896#issuecomment-413501120,Resolves #417,"The information is mostly taken from README.md and extracted from the usage output. Only the tools mentioned in README.md are covered.
The manual pages are not hooked up to the build system yet.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,896,2018-08-16T10:21:04Z,2018-08-17T21:45:53Z,2018-08-18T18:15:33Z,MERGED,True,329,0,6,https://github.com/rrrapha,add minimal manpages (mdoc-formatted),1,[],https://github.com/WebAssembly/wabt/pull/896,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/896#issuecomment-413996191,Resolves #417,"Thanks! I don't know the syntax at all, but just a quick glance looks good to me.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,896,2018-08-16T10:21:04Z,2018-08-17T21:45:53Z,2018-08-18T18:15:33Z,MERGED,True,329,0,6,https://github.com/rrrapha,add minimal manpages (mdoc-formatted),1,[],https://github.com/WebAssembly/wabt/pull/896,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/896#issuecomment-413996676,Resolves #417,Shouldn't they be added to the make install target too?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,896,2018-08-16T10:21:04Z,2018-08-17T21:45:53Z,2018-08-18T18:15:33Z,MERGED,True,329,0,6,https://github.com/rrrapha,add minimal manpages (mdoc-formatted),1,[],https://github.com/WebAssembly/wabt/pull/896,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/896#issuecomment-413997558,Resolves #417,"Yeah, but I think it's fine to do that in another PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,898,2018-08-18T18:31:11Z,2018-08-20T18:35:53Z,2018-08-21T12:46:22Z,MERGED,True,10,0,1,https://github.com/rrrapha, Add manpages to the `make install` target,2,[],https://github.com/WebAssembly/wabt/pull/898,https://github.com/rrrapha,1,https://github.com/WebAssembly/wabt/pull/898,Related to issue #417,Related to issue #417,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,898,2018-08-18T18:31:11Z,2018-08-20T18:35:53Z,2018-08-21T12:46:22Z,MERGED,True,10,0,1,https://github.com/rrrapha, Add manpages to the `make install` target,2,[],https://github.com/WebAssembly/wabt/pull/898,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/898#issuecomment-414418875,Related to issue #417,"lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,899,2018-08-21T17:47:50Z,2018-08-27T23:16:07Z,2018-08-27T23:16:11Z,MERGED,True,36,29,14,https://github.com/sbc100,[objdump] Display element count in section details,2,[],https://github.com/WebAssembly/wabt/pull/899,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/899,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,900,2018-08-23T02:49:13Z,2018-08-24T01:39:42Z,2018-08-24T01:39:42Z,MERGED,True,1,1,1,https://github.com/spoonincode,Reset Executor’s Thread at start of RunFunction,1,[],https://github.com/WebAssembly/wabt/pull/900,https://github.com/spoonincode,1,https://github.com/WebAssembly/wabt/pull/900,"At the end of Executor::RunFunction(), the Thread is Reset() so that
the Executor can be reused for subsequent RunFunction()s. However in
some cases the execution won’t make it that far in RunFunction() —
for example, if a HostModule’s callback throws an exception. Move the
call to the Thread’s Reset() to the start of RunFunction() so that
the Thread’s state is always as expected when Executor starts a function.","At the end of Executor::RunFunction(), the Thread is Reset() so that
the Executor can be reused for subsequent RunFunction()s. However in
some cases the execution won’t make it that far in RunFunction() —
for example, if a HostModule’s callback throws an exception. Move the
call to the Thread’s Reset() to the start of RunFunction() so that
the Thread’s state is always as expected when Executor starts a function.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,900,2018-08-23T02:49:13Z,2018-08-24T01:39:42Z,2018-08-24T01:39:42Z,MERGED,True,1,1,1,https://github.com/spoonincode,Reset Executor’s Thread at start of RunFunction,1,[],https://github.com/WebAssembly/wabt/pull/900,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/900#issuecomment-415624729,"At the end of Executor::RunFunction(), the Thread is Reset() so that
the Executor can be reused for subsequent RunFunction()s. However in
some cases the execution won’t make it that far in RunFunction() —
for example, if a HostModule’s callback throws an exception. Move the
call to the Thread’s Reset() to the start of RunFunction() so that
the Thread’s state is always as expected when Executor starts a function.","Thanks, lgtm!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,901,2018-08-25T02:58:11Z,2018-08-25T03:32:44Z,2018-08-25T03:32:46Z,MERGED,True,229,229,17,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/901,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/901,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,902,2018-08-25T06:19:21Z,2018-08-27T18:31:03Z,2018-08-27T18:31:05Z,MERGED,True,219,1,7,https://github.com/binji,Add wasm-strip tool to strip custom sections,1,[],https://github.com/WebAssembly/wabt/pull/902,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/902,"There's a lot more that this tool could do, but even this is helpful for
now.
Fixes issue #631.","There's a lot more that this tool could do, but even this is helpful for
now.
Fixes issue #631.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,903,2018-08-29T03:06:10Z,2018-08-29T04:17:42Z,2018-08-29T04:17:45Z,MERGED,True,10,0,3,https://github.com/binji,"Add `--inline-{im,ex}ports` flags to `wat-desugar`",1,[],https://github.com/WebAssembly/wabt/pull/903,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/903,These were long supported in wasm2wat,These were long supported in wasm2wat,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,905,2018-08-31T00:33:38Z,2018-08-31T16:16:53Z,2018-08-31T16:16:56Z,MERGED,True,24,16,2,https://github.com/binji,Work around bug in emscripten w/ response files,1,[],https://github.com/WebAssembly/wabt/pull/905,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/905,"See issue 7037 in emscripten: the parsing of EXPORTED_FUNCTIONS as a
respones file doesn't work properly for the final element in the list.
Fixes issue #904.","See issue 7037 in emscripten: the parsing of EXPORTED_FUNCTIONS as a
respones file doesn't work properly for the final element in the list.
Fixes issue #904.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,906,2018-09-03T21:00:49Z,2018-09-04T22:13:24Z,2018-09-04T22:13:27Z,MERGED,True,1525,1744,48,https://github.com/binji,"Some refactoring of error handling, lexer",2,[],https://github.com/WebAssembly/wabt/pull/906,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/906,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,907,2018-09-07T02:16:21Z,2018-09-07T05:38:00Z,2018-09-07T05:38:03Z,MERGED,True,1365,46,20,https://github.com/binji,Fix some multi-value bugs; run spec tests,1,[],https://github.com/WebAssembly/wabt/pull/907,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/907,"Running the multi-value spec tests found a few bugs:


DropKeep needs to copy the kept values backward when the regions
overlap.


Type names need to be resolved to indexes in block declarations
(e.g. block (type $foo))


if without an else is valid, it just behaves as though the else
is empty, which will pass the params through as results.


When validating function signatures, we need to also check block
declaration signatures.


Split ResolveFuncType into two functions:
ResolveFuncTypeWithEmptySignature and
ResolveImplicitlyDefinedFunctionType.


When resolving implicitly defined function types, we only create an
implicit function type when the type is not inlinable; i.e. only for
block/loop/if with 0 or 1 result values and no params.


Change update-spec-tests to include the multi-value proposal repo
from the testsuite.","Running the multi-value spec tests found a few bugs:


DropKeep needs to copy the kept values backward when the regions
overlap.


Type names need to be resolved to indexes in block declarations
(e.g. block (type $foo))


if without an else is valid, it just behaves as though the else
is empty, which will pass the params through as results.


When validating function signatures, we need to also check block
declaration signatures.


Split ResolveFuncType into two functions:
ResolveFuncTypeWithEmptySignature and
ResolveImplicitlyDefinedFunctionType.


When resolving implicitly defined function types, we only create an
implicit function type when the type is not inlinable; i.e. only for
block/loop/if with 0 or 1 result values and no params.


Change update-spec-tests to include the multi-value proposal repo
from the testsuite.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,909,2018-09-10T19:34:52Z,,2021-03-22T16:56:56Z,OPEN,False,608,173,12,https://github.com/binji,Fix wasm2c on windows (via MSVC),5,[],https://github.com/WebAssembly/wabt/pull/909,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/909,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,910,2018-09-10T20:16:40Z,2018-09-11T02:36:19Z,2018-09-20T23:06:24Z,MERGED,True,3666,3599,12,https://github.com/binji,Optimize interpreter and `Opcode::FromCode`,5,[],https://github.com/WebAssembly/wabt/pull/910,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/910,"Opcode::FromCode calculated the opcode given a prefix/code pair by
using lower_bound over the list of all OpcodeInfos. This was happening
for every instruction, which is incredibly slow.
Since the interpreter's format is internal only, we can use any encoding
we want, so it's simpler and faster to use the Opcode::Enum directly
without calling Opcode::FromCode.
Opcode::FromCode is also used when reading a binary file, so it should
be optimized anyway. Instead of using the infos_ table, which is
indexed by the opcode's enum_ value, we create a new
statically-defined table that maps from prefix-code pair to its enum
value.
Unfortunately, this can't be done easily in C++ because it does not
currently support designated array initializers, so this table is
created in a C file instead, opcode-code-table.c.","Opcode::FromCode calculated the opcode given a prefix/code pair by
using lower_bound over the list of all OpcodeInfos. This was happening
for every instruction, which is incredibly slow.
Since the interpreter's format is internal only, we can use any encoding
we want, so it's simpler and faster to use the Opcode::Enum directly
without calling Opcode::FromCode.
Opcode::FromCode is also used when reading a binary file, so it should
be optimized anyway. Instead of using the infos_ table, which is
indexed by the opcode's enum_ value, we create a new
statically-defined table that maps from prefix-code pair to its enum
value.
Unfortunately, this can't be done easily in C++ because it does not
currently support designated array initializers, so this table is
created in a C file instead, opcode-code-table.c.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,911,2018-09-10T20:30:49Z,2018-09-10T20:31:05Z,2018-09-10T20:31:07Z,MERGED,True,5,5,1,https://github.com/binji,Update README.md demo links,1,[],https://github.com/WebAssembly/wabt/pull/911,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/911,See issue #908.,See issue #908.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,912,2018-09-14T03:32:20Z,2018-09-14T04:13:55Z,2018-09-14T04:13:57Z,MERGED,True,10,0,2,https://github.com/binji,[wasm-interp] Fix assert with non-func exports,1,[],https://github.com/WebAssembly/wabt/pull/912,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/912,The --run-all-exports flag assumed that all exports are functions.,The --run-all-exports flag assumed that all exports are functions.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,913,2018-09-14T04:18:01Z,2018-09-14T21:48:21Z,2018-09-14T21:48:24Z,MERGED,True,98,49,2,https://github.com/binji,Don't install wabt-unittests; refactor CMakeLists,2,[],https://github.com/WebAssembly/wabt/pull/913,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/913,"wabt-unittests used to be installed, but it really shouldn't be.
Also use cmake_parse_arguments to make the wabt_executable function
a little more powerful.","wabt-unittests used to be installed, but it really shouldn't be.
Also use cmake_parse_arguments to make the wabt_executable function
a little more powerful.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,916,2018-09-26T02:52:03Z,2018-09-26T20:34:08Z,2018-09-26T20:34:08Z,MERGED,True,1463,1463,2,https://github.com/lizhengxing,Update Wasm simd instruction opcodes,1,[],https://github.com/WebAssembly/wabt/pull/916,https://github.com/lizhengxing,1,https://github.com/WebAssembly/wabt/pull/916,Update the wasm simd instruction opcodes as they're changed in latest spec.,Update the wasm simd instruction opcodes as they're changed in latest spec.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,916,2018-09-26T02:52:03Z,2018-09-26T20:34:08Z,2018-09-26T20:34:08Z,MERGED,True,1463,1463,2,https://github.com/lizhengxing,Update Wasm simd instruction opcodes,1,[],https://github.com/WebAssembly/wabt/pull/916,https://github.com/lizhengxing,2,https://github.com/WebAssembly/wabt/pull/916#issuecomment-424567457,Update the wasm simd instruction opcodes as they're changed in latest spec.,"@binji
Updated the simd op according to the latest wasm simd spec, PTAL!
Thanks!
@aretmr FYI!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,918,2018-10-01T23:24:53Z,2018-10-02T00:50:46Z,2018-10-02T00:50:49Z,MERGED,True,3310,3134,21,https://github.com/binji,Tailcall,1,[],https://github.com/WebAssembly/wabt/pull/918,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/918,"This doesn't do any of the real work yet, it just adds the
ReturnCall/ReturnCallIndirect Expr and Opcode types, and the
""--enable-tail-call"" flag.
Still TODO:

Parse the opcodes in binary-reader.cc
Validate the opcodes in validator.cc and type-checker.cc
Implement the opcodes in interp.cc
Write standard wabt tests, and enable the spec proposal tests too","This doesn't do any of the real work yet, it just adds the
ReturnCall/ReturnCallIndirect Expr and Opcode types, and the
""--enable-tail-call"" flag.
Still TODO:

Parse the opcodes in binary-reader.cc
Validate the opcodes in validator.cc and type-checker.cc
Implement the opcodes in interp.cc
Write standard wabt tests, and enable the spec proposal tests too",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,918,2018-10-01T23:24:53Z,2018-10-02T00:50:46Z,2018-10-02T00:50:49Z,MERGED,True,3310,3134,21,https://github.com/binji,Tailcall,1,[],https://github.com/WebAssembly/wabt/pull/918,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/918#issuecomment-426097013,"This doesn't do any of the real work yet, it just adds the
ReturnCall/ReturnCallIndirect Expr and Opcode types, and the
""--enable-tail-call"" flag.
Still TODO:

Parse the opcodes in binary-reader.cc
Validate the opcodes in validator.cc and type-checker.cc
Implement the opcodes in interp.cc
Write standard wabt tests, and enable the spec proposal tests too",cc @frankmccabe,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,918,2018-10-01T23:24:53Z,2018-10-02T00:50:46Z,2018-10-02T00:50:49Z,MERGED,True,3310,3134,21,https://github.com/binji,Tailcall,1,[],https://github.com/WebAssembly/wabt/pull/918,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/918#issuecomment-426106128,"This doesn't do any of the real work yet, it just adds the
ReturnCall/ReturnCallIndirect Expr and Opcode types, and the
""--enable-tail-call"" flag.
Still TODO:

Parse the opcodes in binary-reader.cc
Validate the opcodes in validator.cc and type-checker.cc
Implement the opcodes in interp.cc
Write standard wabt tests, and enable the spec proposal tests too",Looks like the travis failure is a build flake.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,919,2018-10-02T00:49:57Z,2018-10-02T15:57:05Z,2018-10-02T15:57:07Z,MERGED,True,1456,1375,11,https://github.com/binji,Refactor interpreter a bit,1,[],https://github.com/WebAssembly/wabt/pull/919,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/919,"Create src/interp/ directory
Move Thread::Trace into src/interp/interp-trace.cc
Move Environment::Disassemble into src/interp/interp-disassemble.cc
Move shared code into src/interp/interp-internal.h","Create src/interp/ directory
Move Thread::Trace into src/interp/interp-trace.cc
Move Environment::Disassemble into src/interp/interp-disassemble.cc
Move shared code into src/interp/interp-internal.h",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,921,2018-10-04T00:50:45Z,2018-10-04T19:22:16Z,2018-10-04T19:22:19Z,MERGED,True,161,31,7,https://github.com/binji,[libwabtjs] Add support for features,1,[],https://github.com/WebAssembly/wabt/pull/921,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/921,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,922,2018-10-05T19:08:23Z,2018-10-05T23:10:30Z,2018-10-05T23:10:33Z,MERGED,True,71,8,5,https://github.com/binji,Require reserved instruction bytes to be one byte,1,[],https://github.com/WebAssembly/wabt/pull/922,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/922,"The spec requires that the reserved bytes in call_indirect,
memory.grow, and memory.size to be one zero byte. This means that we
cannot accept 0x80 0x00, or other ""long"" LEB128 encodings of zero.","The spec requires that the reserved bytes in call_indirect,
memory.grow, and memory.size to be one zero byte. This means that we
cannot accept 0x80 0x00, or other ""long"" LEB128 encodings of zero.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,925,2018-10-11T00:00:27Z,2018-10-12T03:04:14Z,2018-10-12T03:04:17Z,MERGED,True,5,5,1,https://github.com/binji,Use gh-pages instead of rawgit for demo,1,[],https://github.com/WebAssembly/wabt/pull/925,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/925,Fixes #924.,Fixes #924.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,926,2018-10-11T23:18:31Z,2018-10-12T21:05:01Z,2018-10-12T21:06:24Z,MERGED,True,386,25,22,https://github.com/fgmccabe,Implemented tail call instructions:,2,[],https://github.com/WebAssembly/wabt/pull/926,https://github.com/fgmccabe,1,https://github.com/WebAssembly/wabt/pull/926,"return_call
return_call_indirect

with some simple tests thereof.","return_call
return_call_indirect

with some simple tests thereof.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,927,2018-10-12T05:54:03Z,2018-10-12T20:57:24Z,2018-10-12T20:57:24Z,MERGED,True,5673,4646,55,https://github.com/alexcrichton,Add bulk memory opcode definitions,1,[],https://github.com/WebAssembly/wabt/pull/927,https://github.com/alexcrichton,1,https://github.com/WebAssembly/wabt/pull/927,"This commit starts to add support in wabt's various tools for the
upcoming bulk memory proposal. This is based off the current
proposal's overview, although these may get tweaked over time!
This is also the first time I've significantly contributed to wabt, and
what I thought would be a relatively simple addition ended up being much
larger than I imagined! I didn't add many negative tests yet but if more
tests are desired please let me know!","This commit starts to add support in wabt's various tools for the
upcoming bulk memory proposal. This is based off the current
proposal's overview, although these may get tweaked over time!
This is also the first time I've significantly contributed to wabt, and
what I thought would be a relatively simple addition ended up being much
larger than I imagined! I didn't add many negative tests yet but if more
tests are desired please let me know!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,927,2018-10-12T05:54:03Z,2018-10-12T20:57:24Z,2018-10-12T20:57:24Z,MERGED,True,5673,4646,55,https://github.com/alexcrichton,Add bulk memory opcode definitions,1,[],https://github.com/WebAssembly/wabt/pull/927,https://github.com/alexcrichton,2,https://github.com/WebAssembly/wabt/pull/927#issuecomment-429389101,"This commit starts to add support in wabt's various tools for the
upcoming bulk memory proposal. This is based off the current
proposal's overview, although these may get tweaked over time!
This is also the first time I've significantly contributed to wabt, and
what I thought would be a relatively simple addition ended up being much
larger than I imagined! I didn't add many negative tests yet but if more
tests are desired please let me know!","Ok, updated!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,930,2018-10-13T18:29:20Z,2018-10-15T20:57:27Z,2018-10-15T20:57:29Z,MERGED,True,662,119,28,https://github.com/binji,Add more bulk memory tests; use vars for segments  ,2,[],https://github.com/WebAssembly/wabt/pull/930,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/930,"Allow for names in data/elem segments:

(data $foo (i32.const 0) ""abcdef"")


These names can be referenced by the memory/table instructions that
operate on segments:

memory.drop $foo



Fix running wasm-objdump with bulk-memory instructions


Check for valid data/elem segments in validation


Check that bulk-memory is enabled when parsing text


Partial fix for #928; still needs interpreter checks too.","Allow for names in data/elem segments:

(data $foo (i32.const 0) ""abcdef"")


These names can be referenced by the memory/table instructions that
operate on segments:

memory.drop $foo



Fix running wasm-objdump with bulk-memory instructions


Check for valid data/elem segments in validation


Check that bulk-memory is enabled when parsing text


Partial fix for #928; still needs interpreter checks too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,930,2018-10-13T18:29:20Z,2018-10-15T20:57:27Z,2018-10-15T20:57:29Z,MERGED,True,662,119,28,https://github.com/binji,Add more bulk memory tests; use vars for segments  ,2,[],https://github.com/WebAssembly/wabt/pull/930,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/930#issuecomment-429963845,"Allow for names in data/elem segments:

(data $foo (i32.const 0) ""abcdef"")


These names can be referenced by the memory/table instructions that
operate on segments:

memory.drop $foo



Fix running wasm-objdump with bulk-memory instructions


Check for valid data/elem segments in validation


Check that bulk-memory is enabled when parsing text


Partial fix for #928; still needs interpreter checks too.",cc @alexcrichton,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,930,2018-10-13T18:29:20Z,2018-10-15T20:57:27Z,2018-10-15T20:57:29Z,MERGED,True,662,119,28,https://github.com/binji,Add more bulk memory tests; use vars for segments  ,2,[],https://github.com/WebAssembly/wabt/pull/930,https://github.com/alexcrichton,3,https://github.com/WebAssembly/wabt/pull/930#issuecomment-430008733,"Allow for names in data/elem segments:

(data $foo (i32.const 0) ""abcdef"")


These names can be referenced by the memory/table instructions that
operate on segments:

memory.drop $foo



Fix running wasm-objdump with bulk-memory instructions


Check for valid data/elem segments in validation


Check that bulk-memory is enabled when parsing text


Partial fix for #928; still needs interpreter checks too.",Thanks for adding these! This all looks good to me 👍,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,931,2018-10-13T22:10:20Z,2018-10-17T00:00:26Z,2018-10-17T00:00:29Z,MERGED,True,10154,9786,22,https://github.com/binji,Add more tests for tail_call feature,2,[],https://github.com/WebAssembly/wabt/pull/931,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/931,"Fix a few places where call/call_indirect are used instead of
return_call, return_call_indirect


Fix TypeChecker::CheckReturnSignature to print a better error when
the signatures don't match.


Don't allow return_call/return_call_indirect instructions in the
parser unless the tail-call feature is enabled.


Support folding of return_call/return_call_indirect


Fixes #929.","Fix a few places where call/call_indirect are used instead of
return_call, return_call_indirect


Fix TypeChecker::CheckReturnSignature to print a better error when
the signatures don't match.


Don't allow return_call/return_call_indirect instructions in the
parser unless the tail-call feature is enabled.


Support folding of return_call/return_call_indirect


Fixes #929.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,934,2018-10-17T21:20:57Z,2018-10-18T21:47:41Z,2018-10-18T21:47:44Z,MERGED,True,139,44,14,https://github.com/binji,Add test for disabled opcodes in binary reader,4,[],https://github.com/WebAssembly/wabt/pull/934,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/934,"It's easy to forget to add a check for unexpected opcodes, and it's
tedious to have to write additional tests in test/binary/*.
This way we can test all potentially disabled instructions at once.","It's easy to forget to add a check for unexpected opcodes, and it's
tedious to have to write additional tests in test/binary/*.
This way we can test all potentially disabled instructions at once.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,935,2018-10-22T23:51:19Z,2018-10-23T07:09:38Z,2018-10-23T07:09:38Z,MERGED,True,2,2,1,https://github.com/robrich,Update URLs to match documentation changes,1,[],https://github.com/WebAssembly/wabt/pull/935,https://github.com/robrich,1,https://github.com/WebAssembly/wabt/pull/935,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,937,2018-10-28T08:28:28Z,2018-10-30T19:46:32Z,2018-10-30T19:46:34Z,MERGED,True,16,8,2,https://github.com/binji,Check type use vs. explicit sig. in call_indirect,1,[],https://github.com/WebAssembly/wabt/pull/937,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/937,"The call_indirect instruction can take a type use, but can also take
an explicit signature:
call_indirect (type $foo)               ;; type use
call_indirect (param i32)               ;; explicit signature
call_indirect (type $bar) (result f32)  ;; both

These type signatures must match, or the wat file is considered
malformed. This was properly checked in the spec tests, because it
was performed in a separate function wabt::ValidateFuncSignatures.
This wasn't validated in wat2wasm, because it performs the full module
validation via wabt::ValidateModule, which doesn't share code with
ValidateFuncSignatures.
It might be a good idea to share the code between these two, but for now
it's enough to fix this bug by performing the same check in the module
validation path.
Fixes issue #936.","The call_indirect instruction can take a type use, but can also take
an explicit signature:
call_indirect (type $foo)               ;; type use
call_indirect (param i32)               ;; explicit signature
call_indirect (type $bar) (result f32)  ;; both

These type signatures must match, or the wat file is considered
malformed. This was properly checked in the spec tests, because it
was performed in a separate function wabt::ValidateFuncSignatures.
This wasn't validated in wat2wasm, because it performs the full module
validation via wabt::ValidateModule, which doesn't share code with
ValidateFuncSignatures.
It might be a good idea to share the code between these two, but for now
it's enough to fix this bug by performing the same check in the module
validation path.
Fixes issue #936.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,937,2018-10-28T08:28:28Z,2018-10-30T19:46:32Z,2018-10-30T19:46:34Z,MERGED,True,16,8,2,https://github.com/binji,Check type use vs. explicit sig. in call_indirect,1,[],https://github.com/WebAssembly/wabt/pull/937,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/937#issuecomment-433959211,"The call_indirect instruction can take a type use, but can also take
an explicit signature:
call_indirect (type $foo)               ;; type use
call_indirect (param i32)               ;; explicit signature
call_indirect (type $bar) (result f32)  ;; both

These type signatures must match, or the wat file is considered
malformed. This was properly checked in the spec tests, because it
was performed in a separate function wabt::ValidateFuncSignatures.
This wasn't validated in wat2wasm, because it performs the full module
validation via wabt::ValidateModule, which doesn't share code with
ValidateFuncSignatures.
It might be a good idea to share the code between these two, but for now
it's enough to fix this bug by performing the same check in the module
validation path.
Fixes issue #936.",Travis failure is an unrelated emscripten error.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,938,2018-10-29T17:36:11Z,2019-02-14T17:07:03Z,2019-02-15T15:14:32Z,MERGED,True,10607,9768,60,https://github.com/alexcrichton,Add support for the reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/938,https://github.com/alexcrichton,1,https://github.com/WebAssembly/wabt/pull/938,"This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.","This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,938,2018-10-29T17:36:11Z,2019-02-14T17:07:03Z,2019-02-15T15:14:32Z,MERGED,True,10607,9768,60,https://github.com/alexcrichton,Add support for the reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/938,https://github.com/alexcrichton,2,https://github.com/WebAssembly/wabt/pull/938#issuecomment-434007025,"This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.","One final thing I know of that would want to be sorted out before merging is the binary representation of the opcodes. Currently the reference types overview doesn't go into detail about the binary encodings and the table instructions specification doesn't currently mention table.grow (yet!). The experimental Gecko implementation, however, chooses a different encoding for table.{get,set} as well as picks an encoding for table.grow.
I think it should be easy to sort this out here whichever way we want it to be, I just want to make sure that this isn't merged before that's settled! I also don't mind sending a PR to the reference-types proposal with an update of encodings too!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,938,2018-10-29T17:36:11Z,2019-02-14T17:07:03Z,2019-02-15T15:14:32Z,MERGED,True,10607,9768,60,https://github.com/alexcrichton,Add support for the reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/938,https://github.com/alexcrichton,3,https://github.com/WebAssembly/wabt/pull/938#issuecomment-434007220,"This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.","Oh I should also mentioned that this goes ahead and uses the renamings proposed of table.{get,set,grow} rather than get_table and set_table and such",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,938,2018-10-29T17:36:11Z,2019-02-14T17:07:03Z,2019-02-15T15:14:32Z,MERGED,True,10607,9768,60,https://github.com/alexcrichton,Add support for the reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/938,https://github.com/alexcrichton,4,https://github.com/WebAssembly/wabt/pull/938#issuecomment-434040831,"This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.",Oh hm I'm also not entirely sure where travis is going awry with the asmjs build (I think?). Is there perhaps a file I need to regenerate somewhere as well?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,938,2018-10-29T17:36:11Z,2019-02-14T17:07:03Z,2019-02-15T15:14:32Z,MERGED,True,10607,9768,60,https://github.com/alexcrichton,Add support for the reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/938,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/938#issuecomment-434392240,"This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.","Oh hm I'm also not entirely sure where travis is going awry with the asmjs build (I think?).

It's an unrelated error, I believe. I filed a bug here: #939",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,938,2018-10-29T17:36:11Z,2019-02-14T17:07:03Z,2019-02-15T15:14:32Z,MERGED,True,10607,9768,60,https://github.com/alexcrichton,Add support for the reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/938,https://github.com/lars-t-hansen,6,https://github.com/WebAssembly/wabt/pull/938#issuecomment-434632425,"This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.","I think there are many open questions around encoding.  I have filed a bug here: WebAssembly/reference-types#18 to get some eyes on this.  Basically, the bulk memory ops will require work for multi-table support and we could usefully coordinate the encodings between the two proposals.  I'll file a similar bug for bulk memory.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,938,2018-10-29T17:36:11Z,2019-02-14T17:07:03Z,2019-02-15T15:14:32Z,MERGED,True,10607,9768,60,https://github.com/alexcrichton,Add support for the reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/938,https://github.com/alexcrichton,7,https://github.com/WebAssembly/wabt/pull/938#issuecomment-463360715,"This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.","Ok I've rebased over the changes that have happened inbetween since this started, and I was curious if perhaps since the binary encoding is still in-the-air-but-implemented-in-a-few-places it might be good to get this in as a starting point and the binary format can be tweaked as the spec evolves?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,938,2018-10-29T17:36:11Z,2019-02-14T17:07:03Z,2019-02-15T15:14:32Z,MERGED,True,10607,9768,60,https://github.com/alexcrichton,Add support for the reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/938,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/938#issuecomment-463363613,"This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.","Yes, I think we probably should (same as with other in-progress proposals). See further discussion about the instruction encoding here: WebAssembly/reference-types#29",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,938,2018-10-29T17:36:11Z,2019-02-14T17:07:03Z,2019-02-15T15:14:32Z,MERGED,True,10607,9768,60,https://github.com/alexcrichton,Add support for the reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/938,https://github.com/alexcrichton,9,https://github.com/WebAssembly/wabt/pull/938#issuecomment-463668903,"This commit adds support for the reference types proposal to wabt.
Namely it adds new opcodes like table.{get,set,grow} as well as adds a
new anyref type. These are plumbed throughout for various operations
in relatively simple fashions, no support was added for a subtyping
relationship between anyref and anyfunc just yet.
This also raises the restriction that multiple tables are disallowed,
allowing multiple tables to exist when --enable-reference-types is
passed.","Ok thanks for the review! I think I've covered all those points and increased the test coverage some more as well (embarassing bugs!)
I've also gone ahead and updated all the encodings to match the latest proposal in WebAssembly/reference-types#29 which looks to be the way forward",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,940,2018-10-30T20:00:13Z,2018-10-30T23:19:27Z,2018-10-30T23:19:29Z,MERGED,True,79,0,2,https://github.com/binji,Set `end_loc` in folded `if` expressions,1,[],https://github.com/WebAssembly/wabt/pull/940,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/940,"Without this fix, some validation errors will not display the location
properly.","Without this fix, some validation errors will not display the location
properly.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,941,2018-10-30T22:09:16Z,2018-11-01T17:28:13Z,2018-11-01T17:28:16Z,MERGED,True,3,0,1,https://github.com/binji,Add `dummy_workaround_...` function to fix Travis,1,[],https://github.com/WebAssembly/wabt/pull/941,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/941,"Newer versions of emscripten will error out if you attempt to export
functions that aren't defined.
We added a dummy function to the export list to work around emscripten
issue 7073. It's fixed now, but we may want to keep this workaround for
a bit to allow for non-HEAD emscripten versions.
Fixes #939.","Newer versions of emscripten will error out if you attempt to export
functions that aren't defined.
We added a dummy function to the export list to work around emscripten
issue 7073. It's fixed now, but we may want to keep this workaround for
a bit to allow for non-HEAD emscripten versions.
Fixes #939.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,942,2018-11-01T19:45:23Z,2018-11-05T19:59:15Z,2018-11-05T19:59:19Z,MERGED,True,387,344,32,https://github.com/binji,Update testsuite,2,[],https://github.com/WebAssembly/wabt/pull/942,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/942,"Also fix bug when parsing elem/data segment; the table/memory index is
stored as an LEB128, not a U8.","Also fix bug when parsing elem/data segment; the table/memory index is
stored as an LEB128, not a U8.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,952,2018-11-06T19:23:16Z,2018-11-06T19:23:29Z,2018-11-06T19:24:11Z,MERGED,True,6,0,1,https://github.com/binji,Add note about building using Makefile,1,[],https://github.com/WebAssembly/wabt/pull/952,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/952,"Apparently some systems have trouble building using the Makefile, but can build using CMake directly (see #951, #822, and others). This will at least give some clues about how to work around the bug.","Apparently some systems have trouble building using the Makefile, but can build using CMake directly (see #951, #822, and others). This will at least give some clues about how to work around the bug.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,953,2018-11-07T22:18:45Z,2018-11-08T00:22:02Z,2018-11-08T00:22:05Z,MERGED,True,170,170,17,https://github.com/binji,Update to the lastest spec testsuite,1,[],https://github.com/WebAssembly/wabt/pull/953,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/953,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,954,2018-11-09T13:45:27Z,2018-11-14T22:28:33Z,2018-11-14T22:28:33Z,MERGED,True,1313,1313,6,https://github.com/mikevoronov,Remove the redundant $ from (i32/i64/f32/f64/v128).const instructions in disassemble and trace views,4,[],https://github.com/WebAssembly/wabt/pull/954,https://github.com/mikevoronov,1,https://github.com/WebAssembly/wabt/pull/954,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,954,2018-11-09T13:45:27Z,2018-11-14T22:28:33Z,2018-11-14T22:28:33Z,MERGED,True,1313,1313,6,https://github.com/mikevoronov,Remove the redundant $ from (i32/i64/f32/f64/v128).const instructions in disassemble and trace views,4,[],https://github.com/WebAssembly/wabt/pull/954,https://github.com/mikevoronov,2,https://github.com/WebAssembly/wabt/pull/954#issuecomment-438834602,,"Yes, just did it. Thank you!",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,955,2018-11-13T23:58:17Z,2018-11-15T00:17:44Z,2018-11-15T00:17:47Z,MERGED,True,102,0,8,https://github.com/sbc100,Add support for dylink section,3,[],https://github.com/WebAssembly/wabt/pull/955,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/955,See: https://github.com/WebAssembly/tool-conventions/blob/master/DynamicLinking.md,See: https://github.com/WebAssembly/tool-conventions/blob/master/DynamicLinking.md,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,956,2018-11-14T23:43:16Z,2018-11-15T04:56:01Z,2018-11-15T04:56:01Z,MERGED,True,5075,5075,3,https://github.com/tlively,Renumber SIMD instructions,4,[],https://github.com/WebAssembly/wabt/pull/956,https://github.com/tlively,1,https://github.com/WebAssembly/wabt/pull/956,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,956,2018-11-14T23:43:16Z,2018-11-15T04:56:01Z,2018-11-15T04:56:01Z,MERGED,True,5075,5075,3,https://github.com/tlively,Renumber SIMD instructions,4,[],https://github.com/WebAssembly/wabt/pull/956,https://github.com/tlively,2,https://github.com/WebAssembly/wabt/pull/956#issuecomment-438860942,,"I forgot tests, brb.",True,{'THUMBS_UP': ['https://github.com/dtig']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,956,2018-11-14T23:43:16Z,2018-11-15T04:56:01Z,2018-11-15T04:56:01Z,MERGED,True,5075,5075,3,https://github.com/tlively,Renumber SIMD instructions,4,[],https://github.com/WebAssembly/wabt/pull/956,https://github.com/tlively,3,https://github.com/WebAssembly/wabt/pull/956#issuecomment-438880913,,"Ok, tests updated. PTAL.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,957,2018-11-15T05:04:07Z,2018-11-19T23:05:50Z,2018-11-19T23:06:47Z,MERGED,True,1555,0,10,https://github.com/tlively,Support for SIMD instructions in wasm-objdump,1,[],https://github.com/WebAssembly/wabt/pull/957,https://github.com/tlively,1,https://github.com/WebAssembly/wabt/pull/957,Tests shamelessly borrowed with light editing from test/interp.,Tests shamelessly borrowed with light editing from test/interp.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,958,2018-11-19T23:56:06Z,2018-11-20T01:32:44Z,2018-11-20T01:32:46Z,MERGED,True,731,502,14,https://github.com/binji,Fix wasm-objdump binary opcode output,1,[],https://github.com/WebAssembly/wabt/pull/958,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/958,"Some instructions have very long encodings (longer than 9 bytes). For
those instructions, it is nice to write out all the bytes for that
instruction and their immediates. This used to be truncated, and
misaligned:
0002f1: fd 02 01 00 00 00 02 00 00 00 03 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004

Now it is wrapped:
0002f0: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
0002f9: 00 03 00 00 00 04 00 00 00 |

The instruction offset was also incorrect before for instructions with
a prefix, and is now fixed.","Some instructions have very long encodings (longer than 9 bytes). For
those instructions, it is nice to write out all the bytes for that
instruction and their immediates. This used to be truncated, and
misaligned:
0002f1: fd 02 01 00 00 00 02 00 00 00 03 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004

Now it is wrapped:
0002f0: fd 02 01 00 00 00 02 00 00 | v128.const 0x00000001 0x00000002 0x00000003 0x00000004
0002f9: 00 03 00 00 00 04 00 00 00 |

The instruction offset was also incorrect before for instructions with
a prefix, and is now fixed.",True,{'HOORAY': ['https://github.com/tlively']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,959,2018-11-28T01:26:01Z,2018-11-28T08:10:51Z,2018-11-28T08:10:54Z,MERGED,True,40,0,5,https://github.com/binji,Handle mismatch in function/code section,1,[],https://github.com/WebAssembly/wabt/pull/959,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/959,"If the function section is present, and has a non-zero count, then if
the code section is absent the module should not validate.
If either section is missing, but the count is zero it is OK.","If the function section is present, and has a non-zero count, then if
the code section is absent the module should not validate.
If either section is missing, but the count is zero it is OK.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,960,2018-11-29T02:32:40Z,2018-11-29T08:53:21Z,2018-11-29T08:53:24Z,MERGED,True,17,2,2,https://github.com/sbc100,wasm-objdump: Print name of global when disassembly get/set_global,2,[],https://github.com/WebAssembly/wabt/pull/960,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/960,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,963,2018-11-29T20:15:02Z,2018-11-29T22:30:07Z,2018-11-29T22:30:10Z,MERGED,True,4,12,1,https://github.com/sbc100,wasm-objdump: Cleanup hanlding of global names from #960,1,[],https://github.com/WebAssembly/wabt/pull/963,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/963,This is way I should have implement it the first time around,This is way I should have implement it the first time around,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,964,2018-11-30T09:27:29Z,2018-11-30T19:40:48Z,2018-11-30T19:40:51Z,MERGED,True,111,5,6,https://github.com/binji,Run more proposal spec tests,1,[],https://github.com/WebAssembly/wabt/pull/964,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/964,"These tests are already included in third_party/testsuite. The
update-spec-tests.py script just needs to be updated to include them.","These tests are already included in third_party/testsuite. The
update-spec-tests.py script just needs to be updated to include them.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,968,2018-12-03T23:58:22Z,2018-12-04T07:10:12Z,2018-12-04T07:10:15Z,MERGED,True,51,11,3,https://github.com/binji,Rename duplicate locals,1,[],https://github.com/WebAssembly/wabt/pull/968,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/968,"Similar to PR #512, duplicate locals are allowed in the names section,
but will produce an invalid wat file. We could support these properly
with custom annotations, but that isn't available yet. In the meantime,
we follow the same before as with functions and append .1, .2, etc
to the names to make them unique.","Similar to PR #512, duplicate locals are allowed in the names section,
but will produce an invalid wat file. We could support these properly
with custom annotations, but that isn't available yet. In the meantime,
we follow the same before as with functions and append .1, .2, etc
to the names to make them unique.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,969,2018-12-04T11:05:50Z,2018-12-04T20:19:55Z,2018-12-04T20:19:59Z,MERGED,True,103,130,14,https://github.com/binji,Combine param_binding and local_binding in IR,1,[],https://github.com/WebAssembly/wabt/pull/969,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/969,"The BindingHash object is used to map from a name to an Index, and to
detect multiply-defined names. Since the locals and params use the same
Index space and namespace, they should always have been using the same
BindingHash.","The BindingHash object is used to map from a name to an Index, and to
detect multiply-defined names. Since the locals and params use the same
Index space and namespace, they should always have been using the same
BindingHash.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,970,2018-12-05T00:22:36Z,2019-02-25T00:41:09Z,2019-02-25T00:41:39Z,CLOSED,False,1452,486,11,https://github.com/binji,Replace string_view with string-view-lite,3,[],https://github.com/WebAssembly/wabt/pull/970,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/970,"There are many string_view implementations that we could use, but
string-view-lite is convenient since it is provided as a single header
file library.
There are also other *-lite libraries that we may want to add as well:
variant, expected, etc.","There are many string_view implementations that we could use, but
string-view-lite is convenient since it is provided as a single header
file library.
There are also other *-lite libraries that we may want to add as well:
variant, expected, etc.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,970,2018-12-05T00:22:36Z,2019-02-25T00:41:09Z,2019-02-25T00:41:39Z,CLOSED,False,1452,486,11,https://github.com/binji,Replace string_view with string-view-lite,3,[],https://github.com/WebAssembly/wabt/pull/970,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/970#issuecomment-466835947,"There are many string_view implementations that we could use, but
string-view-lite is convenient since it is provided as a single header
file library.
There are also other *-lite libraries that we may want to add as well:
variant, expected, etc.",I'm not sure we should do this now... closing PR.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,971,2018-12-05T05:59:29Z,2018-12-10T22:43:42Z,2018-12-10T22:43:43Z,CLOSED,False,100,519,22,https://github.com/binji,Add Abseil; use its string_view implementation,3,[],https://github.com/WebAssembly/wabt/pull/971,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/971,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,971,2018-12-05T05:59:29Z,2018-12-10T22:43:42Z,2018-12-10T22:43:43Z,CLOSED,False,100,519,22,https://github.com/binji,Add Abseil; use its string_view implementation,3,[],https://github.com/WebAssembly/wabt/pull/971,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/971#issuecomment-446002703,,"Discussing this with some other folks, it sounds like introducing an abseil dependency might put too much burden on users.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,973,2018-12-12T11:28:25Z,2018-12-12T19:43:23Z,2018-12-16T11:42:11Z,MERGED,True,7,7,6,https://github.com/rrrapha,Fix SYNOPSIS in manpages,1,[],https://github.com/WebAssembly/wabt/pull/973,https://github.com/rrrapha,1,https://github.com/WebAssembly/wabt/pull/973,"Before: wasm-objdump [options] filename
After: wasm-objdump [options] file ...
Also document '-h' in wasm-objdump.1","Before: wasm-objdump [options] filename
After: wasm-objdump [options] file ...
Also document '-h' in wasm-objdump.1",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,973,2018-12-12T11:28:25Z,2018-12-12T19:43:23Z,2018-12-16T11:42:11Z,MERGED,True,7,7,6,https://github.com/rrrapha,Fix SYNOPSIS in manpages,1,[],https://github.com/WebAssembly/wabt/pull/973,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/973#issuecomment-446718250,"Before: wasm-objdump [options] filename
After: wasm-objdump [options] file ...
Also document '-h' in wasm-objdump.1",Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,974,2018-12-12T22:18:55Z,2018-12-12T23:48:36Z,2018-12-12T23:48:43Z,MERGED,True,43,1,7,https://github.com/sbc100,Add needed_dynlibs to dylink section,2,[],https://github.com/WebAssembly/wabt/pull/974,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/974,"This field was recently added:
https://github.com/WebAssembly/tool-conventions/blob/master/DynamicLinking.md","This field was recently added:
https://github.com/WebAssembly/tool-conventions/blob/master/DynamicLinking.md",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,975,2018-12-12T22:47:27Z,2018-12-13T01:03:24Z,2018-12-13T01:03:26Z,MERGED,True,689,658,106,https://github.com/binji,Pass function body size in BinaryReader callback,1,[],https://github.com/WebAssembly/wabt/pull/975,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/975,This is useful for finding large functions with wasm-objdump.,This is useful for finding large functions with wasm-objdump.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,975,2018-12-12T22:47:27Z,2018-12-13T01:03:24Z,2018-12-13T01:03:26Z,MERGED,True,689,658,106,https://github.com/binji,Pass function body size in BinaryReader callback,1,[],https://github.com/WebAssembly/wabt/pull/975,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/975#issuecomment-446773769,This is useful for finding large functions with wasm-objdump.,"This also changes the address printed for a function; the previous location included the body size, this doesn't. I think it makes more sense not to include the size, similar to sections.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,976,2018-12-14T13:48:50Z,2018-12-14T16:14:07Z,2018-12-14T16:33:13Z,CLOSED,False,22,0,1,https://github.com/deltova,error handling: corrected error with directory,1,[],https://github.com/WebAssembly/wabt/pull/976,https://github.com/deltova,1,https://github.com/WebAssembly/wabt/pull/976,"This commit is fixing the error with directory as parameter of objdump.
The error is fixed with a stat on the file and checking the type of file
that is given. #962","This commit is fixing the error with directory as parameter of objdump.
The error is fixed with a stat on the file and checking the type of file
that is given. #962",True,"{'THUMBS_UP': ['https://github.com/utay', 'https://github.com/mevouc', 'https://github.com/maximeyuxihuang'], 'LAUGH': ['https://github.com/utay', 'https://github.com/mevouc', 'https://github.com/maximeyuxihuang'], 'HOORAY': ['https://github.com/utay', 'https://github.com/mevouc', 'https://github.com/maximeyuxihuang'], 'HEART': ['https://github.com/utay', 'https://github.com/mevouc', 'https://github.com/maximeyuxihuang']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,979,2018-12-16T17:10:28Z,2018-12-17T19:12:22Z,2018-12-20T08:55:25Z,MERGED,True,395,54,11,https://github.com/rrrapha,"Add missing manpages, fix markup for references, links and examples",1,[],https://github.com/WebAssembly/wabt/pull/979,https://github.com/rrrapha,1,https://github.com/WebAssembly/wabt/pull/979,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,979,2018-12-16T17:10:28Z,2018-12-17T19:12:22Z,2018-12-20T08:55:25Z,MERGED,True,395,54,11,https://github.com/rrrapha,"Add missing manpages, fix markup for references, links and examples",1,[],https://github.com/WebAssembly/wabt/pull/979,https://github.com/rrrapha,2,https://github.com/WebAssembly/wabt/pull/979#issuecomment-447659661,,"BTW, it is possible to generate nicely formatted markdown or html from the manpages.
For example:
$ mandoc -T markdown wasm-interp.1
$ mandoc -T html -O man=%N.%S.html wasm-interp.1",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,982,2018-12-17T18:41:19Z,2018-12-17T19:33:07Z,2019-01-16T17:43:42Z,MERGED,True,11,2,1,https://github.com/binji,Add WERROR option to CMake build,1,[],https://github.com/WebAssembly/wabt/pull/982,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/982,"We shouldn't compile with -Werror or -WX by default, it is useful
for wabt developers but hostile to users.
Fixes issue #980.","We shouldn't compile with -Werror or -WX by default, it is useful
for wabt developers but hostile to users.
Fixes issue #980.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,982,2018-12-17T18:41:19Z,2018-12-17T19:33:07Z,2019-01-16T17:43:42Z,MERGED,True,11,2,1,https://github.com/binji,Add WERROR option to CMake build,1,[],https://github.com/WebAssembly/wabt/pull/982,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/982#issuecomment-454869424,"We shouldn't compile with -Werror or -WX by default, it is useful
for wabt developers but hostile to users.
Fixes issue #980.","But we should enable this option in all out CI, no?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,982,2018-12-17T18:41:19Z,2018-12-17T19:33:07Z,2019-01-16T17:43:42Z,MERGED,True,11,2,1,https://github.com/binji,Add WERROR option to CMake build,1,[],https://github.com/WebAssembly/wabt/pull/982,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/982#issuecomment-454872311,"We shouldn't compile with -Werror or -WX by default, it is useful
for wabt developers but hostile to users.
Fixes issue #980.","Yes, I suppose so.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,983,2018-12-17T19:31:58Z,2018-12-17T19:32:06Z,2018-12-17T19:32:09Z,MERGED,True,11,6,1,https://github.com/binji,Add link to generated man pages in README.md,1,[],https://github.com/WebAssembly/wabt/pull/983,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/983,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,984,2018-12-18T07:57:30Z,2018-12-18T17:27:19Z,2018-12-18T17:27:22Z,MERGED,True,87,18,2,https://github.com/binji,Fold multi-value results properly,1,[],https://github.com/WebAssembly/wabt/pull/984,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/984,"Expressions need to be treated specially when folding an expression
with a result count > 1. Since the expression cannot be split, we can
only include it as a child of another expression if all of its values
are used, for example:
(func $dup (result i32 i32) ...)

(call $dup)  ;; produces two values
(i32.add)    ;; consumes two values","Expressions need to be treated specially when folding an expression
with a result count > 1. Since the expression cannot be split, we can
only include it as a child of another expression if all of its values
are used, for example:
(func $dup (result i32 i32) ...)

(call $dup)  ;; produces two values
(i32.add)    ;; consumes two values",True,{'THUMBS_UP': ['https://github.com/nomeata']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,984,2018-12-18T07:57:30Z,2018-12-18T17:27:19Z,2018-12-18T17:27:22Z,MERGED,True,87,18,2,https://github.com/binji,Fold multi-value results properly,1,[],https://github.com/WebAssembly/wabt/pull/984,https://github.com/nomeata,2,https://github.com/WebAssembly/wabt/pull/984#issuecomment-448249076,"Expressions need to be treated specially when folding an expression
with a result count > 1. Since the expression cannot be split, we can
only include it as a child of another expression if all of its values
are used, for example:
(func $dup (result i32 i32) ...)

(call $dup)  ;; produces two values
(i32.add)    ;; consumes two values",LGTM.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,985,2018-12-19T01:09:43Z,2018-12-19T20:36:52Z,2019-05-18T19:15:29Z,MERGED,True,17783,16684,118,https://github.com/binji, The great renaming,2,[],https://github.com/WebAssembly/wabt/pull/985,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/985,"This huge PR does all the renaming as described in issue #933. It also
updates to the latest testsuite so the new names are used.
The old names of the MVP instructions are still supported for
convenience (though we should remove those too at some point), but the
old simd and atomic instruction names are no longer supported.","This huge PR does all the renaming as described in issue #933. It also
updates to the latest testsuite so the new names are used.
The old names of the MVP instructions are still supported for
convenience (though we should remove those too at some point), but the
old simd and atomic instruction names are no longer supported.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,985,2018-12-19T01:09:43Z,2018-12-19T20:36:52Z,2019-05-18T19:15:29Z,MERGED,True,17783,16684,118,https://github.com/binji, The great renaming,2,[],https://github.com/WebAssembly/wabt/pull/985,https://github.com/Horcrux7,2,https://github.com/WebAssembly/wabt/pull/985#issuecomment-448678362,"This huge PR does all the renaming as described in issue #933. It also
updates to the latest testsuite so the new names are used.
The old names of the MVP instructions are still supported for
convenience (though we should remove those too at some point), but the
old simd and atomic instruction names are no longer supported.","Is there a command line switch to disable the old naming? Also for libwabt.js?
Without such switch it is difficult to check if the migration is 100% complete.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,985,2018-12-19T01:09:43Z,2018-12-19T20:36:52Z,2019-05-18T19:15:29Z,MERGED,True,17783,16684,118,https://github.com/binji, The great renaming,2,[],https://github.com/WebAssembly/wabt/pull/985,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/985#issuecomment-448729662,"This huge PR does all the renaming as described in issue #933. It also
updates to the latest testsuite so the new names are used.
The old names of the MVP instructions are still supported for
convenience (though we should remove those too at some point), but the
old simd and atomic instruction names are no longer supported.","There isn't, but you're right that would be a convenient switch to add. I'll look into that today.",True,{'THUMBS_UP': ['https://github.com/Horcrux7']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,985,2018-12-19T01:09:43Z,2018-12-19T20:36:52Z,2019-05-18T19:15:29Z,MERGED,True,17783,16684,118,https://github.com/binji, The great renaming,2,[],https://github.com/WebAssembly/wabt/pull/985,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/985#issuecomment-448735367,"This huge PR does all the renaming as described in issue #933. It also
updates to the latest testsuite so the new names are used.
The old names of the MVP instructions are still supported for
convenience (though we should remove those too at some point), but the
old simd and atomic instruction names are no longer supported.","I think I'll handle that flag in another PR, to keep this change as being primarily renaming.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,985,2018-12-19T01:09:43Z,2018-12-19T20:36:52Z,2019-05-18T19:15:29Z,MERGED,True,17783,16684,118,https://github.com/binji, The great renaming,2,[],https://github.com/WebAssembly/wabt/pull/985,https://github.com/cggallant,5,https://github.com/WebAssembly/wabt/pull/985#issuecomment-493634273,"This huge PR does all the renaming as described in issue #933. It also
updates to the latest testsuite so the new names are used.
The old names of the MVP instructions are still supported for
convenience (though we should remove those too at some point), but the
old simd and atomic instruction names are no longer supported.","Are there plans to push these changes to the wat2wasm demo? https://cdn.rawgit.com/WebAssembly/wabt/aae5a4b7/demo/wat2wasm/
When I try using local.get rather than get_local, I receive the following error:
error: unexpected token local.get, expected get_local.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,985,2018-12-19T01:09:43Z,2018-12-19T20:36:52Z,2019-05-18T19:15:29Z,MERGED,True,17783,16684,118,https://github.com/binji, The great renaming,2,[],https://github.com/WebAssembly/wabt/pull/985,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/985#issuecomment-493700481,"This huge PR does all the renaming as described in issue #933. It also
updates to the latest testsuite so the new names are used.
The old names of the MVP instructions are still supported for
convenience (though we should remove those too at some point), but the
old simd and atomic instruction names are no longer supported.","@cggallant that is an old link, back when we used rawgit (which is being turned down). The new link is https://webassembly.github.io/wabt/demo/wat2wasm/, and supports the new and old names.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,986,2018-12-19T21:01:21Z,2018-12-20T22:29:28Z,2018-12-20T22:29:31Z,MERGED,True,0,16,3,https://github.com/binji,"Remove the {assert,stdlib}.h includes in wasm2c",1,[],https://github.com/WebAssembly/wabt/pull/986,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/986,They don't seem to be used anymore.,They don't seem to be used anymore.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,990,2018-12-20T22:01:59Z,2018-12-20T23:55:00Z,2018-12-20T23:55:02Z,MERGED,True,10,2,2,https://github.com/binji,Fix segfault when running `wat2wasm -d`,1,[],https://github.com/WebAssembly/wabt/pull/990,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/990,Fixes issue #989.,Fixes issue #989.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,991,2018-12-20T22:51:16Z,2019-01-07T23:40:28Z,2019-01-07T23:40:30Z,MERGED,True,26,2,2,https://github.com/binji,Fix segfault when passing wasm-objdump a directory,1,[],https://github.com/WebAssembly/wabt/pull/991,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/991,Fixes issue #962.,Fixes issue #962.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,993,2019-01-08T16:46:08Z,2019-01-10T07:58:09Z,2019-01-10T07:58:12Z,MERGED,True,14,14,1,https://github.com/binji,Only look for python when building tests,1,[],https://github.com/WebAssembly/wabt/pull/993,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/993,"Some systems don't have python installed, and if they don't build tests,
they won't ever need it.","Some systems don't have python installed, and if they don't build tests,
they won't ever need it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,996,2019-01-16T22:19:42Z,2019-01-17T19:02:51Z,2019-01-17T19:20:04Z,MERGED,True,34,32,9,https://github.com/sbc100,Update linking metadata version,1,[],https://github.com/WebAssembly/wabt/pull/996,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/996,"Also make explicit when are showing log2 alignment.
We could instead display actual byte alignment (1 << p2align)?","Also make explicit when are showing log2 alignment.
We could instead display actual byte alignment (1 << p2align)?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,997,2019-01-21T10:54:42Z,2019-01-21T10:56:16Z,2019-01-21T10:56:19Z,MERGED,True,25,18,1,https://github.com/binji,Clarify build instructions in README.md,1,[],https://github.com/WebAssembly/wabt/pull/997,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/997,See issue #992.,See issue #992.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,998,2019-01-22T21:44:17Z,2019-01-23T23:12:43Z,2019-01-23T23:12:45Z,MERGED,True,220,47,19,https://github.com/binji,Implement parsing and writing of DataCount section,1,[],https://github.com/WebAssembly/wabt/pull/998,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/998,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,999,2019-01-29T19:24:38Z,2019-01-29T20:09:51Z,2019-01-29T20:10:20Z,MERGED,True,39,30,3,https://github.com/alexcrichton,Update bulk memory instruction binary encodings,1,[],https://github.com/WebAssembly/wabt/pull/999,https://github.com/alexcrichton,1,https://github.com/WebAssembly/wabt/pull/999,"This commit updates wabt wrt to two recent PRs:

WebAssembly/bulk-memory-operations#43
WebAssembly/bulk-memory-operations#45","This commit updates wabt wrt to two recent PRs:

WebAssembly/bulk-memory-operations#43
WebAssembly/bulk-memory-operations#45",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1000,2019-01-29T20:58:23Z,2019-01-30T17:23:04Z,2019-01-30T17:28:55Z,MERGED,True,9796,9907,38,https://github.com/alexcrichton,"Rename {memory,table}.drop to {data,elem}.drop",1,[],https://github.com/WebAssembly/wabt/pull/1000,https://github.com/alexcrichton,1,https://github.com/WebAssembly/wabt/pull/1000,Carrying over renames from WebAssembly/bulk-memory-operations#46,Carrying over renames from WebAssembly/bulk-memory-operations#46,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1000,2019-01-29T20:58:23Z,2019-01-30T17:23:04Z,2019-01-30T17:28:55Z,MERGED,True,9796,9907,38,https://github.com/alexcrichton,"Rename {memory,table}.drop to {data,elem}.drop",1,[],https://github.com/WebAssembly/wabt/pull/1000,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1000#issuecomment-458769751,Carrying over renames from WebAssembly/bulk-memory-operations#46,Thanks! I think you need to update the prebuilt lexer to fix these errors.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1000,2019-01-29T20:58:23Z,2019-01-30T17:23:04Z,2019-01-30T17:28:55Z,MERGED,True,9796,9907,38,https://github.com/alexcrichton,"Rename {memory,table}.drop to {data,elem}.drop",1,[],https://github.com/WebAssembly/wabt/pull/1000,https://github.com/alexcrichton,3,https://github.com/WebAssembly/wabt/pull/1000#issuecomment-458983328,Carrying over renames from WebAssembly/bulk-memory-operations#46,"Oops, I think it should be updated now",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1001,2019-01-31T20:30:57Z,2019-01-31T20:41:46Z,2019-01-31T20:41:46Z,MERGED,True,2,3,1,https://github.com/wasserfuhr,updated 404 links,1,[],https://github.com/WebAssembly/wabt/pull/1001,https://github.com/wasserfuhr,1,https://github.com/WebAssembly/wabt/pull/1001,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1003,2019-02-01T23:24:39Z,2019-02-02T00:49:18Z,2019-02-02T00:49:20Z,MERGED,True,28,9,2,https://github.com/binji,Return failed tests count from spectest-interp,1,[],https://github.com/WebAssembly/wabt/pull/1003,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1003,"spectest-interp used to return 0 (success) when tests failed, and
non-zero only if the source could not be parsed. It's more useful to
return non-zero if the tests fail too.
Fixes issue #1002.","spectest-interp used to return 0 (success) when tests failed, and
non-zero only if the source could not be parsed. It's more useful to
return non-zero if the tests fail too.
Fixes issue #1002.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1004,2019-02-05T20:59:09Z,2019-02-05T22:03:04Z,2019-02-05T22:03:07Z,MERGED,True,157,157,20,https://github.com/sbc100,wasm-objdump: Always show function numbers along with names,1,[],https://github.com/WebAssembly/wabt/pull/1004,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1004,Since names are not always unique.,Since names are not always unique.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1005,2019-02-06T20:39:22Z,2019-02-06T22:04:59Z,2019-02-06T22:05:05Z,MERGED,True,9,9,3,https://github.com/sbc100,Rename relocation types,1,[],https://github.com/WebAssembly/wabt/pull/1005,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1005,See WebAssembly/tool-conventions#95,See WebAssembly/tool-conventions#95,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1007,2019-02-08T06:36:31Z,2019-02-08T19:18:28Z,2019-02-08T19:18:28Z,MERGED,True,3,0,1,https://github.com/EugeneChung,avoid Mac OS X ranlib error,1,[],https://github.com/WebAssembly/wabt/pull/1007,https://github.com/EugeneChung,1,https://github.com/WebAssembly/wabt/pull/1007,"#992
[ 49%] Linking CXX static library libwabt.a
/Library/Developer/CommandLineTools/usr/bin/ranlib: file: libwabt.a(config.cc.o) has no symbols
/Library/Developer/CommandLineTools/usr/bin/ranlib: file: libwabt.a(config.cc.o) has no symbols
There's some environmental issues which is not clear with Mac OS X ranlib and empty symbol sources.
If we add a dummy function to config.cc for clang, the ranlib error can be avoided easily with no harm.","#992
[ 49%] Linking CXX static library libwabt.a
/Library/Developer/CommandLineTools/usr/bin/ranlib: file: libwabt.a(config.cc.o) has no symbols
/Library/Developer/CommandLineTools/usr/bin/ranlib: file: libwabt.a(config.cc.o) has no symbols
There's some environmental issues which is not clear with Mac OS X ranlib and empty symbol sources.
If we add a dummy function to config.cc for clang, the ranlib error can be avoided easily with no harm.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1009,2019-02-09T00:44:10Z,2019-02-11T06:17:16Z,2019-02-11T06:17:19Z,MERGED,True,5250,6124,39,https://github.com/binji,Remove the `if_except` instruction,2,[],https://github.com/WebAssembly/wabt/pull/1009,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1009,It is no longer part of the exception proposal.,It is no longer part of the exception proposal.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1010,2019-02-11T03:16:42Z,2019-02-11T06:18:58Z,2019-02-11T17:42:51Z,MERGED,True,1,0,1,https://github.com/thewtex,Add missing string.h include to wasm-rt-impl.c,1,[],https://github.com/WebAssembly/wabt/pull/1010,https://github.com/thewtex,1,https://github.com/WebAssembly/wabt/pull/1010,"Addresses:
gcc -I/tmp/wabt/wasm2c -O3 /tmp/wabt/wasm2c/wasm-rt-impl.c -o wasm-rt-impl.o
/tmp/wabt/wasm2c/wasm-rt-impl.c: In function ‘wasm_rt_grow_memory’:
/tmp/wabt/wasm2c/wasm-rt-impl.c:111:3: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
memset(memory->data + old_pages * PAGE_SIZE, 0, delta * PAGE_SIZE);
^~~~~~
/tmp/wabt/wasm2c/wasm-rt-impl.c:111:3: warning: incompatible implicit declaration of built-in function ‘memset’
/tmp/wabt/wasm2c/wasm-rt-impl.c:111:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
/usr/lib/gcc/x86_64-linux-gnu/6/../../../x86_64-linux-gnu/Scrt1.o: In function _start': (.text+0x20): undefined reference to main'
with gcc (Debian 6.3.0-18+deb9u1).","Addresses:
gcc -I/tmp/wabt/wasm2c -O3 /tmp/wabt/wasm2c/wasm-rt-impl.c -o wasm-rt-impl.o
/tmp/wabt/wasm2c/wasm-rt-impl.c: In function ‘wasm_rt_grow_memory’:
/tmp/wabt/wasm2c/wasm-rt-impl.c:111:3: warning: implicit declaration of function ‘memset’ [-Wimplicit-function-declaration]
memset(memory->data + old_pages * PAGE_SIZE, 0, delta * PAGE_SIZE);
^~~~~~
/tmp/wabt/wasm2c/wasm-rt-impl.c:111:3: warning: incompatible implicit declaration of built-in function ‘memset’
/tmp/wabt/wasm2c/wasm-rt-impl.c:111:3: note: include ‘<string.h>’ or provide a declaration of ‘memset’
/usr/lib/gcc/x86_64-linux-gnu/6/../../../x86_64-linux-gnu/Scrt1.o: In function _start': (.text+0x20): undefined reference to main'
with gcc (Debian 6.3.0-18+deb9u1).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1012,2019-02-12T02:16:16Z,2019-02-12T03:45:07Z,2019-02-12T03:45:09Z,MERGED,True,99,81,9,https://github.com/binji,Add `Event` known section; remove `exception`,1,[],https://github.com/WebAssembly/wabt/pull/1012,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1012,"The exception section is now a known section with code 13, and is known
as the ""Event"" section.
The structure of the section has changed too, but I'll fix that in
another PR.","The exception section is now a known section with code 13, and is known
as the ""Event"" section.
The structure of the section has changed too, but I'll fix that in
another PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1013,2019-02-12T04:15:25Z,2019-02-12T05:48:54Z,2019-02-12T05:48:58Z,MERGED,True,1377,1380,36,https://github.com/binji,Rename exception -> event,1,[],https://github.com/WebAssembly/wabt/pull/1013,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1013,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1014,2019-02-12T08:24:19Z,2019-02-12T22:41:35Z,2019-02-12T23:27:00Z,MERGED,True,336,257,30,https://github.com/binji,Parse updated event text and binary format,1,[],https://github.com/WebAssembly/wabt/pull/1014,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1014,"An event has a type-section index, like a function definition. The
current proposal doesn't specify the text format, so I assumed that it
would match the format of the other sections that reference function
types. This means that the following declaration styles are allowed:
(type $t (func (param i32)))
(event $e1 (type $t))
(event $e2 (param f32))","An event has a type-section index, like a function definition. The
current proposal doesn't specify the text format, so I assumed that it
would match the format of the other sections that reference function
types. This means that the following declaration styles are allowed:
(type $t (func (param i32)))
(event $e1 (type $t))
(event $e2 (param f32))",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1014,2019-02-12T08:24:19Z,2019-02-12T22:41:35Z,2019-02-12T23:27:00Z,MERGED,True,336,257,30,https://github.com/binji,Parse updated event text and binary format,1,[],https://github.com/WebAssembly/wabt/pull/1014,https://github.com/rossberg,2,https://github.com/WebAssembly/wabt/pull/1014#issuecomment-462680365,"An event has a type-section index, like a function definition. The
current proposal doesn't specify the text format, so I assumed that it
would match the format of the other sections that reference function
types. This means that the following declaration styles are allowed:
(type $t (func (param i32)))
(event $e1 (type $t))
(event $e2 (param f32))","Looks good to me, except that this probably is a good time to change the name ""event"". I don't know where that came from originally, but it doesn't have the right connotation and is potentially confusing. Why not simply ""exception""?",True,{'THUMBS_UP': ['https://github.com/Horcrux7']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1014,2019-02-12T08:24:19Z,2019-02-12T22:41:35Z,2019-02-12T23:27:00Z,MERGED,True,336,257,30,https://github.com/binji,Parse updated event text and binary format,1,[],https://github.com/WebAssembly/wabt/pull/1014,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1014#issuecomment-462888100,"An event has a type-section index, like a function definition. The
current proposal doesn't specify the text format, so I assumed that it
would match the format of the other sections that reference function
types. This means that the following declaration styles are allowed:
(type $t (func (param i32)))
(event $e1 (type $t))
(event $e2 (param f32))","@aheejin do you know where the name ""event"" came from?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1014,2019-02-12T08:24:19Z,2019-02-12T22:41:35Z,2019-02-12T23:27:00Z,MERGED,True,336,257,30,https://github.com/binji,Parse updated event text and binary format,1,[],https://github.com/WebAssembly/wabt/pull/1014,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1014#issuecomment-462967501,"An event has a type-section index, like a function definition. The
current proposal doesn't specify the text format, so I assumed that it
would match the format of the other sections that reference function
types. This means that the following declaration styles are allowed:
(type $t (func (param i32)))
(event $e1 (type $t))
(event $e2 (param f32))","Not sure about the event name, but we can change it back to exception later. Going to land this for now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1014,2019-02-12T08:24:19Z,2019-02-12T22:41:35Z,2019-02-12T23:27:00Z,MERGED,True,336,257,30,https://github.com/binji,Parse updated event text and binary format,1,[],https://github.com/WebAssembly/wabt/pull/1014,https://github.com/aheejin,5,https://github.com/WebAssembly/wabt/pull/1014#issuecomment-462970414,"An event has a type-section index, like a function definition. The
current proposal doesn't specify the text format, so I assumed that it
would match the format of the other sections that reference function
types. This means that the following declaration styles are allowed:
(type $t (func (param i32)))
(event $e1 (type $t))
(event $e2 (param f32))","The term was first introduced by Karl. In the proposal:

However, rather than limiting this new section to just defining exceptions, it defines a more general format that allows the declaration of other forms of events.

And this was various bikeshedding on what kind of events we can support; no one is actively working on these though. And I heard @rossberg mentioned someone is also working at a prototype of effect handler..? Anyway I guess Karl's point was not to create a separate section each time we support a new kind of events.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1014,2019-02-12T08:24:19Z,2019-02-12T22:41:35Z,2019-02-12T23:27:00Z,MERGED,True,336,257,30,https://github.com/binji,Parse updated event text and binary format,1,[],https://github.com/WebAssembly/wabt/pull/1014,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1014#issuecomment-462973520,"An event has a type-section index, like a function definition. The
current proposal doesn't specify the text format, so I assumed that it
would match the format of the other sections that reference function
types. This means that the following declaration styles are allowed:
(type $t (func (param i32)))
(event $e1 (type $t))
(event $e2 (param f32))","I suggest we call it exceptions for now until we have a reason to call it something else.  If it turns out we can re-purpose it for other things we can rename it at that point, no?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1014,2019-02-12T08:24:19Z,2019-02-12T22:41:35Z,2019-02-12T23:27:00Z,MERGED,True,336,257,30,https://github.com/binji,Parse updated event text and binary format,1,[],https://github.com/WebAssembly/wabt/pull/1014,https://github.com/aheejin,7,https://github.com/WebAssembly/wabt/pull/1014#issuecomment-462981430,"An event has a type-section index, like a function definition. The
current proposal doesn't specify the text format, so I assumed that it
would match the format of the other sections that reference function
types. This means that the following declaration styles are allowed:
(type $t (func (param i32)))
(event $e1 (type $t))
(event $e2 (param f32))","I am not against to call it exceptions, but I'm not very excited to rename all of them back... 😨
Oh and each event section entry has an attribute that says what kind of event it is, for which currently only EXCEPTION is available.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1016,2019-02-13T21:05:28Z,2019-02-14T00:27:25Z,2019-02-14T00:27:27Z,MERGED,True,10094,9609,34,https://github.com/binji, Add br_on_exn instruction,2,[],https://github.com/WebAssembly/wabt/pull/1016,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1016,"It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.","It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1016,2019-02-13T21:05:28Z,2019-02-14T00:27:25Z,2019-02-14T00:27:27Z,MERGED,True,10094,9609,34,https://github.com/binji, Add br_on_exn instruction,2,[],https://github.com/WebAssembly/wabt/pull/1016,https://github.com/aheejin,2,https://github.com/WebAssembly/wabt/pull/1016#issuecomment-463407155,"It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.","Its stack signature is [br_on_exn] -> list of types of extracted exception values.
So for example in C++ the exception value is an i32 because it is a pointer, then it is gonna be [br_on_exn] -> [i32]. But the spec also allows multiple values to be popped depending on its exception signature.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1016,2019-02-13T21:05:28Z,2019-02-14T00:27:25Z,2019-02-14T00:27:27Z,MERGED,True,10094,9609,34,https://github.com/binji, Add br_on_exn instruction,2,[],https://github.com/WebAssembly/wabt/pull/1016,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1016#issuecomment-463408992,"It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.","Right, it forwards those values to the label (like br) but if the exception doesn't match it propagates the except_ref.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1016,2019-02-13T21:05:28Z,2019-02-14T00:27:25Z,2019-02-14T00:27:27Z,MERGED,True,10094,9609,34,https://github.com/binji, Add br_on_exn instruction,2,[],https://github.com/WebAssembly/wabt/pull/1016,https://github.com/aheejin,4,https://github.com/WebAssembly/wabt/pull/1016#issuecomment-463413378,"It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.","Oh I think if it doesn't match it just consumes the except_ref value, no? Other branches don't really take values in wasm stack as operands so they forward them according to the block signature, but br_on_exn takes an except_ref as an operand.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1016,2019-02-13T21:05:28Z,2019-02-14T00:27:25Z,2019-02-14T00:27:27Z,MERGED,True,10094,9609,34,https://github.com/binji, Add br_on_exn instruction,2,[],https://github.com/WebAssembly/wabt/pull/1016,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/1016#issuecomment-463417508,"It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.","I'm basing it on the wording here:

The br_on_exn instruction checks the exception tag of an except_ref on top of the stack if it matches the given exception index. If it does, it branches out to the label referenced by the instruction (In the binary form, the label will be converted to a relative depth immediate, like other branch instructions), and while doing that, pops the except_ref value from the stack and instead pushes the exception's argument values on top of the stack. In order to use these popped values, the block signature of the branch target has to match the exception types - because it receives the exception arguments as branch operands. If the exception tag does not match, the except_ref value remains on the stack.

with the example (where I've added <1> and <2> -- I've also provided the exception type for br_on_exn, which was missing in the example):
block $l (result i32 i64)
  ...
  ;; except_ref $e is on the stack at this point
  br_on_exn $l $e ;; branch to $l with $e's arguments
  <1>
  ...
end
<2>
So if the except_ref doesn't match $e, then it is still on the stack at <1>. But if it does match $e, then the stack contains ... i32 i64 at <2>.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1016,2019-02-13T21:05:28Z,2019-02-14T00:27:25Z,2019-02-14T00:27:27Z,MERGED,True,10094,9609,34,https://github.com/binji, Add br_on_exn instruction,2,[],https://github.com/WebAssembly/wabt/pull/1016,https://github.com/aheejin,6,https://github.com/WebAssembly/wabt/pull/1016#issuecomment-463418219,"It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.",Oh right I was remembering it wrong.. Thank you and sorry for the inconvenience :(,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1016,2019-02-13T21:05:28Z,2019-02-14T00:27:25Z,2019-02-14T00:27:27Z,MERGED,True,10094,9609,34,https://github.com/binji, Add br_on_exn instruction,2,[],https://github.com/WebAssembly/wabt/pull/1016,https://github.com/aheejin,7,https://github.com/WebAssembly/wabt/pull/1016#issuecomment-463418354,"It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.",And thank you for implementing this! I thought of doing this but didn't quite find time...,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1016,2019-02-13T21:05:28Z,2019-02-14T00:27:25Z,2019-02-14T00:27:27Z,MERGED,True,10094,9609,34,https://github.com/binji, Add br_on_exn instruction,2,[],https://github.com/WebAssembly/wabt/pull/1016,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/1016#issuecomment-463419153,"It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.",No problem! I appreciate you double-checking this to make sure it's right :-),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1016,2019-02-13T21:05:28Z,2019-02-14T00:27:25Z,2019-02-14T00:27:27Z,MERGED,True,10094,9609,34,https://github.com/binji, Add br_on_exn instruction,2,[],https://github.com/WebAssembly/wabt/pull/1016,https://github.com/binji,9,https://github.com/WebAssembly/wabt/pull/1016#issuecomment-463432946,"It takes two u32 immediates: the branch depth and an exception index. The
stack signature is [expect_ref] -> [except_ref], so the except_ref
can be tested easily against multiple exception types.","Looks like the Travis failure is a CI flake, timeout querying the ubuntu keyserver. If passed on the other travis run, so it seems ok.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1017,2019-02-16T00:53:52Z,2019-02-16T21:51:09Z,2019-02-16T21:51:09Z,MERGED,True,1,1,1,https://github.com/ldm0,Typo fix,1,[],https://github.com/WebAssembly/wabt/pull/1017,https://github.com/ldm0,1,https://github.com/WebAssembly/wabt/pull/1017,"The Windows build example has a typo, and causes some confusion.","The Windows build example has a typo, and causes some confusion.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1019,2019-02-19T08:20:20Z,2019-02-19T11:41:04Z,2019-02-19T11:41:04Z,CLOSED,False,1,2,1,https://github.com/SanderSpies,Correct `last_section_payload_offset_` calculation.,1,[],https://github.com/WebAssembly/wabt/pull/1019,https://github.com/SanderSpies,1,https://github.com/WebAssembly/wabt/pull/1019,Move last_section_payload_offset_ = stream_->offset(); to correct location. Otherwise the relocation offsets are incorrect.,Move last_section_payload_offset_ = stream_->offset(); to correct location. Otherwise the relocation offsets are incorrect.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1019,2019-02-19T08:20:20Z,2019-02-19T11:41:04Z,2019-02-19T11:41:04Z,CLOSED,False,1,2,1,https://github.com/SanderSpies,Correct `last_section_payload_offset_` calculation.,1,[],https://github.com/WebAssembly/wabt/pull/1019,https://github.com/SanderSpies,2,https://github.com/WebAssembly/wabt/pull/1019#issuecomment-465097239,Move last_section_payload_offset_ = stream_->offset(); to correct location. Otherwise the relocation offsets are incorrect.,Closing for now - need to investigate a bit further.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1021,2019-02-19T22:48:33Z,2019-02-20T00:07:44Z,2019-02-20T00:07:47Z,MERGED,True,23,24,2,https://github.com/binji,Remove use of Pointer_stringify; update demo,1,[],https://github.com/WebAssembly/wabt/pull/1021,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1021,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1021,2019-02-19T22:48:33Z,2019-02-20T00:07:44Z,2019-02-20T00:07:47Z,MERGED,True,23,24,2,https://github.com/binji,Remove use of Pointer_stringify; update demo,1,[],https://github.com/WebAssembly/wabt/pull/1021,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1021#issuecomment-465343268,,Fixes #1020.,True,{'HEART': ['https://github.com/ethus3h']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1022,2019-02-20T00:35:46Z,2019-02-20T01:46:04Z,2019-02-20T01:50:55Z,MERGED,True,3,3,3,https://github.com/aardappel,[wasm-objdump] Implemented R_WASM_EVENT_INDEX_LEB reloc type.,1,[],https://github.com/WebAssembly/wabt/pull/1022,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1022,Also fixed 2 asserts that could trigger on user data.,Also fixed 2 asserts that could trigger on user data.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1022,2019-02-20T00:35:46Z,2019-02-20T01:46:04Z,2019-02-20T01:50:55Z,MERGED,True,3,3,3,https://github.com/aardappel,[wasm-objdump] Implemented R_WASM_EVENT_INDEX_LEB reloc type.,1,[],https://github.com/WebAssembly/wabt/pull/1022,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1022#issuecomment-465379316,Also fixed 2 asserts that could trigger on user data.,"FYI, you don't need to fork wabt to push PRs, you can just push to the main repo, since you are member.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1023,2019-02-20T02:33:08Z,2019-02-20T21:51:31Z,2019-02-20T21:51:33Z,MERGED,True,31,3,3,https://github.com/binji,Add wasm-objdump fuzzing script; fix fuzz bugs,1,[],https://github.com/WebAssembly/wabt/pull/1023,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1023,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1025,2019-02-21T22:03:11Z,2019-02-25T00:42:30Z,2019-02-25T00:42:30Z,MERGED,True,99,6,8,https://github.com/aardappel,Improve support for event symbols and except_ref types,2,[],https://github.com/WebAssembly/wabt/pull/1025,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1025,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1025,2019-02-21T22:03:11Z,2019-02-25T00:42:30Z,2019-02-25T00:42:30Z,MERGED,True,99,6,8,https://github.com/aardappel,Improve support for event symbols and except_ref types,2,[],https://github.com/WebAssembly/wabt/pull/1025,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1025#issuecomment-466246729,,still lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1026,2019-02-25T00:40:19Z,2019-02-25T08:12:20Z,2019-02-26T01:54:15Z,MERGED,True,1154,1123,35,https://github.com/binji,Rename anyfunc -> funcref; parse reference types,3,[],https://github.com/WebAssembly/wabt/pull/1026,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1026,"Also:


Add feature limits on using v128 and anyref types (requires
--enable-simd and --enable-reference-types respectively).


Separate out ParseValueType (used for params, locals, global types)
from ParseRefType (used for table types).","Also:


Add feature limits on using v128 and anyref types (requires
--enable-simd and --enable-reference-types respectively).


Separate out ParseValueType (used for params, locals, global types)
from ParseRefType (used for table types).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1026,2019-02-25T00:40:19Z,2019-02-25T08:12:20Z,2019-02-26T01:54:15Z,MERGED,True,1154,1123,35,https://github.com/binji,Rename anyfunc -> funcref; parse reference types,3,[],https://github.com/WebAssembly/wabt/pull/1026,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1026#issuecomment-467258407,"Also:


Add feature limits on using v128 and anyref types (requires
--enable-simd and --enable-reference-types respectively).


Separate out ParseValueType (used for params, locals, global types)
from ParseRefType (used for table types).","If possible I think it would be good to do renames as separate PRs to any functional stuff.  I'm not sure it would have been possible in this case, but I would make it easier to read for people following along.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1026,2019-02-25T00:40:19Z,2019-02-25T08:12:20Z,2019-02-26T01:54:15Z,MERGED,True,1154,1123,35,https://github.com/binji,Rename anyfunc -> funcref; parse reference types,3,[],https://github.com/WebAssembly/wabt/pull/1026,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1026#issuecomment-467260525,"Also:


Add feature limits on using v128 and anyref types (requires
--enable-simd and --enable-reference-types respectively).


Separate out ParseValueType (used for params, locals, global types)
from ParseRefType (used for table types).","Sorry about that. Yeah, this case was a bit annoying to rename separately but I probably should have done it anyway.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1027,2019-02-25T23:54:28Z,2019-02-26T01:59:19Z,2019-02-26T01:59:20Z,MERGED,True,51,53,1,https://github.com/aardappel,[wabt-objdump] Refactored some functions to use string_view,1,[],https://github.com/WebAssembly/wabt/pull/1027,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1027,"The functions BinaryReaderObjdumpBase::GetSymbolName calls may
return null, so it should deal with that case.","The functions BinaryReaderObjdumpBase::GetSymbolName calls may
return null, so it should deal with that case.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1027,2019-02-25T23:54:28Z,2019-02-26T01:59:19Z,2019-02-26T01:59:20Z,MERGED,True,51,53,1,https://github.com/aardappel,[wabt-objdump] Refactored some functions to use string_view,1,[],https://github.com/WebAssembly/wabt/pull/1027,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1027#issuecomment-467260210,"The functions BinaryReaderObjdumpBase::GetSymbolName calls may
return null, so it should deal with that case.","Ok, string_view it is :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1027,2019-02-25T23:54:28Z,2019-02-26T01:59:19Z,2019-02-26T01:59:20Z,MERGED,True,51,53,1,https://github.com/aardappel,[wabt-objdump] Refactored some functions to use string_view,1,[],https://github.com/WebAssembly/wabt/pull/1027,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1027#issuecomment-467261427,"The functions BinaryReaderObjdumpBase::GetSymbolName calls may
return null, so it should deal with that case.","Looks good, thanks. The !((name = ...).empty()) stuff is kinda weird, but I don't have better suggestions without more refactoring :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1028,2019-03-03T20:44:50Z,2019-03-04T06:16:51Z,2019-03-04T06:16:54Z,MERGED,True,64,12,5,https://github.com/sbc100,[wasm-objdump] Show data segment names,1,[],https://github.com/WebAssembly/wabt/pull/1028,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1028,,,True,{'THUMBS_UP': ['https://github.com/aardappel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1029,2019-03-04T00:16:49Z,2019-03-04T03:25:11Z,2019-03-04T03:25:11Z,MERGED,True,2,2,2,https://github.com/ohorn,wasm-objdump: fix f64 init expressions,1,[],https://github.com/WebAssembly/wabt/pull/1029,https://github.com/ohorn,1,https://github.com/WebAssembly/wabt/pull/1029,"The PrintInitExpr function falsely treated f64 as a float instead of a double.
The test case global.txt also contained the wrong output, namely 0x0p+0 instead of 0x1p+2 for (f64.const 4).","The PrintInitExpr function falsely treated f64 as a float instead of a double.
The test case global.txt also contained the wrong output, namely 0x0p+0 instead of 0x1p+2 for (f64.const 4).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1029,2019-03-04T00:16:49Z,2019-03-04T03:25:11Z,2019-03-04T03:25:11Z,MERGED,True,2,2,2,https://github.com/ohorn,wasm-objdump: fix f64 init expressions,1,[],https://github.com/WebAssembly/wabt/pull/1029,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1029#issuecomment-469105703,"The PrintInitExpr function falsely treated f64 as a float instead of a double.
The test case global.txt also contained the wrong output, namely 0x0p+0 instead of 0x1p+2 for (f64.const 4).",Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1030,2019-03-04T06:34:45Z,2019-03-04T07:57:35Z,2019-03-04T07:57:39Z,MERGED,True,65,60,2,https://github.com/binji,Refactor objdump name handling a little,1,[],https://github.com/WebAssembly/wabt/pull/1030,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1030,"Use ObjdumpNames struct to share similar code for mapping indexes to
names.","Use ObjdumpNames struct to share similar code for mapping indexes to
names.",True,{'THUMBS_UP': ['https://github.com/aardappel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1031,2019-03-04T15:25:55Z,2019-03-05T20:01:52Z,2019-03-05T20:01:52Z,MERGED,True,118,87,3,https://github.com/gnzlbg,Make SIMD lane-wise relational operator implementations conform to the spec,1,[],https://github.com/WebAssembly/wabt/pull/1031,https://github.com/gnzlbg,1,https://github.com/WebAssembly/wabt/pull/1031,"The implementation of the SIMD lane-wise relational operators was incorrect. These operators were setting true lanes to 1, but according to the spec they should set all bits of true lanes.
These operators create a vector mask that can be used in combination with bitselect to apply certain operations only to some vector lanes. However, because only 1 bit of each true lane was being set by these operators under wabt, the combination with bitselect was only selecting that one bit instead of whole lanes, leading to incorrect results.","The implementation of the SIMD lane-wise relational operators was incorrect. These operators were setting true lanes to 1, but according to the spec they should set all bits of true lanes.
These operators create a vector mask that can be used in combination with bitselect to apply certain operations only to some vector lanes. However, because only 1 bit of each true lane was being set by these operators under wabt, the combination with bitselect was only selecting that one bit instead of whole lanes, leading to incorrect results.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1031,2019-03-04T15:25:55Z,2019-03-05T20:01:52Z,2019-03-05T20:01:52Z,MERGED,True,118,87,3,https://github.com/gnzlbg,Make SIMD lane-wise relational operator implementations conform to the spec,1,[],https://github.com/WebAssembly/wabt/pull/1031,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1031#issuecomment-469499292,"The implementation of the SIMD lane-wise relational operators was incorrect. These operators were setting true lanes to 1, but according to the spec they should set all bits of true lanes.
These operators create a vector mask that can be used in combination with bitselect to apply certain operations only to some vector lanes. However, because only 1 bit of each true lane was being set by these operators under wabt, the combination with bitselect was only selecting that one bit instead of whole lanes, leading to incorrect results.","lgtm, thanks! Have you joined the WebAssembly community group?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1031,2019-03-04T15:25:55Z,2019-03-05T20:01:52Z,2019-03-05T20:01:52Z,MERGED,True,118,87,3,https://github.com/gnzlbg,Make SIMD lane-wise relational operator implementations conform to the spec,1,[],https://github.com/WebAssembly/wabt/pull/1031,https://github.com/gnzlbg,3,https://github.com/WebAssembly/wabt/pull/1031#issuecomment-469754129,"The implementation of the SIMD lane-wise relational operators was incorrect. These operators were setting true lanes to 1, but according to the spec they should set all bits of true lanes.
These operators create a vector mask that can be used in combination with bitselect to apply certain operations only to some vector lanes. However, because only 1 bit of each true lane was being set by these operators under wabt, the combination with bitselect was only selecting that one bit instead of whole lanes, leading to incorrect results.",@binji i've just done that,True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/gnzlbg,1,https://github.com/WebAssembly/wabt/pull/1032,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.","The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/gnzlbg,2,https://github.com/WebAssembly/wabt/pull/1032#issuecomment-469755287,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.","So a couple of compilers choke with C++14. GCC 4.8 is 6 years old, and MSVC 2015 does not even support C++11..
I'll remove the C++14 usage, and see if I still need to cut-off on some C++11 to make MSVC work.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/gnzlbg,3,https://github.com/WebAssembly/wabt/pull/1032#issuecomment-469777537,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.","So I've backported the PR to C++11, but apparently GCC and MSVC are not C++11 compliant. They fail to normalize type aliases in function signatures, but not anywhere else for some reason (overload resolution shows the correct candidate, but errors that the types differ). Removing them increases verbosity by 100000%, but now at least CI is green ¯_(ツ)_/¯",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1032#issuecomment-469841193,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.","Thanks for working on this! At a first glance, this PR seems to be changing a lot of code. Creating a generic i5x16 struct doesn't seem necessary, since this type is only used for the shuffle immediate. I'd also prefer not to have it store both binary and text representations in the same class.
We can perhaps work toward something more comprehensive in the future, but for an initial PR, I'd like to keep this smaller. I think it would be a better start if we only fix the text and binary parsing, and continue to use v128 as the immediate.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/gnzlbg,5,https://github.com/WebAssembly/wabt/pull/1032#issuecomment-469842365,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.","and continue to use v128 as the immediate.

v128 is 16 bytes wide, but the immediate is only 10 bytes wide, how can that work?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/1032#issuecomment-469844989,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.","It's not necessary that the in-memory representation of the immediate matches the binary format representation. Since v128 is bigger, we can use one byte per lane idx, like the currently spec'd binary format. It's probably nicer to use that way anyway (aside from the fact that v128 doesn't have convenient accessors, though that would be relatively easy to add)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/gnzlbg,7,https://github.com/WebAssembly/wabt/pull/1032#issuecomment-469855671,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.",I think we maybe are talking past each other. Are you on IRC/Discord/Zulip/... were we could maybe chat?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/1032#issuecomment-469877443,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.",I'm regularly on irc://irc.w3.org:6667/#webassembly,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/tlively,9,https://github.com/WebAssembly/wabt/pull/1032#issuecomment-469887496,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.","v128 is 16 bytes wide, but the immediate is only 10 bytes wide, how can that work?

I think this was cleared up in WebAssembly/simd#67, but repeating here for completeness: the current spec proposal specifies 16 bytes for the immediate (each of which can only have value 0-31), not 10 bytes.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1032,2019-03-05T16:25:58Z,2019-03-06T10:05:09Z,2019-03-06T10:05:10Z,CLOSED,False,4855,4499,28,https://github.com/gnzlbg,Update binary encoding of SIMD vector shuffle to conform to the latest draft,2,[],https://github.com/WebAssembly/wabt/pull/1032,https://github.com/gnzlbg,10,https://github.com/WebAssembly/wabt/pull/1032#issuecomment-470046955,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the modified draft of the SIMD extension.
Since there are more shuffle and permtue intrinsics in the WASM SIMD extension
pipeline, this PR adds a generic iNxM class implementing a packed array of M
N-bit wide integers.
The class can store the integer array in both textual and binary
representations. The textual repr is useful for WAT and type-checking, while the
binary repr is useful for the binary encoding.","@binji I've submitted #1034 , I think something in that spirit is what you were proposing doing as a first step.
We can revisit this approach if the binary encoding gets changed in the spec to something more compact.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1033,2019-03-05T19:49:55Z,2019-03-07T13:23:25Z,2019-03-07T13:23:25Z,CLOSED,False,1661,1653,33,https://github.com/gnzlbg,Make v128.const i32x4 op conform to the SIMD draft,1,[],https://github.com/WebAssembly/wabt/pull/1033,https://github.com/gnzlbg,1,https://github.com/WebAssembly/wabt/pull/1033,"Blocked on #1032. The issue is that i8x16.shuffle uses a v128 immediate mode argument on master, so this upgrade changes some output (e.g. the disassembler comments) from i8x16.shuffle ... to i8x16.shuffle i32x4 ....  Once #1032 is merged, the tests here need to be updated and that's it.
Note that the draft also supports v128.const {i8x16, i16x8, i32x4, i64x2, f32x4, f64x2}. The intent of this PR is not to add support for all of those, but to make what WABT already supports conform to the spec.","Blocked on #1032. The issue is that i8x16.shuffle uses a v128 immediate mode argument on master, so this upgrade changes some output (e.g. the disassembler comments) from i8x16.shuffle ... to i8x16.shuffle i32x4 ....  Once #1032 is merged, the tests here need to be updated and that's it.
Note that the draft also supports v128.const {i8x16, i16x8, i32x4, i64x2, f32x4, f64x2}. The intent of this PR is not to add support for all of those, but to make what WABT already supports conform to the spec.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1034,2019-03-06T10:03:53Z,2019-03-07T10:47:05Z,2019-03-07T10:47:26Z,MERGED,True,80,26,11,https://github.com/gnzlbg,Update textual encoding of SIMD vector shuffle to conform to the latest SIMD draft,4,[],https://github.com/WebAssembly/wabt/pull/1034,https://github.com/gnzlbg,1,https://github.com/WebAssembly/wabt/pull/1034,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the updated draft of the SIMD extension.","The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the updated draft of the SIMD extension.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1034,2019-03-06T10:03:53Z,2019-03-07T10:47:05Z,2019-03-07T10:47:26Z,MERGED,True,80,26,11,https://github.com/gnzlbg,Update textual encoding of SIMD vector shuffle to conform to the latest SIMD draft,4,[],https://github.com/WebAssembly/wabt/pull/1034,https://github.com/gnzlbg,2,https://github.com/WebAssembly/wabt/pull/1034#issuecomment-470416952,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the updated draft of the SIMD extension.",(let me know before merging so that I can rebase this),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1034,2019-03-06T10:03:53Z,2019-03-07T10:47:05Z,2019-03-07T10:47:26Z,MERGED,True,80,26,11,https://github.com/gnzlbg,Update textual encoding of SIMD vector shuffle to conform to the latest SIMD draft,4,[],https://github.com/WebAssembly/wabt/pull/1034,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1034#issuecomment-470477079,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the updated draft of the SIMD extension.","still lgtm, why do you need to rebase? Looks like it will merge cleanly.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1034,2019-03-06T10:03:53Z,2019-03-07T10:47:05Z,2019-03-07T10:47:26Z,MERGED,True,80,26,11,https://github.com/gnzlbg,Update textual encoding of SIMD vector shuffle to conform to the latest SIMD draft,4,[],https://github.com/WebAssembly/wabt/pull/1034,https://github.com/gnzlbg,4,https://github.com/WebAssembly/wabt/pull/1034#issuecomment-470477513,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the updated draft of the SIMD extension.","I thought the commit history would be clearer if I squashed the commits, but if the history is good for you then it is also good for me :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1034,2019-03-06T10:03:53Z,2019-03-07T10:47:05Z,2019-03-07T10:47:26Z,MERGED,True,80,26,11,https://github.com/gnzlbg,Update textual encoding of SIMD vector shuffle to conform to the latest SIMD draft,4,[],https://github.com/WebAssembly/wabt/pull/1034,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/1034#issuecomment-470478133,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the updated draft of the SIMD extension.","Oh, I always just hit the button to squash and merge :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1034,2019-03-06T10:03:53Z,2019-03-07T10:47:05Z,2019-03-07T10:47:26Z,MERGED,True,80,26,11,https://github.com/gnzlbg,Update textual encoding of SIMD vector shuffle to conform to the latest SIMD draft,4,[],https://github.com/WebAssembly/wabt/pull/1034,https://github.com/gnzlbg,6,https://github.com/WebAssembly/wabt/pull/1034#issuecomment-470478329,"The textual (WAT) representation of the vector shuffle immediate argument was
underspecified. Recently, WebAssembly/simd#67 specified
it to be i8x16.shuffle i5 i5 ... i5 (16 times i5), which is what all other
implementations were doing. WABT was reading the shuffle argument as 4 32-bit
hex integers that specified a v128, that is, i8x16.shuffle 0x0 0x0 0x0 0x0.
This PR updates WABT to conform to the updated draft of the SIMD extension.",:D,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1036,2019-03-06T20:08:11Z,2019-03-06T22:07:25Z,2019-03-06T22:07:27Z,MERGED,True,126,28,6,https://github.com/binji,Update demo to include feature flags,1,[],https://github.com/WebAssembly/wabt/pull/1036,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1036,Also add new examples for some of the features.,Also add new examples for some of the features.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1037,2019-03-07T13:27:23Z,2019-03-28T19:12:57Z,2019-03-28T19:12:57Z,MERGED,True,6223,5994,43,https://github.com/gnzlbg,Make v128.const i32x4 op conform to the SIMD draft,6,[],https://github.com/WebAssembly/wabt/pull/1037,https://github.com/gnzlbg,1,https://github.com/WebAssembly/wabt/pull/1037,"Updates the v128.const WAT parsing to conform to the SIMD draft.

Update v128.const i32 is now v128.const i32x4
Add support for v12.const {i8x16, i16x8, i64x2, f32x4, f64x2}","Updates the v128.const WAT parsing to conform to the SIMD draft.

Update v128.const i32 is now v128.const i32x4
Add support for v12.const {i8x16, i16x8, i64x2, f32x4, f64x2}",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1037,2019-03-07T13:27:23Z,2019-03-28T19:12:57Z,2019-03-28T19:12:57Z,MERGED,True,6223,5994,43,https://github.com/gnzlbg,Make v128.const i32x4 op conform to the SIMD draft,6,[],https://github.com/WebAssembly/wabt/pull/1037,https://github.com/gnzlbg,2,https://github.com/WebAssembly/wabt/pull/1037#issuecomment-470525414,"Updates the v128.const WAT parsing to conform to the SIMD draft.

Update v128.const i32 is now v128.const i32x4
Add support for v12.const {i8x16, i16x8, i64x2, f32x4, f64x2}","cc @binji so i've opened a new PR for this one, since it made sense to directly add support for the whole syntax.
I've tried to keep it as minimal as possible. That is, we are able to parse the v128.const syntax properly from a WAT file, and when deserializing to WAT we always use v128.const i32x4 (in memory and in wasm binaries v128 is untyped so we have to pick up one of the reprs here).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1037,2019-03-07T13:27:23Z,2019-03-28T19:12:57Z,2019-03-28T19:12:57Z,MERGED,True,6223,5994,43,https://github.com/gnzlbg,Make v128.const i32x4 op conform to the SIMD draft,6,[],https://github.com/WebAssembly/wabt/pull/1037,https://github.com/gnzlbg,3,https://github.com/WebAssembly/wabt/pull/1037#issuecomment-477040886,"Updates the v128.const WAT parsing to conform to the SIMD draft.

Update v128.const i32 is now v128.const i32x4
Add support for v12.const {i8x16, i16x8, i64x2, f32x4, f64x2}","@binji sorry it took me so long to pick these up, been busy with other stuff, will try to get these done today.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1037,2019-03-07T13:27:23Z,2019-03-28T19:12:57Z,2019-03-28T19:12:57Z,MERGED,True,6223,5994,43,https://github.com/gnzlbg,Make v128.const i32x4 op conform to the SIMD draft,6,[],https://github.com/WebAssembly/wabt/pull/1037,https://github.com/gnzlbg,4,https://github.com/WebAssembly/wabt/pull/1037#issuecomment-477072107,"Updates the v128.const WAT parsing to conform to the SIMD draft.

Update v128.const i32 is now v128.const i32x4
Add support for v12.const {i8x16, i16x8, i64x2, f32x4, f64x2}",So I think I've fixed all issues except for adding the new tokens to the lexer.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1037,2019-03-07T13:27:23Z,2019-03-28T19:12:57Z,2019-03-28T19:12:57Z,MERGED,True,6223,5994,43,https://github.com/gnzlbg,Make v128.const i32x4 op conform to the SIMD draft,6,[],https://github.com/WebAssembly/wabt/pull/1037,https://github.com/gnzlbg,5,https://github.com/WebAssembly/wabt/pull/1037#issuecomment-477089542,"Updates the v128.const WAT parsing to conform to the SIMD draft.

Update v128.const i32 is now v128.const i32x4
Add support for v12.const {i8x16, i16x8, i64x2, f32x4, f64x2}","So I've added the tokens as bare tokens to the lexer - i'm not sure if that's the right kind of token to use for these though.
For some reason, doing make update-re2c modified the third-party/testsuite submodule, and everything started to fail, which confused me quite a bit. After reverting those changes everything just worked =/",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1037,2019-03-07T13:27:23Z,2019-03-28T19:12:57Z,2019-03-28T19:12:57Z,MERGED,True,6223,5994,43,https://github.com/gnzlbg,Make v128.const i32x4 op conform to the SIMD draft,6,[],https://github.com/WebAssembly/wabt/pull/1037,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/1037#issuecomment-477733408,"Updates the v128.const WAT parsing to conform to the SIMD draft.

Update v128.const i32 is now v128.const i32x4
Add support for v12.const {i8x16, i16x8, i64x2, f32x4, f64x2}","So I've added the tokens as bare tokens to the lexer - i'm not sure if that's the right kind of token to use for these though.

I think that makes sense.

For some reason, doing make update-re2c modified the third-party/testsuite submodule, and everything started to fail, which confused me quite a bit. After reverting those changes everything just worked =/

Oops, sorry about that! I really should clean up the lexer code...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1039,2019-03-08T23:31:39Z,2019-03-09T01:02:30Z,2019-03-09T01:02:33Z,MERGED,True,29,19,4,https://github.com/binji,Allow a local type count of 0,1,[],https://github.com/WebAssembly/wabt/pull/1039,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1039,"It's legal in the wasm format to have a local type count of 0. I
originally made it illegal to fix a wabt bug, and didn't notice because
there were no spec tests for this behavior.","It's legal in the wasm format to have a local type count of 0. I
originally made it illegal to fix a wabt bug, and didn't notice because
there were no spec tests for this behavior.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1039,2019-03-08T23:31:39Z,2019-03-09T01:02:30Z,2019-03-09T01:02:33Z,MERGED,True,29,19,4,https://github.com/binji,Allow a local type count of 0,1,[],https://github.com/WebAssembly/wabt/pull/1039,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1039#issuecomment-471113425,"It's legal in the wasm format to have a local type count of 0. I
originally made it illegal to fix a wabt bug, and didn't notice because
there were no spec tests for this behavior.",Fixes #1038.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1041,2019-03-14T23:05:52Z,2019-03-15T00:15:29Z,2019-03-15T00:15:32Z,MERGED,True,241,12,2,https://github.com/binji,Fix bugs in integer parsing,1,[],https://github.com/WebAssembly/wabt/pull/1041,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1041,"ParseHexdigit allowed g as a hex character


Overflow checking can't just check old_value > new_value, that fails
for many cases.","ParseHexdigit allowed g as a hex character


Overflow checking can't just check old_value > new_value, that fails
for many cases.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1041,2019-03-14T23:05:52Z,2019-03-15T00:15:29Z,2019-03-15T00:15:32Z,MERGED,True,241,12,2,https://github.com/binji,Fix bugs in integer parsing,1,[],https://github.com/WebAssembly/wabt/pull/1041,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1041#issuecomment-473104934,"ParseHexdigit allowed g as a hex character


Overflow checking can't just check old_value > new_value, that fails
for many cases.","But base-17 :(

Turns out it didn't work anyway, try running this in the wat2wasm demo:
(func (export ""foo"") (result i32) i32.const 0xgabba)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1046,2019-03-18T19:24:53Z,2019-03-18T22:05:27Z,2019-03-18T22:05:29Z,MERGED,True,62,64,3,https://github.com/binji,Canonicalize NaNs in the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1046,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1046,"Even though we store f32 and f64 values as their representation, we
still use the underlying system's implementations for float operations.
These have non-deterministic behavior w.r.t. NaNs.
This change canoncalizes all NaNs where it is allowed. This excludes
fxx.abs, fxx.neg, fxx.copysign and fxx.reinterpret*, which
always work on the floating-point representation directly, and the
fxx.convert* instructions, which cannot be NaN because the input is an
integer.","Even though we store f32 and f64 values as their representation, we
still use the underlying system's implementations for float operations.
These have non-deterministic behavior w.r.t. NaNs.
This change canoncalizes all NaNs where it is allowed. This excludes
fxx.abs, fxx.neg, fxx.copysign and fxx.reinterpret*, which
always work on the floating-point representation directly, and the
fxx.convert* instructions, which cannot be NaN because the input is an
integer.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1046,2019-03-18T19:24:53Z,2019-03-18T22:05:27Z,2019-03-18T22:05:29Z,MERGED,True,62,64,3,https://github.com/binji,Canonicalize NaNs in the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1046,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1046#issuecomment-474065956,"Even though we store f32 and f64 values as their representation, we
still use the underlying system's implementations for float operations.
These have non-deterministic behavior w.r.t. NaNs.
This change canoncalizes all NaNs where it is allowed. This excludes
fxx.abs, fxx.neg, fxx.copysign and fxx.reinterpret*, which
always work on the floating-point representation directly, and the
fxx.convert* instructions, which cannot be NaN because the input is an
integer.",This should fix some issues in #1043 and #1045. The wasm2c failures still need to be addressed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1047,2019-03-18T22:31:42Z,2019-03-25T22:37:13Z,2019-03-25T22:37:16Z,MERGED,True,1341,265,29,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1047,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1047,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1049,2019-03-21T02:59:05Z,2019-03-21T19:14:54Z,2019-03-21T19:14:56Z,MERGED,True,24,8,4,https://github.com/sbc100,wasm-objdump: Include import module as part displayed name,1,[],https://github.com/WebAssembly/wabt/pull/1049,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1049,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1050,2019-03-25T17:13:32Z,2019-03-25T22:36:53Z,2019-03-25T22:36:56Z,MERGED,True,1,1,1,https://github.com/binji,Provide better error when `file` fails,1,[],https://github.com/WebAssembly/wabt/pull/1050,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1050,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1051,2019-03-26T23:47:21Z,2019-03-27T02:06:14Z,2019-03-27T02:06:16Z,MERGED,True,12,6,2,https://github.com/sbc100,wasm-objdump: Print names of globals used in init expression.,1,[],https://github.com/WebAssembly/wabt/pull/1051,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1051,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1052,2019-03-28T19:54:04Z,2019-03-28T23:42:19Z,2019-03-28T23:42:21Z,MERGED,True,194,46,7,https://github.com/binji,"Add ParseInt{8,16} functions, for use with SIMD",1,[],https://github.com/WebAssembly/wabt/pull/1052,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1052,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1052,2019-03-28T19:54:04Z,2019-03-28T23:42:19Z,2019-03-28T23:42:21Z,MERGED,True,194,46,7,https://github.com/binji,"Add ParseInt{8,16} functions, for use with SIMD",1,[],https://github.com/WebAssembly/wabt/pull/1052,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1052#issuecomment-477747299,,"@gnzlbg FYI, just a minor cleanup from your PR",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1053,2019-03-29T08:56:50Z,2019-07-24T00:34:07Z,2019-07-24T00:34:07Z,CLOSED,False,6833,6812,38,https://github.com/gnzlbg,Rename v8x16.shuffle to v8x16.shuffle2_imm,1,[],https://github.com/WebAssembly/wabt/pull/1053,https://github.com/gnzlbg,1,https://github.com/WebAssembly/wabt/pull/1053,"To conform to the latest SIMD draft, see: WebAssembly/simd#71","To conform to the latest SIMD draft, see: WebAssembly/simd#71",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1053,2019-03-29T08:56:50Z,2019-07-24T00:34:07Z,2019-07-24T00:34:07Z,CLOSED,False,6833,6812,38,https://github.com/gnzlbg,Rename v8x16.shuffle to v8x16.shuffle2_imm,1,[],https://github.com/WebAssembly/wabt/pull/1053,https://github.com/tlively,2,https://github.com/WebAssembly/wabt/pull/1053#issuecomment-478042874,"To conform to the latest SIMD draft, see: WebAssembly/simd#71","That SIMD spec proposal change was merged explicitly without consensus on the instruction names. I think toolchain updates could wait until we actually have a discussion on the new names, since I don’t think the current temporary names are any more stable than the previous names.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1053,2019-03-29T08:56:50Z,2019-07-24T00:34:07Z,2019-07-24T00:34:07Z,CLOSED,False,6833,6812,38,https://github.com/gnzlbg,Rename v8x16.shuffle to v8x16.shuffle2_imm,1,[],https://github.com/WebAssembly/wabt/pull/1053,https://github.com/gnzlbg,3,https://github.com/WebAssembly/wabt/pull/1053#issuecomment-478082707,"To conform to the latest SIMD draft, see: WebAssembly/simd#71","We can leave this on hold, I understood from the discussion that the new names had consensus, but if not, we can leave this PR open and maybe try to achieve consensus on the next meeting about the names.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1053,2019-03-29T08:56:50Z,2019-07-24T00:34:07Z,2019-07-24T00:34:07Z,CLOSED,False,6833,6812,38,https://github.com/gnzlbg,Rename v8x16.shuffle to v8x16.shuffle2_imm,1,[],https://github.com/WebAssembly/wabt/pull/1053,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1053#issuecomment-514432737,"To conform to the latest SIMD draft, see: WebAssembly/simd#71","I believe the changes in this PR have now landed here: c36c95d. If not, feel free to send a new PR with the missing parts. Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1054,2019-04-01T19:13:00Z,2019-04-01T19:52:48Z,2019-04-01T19:52:52Z,MERGED,True,9997,9966,9,https://github.com/binji,Remove LexerSourceFile,1,[],https://github.com/WebAssembly/wabt/pull/1054,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1054,"The only benefit to LexerSourceFile is to read files that are larger
than can be loaded into memory. That probably is only a valuable feature
when loading GB-sized files on a 32-bit machine. I'm not certain that
it's worth the extra complexity.","The only benefit to LexerSourceFile is to read files that are larger
than can be loaded into memory. That probably is only a valuable feature
when loading GB-sized files on a 32-bit machine. I'm not certain that
it's worth the extra complexity.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1055,2019-04-02T05:03:20Z,2019-04-03T18:36:15Z,2019-04-03T18:36:17Z,MERGED,True,19,8,6,https://github.com/binji,Update testsuite; fix linking spec test,2,[],https://github.com/WebAssembly/wabt/pull/1055,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1055,"When a module is instantiated, and the start function traps, the
contents of the memory and the table may have been modified. This case
is handled by the assert_uninstantiable check in a wast test.
In spectest-interp, assert_uninstantiable would instantiate the module,
but was incorrectly resetting the environment. In run-spec-wasm2c, the
assert_uninstantiable tests weren't being run at all. Now the module's
init function is run, and it is expected to trap.","When a module is instantiated, and the start function traps, the
contents of the memory and the table may have been modified. This case
is handled by the assert_uninstantiable check in a wast test.
In spectest-interp, assert_uninstantiable would instantiate the module,
but was incorrectly resetting the environment. In run-spec-wasm2c, the
assert_uninstantiable tests weren't being run at all. Now the module's
init function is run, and it is expected to trap.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1056,2019-04-03T01:23:19Z,2019-04-03T19:29:29Z,2019-04-03T19:29:32Z,MERGED,True,20,13,4,https://github.com/sbc100,Add new relocation types for position independent code.,2,[],https://github.com/WebAssembly/wabt/pull/1056,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1056,See WebAssembly/tool-conventions#106,See WebAssembly/tool-conventions#106,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1057,2019-04-03T23:59:57Z,2019-04-04T01:39:20Z,2019-04-04T01:39:22Z,MERGED,True,5,1,2,https://github.com/sbc100,Add names to locally declared globals.,1,[],https://github.com/WebAssembly/wabt/pull/1057,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1057,These currently can only come from the export of a global.,These currently can only come from the export of a global.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1058,2019-04-04T01:39:37Z,2019-04-04T06:20:50Z,2019-04-04T06:20:52Z,MERGED,True,2552,14678,19,https://github.com/binji,"Rewrite the lexer manually, instead of re2c",8,[],https://github.com/WebAssembly/wabt/pull/1058,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1058,"The current lexer uses re2c. It easy to change, but it generates a huge amount of code, and it's easy to forgot to update it.
This PR rewrites the lexer manually, and uses gperf instead to match keywords. The generated source is much smaller.","The current lexer uses re2c. It easy to change, but it generates a huge amount of code, and it's easy to forgot to update it.
This PR rewrites the lexer manually, and uses gperf instead to match keywords. The generated source is much smaller.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1059,2019-04-04T06:43:48Z,2019-04-04T17:46:34Z,2019-04-04T17:46:36Z,MERGED,True,48,112,6,https://github.com/binji,Use string_view instead of string in token,1,[],https://github.com/WebAssembly/wabt/pull/1059,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1059,"This is possible now because we ensure that the entire source file is in
memory when we are lexing.","This is possible now because we ensure that the entire source file is in
memory when we are lexing.",True,{'HOORAY': ['https://github.com/aardappel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1060,2019-04-05T21:49:23Z,2019-04-05T22:00:09Z,2019-04-05T22:00:09Z,MERGED,True,9,7,1,https://github.com/aardappel,Made common string lookups more robust.,1,[],https://github.com/WebAssembly/wabt/pull/1060,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1060,"Since the purpose of these strings is to display them to the user,
an ""error string"" is a more useful default than an assert, which
would require all callers to consistently check for the range
of valid values (which they didn't).
Tools like wasm-objdump should preferably be able to continue
outputting even in the face of illegal values.","Since the purpose of these strings is to display them to the user,
an ""error string"" is a more useful default than an assert, which
would require all callers to consistently check for the range
of valid values (which they didn't).
Tools like wasm-objdump should preferably be able to continue
outputting even in the face of illegal values.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1060,2019-04-05T21:49:23Z,2019-04-05T22:00:09Z,2019-04-05T22:00:09Z,MERGED,True,9,7,1,https://github.com/aardappel,Made common string lookups more robust.,1,[],https://github.com/WebAssembly/wabt/pull/1060,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1060#issuecomment-480434788,"Since the purpose of these strings is to display them to the user,
an ""error string"" is a more useful default than an assert, which
would require all callers to consistently check for the range
of valid values (which they didn't).
Tools like wasm-objdump should preferably be able to continue
outputting even in the face of illegal values.","lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1061,2019-04-10T22:34:39Z,2019-04-10T23:21:05Z,2019-04-10T23:21:08Z,MERGED,True,1,0,2,https://github.com/binji,Fix infinite loop in lexer w/ bad character,1,[],https://github.com/WebAssembly/wabt/pull/1061,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1061,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1065,2019-04-18T01:12:37Z,2019-04-18T04:46:52Z,2019-04-18T04:46:54Z,MERGED,True,8,3,2,https://github.com/binji,Print function names on code details too,1,[],https://github.com/WebAssembly/wabt/pull/1065,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1065,"These names were already displayed on the function section, and when
disassembling a function.","These names were already displayed on the function section, and when
disassembling a function.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1066,2019-04-18T23:04:16Z,2019-04-18T23:37:59Z,2019-04-18T23:38:01Z,MERGED,True,1212,1046,37,https://github.com/binji,Proper encoding of passive element segments,4,[],https://github.com/WebAssembly/wabt/pull/1066,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1066,Implement the proper encoding of passive element segments (i.e. with ref.null and ref.func opcodes).,Implement the proper encoding of passive element segments (i.e. with ref.null and ref.func opcodes).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/syrusakbary,1,https://github.com/WebAssembly/wabt/pull/1068,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup",True,"{'THUMBS_UP': ['https://github.com/josephjacks', 'https://github.com/amirouche'], 'HOORAY': ['https://github.com/amirouche', 'https://github.com/hlolli']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-486012504,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","Thanks, looks pretty good!
I'm not sure this needs to be upstream (see for example, https://www.npmjs.com/package/wabt and https://github.com/AssemblyScript/wabt.js). One downside is that it will increase the size of the source repo, since the files are checked-in. That said, the binaries aren't too big, and it might be convenient for others to have these files readily available.
I also noticed that the .js scripts don't seem to work with node (I just get stat failed: No such file or directory). Not sure why, but we may just want to include the .wasm files.",True,{'THUMBS_UP': ['https://github.com/lukewagner']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-486026280,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","This is indeed pretty exciting.
I kind of agree with ben that package manager metadata tends not to live in upstream repos, but I can also see an argument for it in this case since wabt is such a core part of wasm.
Is there a reason why the binaries need to be checked in?   This change would be pretty tiny without them, right?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/syrusakbary,4,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-535274697,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","@binji @sbc100 I have completely re-worked on the PR.
This PR is now much cleaner. Builds the executables directly with WASI and doesn't check the binaries in the repo.
You can build the WASI executables just by doing:
./scripts/build_wasi.sh
Looking forward hearing your thoughts!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/syrusakbary,5,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-535284191,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","@sbc100 feedback addressed!
I think I can address Travis automation in another PR 🙂 (and even automatic deployment to wapm! 🎉)
Note: if we can review wapm in this PR it would make my life a bit easier! I'm super happy to iterate on it though if you have any feedback :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-535286909,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","The reason I suggest the split is that part of this change (adding a wasi build) is completely uncontroversial.
Its the adding of distro-specific files in the top level directory that I think is a somewhat controversial.   Just like we would probably wouldn't want debian or redhat packaging rules here at the top level.    How about putting them under dist/wapm or at least under wapm subdirectory?   I could be overthinking it.. what does @binji  think?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/syrusakbary,7,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-535296858,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","Its the adding of distro-specific files in the top level directory that I think is a somewhat controversial. Just like we would probably wouldn't want debian or redhat packaging rules here at the top level. How about putting them under dist/wapm or at least under wapm subdirectory?

wapm.toml is generally positioned in main dir for convenience, similarly on how CI tools (travis or appveyor), or other package managers position the manifests in the root dir (package.json, requirements.txt, Cargo.toml, ...).
However I'm happy to change dirs if you think that would make more sense",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-535392710,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","Its the adding of distro-specific files in the top level directory that I think is a somewhat controversial. Just like we would probably wouldn't want debian or redhat packaging rules here at the top level. How about putting them under dist/wapm or at least under wapm subdirectory?

wapm.toml is generally positioned in main dir for convenience, similarly on how CI tools (travis or appveyor), or other package managers position the manifests in the root dir (package.json, requirements.txt, Cargo.toml, ...).
However I'm happy to change dirs if you think that would make more sense

I think the difference with requirements.txt,  Cargo.toml or package.json, is that they are linked to the language the project is written in.    I would see that as more akin the CMakeLists.txt file here in wabt.    I see wapm.toml as a description of how to distribute the program on one particular platform, more like packaging for debian/ubuntu/redhat etc or a windows nsis installer script.   Perhaps I'm nitpiking too much and such files should be welcome at the top level?  I'm curious what others think?  I'm also curious about other projects?   Have other C/C++ projects been ok with this stuff in the root?
I'm also curious if being in the root dir is required?  Perhaps we can allow wapm to accept metadata outside the root dir?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/syrusakbary,9,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-535587670,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","Perhaps I'm nitpiking too much and such files should be welcome at the top level? I'm curious what others think?

Yeah, I agree that it's not trivial to see what's the ideal scenario. I would love to get other people thoughts 🙂

I'm also curious about other projects? Have other C/C++ projects been ok with this stuff in the root?

In general projects have been happy positioning the manifest config in the root. However, they have been mostly Rust/AssemblyScript projects. Most C/C++ projects we forked them and we haven't created a PR to them yet (this is the first one!).

I'm also curious if being in the root dir is required?

The manifest have to be in a parent dir of the WebAssembly files exposed. Doesn't need to be the root per-se though

Perhaps we can allow wapm to accept metadata outside the root dir?

It will require a bit of engineering effort on the wapm cli side, but it's completely feasible.
Perhaps the first thing that we need to figure out is where to position the wapm.toml config, and then adapt the ergonomics :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/sbc100,10,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-535593739,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","This dicussion is why I suggested to split the wasi-building part of the PR out, so that we could discuss that separably from the wapm metadata.
I would rather see wapm.toml continue to live downstream and be maintained by package maintainers as it would be in debian/redhat/etc.   Pushing this stuff upstream to C/C++ projects seems like the difficult direction.   They/We don't want to give any particular distro special status, and we can't possible support all distros upstream.    I obviously can't speak to other projects but I imagine you will meet similar pushback there.
One approach (that I believe freebsd ports takes) is to put the metadata for all packages into a single repo that package maintainers then commit to.   Have you considered that approach.  Then the entire wapm universe could be described in a single place and you can do thinks like ""make world"" to build every single package.
For example here is the freebsd vim package data:
https://github.com/freebsd/freebsd-ports/tree/master/editors/vim
Interstingly waby doesn't seem to be in freebsd ports .. somebody should add it :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/tlively,11,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-535597796,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","I don’t have an opinion about whether the packaging metadata should be upstream or elsewhere, but if we do decide to have it in-tree, it seems reasonable to me to put it and the binary artifacts together in some separate subdirectory.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/binji,12,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-535622065,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","I agree with @sbc100, I think it'll be nicer to have the materials required for packaging kept in a separate repo. This gives us a lot of flexibility too -- so the package can change without having to land a change in the upstream repo, and so changes to wabt don't break the packaging scripts.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/sbc100,13,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-541192676,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup",Would you mind splitting this PR so we can land the wasi builder script on its own?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/syrusakbary,14,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-541199192,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","Would you mind splitting this PR so we can land the wasi builder script on its own?

Yes! Will do that soon :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/syrusakbary,15,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-545079800,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","And... done! ✅
I removed all the references to WAPM in this PR, focusing only on compiling to WASI.
But... how? This PR now uses wasienv to compile easily to WebAssembly WASI (article coming up soon!)
@sbc100 @binji the PR should be ready to re-review :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/syrusakbary,16,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-545172423,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","Here's the article analyzing wasienv!
https://medium.com/wasmer/wasienv-wasi-development-workflow-for-humans-1811d9a50345",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/aardappel,17,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-546072978,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","Since WABT is a very general set of tools, it does not make sense to me to make it depend upon wasienv. It be better to add this script to wasienv (make it depend on WABT instead).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/syrusakbary,18,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-546092103,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","Since WABT is a very general set of tools, it does not make sense to me to make it depend upon wasienv.

I'm not sure if I understand correctly. I think wasienv falls in the same category as Emscripten? (Emscripten is already used in this project)
Do wabt wants WASI compilation target?
I think the main question that we have to answer is whether wabt wants to have first-class support for WASI in the main repo, and if so, what would be the path forward for that.
In the case that WASI compilation is desired in wabt, there will always be some kind of dependency that will need to be fulfilled (either downloading the SDK for the specific system/platform and having the CMake configuration apart, using wasienv which will make the process much easier, ...).
Summary
I thought using wasienv could be very useful for this project to enable WASI compilation in a very simple and easy way... but feel free to close this PR if you think that's not the case!
I'm here to help, but only if the help is desired and useful for the project (it's fine if it's not, no hard feelings!) 🙂",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1068,2019-04-23T17:28:43Z,,2022-05-25T12:06:51Z,OPEN,False,861,10,18,https://github.com/syrusakbary,WASI Integration,21,[],https://github.com/WebAssembly/wabt/pull/1068,https://github.com/sbc100,19,https://github.com/WebAssembly/wabt/pull/1068#issuecomment-547548628,"This PR brings WASI to wabt using wasienv.
Old description - wapm integration
We just released WAPM: a Package Manager for WebAssembly (announcement here).
We adapted wabt to emit .wasm files (using Emscripten) and then published to wapm so they can be used very easily (just one install command) across any OS/platform.
You can try it with:
# First, let's install wapm
curl https://get.wasmer.io -sSfL | sh

# Then, install wabt
wapm install wabt

# And then, you can use wasm2wat, ...
wapm run wasm2wat ...
It would be awesome if it could be integrated (maybe in the CI?) so any new releases are published automatically.
Let me know your thoughts!! :)

In order to be able to transfer you the ownership of the wabt package on wapm, I would need an username. You can register here: https://wapm.io/signup","Sorry for the delay responding here.  I'm afraid I haven't had a change to take a deep look at wasienv.  I think such tool could be a useful part of the ecosystem.    However, I'm wary of taking a dependency on it at this point in time.
I suggest the following approach, to mirror the current support for emscripten:

Rename this script to scripts/travis-wasi.sh and have it just to the building .. no downloading of anything (see travis-emcc.sh).
Add test-wasi to the build matrix that downloads the wasi-sdk (just the linux version) (as in a previous of the PR) and similar to the existing test-emcc (but without the need for docker) that runs scripts/travis-wasi.sh with $WASI_SDK_ROOT set.

Developers who want to build locally can then call scripts/travis-wasi.sh with $WASI_SDK_ROOT rather than having scripts/travis-wasi.sh do any downloading.
I'm sorry for so much back and forth on this PR.  I do think useful things have already come out of it and I hope we can still land it still.  I do hope to see wabt as part of wapm and hopefully this change will mean that we are doing CI to ensure that the wasi build doesn't regress.
I plan on keeping an eye wasienv as it evolves and maybe it will make sense to transition to using it at later date.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1069,2019-04-24T00:59:59Z,2019-04-24T14:45:24Z,2019-04-24T14:45:37Z,CLOSED,False,3413,3409,97,https://github.com/sbc100,wasm-objdump: Add function offset when disassembling,1,[],https://github.com/WebAssembly/wabt/pull/1069,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1069,"Currently we show file offset in hex, but backtraces in v8 show
functions offset in decimal
This change adds the decimal offset in addition.  Perhaps we could
drop the hex file offset?  Or make it an option?","Currently we show file offset in hex, but backtraces in v8 show
functions offset in decimal
This change adds the decimal offset in addition.  Perhaps we could
drop the hex file offset?  Or make it an option?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1069,2019-04-24T00:59:59Z,2019-04-24T14:45:24Z,2019-04-24T14:45:37Z,CLOSED,False,3413,3409,97,https://github.com/sbc100,wasm-objdump: Add function offset when disassembling,1,[],https://github.com/WebAssembly/wabt/pull/1069,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1069#issuecomment-486269121,"Currently we show file offset in hex, but backtraces in v8 show
functions offset in decimal
This change adds the decimal offset in addition.  Perhaps we could
drop the hex file offset?  Or make it an option?",So this a v8 bug I guess.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1069,2019-04-24T00:59:59Z,2019-04-24T14:45:24Z,2019-04-24T14:45:37Z,CLOSED,False,3413,3409,97,https://github.com/sbc100,wasm-objdump: Add function offset when disassembling,1,[],https://github.com/WebAssembly/wabt/pull/1069,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1069#issuecomment-486272902,"Currently we show file offset in hex, but backtraces in v8 show
functions offset in decimal
This change adds the decimal offset in addition.  Perhaps we could
drop the hex file offset?  Or make it an option?",Opened a v8 issue: https://bugs.chromium.org/p/v8/issues/detail?id=9172,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1071,2019-04-24T20:54:11Z,2019-04-24T23:28:04Z,2019-04-24T23:28:07Z,MERGED,True,76,36,4,https://github.com/binji,Update testsuite,2,[],https://github.com/WebAssembly/wabt/pull/1071,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1071,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1073,2019-04-30T23:25:35Z,2019-07-25T01:19:57Z,2019-07-25T01:19:57Z,CLOSED,False,3,2,1,https://github.com/ikna-x,"Fixing ""fac"" factorial function",1,[],https://github.com/WebAssembly/wabt/pull/1073,https://github.com/ikna-x,1,https://github.com/WebAssembly/wabt/pull/1073,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1073,2019-04-30T23:25:35Z,2019-07-25T01:19:57Z,2019-07-25T01:19:57Z,CLOSED,False,3,2,1,https://github.com/ikna-x,"Fixing ""fac"" factorial function",1,[],https://github.com/WebAssembly/wabt/pull/1073,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1073#issuecomment-488158063,,"Thanks! Both of these forms are valid, though, so this change isn't needed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1073,2019-04-30T23:25:35Z,2019-07-25T01:19:57Z,2019-07-25T01:19:57Z,CLOSED,False,3,2,1,https://github.com/ikna-x,"Fixing ""fac"" factorial function",1,[],https://github.com/WebAssembly/wabt/pull/1073,https://github.com/kirjs,3,https://github.com/WebAssembly/wabt/pull/1073#issuecomment-511133753,,"I think this pull requests exists because the deployed version of demo is out of sync with the code.
Maybe redeploy?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1073,2019-04-30T23:25:35Z,2019-07-25T01:19:57Z,2019-07-25T01:19:57Z,CLOSED,False,3,2,1,https://github.com/ikna-x,"Fixing ""fac"" factorial function",1,[],https://github.com/WebAssembly/wabt/pull/1073,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1073#issuecomment-514856739,,"Oops, you're right! I've pushed to gh-pages, should be fixed now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1074,2019-05-01T00:03:58Z,2019-05-08T02:03:03Z,2019-05-08T02:03:06Z,MERGED,True,10537,8699,43,https://github.com/binji,Implement bulk memory in the interpreter,6,[],https://github.com/WebAssembly/wabt/pull/1074,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1074,"Read/Write elem_type in element segments

Binary format
Text format ((elem passive funcref...))


Add DataSegment runtime objects
Only initialize active segments when instantiating
Don't bounds-check segments ahead of time (bulk-memory proposal changed this behavior)","Read/Write elem_type in element segments

Binary format
Text format ((elem passive funcref...))


Add DataSegment runtime objects
Only initialize active segments when instantiating
Don't bounds-check segments ahead of time (bulk-memory proposal changed this behavior)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1076,2019-05-08T00:38:25Z,2019-05-08T05:30:08Z,2019-05-08T05:30:10Z,MERGED,True,74,2,13,https://github.com/jgravelle-google,Initial custom annotation support,2,[],https://github.com/WebAssembly/wabt/pull/1076,https://github.com/jgravelle-google,1,https://github.com/WebAssembly/wabt/pull/1076,"Lex custom annotations, but discard them in the parser. In the future we
should be able to parse some of them, but this is simple and
spec-compliant for now.
(Annotations proposal: https://github.com/WebAssembly/annotations)","Lex custom annotations, but discard them in the parser. In the future we
should be able to parse some of them, but this is simple and
spec-compliant for now.
(Annotations proposal: https://github.com/WebAssembly/annotations)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1079,2019-05-13T16:24:34Z,2019-05-13T17:43:21Z,2019-05-14T13:57:44Z,MERGED,True,11,11,5,https://github.com/alexcrichton,Update typechecking for `table.grow`,1,[],https://github.com/WebAssembly/wabt/pull/1079,https://github.com/alexcrichton,1,https://github.com/WebAssembly/wabt/pull/1079,"I think the previous order was implemented in Firefox at some point but
it looks like it's since been updated so reversing the order of
operands in table.grow matches what the proposed spec text currently
says.","I think the previous order was implemented in Firefox at some point but
it looks like it's since been updated so reversing the order of
operands in table.grow matches what the proposed spec text currently
says.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1081,2019-05-16T20:09:06Z,2019-05-17T03:04:51Z,2019-05-17T03:04:51Z,MERGED,True,6,4,2,https://github.com/billti,Fix up CMake warning,1,[],https://github.com/WebAssembly/wabt/pull/1081,https://github.com/billti,1,https://github.com/WebAssembly/wabt/pull/1081,"Building the project (on Windows) per the instructions I was seeing the below
CMake Warning (dev) at CMakeLists.txt:38 (elseif):
  Policy CMP0054 is not set: Only interpret if() arguments as variables or
  keywords when unquoted.  Run ""cmake --help-policy CMP0054"" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.

  Quoted variables like ""MSVC"" will no longer be dereferenced when the policy
  is set to NEW.  Since the policy is not set the OLD behavior will be used.
This warning is for project developers.  Use -Wno-dev to suppress it.

After some confusion attempts at a fix, I came across https://stackoverflow.com/a/31044116 which states:
But be aware this can give you a headache in if() commands. Here is an example where CMAKE_CXX_COMPILER_ID is ""MSVC"" and MSVC is ""1"":

  if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"") is true, because it evaluates to if(""1"" STREQUAL ""1"")
  if(CMAKE_CXX_COMPILER_ID STREQUAL ""MSVC"") is false, because it evaluates to if(""MSVC"" STREQUAL ""1"")

So the best solution here would be - see above - to directly check for if(MSVC)

So it turns out on older CMake versions that comparison isn't even checking what you think it is. ""MSVC"" is already a variable (see https://cmake.org/cmake/help/v3.0/variable/MSVC.html), and expanded in the if statement. Simplest check is just to check if it is ""truthy"" (i.e. 1).
I also removed the needless ${..} in the if conditions, as if already expands variables (see https://stackoverflow.com/questions/45900159/how-to-use-variables-and-avoid-cmp0054-policy-violations). And switched the Clang check to a MATCH, as it can be Clang or AppleClang (according to https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html). See the note starting ""As of CMake 3..."" at https://stackoverflow.com/questions/10046114/in-cmake-how-can-i-test-if-the-compiler-is-clang.
I put a couple trivial additions in .gitignore also. I excluded build, as the readme instructrions generate the output to that dir. And excluded any .vscode dirs, as that's a common editor these days (and the one I'm using). Happy to separate out if you care out these things.","Building the project (on Windows) per the instructions I was seeing the below
CMake Warning (dev) at CMakeLists.txt:38 (elseif):
  Policy CMP0054 is not set: Only interpret if() arguments as variables or
  keywords when unquoted.  Run ""cmake --help-policy CMP0054"" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.

  Quoted variables like ""MSVC"" will no longer be dereferenced when the policy
  is set to NEW.  Since the policy is not set the OLD behavior will be used.
This warning is for project developers.  Use -Wno-dev to suppress it.

After some confusion attempts at a fix, I came across https://stackoverflow.com/a/31044116 which states:
But be aware this can give you a headache in if() commands. Here is an example where CMAKE_CXX_COMPILER_ID is ""MSVC"" and MSVC is ""1"":

  if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"") is true, because it evaluates to if(""1"" STREQUAL ""1"")
  if(CMAKE_CXX_COMPILER_ID STREQUAL ""MSVC"") is false, because it evaluates to if(""MSVC"" STREQUAL ""1"")

So the best solution here would be - see above - to directly check for if(MSVC)

So it turns out on older CMake versions that comparison isn't even checking what you think it is. ""MSVC"" is already a variable (see https://cmake.org/cmake/help/v3.0/variable/MSVC.html), and expanded in the if statement. Simplest check is just to check if it is ""truthy"" (i.e. 1).
I also removed the needless ${..} in the if conditions, as if already expands variables (see https://stackoverflow.com/questions/45900159/how-to-use-variables-and-avoid-cmp0054-policy-violations). And switched the Clang check to a MATCH, as it can be Clang or AppleClang (according to https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html). See the note starting ""As of CMake 3..."" at https://stackoverflow.com/questions/10046114/in-cmake-how-can-i-test-if-the-compiler-is-clang.
I put a couple trivial additions in .gitignore also. I excluded build, as the readme instructrions generate the output to that dir. And excluded any .vscode dirs, as that's a common editor these days (and the one I'm using). Happy to separate out if you care out these things.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1081,2019-05-16T20:09:06Z,2019-05-17T03:04:51Z,2019-05-17T03:04:51Z,MERGED,True,6,4,2,https://github.com/billti,Fix up CMake warning,1,[],https://github.com/WebAssembly/wabt/pull/1081,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1081#issuecomment-493302011,"Building the project (on Windows) per the instructions I was seeing the below
CMake Warning (dev) at CMakeLists.txt:38 (elseif):
  Policy CMP0054 is not set: Only interpret if() arguments as variables or
  keywords when unquoted.  Run ""cmake --help-policy CMP0054"" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.

  Quoted variables like ""MSVC"" will no longer be dereferenced when the policy
  is set to NEW.  Since the policy is not set the OLD behavior will be used.
This warning is for project developers.  Use -Wno-dev to suppress it.

After some confusion attempts at a fix, I came across https://stackoverflow.com/a/31044116 which states:
But be aware this can give you a headache in if() commands. Here is an example where CMAKE_CXX_COMPILER_ID is ""MSVC"" and MSVC is ""1"":

  if(""${CMAKE_CXX_COMPILER_ID}"" STREQUAL ""MSVC"") is true, because it evaluates to if(""1"" STREQUAL ""1"")
  if(CMAKE_CXX_COMPILER_ID STREQUAL ""MSVC"") is false, because it evaluates to if(""MSVC"" STREQUAL ""1"")

So the best solution here would be - see above - to directly check for if(MSVC)

So it turns out on older CMake versions that comparison isn't even checking what you think it is. ""MSVC"" is already a variable (see https://cmake.org/cmake/help/v3.0/variable/MSVC.html), and expanded in the if statement. Simplest check is just to check if it is ""truthy"" (i.e. 1).
I also removed the needless ${..} in the if conditions, as if already expands variables (see https://stackoverflow.com/questions/45900159/how-to-use-variables-and-avoid-cmp0054-policy-violations). And switched the Clang check to a MATCH, as it can be Clang or AppleClang (according to https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_COMPILER_ID.html). See the note starting ""As of CMake 3..."" at https://stackoverflow.com/questions/10046114/in-cmake-how-can-i-test-if-the-compiler-is-clang.
I put a couple trivial additions in .gitignore also. I excluded build, as the readme instructrions generate the output to that dir. And excluded any .vscode dirs, as that's a common editor these days (and the one I'm using). Happy to separate out if you care out these things.","Wow, this is great, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1082,2019-05-16T20:36:14Z,2019-05-17T03:07:40Z,2019-05-17T03:26:56Z,MERGED,True,6,2,1,https://github.com/billti,Fix INSTALL_PREFIX in README,1,[],https://github.com/WebAssembly/wabt/pull/1082,https://github.com/billti,1,https://github.com/WebAssembly/wabt/pull/1082,"The install command in the CMakeLists.txt file already includes a bin destination (see https://github.com/WebAssembly/wabt/blob/master/CMakeLists.txt#L439), so the current readme instructions left me with the binaries in a .\bin\bin directory. Updating the README here to remove the unnecessary bin.
Also updated the readme to note that CMake (and Ninja) are in the box now with VS (and thus don't need to be installed as a separate dependencies).
Note: VS 2015 is a couple releases old now, so happy to update those instructions to 2019 too if you like 😉","The install command in the CMakeLists.txt file already includes a bin destination (see https://github.com/WebAssembly/wabt/blob/master/CMakeLists.txt#L439), so the current readme instructions left me with the binaries in a .\bin\bin directory. Updating the README here to remove the unnecessary bin.
Also updated the readme to note that CMake (and Ninja) are in the box now with VS (and thus don't need to be installed as a separate dependencies).
Note: VS 2015 is a couple releases old now, so happy to update those instructions to 2019 too if you like 😉",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1082,2019-05-16T20:36:14Z,2019-05-17T03:07:40Z,2019-05-17T03:26:56Z,MERGED,True,6,2,1,https://github.com/billti,Fix INSTALL_PREFIX in README,1,[],https://github.com/WebAssembly/wabt/pull/1082,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1082#issuecomment-493302481,"The install command in the CMakeLists.txt file already includes a bin destination (see https://github.com/WebAssembly/wabt/blob/master/CMakeLists.txt#L439), so the current readme instructions left me with the binaries in a .\bin\bin directory. Updating the README here to remove the unnecessary bin.
Also updated the readme to note that CMake (and Ninja) are in the box now with VS (and thus don't need to be installed as a separate dependencies).
Note: VS 2015 is a couple releases old now, so happy to update those instructions to 2019 too if you like 😉","Thanks again!

Note: VS 2015 is a couple releases old now, so happy to update those instructions to 2019 too if you like 😉

Yes, but we test with VS2015 on the CI and it works, so may as well keep it :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1083,2019-05-17T19:11:13Z,2019-05-17T19:11:21Z,2019-05-17T19:11:24Z,MERGED,True,35,0,1,https://github.com/binji,"Add ""supported proposals"" section to README.md",1,[],https://github.com/WebAssembly/wabt/pull/1083,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1083,,,True,{'THUMBS_UP': ['https://github.com/Horcrux7']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1084,2019-05-17T22:19:43Z,2019-05-17T23:50:05Z,2019-05-17T23:50:08Z,MERGED,True,33,0,2,https://github.com/sbc100,[wasm-objdump] Fix crash on invalid reloc sections,2,[],https://github.com/WebAssembly/wabt/pull/1084,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1084,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1087,2019-06-04T01:17:01Z,2019-06-04T16:48:33Z,2019-06-04T16:48:36Z,MERGED,True,102,0,9,https://github.com/sbc100,Add support for comdat groups in the linking section,1,[],https://github.com/WebAssembly/wabt/pull/1087,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1087,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1088,2019-06-05T21:43:11Z,2019-06-07T16:53:42Z,2019-06-07T16:53:44Z,MERGED,True,3,3,3,https://github.com/binji,Rely on UTF-8 encoding in JSON strings,1,[],https://github.com/WebAssembly/wabt/pull/1088,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1088,Fixes issue #1086.,Fixes issue #1086.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1092,2019-06-07T19:20:08Z,2019-06-07T22:34:33Z,2019-06-07T22:34:36Z,MERGED,True,97,2,4,https://github.com/binji,Fix wasm-interp assertions,2,[],https://github.com/WebAssembly/wabt/pull/1092,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1092,"i32 init expression in data/elem segments
Instructions after the last ""end"" instruction of the function (the
function label has been popped)

Fixes #1089, #1090, #1091","i32 init expression in data/elem segments
Instructions after the last ""end"" instruction of the function (the
function label has been popped)

Fixes #1089, #1090, #1091",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1096,2019-06-24T22:28:20Z,2019-06-25T02:00:06Z,2019-06-25T02:00:09Z,MERGED,True,138,2,3,https://github.com/binji,Add tests for option-parser,2,[],https://github.com/WebAssembly/wabt/pull/1096,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1096,Also fix the bug with --long=value (see #1095).,Also fix the bug with --long=value (see #1095).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1097,2019-06-25T23:25:38Z,2019-06-27T16:57:22Z,2019-06-27T16:57:25Z,MERGED,True,43,21,7,https://github.com/binji,Match custom section names in wasm-objdump,1,[],https://github.com/WebAssembly/wabt/pull/1097,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1097,"This way you can see the contents of just one custom section by using:
wasm-objdump -j section_name -x

Where section_name is the name of the custom section.","This way you can see the contents of just one custom section by using:
wasm-objdump -j section_name -x

Where section_name is the name of the custom section.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1099,2019-06-28T10:31:06Z,2019-06-28T20:22:49Z,2019-06-28T20:22:49Z,CLOSED,False,2,2,1,https://github.com/pepyakin,Write text on assert_exhaustion,1,[],https://github.com/WebAssembly/wabt/pull/1099,https://github.com/pepyakin,1,https://github.com/WebAssembly/wabt/pull/1099,Reported in pepyakin/wabt-rs#33,Reported in pepyakin/wabt-rs#33,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1099,2019-06-28T10:31:06Z,2019-06-28T20:22:49Z,2019-06-28T20:22:49Z,CLOSED,False,2,2,1,https://github.com/pepyakin,Write text on assert_exhaustion,1,[],https://github.com/WebAssembly/wabt/pull/1099,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1099#issuecomment-506834233,Reported in pepyakin/wabt-rs#33,"This doesn't quite work, I've got a working PR here: #1100",True,{'LAUGH': ['https://github.com/pepyakin']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1100,2019-06-28T18:28:12Z,2019-06-28T20:54:35Z,2019-06-28T20:54:37Z,MERGED,True,5,0,2,https://github.com/binji,Write assert_exhaustion text to JSON file,1,[],https://github.com/WebAssembly/wabt/pull/1100,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1100,"The wast file definition for assert_exhaustion looks like:
(assert_exhaustion
  (invoke ""function"" (i32.const 132))
  ""error message"")
This commit adds the ""error message"" part to the output.","The wast file definition for assert_exhaustion looks like:
(assert_exhaustion
  (invoke ""function"" (i32.const 132))
  ""error message"")
This commit adds the ""error message"" part to the output.",True,{'THUMBS_UP': ['https://github.com/pepyakin']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1101,2019-06-28T22:05:49Z,2019-06-28T22:44:57Z,2019-07-01T17:56:39Z,MERGED,True,68,8,5,https://github.com/binji,[interp] Add flag to provide dummy import funcs,1,[],https://github.com/WebAssembly/wabt/pull/1101,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1101,"You can now pass --dummy-import-func to wasm-interp, which will
provide a function that logs the call and returns zero.","You can now pass --dummy-import-func to wasm-interp, which will
provide a function that logs the call and returns zero.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1101,2019-06-28T22:05:49Z,2019-06-28T22:44:57Z,2019-07-01T17:56:39Z,MERGED,True,68,8,5,https://github.com/binji,[interp] Add flag to provide dummy import funcs,1,[],https://github.com/WebAssembly/wabt/pull/1101,https://github.com/fitzgen,2,https://github.com/WebAssembly/wabt/pull/1101#issuecomment-507364056,"You can now pass --dummy-import-func to wasm-interp, which will
provide a function that logs the call and returns zero.",Awesome!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1105,2019-07-04T00:08:37Z,2019-07-11T17:58:12Z,2019-07-11T17:58:12Z,CLOSED,False,2,22,3,https://github.com/ids1024,Build against system gtest,1,[],https://github.com/WebAssembly/wabt/pull/1105,https://github.com/ids1024,1,https://github.com/WebAssembly/wabt/pull/1105,"Meant to address #1103.
gtest seems to be packaged on Arch Linux, Alpine Linux, Ubuntu, etc. It is generally preferable to use the system copy of a library instead of vendoring a copy.
Alternately, it be desirable to retain an option to build gtest, which could make things easier for some (for example, on Windows). But in my experience, building dependencies is generally left to the user.
I'm not particularly experience with cmake, so I don't necessarily know the preferred way to do things.","Meant to address #1103.
gtest seems to be packaged on Arch Linux, Alpine Linux, Ubuntu, etc. It is generally preferable to use the system copy of a library instead of vendoring a copy.
Alternately, it be desirable to retain an option to build gtest, which could make things easier for some (for example, on Windows). But in my experience, building dependencies is generally left to the user.
I'm not particularly experience with cmake, so I don't necessarily know the preferred way to do things.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1105,2019-07-04T00:08:37Z,2019-07-11T17:58:12Z,2019-07-11T17:58:12Z,CLOSED,False,2,22,3,https://github.com/ids1024,Build against system gtest,1,[],https://github.com/WebAssembly/wabt/pull/1105,https://github.com/ids1024,2,https://github.com/WebAssembly/wabt/pull/1105#issuecomment-508297515,"Meant to address #1103.
gtest seems to be packaged on Arch Linux, Alpine Linux, Ubuntu, etc. It is generally preferable to use the system copy of a library instead of vendoring a copy.
Alternately, it be desirable to retain an option to build gtest, which could make things easier for some (for example, on Windows). But in my experience, building dependencies is generally left to the user.
I'm not particularly experience with cmake, so I don't necessarily know the preferred way to do things.","Apparently the gtest FAQ used to have an entry ""Why is it not recommended to install a pre-compiled copy of Google Test (for example, into /usr/local)?"", but this was removed in google/googletest@5437926.
I assume the removal means they no longer advise against it?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1105,2019-07-04T00:08:37Z,2019-07-11T17:58:12Z,2019-07-11T17:58:12Z,CLOSED,False,2,22,3,https://github.com/ids1024,Build against system gtest,1,[],https://github.com/WebAssembly/wabt/pull/1105,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1105#issuecomment-509043542,"Meant to address #1103.
gtest seems to be packaged on Arch Linux, Alpine Linux, Ubuntu, etc. It is generally preferable to use the system copy of a library instead of vendoring a copy.
Alternately, it be desirable to retain an option to build gtest, which could make things easier for some (for example, on Windows). But in my experience, building dependencies is generally left to the user.
I'm not particularly experience with cmake, so I don't necessarily know the preferred way to do things.",I wouldn't want to remove gtest as a submodule; instead I'd prefer to add a CMake flag to optionally use the system gtest. The Travis and AppVeyor build scripts would have to be updated to support this too.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1105,2019-07-04T00:08:37Z,2019-07-11T17:58:12Z,2019-07-11T17:58:12Z,CLOSED,False,2,22,3,https://github.com/ids1024,Build against system gtest,1,[],https://github.com/WebAssembly/wabt/pull/1105,https://github.com/ids1024,4,https://github.com/WebAssembly/wabt/pull/1105#issuecomment-509046887,"Meant to address #1103.
gtest seems to be packaged on Arch Linux, Alpine Linux, Ubuntu, etc. It is generally preferable to use the system copy of a library instead of vendoring a copy.
Alternately, it be desirable to retain an option to build gtest, which could make things easier for some (for example, on Windows). But in my experience, building dependencies is generally left to the user.
I'm not particularly experience with cmake, so I don't necessarily know the preferred way to do things.","Overall, I'm inclined to agree that that's a sensible choice.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1109,2019-07-11T18:01:03Z,2019-07-16T00:59:07Z,2019-07-16T01:22:29Z,MERGED,True,20,15,1,https://github.com/ids1024,"Add USE_SYSTEM_GTEST option, to use system copy of GTest",1,[],https://github.com/WebAssembly/wabt/pull/1109,https://github.com/ids1024,1,https://github.com/WebAssembly/wabt/pull/1109,Fixes #1103,Fixes #1103,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1110,2019-07-12T19:02:04Z,2019-07-17T22:51:34Z,2019-07-17T22:51:34Z,MERGED,True,212,0,7,https://github.com/nlewycky,Add spec test support for V128.,8,[],https://github.com/WebAssembly/wabt/pull/1110,https://github.com/nlewycky,1,https://github.com/WebAssembly/wabt/pull/1110,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1110,2019-07-12T19:02:04Z,2019-07-17T22:51:34Z,2019-07-17T22:51:34Z,MERGED,True,212,0,7,https://github.com/nlewycky,Add spec test support for V128.,8,[],https://github.com/WebAssembly/wabt/pull/1110,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1110#issuecomment-511595330,,"Thanks for looking into this! Can you describe what the output looks like here? I'm having a bit of trouble telling from the code.
Also, for this to work, you need to parse these values too in JSONParser::ParseConst in spectest-interp.cc",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1110,2019-07-12T19:02:04Z,2019-07-17T22:51:34Z,2019-07-17T22:51:34Z,MERGED,True,212,0,7,https://github.com/nlewycky,Add spec test support for V128.,8,[],https://github.com/WebAssembly/wabt/pull/1110,https://github.com/nlewycky,3,https://github.com/WebAssembly/wabt/pull/1110#issuecomment-512041411,,The output is a plain decimal integer. I've added the parser.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1110,2019-07-12T19:02:04Z,2019-07-17T22:51:34Z,2019-07-17T22:51:34Z,MERGED,True,212,0,7,https://github.com/nlewycky,Add spec test support for V128.,8,[],https://github.com/WebAssembly/wabt/pull/1110,https://github.com/syrusakbary,4,https://github.com/WebAssembly/wabt/pull/1110#issuecomment-512054632,,"Some context on this PR: we are working on adding SIMD support to the Wasmer runtime.
Wasmer relies on wabt for parsing the .wast tests, and we are on the finish line to make all tests pass 🎉
Let us know if you have more feedback on what we can improve in the PR! :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1111,2019-07-13T17:27:16Z,2019-07-16T23:46:42Z,2019-07-16T23:46:45Z,MERGED,True,982,671,43,https://github.com/binji,Update spec testsuite,12,[],https://github.com/WebAssembly/wabt/pull/1111,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1111,"Remove passive keyword from bulk-memory
Fix const parsing","Remove passive keyword from bulk-memory
Fix const parsing",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1111,2019-07-13T17:27:16Z,2019-07-16T23:46:42Z,2019-07-16T23:46:45Z,MERGED,True,982,671,43,https://github.com/binji,Update spec testsuite,12,[],https://github.com/WebAssembly/wabt/pull/1111,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1111#issuecomment-511921663,"Remove passive keyword from bulk-memory
Fix const parsing","This almost works, but fails on two tests on MSVC 32-bit:
out/test/spec/conversions.wast:319: mismatch in result 0 of assert_return: expected f32:9223373136366403584.000000, got f32:9223372036854775808.000000
out/test/spec/conversions.wast:320: mismatch in result 0 of assert_return: expected f32:18446742974197923840.000000, got f32:18446741874686296064.000000

Which are these two cases from conversions.wast:
(assert_return (invoke ""f32.convert_i64_u"" (i64.const 0x8000008000000001)) (f32.const 0x1.000002p+63))
(assert_return (invoke ""f32.convert_i64_u"" (i64.const 0xfffffe8000000001)) (f32.const 0x1.fffffep+63))
The part I don't quite understand is that the current implementation of wabt_convert_uint64_to_float basically matches the generated clang/gcc assembly:
msvc:
        push    ecx
        fild    QWORD PTR _x$[esp]
        mov     ecx, DWORD PTR _x$[esp+4]
        xor     eax, eax
        and     ecx, -2147483648              ; 80000000H
        or      eax, ecx
        je      SHORT $LN2@foo2
        fadd    DWORD PTR float const `float foo2(unsigned __int64)'::`2'::c
$LN2@foo2:
        fstp    DWORD PTR _result$[esp+4]
        fld     DWORD PTR _result$[esp+4]
        pop     ecx
        ret     0

gcc: (from godbolt.org)
        sub     esp, 20
        mov     eax, DWORD PTR [esp+24]
        mov     edx, DWORD PTR [esp+28]
        movd    xmm0, eax
        movd    xmm1, edx
        punpckldq       xmm0, xmm1
        movq    QWORD PTR [esp+8], xmm0
        fild    QWORD PTR [esp+8]
        test    edx, edx
        jns     .L8
        fadd    DWORD PTR .LC1
.L8:
        fstp    DWORD PTR [esp+4]
        fld     DWORD PTR [esp+4]
        add     esp, 20
        ret
.LC1:
        .long   1602224128

I'm currently wondering if it's because the functions are inlined...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1111,2019-07-13T17:27:16Z,2019-07-16T23:46:42Z,2019-07-16T23:46:45Z,MERGED,True,982,671,43,https://github.com/binji,Update spec testsuite,12,[],https://github.com/WebAssembly/wabt/pull/1111,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1111#issuecomment-511982014,"Remove passive keyword from bulk-memory
Fix const parsing","I'm currently wondering if it's because the functions are inlined...

nope.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1112,2019-07-15T22:27:32Z,2019-07-15T23:26:18Z,2019-07-15T23:26:21Z,MERGED,True,68,21,2,https://github.com/binji,Fix value dropping bug in return_call,1,[],https://github.com/WebAssembly/wabt/pull/1112,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1112,"The previous implementation was not properly dropping values on the
stack when performing a return_call or return_call_indirect.
In particular, the ""keep count"" (i.e. the number of values to keep that
are on the top of the stack) was set properly, but the ""drop count"" (the
number of values to drop below the keep count), was not.
This fixes issue #1108.","The previous implementation was not properly dropping values on the
stack when performing a return_call or return_call_indirect.
In particular, the ""keep count"" (i.e. the number of values to keep that
are on the top of the stack) was set properly, but the ""drop count"" (the
number of values to drop below the keep count), was not.
This fixes issue #1108.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1114,2019-07-16T23:54:30Z,2019-07-17T02:06:56Z,2019-07-17T02:06:58Z,MERGED,True,22,4,2,https://github.com/sbc100,wasm-objdump: Improve display of comdat data,1,[],https://github.com/WebAssembly/wabt/pull/1114,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1114,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1115,2019-07-18T02:45:54Z,2019-07-18T16:27:36Z,2019-07-18T16:27:36Z,MERGED,True,2,1,1,https://github.com/nlewycky,"Fix use of non-portable format string, and removes clang build warning.",1,[],https://github.com/WebAssembly/wabt/pull/1115,https://github.com/nlewycky,1,https://github.com/WebAssembly/wabt/pull/1115,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1116,2019-07-18T04:06:57Z,2019-07-19T22:32:55Z,2019-07-19T22:38:26Z,MERGED,True,8327,7920,28,https://github.com/nlewycky,Add support for v8x16.swizzle and the load_splats.,4,[],https://github.com/WebAssembly/wabt/pull/1116,https://github.com/nlewycky,1,https://github.com/WebAssembly/wabt/pull/1116,"v8x16.shuffle2_imm is a rename of the previous v8x16.shuffle, but I add a copy of the code as if it were a new instruction in case the spec proposal makes further changes. The tests for old v8x16.shuffle remain in place and while there are new tests for the new v8x16.shuffle1, there are not for v8x16.shuffle2_imm. The behaviour and implementation are the same as for v8x16.shuffle, so we should simply search and replace the existing tests at some point, leaving one of them untested, probably the deprecated v8x16.shuffle.
I did test v8x16.shuffle1 against the SIMD spec test from WAVM and it passes. The WAVM spec tests for v8x16.shuffle2_imm parse but it has no invocations of the instruction.","v8x16.shuffle2_imm is a rename of the previous v8x16.shuffle, but I add a copy of the code as if it were a new instruction in case the spec proposal makes further changes. The tests for old v8x16.shuffle remain in place and while there are new tests for the new v8x16.shuffle1, there are not for v8x16.shuffle2_imm. The behaviour and implementation are the same as for v8x16.shuffle, so we should simply search and replace the existing tests at some point, leaving one of them untested, probably the deprecated v8x16.shuffle.
I did test v8x16.shuffle1 against the SIMD spec test from WAVM and it passes. The WAVM spec tests for v8x16.shuffle2_imm parse but it has no invocations of the instruction.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1116,2019-07-18T04:06:57Z,2019-07-19T22:32:55Z,2019-07-19T22:38:26Z,MERGED,True,8327,7920,28,https://github.com/nlewycky,Add support for v8x16.swizzle and the load_splats.,4,[],https://github.com/WebAssembly/wabt/pull/1116,https://github.com/tlively,2,https://github.com/WebAssembly/wabt/pull/1116#issuecomment-512884716,"v8x16.shuffle2_imm is a rename of the previous v8x16.shuffle, but I add a copy of the code as if it were a new instruction in case the spec proposal makes further changes. The tests for old v8x16.shuffle remain in place and while there are new tests for the new v8x16.shuffle1, there are not for v8x16.shuffle2_imm. The behaviour and implementation are the same as for v8x16.shuffle, so we should simply search and replace the existing tests at some point, leaving one of them untested, probably the deprecated v8x16.shuffle.
I did test v8x16.shuffle1 against the SIMD spec test from WAVM and it passes. The WAVM spec tests for v8x16.shuffle2_imm parse but it has no invocations of the instruction.","The SIMD group decided a little while ago to rename v8x16.shuffle1 and v8x16.shuffle2_imm to v8x16.swizzle and v8x16.shuffle_imm, respectively. We just haven’t reflected that change in our proposal repo yet 😳 I’ll make that update to the proposal repo today. Sorry for the confusion.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1116,2019-07-18T04:06:57Z,2019-07-19T22:32:55Z,2019-07-19T22:38:26Z,MERGED,True,8327,7920,28,https://github.com/nlewycky,Add support for v8x16.swizzle and the load_splats.,4,[],https://github.com/WebAssembly/wabt/pull/1116,https://github.com/nlewycky,3,https://github.com/WebAssembly/wabt/pull/1116#issuecomment-512894795,"v8x16.shuffle2_imm is a rename of the previous v8x16.shuffle, but I add a copy of the code as if it were a new instruction in case the spec proposal makes further changes. The tests for old v8x16.shuffle remain in place and while there are new tests for the new v8x16.shuffle1, there are not for v8x16.shuffle2_imm. The behaviour and implementation are the same as for v8x16.shuffle, so we should simply search and replace the existing tests at some point, leaving one of them untested, probably the deprecated v8x16.shuffle.
I did test v8x16.shuffle1 against the SIMD spec test from WAVM and it passes. The WAVM spec tests for v8x16.shuffle2_imm parse but it has no invocations of the instruction.","@tlively New name, same SIMD flavour!",True,{'THUMBS_UP': ['https://github.com/tlively']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1116,2019-07-18T04:06:57Z,2019-07-19T22:32:55Z,2019-07-19T22:38:26Z,MERGED,True,8327,7920,28,https://github.com/nlewycky,Add support for v8x16.swizzle and the load_splats.,4,[],https://github.com/WebAssembly/wabt/pull/1116,https://github.com/tlively,4,https://github.com/WebAssembly/wabt/pull/1116#issuecomment-512923311,"v8x16.shuffle2_imm is a rename of the previous v8x16.shuffle, but I add a copy of the code as if it were a new instruction in case the spec proposal makes further changes. The tests for old v8x16.shuffle remain in place and while there are new tests for the new v8x16.shuffle1, there are not for v8x16.shuffle2_imm. The behaviour and implementation are the same as for v8x16.shuffle, so we should simply search and replace the existing tests at some point, leaving one of them untested, probably the deprecated v8x16.shuffle.
I did test v8x16.shuffle1 against the SIMD spec test from WAVM and it passes. The WAVM spec tests for v8x16.shuffle2_imm parse but it has no invocations of the instruction.","Here's the PR to update the proposal, fyi: WebAssembly/simd#84",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1116,2019-07-18T04:06:57Z,2019-07-19T22:32:55Z,2019-07-19T22:38:26Z,MERGED,True,8327,7920,28,https://github.com/nlewycky,Add support for v8x16.swizzle and the load_splats.,4,[],https://github.com/WebAssembly/wabt/pull/1116,https://github.com/tlively,5,https://github.com/WebAssembly/wabt/pull/1116#issuecomment-513011095,"v8x16.shuffle2_imm is a rename of the previous v8x16.shuffle, but I add a copy of the code as if it were a new instruction in case the spec proposal makes further changes. The tests for old v8x16.shuffle remain in place and while there are new tests for the new v8x16.shuffle1, there are not for v8x16.shuffle2_imm. The behaviour and implementation are the same as for v8x16.shuffle, so we should simply search and replace the existing tests at some point, leaving one of them untested, probably the deprecated v8x16.shuffle.
I did test v8x16.shuffle1 against the SIMD spec test from WAVM and it passes. The WAVM spec tests for v8x16.shuffle2_imm parse but it has no invocations of the instruction.",I had misremebered: the (officially merged) new names are v8x16.swizzle and v8x16.shuffle. Apologies for the turn!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1118,2019-07-19T00:11:33Z,2019-07-19T01:08:30Z,2019-07-19T01:08:33Z,MERGED,True,38,9,2,https://github.com/binji,Fix floating point conversions on MSVC 32-bit,1,[],https://github.com/WebAssembly/wabt/pull/1118,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1118,"MSVC uses 53-bit precision for the x87 registers by default. In this
mode, it's not possible to properly round a large unsigned 64-bit
integer to a 32-bit float.
As a work-around, we can change the x87 floating-point precision, just
for these functions, and then reset it to the original precision.
A better solution may be to change the floating-point precision for the
entire program, though it's not clear what other effects that may have
on the generated code.
This change also re-enables the Appveyor 32-bit MSVC build.
Fixes issue #1113.","MSVC uses 53-bit precision for the x87 registers by default. In this
mode, it's not possible to properly round a large unsigned 64-bit
integer to a 32-bit float.
As a work-around, we can change the x87 floating-point precision, just
for these functions, and then reset it to the original precision.
A better solution may be to change the floating-point precision for the
entire program, though it's not clear what other effects that may have
on the generated code.
This change also re-enables the Appveyor 32-bit MSVC build.
Fixes issue #1113.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1119,2019-07-19T01:05:33Z,2019-07-19T03:16:13Z,2019-07-19T03:16:15Z,MERGED,True,16,2,2,https://github.com/binji,Fix assertion in WastLexer::IsCharClass(),1,[],https://github.com/WebAssembly/wabt/pull/1119,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1119,"If char is signed, then conversion to int will keep the sign.
IsCharClass() uses this value as an index, so the value must be
unsigned.
Fixes issue #1117.","If char is signed, then conversion to int will keep the sign.
IsCharClass() uses this value as an index, so the value must be
unsigned.
Fixes issue #1117.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1121,2019-07-19T16:31:28Z,2019-07-19T18:21:30Z,2019-07-19T18:21:34Z,MERGED,True,21,1,2,https://github.com/binji,Fix crash when newlines are in string tokens,2,[],https://github.com/WebAssembly/wabt/pull/1121,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1121,Fixes issue #1120.,Fixes issue #1120.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1122,2019-07-19T18:36:23Z,2019-07-19T20:53:09Z,2019-07-19T20:53:09Z,MERGED,True,1,1,1,https://github.com/nlewycky,"Fix typo, ""UNT8_C"" is not defined in stdint.h.",1,[],https://github.com/WebAssembly/wabt/pull/1122,https://github.com/nlewycky,1,https://github.com/WebAssembly/wabt/pull/1122,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1123,2019-07-19T21:14:20Z,2019-07-19T22:31:10Z,2019-07-19T22:31:13Z,MERGED,True,19,16,3,https://github.com/binji,Fix gcc and clang warnings,1,[],https://github.com/WebAssembly/wabt/pull/1123,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1123,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1125,2019-07-22T14:14:04Z,2019-07-22T17:02:25Z,2019-07-22T17:02:30Z,MERGED,True,13,0,2,https://github.com/wingo,"Fix parsing of anyref-valued ""if"" expressions",1,[],https://github.com/WebAssembly/wabt/pull/1125,https://github.com/wingo,1,https://github.com/WebAssembly/wabt/pull/1125,Fixes #1124.,Fixes #1124.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1125,2019-07-22T14:14:04Z,2019-07-22T17:02:25Z,2019-07-22T17:02:30Z,MERGED,True,13,0,2,https://github.com/wingo,"Fix parsing of anyref-valued ""if"" expressions",1,[],https://github.com/WebAssembly/wabt/pull/1125,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1125#issuecomment-513868639,Fixes #1124.,Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1126,2019-07-22T18:59:48Z,2019-07-22T19:25:08Z,2019-07-22T21:20:27Z,MERGED,True,3,6,1,https://github.com/binji,Change WABT_UNREACHABLE to call abort(),1,[],https://github.com/WebAssembly/wabt/pull/1126,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1126,"Using __builtin_unreachable instead will basically produce undefined
behavior if it is ever reached, which makes it very difficult to debug.
This is perhaps desired for an optimized build, but certainly not for a
debug build.
For now, we'll always convert these to abort().","Using __builtin_unreachable instead will basically produce undefined
behavior if it is ever reached, which makes it very difficult to debug.
This is perhaps desired for an optimized build, but certainly not for a
debug build.
For now, we'll always convert these to abort().",True,{'THUMBS_UP': ['https://github.com/wingo']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1126,2019-07-22T18:59:48Z,2019-07-22T19:25:08Z,2019-07-22T21:20:27Z,MERGED,True,3,6,1,https://github.com/binji,Change WABT_UNREACHABLE to call abort(),1,[],https://github.com/WebAssembly/wabt/pull/1126,https://github.com/tlively,2,https://github.com/WebAssembly/wabt/pull/1126#issuecomment-513959431,"Using __builtin_unreachable instead will basically produce undefined
behavior if it is ever reached, which makes it very difficult to debug.
This is perhaps desired for an optimized build, but certainly not for a
debug build.
For now, we'll always convert these to abort().",Binaryen has some fairly fancy logic for this: https://github.com/WebAssembly/binaryen/blob/db9124f1de0478dcac525009b6f1589b44a7edd8/src/compiler-support.h#L28. Perhaps WABT could borrow some of that.,True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1128,2019-07-23T19:45:30Z,2019-07-23T21:59:05Z,2019-07-23T21:59:08Z,MERGED,True,12,2,2,https://github.com/binji,Fix some fuzz bugs in wasm2wat,1,[],https://github.com/WebAssembly/wabt/pull/1128,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1128,"Also update the fuzz script to enable various features, so they get fuzz
testing too.","Also update the fuzz script to enable various features, so they get fuzz
testing too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1129,2019-07-25T00:42:44Z,2019-07-25T01:19:10Z,2019-07-25T01:19:13Z,MERGED,True,62,26,10,https://github.com/binji,Fix fuzzing bugs in wat2wasm,1,[],https://github.com/WebAssembly/wabt/pull/1129,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1129,"More bugs w/ bad strings (newlines and bad escapes)
Incorrect hex-float exponent
Update fuzz-wat2wasm.sh to enable features","More bugs w/ bad strings (newlines and bad escapes)
Incorrect hex-float exponent
Update fuzz-wat2wasm.sh to enable features",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1131,2019-07-25T13:16:17Z,2019-07-25T21:03:41Z,2019-07-25T21:03:41Z,MERGED,True,46,1,10,https://github.com/wingo,Add support for ref.null in global initializers,1,[],https://github.com/WebAssembly/wabt/pull/1131,https://github.com/wingo,1,https://github.com/WebAssembly/wabt/pull/1131,"As per the reference-types spec, ref.null is a constant expression.
I did try to add support for ref.func at the same time, but I didn't really understand the strategy of wabt and reference types; there seems to be strong intertwingliness between func.ref and the element section, whereas it does seem possible for a func.ref to be global.  Oh well, I didn't need it :)","As per the reference-types spec, ref.null is a constant expression.
I did try to add support for ref.func at the same time, but I didn't really understand the strategy of wabt and reference types; there seems to be strong intertwingliness between func.ref and the element section, whereas it does seem possible for a func.ref to be global.  Oh well, I didn't need it :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1131,2019-07-25T13:16:17Z,2019-07-25T21:03:41Z,2019-07-25T21:03:41Z,MERGED,True,46,1,10,https://github.com/wingo,Add support for ref.null in global initializers,1,[],https://github.com/WebAssembly/wabt/pull/1131,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1131#issuecomment-515213670,"As per the reference-types spec, ref.null is a constant expression.
I did try to add support for ref.func at the same time, but I didn't really understand the strategy of wabt and reference types; there seems to be strong intertwingliness between func.ref and the element section, whereas it does seem possible for a func.ref to be global.  Oh well, I didn't need it :)","Looks good, thanks!

I did try to add support for ref.func at the same time, but I didn't really understand the strategy of wabt and reference types; there seems to be strong intertwingliness between func.ref and the element section, whereas it does seem possible for a func.ref to be global.

Yeah, this will have to be untangled a bit. Though that's not part of the reference-types proposal, but instead the function-references proposal, right?",True,{'THUMBS_UP': ['https://github.com/amirouche']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1132,2019-07-26T04:52:48Z,2019-07-29T18:20:22Z,2019-07-29T18:47:15Z,MERGED,True,75,0,9,https://github.com/aheejin,Add --enable-all option,1,[],https://github.com/WebAssembly/wabt/pull/1132,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1132,This adds --enable-all option that enables all existing features.,This adds --enable-all option that enables all existing features.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1132,2019-07-26T04:52:48Z,2019-07-29T18:20:22Z,2019-07-29T18:47:15Z,MERGED,True,75,0,9,https://github.com/aheejin,Add --enable-all option,1,[],https://github.com/WebAssembly/wabt/pull/1132,https://github.com/Horcrux7,2,https://github.com/WebAssembly/wabt/pull/1132#issuecomment-516115636,This adds --enable-all option that enables all existing features.,I like this feature. Make the development for future versions easier. Never use a feature accidentally.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1136,2019-08-05T12:34:38Z,2020-06-10T19:16:11Z,2020-06-10T19:16:11Z,CLOSED,False,12,5,1,https://github.com/nomeata,wasm2c: wasm_rt_grow_memory should return -1 when OOM,1,[],https://github.com/WebAssembly/wabt/pull/1136,https://github.com/nomeata,1,https://github.com/WebAssembly/wabt/pull/1136,"the README states that wasm_rt_grow_memory should return -1 if it runs
out of memory, but the example C runtime does not actually do that.
This should fix that.","the README states that wasm_rt_grow_memory should return -1 if it runs
out of memory, but the example C runtime does not actually do that.
This should fix that.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1136,2019-08-05T12:34:38Z,2020-06-10T19:16:11Z,2020-06-10T19:16:11Z,CLOSED,False,12,5,1,https://github.com/nomeata,wasm2c: wasm_rt_grow_memory should return -1 when OOM,1,[],https://github.com/WebAssembly/wabt/pull/1136,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1136#issuecomment-520196680,"the README states that wasm_rt_grow_memory should return -1 if it runs
out of memory, but the example C runtime does not actually do that.
This should fix that.","Oh, actually it looks like this fails on the bots. The issue seems to be that realloc() with a size of zero will free the block. I think the easiest solution here is to early out at the beginning of wasm_rt_grow_memory when delta == 0.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1136,2019-08-05T12:34:38Z,2020-06-10T19:16:11Z,2020-06-10T19:16:11Z,CLOSED,False,12,5,1,https://github.com/nomeata,wasm2c: wasm_rt_grow_memory should return -1 when OOM,1,[],https://github.com/WebAssembly/wabt/pull/1136,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1136#issuecomment-642205228,"the README states that wasm_rt_grow_memory should return -1 if it runs
out of memory, but the example C runtime does not actually do that.
This should fix that.",This was implemented in #1148.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1138,2019-08-06T20:08:46Z,2019-08-11T03:53:49Z,2019-08-14T17:47:22Z,MERGED,True,36,5,5,https://github.com/nlewycky,Add support for Features to wasm-opcodecnt and emit total instruction count.,1,[],https://github.com/WebAssembly/wabt/pull/1138,https://github.com/nlewycky,1,https://github.com/WebAssembly/wabt/pull/1138,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1140,2019-08-11T03:51:49Z,2019-08-11T05:59:47Z,2019-08-11T05:59:50Z,MERGED,True,27,9,5,https://github.com/binji,Fix some bugs w/ wast2json and SIMD,1,[],https://github.com/WebAssembly/wabt/pull/1140,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1140,"Never allow a null options pointer to ParseWatModule or
ParseWastScript
Allow a token of type Int or Nat when parsing a simd float const","Never allow a null options pointer to ParseWatModule or
ParseWastScript
Allow a token of type Int or Nat when parsing a simd float const",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1141,2019-08-12T16:49:05Z,2019-08-13T16:35:59Z,2019-08-13T16:36:02Z,MERGED,True,16,3,2,https://github.com/aheejin,Visit catch even when its body is empty,3,[],https://github.com/WebAssembly/wabt/pull/1141,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1141,"The current visitor does not visit catch itself when its body is
empty. So even if the attached test with an empty catch body is
supposed to be a validation failure (because an exnref value is left
on the stack in the catch body), it passed the validator.
In more detail, in the current code,
Input: (should be a validation failure)
try
catch   ;; this pushes an exnref value onto the stack
end

Output: (wrong, catch is missing)
try
end

Now we correctly visit catch even when its body is empty, this test
correctly causes a validation failure.","The current visitor does not visit catch itself when its body is
empty. So even if the attached test with an empty catch body is
supposed to be a validation failure (because an exnref value is left
on the stack in the catch body), it passed the validator.
In more detail, in the current code,
Input: (should be a validation failure)
try
catch   ;; this pushes an exnref value onto the stack
end

Output: (wrong, catch is missing)
try
end

Now we correctly visit catch even when its body is empty, this test
correctly causes a validation failure.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1142,2019-08-12T17:07:36Z,2019-08-12T17:54:35Z,2019-08-12T17:54:38Z,MERGED,True,25,25,7,https://github.com/aheejin,Rename except_ref type to exnref,1,[],https://github.com/WebAssembly/wabt/pull/1142,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1142,"In WebAssembly/exception-handling#79 we agreed to rename except_ref
type to exnref.","In WebAssembly/exception-handling#79 we agreed to rename except_ref
type to exnref.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1144,2019-08-14T22:54:30Z,2019-08-15T17:38:10Z,2019-08-15T17:38:10Z,MERGED,True,44,45,9,https://github.com/quantum5,Run flake8 on the whole repository,4,[],https://github.com/WebAssembly/wabt/pull/1144,https://github.com/quantum5,1,https://github.com/WebAssembly/wabt/pull/1144,Seems like flake8 was only run on the scripts directory.,Seems like flake8 was only run on the scripts directory.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1145,2019-08-15T19:12:53Z,2019-08-15T20:44:30Z,2019-09-17T06:37:05Z,MERGED,True,2145,2146,12,https://github.com/sbc100,Switch python indentation from 2-space to 4-space,1,[],https://github.com/WebAssembly/wabt/pull/1145,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1145,"pep8 specifies 4 space indentation.  The use of 2 spaces is, I believe,
a historical anomaly where certain large organizations such as google
chose 2 over 4 and have yet to make the switch.
For a project like wabt with little python code I think the cost of
switching is small enough to justify the churn.","pep8 specifies 4 space indentation.  The use of 2 spaces is, I believe,
a historical anomaly where certain large organizations such as google
chose 2 over 4 and have yet to make the switch.
For a project like wabt with little python code I think the cost of
switching is small enough to justify the churn.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1145,2019-08-15T19:12:53Z,2019-08-15T20:44:30Z,2019-09-17T06:37:05Z,MERGED,True,2145,2146,12,https://github.com/sbc100,Switch python indentation from 2-space to 4-space,1,[],https://github.com/WebAssembly/wabt/pull/1145,https://github.com/Alhadis,2,https://github.com/WebAssembly/wabt/pull/1145#issuecomment-531432757,"pep8 specifies 4 space indentation.  The use of 2 spaces is, I believe,
a historical anomaly where certain large organizations such as google
chose 2 over 4 and have yet to make the switch.
For a project like wabt with little python code I think the cost of
switching is small enough to justify the churn.","I don't like 4-space much

Wouldn't it be great if there was a configurable yet unambiguous way to encode a tabstop directly inside a file without making assumptions about its width? And somehow have this semantic information understood by even the most rudimentary of text-editors?
Oh wait, tabs are bad... 😉 But people can never explain why, only remind you of the main reason to use them. “They have different sizes in different editors…”
But, like, tabs are also evil, and stuff. Probably also taboo in three world religions, banned in China, the real cause of the Bronze Age Collapse, and unequivocally spawned from parasitic alien life which infected Earth during the Stone Age... oh never mind, I'm thinking of EBCDIC.

*holds his breath and smashes that sexy little SUBMIT button*

Geronimoooooooo!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1145,2019-08-15T19:12:53Z,2019-08-15T20:44:30Z,2019-09-17T06:37:05Z,MERGED,True,2145,2146,12,https://github.com/sbc100,Switch python indentation from 2-space to 4-space,1,[],https://github.com/WebAssembly/wabt/pull/1145,https://github.com/tlively,3,https://github.com/WebAssembly/wabt/pull/1145#issuecomment-531433505,"pep8 specifies 4 space indentation.  The use of 2 spaces is, I believe,
a historical anomaly where certain large organizations such as google
chose 2 over 4 and have yet to make the switch.
For a project like wabt with little python code I think the cost of
switching is small enough to justify the churn.","😂😂😂
... but seriously, tabs are evil 😈",True,{'HEART': ['https://github.com/Alhadis']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1145,2019-08-15T19:12:53Z,2019-08-15T20:44:30Z,2019-09-17T06:37:05Z,MERGED,True,2145,2146,12,https://github.com/sbc100,Switch python indentation from 2-space to 4-space,1,[],https://github.com/WebAssembly/wabt/pull/1145,https://github.com/Alhadis,4,https://github.com/WebAssembly/wabt/pull/1145#issuecomment-531435669,"pep8 specifies 4 space indentation.  The use of 2 spaces is, I believe,
a historical anomaly where certain large organizations such as google
chose 2 over 4 and have yet to make the switch.
For a project like wabt with little python code I think the cost of
switching is small enough to justify the churn.","👌 It's okay, pick whatever tabstop you want, because I'm reformatting your code before reading it anyway. No, seriously, I'm habitually running this any time I'm loading most projects on GitHub. 👍 😉 Say what you want about my intolerance, you can't fault me for channeling that anger into a solution, instead of, y'know, whining about it at /r/bikeshed.
Also, uh, that subreddit, /r/bikeshed? Its posts seem to be a mix about hacker-related stuff and stuff about... actual bicycles. I really have no words for what this is making me feel right now.
EDIT: Sorry about making two off-topic posts, but the discovery of that subreddit was too awkward not to share...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1145,2019-08-15T19:12:53Z,2019-08-15T20:44:30Z,2019-09-17T06:37:05Z,MERGED,True,2145,2146,12,https://github.com/sbc100,Switch python indentation from 2-space to 4-space,1,[],https://github.com/WebAssembly/wabt/pull/1145,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1145#issuecomment-532012521,"pep8 specifies 4 space indentation.  The use of 2 spaces is, I believe,
a historical anomaly where certain large organizations such as google
chose 2 over 4 and have yet to make the switch.
For a project like wabt with little python code I think the cost of
switching is small enough to justify the churn.","Perhaps we should add an extra clause to our apache license that forbids refomatting of the code to contain tabs?    It would make the license non-free, but it would also help reduce evil in the world.",True,"{'EYES': ['https://github.com/tlively'], 'THUMBS_DOWN': ['https://github.com/Alhadis', 'https://github.com/mohe2015'], 'HEART': ['https://github.com/tlively']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1145,2019-08-15T19:12:53Z,2019-08-15T20:44:30Z,2019-09-17T06:37:05Z,MERGED,True,2145,2146,12,https://github.com/sbc100,Switch python indentation from 2-space to 4-space,1,[],https://github.com/WebAssembly/wabt/pull/1145,https://github.com/mohe2015,6,https://github.com/WebAssembly/wabt/pull/1145#issuecomment-532068844,"pep8 specifies 4 space indentation.  The use of 2 spaces is, I believe,
a historical anomaly where certain large organizations such as google
chose 2 over 4 and have yet to make the switch.
For a project like wabt with little python code I think the cost of
switching is small enough to justify the churn.",https://dmitryfrank.com/articles/indent_with_tabs_align_with_spaces should be the correct way in my opinion.,True,{'THUMBS_UP': ['https://github.com/Alhadis']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1145,2019-08-15T19:12:53Z,2019-08-15T20:44:30Z,2019-09-17T06:37:05Z,MERGED,True,2145,2146,12,https://github.com/sbc100,Switch python indentation from 2-space to 4-space,1,[],https://github.com/WebAssembly/wabt/pull/1145,https://github.com/Alhadis,7,https://github.com/WebAssembly/wabt/pull/1145#issuecomment-532081350,"pep8 specifies 4 space indentation.  The use of 2 spaces is, I believe,
a historical anomaly where certain large organizations such as google
chose 2 over 4 and have yet to make the switch.
For a project like wabt with little python code I think the cost of
switching is small enough to justify the churn.","@mohe2015 That's what I do, but I always keep them separated by at least one non-whitespace character, ensuring there's no ambiguity.
@sbc100 lol, copywhite",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1146,2019-08-15T20:50:42Z,2021-04-05T00:34:00Z,2021-04-05T00:34:01Z,MERGED,True,14,11,2,https://github.com/sbc100,Use ninja cmake generator by default,1,[],https://github.com/WebAssembly/wabt/pull/1146,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1146,"I'm tempted to followup by removing the ""Unix Makefile"" support
completely from the top level Makefile (users who really prefer that can
still run cmake directly of course).","I'm tempted to followup by removing the ""Unix Makefile"" support
completely from the top level Makefile (users who really prefer that can
still run cmake directly of course).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1146,2019-08-15T20:50:42Z,2021-04-05T00:34:00Z,2021-04-05T00:34:01Z,MERGED,True,14,11,2,https://github.com/sbc100,Use ninja cmake generator by default,1,[],https://github.com/WebAssembly/wabt/pull/1146,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1146#issuecomment-786754567,"I'm tempted to followup by removing the ""Unix Makefile"" support
completely from the top level Makefile (users who really prefer that can
still run cmake directly of course).",ping.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1148,2019-08-28T03:52:29Z,2019-08-29T21:52:04Z,2019-08-29T21:52:07Z,MERGED,True,10,2,1,https://github.com/binji,[wasm2c] Return -1 if wasm_rt_grow_memory fails,1,[],https://github.com/WebAssembly/wabt/pull/1148,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1148,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/acfoltzer,1,https://github.com/WebAssembly/wabt/pull/1151,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/acfoltzer,2,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-528112814,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","I just also added Features arguments to more of the C API functions in emscripten-helpers.cc, but I don't know how to test those as make test allowed non-compiling code through on my first attempt.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/acfoltzer,3,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-528482543,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.",I discovered that the type checker and validator need to be extended to handle the subtyping relation for references before this will fully work on the spec tests; please don't merge this yet.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/acfoltzer,4,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-530611866,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","I haven't had too much time to work on this since the initial PR, but I'm getting wedged on what the right way is to implement the more complex typechecking rules present in the proposal. If someone who's more familiar with the project could give me a nudge in the right direction, I would appreciate it.
First, I'm not sure how best to add nullref as a type; currently I have added it to the Type enum, but I'm not sure whether this is the right thing to do for a type that can't actually appear in a Wasm module:
// Matches binary format, do not change.
enum class Type : int32_t {
  I32 = -0x01,      // 0x7f
  I64 = -0x02,      // 0x7e
  F32 = -0x03,      // 0x7d
  F64 = -0x04,      // 0x7c
  V128 = -0x05,     // 0x7b
  Funcref = -0x10,  // 0x70
  Anyref = -0x11,   // 0x6f
  Exnref = -0x18,   // 0x68
  Func = -0x20,     // 0x60
  Void = -0x40,     // 0x40
  ___ = Void,       // Convenient for the opcode table in opcode.h
  Any = 0,          // Not actually specified, but useful for type-checking
  Nullref = -0x12,  // Specified in reference-types as an internal-only type
};
Second, the current uses of functions like TypeChecker::CheckType() assume that there is no subtyping at work. Adding subtyping means that we need to add a notion of variance, because in some contexts we can accept subtypes, in others we can accept supertypes, and finally some might need types to still match exactly. I'm leaning towards adding variance as an enum class argument to the relevant typechecking functions, but again I'm not much of a C++ programmer so I'd like to check whether this is a reasonable plan.
Finally, we will need least-upper-bound and greatest-lower-bound operators on types. It seems clear that Type::Any is suitable to use as the top element for the lub, but is Type::Void suitable for bottom? Also, is there an implementation for these you'd recommend that'd be more readable/maintainable than just a couple of hairy switch statements?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-530684794,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","Sorry, I haven't been able to look at this since I'm temporarily away on other projects. It seems like this change may address some of the issues, can you confirm?
I'll try to find some time to do a more thorough review this weekend.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/acfoltzer,6,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-531411305,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","Ah, thanks for that pointer! I've rebased my work onto the latest changes. There are still some issues, though, with getting the reference-types spec tests to validate. I'll work on adding them to the test suite so we can all see what's happening more easily.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/acfoltzer,7,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-531415812,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","Well, that was easier than I was expecting thanks to the update spec tests script!
It looks like the type of ref.null is being treated as a type index, probably because Nullref is set to a positive integer in @yurydelendik's changes:
out/test/spec/reference-types/globals.wast:187:17: error: type mismatch for result 0 of action. got anyref, expected <type_index>
(assert_return (invoke ""get-r"") (ref.null))
                ^^^^^^

In my attempt (pasted upthread) I used -0x12 to avoid being in the type index space, but this also is just making up a binary encoding which I'm not entirely comfortable with.
Secondly, we also need to add a lub operator and adapt the typechecking of instructions like branches and select that currently require their operands to have exactly equal types. For example:
out/test/spec/reference-types/br_table.wast:1257:10: error: br_table labels have inconsistent types: expected [funcref], got [anyref]
        (br_table $l2 $l1 $l2 (table.get 0 (i32.const 0)) (local.get 0))
         ^^^^^^^^

Also, it'll take quite a bit more work to get these tests to actually pass, as the proposal extensions are unimplemented in the interpreter, but it's still useful to see which of the spectests manage to make it past the wast2json step.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/acfoltzer,8,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-531421273,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","In my attempt (pasted upthread) I used -0x12 to avoid being in the type index space, but this also is just making up a binary encoding which I'm not entirely comfortable with.

This was a red herring; there just wasn't a case to properly print ""nullref"". What remains is the issue of needing different variances at different points in the typechecking: we usually want to check whether the actual type is a subtype of the expected type, but sometimes we want the relationship the other way around:
out/test/spec/reference-types/globals.wast:187:17: error: type mismatch for result 0 of action. got anyref, expected nullref
(assert_return (invoke ""get-r"") (ref.null))",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/binji,9,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-535216042,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","Right, the current typechecking is pretty limited. I imagine it will need a rewrite for this. Unfortunately, I don't have the bandwidth to do that currently. It seems like you know how it should work, it would be awesome if you could make the change! Is there anything I could help with w.r.t. direction?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/acfoltzer,10,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-536048939,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","Unfortunately my bandwidth has dried up as well, probably for at least the next couple months. I'm happy to pick it up again later, but I also don't want to block progress for anyone else who may be inclined.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1151,2019-09-04T21:24:11Z,2020-02-21T20:50:54Z,2020-05-27T20:26:29Z,CLOSED,False,1603,1100,51,https://github.com/acfoltzer,WIP: Improve support for reference-types proposal,4,[],https://github.com/WebAssembly/wabt/pull/1151,https://github.com/binji,11,https://github.com/WebAssembly/wabt/pull/1151#issuecomment-589829860,"Adds table.fill instruction
Adds assert_return_func and ref.host for spec scripts
Expands the IR Const type to include ref.null and ref.host
Enables opcodes that are shared between reference-types and bulk-memory-operations as long as either is enabled
Swaps the order of type and table arguments to call_indirect in the text format to match current proposals

A few caveats to this code:

I am not a C++ programmer; I tried to follow the style of the surrounding code, but if you spot anything that seems questionable, it's probably not for any good reason other than me being boneheaded.
My primary objective with this was to get wast2json working so that we could run the spec tests in Lucet. While I have made sure that make test passes, I may have some blind spots for other use cases.
I'm not terribly satisfied with how ref.null and ref.host are included in Const, but this seemed like the most straightforward way to add support. In particular, since ref.host doesn't have an associated opcode, it's treated as a different token type despite eventually becoming a Const.","Gonna close this -- there's pretty good reference types support now, both in the interpreter and elsewhere.",True,{'HEART': ['https://github.com/acfoltzer']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1153,2019-09-06T22:28:53Z,2019-09-25T20:22:49Z,2019-09-25T20:22:49Z,MERGED,True,1,1,1,https://github.com/dcodeIO,Attempt to locate Emscripten if EMSCRIPTEN_DIR is not set,2,[],https://github.com/WebAssembly/wabt/pull/1153,https://github.com/dcodeIO,1,https://github.com/WebAssembly/wabt/pull/1153,"This PR is an attempt to locate Emscripten automatically if it is in path, like when using emsdk, instead of having to set EMSCRIPTEN_DIR manually in order to run make emscripten-release. Not super important, just stumbled over this while trying to compile libwabt.js in a docker container.","This PR is an attempt to locate Emscripten automatically if it is in path, like when using emsdk, instead of having to set EMSCRIPTEN_DIR manually in order to run make emscripten-release. Not super important, just stumbled over this while trying to compile libwabt.js in a docker container.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1155,2019-09-10T16:40:20Z,2019-09-13T00:13:17Z,2019-09-13T00:13:17Z,MERGED,True,1432,710,11,https://github.com/aardappel,[WIP] Added initial skeleton code for wasm-decompile.,2,[],https://github.com/WebAssembly/wabt/pull/1155,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1155,"This is the skeleton code with some partial, very incomplete functionality, and will likely heavily change in the future.
@binji your review is optional, but welcome :)","This is the skeleton code with some partial, very incomplete functionality, and will likely heavily change in the future.
@binji your review is optional, but welcome :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1155,2019-09-10T16:40:20Z,2019-09-13T00:13:17Z,2019-09-13T00:13:17Z,MERGED,True,1432,710,11,https://github.com/aardappel,[WIP] Added initial skeleton code for wasm-decompile.,2,[],https://github.com/WebAssembly/wabt/pull/1155,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1155#issuecomment-530912917,"This is the skeleton code with some partial, very incomplete functionality, and will likely heavily change in the future.
@binji your review is optional, but welcome :)",@binji I'll have a look at c-writer.cc to see if any code can be shared.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1155,2019-09-10T16:40:20Z,2019-09-13T00:13:17Z,2019-09-13T00:13:17Z,MERGED,True,1432,710,11,https://github.com/aardappel,[WIP] Added initial skeleton code for wasm-decompile.,2,[],https://github.com/WebAssembly/wabt/pull/1155,https://github.com/aardappel,3,https://github.com/WebAssembly/wabt/pull/1155#issuecomment-531040794,"This is the skeleton code with some partial, very incomplete functionality, and will likely heavily change in the future.
@binji your review is optional, but welcome :)","@binji yeah, c-writer.cc also has a Label for example, but it is subtly different, and there's not a lot of other code sharing going on that I can see.
@jgravelle-google any further comments?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1156,2019-09-11T21:14:12Z,2019-09-12T12:35:33Z,2019-09-12T12:35:33Z,MERGED,True,1035,954,11,https://github.com/yurydelendik,[wast] Add ref.* to the invoke command,1,[],https://github.com/WebAssembly/wabt/pull/1156,https://github.com/yurydelendik,1,https://github.com/WebAssembly/wabt/pull/1156,"Adds ref.null and ref.host to the ""invoke"" command.

Adds nullref Type; ref.null has this type (for validation purpose)
Modifies CheckType according to https://webassembly.github.io/reference-types/core/valid/types.html#reference-types
Add ref.host pseudo operator","Adds ref.null and ref.host to the ""invoke"" command.

Adds nullref Type; ref.null has this type (for validation purpose)
Modifies CheckType according to https://webassembly.github.io/reference-types/core/valid/types.html#reference-types
Add ref.host pseudo operator",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1157,2019-09-12T06:03:58Z,2019-09-25T20:23:52Z,2019-09-25T20:23:56Z,MERGED,True,1,0,1,https://github.com/binji,Add wabt-unittests as dependency of run-tests,1,[],https://github.com/WebAssembly/wabt/pull/1157,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1157,"Without this, running make test will fail.
Fixes issue #1149.","Without this, running make test will fail.
Fixes issue #1149.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1161,2019-09-16T21:02:49Z,2019-09-16T22:03:38Z,2020-01-18T00:27:27Z,MERGED,True,9,0,1,https://github.com/jgravelle-google,Decompiler: Recurse into block exprs,1,[],https://github.com/WebAssembly/wabt/pull/1161,https://github.com/jgravelle-google,1,https://github.com/WebAssembly/wabt/pull/1161,"Basically copy-pasted from loops, but this is simplest at the moment. I imagine we can extract a ""bracketed expression list"" pattern, and use that for ifs/loops/etc.","Basically copy-pasted from loops, but this is simplest at the moment. I imagine we can extract a ""bracketed expression list"" pattern, and use that for ifs/loops/etc.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1162,2019-09-18T19:03:34Z,2019-09-19T19:30:47Z,2019-09-19T19:30:49Z,MERGED,True,26,15,3,https://github.com/sbc100,wasm-objdump: Add more symbol flags,1,[],https://github.com/WebAssembly/wabt/pull/1162,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1162,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1163,2019-09-19T22:55:03Z,2019-09-23T20:06:00Z,2019-09-23T20:06:00Z,MERGED,True,112,51,5,https://github.com/aardappel,Improved naming.,1,[],https://github.com/WebAssembly/wabt/pull/1163,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1163,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1163,2019-09-19T22:55:03Z,2019-09-23T20:06:00Z,2019-09-23T20:06:00Z,MERGED,True,112,51,5,https://github.com/aardappel,Improved naming.,1,[],https://github.com/WebAssembly/wabt/pull/1163,https://github.com/jgravelle-google,2,https://github.com/WebAssembly/wabt/pull/1163#issuecomment-534193232,,"Oh, and this could stand to have a better commit message. Improve its naming, if you will.
It needs more detail to be clearer as to what it's doing, and how the naming is improved.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1163,2019-09-19T22:55:03Z,2019-09-23T20:06:00Z,2019-09-23T20:06:00Z,MERGED,True,112,51,5,https://github.com/aardappel,Improved naming.,1,[],https://github.com/WebAssembly/wabt/pull/1163,https://github.com/aardappel,3,https://github.com/WebAssembly/wabt/pull/1163#issuecomment-534201147,,Improved commit (but not PR) message.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1164,2019-09-22T06:16:15Z,2019-09-25T20:36:33Z,2019-09-26T12:34:22Z,MERGED,True,3,3,1,https://github.com/chicoxyzzy,Update supported features table,1,[],https://github.com/WebAssembly/wabt/pull/1164,https://github.com/chicoxyzzy,1,https://github.com/WebAssembly/wabt/pull/1164,Closes #1154,Closes #1154,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1165,2019-09-23T23:54:08Z,2019-09-25T16:30:49Z,2019-09-25T16:30:49Z,MERGED,True,104,38,5,https://github.com/aardappel,wasm-decompile: Output Tee as Set+Get instead if possible.,1,[],https://github.com/WebAssembly/wabt/pull/1165,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1165,"This really de-tangles the code, as in-line assignments are
hard to read.
To make this possible, I had to track the current stack depth, take
into account unreachable paths and a few other support features.
Also added debug output upon assert.","This really de-tangles the code, as in-line assignments are
hard to read.
To make this possible, I had to track the current stack depth, take
into account unreachable paths and a few other support features.
Also added debug output upon assert.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1167,2019-09-25T01:06:33Z,,2021-03-22T16:56:58Z,OPEN,False,83,0,2,https://github.com/amirbawab,Run wasm-interp on specific (exported) functions,2,[],https://github.com/WebAssembly/wabt/pull/1167,https://github.com/amirbawab,1,https://github.com/WebAssembly/wabt/pull/1167,"Closes: #198
Minor changes allowing 'wasm-interp' to be executed for specific exported
wasm functions. Example syntax:
./wasm-interp                              \
-r ""my_func"" -a ""i32:1"" -a ""i32:2"", etc... \
file.wasm

./wasm-interp          \
-r ""func_A"" -a ""f32:1"" \
-r ""func_A"" -a ""f32:2"" \
-r ""func_B"" -a ""i64:1"" \
file.wasm

Currently supported types: i32, i64, f32, f64","Closes: #198
Minor changes allowing 'wasm-interp' to be executed for specific exported
wasm functions. Example syntax:
./wasm-interp                              \
-r ""my_func"" -a ""i32:1"" -a ""i32:2"", etc... \
file.wasm

./wasm-interp          \
-r ""func_A"" -a ""f32:1"" \
-r ""func_A"" -a ""f32:2"" \
-r ""func_B"" -a ""i64:1"" \
file.wasm

Currently supported types: i32, i64, f32, f64",True,"{'HOORAY': ['https://github.com/binji', 'https://github.com/awendland'], 'THUMBS_UP': ['https://github.com/awendland']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1167,2019-09-25T01:06:33Z,,2021-03-22T16:56:58Z,OPEN,False,83,0,2,https://github.com/amirbawab,Run wasm-interp on specific (exported) functions,2,[],https://github.com/WebAssembly/wabt/pull/1167,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1167#issuecomment-535214323,"Closes: #198
Minor changes allowing 'wasm-interp' to be executed for specific exported
wasm functions. Example syntax:
./wasm-interp                              \
-r ""my_func"" -a ""i32:1"" -a ""i32:2"", etc... \
file.wasm

./wasm-interp          \
-r ""func_A"" -a ""f32:1"" \
-r ""func_A"" -a ""f32:2"" \
-r ""func_B"" -a ""i64:1"" \
file.wasm

Currently supported types: i32, i64, f32, f64","Wow, thanks for doing this! I just skimmed the code, but in general this looks good. @jgravelle-google can you do a more thorough review?",True,{'THUMBS_UP': ['https://github.com/amirbawab']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1169,2019-09-25T18:17:20Z,2019-09-25T18:23:34Z,2019-09-25T18:23:38Z,CLOSED,False,0,165,2,https://github.com/sbc100,[WIP] Convert to CircleCI,1,[],https://github.com/WebAssembly/wabt/pull/1169,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1169,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1170,2019-09-25T18:42:55Z,2019-09-25T21:41:17Z,2019-09-25T21:41:17Z,MERGED,True,73,51,1,https://github.com/aardappel,wasm-decompile: added explicit return statements and types.,1,[],https://github.com/WebAssembly/wabt/pull/1170,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1170,"Previously, this was just the last value(s) of a block.","Previously, this was just the last value(s) of a block.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1171,2019-09-25T21:04:07Z,2019-09-25T21:04:15Z,2019-09-25T21:04:18Z,MERGED,True,1,1,1,https://github.com/binji,[wasm2c] Fix realloc check in wasm_rt_grow_memory,1,[],https://github.com/WebAssembly/wabt/pull/1171,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1171,See issue #1159.,See issue #1159.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1172,2019-09-25T21:48:13Z,2019-09-25T23:22:16Z,2019-09-25T23:22:16Z,MERGED,True,35,12,1,https://github.com/aardappel,wasm-decompile: Implement br/br_if,1,[],https://github.com/WebAssembly/wabt/pull/1172,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1172,"br becomes break or continue, and br_if the same, but prefixed
by an if(..).
These refer to the enclosing loop/block by generated label name,
this syntax may change.
We may later want to replace these by while/do-while/switch and
other special cases, but for now this is decently readable.
Also added ; to statements.","br becomes break or continue, and br_if the same, but prefixed
by an if(..).
These refer to the enclosing loop/block by generated label name,
this syntax may change.
We may later want to replace these by while/do-while/switch and
other special cases, but for now this is decently readable.
Also added ; to statements.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1173,2019-09-25T23:23:39Z,2019-09-26T00:26:23Z,2019-09-26T00:26:23Z,MERGED,True,54,12,1,https://github.com/aardappel,wasm-decompile: Declaring local and global vars.,1,[],https://github.com/WebAssembly/wabt/pull/1173,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1173,"global myvar:type = initializer;  // At file scope.
var myvar = initializer;  // Local, in a function.
Also takes care of lifting these out to function level if these
happen inside an exp, or make use of uninitialized local.","global myvar:type = initializer;  // At file scope.
var myvar = initializer;  // Local, in a function.
Also takes care of lifting these out to function level if these
happen inside an exp, or make use of uninitialized local.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1175,2019-09-26T21:40:21Z,2019-10-10T03:12:29Z,2019-10-10T03:47:16Z,MERGED,True,48,21,25,https://github.com/amirbawab,Add `--version` to wabt tools,3,[],https://github.com/WebAssembly/wabt/pull/1175,https://github.com/amirbawab,1,https://github.com/WebAssembly/wabt/pull/1175,"Closes: #1106
Ported versioning system from Binaryen CMakeLists.txt
bin/wasm2c --version
1.0.11-44-g71f883ad

Applied to (all) tools in src/tools/.","Closes: #1106
Ported versioning system from Binaryen CMakeLists.txt
bin/wasm2c --version
1.0.11-44-g71f883ad

Applied to (all) tools in src/tools/.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1177,2019-09-27T16:55:23Z,2019-09-30T17:13:52Z,2019-09-30T17:13:54Z,MERGED,True,21,10,4,https://github.com/sbc100,wasm-objdump: Include more information about memory segments.,1,[],https://github.com/WebAssembly/wabt/pull/1177,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1177,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1178,2019-09-30T18:07:51Z,,2021-03-22T16:56:58Z,OPEN,False,497,0,2,https://github.com/nlewycky,Add a testcase reduction tool.,11,[],https://github.com/WebAssembly/wabt/pull/1178,https://github.com/nlewycky,1,https://github.com/WebAssembly/wabt/pull/1178,"Work in progress initial commit of a testcase reduction tool for wabt. This is similar to bugpoint for LLVM, or bugpoint for cranelift, C-Reduce or delta and multidelta from http://delta.tigris.org .
A testcase reduction tool for Wasm also exists as part of binaryen, named wasm-reduce. I started this implementation before I was aware of that. My main reason for choosing wabt was to build on the promise of full fidelity (1:1 round trips with no changes to instructions) and most spec conformance (spec proposals tend to supply implementations in wabt first). Is there any interest in having this tool as part of wabt?","Work in progress initial commit of a testcase reduction tool for wabt. This is similar to bugpoint for LLVM, or bugpoint for cranelift, C-Reduce or delta and multidelta from http://delta.tigris.org .
A testcase reduction tool for Wasm also exists as part of binaryen, named wasm-reduce. I started this implementation before I was aware of that. My main reason for choosing wabt was to build on the promise of full fidelity (1:1 round trips with no changes to instructions) and most spec conformance (spec proposals tend to supply implementations in wabt first). Is there any interest in having this tool as part of wabt?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1178,2019-09-30T18:07:51Z,,2021-03-22T16:56:58Z,OPEN,False,497,0,2,https://github.com/nlewycky,Add a testcase reduction tool.,11,[],https://github.com/WebAssembly/wabt/pull/1178,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1178#issuecomment-536701302,"Work in progress initial commit of a testcase reduction tool for wabt. This is similar to bugpoint for LLVM, or bugpoint for cranelift, C-Reduce or delta and multidelta from http://delta.tigris.org .
A testcase reduction tool for Wasm also exists as part of binaryen, named wasm-reduce. I started this implementation before I was aware of that. My main reason for choosing wabt was to build on the promise of full fidelity (1:1 round trips with no changes to instructions) and most spec conformance (spec proposals tend to supply implementations in wabt first). Is there any interest in having this tool as part of wabt?","I think this would be cool to have. Are there any test cases, examples, or documentation that can be added to this PR?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1178,2019-09-30T18:07:51Z,,2021-03-22T16:56:58Z,OPEN,False,497,0,2,https://github.com/nlewycky,Add a testcase reduction tool.,11,[],https://github.com/WebAssembly/wabt/pull/1178,https://github.com/nlewycky,3,https://github.com/WebAssembly/wabt/pull/1178#issuecomment-536716125,"Work in progress initial commit of a testcase reduction tool for wabt. This is similar to bugpoint for LLVM, or bugpoint for cranelift, C-Reduce or delta and multidelta from http://delta.tigris.org .
A testcase reduction tool for Wasm also exists as part of binaryen, named wasm-reduce. I started this implementation before I was aware of that. My main reason for choosing wabt was to build on the promise of full fidelity (1:1 round trips with no changes to instructions) and most spec conformance (spec proposals tend to supply implementations in wabt first). Is there any interest in having this tool as part of wabt?","I think this would be cool to have. Are there any test cases, examples, or documentation that can be added to this PR?

I know I need to add them to this PR before it would be approved to land, I just wanted to start the review process early. The example I've been using for testing is
$ cat x.sh
#! /bin/sh
! /home/nick/wabt/build/wasm2wat ""$@"" | grep -q 'f64.convert_i64_u'
$ time wabt/build/wasm-bugpoint x.sh cowsay.wasm
Reduced testcase written out to wasm-bugpoint.wasm

real    0m3.014s
user    0m3.005s
sys     0m0.084s
$ ls -l cowsay.wasm wasm-bugpoint.wasm
-rw-r--r-- 1 nick nick 164744 Sep 30 12:19 wasm-bugpoint.wasm
-rwxr-xr-x 1 nick nick 818623 Jul 22 17:32 cowsay.wasm

I plan to move the Bisect and BisectWithFixedLinearRange classes to their own header out of tools/ so that I can write gtest tests for them. I'm not certain what to do about tests for TryRemovingBlocksFromFunction and TryRemovingBodyFromFunctions, those don't seem like utilities that should be shared but I still want tests for them. Maybe integration tests, ensuring the whole thing works, instead of unit tests? Also a man page.
I'll need the wabt developers to point out portability problems and help with some API issues. It would be nice if I could copy a module without going serializing it and deserializing it, especially if we could preserve a mapping from pointer to object in the old module to a pointer to the copy of it in the copy. Calling WriteBinaryModule on a FileStream fails because FileWriter::MoveData is not implemented, and I don't know what that method is supposed to do. I have a workaround for now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1179,2019-10-03T22:19:27Z,2019-10-07T18:29:53Z,2019-10-07T18:29:53Z,MERGED,True,27,4,2,https://github.com/ohorn,wasm-objdump: Fix type signature for multi-value result types,1,[],https://github.com/WebAssembly/wabt/pull/1179,https://github.com/ohorn,1,https://github.com/WebAssembly/wabt/pull/1179,"Previously only the first result type was printed, even for multiple results.
This change prints multiple result types in parenthesized form whereas single result types are printed as before.
The func-result-multi.txt test case is modified to cover the Type section as well.","Previously only the first result type was printed, even for multiple results.
This change prints multiple result types in parenthesized form whereas single result types are printed as before.
The func-result-multi.txt test case is modified to cover the Type section as well.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1179,2019-10-03T22:19:27Z,2019-10-07T18:29:53Z,2019-10-07T18:29:53Z,MERGED,True,27,4,2,https://github.com/ohorn,wasm-objdump: Fix type signature for multi-value result types,1,[],https://github.com/WebAssembly/wabt/pull/1179,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1179#issuecomment-539144480,"Previously only the first result type was printed, even for multiple results.
This change prints multiple result types in parenthesized form whereas single result types are printed as before.
The func-result-multi.txt test case is modified to cover the Type section as well.",Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1182,2019-10-07T11:22:43Z,2019-10-10T17:28:29Z,2019-10-10T17:28:32Z,MERGED,True,9,9,6,https://github.com/sbc100,Add ExternalKind to OnImport callback,1,[],https://github.com/WebAssembly/wabt/pull/1182,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1182,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1184,2019-10-12T16:05:46Z,2019-10-17T05:26:27Z,2020-01-18T00:27:29Z,MERGED,True,8,18,2,https://github.com/sbc100,Fix unused lambda capture warning,1,[],https://github.com/WebAssembly/wabt/pull/1184,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1184,"Also, inline two trivial methods.","Also, inline two trivial methods.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1184,2019-10-12T16:05:46Z,2019-10-17T05:26:27Z,2020-01-18T00:27:29Z,MERGED,True,8,18,2,https://github.com/sbc100,Fix unused lambda capture warning,1,[],https://github.com/WebAssembly/wabt/pull/1184,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1184#issuecomment-541338350,"Also, inline two trivial methods.",Should we add -DWERROR to the CI builds to prevent warning creeping in?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1185,2019-10-12T16:15:28Z,,2021-03-22T16:56:58Z,OPEN,False,7,5,1,https://github.com/sbc100,Enable -Werror for sanitizer builds,1,[],https://github.com/WebAssembly/wabt/pull/1185,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1185,"This means that we build with Werror during CI, but hopefully shouldn't
effect too many downstream users.","This means that we build with Werror during CI, but hopefully shouldn't
effect too many downstream users.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1186,2019-10-12T22:46:19Z,2019-10-14T18:56:11Z,2019-10-14T18:56:11Z,MERGED,True,10,4,3,https://github.com/ohorn,wasm-objdump: Print `br_table` immediates,1,[],https://github.com/WebAssembly/wabt/pull/1186,https://github.com/ohorn,1,https://github.com/WebAssembly/wabt/pull/1186,Print missing br_table immediates,Print missing br_table immediates,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1190,2019-10-17T05:50:27Z,2019-10-17T14:21:16Z,2019-10-17T14:21:19Z,MERGED,True,100,1,2,https://github.com/sbc100,Add initial support for multi-table to wat2wasm and wasm-objdump,1,[],https://github.com/WebAssembly/wabt/pull/1190,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1190,Fixes: #1188,Fixes: #1188,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1191,2019-10-18T20:47:43Z,2019-10-18T21:54:38Z,2019-10-21T18:38:25Z,MERGED,True,437,283,5,https://github.com/aardappel,wasm-decompile: Refactored code to first build an AST.,1,[],https://github.com/WebAssembly/wabt/pull/1191,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1191,"This will pave the way for a better multi-pass analysis that
can collect information for the final output pass.","This will pave the way for a better multi-pass analysis that
can collect information for the final output pass.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1192,2019-10-18T22:21:11Z,2019-10-18T22:53:37Z,2019-10-18T22:53:37Z,MERGED,True,21,6,2,https://github.com/aardappel,wasm-decompile: improved Return & Drop.,1,[],https://github.com/WebAssembly/wabt/pull/1192,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1192,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1192,2019-10-18T22:21:11Z,2019-10-18T22:53:37Z,2019-10-18T22:53:37Z,MERGED,True,21,6,2,https://github.com/aardappel,wasm-decompile: improved Return & Drop.,1,[],https://github.com/WebAssembly/wabt/pull/1192,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1192#issuecomment-543992406,,"Yes, I hope to add tests soon, once things settle down a bit.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1193,2019-10-18T23:26:11Z,2019-10-21T16:20:12Z,2019-10-21T16:20:14Z,MERGED,True,26,4,4,https://github.com/sbc100,Check for redefinitions of elem segments,2,[],https://github.com/WebAssembly/wabt/pull/1193,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1193,Fixes: #1187,Fixes: #1187,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1193,2019-10-18T23:26:11Z,2019-10-21T16:20:12Z,2019-10-21T16:20:14Z,MERGED,True,26,4,4,https://github.com/sbc100,Check for redefinitions of elem segments,2,[],https://github.com/WebAssembly/wabt/pull/1193,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1193#issuecomment-544009486,Fixes: #1187,It looks like the current spec expects (elem $foo) to name a table but with bulk memory (elem $foo) is introducing a new name for the segment.   So as it stands perhaps we need to handle parsing differently when bulk memory is enabled?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1193,2019-10-18T23:26:11Z,2019-10-21T16:20:12Z,2019-10-21T16:20:14Z,MERGED,True,26,4,4,https://github.com/sbc100,Check for redefinitions of elem segments,2,[],https://github.com/WebAssembly/wabt/pull/1193,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1193#issuecomment-544181797,Fixes: #1187,I fixed the existing third_party/testsuite/elem.wast test by basically parsing the elem section differently when bulk memory is enabled.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1193,2019-10-18T23:26:11Z,2019-10-21T16:20:12Z,2019-10-21T16:20:14Z,MERGED,True,26,4,4,https://github.com/sbc100,Check for redefinitions of elem segments,2,[],https://github.com/WebAssembly/wabt/pull/1193,https://github.com/aardappel,4,https://github.com/WebAssembly/wabt/pull/1193#issuecomment-544564111,Fixes: #1187,lgtm.. I guess at some future date we can remove this flag.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1195,2019-10-21T22:29:59Z,2019-10-24T15:08:26Z,2019-10-24T15:08:26Z,MERGED,True,113,28,6,https://github.com/aardappel,wasm-decompile: Added initial tests.,1,[],https://github.com/WebAssembly/wabt/pull/1195,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1195,"These are pretty minimal, more will be added as part of feature-PRs.","These are pretty minimal, more will be added as part of feature-PRs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1196,2019-10-22T21:30:12Z,2020-01-28T08:24:04Z,2020-01-28T08:24:14Z,CLOSED,False,110,14,14,https://github.com/TheFakeMontyOnTheRun,Add option to wasm2wat for using names from custom linking section,4,[],https://github.com/WebAssembly/wabt/pull/1196,https://github.com/TheFakeMontyOnTheRun,1,https://github.com/WebAssembly/wabt/pull/1196,"This change introduces an option in wasm2wat for using the linking custom section for providing names for the functions present in the module. This was inspired by observing what wasm-objdump does and replicating it.
You might notice I've duplicated the code in BinaryReaderIR::OnFunctionSymbol from BinaryReaderIR::OnFunctionName - thats because while, on the surface level, both do the same thing, I expect this to change, as the handling of the flags might be expanded.
I was just ""scratching my own itch"", but this seems like something useful for other people as well (it surely makes it easier to read the generated WAT).","This change introduces an option in wasm2wat for using the linking custom section for providing names for the functions present in the module. This was inspired by observing what wasm-objdump does and replicating it.
You might notice I've duplicated the code in BinaryReaderIR::OnFunctionSymbol from BinaryReaderIR::OnFunctionName - thats because while, on the surface level, both do the same thing, I expect this to change, as the handling of the flags might be expanded.
I was just ""scratching my own itch"", but this seems like something useful for other people as well (it surely makes it easier to read the generated WAT).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1196,2019-10-22T21:30:12Z,2020-01-28T08:24:04Z,2020-01-28T08:24:14Z,CLOSED,False,110,14,14,https://github.com/TheFakeMontyOnTheRun,Add option to wasm2wat for using names from custom linking section,4,[],https://github.com/WebAssembly/wabt/pull/1196,https://github.com/TheFakeMontyOnTheRun,2,https://github.com/WebAssembly/wabt/pull/1196#issuecomment-547403949,"This change introduces an option in wasm2wat for using the linking custom section for providing names for the functions present in the module. This was inspired by observing what wasm-objdump does and replicating it.
You might notice I've duplicated the code in BinaryReaderIR::OnFunctionSymbol from BinaryReaderIR::OnFunctionName - thats because while, on the surface level, both do the same thing, I expect this to change, as the handling of the flags might be expanded.
I was just ""scratching my own itch"", but this seems like something useful for other people as well (it surely makes it easier to read the generated WAT).","I'm a tabs-guy, so I strived very hard to keep coding standards consistent, but might have missed (or misunderstood) some parts. If so, please, let me know.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1196,2019-10-22T21:30:12Z,2020-01-28T08:24:04Z,2020-01-28T08:24:14Z,CLOSED,False,110,14,14,https://github.com/TheFakeMontyOnTheRun,Add option to wasm2wat for using names from custom linking section,4,[],https://github.com/WebAssembly/wabt/pull/1196,https://github.com/aardappel,3,https://github.com/WebAssembly/wabt/pull/1196#issuecomment-548484794,"This change introduces an option in wasm2wat for using the linking custom section for providing names for the functions present in the module. This was inspired by observing what wasm-objdump does and replicating it.
You might notice I've duplicated the code in BinaryReaderIR::OnFunctionSymbol from BinaryReaderIR::OnFunctionName - thats because while, on the surface level, both do the same thing, I expect this to change, as the handling of the flags might be expanded.
I was just ""scratching my own itch"", but this seems like something useful for other people as well (it surely makes it easier to read the generated WAT).","@binji maybe you can have a quick look, not quite sure if this is the most elegant way to achieve this functionality.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1196,2019-10-22T21:30:12Z,2020-01-28T08:24:04Z,2020-01-28T08:24:14Z,CLOSED,False,110,14,14,https://github.com/TheFakeMontyOnTheRun,Add option to wasm2wat for using names from custom linking section,4,[],https://github.com/WebAssembly/wabt/pull/1196,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1196#issuecomment-574886089,"This change introduces an option in wasm2wat for using the linking custom section for providing names for the functions present in the module. This was inspired by observing what wasm-objdump does and replicating it.
You might notice I've duplicated the code in BinaryReaderIR::OnFunctionSymbol from BinaryReaderIR::OnFunctionName - thats because while, on the surface level, both do the same thing, I expect this to change, as the handling of the flags might be expanded.
I was just ""scratching my own itch"", but this seems like something useful for other people as well (it surely makes it easier to read the generated WAT).","Sorry for the delay!
I think we should be able to use the linking section names, but I'd rather this not touch all the tools. It seems like the default should be to not use the linking section names. Similarly, I'm not sure I see why we should ever allow pure linking section names. The wat format requires names to have a leading $, so we shouldn't produce output without it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1196,2019-10-22T21:30:12Z,2020-01-28T08:24:04Z,2020-01-28T08:24:14Z,CLOSED,False,110,14,14,https://github.com/TheFakeMontyOnTheRun,Add option to wasm2wat for using names from custom linking section,4,[],https://github.com/WebAssembly/wabt/pull/1196,https://github.com/TheFakeMontyOnTheRun,5,https://github.com/WebAssembly/wabt/pull/1196#issuecomment-574892792,"This change introduces an option in wasm2wat for using the linking custom section for providing names for the functions present in the module. This was inspired by observing what wasm-objdump does and replicating it.
You might notice I've duplicated the code in BinaryReaderIR::OnFunctionSymbol from BinaryReaderIR::OnFunctionName - thats because while, on the surface level, both do the same thing, I expect this to change, as the handling of the flags might be expanded.
I was just ""scratching my own itch"", but this seems like something useful for other people as well (it surely makes it easier to read the generated WAT).","To be honest, I don't need this feature anymore (not sure about other people). The proof-of-concept I had (using WebAssembly to generate BASIC code and legally run it on the Nintendo 3DS) worked, but I don't feel like pursuing it anymore.
I can withdraw this Pull Request and would gladly help in other fronts, if you guys point me towards what would be desirable.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1196,2019-10-22T21:30:12Z,2020-01-28T08:24:04Z,2020-01-28T08:24:14Z,CLOSED,False,110,14,14,https://github.com/TheFakeMontyOnTheRun,Add option to wasm2wat for using names from custom linking section,4,[],https://github.com/WebAssembly/wabt/pull/1196,https://github.com/aardappel,6,https://github.com/WebAssembly/wabt/pull/1196#issuecomment-578963409,"This change introduces an option in wasm2wat for using the linking custom section for providing names for the functions present in the module. This was inspired by observing what wasm-objdump does and replicating it.
You might notice I've duplicated the code in BinaryReaderIR::OnFunctionSymbol from BinaryReaderIR::OnFunctionName - thats because while, on the surface level, both do the same thing, I expect this to change, as the handling of the flags might be expanded.
I was just ""scratching my own itch"", but this seems like something useful for other people as well (it surely makes it easier to read the generated WAT).",This PR likely has some overlap with this one: #1318,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1196,2019-10-22T21:30:12Z,2020-01-28T08:24:04Z,2020-01-28T08:24:14Z,CLOSED,False,110,14,14,https://github.com/TheFakeMontyOnTheRun,Add option to wasm2wat for using names from custom linking section,4,[],https://github.com/WebAssembly/wabt/pull/1196,https://github.com/TheFakeMontyOnTheRun,7,https://github.com/WebAssembly/wabt/pull/1196#issuecomment-579132654,"This change introduces an option in wasm2wat for using the linking custom section for providing names for the functions present in the module. This was inspired by observing what wasm-objdump does and replicating it.
You might notice I've duplicated the code in BinaryReaderIR::OnFunctionSymbol from BinaryReaderIR::OnFunctionName - thats because while, on the surface level, both do the same thing, I expect this to change, as the handling of the flags might be expanded.
I was just ""scratching my own itch"", but this seems like something useful for other people as well (it surely makes it easier to read the generated WAT).",Yep - most likely. I would re-do it anyway. Thanks for the code reviews.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1198,2019-10-24T11:01:03Z,2019-10-28T19:32:37Z,2019-10-28T19:32:37Z,MERGED,True,6,5,2,https://github.com/ohorn,wasm-objdump: Consistent output of table types,1,[],https://github.com/WebAssembly/wabt/pull/1198,https://github.com/ohorn,1,https://github.com/WebAssembly/wabt/pull/1198,"Adjusts the output of table imports to the output of table declarations and other elements:

type instead of elem_type
limits: initial instead of init, check has_max","Adjusts the output of table imports to the output of table declarations and other elements:

type instead of elem_type
limits: initial instead of init, check has_max",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1201,2019-10-26T01:05:08Z,2020-01-08T19:46:47Z,2020-01-08T19:46:50Z,MERGED,True,9,9,1,https://github.com/binji,Fix warning in test-hexfloat.cc,1,[],https://github.com/WebAssembly/wabt/pull/1201,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1201,"A float cant fit all the values of a uint32_t with full precision, since they are the same size. But a double has a 52-bit mantissa so it can represent a uint32_t with full precision. This fixes the compiler warning in test-hexfloat.cc.
Fixes #1200.","A float cant fit all the values of a uint32_t with full precision, since they are the same size. But a double has a 52-bit mantissa so it can represent a uint32_t with full precision. This fixes the compiler warning in test-hexfloat.cc.
Fixes #1200.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1201,2019-10-26T01:05:08Z,2020-01-08T19:46:47Z,2020-01-08T19:46:50Z,MERGED,True,9,9,1,https://github.com/binji,Fix warning in test-hexfloat.cc,1,[],https://github.com/WebAssembly/wabt/pull/1201,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1201#issuecomment-547106270,"A float cant fit all the values of a uint32_t with full precision, since they are the same size. But a double has a 52-bit mantissa so it can represent a uint32_t with full precision. This fixes the compiler warning in test-hexfloat.cc.
Fixes #1200.","A float can't always fit a uint32_t, but a double can.

Can you explain a little more... this seems very counter intuitive.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1201,2019-10-26T01:05:08Z,2020-01-08T19:46:47Z,2020-01-08T19:46:50Z,MERGED,True,9,9,1,https://github.com/binji,Fix warning in test-hexfloat.cc,1,[],https://github.com/WebAssembly/wabt/pull/1201,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1201#issuecomment-572192802,"A float cant fit all the values of a uint32_t with full precision, since they are the same size. But a double has a 52-bit mantissa so it can represent a uint32_t with full precision. This fixes the compiler warning in test-hexfloat.cc.
Fixes #1200.",Updated,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1202,2019-10-26T01:23:22Z,2020-01-08T19:51:52Z,2020-01-08T19:52:04Z,MERGED,True,29,1,2,https://github.com/binji,[wat2wasm] Don't crash on unsupported reloc type,2,[],https://github.com/WebAssembly/wabt/pull/1202,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1202,"TypeIndexLEB relocations (used by call_indirect) doesn't seem to be
supported.","TypeIndexLEB relocations (used by call_indirect) doesn't seem to be
supported.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1203,2019-10-26T01:32:27Z,2020-01-09T00:04:56Z,2020-01-09T00:04:59Z,MERGED,True,27,7,7,https://github.com/binji,[wat2wasm] Passive segments require bulk memory,4,[],https://github.com/WebAssembly/wabt/pull/1203,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1203,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1204,2019-11-05T01:01:07Z,2019-11-07T18:36:23Z,2019-11-07T18:36:25Z,MERGED,True,27,83,2,https://github.com/sbc100,Remove some used classes/members from the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1204,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1204,"This change also makes it easier to add an alternative import
resolver that is needed for implementing the C API.","This change also makes it easier to add an alternative import
resolver that is needed for implementing the C API.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1204,2019-11-05T01:01:07Z,2019-11-07T18:36:23Z,2019-11-07T18:36:25Z,MERGED,True,27,83,2,https://github.com/sbc100,Remove some used classes/members from the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1204,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1204#issuecomment-551207801,"This change also makes it easier to add an alternative import
resolver that is needed for implementing the C API.",Nope. Not used.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1205,2019-11-05T01:10:32Z,2019-11-08T00:26:59Z,2019-11-08T00:26:59Z,MERGED,True,233,72,4,https://github.com/aardappel,"wasm-decompile: reworked how ""stacky"" code gets decompiled.",1,[],https://github.com/WebAssembly/wabt/pull/1205,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1205,"For example: multi-value, and void exps while there are non-void
exps on the stack.
It now uses temp variables instead of pseudo push/pop, as the latter
weren't particularly readable and had an ordering problem that was
hard to make intuitive.
The new system covers all possible situations, generates as few
variables as possible, has clearer comments, and tests.","For example: multi-value, and void exps while there are non-void
exps on the stack.
It now uses temp variables instead of pseudo push/pop, as the latter
weren't particularly readable and had an ordering problem that was
hard to make intuitive.
The new system covers all possible situations, generates as few
variables as possible, has clearer comments, and tests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1205,2019-11-05T01:10:32Z,2019-11-08T00:26:59Z,2019-11-08T00:26:59Z,MERGED,True,233,72,4,https://github.com/aardappel,"wasm-decompile: reworked how ""stacky"" code gets decompiled.",1,[],https://github.com/WebAssembly/wabt/pull/1205,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1205#issuecomment-551245718,"For example: multi-value, and void exps while there are non-void
exps on the stack.
It now uses temp variables instead of pseudo push/pop, as the latter
weren't particularly readable and had an ordering problem that was
hard to make intuitive.
The new system covers all possible situations, generates as few
variables as possible, has clearer comments, and tests.",Note: CI error appears unrelated to this PR.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1206,2019-11-05T05:39:33Z,2019-11-08T02:42:51Z,2019-11-08T02:42:56Z,MERGED,True,294,41,27,https://github.com/sbc100,Implement initial reftype support in interpreter.,1,[],https://github.com/WebAssembly/wabt/pull/1206,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1206,"Initial implementation of reftype proposal in the interpreter.

Implement ref.func everywhere.
Implement table.get and table.set in the interpreter.","Initial implementation of reftype proposal in the interpreter.

Implement ref.func everywhere.
Implement table.get and table.set in the interpreter.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1206,2019-11-05T05:39:33Z,2019-11-08T02:42:51Z,2019-11-08T02:42:56Z,MERGED,True,294,41,27,https://github.com/sbc100,Implement initial reftype support in interpreter.,1,[],https://github.com/WebAssembly/wabt/pull/1206,https://github.com/alexcrichton,2,https://github.com/WebAssembly/wabt/pull/1206#issuecomment-549866006,"Initial implementation of reftype proposal in the interpreter.

Implement ref.func everywhere.
Implement table.get and table.set in the interpreter.","Sorry I don't have any experience with the interpreter here, so I'm probably not much help on review :(",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1206,2019-11-05T05:39:33Z,2019-11-08T02:42:51Z,2019-11-08T02:42:56Z,MERGED,True,294,41,27,https://github.com/sbc100,Implement initial reftype support in interpreter.,1,[],https://github.com/WebAssembly/wabt/pull/1206,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1206#issuecomment-550112960,"Initial implementation of reftype proposal in the interpreter.

Implement ref.func everywhere.
Implement table.get and table.set in the interpreter.","I got carried away an implemented more of this.   I'm not sure how best to test it other then cobbling together some local testrs, since the spec tests upstream don't yet contain the reftypes tests.
Is there some mechanism to pull in the test suites from the proposals repos?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1207,2019-11-06T18:49:03Z,2019-11-12T01:28:30Z,2019-11-12T01:28:33Z,MERGED,True,51,51,11,https://github.com/sbc100,Rename v128_bits to simply vec128 since this is stored natively,1,[],https://github.com/WebAssembly/wabt/pull/1207,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1207,"The _bits suffix is used the floating point types where we use types
that differ from the native C types.  For v128 we have a native struct
type that we store and manipulate directly.
Also remove the unneeded bitcast operations.","The _bits suffix is used the floating point types where we use types
that differ from the native C types.  For v128 we have a native struct
type that we store and manipulate directly.
Also remove the unneeded bitcast operations.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1207,2019-11-06T18:49:03Z,2019-11-12T01:28:30Z,2019-11-12T01:28:33Z,MERGED,True,51,51,11,https://github.com/sbc100,Rename v128_bits to simply vec128 since this is stored natively,1,[],https://github.com/WebAssembly/wabt/pull/1207,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1207#issuecomment-552671251,"The _bits suffix is used the floating point types where we use types
that differ from the native C types.  For v128 we have a native struct
type that we store and manipulate directly.
Also remove the unneeded bitcast operations.",ping..,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1208,2019-11-06T20:06:50Z,2020-01-15T22:35:32Z,2020-01-15T22:35:54Z,MERGED,True,2,0,1,https://github.com/sbc100,Add CMAKE_EXPORT_COMPILE_COMMANDS to CMakeLists.txt,1,[],https://github.com/WebAssembly/wabt/pull/1208,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1208,"This allows code completion tools such as clangd to work.  I'm not sure
if there is any downside to enabling this in all cases?","This allows code completion tools such as clangd to work.  I'm not sure
if there is any downside to enabling this in all cases?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1208,2019-11-06T20:06:50Z,2020-01-15T22:35:32Z,2020-01-15T22:35:54Z,MERGED,True,2,0,1,https://github.com/sbc100,Add CMAKE_EXPORT_COMPILE_COMMANDS to CMakeLists.txt,1,[],https://github.com/WebAssembly/wabt/pull/1208,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1208#issuecomment-551337328,"This allows code completion tools such as clangd to work.  I'm not sure
if there is any downside to enabling this in all cases?",ping,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1209,2019-11-06T21:36:13Z,2019-11-07T00:08:28Z,2020-05-20T00:16:21Z,MERGED,True,5,5,1,https://github.com/dschuff,Check for MSVC first in list of compiler tests,1,[],https://github.com/WebAssembly/wabt/pull/1209,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/1209,"This allows use of clang-cl.exe, wherin Clang pretends to be MSVC and accepts its flags.
It will be treated as MSVC in this case.
There are a few places where we'll want to tune further, and perhaps refactor to allow  a compiler to be both MSVC and clang, or perhaps use clang's flags instead of MSVC's. But this gets things working.","This allows use of clang-cl.exe, wherin Clang pretends to be MSVC and accepts its flags.
It will be treated as MSVC in this case.
There are a few places where we'll want to tune further, and perhaps refactor to allow  a compiler to be both MSVC and clang, or perhaps use clang's flags instead of MSVC's. But this gets things working.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1209,2019-11-06T21:36:13Z,2019-11-07T00:08:28Z,2020-05-20T00:16:21Z,MERGED,True,5,5,1,https://github.com/dschuff,Check for MSVC first in list of compiler tests,1,[],https://github.com/WebAssembly/wabt/pull/1209,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1209#issuecomment-550520156,"This allows use of clang-cl.exe, wherin Clang pretends to be MSVC and accepts its flags.
It will be treated as MSVC in this case.
There are a few places where we'll want to tune further, and perhaps refactor to allow  a compiler to be both MSVC and clang, or perhaps use clang's flags instead of MSVC's. But this gets things working.",Is MSVC some kind of internal cmake var?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1209,2019-11-06T21:36:13Z,2019-11-07T00:08:28Z,2020-05-20T00:16:21Z,MERGED,True,5,5,1,https://github.com/dschuff,Check for MSVC first in list of compiler tests,1,[],https://github.com/WebAssembly/wabt/pull/1209,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/1209#issuecomment-550526379,"This allows use of clang-cl.exe, wherin Clang pretends to be MSVC and accepts its flags.
It will be treated as MSVC in this case.
There are a few places where we'll want to tune further, and perhaps refactor to allow  a compiler to be both MSVC and clang, or perhaps use clang's flags instead of MSVC's. But this gets things working.","Yeah, something like that. I'm not sure how it's set, but it's set regardless of whether the compiler is clang or not.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1211,2019-11-07T19:21:31Z,2019-11-07T21:49:15Z,2019-11-07T21:49:18Z,MERGED,True,88,43,2,https://github.com/sbc100,wasm-objdump: Fix output for passive data elem segments,1,[],https://github.com/WebAssembly/wabt/pull/1211,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1211,Split out from #1206,Split out from #1206,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1213,2019-11-08T01:28:47Z,2019-11-11T16:39:18Z,2019-11-11T16:39:18Z,MERGED,True,20,3,4,https://github.com/aardappel,wasm-decompile: Fixed arbitrary characters appearing in function names.,1,[],https://github.com/WebAssembly/wabt/pull/1213,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1213,"In particular, LLD may stick entire C++ signatures in names, that
WABT then uses with wasm2wat, but are not appropriate for wasm-decompile
function names.","In particular, LLD may stick entire C++ signatures in names, that
WABT then uses with wasm2wat, but are not appropriate for wasm-decompile
function names.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1214,2019-11-08T04:00:15Z,2019-11-09T01:37:23Z,2019-11-09T01:37:25Z,MERGED,True,21,13,4,https://github.com/sbc100,Allow anyref globals to store ref subtypes,1,[],https://github.com/WebAssembly/wabt/pull/1214,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1214,"This requires the type of a global to be distinct from its current
TypedValue contents.","This requires the type of a global to be distinct from its current
TypedValue contents.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1214,2019-11-08T04:00:15Z,2019-11-09T01:37:23Z,2019-11-09T01:37:25Z,MERGED,True,21,13,4,https://github.com/sbc100,Allow anyref globals to store ref subtypes,1,[],https://github.com/WebAssembly/wabt/pull/1214,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/1214#issuecomment-552037370,"This requires the type of a global to be distinct from its current
TypedValue contents.",Does the same thing need to be done for locals or other value-typed things?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1214,2019-11-08T04:00:15Z,2019-11-09T01:37:23Z,2019-11-09T01:37:25Z,MERGED,True,21,13,4,https://github.com/sbc100,Allow anyref globals to store ref subtypes,1,[],https://github.com/WebAssembly/wabt/pull/1214,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1214#issuecomment-552047474,"This requires the type of a global to be distinct from its current
TypedValue contents.","No it looks verification of local.get and local.set stuff is all done by the type checker, no checks are done at runtime.  Which makes me think maybe the check for global assignment might be redundant too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1215,2019-11-08T04:40:07Z,2019-11-09T00:07:35Z,2019-11-09T00:07:39Z,MERGED,True,27,27,3,https://github.com/sbc100,interpreter: Move `env` member up to Module base class.,1,[],https://github.com/WebAssembly/wabt/pull/1215,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1215,"This is needed as part of implementing the C API on top of the
interpreter.
Also remove the trailing _ to match other struct members in this
file.
Also remove unneeded forward decls.","This is needed as part of implementing the C API on top of the
interpreter.
Also remove the trailing _ to match other struct members in this
file.
Also remove unneeded forward decls.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1215,2019-11-08T04:40:07Z,2019-11-09T00:07:35Z,2019-11-09T00:07:39Z,MERGED,True,27,27,3,https://github.com/sbc100,interpreter: Move `env` member up to Module base class.,1,[],https://github.com/WebAssembly/wabt/pull/1215,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1215#issuecomment-551382012,"This is needed as part of implementing the C API on top of the
interpreter.
Also remove the trailing _ to match other struct members in this
file.
Also remove unneeded forward decls.",This change is one of several I'm splitting off my interpreter PR.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1216,2019-11-09T01:38:50Z,2019-11-22T08:57:14Z,2019-11-22T08:57:18Z,CLOSED,False,1735,53,11,https://github.com/sbc100,[WIP] Initial WASM C API implementation.,1,[],https://github.com/WebAssembly/wabt/pull/1216,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1216,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1218,2019-11-13T19:12:41Z,2019-11-15T02:26:50Z,2019-11-15T02:26:53Z,MERGED,True,2227,2139,25,https://github.com/sbc100,reference-types: Add multi-table support to the interpreter,2,[],https://github.com/WebAssembly/wabt/pull/1218,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1218,"This involved plumbing the table argument for table.init and
table.copy all the way through rather than assuming they were
always zero.
Update the rather complex logic for assigning names to elem segments to
handle active elem segments which both name themselves and the table
they apply too.","This involved plumbing the table argument for table.init and
table.copy all the way through rather than assuming they were
always zero.
Update the rather complex logic for assigning names to elem segments to
handle active elem segments which both name themselves and the table
they apply too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1219,2019-11-14T18:17:53Z,2019-11-14T19:50:07Z,2019-11-14T19:50:10Z,MERGED,True,10,13,5,https://github.com/sbc100,reference-types: Table immediate of call_indirect comes first in the …,1,[],https://github.com/WebAssembly/wabt/pull/1219,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1219,"…text format
The overview document was incorrect until recently which I imagine is
why wabt got this wrong initially.
See WebAssembly/reference-types#59","…text format
The overview document was incorrect until recently which I imagine is
why wabt got this wrong initially.
See WebAssembly/reference-types#59",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1220,2019-11-14T20:53:51Z,2019-11-15T00:56:11Z,2019-11-15T00:56:14Z,MERGED,True,84,27,6,https://github.com/sbc100,reference-types: Improve reftype support,4,[],https://github.com/WebAssembly/wabt/pull/1220,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1220,"Add Hostref type which is an internal subtype of anyref used to
refer to host objects.
Since anyref is an abstract base type it should be be stored directly
on the value stack.  The value stack instead must contain elements of
the concrete RefType enumeration (currently Null, Func, or Foreign).
These changes are needed for the implementation of the C API but are
separately useful for improving conformance with the reftype proposal.
Implement subtyping rules for paramaters and results when using
CallFunction in the interpreter.","Add Hostref type which is an internal subtype of anyref used to
refer to host objects.
Since anyref is an abstract base type it should be be stored directly
on the value stack.  The value stack instead must contain elements of
the concrete RefType enumeration (currently Null, Func, or Foreign).
These changes are needed for the implementation of the C API but are
separately useful for improving conformance with the reftype proposal.
Implement subtyping rules for paramaters and results when using
CallFunction in the interpreter.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1221,2019-11-15T02:28:38Z,2019-11-15T18:12:24Z,2019-11-15T18:12:32Z,MERGED,True,25,16,4,https://github.com/sbc100,reference-types: implement type checking for table.get/table.set,1,[],https://github.com/WebAssembly/wabt/pull/1221,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1221,"Tests will follow in the form of the spec tests from the reference-types
repo.
See: #1223","Tests will follow in the form of the spec tests from the reference-types
repo.
See: #1223",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1222,2019-11-15T04:51:33Z,2019-11-15T18:11:51Z,2019-11-15T18:11:54Z,MERGED,True,19,19,5,https://github.com/sbc100,Fix expected stack layout when typechecking select instruction,1,[],https://github.com/WebAssembly/wabt/pull/1222,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1222,"The i32 condition variable should be the right-most type in the
error report.
Update bad-select-cond.txt to distinguish the difference and
prevent regression.","The i32 condition variable should be the right-most type in the
error report.
Update bad-select-cond.txt to distinguish the difference and
prevent regression.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1224,2019-11-15T17:30:43Z,2019-11-15T19:46:14Z,2019-11-15T19:46:17Z,MERGED,True,1190,1070,10,https://github.com/sbc100,wast2json: add new `assert_return_func` assertion type,1,[],https://github.com/WebAssembly/wabt/pull/1224,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1224,"This is needed for running the reference-types tests.
Also, add support for reference types in the json parser.
See: #1223","This is needed for running the reference-types tests.
Also, add support for reference types in the json parser.
See: #1223",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1225,2019-11-15T19:47:04Z,2019-11-26T01:30:36Z,2019-11-26T15:46:47Z,MERGED,True,1167,158,33,https://github.com/sbc100,reference-types: Add reference-types spec tests,1,[],https://github.com/WebAssembly/wabt/pull/1225,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1225,"This change add all but one (table_fill) of the the reference-types
spec tests and includes various fixes that were needed to make them
pass.
The table.fill implementation and testing will be a followup.
Fixes: #1223","This change add all but one (table_fill) of the the reference-types
spec tests and includes various fixes that were needed to make them
pass.
The table.fill implementation and testing will be a followup.
Fixes: #1223",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1225,2019-11-15T19:47:04Z,2019-11-26T01:30:36Z,2019-11-26T15:46:47Z,MERGED,True,1167,158,33,https://github.com/sbc100,reference-types: Add reference-types spec tests,1,[],https://github.com/WebAssembly/wabt/pull/1225,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1225#issuecomment-554504378,"This change add all but one (table_fill) of the the reference-types
spec tests and includes various fixes that were needed to make them
pass.
The table.fill implementation and testing will be a followup.
Fixes: #1223","This is the real payload of the patch sequence I've been working on the add full reference-types support and testing.
If you prefer I can try to split it up even further, but I think this is a reasonable size at this point.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1230,2019-11-18T01:29:31Z,2019-11-18T19:42:50Z,2019-11-18T19:42:53Z,MERGED,True,10,0,2,https://github.com/sbc100,wasm-interp: Correctly report failure of start function,1,[],https://github.com/WebAssembly/wabt/pull/1230,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1230,We were printing the error message but returning success.,We were printing the error message but returning success.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1231,2019-11-18T13:46:19Z,2020-04-20T19:10:20Z,2020-04-20T19:10:20Z,MERGED,True,696,582,29,https://github.com/wingo,Add support for atomic.fence from the threads proposal,1,[],https://github.com/WebAssembly/wabt/pull/1231,https://github.com/wingo,1,https://github.com/WebAssembly/wabt/pull/1231,"See WebAssembly/threads#141 for the binary encoding.  This patch does add a field to AtomicFenceExpr for the consistency model, though without a type for the time being.","See WebAssembly/threads#141 for the binary encoding.  This patch does add a field to AtomicFenceExpr for the consistency model, though without a type for the time being.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1232,2019-11-18T19:55:19Z,2019-11-18T23:18:51Z,2019-11-18T23:18:54Z,MERGED,True,152,133,23,https://github.com/sbc100,Switch to treating segment flags as a bitfield. NFC,3,[],https://github.com/WebAssembly/wabt/pull/1232,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1232,"This is in preparation for updating to latest version reference-types
proposal where there is an additional flag and they can be combined.
See: WebAssembly/bulk-memory-operations#98","This is in preparation for updating to latest version reference-types
proposal where there is an additional flag and they can be combined.
See: WebAssembly/bulk-memory-operations#98",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1233,2019-11-18T23:03:21Z,2019-11-25T22:17:21Z,2019-11-25T22:17:21Z,MERGED,True,140,19,4,https://github.com/aardappel,wasm-decompile: Output of other sections + import/export.,3,[],https://github.com/WebAssembly/wabt/pull/1233,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1233,"This now outputs memories, globals, tables, and import/export of
these (and functions).
Changed the syntax to be more consistent and refactored how it is
checked.","This now outputs memories, globals, tables, and import/export of
these (and functions).
Changed the syntax to be more consistent and refactored how it is
checked.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1234,2019-11-19T00:31:20Z,2019-11-19T18:15:18Z,2019-11-19T18:15:26Z,MERGED,True,3,3,1,https://github.com/sbc100,Fix for failing `git describe` in CMakeLists.txt,1,[],https://github.com/WebAssembly/wabt/pull/1234,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1234,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1235,2019-11-19T18:25:44Z,2019-11-19T19:56:27Z,2019-11-19T19:56:36Z,MERGED,True,1657,0,33,https://github.com/sbc100,spectest-interp: Report when assert_trap passes and include error str…,1,[],https://github.com/WebAssembly/wabt/pull/1235,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1235,…ing. NFC,…ing. NFC,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1236,2019-11-19T20:04:40Z,2019-11-19T22:46:03Z,2019-11-19T22:48:05Z,MERGED,True,449,406,18,https://github.com/sbc100,interpreter: Allow traps to include custom error strings,2,[],https://github.com/WebAssembly/wabt/pull/1236,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1236,"This means we can give more precise/useful errors for runtime failures.
Change interp::Result from an enum to struct so it can hold the
result enum plus an optional detailed error message.
Add TRAP_MSG and TRAP_IF_MSG macros that work just like TRAP and
TRAP_IF but contain a format string and printf-like arguments which
are formatted to produce the error message.","This means we can give more precise/useful errors for runtime failures.
Change interp::Result from an enum to struct so it can hold the
result enum plus an optional detailed error message.
Add TRAP_MSG and TRAP_IF_MSG macros that work just like TRAP and
TRAP_IF but contain a format string and printf-like arguments which
are formatted to produce the error message.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1237,2019-11-19T22:56:54Z,2019-11-22T08:23:47Z,2019-11-22T08:23:51Z,MERGED,True,2218,1255,93,https://github.com/sbc100,Update spec testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1237,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1237,"The only major change to the interpreter is to move segment
initialization out ReadBinaryInterp (in the binary reader) and into
interp.cc.  This is because the test suite now expects out of bound
semgments to be reported during initialization rather than reported
as validation errors.
Fixes: #1223","The only major change to the interpreter is to move segment
initialization out ReadBinaryInterp (in the binary reader) and into
interp.cc.  This is because the test suite now expects out of bound
semgments to be reported during initialization rather than reported
as validation errors.
Fixes: #1223",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1237,2019-11-19T22:56:54Z,2019-11-22T08:23:47Z,2019-11-22T08:23:51Z,MERGED,True,2218,1255,93,https://github.com/sbc100,Update spec testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1237,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1237#issuecomment-555756135,"The only major change to the interpreter is to move segment
initialization out ReadBinaryInterp (in the binary reader) and into
interp.cc.  This is because the test suite now expects out of bound
semgments to be reported during initialization rather than reported
as validation errors.
Fixes: #1223","I've tried to land a lot of parts of this change upfront, and I can continue to split it up more if you like, but its fairly minimal at this point in terms of the changes need to pass the new set of tests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1238,2019-11-20T17:53:18Z,2019-11-22T23:26:21Z,2019-11-22T23:26:25Z,MERGED,True,34,1,2,https://github.com/sbc100,Initial support for github actions,1,[],https://github.com/WebAssembly/wabt/pull/1238,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1238,"This adds a basic workflow that builds and tests wabt on all three
desktop platforms.
The plan is to extend this to completely replace travis and appveyor
in the future.
Fixes: #1168","This adds a basic workflow that builds and tests wabt on all three
desktop platforms.
The plan is to extend this to completely replace travis and appveyor
in the future.
Fixes: #1168",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1238,2019-11-20T17:53:18Z,2019-11-22T23:26:21Z,2019-11-22T23:26:25Z,MERGED,True,34,1,2,https://github.com/sbc100,Initial support for github actions,1,[],https://github.com/WebAssembly/wabt/pull/1238,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1238#issuecomment-557365013,"This adds a basic workflow that builds and tests wabt on all three
desktop platforms.
The plan is to extend this to completely replace travis and appveyor
in the future.
Fixes: #1168",OK this should be good to go now.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1239,2019-11-20T21:11:54Z,2019-11-21T01:02:31Z,2019-11-21T01:02:35Z,MERGED,True,5,4,1,https://github.com/sbc100,Fix i686 string formatting issues from #1236,1,[],https://github.com/WebAssembly/wabt/pull/1239,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1239,"I'm not sure how/why I allowed that change to land without the i686
tests passing.","I'm not sure how/why I allowed that change to land without the i686
tests passing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1240,2019-11-20T21:12:06Z,2019-11-22T02:15:45Z,2019-11-22T02:15:48Z,MERGED,True,5,1,1,https://github.com/sbc100,Add i686-clang build config,1,[],https://github.com/WebAssembly/wabt/pull/1240,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1240,"We have an i686-gcc build already but it doesn't work on my local
machine.","We have an i686-gcc build already but it doesn't work on my local
machine.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1241,2019-11-21T18:40:47Z,2019-11-22T02:14:51Z,2019-11-22T16:31:13Z,MERGED,True,2,0,1,https://github.com/sbc100,Add WABT_UNREACHABLE to silence gcc/msvc warnings,1,[],https://github.com/WebAssembly/wabt/pull/1241,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1241,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1241,2019-11-21T18:40:47Z,2019-11-22T02:14:51Z,2019-11-22T16:31:13Z,MERGED,True,2,0,1,https://github.com/sbc100,Add WABT_UNREACHABLE to silence gcc/msvc warnings,1,[],https://github.com/WebAssembly/wabt/pull/1241,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/1241#issuecomment-557600732,,LGTM,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1242,2019-11-21T19:35:57Z,2019-11-21T20:40:18Z,2019-11-21T20:40:28Z,MERGED,True,2,1,2,https://github.com/sbc100,Make memory_grow test as slow.,1,[],https://github.com/WebAssembly/wabt/pull/1242,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1242,"On windows debug builds these seems to be taking a long time.  Seems
to have gotten worse since #1236 landed.","On windows debug builds these seems to be taking a long time.  Seems
to have gotten worse since #1236 landed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1244,2019-11-21T20:16:11Z,2019-11-21T21:49:10Z,2019-11-21T21:49:13Z,CLOSED,False,122,1823,39,https://github.com/sbc100,EXPERIMENT Revert test ,1,[],https://github.com/WebAssembly/wabt/pull/1244,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1244,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1245,2019-11-21T21:49:26Z,2020-02-19T23:52:20Z,2020-02-19T23:52:21Z,CLOSED,False,4,5,2,https://github.com/sbc100,Fix regression in load/store speed in the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1245,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1245,"In #1236 the WABT_UNLIKELY hints for memory bounds checks were
inadvertently removed which caused the memory_grow spec test to start
timing out on windows debug builds.  This change restores the hints
and reverts #1242 which worked around the regression.","In #1236 the WABT_UNLIKELY hints for memory bounds checks were
inadvertently removed which caused the memory_grow spec test to start
timing out on windows debug builds.  This change restores the hints
and reverts #1242 which worked around the regression.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1245,2019-11-21T21:49:26Z,2020-02-19T23:52:20Z,2020-02-19T23:52:21Z,CLOSED,False,4,5,2,https://github.com/sbc100,Fix regression in load/store speed in the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1245,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/1245#issuecomment-557294098,"In #1236 the WABT_UNLIKELY hints for memory bounds checks were
inadvertently removed which caused the memory_grow spec test to start
timing out on windows debug builds.  This change restores the hints
and reverts #1242 which worked around the regression.",Interesting that those hints actually matter so much. Were they just hidden behind TRAP_IF or something before?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1245,2019-11-21T21:49:26Z,2020-02-19T23:52:20Z,2020-02-19T23:52:21Z,CLOSED,False,4,5,2,https://github.com/sbc100,Fix regression in load/store speed in the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1245,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/1245#issuecomment-557294355,"In #1236 the WABT_UNLIKELY hints for memory bounds checks were
inadvertently removed which caused the memory_grow spec test to start
timing out on windows debug builds.  This change restores the hints
and reverts #1242 which worked around the regression.","Should we use a TRAP_IF with another argument for messages, to avoid this in the future?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1245,2019-11-21T21:49:26Z,2020-02-19T23:52:20Z,2020-02-19T23:52:21Z,CLOSED,False,4,5,2,https://github.com/sbc100,Fix regression in load/store speed in the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1245,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1245#issuecomment-557295225,"In #1236 the WABT_UNLIKELY hints for memory bounds checks were
inadvertently removed which caused the memory_grow spec test to start
timing out on windows debug builds.  This change restores the hints
and reverts #1242 which worked around the regression.","Maybe, although the reason I didn't include that was because it makes macro usage fairly long and hard to read.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1245,2019-11-21T21:49:26Z,2020-02-19T23:52:20Z,2020-02-19T23:52:21Z,CLOSED,False,4,5,2,https://github.com/sbc100,Fix regression in load/store speed in the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1245,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/1245#issuecomment-572232163,"In #1236 the WABT_UNLIKELY hints for memory bounds checks were
inadvertently removed which caused the memory_grow spec test to start
timing out on windows debug builds.  This change restores the hints
and reverts #1242 which worked around the regression.",Can we resurrect this patch?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1245,2019-11-21T21:49:26Z,2020-02-19T23:52:20Z,2020-02-19T23:52:21Z,CLOSED,False,4,5,2,https://github.com/sbc100,Fix regression in load/store speed in the interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1245,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/1245#issuecomment-588535297,"In #1236 the WABT_UNLIKELY hints for memory bounds checks were
inadvertently removed which caused the memory_grow spec test to start
timing out on windows debug builds.  This change restores the hints
and reverts #1242 which worked around the regression.",I guess we don't need this now that I'm about to land the interpreter rewrite. Closing.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1246,2019-11-21T22:42:13Z,2019-11-22T02:51:53Z,2019-11-22T02:51:55Z,MERGED,True,7,8,3,https://github.com/sbc100,Avoid os.path.relpath in gen-spec-js.py,1,[],https://github.com/WebAssembly/wabt/pull/1246,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1246,"relpath here was failing with on windows when TMPDIR is on a different
drive.  This is because new_module_filename lives in the TMPDIR
where and json_dir might be on different drive.
These paths don't get embedded in the final JS anyway because we
embed them directly binary strings so its not important that they are
relative.","relpath here was failing with on windows when TMPDIR is on a different
drive.  This is because new_module_filename lives in the TMPDIR
where and json_dir might be on different drive.
These paths don't get embedded in the final JS anyway because we
embed them directly binary strings so its not important that they are
relative.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1247,2019-11-22T01:35:37Z,2019-11-22T08:21:56Z,2019-11-22T08:22:00Z,MERGED,True,2,2,1,https://github.com/sbc100,Fix run-tests target on windows,2,[],https://github.com/WebAssembly/wabt/pull/1247,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1247,"Under windows binaries end with .exe and live a the Debug or
Release subdirectory so we need to use $<TARGET_FILE> to get the
full executable name.","Under windows binaries end with .exe and live a the Debug or
Release subdirectory so we need to use $<TARGET_FILE> to get the
full executable name.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1250,2019-11-22T08:57:36Z,2020-01-16T22:53:11Z,2020-01-16T22:53:15Z,MERGED,True,1816,45,11,https://github.com/sbc100,Initial WASM C API implementation.,3,[],https://github.com/WebAssembly/wabt/pull/1250,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1250,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1250,2019-11-22T08:57:36Z,2020-01-16T22:53:11Z,2020-01-16T22:53:15Z,MERGED,True,1816,45,11,https://github.com/sbc100,Initial WASM C API implementation.,3,[],https://github.com/WebAssembly/wabt/pull/1250,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1250#issuecomment-558692055,,I think all the precursor PRs have now landed and this code is ready for review.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1250,2019-11-22T08:57:36Z,2020-01-16T22:53:11Z,2020-01-16T22:53:15Z,MERGED,True,1816,45,11,https://github.com/sbc100,Initial WASM C API implementation.,3,[],https://github.com/WebAssembly/wabt/pull/1250,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1250#issuecomment-562905782,,PTAL,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1250,2019-11-22T08:57:36Z,2020-01-16T22:53:11Z,2020-01-16T22:53:15Z,MERGED,True,1816,45,11,https://github.com/sbc100,Initial WASM C API implementation.,3,[],https://github.com/WebAssembly/wabt/pull/1250,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1250#issuecomment-564794603,,"If you are reviewing this then I recommend doing it in two phase:

First, everything outside of interp-wasm-c-api.cc.  This should be relatively simple.
This requires some understanding of the C-API.  However since the tests pass and this is the first pass at implementation you should be able to review this without looking too hard at all my bugs in your choose.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1250,2019-11-22T08:57:36Z,2020-01-16T22:53:11Z,2020-01-16T22:53:15Z,MERGED,True,1816,45,11,https://github.com/sbc100,Initial WASM C API implementation.,3,[],https://github.com/WebAssembly/wabt/pull/1250,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1250#issuecomment-572785074,,"Thanks for the review!
I share you concern regarding memory management.   I am quite surprised that the sanitizers didn't find anything for me actually.. a little suspicious.
Even if there are leaks here I'm keen to land this initial version and iterate.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1250,2019-11-22T08:57:36Z,2020-01-16T22:53:11Z,2020-01-16T22:53:15Z,MERGED,True,1816,45,11,https://github.com/sbc100,Initial WASM C API implementation.,3,[],https://github.com/WebAssembly/wabt/pull/1250,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1250#issuecomment-575343582,,Switched to unique_ptr in several places.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1250,2019-11-22T08:57:36Z,2020-01-16T22:53:11Z,2020-01-16T22:53:15Z,MERGED,True,1816,45,11,https://github.com/sbc100,Initial WASM C API implementation.,3,[],https://github.com/WebAssembly/wabt/pull/1250,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/1250#issuecomment-575383807,,"unique_ptr stuff lgtm, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1251,2019-11-23T00:47:06Z,2019-11-25T23:05:23Z,2019-11-25T23:05:28Z,MERGED,True,1,0,1,https://github.com/sbc100,Add github actions badge to README.md,2,[],https://github.com/WebAssembly/wabt/pull/1251,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1251,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1251,2019-11-23T00:47:06Z,2019-11-25T23:05:23Z,2019-11-25T23:05:28Z,MERGED,True,1,0,1,https://github.com/sbc100,Add github actions badge to README.md,2,[],https://github.com/WebAssembly/wabt/pull/1251,https://github.com/Horcrux7,2,https://github.com/WebAssembly/wabt/pull/1251#issuecomment-557821108,,A link to the badge image does not make much sense. I would expect a link to the result. A mistake?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1251,2019-11-23T00:47:06Z,2019-11-25T23:05:23Z,2019-11-25T23:05:28Z,MERGED,True,1,0,1,https://github.com/sbc100,Add github actions badge to README.md,2,[],https://github.com/WebAssembly/wabt/pull/1251,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1251#issuecomment-557852424,,"I added a link to the repo.  Sadly I can't find out how to deep link into the master branch.   Even github actions official repo just linked back to itself: https://github.com/actions/toolkit
Hopefully this is get fixes and we can update with a more useful link later.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1251,2019-11-23T00:47:06Z,2019-11-25T23:05:23Z,2019-11-25T23:05:28Z,MERGED,True,1,0,1,https://github.com/sbc100,Add github actions badge to README.md,2,[],https://github.com/WebAssembly/wabt/pull/1251,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1251#issuecomment-558380950,,"Right, but the URL that clicking on the image links to should be something useful.   Currently I don't know how to construct that... but its easy to fix once we get the knowledge.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1252,2019-11-24T23:40:51Z,2019-11-26T03:41:14Z,2019-11-26T15:46:45Z,MERGED,True,212,64,29,https://github.com/sbc100,reference-types: Add table.fill instruction,1,[],https://github.com/WebAssembly/wabt/pull/1252,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1252,"This change implements the table.fill instruction and also adds the test from the reference types
proposal.
This change is chained on top of #1225","This change implements the table.fill instruction and also adds the test from the reference types
proposal.
This change is chained on top of #1225",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1253,2019-11-24T23:45:43Z,2019-11-26T15:45:15Z,2019-11-26T15:45:22Z,MERGED,True,8616,8444,21,https://github.com/sbc100,reference-types: Add support for typed select,1,[],https://github.com/WebAssembly/wabt/pull/1253,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1253,"This change add the remaining test from the reference-types repo which involves implementing the
new typed select instruction.
This change is chained on top of #1252 and #1225","This change add the remaining test from the reference-types repo which involves implementing the
new typed select instruction.
This change is chained on top of #1252 and #1225",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1254,2019-11-26T03:56:01Z,2019-11-26T15:46:28Z,2019-11-26T15:46:30Z,MERGED,True,1,1,1,https://github.com/sbc100,Run github actions on push as well as PR,1,[],https://github.com/WebAssembly/wabt/pull/1254,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1254,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1255,2019-11-29T23:50:37Z,2019-12-03T22:48:34Z,2019-12-03T22:48:37Z,MERGED,True,22,14,3,https://github.com/sbc100,Split run-unittests out as seperate target,1,[],https://github.com/WebAssembly/wabt/pull/1255,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1255,"New check target now runs them both.  This allows for github actions to
show unittests and system tests as separate steps.
Also a couple of CMakeLists.txt cleanups:

Don't use add_definition to add -fno-exceptions, this is a C++-only
flag.
Lowercase the name of the sanitizer function.
Remove opcode.def from list of library input file.  On windows when
building a DLL .def files are assumed to be windows DLL .def files,
which this is not.

This change is split out from #1250","New check target now runs them both.  This allows for github actions to
show unittests and system tests as separate steps.
Also a couple of CMakeLists.txt cleanups:

Don't use add_definition to add -fno-exceptions, this is a C++-only
flag.
Lowercase the name of the sanitizer function.
Remove opcode.def from list of library input file.  On windows when
building a DLL .def files are assumed to be windows DLL .def files,
which this is not.

This change is split out from #1250",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1256,2019-11-30T00:02:48Z,2020-06-10T19:13:54Z,2020-06-10T19:13:54Z,CLOSED,False,13,103,2,https://github.com/sbc100,Add sanitizers to github actions,2,[],https://github.com/WebAssembly/wabt/pull/1256,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1256,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1256,2019-11-30T00:02:48Z,2020-06-10T19:13:54Z,2020-06-10T19:13:54Z,CLOSED,False,13,103,2,https://github.com/sbc100,Add sanitizers to github actions,2,[],https://github.com/WebAssembly/wabt/pull/1256,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1256#issuecomment-642204071,,Closing since we've fully switched to GH actions (with sanitizers).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1258,2019-12-06T01:21:11Z,2019-12-10T01:03:19Z,2019-12-10T01:03:19Z,MERGED,True,374,78,7,https://github.com/aardappel,wasm-decompile: Load/Store tracking for struct output.,1,[],https://github.com/WebAssembly/wabt/pull/1258,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1258,"This tries to make code more readable by summarizing patterns of
load/store ops into ""struct"" declarations.
Initial version, can probably be improved, but has all essentials
of the idea in place.","This tries to make code more readable by summarizing patterns of
load/store ops into ""struct"" declarations.
Initial version, can probably be improved, but has all essentials
of the idea in place.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1261,2019-12-09T18:58:54Z,2019-12-11T23:01:49Z,2019-12-11T23:05:05Z,MERGED,True,15,1,2,https://github.com/amirbawab,Replace newline by a space,4,[],https://github.com/WebAssembly/wabt/pull/1261,https://github.com/amirbawab,1,https://github.com/WebAssembly/wabt/pull/1261,"Closes: #1228
Simply replaced the newline by a space","Closes: #1228
Simply replaced the newline by a space",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1261,2019-12-09T18:58:54Z,2019-12-11T23:01:49Z,2019-12-11T23:05:05Z,MERGED,True,15,1,2,https://github.com/amirbawab,Replace newline by a space,4,[],https://github.com/WebAssembly/wabt/pull/1261,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1261#issuecomment-564350408,"Closes: #1228
Simply replaced the newline by a space",I guess there are no effected tests?,True,{'THUMBS_UP': ['https://github.com/amirbawab']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1261,2019-12-09T18:58:54Z,2019-12-11T23:01:49Z,2019-12-11T23:05:05Z,MERGED,True,15,1,2,https://github.com/amirbawab,Replace newline by a space,4,[],https://github.com/WebAssembly/wabt/pull/1261,https://github.com/amirbawab,3,https://github.com/WebAssembly/wabt/pull/1261#issuecomment-564381249,"Closes: #1228
Simply replaced the newline by a space",Looks like the first time it failed for timeout which already has been reported (#1243). Second time (empty commit) it passed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1261,2019-12-09T18:58:54Z,2019-12-11T23:01:49Z,2019-12-11T23:05:05Z,MERGED,True,15,1,2,https://github.com/amirbawab,Replace newline by a space,4,[],https://github.com/WebAssembly/wabt/pull/1261,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1261#issuecomment-564650322,"Closes: #1228
Simply replaced the newline by a space","What I mean is it looks like we are missing test coverage, if you can make this change without effecting any tests..",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1261,2019-12-09T18:58:54Z,2019-12-11T23:01:49Z,2019-12-11T23:05:05Z,MERGED,True,15,1,2,https://github.com/amirbawab,Replace newline by a space,4,[],https://github.com/WebAssembly/wabt/pull/1261,https://github.com/amirbawab,5,https://github.com/WebAssembly/wabt/pull/1261#issuecomment-564657270,"Closes: #1228
Simply replaced the newline by a space",@sbc100 Added a test case using the original issue example.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1262,2019-12-12T00:46:51Z,2019-12-12T20:30:46Z,2019-12-12T20:30:49Z,MERGED,True,337,0,1,https://github.com/sbc100,Add one more test from reference-types: unreached-invalid,1,[],https://github.com/WebAssembly/wabt/pull/1262,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1262,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1263,2019-12-12T01:04:40Z,2019-12-12T20:30:59Z,2019-12-12T20:31:07Z,MERGED,True,585,3,8,https://github.com/sbc100,Run update-spec-tests.py and add resulting missing tests,1,[],https://github.com/WebAssembly/wabt/pull/1263,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1263,"This found one bug in the parsing of active elem segments with
uncref style elements.","This found one bug in the parsing of active elem segments with
uncref style elements.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1264,2019-12-12T20:17:48Z,2019-12-14T00:21:21Z,2019-12-14T00:21:24Z,MERGED,True,98,13,6,https://github.com/sbc100,reference-types: add final test: br_table,2,[],https://github.com/WebAssembly/wabt/pull/1264,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1264,"This requires some slighly different validation rules for MVP vs
interface-types.
There is a test in unreachable-invalid.wast that was removed in the
reference-types repo:
type-br_table-label-num-vs-label-num-after-unreachable
This test depends on the old validation rules and still exists in the
master testsuite so we need to continue to support both sets of rules
for now.","This requires some slighly different validation rules for MVP vs
interface-types.
There is a test in unreachable-invalid.wast that was removed in the
reference-types repo:
type-br_table-label-num-vs-label-num-after-unreachable
This test depends on the old validation rules and still exists in the
master testsuite so we need to continue to support both sets of rules
for now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1264,2019-12-12T20:17:48Z,2019-12-14T00:21:21Z,2019-12-14T00:21:24Z,MERGED,True,98,13,6,https://github.com/sbc100,reference-types: add final test: br_table,2,[],https://github.com/WebAssembly/wabt/pull/1264,https://github.com/tlively,2,https://github.com/WebAssembly/wabt/pull/1264#issuecomment-565193326,"This requires some slighly different validation rules for MVP vs
interface-types.
There is a test in unreachable-invalid.wast that was removed in the
reference-types repo:
type-br_table-label-num-vs-label-num-after-unreachable
This test depends on the old validation rules and still exists in the
master testsuite so we need to continue to support both sets of rules
for now.",Can you link to the spec of the updated validation rules?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1264,2019-12-12T20:17:48Z,2019-12-14T00:21:21Z,2019-12-14T00:21:24Z,MERGED,True,98,13,6,https://github.com/sbc100,reference-types: add final test: br_table,2,[],https://github.com/WebAssembly/wabt/pull/1264,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1264#issuecomment-565197101,"This requires some slighly different validation rules for MVP vs
interface-types.
There is a test in unreachable-invalid.wast that was removed in the
reference-types repo:
type-br_table-label-num-vs-label-num-after-unreachable
This test depends on the old validation rules and still exists in the
master testsuite so we need to continue to support both sets of rules
for now.","The change that removed the test in question was:
WebAssembly/reference-types#43
The new validation algorithm is at:
https://github.com/WebAssembly/reference-types/blob/master/document/core/appendix/algorithm.rst
I think this change relates to how the new bottom type and how the unreachable value stack works, but I don't fully understand the change.",True,{'THUMBS_UP': ['https://github.com/tlively']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1264,2019-12-12T20:17:48Z,2019-12-14T00:21:21Z,2019-12-14T00:21:24Z,MERGED,True,98,13,6,https://github.com/sbc100,reference-types: add final test: br_table,2,[],https://github.com/WebAssembly/wabt/pull/1264,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1264#issuecomment-565199082,"This requires some slighly different validation rules for MVP vs
interface-types.
There is a test in unreachable-invalid.wast that was removed in the
reference-types repo:
type-br_table-label-num-vs-label-num-after-unreachable
This test depends on the old validation rules and still exists in the
master testsuite so we need to continue to support both sets of rules
for now.","Ah the arity check is specified here:
https://github.com/WebAssembly/reference-types/blame/master/document/core/appendix/algorithm.rst#L225",True,{'THUMBS_UP': ['https://github.com/tlively']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1265,2019-12-13T23:18:46Z,2019-12-14T01:13:13Z,2019-12-14T01:13:13Z,MERGED,True,177,152,5,https://github.com/aardappel,wabt-decompile: cleaned up string composition.,1,[],https://github.com/WebAssembly/wabt/pull/1265,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1265,"The code had 3 ways of doing string composition:

Using + and += on string/string_view
ostringstream
wabt::Stream

Of these, the first was by far the most widely used, simply
because decompilation is a hierarchical process, which requires
storing intermediate strings before knowing what surrounds them
(thus unsuitable for streams).
To make the code more uniform, everything was converted to use
the first approach. To not get further performance degradations,
some more efficient concatenation methods were added, that also
work with wabt::string_view.","The code had 3 ways of doing string composition:

Using + and += on string/string_view
ostringstream
wabt::Stream

Of these, the first was by far the most widely used, simply
because decompilation is a hierarchical process, which requires
storing intermediate strings before knowing what surrounds them
(thus unsuitable for streams).
To make the code more uniform, everything was converted to use
the first approach. To not get further performance degradations,
some more efficient concatenation methods were added, that also
work with wabt::string_view.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1266,2019-12-13T23:42:08Z,2019-12-14T03:11:14Z,2019-12-14T03:19:13Z,MERGED,True,50,2,2,https://github.com/sbc100,binary-reader: Continue after unfinished section error if not stop_on…,1,[],https://github.com/WebAssembly/wabt/pull/1266,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1266,"…_first_error
Treat unfinished section just like any other section error and allow
the reader to continue reading other section depending on value of
stop_on_first_error.","…_first_error
Treat unfinished section just like any other section error and allow
the reader to continue reading other section depending on value of
stop_on_first_error.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1271,2019-12-18T23:59:26Z,2019-12-19T22:24:48Z,2019-12-19T23:05:30Z,MERGED,True,63,40,2,https://github.com/aardappel,wasm-decompile: fixed PreDecl being added to nested blocks.,1,[],https://github.com/WebAssembly/wabt/pull/1271,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1271,"This generally can't work, since the local in question may still be
used after the block, but in this case was also causing some bad
corruption of the exp_stack (thanks, vector::emplace, for not
asserting on values out of range).
Also refactored affected code to be better debuggable.","This generally can't work, since the local in question may still be
used after the block, but in this case was also causing some bad
corruption of the exp_stack (thanks, vector::emplace, for not
asserting on values out of range).
Also refactored affected code to be better debuggable.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1272,2019-12-19T22:28:10Z,2019-12-23T16:33:08Z,2019-12-23T16:33:08Z,MERGED,True,168,15,8,https://github.com/aardappel,wasm-decompile: overhauled name filtering.,1,[],https://github.com/WebAssembly/wabt/pull/1272,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1272,"The previous implementation was too simplistic, as it didn't do the
renaming at the correct location (such that it can catch all
occurrences), and was also very ineffective in cutting down gigantic
STL signatures to something managable. This version creates more
usable identifiers in almost all cases.","The previous implementation was too simplistic, as it didn't do the
renaming at the correct location (such that it can catch all
occurrences), and was also very ineffective in cutting down gigantic
STL signatures to something managable. This version creates more
usable identifiers in almost all cases.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1275,2019-12-26T09:36:22Z,2020-01-09T19:36:22Z,2020-01-10T13:15:02Z,MERGED,True,1371,1511,43,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1275,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1275,"The two primary changes involved are:


Removal of assert_return_canonical_nan/arithetic nan in favor of
special nan:canonical/nan:arithmetic constants that can only be
used in test expectations.
See: WebAssembly/spec#1104


New trapping behaviour for bulk memory operations.  Range checks are
now performed up front for opterations such as memory.fill and
memory.copy.
See: WebAssembly/bulk-memory-operations#111
And: WebAssembly/bulk-memory-operations#123
The old behaviour is still kept around to support table.fill which
is defined in reference-types proposal and has yet to be updated.","The two primary changes involved are:


Removal of assert_return_canonical_nan/arithetic nan in favor of
special nan:canonical/nan:arithmetic constants that can only be
used in test expectations.
See: WebAssembly/spec#1104


New trapping behaviour for bulk memory operations.  Range checks are
now performed up front for opterations such as memory.fill and
memory.copy.
See: WebAssembly/bulk-memory-operations#111
And: WebAssembly/bulk-memory-operations#123
The old behaviour is still kept around to support table.fill which
is defined in reference-types proposal and has yet to be updated.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1275,2019-12-26T09:36:22Z,2020-01-09T19:36:22Z,2020-01-10T13:15:02Z,MERGED,True,1371,1511,43,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1275,https://github.com/vshymanskyy,2,https://github.com/WebAssembly/wabt/pull/1275#issuecomment-570341777,"The two primary changes involved are:


Removal of assert_return_canonical_nan/arithetic nan in favor of
special nan:canonical/nan:arithmetic constants that can only be
used in test expectations.
See: WebAssembly/spec#1104


New trapping behaviour for bulk memory operations.  Range checks are
now performed up front for opterations such as memory.fill and
memory.copy.
See: WebAssembly/bulk-memory-operations#111
And: WebAssembly/bulk-memory-operations#123
The old behaviour is still kept around to support table.fill which
is defined in reference-types proposal and has yet to be updated.","This is really important for https://github.com/wasm3/wasm3.
Thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1275,2019-12-26T09:36:22Z,2020-01-09T19:36:22Z,2020-01-10T13:15:02Z,MERGED,True,1371,1511,43,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1275,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1275#issuecomment-572327769,"The two primary changes involved are:


Removal of assert_return_canonical_nan/arithetic nan in favor of
special nan:canonical/nan:arithmetic constants that can only be
used in test expectations.
See: WebAssembly/spec#1104


New trapping behaviour for bulk memory operations.  Range checks are
now performed up front for opterations such as memory.fill and
memory.copy.
See: WebAssembly/bulk-memory-operations#111
And: WebAssembly/bulk-memory-operations#123
The old behaviour is still kept around to support table.fill which
is defined in reference-types proposal and has yet to be updated.",This change for a little smaller thanks to #1278,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1275,2019-12-26T09:36:22Z,2020-01-09T19:36:22Z,2020-01-10T13:15:02Z,MERGED,True,1371,1511,43,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1275,https://github.com/vshymanskyy,4,https://github.com/WebAssembly/wabt/pull/1275#issuecomment-573030705,"The two primary changes involved are:


Removal of assert_return_canonical_nan/arithetic nan in favor of
special nan:canonical/nan:arithmetic constants that can only be
used in test expectations.
See: WebAssembly/spec#1104


New trapping behaviour for bulk memory operations.  Range checks are
now performed up front for opterations such as memory.fill and
memory.copy.
See: WebAssembly/bulk-memory-operations#111
And: WebAssembly/bulk-memory-operations#123
The old behaviour is still kept around to support table.fill which
is defined in reference-types proposal and has yet to be updated.",Thanks! The updated wasm2json worked fine for wasm3 use case!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1276,2019-12-26T15:48:42Z,2020-01-08T23:07:16Z,2020-01-08T23:07:24Z,CLOSED,False,1,1,1,https://github.com/sbc100,Change encoding of Exnref to -0x12,1,[],https://github.com/WebAssembly/wabt/pull/1276,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1276,"The spec for this was specified as -18 in decimal which is -0x12 in hex.
Fixes: WebAssembly/exception-handling#92","The spec for this was specified as -18 in decimal which is -0x12 in hex.
Fixes: WebAssembly/exception-handling#92",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1276,2019-12-26T15:48:42Z,2020-01-08T23:07:16Z,2020-01-08T23:07:24Z,CLOSED,False,1,1,1,https://github.com/sbc100,Change encoding of Exnref to -0x12,1,[],https://github.com/WebAssembly/wabt/pull/1276,https://github.com/Horcrux7,2,https://github.com/WebAssembly/wabt/pull/1276#issuecomment-569092855,"The spec for this was specified as -18 in decimal which is -0x12 in hex.
Fixes: WebAssembly/exception-handling#92","This sounds wrong for me.
The value -0x12 or decimal -18 or 0x6E is the value of nullref
https://webassembly.github.io/reference-types/core/appendix/index-types.html
The value of exnref is -0x18 or decimal -24 or 0x68
https://github.com/WebAssembly/exception-handling/blob/master/proposals/Exceptions.md",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1276,2019-12-26T15:48:42Z,2020-01-08T23:07:16Z,2020-01-08T23:07:24Z,CLOSED,False,1,1,1,https://github.com/sbc100,Change encoding of Exnref to -0x12,1,[],https://github.com/WebAssembly/wabt/pull/1276,https://github.com/aheejin,3,https://github.com/WebAssembly/wabt/pull/1276#issuecomment-569147744,"The spec for this was specified as -18 in decimal which is -0x12 in hex.
Fixes: WebAssembly/exception-handling#92",No the current wabt implementation is correct. The correct value is hexadecimal -0x18.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1277,2019-12-26T19:56:11Z,2020-01-02T22:51:24Z,2020-01-02T22:51:24Z,MERGED,True,132,41,5,https://github.com/aardappel,wasm-decompile: added precedence support.,1,[],https://github.com/WebAssembly/wabt/pull/1277,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1277,"Previously it would simply bracket all binary exps. Now it has a
precedence system that is in line with what people know from most
programming languages.","Previously it would simply bracket all binary exps. Now it has a
precedence system that is in line with what people know from most
programming languages.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1278,2019-12-27T13:15:54Z,2020-01-08T23:08:07Z,2020-01-08T23:36:39Z,MERGED,True,1040,1022,14,https://github.com/aheejin,Several fixes for reference types,3,[],https://github.com/WebAssembly/wabt/pull/1278,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1278,"Allow ref.func for global initialization expressions
Allow nullref as a full-fledged type, after
WebAssembly/reference-types#66
Allow all reference types to be table elements
Enable reference types when exnref is used (The reference types
proposal is a prerequisite of the EH proposal)","Allow ref.func for global initialization expressions
Allow nullref as a full-fledged type, after
WebAssembly/reference-types#66
Allow all reference types to be table elements
Enable reference types when exnref is used (The reference types
proposal is a prerequisite of the EH proposal)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1278,2019-12-27T13:15:54Z,2020-01-08T23:08:07Z,2020-01-08T23:36:39Z,MERGED,True,1040,1022,14,https://github.com/aheejin,Several fixes for reference types,3,[],https://github.com/WebAssembly/wabt/pull/1278,https://github.com/aheejin,2,https://github.com/WebAssembly/wabt/pull/1278#issuecomment-572278559,"Allow ref.func for global initialization expressions
Allow nullref as a full-fledged type, after
WebAssembly/reference-types#66
Allow all reference types to be table elements
Enable reference types when exnref is used (The reference types
proposal is a prerequisite of the EH proposal)","Ping :)
(Side note: Yesterday I commented on this thread about the difference between wast and wat or something, and that comment was meant for a completely different PR in Binaryen. Not sure why I ended up commenting here. If you saw it, please ignore it.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1279,2020-01-02T22:54:45Z,2020-01-06T17:05:38Z,2020-01-06T17:05:38Z,MERGED,True,131,2,2,https://github.com/aardappel,wasm-decompile: supporting some more node types specifically.,1,[],https://github.com/WebAssembly/wabt/pull/1279,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1279,"This outputs some more WABT IR node types with special purpose
syntax, rather than the default catch-all of a function call.
Still incomplete (especially for >MVP), more later.
Reworking br_table will be a seperate PR.","This outputs some more WABT IR node types with special purpose
syntax, rather than the default catch-all of a function call.
Still incomplete (especially for >MVP), more later.
Reworking br_table will be a seperate PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1282,2020-01-06T17:08:55Z,2020-01-07T00:18:38Z,2020-01-07T01:25:19Z,MERGED,True,58,47,2,https://github.com/aardappel,wasm-decompile: blocks now represented as labels,1,[],https://github.com/WebAssembly/wabt/pull/1282,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1282,"What was before: block L { STATS }
is now { STATS; label L: }
or when possible just: STATS; label L:
The latter having no indentation at all, and thus automatically
flattening all br_table nestings and other common patterns.
It was initially attempted to create a proper switch out of br_table,
but the typical LLVM output is so intertwined (with br/br_if jumping
in and out of the br_table targets etc) that a switch could have only
cleanly applied applied to a small subset of cases. The current
simple label flattening works with all wasm code equally, but is a
a bit more low level.
Also rename break into goto, reflecting what it is really doing.
Though here, goto only ever jumps downwards, backwards jumps to the
loop construct are still called continue.","What was before: block L { STATS }
is now { STATS; label L: }
or when possible just: STATS; label L:
The latter having no indentation at all, and thus automatically
flattening all br_table nestings and other common patterns.
It was initially attempted to create a proper switch out of br_table,
but the typical LLVM output is so intertwined (with br/br_if jumping
in and out of the br_table targets etc) that a switch could have only
cleanly applied applied to a small subset of cases. The current
simple label flattening works with all wasm code equally, but is a
a bit more low level.
Also rename break into goto, reflecting what it is really doing.
Though here, goto only ever jumps downwards, backwards jumps to the
loop construct are still called continue.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1282,2020-01-06T17:08:55Z,2020-01-07T00:18:38Z,2020-01-07T01:25:19Z,MERGED,True,58,47,2,https://github.com/aardappel,wasm-decompile: blocks now represented as labels,1,[],https://github.com/WebAssembly/wabt/pull/1282,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1282#issuecomment-571373853,"What was before: block L { STATS }
is now { STATS; label L: }
or when possible just: STATS; label L:
The latter having no indentation at all, and thus automatically
flattening all br_table nestings and other common patterns.
It was initially attempted to create a proper switch out of br_table,
but the typical LLVM output is so intertwined (with br/br_if jumping
in and out of the br_table targets etc) that a switch could have only
cleanly applied applied to a small subset of cases. The current
simple label flattening works with all wasm code equally, but is a
a bit more low level.
Also rename break into goto, reflecting what it is really doing.
Though here, goto only ever jumps downwards, backwards jumps to the
loop construct are still called continue.","Oh, @kripken this was the PR I was talking about :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1282,2020-01-06T17:08:55Z,2020-01-07T00:18:38Z,2020-01-07T01:25:19Z,MERGED,True,58,47,2,https://github.com/aardappel,wasm-decompile: blocks now represented as labels,1,[],https://github.com/WebAssembly/wabt/pull/1282,https://github.com/kripken,3,https://github.com/WebAssembly/wabt/pull/1282#issuecomment-571390512,"What was before: block L { STATS }
is now { STATS; label L: }
or when possible just: STATS; label L:
The latter having no indentation at all, and thus automatically
flattening all br_table nestings and other common patterns.
It was initially attempted to create a proper switch out of br_table,
but the typical LLVM output is so intertwined (with br/br_if jumping
in and out of the br_table targets etc) that a switch could have only
cleanly applied applied to a small subset of cases. The current
simple label flattening works with all wasm code equally, but is a
a bit more low level.
Also rename break into goto, reflecting what it is really doing.
Though here, goto only ever jumps downwards, backwards jumps to the
loop construct are still called continue.","Thanks @aardappel! Yes, this does look much nicer than a normal wat br_table 😃",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1283,2020-01-06T22:40:10Z,2020-01-10T19:17:57Z,2020-01-10T19:17:58Z,CLOSED,False,6,2,1,https://github.com/theor,"if bulk memory is not enabled, error if an element references a table…",1,[],https://github.com/WebAssembly/wabt/pull/1283,https://github.com/theor,1,https://github.com/WebAssembly/wabt/pull/1283,"… != 0.
Fixes #1280 and #1268","… != 0.
Fixes #1280 and #1268",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1283,2020-01-06T22:40:10Z,2020-01-10T19:17:57Z,2020-01-10T19:17:58Z,CLOSED,False,6,2,1,https://github.com/theor,"if bulk memory is not enabled, error if an element references a table…",1,[],https://github.com/WebAssembly/wabt/pull/1283,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1283#issuecomment-573169663,"… != 0.
Fixes #1280 and #1268",Thanks for taking a look at this! I took over this fix since it needed a little more work than seen here. Should be fixed in #1286.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1284,2020-01-07T00:22:02Z,2020-01-09T17:31:53Z,2020-01-09T17:31:53Z,MERGED,True,101,12,3,https://github.com/aardappel,wasm-decompile: friendlier general load/store ops.,1,[],https://github.com/WebAssembly/wabt/pull/1284,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1284,"Now has an index that is relative to the type.
Now detects the common case where the index is shifted to
produce a new base address.","Now has an index that is relative to the type.
Now detects the common case where the index is shifted to
produce a new base address.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1285,2020-01-07T23:46:40Z,2020-01-09T03:33:41Z,2020-01-09T03:33:44Z,MERGED,True,52,30,4,https://github.com/binji,run-tests.py works properly with python3,8,[],https://github.com/WebAssembly/wabt/pull/1285,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1285,Fixes #1180 and #1181.,Fixes #1180 and #1181.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1285,2020-01-07T23:46:40Z,2020-01-09T03:33:41Z,2020-01-09T03:33:44Z,MERGED,True,52,30,4,https://github.com/binji,run-tests.py works properly with python3,8,[],https://github.com/WebAssembly/wabt/pull/1285,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1285#issuecomment-572310653,Fixes #1180 and #1181.,"CI?

What do you mean?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1285,2020-01-07T23:46:40Z,2020-01-09T03:33:41Z,2020-01-09T03:33:44Z,MERGED,True,52,30,4,https://github.com/binji,run-tests.py works properly with python3,8,[],https://github.com/WebAssembly/wabt/pull/1285,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1285#issuecomment-572313526,Fixes #1180 and #1181.,Should we do some python3 testing CI if we want to avoid regressing this?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1285,2020-01-07T23:46:40Z,2020-01-09T03:33:41Z,2020-01-09T03:33:44Z,MERGED,True,52,30,4,https://github.com/binji,run-tests.py works properly with python3,8,[],https://github.com/WebAssembly/wabt/pull/1285,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1285#issuecomment-572313916,Fixes #1180 and #1181.,"Oh, I see what you mean. Yeah, I'll see about adding that to one of the configurations.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1285,2020-01-07T23:46:40Z,2020-01-09T03:33:41Z,2020-01-09T03:33:44Z,MERGED,True,52,30,4,https://github.com/binji,run-tests.py works properly with python3,8,[],https://github.com/WebAssembly/wabt/pull/1285,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/1285#issuecomment-572322250,Fixes #1180 and #1181.,"OK, added it as a Github CI action. Pretty easy to do too!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1286,2020-01-08T23:33:24Z,2020-01-09T06:10:57Z,2020-01-09T06:11:00Z,MERGED,True,302,114,16,https://github.com/binji,Segment flags should be MVP-compat when possible,3,[],https://github.com/WebAssembly/wabt/pull/1286,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1286,"This should fix #1281, #1268, #1269, #1259.","This should fix #1281, #1268, #1269, #1259.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1287,2020-01-09T00:02:11Z,2020-01-09T03:15:17Z,2020-01-09T19:45:44Z,MERGED,True,18,9,2,https://github.com/sbc100,Add default output name for wast2json,1,[],https://github.com/WebAssembly/wabt/pull/1287,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1287,"Without this the default was to write the wasm files but not the json.
This matches the behaviour of wat2wasm.","Without this the default was to write the wasm files but not the json.
This matches the behaviour of wat2wasm.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1287,2020-01-09T00:02:11Z,2020-01-09T03:15:17Z,2020-01-09T19:45:44Z,MERGED,True,18,9,2,https://github.com/sbc100,Add default output name for wast2json,1,[],https://github.com/WebAssembly/wabt/pull/1287,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1287#issuecomment-572711460,"Without this the default was to write the wasm files but not the json.
This matches the behaviour of wat2wasm.","I think this change may have started dropping wasm+json files in the project dir when I run tests:
	assert-after-module.0.wasm
	assert-after-module.json
	assertinvalid-binary-module.0.wasm
	assertinvalid-binary-module.1.wasm
	assertinvalid-binary-module.json",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1287,2020-01-09T00:02:11Z,2020-01-09T03:15:17Z,2020-01-09T19:45:44Z,MERGED,True,18,9,2,https://github.com/sbc100,Add default output name for wast2json,1,[],https://github.com/WebAssembly/wabt/pull/1287,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1287#issuecomment-572713622,"Without this the default was to write the wasm files but not the json.
This matches the behaviour of wat2wasm.",Oops.  Looking.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1287,2020-01-09T00:02:11Z,2020-01-09T03:15:17Z,2020-01-09T19:45:44Z,MERGED,True,18,9,2,https://github.com/sbc100,Add default output name for wast2json,1,[],https://github.com/WebAssembly/wabt/pull/1287,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1287#issuecomment-572724143,"Without this the default was to write the wasm files but not the json.
This matches the behaviour of wat2wasm.","Right.. looks like the default behaviour before was to write files alongside the input.   This is not how other tools such as gcc, clang, wat2wasm work.  They wrong files in the CWD by default.  I've got a fix.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1288,2020-01-09T01:27:19Z,2020-01-09T16:06:35Z,2020-01-09T16:06:38Z,MERGED,True,52,21,2,https://github.com/sbc100,Report invalid literals when parsing spectest JSON files,2,[],https://github.com/WebAssembly/wabt/pull/1288,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1288,These were being silently ignored previously.,These were being silently ignored previously.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1289,2020-01-09T01:38:38Z,2020-01-09T19:42:50Z,2020-01-09T19:42:53Z,MERGED,True,19,0,2,https://github.com/binji,Apply start function name in wasm2wat,2,[],https://github.com/WebAssembly/wabt/pull/1289,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1289,Fixes #1226.,Fixes #1226.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1293,2020-01-09T19:22:14Z,2020-01-09T22:27:52Z,2020-01-09T22:27:55Z,MERGED,True,76,28,6,https://github.com/binji,Fix parse error with table and elem exprs,3,[],https://github.com/WebAssembly/wabt/pull/1293,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1293,"See #1291. There are two issues:

The (table funcref (elem ...)) syntax did not support elem exprs
There was no error produced when the elem var list couldn't be parsed

I also fixed a similar issue with var lists (e.g. br_table). There's
another bug with text lists (i.e. list of strings), but it's more
involved so I left TODOs instead of doing it here.","See #1291. There are two issues:

The (table funcref (elem ...)) syntax did not support elem exprs
There was no error produced when the elem var list couldn't be parsed

I also fixed a similar issue with var lists (e.g. br_table). There's
another bug with text lists (i.e. list of strings), but it's more
involved so I left TODOs instead of doing it here.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1294,2020-01-09T19:47:50Z,2020-01-10T01:32:04Z,2020-01-10T01:32:11Z,MERGED,True,1,1,1,https://github.com/sbc100,Add explicit -o flag to wast2json tests,1,[],https://github.com/WebAssembly/wabt/pull/1294,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1294,"Otherwise the new default behavior (as of #1287) is to write the CWD
which we don't want when running tests.
Writing to CWD rather than alongside the input file is deliberate and
desirable and matches the behavior of other compilers such as clang
gcc and wat2wasm.","Otherwise the new default behavior (as of #1287) is to write the CWD
which we don't want when running tests.
Writing to CWD rather than alongside the input file is deliberate and
desirable and matches the behavior of other compilers such as clang
gcc and wat2wasm.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1295,2020-01-09T22:37:53Z,2020-01-10T01:45:46Z,2020-01-16T18:20:05Z,MERGED,True,260,17,3,https://github.com/aardappel,wasm-decompile: documentation.,1,[],https://github.com/WebAssembly/wabt/pull/1295,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1295,"Added a language description, a man page, and some links in the
general readme.","Added a language description, a man page, and some links in the
general readme.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1296,2020-01-10T21:39:28Z,2020-01-10T22:43:44Z,2020-01-10T22:43:44Z,MERGED,True,133,72,3,https://github.com/aardappel,wasm-decompile: support for pointers to single types.,1,[],https://github.com/WebAssembly/wabt/pull/1296,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1296,"If deriving a ""struct"" from load/store ops fails, the next
best thing is a typed pointer, if all accesses are to the
same type.
Also fixed some precedence related issues.","If deriving a ""struct"" from load/store ops fails, the next
best thing is a typed pointer, if all accesses are to the
same type.
Also fixed some precedence related issues.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1297,2020-01-10T22:02:50Z,2020-01-11T06:06:14Z,2020-01-11T06:06:17Z,MERGED,True,70,4,5,https://github.com/binji,Error on memory.init|data.drop without DataCount,2,[],https://github.com/WebAssembly/wabt/pull/1297,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1297,"See #1176. This was working in the spec interpreter because of the way
the segment indexes are handled, but it's better to handle it earlier in
the binary reader.","See #1176. This was working in the spec interpreter because of the way
the segment indexes are handled, but it's better to handle it earlier in
the binary reader.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1298,2020-01-10T23:24:33Z,2020-01-13T18:12:36Z,2020-01-13T18:12:36Z,MERGED,True,23,2,2,https://github.com/aardappel,wasm-decompile: wrap data declarations.,1,[],https://github.com/WebAssembly/wabt/pull/1298,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1298,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1301,2020-01-13T18:47:17Z,2020-01-14T00:21:53Z,2020-01-14T00:21:55Z,MERGED,True,8513,7842,10,https://github.com/binji,[simd] Add support for narrow/widen instructions,1,[],https://github.com/WebAssembly/wabt/pull/1301,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1301,"i{8x16,16x8}.narrow_i{16x8,32x4}_{s,u}
i{16x8,32x4}.widen_{low,high}i{8x16,16x8}{s,u}

(though not all combinations are valid)
These are not currently supported in the interpreter.
TODO: Implement other new SIMD instructions too: load and extend,
bitwise and-not, lanewise rounding average","i{8x16,16x8}.narrow_i{16x8,32x4}_{s,u}
i{16x8,32x4}.widen_{low,high}i{8x16,16x8}{s,u}

(though not all combinations are valid)
These are not currently supported in the interpreter.
TODO: Implement other new SIMD instructions too: load and extend,
bitwise and-not, lanewise rounding average",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1302,2020-01-14T00:43:25Z,2020-01-16T16:40:47Z,2020-01-16T16:40:47Z,MERGED,True,48,7,4,https://github.com/aardappel,wasm-decompile: absolute accesses refer to data segments,1,[],https://github.com/WebAssembly/wabt/pull/1302,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1302,"This makes them easier to look up than the large integer
constants LLVM output is full of.","This makes them easier to look up than the large integer
constants LLVM output is full of.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1303,2020-01-14T07:15:25Z,2020-01-14T17:24:54Z,2020-01-14T17:24:58Z,MERGED,True,8648,8169,10,https://github.com/binji,[simd] Implement new SIMD instructions,1,[],https://github.com/WebAssembly/wabt/pull/1303,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1303,"i{16x8,32x4,64x2}.load{8x8,16x4,32x2}_{s,u}
v128.andnot
i{8x16,16x8}.avgr_u

None are implemented in the interpreter yet.","i{16x8,32x4,64x2}.load{8x8,16x4,32x2}_{s,u}
v128.andnot
i{8x16,16x8}.avgr_u

None are implemented in the interpreter yet.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1304,2020-01-14T19:05:57Z,2020-01-14T19:41:37Z,2020-01-14T19:41:37Z,MERGED,True,10,10,3,https://github.com/alexcrichton,Fix a typo of i64x4 -> i64x2,1,[],https://github.com/WebAssembly/wabt/pull/1304,https://github.com/alexcrichton,1,https://github.com/WebAssembly/wabt/pull/1304,I think this may have been an accidental typo in #1303,I think this may have been an accidental typo in #1303,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1305,2020-01-14T19:14:05Z,2020-01-14T20:52:33Z,2020-01-14T20:52:34Z,MERGED,True,20,20,3,https://github.com/alexcrichton,Fix some typos in widening SIMD intrinsics,1,[],https://github.com/WebAssembly/wabt/pull/1305,https://github.com/alexcrichton,1,https://github.com/WebAssembly/wabt/pull/1305,"Some further testing revealed another typo I believe from #1303 in some
of the widening instructions, I think this is the last one though!","Some further testing revealed another typo I believe from #1303 in some
of the widening instructions, I think this is the last one though!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1308,2020-01-16T00:11:04Z,2020-01-16T18:13:52Z,2020-01-16T18:13:55Z,MERGED,True,3263,1088,40,https://github.com/binji,Update testsuite,2,[],https://github.com/WebAssembly/wabt/pull/1308,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1308,"Remove assert_return_func. This is now handled by using
assert_return with (ref.func).
The reference types proposal depends on the bulk memory proposal, so
using --enable-reference-types automatically includes
--enable-bulk-memory.
table.fill no longer clamps to the valid range, and instead checks
before writing anything. This matches the other bulk instructions.","Remove assert_return_func. This is now handled by using
assert_return with (ref.func).
The reference types proposal depends on the bulk memory proposal, so
using --enable-reference-types automatically includes
--enable-bulk-memory.
table.fill no longer clamps to the valid range, and instead checks
before writing anything. This matches the other bulk instructions.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1309,2020-01-17T00:50:25Z,2020-01-23T23:50:34Z,2020-01-23T23:50:34Z,MERGED,True,53,5,3,https://github.com/aardappel,wasm-decompile: name data sections with their content,1,[],https://github.com/WebAssembly/wabt/pull/1309,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1309,"This is a fun way to give somewhat meaningful names to sections
containing strings. In the case of pure binary sections this likely
generates random characters, but that's not any worse than the
current generated names.","This is a fun way to give somewhat meaningful names to sections
containing strings. In the case of pure binary sections this likely
generates random characters, but that's not any worse than the
current generated names.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1309,2020-01-17T00:50:25Z,2020-01-23T23:50:34Z,2020-01-23T23:50:34Z,MERGED,True,53,5,3,https://github.com/aardappel,wasm-decompile: name data sections with their content,1,[],https://github.com/WebAssembly/wabt/pull/1309,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1309#issuecomment-577910827,"This is a fun way to give somewhat meaningful names to sections
containing strings. In the case of pure binary sections this likely
generates random characters, but that's not any worse than the
current generated names.","@binji from personal testing with real world large wasm modules, most data segments are binary so it doesn't end up helping much, but it also doesn't hurt. A typical binary only segment would have been named d_abc before, and is now named d_KkRR22Vl_ due to the accidental printable characters found inside, which ends up slightly more unique?
For sections containing any bit of text at all it seems really useful for example, so random picks from the binary I am look at:
data d_AZAD0truetype(offset: 365088) = 
  ""\01\02\03\04\05\06\07\08\01\02\03\04\05\06\07\08\10\10\10\10\10\10\10\10""
  ""\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10\10""
  ""                                \00 \00\00\00@\00\00\00\80\00\00\00@\00""
  ""\00\a0\16\00\00A-\00\00\82Z\00\00A-\00\00\01\05\00\00D\00\00\00\f0\92\05""
  ""\00\00\00\01\00\00\00\02\00\00\00\00\00\e0\07\00\00\e1\07\00\00\e2\07\00""
  ""\00\18\03\00\000\01\00\00\a0\00\00\00\e3\07\00\00\e4\07\00\00\e5\07\00""
  ""\00\e6\07\00\00\e7\07\00\00\00\00\00\00\e8\07\00\00\e9\07\00\00\00\00\00""
  ""\00\ea\07\00\00\eb\07\00\00\ec\07\00\00truetype"";
data d_fontformatTrueTypemultimaste(offset: 366048) = 
""font-format\00TrueType\00multi-masters"";
data d_truetypeenginettglyfproperti(offset: 366092) = 
  ""\ed\07\00\00\ee\07\00\00\ef\07\00\00truetype-engine\00\02\00\00\00tt-g""
  ""lyf\00\f0\07\00\00properties\00\00\f1\07\00\00\f2\07\00\00interpreter-""
  ""version\00\04\00\10\00\11\04\00\00\0c\02\04\00\0c\02\06\00\0c\02\08\00""
  ""\0c\02\0a\00\0c\02\0c\00\0c\02\0e"";

Clearly, seeing those names in code is going to be much more helpful than random :)",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1310,2020-01-18T00:29:18Z,2020-01-31T18:11:08Z,2020-01-31T18:11:09Z,MERGED,True,1,0,1,https://github.com/binji,Include `CMakeParseArguments`,1,[],https://github.com/WebAssembly/wabt/pull/1310,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1310,"Fixes #1042, thanks @rathann!","Fixes #1042, thanks @rathann!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1310,2020-01-18T00:29:18Z,2020-01-31T18:11:08Z,2020-01-31T18:11:09Z,MERGED,True,1,0,1,https://github.com/binji,Include `CMakeParseArguments`,1,[],https://github.com/WebAssembly/wabt/pull/1310,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1310#issuecomment-577959181,"Fixes #1042, thanks @rathann!",It this still needed now that we updated the min cmake version to 3.0?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1310,2020-01-18T00:29:18Z,2020-01-31T18:11:08Z,2020-01-31T18:11:09Z,MERGED,True,1,0,1,https://github.com/binji,Include `CMakeParseArguments`,1,[],https://github.com/WebAssembly/wabt/pull/1310,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1310#issuecomment-577960752,"Fixes #1042, thanks @rathann!","It this still needed now that we updated the min cmake version to 3.0?

🤷‍♂️",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1310,2020-01-18T00:29:18Z,2020-01-31T18:11:08Z,2020-01-31T18:11:09Z,MERGED,True,1,0,1,https://github.com/binji,Include `CMakeParseArguments`,1,[],https://github.com/WebAssembly/wabt/pull/1310,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1310#issuecomment-580845890,"Fixes #1042, thanks @rathann!","Looks like this is still needed, until we go to > 3.4: https://cmake.org/cmake/help/v3.6/module/CMakeParseArguments.html",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1312,2020-01-18T19:44:51Z,2020-01-21T17:33:36Z,2020-01-21T17:33:42Z,MERGED,True,768,687,28,https://github.com/binji,Omit the DataCount section unless it is required,1,[],https://github.com/WebAssembly/wabt/pull/1312,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1312,"See #1189 and #1311. Even if bulk memory is enabled, it can be
convenient to omit the DataCount section for MVP compatibility.
This change only includes the DataCount section when an instruction
requires it; either data.drop or memory.init. It is also omitted if
there are no data segments.
Rather than doing a second pass on the instructions, this implementation
unconditionally writes the DataCount section, but removes it when it is
not needed. This required adding a function to truncate a stream
(Stream::Truncate).","See #1189 and #1311. Even if bulk memory is enabled, it can be
convenient to omit the DataCount section for MVP compatibility.
This change only includes the DataCount section when an instruction
requires it; either data.drop or memory.init. It is also omitted if
there are no data segments.
Rather than doing a second pass on the instructions, this implementation
unconditionally writes the DataCount section, but removes it when it is
not needed. This required adding a function to truncate a stream
(Stream::Truncate).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1313,2020-01-23T00:13:17Z,2020-01-23T18:57:56Z,2020-01-23T18:57:59Z,MERGED,True,72,11,6,https://github.com/sbc100,Support reading from stdin in ReadFile,6,[],https://github.com/WebAssembly/wabt/pull/1313,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1313,"This allows tools that read input files to use the special - filename
to read from stdin.
Also, improve the error reported in general in ReadFile.
See: #386","This allows tools that read input files to use the special - filename
to read from stdin.
Also, improve the error reported in general in ReadFile.
See: #386",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1313,2020-01-23T00:13:17Z,2020-01-23T18:57:56Z,2020-01-23T18:57:59Z,MERGED,True,72,11,6,https://github.com/sbc100,Support reading from stdin in ReadFile,6,[],https://github.com/WebAssembly/wabt/pull/1313,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1313#issuecomment-577446866,"This allows tools that read input files to use the special - filename
to read from stdin.
Also, improve the error reported in general in ReadFile.
See: #386",I'm not really sure how to test this..  I think I need to add new features to test runner maybe?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1316,2020-01-23T20:36:30Z,2020-01-24T01:50:05Z,2020-01-24T01:50:06Z,MERGED,True,21,20,3,https://github.com/sbc100,Remove build-time dependency on git,1,[],https://github.com/WebAssembly/wabt/pull/1316,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1316,"Add VERSION to project command, which in turn required a cmake
version bump to 3.0.0.
Fixes: #1314","Add VERSION to project command, which in turn required a cmake
version bump to 3.0.0.
Fixes: #1314",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1317,2020-01-23T23:39:26Z,2020-01-27T23:35:38Z,2020-01-27T23:35:39Z,MERGED,True,10020,9871,15,https://github.com/binji,[simd] Update instructions,1,[],https://github.com/WebAssembly/wabt/pull/1317,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1317,"Add i64x2.mul
Add i{8x16,16x8,32x4}.{min,max}_{s,u}
Rename i{8x16,16x8,32x4,64x2}.load_splat -> v{8x16,16x8,32x4,64x2}.load_splat
Remove i8x16.mul
Remove f64x2.convert_i64x2_{s,u}
Remove i64x2.trunc_sat_f64x2_{s,u}
Remove i64x2.{any,all}_true","Add i64x2.mul
Add i{8x16,16x8,32x4}.{min,max}_{s,u}
Rename i{8x16,16x8,32x4,64x2}.load_splat -> v{8x16,16x8,32x4,64x2}.load_splat
Remove i8x16.mul
Remove f64x2.convert_i64x2_{s,u}
Remove i64x2.trunc_sat_f64x2_{s,u}
Remove i64x2.{any,all}_true",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1317,2020-01-23T23:39:26Z,2020-01-27T23:35:38Z,2020-01-27T23:35:39Z,MERGED,True,10020,9871,15,https://github.com/binji,[simd] Update instructions,1,[],https://github.com/WebAssembly/wabt/pull/1317,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1317#issuecomment-577959285,"Add i64x2.mul
Add i{8x16,16x8,32x4}.{min,max}_{s,u}
Rename i{8x16,16x8,32x4,64x2}.load_splat -> v{8x16,16x8,32x4,64x2}.load_splat
Remove i8x16.mul
Remove f64x2.convert_i64x2_{s,u}
Remove i64x2.trunc_sat_f64x2_{s,u}
Remove i64x2.{any,all}_true",@dtig Do these changes seem right to you?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1318,2020-01-27T21:21:31Z,2020-01-27T22:05:22Z,2020-01-28T00:20:46Z,MERGED,True,343,34,13,https://github.com/aardappel,wasm-decompile: use symbols from linking section for names.,1,[],https://github.com/WebAssembly/wabt/pull/1318,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1318,"This allows wasm .o files to have more readable names, or even final
linked modules if the linking information is preserved (with e.g.
--emit-relocs in LLD).
This is implemented as part of the WABT IR representation, so
benefits wasm2wat as well.
Named obtained this way are only set for functions if the function
doesn't also have a name in the name section, but is preferred over
the export name if there is one.","This allows wasm .o files to have more readable names, or even final
linked modules if the linking information is preserved (with e.g.
--emit-relocs in LLD).
This is implemented as part of the WABT IR representation, so
benefits wasm2wat as well.
Named obtained this way are only set for functions if the function
doesn't also have a name in the name section, but is preferred over
the export name if there is one.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1318,2020-01-27T21:21:31Z,2020-01-27T22:05:22Z,2020-01-28T00:20:46Z,MERGED,True,343,34,13,https://github.com/aardappel,wasm-decompile: use symbols from linking section for names.,1,[],https://github.com/WebAssembly/wabt/pull/1318,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1318#issuecomment-579013382,"This allows wasm .o files to have more readable names, or even final
linked modules if the linking information is preserved (with e.g.
--emit-relocs in LLD).
This is implemented as part of the WABT IR representation, so
benefits wasm2wat as well.
Named obtained this way are only set for functions if the function
doesn't also have a name in the name section, but is preferred over
the export name if there is one.","This seems to result in a segfault on the waterfall:
https://ci.chromium.org/p/wasm/builders/ci/linux
Gdb tells me the crash is on:
binary-reader-ir.cc:1263
1263	  DataSegment* seg = module_->data_segments[segment];

data_segments here is empty.
I'll attache the object file that causes this to fail if you like.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1318,2020-01-27T21:21:31Z,2020-01-27T22:05:22Z,2020-01-28T00:20:46Z,MERGED,True,343,34,13,https://github.com/aardappel,wasm-decompile: use symbols from linking section for names.,1,[],https://github.com/WebAssembly/wabt/pull/1318,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1318#issuecomment-579013865,"This allows wasm .o files to have more readable names, or even final
linked modules if the linking information is preserved (with e.g.
--emit-relocs in LLD).
This is implemented as part of the WABT IR representation, so
benefits wasm2wat as well.
Named obtained this way are only set for functions if the function
doesn't also have a name in the name section, but is preferred over
the export name if there is one.",torture__pr49394.C.o.zip,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1318,2020-01-27T21:21:31Z,2020-01-27T22:05:22Z,2020-01-28T00:20:46Z,MERGED,True,343,34,13,https://github.com/aardappel,wasm-decompile: use symbols from linking section for names.,1,[],https://github.com/WebAssembly/wabt/pull/1318,https://github.com/aardappel,4,https://github.com/WebAssembly/wabt/pull/1318#issuecomment-579020234,"This allows wasm .o files to have more readable names, or even final
linked modules if the linking information is preserved (with e.g.
--emit-relocs in LLD).
This is implemented as part of the WABT IR representation, so
benefits wasm2wat as well.
Named obtained this way are only set for functions if the function
doesn't also have a name in the name section, but is preferred over
the export name if there is one.","@sbc100 fixed here, thanks! #1319",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1319,2020-01-28T00:20:25Z,2020-01-28T00:52:54Z,2020-01-28T00:52:54Z,MERGED,True,4,0,1,https://github.com/aardappel,wasm-decompile: Fix access of undefined symbols.,1,[],https://github.com/WebAssembly/wabt/pull/1319,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1319,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1320,2020-01-28T01:20:08Z,2020-01-28T17:55:14Z,2020-01-28T17:55:16Z,MERGED,True,9,4,1,https://github.com/binji,Increase timeout; fix bug when a timeout occurs,1,[],https://github.com/WebAssembly/wabt/pull/1320,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1320,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1321,2020-01-30T02:44:04Z,2020-01-31T21:35:28Z,2020-01-31T21:35:29Z,MERGED,True,24,69,16,https://github.com/sbc100,Remove support for python2,2,[],https://github.com/WebAssembly/wabt/pull/1321,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1321,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1322,2020-01-30T20:55:26Z,2020-01-30T22:22:23Z,2020-01-30T22:22:23Z,MERGED,True,70,15,4,https://github.com/aardappel,wasm-decompile: escape hatch for variables used outside scope.,1,[],https://github.com/WebAssembly/wabt/pull/1322,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1322,"The decompiler assumes it can define a variable where it is first
assigned to, which works for almost all cases, but occasionally there
is a use of a variable outside of the scope where it was defined.
This detects that case, and makes sure that variable is pre-declared.","The decompiler assumes it can define a variable where it is first
assigned to, which works for almost all cases, but occasionally there
is a use of a variable outside of the scope where it was defined.
This detects that case, and makes sure that variable is pre-declared.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1323,2020-01-30T23:08:14Z,2020-01-31T03:25:06Z,2020-01-31T03:25:07Z,MERGED,True,22,26,2,https://github.com/sbc100, [travis] Limit use of sudo,1,[],https://github.com/WebAssembly/wabt/pull/1323,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1323,"We only need sudo for the i686 builder that needs extra packages.
Also, name each element of the matrix
Also, remove a bunch of unuser settings from the emcripten build.","We only need sudo for the i686 builder that needs extra packages.
Also, name each element of the matrix
Also, remove a bunch of unuser settings from the emcripten build.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1324,2020-01-31T03:27:35Z,2020-01-31T04:06:34Z,2020-01-31T04:06:35Z,MERGED,True,1,7,1,https://github.com/sbc100,[travis] Switch to xenial,1,[],https://github.com/WebAssembly/wabt/pull/1324,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1324,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1325,2020-02-04T05:06:53Z,2020-02-28T21:04:47Z,2020-02-28T21:05:02Z,CLOSED,False,29,57,3,https://github.com/sbc100,[interp] Unify active and passive segments,2,[],https://github.com/WebAssembly/wabt/pull/1325,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1325,"This simplifies the code and makes passive segments behave more like
active segments that are dropped on startup.
In also lays the ground work for the ""declared"" segments type which
is about be land in the next testsuite updated.","This simplifies the code and makes passive segments behave more like
active segments that are dropped on startup.
In also lays the ground work for the ""declared"" segments type which
is about be land in the next testsuite updated.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1325,2020-02-04T05:06:53Z,2020-02-28T21:04:47Z,2020-02-28T21:05:02Z,CLOSED,False,29,57,3,https://github.com/sbc100,[interp] Unify active and passive segments,2,[],https://github.com/WebAssembly/wabt/pull/1325,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1325#issuecomment-582022360,"This simplifies the code and makes passive segments behave more like
active segments that are dropped on startup.
In also lays the ground work for the ""declared"" segments type which
is about be land in the next testsuite updated.",Turns out this wasn't needed for the declared elements change.. so I can probably abandon this change.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1325,2020-02-04T05:06:53Z,2020-02-28T21:04:47Z,2020-02-28T21:05:02Z,CLOSED,False,29,57,3,https://github.com/sbc100,[interp] Unify active and passive segments,2,[],https://github.com/WebAssembly/wabt/pull/1325,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1325#issuecomment-582070699,"This simplifies the code and makes passive segments behave more like
active segments that are dropped on startup.
In also lays the ground work for the ""declared"" segments type which
is about be land in the next testsuite updated.","Turns out this wasn't needed for the declared elements change.. so I can probably abandon this change.

Seems like a good change anyway.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1325,2020-02-04T05:06:53Z,2020-02-28T21:04:47Z,2020-02-28T21:05:02Z,CLOSED,False,29,57,3,https://github.com/sbc100,[interp] Unify active and passive segments,2,[],https://github.com/WebAssembly/wabt/pull/1325,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1325#issuecomment-592727416,"This simplifies the code and makes passive segments behave more like
active segments that are dropped on startup.
In also lays the ground work for the ""declared"" segments type which
is about be land in the next testsuite updated.","Not needed anymore, since the interpreter rewrite.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1326,2020-02-04T05:13:42Z,2020-02-04T19:48:50Z,2020-02-04T19:48:51Z,MERGED,True,2,5,1,https://github.com/sbc100,Remove some python2-ism left over in the test suite,1,[],https://github.com/WebAssembly/wabt/pull/1326,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1326,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1327,2020-02-04T17:21:14Z,2020-02-05T22:40:53Z,2020-02-05T22:40:55Z,MERGED,True,1652,1242,22,https://github.com/sbc100,Update testsuite,4,[],https://github.com/WebAssembly/wabt/pull/1327,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1327,The main change here is the addition of declared elem sections.,The main change here is the addition of declared elem sections.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1327,2020-02-04T17:21:14Z,2020-02-05T22:40:53Z,2020-02-05T22:40:55Z,MERGED,True,1652,1242,22,https://github.com/sbc100,Update testsuite,4,[],https://github.com/WebAssembly/wabt/pull/1327,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1327#issuecomment-582601331,The main change here is the addition of declared elem sections.,Should be good to go now.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1328,2020-02-06T03:50:45Z,2020-02-06T07:47:20Z,2020-02-06T07:47:22Z,MERGED,True,35,9,3,https://github.com/sbc100,Improve help/usage message on invalid arguments,1,[],https://github.com/WebAssembly/wabt/pull/1328,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1328,"Don't print the full help message unless we actually ask for it,
but instead suggest --help as an option.
Also, print the program name before the error string.
Both these things seem match the GNU utilities I'm used to and I kind
like not seeing and entire screen of help text when I forget an
argument.","Don't print the full help message unless we actually ask for it,
but instead suggest --help as an option.
Also, print the program name before the error string.
Both these things seem match the GNU utilities I'm used to and I kind
like not seeing and entire screen of help text when I forget an
argument.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1329,2020-02-07T01:00:52Z,2020-02-07T01:08:38Z,2020-02-07T01:08:39Z,MERGED,True,7,1,1,https://github.com/sbc100,actions: Avoid triggering both branch and pr builds,1,[],https://github.com/WebAssembly/wabt/pull/1329,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1329,This adds some more nuanced triggering for github actions.,This adds some more nuanced triggering for github actions.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1330,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.","It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1330#issuecomment-584293454,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.","Hmm, I guess this is not that easy to review exactly because it is a copy, then again if it wasn't the diff would probably be crazy too. Anything in particular you want us to look at, or would you prefer this to be reviewed as if it was entirely new?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1330#issuecomment-585996974,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.","@aardappel yes, good point. Here's an overview of the directory layout:

interp2.{h,cc,inl.h}

Main source file with new runtime. It's separated into three sections:

Types: this section includes the various ""types"" that can be exposed by the module interface (usually through imports/exports). e.g. FuncType, GlobalType, etc. It's meant to mirror the types in the wasm-c-api
Structure: this section describes the static structure of a Module. It has no ""runtime"" information, e.g. the current size of memory. All of the structs are called *Desc to keep the names distinct from their runtime equivalents.
Runtime: this section is the new runtime of the interpreter, and includes most of the interesting parts of this PR. It is also modeled after the wasm-c-api.




istream.{h,cc}: These files contain the instruction stream, which is generated when ""compiling"" a module. The instruction stream does not follow the wasm binary format, and is designed to be easier to interpreter. For example, all control flow is lowered to br and br_unless, which are just goto instructions that jump to a location in the istream.
read-module.{h,cc}: This is the equivalent of binary-reader-interp in the previous interpreter. It reads the binary format and converts it to a ModuleDesc, which includes an Istream. Unlike the previous interpreter, it does not instantiate the module -- that is a separate step. This means that the code is a lot simpler than the previous interpreter.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1330#issuecomment-585999144,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.","Here are the interesting parts you may want to look at:
in interp2.{h,cc}:
class Store: this holds all garbage-collected objects, and has the mark-sweep GC code.
class Instance: this has new code for instantiation.
class Thread: This is similar to the thread implementation from the previous interpreter, but it's simplified to use float values directly (rather than use ValueTypeRep everywhere).
in istream.{h,cc}:
The disassemble/tracing code is unified, so it isn't as tedious to implement. They both use Istream::Disassemble, but provide a different Istream::TraceSource. They use the InstrKind to distinguish the structure of the instruction (in the istream), to reduce the number of different cases to handle.
You can take a look at test-interp2.cc to see what the new API looks like in practice.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1330#issuecomment-586026466,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.","Mostly locks logical and make sense to me.
Is there any way we can land it in pieces?  e.g. could we replace the binary reader and streamer while leaving everything else alone?  Or would that be way more work than is worth the effort?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/1330#issuecomment-586037478,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.","Is there any way we can land it in pieces?

I was trying to think of a way to do this, but I think it's all too interconnected. The old binary-reader-interp combines compiling + instantiation, so that can't really be replaced without changing the runtime. But the old runtime (Environment) also doesn't separate out modules + instances either, so that would have to be changed too. Maybe the Istream stuff could be done incrementally, but that's a pretty small part of this PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/1330#issuecomment-588525000,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.","Yay, finally green!!
There are a few small changes that I can separate out, so I'll pull them into their own PRs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/1330#issuecomment-588590510,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.","OK, I've separated out and landed some of the independent changes, and squashed this PR. PTAL!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/binji,9,https://github.com/WebAssembly/wabt/pull/1330#issuecomment-589793311,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.",I tried to make more stuff similar to upstream (in particular read-module.cc is renamed back to binary-reader-interp.cc). Hopefully this is easier to see the differences now. Sorry for all the churn!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1330,2020-02-07T02:00:32Z,2020-02-21T22:11:45Z,2020-02-21T22:11:46Z,MERGED,True,7323,25633,52,https://github.com/binji,New Interpreter,1,[],https://github.com/WebAssembly/wabt/pull/1330,https://github.com/sbc100,10,https://github.com/WebAssembly/wabt/pull/1330#issuecomment-589800574,"It's not quite ready yet, but I thought I should show the new design of the interpreter. Here are some of the goals:

Match the structure of c-api + spec more closely (modules, instances, etc)
Add support for garbage collected objects (currently just the same parts that c-api requires, but designed to be extensible)
Unify decoding of the instruction stream (istream):

Used for interpreter, disassembler, tracer



For now I put everything under the interp2 namespace, but I'm planning to move it over to interp when it is finished.",still lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1332,2020-02-11T10:32:50Z,2020-02-11T16:58:18Z,2020-02-15T07:21:45Z,MERGED,True,11,3,3,https://github.com/okuoku,Cygwin build fixes,3,[],https://github.com/WebAssembly/wabt/pull/1332,https://github.com/okuoku,1,https://github.com/WebAssembly/wabt/pull/1332,"Build fixes to run wabt tools on Cygwin64. I haven't tested it much, but at least it runs DOOM okuoku/freestandoom#2 with the interpreter + WASM C-API :)

CMakeLists.txt -- Cygwin's libc(newlib) doesn't export POSIX API fileno under -std=c++11; use -std=gnu++11 instead.
binary-reader-objdump.cc: Use proper format string. Using %lu here would take some garbage, as argument is uint32_t. I guess it can be PRIu32 but followed other occurrences there.
(not Cygwin specific) decompiler.cc: Use unsigned 1U","Build fixes to run wabt tools on Cygwin64. I haven't tested it much, but at least it runs DOOM okuoku/freestandoom#2 with the interpreter + WASM C-API :)

CMakeLists.txt -- Cygwin's libc(newlib) doesn't export POSIX API fileno under -std=c++11; use -std=gnu++11 instead.
binary-reader-objdump.cc: Use proper format string. Using %lu here would take some garbage, as argument is uint32_t. I guess it can be PRIu32 but followed other occurrences there.
(not Cygwin specific) decompiler.cc: Use unsigned 1U",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1332,2020-02-11T10:32:50Z,2020-02-11T16:58:18Z,2020-02-15T07:21:45Z,MERGED,True,11,3,3,https://github.com/okuoku,Cygwin build fixes,3,[],https://github.com/WebAssembly/wabt/pull/1332,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1332#issuecomment-585044899,"Build fixes to run wabt tools on Cygwin64. I haven't tested it much, but at least it runs DOOM okuoku/freestandoom#2 with the interpreter + WASM C-API :)

CMakeLists.txt -- Cygwin's libc(newlib) doesn't export POSIX API fileno under -std=c++11; use -std=gnu++11 instead.
binary-reader-objdump.cc: Use proper format string. Using %lu here would take some garbage, as argument is uint32_t. I guess it can be PRIu32 but followed other occurrences there.
(not Cygwin specific) decompiler.cc: Use unsigned 1U",Cool!  Can you point to the code where use used the C-API?  I'm keen to see it an action.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1332,2020-02-11T10:32:50Z,2020-02-11T16:58:18Z,2020-02-15T07:21:45Z,MERGED,True,11,3,3,https://github.com/okuoku,Cygwin build fixes,3,[],https://github.com/WebAssembly/wabt/pull/1332,https://github.com/okuoku,3,https://github.com/WebAssembly/wabt/pull/1332#issuecomment-585207627,"Build fixes to run wabt tools on Cygwin64. I haven't tested it much, but at least it runs DOOM okuoku/freestandoom#2 with the interpreter + WASM C-API :)

CMakeLists.txt -- Cygwin's libc(newlib) doesn't export POSIX API fileno under -std=c++11; use -std=gnu++11 instead.
binary-reader-objdump.cc: Use proper format string. Using %lu here would take some garbage, as argument is uint32_t. I guess it can be PRIu32 but followed other occurrences there.
(not Cygwin specific) decompiler.cc: Use unsigned 1U","Can you point to the code where use used the C-API?

Not more than copy/pasted from hello.c: https://github.com/okuoku/freestandoom/blob/9150923c78a169d1563100fbc85a1302c0bab5df/host-common/callwasm.c
I found current C API implementation lacks wasm_module_imports API so I had to rely import order to expose native APIs to compiled WASM module. It seems the upstream does not have any example on the API anyway.
Currently it does not have any proper build system/instructions(sorry!) video instead: https://www.youtube.com/watch?v=EBF7E6_qkn8",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1333,2020-02-15T06:32:55Z,2020-02-18T19:15:32Z,2020-02-18T19:15:33Z,MERGED,True,11,28,4,https://github.com/okuoku,Use standard C++11 on GNU/Clang compilers,5,[],https://github.com/WebAssembly/wabt/pull/1333,https://github.com/okuoku,1,https://github.com/WebAssembly/wabt/pull/1333,"Following up #1332 . Enforce standard C++11 in more sane way.

binary-reader-objdump.cc -- it lacked <strings.h> to import strcasecmp which is not part of standard C++
Adjust CMake variables to use std=c++11 everywhere. CMAKE_CXX_EXTENSIONS OFF is required to teach CMake 3.1+ not to inject std=gnu++11 reliably. _POSIX on MinGW is no longer required with _POSIX_C_SOURCE.","Following up #1332 . Enforce standard C++11 in more sane way.

binary-reader-objdump.cc -- it lacked <strings.h> to import strcasecmp which is not part of standard C++
Adjust CMake variables to use std=c++11 everywhere. CMAKE_CXX_EXTENSIONS OFF is required to teach CMake 3.1+ not to inject std=gnu++11 reliably. _POSIX on MinGW is no longer required with _POSIX_C_SOURCE.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1333,2020-02-15T06:32:55Z,2020-02-18T19:15:32Z,2020-02-18T19:15:33Z,MERGED,True,11,28,4,https://github.com/okuoku,Use standard C++11 on GNU/Clang compilers,5,[],https://github.com/WebAssembly/wabt/pull/1333,https://github.com/okuoku,2,https://github.com/WebAssembly/wabt/pull/1333#issuecomment-586560968,"Following up #1332 . Enforce standard C++11 in more sane way.

binary-reader-objdump.cc -- it lacked <strings.h> to import strcasecmp which is not part of standard C++
Adjust CMake variables to use std=c++11 everywhere. CMAKE_CXX_EXTENSIONS OFF is required to teach CMake 3.1+ not to inject std=gnu++11 reliably. _POSIX on MinGW is no longer required with _POSIX_C_SOURCE.","Ugh sysconf ... _SC_NPROCESSORS_ONLN is not POSIX thus we need _BSD_SOURCE or something.
Why not std::thread::hardware_concurrency being used here?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1334,2020-02-19T23:29:32Z,2020-02-20T01:47:20Z,2020-02-20T01:47:21Z,MERGED,True,1,0,1,https://github.com/binji,[appveyor] Add script to allow RDP into CI bots,1,[],https://github.com/WebAssembly/wabt/pull/1334,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1334,"See documentation here:
https://www.appveyor.com/docs/how-to/rdp-to-build-worker/","See documentation here:
https://www.appveyor.com/docs/how-to/rdp-to-build-worker/",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1335,2020-02-19T23:29:41Z,2020-02-20T01:49:25Z,2020-02-20T01:49:26Z,MERGED,True,96,96,2,https://github.com/binji,Fix logging of f32.const and f64.const,1,[],https://github.com/WebAssembly/wabt/pull/1335,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1335,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1336,2020-02-19T23:29:51Z,2020-02-20T02:19:05Z,2020-02-20T02:19:06Z,MERGED,True,23,10,5,https://github.com/binji,Fix memory/table check to include imported+defined,1,[],https://github.com/WebAssembly/wabt/pull/1336,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1336,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1337,2020-02-20T20:05:35Z,2020-02-20T22:06:20Z,2020-02-20T22:06:21Z,MERGED,True,39,53,6,https://github.com/binji,Always run ResolveNames after parsing .wast/.wat,1,[],https://github.com/WebAssembly/wabt/pull/1337,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1337,"Resolving names (i.e. remapping variable names to indexes) is meant to
be part of the parsing process. The spec even considers an unmapped
variable name to be ""malformed"" text.
This PR moves in that direction, by always running ResolveNames after
parsing text. The next step would be to integrate this more closely with
the parser itself.","Resolving names (i.e. remapping variable names to indexes) is meant to
be part of the parsing process. The spec even considers an unmapped
variable name to be ""malformed"" text.
This PR moves in that direction, by always running ResolveNames after
parsing text. The next step would be to integrate this more closely with
the parser itself.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1338,2020-02-20T23:53:59Z,2020-02-21T17:50:33Z,2020-02-21T17:50:34Z,MERGED,True,6,15,5,https://github.com/binji,Move ValidateFuncSignatures after ParseModuleWat,1,[],https://github.com/WebAssembly/wabt/pull/1338,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1338,"Validating function signatures (i.e. making sure a named function type
matches its explicit signature) really should be parse of text parsing.
Example:
(type $F (func (param i32) (result i32)))
...
(call_indirect (type $F) (param f32) (result i32)  ;; ERROR!
This change doesn't quite get us there, but it's closer. The next step
will be to remove ValidateFuncSignatures entirely and perform those
checks in the parser itself.","Validating function signatures (i.e. making sure a named function type
matches its explicit signature) really should be parse of text parsing.
Example:
(type $F (func (param i32) (result i32)))
...
(call_indirect (type $F) (param f32) (result i32)  ;; ERROR!
This change doesn't quite get us there, but it's closer. The next step
will be to remove ValidateFuncSignatures entirely and perform those
checks in the parser itself.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1340,2020-02-21T19:48:47Z,2020-02-21T22:28:17Z,2020-02-22T01:48:53Z,CLOSED,False,31,0,3,https://github.com/binji,Add the old alias for v8x16.shuffle,1,[],https://github.com/WebAssembly/wabt/pull/1340,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1340,"It used to have the encoding 0xfd03, but now is 0xfdc1. It is useful to
keep the old encoding around though.","It used to have the encoding 0xfd03, but now is 0xfdc1. It is useful to
keep the old encoding around though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1340,2020-02-21T19:48:47Z,2020-02-21T22:28:17Z,2020-02-22T01:48:53Z,CLOSED,False,31,0,3,https://github.com/binji,Add the old alias for v8x16.shuffle,1,[],https://github.com/WebAssembly/wabt/pull/1340,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1340#issuecomment-589808430,"It used to have the encoding 0xfd03, but now is 0xfdc1. It is useful to
keep the old encoding around though.","@abrown I think this should be enough to make it work. If not, please let me know!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1340,2020-02-21T19:48:47Z,2020-02-21T22:28:17Z,2020-02-22T01:48:53Z,CLOSED,False,31,0,3,https://github.com/binji,Add the old alias for v8x16.shuffle,1,[],https://github.com/WebAssembly/wabt/pull/1340,https://github.com/tlively,3,https://github.com/WebAssembly/wabt/pull/1340#issuecomment-589887391,"It used to have the encoding 0xfd03, but now is 0xfdc1. It is useful to
keep the old encoding around though.","It would be more turn, but it actually might be useful for WABT to switch back to the old numbering entirely. All other tools currently emit the old number and all engines also accept the old number, so I don't think that would cause issues.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1340,2020-02-21T19:48:47Z,2020-02-21T22:28:17Z,2020-02-22T01:48:53Z,CLOSED,False,31,0,3,https://github.com/binji,Add the old alias for v8x16.shuffle,1,[],https://github.com/WebAssembly/wabt/pull/1340,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1340#issuecomment-589891794,"It used to have the encoding 0xfd03, but now is 0xfdc1. It is useful to
keep the old encoding around though.","Sounds good, it's not that much churn to renumber now. See #1342",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1341,2020-02-21T20:02:44Z,2020-02-25T22:57:13Z,2020-02-25T22:57:14Z,MERGED,True,95,134,4,https://github.com/binji,Move validation of func signatures into the parser,1,[],https://github.com/WebAssembly/wabt/pull/1341,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1341,"The previous PR called the validator function to do this, but now the
code is moved entirely into the parser. This is preferable, since a
mismatching function signature is considered malformed text, not a
validation error.","The previous PR called the validator function to do this, but now the
code is moved entirely into the parser. This is preferable, since a
mismatching function signature is considered malformed text, not a
validation error.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1342,2020-02-22T00:24:29Z,2020-02-22T01:52:33Z,2020-02-22T01:52:34Z,MERGED,True,4,5,2,https://github.com/binji,Renumber v8x16.shuffle back to 0xfd03,1,[],https://github.com/WebAssembly/wabt/pull/1342,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1342,"Producers emit this number, so it's more convenient to use the old
value. The instructions will all be renumbered soon anyway.","Producers emit this number, so it's more convenient to use the old
value. The instructions will all be renumbered soon anyway.",True,{'THUMBS_UP': ['https://github.com/abrown']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1344,2020-02-26T22:44:43Z,2020-02-26T23:51:34Z,2020-02-26T23:51:35Z,MERGED,True,127,98,3,https://github.com/binji,Move the Type enum to its own file,1,[],https://github.com/WebAssembly/wabt/pull/1344,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1344,This is a good start to cleaning up common.h.,This is a good start to cleaning up common.h.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1345,2020-02-27T02:42:23Z,,2021-03-22T16:56:58Z,OPEN,False,3538,1490,83,https://github.com/binji,[DO NOT MERGE!] WIP on GC proposal,15,[],https://github.com/WebAssembly/wabt/pull/1345,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1345,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1345,2020-02-27T02:42:23Z,,2021-03-22T16:56:58Z,OPEN,False,3538,1490,83,https://github.com/binji,[DO NOT MERGE!] WIP on GC proposal,15,[],https://github.com/WebAssembly/wabt/pull/1345,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1345#issuecomment-591750525,,@jakobkummerow PTAL! Here is some initial work to start parsing GC types.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1346,2020-02-27T17:25:40Z,2020-02-27T19:23:09Z,2020-02-27T19:23:10Z,MERGED,True,2107,1391,30,https://github.com/binji,Share validator between IR + binary-reader-interp,1,[],https://github.com/WebAssembly/wabt/pull/1346,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1346,"The TypeChecker was already shared, but the rest of the other validation
logic was duplicated. This change creates a SharedValidator which is
used by both the Validator and the BinaryReaderInterp classes.
The validator is structured similarly to TypeChecker as a collection of
functions. It's assumed that the functions will be called in the same
order as sections occur in the binary format. The IR valiator does this
too, even though it's possible to validate components out-of-order in
that case.
This change also splits Module validation and Script validation into two
different classes. It should have been written this way in the first
place, and it's nice to do as part of this change since the module
validator logic is mostly moved into the SharedValidator anyway.
Next steps:

Remove all validation from BinaryReader and move it into the
SharedValidator.
Move the TypeChecker into the SharedValidator (maybe not necessary)
Ensure that validation occurs before creating IR from binary (use
SharedValidator in BinaryReaderIR? or maybe create
BinaryReaderValidator passthru that both BinaryReaderIR and
BinaryReaderInterp use?)
Rename Validator -> IRValidator, SharedValidator -> Validator","The TypeChecker was already shared, but the rest of the other validation
logic was duplicated. This change creates a SharedValidator which is
used by both the Validator and the BinaryReaderInterp classes.
The validator is structured similarly to TypeChecker as a collection of
functions. It's assumed that the functions will be called in the same
order as sections occur in the binary format. The IR valiator does this
too, even though it's possible to validate components out-of-order in
that case.
This change also splits Module validation and Script validation into two
different classes. It should have been written this way in the first
place, and it's nice to do as part of this change since the module
validator logic is mostly moved into the SharedValidator anyway.
Next steps:

Remove all validation from BinaryReader and move it into the
SharedValidator.
Move the TypeChecker into the SharedValidator (maybe not necessary)
Ensure that validation occurs before creating IR from binary (use
SharedValidator in BinaryReaderIR? or maybe create
BinaryReaderValidator passthru that both BinaryReaderIR and
BinaryReaderInterp use?)
Rename Validator -> IRValidator, SharedValidator -> Validator",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1346,2020-02-27T17:25:40Z,2020-02-27T19:23:09Z,2020-02-27T19:23:10Z,MERGED,True,2107,1391,30,https://github.com/binji,Share validator between IR + binary-reader-interp,1,[],https://github.com/WebAssembly/wabt/pull/1346,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1346#issuecomment-592125942,"The TypeChecker was already shared, but the rest of the other validation
logic was duplicated. This change creates a SharedValidator which is
used by both the Validator and the BinaryReaderInterp classes.
The validator is structured similarly to TypeChecker as a collection of
functions. It's assumed that the functions will be called in the same
order as sections occur in the binary format. The IR valiator does this
too, even though it's possible to validate components out-of-order in
that case.
This change also splits Module validation and Script validation into two
different classes. It should have been written this way in the first
place, and it's nice to do as part of this change since the module
validator logic is mostly moved into the SharedValidator anyway.
Next steps:

Remove all validation from BinaryReader and move it into the
SharedValidator.
Move the TypeChecker into the SharedValidator (maybe not necessary)
Ensure that validation occurs before creating IR from binary (use
SharedValidator in BinaryReaderIR? or maybe create
BinaryReaderValidator passthru that both BinaryReaderIR and
BinaryReaderInterp use?)
Rename Validator -> IRValidator, SharedValidator -> Validator","Yeah most of the changed error output is because the validator is shared now. I had to pick either going with the binary-reader-interp messages or the the IR validator messages, and chose to use the IR validator ones. Ultimately we'll want to clean up these messages, but I wanted to do that in a later PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1346,2020-02-27T17:25:40Z,2020-02-27T19:23:09Z,2020-02-27T19:23:10Z,MERGED,True,2107,1391,30,https://github.com/binji,Share validator between IR + binary-reader-interp,1,[],https://github.com/WebAssembly/wabt/pull/1346,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1346#issuecomment-592128244,"The TypeChecker was already shared, but the rest of the other validation
logic was duplicated. This change creates a SharedValidator which is
used by both the Validator and the BinaryReaderInterp classes.
The validator is structured similarly to TypeChecker as a collection of
functions. It's assumed that the functions will be called in the same
order as sections occur in the binary format. The IR valiator does this
too, even though it's possible to validate components out-of-order in
that case.
This change also splits Module validation and Script validation into two
different classes. It should have been written this way in the first
place, and it's nice to do as part of this change since the module
validator logic is mostly moved into the SharedValidator anyway.
Next steps:

Remove all validation from BinaryReader and move it into the
SharedValidator.
Move the TypeChecker into the SharedValidator (maybe not necessary)
Ensure that validation occurs before creating IR from binary (use
SharedValidator in BinaryReaderIR? or maybe create
BinaryReaderValidator passthru that both BinaryReaderIR and
BinaryReaderInterp use?)
Rename Validator -> IRValidator, SharedValidator -> Validator","Sure, none of them are a big deal.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1347,2020-02-27T23:30:54Z,2020-02-28T18:50:49Z,2020-02-28T18:50:50Z,MERGED,True,193,398,8,https://github.com/binji,Always check index before accessing vectors,1,[],https://github.com/WebAssembly/wabt/pull/1347,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1347,"Since the validator tries to print as many errors as possible, it
shouldn't stop when the index is invalid (since this may produce future
errors). Instead it uses a default value.
This is encoded in a new function called CheckIndexWithValue, which
either accesses the vector, or uses a default value.","Since the validator tries to print as many errors as possible, it
shouldn't stop when the index is invalid (since this may produce future
errors). Instead it uses a default value.
This is encoded in a new function called CheckIndexWithValue, which
either accesses the vector, or uses a default value.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1348,2020-02-28T21:01:31Z,2020-02-28T23:26:07Z,2020-02-28T23:26:08Z,MERGED,True,9,0,9,https://github.com/binji,Add GC feature,1,[],https://github.com/WebAssembly/wabt/pull/1348,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1348,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1349,2020-02-28T23:37:34Z,2020-02-29T01:08:33Z,2020-02-29T01:08:34Z,MERGED,True,103,66,11,https://github.com/binji,"Add TypeEntry, base class for type section entries",1,[],https://github.com/WebAssembly/wabt/pull/1349,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1349,"The type section currently only has one form: functions. With the GC
proposal, at least two more forms are added: struct and array. To
facilitate this:

Rename FuncTypeModuleField -> TypeModuleField
Rename Module::func_types -> Module::types
Rename func_type_bindings -> type_bindings
TypeEntry is added as a base class of FuncType
TypeModuleField stores a unique_ptr to a TypeEntry","The type section currently only has one form: functions. With the GC
proposal, at least two more forms are added: struct and array. To
facilitate this:

Rename FuncTypeModuleField -> TypeModuleField
Rename Module::func_types -> Module::types
Rename func_type_bindings -> type_bindings
TypeEntry is added as a base class of FuncType
TypeModuleField stores a unique_ptr to a TypeEntry",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1350,2020-02-29T01:09:05Z,2020-02-29T05:16:34Z,2020-02-29T05:16:35Z,MERGED,True,167,157,17,https://github.com/binji,Convert Type from an enum into a class,2,[],https://github.com/WebAssembly/wabt/pull/1350,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1350,"This is similar to the way Opcode is structured, which allows us to hang
member functions off of the enumeration.
The primary motivator for this change is the GC proposal (and the
function-references proposal) where a Type can be parameterized:
 (type $T (struct ...))
 (func
   (local (ref $T)
   ...
 )

In this case the type is ref, with a parameter of the type index. Making
Type a class will make it easier to store this additional information.","This is similar to the way Opcode is structured, which allows us to hang
member functions off of the enumeration.
The primary motivator for this change is the GC proposal (and the
function-references proposal) where a Type can be parameterized:
 (type $T (struct ...))
 (func
   (local (ref $T)
   ...
 )

In this case the type is ref, with a parameter of the type index. Making
Type a class will make it easier to store this additional information.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1351,2020-02-29T01:15:15Z,2020-02-29T04:42:39Z,2020-02-29T04:42:40Z,MERGED,True,141,59,20,https://github.com/binji,Update testsuite (w/ reference-types changes),2,[],https://github.com/WebAssembly/wabt/pull/1351,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1351,"The new table-sub test, checks whether the subtyping is handled
properly w/ table.init and table.copy instructions.
The BeginElemSegment callback can't pass the element type anymore, since
it's not known yet. The callback also can't be deferred, since the
BeginElemSegmentInitExpr callback has to happen after the
BeginElemSegment callback, but the reference type is not always known
until after the initializer expression is read. To work around this, I
added a new OnElemSegmentElemType callback.
Other element segment changes:

The element type must be tracked in the SharedValidator
A subtle fix: when writing out the segment flags, we need to take into
account whether the element type of the segment is not funcref, even
if there are no element expressions. In that case, we have to use flag
bit 0x4 (SegUseElemExprs).

In addition, the TableCopy and TableInit instructions weren't handling
table indexes fully.

TableCopy variables are read in the parser (both optional)
TableCopy names are now resolved + applied
TableCopy indexes are now validated
TableInit table variables are read in the parser; this is subtle,
since the text format has order $table $segment, but the $table is
optional.","The new table-sub test, checks whether the subtyping is handled
properly w/ table.init and table.copy instructions.
The BeginElemSegment callback can't pass the element type anymore, since
it's not known yet. The callback also can't be deferred, since the
BeginElemSegmentInitExpr callback has to happen after the
BeginElemSegment callback, but the reference type is not always known
until after the initializer expression is read. To work around this, I
added a new OnElemSegmentElemType callback.
Other element segment changes:

The element type must be tracked in the SharedValidator
A subtle fix: when writing out the segment flags, we need to take into
account whether the element type of the segment is not funcref, even
if there are no element expressions. In that case, we have to use flag
bit 0x4 (SegUseElemExprs).

In addition, the TableCopy and TableInit instructions weren't handling
table indexes fully.

TableCopy variables are read in the parser (both optional)
TableCopy names are now resolved + applied
TableCopy indexes are now validated
TableInit table variables are read in the parser; this is subtle,
since the text format has order $table $segment, but the $table is
optional.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1352,2020-03-03T23:43:08Z,2020-03-09T18:45:18Z,2020-03-09T18:45:19Z,MERGED,True,1234,1104,22,https://github.com/binji,Initial pass parsing/reading struct,1,[],https://github.com/WebAssembly/wabt/pull/1352,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1352,"This parses just the format (struct) as a new type. I added a test for
this using wat2wasm, but that requires a rudimentary binary format.
The test runner automatically attempts to rountrip all wat2wasm tests,
so this required implementing the wat writing and binary reading too.
Here's a summary of the changes:

binary-reader:h: Rename BinaryReader::OnType callbacks to OnFuncType
binary-reader.h: Add BinaryReader::OnStructType
binary-reader.cc: Use a switch after reading the type form to
determine whether we're reading a function or struct.
tokens.def: Add new TokenType::Struct
lexer-keywords.txt: Add new struct keyword
type.h: Add Type::Struct type form
wast-parser.cc: Parse (struct) in text format
wat-writer.cc: Write Func or Struct type forms","This parses just the format (struct) as a new type. I added a test for
this using wat2wasm, but that requires a rudimentary binary format.
The test runner automatically attempts to rountrip all wat2wasm tests,
so this required implementing the wat writing and binary reading too.
Here's a summary of the changes:

binary-reader:h: Rename BinaryReader::OnType callbacks to OnFuncType
binary-reader.h: Add BinaryReader::OnStructType
binary-reader.cc: Use a switch after reading the type form to
determine whether we're reading a function or struct.
tokens.def: Add new TokenType::Struct
lexer-keywords.txt: Add new struct keyword
type.h: Add Type::Struct type form
wast-parser.cc: Parse (struct) in text format
wat-writer.cc: Write Func or Struct type forms",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1353,2020-03-04T07:07:17Z,2020-03-11T17:21:02Z,2020-03-11T17:21:03Z,MERGED,True,308,0,1,https://github.com/binji,Add Script to generate .wast from .json,1,[],https://github.com/WebAssembly/wabt/pull/1353,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1353,"The one difference is that all (module...) are converted to
(module binary).","The one difference is that all (module...) are converted to
(module binary).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1354,2020-03-04T18:37:45Z,2020-03-11T16:54:36Z,2020-03-11T16:54:37Z,MERGED,True,223,279,45,https://github.com/binji,Remove validation from the BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/1354,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1354,"Validation should only happen in ValidateModule, BinaryReader should
only check whether the binary is malformed.
This change also fixes a few places in BinaryReaderIR where an index is
assumed to be valid.","Validation should only happen in ValidateModule, BinaryReader should
only check whether the binary is malformed.
This change also fixes a few places in BinaryReaderIR where an index is
assumed to be valid.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1354,2020-03-04T18:37:45Z,2020-03-11T16:54:36Z,2020-03-11T16:54:37Z,MERGED,True,223,279,45,https://github.com/binji,Remove validation from the BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/1354,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1354#issuecomment-595360274,"Validation should only happen in ValidateModule, BinaryReader should
only check whether the binary is malformed.
This change also fixes a few places in BinaryReaderIR where an index is
assumed to be valid.","Cool, sounds like this would make it even less likely to hit asserts caused by module contents?
But now its more important than before that users validate before accessing.. are there any that don't?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1354,2020-03-04T18:37:45Z,2020-03-11T16:54:36Z,2020-03-11T16:54:37Z,MERGED,True,223,279,45,https://github.com/binji,Remove validation from the BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/1354,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1354#issuecomment-595890019,"Validation should only happen in ValidateModule, BinaryReader should
only check whether the binary is malformed.
This change also fixes a few places in BinaryReaderIR where an index is
assumed to be valid.","I fixed bugs / removed assertions in BinaryReaderIR, so it will be relatively safe to use even without full validation. I don't think there are any current users who aren't validating but should be; the only ones are in wasm-objdump, wasm-opcodecnt, wasm-strip, and optionally wasm2wat. All of those tools don't need to validate though.
Since I separated out validation into a set of functions, it is possible to create a new pass-through reader that can read+validate directly into IR. That way validation only has to be run separately when parsing text to IR. I might do that as a next step.",True,{'THUMBS_UP': ['https://github.com/aardappel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1355,2020-03-09T19:29:11Z,2020-03-17T00:24:38Z,2020-03-17T00:24:39Z,MERGED,True,1259,1073,20,https://github.com/binji,Parse struct fields,2,[],https://github.com/WebAssembly/wabt/pull/1355,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1355,"This allows the following field formats:

(struct (field $name i32))
(struct (field $name (mut i32)))
(struct (field i32))
(struct (field (mut i32)))
(struct (mut i32))
(struct i32)","This allows the following field formats:

(struct (field $name i32))
(struct (field $name (mut i32)))
(struct (field i32))
(struct (field (mut i32)))
(struct (mut i32))
(struct i32)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1355,2020-03-09T19:29:11Z,2020-03-17T00:24:38Z,2020-03-17T00:24:39Z,MERGED,True,1259,1073,20,https://github.com/binji,Parse struct fields,2,[],https://github.com/WebAssembly/wabt/pull/1355,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1355#issuecomment-599692608,"This allows the following field formats:

(struct (field $name i32))
(struct (field $name (mut i32)))
(struct (field i32))
(struct (field (mut i32)))
(struct (mut i32))
(struct i32)",@jgravelle-google ping,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1355,2020-03-09T19:29:11Z,2020-03-17T00:24:38Z,2020-03-17T00:24:39Z,MERGED,True,1259,1073,20,https://github.com/binji,Parse struct fields,2,[],https://github.com/WebAssembly/wabt/pull/1355,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1355#issuecomment-599767955,"This allows the following field formats:

(struct (field $name i32))
(struct (field $name (mut i32)))
(struct (field i32))
(struct (field (mut i32)))
(struct (mut i32))
(struct i32)",Looks like the travis failures are flakes?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1356,2020-03-11T02:54:57Z,2020-03-17T00:24:51Z,2020-03-17T00:24:52Z,MERGED,True,153,145,10,https://github.com/binji,Refactor Const struct's internal storage,1,[],https://github.com/WebAssembly/wabt/pull/1356,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1356,"Const previously stored each value as a union of bit patterns (uint32_t,
uint64_t, v128, etc). It was then extended to support cases where NaN
value (either arithmetic or canonical) was expected.
bool is_expected_nan;
union {
  uint32_t u32;
  uint32_t f32_bits;
  ...
  ExpectedNan expected;
}

With the SIMD proposal, it's possible for each lane of a f32x4 or f64x2
to be a float or an expected NaN, so this doesn't work anymore. It's
possible to move ExpectedNan out of the union, but it's a bit clumsy to
use properly:
bool is_expected_nan[4];
ExpectedNan expected[4];
union { ... }

Instead, I took this as an opportunity to clean up the class a bit.
First, ExpectedNan is extended to handle the case where it is not a NaN
(i.e. not a not a number), which allows us to remove the bool. Then I
store the rest of the data as an array of uint32_t, and provide
accessor functions instead.","Const previously stored each value as a union of bit patterns (uint32_t,
uint64_t, v128, etc). It was then extended to support cases where NaN
value (either arithmetic or canonical) was expected.
bool is_expected_nan;
union {
  uint32_t u32;
  uint32_t f32_bits;
  ...
  ExpectedNan expected;
}

With the SIMD proposal, it's possible for each lane of a f32x4 or f64x2
to be a float or an expected NaN, so this doesn't work anymore. It's
possible to move ExpectedNan out of the union, but it's a bit clumsy to
use properly:
bool is_expected_nan[4];
ExpectedNan expected[4];
union { ... }

Instead, I took this as an opportunity to clean up the class a bit.
First, ExpectedNan is extended to handle the case where it is not a NaN
(i.e. not a not a number), which allows us to remove the bool. Then I
store the rest of the data as an array of uint32_t, and provide
accessor functions instead.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1357,2020-03-13T02:28:02Z,2020-03-17T21:42:38Z,2020-03-17T21:42:40Z,MERGED,True,239,26,4,https://github.com/binji,Fix interpreter garbage collector,2,[],https://github.com/WebAssembly/wabt/pull/1357,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1357,"The interpreter has a garbage colletor (Store::Collect), that almost
worked.
In particular, the free list had no fast way to determine whether an
object was used or not. This is necessary when iterating over objects to
actually delete them. This commit adds an is_free_ vector for this
purpose.
The Store::Collect method was also not correct; it was calling
Store::Mark(Ref) on each of the GC roots, but that only marks the ref
itself, it doesn't iterate over the Object's references. This commit
updates Collect to iterate over all marked objects iteratively until
steady-state is reached. It's potentially quadratic in the number of
objects as currently written, so there's definitely room for
improvement.","The interpreter has a garbage colletor (Store::Collect), that almost
worked.
In particular, the free list had no fast way to determine whether an
object was used or not. This is necessary when iterating over objects to
actually delete them. This commit adds an is_free_ vector for this
purpose.
The Store::Collect method was also not correct; it was calling
Store::Mark(Ref) on each of the GC roots, but that only marks the ref
itself, it doesn't iterate over the Object's references. This commit
updates Collect to iterate over all marked objects iteratively until
steady-state is reached. It's potentially quadratic in the number of
objects as currently written, so there's definitely room for
improvement.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1358,2020-03-13T02:39:30Z,2020-03-13T17:10:27Z,2020-03-13T17:10:28Z,MERGED,True,4,5,3,https://github.com/binji,Fix flake8 failures,1,[],https://github.com/WebAssembly/wabt/pull/1358,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1358,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1360,2020-03-14T17:20:02Z,2020-03-15T17:12:06Z,2020-03-17T00:13:22Z,MERGED,True,5,3,1,https://github.com/rrrapha,Set -D_POSIX_C_SOURCE for MINGW only,1,[],https://github.com/WebAssembly/wabt/pull/1360,https://github.com/rrrapha,1,https://github.com/WebAssembly/wabt/pull/1360,Resolves #1359,Resolves #1359,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1360,2020-03-14T17:20:02Z,2020-03-15T17:12:06Z,2020-03-17T00:13:22Z,MERGED,True,5,3,1,https://github.com/rrrapha,Set -D_POSIX_C_SOURCE for MINGW only,1,[],https://github.com/WebAssembly/wabt/pull/1360,https://github.com/rrrapha,2,https://github.com/WebAssembly/wabt/pull/1360#issuecomment-599113323,Resolves #1359,"But this breaks Cygwin :)
MINGW can be MINGW OR CYGWIN . Unfortunately, it seems there is no (simple) way to check how the host handles __STRICT_ANSI__ .

Thank you, I've changed it to MINGW OR CYGWIN.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1361,2020-03-19T00:45:24Z,2020-03-19T17:33:32Z,2020-03-19T17:33:33Z,MERGED,True,41,0,2,https://github.com/binji,Add wasm-objdump support for structs,1,[],https://github.com/WebAssembly/wabt/pull/1361,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1361,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1363,2020-03-20T20:51:09Z,2020-03-20T22:58:31Z,2020-03-20T22:58:33Z,MERGED,True,111,82,11,https://github.com/binji,Move more functionality into the v128 type,1,[],https://github.com/WebAssembly/wabt/pull/1363,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1363,"Add lane getters: u{8,16,32,64}, f{32,64}_bits
Add lane setters: set_u{8,16,32,64}, set_f{32,64}_bits
Add set_zero, is_zero
Add To() and From()

These changes will make it easier to build v128 values in the
spectest-interp (which needs to be updated to support SIMD spec tests)","Add lane getters: u{8,16,32,64}, f{32,64}_bits
Add lane setters: set_u{8,16,32,64}, set_f{32,64}_bits
Add set_zero, is_zero
Add To() and From()

These changes will make it easier to build v128 values in the
spectest-interp (which needs to be updated to support SIMD spec tests)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1364,2020-03-20T22:30:26Z,2020-03-24T01:54:15Z,2020-03-24T01:54:16Z,MERGED,True,739,569,24,https://github.com/binji,Parse ArrayTypes,1,[],https://github.com/WebAssembly/wabt/pull/1364,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1364,"The following formats are supported:

(type (array i32))
(type (array (field i32)))
(type (array (field (mut i32))))

This PR adds support for reading/writing binary and text, but no
interpreter support yet.","The following formats are supported:

(type (array i32))
(type (array (field i32)))
(type (array (field (mut i32))))

This PR adds support for reading/writing binary and text, but no
interpreter support yet.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1369,2020-03-22T21:57:56Z,2020-03-23T18:34:44Z,2020-03-23T18:42:21Z,MERGED,True,31,14,5,https://github.com/rianhunter,"Always generate DataCount section, even if number of datas is 0",2,[],https://github.com/WebAssembly/wabt/pull/1369,https://github.com/rianhunter,1,https://github.com/WebAssembly/wabt/pull/1369,"The bulk-memory spec requires that a DataCount section is always
present if a memory.init or data.drop instruction is present in
the following code section. This requirement remains even if the
number of datas is 0, so remove that condition.
Fixes #1368","The bulk-memory spec requires that a DataCount section is always
present if a memory.init or data.drop instruction is present in
the following code section. This requirement remains even if the
number of datas is 0, so remove that condition.
Fixes #1368",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1369,2020-03-22T21:57:56Z,2020-03-23T18:34:44Z,2020-03-23T18:42:21Z,MERGED,True,31,14,5,https://github.com/rianhunter,"Always generate DataCount section, even if number of datas is 0",2,[],https://github.com/WebAssembly/wabt/pull/1369,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1369#issuecomment-602326625,"The bulk-memory spec requires that a DataCount section is always
present if a memory.init or data.drop instruction is present in
the following code section. This requirement remains even if the
number of datas is 0, so remove that condition.
Fixes #1368",But if data count is zero then wouldn't all memory.init and data.drop be invalid anyway?   i.e. any module with a memory.init or data.drop instruction but no segments is already invalid weather you write this datacount section or not.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1369,2020-03-22T21:57:56Z,2020-03-23T18:34:44Z,2020-03-23T18:42:21Z,MERGED,True,31,14,5,https://github.com/rianhunter,"Always generate DataCount section, even if number of datas is 0",2,[],https://github.com/WebAssembly/wabt/pull/1369,https://github.com/rianhunter,3,https://github.com/WebAssembly/wabt/pull/1369#issuecomment-602334506,"The bulk-memory spec requires that a DataCount section is always
present if a memory.init or data.drop instruction is present in
the following code section. This requirement remains even if the
number of datas is 0, so remove that condition.
Fixes #1368","If DataCount section exists but number of datas is zero, then memory.init and data.drop would be invalid.
If DataCount section doesn't exist, then the use of memory.init and data.drop would result in a malformed binary (not an invalid module).
This change was made to accomodate this test case https://github.com/WebAssembly/bulk-memory-operations/blob/ffdbb6e357d79818c88c3557cd3325346a057d27/test/core/memory_init.wast#L188",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1369,2020-03-22T21:57:56Z,2020-03-23T18:34:44Z,2020-03-23T18:42:21Z,MERGED,True,31,14,5,https://github.com/rianhunter,"Always generate DataCount section, even if number of datas is 0",2,[],https://github.com/WebAssembly/wabt/pull/1369,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1369#issuecomment-602737796,"The bulk-memory spec requires that a DataCount section is always
present if a memory.init or data.drop instruction is present in
the following code section. This requirement remains even if the
number of datas is 0, so remove that condition.
Fixes #1368","Yep, this seems like the right fix. Can you fix the tests here too (i.e. run python3 test/run-tests.py -r)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1369,2020-03-22T21:57:56Z,2020-03-23T18:34:44Z,2020-03-23T18:42:21Z,MERGED,True,31,14,5,https://github.com/rianhunter,"Always generate DataCount section, even if number of datas is 0",2,[],https://github.com/WebAssembly/wabt/pull/1369,https://github.com/rianhunter,5,https://github.com/WebAssembly/wabt/pull/1369#issuecomment-602750999,"The bulk-memory spec requires that a DataCount section is always
present if a memory.init or data.drop instruction is present in
the following code section. This requirement remains even if the
number of datas is 0, so remove that condition.
Fixes #1368","Done, ""-r"" is very convenient",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1370,2020-03-23T17:42:16Z,2020-03-24T16:03:09Z,2020-03-24T16:03:09Z,CLOSED,False,6,4,1,https://github.com/ajklein,Avoid spurious copy-to-bin invocations,1,[],https://github.com/WebAssembly/wabt/pull/1370,https://github.com/ajklein,1,https://github.com/WebAssembly/wabt/pull/1370,"Switch to using add_custom_command with POST_BUILD option
instead of add_custom_target for copying files to bin.
This causes the copy to happen only after rebuilding the target,
rather than on every build invocation.","Switch to using add_custom_command with POST_BUILD option
instead of add_custom_target for copying files to bin.
This causes the copy to happen only after rebuilding the target,
rather than on every build invocation.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1370,2020-03-23T17:42:16Z,2020-03-24T16:03:09Z,2020-03-24T16:03:09Z,CLOSED,False,6,4,1,https://github.com/ajklein,Avoid spurious copy-to-bin invocations,1,[],https://github.com/WebAssembly/wabt/pull/1370,https://github.com/ajklein,2,https://github.com/WebAssembly/wabt/pull/1370#issuecomment-602753197,"Switch to using add_custom_command with POST_BUILD option
instead of add_custom_target for copying files to bin.
This causes the copy to happen only after rebuilding the target,
rather than on every build invocation.","Note that I'm a CMake noob, so this may be wrong. I was just surprised to see ninja constantly copying the same files everytime I ran it...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1370,2020-03-23T17:42:16Z,2020-03-24T16:03:09Z,2020-03-24T16:03:09Z,CLOSED,False,6,4,1,https://github.com/ajklein,Avoid spurious copy-to-bin invocations,1,[],https://github.com/WebAssembly/wabt/pull/1370,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1370#issuecomment-602790492,"Switch to using add_custom_command with POST_BUILD option
instead of add_custom_target for copying files to bin.
This causes the copy to happen only after rebuilding the target,
rather than on every build invocation.","Yeah, I noticed that too. IIRC, the issue is that if you don't always copy it, then the behavior is a little bit strange if you switch build types; e.g. if you build debug then build release, but both are already built, then the release build won't be copied over. Maybe this is a sign that this pattern should be discouraged, though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1370,2020-03-23T17:42:16Z,2020-03-24T16:03:09Z,2020-03-24T16:03:09Z,CLOSED,False,6,4,1,https://github.com/ajklein,Avoid spurious copy-to-bin invocations,1,[],https://github.com/WebAssembly/wabt/pull/1370,https://github.com/ajklein,4,https://github.com/WebAssembly/wabt/pull/1370#issuecomment-602880139,"Switch to using add_custom_command with POST_BUILD option
instead of add_custom_target for copying files to bin.
This causes the copy to happen only after rebuilding the target,
rather than on every build invocation.","Ah, I didn't look very hard at the make-based build, so this didn't occur to me. Given that it doesn't take any time at all to do these copies, I'm fine with dropping this PR if it causes any problems (and it sounds like it does).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1370,2020-03-23T17:42:16Z,2020-03-24T16:03:09Z,2020-03-24T16:03:09Z,CLOSED,False,6,4,1,https://github.com/ajklein,Avoid spurious copy-to-bin invocations,1,[],https://github.com/WebAssembly/wabt/pull/1370,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/1370#issuecomment-602961997,"Switch to using add_custom_command with POST_BUILD option
instead of add_custom_target for copying files to bin.
This causes the copy to happen only after rebuilding the target,
rather than on every build invocation.","Yeah, I'd rather keep as-is. (Or do a bigger refactor to remove the hacky top-level Make)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1370,2020-03-23T17:42:16Z,2020-03-24T16:03:09Z,2020-03-24T16:03:09Z,CLOSED,False,6,4,1,https://github.com/ajklein,Avoid spurious copy-to-bin invocations,1,[],https://github.com/WebAssembly/wabt/pull/1370,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1370#issuecomment-603312715,"Switch to using add_custom_command with POST_BUILD option
instead of add_custom_target for copying files to bin.
This causes the copy to happen only after rebuilding the target,
rather than on every build invocation.",I think I had the exact same PR up at some point... and also abandoned it.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1370,2020-03-23T17:42:16Z,2020-03-24T16:03:09Z,2020-03-24T16:03:09Z,CLOSED,False,6,4,1,https://github.com/ajklein,Avoid spurious copy-to-bin invocations,1,[],https://github.com/WebAssembly/wabt/pull/1370,https://github.com/ajklein,7,https://github.com/WebAssembly/wabt/pull/1370#issuecomment-603330738,"Switch to using add_custom_command with POST_BUILD option
instead of add_custom_target for copying files to bin.
This causes the copy to happen only after rebuilding the target,
rather than on every build invocation.","Thanks for the feedback, closing. I at least learned a little bit of CMake :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1372,2020-03-23T23:43:16Z,2020-03-24T00:32:56Z,2020-03-24T17:43:42Z,MERGED,True,25,3,2,https://github.com/ajklein,Fix whitespace formatting of SIMD ops,1,[],https://github.com/WebAssembly/wabt/pull/1372,https://github.com/ajklein,1,https://github.com/WebAssembly/wabt/pull/1372,Fixes #1227.,Fixes #1227.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1373,2020-03-24T02:04:07Z,2020-03-25T19:43:24Z,2020-03-25T19:43:25Z,MERGED,True,5860,368,46,https://github.com/binji,Update testsuite (for SIMD),5,[],https://github.com/WebAssembly/wabt/pull/1373,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1373,"Lots of changes necessary to make this work, as well as some bug fixes.
The main change is allowing nan:canonical and nan:arithmetic as a
possible value for each lane of a v128. This needs to propogate
through the parser, IR, the JSON format, and the spec interpreter.
This also changes the format of the spec JSON file, where a SIMD value
is now stored as a list of values instead of a single u128:
{""type"": ""v128"", ""lane_type"": ""i32"", ""value"": [""0"", ""0"", ""0"", ""0""]}

Since the lane type can be i8 and i16, these types can now be used
in more places (not just the decompiler). They'll be used for the GC
proposal too (for packed values), so I've updated them to use the binary
value specified for that proposal.
Here are the actual SIMD fixes:

SIMD lanes are malformed if they don't match the binary format, but
invalid if they are smaller than the lane width. For example,
i8x16.extract_lane_s is malformed if the lane is >= 256, because the
lane is stored as a byte. But it is invalid if the lane is >= 16.
The i8x16.narrow_i16x8_u, i16x8.narrow_i32x4_u and
i64x2.load_32x2_u instructions were not handling sign-extension
propoerly.

TODO: This code is pretty clumsy now; it would be better to have a
universal Value and ExpectedValue that can be used everywhere, so
the logic doesn't need to be duplicated.","Lots of changes necessary to make this work, as well as some bug fixes.
The main change is allowing nan:canonical and nan:arithmetic as a
possible value for each lane of a v128. This needs to propogate
through the parser, IR, the JSON format, and the spec interpreter.
This also changes the format of the spec JSON file, where a SIMD value
is now stored as a list of values instead of a single u128:
{""type"": ""v128"", ""lane_type"": ""i32"", ""value"": [""0"", ""0"", ""0"", ""0""]}

Since the lane type can be i8 and i16, these types can now be used
in more places (not just the decompiler). They'll be used for the GC
proposal too (for packed values), so I've updated them to use the binary
value specified for that proposal.
Here are the actual SIMD fixes:

SIMD lanes are malformed if they don't match the binary format, but
invalid if they are smaller than the lane width. For example,
i8x16.extract_lane_s is malformed if the lane is >= 256, because the
lane is stored as a byte. But it is invalid if the lane is >= 16.
The i8x16.narrow_i16x8_u, i16x8.narrow_i32x4_u and
i64x2.load_32x2_u instructions were not handling sign-extension
propoerly.

TODO: This code is pretty clumsy now; it would be better to have a
universal Value and ExpectedValue that can be used everywhere, so
the logic doesn't need to be duplicated.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1374,2020-03-25T12:01:22Z,2020-03-25T17:02:43Z,2020-03-25T17:55:48Z,MERGED,True,18,18,4,https://github.com/aheejin,Move event section before global section,1,[],https://github.com/WebAssembly/wabt/pull/1374,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1374,"We decided move the event section before the global section in
WebAssembly/exception-handling#98.","We decided move the event section before the global section in
WebAssembly/exception-handling#98.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1380,2020-03-26T20:04:02Z,,2021-03-22T16:56:59Z,OPEN,False,93,10,4,https://github.com/binji,Add Type::RefT to represent (ref $T),1,[],https://github.com/WebAssembly/wabt/pull/1380,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1380,"This adds support for handling types of the form (ref $T), where $T is
an index into the type section. Rather than storing an additional field
in the Type struct, it's more efficient to use the extra bits in the
enum to encode the index. For example, RefT is encoded as -0x13
(0xffffffff6d):
   1111 1111 1111 1111 1111 1111 0110 1101
      f    f    f    f    f    f    6    d

We can store the index in the top bits (making sure to keep the MSB set so
the number remains negative), giving us 23 bits to use for the type index.
   1nnn nnnn nnnn nnnn nnnn nnnn 0110 1101","This adds support for handling types of the form (ref $T), where $T is
an index into the type section. Rather than storing an additional field
in the Type struct, it's more efficient to use the extra bits in the
enum to encode the index. For example, RefT is encoded as -0x13
(0xffffffff6d):
   1111 1111 1111 1111 1111 1111 0110 1101
      f    f    f    f    f    f    6    d

We can store the index in the top bits (making sure to keep the MSB set so
the number remains negative), giving us 23 bits to use for the type index.
   1nnn nnnn nnnn nnnn nnnn nnnn 0110 1101",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1380,2020-03-26T20:04:02Z,,2021-03-22T16:56:59Z,OPEN,False,93,10,4,https://github.com/binji,Add Type::RefT to represent (ref $T),1,[],https://github.com/WebAssembly/wabt/pull/1380,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1380#issuecomment-610039169,"This adds support for handling types of the form (ref $T), where $T is
an index into the type section. Rather than storing an additional field
in the Type struct, it's more efficient to use the extra bits in the
enum to encode the index. For example, RefT is encoded as -0x13
(0xffffffff6d):
   1111 1111 1111 1111 1111 1111 0110 1101
      f    f    f    f    f    f    6    d

We can store the index in the top bits (making sure to keep the MSB set so
the number remains negative), giving us 23 bits to use for the type index.
   1nnn nnnn nnnn nnnn nnnn nnnn 0110 1101",@jgravelle-google ping,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1381,2020-03-27T19:01:38Z,2020-03-27T21:50:36Z,2020-03-27T21:50:37Z,MERGED,True,1432,1206,20,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1381,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1381,"Add i{8x16,16x8,32x4}.abs instructions
Implement IntAbs in interp-math.h","Add i{8x16,16x8,32x4}.abs instructions
Implement IntAbs in interp-math.h",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1383,2020-04-06T23:21:55Z,2020-04-08T01:58:25Z,2020-04-08T01:58:26Z,MERGED,True,571,5,2,https://github.com/binji,Add documentation for wast2json,2,[],https://github.com/WebAssembly/wabt/pull/1383,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1383,This primarily is documentation for the JSON format produced.,This primarily is documentation for the JSON format produced.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1384,2020-04-09T19:29:30Z,2020-04-14T15:57:08Z,2020-04-14T15:57:10Z,MERGED,True,185,55,12,https://github.com/binji,[wasm2c] Add rot13 example,2,[],https://github.com/WebAssembly/wabt/pull/1384,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1384,"This example demonstrates how to use imported functions. The rot13
program takes each command line argument, and rot13-encodes it.
The exported rot13 function has no arguments, and instead calls back
into the program (via fill_buf) with a buffer to fill in. When the
function finishes it calls buf_done.
(rot13.wat is the same as in src/test-interp.cc.)","This example demonstrates how to use imported functions. The rot13
program takes each command line argument, and rot13-encodes it.
The exported rot13 function has no arguments, and instead calls back
into the program (via fill_buf) with a buffer to fill in. When the
function finishes it calls buf_done.
(rot13.wat is the same as in src/test-interp.cc.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1384,2020-04-09T19:29:30Z,2020-04-14T15:57:08Z,2020-04-14T15:57:10Z,MERGED,True,185,55,12,https://github.com/binji,[wasm2c] Add rot13 example,2,[],https://github.com/WebAssembly/wabt/pull/1384,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1384#issuecomment-611747674,"This example demonstrates how to use imported functions. The rot13
program takes each command line argument, and rot13-encodes it.
The exported rot13 function has no arguments, and instead calls back
into the program (via fill_buf) with a buffer to fill in. When the
function finishes it calls buf_done.
(rot13.wat is the same as in src/test-interp.cc.)","Any reason to check in the wasm2c output of the wasm binary?

I included it for the fac example, since it's referenced in the documentation for wasm2c. But you're right, it's probably only worth including once.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1387,2020-04-12T12:25:37Z,2020-05-11T17:55:05Z,2020-05-11T17:55:05Z,CLOSED,False,1,1,1,https://github.com/Issue-03,Update wasm-interp.cc,1,[],https://github.com/WebAssembly/wabt/pull/1387,https://github.com/Issue-03,1,https://github.com/WebAssembly/wabt/pull/1387,"changed to ""initializing""","changed to ""initializing""",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1387,2020-04-12T12:25:37Z,2020-05-11T17:55:05Z,2020-05-11T17:55:05Z,CLOSED,False,1,1,1,https://github.com/Issue-03,Update wasm-interp.cc,1,[],https://github.com/WebAssembly/wabt/pull/1387,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1387#issuecomment-613014512,"changed to ""initializing""","Thanks for fixing! It looks good, but you need to fix the tests too. Take a look at https://github.com/WebAssembly/wabt/blob/master/test/README.md#writing-new-tests, specifically passing the -r flag to rebaseline the tests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1387,2020-04-12T12:25:37Z,2020-05-11T17:55:05Z,2020-05-11T17:55:05Z,CLOSED,False,1,1,1,https://github.com/Issue-03,Update wasm-interp.cc,1,[],https://github.com/WebAssembly/wabt/pull/1387,https://github.com/Issue-03,3,https://github.com/WebAssembly/wabt/pull/1387#issuecomment-613439259,"changed to ""initializing""","Hello, @binji
Sorry, I am a beginner at Open Source, so I did not know why it was failing. I read the the file indicated by you, but did not understand. Can you please help?
Thank you.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1387,2020-04-12T12:25:37Z,2020-05-11T17:55:05Z,2020-05-11T17:55:05Z,CLOSED,False,1,1,1,https://github.com/Issue-03,Update wasm-interp.cc,1,[],https://github.com/WebAssembly/wabt/pull/1387,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1387#issuecomment-613518636,"changed to ""initializing""","It's failing because when the code is compiled, it produces a new output with the correct spelling. There are tests in the repo that check the output of various tools, and will error-out when the output doesn't match the expected output.
In this case, the bad-data-size.txt test is failing. Here's the output from one of the CI bots:
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +1 @@
  -error initialiazing module: out of bounds memory access: data segment is out of bounds: [0, 8) >= max value 0
  +error initializing module: out of bounds memory access: data segment is out of bounds: [0, 8) >= max value 0

You can fix this by compiling the code, then running the tests with the -r flag:
$ test/run-tests.py -r bad-data-size.txt

This will run the tests, capture the output, and replace the expected text automatically.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1387,2020-04-12T12:25:37Z,2020-05-11T17:55:05Z,2020-05-11T17:55:05Z,CLOSED,False,1,1,1,https://github.com/Issue-03,Update wasm-interp.cc,1,[],https://github.com/WebAssembly/wabt/pull/1387,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/1387#issuecomment-626857418,"changed to ""initializing""",This was fixed here: #1410,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1389,2020-04-13T19:54:34Z,2020-04-14T15:47:43Z,2020-04-14T15:47:44Z,MERGED,True,1318,1274,14,https://github.com/binji,Add exnref value type to parser,1,[],https://github.com/WebAssembly/wabt/pull/1389,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1389,"The exnref type was already supported in the type checker, and other
parts of the code, but there was no way to name the type in the text
format.
This PR also fixes makes binary-reader.cc check for just the
exceptions_enabled flag to enable exnref. The exception-handling
proposal depends on the reference types proposal, but that is now
handled at a higher level, in the UpdateDependencies function.
Fixes issue #1388.","The exnref type was already supported in the type checker, and other
parts of the code, but there was no way to name the type in the text
format.
This PR also fixes makes binary-reader.cc check for just the
exceptions_enabled flag to enable exnref. The exception-handling
proposal depends on the reference types proposal, but that is now
handled at a higher level, in the UpdateDependencies function.
Fixes issue #1388.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1389,2020-04-13T19:54:34Z,2020-04-14T15:47:43Z,2020-04-14T15:47:44Z,MERGED,True,1318,1274,14,https://github.com/binji,Add exnref value type to parser,1,[],https://github.com/WebAssembly/wabt/pull/1389,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1389#issuecomment-613521365,"The exnref type was already supported in the type checker, and other
parts of the code, but there was no way to name the type in the text
format.
This PR also fixes makes binary-reader.cc check for just the
exceptions_enabled flag to enable exnref. The exception-handling
proposal depends on the reference types proposal, but that is now
handled at a higher level, in the UpdateDependencies function.
Fixes issue #1388.",It doesn't seem that the exception-handling repo has new tests yet.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/lkarthee,1,https://github.com/WebAssembly/wabt/pull/1392,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-617517023,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","Can't you already do this by building with -DBUILD_TESTS=OFF?
wabt's primary test runner ./test/run-tests.py is also written in python.  If you don't have python the only possible tests you could run are the gtest unittests and i'm not sure it worth the extra option to allow just those tests to build built.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-617517566,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","Also, if you do want to run tests, isn't it easy install python3 on mac?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/lkarthee,4,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-617560522,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","Installing python3 is easy. I use pyenv to manage python versions. I wanted to contribute to this project, so I picked up #1385 with good-first-bug tag.
To test this PR I used a python version 3.8 which is not installed in my MacBook as I don't have Windows as mentioned in #1385.
All 5 CI checks have python3 enabled and run python tests - they won't test the scenario where python3 is not installed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-618087530,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","Would you mind instead improving the error message, e.g. ""python3 is required to for wabt testing,  please either install it or build with -DBUILD_TESTS=OFF"".",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/lkarthee,6,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-618107945,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?",I will modify the PR accordingly.,True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/lkarthee,7,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-618164686,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","I have made required changes. See sample error message (ignore exact versions like 3.7.3 and 3.8 in the error message).
-- Could NOT find PythonInterp: Found unsuitable version ""3.7.3"", but required is at least ""3.8"" (found /usr/bin/python3)
CMake Error at CMakeLists.txt:587 (message):
  Python 3 is required for wabt testing.  Please install it.

  If you want to proceed without installing python 3, either add -no-tests to
  make target (example: make clang-debug-no-tests) or run cmake with
  -DBUILD_TESTS=OFF.


-- Configuring incomplete, errors occurred!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/aardappel,8,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-618579521,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","Would be better if instead it displayed that warning and then turned tests off for you, rather than failing.
Tests are mostly for contributors to WABT, and should not concern people simply trying to build the binaries.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/binji,9,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-618603357,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","I tend to agree with @aardappel here. @sbc100, does that seem OK to you?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/sbc100,10,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-618636155,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?",Fine with me.   We can set BUILD_TESTS to false is python is not found.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/sbc100,11,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-618638036,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?",Or should we even just have BUILD_TESTS default to OFF?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/binji,12,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-618731133,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","I like having it default to on, personally.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/lkarthee,13,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-618966908,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","Should I revert the initial commit of this PR?

BUILD_TESTS default is ON (No change in existing code)
skip tests when python3  >= 3.5.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/sbc100,14,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-619127032,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","I think the conclusion is:

BUILD_TESTS defaults to ON
BUILD_TESTS gets forced to OFF if python is now found",True,{'THUMBS_UP': ['https://github.com/lkarthee']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/lkarthee,15,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-619150672,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","skip tests when python3 >= 3.5.


Got it - Oops typo, it should have been < sign (in my previous comment).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1392,2020-04-22T01:36:17Z,2020-04-27T20:17:30Z,2020-05-06T01:31:38Z,MERGED,True,7,2,1,https://github.com/lkarthee,Improve error message when python 3 not available - Fix for  #1385,7,[],https://github.com/WebAssembly/wabt/pull/1392,https://github.com/lkarthee,16,https://github.com/WebAssembly/wabt/pull/1392#issuecomment-619666114,"#1385
In this PR, I have made python optional in CMakeLists.txt . I have tested locally by bumping the required version to 3.8 which is not existing on my Mac.
I have noticed that the below tests are run from python file - test/run-c-api-examples.py.

c_api_example(callback)
c_api_example(finalize)
c_api_example(global)
c_api_example(hello)
c_api_example(hostref)
c_api_example(multi)
c_api_example(memory)
c_api_example(reflect)
c_api_example(serialize)
c_api_example(start)
c_api_example(table)
c_api_example(trap)

Do we need to port run-c-api-examples.py to gtest file or cpp file?","Cmake prints a message when suitable version is not found. This will appear irrespective of BUILD_TEST is ON or OFF.
When BUILD_TESTS=OFF and python3 not found
.......
-- Check size of size_t - done
-- Could NOT find PythonInterp: Found unsuitable version ""3.7.3"", but required is at least ""3.8"" (found /usr/bin/python3)
-- Looking for pthread.h
.......

When BUILD_TESTS=ON and python3 not found
.......
-- Check size of size_t - done
-- Could NOT find PythonInterp: Found unsuitable version ""3.7.3"", but required is at least ""3.8"" (found /usr/bin/python3)
CMake Warning at CMakeLists.txt:471 (message):
  Skipping tests.  Python 3 is required for wabt testing.  Please install
  python3 to run tests.


-- Looking for pthread.h
.......",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1393,2020-04-23T08:44:09Z,2020-04-23T15:19:54Z,2020-04-23T17:10:09Z,MERGED,True,1,1,1,https://github.com/MaxDesiatov,Fix typo in type-checker.h,1,[],https://github.com/WebAssembly/wabt/pull/1393,https://github.com/MaxDesiatov,1,https://github.com/WebAssembly/wabt/pull/1393,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1398,2020-04-27T23:26:00Z,2020-04-28T00:34:06Z,2020-04-28T00:34:07Z,MERGED,True,94,37,4,https://github.com/binji,Update JS demos (also add feature checkboxes),1,[],https://github.com/WebAssembly/wabt/pull/1398,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1398,"Recompile libwabt.js using latest emscripten
Add features checkbox for wasm2wat (like wat2wasm)
Remove call to _wabt_resolve_names_module, since that's always
done now when parsing text

See #1396","Recompile libwabt.js using latest emscripten
Add features checkbox for wasm2wat (like wat2wasm)
Remove call to _wabt_resolve_names_module, since that's always
done now when parsing text

See #1396",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1401,2020-04-29T00:15:34Z,2020-04-29T07:31:06Z,2020-04-29T07:31:07Z,MERGED,True,17,5,2,https://github.com/binji,Fix address overflow bug in wasm2c,1,[],https://github.com/WebAssembly/wabt/pull/1401,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1401,"This only occurs when the immediate offset is small (int sized). The
stack offset is u32 and the immediate is an int, so the usual
arithmetic conversions converts the result to a u32, which wraps the
address before checking for overflow.
There are already spec tests for overflow, but these use an offset of
4294967295, which is long (at least on LP64 systems). This means
that the sum's type is u32 + long which is long. This is why the
tests pass. I've added additional tests for these cases here:
WebAssembly/spec#1188
This fixes issue #1400.","This only occurs when the immediate offset is small (int sized). The
stack offset is u32 and the immediate is an int, so the usual
arithmetic conversions converts the result to a u32, which wraps the
address before checking for overflow.
There are already spec tests for overflow, but these use an offset of
4294967295, which is long (at least on LP64 systems). This means
that the sum's type is u32 + long which is long. This is why the
tests pass. I've added additional tests for these cases here:
WebAssembly/spec#1188
This fixes issue #1400.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1403,2020-05-01T23:59:31Z,2020-05-04T23:43:37Z,2020-05-04T23:43:37Z,MERGED,True,990,989,24,https://github.com/dtig,Renumber SIMD opcodes,7,[],https://github.com/WebAssembly/wabt/pull/1403,https://github.com/dtig,1,https://github.com/WebAssembly/wabt/pull/1403,"This PR mirrors the updated SIMD opcodes in WebAssembly/simd#216. Uploading for review now, but should be merged in coordination with LLVM, emscripten updates to the opcode space.","This PR mirrors the updated SIMD opcodes in WebAssembly/simd#216. Uploading for review now, but should be merged in coordination with LLVM, emscripten updates to the opcode space.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1403,2020-05-01T23:59:31Z,2020-05-04T23:43:37Z,2020-05-04T23:43:37Z,MERGED,True,990,989,24,https://github.com/dtig,Renumber SIMD opcodes,7,[],https://github.com/WebAssembly/wabt/pull/1403,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1403#issuecomment-623639252,"This PR mirrors the updated SIMD opcodes in WebAssembly/simd#216. Uploading for review now, but should be merged in coordination with LLVM, emscripten updates to the opcode space.","Thanks for doing this! See my comment here. simd_const.wast uses the v128.const encoding directly, so that will need to be fixed before these tests will pass. It probably is easiest to mark those tests as failing for now, then we can fix them when that PR lands.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1403,2020-05-01T23:59:31Z,2020-05-04T23:43:37Z,2020-05-04T23:43:37Z,MERGED,True,990,989,24,https://github.com/dtig,Renumber SIMD opcodes,7,[],https://github.com/WebAssembly/wabt/pull/1403,https://github.com/dtig,3,https://github.com/WebAssembly/wabt/pull/1403#issuecomment-623730582,"This PR mirrors the updated SIMD opcodes in WebAssembly/simd#216. Uploading for review now, but should be merged in coordination with LLVM, emscripten updates to the opcode space.","Thanks Ben, I've skipped the simd_const test for now. Let me know if you meant something different by marking the test as failing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1405,2020-05-05T19:56:48Z,2020-05-06T18:46:44Z,2020-05-06T18:46:44Z,MERGED,True,207,477,67,https://github.com/alexcrichton,Enabled merged proposals by default,1,[],https://github.com/WebAssembly/wabt/pull/1405,https://github.com/alexcrichton,1,https://github.com/WebAssembly/wabt/pull/1405,"This enables three proposals by default since they've been merged into
the upstream specification:

saturating-float-to-int - WebAssembly/spec#1143
sign-extension - WebAssembly/spec#1144
multi-value - WebAssembly/spec#1145

Most of the fallout from this is in the test suite with lots of
--enable flags getting removed and some tests which now
unconditionally pass also getting removed. Two spec tests explicitly
pass --disable until the spec test submodule is updated.","This enables three proposals by default since they've been merged into
the upstream specification:

saturating-float-to-int - WebAssembly/spec#1143
sign-extension - WebAssembly/spec#1144
multi-value - WebAssembly/spec#1145

Most of the fallout from this is in the test suite with lots of
--enable flags getting removed and some tests which now
unconditionally pass also getting removed. Two spec tests explicitly
pass --disable until the spec test submodule is updated.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1407,2020-05-06T18:34:18Z,2020-05-28T18:30:39Z,2020-05-28T18:30:40Z,MERGED,True,4174,3814,108,https://github.com/binji,Reference types changes to remove subtyping,5,[],https://github.com/WebAssembly/wabt/pull/1407,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1407,"Main changes:

Rename anyref -> externref
Remove nullref
Rename hostref -> externref
ref.null and ref.is_null now have ""ref kind"" parameter
Add ref kind keywords: func, extern, exn","Main changes:

Rename anyref -> externref
Remove nullref
Rename hostref -> externref
ref.null and ref.is_null now have ""ref kind"" parameter
Add ref kind keywords: func, extern, exn",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1407,2020-05-06T18:34:18Z,2020-05-28T18:30:39Z,2020-05-28T18:30:40Z,MERGED,True,4174,3814,108,https://github.com/binji,Reference types changes to remove subtyping,5,[],https://github.com/WebAssembly/wabt/pull/1407,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1407#issuecomment-624817886,"Main changes:

Rename anyref -> externref
Remove nullref
Rename hostref -> externref
ref.null and ref.is_null now have ""ref kind"" parameter
Add ref kind keywords: func, extern, exn","This PR can't land as-is, since it fails all the spec tests (that need to be updated)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1407,2020-05-06T18:34:18Z,2020-05-28T18:30:39Z,2020-05-28T18:30:40Z,MERGED,True,4174,3814,108,https://github.com/binji,Reference types changes to remove subtyping,5,[],https://github.com/WebAssembly/wabt/pull/1407,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1407#issuecomment-624831855,"Main changes:

Rename anyref -> externref
Remove nullref
Rename hostref -> externref
ref.null and ref.is_null now have ""ref kind"" parameter
Add ref kind keywords: func, extern, exn",Is there a PR in the reftypes proposal you can link to here?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1407,2020-05-06T18:34:18Z,2020-05-28T18:30:39Z,2020-05-28T18:30:40Z,MERGED,True,4174,3814,108,https://github.com/binji,Reference types changes to remove subtyping,5,[],https://github.com/WebAssembly/wabt/pull/1407,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1407#issuecomment-624850382,"Main changes:

Rename anyref -> externref
Remove nullref
Rename hostref -> externref
ref.null and ref.is_null now have ""ref kind"" parameter
Add ref kind keywords: func, extern, exn",Here's the link to the reference-types PR: WebAssembly/reference-types#87. I'll add it to the commit too.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/eadwu,1,https://github.com/WebAssembly/wabt/pull/1408,Also include header files needed for compilation,Also include header files needed for compilation,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/eadwu,2,https://github.com/WebAssembly/wabt/pull/1408#issuecomment-625356961,Also include header files needed for compilation,I'm guessing this is failing because CMAKE_INSTALL_* isn't defined. I'll figure out how this works.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1408#issuecomment-625957297,Also include header files needed for compilation,"Cool, seems like a good idea! Thanks for working on this.",True,{'THUMBS_UP': ['https://github.com/eadwu']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/nomeata,4,https://github.com/WebAssembly/wabt/pull/1408#issuecomment-702737280,Also include header files needed for compilation,I noticed that nixpkgs is applying this patch. Would be nice to bless it official?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1408#issuecomment-702814629,Also include header files needed for compilation,The patch is approved.. but it looks like it needs a rebase before we can land.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/eadwu,6,https://github.com/WebAssembly/wabt/pull/1408#issuecomment-702952538,Also include header files needed for compilation,Rebased.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1408#issuecomment-702956136,Also include header files needed for compilation,Looks like a real windows build failure.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/1408#issuecomment-713916341,Also include header files needed for compilation,"Yep, wasm2c still doesn't work on Windows (https://github.com/WebAssembly/wabt/tree/wasm2c-windows tries to fix, but is incomplete). So this library shouldn't be built there.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/eadwu,9,https://github.com/WebAssembly/wabt/pull/1408#issuecomment-714027328,Also include header files needed for compilation,Fixed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1408,2020-05-07T16:16:59Z,2020-10-23T19:21:12Z,2020-10-23T19:21:12Z,MERGED,True,7,0,1,https://github.com/eadwu,wasm2c: build library wasm-rt-impl,1,[],https://github.com/WebAssembly/wabt/pull/1408,https://github.com/binji,10,https://github.com/WebAssembly/wabt/pull/1408#issuecomment-715535158,Also include header files needed for compilation,Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1410,2020-05-10T01:14:47Z,2020-05-11T17:34:37Z,2020-05-11T17:34:38Z,MERGED,True,3,4,3,https://github.com/sbc100,Fix typo. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1410,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1410,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1411,2020-05-10T02:21:01Z,2020-05-13T01:28:44Z,2020-05-13T01:28:45Z,MERGED,True,523,31,14,https://github.com/sbc100,Add initial MVP of WASI API support to wasm-interp,3,[],https://github.com/WebAssembly/wabt/pull/1411,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1411,"This is proof of concept that only implements the proc_exit API.
Extending this to the full WASI API will to follow assuming this
approach seems reasonable.
Fixes #1409","This is proof of concept that only implements the proc_exit API.
Extending this to the full WASI API will to follow assuming this
approach seems reasonable.
Fixes #1409",True,"{'THUMBS_UP': ['https://github.com/binji', 'https://github.com/aardappel'], 'HOORAY': ['https://github.com/devsnek']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1411,2020-05-10T02:21:01Z,2020-05-13T01:28:44Z,2020-05-13T01:28:45Z,MERGED,True,523,31,14,https://github.com/sbc100,Add initial MVP of WASI API support to wasm-interp,3,[],https://github.com/WebAssembly/wabt/pull/1411,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1411#issuecomment-626845305,"This is proof of concept that only implements the proc_exit API.
Extending this to the full WASI API will to follow assuming this
approach seems reasonable.
Fixes #1409",Hello world now works :),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1411,2020-05-10T02:21:01Z,2020-05-13T01:28:44Z,2020-05-13T01:28:45Z,MERGED,True,523,31,14,https://github.com/sbc100,Add initial MVP of WASI API support to wasm-interp,3,[],https://github.com/WebAssembly/wabt/pull/1411,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1411#issuecomment-627553330,"This is proof of concept that only implements the proc_exit API.
Extending this to the full WASI API will to follow assuming this
approach seems reasonable.
Fixes #1409","OK I think this is pretty good starting point from which to evaluate/evolve.   I added trap handling and test for that.
PTAL.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1412,2020-05-10T15:20:13Z,2020-05-11T17:30:04Z,2020-05-11T17:30:06Z,MERGED,True,52,46,6,https://github.com/sbc100,Pass current Thread to host function callbacks,1,[],https://github.com/WebAssembly/wabt/pull/1412,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1412,"The for experimental WASI implementation I'm working on the WASI
callbacks (implemented as HostFuncs) need to know which module a call is
coming from.  This is because the implicitly operate on the memory of
the calling instance.
This approach seems the match the current convention of passing in the
Thread in Func::DoCall.
The purpose here is to allow the HostCall callback to determine from
which instance it is being called.  An alternative approach that I
considered was created different set of WASI HostCall object for
each instance so that instance and its memory we bound to the WASI
functions.","The for experimental WASI implementation I'm working on the WASI
callbacks (implemented as HostFuncs) need to know which module a call is
coming from.  This is because the implicitly operate on the memory of
the calling instance.
This approach seems the match the current convention of passing in the
Thread in Func::DoCall.
The purpose here is to allow the HostCall callback to determine from
which instance it is being called.  An alternative approach that I
considered was created different set of WASI HostCall object for
each instance so that instance and its memory we bound to the WASI
functions.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1415,2020-05-11T16:33:00Z,2020-05-12T05:09:10Z,2020-05-12T05:09:11Z,MERGED,True,18,1,2,https://github.com/binji,Prevent large allocation in br_table instruction,1,[],https://github.com/WebAssembly/wabt/pull/1415,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1415,"The binary reader tries to allocate a vector for all of the branch
targets, but wasn't checking whether the length was excessively long.
There's already a function to do this: ReadCount, which errors out if
the count is longer than the section (this assumes each element requires
at least one byte).
Fixes issue #1386.","The binary reader tries to allocate a vector for all of the branch
targets, but wasn't checking whether the length was excessively long.
There's already a function to do this: ReadCount, which errors out if
the count is longer than the section (this assumes each element requires
at least one byte).
Fixes issue #1386.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1416,2020-05-11T16:45:07Z,2020-05-12T05:09:39Z,2020-05-12T05:09:40Z,MERGED,True,38,2,3,https://github.com/binji,Remove range assertions in BinaryReader,1,[],https://github.com/WebAssembly/wabt/pull/1416,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1416,"These assertions check to see whether the sig_index (i.e. the function
type) are in bounds. But this is the responsibility of the validator,
not the binary reader.
Fixes issues #1413 and #1414.","These assertions check to see whether the sig_index (i.e. the function
type) are in bounds. But this is the responsibility of the validator,
not the binary reader.
Fixes issues #1413 and #1414.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1418,2020-05-11T20:38:36Z,2020-05-13T22:16:29Z,2020-05-13T22:16:30Z,MERGED,True,29,11,3,https://github.com/binji,Fix bug when writing grouped named parameters,2,[],https://github.com/WebAssembly/wabt/pull/1418,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1418,"A named parameter (or local) must always be in its own param block, so
this syntax is not allowed:
(param i32 $b i32)
And must instead be converted to:
(param i32) (param $b i32)","A named parameter (or local) must always be in its own param block, so
this syntax is not allowed:
(param i32 $b i32)
And must instead be converted to:
(param i32) (param $b i32)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1418,2020-05-11T20:38:36Z,2020-05-13T22:16:29Z,2020-05-13T22:16:30Z,MERGED,True,29,11,3,https://github.com/binji,Fix bug when writing grouped named parameters,2,[],https://github.com/WebAssembly/wabt/pull/1418,https://github.com/alexcrichton,2,https://github.com/WebAssembly/wabt/pull/1418#issuecomment-626951679,"A named parameter (or local) must always be in its own param block, so
this syntax is not allowed:
(param i32 $b i32)
And must instead be converted to:
(param i32) (param $b i32)","Thanks for the quick fix!
FWIW as I've been poking at this some more locally I think there's the same issue with local declarations?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1418,2020-05-11T20:38:36Z,2020-05-13T22:16:29Z,2020-05-13T22:16:30Z,MERGED,True,29,11,3,https://github.com/binji,Fix bug when writing grouped named parameters,2,[],https://github.com/WebAssembly/wabt/pull/1418,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1418#issuecomment-626952236,"A named parameter (or local) must always be in its own param block, so
this syntax is not allowed:
(param i32 $b i32)
And must instead be converted to:
(param i32) (param $b i32)","Yep, locals are handled in the same way as parameters in this code. But I should probably add a test for that too.",True,{'THUMBS_UP': ['https://github.com/alexcrichton']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1418,2020-05-11T20:38:36Z,2020-05-13T22:16:29Z,2020-05-13T22:16:30Z,MERGED,True,29,11,3,https://github.com/binji,Fix bug when writing grouped named parameters,2,[],https://github.com/WebAssembly/wabt/pull/1418,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1418#issuecomment-628274252,"A named parameter (or local) must always be in its own param block, so
this syntax is not allowed:
(param i32 $b i32)
And must instead be converted to:
(param i32) (param $b i32)","This has failures on Travis CI, but I believe this is because of pep8 issues which @sbc100 fixed. Gonna land for now, and follow up w/ other issues in another PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1419,2020-05-12T03:27:54Z,2020-05-12T05:43:09Z,2020-05-12T05:43:10Z,MERGED,True,12,10,3,https://github.com/sbc100,Move flake8 CI from travis to github actions,2,[],https://github.com/WebAssembly/wabt/pull/1419,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1419,"Also, pin to a specific version.   We were broken today by the flake8 upgrade to 3.8.0.","Also, pin to a specific version.   We were broken today by the flake8 upgrade to 3.8.0.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1422,2020-05-13T06:24:09Z,2020-05-13T18:35:02Z,2020-05-13T18:35:03Z,MERGED,True,23,19,6,https://github.com/sbc100,Use stderr for reporting errors in wasm-interp,1,[],https://github.com/WebAssembly/wabt/pull/1422,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1422,"We should probably send traving to stderr too but thats a bigger
change.","We should probably send traving to stderr too but thats a bigger
change.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1423,2020-05-13T20:58:29Z,2020-05-17T04:15:31Z,2020-05-17T04:15:32Z,MERGED,True,205,48,6,https://github.com/sbc100,Implement more WASI APIs,1,[],https://github.com/WebAssembly/wabt/pull/1423,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1423,"This is almost enough to pass all the tiny tests in the wasi-sdk
repo.","This is almost enough to pass all the tiny tests in the wasi-sdk
repo.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1423,2020-05-13T20:58:29Z,2020-05-17T04:15:31Z,2020-05-17T04:15:32Z,MERGED,True,205,48,6,https://github.com/sbc100,Implement more WASI APIs,1,[],https://github.com/WebAssembly/wabt/pull/1423,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1423#issuecomment-628245411,"This is almost enough to pass all the tiny tests in the wasi-sdk
repo.",Rather than add more of our own tests in wat form I'm currently relying on the tests in wasi-sdk and hoping to integrate them directly somehow.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1424,2020-05-13T23:47:14Z,2020-05-14T01:14:14Z,2020-05-14T01:14:15Z,MERGED,True,1188,651,27,https://github.com/binji,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1424,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1424,"Includes the three merged proposals (nontrapping-float-to-int,
sign-extension, multi-value).
It also has one bug fix when parsing table limits (when the min or max
size does not fit in a 32-bit int).","Includes the three merged proposals (nontrapping-float-to-int,
sign-extension, multi-value).
It also has one bug fix when parsing table limits (when the min or max
size does not fit in a 32-bit int).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1425,2020-05-14T23:15:39Z,2020-05-15T00:58:30Z,2020-05-15T00:58:31Z,MERGED,True,1200,1172,10,https://github.com/binji,Require `do` in folded `try` statement,1,[],https://github.com/WebAssembly/wabt/pull/1425,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1425,"For example:
(try $label (param ...) (result ...)
  (do ...)
  (catch ...)
)

See comment here:
WebAssembly/exception-handling#52 (comment)","For example:
(try $label (param ...) (result ...)
  (do ...)
  (catch ...)
)

See comment here:
WebAssembly/exception-handling#52 (comment)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1427,2020-05-15T17:51:25Z,2020-05-15T20:50:37Z,2020-05-15T20:52:34Z,MERGED,True,6,93,1,https://github.com/kripken,Mangle wasm2c names in a simpler way,2,[],https://github.com/WebAssembly/wabt/pull/1427,https://github.com/kripken,1,https://github.com/WebAssembly/wabt/pull/1427,"This replaces the explicit list of names to avoid with a simple prefixing
scheme. This is safer as it handles more cases, however, it does make
the code slightly less fun to read. Perhaps there's a nicer prefixing?
Fixes #1426 and with this I can compile a ""hello world"" program with
emcc => wasm2c => clang and it all works 🎉","This replaces the explicit list of names to avoid with a simple prefixing
scheme. This is safer as it handles more cases, however, it does make
the code slightly less fun to read. Perhaps there's a nicer prefixing?
Fixes #1426 and with this I can compile a ""hello world"" program with
emcc => wasm2c => clang and it all works 🎉",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1427,2020-05-15T17:51:25Z,2020-05-15T20:50:37Z,2020-05-15T20:52:34Z,MERGED,True,6,93,1,https://github.com/kripken,Mangle wasm2c names in a simpler way,2,[],https://github.com/WebAssembly/wabt/pull/1427,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1427#issuecomment-629408175,"This replaces the explicit list of names to avoid with a simple prefixing
scheme. This is safer as it handles more cases, however, it does make
the code slightly less fun to read. Perhaps there's a nicer prefixing?
Fixes #1426 and with this I can compile a ""hello world"" program with
emcc => wasm2c => clang and it all works 🎉","Hmm.. I have similar but less comprehensive filtering going on here, wonder if I should instead use the list you are deleting.. or not at all. These identifiers can get really long though..

  
    
      wabt/src/decompiler-naming.h
    
    
        Lines 175 to 191
      in
      ebbf625
    
  
  
    

        
          
           std::set<string_view> filter = { 
        

        
          
             { ""const"" }, 
        

        
          
             { ""std"" }, 
        

        
          
             { ""allocator"" }, 
        

        
          
             { ""char"" }, 
        

        
          
             { ""basic"" }, 
        

        
          
             { ""traits"" }, 
        

        
          
             { ""wchar"" }, 
        

        
          
             { ""t"" }, 
        

        
          
             { ""void"" }, 
        

        
          
             { ""int"" }, 
        

        
          
             { ""unsigned"" }, 
        

        
          
             { ""2"" }, 
        

        
          
             { ""cxxabiv1"" }, 
        

        
          
             { ""short"" }, 
        

        
          
             { ""4096ul"" }, 
        

        
          
           };",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1427,2020-05-15T17:51:25Z,2020-05-15T20:50:37Z,2020-05-15T20:52:34Z,MERGED,True,6,93,1,https://github.com/kripken,Mangle wasm2c names in a simpler way,2,[],https://github.com/WebAssembly/wabt/pull/1427,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1427#issuecomment-629477662,"This replaces the explicit list of names to avoid with a simple prefixing
scheme. This is safer as it handles more cases, however, it does make
the code slightly less fun to read. Perhaps there's a nicer prefixing?
Fixes #1426 and with this I can compile a ""hello world"" program with
emcc => wasm2c => clang and it all works 🎉","@aardappel you could, though this list of identifiers was already too small for what it was trying to accomplish. I basically went through the headers that were being included (only a few, math.h, string.h, etc) and looked for any identifiers and added them to the list. But for wasm_decompiler, you'll want a lot more than that.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1430,2020-05-18T00:36:25Z,2020-05-21T16:58:03Z,2020-05-21T16:58:04Z,MERGED,True,591,104,9,https://github.com/sbc100,wasi: Implement more of the wasi API,3,[],https://github.com/WebAssembly/wabt/pull/1430,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1430,"I've been used the tests from wasi-sdk to get started:
https://github.com/WebAssembly/wasi-sdk/tree/master/tests
All these tests now pass.  Still this isn't saying much, there are still
some big missing pieces.  Started using the new serdes
(serialize/deserialze) API in uvwasi.  I think we are almost at the
point were we can look at auto-generating some of this stuff from
witx to avoid having the hand code all this marshelling stuff.
Add support for ArgumentCount::ZeroOrMore to OptionParser and
also the ability to force the end of option processing using --.
This allows is to pass options through the underlying wasi program
when running wasm-interp.","I've been used the tests from wasi-sdk to get started:
https://github.com/WebAssembly/wasi-sdk/tree/master/tests
All these tests now pass.  Still this isn't saying much, there are still
some big missing pieces.  Started using the new serdes
(serialize/deserialze) API in uvwasi.  I think we are almost at the
point were we can look at auto-generating some of this stuff from
witx to avoid having the hand code all this marshelling stuff.
Add support for ArgumentCount::ZeroOrMore to OptionParser and
also the ability to force the end of option processing using --.
This allows is to pass options through the underlying wasi program
when running wasm-interp.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1430,2020-05-18T00:36:25Z,2020-05-21T16:58:03Z,2020-05-21T16:58:04Z,MERGED,True,591,104,9,https://github.com/sbc100,wasi: Implement more of the wasi API,3,[],https://github.com/WebAssembly/wabt/pull/1430,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1430#issuecomment-629891466,"I've been used the tests from wasi-sdk to get started:
https://github.com/WebAssembly/wasi-sdk/tree/master/tests
All these tests now pass.  Still this isn't saying much, there are still
some big missing pieces.  Started using the new serdes
(serialize/deserialze) API in uvwasi.  I think we are almost at the
point were we can look at auto-generating some of this stuff from
witx to avoid having the hand code all this marshelling stuff.
Add support for ArgumentCount::ZeroOrMore to OptionParser and
also the ability to force the end of option processing using --.
This allows is to pass options through the underlying wasi program
when running wasm-interp.",I can split out that OptionParser changes if you like?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1430,2020-05-18T00:36:25Z,2020-05-21T16:58:03Z,2020-05-21T16:58:04Z,MERGED,True,591,104,9,https://github.com/sbc100,wasi: Implement more of the wasi API,3,[],https://github.com/WebAssembly/wabt/pull/1430,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1430#issuecomment-632221700,"I've been used the tests from wasi-sdk to get started:
https://github.com/WebAssembly/wasi-sdk/tree/master/tests
All these tests now pass.  Still this isn't saying much, there are still
some big missing pieces.  Started using the new serdes
(serialize/deserialze) API in uvwasi.  I think we are almost at the
point were we can look at auto-generating some of this stuff from
witx to avoid having the hand code all this marshelling stuff.
Add support for ArgumentCount::ZeroOrMore to OptionParser and
also the ability to force the end of option processing using --.
This allows is to pass options through the underlying wasi program
when running wasm-interp.",Got offline lgtm from binji..so landing this.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1431,2020-05-18T01:58:39Z,2020-05-19T03:12:25Z,2020-05-19T03:12:26Z,MERGED,True,155,394,11,https://github.com/sbc100,Complete conversion to github actions,1,[],https://github.com/WebAssembly/wabt/pull/1431,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1431,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1431,2020-05-18T01:58:39Z,2020-05-19T03:12:25Z,2020-05-19T03:12:26Z,MERGED,True,155,394,11,https://github.com/sbc100,Complete conversion to github actions,1,[],https://github.com/WebAssembly/wabt/pull/1431,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1431#issuecomment-630494749,,"@sbc100 looks like you have changes to uvwasi submodule in this PR too, is that deliberate/",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/kripken,1,https://github.com/WebAssembly/wabt/pull/1432,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/sunfishcode,2,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-631181025,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","Can you say more about the motivation for adding WASM_RT_NO_MEMORY_CHECKS? A core part of the WebAssembly ecosystem is that the sandbox is always enabled (outside of debugging an implementation or experimentation). When the sandbox doesn't work or is too slow, we work to find ways to make the sandboxing better rather than disabling it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/kripken,3,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-631200168,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","Oh, I wrote this in the other PR just now, but here is the reason: If you compile with wasm2c into a native executable, and then run it from the commandline, the OS will have it sandboxed in a process anyhow. There won't be anything else in the process with it to corrupt (except maybe the little ""runtime"" in main.c).
Running the emscripten benchmark suite with wasm2c, these checks make a big difference. Often wasm2c is slower than wasm, but faster than wasm and often comparable to a normal native build, when not doing these checks.
Obviously this should not be on by default! And obviously for a library (and not a commandline utility) it would be a bad idea.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/sunfishcode,4,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-631238114,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","A wasm program is running without linear memory sandboxing can read and write to around 8 GiB of host process address space. Depending on the address space layout, this could be enough to do something which triggers a ROP, and in that case the program can probably break out of a typical OS process.
The WebAssembly design had several choices as to the behavior of out-of-bounds linear memory accesses, including masking/wrapping and nondeterministic behavior, and deliberately chose deterministic trapping, even with the awareness that some implementations would have overhead. If this has turned out to be too burdensome for important implementations, it would be appropriate to take the data to the CG.
I look to WebAssembly-organization projects such as wabt to lead by example in following the spec. There are many parts of the spec which could be ignored to achieve significant benchmark wins on some implementations today. But that's not WebAssembly.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/kripken,5,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-631545682,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","I definitely agree with you in general @sunfishcode . However, the use case I have here (as mentioned in #1434) is compiling trusted code using wasm2c, where a ROP isn't relevant.
I agree that that is not a standard WebAssembly use case! But wasm toolchain components, like wasm2c here, are potentially useful for more than the standard things, and optional support for those would be cool.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-631667445,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","I agree that a better solution (at least for wasm-opt) in general would be to provide a cheaper memory sandbox (a la trap handling or the like). It should be possible to do that in wasm2c at some point.
That said, I have experimented with disabling these checks before too (for performance analysis), so I can see the value. We certainly shouldn't encourage their use for most programs, though I wonder how much worse the security is compared to a native executable.
@sunfishcode Perhaps as a compromise we should avoid mentioning these defines in the docs? Or maybe change their names UNSAFE_DISABLE_MEMORY_CHECKS etc.?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/sunfishcode,7,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-632385476,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","I agree that for the specific use case @kripken describes here where the program is trusted anyway, security is not a concern. And I agree that performance experimentation is cool, though it's pretty easy for people to experiment by editing the code.
I don't think a project as prominent as wabt should have options that intentionally violate WebAssembly standards, for the purpose of allowing third-party projects to depend on them.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/binji,8,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-634258337,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","@sunfishcode OK, but what it is the path forward here? I guess you could say that for @kripken's use case, it's up to them to run a sed script over the output, or modify the output manually. That feels like a worse outcome, but maybe it's OK for now.
Let's do this -- for now, let's hold off on this PR. I'm interested in adding trap-handling to wasm2c anyway (it'll be useful for experimenting with memory64 sandboxing too), which will make this PR moot. I've added an issue for this here: #1440",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/kripken,9,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-634263411,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","Trap handling will help a lot in many cases, but I don't think it would make this PR moot. There are places where trap handlers aren't an option for various reasons (32-bit systems, places without full OS permissions).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/binji,10,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-634282790,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","@kripken Good point. Here's another slightly less opinionated option -- we change the various defines (MEMCHECK, FUNC_PROLOGUE) to check whether they're already defined. In practice this is not much different, but it is less like an official option provided by wasm2c this way.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/kripken,11,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-634749829,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","I'd be ok with checking for the defines. Sounds ok for now.
But in the long term I think we should resolve this debate. For example, it would be interesting if wasm2wat could turn
boundscheck(x)
load(x)
..no branches..
boundscheck(x + 4)
load(x + 4)
..no branches..
boundscheck(x + 8)
load(x + 8)

into
boundscheck(x + 8)
load(x)
..no branches..
load(x + 4)
..no branches..
load(x + 8)

which saves 2 checks. This changes wasm semantics slightly since we can trap earlier (for that reason I believe C compilers can't do it automatically). This could be a large optional speedup which we can't do with a previous #define. It would be unfortunate if we couldn't do this kind of thing in wasm2wat and had to resort to some kind of post-processing tool.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/sunfishcode,12,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-634869120,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","I appreciate the creativity, but ultimately, checking whether MEMCHECK is already defined would still be setting up an extension point for the purpose of letting downstream dependencies alter wasm spec requirements.
(If a general-purpose tracing or debugging extension point is desired, such a thing should be designed to be independent of the sandboxing mechanism anyway.)
An expectation of spec conformance is one of the tools the WebAssembly community has for pressuring everyone, even powerful companies, to play by the same rules, and while I recognize it has practical limitations, I am opposed to weakening it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1432,2020-05-18T22:12:46Z,,2021-03-22T16:56:59Z,OPEN,False,41,6,7,https://github.com/kripken,Add some optional defines to disable wasm2c trap checks,3,[],https://github.com/WebAssembly/wabt/pull/1432,https://github.com/kripken,13,https://github.com/WebAssembly/wabt/pull/1432#issuecomment-634989090,"WASM_RT_NO_MEMORY_CHECKS: Prevents checks from being emitted for memory
accesses being in bounds.
WASM_RT_NO_STACK_DEPTH_CHECKS: Prevents checks from being emitted for
exhausting the stack.

When compiling a commandline tool like say wasm-opt, those are not relevant,
and they do add significant overhead both to binary size and to speed.
Thoughts?","@sunfishcode
I think it would be useful for you to explain your position some more - it's a novel one that I've never encountered before. Perhaps I am misunderstanding you.
To avoid confusion, here is my position: any wasm VM should conform to the wasm spec, period. Toolchain components that consume and produce wasm should do so according to the spec, period. However, a toolchain may also do more things. For example, wabt today can read wasm and emit a C-like format using wasm-decompile, and binaryen can read wasm and emit asm.js-like JS using wasm2js. Those output formats are not wasm.
wasm-decompile doesn't emit runnable code, but wasm2js does, and it does not 100% conform to wasm semantics, intentionally, because that would not work - bounds checking and alignment checking each load and store would be too slow when using JS Typed Arrays. This is ok because wasm2js output is not wasm, it's JS.
The proposed wasm2c stuff in this PR is directly analogous: it's not wasm, it's C.
(If you disagree, do you also disagree on wasm-decompile and/or wasm2js?)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1433,2020-05-19T03:15:05Z,2020-05-19T05:08:46Z,2020-05-19T05:08:47Z,MERGED,True,0,1,1,https://github.com/sbc100,Update build status badges,1,[],https://github.com/WebAssembly/wabt/pull/1433,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1433,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/kripken,1,https://github.com/WebAssembly/wabt/pull/1434,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631105813,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","Looks nice! I think this is reasonable to have here, though I worry a little about version skew with emscripten. It would be nice to have some basic tests, but I'm not sure we'd want to run the full emscripten testsuite here.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631105904,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?",@sbc100 wdyt?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631139018,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","I'm currently working on the WASI implementation which should allow STANDALONE_WASM binaries to run the wasm-interp.
Eventually it would be nice to unify those two things.
Specifically, in my implementation I use uvwasi, which is very nice way to expose the wasi APIs entry points and is cross platform and fairly well tested.   it does add a small sandbox layer out course which wasm2c users might not want.
I think there are a few questions we need to ask:

Can we unify the wasm2c and wasm-interp implementations of syscalls/WASI

it would certainly be great if we could but I'm unsure of the complexity involved.


Do we want a completely un-sandboxed mode.

If yes, can uvwasi provide that for us rather than us re-implementing it here.


Do we want to include any emscripten specific syscalls or should we limit this to just WASI (and focus of improving STANDALONE_WASM mode in emscripten).

I worry in particular about the duplicate work and maintance cost of maintaining our own WASI implementation over time as it evolves.  It would be nice to combine efforts with uvwasi and be able to benefit from their work.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631139598,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","Personally, I don't think we want to be pulling emscripten-specific stuff into wabt.   Testing emscripten under wasm2c would be something we could do in the emscripten repro and report bugs back here.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/sunfishcode,6,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631153800,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","I'm currently working on the WASI implementation which should allow STANDALONE_WASM binaries to run the wasm-interp.

It could also enable wasm-interp to run binaries produced by wasi-sdk.

2. Do we want a completely un-sandboxed mode.


Just as there isn't a way to have a completely un-sandboxed core wasm module, even though some users would find it useful because it'd make it easier to share memory between wasm and host, I encourage wabt to not provide a completely unsandboxed API either, even though some users may find it useful. An API sandbox is sometimes inconvenient, as is the core sandbox, but if we focus on finding solutions to problems that work with the sandbox instead of making it easy to disable the sandbox, we can make the whole ecosystem better for people who do need the sandbox.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/kripken,7,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631160521,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","An API sandbox is sometimes inconvenient, as is the core sandbox, but if we focus on finding solutions to problems that work with the sandbox instead of making it easy to disable the sandbox, we can make the whole ecosystem better for people who do need the sandbox.

I think both routes are important. In emscripten we have NODERAWFS which just enables unsandboxed file access, and it's pretty useful. We may want more such things (my use case of ""portable"" llvm and binaryen builds using wasm2c may need more). But I agree completely that we should push the sandboxing approach as far as we can take it!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631173377,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","I'm currently working on the WASI implementation which should allow STANDALONE_WASM binaries to run the wasm-interp.

It could also enable wasm-interp to run binaries produced by wasi-sdk.

Yes!   Indeed, as of #1430 we can pass all the wask-sdk micro-tests (not say much I know but milestone non-the-less).


2. Do we want a completely un-sandboxed mode.


Just as there isn't a way to have a completely un-sandboxed core wasm module, even though some users would find it useful because it'd make it easier to share memory between wasm and host, I encourage wabt to not provide a completely unsandboxed API either, even though some users may find it useful. An API sandbox is sometimes inconvenient, as is the core sandbox, but if we focus on finding solutions to problems that work with the sandbox instead of making it easy to disable the sandbox, we can make the whole ecosystem better for people who do need the sandbox.

I believe the wasm2c already has an unsandboxed-memory mode, which is mostly interesting for experimenting and bench-marking I guess.
I would agree that we don't want to encourage such things in the wild but I do think its reasonable to have flags that we can use to turn these things on and off.    I mean even chrome itself has a --no-sandbox flag.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/binji,9,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631173742,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","I believe the wasm2c already has an unsandboxed-memory mode, which is mostly interesting for experimenting and bench-marking I guess.

Not originally, @kripken added this recently here: #1432",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/sunfishcode,10,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631176426,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","In emscripten we have NODERAWFS which just enables unsandboxed file access, and it's pretty useful.

Do you have a sense of what features, specifically, are useful, that are unsupported? It would be great to learn more about how current sandboxing mechanisms are insufficient for real-world use cases.

But I agree completely that we should push the sandboxing approach as far as we can take it!

A great way to push the sandboxing approach as far as we can take it is to enable it and find out where it's insufficient. 😄",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/binji,11,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631177707,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","Personally, I don't think we want to be pulling emscripten-specific stuff into wabt.

Thinking about this some more, I agree. This is pretty useful for wasm2c users, but perhaps the better solution would be to point people to the emscripten repo here, rather than including the source.

Can we unify the wasm2c and wasm-interp implementations of syscalls/WASI

If we're generating bindings for wasm-interp, we should be able to do it for wasm2c too. Using uvwasi as a base seems like a good way to go.

Do we want a completely un-sandboxed mode

If we do, we definitely should encourage it. As @sbc100 said, I think it's useful for benchmarking (memory checking overhead, etc.). But I'm not sure if this usage translates to a completely unsandboxed WASI too.

Do we want to include any emscripten specific syscalls or should we limit this to just WASI

emscripten would be convenient, but it does feel a bit odd to include here given that the emscripten API isn't standardized.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/sbc100,12,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631183203,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?",@kripken is it possible for this to live in the emscripten-repo for now?   Seems like that makes for sense (at least for now).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1434,2020-05-19T20:49:21Z,2020-05-20T02:29:29Z,2020-05-20T02:29:34Z,CLOSED,False,602,0,1,https://github.com/kripken,Emscripten main.c file?,44,[],https://github.com/WebAssembly/wabt/pull/1434,https://github.com/kripken,13,https://github.com/WebAssembly/wabt/pull/1434#issuecomment-631196617,"This is the main() file I've used in my emscripten testing so far. It's now at the point where it can run the whole benchmark suite, which includes file handling (some tests read a file, and sqlite also does seeks and writes), setjmp/longjmp, and a few other nontrivial things.
I'm a little unsure which repo it should live in, so I just opened a draft PR here. Do people think it would make sense here, or in the emscripten repo?
A related question might be where to test the emscripten+wasm2c mode. Getting it passing the emscripten test suite seems useful. Or maybe we should add some emcc tests here?","@sunfishcode

Do you have a sense of what features, specifically, are useful, that are unsupported? It would be great to learn more about how current sandboxing mechanisms are insufficient for real-world use cases.

Sure, here is my main use case: Right now emscripten ships an emsdk to users with binary builds for 3 platforms, windows, mac, and linux. That includes LLVM, Binaryen, and on some platforms Python and other stuff. Those builds cover most but not all users, since some people's linux distro can't run our linux builds, or they are on BSD, or whatever. We suggest those people build from source, but instead, how about if we gave them a build that runs in node.js, or a big C file? Both are those are likely to work for many users and be much simpler than building themselves.
Another benefit of such builds is we can use newer compilers. It would be nice if binaryen could use c++20 or maybe be a mixture of various languages, some of which use very new compilers. It's easier to do that if we have more easy ways for users to get builds from us, so they aren't stuck.
For such builds to be feasible, they must be of similar performance and capability to our normal builds. It looks like node.js is not currently viable as code caching of wasm worked in node 12, but fails in node 14 (due to v8 APIs changing, I am told). Recompiling clang on every invocation would not be fun! That's why I'm more focused on wasm2c atm (but long-term, I think node - or deno 😉 - is better).
For wasm2c to work, I need:

A way to disable memory checks. It'll run in an OS process anyhow! And benchmarks show it's a huge difference.
Support for setjmp, exceptions, etc. - right now that means supporting a bunch of emscripten APIs like invoke*, which is why you see those in the main.c here.
Direct OS access, in particular,

File access. Probably WASI can do most of this, but it also includes things like file locking (which we use to ensure a single invocation of emcc accesses the cache, across the entire OS), which I'm not sure what API is needed.
Process creation. This is necessary for Python, whose process pool support we use. I'm not sure exactly what native APIs it uses.
Network access. We fetch files over https using Python.



I think that covers it. Currently we already have direct node.js access to some things like files, and maybe the same flag could cover wasm2c. As I find the specific APIs, I can let you know what's missing from WASI in more detail.

A great way to push the sandboxing approach as far as we can take it is to enable it and find out where it's insufficient. smile

Definitely! I hope I didn't come across as negative in any way about that. I look forward to a future where practically everything is sandboxed!
@sbc100
Yeah, I'm happy for this to live in emscripten. Whatever people prefer. Sounds like we are agreed there, so I'll close this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1435,2020-05-20T00:16:46Z,2020-05-20T01:12:47Z,2020-05-20T01:12:48Z,MERGED,True,12,9,1,https://github.com/dschuff,Add build flag to disable build of libwasm,1,[],https://github.com/WebAssembly/wabt/pull/1435,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/1435,This allows the wabt tools to be build with no git submodules,This allows the wabt tools to be build with no git submodules,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1435,2020-05-20T00:16:46Z,2020-05-20T01:12:47Z,2020-05-20T01:12:48Z,MERGED,True,12,9,1,https://github.com/dschuff,Add build flag to disable build of libwasm,1,[],https://github.com/WebAssembly/wabt/pull/1435,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1435#issuecomment-631172999,This allows the wabt tools to be build with no git submodules,"This allows the wabt tools to be build with no git submodules

Why do we want to build w/o submodules?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1435,2020-05-20T00:16:46Z,2020-05-20T01:12:47Z,2020-05-20T01:12:48Z,MERGED,True,12,9,1,https://github.com/dschuff,Add build flag to disable build of libwasm,1,[],https://github.com/WebAssembly/wabt/pull/1435,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/1435#issuecomment-631174543,This allows the wabt tools to be build with no git submodules,"Because the emscripten-releases build has wabt in its DEPS (in order to ship the wabt tools with emsdk), and DEPS doesn't mix well with submodules.",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1436,2020-05-21T17:51:33Z,2020-05-21T22:12:00Z,2020-05-21T22:12:01Z,MERGED,True,248,242,1,https://github.com/kripken,Allow building all tools with emscripten,5,[],https://github.com/WebAssembly/wabt/pull/1436,https://github.com/kripken,1,https://github.com/WebAssembly/wabt/pull/1436,"This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji","This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1436,2020-05-21T17:51:33Z,2020-05-21T22:12:00Z,2020-05-21T22:12:01Z,MERGED,True,248,242,1,https://github.com/kripken,Allow building all tools with emscripten,5,[],https://github.com/WebAssembly/wabt/pull/1436,https://github.com/kripken,2,https://github.com/WebAssembly/wabt/pull/1436#issuecomment-632258497,"This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji",Build fails here.. is it using fastcomp maybe?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1436,2020-05-21T17:51:33Z,2020-05-21T22:12:00Z,2020-05-21T22:12:01Z,MERGED,True,248,242,1,https://github.com/kripken,Allow building all tools with emscripten,5,[],https://github.com/WebAssembly/wabt/pull/1436,https://github.com/kripken,3,https://github.com/WebAssembly/wabt/pull/1436#issuecomment-632260262,"This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji","Another option for the npm package might be to keep wabt as it is, and add a new wasm2c package?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1436,2020-05-21T17:51:33Z,2020-05-21T22:12:00Z,2020-05-21T22:12:01Z,MERGED,True,248,242,1,https://github.com/kripken,Allow building all tools with emscripten,5,[],https://github.com/WebAssembly/wabt/pull/1436,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1436#issuecomment-632264657,"This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji","Annoying that we don't see the failing command line.. since we are using make and not ninja :(
Looks like the error is:
error: DISABLE_EXCEPTION_THROWING was set (likely due to -fno-exceptions), which means no C++ exception throwing support code is linked in, but such support is required by symbol __cxa_begin_catch. Either do not set DISABLE_EXCEPTION_THROWING (if you do want exception throwing) or compile all source files with -fno-except (so that no exceptions support code is required); also make sure DISABLE_EXCEPTION_CATCHING is set to the right value - if you want exceptions, it should be off, and vice versa.

You don't see that when building locally?  Maybe we need switch the docker image we are using?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1436,2020-05-21T17:51:33Z,2020-05-21T22:12:00Z,2020-05-21T22:12:01Z,MERGED,True,248,242,1,https://github.com/kripken,Allow building all tools with emscripten,5,[],https://github.com/WebAssembly/wabt/pull/1436,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1436#issuecomment-632265732,"This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji",Yeah.. its fastcomp :(  I'll update,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1436,2020-05-21T17:51:33Z,2020-05-21T22:12:00Z,2020-05-21T22:12:01Z,MERGED,True,248,242,1,https://github.com/kripken,Allow building all tools with emscripten,5,[],https://github.com/WebAssembly/wabt/pull/1436,https://github.com/kripken,6,https://github.com/WebAssembly/wabt/pull/1436#issuecomment-632266497,"This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji",It builds ok for me locally with both upstream and fastcomp... strange.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1436,2020-05-21T17:51:33Z,2020-05-21T22:12:00Z,2020-05-21T22:12:01Z,MERGED,True,248,242,1,https://github.com/kripken,Allow building all tools with emscripten,5,[],https://github.com/WebAssembly/wabt/pull/1436,https://github.com/kripken,7,https://github.com/WebAssembly/wabt/pull/1436#issuecomment-632267290,"This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji",Oh... it's using 1.38.43. Almost a year old.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1436,2020-05-21T17:51:33Z,2020-05-21T22:12:00Z,2020-05-21T22:12:01Z,MERGED,True,248,242,1,https://github.com/kripken,Allow building all tools with emscripten,5,[],https://github.com/WebAssembly/wabt/pull/1436,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/1436#issuecomment-632343235,"This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji",Lgtm.. want to land this or are you able to?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1436,2020-05-21T17:51:33Z,2020-05-21T22:12:00Z,2020-05-21T22:12:01Z,MERGED,True,248,242,1,https://github.com/kripken,Allow building all tools with emscripten,5,[],https://github.com/WebAssembly/wabt/pull/1436,https://github.com/kripken,9,https://github.com/WebAssembly/wabt/pull/1436#issuecomment-632372578,"This allows building say wasm2c.js, and not just wabt.js.
(99% of this is a change to indentation, so please view with ?w=1)
Also remove --llvm-lto 1 which is a no-op with the upstream
backend anyhow (however, to get LTO we'd need to build sources
with -flto).
On a related note, I'd like to use wasm2c this way, which means I
also need the wasm2c/ directory. Perhaps that could be part of
wabt releases on npm? And would we want wasm2c.js to be
part of that package?
cc @dcodeIO @binji","I thought to wait to see if there are other comments, but this seems low-risk and we can always follow up later and revert. Landing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1437,2020-05-21T18:29:31Z,2020-05-21T18:41:01Z,2020-05-21T18:41:02Z,MERGED,True,4,3,1,https://github.com/sbc100,Update and pin emscripten image used in CI,1,[],https://github.com/WebAssembly/wabt/pull/1437,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1437,"This image the the latest one published, and used llvm upstream rather than
fastcomp.","This image the the latest one published, and used llvm upstream rather than
fastcomp.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1442,2020-05-28T18:33:17Z,2020-06-04T22:45:03Z,2020-06-04T22:45:04Z,MERGED,True,113,24,5,https://github.com/binji,[wasm2c] Implement trap handler for linux,7,[],https://github.com/WebAssembly/wabt/pull/1442,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1442,,,True,{'THUMBS_UP': ['https://github.com/aardappel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1442,2020-05-28T18:33:17Z,2020-06-04T22:45:03Z,2020-06-04T22:45:04Z,MERGED,True,113,24,5,https://github.com/binji,[wasm2c] Implement trap handler for linux,7,[],https://github.com/WebAssembly/wabt/pull/1442,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1442#issuecomment-635522610,,@kripken Here's an initial pass at adding signal handling for Linux. PTAL!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1442,2020-05-28T18:33:17Z,2020-06-04T22:45:03Z,2020-06-04T22:45:04Z,MERGED,True,113,24,5,https://github.com/binji,[wasm2c] Implement trap handler for linux,7,[],https://github.com/WebAssembly/wabt/pull/1442,https://github.com/kripken,3,https://github.com/WebAssembly/wabt/pull/1442#issuecomment-635561757,,"Very nice!
How would this interact with other signal handlers the host has? I seem to recall wasm VMs have a bunch of complexity there. Not sure if they chain them, or if they enable/disable them at the boundary..?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1442,2020-05-28T18:33:17Z,2020-06-04T22:45:03Z,2020-06-04T22:45:04Z,MERGED,True,113,24,5,https://github.com/binji,[wasm2c] Implement trap handler for linux,7,[],https://github.com/WebAssembly/wabt/pull/1442,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1442#issuecomment-635574052,,"How would this interact with other signal handlers the host has? I seem to recall wasm VMs have a bunch of complexity there. Not sure if they chain them, or if they enable/disable them at the boundary..?

It's a good question, we'll probably want a better way to configure this at some point. Right now, this just overwrites the signal handler and ignores the old one.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1442,2020-05-28T18:33:17Z,2020-06-04T22:45:03Z,2020-06-04T22:45:04Z,MERGED,True,113,24,5,https://github.com/binji,[wasm2c] Implement trap handler for linux,7,[],https://github.com/WebAssembly/wabt/pull/1442,https://github.com/syrusakbary,5,https://github.com/WebAssembly/wabt/pull/1442#issuecomment-636270992,,"On the VM side we usually allow the user to set it's own signalhandler via our API.
Once a trap occurs, this is what happens:

Does the address belong to wasm-generated function? We check the address of the trap, and ask the engine to check if the address is in any of the generated code for the published functions
In case it doesn't we fallback to the user-provided signalhandler",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1446,2020-05-28T20:47:08Z,2020-05-29T00:03:36Z,2020-05-29T00:03:37Z,MERGED,True,89,5,5,https://github.com/binji,[wat2wasm] Write table indexes in text format,2,[],https://github.com/WebAssembly/wabt/pull/1446,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1446,"See #1445 and #1443. This writes non-zero table indexes for table.init, table.copy, and for element segments.","See #1445 and #1443. This writes non-zero table indexes for table.init, table.copy, and for element segments.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1450,2020-05-29T17:56:06Z,2020-05-29T20:34:47Z,2020-05-29T20:34:48Z,MERGED,True,27,1,4,https://github.com/binji,[wasm2wat] Fix a few more roundtripping issues,1,[],https://github.com/WebAssembly/wabt/pull/1450,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1450,"The declare keyword should be printed when using element expressions
or element indexes (i.e. flags == 3 or flags == 7).
An imported table was not properly setting the element type in the IR

Fixes #1448 and #1449.","The declare keyword should be printed when using element expressions
or element indexes (i.e. flags == 3 or flags == 7).
An imported table was not properly setting the element type in the IR

Fixes #1448 and #1449.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1451,2020-05-29T18:27:21Z,2020-05-29T19:46:54Z,2020-05-29T19:46:55Z,MERGED,True,35,11,9,https://github.com/binji,[wasm2wat] Write select type immediate,3,[],https://github.com/WebAssembly/wabt/pull/1451,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1451,"The main fix is in wat-writer.cc, where the type immediate was never
being printed. But I've also included a change to how select type
immediates are represented in wabt.
Previously, a bare select instruction would be stored with the type
Type::Any. This is not a real wasm type, and is primarily used for
type validation. The spec instead considers this form of select to
have an empty type immediate, which is closer to the Type::Void type.
This commit now uses Type::Void (or an empty TypeVector) to
represent the bare select instruction.","The main fix is in wat-writer.cc, where the type immediate was never
being printed. But I've also included a change to how select type
immediates are represented in wabt.
Previously, a bare select instruction would be stored with the type
Type::Any. This is not a real wasm type, and is primarily used for
type validation. The spec instead considers this form of select to
have an empty type immediate, which is closer to the Type::Void type.
This commit now uses Type::Void (or an empty TypeVector) to
represent the bare select instruction.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1454,2020-06-09T00:52:54Z,2020-06-09T15:50:50Z,2020-06-09T15:50:51Z,MERGED,True,40,10,2,https://github.com/binji,Check for malformed alignment,1,[],https://github.com/WebAssembly/wabt/pull/1454,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1454,Fixes issue #1453.,Fixes issue #1453.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1456,2020-06-10T00:26:43Z,2020-06-12T20:56:40Z,2020-06-12T20:56:40Z,CLOSED,False,23,12,2,https://github.com/steven-johnson,Add a static-library version of the `wasm` library.,1,[],https://github.com/WebAssembly/wabt/pull/1456,https://github.com/steven-johnson,1,https://github.com/WebAssembly/wabt/pull/1456,"Some clients may need to embed directly; this was possible before but fragile since it required recapitulating some compilation logic elsewhere.
Also, drive-by fix to a warning in binary-writer-spec.cc (uintptr_t != uint64_t).","Some clients may need to embed directly; this was possible before but fragile since it required recapitulating some compilation logic elsewhere.
Also, drive-by fix to a warning in binary-writer-spec.cc (uintptr_t != uint64_t).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1456,2020-06-10T00:26:43Z,2020-06-12T20:56:40Z,2020-06-12T20:56:40Z,CLOSED,False,23,12,2,https://github.com/steven-johnson,Add a static-library version of the `wasm` library.,1,[],https://github.com/WebAssembly/wabt/pull/1456,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1456#issuecomment-642208133,"Some clients may need to embed directly; this was possible before but fragile since it required recapitulating some compilation logic elsewhere.
Also, drive-by fix to a warning in binary-writer-spec.cc (uintptr_t != uint64_t).","Looks pretty good to me, but it seems to be failing on the bots when linking libwasm.so
[73/144] Linking CXX shared library libwasm.so
FAILED: libwasm.so 
: && /usr/bin/c++ -fPIC -std=c++11 -Wold-style-cast -fno-exceptions   -shared -Wl,-soname,libwasm.so -o libwasm.so CMakeFiles/wasm.dir/src/interp/interp-wasm-c-api.cc.o  libwabt.a && :
/usr/bin/ld: libwabt.a(error-formatter.cc.o): relocation R_X86_64_PC32 against symbol `_ZNK4wabt5Color13MaybeBoldCodeEv' can not be used when making a shared object; recompile with -fPIC
/usr/bin/ld: final link failed: Bad value",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1456,2020-06-10T00:26:43Z,2020-06-12T20:56:40Z,2020-06-12T20:56:40Z,CLOSED,False,23,12,2,https://github.com/steven-johnson,Add a static-library version of the `wasm` library.,1,[],https://github.com/WebAssembly/wabt/pull/1456,https://github.com/steven-johnson,3,https://github.com/WebAssembly/wabt/pull/1456#issuecomment-643479937,"Some clients may need to embed directly; this was possible before but fragile since it required recapitulating some compilation logic elsewhere.
Also, drive-by fix to a warning in binary-writer-spec.cc (uintptr_t != uint64_t).",I'm going to withdraw this because (despite what I thought before) I'm probably not going to be using the wasm target at this time (either static or shared) and so I won't be able to vet the results as closely as I'd like. (I do think it would be useful to do and may revisit it in the future.),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1460,2020-06-10T16:10:06Z,2020-06-10T17:46:11Z,2020-06-10T17:46:12Z,MERGED,True,1113,1049,7,https://github.com/binji,Better error when parsing input/output command,1,[],https://github.com/WebAssembly/wabt/pull/1460,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1460,Fixes #1459.,Fixes #1459.,True,{'ROCKET': ['https://github.com/pkel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1460,2020-06-10T16:10:06Z,2020-06-10T17:46:11Z,2020-06-10T17:46:12Z,MERGED,True,1113,1049,7,https://github.com/binji,Better error when parsing input/output command,1,[],https://github.com/WebAssembly/wabt/pull/1460,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1460#issuecomment-642135148,Fixes #1459.,Huh.  TIL about these things.  Why do they even exist if they are not used in any of the reference tests?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1460,2020-06-10T16:10:06Z,2020-06-10T17:46:11Z,2020-06-10T17:46:12Z,MERGED,True,1113,1049,7,https://github.com/binji,Better error when parsing input/output command,1,[],https://github.com/WebAssembly/wabt/pull/1460,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1460#issuecomment-642141213,Fixes #1459.,"Huh. TIL about these things. Why do they even exist if they are not used in any of the reference tests?

I think the ""script"" format is also used for the interactive mode of the reference interpreter; in that case it's kind of useful.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1461,2020-06-10T18:12:07Z,2020-06-10T19:29:31Z,2020-06-10T19:29:32Z,MERGED,True,32,0,1,https://github.com/binji,[wasm-c-api] Implement missing functions,1,[],https://github.com/WebAssembly/wabt/pull/1461,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1461,"For now, the wasm-c-api interface in wabt doesn't have its own tests,
and relies on the wasm-c-api repo's examples for testing. This means
that some functions that are not used in any examples were accidentally
omitted.
TODO: wabt (or wasm-c-api) should have explicit tests of the API
surface.","For now, the wasm-c-api interface in wabt doesn't have its own tests,
and relies on the wasm-c-api repo's examples for testing. This means
that some functions that are not used in any examples were accidentally
omitted.
TODO: wabt (or wasm-c-api) should have explicit tests of the API
surface.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1462,2020-06-12T23:47:03Z,2020-06-15T19:26:37Z,2020-06-17T17:44:45Z,MERGED,True,2,2,2,https://github.com/steven-johnson,Fix two minor compiler warnings,2,[],https://github.com/WebAssembly/wabt/pull/1462,https://github.com/steven-johnson,1,https://github.com/WebAssembly/wabt/pull/1462,"writing a uintptr_t should use PRIuPTR, not PRIu64
add explicit override to ~FileStream","writing a uintptr_t should use PRIuPTR, not PRIu64
add explicit override to ~FileStream",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1466,2020-06-17T01:10:42Z,2020-06-17T03:47:38Z,2020-06-17T20:56:35Z,MERGED,True,32,3,2,https://github.com/binji,Update local bindings on function with type use,1,[],https://github.com/WebAssembly/wabt/pull/1466,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1466,"When a function is specified like this:
(func (type $t) ...)

the type can have any sequence of params and results, but it is not
known what that signature is until it is resolved. However, locals that
are parsed will be given a binding index under the assumption that the
signature is empty, e.g.
(func (type $t)
  (local $v0 i32)
  (local $v1 i32)
  ...
)

So $v0 will have index 0, and $v1 will have index 1. If it turns out
later that type $t has any parameters, then these indexes need to be
updated.","When a function is specified like this:
(func (type $t) ...)

the type can have any sequence of params and results, but it is not
known what that signature is until it is resolved. However, locals that
are parsed will be given a binding index under the assumption that the
signature is empty, e.g.
(func (type $t)
  (local $v0 i32)
  (local $v1 i32)
  ...
)

So $v0 will have index 0, and $v1 will have index 1. If it turns out
later that type $t has any parameters, then these indexes need to be
updated.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1466,2020-06-17T01:10:42Z,2020-06-17T03:47:38Z,2020-06-17T20:56:35Z,MERGED,True,32,3,2,https://github.com/binji,Update local bindings on function with type use,1,[],https://github.com/WebAssembly/wabt/pull/1466,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1466#issuecomment-645088762,"When a function is specified like this:
(func (type $t) ...)

the type can have any sequence of params and results, but it is not
known what that signature is until it is resolved. However, locals that
are parsed will be given a binding index under the assumption that the
signature is empty, e.g.
(func (type $t)
  (local $v0 i32)
  (local $v1 i32)
  ...
)

So $v0 will have index 0, and $v1 will have index 1. If it turns out
later that type $t has any parameters, then these indexes need to be
updated.",Fixes #1464.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1466,2020-06-17T01:10:42Z,2020-06-17T03:47:38Z,2020-06-17T20:56:35Z,MERGED,True,32,3,2,https://github.com/binji,Update local bindings on function with type use,1,[],https://github.com/WebAssembly/wabt/pull/1466,https://github.com/rossberg,3,https://github.com/WebAssembly/wabt/pull/1466#issuecomment-645170168,"When a function is specified like this:
(func (type $t) ...)

the type can have any sequence of params and results, but it is not
known what that signature is until it is resolved. However, locals that
are parsed will be given a binding index under the assumption that the
signature is empty, e.g.
(func (type $t)
  (local $v0 i32)
  (local $v1 i32)
  ...
)

So $v0 will have index 0, and $v1 will have index 1. If it turns out
later that type $t has any parameters, then these indexes need to be
updated.","Are there any tests in the spec test suite exercising this case? If not, do you have some that you could add?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1466,2020-06-17T01:10:42Z,2020-06-17T03:47:38Z,2020-06-17T20:56:35Z,MERGED,True,32,3,2,https://github.com/binji,Update local bindings on function with type use,1,[],https://github.com/WebAssembly/wabt/pull/1466,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1466#issuecomment-645620302,"When a function is specified like this:
(func (type $t) ...)

the type can have any sequence of params and results, but it is not
known what that signature is until it is resolved. However, locals that
are parsed will be given a binding index under the assumption that the
signature is empty, e.g.
(func (type $t)
  (local $v0 i32)
  (local $v1 i32)
  ...
)

So $v0 will have index 0, and $v1 will have index 1. If it turns out
later that type $t has any parameters, then these indexes need to be
updated.","@rossberg good point, I thought that this was a roundtripping issue only, but it actually occurs when just parsing too, and a quick test shows that the reference interpreter has the same bug. See WebAssembly/spec#1212.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1467,2020-06-17T18:24:58Z,2020-06-18T19:56:31Z,2020-06-18T19:56:31Z,MERGED,True,14,2,1,https://github.com/steven-johnson,Improve CMakeLists.txt for when used via add_subdirectory(),2,[],https://github.com/WebAssembly/wabt/pull/1467,https://github.com/steven-johnson,1,https://github.com/WebAssembly/wabt/pull/1467,"This is a minor change to avoid some misleading output when wabt is used as a subproject via add_subdirectory(); in particular, when used as a depdency via CMake's FetchContent command. It's not uncommon for clients in this case to make a shallow git clone, but in these cases, the call to git describe code will report a ""fatal error"". (This is reported as a warning but is nevertheless disconcerting.)
The PR detects whether wabt is the main project or not, and if not, suppresses and warnings about this, on the assumption that the actual main project presumably knows the specific version it has included.
(It might also make sense to change the defaults of BUILD_TESTS and BUILD_TOOLS to off in this case, on the assumption that the main project just wants the library targets, but that's a topic that would require discussion I suspect.)","This is a minor change to avoid some misleading output when wabt is used as a subproject via add_subdirectory(); in particular, when used as a depdency via CMake's FetchContent command. It's not uncommon for clients in this case to make a shallow git clone, but in these cases, the call to git describe code will report a ""fatal error"". (This is reported as a warning but is nevertheless disconcerting.)
The PR detects whether wabt is the main project or not, and if not, suppresses and warnings about this, on the assumption that the actual main project presumably knows the specific version it has included.
(It might also make sense to change the defaults of BUILD_TESTS and BUILD_TOOLS to off in this case, on the assumption that the main project just wants the library targets, but that's a topic that would require discussion I suspect.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1467,2020-06-17T18:24:58Z,2020-06-18T19:56:31Z,2020-06-18T19:56:31Z,MERGED,True,14,2,1,https://github.com/steven-johnson,Improve CMakeLists.txt for when used via add_subdirectory(),2,[],https://github.com/WebAssembly/wabt/pull/1467,https://github.com/steven-johnson,2,https://github.com/WebAssembly/wabt/pull/1467#issuecomment-645642757,"This is a minor change to avoid some misleading output when wabt is used as a subproject via add_subdirectory(); in particular, when used as a depdency via CMake's FetchContent command. It's not uncommon for clients in this case to make a shallow git clone, but in these cases, the call to git describe code will report a ""fatal error"". (This is reported as a warning but is nevertheless disconcerting.)
The PR detects whether wabt is the main project or not, and if not, suppresses and warnings about this, on the assumption that the actual main project presumably knows the specific version it has included.
(It might also make sense to change the defaults of BUILD_TESTS and BUILD_TOOLS to off in this case, on the assumption that the main project just wants the library targets, but that's a topic that would require discussion I suspect.)",As of Git 2.15: git rev-parse --is-shallow-repository -- there really is a git command for everything,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1467,2020-06-17T18:24:58Z,2020-06-18T19:56:31Z,2020-06-18T19:56:31Z,MERGED,True,14,2,1,https://github.com/steven-johnson,Improve CMakeLists.txt for when used via add_subdirectory(),2,[],https://github.com/WebAssembly/wabt/pull/1467,https://github.com/steven-johnson,3,https://github.com/WebAssembly/wabt/pull/1467#issuecomment-646266279,"This is a minor change to avoid some misleading output when wabt is used as a subproject via add_subdirectory(); in particular, when used as a depdency via CMake's FetchContent command. It's not uncommon for clients in this case to make a shallow git clone, but in these cases, the call to git describe code will report a ""fatal error"". (This is reported as a warning but is nevertheless disconcerting.)
The PR detects whether wabt is the main project or not, and if not, suppresses and warnings about this, on the assumption that the actual main project presumably knows the specific version it has included.
(It might also make sense to change the defaults of BUILD_TESTS and BUILD_TOOLS to off in this case, on the assumption that the main project just wants the library targets, but that's a topic that would require discussion I suspect.)","(FYI, I could check specifically for a shallow clone instead, but I suspect that the logic of ""am I a non-main project"" might be useful for other stuff, so I'm tempted to leave it this way.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1467,2020-06-17T18:24:58Z,2020-06-18T19:56:31Z,2020-06-18T19:56:31Z,MERGED,True,14,2,1,https://github.com/steven-johnson,Improve CMakeLists.txt for when used via add_subdirectory(),2,[],https://github.com/WebAssembly/wabt/pull/1467,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1467#issuecomment-646267828,"This is a minor change to avoid some misleading output when wabt is used as a subproject via add_subdirectory(); in particular, when used as a depdency via CMake's FetchContent command. It's not uncommon for clients in this case to make a shallow git clone, but in these cases, the call to git describe code will report a ""fatal error"". (This is reported as a warning but is nevertheless disconcerting.)
The PR detects whether wabt is the main project or not, and if not, suppresses and warnings about this, on the assumption that the actual main project presumably knows the specific version it has included.
(It might also make sense to change the defaults of BUILD_TESTS and BUILD_TOOLS to off in this case, on the assumption that the main project just wants the library targets, but that's a topic that would require discussion I suspect.)","I agree ""am I a non-main project"" is a useful thing either way.   lgtm either way.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1468,2020-06-18T19:43:43Z,2020-06-18T22:59:02Z,2020-06-18T22:59:03Z,MERGED,True,24,18,2,https://github.com/binji,Update libwabt.js; fix some runtime issues,2,[],https://github.com/WebAssembly/wabt/pull/1468,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1468,"libwabt.js is meant to be included in multiple environments (web,
node.js, etc.) so it shouldn't be using NODERAWFS. A recent change to
the build system include -s NODERAWFS for all link steps, but those
are only needed for the wabt executables (e.g. wasm2wast.js).","libwabt.js is meant to be included in multiple environments (web,
node.js, etc.) so it shouldn't be using NODERAWFS. A recent change to
the build system include -s NODERAWFS for all link steps, but those
are only needed for the wabt executables (e.g. wasm2wast.js).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1471,2020-06-19T18:20:19Z,2020-06-19T18:37:31Z,2020-06-19T18:37:31Z,MERGED,True,4,0,1,https://github.com/steven-johnson,Enable CMake policy CMP0077,1,[],https://github.com/WebAssembly/wabt/pull/1471,https://github.com/steven-johnson,1,https://github.com/WebAssembly/wabt/pull/1471,"TL;DR: this makes it simpler and safer for projects including WABT via FetchContent to configure options via the CMAKE_ARGS argument.
Importing projects may want to set (e.g.) BUILD_TESTS to ""no"". However, this doesn't work without creating an identical option() in the importing in the importing project. Enabling CMP0077 in supported versions of CMake allows importing projects to set default values for the variables without touching the cache.","TL;DR: this makes it simpler and safer for projects including WABT via FetchContent to configure options via the CMAKE_ARGS argument.
Importing projects may want to set (e.g.) BUILD_TESTS to ""no"". However, this doesn't work without creating an identical option() in the importing in the importing project. Enabling CMP0077 in supported versions of CMake allows importing projects to set default values for the variables without touching the cache.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1473,2020-06-21T17:21:31Z,2020-06-22T17:23:32Z,2020-06-22T17:23:33Z,MERGED,True,1,1,1,https://github.com/kripken,Fix warning on comparison of void* to integer. fixes #1472,1,[],https://github.com/WebAssembly/wabt/pull/1473,https://github.com/kripken,1,https://github.com/WebAssembly/wabt/pull/1473,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1473,2020-06-21T17:21:31Z,2020-06-22T17:23:32Z,2020-06-22T17:23:33Z,MERGED,True,1,1,1,https://github.com/kripken,Fix warning on comparison of void* to integer. fixes #1472,1,[],https://github.com/WebAssembly/wabt/pull/1473,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1473#issuecomment-647667572,,"Hm, looks like we need to add some more warnings when testing wasm2c.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1474,2020-06-23T22:28:54Z,2020-07-15T23:39:53Z,2020-07-15T23:39:54Z,MERGED,True,94,90,26,https://github.com/binji,Remove ref.is_null type parameter,3,[],https://github.com/WebAssembly/wabt/pull/1474,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1474,See WebAssembly/reference-types#99.,See WebAssembly/reference-types#99.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1479,2020-07-10T19:57:29Z,2020-07-13T05:26:07Z,2020-07-13T05:26:07Z,MERGED,True,9,0,1,https://github.com/steven-johnson,Tweak definition of ssize_t for MSVC compilation,1,[],https://github.com/WebAssembly/wabt/pull/1479,https://github.com/steven-johnson,1,https://github.com/WebAssembly/wabt/pull/1479,This is designed to exactly mimic the definition that LLVM uses under MSVC; this allows use of both WABT and LLVM headers in the same codebase without having to work around compilation errors.,This is designed to exactly mimic the definition that LLVM uses under MSVC; this allows use of both WABT and LLVM headers in the same codebase without having to work around compilation errors.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1480,2020-07-11T00:17:19Z,2020-07-13T20:54:26Z,2020-07-13T20:54:26Z,MERGED,True,32,32,1,https://github.com/steven-johnson,Fix some portability issues in interp-wasi.cc,2,[],https://github.com/WebAssembly/wabt/pull/1480,https://github.com/steven-johnson,1,https://github.com/WebAssembly/wabt/pull/1480,_Static_assert and _Alignof aren't defined everywhere. Also use PRIu64 format specifier where needed.,_Static_assert and _Alignof aren't defined everywhere. Also use PRIu64 format specifier where needed.,True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1483,2020-07-15T18:21:11Z,2020-07-15T18:53:49Z,2020-07-15T18:53:50Z,MERGED,True,4,0,1,https://github.com/binji,[wasm2c] Disable signal handling on 32-bit archs,1,[],https://github.com/WebAssembly/wabt/pull/1483,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1483,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1484,2020-07-15T19:07:12Z,2020-07-15T21:54:34Z,2020-07-15T21:54:35Z,MERGED,True,7,17,3,https://github.com/binji,Revert br_table in reference types proposal,2,[],https://github.com/WebAssembly/wabt/pull/1484,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1484,"The reference types proposal originally modified the br_table behavior
to only check arity, not the specific types. This was to remove a
subtyping check, but now that subtyping has been removed, we can revert
back to the original (MVP) br_table behavior.","The reference types proposal originally modified the br_table behavior
to only check arity, not the specific types. This was to remove a
subtyping check, but now that subtyping has been removed, we can revert
back to the original (MVP) br_table behavior.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1485,2020-07-16T00:01:03Z,2020-07-16T01:34:04Z,2020-07-16T01:34:04Z,CLOSED,False,1,0,1,https://github.com/ngzhian,Add LoadSplat case to GetExprArity,1,[],https://github.com/WebAssembly/wabt/pull/1485,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1485,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1485,2020-07-16T00:01:03Z,2020-07-16T01:34:04Z,2020-07-16T01:34:04Z,CLOSED,False,1,0,1,https://github.com/ngzhian,Add LoadSplat case to GetExprArity,1,[],https://github.com/WebAssembly/wabt/pull/1485,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1485#issuecomment-659076554,,"Not sure where tests should go, let me know if needed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1485,2020-07-16T00:01:03Z,2020-07-16T01:34:04Z,2020-07-16T01:34:04Z,CLOSED,False,1,0,1,https://github.com/ngzhian,Add LoadSplat case to GetExprArity,1,[],https://github.com/WebAssembly/wabt/pull/1485,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1485#issuecomment-659095346,,"Thanks! I actually was already working on fix for this and found another case, so I added some tests too: #1486",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1486,2020-07-16T01:08:19Z,2020-07-16T17:27:42Z,2020-07-16T17:27:43Z,MERGED,True,879,12,3,https://github.com/binji,Fix folding for *.load_splat and table.fill,1,[],https://github.com/WebAssembly/wabt/pull/1486,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1486,"Also remove default case from ir-util.cc so we get compile warnings in
the future.","Also remove default case from ir-util.cc so we get compile warnings in
the future.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1486,2020-07-16T01:08:19Z,2020-07-16T17:27:42Z,2020-07-16T17:27:43Z,MERGED,True,879,12,3,https://github.com/binji,Fix folding for *.load_splat and table.fill,1,[],https://github.com/WebAssembly/wabt/pull/1486,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1486#issuecomment-659103386,"Also remove default case from ir-util.cc so we get compile warnings in
the future.",Very nice 👍,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1487,2020-07-16T17:28:14Z,2020-07-16T18:39:18Z,2020-07-16T18:39:19Z,MERGED,True,1,1,1,https://github.com/binji,Use #warning instead of #warn,1,[],https://github.com/WebAssembly/wabt/pull/1487,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1487,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1488,2020-07-16T19:09:22Z,2020-07-21T20:39:05Z,2020-07-21T20:39:06Z,MERGED,True,17,8,1,https://github.com/binji,Completely disable signal handler on 32-bit,4,[],https://github.com/WebAssembly/wabt/pull/1488,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1488,"The previous change prevented WASM_RT_MEMCHECK_SIGNAL_HANDLER_POSIX
from being defined, but WASM_RT_MEMCHECK_SIGNAL_HANDLER was still
defined, which would prevent the memory bounds check.","The previous change prevented WASM_RT_MEMCHECK_SIGNAL_HANDLER_POSIX
from being defined, but WASM_RT_MEMCHECK_SIGNAL_HANDLER was still
defined, which would prevent the memory bounds check.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1488,2020-07-16T19:09:22Z,2020-07-21T20:39:05Z,2020-07-21T20:39:06Z,MERGED,True,17,8,1,https://github.com/binji,Completely disable signal handler on 32-bit,4,[],https://github.com/WebAssembly/wabt/pull/1488,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1488#issuecomment-661422745,"The previous change prevented WASM_RT_MEMCHECK_SIGNAL_HANDLER_POSIX
from being defined, but WASM_RT_MEMCHECK_SIGNAL_HANDLER was still
defined, which would prevent the memory bounds check.",@sbc100 PTAL,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1489,2020-07-16T23:04:22Z,2020-07-18T20:07:12Z,2020-07-18T20:07:13Z,MERGED,True,2,1,1,https://github.com/binji,Fix gcc warning in GetExprArity,2,[],https://github.com/WebAssembly/wabt/pull/1489,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1489,"All enumeration values are handled in the switch, but it's still
possible to produce an invalid value, which would not return.","All enumeration values are handled in the switch, but it's still
possible to produce an invalid value, which would not return.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1491,2020-07-18T04:37:45Z,2020-07-20T20:26:27Z,2020-07-20T20:27:18Z,MERGED,True,3,0,1,https://github.com/ngzhian,Add missing includes to type.h,2,[],https://github.com/WebAssembly/wabt/pull/1491,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1491,"cassert for assert
confing.h for WABT_UNREACHABLE

I think it was working because type.h was only included in common.h,
both cassert and config.h was included prior to including type.h.","cassert for assert
confing.h for WABT_UNREACHABLE

I think it was working because type.h was only included in common.h,
both cassert and config.h was included prior to including type.h.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1491,2020-07-18T04:37:45Z,2020-07-20T20:26:27Z,2020-07-20T20:27:18Z,MERGED,True,3,0,1,https://github.com/ngzhian,Add missing includes to type.h,2,[],https://github.com/WebAssembly/wabt/pull/1491,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1491#issuecomment-661314712,"cassert for assert
confing.h for WABT_UNREACHABLE

I think it was working because type.h was only included in common.h,
both cassert and config.h was included prior to including type.h.","Any preference for the merge strategy? Squash and merge, or rebase and merge?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1491,2020-07-18T04:37:45Z,2020-07-20T20:26:27Z,2020-07-20T20:27:18Z,MERGED,True,3,0,1,https://github.com/ngzhian,Add missing includes to type.h,2,[],https://github.com/WebAssembly/wabt/pull/1491,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1491#issuecomment-661315473,"cassert for assert
confing.h for WABT_UNREACHABLE

I think it was working because type.h was only included in common.h,
both cassert and config.h was included prior to including type.h.","Squash and merge, usually. I forgot about it because it needed a rebase, and rebuild in the CI. :-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1494,2020-07-21T23:28:55Z,2020-07-22T05:09:12Z,2020-07-22T05:09:13Z,MERGED,True,2,4,2,https://github.com/binji,Fix resolving local names w/ empty func signatures,1,[],https://github.com/WebAssembly/wabt/pull/1494,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1494,"This was originally landed in 6bff9f0, but was incorrect (the test
didn't even do the right thing!)
The problem was that the local index was correctly being updated, but it
happened after the names had already been resolved. To fix it,
ResolveFuncTypes and ResolveNamesModule needed be called in that
order. There was an erroneous assertion that fired as a result (""This
should only be run after resolving names""), but that's incorrect -- the
code works properly before resolving names too, since
Module::GetFuncType can properly look up function types by name.
Thanks to @alexcrichton for pointing this out.","This was originally landed in 6bff9f0, but was incorrect (the test
didn't even do the right thing!)
The problem was that the local index was correctly being updated, but it
happened after the names had already been resolved. To fix it,
ResolveFuncTypes and ResolveNamesModule needed be called in that
order. There was an erroneous assertion that fired as a result (""This
should only be run after resolving names""), but that's incorrect -- the
code works properly before resolving names too, since
Module::GetFuncType can properly look up function types by name.
Thanks to @alexcrichton for pointing this out.",True,{'THUMBS_UP': ['https://github.com/alexcrichton']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1494,2020-07-21T23:28:55Z,2020-07-22T05:09:12Z,2020-07-22T05:09:13Z,MERGED,True,2,4,2,https://github.com/binji,Fix resolving local names w/ empty func signatures,1,[],https://github.com/WebAssembly/wabt/pull/1494,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1494#issuecomment-662157737,"This was originally landed in 6bff9f0, but was incorrect (the test
didn't even do the right thing!)
The problem was that the local index was correctly being updated, but it
happened after the names had already been resolved. To fix it,
ResolveFuncTypes and ResolveNamesModule needed be called in that
order. There was an erroneous assertion that fired as a result (""This
should only be run after resolving names""), but that's incorrect -- the
code works properly before resolving names too, since
Module::GetFuncType can properly look up function types by name.
Thanks to @alexcrichton for pointing this out.",Fixes #1492.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1495,2020-07-21T23:29:45Z,2020-07-24T20:06:46Z,2020-07-24T20:06:47Z,MERGED,True,3,2,2,https://github.com/binji,Print newline after ref.is_null instruction,3,[],https://github.com/WebAssembly/wabt/pull/1495,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1495,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1495,2020-07-21T23:29:45Z,2020-07-24T20:06:46Z,2020-07-24T20:06:47Z,MERGED,True,3,2,2,https://github.com/binji,Print newline after ref.is_null instruction,3,[],https://github.com/WebAssembly/wabt/pull/1495,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1495#issuecomment-662157971,,Fixes #1493.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1497,2020-07-23T19:18:14Z,2020-07-23T20:38:28Z,2020-07-23T20:38:28Z,MERGED,True,24,16,4,https://github.com/aardappel,[decompiler] fixed blocks with params.,1,[],https://github.com/WebAssembly/wabt/pull/1497,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1497,"It would previously assume the blocktype is ""simple"" (at most a single result value), but now also supports function signatures.
Also fixed it ignoring the validator result.","It would previously assume the blocktype is ""simple"" (at most a single result value), but now also supports function signatures.
Also fixed it ignoring the validator result.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1497,2020-07-23T19:18:14Z,2020-07-23T20:38:28Z,2020-07-23T20:38:28Z,MERGED,True,24,16,4,https://github.com/aardappel,[decompiler] fixed blocks with params.,1,[],https://github.com/WebAssembly/wabt/pull/1497,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1497#issuecomment-663220502,"It would previously assume the blocktype is ""simple"" (at most a single result value), but now also supports function signatures.
Also fixed it ignoring the validator result.","it should automatically generate variables for any ""multi-value"" situation, but I am going to leave trying that out that to some other day :)",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1498,2020-07-24T20:38:13Z,2020-07-25T19:52:51Z,2020-07-25T19:52:52Z,MERGED,True,15,1,3,https://github.com/binji,Fix assert when function has struct type,1,[],https://github.com/WebAssembly/wabt/pull/1498,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1498,"Function types and struct types share an index space, but a function can
only be defined using a function type.
Since Module::GetFuncType already returns nullptr for an OOB index,
it makes sense to return nullptr for an invalid type too.","Function types and struct types share an index space, but a function can
only be defined using a function type.
Since Module::GetFuncType already returns nullptr for an OOB index,
it makes sense to return nullptr for an invalid type too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1500,2020-07-28T01:29:17Z,2020-08-07T19:55:48Z,2020-09-18T16:42:03Z,MERGED,True,1489,287,57,https://github.com/aardappel,"Added initial ""memory64"" proposal support",1,[],https://github.com/WebAssembly/wabt/pull/1500,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1500,"This is a preview without tests, do not merge","This is a preview without tests, do not merge",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1500,2020-07-28T01:29:17Z,2020-08-07T19:55:48Z,2020-09-18T16:42:03Z,MERGED,True,1489,287,57,https://github.com/aardappel,"Added initial ""memory64"" proposal support",1,[],https://github.com/WebAssembly/wabt/pull/1500,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1500#issuecomment-665221272,"This is a preview without tests, do not merge","Looks pretty good! Everything looks about how I would imagined it would be. I'm not sure about the memory64 keyword, but it's fine for now (maybe use the index type instead, i64 (or optional i32?)).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1500,2020-07-28T01:29:17Z,2020-08-07T19:55:48Z,2020-09-18T16:42:03Z,MERGED,True,1489,287,57,https://github.com/aardappel,"Added initial ""memory64"" proposal support",1,[],https://github.com/WebAssembly/wabt/pull/1500,https://github.com/aardappel,3,https://github.com/WebAssembly/wabt/pull/1500#issuecomment-666586349,"This is a preview without tests, do not merge",I'd be happy to change memory64 to whatever.. just i64 seems a little too generic though? i64 has its place in wasm32 as well. I guess the memory part is a bit redundant. addr64 ? Anyone opinions?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1500,2020-07-28T01:29:17Z,2020-08-07T19:55:48Z,2020-09-18T16:42:03Z,MERGED,True,1489,287,57,https://github.com/aardappel,"Added initial ""memory64"" proposal support",1,[],https://github.com/WebAssembly/wabt/pull/1500,https://github.com/aardappel,4,https://github.com/WebAssembly/wabt/pull/1500#issuecomment-666857241,"This is a preview without tests, do not merge",i64 it is for now :),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1501,2020-07-29T11:59:49Z,2020-07-31T17:29:31Z,2020-07-31T22:25:06Z,MERGED,True,12,2,2,https://github.com/chfast,Fix reading of section code,1,[],https://github.com/WebAssembly/wabt/pull/1501,https://github.com/chfast,1,https://github.com/WebAssembly/wabt/pull/1501,"The section code is just a single byte, not a LEB128-encoded value.
With this fix the section code is now read correctly with ReadU8().
The issue has been found by fuzzing wabt wasm validation against Fizzy.
The wasm spectests reproducing the issue have been submitted to WebAssembly/spec#1230.","The section code is just a single byte, not a LEB128-encoded value.
With this fix the section code is now read correctly with ReadU8().
The issue has been found by fuzzing wabt wasm validation against Fizzy.
The wasm spectests reproducing the issue have been submitted to WebAssembly/spec#1230.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1501,2020-07-29T11:59:49Z,2020-07-31T17:29:31Z,2020-07-31T22:25:06Z,MERGED,True,12,2,2,https://github.com/chfast,Fix reading of section code,1,[],https://github.com/WebAssembly/wabt/pull/1501,https://github.com/chfast,2,https://github.com/WebAssembly/wabt/pull/1501#issuecomment-665675743,"The section code is just a single byte, not a LEB128-encoded value.
With this fix the section code is now read correctly with ReadU8().
The issue has been found by fuzzing wabt wasm validation against Fizzy.
The wasm spectests reproducing the issue have been submitted to WebAssembly/spec#1230.",The binary writer may want to get similar change for consistency.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1501,2020-07-29T11:59:49Z,2020-07-31T17:29:31Z,2020-07-31T22:25:06Z,MERGED,True,12,2,2,https://github.com/chfast,Fix reading of section code,1,[],https://github.com/WebAssembly/wabt/pull/1501,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1501#issuecomment-665828952,"The section code is just a single byte, not a LEB128-encoded value.
With this fix the section code is now read correctly with ReadU8().
The issue has been found by fuzzing wabt wasm validation against Fizzy.
The wasm spectests reproducing the issue have been submitted to WebAssembly/spec#1230.","It looks like the binary writer already writes a u8. Could you add a test for this too? Something like this should be OK (in test/binary/bad-section-id-leb128.txt):
;;; TOOL: run-gen-wasm-bad
magic
version
section_id[0x81 0]  ;; Section ID cannot be encoded as LEB128
section_size[1]
type_count[0]

You'll need to re-run the tests with -r to regenerate the expected output for this test.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1501,2020-07-29T11:59:49Z,2020-07-31T17:29:31Z,2020-07-31T22:25:06Z,MERGED,True,12,2,2,https://github.com/chfast,Fix reading of section code,1,[],https://github.com/WebAssembly/wabt/pull/1501,https://github.com/chfast,4,https://github.com/WebAssembly/wabt/pull/1501#issuecomment-665848979,"The section code is just a single byte, not a LEB128-encoded value.
With this fix the section code is now read correctly with ReadU8().
The issue has been found by fuzzing wabt wasm validation against Fizzy.
The wasm spectests reproducing the issue have been submitted to WebAssembly/spec#1230.",I will do. Thanks for the hint.,True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1501,2020-07-29T11:59:49Z,2020-07-31T17:29:31Z,2020-07-31T22:25:06Z,MERGED,True,12,2,2,https://github.com/chfast,Fix reading of section code,1,[],https://github.com/WebAssembly/wabt/pull/1501,https://github.com/chfast,5,https://github.com/WebAssembly/wabt/pull/1501#issuecomment-666212164,"The section code is just a single byte, not a LEB128-encoded value.
With this fix the section code is now read correctly with ReadU8().
The issue has been found by fuzzing wabt wasm validation against Fizzy.
The wasm spectests reproducing the issue have been submitted to WebAssembly/spec#1230.",Done.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1501,2020-07-29T11:59:49Z,2020-07-31T17:29:31Z,2020-07-31T22:25:06Z,MERGED,True,12,2,2,https://github.com/chfast,Fix reading of section code,1,[],https://github.com/WebAssembly/wabt/pull/1501,https://github.com/chfast,6,https://github.com/WebAssembly/wabt/pull/1501#issuecomment-666967341,"The section code is just a single byte, not a LEB128-encoded value.
With this fix the section code is now read correctly with ReadU8().
The issue has been found by fuzzing wabt wasm validation against Fizzy.
The wasm spectests reproducing the issue have been submitted to WebAssembly/spec#1230.",What's up with this one @binji?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1501,2020-07-29T11:59:49Z,2020-07-31T17:29:31Z,2020-07-31T22:25:06Z,MERGED,True,12,2,2,https://github.com/chfast,Fix reading of section code,1,[],https://github.com/WebAssembly/wabt/pull/1501,https://github.com/binji,7,https://github.com/WebAssembly/wabt/pull/1501#issuecomment-667243455,"The section code is just a single byte, not a LEB128-encoded value.
With this fix the section code is now read correctly with ReadU8().
The issue has been found by fuzzing wabt wasm validation against Fizzy.
The wasm spectests reproducing the issue have been submitted to WebAssembly/spec#1230.","@chfast was waiting for the CI to run, thanks for updating!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1502,2020-07-29T21:16:17Z,2020-07-30T00:52:39Z,2020-07-30T00:52:40Z,MERGED,True,9336,171,17,https://github.com/binji,Update testsuite; fix conversion errors,2,[],https://github.com/WebAssembly/wabt/pull/1502,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1502,"The interpreter and wasm2c were incorrectly handling some float-to-int
conversions. For clarity, the wasm2c implementations of these
conversions now matches the implementation in interp-math.h more closely
(e.g. the numeric ranges are written as x >= min && x <= max in both
cases).
Quite a few wasm2c tests were previously being skipped, since wasm2c
doesn't currently support multi-value; it's better instead to duplicate
the tests here and disable the parts that are not supported so we don't
lose test coverage.","The interpreter and wasm2c were incorrectly handling some float-to-int
conversions. For clarity, the wasm2c implementations of these
conversions now matches the implementation in interp-math.h more closely
(e.g. the numeric ranges are written as x >= min && x <= max in both
cases).
Quite a few wasm2c tests were previously being skipped, since wasm2c
doesn't currently support multi-value; it's better instead to duplicate
the tests here and disable the parts that are not supported so we don't
lose test coverage.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1502,2020-07-29T21:16:17Z,2020-07-30T00:52:39Z,2020-07-30T00:52:40Z,MERGED,True,9336,171,17,https://github.com/binji,Update testsuite; fix conversion errors,2,[],https://github.com/WebAssembly/wabt/pull/1502,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1502#issuecomment-666006160,"The interpreter and wasm2c were incorrectly handling some float-to-int
conversions. For clarity, the wasm2c implementations of these
conversions now matches the implementation in interp-math.h more closely
(e.g. the numeric ranges are written as x >= min && x <= max in both
cases).
Quite a few wasm2c tests were previously being skipped, since wasm2c
doesn't currently support multi-value; it's better instead to duplicate
the tests here and disable the parts that are not supported so we don't
lose test coverage.","Thanks for double-checking the bounds! I had to think about them a bit to convince myself these are the correct values, but I think they are. For the 8 cases, (s32/u32/s64/u64 <- f32/f64), if we consider which values should be bounds if we had infinite floating-point precision, we would have the following (where _MAX values are the maximum value that is representable type):



to
from
min (excl.)
max (excl.)




s32
f32 or f64
INT32_MIN - 1
INT32_MAX + 1


u32
f32 or f64
-1
UINT32_MAX + 1


s64
f32 or f64
INT64_MIN - 1
INT64_MAX + 1


u64
f32 or f64
-1
UINT64_MAX + 1



Now we have to consider which of these values are representable as f32 or f64. The values that had to be truncated are in bold:



value
int
f32
f64




INT32_MIN - 1
-2147483649
-2147483648.0
-2147483649.0


INT32_MAX + 1
2147483648
2147483648
2147483648


UINT32_MAX + 1
4294967296
4294967296
4294967296


INT64_MIN - 1
-9223372036854775809
-9223372036854775808.0
-9223372036854775808.0


INT64_MAX + 1
9223372036854775808
9223372036854775808
9223372036854775808


UINT64_MAX + 1
18446744073709551616
18446744073709551616.0
18446744073709551616.0



And finally, we can determine the bounds, where the ranges that had to be modified are in bold:



instr
to
from
valid bounds




i32.trunc_f32_s
s32
f32
-2147483648.f <= x < 2147483648.f


i32.trunc_f64_s
s32
f64
-2147483649.0 < x < 2147483648.0


i32.trunc_f32_u
u32
f32
-1.f < x < 4294967296.f


i32.trunc_f64_u
u32
f64
-1.0 < x < 4294967296.0


i64.trunc_f32_s
s64
f32
-9223372036854775808.f <= x < 9223372036854775808.f


i64.trunc_f64_s
s64
f64
-9223372036854775808.f <= x < 9223372036854775808.f


i64.trunc_f32_u
u64
f32
-1.f < x < 18446744073709551616.f


i64.trunc_f64_u
u64
f64
-1.0 < x < 18446744073709551616.0",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1503,2020-07-30T01:25:24Z,2020-07-30T20:18:21Z,2020-07-30T20:18:21Z,MERGED,True,24,1,2,https://github.com/takikawa,Print newline after rethrow instruction,3,[],https://github.com/WebAssembly/wabt/pull/1503,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1503,"This PR fixes a minor printing consistency issue for the rethrow instruction and adds a new test for it.
e.g., in this diff, wasm2wat currently prints the rethrow end version, which isn't consistent with other instructions I think.
   (func (;1;) (type 0)
     try  ;; label = @1
     catch
-      rethrow end)
+      rethrow
+    end)","This PR fixes a minor printing consistency issue for the rethrow instruction and adds a new test for it.
e.g., in this diff, wasm2wat currently prints the rethrow end version, which isn't consistent with other instructions I think.
   (func (;1;) (type 0)
     try  ;; label = @1
     catch
-      rethrow end)
+      rethrow
+    end)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1503,2020-07-30T01:25:24Z,2020-07-30T20:18:21Z,2020-07-30T20:18:21Z,MERGED,True,24,1,2,https://github.com/takikawa,Print newline after rethrow instruction,3,[],https://github.com/WebAssembly/wabt/pull/1503,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1503#issuecomment-666640459,"This PR fixes a minor printing consistency issue for the rethrow instruction and adds a new test for it.
e.g., in this diff, wasm2wat currently prints the rethrow end version, which isn't consistent with other instructions I think.
   (func (;1;) (type 0)
     try  ;; label = @1
     catch
-      rethrow end)
+      rethrow
+    end)",Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1504,2020-07-30T09:57:39Z,2020-07-30T19:49:00Z,2020-07-31T07:04:31Z,MERGED,True,12,0,2,https://github.com/chfast,Detect malformed import kind in binary reader,1,[],https://github.com/WebAssembly/wabt/pull/1504,https://github.com/chfast,1,https://github.com/WebAssembly/wabt/pull/1504,"Detected by fuzzing against Fizzy.
Spectests submission: WebAssembly/spec#1233","Detected by fuzzing against Fizzy.
Spectests submission: WebAssembly/spec#1233",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1505,2020-07-30T11:15:48Z,2020-07-31T17:53:47Z,2020-07-31T22:24:56Z,MERGED,True,59,6,6,https://github.com/chfast,Detect malformed memory/table limits flag ,3,[],https://github.com/WebAssembly/wabt/pull/1505,https://github.com/chfast,1,https://github.com/WebAssembly/wabt/pull/1505,"First of all the limits flag is just single byte, not a LEB128 encoded value.
Moreover, this detects any unsupported ""flags"". Apparently, memory supports something like ""shared flag"" what is not part of wasm 1.0 spec, so this malformed binary will not be detected.","First of all the limits flag is just single byte, not a LEB128 encoded value.
Moreover, this detects any unsupported ""flags"". Apparently, memory supports something like ""shared flag"" what is not part of wasm 1.0 spec, so this malformed binary will not be detected.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1506,2020-07-31T07:26:41Z,2020-07-31T17:59:47Z,2020-07-31T22:25:42Z,MERGED,True,3,5,1,https://github.com/chfast,Reformat code in binary-reader.cc,1,[],https://github.com/WebAssembly/wabt/pull/1506,https://github.com/chfast,1,https://github.com/WebAssembly/wabt/pull/1506,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1507,2020-07-31T20:26:29Z,2020-08-03T18:31:48Z,2020-08-03T18:31:49Z,MERGED,True,91,16,4,https://github.com/binji,Add tools to use LLVM's libFuzzer,2,[],https://github.com/WebAssembly/wabt/pull/1507,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1507,"This is useful for reproducing bugs found by oss-fuzz (see
https://bugs.chromium.org/p/oss-fuzz/issues/list?q=wabt)","This is useful for reproducing bugs found by oss-fuzz (see
https://bugs.chromium.org/p/oss-fuzz/issues/list?q=wabt)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1507,2020-07-31T20:26:29Z,2020-08-03T18:31:48Z,2020-08-03T18:31:49Z,MERGED,True,91,16,4,https://github.com/binji,Add tools to use LLVM's libFuzzer,2,[],https://github.com/WebAssembly/wabt/pull/1507,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1507#issuecomment-667345515,"This is useful for reproducing bugs found by oss-fuzz (see
https://bugs.chromium.org/p/oss-fuzz/issues/list?q=wabt)",Are there docs already ?  Maybe nice to mention in the readme?,True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1508,2020-07-31T20:26:45Z,2020-07-31T22:11:35Z,2020-11-21T00:25:29Z,MERGED,True,128,0,5,https://github.com/binji,Fix linking section symbol name bugs,1,[],https://github.com/WebAssembly/wabt/pull/1508,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1508,Found by oss-fuzz.,Found by oss-fuzz.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1511,2020-08-07T22:46:11Z,2020-08-10T19:33:15Z,2020-08-10T19:33:15Z,MERGED,True,11,4,1,https://github.com/ohorn,wast2json does not check all file errors,1,[],https://github.com/WebAssembly/wabt/pull/1511,https://github.com/ohorn,1,https://github.com/WebAssembly/wabt/pull/1511,"wast2json ignores some file errors and returns an exit code of 0 even if an error has occurred.
For example:
$ wast2json binary.wast -o /nonexistent/binary.json` 
stream.cc:139: unable to open /nonexistent/binary.json for writing
stream.cc:139: unable to open /nonexistent/binary.0.wasm for writing
...

reports many errors, but returns with an exit code of 0.
The reason is that the result values ​​of the WriteToFile calls for json_stream and module_streams are ignored.","wast2json ignores some file errors and returns an exit code of 0 even if an error has occurred.
For example:
$ wast2json binary.wast -o /nonexistent/binary.json` 
stream.cc:139: unable to open /nonexistent/binary.json for writing
stream.cc:139: unable to open /nonexistent/binary.0.wasm for writing
...

reports many errors, but returns with an exit code of 0.
The reason is that the result values ​​of the WriteToFile calls for json_stream and module_streams are ignored.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1512,2020-08-08T03:48:24Z,2020-08-10T20:05:20Z,2020-08-10T20:05:20Z,MERGED,True,107,75,7,https://github.com/aardappel,"Made the interpreter ""type-safe"" in debug mode",1,[],https://github.com/WebAssembly/wabt/pull/1512,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1512,"Adds a type field to Value to verify the right union member is being read.
A Wasm module that has been validated shouldn't need this, but any code reading the wrong value would trigger UB, but still often work (like a uint32_t read from a uint64_t on little endian machine), and mask bugs.
Turning this on found bugs in the PR I just landed (as I suspected) but also in older code.","Adds a type field to Value to verify the right union member is being read.
A Wasm module that has been validated shouldn't need this, but any code reading the wrong value would trigger UB, but still often work (like a uint32_t read from a uint64_t on little endian machine), and mask bugs.
Turning this on found bugs in the PR I just landed (as I suspected) but also in older code.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1515,2020-08-10T20:28:15Z,2020-08-10T21:41:05Z,2020-08-10T21:41:06Z,MERGED,True,16,15,1,https://github.com/binji,Update README.md to include default-on proposals,2,[],https://github.com/WebAssembly/wabt/pull/1515,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1515,"Some proposals are enabled by default now, so the README should reflect that. Also, the flag was flipped to disable (rather than enable), so change that here too.
See issue #1513.","Some proposals are enabled by default now, so the README should reflect that. Also, the flag was flipped to disable (rather than enable), so change that here too.
See issue #1513.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1515,2020-08-10T20:28:15Z,2020-08-10T21:41:05Z,2020-08-10T21:41:06Z,MERGED,True,16,15,1,https://github.com/binji,Update README.md to include default-on proposals,2,[],https://github.com/WebAssembly/wabt/pull/1515,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1515#issuecomment-671598280,"Some proposals are enabled by default now, so the README should reflect that. Also, the flag was flipped to disable (rather than enable), so change that here too.
See issue #1513.",We've been talking about the tooling-conventions document that we can point to for rational as to when to enable a feature by default.    Once that exists maybe we can link to it from here?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1515,2020-08-10T20:28:15Z,2020-08-10T21:41:05Z,2020-08-10T21:41:06Z,MERGED,True,16,15,1,https://github.com/binji,Update README.md to include default-on proposals,2,[],https://github.com/WebAssembly/wabt/pull/1515,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1515#issuecomment-671604007,"Some proposals are enabled by default now, so the README should reflect that. Also, the flag was flipped to disable (rather than enable), so change that here too.
See issue #1513.","We've been talking about the tooling-conventions document that we can point to for rational as to when to enable a feature by default. Once that exists maybe we can link to it from here?

Sounds good, let me know when that's ready.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1516,2020-08-10T21:11:55Z,2020-08-11T01:29:50Z,2020-08-11T01:29:50Z,MERGED,True,4,0,1,https://github.com/aardappel,Enable multi-core build on Windows,1,[],https://github.com/WebAssembly/wabt/pull/1516,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1516,This speeds up builds of WABT significantly,This speeds up builds of WABT significantly,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1517,2020-08-12T11:47:38Z,2020-08-19T22:29:51Z,2020-08-19T22:29:51Z,CLOSED,False,437,41,5,https://github.com/gwenya,Fix relocations emitted by wat2wasm -r,7,[],https://github.com/WebAssembly/wabt/pull/1517,https://github.com/gwenya,1,https://github.com/WebAssembly/wabt/pull/1517,"Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.","Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1517,2020-08-12T11:47:38Z,2020-08-19T22:29:51Z,2020-08-19T22:29:51Z,CLOSED,False,437,41,5,https://github.com/gwenya,Fix relocations emitted by wat2wasm -r,7,[],https://github.com/WebAssembly/wabt/pull/1517,https://github.com/gwenya,2,https://github.com/WebAssembly/wabt/pull/1517#issuecomment-673132689,"Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.","The failing regression test was meant to ensure that type relocs cause an error message instead of crashing. Since that is no longer relevant, should I remove the test or update it to conform with the new behaviour (i.e. make it expect no output)?
It did make me realize though that I didn't consider type relocs from call_indirect at all. I think they work fine, but I should probably integrate them in my tests as well.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1517,2020-08-12T11:47:38Z,2020-08-19T22:29:51Z,2020-08-19T22:29:51Z,CLOSED,False,437,41,5,https://github.com/gwenya,Fix relocations emitted by wat2wasm -r,7,[],https://github.com/WebAssembly/wabt/pull/1517,https://github.com/gwenya,3,https://github.com/WebAssembly/wabt/pull/1517#issuecomment-673313767,"Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.","@binji Replying here instead of directly to the comments since they are both related.
The relocations are only written in the relocation section, in the code section whenever something that needs to be relocated is encountered, a 5-byte placeholder is written and the offset of that placeholder and the index of the symbol/type that belongs there is added to the relocation list.
In the relocation custom section those relocations from the list are then written.
The problem that arises with long function bodies is that the size of a function is written at the beginning of it, when it is not yet known. So instead a placeholder is written, which is only one byte. At the end of the function, the size is known and the previously written size is updated. In a long function that size will need more than one byte to encode, which moves the entire function body by the difference between the length of the new size encoding and the old one (which is just 1 byte long). Because the function body moves, all the relocation offsets within that function need to be updated. This did not previously happen, which caused the relocation offsets to be wrong in certain circumstances.
The same thing happens with the function section: its size is written at the beginning as a one-byte placeholder and replaced with the actual size at the end of the section. This moves the entire section if it is big enough that the encoding of its size needs more than one byte.
However, the relocation offsets are counted from the beginning of the payload, not the beginning of the section, so changing the length of the size encoding does not affect them. Previously they were updated at the end of the function section the same way they are now at the end of a function, which caused the offsets to be wrong.
The bug was not apparent in isolated tests of a single function, since in that case the function size and section size are likely to need the same number of bytes to encode, so updating the offsets at the end of the section made up for not updating them at the end of the function.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1517,2020-08-12T11:47:38Z,2020-08-19T22:29:51Z,2020-08-19T22:29:51Z,CLOSED,False,437,41,5,https://github.com/gwenya,Fix relocations emitted by wat2wasm -r,7,[],https://github.com/WebAssembly/wabt/pull/1517,https://github.com/gwenya,4,https://github.com/WebAssembly/wabt/pull/1517#issuecomment-673666893,"Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.","Any idea what made the windows build fail? It says the test failed after running for 38 minutes, but there are no logs at all.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1517,2020-08-12T11:47:38Z,2020-08-19T22:29:51Z,2020-08-19T22:29:51Z,CLOSED,False,437,41,5,https://github.com/gwenya,Fix relocations emitted by wat2wasm -r,7,[],https://github.com/WebAssembly/wabt/pull/1517,https://github.com/binji,5,https://github.com/WebAssembly/wabt/pull/1517#issuecomment-674218377,"Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.","@Sammax Maybe just a CI flake? I'm rerunning the jobs now. And thanks for explaining, this makes more sense to me now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1517,2020-08-12T11:47:38Z,2020-08-19T22:29:51Z,2020-08-19T22:29:51Z,CLOSED,False,437,41,5,https://github.com/gwenya,Fix relocations emitted by wat2wasm -r,7,[],https://github.com/WebAssembly/wabt/pull/1517,https://github.com/gwenya,6,https://github.com/WebAssembly/wabt/pull/1517#issuecomment-676459475,"Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.","@sbc100 Yeah I can do that. Should I split out the line that adds the block type relocs together with the parts that make type relocs work, or put the latter in another separate PR since it affects indirect calls in addition to block types?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1517,2020-08-12T11:47:38Z,2020-08-19T22:29:51Z,2020-08-19T22:29:51Z,CLOSED,False,437,41,5,https://github.com/gwenya,Fix relocations emitted by wat2wasm -r,7,[],https://github.com/WebAssembly/wabt/pull/1517,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1517#issuecomment-676479663,"Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.",Good point.  How about we land the RelocType::TypeIndexLEB fix on its own first?  Then we can add block relocs as a followup.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1517,2020-08-12T11:47:38Z,2020-08-19T22:29:51Z,2020-08-19T22:29:51Z,CLOSED,False,437,41,5,https://github.com/gwenya,Fix relocations emitted by wat2wasm -r,7,[],https://github.com/WebAssembly/wabt/pull/1517,https://github.com/gwenya,8,https://github.com/WebAssembly/wabt/pull/1517#issuecomment-676484133,"Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.","Yeah that sounds good, I'll split it up later today.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1517,2020-08-12T11:47:38Z,2020-08-19T22:29:51Z,2020-08-19T22:29:51Z,CLOSED,False,437,41,5,https://github.com/gwenya,Fix relocations emitted by wat2wasm -r,7,[],https://github.com/WebAssembly/wabt/pull/1517,https://github.com/gwenya,9,https://github.com/WebAssembly/wabt/pull/1517#issuecomment-676777886,"Adds relocations for block types and fixes the relocation offsets.
I'll add tests for it once I figure out how that works.",I'm closing this in favour of the three new PRs (see above).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1521,2020-08-18T19:25:39Z,2020-08-18T19:56:09Z,2020-08-18T19:56:10Z,MERGED,True,3,3,2,https://github.com/sbc100,Fix warnings generated in my system clang (9.0.1-12),2,[],https://github.com/WebAssembly/wabt/pull/1521,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1521,"I guess maybe we don't do CI with -Werror enabled?  We probably
should.","I guess maybe we don't do CI with -Werror enabled?  We probably
should.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1522,2020-08-18T19:31:06Z,2020-08-19T00:44:53Z,2020-08-19T00:44:54Z,MERGED,True,35,32,7,https://github.com/sbc100,Enable -Werror during CI,8,[],https://github.com/WebAssembly/wabt/pull/1522,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1522,Fixes: #1249,Fixes: #1249,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1522,2020-08-18T19:31:06Z,2020-08-19T00:44:53Z,2020-08-19T00:44:54Z,MERGED,True,35,32,7,https://github.com/sbc100,Enable -Werror during CI,8,[],https://github.com/WebAssembly/wabt/pull/1522,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1522#issuecomment-675748582,Fixes: #1249,Now contains a couple of actual fixed too.   FYI.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1522,2020-08-18T19:31:06Z,2020-08-19T00:44:53Z,2020-08-19T00:44:54Z,MERGED,True,35,32,7,https://github.com/sbc100,Enable -Werror during CI,8,[],https://github.com/WebAssembly/wabt/pull/1522,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1522#issuecomment-675784705,Fixes: #1249,Can I get another LGTM before I land this since I need to do fair bit more hacking ..,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1523,2020-08-18T19:33:13Z,2020-08-18T19:56:45Z,2020-08-18T19:56:45Z,CLOSED,False,1,1,1,https://github.com/aardappel,[decompiler] Fix integer comparison sign warning,1,[],https://github.com/WebAssembly/wabt/pull/1523,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1523,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1523,2020-08-18T19:33:13Z,2020-08-18T19:56:45Z,2020-08-18T19:56:45Z,CLOSED,False,1,1,1,https://github.com/aardappel,[decompiler] Fix integer comparison sign warning,1,[],https://github.com/WebAssembly/wabt/pull/1523,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1523#issuecomment-675681995,,Looks like this was fixed in #1521 (which has other fixes too).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1524,2020-08-19T11:44:33Z,2020-08-19T18:28:44Z,2020-08-19T18:28:45Z,MERGED,True,46,26,8,https://github.com/sbc100,Fix integer overflow in objdump name tracking,2,[],https://github.com/WebAssembly/wabt/pull/1524,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1524,Fixes: #1520,Fixes: #1520,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1525,2020-08-19T22:25:44Z,2020-08-20T13:40:15Z,2020-08-22T16:30:06Z,MERGED,True,38,32,3,https://github.com/gwenya,wat2wasm: type relocations,4,[],https://github.com/WebAssembly/wabt/pull/1525,https://github.com/gwenya,1,https://github.com/WebAssembly/wabt/pull/1525,split off from #1517,split off from #1517,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1526,2020-08-19T22:27:20Z,2020-08-22T16:24:54Z,2020-08-22T16:29:43Z,MERGED,True,51,1,2,https://github.com/gwenya,wat2wasm: relocations for block types,1,[],https://github.com/WebAssembly/wabt/pull/1526,https://github.com/gwenya,1,https://github.com/WebAssembly/wabt/pull/1526,"Split off from #1517
depends on #1525","Split off from #1517
depends on #1525",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1526,2020-08-19T22:27:20Z,2020-08-22T16:24:54Z,2020-08-22T16:29:43Z,MERGED,True,51,1,2,https://github.com/gwenya,wat2wasm: relocations for block types,1,[],https://github.com/WebAssembly/wabt/pull/1526,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1526#issuecomment-678496282,"Split off from #1517
depends on #1525",I think this needs re-basing.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1527,2020-08-19T22:27:37Z,2020-09-16T22:23:25Z,2020-09-16T22:23:25Z,MERGED,True,269,8,3,https://github.com/gwenya,wat2wasm: fix relocation offsets,4,[],https://github.com/WebAssembly/wabt/pull/1527,https://github.com/gwenya,1,https://github.com/WebAssembly/wabt/pull/1527,split off from #1517,split off from #1517,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1527,2020-08-19T22:27:37Z,2020-09-16T22:23:25Z,2020-09-16T22:23:25Z,MERGED,True,269,8,3,https://github.com/gwenya,wat2wasm: fix relocation offsets,4,[],https://github.com/WebAssembly/wabt/pull/1527,https://github.com/gwenya,2,https://github.com/WebAssembly/wabt/pull/1527#issuecomment-677443145,split off from #1517,"I just realized I wrote ""function section"" in the commit message, but I meant ""code section"".",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1527,2020-08-19T22:27:37Z,2020-09-16T22:23:25Z,2020-09-16T22:23:25Z,MERGED,True,269,8,3,https://github.com/gwenya,wat2wasm: fix relocation offsets,4,[],https://github.com/WebAssembly/wabt/pull/1527,https://github.com/pmatos,3,https://github.com/WebAssembly/wabt/pull/1527#issuecomment-693427315,split off from #1517,I just hit this bug - it would be really useful to have this merged.,True,{'THUMBS_UP': ['https://github.com/wingo']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1527,2020-08-19T22:27:37Z,2020-09-16T22:23:25Z,2020-09-16T22:23:25Z,MERGED,True,269,8,3,https://github.com/gwenya,wat2wasm: fix relocation offsets,4,[],https://github.com/WebAssembly/wabt/pull/1527,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1527#issuecomment-693648041,split off from #1517,OK to land this now?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1527,2020-08-19T22:27:37Z,2020-09-16T22:23:25Z,2020-09-16T22:23:25Z,MERGED,True,269,8,3,https://github.com/gwenya,wat2wasm: fix relocation offsets,4,[],https://github.com/WebAssembly/wabt/pull/1527,https://github.com/gwenya,5,https://github.com/WebAssembly/wabt/pull/1527#issuecomment-693681636,split off from #1517,"Ah sorry I missed your comment, let me add the test I promised first.
Do I need to rebase?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1527,2020-08-19T22:27:37Z,2020-09-16T22:23:25Z,2020-09-16T22:23:25Z,MERGED,True,269,8,3,https://github.com/gwenya,wat2wasm: fix relocation offsets,4,[],https://github.com/WebAssembly/wabt/pull/1527,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/1527#issuecomment-693697200,split off from #1517,"Do I need to rebase?

Doesn't look like it, I'll merge. Thanks for the patch!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1530,2020-08-28T22:40:45Z,2020-08-31T17:08:34Z,2020-08-31T17:08:35Z,MERGED,True,631,529,10,https://github.com/binji,Implement simd bitmask instructions,1,[],https://github.com/WebAssembly/wabt/pull/1530,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1530,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1533,2020-09-03T17:07:15Z,2020-09-08T19:34:15Z,2020-09-08T19:34:16Z,MERGED,True,182,2,6,https://github.com/binji,Fix bug when writing multi-value block type,2,[],https://github.com/WebAssembly/wabt/pull/1533,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1533,"The block type must be written as an SLEB, not an LEB. We also want it
to be relocatable, so I added a way to write a fixed-size SLEB too
(WriteS32Leb128WithReloc and WriteFixedS32Leb128).","The block type must be written as an SLEB, not an LEB. We also want it
to be relocatable, so I added a way to write a fixed-size SLEB too
(WriteS32Leb128WithReloc and WriteFixedS32Leb128).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1533,2020-09-03T17:07:15Z,2020-09-08T19:34:15Z,2020-09-08T19:34:16Z,MERGED,True,182,2,6,https://github.com/binji,Fix bug when writing multi-value block type,2,[],https://github.com/WebAssembly/wabt/pull/1533,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1533#issuecomment-686629920,"The block type must be written as an SLEB, not an LEB. We also want it
to be relocatable, so I added a way to write a fixed-size SLEB too
(WriteS32Leb128WithReloc and WriteFixedS32Leb128).",Fixes #1531.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1535,2020-09-08T13:26:02Z,2020-09-10T17:13:38Z,2020-09-10T17:13:38Z,MERGED,True,157,44,1,https://github.com/wingo,[NFC] Refactor symbol table creation in binary writer,1,[],https://github.com/WebAssembly/wabt/pull/1535,https://github.com/wingo,1,https://github.com/WebAssembly/wabt/pull/1535,This commit refactors the representations of symbols in the binary writer.  It will allow us to fix #1534 in a followup.,This commit refactors the representations of symbols in the binary writer.  It will allow us to fix #1534 in a followup.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1535,2020-09-08T13:26:02Z,2020-09-10T17:13:38Z,2020-09-10T17:13:38Z,MERGED,True,157,44,1,https://github.com/wingo,[NFC] Refactor symbol table creation in binary writer,1,[],https://github.com/WebAssembly/wabt/pull/1535,https://github.com/wingo,2,https://github.com/WebAssembly/wabt/pull/1535#issuecomment-689558101,This commit refactors the representations of symbols in the binary writer.  It will allow us to fix #1534 in a followup.,"Updated patch addresses review comments, except regarding tests: because this patch has no functional change (it doesn't fixed the linked issues yet), no test needs to be modified.  I'll extend the linking-section.txt test in the followup though; thanks for the pointer!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1535,2020-09-08T13:26:02Z,2020-09-10T17:13:38Z,2020-09-10T17:13:38Z,MERGED,True,157,44,1,https://github.com/wingo,[NFC] Refactor symbol table creation in binary writer,1,[],https://github.com/WebAssembly/wabt/pull/1535,https://github.com/wingo,3,https://github.com/WebAssembly/wabt/pull/1535#issuecomment-689558639,This commit refactors the representations of symbols in the binary writer.  It will allow us to fix #1534 in a followup.,"(And apologies wrt force-pushes; I gather the convention is to push commits to fix nits, then you rebase/squash when landing -- will do that next time.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1535,2020-09-08T13:26:02Z,2020-09-10T17:13:38Z,2020-09-10T17:13:38Z,MERGED,True,157,44,1,https://github.com/wingo,[NFC] Refactor symbol table creation in binary writer,1,[],https://github.com/WebAssembly/wabt/pull/1535,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1535#issuecomment-689560537,This commit refactors the representations of symbols in the binary writer.  It will allow us to fix #1534 in a followup.,"(And apologies wrt force-pushes; I gather the convention is to push commits to fix nits, then you rebase/squash when landing -- will do that next time.)

I don't think we have any rules around this.   I basically always use a rebase flow which means I often/always have to force push to github PRs (even if i don't squash, which I also occasionally do too).",True,{'THUMBS_UP': ['https://github.com/wingo']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1535,2020-09-08T13:26:02Z,2020-09-10T17:13:38Z,2020-09-10T17:13:38Z,MERGED,True,157,44,1,https://github.com/wingo,[NFC] Refactor symbol table creation in binary writer,1,[],https://github.com/WebAssembly/wabt/pull/1535,https://github.com/wingo,5,https://github.com/WebAssembly/wabt/pull/1535#issuecomment-690107356,This commit refactors the representations of symbols in the binary writer.  It will allow us to fix #1534 in a followup.,Thanks for the review @binji and @sbc100 :)  AFAICS this can be merged.  (Cheeky request: may I have merging privileges?  Very OK to say no.),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1535,2020-09-08T13:26:02Z,2020-09-10T17:13:38Z,2020-09-10T17:13:38Z,MERGED,True,157,44,1,https://github.com/wingo,[NFC] Refactor symbol table creation in binary writer,1,[],https://github.com/WebAssembly/wabt/pull/1535,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/1535#issuecomment-690529193,This commit refactors the representations of symbols in the binary writer.  It will allow us to fix #1534 in a followup.,"may I have merging privileges?

Fine with me, I kinda thought you already could as long as there was a reviewer. Lemme check the settings.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1537,2020-09-09T13:47:39Z,2020-09-16T22:21:24Z,2020-09-16T22:21:24Z,MERGED,True,202,53,4,https://github.com/wingo,Eager symbol tables,4,[],https://github.com/WebAssembly/wabt/pull/1537,https://github.com/wingo,1,https://github.com/WebAssembly/wabt/pull/1537,"Based on #1535.
Instead of adding entries to the symbol table as they are referenced, when writing relocatable binaries, we're going to make symbols for all functions.  This allows exported functions and globals to be written with the proper exported / no_strip flags, so that resulting files will link with wasm-ld.
The current state is that I've only updated the tests in the repo.  However the real difference can be seen if we make a simple wasm file from LLVM:
$ cat a.c
void b(void);
__attribute__((export_name(""a""))) void a(void) { b(); }

$ clang -Oz --target=wasm32 -nostdlib -c -o a.o a.c
$ wasm2wat -o a.wat a.o

The resulting file looks like:
(module
  (type (;0;) (func))
  (import ""env"" ""__linear_memory"" (memory (;0;) 0))
  (import ""env"" ""__indirect_function_table"" (table (;0;) 0 funcref))
  (import ""env"" ""b"" (func (;0;) (type 0)))
  (func $a (type 0)
    call 0)
  (export ""a"" (func $a)))
If I then use wat2wasm --relocatable on that file, and I wasm-objdump -dx it, I used to get:
...
Custom:
 - name: ""linking""
  - symbol table [count=1]
   - 0: F <env.b> func=0 undefined binding=global vis=default
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

Whereas now I get:
a.wat.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <$a>
Export[1]:
 - func[1] <$a> -> ""a""
Code[1]:
 - func[1] size=8 <$a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <$a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <$a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

I.e. there's now an entry for the exported $a definition.  This allows wasm-ld to do the right thing.
Note that the name added to the symbol table is $a.  This causes wabt to use that name when printing $a elsewhere in the disassembly; hence the diffs to existing tests (but only when printing relocatable binaries).  Not sure what the desired UI is for that.  I think it's just an internal name in the module; the external names are defined already in the imports/exports.","Based on #1535.
Instead of adding entries to the symbol table as they are referenced, when writing relocatable binaries, we're going to make symbols for all functions.  This allows exported functions and globals to be written with the proper exported / no_strip flags, so that resulting files will link with wasm-ld.
The current state is that I've only updated the tests in the repo.  However the real difference can be seen if we make a simple wasm file from LLVM:
$ cat a.c
void b(void);
__attribute__((export_name(""a""))) void a(void) { b(); }

$ clang -Oz --target=wasm32 -nostdlib -c -o a.o a.c
$ wasm2wat -o a.wat a.o

The resulting file looks like:
(module
  (type (;0;) (func))
  (import ""env"" ""__linear_memory"" (memory (;0;) 0))
  (import ""env"" ""__indirect_function_table"" (table (;0;) 0 funcref))
  (import ""env"" ""b"" (func (;0;) (type 0)))
  (func $a (type 0)
    call 0)
  (export ""a"" (func $a)))
If I then use wat2wasm --relocatable on that file, and I wasm-objdump -dx it, I used to get:
...
Custom:
 - name: ""linking""
  - symbol table [count=1]
   - 0: F <env.b> func=0 undefined binding=global vis=default
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

Whereas now I get:
a.wat.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <$a>
Export[1]:
 - func[1] <$a> -> ""a""
Code[1]:
 - func[1] size=8 <$a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <$a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <$a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

I.e. there's now an entry for the exported $a definition.  This allows wasm-ld to do the right thing.
Note that the name added to the symbol table is $a.  This causes wabt to use that name when printing $a elsewhere in the disassembly; hence the diffs to existing tests (but only when printing relocatable binaries).  Not sure what the desired UI is for that.  I think it's just an internal name in the module; the external names are defined already in the imports/exports.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1537,2020-09-09T13:47:39Z,2020-09-16T22:21:24Z,2020-09-16T22:21:24Z,MERGED,True,202,53,4,https://github.com/wingo,Eager symbol tables,4,[],https://github.com/WebAssembly/wabt/pull/1537,https://github.com/wingo,2,https://github.com/WebAssembly/wabt/pull/1537#issuecomment-689575797,"Based on #1535.
Instead of adding entries to the symbol table as they are referenced, when writing relocatable binaries, we're going to make symbols for all functions.  This allows exported functions and globals to be written with the proper exported / no_strip flags, so that resulting files will link with wasm-ld.
The current state is that I've only updated the tests in the repo.  However the real difference can be seen if we make a simple wasm file from LLVM:
$ cat a.c
void b(void);
__attribute__((export_name(""a""))) void a(void) { b(); }

$ clang -Oz --target=wasm32 -nostdlib -c -o a.o a.c
$ wasm2wat -o a.wat a.o

The resulting file looks like:
(module
  (type (;0;) (func))
  (import ""env"" ""__linear_memory"" (memory (;0;) 0))
  (import ""env"" ""__indirect_function_table"" (table (;0;) 0 funcref))
  (import ""env"" ""b"" (func (;0;) (type 0)))
  (func $a (type 0)
    call 0)
  (export ""a"" (func $a)))
If I then use wat2wasm --relocatable on that file, and I wasm-objdump -dx it, I used to get:
...
Custom:
 - name: ""linking""
  - symbol table [count=1]
   - 0: F <env.b> func=0 undefined binding=global vis=default
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

Whereas now I get:
a.wat.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <$a>
Export[1]:
 - func[1] <$a> -> ""a""
Code[1]:
 - func[1] size=8 <$a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <$a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <$a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

I.e. there's now an entry for the exported $a definition.  This allows wasm-ld to do the right thing.
Note that the name added to the symbol table is $a.  This causes wabt to use that name when printing $a elsewhere in the disassembly; hence the diffs to existing tests (but only when printing relocatable binaries).  Not sure what the desired UI is for that.  I think it's just an internal name in the module; the external names are defined already in the imports/exports.","My TODO here is to add more tests.  I will probably add the a.o test above; if there's anything particular I should look at, LMK.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1537,2020-09-09T13:47:39Z,2020-09-16T22:21:24Z,2020-09-16T22:21:24Z,MERGED,True,202,53,4,https://github.com/wingo,Eager symbol tables,4,[],https://github.com/WebAssembly/wabt/pull/1537,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1537#issuecomment-690538358,"Based on #1535.
Instead of adding entries to the symbol table as they are referenced, when writing relocatable binaries, we're going to make symbols for all functions.  This allows exported functions and globals to be written with the proper exported / no_strip flags, so that resulting files will link with wasm-ld.
The current state is that I've only updated the tests in the repo.  However the real difference can be seen if we make a simple wasm file from LLVM:
$ cat a.c
void b(void);
__attribute__((export_name(""a""))) void a(void) { b(); }

$ clang -Oz --target=wasm32 -nostdlib -c -o a.o a.c
$ wasm2wat -o a.wat a.o

The resulting file looks like:
(module
  (type (;0;) (func))
  (import ""env"" ""__linear_memory"" (memory (;0;) 0))
  (import ""env"" ""__indirect_function_table"" (table (;0;) 0 funcref))
  (import ""env"" ""b"" (func (;0;) (type 0)))
  (func $a (type 0)
    call 0)
  (export ""a"" (func $a)))
If I then use wat2wasm --relocatable on that file, and I wasm-objdump -dx it, I used to get:
...
Custom:
 - name: ""linking""
  - symbol table [count=1]
   - 0: F <env.b> func=0 undefined binding=global vis=default
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

Whereas now I get:
a.wat.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <$a>
Export[1]:
 - func[1] <$a> -> ""a""
Code[1]:
 - func[1] size=8 <$a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <$a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <$a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

I.e. there's now an entry for the exported $a definition.  This allows wasm-ld to do the right thing.
Note that the name added to the symbol table is $a.  This causes wabt to use that name when printing $a elsewhere in the disassembly; hence the diffs to existing tests (but only when printing relocatable binaries).  Not sure what the desired UI is for that.  I think it's just an internal name in the module; the external names are defined already in the imports/exports.",I don't think $a should appear in the symbol table but just a.   Same goes for env.b actually.   Ideally it would just be a and b as symbol names since wasm-ld uses a flat namespace.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1537,2020-09-09T13:47:39Z,2020-09-16T22:21:24Z,2020-09-16T22:21:24Z,MERGED,True,202,53,4,https://github.com/wingo,Eager symbol tables,4,[],https://github.com/WebAssembly/wabt/pull/1537,https://github.com/wingo,4,https://github.com/WebAssembly/wabt/pull/1537#issuecomment-691055189,"Based on #1535.
Instead of adding entries to the symbol table as they are referenced, when writing relocatable binaries, we're going to make symbols for all functions.  This allows exported functions and globals to be written with the proper exported / no_strip flags, so that resulting files will link with wasm-ld.
The current state is that I've only updated the tests in the repo.  However the real difference can be seen if we make a simple wasm file from LLVM:
$ cat a.c
void b(void);
__attribute__((export_name(""a""))) void a(void) { b(); }

$ clang -Oz --target=wasm32 -nostdlib -c -o a.o a.c
$ wasm2wat -o a.wat a.o

The resulting file looks like:
(module
  (type (;0;) (func))
  (import ""env"" ""__linear_memory"" (memory (;0;) 0))
  (import ""env"" ""__indirect_function_table"" (table (;0;) 0 funcref))
  (import ""env"" ""b"" (func (;0;) (type 0)))
  (func $a (type 0)
    call 0)
  (export ""a"" (func $a)))
If I then use wat2wasm --relocatable on that file, and I wasm-objdump -dx it, I used to get:
...
Custom:
 - name: ""linking""
  - symbol table [count=1]
   - 0: F <env.b> func=0 undefined binding=global vis=default
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

Whereas now I get:
a.wat.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <$a>
Export[1]:
 - func[1] <$a> -> ""a""
Code[1]:
 - func[1] size=8 <$a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <$a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <$a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

I.e. there's now an entry for the exported $a definition.  This allows wasm-ld to do the right thing.
Note that the name added to the symbol table is $a.  This causes wabt to use that name when printing $a elsewhere in the disassembly; hence the diffs to existing tests (but only when printing relocatable binaries).  Not sure what the desired UI is for that.  I think it's just an internal name in the module; the external names are defined already in the imports/exports.","I don't think env.b is actually in the symbol table; nothing in wabt sets EXPLICIT_NAME for imports.  env.b is just a display name that wabt uses internally.
Regarding $a vs a for naming symbols defined in the compilation unit, you are probably right regarding user expectations, but I wonder: does it matter to wasm-ld?  It could only matter if the name were used by wabt for exports.  I will have to try and see what happens.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1537,2020-09-09T13:47:39Z,2020-09-16T22:21:24Z,2020-09-16T22:21:24Z,MERGED,True,202,53,4,https://github.com/wingo,Eager symbol tables,4,[],https://github.com/WebAssembly/wabt/pull/1537,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1537#issuecomment-691082495,"Based on #1535.
Instead of adding entries to the symbol table as they are referenced, when writing relocatable binaries, we're going to make symbols for all functions.  This allows exported functions and globals to be written with the proper exported / no_strip flags, so that resulting files will link with wasm-ld.
The current state is that I've only updated the tests in the repo.  However the real difference can be seen if we make a simple wasm file from LLVM:
$ cat a.c
void b(void);
__attribute__((export_name(""a""))) void a(void) { b(); }

$ clang -Oz --target=wasm32 -nostdlib -c -o a.o a.c
$ wasm2wat -o a.wat a.o

The resulting file looks like:
(module
  (type (;0;) (func))
  (import ""env"" ""__linear_memory"" (memory (;0;) 0))
  (import ""env"" ""__indirect_function_table"" (table (;0;) 0 funcref))
  (import ""env"" ""b"" (func (;0;) (type 0)))
  (func $a (type 0)
    call 0)
  (export ""a"" (func $a)))
If I then use wat2wasm --relocatable on that file, and I wasm-objdump -dx it, I used to get:
...
Custom:
 - name: ""linking""
  - symbol table [count=1]
   - 0: F <env.b> func=0 undefined binding=global vis=default
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

Whereas now I get:
a.wat.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <$a>
Export[1]:
 - func[1] <$a> -> ""a""
Code[1]:
 - func[1] size=8 <$a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <$a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <$a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

I.e. there's now an entry for the exported $a definition.  This allows wasm-ld to do the right thing.
Note that the name added to the symbol table is $a.  This causes wabt to use that name when printing $a elsewhere in the disassembly; hence the diffs to existing tests (but only when printing relocatable binaries).  Not sure what the desired UI is for that.  I think it's just an internal name in the module; the external names are defined already in the imports/exports.","I don't think env.b is actually in the symbol table; nothing in wabt sets EXPLICIT_NAME for imports. env.b is just a display name that wabt uses internally.

Ah, you are correct.  clang produced objects look the same.

Regarding $a vs a for naming symbols defined in the compilation unit, you are probably right regarding user expectations, but I wonder: does it matter to wasm-ld? It could only matter if the name were used by wabt for exports. I will have to try and see what happens.

No I don't it matters from wasm-ld perspective.   Symbol names can be whatever you want them to be.   But if you want to link with C/C++ you won't want wabt adding $ to the beginning of symbol names.
My understanding is that the$ is the escape char used in the text format for showing names.  I would not expect the $ to propagate into the binary format in general.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1537,2020-09-09T13:47:39Z,2020-09-16T22:21:24Z,2020-09-16T22:21:24Z,MERGED,True,202,53,4,https://github.com/wingo,Eager symbol tables,4,[],https://github.com/WebAssembly/wabt/pull/1537,https://github.com/wingo,6,https://github.com/WebAssembly/wabt/pull/1537#issuecomment-692695686,"Based on #1535.
Instead of adding entries to the symbol table as they are referenced, when writing relocatable binaries, we're going to make symbols for all functions.  This allows exported functions and globals to be written with the proper exported / no_strip flags, so that resulting files will link with wasm-ld.
The current state is that I've only updated the tests in the repo.  However the real difference can be seen if we make a simple wasm file from LLVM:
$ cat a.c
void b(void);
__attribute__((export_name(""a""))) void a(void) { b(); }

$ clang -Oz --target=wasm32 -nostdlib -c -o a.o a.c
$ wasm2wat -o a.wat a.o

The resulting file looks like:
(module
  (type (;0;) (func))
  (import ""env"" ""__linear_memory"" (memory (;0;) 0))
  (import ""env"" ""__indirect_function_table"" (table (;0;) 0 funcref))
  (import ""env"" ""b"" (func (;0;) (type 0)))
  (func $a (type 0)
    call 0)
  (export ""a"" (func $a)))
If I then use wat2wasm --relocatable on that file, and I wasm-objdump -dx it, I used to get:
...
Custom:
 - name: ""linking""
  - symbol table [count=1]
   - 0: F <env.b> func=0 undefined binding=global vis=default
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

Whereas now I get:
a.wat.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <$a>
Export[1]:
 - func[1] <$a> -> ""a""
Code[1]:
 - func[1] size=8 <$a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <$a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <$a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

I.e. there's now an entry for the exported $a definition.  This allows wasm-ld to do the right thing.
Note that the name added to the symbol table is $a.  This causes wabt to use that name when printing $a elsewhere in the disassembly; hence the diffs to existing tests (but only when printing relocatable binaries).  Not sure what the desired UI is for that.  I think it's just an internal name in the module; the external names are defined already in the imports/exports.","Regarding $a vs a for naming symbols defined in the compilation unit, you are probably right regarding user expectations, but I wonder: does it matter to wasm-ld? It could only matter if the name were used by wabt for exports. I will have to try and see what happens.

No I don't it matters from wasm-ld perspective. Symbol names can be whatever you want them to be. But if you want to link with C/C++ you won't want wabt adding $ to the beginning of symbol names.

Ah interesting, I didn't know that wasm-ld used the name from the symbol table; I thought it used the name from the exports.  I guess I was just linking from wat to C and not the other way.  Will fix!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1537,2020-09-09T13:47:39Z,2020-09-16T22:21:24Z,2020-09-16T22:21:24Z,MERGED,True,202,53,4,https://github.com/wingo,Eager symbol tables,4,[],https://github.com/WebAssembly/wabt/pull/1537,https://github.com/wingo,7,https://github.com/WebAssembly/wabt/pull/1537#issuecomment-692740165,"Based on #1535.
Instead of adding entries to the symbol table as they are referenced, when writing relocatable binaries, we're going to make symbols for all functions.  This allows exported functions and globals to be written with the proper exported / no_strip flags, so that resulting files will link with wasm-ld.
The current state is that I've only updated the tests in the repo.  However the real difference can be seen if we make a simple wasm file from LLVM:
$ cat a.c
void b(void);
__attribute__((export_name(""a""))) void a(void) { b(); }

$ clang -Oz --target=wasm32 -nostdlib -c -o a.o a.c
$ wasm2wat -o a.wat a.o

The resulting file looks like:
(module
  (type (;0;) (func))
  (import ""env"" ""__linear_memory"" (memory (;0;) 0))
  (import ""env"" ""__indirect_function_table"" (table (;0;) 0 funcref))
  (import ""env"" ""b"" (func (;0;) (type 0)))
  (func $a (type 0)
    call 0)
  (export ""a"" (func $a)))
If I then use wat2wasm --relocatable on that file, and I wasm-objdump -dx it, I used to get:
...
Custom:
 - name: ""linking""
  - symbol table [count=1]
   - 0: F <env.b> func=0 undefined binding=global vis=default
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

Whereas now I get:
a.wat.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <$a>
Export[1]:
 - func[1] <$a> -> ""a""
Code[1]:
 - func[1] size=8 <$a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <$a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <$a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

I.e. there's now an entry for the exported $a definition.  This allows wasm-ld to do the right thing.
Note that the name added to the symbol table is $a.  This causes wabt to use that name when printing $a elsewhere in the disassembly; hence the diffs to existing tests (but only when printing relocatable binaries).  Not sure what the desired UI is for that.  I think it's just an internal name in the module; the external names are defined already in the imports/exports.","I rebased then pushed a followup; see f118694 for the changes.  Now the test file from the original PR message looks as it did before, plus an additional entry for the export as expected:
$ ~/src/wabt/out/gcc/Debug/wasm-objdump -dx /tmp/a.o

a.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <a>
Export[1]:
 - func[1] <a> -> ""a""
Code[1]:
 - func[1] size=8 <a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1537,2020-09-09T13:47:39Z,2020-09-16T22:21:24Z,2020-09-16T22:21:24Z,MERGED,True,202,53,4,https://github.com/wingo,Eager symbol tables,4,[],https://github.com/WebAssembly/wabt/pull/1537,https://github.com/wingo,8,https://github.com/WebAssembly/wabt/pull/1537#issuecomment-692763220,"Based on #1535.
Instead of adding entries to the symbol table as they are referenced, when writing relocatable binaries, we're going to make symbols for all functions.  This allows exported functions and globals to be written with the proper exported / no_strip flags, so that resulting files will link with wasm-ld.
The current state is that I've only updated the tests in the repo.  However the real difference can be seen if we make a simple wasm file from LLVM:
$ cat a.c
void b(void);
__attribute__((export_name(""a""))) void a(void) { b(); }

$ clang -Oz --target=wasm32 -nostdlib -c -o a.o a.c
$ wasm2wat -o a.wat a.o

The resulting file looks like:
(module
  (type (;0;) (func))
  (import ""env"" ""__linear_memory"" (memory (;0;) 0))
  (import ""env"" ""__indirect_function_table"" (table (;0;) 0 funcref))
  (import ""env"" ""b"" (func (;0;) (type 0)))
  (func $a (type 0)
    call 0)
  (export ""a"" (func $a)))
If I then use wat2wasm --relocatable on that file, and I wasm-objdump -dx it, I used to get:
...
Custom:
 - name: ""linking""
  - symbol table [count=1]
   - 0: F <env.b> func=0 undefined binding=global vis=default
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

Whereas now I get:
a.wat.o:	file format wasm 0x1

Section Details:

Type[1]:
 - type[0] () -> nil
Import[3]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=0 <- env.__indirect_function_table
 - func[0] sig=0 <env.b> <- env.b
Function[1]:
 - func[1] sig=0 <$a>
Export[1]:
 - func[1] <$a> -> ""a""
Code[1]:
 - func[1] size=8 <$a>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <env.b> func=0 undefined binding=global vis=default
   - 1: F <$a> func=1 exported no_strip binding=global vis=hidden
Custom:
 - name: ""reloc.Code""
  - relocations for section: 4 (Code) [1]
   - R_WASM_FUNCTION_INDEX_LEB offset=0x000004(file=0x000063) symbol=0 <env.b>

Code Disassembly:

000061 func[1] <$a>:
 000062: 10 80 80 80 80 00          | call 0 <env.b>
 000068: 0b                         | end

I.e. there's now an entry for the exported $a definition.  This allows wasm-ld to do the right thing.
Note that the name added to the symbol table is $a.  This causes wabt to use that name when printing $a elsewhere in the disassembly; hence the diffs to existing tests (but only when printing relocatable binaries).  Not sure what the desired UI is for that.  I think it's just an internal name in the module; the external names are defined already in the imports/exports.","Looks pretty good to me. Have you tried actually linking the wabt output with C/C++ code using wasm-ld?

Yeah, you can see a little test here: https://github.com/Igalia/ref-cpp/blob/master/milestones/m2/Makefile.  The .wat file gets linked to a little implementation of malloc.",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1539,2020-09-09T14:40:42Z,2020-09-16T22:22:46Z,2020-09-16T22:22:46Z,MERGED,True,61,3,3,https://github.com/wingo,Fix reloc section references when --enable-bulk-memory,2,[],https://github.com/WebAssembly/wabt/pull/1539,https://github.com/wingo,1,https://github.com/WebAssembly/wabt/pull/1539,Fixes #1538.,Fixes #1538.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1540,2020-09-10T01:42:42Z,,2021-03-22T16:56:59Z,OPEN,False,2,2,1,https://github.com/ddcc,hint when section requires disabled feature,1,[],https://github.com/WebAssembly/wabt/pull/1540,https://github.com/ddcc,1,https://github.com/WebAssembly/wabt/pull/1540,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1540,2020-09-10T01:42:42Z,,2021-03-22T16:56:59Z,OPEN,False,2,2,1,https://github.com/ddcc,hint when section requires disabled feature,1,[],https://github.com/WebAssembly/wabt/pull/1540,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1540#issuecomment-690535601,,"This is a good start, but I'd prefer a more holistic approach here, where all disabled features found in the module are tracked and communicated as a separate error, not integrated directly into the error message.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1541,2020-09-10T01:48:12Z,2020-09-10T17:25:46Z,2020-09-10T17:25:46Z,MERGED,True,1,0,1,https://github.com/ddcc,add missing case for R_WASM_GLOBAL_INDEX_I32 relocation,1,[],https://github.com/WebAssembly/wabt/pull/1541,https://github.com/ddcc,1,https://github.com/WebAssembly/wabt/pull/1541,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1542,2020-09-10T18:09:28Z,,2021-03-22T16:57:00Z,OPEN,False,1,1,1,https://github.com/binji,Change emcc -> emscripten,1,[],https://github.com/WebAssembly/wabt/pull/1542,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1542,"The name of the target is emscripten-release, for example.","The name of the target is emscripten-release, for example.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1544,2020-09-14T11:33:53Z,2020-09-14T16:47:59Z,2020-09-14T16:53:00Z,MERGED,True,4,1,2,https://github.com/gumb0,Fix RefPtr::empty(),1,[],https://github.com/WebAssembly/wabt/pull/1544,https://github.com/gumb0,1,https://github.com/WebAssembly/wabt/pull/1544,This fixes small typo.,This fixes small typo.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1545,2020-09-17T07:51:45Z,2020-09-17T16:04:08Z,2020-09-17T16:04:09Z,MERGED,True,15,13,3,https://github.com/wingo,Fix up reloc-related tests after #1537,2,[],https://github.com/WebAssembly/wabt/pull/1545,https://github.com/wingo,1,https://github.com/WebAssembly/wabt/pull/1545,"PRs #1527 and #1539 needed their test expectations updated after #1537
was merged; this patch does that.  It also renames a test for
consistency.","PRs #1527 and #1539 needed their test expectations updated after #1537
was merged; this patch does that.  It also renames a test for
consistency.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1546,2020-09-17T19:28:12Z,2020-09-17T19:45:08Z,2020-09-18T08:53:52Z,MERGED,True,22,0,3,https://github.com/chfast,Disallow non-zero memidx when bulk memory disabled,1,[],https://github.com/WebAssembly/wabt/pull/1546,https://github.com/chfast,1,https://github.com/WebAssembly/wabt/pull/1546,"If bulk memory extension is disabled, do not allow memory index in the
data segment other than zero.","If bulk memory extension is disabled, do not allow memory index in the
data segment other than zero.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1546,2020-09-17T19:28:12Z,2020-09-17T19:45:08Z,2020-09-18T08:53:52Z,MERGED,True,22,0,3,https://github.com/chfast,Disallow non-zero memidx when bulk memory disabled,1,[],https://github.com/WebAssembly/wabt/pull/1546,https://github.com/chfast,2,https://github.com/WebAssembly/wabt/pull/1546#issuecomment-694457331,"If bulk memory extension is disabled, do not allow memory index in the
data segment other than zero.",The spectest additions will follow soon.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1547,2020-09-18T09:39:42Z,2020-09-18T16:37:25Z,2020-09-18T18:12:41Z,MERGED,True,33,4,11,https://github.com/chfast,"Disallow ""64-bit"" flag if memory64 is disabled",1,[],https://github.com/WebAssembly/wabt/pull/1547,https://github.com/chfast,1,https://github.com/WebAssembly/wabt/pull/1547,"Fixes regressions in binary reader introduced by the implementation of
the memory64 extension: #1500.","Fixes regressions in binary reader introduced by the implementation of
the memory64 extension: #1500.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1547,2020-09-18T09:39:42Z,2020-09-18T16:37:25Z,2020-09-18T18:12:41Z,MERGED,True,33,4,11,https://github.com/chfast,"Disallow ""64-bit"" flag if memory64 is disabled",1,[],https://github.com/WebAssembly/wabt/pull/1547,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1547#issuecomment-694971423,"Fixes regressions in binary reader introduced by the implementation of
the memory64 extension: #1500.","This is not great actually, it be better for it to be enabled by the flag in the binary. Unlike new instructions, which you may have a reason for not wanting them to appear in the binary by accident, this feature is pretty unambiguous.
But I guess we'll have to live with this flag until it becomes default.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1547,2020-09-18T09:39:42Z,2020-09-18T16:37:25Z,2020-09-18T18:12:41Z,MERGED,True,33,4,11,https://github.com/chfast,"Disallow ""64-bit"" flag if memory64 is disabled",1,[],https://github.com/WebAssembly/wabt/pull/1547,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1547#issuecomment-694977126,"Fixes regressions in binary reader introduced by the implementation of
the memory64 extension: #1500.","In general, I like that wabt doesn't include non-standardized features by default. Some tools will include all features (like wasm-objdump, but most probably shouldn't I think.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1547,2020-09-18T09:39:42Z,2020-09-18T16:37:25Z,2020-09-18T18:12:41Z,MERGED,True,33,4,11,https://github.com/chfast,"Disallow ""64-bit"" flag if memory64 is disabled",1,[],https://github.com/WebAssembly/wabt/pull/1547,https://github.com/chfast,4,https://github.com/WebAssembly/wabt/pull/1547#issuecomment-695013022,"Fixes regressions in binary reader introduced by the implementation of
the memory64 extension: #1500.",Here is one more #1548.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1548,2020-09-18T17:45:14Z,,2021-03-22T16:57:01Z,OPEN,False,43,18,16,https://github.com/chfast,Disallow non-zero table idx if reference types disabled,1,[],https://github.com/WebAssembly/wabt/pull/1548,https://github.com/chfast,1,https://github.com/WebAssembly/wabt/pull/1548,"If the reference types extension is disabled, do not allow table index
in the element segment other than zero.
Here I'm not 100% sure I identified the extension right.
And considering the complexity of the ReadElemSection, I decided to just check flags !=0 at the beginning, so the error message is less precise than it could be.","If the reference types extension is disabled, do not allow table index
in the element segment other than zero.
Here I'm not 100% sure I identified the extension right.
And considering the complexity of the ReadElemSection, I decided to just check flags !=0 at the beginning, so the error message is less precise than it could be.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/wingo,1,https://github.com/WebAssembly/wabt/pull/1549,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1549#issuecomment-696934327,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","This generally looks great!
Personally I'd rather see these changes land in llvm / wasm-ld before we land them in wabt since as far as I know wasm-ld is the only consumer of these relocations right now.  Are you planning a corresponding llvm change?
Perhaps we can discuss this more on Monday with @pmatos.. but I was wondering if we should handle table 0 and memory 0 specially.   In llvm memory 0 is currently special in that it represents the linear memory of the program and table 0 is special in that it holds all the indirect function addresses.   I could imagine world where we could avoid relocations if the index is 0, avoiding the need for all call_indirect instructions to have an extra relocation, but I'm not set on this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/pmatos,3,https://github.com/WebAssembly/wabt/pull/1549#issuecomment-697181761,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","This generally looks great!
Personally I'd rather see these changes land in llvm / wasm-ld before we land them in wabt since as far as I know wasm-ld is the only consumer of these relocations right now. Are you planning a corresponding llvm change?

Yes - I plan to work on this as soon as I finish a couple of other small tasks.

Perhaps we can discuss this more on Monday with @pmatos.. but I was wondering if we should handle table 0 and memory 0 specially. In llvm memory 0 is currently special in that it represents the linear memory of the program and table 0 is special in that it holds all the indirect function addresses. I could imagine world where we could avoid relocations if the index is 0, avoiding the need for all call_indirect instructions to have an extra relocation, but I'm not set on this.

Lets have a chat about this on Monday as planned so we can lay the ground for future work.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/wingo,4,https://github.com/WebAssembly/wabt/pull/1549#issuecomment-697433219,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","This generally looks great!

Thanks for taking a look!

Personally I'd rather see these changes land in llvm / wasm-ld before we land them in wabt since as far as I know wasm-ld is the only consumer of these relocations right now. Are you planning a corresponding llvm change?

Agreed, and hopefully we can get that patch up this week too.

I was wondering if we should handle table 0 and memory 0 specially. In llvm memory 0 is currently special in that it represents the linear memory of the program and table 0 is special in that it holds all the indirect function addresses. I could imagine world where we could avoid relocations if the index is 0, avoiding the need for all call_indirect instructions to have an extra relocation, but I'm not set on this.

I was wondering about this too.  Concretely, looking at the compilation of:
void f(void) {}
void* g(void) { return f; }
I see that the current result objdumps as:
Type[2]:
 - type[0] () -> nil
 - type[1] () -> i32
Import[2]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=1 <- env.__indirect_function_table
Function[2]:
 - func[0] sig=0 <f>
 - func[1] sig=1 <g>
Elem[1]:
 - segment[0] flags=0 table=0 count=1 - init i32=1
  - elem[1] = func[0] <f>
Code[2]:
 - func[0] size=2 <f>
 - func[1] size=8 <g>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <f> func=0 binding=global vis=hidden
   - 1: F <g> func=1 binding=global vis=hidden
Custom:
 - name: ""reloc.CODE""
  - relocations for section: 4 (Code) [1]
   - R_WASM_TABLE_INDEX_SLEB offset=0x000007(file=0x000079) symbol=0 <f>
Custom:
 - name: ""producers""

Code Disassembly:

000074 func[0] <f>:
 000075: 0b                         | end
000077 func[1] <g>:
 000078: 41 81 80 80 80 00          | i32.const 1
 00007e: 0b                         | end

If we want to omit relocs for the indirect function table, we can do so if the referred-to table has index 0, is imported, has type funcref, and the import is from the env module, and the name of the import is __indirect_function_table.
The advantage of doing so is that you would have fewer relocs to deal with, which probably don't need to be renumbered from 0 in the ""normal"" case, and for which you wouldn't have to reserve a 5-byte LEB.
The disadvantage is that the filter logic described above is a bit of a hack.  Also I would imagine that in the future as CFI techniques start to be more standard, and with the advent of typed function references, we'll start to see more partitioning of callables into multiple tables, so this optimization is not one for the long term, IMO.
For me, I think I would lean towards adding R_WASM_TABLE_NUMBER_LEB relocs for all table number references.  If short-term efficiency is still a consideration, we can only emit such relocs when reftypes are enabled, in wabt anyway; not sure how feature selection works in LLVM yet.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1549#issuecomment-697480009,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","This generally looks great!

Thanks for taking a look!

Personally I'd rather see these changes land in llvm / wasm-ld before we land them in wabt since as far as I know wasm-ld is the only consumer of these relocations right now. Are you planning a corresponding llvm change?

Agreed, and hopefully we can get that patch up this week too.

I was wondering if we should handle table 0 and memory 0 specially. In llvm memory 0 is currently special in that it represents the linear memory of the program and table 0 is special in that it holds all the indirect function addresses. I could imagine world where we could avoid relocations if the index is 0, avoiding the need for all call_indirect instructions to have an extra relocation, but I'm not set on this.

I was wondering about this too. Concretely, looking at the compilation of:
void f(void) {}
void* g(void) { return f; }
I see that the current result objdumps as:
Type[2]:
 - type[0] () -> nil
 - type[1] () -> i32
Import[2]:
 - memory[0] pages: initial=0 <- env.__linear_memory
 - table[0] type=funcref initial=1 <- env.__indirect_function_table
Function[2]:
 - func[0] sig=0 <f>
 - func[1] sig=1 <g>
Elem[1]:
 - segment[0] flags=0 table=0 count=1 - init i32=1
  - elem[1] = func[0] <f>
Code[2]:
 - func[0] size=2 <f>
 - func[1] size=8 <g>
Custom:
 - name: ""linking""
  - symbol table [count=2]
   - 0: F <f> func=0 binding=global vis=hidden
   - 1: F <g> func=1 binding=global vis=hidden
Custom:
 - name: ""reloc.CODE""
  - relocations for section: 4 (Code) [1]
   - R_WASM_TABLE_INDEX_SLEB offset=0x000007(file=0x000079) symbol=0 <f>
Custom:
 - name: ""producers""

Code Disassembly:

000074 func[0] <f>:
 000075: 0b                         | end
000077 func[1] <g>:
 000078: 41 81 80 80 80 00          | i32.const 1
 00007e: 0b                         | end

If we want to omit relocs for the indirect function table, we can do so if the referred-to table has index 0, is imported, has type funcref, and the import is from the env module, and the name of the import is __indirect_function_table.
The advantage of doing so is that you would have fewer relocs to deal with, which probably don't need to be renumbered from 0 in the ""normal"" case, and for which you wouldn't have to reserve a 5-byte LEB.
The disadvantage is that the filter logic described above is a bit of a hack. Also I would imagine that in the future as CFI techniques start to be more standard, and with the advent of typed function references, we'll start to see more partitioning of callables into multiple tables, so this optimization is not one for the long term, IMO.
For me, I think I would lean towards adding R_WASM_TABLE_NUMBER_LEB relocs for all table number references. If short-term efficiency is still a consideration, we can only emit such relocs when reftypes are enabled, in wabt anyway; not sure how feature selection works in LLVM yet.

I like this last idea.  I think I agree that for consistency we should probably use relocations everywhere and that enabling this only when reftypes are enabled is a good way to transition to this new world.
Also we look at adding R_WASM_MEMORY_NUMBER_LEB at the same time support multi-memory, or maybe this can wait until we have more concrete users of the multi memory proposal?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/wingo,6,https://github.com/WebAssembly/wabt/pull/1549#issuecomment-697561402,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","Thanks for the review!
Regarding multi-memory, it's enough boilerplate that it probably warrants a separate PR.  I filed #1552.
I updated the TODO at the top and added an entry for only emitting table relocs if reftypes are enabled.  I also added a basic test.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/pmatos,7,https://github.com/WebAssembly/wabt/pull/1549#issuecomment-698204572,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","* [ ]  Finalize the reloc kind for `R_WASM_TABLE_NUMBER_LEB` in [Linking.md](https://github.com/WebAssembly/tool-conventions/blob/master/Linking.md); @pmatos is on this.


See WebAssembly/tool-conventions#147",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/wingo,8,https://github.com/WebAssembly/wabt/pull/1549#issuecomment-700522348,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","Ready to merge, I think.  I know that wasm-ld work is ongoing but there is also a bug-fix in this patch; the logic at https://github.com/WebAssembly/wabt/pull/1549/files#diff-f69899e3f8be9636bcd8d71e903ea8a0R238 wasn't right before.  (All function references need relocs, so all functions should be in the symbol table, regardless of whether they have a name or not.)  If wabt needs followup fixes for the table_number reloc, I will make sure to take care of it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/sbc100,9,https://github.com/WebAssembly/wabt/pull/1549#issuecomment-700812395,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","Oh .. we like to do a single commit per PR in this repo.   It looks like you have diligently split you your into commits with nice separate messages.
Would you mind creating a single message that you would like to use for the final commit message?  You could edit the PR description to include this and I can copy and paste it into the squashed commit?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1549,2020-09-22T15:29:32Z,2020-10-01T15:30:59Z,2020-10-01T15:30:59Z,MERGED,True,418,49,15,https://github.com/wingo,Add --relocatable support for tables,1,[],https://github.com/WebAssembly/wabt/pull/1549,https://github.com/wingo,10,https://github.com/WebAssembly/wabt/pull/1549#issuecomment-701950646,"This patch adds a table symbol type and plumbs it through everywhere.
To do:

 Add tests
 Determine what the right thing is for modules that implicitly use table 0 but don't declare a table (see https://github.com/WebAssembly/wabt/compare/master...wingo:relocatable-tables?expand=1#diff-4803dd58b37da26b663dfaa7d34ba35e)

The answer here is a bit more straightforward: the initial patch wasn't emitting symtab entries for anonymous definitions.  The test case under consideration did in fact define the table.  The updated patch will emit relocs for all table number references, unless the reference is invalid/broken (the user must have passed --no-check).


 Finalize the reloc kind for R_WASM_TABLE_NUMBER_LEB in Linking.md; @pmatos is on this.
 Only emit relocs when reftypes are enabled (see #1549 (comment))

Cc @pmatos and @sbc100","@sbc100 I squashed, rebased, and updated the commit message, though I see now that you were just asking for an updated message and that you would do the squashing 😬 sorry about that.  In any case it's the same code, rebased cleanly onto today's master -- no manual edits.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/silvanshade,1,https://github.com/WebAssembly/wabt/pull/1553,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/silvanshade,2,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-700425865,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","I've updated the PR now that WebAssembly/testsuite has been synchronized with the WebAssembly/simd repo upstream.
All of the simd tests are still passing but one of the new (unrelated) tests pulled in from WebAssembly/spec does not pass and I'm not sure how to fix it.
The test is this one which was added from WebAssembly/spec#1213.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/aardappel,3,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-703001021,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Looks like the func.wast test is still failing.. I was actually looking at that earlier, but no idea what the problem is.
Is this the root cause? out/test/spec/func.wast:448: expected module to be malformed: ""out/test/spec/func/func.3.wat"" ? Seems some quote modules where added.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/silvanshade,4,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-703012663,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Is this the root cause? out/test/spec/func.wast:448: expected module to be malformed: ""out/test/spec/func/func.3.wat"" ? Seems some quote modules where added.

@aardappel Yes, that's the one I wasn't sure how to fix either.
It's related to this issue: WebAssembly/spec#1213.
There's a similar test above it that doesn't use the quoted module (here) and that one does fail (correctly).
The problem seemingly has to do with the fact that the type index (here) is out of range and should trigger the malformed error for the quoted module, but doesn't.
Probably there is some sort of validation that has to happen when processing the quoted module to catch this but I don't understand enough about the internals of wabt to know how to fix it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/aardappel,5,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-703697431,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.",@rossberg (and @binji if around) any guidance what the new test in WebAssembly/spec#1213 is supposed to do? Both myself and @darinmorrison so far have failed to fix it in WABT (see error above).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/rossberg,6,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-703701644,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","@aardappel, can you be more specific? There is more than one test there.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/rossberg,7,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-703702180,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Ah, sorry, didn't read up-thread. Let me look.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/rossberg,8,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-703713792,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Okay, so the difference between this test and the preceding one is that the function also lists a parameter explicitly. This is a form of syntactic sugar in the text format alone, that has no correspondence in the binary format, and thus the AST. Consequently, it has to be desugared in the parser. But desugaring it requires knowing the actual type. So in order to do that, the parser (not just the validator) has to know and access the type definition for type 2 in this case, which doesn't exist. Since it's the parser failing this time, it produces malformed, not invalid.
It is rather annoying, but I'm not sure what the alternative could be, given that we have this sugar. What does wabt produce for this test atm?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/silvanshade,9,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-703773947,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","What does wabt produce for this test atm?

@rossberg Currently wabt doesn't produce any error on the second test with the quoted module.

Okay, so the difference between this test and the preceding one is that the function also lists a parameter explicitly. This is a form of syntactic sugar in the text format alone, that has no correspondence in the binary format, and thus the AST. Consequently, it has to be desugared in the parser.

Alright, I think that makes sense.
I know almost nothing about the internals of wabt. This was my first PR, just intended to fix the SIMD tests for some other tools that use wabt downstream.
However, I think there may be something more fundamental going wrong with how wabt is handling the test because even if you remove the parameter (below) so that the quoted module is like the first test, it still gives no error:
(assert_invalid
  (module quote
    ""(func $f (result f64) (f64.const 0))""  ;; adds implicit type definition
    ""(func $g (param i32))""                 ;; reuses explicit type definition
    ""(func $h (result f64) (f64.const 1))""  ;; reuses implicit type definition
    ""(type $t (func (param i32)))""

    ""(func (type 2))""  ;; does not exist
  )
  ""unknown type""
)
Just to be clear, should the above give an invalid error? (Not malformed since it doesn't involve the desugaring?)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/rossberg,10,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-704080685,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Yes, that should be invalid, just like the preceding test.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/aardappel,11,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-706788083,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.",@darinmorrison any progress on fixing that last issue?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/silvanshade,12,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-706798835,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.",@aardappel Unfortunately I don't really know how to fix that test. I think this will need some input from @binji or @sbc100 or some other maintainer who is more familiar with the internals of wabt.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/aardappel,13,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-707376958,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Ok, I will have another look.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/aardappel,14,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-707382787,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Ok, in CheckFuncTypeVarMatchesExplicit try adding this to the if (func_type) check:
    } else {
      errors->emplace_back(ErrorLevel::Error, loc, ""type index out of range"");
      result = Result::Error;

That made func.wast pass for me, and didn't seem to break any other tests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/silvanshade,15,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-707441982,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","@aardappel Do you mean like this?
Result CheckFuncTypeVarMatchesExplicit(const Location& loc,
                                       const Module& module,
                                       const FuncDeclaration& decl,
                                       Errors* errors) {
  Result result = Result::Ok;
  if (decl.has_func_type) {
    const FuncType* func_type = module.GetFuncType(decl.type_var);
    if (func_type) {
      result |=
          CheckTypes(loc, decl.sig.result_types, func_type->sig.result_types,
                     ""function"", ""result"", errors);
      result |=
          CheckTypes(loc, decl.sig.param_types, func_type->sig.param_types,
                     ""function"", ""argument"", errors);
    } else {
      errors->emplace_back(ErrorLevel::Error, loc, ""type index out of range"");
      result = Result::Error;
    }
  }
  return result;
}
Maybe I'm missing something but when I re-run cmake --build out --target run-tests after that change, I get several new failing cases:
**** FAILED ******************************************************************
- test/spec/bulk-memory-operations/imports.txt
    /home/dwm/development/WebAssembly/wabt/out/wast2json out/test/spec/bulk-memory-operations/imports.wast -o out/test/spec/bulk-memory-operations/imports/imports.json --enable-bulk-memory
- test/spec/call_indirect.txt
    /home/dwm/development/WebAssembly/wabt/out/wast2json out/test/spec/call_indirect.wast -o out/test/spec/call_indirect/call_indirect.json
- test/spec/func.txt
    /home/dwm/development/WebAssembly/wabt/out/wast2json out/test/spec/func.wast -o out/test/spec/func/func.json
- test/spec/func_ptrs.txt
    /home/dwm/development/WebAssembly/wabt/out/wast2json out/test/spec/func_ptrs.wast -o out/test/spec/func_ptrs/func_ptrs.json
- test/spec/imports.txt
    /home/dwm/development/WebAssembly/wabt/out/wast2json out/test/spec/imports.wast -o out/test/spec/imports/imports.json
- test/spec/reference-types/call_indirect.txt
    /home/dwm/development/WebAssembly/wabt/out/wast2json out/test/spec/reference-types/call_indirect.wast -o out/test/spec/reference-types/call_indirect/call_indirect.json --enable-reference-types
- test/spec/reference-types/imports.txt
    /home/dwm/development/WebAssembly/wabt/out/wast2json out/test/spec/reference-types/imports.wast -o out/test/spec/reference-types/imports/imports.json --enable-reference-types
- test/wasm2c/spec/call_indirect.txt
    /usr/bin/python3 /home/dwm/development/WebAssembly/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/call_indirect.txt --bindir=/home/dwm/development/WebAssembly/wabt/out --no-error-cmdline -o out/test/wasm2c/spec/call_indirect
- test/wasm2c/spec/func_ptrs.txt
    /usr/bin/python3 /home/dwm/development/WebAssembly/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/func_ptrs.wast --bindir=/home/dwm/development/WebAssembly/wabt/out --no-error-cmdline -o out/test/wasm2c/spec/func_ptrs
- test/wasm2c/spec/func.txt
    /usr/bin/python3 /home/dwm/development/WebAssembly/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/func.txt --bindir=/home/dwm/development/WebAssembly/wabt/out --no-error-cmdline -o out/test/wasm2c/spec/func
- test/wasm2c/spec/imports.txt
    /usr/bin/python3 /home/dwm/development/WebAssembly/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/imports.wast --bindir=/home/dwm/development/WebAssembly/wabt/out --no-error-cmdline -o out/test/wasm2c/spec/imports
FAILED: CMakeFiles/run-tests 

For comparison, before the change (just with this current PR), this is the output I get:
**** FAILED ******************************************************************
- test/spec/func.txt
    /home/dwm/development/WebAssembly/wabt/out/spectest-interp out/test/spec/func/func.json
FAILED: CMakeFiles/run-tests 

Was there maybe another change that needed to be included?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/aardappel,16,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-707479560,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.",Did you run run-tests.py -r to update outputs?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/silvanshade,17,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-707562440,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Did you run run-tests.py -r to update outputs?

@aardappel Yes, I did try that with individual tests but I'm still getting errors.
Running run-tests.py -r produces the following:
**** FAILED ******************************************************************
- test/spec/bulk-memory-operations/imports.txt
    /home/dwm/development/WebAssembly/wabt/bin/wast2json out/test/spec/bulk-memory-operations/imports.wast -o out/test/spec/bulk-memory-operations/imports/imports.json --enable-bulk-memory
- test/spec/call_indirect.txt
    /home/dwm/development/WebAssembly/wabt/bin/wast2json out/test/spec/call_indirect.wast -o out/test/spec/call_indirect/call_indirect.json
- test/spec/func.txt
    /home/dwm/development/WebAssembly/wabt/bin/wast2json out/test/spec/func.wast -o out/test/spec/func/func.json
- test/spec/func_ptrs.txt
    /home/dwm/development/WebAssembly/wabt/bin/wast2json out/test/spec/func_ptrs.wast -o out/test/spec/func_ptrs/func_ptrs.json
- test/spec/imports.txt
    /home/dwm/development/WebAssembly/wabt/bin/wast2json out/test/spec/imports.wast -o out/test/spec/imports/imports.json
- test/spec/reference-types/call_indirect.txt
    /home/dwm/development/WebAssembly/wabt/bin/wast2json out/test/spec/reference-types/call_indirect.wast -o out/test/spec/reference-types/call_indirect/call_indirect.json --enable-reference-types
- test/spec/reference-types/imports.txt
    /home/dwm/development/WebAssembly/wabt/bin/wast2json out/test/spec/reference-types/imports.wast -o out/test/spec/reference-types/imports/imports.json --enable-reference-types
- test/wasm2c/spec/call_indirect.txt
    /usr/bin/python3 /home/dwm/development/WebAssembly/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/call_indirect.txt --bindir=/home/dwm/development/WebAssembly/wabt/bin --no-error-cmdline -o out/test/wasm2c/spec/call_indirect
- test/wasm2c/spec/func.txt
    /usr/bin/python3 /home/dwm/development/WebAssembly/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/func.txt --bindir=/home/dwm/development/WebAssembly/wabt/bin --no-error-cmdline -o out/test/wasm2c/spec/func
- test/wasm2c/spec/func_ptrs.txt
    /usr/bin/python3 /home/dwm/development/WebAssembly/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/func_ptrs.wast --bindir=/home/dwm/development/WebAssembly/wabt/bin --no-error-cmdline -o out/test/wasm2c/spec/func_ptrs
- test/wasm2c/spec/imports.txt
    /usr/bin/python3 /home/dwm/development/WebAssembly/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/imports.wast --bindir=/home/dwm/development/WebAssembly/wabt/bin --no-error-cmdline -o out/test/wasm2c/spec/imports

If you were able to get it to work (with the tests passing on CI), can you make your branch available? From that, I could just cherry-pick the commit into this PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/aardappel,18,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-707817828,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","weird, I don't get those errors, instead I get some remaining SIMD errors I haven't solved yet.. I may make a PR later and we can compare",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/aardappel,19,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-709449895,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Ok, my changes are here, and indeed also create these new wasm2c problems.. apparently because these don't run on Windows:
#1560
It may be easiest to wait until @binji is back rather than try to debug this further",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/binji,20,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-713881081,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","Sorry for the long delay on resolving this. Is func.wast the only issue? If so, probably the easiest thing to do is change the expectation for that test to failure, and we can file a bug and resolve it separately.
It looks like other than this problem, the rest of the PR is relatively straightforward.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/silvanshade,21,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-714741843,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.","@binji Yes, it's just the one test in func.wast. I think I can update the PR to expect that test to fail. Will take a look at that soon.",True,{'THUMBS_UP': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1553,2020-09-27T00:09:09Z,2020-10-26T16:37:14Z,2020-10-26T16:37:14Z,MERGED,True,2794,2261,41,https://github.com/silvanshade,Update SIMD support,5,[],https://github.com/WebAssembly/wabt/pull/1553,https://github.com/silvanshade,22,https://github.com/WebAssembly/wabt/pull/1553#issuecomment-715655385,"This PR updates SIMD support corresponding to changes in the WebAssembly/simd proposal repo from the following PRs:
WebAssembly/simd#321
WebAssembly/simd#322
WebAssembly/simd#341
WebAssembly/simd#344
This should not be merged until WebAssembly/testsuite#32 is merged since it needs the updated testsuite using the new syntax for the SIMD tests.
For the moment I have pointed the third_party/testsuite to my local branch which has the recent changes from  WebAssembly/simd merged.
Note that in the PR I referenced for the WebAssembly/testsuite there will be additional (probably minor) breakage from recent changes in other proposal repos but I didn't include fixes for all of those here since I wanted this PR to focus on SIMD.",@binji this should be good to go now I think.,True,{'HOORAY': ['https://github.com/aardappel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1554,2020-09-30T04:30:38Z,2020-10-02T19:27:48Z,2020-10-02T19:27:49Z,MERGED,True,385,35,12,https://github.com/sbc100,Add initial support for extended names sections,2,[],https://github.com/WebAssembly/wabt/pull/1554,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1554,"See: https://github.com/WebAssembly/extended-name-section
Although this is only a phase 1 proposal its seems pretty
straight forward, and is already being implemented in
binaryen.","See: https://github.com/WebAssembly/extended-name-section
Although this is only a phase 1 proposal its seems pretty
straight forward, and is already being implemented in
binaryen.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1555,2020-10-01T00:09:36Z,2020-10-01T00:27:15Z,2020-10-01T00:27:15Z,MERGED,True,120,2347,20,https://github.com/aardappel,Update testsuite to 646b43e,1,[],https://github.com/WebAssembly/wabt/pull/1555,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1555,"(this is HEAD~1 as of this writing, HEAD containing the Memory64 tests which I want to land separately)","(this is HEAD~1 as of this writing, HEAD containing the Memory64 tests which I want to land separately)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1557,2020-10-09T18:14:46Z,2020-12-07T19:19:00Z,2021-01-09T10:06:21Z,MERGED,True,179,29,15,https://github.com/SoniEx2,Port to big-endian platforms (s390x but others can be trivially added),15,[],https://github.com/WebAssembly/wabt/pull/1557,https://github.com/SoniEx2,1,https://github.com/WebAssembly/wabt/pull/1557,"closes #1063
61 59 40 22 13 10 7 1 failing tests https://gist.github.com/SoniEx2/4379beb5909d0d39d52b48a53b7247b7
This ports wabt to big-endian platforms, and also ports the output of wasm2c to big-endian platforms (for cross-compilation needs). It's not specific to s390x other than the makefile changes.
Additionally the following unittests and c-api-tests fail, as they interact with wasm memory but haven't been adjusted to take memory ordering into account (and we think that should be a separate pull request and/or blocked on further specs like e.g. WebAssembly/wasm-c-api#156 ):
unittests:
/home/linux1/wabt/src/test-interp.cc:545: Failure
Expected equality of these values:
  ""Uryyb, JroNffrzoyl!""
  string_data
    Which is: ""Hello, WebAssembly!""
[  FAILED  ] InterpTest.Rot13 (0 ms)


c-api-tests:
Running.. /home/linux1/wabt/out/wasm-c-api-memory
Failed with returncode=1
b'CAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_copy] 92\nCAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_instance_new] 0x1e5beee0 0x1e5c0650\nCAPI: [wasm_extern_vec_new_uninitialized] 4\nCAPI: [wasm_instance_exports] 4\nCAPI: [wasm_module_delete] \nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_memory_copy] \nCAPI: [wasm_memory_same] \nCAPI: [wasm_memory_delete] \nInitializing...\nLoading binary...\nCompiling module...\nInstantiating module...\nExtracting exports...\nChecking memory...\n> Error, expected success\n'
FAIL(1): /home/linux1/wabt/out/wasm-c-api-memory

Other than these, everything else passes.","closes #1063
61 59 40 22 13 10 7 1 failing tests https://gist.github.com/SoniEx2/4379beb5909d0d39d52b48a53b7247b7
This ports wabt to big-endian platforms, and also ports the output of wasm2c to big-endian platforms (for cross-compilation needs). It's not specific to s390x other than the makefile changes.
Additionally the following unittests and c-api-tests fail, as they interact with wasm memory but haven't been adjusted to take memory ordering into account (and we think that should be a separate pull request and/or blocked on further specs like e.g. WebAssembly/wasm-c-api#156 ):
unittests:
/home/linux1/wabt/src/test-interp.cc:545: Failure
Expected equality of these values:
  ""Uryyb, JroNffrzoyl!""
  string_data
    Which is: ""Hello, WebAssembly!""
[  FAILED  ] InterpTest.Rot13 (0 ms)


c-api-tests:
Running.. /home/linux1/wabt/out/wasm-c-api-memory
Failed with returncode=1
b'CAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_copy] 92\nCAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_instance_new] 0x1e5beee0 0x1e5c0650\nCAPI: [wasm_extern_vec_new_uninitialized] 4\nCAPI: [wasm_instance_exports] 4\nCAPI: [wasm_module_delete] \nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_memory_copy] \nCAPI: [wasm_memory_same] \nCAPI: [wasm_memory_delete] \nInitializing...\nLoading binary...\nCompiling module...\nInstantiating module...\nExtracting exports...\nChecking memory...\n> Error, expected success\n'
FAIL(1): /home/linux1/wabt/out/wasm-c-api-memory

Other than these, everything else passes.",True,"{'HOORAY': ['https://github.com/turbolent'], 'THUMBS_UP': ['https://github.com/turbolent']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1557,2020-10-09T18:14:46Z,2020-12-07T19:19:00Z,2021-01-09T10:06:21Z,MERGED,True,179,29,15,https://github.com/SoniEx2,Port to big-endian platforms (s390x but others can be trivially added),15,[],https://github.com/WebAssembly/wabt/pull/1557,https://github.com/SoniEx2,2,https://github.com/WebAssembly/wabt/pull/1557#issuecomment-706558192,"closes #1063
61 59 40 22 13 10 7 1 failing tests https://gist.github.com/SoniEx2/4379beb5909d0d39d52b48a53b7247b7
This ports wabt to big-endian platforms, and also ports the output of wasm2c to big-endian platforms (for cross-compilation needs). It's not specific to s390x other than the makefile changes.
Additionally the following unittests and c-api-tests fail, as they interact with wasm memory but haven't been adjusted to take memory ordering into account (and we think that should be a separate pull request and/or blocked on further specs like e.g. WebAssembly/wasm-c-api#156 ):
unittests:
/home/linux1/wabt/src/test-interp.cc:545: Failure
Expected equality of these values:
  ""Uryyb, JroNffrzoyl!""
  string_data
    Which is: ""Hello, WebAssembly!""
[  FAILED  ] InterpTest.Rot13 (0 ms)


c-api-tests:
Running.. /home/linux1/wabt/out/wasm-c-api-memory
Failed with returncode=1
b'CAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_copy] 92\nCAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_instance_new] 0x1e5beee0 0x1e5c0650\nCAPI: [wasm_extern_vec_new_uninitialized] 4\nCAPI: [wasm_instance_exports] 4\nCAPI: [wasm_module_delete] \nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_memory_copy] \nCAPI: [wasm_memory_same] \nCAPI: [wasm_memory_delete] \nInitializing...\nLoading binary...\nCompiling module...\nInstantiating module...\nExtracting exports...\nChecking memory...\n> Error, expected success\n'
FAIL(1): /home/linux1/wabt/out/wasm-c-api-memory

Other than these, everything else passes.",the gen-spec-js failures seem to be unrelated. not sure what to do about it. (edit: we were running them wrong? ... for whatever reason running make test-gcc-release from a clean clone doesn't work and you have to use mkdir build; cd build; cmake ..; make run-tests instead.),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1557,2020-10-09T18:14:46Z,2020-12-07T19:19:00Z,2021-01-09T10:06:21Z,MERGED,True,179,29,15,https://github.com/SoniEx2,Port to big-endian platforms (s390x but others can be trivially added),15,[],https://github.com/WebAssembly/wabt/pull/1557,https://github.com/SoniEx2,3,https://github.com/WebAssembly/wabt/pull/1557#issuecomment-708744374,"closes #1063
61 59 40 22 13 10 7 1 failing tests https://gist.github.com/SoniEx2/4379beb5909d0d39d52b48a53b7247b7
This ports wabt to big-endian platforms, and also ports the output of wasm2c to big-endian platforms (for cross-compilation needs). It's not specific to s390x other than the makefile changes.
Additionally the following unittests and c-api-tests fail, as they interact with wasm memory but haven't been adjusted to take memory ordering into account (and we think that should be a separate pull request and/or blocked on further specs like e.g. WebAssembly/wasm-c-api#156 ):
unittests:
/home/linux1/wabt/src/test-interp.cc:545: Failure
Expected equality of these values:
  ""Uryyb, JroNffrzoyl!""
  string_data
    Which is: ""Hello, WebAssembly!""
[  FAILED  ] InterpTest.Rot13 (0 ms)


c-api-tests:
Running.. /home/linux1/wabt/out/wasm-c-api-memory
Failed with returncode=1
b'CAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_copy] 92\nCAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_instance_new] 0x1e5beee0 0x1e5c0650\nCAPI: [wasm_extern_vec_new_uninitialized] 4\nCAPI: [wasm_instance_exports] 4\nCAPI: [wasm_module_delete] \nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_memory_copy] \nCAPI: [wasm_memory_same] \nCAPI: [wasm_memory_delete] \nInitializing...\nLoading binary...\nCompiling module...\nInstantiating module...\nExtracting exports...\nChecking memory...\n> Error, expected success\n'
FAIL(1): /home/linux1/wabt/out/wasm-c-api-memory

Other than these, everything else passes.",we're gonna just ignore that one failing test and pretend it doesn't exist,True,{'LAUGH': ['https://github.com/binji']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1557,2020-10-09T18:14:46Z,2020-12-07T19:19:00Z,2021-01-09T10:06:21Z,MERGED,True,179,29,15,https://github.com/SoniEx2,Port to big-endian platforms (s390x but others can be trivially added),15,[],https://github.com/WebAssembly/wabt/pull/1557,https://github.com/SoniEx2,4,https://github.com/WebAssembly/wabt/pull/1557#issuecomment-723513510,"closes #1063
61 59 40 22 13 10 7 1 failing tests https://gist.github.com/SoniEx2/4379beb5909d0d39d52b48a53b7247b7
This ports wabt to big-endian platforms, and also ports the output of wasm2c to big-endian platforms (for cross-compilation needs). It's not specific to s390x other than the makefile changes.
Additionally the following unittests and c-api-tests fail, as they interact with wasm memory but haven't been adjusted to take memory ordering into account (and we think that should be a separate pull request and/or blocked on further specs like e.g. WebAssembly/wasm-c-api#156 ):
unittests:
/home/linux1/wabt/src/test-interp.cc:545: Failure
Expected equality of these values:
  ""Uryyb, JroNffrzoyl!""
  string_data
    Which is: ""Hello, WebAssembly!""
[  FAILED  ] InterpTest.Rot13 (0 ms)


c-api-tests:
Running.. /home/linux1/wabt/out/wasm-c-api-memory
Failed with returncode=1
b'CAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_copy] 92\nCAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_instance_new] 0x1e5beee0 0x1e5c0650\nCAPI: [wasm_extern_vec_new_uninitialized] 4\nCAPI: [wasm_instance_exports] 4\nCAPI: [wasm_module_delete] \nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_memory_copy] \nCAPI: [wasm_memory_same] \nCAPI: [wasm_memory_delete] \nInitializing...\nLoading binary...\nCompiling module...\nInstantiating module...\nExtracting exports...\nChecking memory...\n> Error, expected success\n'
FAIL(1): /home/linux1/wabt/out/wasm-c-api-memory

Other than these, everything else passes.","Now this is pretty much just blocked on figuring out the C API stuff, either adjusting the C API tests to take memory order into account or making the C API copy stuff in the correct order into test-owned buffers and stuff. But at least the interpreter itself and wasm2c work.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1557,2020-10-09T18:14:46Z,2020-12-07T19:19:00Z,2021-01-09T10:06:21Z,MERGED,True,179,29,15,https://github.com/SoniEx2,Port to big-endian platforms (s390x but others can be trivially added),15,[],https://github.com/WebAssembly/wabt/pull/1557,https://github.com/SoniEx2,5,https://github.com/WebAssembly/wabt/pull/1557#issuecomment-733705145,"closes #1063
61 59 40 22 13 10 7 1 failing tests https://gist.github.com/SoniEx2/4379beb5909d0d39d52b48a53b7247b7
This ports wabt to big-endian platforms, and also ports the output of wasm2c to big-endian platforms (for cross-compilation needs). It's not specific to s390x other than the makefile changes.
Additionally the following unittests and c-api-tests fail, as they interact with wasm memory but haven't been adjusted to take memory ordering into account (and we think that should be a separate pull request and/or blocked on further specs like e.g. WebAssembly/wasm-c-api#156 ):
unittests:
/home/linux1/wabt/src/test-interp.cc:545: Failure
Expected equality of these values:
  ""Uryyb, JroNffrzoyl!""
  string_data
    Which is: ""Hello, WebAssembly!""
[  FAILED  ] InterpTest.Rot13 (0 ms)


c-api-tests:
Running.. /home/linux1/wabt/out/wasm-c-api-memory
Failed with returncode=1
b'CAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_copy] 92\nCAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_instance_new] 0x1e5beee0 0x1e5c0650\nCAPI: [wasm_extern_vec_new_uninitialized] 4\nCAPI: [wasm_instance_exports] 4\nCAPI: [wasm_module_delete] \nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_memory_copy] \nCAPI: [wasm_memory_same] \nCAPI: [wasm_memory_delete] \nInitializing...\nLoading binary...\nCompiling module...\nInstantiating module...\nExtracting exports...\nChecking memory...\n> Error, expected success\n'
FAIL(1): /home/linux1/wabt/out/wasm-c-api-memory

Other than these, everything else passes.","okay so we figured out what about the opcodecnt test is failing.
we're not fixing that. 😄 edit: we ""fixed"" it. :p
tl;dr: it has to do with this: https://github.com/WebAssembly/wabt/blob/master/src/binary-reader-opcnt.cc#L140-L181
>>> struct.pack(""<f"", 1.0)
b'\x00\x00\x80?'
>>> struct.pack(""<f"", 2.0)
b'\x00\x00\x00@'
>>> struct.pack("">f"", 1.0)
b'?\x80\x00\x00'
>>> struct.pack("">f"", 2.0)
b'@\x00\x00\x00'",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1557,2020-10-09T18:14:46Z,2020-12-07T19:19:00Z,2021-01-09T10:06:21Z,MERGED,True,179,29,15,https://github.com/SoniEx2,Port to big-endian platforms (s390x but others can be trivially added),15,[],https://github.com/WebAssembly/wabt/pull/1557,https://github.com/binji,6,https://github.com/WebAssembly/wabt/pull/1557#issuecomment-740124489,"closes #1063
61 59 40 22 13 10 7 1 failing tests https://gist.github.com/SoniEx2/4379beb5909d0d39d52b48a53b7247b7
This ports wabt to big-endian platforms, and also ports the output of wasm2c to big-endian platforms (for cross-compilation needs). It's not specific to s390x other than the makefile changes.
Additionally the following unittests and c-api-tests fail, as they interact with wasm memory but haven't been adjusted to take memory ordering into account (and we think that should be a separate pull request and/or blocked on further specs like e.g. WebAssembly/wasm-c-api#156 ):
unittests:
/home/linux1/wabt/src/test-interp.cc:545: Failure
Expected equality of these values:
  ""Uryyb, JroNffrzoyl!""
  string_data
    Which is: ""Hello, WebAssembly!""
[  FAILED  ] InterpTest.Rot13 (0 ms)


c-api-tests:
Running.. /home/linux1/wabt/out/wasm-c-api-memory
Failed with returncode=1
b'CAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_copy] 92\nCAPI: [wasm_byte_vec_new_uninitialized] 92\nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_instance_new] 0x1e5beee0 0x1e5c0650\nCAPI: [wasm_extern_vec_new_uninitialized] 4\nCAPI: [wasm_instance_exports] 4\nCAPI: [wasm_module_delete] \nCAPI: [wasm_byte_vec_delete] \nCAPI: [wasm_memory_copy] \nCAPI: [wasm_memory_same] \nCAPI: [wasm_memory_delete] \nInitializing...\nLoading binary...\nCompiling module...\nInstantiating module...\nExtracting exports...\nChecking memory...\n> Error, expected success\n'
FAIL(1): /home/linux1/wabt/out/wasm-c-api-memory

Other than these, everything else passes.","okay so we figured out what about the opcodecnt test is failing.
we're not fixing that. smile edit: we ""fixed"" it. :p

Oh, nasty :) Thanks for the fix.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1559,2020-10-14T02:59:51Z,2020-10-21T22:32:46Z,2020-10-21T22:32:46Z,MERGED,True,4,0,1,https://github.com/bxq2011hust,Fix compile failed on Ubuntu 18.04 aarch64 cmake3.10.2,1,[],https://github.com/WebAssembly/wabt/pull/1559,https://github.com/bxq2011hust,1,https://github.com/WebAssembly/wabt/pull/1559,"I try to compile wabt on Ubuntu 18.04 aarch64 with gcc 7.5.0 and cmake 3.10.2, failed with the error below:

the wabt source code is downloaded from release page v1.0.19 tar package which without the .git dir.
I made a tiny modify to fix this","I try to compile wabt on Ubuntu 18.04 aarch64 with gcc 7.5.0 and cmake 3.10.2, failed with the error below:

the wabt source code is downloaded from release page v1.0.19 tar package which without the .git dir.
I made a tiny modify to fix this",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1560,2020-10-15T16:24:59Z,2020-10-26T22:46:17Z,2020-10-26T22:46:17Z,MERGED,True,932,65,33,https://github.com/aardappel,Updates for Memory64 proposal tests from latest `testsuite`,1,[],https://github.com/WebAssembly/wabt/pull/1560,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1560,"This involves changes for Memory64, SIMD, and misc others.
WiP - No need to review yet.. trying to test with CI","This involves changes for Memory64, SIMD, and misc others.
WiP - No need to review yet.. trying to test with CI",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1560,2020-10-15T16:24:59Z,2020-10-26T22:46:17Z,2020-10-26T22:46:17Z,MERGED,True,932,65,33,https://github.com/aardappel,Updates for Memory64 proposal tests from latest `testsuite`,1,[],https://github.com/WebAssembly/wabt/pull/1560,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1560#issuecomment-709450800,"This involves changes for Memory64, SIMD, and misc others.
WiP - No need to review yet.. trying to test with CI","This PR is similar to #1553, but also fixes Memory64 problems. It doesn't yet fix all the SIMD problems the other PR fixes, though. And neither one knows how to fix the func.wast related problems uniformly.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1560,2020-10-15T16:24:59Z,2020-10-26T22:46:17Z,2020-10-26T22:46:17Z,MERGED,True,932,65,33,https://github.com/aardappel,Updates for Memory64 proposal tests from latest `testsuite`,1,[],https://github.com/WebAssembly/wabt/pull/1560,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1560#issuecomment-713881943,"This involves changes for Memory64, SIMD, and misc others.
WiP - No need to review yet.. trying to test with CI","It seems like it may be better to land #1553, then land this change on top. The func.wast issues are probably best to fix in another PR.",True,{'THUMBS_UP': ['https://github.com/aardappel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1560,2020-10-15T16:24:59Z,2020-10-26T22:46:17Z,2020-10-26T22:46:17Z,MERGED,True,932,65,33,https://github.com/aardappel,Updates for Memory64 proposal tests from latest `testsuite`,1,[],https://github.com/WebAssembly/wabt/pull/1560,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1560#issuecomment-716674890,"This involves changes for Memory64, SIMD, and misc others.
WiP - No need to review yet.. trying to test with CI","Now that #1553 landed, would you mind updating this PR?",True,{'THUMBS_UP': ['https://github.com/aardappel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1564,2020-11-03T21:15:38Z,2020-11-03T22:11:14Z,2020-11-03T22:11:16Z,MERGED,True,548,539,11,https://github.com/binji,"Rename atomic.notify, *.atomic.wait",1,[],https://github.com/WebAssembly/wabt/pull/1564,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1564,"atomic.notify   -> memory.atomic.notify
i32.atomic.wait -> memory.atomic.wait32
i64.atomic.wait -> memory.atomic.wait64
These were renamed upstream a while ago, but the new names were not
added to wabt.","atomic.notify   -> memory.atomic.notify
i32.atomic.wait -> memory.atomic.wait32
i64.atomic.wait -> memory.atomic.wait64
These were renamed upstream a while ago, but the new names were not
added to wabt.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1569,2020-11-11T00:43:41Z,2020-11-11T17:43:42Z,2020-11-11T17:43:43Z,MERGED,True,23,7,3,https://github.com/binji,Element offset expr is required when bulk disabled,1,[],https://github.com/WebAssembly/wabt/pull/1569,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1569,"Text parsing was allowing element segments without an offset expression
even when the bulk memory flag was disabled.
Fixes #1566.","Text parsing was allowing element segments without an offset expression
even when the bulk memory flag was disabled.
Fixes #1566.",True,{'THUMBS_UP': ['https://github.com/igrep']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1570,2020-11-14T05:31:19Z,2020-11-16T17:16:16Z,2020-11-16T17:16:17Z,MERGED,True,126,127,91,https://github.com/radu-matei,Update output from type to func type in binary writer and reader,1,[],https://github.com/WebAssembly/wabt/pull/1570,https://github.com/radu-matei,1,https://github.com/WebAssembly/wabt/pull/1570,"This commit addresses the first item of #1375 - specifically, it changes the output from type to func type in the binary writer, and updates the tests.
There are also changes in the third party test suite - what is the procedure for updating the upstream test suite repository? Should there be a PR to its repo first with these changes?
$ cd third_party/testsuite && git status
HEAD detached at 18f8340
        modified:   binary.wast
        modified:   proposals/bulk-memory-operations/binary.wast
        modified:   proposals/exception-handling/binary.wast
        modified:   proposals/function-references/binary.wast
        modified:   proposals/reference-types/binary.wast
        modified:   proposals/simd/simd_const.wast","This commit addresses the first item of #1375 - specifically, it changes the output from type to func type in the binary writer, and updates the tests.
There are also changes in the third party test suite - what is the procedure for updating the upstream test suite repository? Should there be a PR to its repo first with these changes?
$ cd third_party/testsuite && git status
HEAD detached at 18f8340
        modified:   binary.wast
        modified:   proposals/bulk-memory-operations/binary.wast
        modified:   proposals/exception-handling/binary.wast
        modified:   proposals/function-references/binary.wast
        modified:   proposals/reference-types/binary.wast
        modified:   proposals/simd/simd_const.wast",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1572,2020-11-20T02:57:58Z,2020-11-20T18:42:42Z,2020-11-20T18:42:43Z,MERGED,True,11,5,4,https://github.com/sbc100,Add new TLS relocation types,1,[],https://github.com/WebAssembly/wabt/pull/1572,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1572,See https://reviews.llvm.org/D91276,See https://reviews.llvm.org/D91276,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1573,2020-11-20T03:10:09Z,2020-11-20T18:41:17Z,2020-11-20T18:41:18Z,MERGED,True,33,6,4,https://github.com/sbc100,wasm-objdump: Honor extended names section,1,[],https://github.com/WebAssembly/wabt/pull/1573,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1573,This should really have been part of #1554,This should really have been part of #1554,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1574,2020-11-20T21:43:11Z,2020-11-24T00:38:40Z,2020-11-28T18:41:39Z,MERGED,True,17,3,2,https://github.com/binji,Fix func.wast spec test,1,[],https://github.com/WebAssembly/wabt/pull/1574,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1574,"Fix spec test failure in func.wast
The wasm text format allows the use of a function type to be specified
one of three ways:
;; 1. As an explicit type index or symbol
(type 0)

;; 2. As params and results
(param i32) (result i64)

;; 3. Both; an explicit type index, params and results
(type 0) (param i32) (result i64)

Options 2 and 3 are text format sugar, since the binary format always
encodes these as an explicit type index.
Option 3 needs to check that the type at that index matches the
explicitly given params and results. Normally checking whether an index
is in bounds is a validation step, not a syntax checking step. However,
in this case if the index is out of bounds, then the types cannot be
checked, so it must be a syntax error.","Fix spec test failure in func.wast
The wasm text format allows the use of a function type to be specified
one of three ways:
;; 1. As an explicit type index or symbol
(type 0)

;; 2. As params and results
(param i32) (result i64)

;; 3. Both; an explicit type index, params and results
(type 0) (param i32) (result i64)

Options 2 and 3 are text format sugar, since the binary format always
encodes these as an explicit type index.
Option 3 needs to check that the type at that index matches the
explicitly given params and results. Normally checking whether an index
is in bounds is a validation step, not a syntax checking step. However,
in this case if the index is out of bounds, then the types cannot be
checked, so it must be a syntax error.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1576,2020-11-26T06:46:37Z,2020-12-02T03:55:16Z,2020-12-02T15:37:04Z,MERGED,True,1,2,1,https://github.com/Praveer1981,"Let cmake add ""-g"" flag when it is needed",1,[],https://github.com/WebAssembly/wabt/pull/1576,https://github.com/Praveer1981,1,https://github.com/WebAssembly/wabt/pull/1576,"Reference: Issue#1571
Problem:
It used to add the debug info in the binary even if below command was used.
$ cmake .. -DCMAKE_BUILD_TYPE=Release
$ cmake --build .


Solution :
Let the cmake add -g flag when it is needed.
Test 1: run below command
$ cmake .. -DCMAKE_BUILD_TYPE=Release
$ cmake --build .


It will generate binary without debug info
Test 2:
$ cmake .. -DCMAKE_BUILD_TYPE=Debug
$ cmake --build .

It will generate binary with debug info","Reference: Issue#1571
Problem:
It used to add the debug info in the binary even if below command was used.
$ cmake .. -DCMAKE_BUILD_TYPE=Release
$ cmake --build .


Solution :
Let the cmake add -g flag when it is needed.
Test 1: run below command
$ cmake .. -DCMAKE_BUILD_TYPE=Release
$ cmake --build .


It will generate binary without debug info
Test 2:
$ cmake .. -DCMAKE_BUILD_TYPE=Debug
$ cmake --build .

It will generate binary with debug info",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1576,2020-11-26T06:46:37Z,2020-12-02T03:55:16Z,2020-12-02T15:37:04Z,MERGED,True,1,2,1,https://github.com/Praveer1981,"Let cmake add ""-g"" flag when it is needed",1,[],https://github.com/WebAssembly/wabt/pull/1576,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1576#issuecomment-735955936,"Reference: Issue#1571
Problem:
It used to add the debug info in the binary even if below command was used.
$ cmake .. -DCMAKE_BUILD_TYPE=Release
$ cmake --build .


Solution :
Let the cmake add -g flag when it is needed.
Test 1: run below command
$ cmake .. -DCMAKE_BUILD_TYPE=Release
$ cmake --build .


It will generate binary without debug info
Test 2:
$ cmake .. -DCMAKE_BUILD_TYPE=Debug
$ cmake --build .

It will generate binary with debug info",Certainly seems reasonable to me.  @binji do you remember why the explicit -g was added here in the first place?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1576,2020-11-26T06:46:37Z,2020-12-02T03:55:16Z,2020-12-02T15:37:04Z,MERGED,True,1,2,1,https://github.com/Praveer1981,"Let cmake add ""-g"" flag when it is needed",1,[],https://github.com/WebAssembly/wabt/pull/1576,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1576#issuecomment-735957576,"Reference: Issue#1571
Problem:
It used to add the debug info in the binary even if below command was used.
$ cmake .. -DCMAKE_BUILD_TYPE=Release
$ cmake --build .


Solution :
Let the cmake add -g flag when it is needed.
Test 1: run below command
$ cmake .. -DCMAKE_BUILD_TYPE=Release
$ cmake --build .


It will generate binary without debug info
Test 2:
$ cmake .. -DCMAKE_BUILD_TYPE=Debug
$ cmake --build .

It will generate binary with debug info",It looks like the -g goes right back to the initial commit so I guess its a historical artifact: c91538c,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1579,2020-12-02T22:34:11Z,2020-12-03T22:08:18Z,2020-12-03T22:08:19Z,MERGED,True,322,131,112,https://github.com/sbc100,Use stderr for all logging and error output,1,[],https://github.com/WebAssembly/wabt/pull/1579,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1579,"I'm not sure why we were using stdout but the convention is normally to
write all logging and error message to stderr.","I'm not sure why we were using stdout but the convention is normally to
write all logging and error message to stderr.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1580,2020-12-02T22:37:33Z,2020-12-03T22:08:32Z,2020-12-03T22:08:33Z,MERGED,True,1,1,1,https://github.com/sbc100,Fix warning. NFC.,1,[],https://github.com/WebAssembly/wabt/pull/1580,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1580,We really should enable Werror on CI (See #1185),We really should enable Werror on CI (See #1185),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1581,2020-12-03T23:08:04Z,2020-12-04T02:24:52Z,2020-12-04T02:24:53Z,MERGED,True,52,12,2,https://github.com/sbc100,wasm-objdump: display name of start function,1,[],https://github.com/WebAssembly/wabt/pull/1581,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1581,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1582,2020-12-04T03:51:12Z,2020-12-04T05:24:12Z,2020-12-04T05:24:13Z,MERGED,True,78,37,14,https://github.com/binji,Select instr. with multiple results is invalid,1,[],https://github.com/WebAssembly/wabt/pull/1582,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1582,"The reference-types proposal adds a select instruction with a type
vector, but any number greater than 1 is invalid.
Fixes #1577.","The reference-types proposal adds a select instruction with a type
vector, but any number greater than 1 is invalid.
Fixes #1577.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1583,2020-12-04T05:30:10Z,2020-12-04T19:09:16Z,2020-12-04T19:09:17Z,MERGED,True,18,18,2,https://github.com/binji,Fix emscripten build; rebuild libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/1583,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1583,Not sure how this line got removed...,Not sure how this line got removed...,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1585,2020-12-07T01:36:24Z,2020-12-30T05:01:05Z,2020-12-30T05:01:06Z,MERGED,True,1,1,1,https://github.com/binji,Update gtest,1,[],https://github.com/WebAssembly/wabt/pull/1585,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1585,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1585,2020-12-07T01:36:24Z,2020-12-30T05:01:05Z,2020-12-30T05:01:06Z,MERGED,True,1,1,1,https://github.com/binji,Update gtest,1,[],https://github.com/WebAssembly/wabt/pull/1585,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1585#issuecomment-752328195,,"Can't remember, to be honest! I don't think so, since there were no code changes required.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1586,2020-12-07T19:33:24Z,2021-01-10T03:49:57Z,2021-01-10T03:49:58Z,MERGED,True,44,1,2,https://github.com/binji,Add wasm_importtype_* functions to wasm-c-api,1,[],https://github.com/WebAssembly/wabt/pull/1586,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1586,,,True,{'THUMBS_UP': ['https://github.com/Dakror']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1586,2020-12-07T19:33:24Z,2021-01-10T03:49:57Z,2021-01-10T03:49:58Z,MERGED,True,44,1,2,https://github.com/binji,Add wasm_importtype_* functions to wasm-c-api,1,[],https://github.com/WebAssembly/wabt/pull/1586,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1586#issuecomment-740132822,,See #1578.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1588,2020-12-09T20:04:28Z,2020-12-10T06:09:40Z,2020-12-10T06:09:41Z,MERGED,True,108,85,4,https://github.com/sbc100,wasm-objdump: Report data segment names,1,[],https://github.com/WebAssembly/wabt/pull/1588,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1588,Also fix ordering of data names and table segment names.,Also fix ordering of data names and table segment names.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1589,2020-12-12T11:56:02Z,2020-12-14T19:25:42Z,2020-12-14T19:25:42Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix #1575 wasm2c: i64_load16_u not being used,1,[],https://github.com/WebAssembly/wabt/pull/1589,https://github.com/SoniEx2,1,https://github.com/WebAssembly/wabt/pull/1589,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1590,2020-12-14T18:49:58Z,2020-12-14T19:29:50Z,2020-12-14T19:37:21Z,CLOSED,False,1,1,1,https://github.com/steven-johnson,Avoid warning when building with -Wsign-compare,1,[],https://github.com/WebAssembly/wabt/pull/1590,https://github.com/steven-johnson,1,https://github.com/WebAssembly/wabt/pull/1590,Just a trivial warning fix.,Just a trivial warning fix.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1590,2020-12-14T18:49:58Z,2020-12-14T19:29:50Z,2020-12-14T19:37:21Z,CLOSED,False,1,1,1,https://github.com/steven-johnson,Avoid warning when building with -Wsign-compare,1,[],https://github.com/WebAssembly/wabt/pull/1590,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1590#issuecomment-744660230,Just a trivial warning fix.,Looks like this was already fixed here: #1580.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1590,2020-12-14T18:49:58Z,2020-12-14T19:29:50Z,2020-12-14T19:37:21Z,CLOSED,False,1,1,1,https://github.com/steven-johnson,Avoid warning when building with -Wsign-compare,1,[],https://github.com/WebAssembly/wabt/pull/1590,https://github.com/steven-johnson,3,https://github.com/WebAssembly/wabt/pull/1590#issuecomment-744664209,Just a trivial warning fix.,"(ah, sorry, I was building against 1.0.20 and neglected to check master!)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1592,2020-12-17T03:18:35Z,2020-12-17T20:23:01Z,2020-12-17T20:23:01Z,MERGED,True,132,0,2,https://github.com/ngzhian,"Add script to generate html from man, and generate wasm-decompile html",1,[],https://github.com/WebAssembly/wabt/pull/1592,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1592,"The script regenerates html from all man pages. I ran it once, and only
checked in wasm-decompile.1.html.","The script regenerates html from all man pages. I ran it once, and only
checked in wasm-decompile.1.html.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1592,2020-12-17T03:18:35Z,2020-12-17T20:23:01Z,2020-12-17T20:23:01Z,MERGED,True,132,0,2,https://github.com/ngzhian,"Add script to generate html from man, and generate wasm-decompile html",1,[],https://github.com/WebAssembly/wabt/pull/1592,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1592#issuecomment-747680397,"The script regenerates html from all man pages. I ran it once, and only
checked in wasm-decompile.1.html.","Awesome, thanks for fixing :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1595,2021-01-04T04:03:46Z,,2021-03-22T16:57:01Z,OPEN,False,31,8,3,https://github.com/rusty122,Report missing section features in wasm2wat (#1197),1,[],https://github.com/WebAssembly/wabt/pull/1595,https://github.com/rusty122,1,https://github.com/WebAssembly/wabt/pull/1595,"Ran into #1197 when using wasm2wat so I took a stab at adding hints for missing features like --enable-bulk-memory.
Previously, it seems like looping through WASM sections would return early for these errors (ignoring stop_on_first_error) since the ERROR_UNLESS macro will cause ReadSections to return Error for missing section features.
With this PR, we accumulate a list of the missing features in missing_section_features and print them out with a helpful error message when returning from ReadSections - this makes it easy to extend in the future. Took some inspiration from the thread on this un-merged PR tackling the same issue. We shouldn't run into any cases of reporting the same feature missing multiple times because there's already a guard for multiple section definitions.
See the updated test cases for what this looks like - happy to update the messaging if there are any suggestions","Ran into #1197 when using wasm2wat so I took a stab at adding hints for missing features like --enable-bulk-memory.
Previously, it seems like looping through WASM sections would return early for these errors (ignoring stop_on_first_error) since the ERROR_UNLESS macro will cause ReadSections to return Error for missing section features.
With this PR, we accumulate a list of the missing features in missing_section_features and print them out with a helpful error message when returning from ReadSections - this makes it easy to extend in the future. Took some inspiration from the thread on this un-merged PR tackling the same issue. We shouldn't run into any cases of reporting the same feature missing multiple times because there's already a guard for multiple section definitions.
See the updated test cases for what this looks like - happy to update the messaging if there are any suggestions",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1595,2021-01-04T04:03:46Z,,2021-03-22T16:57:01Z,OPEN,False,31,8,3,https://github.com/rusty122,Report missing section features in wasm2wat (#1197),1,[],https://github.com/WebAssembly/wabt/pull/1595,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1595#issuecomment-776998062,"Ran into #1197 when using wasm2wat so I took a stab at adding hints for missing features like --enable-bulk-memory.
Previously, it seems like looping through WASM sections would return early for these errors (ignoring stop_on_first_error) since the ERROR_UNLESS macro will cause ReadSections to return Error for missing section features.
With this PR, we accumulate a list of the missing features in missing_section_features and print them out with a helpful error message when returning from ReadSections - this makes it easy to extend in the future. Took some inspiration from the thread on this un-merged PR tackling the same issue. We shouldn't run into any cases of reporting the same feature missing multiple times because there's already a guard for multiple section definitions.
See the updated test cases for what this looks like - happy to update the messaging if there are any suggestions","Thanks for looking into this, and sorry for the very long review delay. Like the previous PR, I think I'd prefer something a bit more comprehensive to handle missing features (i.e. collecting all _enabled() checks that lead to errors in a separate Features struct, then display those to the user before exiting).
That said, it seems like this error hits a lot of new users, so maybe a simpler solution for the common case would be OK. In that case, I think integrating the flag directly into the error (as was done in the previous PR) would be best.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1595,2021-01-04T04:03:46Z,,2021-03-22T16:57:01Z,OPEN,False,31,8,3,https://github.com/rusty122,Report missing section features in wasm2wat (#1197),1,[],https://github.com/WebAssembly/wabt/pull/1595,https://github.com/rusty122,3,https://github.com/WebAssembly/wabt/pull/1595#issuecomment-778273108,"Ran into #1197 when using wasm2wat so I took a stab at adding hints for missing features like --enable-bulk-memory.
Previously, it seems like looping through WASM sections would return early for these errors (ignoring stop_on_first_error) since the ERROR_UNLESS macro will cause ReadSections to return Error for missing section features.
With this PR, we accumulate a list of the missing features in missing_section_features and print them out with a helpful error message when returning from ReadSections - this makes it easy to extend in the future. Took some inspiration from the thread on this un-merged PR tackling the same issue. We shouldn't run into any cases of reporting the same feature missing multiple times because there's already a guard for multiple section definitions.
See the updated test cases for what this looks like - happy to update the messaging if there are any suggestions","Like the previous PR, I think I'd prefer something a bit more comprehensive to handle missing features (i.e. collecting all _enabled() checks that lead to errors in a separate Features struct, then display those to the user before exiting).

Oh that's sort of what I was going for - collecting the necessary but not enabled features in a vector and reporting them at the end of parsing - this should catch both --enable-bulk-memory and --enable-exceptions and report them together before ending the parsing stage. Are there other features that I missed? I assumed this we could catch all the missing features in binary-reader.cc but maybe there needs to be a more extensive solution if missing features get caught in other parts of the codebase",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1595,2021-01-04T04:03:46Z,,2021-03-22T16:57:01Z,OPEN,False,31,8,3,https://github.com/rusty122,Report missing section features in wasm2wat (#1197),1,[],https://github.com/WebAssembly/wabt/pull/1595,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1595#issuecomment-784674071,"Ran into #1197 when using wasm2wat so I took a stab at adding hints for missing features like --enable-bulk-memory.
Previously, it seems like looping through WASM sections would return early for these errors (ignoring stop_on_first_error) since the ERROR_UNLESS macro will cause ReadSections to return Error for missing section features.
With this PR, we accumulate a list of the missing features in missing_section_features and print them out with a helpful error message when returning from ReadSections - this makes it easy to extend in the future. Took some inspiration from the thread on this un-merged PR tackling the same issue. We shouldn't run into any cases of reporting the same feature missing multiple times because there's already a guard for multiple section definitions.
See the updated test cases for what this looks like - happy to update the messaging if there are any suggestions","I assumed this we could catch all the missing features in binary-reader.cc but maybe there needs to be a more extensive solution if missing features get caught in other parts of the codebase

Yeah, features are checked in a lot of places. binary-reader.cc checks features in quite a few other places (search for _enabled() in that file). Then features are also checked when reading the text format too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1596,2021-01-19T02:25:50Z,2021-02-09T20:12:02Z,2021-02-09T20:18:55Z,MERGED,True,2542,1784,77,https://github.com/takikawa,Update exception handling support to current proposal,4,[],https://github.com/WebAssembly/wabt/pull/1596,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1596,"This PR updates the support of exception handling to the latest proposal (that is compatible with future 2-phase exception handling) described in WebAssembly/exception-handling#137 and WebAssembly/exception-handling#143.

Adds back tagged catch $e, catch_all, and rethrow N from a previous version of wabt, but with updates to match the current spec (e.g., catch_all shares an opcode with else, rethrow's depth indexes only catch blocks, etc).
Adds unwind and delegate instructions.
Removes exnref and br_on_exn.
Updates relevant tests.

There are some details that could still change (e.g., maybe how delegate's depth is validated), but I'd be happy to submit further PRs if the spec details change.","This PR updates the support of exception handling to the latest proposal (that is compatible with future 2-phase exception handling) described in WebAssembly/exception-handling#137 and WebAssembly/exception-handling#143.

Adds back tagged catch $e, catch_all, and rethrow N from a previous version of wabt, but with updates to match the current spec (e.g., catch_all shares an opcode with else, rethrow's depth indexes only catch blocks, etc).
Adds unwind and delegate instructions.
Removes exnref and br_on_exn.
Updates relevant tests.

There are some details that could still change (e.g., maybe how delegate's depth is validated), but I'd be happy to submit further PRs if the spec details change.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1596,2021-01-19T02:25:50Z,2021-02-09T20:12:02Z,2021-02-09T20:18:55Z,MERGED,True,2542,1784,77,https://github.com/takikawa,Update exception handling support to current proposal,4,[],https://github.com/WebAssembly/wabt/pull/1596,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/1596#issuecomment-775504340,"This PR updates the support of exception handling to the latest proposal (that is compatible with future 2-phase exception handling) described in WebAssembly/exception-handling#137 and WebAssembly/exception-handling#143.

Adds back tagged catch $e, catch_all, and rethrow N from a previous version of wabt, but with updates to match the current spec (e.g., catch_all shares an opcode with else, rethrow's depth indexes only catch blocks, etc).
Adds unwind and delegate instructions.
Removes exnref and br_on_exn.
Updates relevant tests.

There are some details that could still change (e.g., maybe how delegate's depth is validated), but I'd be happy to submit further PRs if the spec details change.","I just noticed (after the discussion in #1604, thanks for pointing it out) that this PR doesn't actually solve the problem that made me notice the opcode problem, (because I was only using the disassembler). Namely wasm-objdump prints opcode 0x5 as else rather than catch-all even in the context of try. Presumably it's just going directly from opcode.def, (which doesn't have catch_all in this PR). But maybe let's not fix this until we decide whether we want to keep the opcodes as they are or change them.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1596,2021-01-19T02:25:50Z,2021-02-09T20:12:02Z,2021-02-09T20:18:55Z,MERGED,True,2542,1784,77,https://github.com/takikawa,Update exception handling support to current proposal,4,[],https://github.com/WebAssembly/wabt/pull/1596,https://github.com/aheejin,3,https://github.com/WebAssembly/wabt/pull/1596#issuecomment-776124692,"This PR updates the support of exception handling to the latest proposal (that is compatible with future 2-phase exception handling) described in WebAssembly/exception-handling#137 and WebAssembly/exception-handling#143.

Adds back tagged catch $e, catch_all, and rethrow N from a previous version of wabt, but with updates to match the current spec (e.g., catch_all shares an opcode with else, rethrow's depth indexes only catch blocks, etc).
Adds unwind and delegate instructions.
Removes exnref and br_on_exn.
Updates relevant tests.

There are some details that could still change (e.g., maybe how delegate's depth is validated), but I'd be happy to submit further PRs if the spec details change.",Thanks @takikawa! By the way can I merge this? If the opcode is the issue we can fix it later.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1596,2021-01-19T02:25:50Z,2021-02-09T20:12:02Z,2021-02-09T20:18:55Z,MERGED,True,2542,1784,77,https://github.com/takikawa,Update exception handling support to current proposal,4,[],https://github.com/WebAssembly/wabt/pull/1596,https://github.com/takikawa,4,https://github.com/WebAssembly/wabt/pull/1596#issuecomment-776207414,"This PR updates the support of exception handling to the latest proposal (that is compatible with future 2-phase exception handling) described in WebAssembly/exception-handling#137 and WebAssembly/exception-handling#143.

Adds back tagged catch $e, catch_all, and rethrow N from a previous version of wabt, but with updates to match the current spec (e.g., catch_all shares an opcode with else, rethrow's depth indexes only catch blocks, etc).
Adds unwind and delegate instructions.
Removes exnref and br_on_exn.
Updates relevant tests.

There are some details that could still change (e.g., maybe how delegate's depth is validated), but I'd be happy to submit further PRs if the spec details change.","@aheejin Sure, no issues on my end with having it merged. AFAIK I've addressed all the comments in review. Thanks!
I'd also be happy to submit a PR afterwards if the opcode changes.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1597,2021-01-20T19:00:49Z,2021-01-29T21:19:20Z,2021-01-29T21:59:02Z,MERGED,True,1,1,1,https://github.com/cjihrig,update uvwasi repo,1,[],https://github.com/WebAssembly/wabt/pull/1597,https://github.com/cjihrig,1,https://github.com/WebAssembly/wabt/pull/1597,"uvwasi was transferred into the Node.js GitHub org.
This commit updates the project's source repo.","uvwasi was transferred into the Node.js GitHub org.
This commit updates the project's source repo.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1598,2021-01-25T07:30:09Z,2021-02-24T01:34:46Z,2021-02-24T01:34:46Z,MERGED,True,30,4,1,https://github.com/IWANABETHATGUY,feat: 🎸 drag file to editor trigger recompile,3,[],https://github.com/WebAssembly/wabt/pull/1598,https://github.com/IWANABETHATGUY,1,https://github.com/WebAssembly/wabt/pull/1598,"add two feature :

drag file to editor now will trigger reparse the wasm to wat
cache the features user checked, so user no need to reselect the features every open.","add two feature :

drag file to editor now will trigger reparse the wasm to wat
cache the features user checked, so user no need to reselect the features every open.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1598,2021-01-25T07:30:09Z,2021-02-24T01:34:46Z,2021-02-24T01:34:46Z,MERGED,True,30,4,1,https://github.com/IWANABETHATGUY,feat: 🎸 drag file to editor trigger recompile,3,[],https://github.com/WebAssembly/wabt/pull/1598,https://github.com/IWANABETHATGUY,2,https://github.com/WebAssembly/wabt/pull/1598#issuecomment-766612359,"add two feature :

drag file to editor now will trigger reparse the wasm to wat
cache the features user checked, so user no need to reselect the features every open.",,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1598,2021-01-25T07:30:09Z,2021-02-24T01:34:46Z,2021-02-24T01:34:46Z,MERGED,True,30,4,1,https://github.com/IWANABETHATGUY,feat: 🎸 drag file to editor trigger recompile,3,[],https://github.com/WebAssembly/wabt/pull/1598,https://github.com/IWANABETHATGUY,3,https://github.com/WebAssembly/wabt/pull/1598#issuecomment-767653353,"add two feature :

drag file to editor now will trigger reparse the wasm to wat
cache the features user checked, so user no need to reselect the features every open.",@binji could you please help for review?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1598,2021-01-25T07:30:09Z,2021-02-24T01:34:46Z,2021-02-24T01:34:46Z,MERGED,True,30,4,1,https://github.com/IWANABETHATGUY,feat: 🎸 drag file to editor trigger recompile,3,[],https://github.com/WebAssembly/wabt/pull/1598,https://github.com/IWANABETHATGUY,4,https://github.com/WebAssembly/wabt/pull/1598#issuecomment-777263320,"add two feature :

drag file to editor now will trigger reparse the wasm to wat
cache the features user checked, so user no need to reselect the features every open.",I have fixed these problem.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1599,2021-01-26T05:27:07Z,2021-01-29T23:06:31Z,2021-01-29T23:06:32Z,MERGED,True,43,26,2,https://github.com/sbc100,objdump: Set table name based on import name,1,[],https://github.com/WebAssembly/wabt/pull/1599,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1599,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1602,2021-02-05T16:00:00Z,,2021-04-20T17:29:08Z,OPEN,False,5,1,1,https://github.com/basvandijk,Create a static wasm C API instead of shared,4,[],https://github.com/WebAssembly/wabt/pull/1602,https://github.com/basvandijk,1,https://github.com/WebAssembly/wabt/pull/1602,This enables building the wabt-sys Rust crate statically using musl.,This enables building the wabt-sys Rust crate statically using musl.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1605,2021-02-11T02:47:03Z,2021-02-24T01:35:58Z,2021-02-24T01:35:58Z,MERGED,True,42,1,3,https://github.com/takikawa,Fix checking of delegate target block kind.,1,[],https://github.com/WebAssembly/wabt/pull/1605,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1605,This PR fixes an issue with the validation of the delegate exception instruction: it was failing to check that the delegate target block was a valid kind of block. It should now follow the clarified behavior of delegate from this issue: WebAssembly/exception-handling#146,This PR fixes an issue with the validation of the delegate exception instruction: it was failing to check that the delegate target block was a valid kind of block. It should now follow the clarified behavior of delegate from this issue: WebAssembly/exception-handling#146,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1608,2021-02-17T04:00:30Z,2021-02-18T15:09:33Z,2021-02-18T17:41:09Z,MERGED,True,203,47,20,https://github.com/takikawa,Update rethrow depth handling and catch_all opcode,2,[],https://github.com/WebAssembly/wabt/pull/1608,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1608,"This PR updates exception handling support to match the most recent spec explainer (see WebAssembly/exception-handling#137). In particular, it fixes the handling of rethrow's depth argument and changes the catch_all opcode. Tests are also expanded (with test cases taken from spec issue examples).","This PR updates exception handling support to match the most recent spec explainer (see WebAssembly/exception-handling#137). In particular, it fixes the handling of rethrow's depth argument and changes the catch_all opcode. Tests are also expanded (with test cases taken from spec issue examples).",True,{'THUMBS_UP': ['https://github.com/aheejin']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1608,2021-02-17T04:00:30Z,2021-02-18T15:09:33Z,2021-02-18T17:41:09Z,MERGED,True,203,47,20,https://github.com/takikawa,Update rethrow depth handling and catch_all opcode,2,[],https://github.com/WebAssembly/wabt/pull/1608,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1608#issuecomment-781409281,"This PR updates exception handling support to match the most recent spec explainer (see WebAssembly/exception-handling#137). In particular, it fixes the handling of rethrow's depth argument and changes the catch_all opcode. Tests are also expanded (with test cases taken from spec issue examples).",Thanks for review! :) I don't have merge permissions so would appreciate someone who does merging this in.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1608,2021-02-17T04:00:30Z,2021-02-18T15:09:33Z,2021-02-18T17:41:09Z,MERGED,True,203,47,20,https://github.com/takikawa,Update rethrow depth handling and catch_all opcode,2,[],https://github.com/WebAssembly/wabt/pull/1608,https://github.com/aheejin,3,https://github.com/WebAssembly/wabt/pull/1608#issuecomment-781473004,"This PR updates exception handling support to match the most recent spec explainer (see WebAssembly/exception-handling#137). In particular, it fixes the handling of rethrow's depth argument and changes the catch_all opcode. Tests are also expanded (with test cases taken from spec issue examples).","@takikawa It seems you does have the merge access though? You are shown as a ""member"". Last time I merged your PR because you were shown as a ""contributor"". I guess you joined the WebAssembly org in the meantime?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1608,2021-02-17T04:00:30Z,2021-02-18T15:09:33Z,2021-02-18T17:41:09Z,MERGED,True,203,47,20,https://github.com/takikawa,Update rethrow depth handling and catch_all opcode,2,[],https://github.com/WebAssembly/wabt/pull/1608,https://github.com/takikawa,4,https://github.com/WebAssembly/wabt/pull/1608#issuecomment-781518437,"This PR updates exception handling support to match the most recent spec explainer (see WebAssembly/exception-handling#137). In particular, it fixes the handling of rethrow's depth argument and changes the catch_all opcode. Tests are also expanded (with test cases taken from spec issue examples).","Thanks for the merge!
@aheejin I did indeed join the org as a member, maybe I also need to request to join a team in the org? I didn't see the merge button in my UI as far as I could tell.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1609,2021-02-18T02:15:19Z,2021-02-24T01:38:54Z,2021-02-24T01:38:54Z,MERGED,True,93,0,2,https://github.com/takikawa,Adjust label printing for blocks in folded form,1,[],https://github.com/WebAssembly/wabt/pull/1609,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1609,"This PR makes label printing for blocks in folded form more consistent with non-folded forms.
For example, given the following input wat file:
(module
  (func
    block
      br 0
    end
    block
      br 0
    end))

If you do a roundtrip with wat2wasm and wasm2wat currently, you get different labels depending on if you supplied --fold-exprs or not:
Non-folded:
(module
  (type (;0;) (func))
  (func (;0;) (type 0)
    block  ;; label = @1
      br 0 (;@1;)
    end
    block  ;; label = @1
      br 0 (;@1;)
    end))

Folded:
(module
  (type (;0;) (func))
  (func (;0;) (type 0)
    (block  ;; label = @1
      (br 0 (;@1;)))
    (block  ;; label = @2    <<---- this is different
      (br 0 (;@2;)))))

This PR should make both use the same label depths.","This PR makes label printing for blocks in folded form more consistent with non-folded forms.
For example, given the following input wat file:
(module
  (func
    block
      br 0
    end
    block
      br 0
    end))

If you do a roundtrip with wat2wasm and wasm2wat currently, you get different labels depending on if you supplied --fold-exprs or not:
Non-folded:
(module
  (type (;0;) (func))
  (func (;0;) (type 0)
    block  ;; label = @1
      br 0 (;@1;)
    end
    block  ;; label = @1
      br 0 (;@1;)
    end))

Folded:
(module
  (type (;0;) (func))
  (func (;0;) (type 0)
    (block  ;; label = @1
      (br 0 (;@1;)))
    (block  ;; label = @2    <<---- this is different
      (br 0 (;@2;)))))

This PR should make both use the same label depths.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1614,2021-02-26T16:36:49Z,2021-03-02T16:25:11Z,2021-03-02T16:25:11Z,MERGED,True,2,2,2,https://github.com/sbc100,objdump: fix typo,1,[],https://github.com/WebAssembly/wabt/pull/1614,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1614,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1615,2021-02-28T16:38:21Z,2021-03-02T16:24:34Z,2021-03-02T16:24:34Z,MERGED,True,55,0,1,https://github.com/rofl0r,CI: add github action to build source release tarball,2,[],https://github.com/WebAssembly/wabt/pull/1615,https://github.com/rofl0r,1,https://github.com/WebAssembly/wabt/pull/1615,"closes #1315
result can be seen here
https://github.com/rofl0r/wabt/releases/tag/9.9.99d","closes #1315
result can be seen here
https://github.com/rofl0r/wabt/releases/tag/9.9.99d",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1615,2021-02-28T16:38:21Z,2021-03-02T16:24:34Z,2021-03-02T16:24:34Z,MERGED,True,55,0,1,https://github.com/rofl0r,CI: add github action to build source release tarball,2,[],https://github.com/WebAssembly/wabt/pull/1615,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1615#issuecomment-787490547,"closes #1315
result can be seen here
https://github.com/rofl0r/wabt/releases/tag/9.9.99d","It seems that neither #1367 nor #1594 are actually addressed by this fix since they both involve folks who are using git clone themselves.    This fix only effects users who download source archives, not those who use git, right?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1615,2021-02-28T16:38:21Z,2021-03-02T16:24:34Z,2021-03-02T16:24:34Z,MERGED,True,55,0,1,https://github.com/rofl0r,CI: add github action to build source release tarball,2,[],https://github.com/WebAssembly/wabt/pull/1615,https://github.com/rofl0r,3,https://github.com/WebAssembly/wabt/pull/1615#issuecomment-787499852,"closes #1315
result can be seen here
https://github.com/rofl0r/wabt/releases/tag/9.9.99d","It seems that neither #1367 nor #1594 are actually addressed by this fix since they both involve folks who are using git clone themselves. This fix only effects users who download source archives, not those who use git, right?

correct. i didnt look into those issues tbh, and assumed they would have hit the same issue. will edit introductory text accordingly.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1615,2021-02-28T16:38:21Z,2021-03-02T16:24:34Z,2021-03-02T16:24:34Z,MERGED,True,55,0,1,https://github.com/rofl0r,CI: add github action to build source release tarball,2,[],https://github.com/WebAssembly/wabt/pull/1615,https://github.com/rofl0r,4,https://github.com/WebAssembly/wabt/pull/1615#issuecomment-787501287,"closes #1315
result can be seen here
https://github.com/rofl0r/wabt/releases/tag/9.9.99d","seems to have worked out: https://github.com/rofl0r/wabt/releases/tag/9.9.99e
i can squash the follow-up commit, or you can do so using the ""rebase-and-merge"" button.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1615,2021-02-28T16:38:21Z,2021-03-02T16:24:34Z,2021-03-02T16:24:34Z,MERGED,True,55,0,1,https://github.com/rofl0r,CI: add github action to build source release tarball,2,[],https://github.com/WebAssembly/wabt/pull/1615,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1615#issuecomment-787501735,"closes #1315
result can be seen here
https://github.com/rofl0r/wabt/releases/tag/9.9.99d",We always use squash commits anyway so it good as is.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1615,2021-02-28T16:38:21Z,2021-03-02T16:24:34Z,2021-03-02T16:24:34Z,MERGED,True,55,0,1,https://github.com/rofl0r,CI: add github action to build source release tarball,2,[],https://github.com/WebAssembly/wabt/pull/1615,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1615#issuecomment-787501798,"closes #1315
result can be seen here
https://github.com/rofl0r/wabt/releases/tag/9.9.99d",Once this lands we can tag a release to show this working..,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1618,2021-03-02T16:28:35Z,2021-03-02T23:07:54Z,2021-03-02T23:07:55Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.21,1,[],https://github.com/WebAssembly/wabt/pull/1618,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1618,New release.   Partly to test creation of source archives. See #1615,New release.   Partly to test creation of source archives. See #1615,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1621,2021-03-03T19:31:37Z,2021-03-08T17:39:00Z,2021-03-08T18:34:19Z,CLOSED,False,3299,2490,37,https://github.com/ngzhian,Add and update final SIMD opcodes,19,[],https://github.com/WebAssembly/wabt/pull/1621,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1621,"This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.","This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1621,2021-03-03T19:31:37Z,2021-03-08T17:39:00Z,2021-03-08T18:34:19Z,CLOSED,False,3299,2490,37,https://github.com/ngzhian,Add and update final SIMD opcodes,19,[],https://github.com/WebAssembly/wabt/pull/1621,https://github.com/tlively,2,https://github.com/WebAssembly/wabt/pull/1621#issuecomment-790039324,"This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.",Looks good to me so far!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1621,2021-03-03T19:31:37Z,2021-03-08T17:39:00Z,2021-03-08T18:34:19Z,CLOSED,False,3299,2490,37,https://github.com/ngzhian,Add and update final SIMD opcodes,19,[],https://github.com/WebAssembly/wabt/pull/1621,https://github.com/ngzhian,3,https://github.com/WebAssembly/wabt/pull/1621#issuecomment-790186001,"This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.","This is mostly done.
I updated third_party/testsuite, and ran tools/update-spec-tests.py, and manually removed some simd test cases from spec, those can be updated and implemented later (this change is large enough already). The remaining failing tests are all non-simd:
**** FAILED ******************************************************************

test/spec/binary.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/binary/binary.json
test/spec/data.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/data/data.json
test/spec/elem.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/elem/elem.json
test/spec/exports.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/exports/exports.json
test/spec/br_table.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/br_table/br_table.json
test/spec/global.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/global/global.json
test/spec/imports.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/imports/imports.json
test/spec/local_tee.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/local_tee/local_tee.json
test/spec/memory64/address.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/memory64/address/address.json --enable-memory64
test/spec/memory64/binary-leb128.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/memory64/binary-leb128/binary-leb128.json --enable-memory64
test/spec/memory64/binary.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/memory64/binary/binary.json --enable-memory64
test/spec/memory64/address64.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/memory64/address64/address64.json --enable-memory64
test/spec/memory64/memory.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/memory64/memory/memory.json --enable-memory64
test/spec/select.txt
/usr/local/google/home/zhin/ssd2/wabt/bin/spectest-interp out/test/spec/select/select.json
test/wasm2c/spec/global.txt
/usr/bin/python3 /usr/local/google/home/zhin/ssd2/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/global.wast --bindir=/usr/local/google/home/zhin/ssd2/wabt/bin --no-error-cmdline --cflags=-DWABT_BIG_ENDIAN=0 -o out/test/wasm2c/spec/global",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1621,2021-03-03T19:31:37Z,2021-03-08T17:39:00Z,2021-03-08T18:34:19Z,CLOSED,False,3299,2490,37,https://github.com/ngzhian,Add and update final SIMD opcodes,19,[],https://github.com/WebAssembly/wabt/pull/1621,https://github.com/ngzhian,4,https://github.com/WebAssembly/wabt/pull/1621#issuecomment-790291878,"This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.","It looks like many of these just need a test rebase, the only tricky one is test/wasm2c/spec/global.txt
/usr/bin/python3 /usr/local/google/home/zhin/ssd2/wabt/test/run-spec-wasm2c.py out/test/wasm2c/spec/global.wast --bindir=/usr/local/google/home/zhin/ssd2/wabt/bin --no-error-cmdline --cflags=-DWABT_BIG_ENDIAN=0 -o out/test/wasm2c/spec/global
- test/wasm2c/spec/global.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,15 @@
  +Traceback (most recent call last):
  +  File ""/usr/local/google/home/zhin/ssd2/wabt/test/run-spec-wasm2c.py"", line 415, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/usr/local/google/home/zhin/ssd2/wabt/test/run-spec-wasm2c.py"", line 405, in main
  +    Link(cc, o_filenames, main_exe, out_dir, '-lm')
  +  File ""/usr/local/google/home/zhin/ssd2/wabt/test/run-spec-wasm2c.py"", line 316, in Link
  +    cc.RunWithArgs(*args, cwd=out_dir)
  +  File ""/usr/local/google/home/zhin/ssd2/wabt/test/utils.py"", line 103, in RunWithArgs
  +    raise error
  +utils.Error: Error running ""cc -DWABT_BIG_ENDIAN=0 -o global /usr/local/google/home/zhin/ssd2/wabt/out/test/wasm2c/spec/global/wasm-rt-impl.o /usr/local/google/home/zhin/ssd2/wabt/out/test/wasm2c/spec/global/global.0.o /usr/local/google/home/zhin/ssd2/wabt/out/test/wasm2c/spec/global/global.3.o /usr/local/google/home/zhin/ssd2/wabt/out/test/wasm2c/spec/global/global.4.o /usr/local/google/home/zhin/ssd2/wabt/out/test/wasm2c/spec/global/global.20.o /usr/local/google/home/zhin/ssd2/wabt/out/test/wasm2c/spec/global/global.23.o /usr/local/google/home/zhin/ssd2/wabt/out/test/wasm2c/spec/global/global-main.o -lm"":
  +/usr/bin/ld: /usr/local/google/home/zhin/ssd2/wabt/out/test/wasm2c/spec/global/global.0.o: warning: relocation against `Z_spectestZ_global_i64Z_j' in read-only section `.text'
  +/usr/bin/ld: /usr/local/google/home/zhin/ssd2/wabt/out/test/wasm2c/spec/global/global.0.o: in function `init_globals':
  +global.0.c:(.text+0x236): undefined reference to `Z_spectestZ_global_i64Z_j'
  +/usr/bin/ld: warning: creating DT_TEXTREL in a PIE
  +collect2: error: ld returned 1 exit statu",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1621,2021-03-03T19:31:37Z,2021-03-08T17:39:00Z,2021-03-08T18:34:19Z,CLOSED,False,3299,2490,37,https://github.com/ngzhian,Add and update final SIMD opcodes,19,[],https://github.com/WebAssembly/wabt/pull/1621,https://github.com/ngzhian,5,https://github.com/WebAssembly/wabt/pull/1621#issuecomment-790784490,"This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.","Got some pointers to the wasm2c error and I have a fix.
I think once #1622 is merged, I will rebase this, then I will check in the fix for wasm2c, together with the rebased files, and we'll be good.
Fix is:
$ git diff -- test/spec-wasm2c-prefix.c
diff --git a/test/spec-wasm2c-prefix.c b/test/spec-wasm2c-prefix.c
index 897872b4..f28339e1 100644
--- a/test/spec-wasm2c-prefix.c
+++ b/test/spec-wasm2c-prefix.c
@@ -202,6 +202,7 @@ static void spectest_print_f64_f64(double d1, double d2) {
 static wasm_rt_table_t spectest_table;
 static wasm_rt_memory_t spectest_memory;
 static uint32_t spectest_global_i32 = 666;
+static uint64_t spectest_global_i64 = 666l;

 void (*Z_spectestZ_printZ_vv)(void) = &spectest_print;
 void (*Z_spectestZ_print_i32Z_vi)(uint32_t) = &spectest_print_i32;
@@ -214,6 +215,7 @@ void (*Z_spectestZ_print_f64_f64Z_vdd)(double,
 wasm_rt_table_t* Z_spectestZ_table = &spectest_table;
 wasm_rt_memory_t* Z_spectestZ_memory = &spectest_memory;
 uint32_t* Z_spectestZ_global_i32Z_i = &spectest_global_i32;
+uint64_t* Z_spectestZ_global_i64Z_j = &spectest_global_i64;

 static void init_spectest_module(void) {
   wasm_rt_allocate_memory(&spectest_memory, 1, 2);",True,{'THUMBS_UP': ['https://github.com/tlively']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1621,2021-03-03T19:31:37Z,2021-03-08T17:39:00Z,2021-03-08T18:34:19Z,CLOSED,False,3299,2490,37,https://github.com/ngzhian,Add and update final SIMD opcodes,19,[],https://github.com/WebAssembly/wabt/pull/1621,https://github.com/ngzhian,6,https://github.com/WebAssembly/wabt/pull/1621#issuecomment-791027697,"This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.","Hm, what is this? from the ci logs:
- test/spec/simd/simd_conversions.txt
  expected error code 0, got -6.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1 @@
  +*** stack smashing detected ***: terminated",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1621,2021-03-03T19:31:37Z,2021-03-08T17:39:00Z,2021-03-08T18:34:19Z,CLOSED,False,3299,2490,37,https://github.com/ngzhian,Add and update final SIMD opcodes,19,[],https://github.com/WebAssembly/wabt/pull/1621,https://github.com/ngzhian,7,https://github.com/WebAssembly/wabt/pull/1621#issuecomment-791035918,"This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.","I'll be splitting this up into smaller changes to make it easier to review, please hold on.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1621,2021-03-03T19:31:37Z,2021-03-08T17:39:00Z,2021-03-08T18:34:19Z,CLOSED,False,3299,2490,37,https://github.com/ngzhian,Add and update final SIMD opcodes,19,[],https://github.com/WebAssembly/wabt/pull/1621,https://github.com/steven-johnson,8,https://github.com/WebAssembly/wabt/pull/1621#issuecomment-792962756,"This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.","Where should we check for updates on the 'completeness' of this update, since this is being split into smaller pieces?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1621,2021-03-03T19:31:37Z,2021-03-08T17:39:00Z,2021-03-08T18:34:19Z,CLOSED,False,3299,2490,37,https://github.com/ngzhian,Add and update final SIMD opcodes,19,[],https://github.com/WebAssembly/wabt/pull/1621,https://github.com/ngzhian,9,https://github.com/WebAssembly/wabt/pull/1621#issuecomment-792978046,"This adds all the new SIMD opcodes and also update names of certain
instructions enough to get compiling again. Partially addresses #1617.
Note that third_party/testsuite is updated to TOT, and I ran tests/update-spec-tests.py, but manually removed some simd test cases because we cannot handle all the new opcodes yet, they will require implementation in the binary-reader and interp. Support will come later, as with checking in the new SIMD tests.",@steven-johnson I will update the WABT row in WebAssembly/simd#480 when this work is done.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1622,2021-03-04T04:19:12Z,2021-03-04T19:28:16Z,2021-03-04T19:28:20Z,MERGED,True,79,59,4,https://github.com/ngzhian,Bump testsuite version and fix tests,1,[],https://github.com/WebAssembly/wabt/pull/1622,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1622,"This is an incremental bump of testsuite, the TOT has SIMD tests which won't work yet.
The main fix is for a test added to the spec repo that has an invalid
functype in the type section. Based on the spec, the functype should be
a single byte 0x60. The leb encoding only comes into effect with the GC
proposal.","This is an incremental bump of testsuite, the TOT has SIMD tests which won't work yet.
The main fix is for a test added to the spec repo that has an invalid
functype in the type section. Based on the spec, the functype should be
a single byte 0x60. The leb encoding only comes into effect with the GC
proposal.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1622,2021-03-04T04:19:12Z,2021-03-04T19:28:16Z,2021-03-04T19:28:20Z,MERGED,True,79,59,4,https://github.com/ngzhian,Bump testsuite version and fix tests,1,[],https://github.com/WebAssembly/wabt/pull/1622,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1622#issuecomment-790862783,"This is an incremental bump of testsuite, the TOT has SIMD tests which won't work yet.
The main fix is for a test added to the spec repo that has an invalid
functype in the type section. Based on the spec, the functype should be
a single byte 0x60. The leb encoding only comes into effect with the GC
proposal.",Is this supposed to be an incremental bump rather than a bump to ToT?  I see one more revision there form last month.   Maybe worth mentioning in the description if so.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1622,2021-03-04T04:19:12Z,2021-03-04T19:28:16Z,2021-03-04T19:28:20Z,MERGED,True,79,59,4,https://github.com/ngzhian,Bump testsuite version and fix tests,1,[],https://github.com/WebAssembly/wabt/pull/1622,https://github.com/ngzhian,3,https://github.com/WebAssembly/wabt/pull/1622#issuecomment-790870464,"This is an incremental bump of testsuite, the TOT has SIMD tests which won't work yet.
The main fix is for a test added to the spec repo that has an invalid
functype in the type section. Based on the spec, the functype should be
a single byte 0x60. The leb encoding only comes into effect with the GC
proposal.","Is this supposed to be an incremental bump rather than a bump to ToT? I see one more revision there form last month. Maybe worth mentioning in the description if so.

Yup, the TOT has SIMD fixes that are not compatible. Those will be addressed in #1621 .",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1623,2021-03-05T00:01:38Z,2021-03-05T00:26:21Z,2021-03-05T00:26:24Z,MERGED,True,1000,328,44,https://github.com/ngzhian,Bump third_party/testsuite to TOT,6,[],https://github.com/WebAssembly/wabt/pull/1623,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1623,"This bumps third_party/testsuite to the latest version.
We fix 1 wasm2c test in 6b15477, and do a bunch of rebasing in cf80765.
We also skip some simd tests that use unimplemented instructions (c66f87e), or instructions with updated names (72a4400).
As we continue to update the SIMD support, more and more tests will be unskipped.
(Part 1 of #1621, #1617.)","This bumps third_party/testsuite to the latest version.
We fix 1 wasm2c test in 6b15477, and do a bunch of rebasing in cf80765.
We also skip some simd tests that use unimplemented instructions (c66f87e), or instructions with updated names (72a4400).
As we continue to update the SIMD support, more and more tests will be unskipped.
(Part 1 of #1621, #1617.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1624,2021-03-05T00:30:37Z,2021-03-05T03:47:46Z,2021-03-05T03:47:52Z,MERGED,True,590,643,13,https://github.com/ngzhian,"[simd] Rename any_true, implement i64x2 bitmask and all_true",5,[],https://github.com/WebAssembly/wabt/pull/1624,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1624,"After some rebasing of tests, we can unskip simd_boolean.txt, simd_i16x8_arith2.txt, and simd_lane.txt.","After some rebasing of tests, we can unskip simd_boolean.txt, simd_i16x8_arith2.txt, and simd_lane.txt.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1625,2021-03-05T03:52:45Z,2021-03-11T19:45:26Z,2021-03-11T20:33:39Z,MERGED,True,171,153,8,https://github.com/ngzhian,[simd] Implement i8x16.popcnt,1,[],https://github.com/WebAssembly/wabt/pull/1625,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1625,We can unskip and rebase simd_i8x16_arith2.txt with i8x16.popcnt implemented.,We can unskip and rebase simd_i8x16_arith2.txt with i8x16.popcnt implemented.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1625,2021-03-05T03:52:45Z,2021-03-11T19:45:26Z,2021-03-11T20:33:39Z,MERGED,True,171,153,8,https://github.com/ngzhian,[simd] Implement i8x16.popcnt,1,[],https://github.com/WebAssembly/wabt/pull/1625,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1625#issuecomment-794317797,We can unskip and rebase simd_i8x16_arith2.txt with i8x16.popcnt implemented.,"@sbc100 I have ~10 more such ""small"" changes to add SIMD and rebase/unskip test, would you like me to put them all into 1 PR (but multiple commits) for you to look at?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1628,2021-03-05T23:19:18Z,2021-03-05T23:47:54Z,2021-03-06T01:16:58Z,MERGED,True,83,83,1,https://github.com/steven-johnson,Fix compile errors for WITH_WASI=ON,1,[],https://github.com/WebAssembly/wabt/pull/1628,https://github.com/steven-johnson,1,https://github.com/WebAssembly/wabt/pull/1628,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1628,2021-03-05T23:19:18Z,2021-03-05T23:47:54Z,2021-03-06T01:16:58Z,MERGED,True,83,83,1,https://github.com/steven-johnson,Fix compile errors for WITH_WASI=ON,1,[],https://github.com/WebAssembly/wabt/pull/1628,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1628#issuecomment-791785477,,I can't remember why we don't have CI for this... but it seems we should.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1628,2021-03-05T23:19:18Z,2021-03-05T23:47:54Z,2021-03-06T01:16:58Z,MERGED,True,83,83,1,https://github.com/steven-johnson,Fix compile errors for WITH_WASI=ON,1,[],https://github.com/WebAssembly/wabt/pull/1628,https://github.com/steven-johnson,3,https://github.com/WebAssembly/wabt/pull/1628#issuecomment-791791132,,"I can't remember why we don't have CI for this... but it seems we should.

I'll leave that part for someone on the team to add :-)",True,{'THUMBS_UP': ['https://github.com/sbc100']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1630,2021-03-06T00:54:10Z,2021-03-10T20:49:03Z,2021-03-10T20:49:03Z,MERGED,True,1,1,1,https://github.com/steven-johnson,Fix format-string warning for 32-bit compilation (#1629),4,[],https://github.com/WebAssembly/wabt/pull/1630,https://github.com/steven-johnson,1,https://github.com/WebAssembly/wabt/pull/1630,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1632,2021-03-10T04:17:22Z,,2021-03-22T16:57:02Z,OPEN,False,4,1,1,https://github.com/ngzhian,Take care of opcodes whose bytes are non-canonical leb128,1,[],https://github.com/WebAssembly/wabt/pull/1632,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1632,Fixed #1631.,Fixed #1631.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1633,2021-03-11T19:48:08Z,2021-03-11T22:18:10Z,2021-03-11T22:18:13Z,MERGED,True,1740,1788,10,https://github.com/ngzhian,"[simd] Rename widen to extend, implement some double precision ops",2,[],https://github.com/WebAssembly/wabt/pull/1633,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1633,"4 double precision conversion instructions are implemented:

f32x4.demote_f64x2_zero
f64x2.demote_low_f32x4
f64x2.convert_low_i32x4_s
f64x2.convert_low_i32x4_u

This is now sufficient to unskip simd_conversions.txt.
Rebase a bunch of tests due to the rename from widen to extend.","4 double precision conversion instructions are implemented:

f32x4.demote_f64x2_zero
f64x2.demote_low_f32x4
f64x2.convert_low_i32x4_s
f64x2.convert_low_i32x4_u

This is now sufficient to unskip simd_conversions.txt.
Rebase a bunch of tests due to the rename from widen to extend.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1633,2021-03-11T19:48:08Z,2021-03-11T22:18:10Z,2021-03-11T22:18:13Z,MERGED,True,1740,1788,10,https://github.com/ngzhian,"[simd] Rename widen to extend, implement some double precision ops",2,[],https://github.com/WebAssembly/wabt/pull/1633,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1633#issuecomment-797034313,"4 double precision conversion instructions are implemented:

f32x4.demote_f64x2_zero
f64x2.demote_low_f32x4
f64x2.convert_low_i32x4_s
f64x2.convert_low_i32x4_u

This is now sufficient to unskip simd_conversions.txt.
Rebase a bunch of tests due to the rename from widen to extend.","I'm getting this in the ci:

test/spec/simd/simd_conversions.txt
expected error code 0, got -6.
STDERR MISMATCH:
--- expected
+++ actual
@@ -0,0 +1 @@
+*** stack smashing detected ***: terminated

any idea what's going on?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1633,2021-03-11T19:48:08Z,2021-03-11T22:18:10Z,2021-03-11T22:18:13Z,MERGED,True,1740,1788,10,https://github.com/ngzhian,"[simd] Rename widen to extend, implement some double precision ops",2,[],https://github.com/WebAssembly/wabt/pull/1633,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1633#issuecomment-797038721,"4 double precision conversion instructions are implemented:

f32x4.demote_f64x2_zero
f64x2.demote_low_f32x4
f64x2.convert_low_i32x4_s
f64x2.convert_low_i32x4_u

This is now sufficient to unskip simd_conversions.txt.
Rebase a bunch of tests due to the rename from widen to extend.","I'm getting this in the ci:

test/spec/simd/simd_conversions.txt
expected error code 0, got -6.
STDERR MISMATCH:
--- expected
+++ actual
@@ -0,0 +1 @@
+*** stack smashing detected ***: terminated

any idea what's going on?

Looks like the compiler has detected some kind of overrun..  you don't see this locally I guess?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1633,2021-03-11T19:48:08Z,2021-03-11T22:18:10Z,2021-03-11T22:18:13Z,MERGED,True,1740,1788,10,https://github.com/ngzhian,"[simd] Rename widen to extend, implement some double precision ops",2,[],https://github.com/WebAssembly/wabt/pull/1633,https://github.com/ngzhian,4,https://github.com/WebAssembly/wabt/pull/1633#issuecomment-797041674,"4 double precision conversion instructions are implemented:

f32x4.demote_f64x2_zero
f64x2.demote_low_f32x4
f64x2.convert_low_i32x4_s
f64x2.convert_low_i32x4_u

This is now sufficient to unskip simd_conversions.txt.
Rebase a bunch of tests due to the rename from widen to extend.","Nope, running this locally is fine. Where is the error message coming from? I don't see anything from Wabt, seems like it's from the VM or something?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1633,2021-03-11T19:48:08Z,2021-03-11T22:18:10Z,2021-03-11T22:18:13Z,MERGED,True,1740,1788,10,https://github.com/ngzhian,"[simd] Rename widen to extend, implement some double precision ops",2,[],https://github.com/WebAssembly/wabt/pull/1633,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1633#issuecomment-797042930,"4 double precision conversion instructions are implemented:

f32x4.demote_f64x2_zero
f64x2.demote_low_f32x4
f64x2.convert_low_i32x4_s
f64x2.convert_low_i32x4_u

This is now sufficient to unskip simd_conversions.txt.
Rebase a bunch of tests due to the rename from widen to extend.","Nope, running this locally is fine. Where is the error message coming from? I don't see anything from Wabt, seems like it's from the VM or something?

I think its coming from gcc or clang which have stack protection mechanisms.   Try matching he exact compiler version used in the github actions maybe?  Or look for options to enable stack protection in your local compiler?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1633,2021-03-11T19:48:08Z,2021-03-11T22:18:10Z,2021-03-11T22:18:13Z,MERGED,True,1740,1788,10,https://github.com/ngzhian,"[simd] Rename widen to extend, implement some double precision ops",2,[],https://github.com/WebAssembly/wabt/pull/1633,https://github.com/ngzhian,6,https://github.com/WebAssembly/wabt/pull/1633#issuecomment-797066739,"4 double precision conversion instructions are implemented:

f32x4.demote_f64x2_zero
f64x2.demote_low_f32x4
f64x2.convert_low_i32x4_s
f64x2.convert_low_i32x4_u

This is now sufficient to unskip simd_conversions.txt.
Rebase a bunch of tests due to the rename from widen to extend.","The CI uses gcc-9, i tried using that and cannot reproduce.
Update, oh huh adding -fstack-protector-all somewhere to CMake gets me the error.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1633,2021-03-11T19:48:08Z,2021-03-11T22:18:10Z,2021-03-11T22:18:13Z,MERGED,True,1740,1788,10,https://github.com/ngzhian,"[simd] Rename widen to extend, implement some double precision ops",2,[],https://github.com/WebAssembly/wabt/pull/1633,https://github.com/ngzhian,7,https://github.com/WebAssembly/wabt/pull/1633#issuecomment-797080971,"4 double precision conversion instructions are implemented:

f32x4.demote_f64x2_zero
f64x2.demote_low_f32x4
f64x2.convert_low_i32x4_s
f64x2.convert_low_i32x4_u

This is now sufficient to unskip simd_conversions.txt.
Rebase a bunch of tests due to the rename from widen to extend.",That caught a real bug! Fixed in latest commit.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1634,2021-03-11T22:16:53Z,2021-03-12T17:16:45Z,2021-03-12T17:16:48Z,MERGED,True,1,10,1,https://github.com/ngzhian,Remove mentions of running travis scripts in README,1,[],https://github.com/WebAssembly/wabt/pull/1634,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1634,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1635,2021-03-11T22:24:00Z,2021-03-12T18:00:39Z,2021-03-12T18:00:42Z,MERGED,True,936,892,8,https://github.com/ngzhian,[simd] Implement i32x4.trunc_sat_f64x2_[su]_zero,1,[],https://github.com/WebAssembly/wabt/pull/1635,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1635,"Rebase simd_i32x4_trunc_sat_f64x2.txt and
simd_i32x4_trunc_sat_f32x4.txt.","Rebase simd_i32x4_trunc_sat_f64x2.txt and
simd_i32x4_trunc_sat_f32x4.txt.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1636,2021-03-12T18:01:58Z,2021-03-12T18:31:29Z,2021-03-12T18:34:46Z,MERGED,True,180,165,7,https://github.com/ngzhian,[simd] Implement i64x2.abs,1,[],https://github.com/WebAssembly/wabt/pull/1636,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1636,Rebase and unskip simd_i64x2_arith2.txt.,Rebase and unskip simd_i64x2_arith2.txt.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1637,2021-03-12T18:38:28Z,2021-03-12T19:07:44Z,2021-03-12T19:07:54Z,MERGED,True,462,389,9,https://github.com/ngzhian,[simd] Implement extadd instructions,1,[],https://github.com/WebAssembly/wabt/pull/1637,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1637,"Rebase and unskip simd_i16x8_extadd_pairwise_i8x16.txt and
simd_i32x4_extadd_pairwise_i16x8.","Rebase and unskip simd_i16x8_extadd_pairwise_i8x16.txt and
simd_i32x4_extadd_pairwise_i16x8.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1638,2021-03-12T19:12:03Z,2021-03-12T19:32:21Z,2021-03-12T19:32:29Z,MERGED,True,693,468,12,https://github.com/ngzhian,[simd] Implement extmul instructions,1,[],https://github.com/WebAssembly/wabt/pull/1638,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1638,"Renumber floating point rounding instructions since they overlap with
these new extmul instructions. Rebase simd_f32x4_rounding and
simd_f64x2_rounding.
Rebase and unskip simd extmul tests.","Renumber floating point rounding instructions since they overlap with
these new extmul instructions. Rebase simd_f32x4_rounding and
simd_f64x2_rounding.
Rebase and unskip simd extmul tests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1639,2021-03-12T19:33:16Z,2021-03-16T21:11:17Z,2021-03-16T21:11:28Z,MERGED,True,438,408,8,https://github.com/ngzhian,[simd] Implement q15mulrsat_s,1,[],https://github.com/WebAssembly/wabt/pull/1639,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1639,Rebase and unskip simd_i16x8_q15mulr_sat_s.,Rebase and unskip simd_i16x8_q15mulr_sat_s.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1639,2021-03-12T19:33:16Z,2021-03-16T21:11:17Z,2021-03-16T21:11:28Z,MERGED,True,438,408,8,https://github.com/ngzhian,[simd] Implement q15mulrsat_s,1,[],https://github.com/WebAssembly/wabt/pull/1639,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1639#issuecomment-800598271,Rebase and unskip simd_i16x8_q15mulr_sat_s.,"@sbc100 ptal, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1639,2021-03-12T19:33:16Z,2021-03-16T21:11:17Z,2021-03-16T21:11:28Z,MERGED,True,438,408,8,https://github.com/ngzhian,[simd] Implement q15mulrsat_s,1,[],https://github.com/WebAssembly/wabt/pull/1639,https://github.com/ngzhian,3,https://github.com/WebAssembly/wabt/pull/1639#issuecomment-800607737,Rebase and unskip simd_i16x8_q15mulr_sat_s.,I copied this from the v8 side https://source.chromium.org/chromium/chromium/src/+/master:v8/src/utils/utils.h;l=170;drc=5a4394ac9d354e619f8e179a7f5e7f7528317a3c so we have more tests to judge this :),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1640,2021-03-16T21:12:25Z,2021-03-17T00:04:29Z,2021-03-17T00:04:31Z,MERGED,True,372,332,8,https://github.com/ngzhian,[simd] Implement i32x4.dot_i16x8_s,3,[],https://github.com/WebAssembly/wabt/pull/1640,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1640,Rebase and unskip simd_i32x4_dot_i16x8.,Rebase and unskip simd_i32x4_dot_i16x8.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1640,2021-03-16T21:12:25Z,2021-03-17T00:04:29Z,2021-03-17T00:04:31Z,MERGED,True,372,332,8,https://github.com/ngzhian,[simd] Implement i32x4.dot_i16x8_s,3,[],https://github.com/WebAssembly/wabt/pull/1640,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1640#issuecomment-800647772,Rebase and unskip simd_i32x4_dot_i16x8.,It looks like Add in interp-math.h doesn't handle overflow. Need to find another way.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1641,2021-03-16T22:28:34Z,2021-03-17T03:58:20Z,2021-03-17T03:58:23Z,MERGED,True,2,1,1,https://github.com/ngzhian,Fix ubsan compile,2,[],https://github.com/WebAssembly/wabt/pull/1641,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1641,"This happens when both HAS_UBSAN_RECOVER_BARE and HAS_UBSAN_RECOVER_ALL
is supported, then we end up setting USE_UBSAN twice, and hit the
FATAL_ERROR ""Only one sanitizer allowed"".","This happens when both HAS_UBSAN_RECOVER_BARE and HAS_UBSAN_RECOVER_ALL
is supported, then we end up setting USE_UBSAN twice, and hit the
FATAL_ERROR ""Only one sanitizer allowed"".",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1642,2021-03-17T00:05:54Z,2021-03-17T00:21:13Z,2021-03-17T00:21:22Z,MERGED,True,1318,1245,7,https://github.com/ngzhian,[simd] Implement i64x2 comparisons,1,[],https://github.com/WebAssembly/wabt/pull/1642,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1642,Rebase and unskip simd_i64x2_cmp.,Rebase and unskip simd_i64x2_cmp.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1643,2021-03-17T00:22:14Z,2021-03-17T00:38:07Z,2021-03-17T00:38:10Z,MERGED,True,362,258,7,https://github.com/ngzhian,"[simd] Implement i64x2.extend_{low,high}_i32x4_{s,u}",1,[],https://github.com/WebAssembly/wabt/pull/1643,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1643,Unskip and rebase simd_int_to_int_extend.,Unskip and rebase simd_int_to_int_extend.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1644,2021-03-17T04:10:03Z,2021-03-17T16:17:01Z,2021-03-17T16:17:25Z,MERGED,True,226,55,24,https://github.com/ngzhian,"[simd] Implement v128.load{32,64}_zero",1,[],https://github.com/WebAssembly/wabt/pull/1644,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1644,"This adds a new ir type LoadZeroExpr. It isn't strictly necessary, since it is essentially the same as LoadSplatExpr, based on signature, validation, all the memargs and alignment requirement.","This adds a new ir type LoadZeroExpr. It isn't strictly necessary, since it is essentially the same as LoadSplatExpr, based on signature, validation, all the memargs and alignment requirement.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1646,2021-03-17T18:21:49Z,2021-03-22T22:22:02Z,2021-03-22T22:22:06Z,MERGED,True,1662,1203,35,https://github.com/ngzhian,[simd] Implement load lane,4,[],https://github.com/WebAssembly/wabt/pull/1646,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1646,"This is a new kind of ir/ast node/instruction. It has 3 immediates:
memarg align, memarg offset, and lane index. This required new visitor
functions in all the places.
Drive-by cleanup to share the simd lane parsing logic between shuffle,
lane op and this new load lane instructions. This requires rebasing some
tests because the error messages are slightly different now.","This is a new kind of ir/ast node/instruction. It has 3 immediates:
memarg align, memarg offset, and lane index. This required new visitor
functions in all the places.
Drive-by cleanup to share the simd lane parsing logic between shuffle,
lane op and this new load lane instructions. This requires rebasing some
tests because the error messages are slightly different now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1646,2021-03-17T18:21:49Z,2021-03-22T22:22:02Z,2021-03-22T22:22:06Z,MERGED,True,1662,1203,35,https://github.com/ngzhian,[simd] Implement load lane,4,[],https://github.com/WebAssembly/wabt/pull/1646,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1646#issuecomment-803004904,"This is a new kind of ir/ast node/instruction. It has 3 immediates:
memarg align, memarg offset, and lane index. This required new visitor
functions in all the places.
Drive-by cleanup to share the simd lane parsing logic between shuffle,
lane op and this new load lane instructions. This requires rebasing some
tests because the error messages are slightly different now.","@sbc100 ptal, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1646,2021-03-17T18:21:49Z,2021-03-22T22:22:02Z,2021-03-22T22:22:06Z,MERGED,True,1662,1203,35,https://github.com/ngzhian,[simd] Implement load lane,4,[],https://github.com/WebAssembly/wabt/pull/1646,https://github.com/ngzhian,3,https://github.com/WebAssembly/wabt/pull/1646#issuecomment-803025821,"This is a new kind of ir/ast node/instruction. It has 3 immediates:
memarg align, memarg offset, and lane index. This required new visitor
functions in all the places.
Drive-by cleanup to share the simd lane parsing logic between shuffle,
lane op and this new load lane instructions. This requires rebasing some
tests because the error messages are slightly different now.","Good idea, found a bug in the dumping, wasn't overriding the new uint32uint32uint32 correctly. Added the test. Ptal, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1646,2021-03-17T18:21:49Z,2021-03-22T22:22:02Z,2021-03-22T22:22:06Z,MERGED,True,1662,1203,35,https://github.com/ngzhian,[simd] Implement load lane,4,[],https://github.com/WebAssembly/wabt/pull/1646,https://github.com/ngzhian,4,https://github.com/WebAssembly/wabt/pull/1646#issuecomment-804428311,"This is a new kind of ir/ast node/instruction. It has 3 immediates:
memarg align, memarg offset, and lane index. This required new visitor
functions in all the places.
Drive-by cleanup to share the simd lane parsing logic between shuffle,
lane op and this new load lane instructions. This requires rebasing some
tests because the error messages are slightly different now.","@sbc100 ptal, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1647,2021-03-22T22:25:04Z,2021-03-23T00:12:10Z,2021-03-23T00:12:22Z,MERGED,True,1615,1179,33,https://github.com/ngzhian,[simd] Implement store lane,1,[],https://github.com/WebAssembly/wabt/pull/1647,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1647,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1648,2021-03-23T00:17:46Z,2021-03-23T16:10:28Z,2021-03-23T16:11:18Z,MERGED,True,37,5,4,https://github.com/ngzhian,[simd] Unskip more tests,1,[],https://github.com/WebAssembly/wabt/pull/1648,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1648,"Missed unskipping these in prior implementations. With this, all simd
tests are now running.","Missed unskipping these in prior implementations. With this, all simd
tests are now running.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1649,2021-03-23T15:49:03Z,,2021-03-23T15:49:03Z,OPEN,False,39,2,2,https://github.com/alexcrichton,Fix alignment stored in simd load/store lane,1,[],https://github.com/WebAssembly/wabt/pull/1649,https://github.com/alexcrichton,1,https://github.com/WebAssembly/wabt/pull/1649,"This should fix an issue where wasm2wat was printing the wrong
alignment for the new simd load/store lane instructions.","This should fix an issue where wasm2wat was printing the wrong
alignment for the new simd load/store lane instructions.",True,{'THUMBS_UP': ['https://github.com/czaux']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1650,2021-03-23T17:04:50Z,2021-03-23T17:37:00Z,2021-03-23T23:04:36Z,MERGED,True,1,1,1,https://github.com/ngzhian,Version 1.0.22,1,[],https://github.com/WebAssembly/wabt/pull/1650,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1650,"thirdparty/testsuite updates
WASI compilation fixes
32-bit compile fixes
SIMD updates","thirdparty/testsuite updates
WASI compilation fixes
32-bit compile fixes
SIMD updates",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1650,2021-03-23T17:04:50Z,2021-03-23T17:37:00Z,2021-03-23T23:04:36Z,MERGED,True,1,1,1,https://github.com/ngzhian,Version 1.0.22,1,[],https://github.com/WebAssembly/wabt/pull/1650,https://github.com/steven-johnson,2,https://github.com/WebAssembly/wabt/pull/1650#issuecomment-805316726,"thirdparty/testsuite updates
WASI compilation fixes
32-bit compile fixes
SIMD updates","Should this version be considered compliant with the WasmSimd128 spec, or is there more work to be done?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1650,2021-03-23T17:04:50Z,2021-03-23T17:37:00Z,2021-03-23T23:04:36Z,MERGED,True,1,1,1,https://github.com/ngzhian,Version 1.0.22,1,[],https://github.com/WebAssembly/wabt/pull/1650,https://github.com/ngzhian,3,https://github.com/WebAssembly/wabt/pull/1650#issuecomment-805331549,"thirdparty/testsuite updates
WASI compilation fixes
32-bit compile fixes
SIMD updates","It should, and if not, it is a bug, so please let me know. I will also update WebAssembly/simd#480 as well.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1652,2021-03-24T00:38:07Z,2021-03-24T00:52:15Z,2021-03-24T16:05:31Z,MERGED,True,1,0,1,https://github.com/ngzhian,Add _free to list of exports,1,[],https://github.com/WebAssembly/wabt/pull/1652,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1652,_free is used in src/wabt.post.js.,_free is used in src/wabt.post.js.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1652,2021-03-24T00:38:07Z,2021-03-24T00:52:15Z,2021-03-24T16:05:31Z,MERGED,True,1,0,1,https://github.com/ngzhian,Add _free to list of exports,1,[],https://github.com/WebAssembly/wabt/pull/1652,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1652#issuecomment-805381529,_free is used in src/wabt.post.js.,"Not sure if there are tests for this, I encountered this while trying to update https://github.com/AssemblyScript/wabt.js.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1654,2021-03-24T21:00:52Z,2021-03-24T21:23:10Z,2021-03-24T21:23:19Z,MERGED,True,1,1,1,https://github.com/ngzhian,Version 1.0.23,1,[],https://github.com/WebAssembly/wabt/pull/1654,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1654,add _free to exports for building libwabtjs,add _free to exports for building libwabtjs,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1656,2021-03-29T23:39:00Z,2021-04-05T19:38:17Z,2021-04-05T19:38:17Z,MERGED,True,39,26,11,https://github.com/aardappel,Memory64: support 64-bit data init-expr,1,[],https://github.com/WebAssembly/wabt/pull/1656,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1656,Note: also updates testsuite.,Note: also updates testsuite.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1657,2021-03-30T22:37:25Z,2022-03-05T01:20:32Z,2022-03-05T01:20:32Z,MERGED,True,1,1,1,https://github.com/UltimatePro-Grammer,Enable multi value by default,1,[],https://github.com/WebAssembly/wabt/pull/1657,https://github.com/UltimatePro-Grammer,1,https://github.com/WebAssembly/wabt/pull/1657,"Multi value was merged into the spec almost a year ago, and all browsers support it. I think it is time to check the multi value checkbox by default.
Reference types were merged recently but support among browsers is limited at the moment, so I don't think it is time to check it by default yet.
Node stable does not support multi value, but this is a web based tool.","Multi value was merged into the spec almost a year ago, and all browsers support it. I think it is time to check the multi value checkbox by default.
Reference types were merged recently but support among browsers is limited at the moment, so I don't think it is time to check it by default yet.
Node stable does not support multi value, but this is a web based tool.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1657,2021-03-30T22:37:25Z,2022-03-05T01:20:32Z,2022-03-05T01:20:32Z,MERGED,True,1,1,1,https://github.com/UltimatePro-Grammer,Enable multi value by default,1,[],https://github.com/WebAssembly/wabt/pull/1657,https://github.com/tlively,2,https://github.com/WebAssembly/wabt/pull/1657#issuecomment-811461833,"Multi value was merged into the spec almost a year ago, and all browsers support it. I think it is time to check the multi value checkbox by default.
Reference types were merged recently but support among browsers is limited at the moment, so I don't think it is time to check it by default yet.
Node stable does not support multi value, but this is a web based tool.",@sbc100 what do you think of this? Perhaps we should discuss our policy on default features for all the tools again.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1657,2021-03-30T22:37:25Z,2022-03-05T01:20:32Z,2022-03-05T01:20:32Z,MERGED,True,1,1,1,https://github.com/UltimatePro-Grammer,Enable multi value by default,1,[],https://github.com/WebAssembly/wabt/pull/1657,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1657#issuecomment-813150977,"Multi value was merged into the spec almost a year ago, and all browsers support it. I think it is time to check the multi value checkbox by default.
Reference types were merged recently but support among browsers is limited at the moment, so I don't think it is time to check it by default yet.
Node stable does not support multi value, but this is a web based tool.","We should be consistent with whatever policy we land on in WebAssembly/tool-conventions#158.
Does wabt currently enable any non-MVP features by default?  (e.g. non-trapping float to int?)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1657,2021-03-30T22:37:25Z,2022-03-05T01:20:32Z,2022-03-05T01:20:32Z,MERGED,True,1,1,1,https://github.com/UltimatePro-Grammer,Enable multi value by default,1,[],https://github.com/WebAssembly/wabt/pull/1657,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1657#issuecomment-1059638423,"Multi value was merged into the spec almost a year ago, and all browsers support it. I think it is time to check the multi value checkbox by default.
Reference types were merged recently but support among browsers is limited at the moment, so I don't think it is time to check it by default yet.
Node stable does not support multi value, but this is a web based tool.","Actually mutli-value was enabled back in #1405.
It looks like these html documents all needed updating.. I think they are automatically generated.    Perhaps close this PR and open a new one that updates them all?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1657,2021-03-30T22:37:25Z,2022-03-05T01:20:32Z,2022-03-05T01:20:32Z,MERGED,True,1,1,1,https://github.com/UltimatePro-Grammer,Enable multi value by default,1,[],https://github.com/WebAssembly/wabt/pull/1657,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1657#issuecomment-1059639024,"Multi value was merged into the spec almost a year ago, and all browsers support it. I think it is time to check the multi value checkbox by default.
Reference types were merged recently but support among browsers is limited at the moment, so I don't think it is time to check it by default yet.
Node stable does not support multi value, but this is a web based tool.","Oh wait, that page is manually maintained.  lgtm.. plus we should probably update the other checkbox that are on by default these days.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1659,2021-04-07T17:53:08Z,2021-04-08T02:11:31Z,2021-04-08T02:11:31Z,MERGED,True,135,28,2,https://github.com/sbc100,Add more support to extended names section.,1,[],https://github.com/WebAssembly/wabt/pull/1659,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1659,I noticed we lacked support here while debugging #1651.,I noticed we lacked support here while debugging #1651.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1660,2021-04-07T17:59:07Z,2021-04-07T21:13:41Z,2021-04-07T21:13:43Z,MERGED,True,29,0,1,https://github.com/ngzhian,Implement wasm2c for SIMD expressions,2,[],https://github.com/WebAssembly/wabt/pull/1660,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1660,"Note that all SIMD expressions are untested in wasm2c, since it doesn't support any feature flags yet. I followed existing implementation for other SIMD expressions, like LoadSplat.","Note that all SIMD expressions are untested in wasm2c, since it doesn't support any feature flags yet. I followed existing implementation for other SIMD expressions, like LoadSplat.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1660,2021-04-07T17:59:07Z,2021-04-07T21:13:41Z,2021-04-07T21:13:43Z,MERGED,True,29,0,1,https://github.com/ngzhian,Implement wasm2c for SIMD expressions,2,[],https://github.com/WebAssembly/wabt/pull/1660,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1660#issuecomment-815240175,"Note that all SIMD expressions are untested in wasm2c, since it doesn't support any feature flags yet. I followed existing implementation for other SIMD expressions, like LoadSplat.","Thanks for the review Alon. In that case, Sam also suggested adding a TODO or assertion there, so that if we do run tests with SIMD, we can implement it then. Do you think that will be a better way to go?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1660,2021-04-07T17:59:07Z,2021-04-07T21:13:41Z,2021-04-07T21:13:43Z,MERGED,True,29,0,1,https://github.com/ngzhian,Implement wasm2c for SIMD expressions,2,[],https://github.com/WebAssembly/wabt/pull/1660,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1660#issuecomment-815242258,"Note that all SIMD expressions are untested in wasm2c, since it doesn't support any feature flags yet. I followed existing implementation for other SIMD expressions, like LoadSplat.","Thanks for the review Alon. In that case, Sam also suggested adding a TODO or assertion there, so that if we do run tests with SIMD, we can implement it then. Do you think that will be a better way to go?

I can't see any downside to asserting here .. given that its missing functionality.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1660,2021-04-07T17:59:07Z,2021-04-07T21:13:41Z,2021-04-07T21:13:43Z,MERGED,True,29,0,1,https://github.com/ngzhian,Implement wasm2c for SIMD expressions,2,[],https://github.com/WebAssembly/wabt/pull/1660,https://github.com/kripken,4,https://github.com/WebAssembly/wabt/pull/1660#issuecomment-815242799,"Note that all SIMD expressions are untested in wasm2c, since it doesn't support any feature flags yet. I followed existing implementation for other SIMD expressions, like LoadSplat.",Assert sgtm.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1660,2021-04-07T17:59:07Z,2021-04-07T21:13:41Z,2021-04-07T21:13:43Z,MERGED,True,29,0,1,https://github.com/ngzhian,Implement wasm2c for SIMD expressions,2,[],https://github.com/WebAssembly/wabt/pull/1660,https://github.com/ngzhian,5,https://github.com/WebAssembly/wabt/pull/1660#issuecomment-815251428,"Note that all SIMD expressions are untested in wasm2c, since it doesn't support any feature flags yet. I followed existing implementation for other SIMD expressions, like LoadSplat.","I left the functions there with UNIMPLEMENTED in the body. Ptal, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1661,2021-04-08T02:16:08Z,,2021-04-12T18:33:57Z,OPEN,False,85,54,11,https://github.com/sbc100,Always do a full roundtrip in run-roundtrip.py,1,[],https://github.com/WebAssembly/wabt/pull/1661,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1661,"Even when the result is to be printed rather than compared byte for byte
with the first version its still good to process the resulting wat
output file so that we know we can parse what we generate.
Case in point, this changed caused me to fix two latent bugs:

We were not correctly parsing events with inline import/export.
We were output element segment names even when bulk memory
was not enabled (See #1651)

The fix for (2) is a little more involved that we might like since for
the first time the wat writer needs to know what features are enabled.
Fixes: #1651","Even when the result is to be printed rather than compared byte for byte
with the first version its still good to process the resulting wat
output file so that we know we can parse what we generate.
Case in point, this changed caused me to fix two latent bugs:

We were not correctly parsing events with inline import/export.
We were output element segment names even when bulk memory
was not enabled (See #1651)

The fix for (2) is a little more involved that we might like since for
the first time the wat writer needs to know what features are enabled.
Fixes: #1651",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1661,2021-04-08T02:16:08Z,,2021-04-12T18:33:57Z,OPEN,False,85,54,11,https://github.com/sbc100,Always do a full roundtrip in run-roundtrip.py,1,[],https://github.com/WebAssembly/wabt/pull/1661,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1661#issuecomment-816018040,"Even when the result is to be printed rather than compared byte for byte
with the first version its still good to process the resulting wat
output file so that we know we can parse what we generate.
Case in point, this changed caused me to fix two latent bugs:

We were not correctly parsing events with inline import/export.
We were output element segment names even when bulk memory
was not enabled (See #1651)

The fix for (2) is a little more involved that we might like since for
the first time the wat writer needs to know what features are enabled.
Fixes: #1651",@binji .. do you think there is any way we can avoid having to pass features to the wat writer here?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1661,2021-04-08T02:16:08Z,,2021-04-12T18:33:57Z,OPEN,False,85,54,11,https://github.com/sbc100,Always do a full roundtrip in run-roundtrip.py,1,[],https://github.com/WebAssembly/wabt/pull/1661,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1661#issuecomment-816031110,"Even when the result is to be printed rather than compared byte for byte
with the first version its still good to process the resulting wat
output file so that we know we can parse what we generate.
Case in point, this changed caused me to fix two latent bugs:

We were not correctly parsing events with inline import/export.
We were output element segment names even when bulk memory
was not enabled (See #1651)

The fix for (2) is a little more involved that we might like since for
the first time the wat writer needs to know what features are enabled.
Fixes: #1651","@binji .. do you think there is any way we can avoid having to pass features to the wat writer here?

I guess the alternative would be instead to pass Features to GenerateNames and in that case avoid generating segment names at all?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1661,2021-04-08T02:16:08Z,,2021-04-12T18:33:57Z,OPEN,False,85,54,11,https://github.com/sbc100,Always do a full roundtrip in run-roundtrip.py,1,[],https://github.com/WebAssembly/wabt/pull/1661,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1661#issuecomment-818035759,"Even when the result is to be printed rather than compared byte for byte
with the first version its still good to process the resulting wat
output file so that we know we can parse what we generate.
Case in point, this changed caused me to fix two latent bugs:

We were not correctly parsing events with inline import/export.
We were output element segment names even when bulk memory
was not enabled (See #1651)

The fix for (2) is a little more involved that we might like since for
the first time the wat writer needs to know what features are enabled.
Fixes: #1651",@binji any objections to this approach?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1664,2021-04-19T23:38:06Z,2021-04-22T17:35:46Z,2021-04-22T17:35:46Z,MERGED,True,62,17,11,https://github.com/aardappel,[Memory64] Support reading/writing limits as 64-bit LEBs,1,[],https://github.com/WebAssembly/wabt/pull/1664,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1664,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1666,2021-04-26T23:13:20Z,2021-04-26T23:33:06Z,2021-04-26T23:33:06Z,MERGED,True,8,0,1,https://github.com/aardappel,[wasm-decompile] Fix repeated pre-declarations,1,[],https://github.com/WebAssembly/wabt/pull/1666,https://github.com/aardappel,1,https://github.com/WebAssembly/wabt/pull/1666,"See #1565
And #1665
This could be done better, but for now is sufficient.","See #1565
And #1665
This could be done better, but for now is sufficient.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1666,2021-04-26T23:13:20Z,2021-04-26T23:33:06Z,2021-04-26T23:33:06Z,MERGED,True,8,0,1,https://github.com/aardappel,[wasm-decompile] Fix repeated pre-declarations,1,[],https://github.com/WebAssembly/wabt/pull/1666,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1666#issuecomment-827202592,"See #1565
And #1665
This could be done better, but for now is sufficient.","No test, since I haven't verified what causes this, and didn't appear in my own testing with LLVM-produced object files and modules, and don't have a clear repro other than the test files in the above issues. My guess is multiple uses of the same uninitialized or deeper-declared variables.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1669,2021-05-13T01:11:01Z,2021-05-13T23:01:41Z,2021-05-13T23:01:42Z,MERGED,True,81,41,10,https://github.com/sbc100,objdump: add support for segments flags in the linking section,1,[],https://github.com/WebAssembly/wabt/pull/1669,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1669,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1672,2021-05-28T05:58:03Z,2021-05-28T22:43:49Z,2021-05-28T22:43:50Z,MERGED,True,32,2,2,https://github.com/sbc100,Fix asan error in reading of bad relocation type,1,[],https://github.com/WebAssembly/wabt/pull/1672,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1672,Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=30792,Fixes: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=30792,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1675,2021-06-12T20:38:52Z,2021-06-29T20:53:26Z,2021-06-29T20:53:26Z,MERGED,True,52,20,3,https://github.com/takikawa,Fix resolution of delegate labels,2,[],https://github.com/WebAssembly/wabt/pull/1675,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1675,"This PR has two commits for fixing bugs related to try-delegate labels.
One fixes the printing in certain cases (similar to #1609).
The other fixes the label resolution code. Example from the spec (https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/Exceptions.md):
try $l1
  try
    call $foo
  delegate $l1  ;; (= delegate 0)
catch
  ...
catch_all
  ...
end

The label $l1 should resolve to 0 in the delegate target, which is 1 less than how typical block constructs work. The current code mis-resolves this to 1. It should also error in cases like the following:
try $l1
  nop
delegate $l1

Because it's not possible to represent the label $l1 in the binary format, as a try-delegate cannot target itself.","This PR has two commits for fixing bugs related to try-delegate labels.
One fixes the printing in certain cases (similar to #1609).
The other fixes the label resolution code. Example from the spec (https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/Exceptions.md):
try $l1
  try
    call $foo
  delegate $l1  ;; (= delegate 0)
catch
  ...
catch_all
  ...
end

The label $l1 should resolve to 0 in the delegate target, which is 1 less than how typical block constructs work. The current code mis-resolves this to 1. It should also error in cases like the following:
try $l1
  nop
delegate $l1

Because it's not possible to represent the label $l1 in the binary format, as a try-delegate cannot target itself.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1675,2021-06-12T20:38:52Z,2021-06-29T20:53:26Z,2021-06-29T20:53:26Z,MERGED,True,52,20,3,https://github.com/takikawa,Fix resolution of delegate labels,2,[],https://github.com/WebAssembly/wabt/pull/1675,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1675#issuecomment-870145902,"This PR has two commits for fixing bugs related to try-delegate labels.
One fixes the printing in certain cases (similar to #1609).
The other fixes the label resolution code. Example from the spec (https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/Exceptions.md):
try $l1
  try
    call $foo
  delegate $l1  ;; (= delegate 0)
catch
  ...
catch_all
  ...
end

The label $l1 should resolve to 0 in the delegate target, which is 1 less than how typical block constructs work. The current code mis-resolves this to 1. It should also error in cases like the following:
try $l1
  nop
delegate $l1

Because it's not possible to represent the label $l1 in the binary format, as a try-delegate cannot target itself.","Sorry for the late reply! Can we split the two fixes into two separate PRs?

No problem, I've split the printing fix out as #1685 now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1675,2021-06-12T20:38:52Z,2021-06-29T20:53:26Z,2021-06-29T20:53:26Z,MERGED,True,52,20,3,https://github.com/takikawa,Fix resolution of delegate labels,2,[],https://github.com/WebAssembly/wabt/pull/1675,https://github.com/takikawa,3,https://github.com/WebAssembly/wabt/pull/1675#issuecomment-870147457,"This PR has two commits for fixing bugs related to try-delegate labels.
One fixes the printing in certain cases (similar to #1609).
The other fixes the label resolution code. Example from the spec (https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/Exceptions.md):
try $l1
  try
    call $foo
  delegate $l1  ;; (= delegate 0)
catch
  ...
catch_all
  ...
end

The label $l1 should resolve to 0 in the delegate target, which is 1 less than how typical block constructs work. The current code mis-resolves this to 1. It should also error in cases like the following:
try $l1
  nop
delegate $l1

Because it's not possible to represent the label $l1 in the binary format, as a try-delegate cannot target itself.","In order to make the two split PRs mergeable in any order, I changed the test addition in this PR. Instead of testing in roundtrip, this modifies dump/try-delegate.txt to ensure the label gets resolved correctly.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1676,2021-06-13T01:15:53Z,2021-06-30T00:34:52Z,2021-06-30T00:34:52Z,MERGED,True,87,67,11,https://github.com/takikawa,Allow plain `try` with no `catch` or `delegate`,2,[],https://github.com/WebAssembly/wabt/pull/1676,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1676,"Recent changes in the exception handling proposal spec (WebAssembly/exception-handling#157) now allow a try block with no catch or other clauses (to reduce syntactic special cases). In this case, a try is identical to a block.
This PR adds support for this extra case.","Recent changes in the exception handling proposal spec (WebAssembly/exception-handling#157) now allow a try block with no catch or other clauses (to reduce syntactic special cases). In this case, a try is identical to a block.
This PR adds support for this extra case.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1676,2021-06-13T01:15:53Z,2021-06-30T00:34:52Z,2021-06-30T00:34:52Z,MERGED,True,87,67,11,https://github.com/takikawa,Allow plain `try` with no `catch` or `delegate`,2,[],https://github.com/WebAssembly/wabt/pull/1676,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1676#issuecomment-866342094,"Recent changes in the exception handling proposal spec (WebAssembly/exception-handling#157) now allow a try block with no catch or other clauses (to reduce syntactic special cases). In this case, a try is identical to a block.
This PR adds support for this extra case.",Updated for compatibility with events->tag renaming.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1676,2021-06-13T01:15:53Z,2021-06-30T00:34:52Z,2021-06-30T00:34:52Z,MERGED,True,87,67,11,https://github.com/takikawa,Allow plain `try` with no `catch` or `delegate`,2,[],https://github.com/WebAssembly/wabt/pull/1676,https://github.com/takikawa,3,https://github.com/WebAssembly/wabt/pull/1676#issuecomment-866560546,"Recent changes in the exception handling proposal spec (WebAssembly/exception-handling#157) now allow a try block with no catch or other clauses (to reduce syntactic special cases). In this case, a try is identical to a block.
This PR adds support for this extra case.","@aheejin would you be a good person to review this patch? (ditto for #1675) I'd use ""request review"" but I think I can't use that feature on this repo.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1676,2021-06-13T01:15:53Z,2021-06-30T00:34:52Z,2021-06-30T00:34:52Z,MERGED,True,87,67,11,https://github.com/takikawa,Allow plain `try` with no `catch` or `delegate`,2,[],https://github.com/WebAssembly/wabt/pull/1676,https://github.com/takikawa,4,https://github.com/WebAssembly/wabt/pull/1676#issuecomment-870969869,"Recent changes in the exception handling proposal spec (WebAssembly/exception-handling#157) now allow a try block with no catch or other clauses (to reduce syntactic special cases). In this case, a try is identical to a block.
This PR adds support for this extra case.",This is now rebased to fix conflicts (conflicted with unwind deletion PR).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1677,2021-06-17T19:34:17Z,2021-06-17T23:24:01Z,2021-06-17T23:24:01Z,MERGED,True,1,0,1,https://github.com/ricochet,Add submodule init to README,1,[],https://github.com/WebAssembly/wabt/pull/1677,https://github.com/ricochet,1,https://github.com/WebAssembly/wabt/pull/1677,Add submodule init before CMake commands. gtest and others will fail when running cmake without this.,Add submodule init before CMake commands. gtest and others will fail when running cmake without this.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1678,2021-06-22T02:02:24Z,2021-06-22T20:06:29Z,2021-06-22T20:10:12Z,MERGED,True,1741,1749,78,https://github.com/aheejin,[EH] Replace event with tag,1,[],https://github.com/WebAssembly/wabt/pull/1678,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1678,"We recently decided to change 'event' to 'tag', and  'event section' to
'tag section', out of the rationale that the section contains a
generalized tag that references a type, which may be used for something
other than exceptions, and the name 'event' can be confusing in the web
context.
See

WebAssembly/exception-handling#159 (comment)
WebAssembly/exception-handling#161","We recently decided to change 'event' to 'tag', and  'event section' to
'tag section', out of the rationale that the section contains a
generalized tag that references a type, which may be used for something
other than exceptions, and the name 'event' can be confusing in the web
context.
See

WebAssembly/exception-handling#159 (comment)
WebAssembly/exception-handling#161",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1679,2021-06-25T21:23:46Z,2021-06-25T21:48:22Z,2021-06-25T21:50:18Z,MERGED,True,17,1468,3,https://github.com/SoniEx2,wasm2c: Support sign-extend,1,[],https://github.com/WebAssembly/wabt/pull/1679,https://github.com/SoniEx2,1,https://github.com/WebAssembly/wabt/pull/1679,"This doesn't touch the error when passing --disable-sign-extension to wasm2c, but nothing really tests the --enable/--disable feature flags anyway so it should be a non-issue.
(The casts are technically implementation-defined, but they're being relied on elsewhere as well so it's a non-issue.)","This doesn't touch the error when passing --disable-sign-extension to wasm2c, but nothing really tests the --enable/--disable feature flags anyway so it should be a non-issue.
(The casts are technically implementation-defined, but they're being relied on elsewhere as well so it's a non-issue.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1680,2021-06-26T03:03:08Z,2021-06-29T00:54:20Z,2021-06-29T01:32:31Z,MERGED,True,68,706,4,https://github.com/SoniEx2,wasm2c: Support saturating-float-to-int,1,[],https://github.com/WebAssembly/wabt/pull/1680,https://github.com/SoniEx2,1,https://github.com/WebAssembly/wabt/pull/1680,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1680,2021-06-26T03:03:08Z,2021-06-29T00:54:20Z,2021-06-29T01:32:31Z,MERGED,True,68,706,4,https://github.com/SoniEx2,wasm2c: Support saturating-float-to-int,1,[],https://github.com/WebAssembly/wabt/pull/1680,https://github.com/SoniEx2,2,https://github.com/WebAssembly/wabt/pull/1680#issuecomment-869849245,,"(Same caveats with --disable-* flags as #1679 apply. This was fairly trivial tho, it was basically a matter of copy-paste.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1681,2021-06-26T04:42:59Z,2021-06-29T22:17:48Z,2021-06-29T22:17:51Z,MERGED,True,3,3,2,https://github.com/aheejin,[EH] Make tag attribute's encoding uint8,1,[],https://github.com/WebAssembly/wabt/pull/1681,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1681,"This changes the encoding of the attribute field, which currently only
contains the value 0 denoting this tag is for an exception, from
varuint32 to uint8. This field is effectively unused at the moment
and reserved for future use, and it is not likely to need varuint32
even in future.
See WebAssembly/exception-handling#162.
This does not change any encoded binaries because 0 is encoded in the
same way both in varuint32 and uint8.","This changes the encoding of the attribute field, which currently only
contains the value 0 denoting this tag is for an exception, from
varuint32 to uint8. This field is effectively unused at the moment
and reserved for future use, and it is not likely to need varuint32
even in future.
See WebAssembly/exception-handling#162.
This does not change any encoded binaries because 0 is encoded in the
same way both in varuint32 and uint8.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1682,2021-06-26T10:13:38Z,2021-06-29T22:18:09Z,2021-06-29T22:18:12Z,MERGED,True,14,325,32,https://github.com/aheejin,[EH] Remove `unwind`,2,[],https://github.com/WebAssembly/wabt/pull/1682,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1682,unwind was removed. See WebAssembly/exception-handling#156.,unwind was removed. See WebAssembly/exception-handling#156.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1682,2021-06-26T10:13:38Z,2021-06-29T22:18:09Z,2021-06-29T22:18:12Z,MERGED,True,14,325,32,https://github.com/aheejin,[EH] Remove `unwind`,2,[],https://github.com/WebAssembly/wabt/pull/1682,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1682#issuecomment-870164823,unwind was removed. See WebAssembly/exception-handling#156.,LGTM other than comments above.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1682,2021-06-26T10:13:38Z,2021-06-29T22:18:09Z,2021-06-29T22:18:12Z,MERGED,True,14,325,32,https://github.com/aheejin,[EH] Remove `unwind`,2,[],https://github.com/WebAssembly/wabt/pull/1682,https://github.com/takikawa,3,https://github.com/WebAssembly/wabt/pull/1682#issuecomment-870692656,unwind was removed. See WebAssembly/exception-handling#156.,"Thanks for the fixes. BTW, I don't actually have write access to this repo so I don't think it's counting my review as allowing merging (and same on #1681), just so you know. I have no other comments on the PR though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1683,2021-06-27T03:29:20Z,2021-08-06T04:32:20Z,2021-08-06T04:32:23Z,MERGED,True,30,1,3,https://github.com/aheejin,Add clang-format check to CI,7,[],https://github.com/WebAssembly/wabt/pull/1683,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1683,"This adds clang-format check to the CI. This only checks the diff so it
doesn't affect the other parts of the codebase. Also generated files in
src/prebuilt/ directories are excluded from the check. A new
src/prebuilt/.clang-format is added to disable the check in the
directory.
scripts/clang-format-diff.sh is copied from the same file we are using in
Binaryen.
Two clang-format errors are added to test if CI correctly errors out;
one within a normal source file in src/, and the other in src/prebuilt.
The latter should not be shown in the error, because the directory is
excluded. The errors will be removed before merging.","This adds clang-format check to the CI. This only checks the diff so it
doesn't affect the other parts of the codebase. Also generated files in
src/prebuilt/ directories are excluded from the check. A new
src/prebuilt/.clang-format is added to disable the check in the
directory.
scripts/clang-format-diff.sh is copied from the same file we are using in
Binaryen.
Two clang-format errors are added to test if CI correctly errors out;
one within a normal source file in src/, and the other in src/prebuilt.
The latter should not be shown in the error, because the directory is
excluded. The errors will be removed before merging.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1683,2021-06-27T03:29:20Z,2021-08-06T04:32:20Z,2021-08-06T04:32:23Z,MERGED,True,30,1,3,https://github.com/aheejin,Add clang-format check to CI,7,[],https://github.com/WebAssembly/wabt/pull/1683,https://github.com/aheejin,2,https://github.com/WebAssembly/wabt/pull/1683#issuecomment-869095570,"This adds clang-format check to the CI. This only checks the diff so it
doesn't affect the other parts of the codebase. Also generated files in
src/prebuilt/ directories are excluded from the check. A new
src/prebuilt/.clang-format is added to disable the check in the
directory.
scripts/clang-format-diff.sh is copied from the same file we are using in
Binaryen.
Two clang-format errors are added to test if CI correctly errors out;
one within a normal source file in src/, and the other in src/prebuilt.
The latter should not be shown in the error, because the directory is
excluded. The errors will be removed before merging.",It looks the CI correct displays the clang-format error I introduced: https://github.com/WebAssembly/wabt/pull/1683/checks?check_run_id=2923646482,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1683,2021-06-27T03:29:20Z,2021-08-06T04:32:20Z,2021-08-06T04:32:23Z,MERGED,True,30,1,3,https://github.com/aheejin,Add clang-format check to CI,7,[],https://github.com/WebAssembly/wabt/pull/1683,https://github.com/aheejin,3,https://github.com/WebAssembly/wabt/pull/1683#issuecomment-893906809,"This adds clang-format check to the CI. This only checks the diff so it
doesn't affect the other parts of the codebase. Also generated files in
src/prebuilt/ directories are excluded from the check. A new
src/prebuilt/.clang-format is added to disable the check in the
directory.
scripts/clang-format-diff.sh is copied from the same file we are using in
Binaryen.
Two clang-format errors are added to test if CI correctly errors out;
one within a normal source file in src/, and the other in src/prebuilt.
The latter should not be shown in the error, because the directory is
excluded. The errors will be removed before merging.",@sbc100 Can you LG this?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1684,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/kripken,2,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-869772186,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","This sounds good to me, but one thing we should confirm before landing (if we decide to do that) is to check if it causes large conflicts with existing or intended PRs. I'll ask around about the latter.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/aardappel,3,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-869832576,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","It looks like we may want to enable AllowShortCaseLabelsOnASingleLine (and maybe AllowShortBlocksOnASingleLine, AllowShortFunctionsOnASingleLine, AllowShortIfStatementsOnASingleLine) to automatically solve a lot of those more readable cases @sbc100 found. Though of course that is likely to change things the other way too.
Besides that, // clang-format off and on around a block can solve individual cases.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/aheejin,4,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-870125029,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","I pushed newly formatted code to see how it compares with the current codebase. I haven't addressed a few comments from @sbc100 on preserving the current formatting, which will be addressed soon.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/aheejin,5,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-870186371,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","Also many changes are due to how we list parameters, like this:

We can make the current style stay by setting BinPackParameters: true in .clang-format. Let me know if you want that. I don't have specific preference myself.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/aheejin,6,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-870190074,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","I ended up adding too many lines of // clang-format off and // clang-format on in interp-inl.h and interp-math.h, so I just wrapped the whole file with // clang-format off and on rather than trying to wrap each small region of code.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-870190730,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","Also many changes are due to how we list parameters, like this:

We can make the current style stay by setting BinPackParameters: true in .clang-format. Let me know if you want that. I don't have specific preference myself.

I don't feel strongly about this one because I don't feel like it worsens scanability/readability (unlike the alignment stuff that we have in some places).   Happy to go either way and I guess we don't have any reason to differ from chromium on this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-870703973,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","One option for us if we want to do this a little more incrementally, and with a little more flexibility, is to simply revert any part of this PR that are semi-controversial, then land it as a ""format 95% of the codebase"".   We would then need some way to override the clang-format CI check (I guess we already have the ability to force commit as admins in those cases).  That way we can punt the hard parts and get almost all the benefits.   If we want to revisit the final 5% at a later date we can (at which point the diff will be much more reasonably sided and focused).  WDYT?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/sbc100,9,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-870709264,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","One option for us if we want to do this a little more incrementally, and with a little more flexibility, is to simply revert any part of this PR that are semi-controversial, then land it as a ""format 95% of the codebase"". We would then need some way to override the clang-format CI check (I guess we already have the ability to force commit as admins in those cases). That way we can punt the hard parts and get almost all the benefits. If we want to revisit the final 5% at a later date we can (at which point the diff will be much more reasonably sided and focused). WDYT?

I believe this would put is roughly in the same place as LLVM itself, which has clang-format messages as warnings in PRs but nowhere near universal conformance across the code base (we would be in way better state than that but not perfect yet).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/aheejin,10,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-870886046,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","One option for us if we want to do this a little more incrementally, and with a little more flexibility, is to simply revert any part of this PR that are semi-controversial, then land it as a ""format 95% of the codebase"". We would then need some way to override the clang-format CI check (I guess we already have the ability to force commit as admins in those cases). That way we can punt the hard parts and get almost all the benefits. If we want to revisit the final 5% at a later date we can (at which point the diff will be much more reasonably sided and focused). WDYT?

OK, that sounds good. Do you prefer to wrap those controversial blocks with // clang-format off and on or just revert the changes? We already placed many // clang-format offs:
aheejin@aheejin:~/wabt/src$ grep clang-format * -R
binary.cc:// clang-format off
binary.cc:// clang-format on
binary.h:/* clang-format off */
binary.h:/* clang-format on */
decompiler-naming.h:  // clang-format off
decompiler-naming.h:  // clang-format on
interp/interp-inl.h:// clang-format off
interp/interp-inl.h:// clang-format on
interp/interp-math.h:// clang-format off
interp/interp-math.h:// clang-format on
interp/interp.cc:  // clang-format off
interp/interp.cc:  // clang-format on
interp/interp.cc:// clang-format off
interp/interp.cc:// clang-format on
utf8.cc:// clang-format off
utf8.cc:// clang-format on

And how do we figure out which parts are controversial? Do we exclude only the parts you pointed out, or, like, exclude all single-lined switch-cases from formatting, which will be harder?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/sbc100,11,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-870953791,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","One option for us if we want to do this a little more incrementally, and with a little more flexibility, is to simply revert any part of this PR that are semi-controversial, then land it as a ""format 95% of the codebase"". We would then need some way to override the clang-format CI check (I guess we already have the ability to force commit as admins in those cases). That way we can punt the hard parts and get almost all the benefits. If we want to revisit the final 5% at a later date we can (at which point the diff will be much more reasonably sided and focused). WDYT?

OK, that sounds good. Do you prefer to wrap those controversial blocks with // clang-format off and on or just revert the changes? We already placed many // clang-format offs:
aheejin@aheejin:~/wabt/src$ grep clang-format * -R
binary.cc:// clang-format off
binary.cc:// clang-format on
binary.h:/* clang-format off */
binary.h:/* clang-format on */
decompiler-naming.h:  // clang-format off
decompiler-naming.h:  // clang-format on
interp/interp-inl.h:// clang-format off
interp/interp-inl.h:// clang-format on
interp/interp-math.h:// clang-format off
interp/interp-math.h:// clang-format on
interp/interp.cc:  // clang-format off
interp/interp.cc:  // clang-format on
interp/interp.cc:// clang-format off
interp/interp.cc:// clang-format on
utf8.cc:// clang-format off
utf8.cc:// clang-format on

And how do we figure out which parts are controversial? Do we exclude only the parts you pointed out, or, like, exclude all single-lined switch-cases from formatting, which will be harder?

No harm in leaving those in there.
I'll just to one more pass though and flag anything I think we should hold off on, then we can land this I think.
Unless @binji wants to chime in?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/aheejin,12,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-871800810,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","I double-checked the diff and a) reverted a few more case patterns @sbc100 was concerned about, and b) added curlies for one-line ifs that were merged into a single-line. 'b)' complies with the current .clang-format but due to 'a)' we have some parts of the code that don't comply the current .clang-format. I also ended up removing a few // clang-format off and ons added during this PR because we anyway ended up leaving many blocks of code unformatted, so wrapping only a few of them with // clang-format off felt somewhat inconsistent.
The following is how much the diff is between this PR and the fully-formatted codebase based on the current .clang-format:
$ git diff --stat
 src/binary.cc                      |   12 +-
 src/c-writer.cc                    |  157 +++-
 src/decompiler-ls.h                |   54 +-
 src/decompiler-naming.h            |   18 +-
 src/interp/binary-reader-interp.cc |   20 +-
 src/interp/interp-inl.h            |  279 +++++--
 src/interp/interp-math.h           |  289 +++++--
 src/interp/interp.cc               | 1651 +++++++++++++++++++++++++-------------
 src/ir.h                           |   21 +-
 src/opcode.cc                      |    9 +-
 src/test-interp.cc                 |    6 +-
 src/tools/spectest-interp.cc       |   22 +-
 src/type.h                         |   54 +-
 src/wast-parser.cc                 |   85 +-
 14 files changed, 1873 insertions(+), 804 deletions(-)

I think we can address this separately by tweaking .clang-format, or not aim for 100% compliance as @sbc100 suggested.
I'll wait for some more days in case @binji wants to chime in before landing. Thanks for the feedback!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/sbc100,13,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-938023154,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.",Shall we try to get this landed?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/kripken,14,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-938049748,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","Let's maybe wait for the large wasm2c PR to land first, to avoid a big conflict there? (#1721)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/aheejin,15,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-997318566,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.","I merged the current main into this PR and fixed a few lines that were added after this PR. clang-format CI currently fails because of one of many code parts we reverted before. This lands us in a tricky situation: I think the ideal state is the current codebase is equal to the result that we mechanically run clang-format on. If we want to exclude certain parts, we can do // clang-format off and // clang-format on. But we excluded too many parts to wrap all of them in it, mostly one-liner functions. So some parts in the code does not match the clang-format results now, which is probably OK. But that means we need to ignore the clang-format CI time to time. If people are OK with ignoring the CI failure now, I'll go ahead and land this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1684,2021-06-27T04:45:53Z,2021-12-21T03:35:01Z,2021-12-21T03:35:05Z,MERGED,True,1120,1011,70,https://github.com/aheejin,Clang-format codebase,21,[],https://github.com/WebAssembly/wabt/pull/1684,https://github.com/aheejin,16,https://github.com/WebAssembly/wabt/pull/1684#issuecomment-998442921,"This applies clang-format to the whole codebase.
I noticed we have .clang-format in wabt but the codebase is not very
well formatted. This kind of mass-formatting PR has fans and skeptics
because it can mess with git blame, but we did a similar thing in
Binaryen a few years ago (WebAssembly/binaryen#2048, which was merged in
WebAssembly/binaryen#2059) and it was not very confusing after all.
If we are ever going to format the codebase, I think it is easier to do
it in a single big PR than dozens of smaller PRs.
This is using the existing .clang-format file in this repo, which
follows the style of Chromium. If we think this does not suit the
current formatting style, we can potentially tweak .clang-format too.
For example, I noticed the current codebase puts many case statements
within a single line when they are short, but the current .clang-format
does not allow that.
This does not include files in src/prebuilt, because they are generated.
This also manually fixes some comment lines, because mechanically
applying clang-format to long inline comments can look weird.
This PR is mainly to listen to opinions and it is OK we end up not
merging this. (Also even if we end up merging this, I'm not sure if I am
the right person to change this many lines of code, given that I am not
a frequent contributor in this repo.)
I also added a clang-format check hook in the Github CI in #1683, which
I think can be less controversial, given that it only checks the diff.",I ended up reverting the change that caused the CI failure because I don't have the administrator access that's required to merge PRs with CI failure 😅 Will merge this now.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1685,2021-06-29T00:53:42Z,2021-06-29T20:54:58Z,2021-06-29T20:54:58Z,MERGED,True,30,0,2,https://github.com/takikawa,Fix printing of try-delegate labels,1,[],https://github.com/WebAssembly/wabt/pull/1685,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1685,"This is similar to a previous bug (#1609) for other kinds of block labels.
The tests check that 2+ adjacent try-delegate blocks will have labels that print correctly.
(split from #1675)","This is similar to a previous bug (#1609) for other kinds of block labels.
The tests check that 2+ adjacent try-delegate blocks will have labels that print correctly.
(split from #1675)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1686,2021-07-04T03:08:23Z,2021-07-14T22:44:27Z,2021-07-28T14:23:43Z,MERGED,True,181,7054,13,https://github.com/SoniEx2,wasm2c: Support multi-value,2,[],https://github.com/WebAssembly/wabt/pull/1686,https://github.com/SoniEx2,1,https://github.com/WebAssembly/wabt/pull/1686,,,True,{'HEART': ['https://github.com/vshymanskyy']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1691,2021-07-12T11:14:33Z,2021-07-25T17:41:33Z,2021-07-31T19:23:37Z,MERGED,True,980,613,44,https://github.com/dbezhetskov,Begin support for typed function references proposal: added the flag and supported call_ref,2,[],https://github.com/WebAssembly/wabt/pull/1691,https://github.com/dbezhetskov,1,https://github.com/WebAssembly/wabt/pull/1691,The corresponding issue: #1377,The corresponding issue: #1377,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1691,2021-07-12T11:14:33Z,2021-07-25T17:41:33Z,2021-07-31T19:23:37Z,MERGED,True,980,613,44,https://github.com/dbezhetskov,Begin support for typed function references proposal: added the flag and supported call_ref,2,[],https://github.com/WebAssembly/wabt/pull/1691,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1691#issuecomment-879448610,The corresponding issue: #1377,"LGTM other than my one comment, but I'm not an approving reviewer so I think you'll need another approval too (also apparently you need an approval to have the CI tests run for this PR https://docs.github.com/en/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks#approving-workflow-runs-on-a-pull-request-from-a-public-fork)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1691,2021-07-12T11:14:33Z,2021-07-25T17:41:33Z,2021-07-31T19:23:37Z,MERGED,True,980,613,44,https://github.com/dbezhetskov,Begin support for typed function references proposal: added the flag and supported call_ref,2,[],https://github.com/WebAssembly/wabt/pull/1691,https://github.com/dbezhetskov,3,https://github.com/WebAssembly/wabt/pull/1691#issuecomment-879562874,The corresponding issue: #1377,"Hi @kripken and @sbc100, could you review these changes changes please?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1691,2021-07-12T11:14:33Z,2021-07-25T17:41:33Z,2021-07-31T19:23:37Z,MERGED,True,980,613,44,https://github.com/dbezhetskov,Begin support for typed function references proposal: added the flag and supported call_ref,2,[],https://github.com/WebAssembly/wabt/pull/1691,https://github.com/dbezhetskov,4,https://github.com/WebAssembly/wabt/pull/1691#issuecomment-883918341,The corresponding issue: #1377,"I wonder if this change can land without the addition of IsFuncOrExternRef and the changes to IsNullable? (Those could then be added as needed and/or as followups?).

Yep, let's move this functionality to the next patches because now we aren't able to test it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1691,2021-07-12T11:14:33Z,2021-07-25T17:41:33Z,2021-07-31T19:23:37Z,MERGED,True,980,613,44,https://github.com/dbezhetskov,Begin support for typed function references proposal: added the flag and supported call_ref,2,[],https://github.com/WebAssembly/wabt/pull/1691,https://github.com/dbezhetskov,5,https://github.com/WebAssembly/wabt/pull/1691#issuecomment-886199922,The corresponding issue: #1377,"Hi @sbc100, binji seems unavailable, could we assign another person for review? Or could we land this?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1691,2021-07-12T11:14:33Z,2021-07-25T17:41:33Z,2021-07-31T19:23:37Z,MERGED,True,980,613,44,https://github.com/dbezhetskov,Begin support for typed function references proposal: added the flag and supported call_ref,2,[],https://github.com/WebAssembly/wabt/pull/1691,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1691#issuecomment-886235095,The corresponding issue: #1377,"I think we can can go ahead and land this.
BTW, what is the status of the tests in the funcref proposal repo?    I see they exist at  https://github.com/WebAssembly/testsuite/tree/master/proposals.   I guess we should using them here in wabt once we get a few more things working?",True,{'THUMBS_UP': ['https://github.com/dbezhetskov']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1693,2021-07-14T14:42:50Z,2021-10-11T13:44:44Z,2021-10-11T13:44:44Z,CLOSED,False,621,0,18,https://github.com/yuri91,Branch hinting,5,[],https://github.com/WebAssembly/wabt/pull/1693,https://github.com/yuri91,1,https://github.com/WebAssembly/wabt/pull/1693,"This PR adds basic support for handling the custom section ""branchHints"" (see Branch Hinting proposal).
I added code to parse the section in the binary reader, and call new appropriate visitor methods with the parsed information.
I also Implemented the new visitor methods for the binary reader logger and the binary reader objdump.
So now it is possible to use wasm-objdump to output the contents of the section in a readable format, and wasm-validate will complain if the section is malformed.
The branchHints section parsing is done conditionally with a feature flag --enable-branch-hinting.
I also added some tests.
A possible further improvement would be to mark the hinted branches as such  in the code output of wasm-objdump/wasm-decompile.","This PR adds basic support for handling the custom section ""branchHints"" (see Branch Hinting proposal).
I added code to parse the section in the binary reader, and call new appropriate visitor methods with the parsed information.
I also Implemented the new visitor methods for the binary reader logger and the binary reader objdump.
So now it is possible to use wasm-objdump to output the contents of the section in a readable format, and wasm-validate will complain if the section is malformed.
The branchHints section parsing is done conditionally with a feature flag --enable-branch-hinting.
I also added some tests.
A possible further improvement would be to mark the hinted branches as such  in the code output of wasm-objdump/wasm-decompile.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1693,2021-07-14T14:42:50Z,2021-10-11T13:44:44Z,2021-10-11T13:44:44Z,CLOSED,False,621,0,18,https://github.com/yuri91,Branch hinting,5,[],https://github.com/WebAssembly/wabt/pull/1693,https://github.com/yuri91,2,https://github.com/WebAssembly/wabt/pull/1693#issuecomment-940045943,"This PR adds basic support for handling the custom section ""branchHints"" (see Branch Hinting proposal).
I added code to parse the section in the binary reader, and call new appropriate visitor methods with the parsed information.
I also Implemented the new visitor methods for the binary reader logger and the binary reader objdump.
So now it is possible to use wasm-objdump to output the contents of the section in a readable format, and wasm-validate will complain if the section is malformed.
The branchHints section parsing is done conditionally with a feature flag --enable-branch-hinting.
I also added some tests.
A possible further improvement would be to mark the hinted branches as such  in the code output of wasm-objdump/wasm-decompile.","I am closing this in favor of #1724 , which add support for the more general ""code annotations"" ( branch hinting will soon be based on them)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/dbezhetskov,1,https://github.com/WebAssembly/wabt/pull/1695,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions","This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/dbezhetskov,2,https://github.com/WebAssembly/wabt/pull/1695#issuecomment-892666221,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions","Hi Sam, could you review please? @sbc100",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/dbezhetskov,3,https://github.com/WebAssembly/wabt/pull/1695#issuecomment-899282119,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions","Gentle ping on this, @sbc100",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/dbezhetskov,4,https://github.com/WebAssembly/wabt/pull/1695#issuecomment-916147553,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions","Gentle ping on this, @sbc100, @tlively, @aardappel",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/aardappel,5,https://github.com/WebAssembly/wabt/pull/1695#issuecomment-916281385,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions",probably @tlively for the function reference specifics.. otherwise looks nice to me.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1695#issuecomment-942788077,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions",I think this change could be useful with updating to the latest testsuite.. would be great to get it landed.  Apologies for taking so long to review it.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1695#issuecomment-952092977,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions",Are you still interested in landing this?  Looks like just a couple of nits a rebase needed.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/dbezhetskov,8,https://github.com/WebAssembly/wabt/pull/1695#issuecomment-953523411,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions","Are you still interested in landing this? Looks like just a couple of nits a rebase needed.
Yep, I'll rebase the patch later this week",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/dbezhetskov,9,https://github.com/WebAssembly/wabt/pull/1695#issuecomment-968684214,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions","Hi @sbc100 , sorry for the long replay. I've rebased the code and updated the tests and provided feedback about the code, so when you have time, please review it",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1695,2021-08-04T12:47:08Z,2021-11-16T15:02:46Z,2021-11-16T15:02:46Z,MERGED,True,3914,1460,23,https://github.com/dbezhetskov,Support function references in parameters and results,1,[],https://github.com/WebAssembly/wabt/pull/1695,https://github.com/dbezhetskov,10,https://github.com/WebAssembly/wabt/pull/1695#issuecomment-970072690,"This PR support usage of (ref $foo) in parameters and results of functions and blocks.
Technical notes:

To represent symbolic types like (ref $foo) I need to extend class Type with std::string or Var maybe,
but class Type is POD because we use it in many places as a field of unions, so I've externally extended it with mapping from parameter/result indices to its names.
It is not possible to use reference types in locals. I've done this locally but decided add it in the next PR not to blow this one.
Now (ref.func $foo) pushes type index instead of function index, and now it is exactly matching the spec https://github.com/WebAssembly/function-references/blob/master/proposals/function-references/Overview.md#functions","I assume the plan is to integrate the function-references testsuite as a followup?

I have a wip patch for support of references in locals dbezhetskov@44bf83a
with it we can integrate spec tests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1696,2021-08-05T00:54:46Z,2021-08-05T19:39:53Z,2021-08-05T19:39:53Z,MERGED,True,78,3,5,https://github.com/dschuff,Add objdump flag to print section offsets instead of file offsets,4,[],https://github.com/WebAssembly/wabt/pull/1696,https://github.com/dschuff,1,https://github.com/WebAssembly/wabt/pull/1696,"This is useful for working with debug info, which uses section offsets","This is useful for working with debug info, which uses section offsets",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1696,2021-08-05T00:54:46Z,2021-08-05T19:39:53Z,2021-08-05T19:39:53Z,MERGED,True,78,3,5,https://github.com/dschuff,Add objdump flag to print section offsets instead of file offsets,4,[],https://github.com/WebAssembly/wabt/pull/1696,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/1696#issuecomment-893711360,"This is useful for working with debug info, which uses section offsets","There could maybe be some more places where it might be useful to also show section offsets under this flag, but this is useful as-is too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1697,2021-08-05T22:00:28Z,2021-08-05T22:13:53Z,2021-08-05T22:40:31Z,MERGED,True,2,2,1,https://github.com/ngzhian,[simd] Fix load/store lanes on BE systems,1,[],https://github.com/WebAssembly/wabt/pull/1697,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1697,"The use of .v is incorrect, we should simply use array subscript
operator on the Simd type, which takes care of BE systems.
For #1670. (Not using fix as I don't have a BE system to verify.)","The use of .v is incorrect, we should simply use array subscript
operator on the Simd type, which takes care of BE systems.
For #1670. (Not using fix as I don't have a BE system to verify.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1698,2021-08-05T22:42:59Z,2021-08-05T23:30:39Z,2021-08-05T23:31:37Z,CLOSED,False,27,16,2,https://github.com/ngzhian,[simd] Make array backing Simd type private,1,[],https://github.com/WebAssembly/wabt/pull/1698,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1698,"This should prevent us accidentally using it without going through the
endian-aware subscript operators.
Drive-by clean up to remove unused template parameters.","This should prevent us accidentally using it without going through the
endian-aware subscript operators.
Drive-by clean up to remove unused template parameters.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1699,2021-08-05T23:21:53Z,2021-08-06T16:53:04Z,2021-08-06T16:53:25Z,MERGED,True,13,2,2,https://github.com/ngzhian,[simd] Shift alignment_log2 before validation,1,[],https://github.com/WebAssembly/wabt/pull/1699,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1699,"The alignment value in binary format is log2, so we need to shift it in
binary-reader-ir before it is validated (since validation requires that
it is shifted to be the number of bytes). We correctly did that for some
Simd instructions (like load splat) but did not do it for load/store
lane.
Fixes #1674.","The alignment value in binary format is log2, so we need to shift it in
binary-reader-ir before it is validated (since validation requires that
it is shifted to be the number of bytes). We correctly did that for some
Simd instructions (like load splat) but did not do it for load/store
lane.
Fixes #1674.",True,{'HOORAY': ['https://github.com/abrown']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1700,2021-08-05T23:31:55Z,2021-08-06T16:53:51Z,2021-08-06T16:53:54Z,MERGED,True,6,7,2,https://github.com/ngzhian,[simd] Remove unused template params,1,[],https://github.com/WebAssembly/wabt/pull/1700,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1700,"Also remove an unused transform, we are applying the unop f in the for
loop directly after it.","Also remove an unused transform, we are applying the unop f in the for
loop directly after it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1701,2021-08-11T19:19:01Z,2021-08-11T20:00:51Z,2021-08-30T09:36:57Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.24,1,[],https://github.com/WebAssembly/wabt/pull/1701,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1701,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1701,2021-08-11T19:19:01Z,2021-08-11T20:00:51Z,2021-08-30T09:36:57Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.24,1,[],https://github.com/WebAssembly/wabt/pull/1701,https://github.com/Horcrux7,2,https://github.com/WebAssembly/wabt/pull/1701#issuecomment-907795773,,Will there also binaries for this version?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1701,2021-08-11T19:19:01Z,2021-08-11T20:00:51Z,2021-08-30T09:36:57Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.24,1,[],https://github.com/WebAssembly/wabt/pull/1701,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1701#issuecomment-908196276,,I created a actual release through the github UI so that actions that publish binaries are now running.,True,{'THUMBS_UP': ['https://github.com/Horcrux7']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1702,2021-08-17T05:47:07Z,2021-10-26T02:46:30Z,2021-10-26T02:46:30Z,MERGED,True,1,2,1,https://github.com/clover2123,Fix a range of data type warning in gcc,1,[],https://github.com/WebAssembly/wabt/pull/1702,https://github.com/clover2123,1,https://github.com/WebAssembly/wabt/pull/1702,"This patch fixes a limited range of data type warning.
Warning description:
In some part of WABT_PRINTF_TYPE_CODE calls, an unsigned value (uint8_t type) is passed. This value is checked if it is signed or not, but this comparison is always false due to its type. So, it triggers a range of data type warning (-Wtype-limits) in gcc compilation.
Signed-off-by: HyukWoo Park hyukwoo.park@samsung.com","This patch fixes a limited range of data type warning.
Warning description:
In some part of WABT_PRINTF_TYPE_CODE calls, an unsigned value (uint8_t type) is passed. This value is checked if it is signed or not, but this comparison is always false due to its type. So, it triggers a range of data type warning (-Wtype-limits) in gcc compilation.
Signed-off-by: HyukWoo Park hyukwoo.park@samsung.com",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1702,2021-08-17T05:47:07Z,2021-10-26T02:46:30Z,2021-10-26T02:46:30Z,MERGED,True,1,2,1,https://github.com/clover2123,Fix a range of data type warning in gcc,1,[],https://github.com/WebAssembly/wabt/pull/1702,https://github.com/clover2123,2,https://github.com/WebAssembly/wabt/pull/1702#issuecomment-920809669,"This patch fixes a limited range of data type warning.
Warning description:
In some part of WABT_PRINTF_TYPE_CODE calls, an unsigned value (uint8_t type) is passed. This value is checked if it is signed or not, but this comparison is always false due to its type. So, it triggers a range of data type warning (-Wtype-limits) in gcc compilation.
Signed-off-by: HyukWoo Park hyukwoo.park@samsung.com","Hi @sbc100
Would you please take a look at this patch?
(its my first contribution to wabt, so I first need to run actions)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1702,2021-08-17T05:47:07Z,2021-10-26T02:46:30Z,2021-10-26T02:46:30Z,MERGED,True,1,2,1,https://github.com/clover2123,Fix a range of data type warning in gcc,1,[],https://github.com/WebAssembly/wabt/pull/1702,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1702#issuecomment-938334471,"This patch fixes a limited range of data type warning.
Warning description:
In some part of WABT_PRINTF_TYPE_CODE calls, an unsigned value (uint8_t type) is passed. This value is checked if it is signed or not, but this comparison is always false due to its type. So, it triggers a range of data type warning (-Wtype-limits) in gcc compilation.
Signed-off-by: HyukWoo Park hyukwoo.park@samsung.com",Did you mean to push more changes here?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1702,2021-08-17T05:47:07Z,2021-10-26T02:46:30Z,2021-10-26T02:46:30Z,MERGED,True,1,2,1,https://github.com/clover2123,Fix a range of data type warning in gcc,1,[],https://github.com/WebAssembly/wabt/pull/1702,https://github.com/clover2123,4,https://github.com/WebAssembly/wabt/pull/1702#issuecomment-938335107,"This patch fixes a limited range of data type warning.
Warning description:
In some part of WABT_PRINTF_TYPE_CODE calls, an unsigned value (uint8_t type) is passed. This value is checked if it is signed or not, but this comparison is always false due to its type. So, it triggers a range of data type warning (-Wtype-limits) in gcc compilation.
Signed-off-by: HyukWoo Park hyukwoo.park@samsung.com","@sbc100
I've just fixed a lint error. Thanks:)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1702,2021-08-17T05:47:07Z,2021-10-26T02:46:30Z,2021-10-26T02:46:30Z,MERGED,True,1,2,1,https://github.com/clover2123,Fix a range of data type warning in gcc,1,[],https://github.com/WebAssembly/wabt/pull/1702,https://github.com/clover2123,5,https://github.com/WebAssembly/wabt/pull/1702#issuecomment-948279570,"This patch fixes a limited range of data type warning.
Warning description:
In some part of WABT_PRINTF_TYPE_CODE calls, an unsigned value (uint8_t type) is passed. This value is checked if it is signed or not, but this comparison is always false due to its type. So, it triggers a range of data type warning (-Wtype-limits) in gcc compilation.
Signed-off-by: HyukWoo Park hyukwoo.park@samsung.com",This patch is now ready for review.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1705,2021-08-28T16:46:52Z,2021-08-30T00:16:00Z,2021-08-30T00:59:03Z,MERGED,True,1,1,1,https://github.com/inokawa,Fix typo,1,[],https://github.com/WebAssembly/wabt/pull/1705,https://github.com/inokawa,1,https://github.com/WebAssembly/wabt/pull/1705,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1706,2021-09-08T10:03:36Z,2021-09-09T16:58:42Z,2021-09-09T16:58:43Z,MERGED,True,8,3,3,https://github.com/sbc100,Support TLS symbol flag,1,[],https://github.com/WebAssembly/wabt/pull/1706,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1706,See https://reviews.llvm.org/D109426,See https://reviews.llvm.org/D109426,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1706,2021-09-08T10:03:36Z,2021-09-09T16:58:42Z,2021-09-09T16:58:43Z,MERGED,True,8,3,3,https://github.com/sbc100,Support TLS symbol flag,1,[],https://github.com/WebAssembly/wabt/pull/1706,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1706#issuecomment-916263020,See https://reviews.llvm.org/D109426,ping..,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1707,2021-09-10T11:51:46Z,2021-09-10T17:35:45Z,2021-09-10T17:35:45Z,MERGED,True,103,0,5,https://github.com/sbc100,Support new dylink.0 custom section format,1,[],https://github.com/WebAssembly/wabt/pull/1707,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1707,"This section is now based on sub-sections making it more
extensible.
See also:
llvm change: https://reviews.llvm.org/D109595
binaryen change: WebAssembly/binaryen#4141","This section is now based on sub-sections making it more
extensible.
See also:
llvm change: https://reviews.llvm.org/D109595
binaryen change: WebAssembly/binaryen#4141",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1707,2021-09-10T11:51:46Z,2021-09-10T17:35:45Z,2021-09-10T17:35:45Z,MERGED,True,103,0,5,https://github.com/sbc100,Support new dylink.0 custom section format,1,[],https://github.com/WebAssembly/wabt/pull/1707,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/1707#issuecomment-917025588,"This section is now based on sub-sections making it more
extensible.
See also:
llvm change: https://reviews.llvm.org/D109595
binaryen change: WebAssembly/binaryen#4141",I guess onSymbol would be useful for something like a wabt-nm but isn't used now?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1707,2021-09-10T11:51:46Z,2021-09-10T17:35:45Z,2021-09-10T17:35:45Z,MERGED,True,103,0,5,https://github.com/sbc100,Support new dylink.0 custom section format,1,[],https://github.com/WebAssembly/wabt/pull/1707,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/1707#issuecomment-917027216,"This section is now based on sub-sections making it more
extensible.
See also:
llvm change: https://reviews.llvm.org/D109595
binaryen change: WebAssembly/binaryen#4141","Actually, if onSymbol currently actually works, maybe we should leave it (and maybe add a simple dumper) until I'm done investigating how we want LLVM to treat symbols (e.g. section vs binary offsets). It might be useful to check against LLVM.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1707,2021-09-10T11:51:46Z,2021-09-10T17:35:45Z,2021-09-10T17:35:45Z,MERGED,True,103,0,5,https://github.com/sbc100,Support new dylink.0 custom section format,1,[],https://github.com/WebAssembly/wabt/pull/1707,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1707#issuecomment-917057336,"This section is now based on sub-sections making it more
extensible.
See also:
llvm change: https://reviews.llvm.org/D109595
binaryen change: WebAssembly/binaryen#4141","I guess onSymbol would be useful for something like a wabt-nm but isn't used now?

onSymbol was replaced with the more specific OnFunctionSymbol, OnGlobalSymbol, etc, back in #769, I think this was just left over by mistake.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1707,2021-09-10T11:51:46Z,2021-09-10T17:35:45Z,2021-09-10T17:35:45Z,MERGED,True,103,0,5,https://github.com/sbc100,Support new dylink.0 custom section format,1,[],https://github.com/WebAssembly/wabt/pull/1707,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1707#issuecomment-917061166,"This section is now based on sub-sections making it more
extensible.
See also:
llvm change: https://reviews.llvm.org/D109595
binaryen change: WebAssembly/binaryen#4141","I guess onSymbol would be useful for something like a wabt-nm but isn't used now?

onSymbol was replaced with the more specific OnFunctionSymbol, OnGlobalSymbol, etc, back in #769, I think this was just left over by mistake.

I split that out into its own CL anyway.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1708,2021-09-10T17:03:01Z,2021-09-10T17:31:26Z,2021-09-10T17:31:26Z,MERGED,True,0,15,5,https://github.com/sbc100,Remove ununsed onSymbol callback. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1708,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1708,"We have the more specific OnFunctionSymbol, OnGlobalSymbol family
of callbacks that is used by objdump.","We have the more specific OnFunctionSymbol, OnGlobalSymbol family
of callbacks that is used by objdump.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1712,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1712#issuecomment-922032245,,"Hm, so if I mark a flag as enabled, I have to remove all the flags from all the tests it looks like. Should I do that? Or can I change feature.cc to nop.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/kripken,3,https://github.com/WebAssembly/wabt/pull/1712#issuecomment-922041086,,"Do we have a policy of enabling things by default once they are in phase 5? I might have missed something.
In general I think we should have a uniform policy across the toolchain space, if possible. I'm not sure what the policy should be, but it seems like there are good arguments both ways (for example, in favor: avoid users needing to enable it all the time; against: wasm files will validate that might not validate in all production VMs).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/ngzhian,4,https://github.com/WebAssembly/wabt/pull/1712#issuecomment-922047988,,"Prior proposals have the flag defaulted when they are merged into the spec (see e88bc66). I don't know if we want to make the distinction between phase 5 and merged into spec. There is a --disable-simd flag once we default to enabling simd, so users can still opt out if needed.
I think default enabling a proposal once it's ""done"" makes the most sense to me. But I'm happy to follow along if we decide another way :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/kripken,5,https://github.com/WebAssembly/wabt/pull/1712#issuecomment-922057497,,"Interesting, thanks @ngzhian ...
We don't do this in LLVM, emscripten, or binaryen. But perhaps those are more producers of wasm, and wabt is an inspector.
Anyhow, I don't mean to block this!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/ngzhian,6,https://github.com/WebAssembly/wabt/pull/1712#issuecomment-922059210,,"We don't do this in LLVM, emscripten, or binaryen. But perhaps those are more producers of wasm, and wabt is an inspector.

By that, you mean -msimd128 will always exist as a flag? Yea I think keeping that around for LLVM/Emscripten/Binaryen is a good idea, give users a choice if they want to emit those instructions or not. Another data point is that V8 has SIMD enabled by default (no flag), so perhaps is a choice between producers of SIMD instructions and consumers.
No problem, thank you for your perspective! Let's see what @sbc100 thinks.",True,{'THUMBS_UP': ['https://github.com/kripken']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1712#issuecomment-923179265,,"I think we can follow the precedent here and have wabt (like v8) enable all phase 5 proposals by default.   It think it makes sense to have a different policy for producers such as emscripten and llvm.
If wabt was capable of generating new instructions (like binaryen does when optimizing) then we would probably re-consider.. but I don't think it is.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/1712#issuecomment-923180358,,test/wasm2c/bad-enable-feature.txt might also need updating?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/ngzhian,9,https://github.com/WebAssembly/wabt/pull/1712#issuecomment-923245183,,"Are there any places where we can/should remove --enable-simd ? It looks like at least test/update-spec-tests.py maybe?

I'll do a grep and find the relevant places. At least in all the test files we will need to remove it from ARGS.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1712,2021-09-17T19:17:25Z,2021-09-20T20:39:34Z,2021-09-20T20:39:37Z,MERGED,True,46,149,121,https://github.com/ngzhian,"SIMD is now phase 5, enable it by default",2,[],https://github.com/WebAssembly/wabt/pull/1712,https://github.com/ngzhian,10,https://github.com/WebAssembly/wabt/pull/1712#issuecomment-923262822,,"A lot of the changes are in the expected output for tests, where the line number change due to removing an entire line from ;;; ARGS:. If you prefer I can change it to be an empty line ;;;, then it won't change as many files.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1713,2021-09-17T20:02:38Z,2021-10-13T15:05:31Z,2021-10-13T15:47:59Z,MERGED,True,68,3,3,https://github.com/ngzhian,Handle some SIMD opcodes in opcodecnt,1,[],https://github.com/WebAssembly/wabt/pull/1713,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1713,"Most of the SIMD instructions were already transparently handled, some
(like loadlane and v128.const) don't fit in the existing callbacks, so
we need to implement (and override) the default implementation.","Most of the SIMD instructions were already transparently handled, some
(like loadlane and v128.const) don't fit in the existing callbacks, so
we need to implement (and override) the default implementation.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1713,2021-09-17T20:02:38Z,2021-10-13T15:05:31Z,2021-10-13T15:47:59Z,MERGED,True,68,3,3,https://github.com/ngzhian,Handle some SIMD opcodes in opcodecnt,1,[],https://github.com/WebAssembly/wabt/pull/1713,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1713#issuecomment-923281030,"Most of the SIMD instructions were already transparently handled, some
(like loadlane and v128.const) don't fit in the existing callbacks, so
we need to implement (and override) the default implementation.",Rebased after removing --enable-simd.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1713,2021-09-17T20:02:38Z,2021-10-13T15:05:31Z,2021-10-13T15:47:59Z,MERGED,True,68,3,3,https://github.com/ngzhian,Handle some SIMD opcodes in opcodecnt,1,[],https://github.com/WebAssembly/wabt/pull/1713,https://github.com/ngzhian,3,https://github.com/WebAssembly/wabt/pull/1713#issuecomment-938049891,"Most of the SIMD instructions were already transparently handled, some
(like loadlane and v128.const) don't fit in the existing callbacks, so
we need to implement (and override) the default implementation.",Ping @sbc100,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1714,2021-09-20T12:03:41Z,2021-09-27T18:06:15Z,2021-09-27T18:06:15Z,MERGED,True,11,8,2,https://github.com/relrelb,wasm-decompile: Avoid trailing whitespace,2,[],https://github.com/WebAssembly/wabt/pull/1714,https://github.com/relrelb,1,https://github.com/WebAssembly/wabt/pull/1714,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1714,2021-09-20T12:03:41Z,2021-09-27T18:06:15Z,2021-09-27T18:06:15Z,MERGED,True,11,8,2,https://github.com/relrelb,wasm-decompile: Avoid trailing whitespace,2,[],https://github.com/WebAssembly/wabt/pull/1714,https://github.com/aardappel,2,https://github.com/WebAssembly/wabt/pull/1714#issuecomment-928113154,,Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1719,2021-10-04T12:38:53Z,,2021-10-24T14:55:36Z,OPEN,False,73,0,22,https://github.com/pouyakary,Favicons for the demo pages,5,[],https://github.com/WebAssembly/wabt/pull/1719,https://github.com/pouyakary,1,https://github.com/WebAssembly/wabt/pull/1719,"Hey awesome wabt team. I've been creating a webassembly assembler and found the commented binary output of the wat2wasm the best source for learning. (thanks for implementing it) and then the wat2wasm demo page became something I wanted to keep in my favorites. I just didn't like its lack of look there:

So I added some new stuff into it. I added favicons and colors. Now it looks like this in the upcoming safari:

Has favicons + iOS/Android/Chrome...

And looks much better in the favorites:","Hey awesome wabt team. I've been creating a webassembly assembler and found the commented binary output of the wat2wasm the best source for learning. (thanks for implementing it) and then the wat2wasm demo page became something I wanted to keep in my favorites. I just didn't like its lack of look there:

So I added some new stuff into it. I added favicons and colors. Now it looks like this in the upcoming safari:

Has favicons + iOS/Android/Chrome...

And looks much better in the favorites:",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1719,2021-10-04T12:38:53Z,,2021-10-24T14:55:36Z,OPEN,False,73,0,22,https://github.com/pouyakary,Favicons for the demo pages,5,[],https://github.com/WebAssembly/wabt/pull/1719,https://github.com/pouyakary,2,https://github.com/WebAssembly/wabt/pull/1719#issuecomment-940927618,"Hey awesome wabt team. I've been creating a webassembly assembler and found the commented binary output of the wat2wasm the best source for learning. (thanks for implementing it) and then the wat2wasm demo page became something I wanted to keep in my favorites. I just didn't like its lack of look there:

So I added some new stuff into it. I added favicons and colors. Now it looks like this in the upcoming safari:

Has favicons + iOS/Android/Chrome...

And looks much better in the favorites:",@binji can you please look at this PR?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1719,2021-10-04T12:38:53Z,,2021-10-24T14:55:36Z,OPEN,False,73,0,22,https://github.com/pouyakary,Favicons for the demo pages,5,[],https://github.com/WebAssembly/wabt/pull/1719,https://github.com/pouyakary,3,https://github.com/WebAssembly/wabt/pull/1719#issuecomment-950339164,"Hey awesome wabt team. I've been creating a webassembly assembler and found the commented binary output of the wat2wasm the best source for learning. (thanks for implementing it) and then the wat2wasm demo page became something I wanted to keep in my favorites. I just didn't like its lack of look there:

So I added some new stuff into it. I added favicons and colors. Now it looks like this in the upcoming safari:

Has favicons + iOS/Android/Chrome...

And looks much better in the favorites:",Anyone?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1721,2021-10-06T06:07:02Z,,2021-11-09T08:33:24Z,OPEN,False,3836,481,21,https://github.com/shravanrn,"Per instance, cross platform library sandboxing support in wasm2c",114,[],https://github.com/WebAssembly/wabt/pull/1721,https://github.com/shravanrn,1,https://github.com/WebAssembly/wabt/pull/1721,"@kripken Per our discussion here is the PR with all the wasm2c changes we needed to make to allow wasm2c to be used to sandbox libraries in the Firefox browser. (Fyi @deian) Briefly here are some of the more notable changes made)

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)

I think this PR will likely be a starting point for discussion and we can discuss what we need to change/update so we can land this without issues","@kripken Per our discussion here is the PR with all the wasm2c changes we needed to make to allow wasm2c to be used to sandbox libraries in the Firefox browser. (Fyi @deian) Briefly here are some of the more notable changes made)

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)

I think this PR will likely be a starting point for discussion and we can discuss what we need to change/update so we can land this without issues",True,{'THUMBS_UP': ['https://github.com/calvin2021y']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1721,2021-10-06T06:07:02Z,,2021-11-09T08:33:24Z,OPEN,False,3836,481,21,https://github.com/shravanrn,"Per instance, cross platform library sandboxing support in wasm2c",114,[],https://github.com/WebAssembly/wabt/pull/1721,https://github.com/kripken,2,https://github.com/WebAssembly/wabt/pull/1721#issuecomment-936698531,"@kripken Per our discussion here is the PR with all the wasm2c changes we needed to make to allow wasm2c to be used to sandbox libraries in the Firefox browser. (Fyi @deian) Briefly here are some of the more notable changes made)

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)

I think this PR will likely be a starting point for discussion and we can discuss what we need to change/update so we can land this without issues","Thanks for the PR @shravanrn !
Ideally this would be split into smaller pieces as @sbc100 said, but given that there has been almost no other work in upstream here, and there is little need for bisectability (the submitter is the main production user AFAIK), I think this is a rare case where it makes sense to land a single big PR.
Starting to read now...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1721,2021-10-06T06:07:02Z,,2021-11-09T08:33:24Z,OPEN,False,3836,481,21,https://github.com/shravanrn,"Per instance, cross platform library sandboxing support in wasm2c",114,[],https://github.com/WebAssembly/wabt/pull/1721,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1721#issuecomment-936878137,"@kripken Per our discussion here is the PR with all the wasm2c changes we needed to make to allow wasm2c to be used to sandbox libraries in the Firefox browser. (Fyi @deian) Briefly here are some of the more notable changes made)

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)

I think this PR will likely be a starting point for discussion and we can discuss what we need to change/update so we can land this without issues","Thanks for the PR @shravanrn !
Ideally this would be split into smaller pieces as @sbc100 said, but given that there has been almost no other work in upstream here, and there is little need for bisectability (the submitter is the main production user AFAIK), I think this is a rare case where it makes sense to land a single big PR.
Starting to read now...

Just in terms of reviewing though it seem like there are two fairly large changes here being combined:

Make existing wasm2c work on windows
Extent wasm2c in significant ways.

If possible it would be great to separate though, but I can see how it could be difficult.    If @kripken (who knows this code better than me) is prepared to review both at once I'll leave that up to him.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1721,2021-10-06T06:07:02Z,,2021-11-09T08:33:24Z,OPEN,False,3836,481,21,https://github.com/shravanrn,"Per instance, cross platform library sandboxing support in wasm2c",114,[],https://github.com/WebAssembly/wabt/pull/1721,https://github.com/kripken,4,https://github.com/WebAssembly/wabt/pull/1721#issuecomment-938126201,"@kripken Per our discussion here is the PR with all the wasm2c changes we needed to make to allow wasm2c to be used to sandbox libraries in the Firefox browser. (Fyi @deian) Briefly here are some of the more notable changes made)

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)

I think this PR will likely be a starting point for discussion and we can discuss what we need to change/update so we can land this without issues","@sbc100

Just in terms of reviewing though it seem like there are two fairly large changes here being combined

Would it be practical to split those two, @shravanrn ? If so that sounds good to me. The work to split it out might be saved in being able to land one part first and not keep discussions on a single big PR (that waits on all items for landing).
But, if it's not practical to split out, I think it's ok for me to review as it is.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1721,2021-10-06T06:07:02Z,,2021-11-09T08:33:24Z,OPEN,False,3836,481,21,https://github.com/shravanrn,"Per instance, cross platform library sandboxing support in wasm2c",114,[],https://github.com/WebAssembly/wabt/pull/1721,https://github.com/shravanrn,5,https://github.com/WebAssembly/wabt/pull/1721#issuecomment-943696973,"@kripken Per our discussion here is the PR with all the wasm2c changes we needed to make to allow wasm2c to be used to sandbox libraries in the Firefox browser. (Fyi @deian) Briefly here are some of the more notable changes made)

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)

I think this PR will likely be a starting point for discussion and we can discuss what we need to change/update so we can land this without issues",Sorry for the delay! Some last minute deadlines on my side. I'll be back to updating this PR and addressing the comments in a day or two,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1721,2021-10-06T06:07:02Z,,2021-11-09T08:33:24Z,OPEN,False,3836,481,21,https://github.com/shravanrn,"Per instance, cross platform library sandboxing support in wasm2c",114,[],https://github.com/WebAssembly/wabt/pull/1721,https://github.com/shravanrn,6,https://github.com/WebAssembly/wabt/pull/1721#issuecomment-952225610,"@kripken Per our discussion here is the PR with all the wasm2c changes we needed to make to allow wasm2c to be used to sandbox libraries in the Firefox browser. (Fyi @deian) Briefly here are some of the more notable changes made)

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)

I think this PR will likely be a starting point for discussion and we can discuss what we need to change/update so we can land this without issues","@kripken @sbc100 As you suggested, i think it may be easier to upstream this in batches. So, rather than landing this PR, @talg from our sandboxing team will be submitting PRs to upstream these changes in batches. This should allow us to more easily review and land things. Thanks @talg! :)
Let me know if you have any thoughts or concerns. Will close this PR if the above plan makes sense to you",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1721,2021-10-06T06:07:02Z,,2021-11-09T08:33:24Z,OPEN,False,3836,481,21,https://github.com/shravanrn,"Per instance, cross platform library sandboxing support in wasm2c",114,[],https://github.com/WebAssembly/wabt/pull/1721,https://github.com/kripken,7,https://github.com/WebAssembly/wabt/pull/1721#issuecomment-954887904,"@kripken Per our discussion here is the PR with all the wasm2c changes we needed to make to allow wasm2c to be used to sandbox libraries in the Firefox browser. (Fyi @deian) Briefly here are some of the more notable changes made)

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)

I think this PR will likely be a starting point for discussion and we can discuss what we need to change/update so we can land this without issues",Sounds like a good plan to me!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1722,2021-10-08T02:39:13Z,2021-10-11T16:47:09Z,2021-10-11T16:47:10Z,MERGED,True,886,703,12,https://github.com/sbc100,Re-generate html versions of man pages. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1722,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1722,Generated by running scripts/generate-html-docs.sh,Generated by running scripts/generate-html-docs.sh,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1723,2021-10-08T04:30:32Z,2021-10-12T22:35:53Z,2021-10-12T22:35:54Z,MERGED,True,2,0,2,https://github.com/sbc100,Set features of the Store used in wasm-interp,1,[],https://github.com/WebAssembly/wabt/pull/1723,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1723,"Without this change wasm-interp always runs with default
features.
These features seem to be used in just a single location:
src/interp/interp.cc:  int pass = store.features().bulk_memory_enabled() ? Init : Check;
I noticed this when trying to enable bulk memory but run
the interpreter with --disable-bulk-memory and it was
not effecting this line of code.","Without this change wasm-interp always runs with default
features.
These features seem to be used in just a single location:
src/interp/interp.cc:  int pass = store.features().bulk_memory_enabled() ? Init : Check;
I noticed this when trying to enable bulk memory but run
the interpreter with --disable-bulk-memory and it was
not effecting this line of code.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1723,2021-10-08T04:30:32Z,2021-10-12T22:35:53Z,2021-10-12T22:35:54Z,MERGED,True,2,0,2,https://github.com/sbc100,Set features of the Store used in wasm-interp,1,[],https://github.com/WebAssembly/wabt/pull/1723,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1723#issuecomment-941684551,"Without this change wasm-interp always runs with default
features.
These features seem to be used in just a single location:
src/interp/interp.cc:  int pass = store.features().bulk_memory_enabled() ? Init : Check;
I noticed this when trying to enable bulk memory but run
the interpreter with --disable-bulk-memory and it was
not effecting this line of code.","Also:

I noticed this when trying to enable bulk memory but run
the interpreter with --disable-bulk-memory and it was
not effecting this line of code.

--disable-bulk-memory shouldn't be a valid arg, since based on features.def it is disabled by default. Did you flip it locally to be enabled by default?

Yup, I'm working on a change to flip it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1724,2021-10-11T13:43:33Z,2022-02-24T13:53:22Z,2022-02-24T13:53:23Z,CLOSED,False,1009,6,42,https://github.com/yuri91,Code Annotations,4,[],https://github.com/WebAssembly/wabt/pull/1724,https://github.com/yuri91,1,https://github.com/WebAssembly/wabt/pull/1724,"This PR adds support for Code Annotations.
See WebAssembly/tool-conventions#167 for context and WebAssembly/tool-conventions#173 for the specification.
In particular this pr implements the following:

Parsing code annotation sections in BinaryReader, providing appropriate callbacks that a BinaryReaderDelegate can implement:

BinaryReaderObjdump: show the sections in a human-readable form
BinaryReaderIr: add code annotations in the IR as expressions


Parsing code annotations in text format, adding them in the IR like the BinaryReaderIR does
Writing  the code annotations present in the IR in the proper sections when converting IR to binary
Support in wasm-decompiler for showing the annotations as comments in the pseudo-code

All the features have corresponding tests.
Support for code annotations is gated through the --enable-code-annotations feature. For reading/writing in the text format, --enable-annotations is also required.
Missing features:

Support for function-level code annotations (offset 0)
Extensive validation in validator.cc (like making sure that all annotations are at the same code offset of an instruction)","This PR adds support for Code Annotations.
See WebAssembly/tool-conventions#167 for context and WebAssembly/tool-conventions#173 for the specification.
In particular this pr implements the following:

Parsing code annotation sections in BinaryReader, providing appropriate callbacks that a BinaryReaderDelegate can implement:

BinaryReaderObjdump: show the sections in a human-readable form
BinaryReaderIr: add code annotations in the IR as expressions


Parsing code annotations in text format, adding them in the IR like the BinaryReaderIR does
Writing  the code annotations present in the IR in the proper sections when converting IR to binary
Support in wasm-decompiler for showing the annotations as comments in the pseudo-code

All the features have corresponding tests.
Support for code annotations is gated through the --enable-code-annotations feature. For reading/writing in the text format, --enable-annotations is also required.
Missing features:

Support for function-level code annotations (offset 0)
Extensive validation in validator.cc (like making sure that all annotations are at the same code offset of an instruction)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1724,2021-10-11T13:43:33Z,2022-02-24T13:53:22Z,2022-02-24T13:53:23Z,CLOSED,False,1009,6,42,https://github.com/yuri91,Code Annotations,4,[],https://github.com/WebAssembly/wabt/pull/1724,https://github.com/yuri91,2,https://github.com/WebAssembly/wabt/pull/1724#issuecomment-1049882549,"This PR adds support for Code Annotations.
See WebAssembly/tool-conventions#167 for context and WebAssembly/tool-conventions#173 for the specification.
In particular this pr implements the following:

Parsing code annotation sections in BinaryReader, providing appropriate callbacks that a BinaryReaderDelegate can implement:

BinaryReaderObjdump: show the sections in a human-readable form
BinaryReaderIr: add code annotations in the IR as expressions


Parsing code annotations in text format, adding them in the IR like the BinaryReaderIR does
Writing  the code annotations present in the IR in the proper sections when converting IR to binary
Support in wasm-decompiler for showing the annotations as comments in the pseudo-code

All the features have corresponding tests.
Support for code annotations is gated through the --enable-code-annotations feature. For reading/writing in the text format, --enable-annotations is also required.
Missing features:

Support for function-level code annotations (offset 0)
Extensive validation in validator.cc (like making sure that all annotations are at the same code offset of an instruction)","Outdated.
I made a new PR with the new format (and the new name for the feature: Code Metadata) here: #1840",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1725,2021-10-11T18:10:23Z,2021-10-12T23:47:39Z,2021-10-12T23:47:41Z,MERGED,True,17,0,2,https://github.com/ngzhian,Fix ub access of 0-size vector in data segment,2,[],https://github.com/WebAssembly/wabt/pull/1725,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1725,"If the module has no memory, the we try to copy the passive data segment
to memories[0], and memories is a size 0 vector, which is UB.","If the module has no memory, the we try to copy the passive data segment
to memories[0], and memories is a size 0 vector, which is UB.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1725,2021-10-11T18:10:23Z,2021-10-12T23:47:39Z,2021-10-12T23:47:41Z,MERGED,True,17,0,2,https://github.com/ngzhian,Fix ub access of 0-size vector in data segment,2,[],https://github.com/WebAssembly/wabt/pull/1725,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1725#issuecomment-941662974,"If the module has no memory, the we try to copy the passive data segment
to memories[0], and memories is a size 0 vector, which is UB.",How about a test for this?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1725,2021-10-11T18:10:23Z,2021-10-12T23:47:39Z,2021-10-12T23:47:41Z,MERGED,True,17,0,2,https://github.com/ngzhian,Fix ub access of 0-size vector in data segment,2,[],https://github.com/WebAssembly/wabt/pull/1725,https://github.com/ngzhian,3,https://github.com/WebAssembly/wabt/pull/1725#issuecomment-941699110,"If the module has no memory, the we try to copy the passive data segment
to memories[0], and memories is a size 0 vector, which is UB.","Done, ptal, before this fix it would crash with exit code -11.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1726,2021-10-11T21:54:09Z,2021-10-12T23:46:57Z,2021-10-12T23:50:38Z,MERGED,True,30,2,3,https://github.com/ngzhian,Fix crashes in parser when f32.const is given a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1726,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1726,"The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.","The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1726,2021-10-11T21:54:09Z,2021-10-12T23:46:57Z,2021-10-12T23:50:38Z,MERGED,True,30,2,3,https://github.com/ngzhian,Fix crashes in parser when f32.const is given a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1726,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1726#issuecomment-941678651,"The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.","These tests seems like they belong upstream maybe? I wonder if we should open bugs in the spec tests when we find things like this?

These are crashes in wabt's parser, nothing to do with spec interpreter, so shouldn't need to be upstream I think.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1726,2021-10-11T21:54:09Z,2021-10-12T23:46:57Z,2021-10-12T23:50:38Z,MERGED,True,30,2,3,https://github.com/ngzhian,Fix crashes in parser when f32.const is given a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1726,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1726#issuecomment-941681964,"The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.","These tests seems like they belong upstream maybe? I wonder if we should open bugs in the spec tests when we find things like this?

These are crashes in wabt's parser, nothing to do with spec interpreter, so shouldn't need to be upstream I think.

But doesn't the upstream spec tests have test for invliad literals?   i.e. Doesn't  it have checks that certain things are un-parsable as a literal?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1726,2021-10-11T21:54:09Z,2021-10-12T23:46:57Z,2021-10-12T23:50:38Z,MERGED,True,30,2,3,https://github.com/ngzhian,Fix crashes in parser when f32.const is given a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1726,https://github.com/ngzhian,4,https://github.com/WebAssembly/wabt/pull/1726#issuecomment-941700500,"The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.","Yea I get what you mean now. Make sense, I guess the upstream tests didn't cover these, let me go add them.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1726,2021-10-11T21:54:09Z,2021-10-12T23:46:57Z,2021-10-12T23:50:38Z,MERGED,True,30,2,3,https://github.com/ngzhian,Fix crashes in parser when f32.const is given a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1726,https://github.com/ngzhian,5,https://github.com/WebAssembly/wabt/pull/1726#issuecomment-941709000,"The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.","Yea I get what you mean now. Make sense, I guess the upstream tests didn't cover these, let me go add them.

I guess the upstream tests don't have a good way to run such tests, we only run .wast files which are scripts that accept these nan literals. There isn't much testing for non-scripts I think.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1726,2021-10-11T21:54:09Z,2021-10-12T23:46:57Z,2021-10-12T23:50:38Z,MERGED,True,30,2,3,https://github.com/ngzhian,Fix crashes in parser when f32.const is given a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1726,https://github.com/ngzhian,6,https://github.com/WebAssembly/wabt/pull/1726#issuecomment-941715187,"The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.","Yea I get what you mean now. Make sense, I guess the upstream tests didn't cover these, let me go add them.

I guess the upstream tests don't have a good way to run such tests, we only run .wast files which are scripts that accept these nan literals. There isn't much testing for non-scripts I think.

Oh hm, it looks like I can, within ""assert_malformed"" the module is a simple module not as script.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1726,2021-10-11T21:54:09Z,2021-10-12T23:46:57Z,2021-10-12T23:50:38Z,MERGED,True,30,2,3,https://github.com/ngzhian,Fix crashes in parser when f32.const is given a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1726,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1726#issuecomment-941726637,"The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.","I'm not saying we need to add the upstream tests right away.. just that perhaps we should track these kinds of tests that could potentially be upstream.
No need to wait to land this PR.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1726,2021-10-11T21:54:09Z,2021-10-12T23:46:57Z,2021-10-12T23:50:38Z,MERGED,True,30,2,3,https://github.com/ngzhian,Fix crashes in parser when f32.const is given a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1726,https://github.com/ngzhian,8,https://github.com/WebAssembly/wabt/pull/1726#issuecomment-941749019,"The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.","I'm not saying we need to add the upstream tests right away.. just that perhaps we should track these kinds of tests that could potentially be upstream.
No need to wait to land this PR.

Sg, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1726,2021-10-11T21:54:09Z,2021-10-12T23:46:57Z,2021-10-12T23:50:38Z,MERGED,True,30,2,3,https://github.com/ngzhian,Fix crashes in parser when f32.const is given a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1726,https://github.com/ngzhian,9,https://github.com/WebAssembly/wabt/pull/1726#issuecomment-941750367,"The parser assumes that f32.const will always be followed by a literal,
and crashes if it is followed by a nan expression when it is not
allowed.","Fyi, PR here WebAssembly/spec#1373",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1727,2021-10-13T02:06:58Z,2021-10-13T16:16:03Z,2021-10-13T16:16:04Z,MERGED,True,169,238,13,https://github.com/sbc100,Avoid writing DataCount section when it is not needed.,1,[],https://github.com/WebAssembly/wabt/pull/1727,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1727,"Without this change, when bulk memory is enabled, the DataCount is
always written when then removed if it proves that its not needed by any
instruction.
However, if we know there are no data segments we can avoid writing it
altogether. This happens to be more compact but I'm hoping to land this
now in anticipation of enabled bulk memory by default.  Once we do that
we don't want all the dump tests to include the writing and truncating
of the DataCount section in cases when there is no data.","Without this change, when bulk memory is enabled, the DataCount is
always written when then removed if it proves that its not needed by any
instruction.
However, if we know there are no data segments we can avoid writing it
altogether. This happens to be more compact but I'm hoping to land this
now in anticipation of enabled bulk memory by default.  Once we do that
we don't want all the dump tests to include the writing and truncating
of the DataCount section in cases when there is no data.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1728,2021-10-13T04:24:29Z,2021-10-13T16:33:32Z,2021-10-13T16:33:33Z,MERGED,True,96,109,82,https://github.com/sbc100,Enable bulk memory by default,1,[],https://github.com/WebAssembly/wabt/pull/1728,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1728,"This features was finished earlier this year:
https://github.com/WebAssembly/proposals/blob/master/finished-proposals.md
One thing to note is that the version of the spec tests we currently
have in third_party/testsuite doesn't have bulk memory merged yet so
this change disables bulk memory when running some of those tests.  This
will be removed in a followup when we update the testsuite.
Fixes: #1717","This features was finished earlier this year:
https://github.com/WebAssembly/proposals/blob/master/finished-proposals.md
One thing to note is that the version of the spec tests we currently
have in third_party/testsuite doesn't have bulk memory merged yet so
this change disables bulk memory when running some of those tests.  This
will be removed in a followup when we update the testsuite.
Fixes: #1717",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1728,2021-10-13T04:24:29Z,2021-10-13T16:33:32Z,2021-10-13T16:33:33Z,MERGED,True,96,109,82,https://github.com/sbc100,Enable bulk memory by default,1,[],https://github.com/WebAssembly/wabt/pull/1728,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1728#issuecomment-942471166,"This features was finished earlier this year:
https://github.com/WebAssembly/proposals/blob/master/finished-proposals.md
One thing to note is that the version of the spec tests we currently
have in third_party/testsuite doesn't have bulk memory merged yet so
this change disables bulk memory when running some of those tests.  This
will be removed in a followup when we update the testsuite.
Fixes: #1717","LGTM, i wonder if next time we should leave the ARGS: line in the tests alone (just empty) to keep the line offsets the same so the diff is smaller.

True, I suppose empty ARGS like are harmless enough (and could be removed by followup potentially).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1729,2021-10-13T04:26:03Z,2021-10-13T16:52:25Z,2021-10-13T16:52:26Z,MERGED,True,63,93,81,https://github.com/sbc100,Enable reference types by default,1,[],https://github.com/WebAssembly/wabt/pull/1729,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1729,"This features was finished earlier this year:
https://github.com/WebAssembly/proposals/blob/master/finished-proposals.md
One thing to note is that the version of the spec tests we currently
have in third_party/testsuite doesn't have ref types merged yet so
this change disables ref types when running some of those tests.  This
can be removed in a followup when we update the testsuite.","This features was finished earlier this year:
https://github.com/WebAssembly/proposals/blob/master/finished-proposals.md
One thing to note is that the version of the spec tests we currently
have in third_party/testsuite doesn't have ref types merged yet so
this change disables ref types when running some of those tests.  This
can be removed in a followup when we update the testsuite.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1730,2021-10-14T06:34:39Z,2021-10-14T18:26:44Z,2021-10-14T18:26:45Z,MERGED,True,90,106,11,https://github.com/sbc100,Delay validation of elem init expressions until validation time,1,[],https://github.com/WebAssembly/wabt/pull/1730,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1730,"Doing validation at parse time means we cannot run tests which
included invalid instruction in the elem init expressions.
For example. the updated test suite repo contains tests such as this:
(assert_invalid
  (module
    (table 1 funcref)
    (elem (i32.const 0) funcref (item (i32.add (i32.const 0) (i32.const 1))))
  )
  ""constant expression required""
)

There we have an illegal instruction sequence in the init expresssion.
However, in order to run this test we need to be able to process it with
wast2json first which means it at least has to parse correctly.
This change removes the ElemExpr and ElemExprKind types from the IR
and instead just stores elem init expressions as ExprList like we do
for global init expressions.  This expression list can then be validated
but crucially can also be invalid.
This technique matches the existing OnDataSegmentInitExpr_Other and
OnGlobalInitExpr_Other and indeed it seem that it was indented to
work this way since the OnElemSegmentElemExpr_Other already existed
(unused) in the codebase.","Doing validation at parse time means we cannot run tests which
included invalid instruction in the elem init expressions.
For example. the updated test suite repo contains tests such as this:
(assert_invalid
  (module
    (table 1 funcref)
    (elem (i32.const 0) funcref (item (i32.add (i32.const 0) (i32.const 1))))
  )
  ""constant expression required""
)

There we have an illegal instruction sequence in the init expresssion.
However, in order to run this test we need to be able to process it with
wast2json first which means it at least has to parse correctly.
This change removes the ElemExpr and ElemExprKind types from the IR
and instead just stores elem init expressions as ExprList like we do
for global init expressions.  This expression list can then be validated
but crucially can also be invalid.
This technique matches the existing OnDataSegmentInitExpr_Other and
OnGlobalInitExpr_Other and indeed it seem that it was indented to
work this way since the OnElemSegmentElemExpr_Other already existed
(unused) in the codebase.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1730,2021-10-14T06:34:39Z,2021-10-14T18:26:44Z,2021-10-14T18:26:45Z,MERGED,True,90,106,11,https://github.com/sbc100,Delay validation of elem init expressions until validation time,1,[],https://github.com/WebAssembly/wabt/pull/1730,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1730#issuecomment-943594402,"Doing validation at parse time means we cannot run tests which
included invalid instruction in the elem init expressions.
For example. the updated test suite repo contains tests such as this:
(assert_invalid
  (module
    (table 1 funcref)
    (elem (i32.const 0) funcref (item (i32.add (i32.const 0) (i32.const 1))))
  )
  ""constant expression required""
)

There we have an illegal instruction sequence in the init expresssion.
However, in order to run this test we need to be able to process it with
wast2json first which means it at least has to parse correctly.
This change removes the ElemExpr and ElemExprKind types from the IR
and instead just stores elem init expressions as ExprList like we do
for global init expressions.  This expression list can then be validated
but crucially can also be invalid.
This technique matches the existing OnDataSegmentInitExpr_Other and
OnGlobalInitExpr_Other and indeed it seem that it was indented to
work this way since the OnElemSegmentElemExpr_Other already existed
(unused) in the codebase.","LGTM, I guess all the necessary tests are upstream so we don't need them here now?

Sorry, what tests are you referring to?   I'm not removing any tests here.  Maybe you are referring to the update testsuite change that follows this one?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1730,2021-10-14T06:34:39Z,2021-10-14T18:26:44Z,2021-10-14T18:26:45Z,MERGED,True,90,106,11,https://github.com/sbc100,Delay validation of elem init expressions until validation time,1,[],https://github.com/WebAssembly/wabt/pull/1730,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1730#issuecomment-943595344,"Doing validation at parse time means we cannot run tests which
included invalid instruction in the elem init expressions.
For example. the updated test suite repo contains tests such as this:
(assert_invalid
  (module
    (table 1 funcref)
    (elem (i32.const 0) funcref (item (i32.add (i32.const 0) (i32.const 1))))
  )
  ""constant expression required""
)

There we have an illegal instruction sequence in the init expresssion.
However, in order to run this test we need to be able to process it with
wast2json first which means it at least has to parse correctly.
This change removes the ElemExpr and ElemExprKind types from the IR
and instead just stores elem init expressions as ExprList like we do
for global init expressions.  This expression list can then be validated
but crucially can also be invalid.
This technique matches the existing OnDataSegmentInitExpr_Other and
OnGlobalInitExpr_Other and indeed it seem that it was indented to
work this way since the OnElemSegmentElemExpr_Other already existed
(unused) in the codebase.",Did you mean to lg?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1730,2021-10-14T06:34:39Z,2021-10-14T18:26:44Z,2021-10-14T18:26:45Z,MERGED,True,90,106,11,https://github.com/sbc100,Delay validation of elem init expressions until validation time,1,[],https://github.com/WebAssembly/wabt/pull/1730,https://github.com/ngzhian,4,https://github.com/WebAssembly/wabt/pull/1730#issuecomment-943601158,"Doing validation at parse time means we cannot run tests which
included invalid instruction in the elem init expressions.
For example. the updated test suite repo contains tests such as this:
(assert_invalid
  (module
    (table 1 funcref)
    (elem (i32.const 0) funcref (item (i32.add (i32.const 0) (i32.const 1))))
  )
  ""constant expression required""
)

There we have an illegal instruction sequence in the init expresssion.
However, in order to run this test we need to be able to process it with
wast2json first which means it at least has to parse correctly.
This change removes the ElemExpr and ElemExprKind types from the IR
and instead just stores elem init expressions as ExprList like we do
for global init expressions.  This expression list can then be validated
but crucially can also be invalid.
This technique matches the existing OnDataSegmentInitExpr_Other and
OnGlobalInitExpr_Other and indeed it seem that it was indented to
work this way since the OnElemSegmentElemExpr_Other already existed
(unused) in the codebase.","LGTM, I guess all the necessary tests are upstream so we don't need them here now?

Sorry, what tests are you referring to? I'm not removing any tests here. Maybe you are referring to the update testsuite change that follows this one?

I mean adding the example in your commit description as a test to wabt to make sure we reject it correctly. Since that test comes from upstream, it's not useful to duplicate here in wabt test suite, since eventually we run run that spec test, right?
And yes, meant to lg, flipping the bit now, sorry!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1730,2021-10-14T06:34:39Z,2021-10-14T18:26:44Z,2021-10-14T18:26:45Z,MERGED,True,90,106,11,https://github.com/sbc100,Delay validation of elem init expressions until validation time,1,[],https://github.com/WebAssembly/wabt/pull/1730,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1730#issuecomment-943610871,"Doing validation at parse time means we cannot run tests which
included invalid instruction in the elem init expressions.
For example. the updated test suite repo contains tests such as this:
(assert_invalid
  (module
    (table 1 funcref)
    (elem (i32.const 0) funcref (item (i32.add (i32.const 0) (i32.const 1))))
  )
  ""constant expression required""
)

There we have an illegal instruction sequence in the init expresssion.
However, in order to run this test we need to be able to process it with
wast2json first which means it at least has to parse correctly.
This change removes the ElemExpr and ElemExprKind types from the IR
and instead just stores elem init expressions as ExprList like we do
for global init expressions.  This expression list can then be validated
but crucially can also be invalid.
This technique matches the existing OnDataSegmentInitExpr_Other and
OnGlobalInitExpr_Other and indeed it seem that it was indented to
work this way since the OnElemSegmentElemExpr_Other already existed
(unused) in the codebase.","Yes, I'm about to land a followup that updates the testsuite and includes a lot of tests like that one.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1731,2021-10-14T17:42:43Z,2021-10-14T19:46:17Z,2021-10-14T20:08:04Z,MERGED,True,23,20,2,https://github.com/sbc100,Avoid changing directory in run-spec-wasm2c.py and honor --print-cmd. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1731,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1731,"With this change once can run test/run-spec-wasm2c.py -p and
any failing commands can be re-run directly from the root without
needing to figure out in which directory to run the command.","With this change once can run test/run-spec-wasm2c.py -p and
any failing commands can be re-run directly from the root without
needing to figure out in which directory to run the command.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1731,2021-10-14T17:42:43Z,2021-10-14T19:46:17Z,2021-10-14T20:08:04Z,MERGED,True,23,20,2,https://github.com/sbc100,Avoid changing directory in run-spec-wasm2c.py and honor --print-cmd. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1731,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1731#issuecomment-943682264,"With this change once can run test/run-spec-wasm2c.py -p and
any failing commands can be re-run directly from the root without
needing to figure out in which directory to run the command.","Ooop, sorry.  Hopefully this change is a simplification and won't be too hard to rebase on top of.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1731,2021-10-14T17:42:43Z,2021-10-14T19:46:17Z,2021-10-14T20:08:04Z,MERGED,True,23,20,2,https://github.com/sbc100,Avoid changing directory in run-spec-wasm2c.py and honor --print-cmd. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1731,https://github.com/kripken,3,https://github.com/WebAssembly/wabt/pull/1731#issuecomment-943689547,"With this change once can run test/run-spec-wasm2c.py -p and
any failing commands can be re-run directly from the root without
needing to figure out in which directory to run the command.","The diffs don't overlap, so there should be no problem. I verified that github does not report that PR as needing a merge, even.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1732,2021-10-14T18:11:24Z,2021-10-14T23:30:18Z,2021-10-14T23:30:21Z,MERGED,True,10,2,1,https://github.com/ngzhian,Fix crash when i32/i64 const is followed by a nan expression,1,[],https://github.com/WebAssembly/wabt/pull/1732,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1732,"The parsing code assumes that it is followed by a literal, and hits an
assertion, leading to a crash.
This is similar to 265abb9 but for
integer const expressions.
Tests are upstream at WebAssembly/spec#1379.","The parsing code assumes that it is followed by a literal, and hits an
assertion, leading to a crash.
This is similar to 265abb9 but for
integer const expressions.
Tests are upstream at WebAssembly/spec#1379.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1733,2021-10-14T20:59:02Z,2021-10-14T21:20:05Z,2021-10-14T21:20:06Z,MERGED,True,5,5,1,https://github.com/sbc100,Avoid race between tests introduced in #1731,1,[],https://github.com/WebAssembly/wabt/pull/1733,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1733,"The wasm-rt-impl.o in particular needs to be compiled with a different
input and output directory.  Without this change each test tries to
build this object in (the same) place.
I'm not sure how this passed the tests as it fails pretty reliably on my
machine.","The wasm-rt-impl.o in particular needs to be compiled with a different
input and output directory.  Without this change each test tries to
build this object in (the same) place.
I'm not sure how this passed the tests as it fails pretty reliably on my
machine.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1734,2021-10-15T00:19:02Z,2021-10-15T00:19:15Z,2021-10-15T00:19:15Z,CLOSED,False,12,19,2,https://github.com/sbc100,Use subprocess run,2,[],https://github.com/WebAssembly/wabt/pull/1734,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1734,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1735,2021-10-15T00:19:53Z,2021-10-19T17:18:14Z,2021-10-19T17:18:15Z,MERGED,True,7,14,1,https://github.com/sbc100,Use subprocess.run in test/utils.py. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1735,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1735,Also remove unused clean_stdout/clean_stderr.,Also remove unused clean_stdout/clean_stderr.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1738,2021-10-15T01:28:40Z,2021-10-18T18:54:59Z,2021-10-18T18:55:00Z,MERGED,True,3263,7359,83,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1738,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1738,"bulk-memory-operations and reference-types were completely
removed from the upstream testsuite becuase there were
merged into the upstream spec:
WebAssembly/testsuite#44
In order to land this I had to disable several spec tests
under wasm2c because it lacks support for mutli-table and
reference types.  I filed #1737 to track this.","bulk-memory-operations and reference-types were completely
removed from the upstream testsuite becuase there were
merged into the upstream spec:
WebAssembly/testsuite#44
In order to land this I had to disable several spec tests
under wasm2c because it lacks support for mutli-table and
reference types.  I filed #1737 to track this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1738,2021-10-15T01:28:40Z,2021-10-18T18:54:59Z,2021-10-18T18:55:00Z,MERGED,True,3263,7359,83,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1738,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1738#issuecomment-944468878,"bulk-memory-operations and reference-types were completely
removed from the upstream testsuite becuase there were
merged into the upstream spec:
WebAssembly/testsuite#44
In order to land this I had to disable several spec tests
under wasm2c because it lacks support for mutli-table and
reference types.  I filed #1737 to track this.","Is there a way to mark a test as FAILING rather than deleting it? Seems like we might accidentally forget to add those tests back in.

Not that I know of no.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1738,2021-10-15T01:28:40Z,2021-10-18T18:54:59Z,2021-10-18T18:55:00Z,MERGED,True,3263,7359,83,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1738,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1738#issuecomment-944469339,"bulk-memory-operations and reference-types were completely
removed from the upstream testsuite becuase there were
merged into the upstream spec:
WebAssembly/testsuite#44
In order to land this I had to disable several spec tests
under wasm2c because it lacks support for mutli-table and
reference types.  I filed #1737 to track this.","Is there a way to mark a test as FAILING rather than deleting it? Seems like we might accidentally forget to add those tests back in.

Not that I know of no.

Thats why I open a bug and listed all the tests I was forced to delete.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1738,2021-10-15T01:28:40Z,2021-10-18T18:54:59Z,2021-10-18T18:55:00Z,MERGED,True,3263,7359,83,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1738,https://github.com/ngzhian,4,https://github.com/WebAssembly/wabt/pull/1738#issuecomment-944471517,"bulk-memory-operations and reference-types were completely
removed from the upstream testsuite becuase there were
merged into the upstream spec:
WebAssembly/testsuite#44
In order to land this I had to disable several spec tests
under wasm2c because it lacks support for mutli-table and
reference types.  I filed #1737 to track this.","Is there a way to mark a test as FAILING rather than deleting it? Seems like we might accidentally forget to add those tests back in.

Not that I know of no.

Thats why I open a bug and listed all the tests I was forced to delete.

Dk if this feature will be useful, but yea that tracking bug works, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1738,2021-10-15T01:28:40Z,2021-10-18T18:54:59Z,2021-10-18T18:55:00Z,MERGED,True,3263,7359,83,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1738,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1738#issuecomment-944473772,"bulk-memory-operations and reference-types were completely
removed from the upstream testsuite becuase there were
merged into the upstream spec:
WebAssembly/testsuite#44
In order to land this I had to disable several spec tests
under wasm2c because it lacks support for mutli-table and
reference types.  I filed #1737 to track this.","Is there a way to mark a test as FAILING rather than deleting it? Seems like we might accidentally forget to add those tests back in.

Not that I know of no.

Thats why I open a bug and listed all the tests I was forced to delete.

Dk if this feature will be useful, but yea that tracking bug works, thanks!

Actually I forgot to run ./test/update-spec-tests.py during this change so its not ready to land yet.
Also ./test/update-spec-tests.py  recreates all the removed tests so its pretty clear which ones are missing and easy to re-create them once we add these features to wasm2c.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1739,2021-10-15T23:26:19Z,2021-10-16T01:01:55Z,2021-10-16T01:01:59Z,MERGED,True,7,1,1,https://github.com/ngzhian,Fix crash when function counts mismatch,1,[],https://github.com/WebAssembly/wabt/pull/1739,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1739,"This can happen if we don't stop on first error, and we get a malformed
module where the func counts don't match.
It's hard to write a test for this, since the kStopOnFirstError is fixed
(not set by command line), but this case is quite easy for fuzzers to
catch.","This can happen if we don't stop on first error, and we get a malformed
module where the func counts don't match.
It's hard to write a test for this, since the kStopOnFirstError is fixed
(not set by command line), but this case is quite easy for fuzzers to
catch.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1739,2021-10-15T23:26:19Z,2021-10-16T01:01:55Z,2021-10-16T01:01:59Z,MERGED,True,7,1,1,https://github.com/ngzhian,Fix crash when function counts mismatch,1,[],https://github.com/WebAssembly/wabt/pull/1739,https://github.com/ngzhian,2,https://github.com/WebAssembly/wabt/pull/1739#issuecomment-944830144,"This can happen if we don't stop on first error, and we get a malformed
module where the func counts don't match.
It's hard to write a test for this, since the kStopOnFirstError is fixed
(not set by command line), but this case is quite easy for fuzzers to
catch.","I would have thought you could write a tests in test/binary, no? (lgtm either way)

I tried, but I would never hit the crash, because kStopOnFirstError = true, so I hit some other error before hitting the crash.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1740,2021-10-18T18:49:20Z,2021-10-18T19:55:28Z,2021-10-18T19:55:32Z,MERGED,True,9,3,1,https://github.com/ngzhian,Handle invalid func type identifier in parser,1,[],https://github.com/WebAssembly/wabt/pull/1740,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1740,"When checking for func type matching, we didn't handle the case where
the type use is an identifier.","When checking for func type matching, we didn't handle the case where
the type use is an identifier.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1741,2021-10-18T18:56:27Z,2021-10-19T16:20:06Z,2021-10-19T16:20:06Z,MERGED,True,124,3,9,https://github.com/sbc100,Support for import/export info in dylink section,1,[],https://github.com/WebAssembly/wabt/pull/1741,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1741,See: WebAssembly/tool-conventions#175,See: WebAssembly/tool-conventions#175,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1743,2021-10-18T20:14:57Z,2021-10-18T20:32:29Z,2021-10-18T20:32:29Z,MERGED,True,37,8,2,https://github.com/sbc100,Fix for wasm-objdump and memory64 segment offsets,1,[],https://github.com/WebAssembly/wabt/pull/1743,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1743,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1744,2021-10-19T17:18:30Z,2021-10-19T22:39:04Z,2021-10-19T22:39:05Z,MERGED,True,85,1,8,https://github.com/sbc100,Add support for target_features section,1,[],https://github.com/WebAssembly/wabt/pull/1744,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1744,,,True,{'THUMBS_UP': ['https://github.com/aardappel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1745,2021-10-19T17:26:16Z,2021-10-19T23:13:18Z,2021-10-19T23:13:18Z,MERGED,True,4,5,1,https://github.com/sbc100,Simplification followup from #1735. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1745,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1745,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1746,2021-10-27T00:00:53Z,2021-11-22T22:36:38Z,2021-11-22T22:36:42Z,CLOSED,False,10,0,1,https://github.com/ngzhian,Fix uninitialized usages of init expr,2,[],https://github.com/WebAssembly/wabt/pull/1746,https://github.com/ngzhian,1,https://github.com/WebAssembly/wabt/pull/1746,"data_init_expr_ and elem_init_expr_ can be uninitialized. Convert them
to pointers that are null. Before printing them, we check that they are
not null.","data_init_expr_ and elem_init_expr_ can be uninitialized. Convert them
to pointers that are null. Before printing them, we check that they are
not null.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1747,2021-10-27T00:30:03Z,2021-10-29T08:47:34Z,2021-10-29T08:47:34Z,MERGED,True,29,9,4,https://github.com/takikawa,Add support for inline export/import of exception tags,1,[],https://github.com/WebAssembly/wabt/pull/1747,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1747,"This PR adds support for inline export/import of tags in modules. e.g.,
(tag (import ""foo"" ""bar"") (param i32))

This is used in the spec tests for the exception handling proposal already:
https://github.com/WebAssembly/exception-handling/blob/main/test/core/tag.wast
so it would be useful to support in wabt, so that the test suite can be imported in the future.","This PR adds support for inline export/import of tags in modules. e.g.,
(tag (import ""foo"" ""bar"") (param i32))

This is used in the spec tests for the exception handling proposal already:
https://github.com/WebAssembly/exception-handling/blob/main/test/core/tag.wast
so it would be useful to support in wabt, so that the test suite can be imported in the future.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1747,2021-10-27T00:30:03Z,2021-10-29T08:47:34Z,2021-10-29T08:47:34Z,MERGED,True,29,9,4,https://github.com/takikawa,Add support for inline export/import of exception tags,1,[],https://github.com/WebAssembly/wabt/pull/1747,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1747#issuecomment-952461060,"This PR adds support for inline export/import of tags in modules. e.g.,
(tag (import ""foo"" ""bar"") (param i32))

This is used in the spec tests for the exception handling proposal already:
https://github.com/WebAssembly/exception-handling/blob/main/test/core/tag.wast
so it would be useful to support in wabt, so that the test suite can be imported in the future.",CC @aheejin,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1748,2021-10-27T23:18:07Z,2021-10-29T08:47:56Z,2021-10-29T08:47:57Z,MERGED,True,38,40,3,https://github.com/takikawa,Fix try-delegate validation to allow any block target,1,[],https://github.com/WebAssembly/wabt/pull/1748,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1748,"This PR makes wabt's validation behavior for try-delegate match the spec and spec interpreter. The spec now allows the delegate to target any block, rather than just try blocks and the function body block.
The semantics was changed a bit ago as discussed in WebAssembly/exception-handling#176","This PR makes wabt's validation behavior for try-delegate match the spec and spec interpreter. The spec now allows the delegate to target any block, rather than just try blocks and the function body block.
The semantics was changed a bit ago as discussed in WebAssembly/exception-handling#176",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1748,2021-10-27T23:18:07Z,2021-10-29T08:47:56Z,2021-10-29T08:47:57Z,MERGED,True,38,40,3,https://github.com/takikawa,Fix try-delegate validation to allow any block target,1,[],https://github.com/WebAssembly/wabt/pull/1748,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1748#issuecomment-953390066,"This PR makes wabt's validation behavior for try-delegate match the spec and spec interpreter. The spec now allows the delegate to target any block, rather than just try blocks and the function body block.
The semantics was changed a bit ago as discussed in WebAssembly/exception-handling#176",CC @aheejin,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1749,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.","This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-953425269,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.","Added f260e67, which is a small fixup commit that can be squashed later. It fixes a bug triggered by a newer version of the spec tests, with a cross-instance throw. It's difficult to test this with the wabt test framework, but the spec tests will catch it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,3,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-955096245,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.",Thanks for the merging the other two PRs @aheejin :) I forgot to also CC you on this big patch.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-955118407,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.","Can you re-base on top of the already landed parts.  Also, if there are remaining separate commits can you split them out into their own PRs maybe?  Or does that make no sense in this case?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,5,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-955597703,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.","Can you re-base on top of the already landed parts.

Sure, no problem. I just pushed a rebased version. Also I squashed the other commit into this too as it's not really a separate thing (since I was force pushing for the rebase anyway).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,6,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-957933642,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.","Re: tests, there is some redundancy with spec tests in that there's overlap in what's tested and so they look similar (though I didn't copy-paste the spec tests). I did try to write tests that specifically target the more tricky bits of the wabt interpreter implementation (e.g., the exception stack for rethrow, how exception handlers are looked up, etc).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-957976373,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.",lgtm.  WDYT @aheejin ?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,8,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-964303088,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.","Friendly ping on this @aheejin, any feedback or comments appreciated :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/aheejin,9,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-965693458,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.",Sorry! I was OOO for a while. I will take a look shortly.,True,{'THUMBS_UP': ['https://github.com/takikawa']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,10,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-969513916,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.","Thanks for the review feedback! I think I've addressed pretty much all the feedback now, although I still need to check if return_call_indirect has any faulty interaction with this.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,11,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-970496482,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.",Pushed an extra commit that should fix the CI failure,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,12,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-970839417,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.","I pushed a fix for the return_call_indirect case in 34fb572. I put in a sanity check assert that checks, when a function call is popped, that the frame's exception stack height (the height on function entry) matches the current height. The reason for the assertion is it's hard to catch problems with the stack height with just unit tests.
This assert caught another bug, so I included that fix (some catchs weren't popping the exception because it was being done only for end).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1749,2021-10-28T00:18:14Z,2021-11-17T21:49:39Z,2021-11-17T22:15:37Z,MERGED,True,959,35,15,https://github.com/takikawa,Add interpreter support for the exception handling proposal,9,[],https://github.com/WebAssembly/wabt/pull/1749,https://github.com/takikawa,13,https://github.com/WebAssembly/wabt/pull/1749#issuecomment-972060347,"This PR adds interpreter support for the exception handling proposal.
Details about the implementation approach:

Try blocks generate metadata tracking the instruction ranges for the handlers and which exception tags are handled (or if a catch_all is present). The metadata is stored in a function's FuncDesc, and is transferred into the Frame when a function call is executed.
The stack is unwound when a throw is executed. This unwinding also handles tag dispatch to the appropriate catch. The metadata to find the matching handler is looked up in the call Frame stack.
If a try-delegate is present, it is used in the stack unwinding process to skip over to the relevant handler.
A separate exceptions_ stack in call frames tracks caught exceptions that can be accessed via a rethrow. The stack is popped on exit from a try block or when exiting via control instructions like br.
Because stack unwinding relies on finding metadata in the call frame, return_call needs to be modified slightly to adjust the current frame when executing the call, rather than re-using the frame completely as-is.

Spec tests will be followed up in future PRs once the proposal tests are merged into the official testsuite.","Thanks for all the comments! I think I've addressed everything now, and CI looks good.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1751,2021-11-04T19:46:07Z,2021-11-30T22:04:41Z,2021-12-02T19:09:59Z,MERGED,True,1656,182,44,https://github.com/yhdengh,Add support for multi-memory proposal,1,[],https://github.com/WebAssembly/wabt/pull/1751,https://github.com/yhdengh,1,https://github.com/WebAssembly/wabt/pull/1751,"This PR adds support for multi-memory proposal.

Added multi_memory as a feature. Added memidx(s) to IR representations of memory instructions.
Added support for parsing and writing memidx in both binary and text format, and also wasm2c.
Updated testsuite to WebAssembly/testsuite@f1eaa43 which includes testsuite for multi-memory proposal. Rebased tests. Skipped the test directory for wasm2c as suggested by #1737","This PR adds support for multi-memory proposal.

Added multi_memory as a feature. Added memidx(s) to IR representations of memory instructions.
Added support for parsing and writing memidx in both binary and text format, and also wasm2c.
Updated testsuite to WebAssembly/testsuite@f1eaa43 which includes testsuite for multi-memory proposal. Rebased tests. Skipped the test directory for wasm2c as suggested by #1737",True,{'HEART': ['https://github.com/pCYSl5EDgo']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1751,2021-11-04T19:46:07Z,2021-11-30T22:04:41Z,2021-12-02T19:09:59Z,MERGED,True,1656,182,44,https://github.com/yhdengh,Add support for multi-memory proposal,1,[],https://github.com/WebAssembly/wabt/pull/1751,https://github.com/yhdengh,2,https://github.com/WebAssembly/wabt/pull/1751#issuecomment-969197705,"This PR adds support for multi-memory proposal.

Added multi_memory as a feature. Added memidx(s) to IR representations of memory instructions.
Added support for parsing and writing memidx in both binary and text format, and also wasm2c.
Updated testsuite to WebAssembly/testsuite@f1eaa43 which includes testsuite for multi-memory proposal. Rebased tests. Skipped the test directory for wasm2c as suggested by #1737",@sbc100 @kripken Would you be able to take a look at this?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1751,2021-11-04T19:46:07Z,2021-11-30T22:04:41Z,2021-12-02T19:09:59Z,MERGED,True,1656,182,44,https://github.com/yhdengh,Add support for multi-memory proposal,1,[],https://github.com/WebAssembly/wabt/pull/1751,https://github.com/yhdengh,3,https://github.com/WebAssembly/wabt/pull/1751#issuecomment-970737065,"This PR adds support for multi-memory proposal.

Added multi_memory as a feature. Added memidx(s) to IR representations of memory instructions.
Added support for parsing and writing memidx in both binary and text format, and also wasm2c.
Updated testsuite to WebAssembly/testsuite@f1eaa43 which includes testsuite for multi-memory proposal. Rebased tests. Skipped the test directory for wasm2c as suggested by #1737","Thanks for all the feedback! I have updated commits in the pull request to address some of those.
For the if/else duplications, we kept them so that wabt passes all the existing tests when the multi-memory feature is not enabled. Most of them could be removed if we change existing tests for multi-memory disabled cases. Is that the preferred way to approach it?
The only exception is for reserved memidx of memory instructions in binary format, which requires a change in WebAssembly/testsuite.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1751,2021-11-04T19:46:07Z,2021-11-30T22:04:41Z,2021-12-02T19:09:59Z,MERGED,True,1656,182,44,https://github.com/yhdengh,Add support for multi-memory proposal,1,[],https://github.com/WebAssembly/wabt/pull/1751,https://github.com/yhdengh,4,https://github.com/WebAssembly/wabt/pull/1751#issuecomment-974729813,"This PR adds support for multi-memory proposal.

Added multi_memory as a feature. Added memidx(s) to IR representations of memory instructions.
Added support for parsing and writing memidx in both binary and text format, and also wasm2c.
Updated testsuite to WebAssembly/testsuite@f1eaa43 which includes testsuite for multi-memory proposal. Rebased tests. Skipped the test directory for wasm2c as suggested by #1737","For reserved byte related logic, I did something like:
Index memidx = 0;
if (!options_.features.multi_memory_enabled())  {
  unit8_t reserved;
  CHECK_RESULT(ReadU8(&reserved, ""memory.grow reserved""));
  ERROR_UNLESS(reserved == 0, ""memory.grow memory index must be 0"");
} else {
  CHECK_RESULT(ReadMemidx(&memidx, ""memory.grow memidx""));
}
CALLBACK(OnMemoryGrowExpr, memidx);
CALLBACK(OnOpcodeUint32, memidx);

since I am not sure ReadU8(&memidx) gives the right result with different endianness. Is that correct?
Also, would you prefer to have all changes for the pull request squashed into a single commit or have them as multiple commits?",True,{'HEART': ['https://github.com/pCYSl5EDgo']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1751,2021-11-04T19:46:07Z,2021-11-30T22:04:41Z,2021-12-02T19:09:59Z,MERGED,True,1656,182,44,https://github.com/yhdengh,Add support for multi-memory proposal,1,[],https://github.com/WebAssembly/wabt/pull/1751,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1751#issuecomment-974867841,"This PR adds support for multi-memory proposal.

Added multi_memory as a feature. Added memidx(s) to IR representations of memory instructions.
Added support for parsing and writing memidx in both binary and text format, and also wasm2c.
Updated testsuite to WebAssembly/testsuite@f1eaa43 which includes testsuite for multi-memory proposal. Rebased tests. Skipped the test directory for wasm2c as suggested by #1737","For reserved byte related logic, I did something like:
Index memidx = 0;
if (!options_.features.multi_memory_enabled())  {
  unit8_t reserved;
  CHECK_RESULT(ReadU8(&reserved, ""memory.grow reserved""));
  ERROR_UNLESS(reserved == 0, ""memory.grow memory index must be 0"");
} else {
  CHECK_RESULT(ReadMemidx(&memidx, ""memory.grow memidx""));
}
CALLBACK(OnMemoryGrowExpr, memidx);
CALLBACK(OnOpcodeUint32, memidx);

since I am not sure ReadU8(&memidx) gives the right result with different endianness. Is that correct?
Also, would you prefer to have all changes for the pull request squashed into a single commit or have them as multiple commits?

We always squash the PR before landing it.  Its up to you if you want to squash during the review process or not.  I tend not to look at individual commits myself.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1752,2021-11-04T20:43:37Z,2021-11-04T22:32:38Z,2021-11-04T22:32:39Z,MERGED,True,27,7,7,https://github.com/sbc100,Update third_party/testsuite. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1752,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1752,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1753,2021-11-04T20:55:49Z,2021-11-04T22:33:54Z,2021-11-04T22:33:54Z,MERGED,True,1,0,1,https://github.com/sbc100,Re-enable simd in update-spec-tests.py,1,[],https://github.com/WebAssembly/wabt/pull/1753,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1753,"This was removed as part of #1712 but I think it still needs to be here
until simd is actually merge into the main spec repo and no longer
exists as proposal in the testsuite repo.","This was removed as part of #1712 but I think it still needs to be here
until simd is actually merge into the main spec repo and no longer
exists as proposal in the testsuite repo.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1754,2021-11-04T22:46:50Z,2021-11-04T23:05:53Z,2021-11-04T23:05:53Z,MERGED,True,29,8,1,https://github.com/sbc100,update-spec-tests.py: Process all proposal directories.,1,[],https://github.com/WebAssembly/wabt/pull/1754,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1754,"Maintain an explict list of exclusions and process all other
directories.  This means that we will notice as new proposals
get added.","Maintain an explict list of exclusions and process all other
directories.  This means that we will notice as new proposals
get added.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1755,2021-11-05T22:42:34Z,2021-11-06T01:02:14Z,2021-11-06T01:02:14Z,MERGED,True,42,35,1,https://github.com/sbc100,Refactor init expressions handling in binary-reader-objdump.cc. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1755,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1755,"This makes thinks a little more precise and is part of
paving the way for extended const/init expressions.","This makes thinks a little more precise and is part of
paving the way for extended const/init expressions.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1756,2021-11-05T23:51:15Z,2021-11-06T01:01:56Z,2021-11-06T01:01:56Z,MERGED,True,40,55,13,https://github.com/sbc100,Remove separate OnEndFunc vs OnEndExpr.,1,[],https://github.com/WebAssembly/wabt/pull/1756,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1756,"We already have EndFunctionBody, and this extra distinction
doesn't seem like it is needed.","We already have EndFunctionBody, and this extra distinction
doesn't seem like it is needed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1758,2021-11-08T17:18:02Z,2021-11-08T19:27:07Z,2021-11-08T19:27:07Z,MERGED,True,1,0,1,https://github.com/sbc100,wasm-strip: enable all features during wasm-strip,1,[],https://github.com/WebAssembly/wabt/pull/1758,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1758,Fixes: #1757,Fixes: #1757,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1762,2021-11-16T20:46:42Z,2021-12-16T00:24:32Z,2021-12-16T01:16:41Z,MERGED,True,25,2,2,https://github.com/takikawa,interpreter: Fix infinite looping on `return_call`,2,[],https://github.com/WebAssembly/wabt/pull/1762,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1762,Fixes infinite looping described in issue #1761.,Fixes infinite looping described in issue #1761.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1762,2021-11-16T20:46:42Z,2021-12-16T00:24:32Z,2021-12-16T01:16:41Z,MERGED,True,25,2,2,https://github.com/takikawa,interpreter: Fix infinite looping on `return_call`,2,[],https://github.com/WebAssembly/wabt/pull/1762,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1762#issuecomment-993006026,Fixes infinite looping described in issue #1761.,Would you mind rebasing or merging?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1762,2021-11-16T20:46:42Z,2021-12-16T00:24:32Z,2021-12-16T01:16:41Z,MERGED,True,25,2,2,https://github.com/takikawa,interpreter: Fix infinite looping on `return_call`,2,[],https://github.com/WebAssembly/wabt/pull/1762,https://github.com/takikawa,3,https://github.com/WebAssembly/wabt/pull/1762#issuecomment-995229070,Fixes infinite looping described in issue #1761.,"Sure, no problem! I just pushed a rebased commit.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1764,2021-11-17T23:01:00Z,2021-12-06T22:27:33Z,2021-12-06T22:27:34Z,MERGED,True,1984,2879,24,https://github.com/takikawa,Add specification tests for exception handling proposal,6,[],https://github.com/WebAssembly/wabt/pull/1764,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1764,"This PR imports the spec tests from the Wasm testsuite repo and adds infrastructure to run them correctly.

Adds test expectations for exception handling proposal spec tests.
Adds missing tag signature matching code for import tests.
Adds support for the assert_exception command used in new tests.
Fix filename normalization for the spec test runner.","This PR imports the spec tests from the Wasm testsuite repo and adds infrastructure to run them correctly.

Adds test expectations for exception handling proposal spec tests.
Adds missing tag signature matching code for import tests.
Adds support for the assert_exception command used in new tests.
Fix filename normalization for the spec test runner.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1764,2021-11-17T23:01:00Z,2021-12-06T22:27:33Z,2021-12-06T22:27:34Z,MERGED,True,1984,2879,24,https://github.com/takikawa,Add specification tests for exception handling proposal,6,[],https://github.com/WebAssembly/wabt/pull/1764,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1764#issuecomment-972249356,"This PR imports the spec tests from the Wasm testsuite repo and adds infrastructure to run them correctly.

Adds test expectations for exception handling proposal spec tests.
Adds missing tag signature matching code for import tests.
Adds support for the assert_exception command used in new tests.
Fix filename normalization for the spec test runner.","Looks like the Windows test failure is due to some difference in how paths are printed on Windows? (see ""\"" below)
-out/test/parse/assert/bad-assertexception/bad-assertexception.json:3:30: invalid command: exceptions not allowed
+out/test/parse/assert/bad-assertexception\bad-assertexception.json:3:30: invalid command: exceptions not allowed

I'm not sure what to do about this, but I'll see if there's some easy fix.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1764,2021-11-17T23:01:00Z,2021-12-06T22:27:33Z,2021-12-06T22:27:34Z,MERGED,True,1984,2879,24,https://github.com/takikawa,Add specification tests for exception handling proposal,6,[],https://github.com/WebAssembly/wabt/pull/1764,https://github.com/takikawa,3,https://github.com/WebAssembly/wabt/pull/1764#issuecomment-982068428,"This PR imports the spec tests from the Wasm testsuite repo and adds infrastructure to run them correctly.

Adds test expectations for exception handling proposal spec tests.
Adds missing tag signature matching code for import tests.
Adds support for the assert_exception command used in new tests.
Fix filename normalization for the spec test runner.",CC @aheejin in case you were interested in reviewing this. It should be much less work to review than the interpreter changes earlier. :),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1764,2021-11-17T23:01:00Z,2021-12-06T22:27:33Z,2021-12-06T22:27:34Z,MERGED,True,1984,2879,24,https://github.com/takikawa,Add specification tests for exception handling proposal,6,[],https://github.com/WebAssembly/wabt/pull/1764,https://github.com/takikawa,4,https://github.com/WebAssembly/wabt/pull/1764#issuecomment-986360583,"This PR imports the spec tests from the Wasm testsuite repo and adds infrastructure to run them correctly.

Adds test expectations for exception handling proposal spec tests.
Adds missing tag signature matching code for import tests.
Adds support for the assert_exception command used in new tests.
Fix filename normalization for the spec test runner.","Thanks for the review!
I have a rebased version of this that resolves the merge conflicts, I just haven't pushed it yet because I didn't want to disrupt the review comments (only minor changes were needed; the submodule update commit is dropped and binary.wast test expectations change a bit). I can push it once everything is resolved.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1764,2021-11-17T23:01:00Z,2021-12-06T22:27:33Z,2021-12-06T22:27:34Z,MERGED,True,1984,2879,24,https://github.com/takikawa,Add specification tests for exception handling proposal,6,[],https://github.com/WebAssembly/wabt/pull/1764,https://github.com/takikawa,5,https://github.com/WebAssembly/wabt/pull/1764#issuecomment-987292592,"This PR imports the spec tests from the Wasm testsuite repo and adds infrastructure to run them correctly.

Adds test expectations for exception handling proposal spec tests.
Adds missing tag signature matching code for import tests.
Adds support for the assert_exception command used in new tests.
Fix filename normalization for the spec test runner.","I've pushed the rebased version now, and CI looks good.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1764,2021-11-17T23:01:00Z,2021-12-06T22:27:33Z,2021-12-06T22:27:34Z,MERGED,True,1984,2879,24,https://github.com/takikawa,Add specification tests for exception handling proposal,6,[],https://github.com/WebAssembly/wabt/pull/1764,https://github.com/aheejin,6,https://github.com/WebAssembly/wabt/pull/1764#issuecomment-987300347,"This PR imports the spec tests from the Wasm testsuite repo and adds infrastructure to run them correctly.

Adds test expectations for exception handling proposal spec tests.
Adds missing tag signature matching code for import tests.
Adds support for the assert_exception command used in new tests.
Fix filename normalization for the spec test runner.","I just haven't pushed it yet because I didn't want to disrupt the review comments

I think you can always merge rather than rebase to avoid this, including when resolving conflicts? Anyway we were done with reviews by that point.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1765,2021-11-19T23:38:40Z,2021-11-20T00:15:38Z,2021-11-20T00:15:39Z,MERGED,True,3831,3832,69,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1765,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1765,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1768,2021-12-01T18:46:48Z,2021-12-02T23:58:59Z,2021-12-03T13:23:20Z,MERGED,True,11,11,6,https://github.com/sbc100,OnRefFuncExpr takes a func index. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1768,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1768,"The name of this argument was recently changed from func_index
to type_index as part of #1695, but I think that might have been incorrect.
The immediate that read in the binary reader is (IIRC) a function
index:
      case Opcode::RefFunc: {
        Index func;
        CHECK_RESULT(ReadIndex(&func, ""func index""));
        CALLBACK(OnRefFuncExpr, func);
        CALLBACK(OnOpcodeUint32, func);
        break;
      }

and not a type index.   Indeed the interpreter seems to treat it
as a function index too:
Result BinaryReaderInterp::OnRefFuncExpr(Index func_index) {
  CHECK_RESULT(validator_.OnRefFunc(loc, Var(func_index)));
  istream_.Emit(Opcode::RefFunc, func_index);
  return Result::Ok;
}","The name of this argument was recently changed from func_index
to type_index as part of #1695, but I think that might have been incorrect.
The immediate that read in the binary reader is (IIRC) a function
index:
      case Opcode::RefFunc: {
        Index func;
        CHECK_RESULT(ReadIndex(&func, ""func index""));
        CALLBACK(OnRefFuncExpr, func);
        CALLBACK(OnOpcodeUint32, func);
        break;
      }

and not a type index.   Indeed the interpreter seems to treat it
as a function index too:
Result BinaryReaderInterp::OnRefFuncExpr(Index func_index) {
  CHECK_RESULT(validator_.OnRefFunc(loc, Var(func_index)));
  istream_.Emit(Opcode::RefFunc, func_index);
  return Result::Ok;
}",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1768,2021-12-01T18:46:48Z,2021-12-02T23:58:59Z,2021-12-03T13:23:20Z,MERGED,True,11,11,6,https://github.com/sbc100,OnRefFuncExpr takes a func index. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1768,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1768#issuecomment-983954363,"The name of this argument was recently changed from func_index
to type_index as part of #1695, but I think that might have been incorrect.
The immediate that read in the binary reader is (IIRC) a function
index:
      case Opcode::RefFunc: {
        Index func;
        CHECK_RESULT(ReadIndex(&func, ""func index""));
        CALLBACK(OnRefFuncExpr, func);
        CALLBACK(OnOpcodeUint32, func);
        break;
      }

and not a type index.   Indeed the interpreter seems to treat it
as a function index too:
Result BinaryReaderInterp::OnRefFuncExpr(Index func_index) {
  CHECK_RESULT(validator_.OnRefFunc(loc, Var(func_index)));
  istream_.Emit(Opcode::RefFunc, func_index);
  return Result::Ok;
}",@dbezhetskov WDYT?  Was this a mistake in  #1695?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1768,2021-12-01T18:46:48Z,2021-12-02T23:58:59Z,2021-12-03T13:23:20Z,MERGED,True,11,11,6,https://github.com/sbc100,OnRefFuncExpr takes a func index. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1768,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1768#issuecomment-985097696,"The name of this argument was recently changed from func_index
to type_index as part of #1695, but I think that might have been incorrect.
The immediate that read in the binary reader is (IIRC) a function
index:
      case Opcode::RefFunc: {
        Index func;
        CHECK_RESULT(ReadIndex(&func, ""func index""));
        CALLBACK(OnRefFuncExpr, func);
        CALLBACK(OnOpcodeUint32, func);
        break;
      }

and not a type index.   Indeed the interpreter seems to treat it
as a function index too:
Result BinaryReaderInterp::OnRefFuncExpr(Index func_index) {
  CHECK_RESULT(validator_.OnRefFunc(loc, Var(func_index)));
  istream_.Emit(Opcode::RefFunc, func_index);
  return Result::Ok;
}","I'm gonna go ahead and land this.  @dbezhetskov, if you disagree we can discuss more and consider reverting..",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1768,2021-12-01T18:46:48Z,2021-12-02T23:58:59Z,2021-12-03T13:23:20Z,MERGED,True,11,11,6,https://github.com/sbc100,OnRefFuncExpr takes a func index. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1768,https://github.com/dbezhetskov,4,https://github.com/WebAssembly/wabt/pull/1768#issuecomment-985516024,"The name of this argument was recently changed from func_index
to type_index as part of #1695, but I think that might have been incorrect.
The immediate that read in the binary reader is (IIRC) a function
index:
      case Opcode::RefFunc: {
        Index func;
        CHECK_RESULT(ReadIndex(&func, ""func index""));
        CALLBACK(OnRefFuncExpr, func);
        CALLBACK(OnOpcodeUint32, func);
        break;
      }

and not a type index.   Indeed the interpreter seems to treat it
as a function index too:
Result BinaryReaderInterp::OnRefFuncExpr(Index func_index) {
  CHECK_RESULT(validator_.OnRefFunc(loc, Var(func_index)));
  istream_.Emit(Opcode::RefFunc, func_index);
  return Result::Ok;
}","ah, yeah, it was a typo, I've forget to return it back, thanks @sbc100 !",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1769,2021-12-01T20:37:02Z,2021-12-01T20:53:04Z,2021-12-01T20:53:04Z,CLOSED,False,425,512,21,https://github.com/sbc100,Read init expr instructions,2,[],https://github.com/WebAssembly/wabt/pull/1769,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1769,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1770,2021-12-01T20:37:04Z,2021-12-03T01:30:10Z,2021-12-03T01:30:11Z,MERGED,True,461,504,19,https://github.com/sbc100,Perform init expression validation outside of the binary reader. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1770,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1770,"Rather than spocial casing them in the reader we now use the same
instruction callbacks for instruction that appear in init expressions as
instructions that appear in normal functions.
The result of this change is the validation of init expresions is pushed
further up the stack.  For example, objdump will now quite happily dump
modules that use arbitrary instructions in thier init expressions even
though they are not valid.  To me, this makes sense since objdump does
not do instruction validation elsewhere.
The change is pre-cursor to allowing a wider variety of instruction
to be present in init expressions.
See https://github.com/WebAssembly/extended-const","Rather than spocial casing them in the reader we now use the same
instruction callbacks for instruction that appear in init expressions as
instructions that appear in normal functions.
The result of this change is the validation of init expresions is pushed
further up the stack.  For example, objdump will now quite happily dump
modules that use arbitrary instructions in thier init expressions even
though they are not valid.  To me, this makes sense since objdump does
not do instruction validation elsewhere.
The change is pre-cursor to allowing a wider variety of instruction
to be present in init expressions.
See https://github.com/WebAssembly/extended-const",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1770,2021-12-01T20:37:04Z,2021-12-03T01:30:10Z,2021-12-03T01:30:11Z,MERGED,True,461,504,19,https://github.com/sbc100,Perform init expression validation outside of the binary reader. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1770,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1770#issuecomment-984039683,"Rather than spocial casing them in the reader we now use the same
instruction callbacks for instruction that appear in init expressions as
instructions that appear in normal functions.
The result of this change is the validation of init expresions is pushed
further up the stack.  For example, objdump will now quite happily dump
modules that use arbitrary instructions in thier init expressions even
though they are not valid.  To me, this makes sense since objdump does
not do instruction validation elsewhere.
The change is pre-cursor to allowing a wider variety of instruction
to be present in init expressions.
See https://github.com/WebAssembly/extended-const","Overall this a win for LOC:
19 files changed, 414 insertions(+), 501 deletions(-)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1770,2021-12-01T20:37:04Z,2021-12-03T01:30:10Z,2021-12-03T01:30:11Z,MERGED,True,461,504,19,https://github.com/sbc100,Perform init expression validation outside of the binary reader. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1770,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1770#issuecomment-985110084,"Rather than spocial casing them in the reader we now use the same
instruction callbacks for instruction that appear in init expressions as
instructions that appear in normal functions.
The result of this change is the validation of init expresions is pushed
further up the stack.  For example, objdump will now quite happily dump
modules that use arbitrary instructions in thier init expressions even
though they are not valid.  To me, this makes sense since objdump does
not do instruction validation elsewhere.
The change is pre-cursor to allowing a wider variety of instruction
to be present in init expressions.
See https://github.com/WebAssembly/extended-const",Updated ReadInstructions and moved the function-specific assertions out to ReadFunctionBody,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1771,2021-12-03T01:39:38Z,,2021-12-07T01:44:18Z,OPEN,False,92,83,12,https://github.com/sbc100,Create explicit class in the IR for initializer expressions. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1771,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1771,"Rather than treating an init expression as a raw expressions list wrap
it into its own class.  While this does nothing now I plan to followup
by attaching an end_loc (like we do for Block) so that we can have the
validator handle checking the correct placement of the END instruction.
Its also good for readability to have an explict class for this class
of expression list.","Rather than treating an init expression as a raw expressions list wrap
it into its own class.  While this does nothing now I plan to followup
by attaching an end_loc (like we do for Block) so that we can have the
validator handle checking the correct placement of the END instruction.
Its also good for readability to have an explict class for this class
of expression list.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1772,2021-12-03T02:02:54Z,2021-12-04T17:05:11Z,2021-12-04T17:05:11Z,MERGED,True,0,24,3,https://github.com/sbc100,Remove unused checks from #1770. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1772,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1772,"In #1770 I introduced these (duplicate) checks but it turns
out neither were necessary in the final version of the patch.","In #1770 I introduced these (duplicate) checks but it turns
out neither were necessary in the final version of the patch.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1774,2021-12-07T01:25:24Z,2021-12-07T19:07:47Z,2021-12-07T19:07:48Z,MERGED,True,224,137,7,https://github.com/sbc100,Show tag names in objdump disassembly,1,[],https://github.com/WebAssembly/wabt/pull/1774,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1774,"Tag names are not officially part of the extended-name-section proposal
(because it only deals with naming things that are in the spec already).
However, I think its reasonable (and useful) to include these names
under a speculative subsection on the basis that tags can only exist
when exceptions are enabled and that engines should ignore unknown name
types.","Tag names are not officially part of the extended-name-section proposal
(because it only deals with naming things that are in the spec already).
However, I think its reasonable (and useful) to include these names
under a speculative subsection on the basis that tags can only exist
when exceptions are enabled and that engines should ignore unknown name
types.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1774,2021-12-07T01:25:24Z,2021-12-07T19:07:47Z,2021-12-07T19:07:48Z,MERGED,True,224,137,7,https://github.com/sbc100,Show tag names in objdump disassembly,1,[],https://github.com/WebAssembly/wabt/pull/1774,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1774#issuecomment-987487422,"Tag names are not officially part of the extended-name-section proposal
(because it only deals with naming things that are in the spec already).
However, I think its reasonable (and useful) to include these names
under a speculative subsection on the basis that tags can only exist
when exceptions are enabled and that engines should ignore unknown name
types.",Not really sure about this.. WDYT?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1775,2021-12-07T21:30:17Z,2021-12-07T23:04:45Z,2021-12-07T23:04:46Z,MERGED,True,17,0,1,https://github.com/sbc100,Add test for function lacking END marker. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1775,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1775,I guess the spec tests don't include such a test.,I guess the spec tests don't include such a test.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1776,2021-12-08T15:55:45Z,2021-12-08T22:35:50Z,2021-12-08T22:35:50Z,MERGED,True,7,3,3,https://github.com/sbc100,Re-generate all test expectations using `--rebase`. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1776,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1776,"There were a few cases where some hand-editing had creped but its niced
if running run-tests.py --rebase is a completely no-op.","There were a few cases where some hand-editing had creped but its niced
if running run-tests.py --rebase is a completely no-op.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1777,2021-12-08T19:28:24Z,2021-12-08T22:36:17Z,2021-12-08T22:36:19Z,MERGED,True,36,26,3,https://github.com/sbc100,wasm-objdump: Fix disassembly output of selectT instruction,1,[],https://github.com/WebAssembly/wabt/pull/1777,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1777,"Use LogOpcodeType rather than LogOpcodeBare when the select
instruction has a type.","Use LogOpcodeType rather than LogOpcodeBare when the select
instruction has a type.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1778,2021-12-08T20:18:55Z,2021-12-08T23:20:30Z,2021-12-08T23:20:30Z,MERGED,True,26,39,1,https://github.com/sbc100,wasm-objdump: centralize opcode size calculations. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1778,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1778,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1779,2021-12-08T23:06:34Z,2021-12-09T15:48:57Z,2021-12-09T15:48:58Z,MERGED,True,69,69,2,https://github.com/sbc100,Make copies of incoming expression locations in SharedValidator. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1779,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1779,"The SharedValidator was assuming it could keep a pointer to the incoming
location of each expression longer than the scope of the function.
This assumption holds true for one of the users of SharedValidator
(src/validator.cc) but I'm working on change that adds better location
tracking to the other one in (src/interp/binary-reader-interp.cc) and in
that case its easier to pass temporary locations into the
SharedValidator that don't outlive the call.","The SharedValidator was assuming it could keep a pointer to the incoming
location of each expression longer than the scope of the function.
This assumption holds true for one of the users of SharedValidator
(src/validator.cc) but I'm working on change that adds better location
tracking to the other one in (src/interp/binary-reader-interp.cc) and in
that case its easier to pass temporary locations into the
SharedValidator that don't outlive the call.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1780,2021-12-08T23:25:34Z,2021-12-09T21:35:37Z,2021-12-09T21:35:37Z,MERGED,True,2447,2416,137,https://github.com/sbc100,Add error locations to BinaryReaderInterp,1,[],https://github.com/WebAssembly/wabt/pull/1780,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1780,"I think it was always intended to work this way but was
left as a TODO.","I think it was always intended to work this way but was
left as a TODO.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1780,2021-12-08T23:25:34Z,2021-12-09T21:35:37Z,2021-12-09T21:35:37Z,MERGED,True,2447,2416,137,https://github.com/sbc100,Add error locations to BinaryReaderInterp,1,[],https://github.com/WebAssembly/wabt/pull/1780,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1780#issuecomment-989309481,"I think it was always intended to work this way but was
left as a TODO.",Depends on #1779,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1781,2021-12-09T18:44:59Z,2021-12-09T21:11:36Z,2021-12-09T21:11:37Z,MERGED,True,15,6,1,https://github.com/sbc100,Improve path canonicalization when running test code. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1781,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1781,This is needed for #1780,This is needed for #1780,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1782,2021-12-09T23:48:53Z,2021-12-13T17:57:41Z,2021-12-16T01:17:08Z,MERGED,True,8,8,2,https://github.com/takikawa,Fix syntax for assert_return typecheck test,1,[],https://github.com/WebAssembly/wabt/pull/1782,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1782,"This test seems to be intended to test the type checking behavior, but due to a syntax error in an export statement was just testing the parsing behavior instead. This PR fixes the syntax and adjusts the test expectations.","This test seems to be intended to test the type checking behavior, but due to a syntax error in an export statement was just testing the parsing behavior instead. This PR fixes the syntax and adjusts the test expectations.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1782,2021-12-09T23:48:53Z,2021-12-13T17:57:41Z,2021-12-16T01:17:08Z,MERGED,True,8,8,2,https://github.com/takikawa,Fix syntax for assert_return typecheck test,1,[],https://github.com/WebAssembly/wabt/pull/1782,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1782#issuecomment-992727731,"This test seems to be intended to test the type checking behavior, but due to a syntax error in an export statement was just testing the parsing behavior instead. This PR fixes the syntax and adjusts the test expectations.",Thanks!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1782,2021-12-09T23:48:53Z,2021-12-13T17:57:41Z,2021-12-16T01:17:08Z,MERGED,True,8,8,2,https://github.com/takikawa,Fix syntax for assert_return typecheck test,1,[],https://github.com/WebAssembly/wabt/pull/1782,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1782#issuecomment-992729697,"This test seems to be intended to test the type checking behavior, but due to a syntax error in an export statement was just testing the parsing behavior instead. This PR fixes the syntax and adjusts the test expectations.","It looks like these expectations were mistakenly updated as part of #591.  The dangers of automatic test expectation updates!
Actually it goes way back to 63d7dbb which was one of my changes :-/",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1783,2021-12-10T01:20:17Z,2021-12-10T16:47:14Z,2021-12-10T16:47:15Z,MERGED,True,270,529,20,https://github.com/sbc100,Share validation code between constant expressions and function bodie…,1,[],https://github.com/WebAssembly/wabt/pull/1783,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1783,"…s. NFC
Previously we has special cases for initializer expressions (constant
expressions).  This change paves the way for adding support for
extended constant expressions that support a wider range of
instructions.
This change removes twice as many lines as it adds which shows that
this simplification is probably worthwhile even without the pending
extensions.","…s. NFC
Previously we has special cases for initializer expressions (constant
expressions).  This change paves the way for adding support for
extended constant expressions that support a wider range of
instructions.
This change removes twice as many lines as it adds which shows that
this simplification is probably worthwhile even without the pending
extensions.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1783,2021-12-10T01:20:17Z,2021-12-10T16:47:14Z,2021-12-10T16:47:15Z,MERGED,True,270,529,20,https://github.com/sbc100,Share validation code between constant expressions and function bodie…,1,[],https://github.com/WebAssembly/wabt/pull/1783,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1783#issuecomment-990548328,"…s. NFC
Previously we has special cases for initializer expressions (constant
expressions).  This change paves the way for adding support for
extended constant expressions that support a wider range of
instructions.
This change removes twice as many lines as it adds which shows that
this simplification is probably worthwhile even without the pending
extensions.","The failure messages are less clear i think (previously it mentions global initializer expression, now it's constant expression), but with the line and column it should be easy to pinpoint the errors.

I agree, it could be seen a less clear, but its also more consistent which I like.  I can take a look and see if we can be more specific perhaps.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1784,2021-12-11T01:38:57Z,2021-12-13T17:46:06Z,2021-12-13T17:46:07Z,MERGED,True,253,264,53,https://github.com/sbc100,Remove check from binary-reader-interp.cc that the validator already catches. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1784,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1784,"If you leave stuff on the stack at the end of an initializer
expression use the same mechanism to report the error as we
do for functions etc.
In addition, improve such errors so its more obvious what is
going on when the validations fails in this way.","If you leave stuff on the stack at the end of an initializer
expression use the same mechanism to report the error as we
do for functions etc.
In addition, improve such errors so its more obvious what is
going on when the validations fails in this way.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1785,2021-12-12T20:03:26Z,2021-12-13T17:54:39Z,2021-12-13T17:54:40Z,MERGED,True,101,49,4,https://github.com/sbc100,Split base-types.h and string-format.h out of common.h,1,[],https://github.com/WebAssembly/wabt/pull/1785,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1785,"This allows them to be used in headers such as src/type.h
which, because they are needed in common.h, cannot themselves
include common.h
This allows, for example, StringPrintf to be used in type.h
which is something I'm planning to do as a followup.","This allows them to be used in headers such as src/type.h
which, because they are needed in common.h, cannot themselves
include common.h
This allows, for example, StringPrintf to be used in type.h
which is something I'm planning to do as a followup.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1786,2021-12-12T20:13:27Z,2021-12-13T17:47:07Z,2021-12-13T17:47:08Z,MERGED,True,5,5,3,https://github.com/sbc100,Fix param naming for `OnFuncRefExpr` (See #1768). NFC,1,[],https://github.com/WebAssembly/wabt/pull/1786,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1786,"In #1768, I renamed the parameter to OnFuncRefExpr without realizing
that there are two distinct methods in the codebase with this name.  On
is the BinaryReader callback which takes a function index and one is
the TypeChecker callback which takes a function type (a type index).","In #1768, I renamed the parameter to OnFuncRefExpr without realizing
that there are two distinct methods in the codebase with this name.  On
is the BinaryReader callback which takes a function index and one is
the TypeChecker callback which takes a function type (a type index).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1787,2021-12-13T18:09:10Z,2021-12-13T19:07:44Z,2021-12-13T19:07:45Z,MERGED,True,93,88,19,https://github.com/sbc100,Fix type names for function references,1,[],https://github.com/WebAssembly/wabt/pull/1787,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1787,"This requires Type::GetName to return to be dynamicllay created and
return std::string rather then a const char*
As this diff shows this type name is only used in textual output and
error messages so should this change should not have a effect of binary
parse time or the interpreter.","This requires Type::GetName to return to be dynamicllay created and
return std::string rather then a const char*
As this diff shows this type name is only used in textual output and
error messages so should this change should not have a effect of binary
parse time or the interpreter.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1788,2021-12-14T22:11:55Z,2021-12-14T23:35:42Z,2021-12-14T23:35:43Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.25,1,[],https://github.com/WebAssembly/wabt/pull/1788,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1788,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1788,2021-12-14T22:11:55Z,2021-12-14T23:35:42Z,2021-12-14T23:35:43Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.25,1,[],https://github.com/WebAssembly/wabt/pull/1788,https://github.com/steven-johnson,2,https://github.com/WebAssembly/wabt/pull/1788#issuecomment-994132502,,LGTM,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1789,2021-12-15T21:57:57Z,2021-12-23T10:52:26Z,2021-12-23T10:52:26Z,MERGED,True,6,0,2,https://github.com/walkingeyerobot,add includes for used system headers,2,[],https://github.com/WebAssembly/wabt/pull/1789,https://github.com/walkingeyerobot,1,https://github.com/WebAssembly/wabt/pull/1789,This was necessary for me to build and seems to be the correct thing to do. If it's incorrect and my build is somehow misconfigured please let me know! :),This was necessary for me to build and seems to be the correct thing to do. If it's incorrect and my build is somehow misconfigured please let me know! :),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1791,2021-12-19T02:41:14Z,2021-12-20T23:38:28Z,2021-12-21T00:02:09Z,MERGED,True,0,1,1,https://github.com/aheejin,Remove redundant `BindImports` call (NFC),2,[],https://github.com/WebAssembly/wabt/pull/1791,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1791,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1791,2021-12-19T02:41:14Z,2021-12-20T23:38:28Z,2021-12-21T00:02:09Z,MERGED,True,0,1,1,https://github.com/aheejin,Remove redundant `BindImports` call (NFC),2,[],https://github.com/WebAssembly/wabt/pull/1791,https://github.com/aheejin,2,https://github.com/WebAssembly/wabt/pull/1791#issuecomment-998292410,,"Ping :) Can I merge it? (Sorry I know it's early, but you seem to be OOO from tomorrow so..)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1792,2021-12-20T18:55:26Z,2021-12-21T03:36:05Z,2021-12-21T03:36:08Z,MERGED,True,2084,2297,231,https://github.com/aheejin,Finish instruction renaming,2,[],https://github.com/WebAssembly/wabt/pull/1792,https://github.com/aheejin,1,https://github.com/WebAssembly/wabt/pull/1792,"This finishes #985. This

replaces the old names in the tests with the new names
drops support for the deprecated names
renames test files to match new instruction names

I don't think dropping support for the old names will be a problem at
this point. #985 says the old names are supported for convenience but we
should remove those too at some point; that ""some point"" may have well
arrived given that three years have passed.
The lists of names updated are in #933, #1564, WebAssembly/spec#720.","This finishes #985. This

replaces the old names in the tests with the new names
drops support for the deprecated names
renames test files to match new instruction names

I don't think dropping support for the old names will be a problem at
this point. #985 says the old names are supported for convenience but we
should remove those too at some point; that ""some point"" may have well
arrived given that three years have passed.
The lists of names updated are in #933, #1564, WebAssembly/spec#720.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1792,2021-12-20T18:55:26Z,2021-12-21T03:36:05Z,2021-12-21T03:36:08Z,MERGED,True,2084,2297,231,https://github.com/aheejin,Finish instruction renaming,2,[],https://github.com/WebAssembly/wabt/pull/1792,https://github.com/aheejin,2,https://github.com/WebAssembly/wabt/pull/1792#issuecomment-998188448,"This finishes #985. This

replaces the old names in the tests with the new names
drops support for the deprecated names
renames test files to match new instruction names

I don't think dropping support for the old names will be a problem at
this point. #985 says the old names are supported for convenience but we
should remove those too at some point; that ""some point"" may have well
arrived given that three years have passed.
The lists of names updated are in #933, #1564, WebAssembly/spec#720.","@kripken @sbc100 This contains a renaming of wasm_rt_anyfunc_t -> wasm_rt_funcref_t in wasm2c. Would this make any problem for Emscripten? (I'm not sure if there's any syncing going on between Emscripten and Wabt, so I'm asking)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1795,2021-12-23T10:52:36Z,2022-01-10T20:29:36Z,2022-01-10T20:29:37Z,MERGED,True,345,285,15,https://github.com/sbc100,Update testsuite,1,[],https://github.com/WebAssembly/wabt/pull/1795,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1795,"Remove test/binary/bad-function-missing-end.txt which is now
covered upstream: WebAssembly/spec#1405","Remove test/binary/bad-function-missing-end.txt which is now
covered upstream: WebAssembly/spec#1405",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1797,2022-01-03T20:29:03Z,2022-01-10T15:59:46Z,2022-01-10T15:59:46Z,MERGED,True,3,2,1,https://github.com/jzabinski-dolios,Updated multi-value message,2,[],https://github.com/WebAssembly/wabt/pull/1797,https://github.com/jzabinski-dolios,1,https://github.com/WebAssembly/wabt/pull/1797,"Resolves #1796
To test locally:

Make a WAT file containing a function which returns multiple values. Example:

(module
    (func $mult (export ""mult"")
        (result f64 f64)
        f64.const 1
        f64.const 2
    )
)


Use wat2wasm to compile, disabling multi-value. For example:

sudo bin/wat2wasm --disable-multi-value examples/multi.wat -o examples/multi.wasm

An error should be returned by the compiler. The wording of the error should be multiple result values are not supported without multi-value enabled.","Resolves #1796
To test locally:

Make a WAT file containing a function which returns multiple values. Example:

(module
    (func $mult (export ""mult"")
        (result f64 f64)
        f64.const 1
        f64.const 2
    )
)


Use wat2wasm to compile, disabling multi-value. For example:

sudo bin/wat2wasm --disable-multi-value examples/multi.wat -o examples/multi.wasm

An error should be returned by the compiler. The wording of the error should be multiple result values are not supported without multi-value enabled.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1797,2022-01-03T20:29:03Z,2022-01-10T15:59:46Z,2022-01-10T15:59:46Z,MERGED,True,3,2,1,https://github.com/jzabinski-dolios,Updated multi-value message,2,[],https://github.com/WebAssembly/wabt/pull/1797,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1797#issuecomment-1008121125,"Resolves #1796
To test locally:

Make a WAT file containing a function which returns multiple values. Example:

(module
    (func $mult (export ""mult"")
        (result f64 f64)
        f64.const 1
        f64.const 2
    )
)


Use wat2wasm to compile, disabling multi-value. For example:

sudo bin/wat2wasm --disable-multi-value examples/multi.wat -o examples/multi.wasm

An error should be returned by the compiler. The wording of the error should be multiple result values are not supported without multi-value enabled.",Looks like there is lint failure.. can you git clang-format origin/main?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1798,2022-01-06T13:15:44Z,2022-01-07T18:20:12Z,2022-01-07T18:20:13Z,MERGED,True,30,34,2,https://github.com/sbc100,Refactor simd load/store text parsing to use a template. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1798,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1798,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1800,2022-01-07T20:34:37Z,2022-01-07T22:23:16Z,2022-01-07T22:23:17Z,MERGED,True,8,2,1,https://github.com/sbc100,"Fix erroneous reporting of ""Data reloctions outside of segments""",1,[],https://github.com/WebAssembly/wabt/pull/1800,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1800,"This check should only not be done during disassembly, only
when displaying details.
Fixes: #1790","This check should only not be done during disassembly, only
when displaying details.
Fixes: #1790",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1801,2022-01-08T21:24:13Z,2022-01-08T21:48:40Z,2022-01-08T21:48:40Z,MERGED,True,33,29,2,https://github.com/sbc100,Don't include empty names for locals,1,[],https://github.com/WebAssembly/wabt/pull/1801,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1801,Fixes: #1799,Fixes: #1799,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1804,2022-01-12T23:53:52Z,2022-01-13T04:09:08Z,2022-01-13T04:09:08Z,MERGED,True,22,24,2,https://github.com/sbc100,Update github action used to publish releases. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1804,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1804,"It seems that the action we were using is not longer working:
https://github.com/actions/upload-release-asset
See WebAssembly/binaryen#4148","It seems that the action we were using is not longer working:
https://github.com/actions/upload-release-asset
See WebAssembly/binaryen#4148",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1804,2022-01-12T23:53:52Z,2022-01-13T04:09:08Z,2022-01-13T04:09:08Z,MERGED,True,22,24,2,https://github.com/sbc100,Update github action used to publish releases. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1804,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1804#issuecomment-1011633939,"It seems that the action we were using is not longer working:
https://github.com/actions/upload-release-asset
See WebAssembly/binaryen#4148",You can see the new action in action here: https://github.com/WebAssembly/wabt/releases/tag/test_tag,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1807,2022-01-14T15:11:26Z,2022-03-06T16:48:03Z,2022-03-07T19:36:39Z,MERGED,True,5,3,2,https://github.com/sbc100,Fix location in config.h in source list,1,[],https://github.com/WebAssembly/wabt/pull/1807,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1807,"The wrong name here was causing a cmake warning because
it was finding config.h.in instead and this behaviour is
deprecated.","The wrong name here was causing a cmake warning because
it was finding config.h.in instead and this behaviour is
deprecated.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1808,2022-01-14T15:29:18Z,2022-01-15T00:17:42Z,2022-01-15T00:17:43Z,MERGED,True,15,11,2,https://github.com/sbc100,Fix wat parsing of function imports with type name + inline type,1,[],https://github.com/WebAssembly/wabt/pull/1808,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1808,"This simplifies the code for parsing imported functions
and makes it match more closely the code for parsing
non-imported functions.
Fixes: #1806","This simplifies the code for parsing imported functions
and makes it match more closely the code for parsing
non-imported functions.
Fixes: #1806",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1809,2022-01-18T09:16:29Z,2022-02-04T15:59:35Z,2022-02-06T07:40:21Z,MERGED,True,35,37,4,https://github.com/zherczeg,Change Thread in interpreter to a normal object,1,[],https://github.com/WebAssembly/wabt/pull/1809,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1809,Improves memory consumption since thread instances are freed without running garbage collector.,Improves memory consumption since thread instances are freed without running garbage collector.,True,{'THUMBS_UP': ['https://github.com/clover2123']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1809,2022-01-18T09:16:29Z,2022-02-04T15:59:35Z,2022-02-06T07:40:21Z,MERGED,True,35,37,4,https://github.com/zherczeg,Change Thread in interpreter to a normal object,1,[],https://github.com/WebAssembly/wabt/pull/1809,https://github.com/zherczeg,2,https://github.com/WebAssembly/wabt/pull/1809#issuecomment-1021901919,Improves memory consumption since thread instances are freed without running garbage collector.,"Could somebody review this patch? Thank you!
Related issue #1671",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1809,2022-01-18T09:16:29Z,2022-02-04T15:59:35Z,2022-02-06T07:40:21Z,MERGED,True,35,37,4,https://github.com/zherczeg,Change Thread in interpreter to a normal object,1,[],https://github.com/WebAssembly/wabt/pull/1809,https://github.com/zherczeg,3,https://github.com/WebAssembly/wabt/pull/1809#issuecomment-1027631896,Improves memory consumption since thread instances are freed without running garbage collector.,"@sbc100 @dschuff @tlively Since you do approvals in this project, could you suggest somebody who can review this patch?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1809,2022-01-18T09:16:29Z,2022-02-04T15:59:35Z,2022-02-06T07:40:21Z,MERGED,True,35,37,4,https://github.com/zherczeg,Change Thread in interpreter to a normal object,1,[],https://github.com/WebAssembly/wabt/pull/1809,https://github.com/zherczeg,4,https://github.com/WebAssembly/wabt/pull/1809#issuecomment-1028262399,Improves memory consumption since thread instances are freed without running garbage collector.,I hope I fixed the format and testing issues. CI still needs manual approval.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1809,2022-01-18T09:16:29Z,2022-02-04T15:59:35Z,2022-02-06T07:40:21Z,MERGED,True,35,37,4,https://github.com/zherczeg,Change Thread in interpreter to a normal object,1,[],https://github.com/WebAssembly/wabt/pull/1809,https://github.com/zherczeg,5,https://github.com/WebAssembly/wabt/pull/1809#issuecomment-1028733598,Improves memory consumption since thread instances are freed without running garbage collector.,Thank you for the reviews and helping for me!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1810,2022-01-20T21:22:49Z,2022-02-17T18:58:07Z,2022-02-17T18:58:07Z,MERGED,True,91,7,5,https://github.com/yhdengh,Added support for multi-memory in apply-names,3,[],https://github.com/WebAssembly/wabt/pull/1810,https://github.com/yhdengh,1,https://github.com/WebAssembly/wabt/pull/1810,"This PR adds support for the multi-memory proposal in apply-names.cc. This change should have been part of #1751, but I didn't realize that this change is necessary.
This PR also adds name application to all exports. The current main branch only applies names if the export is of type func, but I think it should also apply names for global, table, memory, and tag. Is there any specific reason for only applying names to funcs?","This PR adds support for the multi-memory proposal in apply-names.cc. This change should have been part of #1751, but I didn't realize that this change is necessary.
This PR also adds name application to all exports. The current main branch only applies names if the export is of type func, but I think it should also apply names for global, table, memory, and tag. Is there any specific reason for only applying names to funcs?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1814,2022-01-26T01:04:09Z,,2022-05-15T05:50:56Z,OPEN,False,1014,281,12,https://github.com/yhdengh,wasm2c: add support for module instancing,1,[],https://github.com/WebAssembly/wabt/pull/1814,https://github.com/yhdengh,1,https://github.com/WebAssembly/wabt/pull/1814,"This PR adds support for module instancing to wasm2c as proposed in #1805. The approach is similar to #1721.

Globals, memories, and tables are moved into a new structure named module_prefix_ + _module_instance_t.
The structure is passed as the first argument of function calls. The embedder is responsible for initializing the structure.
run-spec-wasm2c.py is updated such that main.c generated by the script reflects the changes for module instancing.

(As a result of these changes, it is no longer possible to run wasm2c on different modules independently and later link the outputs together.)
(This PR is sequenced behind #1875.)","This PR adds support for module instancing to wasm2c as proposed in #1805. The approach is similar to #1721.

Globals, memories, and tables are moved into a new structure named module_prefix_ + _module_instance_t.
The structure is passed as the first argument of function calls. The embedder is responsible for initializing the structure.
run-spec-wasm2c.py is updated such that main.c generated by the script reflects the changes for module instancing.

(As a result of these changes, it is no longer possible to run wasm2c on different modules independently and later link the outputs together.)
(This PR is sequenced behind #1875.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1814,2022-01-26T01:04:09Z,,2022-05-15T05:50:56Z,OPEN,False,1014,281,12,https://github.com/yhdengh,wasm2c: add support for module instancing,1,[],https://github.com/WebAssembly/wabt/pull/1814,https://github.com/shravanrn,2,https://github.com/WebAssembly/wabt/pull/1814#issuecomment-1029125232,"This PR adds support for module instancing to wasm2c as proposed in #1805. The approach is similar to #1721.

Globals, memories, and tables are moved into a new structure named module_prefix_ + _module_instance_t.
The structure is passed as the first argument of function calls. The embedder is responsible for initializing the structure.
run-spec-wasm2c.py is updated such that main.c generated by the script reflects the changes for module instancing.

(As a result of these changes, it is no longer possible to run wasm2c on different modules independently and later link the outputs together.)
(This PR is sequenced behind #1875.)","Reviewing! Although its getting a bit late in my local timezone (I am currently traveling), so worst case I'll post an update in the next 12 hours or so",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1814,2022-01-26T01:04:09Z,,2022-05-15T05:50:56Z,OPEN,False,1014,281,12,https://github.com/yhdengh,wasm2c: add support for module instancing,1,[],https://github.com/WebAssembly/wabt/pull/1814,https://github.com/keithw,3,https://github.com/WebAssembly/wabt/pull/1814#issuecomment-1082550783,"This PR adds support for module instancing to wasm2c as proposed in #1805. The approach is similar to #1721.

Globals, memories, and tables are moved into a new structure named module_prefix_ + _module_instance_t.
The structure is passed as the first argument of function calls. The embedder is responsible for initializing the structure.
run-spec-wasm2c.py is updated such that main.c generated by the script reflects the changes for module instancing.

(As a result of these changes, it is no longer possible to run wasm2c on different modules independently and later link the outputs together.)
(This PR is sequenced behind #1875.)","This now passes the current wasm2c tests, including for imports/exports/linking (these are the ""old"" spec tests from before bulk-memory operations and reference-types were merged).
We're still working on implementing bulk-memory operations and reference-types on top of this, which if successful will hopefully have wasm2c passing the current versions of the spec tests, as well as the remaining multi-memory proposal tests that depend on these features. I've been tracking this at #1853 (comment) .",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1814,2022-01-26T01:04:09Z,,2022-05-15T05:50:56Z,OPEN,False,1014,281,12,https://github.com/yhdengh,wasm2c: add support for module instancing,1,[],https://github.com/WebAssembly/wabt/pull/1814,https://github.com/shravanrn,4,https://github.com/WebAssembly/wabt/pull/1814#issuecomment-1088241251,"This PR adds support for module instancing to wasm2c as proposed in #1805. The approach is similar to #1721.

Globals, memories, and tables are moved into a new structure named module_prefix_ + _module_instance_t.
The structure is passed as the first argument of function calls. The embedder is responsible for initializing the structure.
run-spec-wasm2c.py is updated such that main.c generated by the script reflects the changes for module instancing.

(As a result of these changes, it is no longer possible to run wasm2c on different modules independently and later link the outputs together.)
(This PR is sequenced behind #1875.)","TLDR: we can go ahead and land this instancing support when ready. I'll deal with the incompatibilities they may introduce in our fork
@kripken @sbc100 Just wanted to briefly update everyone. I was actually away for the last few weeks hence the delayed response here. But I did play a bit more with rebasing some of these changes on our wasm2c fork. In short it should be possible with some work. That said, my current priority for Mozilla is to rewrite RLBox to add more features, so I suspect I won't be able to upstream some of our custom wasm2c features in our fork for a few more weeks. However, I don't want this to block any other ongoing work here, so feel free to land this instancing support. I am happy however to review this and any other PRs you want me to look at.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1814,2022-01-26T01:04:09Z,,2022-05-15T05:50:56Z,OPEN,False,1014,281,12,https://github.com/yhdengh,wasm2c: add support for module instancing,1,[],https://github.com/WebAssembly/wabt/pull/1814,https://github.com/keithw,5,https://github.com/WebAssembly/wabt/pull/1814#issuecomment-1090918389,"This PR adds support for module instancing to wasm2c as proposed in #1805. The approach is similar to #1721.

Globals, memories, and tables are moved into a new structure named module_prefix_ + _module_instance_t.
The structure is passed as the first argument of function calls. The embedder is responsible for initializing the structure.
run-spec-wasm2c.py is updated such that main.c generated by the script reflects the changes for module instancing.

(As a result of these changes, it is no longer possible to run wasm2c on different modules independently and later link the outputs together.)
(This PR is sequenced behind #1875.)","@shravanrn Thanks, we appreciate this. Of course we'd be grateful for your review. When you do want to upstream the rlbox code, we're happy to help rebase it at the time (if you want our help) and preserve whatever tests are passing. I don't think the two approaches are that different; ours is mostly the same as yours + handling imports/exports/linking, cases that are probably less relevant to the RLBox use-case.
@sbc100 @kripken This is probably ready for another look. @binji gave us a review here (#1877 (review)) that we've since responded to. After this one, the later-stacked PRs are #1877 (bulk memory), #1887 (reference types), and #1888 (tolerating partly invalid modules), after which wasm2c passes all the core spec tests (and all the multi-memory proposal tests) except the SIMD ones.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1814,2022-01-26T01:04:09Z,,2022-05-15T05:50:56Z,OPEN,False,1014,281,12,https://github.com/yhdengh,wasm2c: add support for module instancing,1,[],https://github.com/WebAssembly/wabt/pull/1814,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1814#issuecomment-1099324839,"This PR adds support for module instancing to wasm2c as proposed in #1805. The approach is similar to #1721.

Globals, memories, and tables are moved into a new structure named module_prefix_ + _module_instance_t.
The structure is passed as the first argument of function calls. The embedder is responsible for initializing the structure.
run-spec-wasm2c.py is updated such that main.c generated by the script reflects the changes for module instancing.

(As a result of these changes, it is no longer possible to run wasm2c on different modules independently and later link the outputs together.)
(This PR is sequenced behind #1875.)",Can you rebase now that #1897 and #1896 have landed?  I hope it should make this change much more precise.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1814,2022-01-26T01:04:09Z,,2022-05-15T05:50:56Z,OPEN,False,1014,281,12,https://github.com/yhdengh,wasm2c: add support for module instancing,1,[],https://github.com/WebAssembly/wabt/pull/1814,https://github.com/keithw,7,https://github.com/WebAssembly/wabt/pull/1814#issuecomment-1099711948,"This PR adds support for module instancing to wasm2c as proposed in #1805. The approach is similar to #1721.

Globals, memories, and tables are moved into a new structure named module_prefix_ + _module_instance_t.
The structure is passed as the first argument of function calls. The embedder is responsible for initializing the structure.
run-spec-wasm2c.py is updated such that main.c generated by the script reflects the changes for module instancing.

(As a result of these changes, it is no longer possible to run wasm2c on different modules independently and later link the outputs together.)
(This PR is sequenced behind #1875.)","Can you rebase now that #1897 and #1896 have landed? I hope it should make this change much more precise.

Here you go.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1814,2022-01-26T01:04:09Z,,2022-05-15T05:50:56Z,OPEN,False,1014,281,12,https://github.com/yhdengh,wasm2c: add support for module instancing,1,[],https://github.com/WebAssembly/wabt/pull/1814,https://github.com/shravanrn,8,https://github.com/WebAssembly/wabt/pull/1814#issuecomment-1101622266,"This PR adds support for module instancing to wasm2c as proposed in #1805. The approach is similar to #1721.

Globals, memories, and tables are moved into a new structure named module_prefix_ + _module_instance_t.
The structure is passed as the first argument of function calls. The embedder is responsible for initializing the structure.
run-spec-wasm2c.py is updated such that main.c generated by the script reflects the changes for module instancing.

(As a result of these changes, it is no longer possible to run wasm2c on different modules independently and later link the outputs together.)
(This PR is sequenced behind #1875.)","@shravanrn Thanks, we appreciate this. Of course we'd be grateful for your review. When you do want to upstream the rlbox code, we're happy to help rebase it at the time (if you want our help) and preserve whatever tests are passing. I don't think the two approaches are that different; ours is mostly the same as yours + handling imports/exports/linking, cases that are probably less relevant to the RLBox use-case.

Having a look now. Sorry for the delay",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1817,2022-01-31T13:25:58Z,2022-02-01T19:23:57Z,2022-02-01T19:23:57Z,CLOSED,False,2,2,1,https://github.com/dominictarr,canonicalize positive leb128,1,[],https://github.com/WebAssembly/wabt/pull/1817,https://github.com/dominictarr,1,https://github.com/WebAssembly/wabt/pull/1817,"#1816
I had a look at the code and found a suspicious 0x40.
I don't understand what it's doing with negative ints,
but changing the line about negative leb128 caused wat2wasm to segfault.
just this change fixes the reported bug.
I couldn't get the tests to run on main, so not fully sure about this","#1816
I had a look at the code and found a suspicious 0x40.
I don't understand what it's doing with negative ints,
but changing the line about negative leb128 caused wat2wasm to segfault.
just this change fixes the reported bug.
I couldn't get the tests to run on main, so not fully sure about this",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1818,2022-02-01T20:38:52Z,2022-02-02T20:27:45Z,2022-02-02T20:47:28Z,MERGED,True,369,149,3,https://github.com/mwilliamson,wasm-objdump: Print local names during disassembly,1,[],https://github.com/WebAssembly/wabt/pull/1818,https://github.com/mwilliamson,1,https://github.com/WebAssembly/wabt/pull/1818,"Fixes #1815. Some example output:
module.wasm:	file format wasm 0x1

Code Disassembly:

000027 func[0] <FIRST>:
 000028: 01 7f                      | local[0] type=i32
 00002a: 20 01                      | local.get 1 <local0>
 00002c: 20 00                      | local.get 0 <arg0>
 00002e: 1a                         | drop
 00002f: 1a                         | drop
 000030: 0b                         | end

I haven't written a test for this yet, but I wanted to check that my approach was correct, not least because it's been a while since I've written any C++.
(Unfortunately, this doesn't actually fully solve my use case since I think wasm-ld doesn't preserve local names when linking? I haven't had a chance to investigate this yet, but mention it in case anyone knows off the top of their head.)","Fixes #1815. Some example output:
module.wasm:	file format wasm 0x1

Code Disassembly:

000027 func[0] <FIRST>:
 000028: 01 7f                      | local[0] type=i32
 00002a: 20 01                      | local.get 1 <local0>
 00002c: 20 00                      | local.get 0 <arg0>
 00002e: 1a                         | drop
 00002f: 1a                         | drop
 000030: 0b                         | end

I haven't written a test for this yet, but I wanted to check that my approach was correct, not least because it's been a while since I've written any C++.
(Unfortunately, this doesn't actually fully solve my use case since I think wasm-ld doesn't preserve local names when linking? I haven't had a chance to investigate this yet, but mention it in case anyone knows off the top of their head.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1818,2022-02-01T20:38:52Z,2022-02-02T20:27:45Z,2022-02-02T20:47:28Z,MERGED,True,369,149,3,https://github.com/mwilliamson,wasm-objdump: Print local names during disassembly,1,[],https://github.com/WebAssembly/wabt/pull/1818,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1818#issuecomment-1027393027,"Fixes #1815. Some example output:
module.wasm:	file format wasm 0x1

Code Disassembly:

000027 func[0] <FIRST>:
 000028: 01 7f                      | local[0] type=i32
 00002a: 20 01                      | local.get 1 <local0>
 00002c: 20 00                      | local.get 0 <arg0>
 00002e: 1a                         | drop
 00002f: 1a                         | drop
 000030: 0b                         | end

I haven't written a test for this yet, but I wanted to check that my approach was correct, not least because it's been a while since I've written any C++.
(Unfortunately, this doesn't actually fully solve my use case since I think wasm-ld doesn't preserve local names when linking? I haven't had a chance to investigate this yet, but mention it in case anyone knows off the top of their head.)","Regarding wasm-ld, its very unlikely llvm to wasm-ld will be able to give useful names to locals.  At least not ones that comes from C++ or llvm-ir, because the wasm-level locals don't normally correspond any language level construct.
The optimizers at various levels might choose to store many different things in given local over the course of the function, so even for things that fit in locals its probably not going to be useful to mapping higher level language names.
It still useful for hand-written stuff though.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1818,2022-02-01T20:38:52Z,2022-02-02T20:27:45Z,2022-02-02T20:47:28Z,MERGED,True,369,149,3,https://github.com/mwilliamson,wasm-objdump: Print local names during disassembly,1,[],https://github.com/WebAssembly/wabt/pull/1818,https://github.com/mwilliamson,3,https://github.com/WebAssembly/wabt/pull/1818#issuecomment-1027398377,"Fixes #1815. Some example output:
module.wasm:	file format wasm 0x1

Code Disassembly:

000027 func[0] <FIRST>:
 000028: 01 7f                      | local[0] type=i32
 00002a: 20 01                      | local.get 1 <local0>
 00002c: 20 00                      | local.get 0 <arg0>
 00002e: 1a                         | drop
 00002f: 1a                         | drop
 000030: 0b                         | end

I haven't written a test for this yet, but I wanted to check that my approach was correct, not least because it's been a while since I've written any C++.
(Unfortunately, this doesn't actually fully solve my use case since I think wasm-ld doesn't preserve local names when linking? I haven't had a chance to investigate this yet, but mention it in case anyone knows off the top of their head.)","I'm actually surprised none of the test output changed. Did you run ./test/run-tests.sh -r?

I thought I did, I could easily be mistaken though.

I think the test to update would be test/dump/extended-names.txt BTW.

Great, I'll take a look. Thanks!

Regarding wasm-ld, its very unlikely llvm to wasm-ld will be able to give useful names to locals. At least not ones that comes from C++ or llvm-ir, because the wasm-level locals don't normally correspond any language level construct.

Just to explain my use case: I've written my own toy compiler than outputs Wasm object files, which includes local names, so having llvm-ld preserve those would be helpful for debugging.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1818,2022-02-01T20:38:52Z,2022-02-02T20:27:45Z,2022-02-02T20:47:28Z,MERGED,True,369,149,3,https://github.com/mwilliamson,wasm-objdump: Print local names during disassembly,1,[],https://github.com/WebAssembly/wabt/pull/1818,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1818#issuecomment-1027406390,"Fixes #1815. Some example output:
module.wasm:	file format wasm 0x1

Code Disassembly:

000027 func[0] <FIRST>:
 000028: 01 7f                      | local[0] type=i32
 00002a: 20 01                      | local.get 1 <local0>
 00002c: 20 00                      | local.get 0 <arg0>
 00002e: 1a                         | drop
 00002f: 1a                         | drop
 000030: 0b                         | end

I haven't written a test for this yet, but I wanted to check that my approach was correct, not least because it's been a while since I've written any C++.
(Unfortunately, this doesn't actually fully solve my use case since I think wasm-ld doesn't preserve local names when linking? I haven't had a chance to investigate this yet, but mention it in case anyone knows off the top of their head.)","Just to explain my use case: I've written my own toy compiler than outputs Wasm object files, which includes local names, so having llvm-ld preserve those would be helpful for debugging.

Oh sure, that sounds do-able.  But yes, probably needs a wasm-ld patch to make it work.  Would be cool if we could extant that to work with .s format in llvm.. but that might be little more work.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1818,2022-02-01T20:38:52Z,2022-02-02T20:27:45Z,2022-02-02T20:47:28Z,MERGED,True,369,149,3,https://github.com/mwilliamson,wasm-objdump: Print local names during disassembly,1,[],https://github.com/WebAssembly/wabt/pull/1818,https://github.com/mwilliamson,5,https://github.com/WebAssembly/wabt/pull/1818#issuecomment-1028298381,"Fixes #1815. Some example output:
module.wasm:	file format wasm 0x1

Code Disassembly:

000027 func[0] <FIRST>:
 000028: 01 7f                      | local[0] type=i32
 00002a: 20 01                      | local.get 1 <local0>
 00002c: 20 00                      | local.get 0 <arg0>
 00002e: 1a                         | drop
 00002f: 1a                         | drop
 000030: 0b                         | end

I haven't written a test for this yet, but I wanted to check that my approach was correct, not least because it's been a while since I've written any C++.
(Unfortunately, this doesn't actually fully solve my use case since I think wasm-ld doesn't preserve local names when linking? I haven't had a chance to investigate this yet, but mention it in case anyone knows off the top of their head.)","I've had a go at updating test/dump/extended-names.txt, so I think this is ready to go, but happy to change things as needed. Thanks for the help so far.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1819,2022-02-01T22:38:55Z,2022-02-01T23:41:02Z,2022-02-01T23:45:19Z,MERGED,True,21,11,5,https://github.com/mwilliamson,objdump: Consider params when printing local decl index,1,[],https://github.com/WebAssembly/wabt/pull/1819,https://github.com/mwilliamson,1,https://github.com/WebAssembly/wabt/pull/1819,"Currently, objdump -d will start at index 0 when printing local declarations e.g. local[0] type=i64, regardless of whether the function has any params. To me, it feels like starting the index at the param count to match the index used in opcodes and elsewhere would be less confusing.","Currently, objdump -d will start at index 0 when printing local declarations e.g. local[0] type=i64, regardless of whether the function has any params. To me, it feels like starting the index at the param count to match the index used in opcodes and elsewhere would be less confusing.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1819,2022-02-01T22:38:55Z,2022-02-01T23:41:02Z,2022-02-01T23:45:19Z,MERGED,True,21,11,5,https://github.com/mwilliamson,objdump: Consider params when printing local decl index,1,[],https://github.com/WebAssembly/wabt/pull/1819,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1819#issuecomment-1027388237,"Currently, objdump -d will start at index 0 when printing local declarations e.g. local[0] type=i64, regardless of whether the function has any params. To me, it feels like starting the index at the param count to match the index used in opcodes and elsewhere would be less confusing.",Yup that makes sense to me.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1819,2022-02-01T22:38:55Z,2022-02-01T23:41:02Z,2022-02-01T23:45:19Z,MERGED,True,21,11,5,https://github.com/mwilliamson,objdump: Consider params when printing local decl index,1,[],https://github.com/WebAssembly/wabt/pull/1819,https://github.com/mwilliamson,3,https://github.com/WebAssembly/wabt/pull/1819#issuecomment-1027398927,"Currently, objdump -d will start at index 0 when printing local declarations e.g. local[0] type=i64, regardless of whether the function has any params. To me, it feels like starting the index at the param count to match the index used in opcodes and elsewhere would be less confusing.","Great, thanks!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1821,2022-02-08T09:03:49Z,2022-03-05T01:22:59Z,2022-03-06T17:19:08Z,CLOSED,False,1,1,1,https://github.com/rathann,fix test/wasm2c/spec/names.txt with python 3.6,1,[],https://github.com/WebAssembly/wabt/pull/1821,https://github.com/rathann,1,https://github.com/WebAssembly/wabt/pull/1821,"On RHEL/CentOS 7, the system python3 is 3.6. Before python 3.7.0 (see
3.7.0 alpha 1 changelog, issue 28180 and PEP 538), the default text
encoding was ascii, which fails on Unicode characters when deserializing
a json file in json.load():
- test/wasm2c/spec/names.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,10 @@
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.24/test/run-spec-wasm2c.py"", line 437, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.24/test/run-spec-wasm2c.py"", line 394, in main
  +    spec_json = json.load(json_file)
  +  File ""/usr/lib64/python3.6/json/__init__.py"", line 296, in load
  +    return loads(fp.read(),
  +  File ""/usr/lib64/python3.6/encodings/ascii.py"", line 26, in decode
  +    return codecs.ascii_decode(input, self.errors)[0]
  +UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 2862: ordinal not in range(128)
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1,3 +0,0 @@
  -spectest.print_i32(42)
  -spectest.print_i32(123)
  -482/482 tests passed.

Fixes #1704.","On RHEL/CentOS 7, the system python3 is 3.6. Before python 3.7.0 (see
3.7.0 alpha 1 changelog, issue 28180 and PEP 538), the default text
encoding was ascii, which fails on Unicode characters when deserializing
a json file in json.load():
- test/wasm2c/spec/names.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,10 @@
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.24/test/run-spec-wasm2c.py"", line 437, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.24/test/run-spec-wasm2c.py"", line 394, in main
  +    spec_json = json.load(json_file)
  +  File ""/usr/lib64/python3.6/json/__init__.py"", line 296, in load
  +    return loads(fp.read(),
  +  File ""/usr/lib64/python3.6/encodings/ascii.py"", line 26, in decode
  +    return codecs.ascii_decode(input, self.errors)[0]
  +UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 2862: ordinal not in range(128)
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1,3 +0,0 @@
  -spectest.print_i32(42)
  -spectest.print_i32(123)
  -482/482 tests passed.

Fixes #1704.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1821,2022-02-08T09:03:49Z,2022-03-05T01:22:59Z,2022-03-06T17:19:08Z,CLOSED,False,1,1,1,https://github.com/rathann,fix test/wasm2c/spec/names.txt with python 3.6,1,[],https://github.com/WebAssembly/wabt/pull/1821,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1821#issuecomment-1059639875,"On RHEL/CentOS 7, the system python3 is 3.6. Before python 3.7.0 (see
3.7.0 alpha 1 changelog, issue 28180 and PEP 538), the default text
encoding was ascii, which fails on Unicode characters when deserializing
a json file in json.load():
- test/wasm2c/spec/names.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,10 @@
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.24/test/run-spec-wasm2c.py"", line 437, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.24/test/run-spec-wasm2c.py"", line 394, in main
  +    spec_json = json.load(json_file)
  +  File ""/usr/lib64/python3.6/json/__init__.py"", line 296, in load
  +    return loads(fp.read(),
  +  File ""/usr/lib64/python3.6/encodings/ascii.py"", line 26, in decode
  +    return codecs.ascii_decode(input, self.errors)[0]
  +UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 2862: ordinal not in range(128)
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1,3 +0,0 @@
  -spectest.print_i32(42)
  -spectest.print_i32(123)
  -482/482 tests passed.

Fixes #1704.",This change ended up landing as part of #1847.  Apologizes for not landing it directly.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1821,2022-02-08T09:03:49Z,2022-03-05T01:22:59Z,2022-03-06T17:19:08Z,CLOSED,False,1,1,1,https://github.com/rathann,fix test/wasm2c/spec/names.txt with python 3.6,1,[],https://github.com/WebAssembly/wabt/pull/1821,https://github.com/rathann,3,https://github.com/WebAssembly/wabt/pull/1821#issuecomment-1060002409,"On RHEL/CentOS 7, the system python3 is 3.6. Before python 3.7.0 (see
3.7.0 alpha 1 changelog, issue 28180 and PEP 538), the default text
encoding was ascii, which fails on Unicode characters when deserializing
a json file in json.load():
- test/wasm2c/spec/names.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,10 @@
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.24/test/run-spec-wasm2c.py"", line 437, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.24/test/run-spec-wasm2c.py"", line 394, in main
  +    spec_json = json.load(json_file)
  +  File ""/usr/lib64/python3.6/json/__init__.py"", line 296, in load
  +    return loads(fp.read(),
  +  File ""/usr/lib64/python3.6/encodings/ascii.py"", line 26, in decode
  +    return codecs.ascii_decode(input, self.errors)[0]
  +UnicodeDecodeError: 'ascii' codec can't decode byte 0xef in position 2862: ordinal not in range(128)
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1,3 +0,0 @@
  -spectest.print_i32(42)
  -spectest.print_i32(123)
  -482/482 tests passed.

Fixes #1704.","No worries, thanks for taking the fix.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1823,2022-02-09T22:48:49Z,2022-02-10T00:40:24Z,2022-02-10T00:40:25Z,MERGED,True,10,3,2,https://github.com/sbc100,Fix size of segment in initialization error reporting,1,[],https://github.com/WebAssembly/wabt/pull/1823,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1823,"When data of element segment init fails we were reporting the size, but
we were unconditionally calling Drop for active segments which meant
they always get reported as zero sized in the error message.
This mismatch was only showing up with bulk memory enabled (since
without this we do a two phase initialization).  The only test we have
for this error message was using --disable-bulk-memory, but not for
any good reason (most likely because of this very bug).
Also restore the comment about why we sometimes need to do a two phase
initialization for element and data segments.  This comment was lost in
PR #1330 but seem important since I don't think we have any tests for
this older behaviour.","When data of element segment init fails we were reporting the size, but
we were unconditionally calling Drop for active segments which meant
they always get reported as zero sized in the error message.
This mismatch was only showing up with bulk memory enabled (since
without this we do a two phase initialization).  The only test we have
for this error message was using --disable-bulk-memory, but not for
any good reason (most likely because of this very bug).
Also restore the comment about why we sometimes need to do a two phase
initialization for element and data segments.  This comment was lost in
PR #1330 but seem important since I don't think we have any tests for
this older behaviour.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1824,2022-02-09T23:10:07Z,2022-02-15T16:49:04Z,2022-02-15T16:49:05Z,MERGED,True,373,148,20,https://github.com/sbc100,Initial implementation of extended-const proposal.,1,[],https://github.com/WebAssembly/wabt/pull/1824,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1824,"The primary changes here are to the interpreter and how it handles
initializer expressions.  With this change we model these are normal
function that we run during module initialization.
I imagine we could optimize this further by creating one long function
and encoding the global.set/memory.init/table.init into the
function itself, but this change seems like a good first step to make
the current tests pass.","The primary changes here are to the interpreter and how it handles
initializer expressions.  With this change we model these are normal
function that we run during module initialization.
I imagine we could optimize this further by creating one long function
and encoding the global.set/memory.init/table.init into the
function itself, but this change seems like a good first step to make
the current tests pass.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1825,2022-02-10T16:18:07Z,2022-02-11T17:41:49Z,2022-02-11T17:41:51Z,MERGED,True,6,3,1,https://github.com/sbc100,Move to C++17,1,[],https://github.com/WebAssembly/wabt/pull/1825,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1825,Fixes: #1811,Fixes: #1811,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1825,2022-02-10T16:18:07Z,2022-02-11T17:41:49Z,2022-02-11T17:41:51Z,MERGED,True,6,3,1,https://github.com/sbc100,Move to C++17,1,[],https://github.com/WebAssembly/wabt/pull/1825,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1825#issuecomment-1035117155,Fixes: #1811,The first actual change to use C++17 is the conversion to standard string_view: #1826,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1825,2022-02-10T16:18:07Z,2022-02-11T17:41:49Z,2022-02-11T17:41:51Z,MERGED,True,6,3,1,https://github.com/sbc100,Move to C++17,1,[],https://github.com/WebAssembly/wabt/pull/1825,https://github.com/dschuff,3,https://github.com/WebAssembly/wabt/pull/1825#issuecomment-1036396294,Fixes: #1811,"Yeah, I'm less concerned about this than Binaryen TBH because I expect there are fewer users, and those users are likely to be toolchain or runtime authors who are using this for their own local use (as opposed to embedding it in a toolchain that they ship to developers), and therefore issues like running on very old macOS will be not as big of a deal.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1826,2022-02-10T16:18:53Z,2022-02-12T00:50:54Z,2022-02-12T00:50:55Z,MERGED,True,823,1747,58,https://github.com/sbc100,Use C++17 string_view,1,[],https://github.com/WebAssembly/wabt/pull/1826,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1826,"Now that we have C++17 we don't need our own string_view class anymore.
Depends on #1825","Now that we have C++17 we don't need our own string_view class anymore.
Depends on #1825",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1827,2022-02-10T17:06:11Z,2022-02-11T18:19:44Z,2022-02-11T18:19:45Z,MERGED,True,19,26,5,https://github.com/sbc100,Use C++17 pair de-structuring for loops,1,[],https://github.com/WebAssembly/wabt/pull/1827,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1827,See #1825,See #1825,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1828,2022-02-12T07:14:38Z,,2022-04-18T17:26:21Z,OPEN,False,83,96,1,https://github.com/dbezhetskov,replace old style union in initializing expression representation with std::variant,1,[],https://github.com/WebAssembly/wabt/pull/1828,https://github.com/dbezhetskov,1,https://github.com/WebAssembly/wabt/pull/1828,"Hi, this is just small cleanup.
I've replaced union with std::variant to free Type type because now it should be always POD as a member of union.
Suddenly, after refactoring I revealed that FuncRef and NullRef cases and Type actually not used in our code so I don't move them into new version of InitExpr.","Hi, this is just small cleanup.
I've replaced union with std::variant to free Type type because now it should be always POD as a member of union.
Suddenly, after refactoring I revealed that FuncRef and NullRef cases and Type actually not used in our code so I don't move them into new version of InitExpr.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1828,2022-02-12T07:14:38Z,,2022-04-18T17:26:21Z,OPEN,False,83,96,1,https://github.com/dbezhetskov,replace old style union in initializing expression representation with std::variant,1,[],https://github.com/WebAssembly/wabt/pull/1828,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1828#issuecomment-1088197117,"Hi, this is just small cleanup.
I've replaced union with std::variant to free Type type because now it should be always POD as a member of union.
Suddenly, after refactoring I revealed that FuncRef and NullRef cases and Type actually not used in our code so I don't move them into new version of InitExpr.","Are there any remaining issues with landing this? It would be helpful for completing the implementation of typed funcrefs and also GC support, as it would allow including a Var or similar data in the type.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1828,2022-02-12T07:14:38Z,,2022-04-18T17:26:21Z,OPEN,False,83,96,1,https://github.com/dbezhetskov,replace old style union in initializing expression representation with std::variant,1,[],https://github.com/WebAssembly/wabt/pull/1828,https://github.com/takikawa,3,https://github.com/WebAssembly/wabt/pull/1828#issuecomment-1089156385,"Hi, this is just small cleanup.
I've replaced union with std::variant to free Type type because now it should be always POD as a member of union.
Suddenly, after refactoring I revealed that FuncRef and NullRef cases and Type actually not used in our code so I don't move them into new version of InitExpr.","Are there any remaining issues with landing this? It would be helpful for completing the implementation of typed funcrefs and also GC support, as it would allow including a Var or similar data in the type.

It looks like this actually has to be rebased to be mergeable now, since the relevant file has been updated recently. I can work on rebasing this",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1828,2022-02-12T07:14:38Z,,2022-04-18T17:26:21Z,OPEN,False,83,96,1,https://github.com/dbezhetskov,replace old style union in initializing expression representation with std::variant,1,[],https://github.com/WebAssembly/wabt/pull/1828,https://github.com/takikawa,4,https://github.com/WebAssembly/wabt/pull/1828#issuecomment-1089192821,"Hi, this is just small cleanup.
I've replaced union with std::variant to free Type type because now it should be always POD as a member of union.
Suddenly, after refactoring I revealed that FuncRef and NullRef cases and Type actually not used in our code so I don't move them into new version of InitExpr.","I've rebased this now on this branch takikawa@9048277
@dbezhetskov could you update your PR branch with this commit and re-push? Thanks.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1828,2022-02-12T07:14:38Z,,2022-04-18T17:26:21Z,OPEN,False,83,96,1,https://github.com/dbezhetskov,replace old style union in initializing expression representation with std::variant,1,[],https://github.com/WebAssembly/wabt/pull/1828,https://github.com/dbezhetskov,5,https://github.com/WebAssembly/wabt/pull/1828#issuecomment-1091131856,"Hi, this is just small cleanup.
I've replaced union with std::variant to free Type type because now it should be always POD as a member of union.
Suddenly, after refactoring I revealed that FuncRef and NullRef cases and Type actually not used in our code so I don't move them into new version of InitExpr.","I've updated the branch, thanks @takikawa",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1828,2022-02-12T07:14:38Z,,2022-04-18T17:26:21Z,OPEN,False,83,96,1,https://github.com/dbezhetskov,replace old style union in initializing expression representation with std::variant,1,[],https://github.com/WebAssembly/wabt/pull/1828,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1828#issuecomment-1101587141,"Hi, this is just small cleanup.
I've replaced union with std::variant to free Type type because now it should be always POD as a member of union.
Suddenly, after refactoring I revealed that FuncRef and NullRef cases and Type actually not used in our code so I don't move them into new version of InitExpr.","This seems like a smart change for the reasons @takikawa mentioned. I personally don't really like using std::visit and overloaded very much since it is a little complex, and would prefer using a switch/index instead. But it's mostly just a personal opinion, and I see that using overloaded does provide better type safety.

I think I agree.  I prefer the old switch style.  Especially if that allows use to avoid adding all those new struct types.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1829,2022-02-12T21:47:34Z,2022-02-17T15:08:15Z,2022-02-17T17:57:52Z,MERGED,True,29,8,3,https://github.com/keithw,wasm2c: bounds-check active data loads,1,[],https://github.com/WebAssembly/wabt/pull/1829,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1829,"The bulk-memory proposal changed OOB access (when loading an active data segment) from a validation failure to an initialization-time trap, but wasm2c wasn't checking OOB access in LOAD_DATA().
When WASM_RT_MEMCHECK_SIGNAL_HANDLER is unset, this could produce memory corruption. When WASM_RT_MEMCHECK_SIGNAL_HANDLER is set, this led to failure in the new “data” tests that verify that modules with zero-length active data segments are uninstantiable if offset > mem.size.
This commit adds an unconditional bounds-check and restores the test/wasm2c/spec/data.txt test (one of the failing tests tracked at #1737).
(It's possible to avoid the unconditional bounds-check if we made CWriter::WriteDataInitializers more complicated to special-case the situation of a zero-length data segment. Then non-zero-length data segments could be loaded normally with MEMCHECK (which is a nop on platforms using WASM_RT_MEMCHECK_SIGNAL_HANDLER), and only zero-length segments would require the unconditional bounds-check (RANGE_CHECK). But given that we're talking about something that happens only once per segment on module instantiation, that extra complexity didn't seem worth it.)","The bulk-memory proposal changed OOB access (when loading an active data segment) from a validation failure to an initialization-time trap, but wasm2c wasn't checking OOB access in LOAD_DATA().
When WASM_RT_MEMCHECK_SIGNAL_HANDLER is unset, this could produce memory corruption. When WASM_RT_MEMCHECK_SIGNAL_HANDLER is set, this led to failure in the new “data” tests that verify that modules with zero-length active data segments are uninstantiable if offset > mem.size.
This commit adds an unconditional bounds-check and restores the test/wasm2c/spec/data.txt test (one of the failing tests tracked at #1737).
(It's possible to avoid the unconditional bounds-check if we made CWriter::WriteDataInitializers more complicated to special-case the situation of a zero-length data segment. Then non-zero-length data segments could be loaded normally with MEMCHECK (which is a nop on platforms using WASM_RT_MEMCHECK_SIGNAL_HANDLER), and only zero-length segments would require the unconditional bounds-check (RANGE_CHECK). But given that we're talking about something that happens only once per segment on module instantiation, that extra complexity didn't seem worth it.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1829,2022-02-12T21:47:34Z,2022-02-17T15:08:15Z,2022-02-17T17:57:52Z,MERGED,True,29,8,3,https://github.com/keithw,wasm2c: bounds-check active data loads,1,[],https://github.com/WebAssembly/wabt/pull/1829,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1829#issuecomment-1043037558,"The bulk-memory proposal changed OOB access (when loading an active data segment) from a validation failure to an initialization-time trap, but wasm2c wasn't checking OOB access in LOAD_DATA().
When WASM_RT_MEMCHECK_SIGNAL_HANDLER is unset, this could produce memory corruption. When WASM_RT_MEMCHECK_SIGNAL_HANDLER is set, this led to failure in the new “data” tests that verify that modules with zero-length active data segments are uninstantiable if offset > mem.size.
This commit adds an unconditional bounds-check and restores the test/wasm2c/spec/data.txt test (one of the failing tests tracked at #1737).
(It's possible to avoid the unconditional bounds-check if we made CWriter::WriteDataInitializers more complicated to special-case the situation of a zero-length data segment. Then non-zero-length data segments could be loaded normally with MEMCHECK (which is a nop on platforms using WASM_RT_MEMCHECK_SIGNAL_HANDLER), and only zero-length segments would require the unconditional bounds-check (RANGE_CHECK). But given that we're talking about something that happens only once per segment on module instantiation, that extra complexity didn't seem worth it.)",Thanks for working on this.   Good to see some of those tests being re-enabled.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1830,2022-02-14T08:03:39Z,2022-02-18T18:18:36Z,2022-02-18T18:25:23Z,MERGED,True,72,19,3,https://github.com/zherczeg,Improve Garbage Collection algorithm,1,[],https://github.com/WebAssembly/wabt/pull/1830,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1830,"The algorithm is made partially recursive, and requires only a single pointer in the Store object.","The algorithm is made partially recursive, and requires only a single pointer in the Store object.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1830,2022-02-14T08:03:39Z,2022-02-18T18:18:36Z,2022-02-18T18:25:23Z,MERGED,True,72,19,3,https://github.com/zherczeg,Improve Garbage Collection algorithm,1,[],https://github.com/WebAssembly/wabt/pull/1830,https://github.com/zherczeg,2,https://github.com/WebAssembly/wabt/pull/1830#issuecomment-1044910914,"The algorithm is made partially recursive, and requires only a single pointer in the Store object.",Please let me know if any more changes are needed. Thank you!,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1831,2022-02-16T17:12:52Z,2022-02-16T19:45:35Z,2022-02-16T19:45:36Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.27,1,[],https://github.com/WebAssembly/wabt/pull/1831,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1831,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1832,2022-02-16T22:28:59Z,2022-02-16T23:10:14Z,2022-02-16T23:10:56Z,MERGED,True,1,0,1,https://github.com/sbc100,Add missing <string> include to string-util.h,1,[],https://github.com/WebAssembly/wabt/pull/1832,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1832,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1832,2022-02-16T22:28:59Z,2022-02-16T23:10:14Z,2022-02-16T23:10:56Z,MERGED,True,1,0,1,https://github.com/sbc100,Add missing <string> include to string-util.h,1,[],https://github.com/WebAssembly/wabt/pull/1832,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/1832#issuecomment-1042397701,,LGTM,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/shravanrn,1,https://github.com/WebAssembly/wabt/pull/1833,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)",True,"{'HOORAY': ['https://github.com/binji'], 'HEART': ['https://github.com/binji'], 'THUMBS_UP': ['https://github.com/binji'], 'EYES': ['https://github.com/binji']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/shravanrn,2,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1042606228,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","Rebased PR for updates to wasm2c to support library sandboxing (fyi @deian)
@kripken @sbc100 Here is the rebased changes. I think in our discussion last time, we tried to see if we could separate the commits. I think this is proving too complicated/too time consuming. I think we are probably better landing this as a commit and continuing to fix or tweak the design here as needed. If possible could we continue the PR we started in #1721
I believe this should also proving the per-instance support being looked at in #1814
I have made sure the fac example has also been updated, but I am less clear on how we need to update any wasm2c specific unit tests. Please let me know what I need to do here, and I can update this PR as needed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/kripken,3,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1043628835,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","I'm interested to hear what others think, but I am worried about landing all of this together. I thought it could be a reasonable decision last year, but that was when no other code was landing at all, so I saw it as a ""reboot"" of a project with no users. We now know there are users, and in fact we have wasm2c PRs coming in and landing as we speak.
What changed since this comment where the plan was to split things up? The back-and-forth is confusing me.
But with all that said, if everyone else is on board with a single large PR, then I could be ok with it. cc'ing people for feedback: @yhdengh @keithw @sbc100",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/shravanrn,4,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1043661254,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","What changed since #1721 (comment) where the plan was to split things up? The back-and-forth is confusing me.

The honest answer is that such a split up requires a lot of dev cycles which are hard to come by at the moment. In fact, the reason for the delay in the prior PR is that the work to split this up kept getting pushed in favor of more feature work, bug fixes etc. which is something I fear may happen again if we choose to attempt to split this up. If everyone is comfortable, my suggestion is that we look at a way to include this as one PR as this would greatly simplify the development effort. For instance, upcoming feature work (we are looking at SIMD and some more debugging functionality) can be done directly against the wabt repo rather than on our fork.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/yhdengh,5,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1046166920,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","Thanks for looping us in. We visited @shravanrn and @deian yesterday and had a chance to talk this over in person. From our point of view, we like some of the features, but it would be nice if this pull request can be done in a more incremental/understandable way. For module instancing specifically, we'd like host functions to access the whole instance, including all memories and globals, and each instance can have different imports, which is how we ended up with the design #1814 . Happy to discuss in more detail.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/kripken,6,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1054854839,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","@yhdengh

Thanks for looping us in. We visited @shravanrn and @deian yesterday and had a chance to talk this over in person. From our point of view, we like some of the features, but it would be nice if this pull request can be done in a more incremental/understandable way. For module instancing specifically, we'd like host functions to access the whole instance, including all memories and globals, and each instance can have different imports, which is how we ended up with the design #1814

Is there a difference in terms of how host functions work compared to #1814 ? I believe both add an instance parameter to each function, but it is a little hard to see in this large PR to compare. Perhaps attaching some sample output code would help @shravanrn ? (we have sample code for the other PR already) But this may be something you have already discussed offline meanwhile.
I agree making the PR more understandable is important. Just one possible idea, perhaps annotated C output could help, like just mentioned, maybe with annotations/explanations? Just a thought.
Overall I am hoping that this PR is compatible with your goals @yhdengh , or that we can make it so. After the discussions so far I think it is more work to split this PR up than is practical for @shravanrn atm, and landing it will be of substantial benefit for the largest user of the code (Firefox, who are shipping using a fork right now, and who could stop using a fork). So while I definitely agree than smaller PRs would be better, I support landing it as one PR. But we do need to make sure that doing so will not cause problems or limit any of the use cases people have right now (like multi-memory).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/keithw,7,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1055804310,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","I think from our perspective (the Stanford group working on this project, i.e. me, @yhdengh, @angelamontemayor), we love Firefox, and we greatly respect our UCSD colleagues and enjoyed meeting with them, but we don't see a route forward here that doesn't involve somebody doing a bunch of work.
Our sense is that if you want to pass all the spec tests while providing the ability to instantiate the same WebAssembly module multiple times (allowing each instance to have its own imports and exports), the approach ultimately will end up spiritually resembling the one we took in #1814 . We don't doubt that the code in this PR works great for the Firefox sandboxing use case, but based on our own experience, we think it will take some substantial code and API changes for it to pass the spec tests, especially the ones that test imports and exports.
E.g., the code in this PR gives all instances the same type name. We suspect this will probably need to change in order to pass the tests that depend on the ability to export from one module and import into another. This code also puts imports and exports in the global scope, which isn't something the spec tests prevent, but it's also something that needs to be changed if you want the host to be able to keep multiple instances of a module around and let each instance have its own imports and exports.
There's some other stuff here that we also don't love (we really don't like hardcoding a bunch of state for a particular WASI implementation inside the instance structure -- we don't like tying wasm2c to wasi_snapshot_preview1, much less a particular implementation of wasi_snapshot_preview1), but the big thing is that, at least in our view, this code is going to have to change in some semi-fundamental ways before it can pass the testsuite, as opposed to supporting the particular sandboxing use-case, and it's hard to concretely talk about the differences when the PR here has to be considered provisional in that sense. I realize our UCSD colleagues don't necessarily share that view, but to know for sure, somebody's going to have to do the work of making the tests pass so we can see.
Here's something maybe we can contribute: we can try to rebase the #1833 PR on top of our module-instancing approach in #1814, in a way that still compiles (and if UCSD/Mozilla has tests for this code that pass now, we can keep those passing). That wouldn't prove that all of #1833 is mergeable and can pass the spec tests, but it would at least break it up and demonstrate that this code can be built on top of a ""test-passing"" approach to module-instancing without harming anything.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1055981853,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","Regarding wasi support.. we already include third_party/uvwasi as a submodule which can be used as a wasi implementation.   I would hope that we would no need another one.    I also agree that it would be good is including wasi was a core part of wasm2c, but something that we can opt into.   We already have WITH_WASI config option which enables wasi in the interpreter, perhaps that could also be used to optionally enable WASI in wasm2c?
@keithw, what you say about instancing makes sense, and I think spec conformance should certainly be our goal (at least by default).   I also like you idea of trying to rebase this change on top of yours.   We really should make this PR pass all the test first though, so we can confirm that the rebase was successful.   Hopefully we can get this PR  passing all tests by the end of the week.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/kripken,9,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1057204324,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","@keithw Thanks for offering to do that rebase! I think that would be very useful to help decide on the path forward here.
Overall, I think that getting all tests passing here + at least some amount of testing of any new features added would be a hard requirement for landing this. I had not considered that it might take nontrivial work to get to that point, so that would be good to estimate. If it looks like that can't be done in a reasonable amount of time, then perhaps this PR can wait until there are more resources available to help out. If such a delay is a concern for the Firefox people then perhaps we should discuss with them directly (@shravanrn perhaps you can cc them here?).
If we are considering such a delay then I think it might be a reasonable path forward to land #1814 meanwhile - instancing by itself is quite useful and the approach there seems right to me.
But again, this would all depend on the state of testing here from my perspective. @sbc100 sounds like you are more optimistic?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/binji,10,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1057235802,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","I just want to add that although I'm not working on wabt for my job anymore, I'd like to help here where I can (e.g. reviewing some of @sbc100's PRs). My latency won't be great though since I have to do it off work hours.",True,"{'THUMBS_UP': ['https://github.com/shravanrn'], 'HEART': ['https://github.com/shravanrn']}"
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/shravanrn,11,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1058356386,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","Overall, I think that getting all tests passing here

@kripken Yup, I think the plan is to for me to work with Sam to get the testing story figured out. I think we will have a better idea in a day or two.

shravanrn perhaps you can cc them (Firefox people) here?.

I have shared this thread with the folks at Mozilla. I will let them weigh in to give their thoughts. I believe the general thinking is that upstreaming would be good way to go forward",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/sbc100,12,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1059608450,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","I met with @shravanrn today and proposed a way forward that allows for more flexibility around how we land this change.  The plan is to create a medium term branch upstream here in the wabt repo (I already created it actually: https://github.com/WebAssembly/wabt/tree/rlbox).  This branch contains the exact code the FF is using today.   The next commit on that branch will be the contents of this ""rebase/merge"" PR.. followed by changes that get all the tests passing on that branch.
In the mean time I'm planning on cherry-picking/integrating parts of the branch over onto main.  For example, I think we can land the win32 really quickly (I have a WIP PR here: #1843).
Changes from main will continue to be merged in the rlbox branch up until the point that all changes have been integrated and the branch is not longer needed.   FF can pull new revisions from the rlbox branch over time and we will try to add more tests to wabt to ensure we don't regress the FF use case.   The exact nature of these new tests is still TBD.
The upshot is that I think this PR can be closed for now.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/sbc100,13,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1059998352,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","@keithw, your offer to rebase/unify your instancing work with this PR would be be much appreciated, but not that we now have the rlbox branch on which you can work.
IIUC @shravanrn is going to take care of updating the rlbox branch to match current contents of the this PR (unless you want me to do that @shravanrn?)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/sbc100,14,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1060000085,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","Next steps:

Update rlbox branch to match the contents of this PR
Close this PR
Have firefox start working off of a pinned revision from rlbox branch
Work on rlbox branch to get all tests passing and also continue to submit merge PRs to keep it up-to-date with main",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/keithw,15,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1061528053,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","@keithw, your offer to rebase/unify your instancing work with this PR would be be much appreciated, but not that we now have the rlbox branch on which you can work.

Acked. @shravanrn, what would be most helpful here -- do you want us to wait until the wasm2c tests are passing and then we'll attempt a rebase that preserves that, or if not, do you have a test that demonstrates intended/successful use of the RLBox API that we can make sure to keep passing post-rebase?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/sbc100,16,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1062002776,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","@keithw, your offer to rebase/unify your instancing work with this PR would be be much appreciated, but not that we now have the rlbox branch on which you can work.

Acked. @shravanrn, what would be most helpful here -- do you want us to wait until the wasm2c tests are passing and then we'll attempt a rebase that preserves that, or if not, do you have a test that demonstrates intended/successful use of the RLBox API that we can make sure to keep passing post-rebase?

I think it would be good to get all tests passing on the rlbox branch, and have it be completely up-to-date with the current main branch before trying to do any integration of the two instancing approaches.
I like the PR that @keithw just posted (#1853) that increases wasm2c test coverage.. once that lands we can have move confidence while iterating.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/shravanrn,17,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1063148047,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","Sorry for the delay here. Responses below

what would be most helpful here -- do you want us to wait until the wasm2c tests are passing and then we'll attempt a rebase that preserves that.

So i did a quick test fixing session last weekend that got about half the tests working. I'll check that in to the rlbox tree today. I will need to just a little more work to get the remaining tests working and check that in this weekend.
Rebasing on this branch after later today (or this weekend if you prefer to wait till the bulk of the tests pass) is probably reasonable a good place to start

Do you have a test that demonstrates intended/successful use of the RLBox API that we can make sure to keep passing post-rebase?

I will include a quick way to run the RLBox test suite as part of the ""rlbox"" branch this weekend. For now, this may be a quick hacky test to ensure functionality is preserved. We can figure out the best way to integrate this into the CI going forward.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/shravanrn,18,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1063148458,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)",Closing this PR per discussion above,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1833,2022-02-17T06:04:10Z,2022-03-09T17:00:58Z,2022-03-09T17:13:41Z,CLOSED,False,4468,861,26,https://github.com/shravanrn,"Library sandboxing changes - support for per instance, cross platform, wasi, some debugging ",2,[],https://github.com/WebAssembly/wabt/pull/1833,https://github.com/sbc100,19,https://github.com/WebAssembly/wabt/pull/1833#issuecomment-1063161463,"List of features

Windows/msvc support for runtime, codegen and builtins as well as support for a wider list of platforms/architectures/compilers including Android (arm architectures), Windows 32-bit etc.
Support for growable indirect function call tables
Support for library sandboxing apis --- wasm function type index lookup (so host can add new callbacks), make heaps aligned to 4gb for compatiblity with the RLBox sandboxing framework
Allow multiple sandbox instances of the same library by moving global vars into a context structure that is passed to every function
Migrated from emscripten to use of wasi-clang
Upstream libc-wasi does not support windows, so I have written a minimal cross platform wasi support which includes just basic wasi function (just enough to get simple IO libraries running. Nothing complicated like networking or filesystem is supported)
Removed use of per function call signal handler, setjmp/longjmp as this slows transitions
Removed name mangling to simplify function lookup
Option to remove stack depth counting as this adds unnecessary overhead
A debugging aid built directly into wasm2c generated code that is similar to valgrind like shadow memory (significantly eases debugging of wasm)
A wasm2c runner that can run full applications (code that has a main), when they are compiled via wasm2c to C and then to a shared library (.so/.dll)","Sorry for the delay here. Responses below

what would be most helpful here -- do you want us to wait until the wasm2c tests are passing and then we'll attempt a rebase that preserves that.

So i did a quick test fixing session last weekend that got about half the tests working. I'll check that in to the rlbox tree today. I will need to just a little more work to get the remaining tests working and check that in this weekend.
Rebasing on this branch after later today (or this weekend if you prefer to wait till the bulk of the tests pass) is probably reasonable a good place to start

Do you have a test that demonstrates intended/successful use of the RLBox API that we can make sure to keep passing post-rebase?

I will include a quick way to run the RLBox test suite as part of the ""rlbox"" branch this weekend. For now, this may be a quick hacky test to ensure functionality is preserved. We can figure out the best way to integrate this into the CI going forward.

BTW, I got the full spec tests passing on win32 yesterday:  #1843 ..  the tricky part of handling of NaN in MSVC's math library functions such as truncf.      Feel free to grab what ever bits from that PR that you need.   I'm hoping to land it soon on main.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1834,2022-02-17T12:52:22Z,2022-02-18T01:22:12Z,2022-02-18T01:58:28Z,MERGED,True,49,7,7,https://github.com/keithw,wasm2c: run multi-memory tests,1,[],https://github.com/WebAssembly/wabt/pull/1834,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1834,"This PR is sequenced behind #1810 and #1829.
PR #1751 added support for multi-memory and ran the multi-memory tests with run-interp-spec. This PR also runs (some of) the multi-memory tests under wasm2c, with run-spec-wasm2c. Only 5 of the 9 multi-memory tests are supported by wasm2c right now; the others require reference types, multi-table, or bulk memory.","This PR is sequenced behind #1810 and #1829.
PR #1751 added support for multi-memory and ran the multi-memory tests with run-interp-spec. This PR also runs (some of) the multi-memory tests under wasm2c, with run-spec-wasm2c. Only 5 of the 9 multi-memory tests are supported by wasm2c right now; the others require reference types, multi-table, or bulk memory.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1834,2022-02-17T12:52:22Z,2022-02-18T01:22:12Z,2022-02-18T01:58:28Z,MERGED,True,49,7,7,https://github.com/keithw,wasm2c: run multi-memory tests,1,[],https://github.com/WebAssembly/wabt/pull/1834,https://github.com/keithw,2,https://github.com/WebAssembly/wabt/pull/1834#issuecomment-1043345472,"This PR is sequenced behind #1810 and #1829.
PR #1751 added support for multi-memory and ran the multi-memory tests with run-interp-spec. This PR also runs (some of) the multi-memory tests under wasm2c, with run-spec-wasm2c. Only 5 of the 9 multi-memory tests are supported by wasm2c right now; the others require reference types, multi-table, or bulk memory.",(Rebased after #1810 and #1829 were merged.),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1835,2022-02-21T10:31:05Z,2022-02-25T19:51:05Z,2022-02-28T12:11:43Z,MERGED,True,66,4,2,https://github.com/zherczeg,Implement a separate free list for Refs,1,[],https://github.com/WebAssembly/wabt/pull/1835,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1835,"Create a memory optimized free list for Refs in the interpreter.
This patch is based on a comment in the original Free List. The highest bit cannot be set for valid Ref indices, so it can be used to represent free items. If the patch is accepted, I will specialize the original free list for objects, where the lowest bit will represent unused slots.","Create a memory optimized free list for Refs in the interpreter.
This patch is based on a comment in the original Free List. The highest bit cannot be set for valid Ref indices, so it can be used to represent free items. If the patch is accepted, I will specialize the original free list for objects, where the lowest bit will represent unused slots.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1835,2022-02-21T10:31:05Z,2022-02-25T19:51:05Z,2022-02-28T12:11:43Z,MERGED,True,66,4,2,https://github.com/zherczeg,Implement a separate free list for Refs,1,[],https://github.com/WebAssembly/wabt/pull/1835,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1835#issuecomment-1047378101,"Create a memory optimized free list for Refs in the interpreter.
This patch is based on a comment in the original Free List. The highest bit cannot be set for valid Ref indices, so it can be used to represent free items. If the patch is accepted, I will specialize the original free list for objects, where the lowest bit will represent unused slots.",Can I ask what motivated this change?  Are you just trying to address that TODO?  Or maybe you are seeing real world performance issues with the interpreter?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1835,2022-02-21T10:31:05Z,2022-02-25T19:51:05Z,2022-02-28T12:11:43Z,MERGED,True,66,4,2,https://github.com/zherczeg,Implement a separate free list for Refs,1,[],https://github.com/WebAssembly/wabt/pull/1835,https://github.com/zherczeg,3,https://github.com/WebAssembly/wabt/pull/1835#issuecomment-1047503085,"Create a memory optimized free list for Refs in the interpreter.
This patch is based on a comment in the original Free List. The highest bit cannot be set for valid Ref indices, so it can be used to represent free items. If the patch is accepted, I will specialize the original free list for objects, where the lowest bit will represent unused slots.","Thank you for the review! The motivation is reducing the memory consumption, not performance, although this version should be faster. However, considering the whole runtime this is probably just a small fragment of it. Kind of a low-hanging fruit: you gain a little, loose nothing, why not. Gradual code improvement.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1835,2022-02-21T10:31:05Z,2022-02-25T19:51:05Z,2022-02-28T12:11:43Z,MERGED,True,66,4,2,https://github.com/zherczeg,Implement a separate free list for Refs,1,[],https://github.com/WebAssembly/wabt/pull/1835,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1835#issuecomment-1047863259,"Create a memory optimized free list for Refs in the interpreter.
This patch is based on a comment in the original Free List. The highest bit cannot be set for valid Ref indices, so it can be used to represent free items. If the patch is accepted, I will specialize the original free list for objects, where the lowest bit will represent unused slots.","The motivation is reducing the memory consumption, not performance, although this version should be faster. However, considering the whole runtime this is probably just a small fragment of it. Kind of a low-hanging fruit: you gain a little, loose nothing, why not. Gradual code improvement.

Fair enough.   I'm a little concerned that  doing these kind of optimizations (for performance or memory consumption) is somewhat new to wabt and we don't currently have any way to measure the gain of prevent regressions.  Perhaps if we are going to continue this route we should add some improvements in the testing/measuring area as well.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1835,2022-02-21T10:31:05Z,2022-02-25T19:51:05Z,2022-02-28T12:11:43Z,MERGED,True,66,4,2,https://github.com/zherczeg,Implement a separate free list for Refs,1,[],https://github.com/WebAssembly/wabt/pull/1835,https://github.com/zherczeg,5,https://github.com/WebAssembly/wabt/pull/1835#issuecomment-1047898401,"Create a memory optimized free list for Refs in the interpreter.
This patch is based on a comment in the original Free List. The highest bit cannot be set for valid Ref indices, so it can be used to represent free items. If the patch is accepted, I will specialize the original free list for objects, where the lowest bit will represent unused slots.","I like the idea of putting a benchmark, maybe I can set it up. However putting a good benchmark is not easy:

Should cover real world use cases
Licensing issues
Runtime should not be too long / too short
Minimal external dependencies

Usually data encryption, simulation, recursive computation, sorting algorithms are good for benchmarking.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1835,2022-02-21T10:31:05Z,2022-02-25T19:51:05Z,2022-02-28T12:11:43Z,MERGED,True,66,4,2,https://github.com/zherczeg,Implement a separate free list for Refs,1,[],https://github.com/WebAssembly/wabt/pull/1835,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1835#issuecomment-1047919521,"Create a memory optimized free list for Refs in the interpreter.
This patch is based on a comment in the original Free List. The highest bit cannot be set for valid Ref indices, so it can be used to represent free items. If the patch is accepted, I will specialize the original free list for objects, where the lowest bit will represent unused slots.","I like the idea of putting a benchmark, maybe I can set it up. However putting a good benchmark is not easy:

Should cover real world use cases
Licensing issues
Runtime should not be too long / too short
Minimal external dependencies

Usually data encryption, simulation, recursive computation, sorting algorithms are good for benchmarking.

I agree a full benchmark would be complicated.   I'm hoping we could could start with basic measurement of simple instantiations.. although even that too is perhaps harder than it sounds.     Could we do something really simple like use mallinfo to measure high watermarks when we run the test suite?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1836,2022-02-22T03:19:07Z,2022-02-22T15:48:59Z,2022-02-22T16:06:21Z,MERGED,True,2,1,1,https://github.com/SoniEx2,Add missing wasm2c feature flags,2,[],https://github.com/WebAssembly/wabt/pull/1836,https://github.com/SoniEx2,1,https://github.com/WebAssembly/wabt/pull/1836,See #1679 #1680 #1686,See #1679 #1680 #1686,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1836,2022-02-22T03:19:07Z,2022-02-22T15:48:59Z,2022-02-22T16:06:21Z,MERGED,True,2,1,1,https://github.com/SoniEx2,Add missing wasm2c feature flags,2,[],https://github.com/WebAssembly/wabt/pull/1836,https://github.com/SoniEx2,2,https://github.com/WebAssembly/wabt/pull/1836#issuecomment-1047387444,See #1679 #1680 #1686,It would probably be a good idea to add tests for these at some point...,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1836,2022-02-22T03:19:07Z,2022-02-22T15:48:59Z,2022-02-22T16:06:21Z,MERGED,True,2,1,1,https://github.com/SoniEx2,Add missing wasm2c feature flags,2,[],https://github.com/WebAssembly/wabt/pull/1836,https://github.com/SoniEx2,3,https://github.com/WebAssembly/wabt/pull/1836#issuecomment-1047951485,See #1679 #1680 #1686,"ack, we made a typo, looks like it's ""sign-extension"" >.<
(this is why we need those tests .-.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/SoniEx2,1,https://github.com/WebAssembly/wabt/pull/1838,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/keithw,2,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049307288,,"If possible, I think we'd love to just remove the ""branches"" section (as in #1814 (comment)) so that CI will be run for people developing on other branches in forks. But I'm not sure if there is benefit to specifying just one branch...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/SoniEx2,3,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049308425,,"oh hm, looks like CI (specifically lint) is broken https://github.com/WebAssembly/wabt/runs/5311574587?check_suite_focus=true
at least it's running now... but hmm...
not sure what's going on here.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/SoniEx2,4,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049320926,,"oh okay lint is just broken on the main branch we guess, but it never ran before so it's only being caught now. cc #1683 / @aheejin",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049339148,,"If possible, I think we'd love to just remove the ""branches"" section (as in #1814 (comment)) so that CI will be run for people developing on other branches in forks. But I'm not sure if there is benefit to specifying just one branch...

I imagine the reason for that being there is that we maybe wanted folks to be able to great branches but not run CI until the branch graduates to PR status.
We could remove the restriction probably.
But as a workaround I think can also create a PR on your fork fork/branch -> fork/main and that would trigger the CI.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049340398,,"The ./scripts/clang-format-diff.sh script is designed to be run on PRs, and not on the full codebase.  The full codebase is not yet full lint clean by design (We have some cases where we still want to override the linter).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049340595,,So I guess the lint job should move to a different workflow that only runs on PRs?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/SoniEx2,8,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049356317,,"the clang-format-diff script runs on diffs, and pushes on the main branch are arguably diffs. we're not sure why it breaks when run like that.
we think it should still run, particularly because the lint job also includes flake8 - which works fine. you could run it only on PRs as a workaround, but also it also breaks for anyone running a fork so we really think it should be fixed somehow.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/sbc100,9,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049363555,,"clang-format-diff tries to compare the current HEAD with its upstream branch so the logic would need to be updated somehow to handle the case when its just run on main:
if [ -n ""$1"" ]; then                                                                
  BRANCH=""$1""                                                                       
elif [ -n ""$GITHUB_BASE_REF"" ]; then                                                
  BRANCH=""origin/$GITHUB_BASE_REF""                                                  
else                                                                                
  BRANCH=""@{upstream}""                                                              
fi                                                                                  
                                                                                    
MERGE_BASE=$(git merge-base $BRANCH HEAD) 
FORMAT_MSG=$(git clang-format $MERGE_BASE -q --diff -- src/) 

The specific problem is trying to figure out that the upstream branch to compare to would be (called $BRANCH in the script).   If you want to try and make it work thats fine.. but also we could just have it do nothing on pushes to a branch with no upstream?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/SoniEx2,10,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049366281,,"when git runs a post-receive hook, it passes a list of refs and the ""old"" and ""new"" commit IDs. we're not sure if github actions has something similar...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/aheejin,11,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049372454,,"I noticed we run lint only on PRs in Binaryen: WebAssembly/binaryen#3708
But I don't remember why it didn't make sense on commits, even though it says I reviewed it.. @sbc100 Do you remember?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/SoniEx2,12,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049373851,,"we could always hardcode a ""known-good"" base revision and lint diffs based on that? 😝
(unsure why github actions doesn't seem to identify the original rev of a push... well, force pushes are a thing but those aren't that hard to deal with...)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/sbc100,13,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049398184,,"Since we accept PRs that fail this particular test (its not supposed to be strict in that sense, at least not yet), I think it might not be worth the effort to run it on every push to a branch (that isn't a PR).",True,{'THUMBS_UP': ['https://github.com/SoniEx2']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/SoniEx2,14,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049433282,,"we think github.event.before should have the original rev, so if we could grab that somehow and inject it into the script...?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1838,2022-02-23T22:59:26Z,2022-02-23T23:11:40Z,2022-02-24T03:03:56Z,MERGED,True,1,1,1,https://github.com/SoniEx2,Fix CI on main branch,1,[],https://github.com/WebAssembly/wabt/pull/1838,https://github.com/sbc100,15,https://github.com/WebAssembly/wabt/pull/1838#issuecomment-1049447769,,If you want to try and make that work it sounds reasonable.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1839,2022-02-24T02:58:21Z,2022-02-24T04:03:55Z,2022-02-24T04:03:55Z,MERGED,True,4,0,2,https://github.com/SoniEx2,Fix lint CI on push,3,[],https://github.com/WebAssembly/wabt/pull/1839,https://github.com/SoniEx2,1,https://github.com/WebAssembly/wabt/pull/1839,"Because clang-format-diff is designed to check only the diff, this effectively only checks the relevant commit instead of the whole repo. So it should be fine to accept PRs that don't pass lint - the lint job will fail for that commit, but following pushes should pass.
Granted this isn't so relevant for the main repo where everyone goes through PRs, but for forks/etc it makes a difference. An alternative would be to just skip clang-format-diff on push (with something like if: github.event_name != 'push' instead of env: ...) but, again: forks/etc.","Because clang-format-diff is designed to check only the diff, this effectively only checks the relevant commit instead of the whole repo. So it should be fine to accept PRs that don't pass lint - the lint job will fail for that commit, but following pushes should pass.
Granted this isn't so relevant for the main repo where everyone goes through PRs, but for forks/etc it makes a difference. An alternative would be to just skip clang-format-diff on push (with something like if: github.event_name != 'push' instead of env: ...) but, again: forks/etc.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1840,2022-02-24T13:52:31Z,2022-02-25T15:36:35Z,2022-02-25T15:36:35Z,MERGED,True,1032,6,41,https://github.com/yuri91,Code Metadata,8,[],https://github.com/WebAssembly/wabt/pull/1840,https://github.com/yuri91,1,https://github.com/WebAssembly/wabt/pull/1840,"This PR adds support for Code Metadata.
See https://github.com/WebAssembly/tool-conventions/blob/main/CodeMetadata.md  for the specification.
In particular this pr implements the following:

Parsing code metadata sections in BinaryReader, providing appropriate callbacks that a BinaryReaderDelegate can implement:

BinaryReaderObjdump: show the sections in a human-readable form
BinaryReaderIr: add code metadata in the IR as expressions


Parsing code metadata annotations in text format, adding them in the IR like the BinaryReaderIR does
Writing the code metadata present in the IR in the proper sections when converting IR to binary
Support in wasm-decompiler for showing code metadata as comments in the pseudo-code

All the features have corresponding tests.
Support for code metadata is gated through the --enable-code-metadata feature. For reading/writing in the text format, --enable-annotations is also required.
Missing features:
Support for function-level code metadata (offset 0)
Extensive validation in validator.cc (like making sure that all metadata instances are at the same code offset of an instruction)","This PR adds support for Code Metadata.
See https://github.com/WebAssembly/tool-conventions/blob/main/CodeMetadata.md  for the specification.
In particular this pr implements the following:

Parsing code metadata sections in BinaryReader, providing appropriate callbacks that a BinaryReaderDelegate can implement:

BinaryReaderObjdump: show the sections in a human-readable form
BinaryReaderIr: add code metadata in the IR as expressions


Parsing code metadata annotations in text format, adding them in the IR like the BinaryReaderIR does
Writing the code metadata present in the IR in the proper sections when converting IR to binary
Support in wasm-decompiler for showing code metadata as comments in the pseudo-code

All the features have corresponding tests.
Support for code metadata is gated through the --enable-code-metadata feature. For reading/writing in the text format, --enable-annotations is also required.
Missing features:
Support for function-level code metadata (offset 0)
Extensive validation in validator.cc (like making sure that all metadata instances are at the same code offset of an instruction)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1841,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1051179244,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"Do you have some way of measuring the impact of this change?   For example, are you seeing this improve memory usage in some real world use case that you have?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,3,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1054329585,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"I have made a measurement using the freya tool for valgrind. I have modified the interpreter to run all test files in a single loop, and grouped the data using the following config file:
# discarded allocations
-                  /usr/include/c++/9/bits
-                  /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.28
-                  m_replacemalloc/vg_replace_malloc.c
-                  (mmap)

# Interpreter components
interp             wabt/src/interp
interp-tool        wabt/src/tools
interp-util        wabt/src

[Interpreter]
  (interp)
  (interp-tool)
  (interp-util)

# Everything else
[other] 1 +

The results are here:
https://gist.github.com/zherczeg/77df5696b48b92f8e51852bf45d104fa
FreeList does not seems to be a major memory consumer, Peak looks like 1K. It seems the default consumption for Memory::Memory, frames_ and values_ in Thread are 64K, and those are much bigger (3 * 64K).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,4,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1054376116,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"I moved the Freelist related code into a separate interp-inl2.h and made an allocation group for it.
Old:
  [1] Peak: 2.6Kb (2704b) Allocs: 23 Reallocs: 0 Total: 4.2Kb (4352b)
  Group: freelist

New
  [1] Peak: 1.6Kb (1664b) Allocs: 13 Reallocs: 0 Total: 2.2Kb (2288b)
  Group: freelist

That is 39% reduction, although the peak still is negligible compared to the 226.3Kb interpreter peak. Still I think this is useful.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,5,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1056906358,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"@sbc100 Is this measurement data ok, or do you need something else?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061136317,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"I think this change might be responsible a crash we are seeing.  ASAN picks it up:
Running third_party/halide/halide/test/correctness_align_bounds_wasm_impl expect=success with HL_TARGET=wasm-32-wasmrt with HL_JIT_TARGET=wasm-32-wasmrt
==5569==WARNING: ASan doesn't fully support makecontext/swapcontext functions and may produce false positives in some cases!
=================================================================
==5569==ERROR: AddressSanitizer: heap-use-after-free on address 0x6060003658a0 at pc 0x56275c3a1258 bp 0x7ffc0f408d10 sp 0x7ffc0f408d08
READ of size 8 at 0x6060003658a0 thread T0
    #0 0x56275c3a1257 in wabt::interp::FreeList<wabt::interp::Object*>::~FreeList() third_party/wabt/src/interp/interp-inl.h:187:7
    #1 0x56275c39f91f in wabt::interp::Store::~Store() third_party/wabt/src/interp/interp.h:444:7
    #2 0x56275c3a0483 in Halide::Internal::WasmModuleContents::~WasmModuleContents() third_party/halide/halide/src/WasmExecutor.cpp:2287:35
    #3 0x56275c398992 in void Halide::Internal::destroy<Halide::Internal::WasmModuleContents>(Halide::Internal::WasmModuleContents const*) third_party/halide/halide/src/WasmExecutor.cpp:2696:5
    #4 0x56275b48337c in decref third_party/halide/halide/src/IntrusivePtr.h:85:17
    #5 0x56275b48337c in ~IntrusivePtr third_party/halide/halide/src/IntrusivePtr.h:113:9
    #6 0x56275b48337c in ~WasmModule third_party/halide/halide/src/WasmExecutor.h:27:8
    #7 0x56275b48337c in Halide::PipelineContents::invalidate_cache() third_party/halide/halide/src/Pipeline.cpp:91:9
    #8 0x56275b483528 in Halide::PipelineContents::clear_custom_lowering_passes() third_party/halide/halide/src/Pipeline.cpp:134:9
    #9 0x56275b4813a8 in Halide::PipelineContents::~PipelineContents() third_party/halide/halide/src/Pipeline.cpp:130:9
    #10 0x56275b464ef2 in void Halide::Internal::destroy<Halide::PipelineContents>(Halide::PipelineContents const*) third_party/halide/halide/src/Pipeline.cpp:152:5
    #11 0x56275ab15557 in decref blaze-out/k8-asan-fastbuild/genfiles/third_party/halide/halide/src/halide_uppercase/Halide.h:2199:17
    #12 0x56275ab15557 in ~IntrusivePtr blaze-out/k8-asan-fastbuild/genfiles/third_party/halide/halide/src/halide_uppercase/Halide.h:2227:9
    #13 0x56275ab15557 in ~Pipeline blaze-out/k8-asan-fastbuild/genfiles/third_party/halide/halide/src/halide_uppercase/Halide.h:15309:7
    #14 0x56275ab15557 in ~Func blaze-out/k8-asan-fastbuild/genfiles/third_party/halide/halide/src/halide_uppercase/Halide.h:17106:7
    #15 0x56275ab15557 in main third_party/halide/halide/test/correctness/align_bounds.cpp:86:5
    #16 0x7f4176b038d2 in __libc_start_main (/usr/grte/v5/lib64/libc.so.6+0x628d2) (BuildId: 7cfed7708e5ab7fcb286b373de21ee76)
    #17 0x56275aa47ae9 in _start /usr/grte/v5/debug-src/src/csu/../sysdeps/x86_64/start.S:120

0x6060003658a0 is located 0 bytes inside of 64-byte region [0x6060003658a0,0x6060003658e0)
freed by thread T0 here:
    #0 0x56275ab105a2 in operator delete(void*, unsigned long) third_party/llvm/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:164:3
    #1 0x5627652976d1 in wabt::interp::Object::~Object() third_party/wabt/src/interp/interp.cc:313:19
    #2 0x56275c3a1193 in wabt::interp::FreeList<wabt::interp::Object*>::~FreeList() third_party/wabt/src/interp/interp-inl.h:187:7
    #3 0x56275c39f91f in wabt::interp::Store::~Store() third_party/wabt/src/interp/interp.h:444:7
    #4 0x56275c38d1ea in Halide::Internal::WasmModuleContents::WasmModuleContents(Halide::Module const&, std::__u::vector<Halide::Argument, std::__u::allocator<Halide::Argument> > const&, std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > const&, std::__u::map<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> >, Halide::JITExtern, std::__u::less<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > >, std::__u::allocator<std::__u::pair<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > const, Halide::JITExtern> > > const&, std::__u::vector<Halide::Internal::JITModule, std::__u::allocator<Halide::Internal::JITModule> > const&) third_party/halide/halide/src/WasmExecutor.cpp:2312:5
    #5 0x56275c398a62 in Halide::Internal::WasmModule::compile(Halide::Module const&, std::__u::vector<Halide::Argument, std::__u::allocator<Halide::Argument> > const&, std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > const&, std::__u::map<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> >, Halide::JITExtern, std::__u::less<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > >, std::__u::allocator<std::__u::pair<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > const, Halide::JITExtern> > > const&, std::__u::vector<Halide::Internal::JITModule, std::__u::allocator<Halide::Internal::JITModule> > const&) third_party/halide/halide/src/WasmExecutor.cpp:2718:32
    #6 0x56275b47238c in Halide::Pipeline::compile_jit(Halide::Target const&) third_party/halide/halide/src/Pipeline.cpp:635:33
    #7 0x56275b4786d6 in Halide::Pipeline::realize(Halide::JITUserContext*, Halide::Pipeline::RealizationArg, Halide::Target const&, Halide::ParamMap const&) third_party/halide/halide/src/Pipeline.cpp:1130:5
    #8 0x56275b477724 in Halide::Pipeline::realize(Halide::JITUserContext*, std::__u::vector<int, std::__u::allocator<int> >, Halide::Target const&, Halide::ParamMap const&) third_party/halide/halide/src/Pipeline.cpp:757:9
    #9 0x56275b476e8e in Halide::Pipeline::realize(std::__u::vector<int, std::__u::allocator<int> >, Halide::Target const&, Halide::ParamMap const&) third_party/halide/halide/src/Pipeline.cpp:738:12
    #10 0x56275aba88d0 in Halide::Func::realize(std::__u::vector<int, std::__u::allocator<int> >, Halide::Target const&, Halide::ParamMap const&) third_party/halide/halide/src/Func.cpp:3276:23
    #11 0x56275ab14b3f in main third_party/halide/halide/test/correctness/align_bounds.cpp:52:32
    #12 0x7f4176b038d2 in __libc_start_main (/usr/grte/v5/lib64/libc.so.6+0x628d2) (BuildId: 7cfed7708e5ab7fcb286b373de21ee76)
    #13 0x56275aa47ae9 in _start /usr/grte/v5/debug-src/src/csu/../sysdeps/x86_64/start.S:120

previously allocated by thread T0 here:
    #0 0x56275ab0f91d in operator new(unsigned long) third_party/llvm/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:95:3
    #1 0x562765295da7 in wabt::interp::Store::Store(wabt::Features const&) third_party/wabt/src/interp/interp.cc:203:24
    #2 0x56275c38d1d0 in Halide::Internal::WasmModuleContents::WasmModuleContents(Halide::Module const&, std::__u::vector<Halide::Argument, std::__u::allocator<Halide::Argument> > const&, std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > const&, std::__u::map<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> >, Halide::JITExtern, std::__u::less<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > >, std::__u::allocator<std::__u::pair<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > const, Halide::JITExtern> > > const&, std::__u::vector<Halide::Internal::JITModule, std::__u::allocator<Halide::Internal::JITModule> > const&) third_party/halide/halide/src/WasmExecutor.cpp:2312:13
    #3 0x56275c398a62 in Halide::Internal::WasmModule::compile(Halide::Module const&, std::__u::vector<Halide::Argument, std::__u::allocator<Halide::Argument> > const&, std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > const&, std::__u::map<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> >, Halide::JITExtern, std::__u::less<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > >, std::__u::allocator<std::__u::pair<std::__u::basic_string<char, std::__u::char_traits<char>, std::__u::allocator<char> > const, Halide::JITExtern> > > const&, std::__u::vector<Halide::Internal::JITModule, std::__u::allocator<Halide::Internal::JITModule> > const&) third_party/halide/halide/src/WasmExecutor.cpp:2718:32
    #4 0x56275b47238c in Halide::Pipeline::compile_jit(Halide::Target const&) third_party/halide/halide/src/Pipeline.cpp:635:33
    #5 0x56275b4786d6 in Halide::Pipeline::realize(Halide::JITUserContext*, Halide::Pipeline::RealizationArg, Halide::Target const&, Halide::ParamMap const&) third_party/halide/halide/src/Pipeline.cpp:1130:5
    #6 0x56275b477724 in Halide::Pipeline::realize(Halide::JITUserContext*, std::__u::vector<int, std::__u::allocator<int> >, Halide::Target const&, Halide::ParamMap const&) third_party/halide/halide/src/Pipeline.cpp:757:9
    #7 0x56275b476e8e in Halide::Pipeline::realize(std::__u::vector<int, std::__u::allocator<int> >, Halide::Target const&, Halide::ParamMap const&) third_party/halide/halide/src/Pipeline.cpp:738:12
    #8 0x56275aba88d0 in Halide::Func::realize(std::__u::vector<int, std::__u::allocator<int> >, Halide::Target const&, Halide::ParamMap const&) third_party/halide/halide/src/Func.cpp:3276:23
    #9 0x56275ab14b3f in main third_party/halide/halide/test/correctness/align_bounds.cpp:52:32
    #10 0x7f4176b038d2 in __libc_start_main (/usr/grte/v5/lib64/libc.so.6+0x628d2) (BuildId: 7cfed7708e5ab7fcb286b373de21ee76)
    #11 0x56275aa47ae9 in _start /usr/grte/v5/debug-src/src/csu/../sysdeps/x86_64/start.S:120

SUMMARY: AddressSanitizer: heap-use-after-free third_party/wabt/src/interp/interp-inl.h:187:7 in wabt::interp::FreeList<wabt::interp::Object*>::~FreeList()
Shadow bytes around the buggy address:
  0x0c0c80064ac0: fd fd fd fd fd fd fd fd fa fa fa fa fd fd fd fd
  0x0c0c80064ad0: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd
  0x0c0c80064ae0: fa fa fa fa fd fd fd fd fd fd fd fd fa fa fa fa
  0x0c0c80064af0: fd fd fd fd fd fd fd fd fa fa fa fa fd fd fd fd
  0x0c0c80064b00: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd
=>0x0c0c80064b10: fa fa fa fa[fd]fd fd fd fd fd fd fd fa fa fa fa
  0x0c0c80064b20: fd fd fd fd fd fd fd fa fa fa fa fa fd fd fd fd
  0x0c0c80064b30: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fa
  0x0c0c80064b40: fa fa fa fa fd fd fd fd fd fd fd fd fa fa fa fa
  0x0c0c80064b50: fd fd fd fd fd fd fd fd fa fa fa fa fd fd fd fd
  0x0c0c80064b60: fd fd fd fd fa fa fa fa fd fd fd fd fd fd fd fd
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==5569==ABORTING",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061137258,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"If you have time to look at this what would be great.  If we can't figure it out in a day or two, we can revert an attempt to debug later.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,8,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061824821,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"This is very interesting. I couldn't find a halide project in the third_party repository, but I suspect this is the project you are talking about: https://github.com/halide
The lines in the backtrace do not exactly match to the github repository, but maybe it is enough to figure out what is happening:
https://github.com/halide/Halide/blob/main/src/WasmExecutor.cpp#L2310
store = wabt::interp::Store(calc_features(halide_module.target()));
I suspect this is the WasmExecutor.cpp:2312:13 line in the backtrace.
Then, in the same line the Store destructor runs with a different colum info: WasmExecutor.cpp:2312:5
Then the destructor of Store also runs again in Halide::Internal::WasmModuleContents::~WasmModuleContents() WasmExecutor.cpp:2287:35
The first Store destructor call is the strange thing. It looks like the store (and its content) is destroyed twice, and the first is during the assignment of store =. Do you have any idea why the destructor is called by this assignment? Something c++ related?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,9,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061827912,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"It looks like on the Features object is present during the first destruction of Store, and this object is destroyed twice.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,10,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061852816,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"I have added a test to test-interp.cc
TEST_F(InterpGCTest, Store_Assignemnt) {
  wabt::interp::Store store;

  store = wabt::interp::Store();
  EXPECT_EQ(1u, store_.object_count());
}

This crashes, because the destructor is indeed called twice.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/sbc100,11,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061926678,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"Right, this is because in C++ Foo f = Foo(); contructs two instances of Foo.. one on the RHS of the expression and one of the LHS which gets assigned to using operator=.
There are various options for how to handle such cases:

Support a normal operator= method that can make a copy of a store
Support a move assignment operator= that can move the contents from one instance to another: https://en.cppreference.com/w/cpp/language/move_assignment
Remove support for assigned/copying of stores completely.

Most likely option (2) is the best option since it won't break existing code.
CC: @steven-johnson",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/sbc100,12,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061936732,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"It looks like the current Store has default move assignment operator which means that when you copy a store object your end up with moving the data from the old store to the new.
This worked find before because std::unique_ptr know how to be moved...from one store to another.   With this PR we use new and delete explicitly rather that std::unique_ptr which makes things less safe.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,13,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061957059,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"Sorry, it is not the Features object, it is the Null object which is destroyed twice:
Ref ref{objects_.New(new Object(ObjectKind::Null))};

It looks like the FreeList data is copied, then the temporary Store is deleted. Perhaps a copy operator is needed for FreeList?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/sbc100,14,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061966247,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,"I think the new approach means we can't use std::unique_ptr .. which means we need to handler the assignment and move assignment operator ourselves.
I suggest I suggest we delete the copy assignment operator (the one that copies rather than moves) completely form both FreeList and from Store.   For the move assignment operator I think it probably makes sense to delete that too.. although it would require an update to the halide code I think.    Implementing a working move assignment operator might not be worth the effort.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,15,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061975850,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,An attempt to fix this: #1854,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/zherczeg,16,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061980659,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,Deleting also an option. I can do that as well.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1841,2022-02-25T11:58:43Z,2022-03-03T01:17:59Z,2022-03-08T16:51:23Z,MERGED,True,78,92,3,https://github.com/zherczeg,Rework free list to use less memory.,1,[],https://github.com/WebAssembly/wabt/pull/1841,https://github.com/sbc100,17,https://github.com/WebAssembly/wabt/pull/1841#issuecomment-1061987883,This patch is a follow-up for #1835. It can be landed independently or merged with the other PR.,I think #1854 should work.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1842,2022-03-01T19:28:01Z,2022-03-03T01:07:37Z,2022-03-03T01:07:37Z,MERGED,True,202,198,36,https://github.com/sbc100,Fix function body start/end locations in wasm-validate,1,[],https://github.com/WebAssembly/wabt/pull/1842,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1842,"For text validation, this means the error is always corretly reported on
he final expression in the function.
For binary validation, this means that we report the byte after the last
instrution in the function as the failure location.  This is in line
with other binary validation reports.  For example, for type mismatch in i32.add we report the validtion error at the byte after the add
instruction.","For text validation, this means the error is always corretly reported on
he final expression in the function.
For binary validation, this means that we report the byte after the last
instrution in the function as the failure location.  This is in line
with other binary validation reports.  For example, for type mismatch in i32.add we report the validtion error at the byte after the add
instruction.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1842,2022-03-01T19:28:01Z,2022-03-03T01:07:37Z,2022-03-03T01:07:37Z,MERGED,True,202,198,36,https://github.com/sbc100,Fix function body start/end locations in wasm-validate,1,[],https://github.com/WebAssembly/wabt/pull/1842,https://github.com/dschuff,2,https://github.com/WebAssembly/wabt/pull/1842#issuecomment-1057486706,"For text validation, this means the error is always corretly reported on
he final expression in the function.
For binary validation, this means that we report the byte after the last
instrution in the function as the failure location.  This is in line
with other binary validation reports.  For example, for type mismatch in i32.add we report the validtion error at the byte after the add
instruction.","By ""the error"" you mean errors when the final instruction is invalid, or doesn't match the return type of the function?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1843,2022-03-02T01:13:03Z,2022-03-10T02:29:37Z,2022-04-04T20:56:40Z,MERGED,True,544,116,12,https://github.com/sbc100,Add windows implementation of wasm2c runtime,3,[],https://github.com/WebAssembly/wabt/pull/1843,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1843,"All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833","All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1843,2022-03-02T01:13:03Z,2022-03-10T02:29:37Z,2022-04-04T20:56:40Z,MERGED,True,544,116,12,https://github.com/sbc100,Add windows implementation of wasm2c runtime,3,[],https://github.com/WebAssembly/wabt/pull/1843,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1843#issuecomment-1058539581,"All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833","The failures on windows are no reduces to what looks like fp/nan related failures:
spec/float_exprs:

float_exprs.wast:2337
float_exprs.wast:2338
float_exprs.wast:2347
float_exprs.wast:2348

spec/float_memory:

float_memory.wast:21
float_memory.wast:46
float_memory.wast:73
float_memory.wast:98

spec/float_literals:

float_literals.wast:109
float_literals.wast:111
float_literals.wast:112
float_literals.wast:113
float_literals.wast:141
float_literals.wast:143
float_literals.wast:144
float_literals.wast:145

spec/float_literals:

conversions.wast:112
...",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1843,2022-03-02T01:13:03Z,2022-03-10T02:29:37Z,2022-04-04T20:56:40Z,MERGED,True,544,116,12,https://github.com/sbc100,Add windows implementation of wasm2c runtime,3,[],https://github.com/WebAssembly/wabt/pull/1843,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1843#issuecomment-1058649088,"All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833",It looks like that these tests maybe are relying on the nan bits in f64s.. does that sound right @binji ?  Could this be due to the fact that microsoft x64 ABI use the XMM registers for to f64 pass params and results?   Its seems that the nan bits are maybe not preserved when f64 (double) is returned..,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1843,2022-03-02T01:13:03Z,2022-03-10T02:29:37Z,2022-04-04T20:56:40Z,MERGED,True,544,116,12,https://github.com/sbc100,Add windows implementation of wasm2c runtime,3,[],https://github.com/WebAssembly/wabt/pull/1843,https://github.com/binji,4,https://github.com/WebAssembly/wabt/pull/1843#issuecomment-1058778685,"All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833","@sbc100 In my incomplete windows patch, I ended up having to do a few more tweaks to handle floating-point values on Windows, see the description of this commit: 3d09896",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1843,2022-03-02T01:13:03Z,2022-03-10T02:29:37Z,2022-04-04T20:56:40Z,MERGED,True,544,116,12,https://github.com/sbc100,Add windows implementation of wasm2c runtime,3,[],https://github.com/WebAssembly/wabt/pull/1843,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1843#issuecomment-1058804755,"All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833","@sbc100 In my incomplete windows patch, I ended up having to do a few more tweaks to handle floating-point values on Windows, see the description of this commit: 3d09896

Thanks!  I didn't know about that.
A lot of the issue I was seeing went away when I switch from i386 to x64, but now I see new issues.  I will see if I can get any insight from your work.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1843,2022-03-02T01:13:03Z,2022-03-10T02:29:37Z,2022-04-04T20:56:40Z,MERGED,True,544,116,12,https://github.com/sbc100,Add windows implementation of wasm2c runtime,3,[],https://github.com/WebAssembly/wabt/pull/1843,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1843#issuecomment-1063342597,"All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833",I removed a lot of the extra complexity from this change.  It now doesn't add any new .c files to wasm2c.. and just includes the very minimum needed to get windows to pass all the tests.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1843,2022-03-02T01:13:03Z,2022-03-10T02:29:37Z,2022-04-04T20:56:40Z,MERGED,True,544,116,12,https://github.com/sbc100,Add windows implementation of wasm2c runtime,3,[],https://github.com/WebAssembly/wabt/pull/1843,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1843#issuecomment-1063438906,"All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833","This is now a much smaller PR and does not include a bunch of the stuff from #1833 such as mmap alignment, or splitting the rt library into several C files.     All that can come later once its needed/justified I think.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1843,2022-03-02T01:13:03Z,2022-03-10T02:29:37Z,2022-04-04T20:56:40Z,MERGED,True,544,116,12,https://github.com/sbc100,Add windows implementation of wasm2c runtime,3,[],https://github.com/WebAssembly/wabt/pull/1843,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/1843#issuecomment-1063439203,"All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833",@binji PTAL,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1843,2022-03-02T01:13:03Z,2022-03-10T02:29:37Z,2022-04-04T20:56:40Z,MERGED,True,544,116,12,https://github.com/sbc100,Add windows implementation of wasm2c runtime,3,[],https://github.com/WebAssembly/wabt/pull/1843,https://github.com/rathann,9,https://github.com/WebAssembly/wabt/pull/1843#issuecomment-1088005473,"All tests are now passing with cl.exe under x64.   With x86 there are some test failure that I believe relate
the use of the x87 registers to pass floating point numbers.   I suggest we look into fixing those as a followup.
Split out from #1833","[...] With x86 there are some test failure that I believe relate the use of the x87 registers to pass floating point numbers. I suggest we look into fixing those as a followup.

Maybe compare with #1044 as a number of tests are still failing on Linux/x86, too.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1844,2022-03-02T16:49:48Z,2022-03-03T03:28:57Z,2022-03-03T03:28:58Z,MERGED,True,103,65,7,https://github.com/sbc100,Fix compiler warnings in wasm2c output,1,[],https://github.com/WebAssembly/wabt/pull/1844,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1844,"Use stricter compiler settings and fix all the resulting warnings.
This is precursor to landing windows compiler support for wasm2c.
See #1843.","Use stricter compiler settings and fix all the resulting warnings.
This is precursor to landing windows compiler support for wasm2c.
See #1843.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1845,2022-03-03T03:32:23Z,2022-03-03T15:54:12Z,2022-03-03T15:54:12Z,MERGED,True,7,7,1,https://github.com/sbc100,wasm2c: consistent use of Open/CloseBrace. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1845,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1845,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1846,2022-03-03T21:10:25Z,2022-03-04T22:02:40Z,2022-03-04T22:02:40Z,MERGED,True,1,0,1,https://github.com/walkingeyerobot,fix an unused variable warning in opt,1,[],https://github.com/WebAssembly/wabt/pull/1846,https://github.com/walkingeyerobot,1,https://github.com/WebAssembly/wabt/pull/1846,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1847,2022-03-04T00:49:24Z,2022-03-04T03:54:41Z,2022-03-04T03:54:42Z,MERGED,True,12,10,2,https://github.com/sbc100,Avoid passing signed char to islpha family of function on windows,1,[],https://github.com/WebAssembly/wabt/pull/1847,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1847,"On windows these functions assert when passed nagative numbers.
This change is the first step in getting wasm2c running on windows.  It is
enough for wasm2c itself to run successfully on windows but the generated
code is not yet msvc compatible.
Also, update run-spec-wasm2c.py so that it run on windows, although we
are still skipping all the wasm2c tests by default on windows (for now).
Also, honor the --no-compile options which is how I managed to test
this change locally.
Precursor to #1366","On windows these functions assert when passed nagative numbers.
This change is the first step in getting wasm2c running on windows.  It is
enough for wasm2c itself to run successfully on windows but the generated
code is not yet msvc compatible.
Also, update run-spec-wasm2c.py so that it run on windows, although we
are still skipping all the wasm2c tests by default on windows (for now).
Also, honor the --no-compile options which is how I managed to test
this change locally.
Precursor to #1366",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1848,2022-03-04T01:46:03Z,2022-03-04T03:55:34Z,2022-03-04T03:55:35Z,MERGED,True,42,11,3,https://github.com/sbc100,wasm2c: Add wasm_rt_strerror to covert trap code to string,1,[],https://github.com/WebAssembly/wabt/pull/1848,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1848,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1848,2022-03-04T01:46:03Z,2022-03-04T03:55:34Z,2022-03-04T03:55:35Z,MERGED,True,42,11,3,https://github.com/sbc100,wasm2c: Add wasm_rt_strerror to covert trap code to string,1,[],https://github.com/WebAssembly/wabt/pull/1848,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1848#issuecomment-1058745188,,Sadly we don't currently report expected traps in the stdout when running wasm2c spec tests.. so this change doesn't actually show up in the test expectations.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1849,2022-03-06T17:24:12Z,2022-03-06T17:40:14Z,2022-03-06T17:40:14Z,MERGED,True,2,2,1,https://github.com/sbc100,Fix clang warnings introduced by #1847,1,[],https://github.com/WebAssembly/wabt/pull/1849,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1849,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1850,2022-03-06T17:37:02Z,2022-03-07T18:43:25Z,2022-03-07T18:43:26Z,MERGED,True,17,12,3,https://github.com/sbc100,Honor `-DWERROR=ON` for all cmake targets,1,[],https://github.com/WebAssembly/wabt/pull/1850,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1850,I believe this is why #1849 managed to land without detection.,I believe this is why #1849 managed to land without detection.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1851,2022-03-06T19:37:31Z,2022-03-07T18:43:47Z,2022-03-07T18:43:47Z,MERGED,True,141,77,3,https://github.com/sbc100,Update wasm2c example output. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1851,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1851,"Do we really want to have this output checked in like this?
If so, we should probably automate its update ot at least add
a check to avoid it getting out-of-date.","Do we really want to have this output checked in like this?
If so, we should probably automate its update ot at least add
a check to avoid it getting out-of-date.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1852,2022-03-07T12:17:41Z,2022-03-08T21:58:00Z,2022-03-09T06:19:14Z,MERGED,True,10,2,2,https://github.com/zherczeg,Improve the maintenace of ObjectKind types.,1,[],https://github.com/WebAssembly/wabt/pull/1852,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1852,I have realized the Thread has not been removed and Exception has not been added to the ObjectKind as string list. This patch makes the maintenance automated. It seems this macro is used for debugging so I am not sure how to test this.,I have realized the Thread has not been removed and Exception has not been added to the ObjectKind as string list. This patch makes the maintenance automated. It seems this macro is used for debugging so I am not sure how to test this.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1853,2022-03-08T10:47:56Z,2022-03-09T07:07:12Z,2022-04-04T11:30:50Z,MERGED,True,4897,7,11,https://github.com/keithw,wasm2c: restore older versions of some spec tests,1,[],https://github.com/WebAssembly/wabt/pull/1853,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1853,"Test wasm2c against versions of the ""missing"" spec tests (tracked at #1737) from before the bulk-memory and reference-types proposals were merged (as of commit WebAssembly/testsuite@a8bcbaf). It seems helpful to make sure these tests don't break through various refactors (including our #1814 which doesn't currently pass all of these). These can be replaced with the current versions of the tests once wasm2c supports bulk-memory and reference-types.
I had to make two changes to get these tests to pass today:
1. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/elem.wast#L15-L18 (removed duplicate $t ids or else wast2json errors)
2. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/exports.wast#L119-L137 (removed table export section or else wasm2c triggers an assertion failure)","Test wasm2c against versions of the ""missing"" spec tests (tracked at #1737) from before the bulk-memory and reference-types proposals were merged (as of commit WebAssembly/testsuite@a8bcbaf). It seems helpful to make sure these tests don't break through various refactors (including our #1814 which doesn't currently pass all of these). These can be replaced with the current versions of the tests once wasm2c supports bulk-memory and reference-types.
I had to make two changes to get these tests to pass today:
1. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/elem.wast#L15-L18 (removed duplicate $t ids or else wast2json errors)
2. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/exports.wast#L119-L137 (removed table export section or else wasm2c triggers an assertion failure)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1853,2022-03-08T10:47:56Z,2022-03-09T07:07:12Z,2022-04-04T11:30:50Z,MERGED,True,4897,7,11,https://github.com/keithw,wasm2c: restore older versions of some spec tests,1,[],https://github.com/WebAssembly/wabt/pull/1853,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1853#issuecomment-1061973402,"Test wasm2c against versions of the ""missing"" spec tests (tracked at #1737) from before the bulk-memory and reference-types proposals were merged (as of commit WebAssembly/testsuite@a8bcbaf). It seems helpful to make sure these tests don't break through various refactors (including our #1814 which doesn't currently pass all of these). These can be replaced with the current versions of the tests once wasm2c supports bulk-memory and reference-types.
I had to make two changes to get these tests to pass today:
1. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/elem.wast#L15-L18 (removed duplicate $t ids or else wast2json errors)
2. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/exports.wast#L119-L137 (removed table export section or else wasm2c triggers an assertion failure)","In general I like the idea of have more test coverage.
The fact that you have to modify these tests makes me a little sad.   Could we perhaps fix the code to support the old tests without modifying them?   Or would that end up moving the code backwards in some way?
How far are we from supporting bulk-memory and reference-types and thus not needing this PR?   Could you make it clear in the README.txt that these files should be delete as soon as we do support support bulk-memory and reference-types.  Perhaps with a link to https://github.com/WebAssembly/wabt/issues/1737?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1853,2022-03-08T10:47:56Z,2022-03-09T07:07:12Z,2022-04-04T11:30:50Z,MERGED,True,4897,7,11,https://github.com/keithw,wasm2c: restore older versions of some spec tests,1,[],https://github.com/WebAssembly/wabt/pull/1853,https://github.com/keithw,3,https://github.com/WebAssembly/wabt/pull/1853#issuecomment-1062094906,"Test wasm2c against versions of the ""missing"" spec tests (tracked at #1737) from before the bulk-memory and reference-types proposals were merged (as of commit WebAssembly/testsuite@a8bcbaf). It seems helpful to make sure these tests don't break through various refactors (including our #1814 which doesn't currently pass all of these). These can be replaced with the current versions of the tests once wasm2c supports bulk-memory and reference-types.
I had to make two changes to get these tests to pass today:
1. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/elem.wast#L15-L18 (removed duplicate $t ids or else wast2json errors)
2. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/exports.wast#L119-L137 (removed table export section or else wasm2c triggers an assertion failure)","The fact that you have to modify these tests makes me a little sad. Could we perhaps fix the code to support the old tests without modifying them? Or would that end up moving the code backwards in some way?

I'm guessing it would be pretty doable since wast2json and wasm2c passed these tests in the pass. Let me take a look.

How far are we from supporting bulk-memory and reference-types and thus not needing this PR?

We've started working on this because of our own needs (you can see WIP at https://github.com/fixpointOS/wabt/tree/bulk-memory), but if possible I'd rather not have to implement these features once for the un-instanced code and then rebase/reimplement for instanced modules (or vice versa). So if it were up to us and based on your comment in #1833, the sequence would go:

 Get this PR merged (after changes necessary to include the un-modified old tests)
 Get our module_instancing branch passing these newly added (but old) tests
 Finish implementing bulk-memory on top of our module_instancing branch
 Start and finish implementing reference-types on top of our module_instancing branch
 Confirm that all the current versions of the spec tests pass, restore them to the spec directory, and remove old-spec
 If rlbox passes the testsuite by this point, rebase it on top of module_instancing; otherwise, worry about it later.
 Merge module_instancing

Thoughts?

Could you make it clear in the README.txt that these files should be delete as soon as we do support support bulk-memory and reference-types. Perhaps with a link to https://github.com/WebAssembly/wabt/issues/1737?

Sure.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1853,2022-03-08T10:47:56Z,2022-03-09T07:07:12Z,2022-04-04T11:30:50Z,MERGED,True,4897,7,11,https://github.com/keithw,wasm2c: restore older versions of some spec tests,1,[],https://github.com/WebAssembly/wabt/pull/1853,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1853#issuecomment-1062098177,"Test wasm2c against versions of the ""missing"" spec tests (tracked at #1737) from before the bulk-memory and reference-types proposals were merged (as of commit WebAssembly/testsuite@a8bcbaf). It seems helpful to make sure these tests don't break through various refactors (including our #1814 which doesn't currently pass all of these). These can be replaced with the current versions of the tests once wasm2c supports bulk-memory and reference-types.
I had to make two changes to get these tests to pass today:
1. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/elem.wast#L15-L18 (removed duplicate $t ids or else wast2json errors)
2. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/exports.wast#L119-L137 (removed table export section or else wasm2c triggers an assertion failure)",That order of work sounds right to me!  Thanks again for working on this.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1853,2022-03-08T10:47:56Z,2022-03-09T07:07:12Z,2022-04-04T11:30:50Z,MERGED,True,4897,7,11,https://github.com/keithw,wasm2c: restore older versions of some spec tests,1,[],https://github.com/WebAssembly/wabt/pull/1853,https://github.com/keithw,5,https://github.com/WebAssembly/wabt/pull/1853#issuecomment-1062467201,"Test wasm2c against versions of the ""missing"" spec tests (tracked at #1737) from before the bulk-memory and reference-types proposals were merged (as of commit WebAssembly/testsuite@a8bcbaf). It seems helpful to make sure these tests don't break through various refactors (including our #1814 which doesn't currently pass all of these). These can be replaced with the current versions of the tests once wasm2c supports bulk-memory and reference-types.
I had to make two changes to get these tests to pass today:
1. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/elem.wast#L15-L18 (removed duplicate $t ids or else wast2json errors)
2. https://github.com/WebAssembly/testsuite/blob/a8bcbafe6d2fb191ce0188de0e18fdc107fa2598/exports.wast#L119-L137 (removed table export section or else wasm2c triggers an assertion failure)","Here you go -- the changes necessary to get the old tests passing unmodified were pretty small.
I was a little nervous removing the short-circuit here (https://github.com/WebAssembly/wabt/blob/main/src/c-writer.cc#L1029-L1033) that was recently added in 1c8efb3, but, it doesn't seem to add a warning or other breakage when I take this out. Re: the comment there, even if a module has no types, the table can still be exported (which is what the failing test seemed to hit).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1854,2022-03-08T16:38:27Z,2022-03-09T06:51:01Z,2022-03-15T21:19:52Z,MERGED,True,4,0,1,https://github.com/zherczeg,Fix Store object assignment.,1,[],https://github.com/WebAssembly/wabt/pull/1854,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1854,"When a new store object is assigned to a value, its FreeList is copied without duplicating the referenced objects, so these objects are destroyed twice.","When a new store object is assigned to a value, its FreeList is copied without duplicating the referenced objects, so these objects are destroyed twice.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1854,2022-03-08T16:38:27Z,2022-03-09T06:51:01Z,2022-03-15T21:19:52Z,MERGED,True,4,0,1,https://github.com/zherczeg,Fix Store object assignment.,1,[],https://github.com/WebAssembly/wabt/pull/1854,https://github.com/zherczeg,2,https://github.com/WebAssembly/wabt/pull/1854#issuecomment-1061977995,"When a new store object is assigned to a value, its FreeList is copied without duplicating the referenced objects, so these objects are destroyed twice.","This patch fixes the store = Store() constructs. However, items might be needed to be cloned in more complex cases.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1854,2022-03-08T16:38:27Z,2022-03-09T06:51:01Z,2022-03-15T21:19:52Z,MERGED,True,4,0,1,https://github.com/zherczeg,Fix Store object assignment.,1,[],https://github.com/WebAssembly/wabt/pull/1854,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1854#issuecomment-1062089292,"When a new store object is assigned to a value, its FreeList is copied without duplicating the referenced objects, so these objects are destroyed twice.",Looks like asan tests are failing..,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1854,2022-03-08T16:38:27Z,2022-03-09T06:51:01Z,2022-03-15T21:19:52Z,MERGED,True,4,0,1,https://github.com/zherczeg,Fix Store object assignment.,1,[],https://github.com/WebAssembly/wabt/pull/1854,https://github.com/steven-johnson,4,https://github.com/WebAssembly/wabt/pull/1854#issuecomment-1068478300,"When a new store object is assigned to a value, its FreeList is copied without duplicating the referenced objects, so these objects are destroyed twice.",Why do we delete the move-assignment operator but not the move-constructor? Normally you'd want to implement (or delete) these in tandem.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1854,2022-03-08T16:38:27Z,2022-03-09T06:51:01Z,2022-03-15T21:19:52Z,MERGED,True,4,0,1,https://github.com/zherczeg,Fix Store object assignment.,1,[],https://github.com/WebAssembly/wabt/pull/1854,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1854#issuecomment-1068481314,"When a new store object is assigned to a value, its FreeList is copied without duplicating the referenced objects, so these objects are destroyed twice.",No reason.. other than C++11 ignorance on my part I think.  I can never remember the rules for when implicit constructors and deleted...,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1854,2022-03-08T16:38:27Z,2022-03-09T06:51:01Z,2022-03-15T21:19:52Z,MERGED,True,4,0,1,https://github.com/zherczeg,Fix Store object assignment.,1,[],https://github.com/WebAssembly/wabt/pull/1854,https://github.com/steven-johnson,6,https://github.com/WebAssembly/wabt/pull/1854#issuecomment-1068482607,"When a new store object is assigned to a value, its FreeList is copied without duplicating the referenced objects, so these objects are destroyed twice.","https://en.cppreference.com/w/cpp/language/rule_of_three
I don't know if it's an error per se, but it makes my spidey-sense tingle; if the move-assign needs special-casing, the move-ctor almost always does too (and vice versa).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1854,2022-03-08T16:38:27Z,2022-03-09T06:51:01Z,2022-03-15T21:19:52Z,MERGED,True,4,0,1,https://github.com/zherczeg,Fix Store object assignment.,1,[],https://github.com/WebAssembly/wabt/pull/1854,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1854#issuecomment-1068483623,"When a new store object is assigned to a value, its FreeList is copied without duplicating the referenced objects, so these objects are destroyed twice.",Thanks!  Yes we should have deletes the move constructor too.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1855,2022-03-09T04:15:12Z,2022-03-09T04:23:42Z,2022-03-09T04:23:42Z,MERGED,True,5,3,1,https://github.com/sbc100,run-tests.py: Use sys.byteorder to make code more readable. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1855,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1855,"Split out from #1843
This also avoids adding -DWABT_BIG_ENDIAN=0 pointlessly to all build commands on little endian machines.","Split out from #1843
This also avoids adding -DWABT_BIG_ENDIAN=0 pointlessly to all build commands on little endian machines.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1856,2022-03-09T04:37:30Z,2022-03-09T06:36:44Z,2022-03-10T11:53:39Z,MERGED,True,4,0,2,https://github.com/sbc100,Build and run wasm2c-generated code under sanitizers in CI. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1856,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1856,Split out from #1843,Split out from #1843,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1856,2022-03-09T04:37:30Z,2022-03-09T06:36:44Z,2022-03-10T11:53:39Z,MERGED,True,4,0,2,https://github.com/sbc100,Build and run wasm2c-generated code under sanitizers in CI. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1856,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1856#issuecomment-1062547466,Split out from #1843,"@keithw @shravanrn.  This is needed if the wasm2c tests are going to use the libwam-rt that is build via cmake, but should also be good for keep undefined behaviour out the wasm2c-generated code I hope.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1856,2022-03-09T04:37:30Z,2022-03-09T06:36:44Z,2022-03-10T11:53:39Z,MERGED,True,4,0,2,https://github.com/sbc100,Build and run wasm2c-generated code under sanitizers in CI. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1856,https://github.com/keithw,3,https://github.com/WebAssembly/wabt/pull/1856#issuecomment-1062587159,Split out from #1843,"Sounds great to me, although if there's a worry about adversarial WebAssembly triggering UB in wasm2c-generated code, I'm not sure if the spec tests are ""adversarial enough."" It would be great to have a fuzzer in oss-fuzz that tests wasm2c and the wasm2c-generated code. Right now the only fuzz target is for wabt::ReadBinaryIr.",True,{'THUMBS_UP': ['https://github.com/sbc100']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1856,2022-03-09T04:37:30Z,2022-03-09T06:36:44Z,2022-03-10T11:53:39Z,MERGED,True,4,0,2,https://github.com/sbc100,Build and run wasm2c-generated code under sanitizers in CI. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1856,https://github.com/shravanrn,4,https://github.com/WebAssembly/wabt/pull/1856#issuecomment-1063975468,Split out from #1843,sgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1857,2022-03-09T06:45:21Z,2022-03-09T07:40:05Z,2022-03-09T07:40:06Z,MERGED,True,22,5,3,https://github.com/sbc100,Improve wasm2c example update process. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1857,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1857,Followup to #1851.,Followup to #1851.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1859,2022-03-10T00:45:25Z,2022-03-11T17:52:45Z,2022-03-11T17:52:45Z,MERGED,True,330,84,2,https://github.com/sbc100,wasm-objdump: support extended const expressions,1,[],https://github.com/WebAssembly/wabt/pull/1859,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1859,"As an example of what this looks like in practice I have a modified version of llvm
that uses extended const expressions and it produces segments that look like this
when output by objdump:
- segment[2] <.bss> memory=0 size=1720 - init (global.get 1 <__memory_base>, i32.const 720, i32.add)

Its not the most elegent, and has to be read in reverse polish notation style, but for the current set
of mostly trivial const expressions I think it suffices.
I we much more complex expressions we may need to revisit.","As an example of what this looks like in practice I have a modified version of llvm
that uses extended const expressions and it produces segments that look like this
when output by objdump:
- segment[2] <.bss> memory=0 size=1720 - init (global.get 1 <__memory_base>, i32.const 720, i32.add)

Its not the most elegent, and has to be read in reverse polish notation style, but for the current set
of mostly trivial const expressions I think it suffices.
I we much more complex expressions we may need to revisit.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1860,2022-03-10T11:07:41Z,,2022-03-15T20:25:12Z,OPEN,False,8,2,3,https://github.com/zherczeg,Use a shared null object for all Stores.,1,[],https://github.com/WebAssembly/wabt/pull/1860,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1860,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1860,2022-03-10T11:07:41Z,,2022-03-15T20:25:12Z,OPEN,False,8,2,3,https://github.com/zherczeg,Use a shared null object for all Stores.,1,[],https://github.com/WebAssembly/wabt/pull/1860,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1860#issuecomment-1065318360,,"What is the goal of this change?  Is it an optimization or something about being able to share this object between stores?
If its an optimization then I would ask why such micro-optimizations are needed?   Are you huge number of stores?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1860,2022-03-10T11:07:41Z,,2022-03-15T20:25:12Z,OPEN,False,8,2,3,https://github.com/zherczeg,Use a shared null object for all Stores.,1,[],https://github.com/WebAssembly/wabt/pull/1860,https://github.com/zherczeg,3,https://github.com/WebAssembly/wabt/pull/1860#issuecomment-1065879445,,"It is a simple optimization. If you think this is unnecessary, I can close the PR. I would like to help improving the interpreter, is there any task which is useful for you? I would focus on garbage collection and memory, but I can help with other things.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1860,2022-03-10T11:07:41Z,,2022-03-15T20:25:12Z,OPEN,False,8,2,3,https://github.com/zherczeg,Use a shared null object for all Stores.,1,[],https://github.com/WebAssembly/wabt/pull/1860,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1860#issuecomment-1065896311,,"It is a simple optimization. If you think this is unnecessary, I can close the PR. I would like to help improving the interpreter, is there any task which is useful for you? I would focus on garbage collection and memory, but I can help with other things.

If the optimization is to avoid the bytes needed to represent NULL in each store I do think it might be premature, yes.   I imagine this is a couple of words of memory per-store?  But I don't know if anyone who uses the wabt interpreter on a scale where that would matter.
If you are interested in helping out wabt in general what would be great!   Let me go through the open issues and prioritize some of them and get back to you.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1860,2022-03-10T11:07:41Z,,2022-03-15T20:25:12Z,OPEN,False,8,2,3,https://github.com/zherczeg,Use a shared null object for all Stores.,1,[],https://github.com/WebAssembly/wabt/pull/1860,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1860#issuecomment-1066199435,,If are you interested in helping out with GC in general we could use some help workon and merging the work that @binji started in to get the GC proposal implemented: #1257,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1860,2022-03-10T11:07:41Z,,2022-03-15T20:25:12Z,OPEN,False,8,2,3,https://github.com/zherczeg,Use a shared null object for all Stores.,1,[],https://github.com/WebAssembly/wabt/pull/1860,https://github.com/zherczeg,6,https://github.com/WebAssembly/wabt/pull/1860#issuecomment-1066412844,,"Thank you for the suggestion. At first sight it looks like it adds a new struct / array related code. The work looks quite a big, and does a lot of different things. Is it possible to split this into well defined subtasks? I see references to draft documents. Is there a final version available somewhere?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1860,2022-03-10T11:07:41Z,,2022-03-15T20:25:12Z,OPEN,False,8,2,3,https://github.com/zherczeg,Use a shared null object for all Stores.,1,[],https://github.com/WebAssembly/wabt/pull/1860,https://github.com/sbc100,7,https://github.com/WebAssembly/wabt/pull/1860#issuecomment-1066909968,,"Thank you for the suggestion. At first sight it looks like it adds a new struct / array related code. The work looks quite a big, and does a lot of different things. Is it possible to split this into well defined subtasks? I see references to draft documents. Is there a final version available somewhere?

The GC proposal is still in flight but recently reached stage 2 so is less likely to have huge changes going forward.
But yes, I think it pretty large amount of work.    There are certainly many smaller issues in wabt that we could have you look at.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1860,2022-03-10T11:07:41Z,,2022-03-15T20:25:12Z,OPEN,False,8,2,3,https://github.com/zherczeg,Use a shared null object for all Stores.,1,[],https://github.com/WebAssembly/wabt/pull/1860,https://github.com/zherczeg,8,https://github.com/WebAssembly/wabt/pull/1860#issuecomment-1068431022,,"I am ok working on this but I would prefer to do incremental changes rather than a huge patch, Something like introducing the support of some opcodes, and adding tests for them. I am still new here and needs to learn a lot.
This document mentions two prerequisites:
https://github.com/WebAssembly/gc/blob/master/proposals/gc/MVP.md
Are these supported? If not, and not too complicated, maybe I could try to do them. But I am open to any ideas.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1860,2022-03-10T11:07:41Z,,2022-03-15T20:25:12Z,OPEN,False,8,2,3,https://github.com/zherczeg,Use a shared null object for all Stores.,1,[],https://github.com/WebAssembly/wabt/pull/1860,https://github.com/sbc100,9,https://github.com/WebAssembly/wabt/pull/1860#issuecomment-1068434981,,"Another useful task that could be more reasonable in size would be to update the testsuite repo (using this script: https://github.com/WebAssembly/testsuite/blob/main/update-testsuite.sh) and then update the submodule dependency in wabt, and then run ./test/update-spec-tests.py here in wabt, and fix any issues that come out of that.
That process bascially ensure that wabt stays to-to-date with any specs that it purports to support.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1861,2022-03-10T11:36:54Z,,2022-03-10T18:19:55Z,OPEN,False,24401,9039,618,https://github.com/shravanrn,Rebase the rlbox repo,2,[],https://github.com/WebAssembly/wabt/pull/1861,https://github.com/shravanrn,1,https://github.com/WebAssembly/wabt/pull/1861,"Rebasing PR per our discussion
@sbc100 Would it be possible to get write access to the rlbox branch in the wabt repo?","Rebasing PR per our discussion
@sbc100 Would it be possible to get write access to the rlbox branch in the wabt repo?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1861,2022-03-10T11:36:54Z,,2022-03-10T18:19:55Z,OPEN,False,24401,9039,618,https://github.com/shravanrn,Rebase the rlbox repo,2,[],https://github.com/WebAssembly/wabt/pull/1861,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1861#issuecomment-1064276544,"Rebasing PR per our discussion
@sbc100 Would it be possible to get write access to the rlbox branch in the wabt repo?",Done. I gave you write access the whole repo (couldn't figure out how to do it on just one branch).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1861,2022-03-10T11:36:54Z,,2022-03-10T18:19:55Z,OPEN,False,24401,9039,618,https://github.com/shravanrn,Rebase the rlbox repo,2,[],https://github.com/WebAssembly/wabt/pull/1861,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1861#issuecomment-1064277838,"Rebasing PR per our discussion
@sbc100 Would it be possible to get write access to the rlbox branch in the wabt repo?","So iirc this gets rlbox up-to-date with main?
Since it doesn't rewrite history but adds to it perheps it should be called the change should be called something like ""Merge main into rlbox"" to ""rlbox: merge recent changes from main""?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1861,2022-03-10T11:36:54Z,,2022-03-10T18:19:55Z,OPEN,False,24401,9039,618,https://github.com/shravanrn,Rebase the rlbox repo,2,[],https://github.com/WebAssembly/wabt/pull/1861,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1861#issuecomment-1064279278,"Rebasing PR per our discussion
@sbc100 Would it be possible to get write access to the rlbox branch in the wabt repo?","Also, I'm guessing we don't expect the tests to pass on this branch yet?  (I think that OK for now since IIUC they have not be passing previously, and our near term goal is to get them passing?)
BTW do you know up to which revision in main this gets you?  Maybe worth nothing that in the description?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1862,2022-03-11T01:02:35Z,2022-03-11T01:26:18Z,2022-03-11T01:26:19Z,MERGED,True,59,18,2,https://github.com/sbc100,wasm-strip: Add support for -o argument,1,[],https://github.com/WebAssembly/wabt/pull/1862,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1862,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1866,2022-03-14T20:27:07Z,2022-03-17T05:28:57Z,2022-03-17T05:28:58Z,MERGED,True,358,288,9,https://github.com/sbc100,wasm-objdump: Improve disassembly of call_indirect,1,[],https://github.com/WebAssembly/wabt/pull/1866,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1866,"Use the text format convention of putting the table before the
type.  Also track type names so they can be reported along with
the table name, if available.
Fixes: #1865","Use the text format convention of putting the table before the
type.  Also track type names so they can be reported along with
the table name, if available.
Fixes: #1865",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1866,2022-03-14T20:27:07Z,2022-03-17T05:28:57Z,2022-03-17T05:28:58Z,MERGED,True,358,288,9,https://github.com/sbc100,wasm-objdump: Improve disassembly of call_indirect,1,[],https://github.com/WebAssembly/wabt/pull/1866,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1866#issuecomment-1068496176,"Use the text format convention of putting the table before the
type.  Also track type names so they can be reported along with
the table name, if available.
Fixes: #1865",@gerritsangel,True,{'THUMBS_UP': ['https://github.com/gerritsangel']}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1869,2022-03-18T19:04:16Z,2022-03-18T20:35:32Z,2022-03-18T21:10:50Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.28,1,[],https://github.com/WebAssembly/wabt/pull/1869,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1869,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1869,2022-03-18T19:04:16Z,2022-03-18T20:35:32Z,2022-03-18T21:10:50Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.28,1,[],https://github.com/WebAssembly/wabt/pull/1869,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1869#issuecomment-1072798080,,lgtm,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1870,2022-03-18T20:37:55Z,2022-03-18T21:11:34Z,2022-03-18T21:11:35Z,MERGED,True,4,6,1,https://github.com/sbc100,Use CMAKE_CXX_STANDARD and bump cmake minimum version to 3.1,1,[],https://github.com/WebAssembly/wabt/pull/1870,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1870,See https://cmake.org/cmake/help/latest/variable/CMAKE_CXX_STANDARD.html,See https://cmake.org/cmake/help/latest/variable/CMAKE_CXX_STANDARD.html,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1871,2022-03-22T21:07:53Z,2022-03-23T22:09:19Z,2022-03-23T22:09:20Z,MERGED,True,12,31,5,https://github.com/sbc100,Allow binary reader to skip function bodies. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1871,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1871,"This is purely a performance optimization for wasm-objdump since it
doesn't always need to decode function bodies.
For a very large wasm file that I was testing this takes the time taken
for wasm-objdump -h from 8.6s to 1.5s.","This is purely a performance optimization for wasm-objdump since it
doesn't always need to decode function bodies.
For a very large wasm file that I was testing this takes the time taken
for wasm-objdump -h from 8.6s to 1.5s.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1872,2022-03-28T12:13:36Z,2022-03-30T15:12:41Z,2022-03-30T19:18:46Z,MERGED,True,15,14,5,https://github.com/zherczeg,Update testsuite.,1,[],https://github.com/WebAssembly/wabt/pull/1872,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1872,"The update depends on WebAssembly/testsuite#59
I did some stupid things, but at least I have learnt things about the project structure :)","The update depends on WebAssembly/testsuite#59
I did some stupid things, but at least I have learnt things about the project structure :)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1872,2022-03-28T12:13:36Z,2022-03-30T15:12:41Z,2022-03-30T19:18:46Z,MERGED,True,15,14,5,https://github.com/zherczeg,Update testsuite.,1,[],https://github.com/WebAssembly/wabt/pull/1872,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1872#issuecomment-1080914474,"The update depends on WebAssembly/testsuite#59
I did some stupid things, but at least I have learnt things about the project structure :)","I'm a little confusing how the CI was able to run at all given that WebAssembly/testsuite#59 had not landed at the time... how were you able to point to a commit in that repo that hadn't landed?
The commit that you use here is 4295b49daa2cb920d7e524f64ae8c25a21fef19c which is not the actual commit that landed (which was d42da0117f7a93c6a9127e2b9eec64749152c4c1).. so I don't know how CI could have worked for this PR?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1872,2022-03-28T12:13:36Z,2022-03-30T15:12:41Z,2022-03-30T19:18:46Z,MERGED,True,15,14,5,https://github.com/zherczeg,Update testsuite.,1,[],https://github.com/WebAssembly/wabt/pull/1872,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1872#issuecomment-1080917483,"The update depends on WebAssembly/testsuite#59
I did some stupid things, but at least I have learnt things about the project structure :)",Interesting .. it seems that its possible to do git fetch origin 4295b49daa2cb920d7e524f64ae8c25a21fef19c even when 4295b49daa2cb920d7e524f64ae8c25a21fef19c only ever part of a PR and never commit to origin..,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1872,2022-03-28T12:13:36Z,2022-03-30T15:12:41Z,2022-03-30T19:18:46Z,MERGED,True,15,14,5,https://github.com/zherczeg,Update testsuite.,1,[],https://github.com/WebAssembly/wabt/pull/1872,https://github.com/zherczeg,4,https://github.com/WebAssembly/wabt/pull/1872#issuecomment-1081427680,"The update depends on WebAssembly/testsuite#59
I did some stupid things, but at least I have learnt things about the project structure :)",I was surprised as well. I suspect it is cached somewhere and it is accessible until the git gc is called.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1872,2022-03-28T12:13:36Z,2022-03-30T15:12:41Z,2022-03-30T19:18:46Z,MERGED,True,15,14,5,https://github.com/zherczeg,Update testsuite.,1,[],https://github.com/WebAssembly/wabt/pull/1872,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1872#issuecomment-1081981519,"The update depends on WebAssembly/testsuite#59
I did some stupid things, but at least I have learnt things about the project structure :)","Can you update this PR, now that the upstream commit landed (it think it the commit SHA) is different.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1872,2022-03-28T12:13:36Z,2022-03-30T15:12:41Z,2022-03-30T19:18:46Z,MERGED,True,15,14,5,https://github.com/zherczeg,Update testsuite.,1,[],https://github.com/WebAssembly/wabt/pull/1872,https://github.com/zherczeg,6,https://github.com/WebAssembly/wabt/pull/1872#issuecomment-1082659331,"The update depends on WebAssembly/testsuite#59
I did some stupid things, but at least I have learnt things about the project structure :)","I did it in my last update. (curent id: d42da0117f7a93c6a9127e2b9eec64749152c4c1 ) I cannot see it in the github interface, I thought it shows the id somewhere.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1872,2022-03-28T12:13:36Z,2022-03-30T15:12:41Z,2022-03-30T19:18:46Z,MERGED,True,15,14,5,https://github.com/zherczeg,Update testsuite.,1,[],https://github.com/WebAssembly/wabt/pull/1872,https://github.com/zherczeg,7,https://github.com/WebAssembly/wabt/pull/1872#issuecomment-1083446895,"The update depends on WebAssembly/testsuite#59
I did some stupid things, but at least I have learnt things about the project structure :)",@sbc100 Thank you. Do you have any suggestion for the next task?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1872,2022-03-28T12:13:36Z,2022-03-30T15:12:41Z,2022-03-30T19:18:46Z,MERGED,True,15,14,5,https://github.com/zherczeg,Update testsuite.,1,[],https://github.com/WebAssembly/wabt/pull/1872,https://github.com/sbc100,8,https://github.com/WebAssembly/wabt/pull/1872#issuecomment-1083531413,"The update depends on WebAssembly/testsuite#59
I did some stupid things, but at least I have learnt things about the project structure :)",Maybe checkout the bug list?   This one looks fairly straight forward: #1822   (hopefully can be repro'd using -m32 flag).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1875,2022-03-31T05:53:35Z,2022-04-05T04:07:35Z,2022-04-05T04:07:52Z,MERGED,True,148,48,11,https://github.com/keithw,wasm2c: use signal handler to detect stack exhaustion,5,[],https://github.com/WebAssembly/wabt/pull/1875,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1875,"Use the signal-handler method to detect and recover from stack exhaustion, in addition to OOB accesses. This eliminates the global wasm_rt_call_stack_depth and the need to increment/decrement it on function entries and exits. Eliminating this global variable is helpful for module instancing and for running parallel invocations in a thread-safe manner.
(The catch is that MacOS doesn't seem to make it easy to distinguish OOB vs. exhaustion, so these trap codes have to be merged on MacOS and perhaps other BSDs. On Linux, it's possible to tell them apart based on the si_code of the SIGSEGV.)","Use the signal-handler method to detect and recover from stack exhaustion, in addition to OOB accesses. This eliminates the global wasm_rt_call_stack_depth and the need to increment/decrement it on function entries and exits. Eliminating this global variable is helpful for module instancing and for running parallel invocations in a thread-safe manner.
(The catch is that MacOS doesn't seem to make it easy to distinguish OOB vs. exhaustion, so these trap codes have to be merged on MacOS and perhaps other BSDs. On Linux, it's possible to tell them apart based on the si_code of the SIGSEGV.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1876,2022-03-31T17:42:38Z,,2022-04-15T21:39:27Z,OPEN,False,5,5,3,https://github.com/jacob-abraham,Allow Code Metadata Annotations to have arbitrary hex strings,2,[],https://github.com/WebAssembly/wabt/pull/1876,https://github.com/jacob-abraham,1,https://github.com/WebAssembly/wabt/pull/1876,"This PR adds support for arbitrary hex strings in code metadata annotations. Previously, the decoded strings would be checked as utf-8 strings. However, this prohibits something like (@metadata.code.trace_inst ""\FF\FF"") since 0xffff is not a valid utf-8 string.
Also modified existing roundtrip test to have a string that includes a non-utf8 character","This PR adds support for arbitrary hex strings in code metadata annotations. Previously, the decoded strings would be checked as utf-8 strings. However, this prohibits something like (@metadata.code.trace_inst ""\FF\FF"") since 0xffff is not a valid utf-8 string.
Also modified existing roundtrip test to have a string that includes a non-utf8 character",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1877,2022-03-31T21:40:48Z,,2022-05-15T05:58:07Z,OPEN,False,5894,783,26,https://github.com/keithw,wasm2c: implement the bulk memory operations proposal,7,[],https://github.com/WebAssembly/wabt/pull/1877,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1877,"(This PR is sequenced behind #1875 and #1814.)
Support bulk memory operations in wasm2c (the next step in the checklist at #1853 (comment)).
This PR also adds test coverage:

The current testsuite's elem.wast test (we had previously been using a pre-bulk-memory version in old-spec. These ""old"" tests are tracked at #1737.)
The current testsuite's bulk.wast, memory_copy.wast, memory_fill.wast, and memory_init.wast (these were added in the bulk-memory proposal)
The current multi-memory proposal's load.wast and store.wast tests (we had previously been omitting these because they require bulk-memory support, discussed at #1834. Another multi-memory tests requires reference-types support, and the final multi-memory test requires SIMD.)
Bulk-memory proposal versions of the imports.wast, linking.wast, table_copy.wast, and table_init.wast tests. (The current versions of these are waiting on reference-types support.)","(This PR is sequenced behind #1875 and #1814.)
Support bulk memory operations in wasm2c (the next step in the checklist at #1853 (comment)).
This PR also adds test coverage:

The current testsuite's elem.wast test (we had previously been using a pre-bulk-memory version in old-spec. These ""old"" tests are tracked at #1737.)
The current testsuite's bulk.wast, memory_copy.wast, memory_fill.wast, and memory_init.wast (these were added in the bulk-memory proposal)
The current multi-memory proposal's load.wast and store.wast tests (we had previously been omitting these because they require bulk-memory support, discussed at #1834. Another multi-memory tests requires reference-types support, and the final multi-memory test requires SIMD.)
Bulk-memory proposal versions of the imports.wast, linking.wast, table_copy.wast, and table_init.wast tests. (The current versions of these are waiting on reference-types support.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1877,2022-03-31T21:40:48Z,,2022-05-15T05:58:07Z,OPEN,False,5894,783,26,https://github.com/keithw,wasm2c: implement the bulk memory operations proposal,7,[],https://github.com/WebAssembly/wabt/pull/1877,https://github.com/keithw,2,https://github.com/WebAssembly/wabt/pull/1877#issuecomment-1088287399,"(This PR is sequenced behind #1875 and #1814.)
Support bulk memory operations in wasm2c (the next step in the checklist at #1853 (comment)).
This PR also adds test coverage:

The current testsuite's elem.wast test (we had previously been using a pre-bulk-memory version in old-spec. These ""old"" tests are tracked at #1737.)
The current testsuite's bulk.wast, memory_copy.wast, memory_fill.wast, and memory_init.wast (these were added in the bulk-memory proposal)
The current multi-memory proposal's load.wast and store.wast tests (we had previously been omitting these because they require bulk-memory support, discussed at #1834. Another multi-memory tests requires reference-types support, and the final multi-memory test requires SIMD.)
Bulk-memory proposal versions of the imports.wast, linking.wast, table_copy.wast, and table_init.wast tests. (The current versions of these are waiting on reference-types support.)","@binji Thank you muchly for the reviews! I wish GitHub had a way for us to mark the stacked PRs more clearly -- if possible, could we take these in order (so #1814 [module instancing] would be next, before we get to this one [bulk memory], reference types [#1887], and tolerating partly invalid modules [#1888])? Some of your comments here are things we'll need to fix in #1814 where the relevant commits originate, and then our plan was to rebase the later PRs on top of whatever ultimately lands.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1877,2022-03-31T21:40:48Z,,2022-05-15T05:58:07Z,OPEN,False,5894,783,26,https://github.com/keithw,wasm2c: implement the bulk memory operations proposal,7,[],https://github.com/WebAssembly/wabt/pull/1877,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1877#issuecomment-1100386671,"(This PR is sequenced behind #1875 and #1814.)
Support bulk memory operations in wasm2c (the next step in the checklist at #1853 (comment)).
This PR also adds test coverage:

The current testsuite's elem.wast test (we had previously been using a pre-bulk-memory version in old-spec. These ""old"" tests are tracked at #1737.)
The current testsuite's bulk.wast, memory_copy.wast, memory_fill.wast, and memory_init.wast (these were added in the bulk-memory proposal)
The current multi-memory proposal's load.wast and store.wast tests (we had previously been omitting these because they require bulk-memory support, discussed at #1834. Another multi-memory tests requires reference-types support, and the final multi-memory test requires SIMD.)
Bulk-memory proposal versions of the imports.wast, linking.wast, table_copy.wast, and table_init.wast tests. (The current versions of these are waiting on reference-types support.)","Sorry about reviewing out of order, I should have looked more closely at the description!",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1877,2022-03-31T21:40:48Z,,2022-05-15T05:58:07Z,OPEN,False,5894,783,26,https://github.com/keithw,wasm2c: implement the bulk memory operations proposal,7,[],https://github.com/WebAssembly/wabt/pull/1877,https://github.com/sbc100,4,https://github.com/WebAssembly/wabt/pull/1877#issuecomment-1112371853,"(This PR is sequenced behind #1875 and #1814.)
Support bulk memory operations in wasm2c (the next step in the checklist at #1853 (comment)).
This PR also adds test coverage:

The current testsuite's elem.wast test (we had previously been using a pre-bulk-memory version in old-spec. These ""old"" tests are tracked at #1737.)
The current testsuite's bulk.wast, memory_copy.wast, memory_fill.wast, and memory_init.wast (these were added in the bulk-memory proposal)
The current multi-memory proposal's load.wast and store.wast tests (we had previously been omitting these because they require bulk-memory support, discussed at #1834. Another multi-memory tests requires reference-types support, and the final multi-memory test requires SIMD.)
Bulk-memory proposal versions of the imports.wast, linking.wast, table_copy.wast, and table_init.wast tests. (The current versions of these are waiting on reference-types support.)",Does this change really depend on instancing ( #1814)?  I wonder if it can land first?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1877,2022-03-31T21:40:48Z,,2022-05-15T05:58:07Z,OPEN,False,5894,783,26,https://github.com/keithw,wasm2c: implement the bulk memory operations proposal,7,[],https://github.com/WebAssembly/wabt/pull/1877,https://github.com/keithw,5,https://github.com/WebAssembly/wabt/pull/1877#issuecomment-1112504465,"(This PR is sequenced behind #1875 and #1814.)
Support bulk memory operations in wasm2c (the next step in the checklist at #1853 (comment)).
This PR also adds test coverage:

The current testsuite's elem.wast test (we had previously been using a pre-bulk-memory version in old-spec. These ""old"" tests are tracked at #1737.)
The current testsuite's bulk.wast, memory_copy.wast, memory_fill.wast, and memory_init.wast (these were added in the bulk-memory proposal)
The current multi-memory proposal's load.wast and store.wast tests (we had previously been omitting these because they require bulk-memory support, discussed at #1834. Another multi-memory tests requires reference-types support, and the final multi-memory test requires SIMD.)
Bulk-memory proposal versions of the imports.wast, linking.wast, table_copy.wast, and table_init.wast tests. (The current versions of these are waiting on reference-types support.)","Does this change really depend on instancing ( #1814)? I wonder if it can land first?

It's possible, but it would be a bit of work to backport this to a pre-instanced implementation. I guess I thought we had coalesced on this ordering when we talked at #1853 (comment).
The major ""instance-related"" design decisions/consequences here are:


as before, we store each segment as a static const array at file scope (belonging to the ""module"" itself), but now each module instance has a boolean (in a bitfield) to track whether the corresponding segment has been dropped. (A drop instruction doesn't actually free memory here; even if all extent instances have dropped the segment, the caller might later create another instance of the same module...)


before bulk memory, it was possible to use element segments only at ""wasm2c-time"", to write the code that initializes the table as part of init_table, and then not actually store the element segment itself. But after bulk memory, the element segment has to be stored so that it can be used at runtime in a table.init. To do that, we have to be a bit careful in choosing the representation of the init expression, because at runtime the members of a funcref-type table are function instances (which close over the originating module), but when writing down the element segment itself (before any module has been instantiated with its imports), you don't know what the originating module will be. So, we represent the elem segment init expr as a local type index, a funcref, and an offset within the module instance structure to the originating module pointer. At runtime, the implementation of table_init converts this to a global type index, the funcref, and the actual pointer to the originating module (looked up from the module instance structure).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1877,2022-03-31T21:40:48Z,,2022-05-15T05:58:07Z,OPEN,False,5894,783,26,https://github.com/keithw,wasm2c: implement the bulk memory operations proposal,7,[],https://github.com/WebAssembly/wabt/pull/1877,https://github.com/sbc100,6,https://github.com/WebAssembly/wabt/pull/1877#issuecomment-1112506398,"(This PR is sequenced behind #1875 and #1814.)
Support bulk memory operations in wasm2c (the next step in the checklist at #1853 (comment)).
This PR also adds test coverage:

The current testsuite's elem.wast test (we had previously been using a pre-bulk-memory version in old-spec. These ""old"" tests are tracked at #1737.)
The current testsuite's bulk.wast, memory_copy.wast, memory_fill.wast, and memory_init.wast (these were added in the bulk-memory proposal)
The current multi-memory proposal's load.wast and store.wast tests (we had previously been omitting these because they require bulk-memory support, discussed at #1834. Another multi-memory tests requires reference-types support, and the final multi-memory test requires SIMD.)
Bulk-memory proposal versions of the imports.wast, linking.wast, table_copy.wast, and table_init.wast tests. (The current versions of these are waiting on reference-types support.)","Does this change really depend on instancing ( #1814)? I wonder if it can land first?

It's possible, but it would be a bit of work to backport this to a pre-instanced implementation. I guess I thought we had coalesced on this ordering when we talked at #1853 (comment).
The major ""instance-related"" design decisions/consequences here are:

as before, we store each segment as a static const array at file scope (belonging to the ""module"" itself), but now each module instance has a boolean (in a bitfield) to track whether the corresponding segment has been dropped. (A drop instruction doesn't actually free memory here; even if all extent instances have dropped the segment, the caller might later create another instance of the same module...)
before bulk memory, it was possible to use element segments only at ""wasm2c-time"", to write the code that initializes the table as part of init_table, and then not actually store the element segment itself. But after bulk memory, the element segment has to be stored so that it can be used at runtime in a table.init. To do that, we have to be a bit careful in choosing the representation of the init expression, because at runtime the members of a funcref-type table are function instances (which close over the originating module), but when writing down the element segment itself (before any module has been instantiated with its imports), you don't know what the originating module will be. So, we represent the elem segment init expr as a local type index, a funcref, and an offset within the module instance structure to the originating module pointer. At runtime, the implementation of table_init converts this to a global type index, the funcref, and the actual pointer to the originating module (looked up from the module instance structure).


No problem.  If its not a simple rebase we can keep the sequence as is",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1880,2022-04-01T13:11:58Z,2022-04-04T16:49:19Z,2022-04-04T16:49:19Z,MERGED,True,1,1,1,https://github.com/Fienne,Corrected a misspelled word in README.md file,1,[],https://github.com/WebAssembly/wabt/pull/1880,https://github.com/Fienne,1,https://github.com/WebAssembly/wabt/pull/1880,"Edited a word in line 311 from ""undefine"" to ""undefined""
This resolves #1879","Edited a word in line 311 from ""undefine"" to ""undefined""
This resolves #1879",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1880,2022-04-01T13:11:58Z,2022-04-04T16:49:19Z,2022-04-04T16:49:19Z,MERGED,True,1,1,1,https://github.com/Fienne,Corrected a misspelled word in README.md file,1,[],https://github.com/WebAssembly/wabt/pull/1880,https://github.com/Fienne,2,https://github.com/WebAssembly/wabt/pull/1880#issuecomment-1085886049,"Edited a word in line 311 from ""undefine"" to ""undefined""
This resolves #1879",@nickvidal This is what I could do.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1884,2022-04-03T09:51:15Z,2022-04-21T07:32:37Z,2022-04-21T08:35:14Z,MERGED,True,26,7,1,https://github.com/ereslibre,Continue dumping sections even when one is unknown,1,[],https://github.com/WebAssembly/wabt/pull/1884,https://github.com/ereslibre,1,https://github.com/WebAssembly/wabt/pull/1884,"This is relevant so that when we are dumping a module that contains
unknown sections that the current wabt tooling does not understand, we
still dump all the sections it understands, skipping (and printing an
error) about the unknown sections.
Before this change, we would print partial information, stopping at
the unknown section, without printing the rest of the sections that
wabt could potentially be able to understand.
Motivation: this happened when inspecting with wasm-objdump a module produced by wasmlink.
Output when having produced a module with an unknown section with current version:
$ wasm-objdump -x linked.wasm

linked.wasm:	file format wasm 0x1
000020b: error: invalid section code: 14

Section Details:

Type[7]:
 - type[0] (i32, i32, i32, i32) -> i32
 - type[1] (i32, i32) -> i32
 - type[2] (i32) -> nil
 - type[3] (i32, i64, i32, i32) -> i32
 - type[4] (i32, i32, i32, i32, i32, i64, i64, i32, i32) -> i32
 - type[5] (i32, i32, i32) -> i32
 - type[6] (i32) -> i32
Import[12]:
 - func[0] sig=0 <wasi_snapshot_preview1.fd_write> <- wasi_snapshot_preview1.fd_write
 - func[1] sig=1 <wasi_snapshot_preview1.environ_get> <- wasi_snapshot_preview1.environ_get
 - func[2] sig=1 <wasi_snapshot_preview1.environ_sizes_get> <- wasi_snapshot_preview1.environ_sizes_get
 - func[3] sig=2 <wasi_snapshot_preview1.proc_exit> <- wasi_snapshot_preview1.proc_exit
 - func[4] sig=1 <wasi_snapshot_preview1.fd_filestat_get> <- wasi_snapshot_preview1.fd_filestat_get
 - func[5] sig=0 <wasi_snapshot_preview1.fd_read> <- wasi_snapshot_preview1.fd_read
 - func[6] sig=3 <wasi_snapshot_preview1.fd_seek> <- wasi_snapshot_preview1.fd_seek
 - func[7] sig=4 <wasi_snapshot_preview1.path_open> <- wasi_snapshot_preview1.path_open
 - func[8] sig=5 <wasi_snapshot_preview1.path_unlink_file> <- wasi_snapshot_preview1.path_unlink_file
 - func[9] sig=6 <wasi_snapshot_preview1.fd_close> <- wasi_snapshot_preview1.fd_close
 - func[10] sig=1 <wasi_snapshot_preview1.fd_prestat_get> <- wasi_snapshot_preview1.fd_prestat_get
 - func[11] sig=5 <wasi_snapshot_preview1.fd_prestat_dir_name> <- wasi_snapshot_preview1.fd_prestat_dir_name

As you can see, it stops as soon as it finds an unknown section. With the proposed patch, the output looks like:
$ wasm-objdump -x linked.wasm

linked.wasm:	file format wasm 0x1
000020b: error: invalid section code: 14
0377572: error: invalid section code: 15
03775c2: error: invalid section code: 16

Section Details:

Type[7]:
 - type[0] (i32, i32, i32, i32) -> i32
 - type[1] (i32, i32) -> i32
 - type[2] (i32) -> nil
 - type[3] (i32, i64, i32, i32) -> i32
 - type[4] (i32, i32, i32, i32, i32, i64, i64, i32, i32) -> i32
 - type[5] (i32, i32, i32) -> i32
 - type[6] (i32) -> i32
Import[12]:
 - func[0] sig=0 <wasi_snapshot_preview1.fd_write> <- wasi_snapshot_preview1.fd_write
 - func[1] sig=1 <wasi_snapshot_preview1.environ_get> <- wasi_snapshot_preview1.environ_get
 - func[2] sig=1 <wasi_snapshot_preview1.environ_sizes_get> <- wasi_snapshot_preview1.environ_sizes_get
 - func[3] sig=2 <wasi_snapshot_preview1.proc_exit> <- wasi_snapshot_preview1.proc_exit
 - func[4] sig=1 <wasi_snapshot_preview1.fd_filestat_get> <- wasi_snapshot_preview1.fd_filestat_get
 - func[5] sig=0 <wasi_snapshot_preview1.fd_read> <- wasi_snapshot_preview1.fd_read
 - func[6] sig=3 <wasi_snapshot_preview1.fd_seek> <- wasi_snapshot_preview1.fd_seek
 - func[7] sig=4 <wasi_snapshot_preview1.path_open> <- wasi_snapshot_preview1.path_open
 - func[8] sig=5 <wasi_snapshot_preview1.path_unlink_file> <- wasi_snapshot_preview1.path_unlink_file
 - func[9] sig=6 <wasi_snapshot_preview1.fd_close> <- wasi_snapshot_preview1.fd_close
 - func[10] sig=1 <wasi_snapshot_preview1.fd_prestat_get> <- wasi_snapshot_preview1.fd_prestat_get
 - func[11] sig=5 <wasi_snapshot_preview1.fd_prestat_dir_name> <- wasi_snapshot_preview1.fd_prestat_dir_name
Export[5]:
 - memory[0] -> ""memory""
 - func[15] <_start> -> ""_start""
 - func[16] <main> -> ""main""
 - func[17] <canonical_abi_realloc> -> ""canonical_abi_realloc""
 - func[18] <canonical_abi_free> -> ""canonical_abi_free""
Elem[1]:
 - segment[0] flags=6 table=0 count=3 - init i32=0
  - elem[0] = func[12]
  - elem[1] = func[13]
  - elem[2] = func[14]

Thus, printing as much information as we can understand from the module. In terms of the C++ library the strict behavior and compatibility does not change, given ReadBinaryOptions was already exposed. We only make the case of ReadBinaryOptions::stop_on_first_error less strict when it's false.","This is relevant so that when we are dumping a module that contains
unknown sections that the current wabt tooling does not understand, we
still dump all the sections it understands, skipping (and printing an
error) about the unknown sections.
Before this change, we would print partial information, stopping at
the unknown section, without printing the rest of the sections that
wabt could potentially be able to understand.
Motivation: this happened when inspecting with wasm-objdump a module produced by wasmlink.
Output when having produced a module with an unknown section with current version:
$ wasm-objdump -x linked.wasm

linked.wasm:	file format wasm 0x1
000020b: error: invalid section code: 14

Section Details:

Type[7]:
 - type[0] (i32, i32, i32, i32) -> i32
 - type[1] (i32, i32) -> i32
 - type[2] (i32) -> nil
 - type[3] (i32, i64, i32, i32) -> i32
 - type[4] (i32, i32, i32, i32, i32, i64, i64, i32, i32) -> i32
 - type[5] (i32, i32, i32) -> i32
 - type[6] (i32) -> i32
Import[12]:
 - func[0] sig=0 <wasi_snapshot_preview1.fd_write> <- wasi_snapshot_preview1.fd_write
 - func[1] sig=1 <wasi_snapshot_preview1.environ_get> <- wasi_snapshot_preview1.environ_get
 - func[2] sig=1 <wasi_snapshot_preview1.environ_sizes_get> <- wasi_snapshot_preview1.environ_sizes_get
 - func[3] sig=2 <wasi_snapshot_preview1.proc_exit> <- wasi_snapshot_preview1.proc_exit
 - func[4] sig=1 <wasi_snapshot_preview1.fd_filestat_get> <- wasi_snapshot_preview1.fd_filestat_get
 - func[5] sig=0 <wasi_snapshot_preview1.fd_read> <- wasi_snapshot_preview1.fd_read
 - func[6] sig=3 <wasi_snapshot_preview1.fd_seek> <- wasi_snapshot_preview1.fd_seek
 - func[7] sig=4 <wasi_snapshot_preview1.path_open> <- wasi_snapshot_preview1.path_open
 - func[8] sig=5 <wasi_snapshot_preview1.path_unlink_file> <- wasi_snapshot_preview1.path_unlink_file
 - func[9] sig=6 <wasi_snapshot_preview1.fd_close> <- wasi_snapshot_preview1.fd_close
 - func[10] sig=1 <wasi_snapshot_preview1.fd_prestat_get> <- wasi_snapshot_preview1.fd_prestat_get
 - func[11] sig=5 <wasi_snapshot_preview1.fd_prestat_dir_name> <- wasi_snapshot_preview1.fd_prestat_dir_name

As you can see, it stops as soon as it finds an unknown section. With the proposed patch, the output looks like:
$ wasm-objdump -x linked.wasm

linked.wasm:	file format wasm 0x1
000020b: error: invalid section code: 14
0377572: error: invalid section code: 15
03775c2: error: invalid section code: 16

Section Details:

Type[7]:
 - type[0] (i32, i32, i32, i32) -> i32
 - type[1] (i32, i32) -> i32
 - type[2] (i32) -> nil
 - type[3] (i32, i64, i32, i32) -> i32
 - type[4] (i32, i32, i32, i32, i32, i64, i64, i32, i32) -> i32
 - type[5] (i32, i32, i32) -> i32
 - type[6] (i32) -> i32
Import[12]:
 - func[0] sig=0 <wasi_snapshot_preview1.fd_write> <- wasi_snapshot_preview1.fd_write
 - func[1] sig=1 <wasi_snapshot_preview1.environ_get> <- wasi_snapshot_preview1.environ_get
 - func[2] sig=1 <wasi_snapshot_preview1.environ_sizes_get> <- wasi_snapshot_preview1.environ_sizes_get
 - func[3] sig=2 <wasi_snapshot_preview1.proc_exit> <- wasi_snapshot_preview1.proc_exit
 - func[4] sig=1 <wasi_snapshot_preview1.fd_filestat_get> <- wasi_snapshot_preview1.fd_filestat_get
 - func[5] sig=0 <wasi_snapshot_preview1.fd_read> <- wasi_snapshot_preview1.fd_read
 - func[6] sig=3 <wasi_snapshot_preview1.fd_seek> <- wasi_snapshot_preview1.fd_seek
 - func[7] sig=4 <wasi_snapshot_preview1.path_open> <- wasi_snapshot_preview1.path_open
 - func[8] sig=5 <wasi_snapshot_preview1.path_unlink_file> <- wasi_snapshot_preview1.path_unlink_file
 - func[9] sig=6 <wasi_snapshot_preview1.fd_close> <- wasi_snapshot_preview1.fd_close
 - func[10] sig=1 <wasi_snapshot_preview1.fd_prestat_get> <- wasi_snapshot_preview1.fd_prestat_get
 - func[11] sig=5 <wasi_snapshot_preview1.fd_prestat_dir_name> <- wasi_snapshot_preview1.fd_prestat_dir_name
Export[5]:
 - memory[0] -> ""memory""
 - func[15] <_start> -> ""_start""
 - func[16] <main> -> ""main""
 - func[17] <canonical_abi_realloc> -> ""canonical_abi_realloc""
 - func[18] <canonical_abi_free> -> ""canonical_abi_free""
Elem[1]:
 - segment[0] flags=6 table=0 count=3 - init i32=0
  - elem[0] = func[12]
  - elem[1] = func[13]
  - elem[2] = func[14]

Thus, printing as much information as we can understand from the module. In terms of the C++ library the strict behavior and compatibility does not change, given ReadBinaryOptions was already exposed. We only make the case of ReadBinaryOptions::stop_on_first_error less strict when it's false.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1886,2022-04-04T08:18:27Z,,2022-05-25T19:47:44Z,OPEN,False,1,1,1,https://github.com/rathann,silence gcc-12 warnings,2,[],https://github.com/WebAssembly/wabt/pull/1886,https://github.com/rathann,1,https://github.com/WebAssembly/wabt/pull/1886,"This fixes the following test failures (#1885):
test/wasm2c/spec/call.txt
test/wasm2c/spec/names.txt
test/wasm2c/spec/skip-stack-guard-page.txt
- test/wasm2c/spec/call.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/call/call.0.c: In function ‘w2c_runaway’:
  +out/test/wasm2c/spec/call/call.0.c:945:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  945 | static void w2c_runaway(void) {
  +      |             ^~~~~~~~~~~
  +out/test/wasm2c/spec/call/call.0.c:947:3: note: recursive call
  +  947 |   w2c_runaway();
  +      |   ^~~~~~~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_call_0 -c out/test/wasm2c/spec/call/call.0.c -o out/test/wasm2c/spec/call/call.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -72/72 tests passed.

- test/wasm2c/spec/names.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,139 @@
  +In file included from out/test/wasm2c/spec/names/names.2.c:5:
  +out/test/wasm2c/spec/names/names.2.h:119:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  119 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:121:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  121 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.h:332:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  332 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:334:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  334 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:336:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  336 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:338:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  338 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4700:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4700 | u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4702:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4702 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:4913:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4913 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4915:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4915 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4917:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4917 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4919:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4919 | u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c: In function ‘init_exports’:
  +out/test/wasm2c/spec/names/names.2.c:5667:22: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5667 |   /* export: '<U+206A><U+206B><U+206C><U+206D><U+206E><U+206F>' */
  +      |                                                           ~~~~~~~~   ^
  +      |                                                           |    |     |
  +      |                                                           |    |     end of bidirectional context
  +      |                                                           |    U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                                                           U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5669:45: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5669 |   /* export: '<U+2061><U+2062><U+2063><U+2064>' */
  +      |                                                  ~                          ^
  +      |                                                  |           |  |           |
  +      |                                                  |           |  |           end of bidirectional context
  +      |                                                  |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                                                  |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                                                  U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:5880:18: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5880 |   /* export: '<U+202E>cba<U+202D>' */
  +      |               ~~~~~~~~           ^
  +      |               |                  |
  +      |               |                  end of bidirectional context
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5882:21: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5882 |   /* export: '<U+1D468>' */
  +      |               ~~~~~~~~~~~~  ^
  +      |               |             |
  +      |               |             end of bidirectional context
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5884:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5884 |   /* export: '<U+1D434>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5886:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5886 |   /* export: '<U+1D608>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_names_2 -c out/test/wasm2c/spec/names/names.2.c -o out/test/wasm2c/spec/names/names.2.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1,3 +0,0 @@
  -spectest.print_i32(42)
  -spectest.print_i32(123)
  -482/482 tests passed.

- test/wasm2c/spec/skip-stack-guard-page.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c: In function ‘w2c_f1’:
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:322:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  322 | static void w2c_f1(void) {
  +      |             ^~~~~~
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:458:3: note: recursive call
  +  458 |   w2c_f1();
  +      |   ^~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_skip_stack_guard_page_0 -c out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c -o out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -10/10 tests passed.","This fixes the following test failures (#1885):
test/wasm2c/spec/call.txt
test/wasm2c/spec/names.txt
test/wasm2c/spec/skip-stack-guard-page.txt
- test/wasm2c/spec/call.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/call/call.0.c: In function ‘w2c_runaway’:
  +out/test/wasm2c/spec/call/call.0.c:945:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  945 | static void w2c_runaway(void) {
  +      |             ^~~~~~~~~~~
  +out/test/wasm2c/spec/call/call.0.c:947:3: note: recursive call
  +  947 |   w2c_runaway();
  +      |   ^~~~~~~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_call_0 -c out/test/wasm2c/spec/call/call.0.c -o out/test/wasm2c/spec/call/call.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -72/72 tests passed.

- test/wasm2c/spec/names.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,139 @@
  +In file included from out/test/wasm2c/spec/names/names.2.c:5:
  +out/test/wasm2c/spec/names/names.2.h:119:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  119 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:121:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  121 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.h:332:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  332 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:334:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  334 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:336:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  336 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:338:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  338 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4700:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4700 | u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4702:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4702 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:4913:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4913 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4915:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4915 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4917:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4917 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4919:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4919 | u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c: In function ‘init_exports’:
  +out/test/wasm2c/spec/names/names.2.c:5667:22: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5667 |   /* export: '<U+206A><U+206B><U+206C><U+206D><U+206E><U+206F>' */
  +      |                                                           ~~~~~~~~   ^
  +      |                                                           |    |     |
  +      |                                                           |    |     end of bidirectional context
  +      |                                                           |    U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                                                           U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5669:45: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5669 |   /* export: '<U+2061><U+2062><U+2063><U+2064>' */
  +      |                                                  ~                          ^
  +      |                                                  |           |  |           |
  +      |                                                  |           |  |           end of bidirectional context
  +      |                                                  |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                                                  |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                                                  U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:5880:18: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5880 |   /* export: '<U+202E>cba<U+202D>' */
  +      |               ~~~~~~~~           ^
  +      |               |                  |
  +      |               |                  end of bidirectional context
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5882:21: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5882 |   /* export: '<U+1D468>' */
  +      |               ~~~~~~~~~~~~  ^
  +      |               |             |
  +      |               |             end of bidirectional context
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5884:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5884 |   /* export: '<U+1D434>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5886:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5886 |   /* export: '<U+1D608>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_names_2 -c out/test/wasm2c/spec/names/names.2.c -o out/test/wasm2c/spec/names/names.2.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1,3 +0,0 @@
  -spectest.print_i32(42)
  -spectest.print_i32(123)
  -482/482 tests passed.

- test/wasm2c/spec/skip-stack-guard-page.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c: In function ‘w2c_f1’:
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:322:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  322 | static void w2c_f1(void) {
  +      |             ^~~~~~
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:458:3: note: recursive call
  +  458 |   w2c_f1();
  +      |   ^~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_skip_stack_guard_page_0 -c out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c -o out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -10/10 tests passed.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1886,2022-04-04T08:18:27Z,,2022-05-25T19:47:44Z,OPEN,False,1,1,1,https://github.com/rathann,silence gcc-12 warnings,2,[],https://github.com/WebAssembly/wabt/pull/1886,https://github.com/keithw,2,https://github.com/WebAssembly/wabt/pull/1886#issuecomment-1093862280,"This fixes the following test failures (#1885):
test/wasm2c/spec/call.txt
test/wasm2c/spec/names.txt
test/wasm2c/spec/skip-stack-guard-page.txt
- test/wasm2c/spec/call.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/call/call.0.c: In function ‘w2c_runaway’:
  +out/test/wasm2c/spec/call/call.0.c:945:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  945 | static void w2c_runaway(void) {
  +      |             ^~~~~~~~~~~
  +out/test/wasm2c/spec/call/call.0.c:947:3: note: recursive call
  +  947 |   w2c_runaway();
  +      |   ^~~~~~~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_call_0 -c out/test/wasm2c/spec/call/call.0.c -o out/test/wasm2c/spec/call/call.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -72/72 tests passed.

- test/wasm2c/spec/names.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,139 @@
  +In file included from out/test/wasm2c/spec/names/names.2.c:5:
  +out/test/wasm2c/spec/names/names.2.h:119:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  119 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:121:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  121 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.h:332:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  332 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:334:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  334 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:336:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  336 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:338:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  338 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4700:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4700 | u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4702:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4702 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:4913:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4913 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4915:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4915 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4917:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4917 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4919:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4919 | u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c: In function ‘init_exports’:
  +out/test/wasm2c/spec/names/names.2.c:5667:22: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5667 |   /* export: '<U+206A><U+206B><U+206C><U+206D><U+206E><U+206F>' */
  +      |                                                           ~~~~~~~~   ^
  +      |                                                           |    |     |
  +      |                                                           |    |     end of bidirectional context
  +      |                                                           |    U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                                                           U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5669:45: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5669 |   /* export: '<U+2061><U+2062><U+2063><U+2064>' */
  +      |                                                  ~                          ^
  +      |                                                  |           |  |           |
  +      |                                                  |           |  |           end of bidirectional context
  +      |                                                  |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                                                  |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                                                  U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:5880:18: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5880 |   /* export: '<U+202E>cba<U+202D>' */
  +      |               ~~~~~~~~           ^
  +      |               |                  |
  +      |               |                  end of bidirectional context
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5882:21: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5882 |   /* export: '<U+1D468>' */
  +      |               ~~~~~~~~~~~~  ^
  +      |               |             |
  +      |               |             end of bidirectional context
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5884:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5884 |   /* export: '<U+1D434>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5886:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5886 |   /* export: '<U+1D608>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_names_2 -c out/test/wasm2c/spec/names/names.2.c -o out/test/wasm2c/spec/names/names.2.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1,3 +0,0 @@
  -spectest.print_i32(42)
  -spectest.print_i32(123)
  -482/482 tests passed.

- test/wasm2c/spec/skip-stack-guard-page.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c: In function ‘w2c_f1’:
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:322:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  322 | static void w2c_f1(void) {
  +      |             ^~~~~~
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:458:3: note: recursive call
  +  458 |   w2c_f1();
  +      |   ^~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_skip_stack_guard_page_0 -c out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c -o out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -10/10 tests passed.","This looks like a helpful fix, but I think it will need to work on the platforms that wasm2c is tested on. Unfortunately it doesn't seem like clang 13 or gcc 11 will tolerate -Wbidi-chars=none -Werror without bombing out. :-(
Some options seem to be:

make run-spec-wasm2c.py smarter so it only adds -Wbidi-chars=none to the command-line if the compiler is gcc 12
make wasm2c smarter so it doesn't emit these bidi control chars
maybe some easier strategy?

What do you think?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1886,2022-04-04T08:18:27Z,,2022-05-25T19:47:44Z,OPEN,False,1,1,1,https://github.com/rathann,silence gcc-12 warnings,2,[],https://github.com/WebAssembly/wabt/pull/1886,https://github.com/rathann,3,https://github.com/WebAssembly/wabt/pull/1886#issuecomment-1137103128,"This fixes the following test failures (#1885):
test/wasm2c/spec/call.txt
test/wasm2c/spec/names.txt
test/wasm2c/spec/skip-stack-guard-page.txt
- test/wasm2c/spec/call.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/call/call.0.c: In function ‘w2c_runaway’:
  +out/test/wasm2c/spec/call/call.0.c:945:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  945 | static void w2c_runaway(void) {
  +      |             ^~~~~~~~~~~
  +out/test/wasm2c/spec/call/call.0.c:947:3: note: recursive call
  +  947 |   w2c_runaway();
  +      |   ^~~~~~~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_call_0 -c out/test/wasm2c/spec/call/call.0.c -o out/test/wasm2c/spec/call/call.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -72/72 tests passed.

- test/wasm2c/spec/names.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,139 @@
  +In file included from out/test/wasm2c/spec/names/names.2.c:5:
  +out/test/wasm2c/spec/names/names.2.h:119:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  119 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:121:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  121 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.h:332:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  332 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:334:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  334 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:336:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  336 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:338:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  338 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4700:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4700 | u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4702:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4702 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:4913:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4913 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4915:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4915 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4917:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4917 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4919:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4919 | u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c: In function ‘init_exports’:
  +out/test/wasm2c/spec/names/names.2.c:5667:22: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5667 |   /* export: '<U+206A><U+206B><U+206C><U+206D><U+206E><U+206F>' */
  +      |                                                           ~~~~~~~~   ^
  +      |                                                           |    |     |
  +      |                                                           |    |     end of bidirectional context
  +      |                                                           |    U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                                                           U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5669:45: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5669 |   /* export: '<U+2061><U+2062><U+2063><U+2064>' */
  +      |                                                  ~                          ^
  +      |                                                  |           |  |           |
  +      |                                                  |           |  |           end of bidirectional context
  +      |                                                  |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                                                  |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                                                  U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:5880:18: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5880 |   /* export: '<U+202E>cba<U+202D>' */
  +      |               ~~~~~~~~           ^
  +      |               |                  |
  +      |               |                  end of bidirectional context
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5882:21: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5882 |   /* export: '<U+1D468>' */
  +      |               ~~~~~~~~~~~~  ^
  +      |               |             |
  +      |               |             end of bidirectional context
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5884:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5884 |   /* export: '<U+1D434>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5886:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5886 |   /* export: '<U+1D608>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_names_2 -c out/test/wasm2c/spec/names/names.2.c -o out/test/wasm2c/spec/names/names.2.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1,3 +0,0 @@
  -spectest.print_i32(42)
  -spectest.print_i32(123)
  -482/482 tests passed.

- test/wasm2c/spec/skip-stack-guard-page.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c: In function ‘w2c_f1’:
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:322:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  322 | static void w2c_f1(void) {
  +      |             ^~~~~~
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:458:3: note: recursive call
  +  458 |   w2c_f1();
  +      |   ^~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_skip_stack_guard_page_0 -c out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c -o out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -10/10 tests passed.","FWIW, I've just tested with the gcc-8.5.0 shipped with RHEL8 and it seems it accepts -Wbidi-chars=none but errors out on -Wno-tautological-constant-out-of-range-compare and -Wno-infinite-recursion. I think the best strategy would be to test if the current compiler supports each individual flag and using them only if it does.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1886,2022-04-04T08:18:27Z,,2022-05-25T19:47:44Z,OPEN,False,1,1,1,https://github.com/rathann,silence gcc-12 warnings,2,[],https://github.com/WebAssembly/wabt/pull/1886,https://github.com/keithw,4,https://github.com/WebAssembly/wabt/pull/1886#issuecomment-1137783316,"This fixes the following test failures (#1885):
test/wasm2c/spec/call.txt
test/wasm2c/spec/names.txt
test/wasm2c/spec/skip-stack-guard-page.txt
- test/wasm2c/spec/call.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/call/call.0.c: In function ‘w2c_runaway’:
  +out/test/wasm2c/spec/call/call.0.c:945:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  945 | static void w2c_runaway(void) {
  +      |             ^~~~~~~~~~~
  +out/test/wasm2c/spec/call/call.0.c:947:3: note: recursive call
  +  947 |   w2c_runaway();
  +      |   ^~~~~~~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_call_0 -c out/test/wasm2c/spec/call/call.0.c -o out/test/wasm2c/spec/call/call.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -72/72 tests passed.

- test/wasm2c/spec/names.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,139 @@
  +In file included from out/test/wasm2c/spec/names/names.2.c:5:
  +out/test/wasm2c/spec/names/names.2.h:119:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  119 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:121:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  121 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.h:332:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  332 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:334:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  +  334 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:336:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  336 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.h:338:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  +  338 | extern u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4700:38: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4700 | u32 (*WASM_RT_ADD_PREFIX(Z_ZEFZBFZAFZE2Z80Z8BZC2ZA0ZC2ZADZE2Z81ZA0ZE1Z9AZ80ZE2Z80ZAEZE2Z80ZADZ_iv))(void);
  +      |                             ~~~~~~   ^
  +      |                             |  |     |
  +      |                             |  |     end of bidirectional context
  +      |                             |  U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4702:55: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4702 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80Z8EZE2Z80Z8FZE2Z80Z91ZE2Z80ZA8ZE2Z80ZA9ZE2Z80ZAAZE2Z80ZABZE2Z80ZACZE2Z80ZAFZE2Z81ZA6ZE2Z81ZA7ZE2Z81ZA8ZE2Z81ZA9Z_iv))(void);
  +      |                            ~~~         ~~~~~~         ^
  +      |                            |           |  |           |
  +      |                            |           |  |           end of bidirectional context
  +      |                            |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                            |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                            U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:4913:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4913 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4915:22: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 4915 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZADabcZE2Z80ZAEZ_iv))(void);
  +      |             ~~~      ^
  +      |             |        |
  +      |             |        end of bidirectional context
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4917:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4917 | u32 (*WASM_RT_ADD_PREFIX(Z_ZE2Z80ZAEcbaZE2Z80ZADZ_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |             U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:4919:25: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 4919 | u32 (*WASM_RT_ADD_PREFIX(Z_ZF0Z9DZ91ZA8Z_iv))(void);
  +      |             ~~~   ~~~   ^
  +      |             |     |     |
  +      |             |     |     end of bidirectional context
  +      |             |     U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |             U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c: In function ‘init_exports’:
  +out/test/wasm2c/spec/names/names.2.c:5667:22: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5667 |   /* export: '<U+206A><U+206B><U+206C><U+206D><U+206E><U+206F>' */
  +      |                                                           ~~~~~~~~   ^
  +      |                                                           |    |     |
  +      |                                                           |    |     end of bidirectional context
  +      |                                                           |    U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |                                                           U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5669:45: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5669 |   /* export: '<U+2061><U+2062><U+2063><U+2064>' */
  +      |                                                  ~                          ^
  +      |                                                  |           |  |           |
  +      |                                                  |           |  |           end of bidirectional context
  +      |                                                  |           |  U+2067 (RIGHT-TO-LEFT ISOLATE)
  +      |                                                  |           U+2066 (LEFT-TO-RIGHT ISOLATE)
  +      |                                                  U+202A (LEFT-TO-RIGHT EMBEDDING)
  +out/test/wasm2c/spec/names/names.2.c:5880:18: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5880 |   /* export: '<U+202E>cba<U+202D>' */
  +      |               ~~~~~~~~           ^
  +      |               |                  |
  +      |               |                  end of bidirectional context
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5882:21: error: unpaired UTF-8 bidirectional control character detected [-Werror=bidi-chars=]
  + 5882 |   /* export: '<U+1D468>' */
  +      |               ~~~~~~~~~~~~  ^
  +      |               |             |
  +      |               |             end of bidirectional context
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5884:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5884 |   /* export: '<U+1D434>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202E (RIGHT-TO-LEFT OVERRIDE)
  +      |               U+202D (LEFT-TO-RIGHT OVERRIDE)
  +out/test/wasm2c/spec/names/names.2.c:5886:24: error: unpaired UTF-8 bidirectional control characters detected [-Werror=bidi-chars=]
  + 5886 |   /* export: '<U+1D608>' */
  +      |               ~~~~~~~~~~~~~    ^
  +      |               |          |     |
  +      |               |          |     end of bidirectional context
  +      |               |          U+202D (LEFT-TO-RIGHT OVERRIDE)
  +      |               U+202E (RIGHT-TO-LEFT OVERRIDE)
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_names_2 -c out/test/wasm2c/spec/names/names.2.c -o out/test/wasm2c/spec/names/names.2.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1,3 +0,0 @@
  -spectest.print_i32(42)
  -spectest.print_i32(123)
  -482/482 tests passed.

- test/wasm2c/spec/skip-stack-guard-page.txt
  expected error code 0, got 1.
  STDERR MISMATCH:
  --- expected
  +++ actual
  @@ -0,0 +1,21 @@
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c: In function ‘w2c_f1’:
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:322:13: error: infinite recursion detected [-Werror=infinite-recursion]
  +  322 | static void w2c_f1(void) {
  +      |             ^~~~~~
  +out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c:458:3: note: recursive call
  +  458 |   w2c_f1();
  +      |   ^~~~~~~~
  +At top level:
  +cc1: note: unrecognized command-line option ‘-Wno-tautological-constant-out-of-range-compare’ may have been intended to silence earlier diagnostics
  +cc1: all warnings being treated as errors
  +Traceback (most recent call last):
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 497, in <module>
  +    sys.exit(main(sys.argv[1:]))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 471, in main
  +    o_filenames.append(Compile(cc, c_filename, out_dir, includes, defines))
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/run-spec-wasm2c.py"", line 357, in Compile
  +    cc.RunWithArgsForStdout(*args)
  +  File ""/builddir/build/BUILD/wabt-1.0.28/test/utils.py"", line 88, in RunWithArgsForStdout
  +    raise error
  +utils.Error: Error running ""cc -I/builddir/build/BUILD/wabt-1.0.28/wasm2c -DWASM_RT_MODULE_PREFIX=Z_skip_stack_guard_page_0 -c out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.c -o out/test/wasm2c/spec/skip-stack-guard-page/skip-stack-guard-page.0.o -Wall -Werror -Wno-unused -Wno-tautological-constant-out-of-range-compare -std=c99 -D_DEFAULT_SOURCE"" (1):
  +None
  STDOUT MISMATCH:
  --- expected
  +++ actual
  @@ -1 +0,0 @@
  -10/10 tests passed.",That strategy makes sense to me...,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1887,2022-04-04T11:31:59Z,,2022-06-04T05:33:52Z,OPEN,False,2127,5295,51,https://github.com/keithw,wasm2c: implement the reference-types proposal,10,[],https://github.com/WebAssembly/wabt/pull/1887,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1887,"(This PR is sequenced behind #1875, #1814, and #1877.)
This PR adds support for the reference-types proposal (per #1853 (comment)). This makes it possible to run all of the non-SIMD spec tests in the current testsuite.
Closes #1737.","(This PR is sequenced behind #1875, #1814, and #1877.)
This PR adds support for the reference-types proposal (per #1853 (comment)). This makes it possible to run all of the non-SIMD spec tests in the current testsuite.
Closes #1737.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1888,2022-04-04T17:15:31Z,2022-04-13T18:49:15Z,2022-04-13T18:49:15Z,CLOSED,False,2207,5401,52,https://github.com/keithw,"wasm2c: support final (non-SIMD) spec tests by adding an unsafe ""ignore validation failure"" flag",21,[],https://github.com/WebAssembly/wabt/pull/1888,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1888,"(This PR is sequenced behind #1875, #1814, #1877, and #1887.)
To pass the ref_func.wasm and unreached-valid.wast tests (the final missing non-SIMD spec tests in the core testsuite), wasm2c needs to be willing to continue translating a module that has failed to validate. (The interpreter doesn't seem to enforce validity as strictly.)
Expose this behavior in wasm2c behind a --unsafe-ignore-validation-failure flag, and add the final two missing tests.","(This PR is sequenced behind #1875, #1814, #1877, and #1887.)
To pass the ref_func.wasm and unreached-valid.wast tests (the final missing non-SIMD spec tests in the core testsuite), wasm2c needs to be willing to continue translating a module that has failed to validate. (The interpreter doesn't seem to enforce validity as strictly.)
Expose this behavior in wasm2c behind a --unsafe-ignore-validation-failure flag, and add the final two missing tests.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1888,2022-04-04T17:15:31Z,2022-04-13T18:49:15Z,2022-04-13T18:49:15Z,CLOSED,False,2207,5401,52,https://github.com/keithw,"wasm2c: support final (non-SIMD) spec tests by adding an unsafe ""ignore validation failure"" flag",21,[],https://github.com/WebAssembly/wabt/pull/1888,https://github.com/keithw,2,https://github.com/WebAssembly/wabt/pull/1888#issuecomment-1098374312,"(This PR is sequenced behind #1875, #1814, #1877, and #1887.)
To pass the ref_func.wasm and unreached-valid.wast tests (the final missing non-SIMD spec tests in the core testsuite), wasm2c needs to be willing to continue translating a module that has failed to validate. (The interpreter doesn't seem to enforce validity as strictly.)
Expose this behavior in wasm2c behind a --unsafe-ignore-validation-failure flag, and add the final two missing tests.","I'm going to close this -- per #1894, the better approach is probably to fix the underlying issues that are causing these modules to fail validation. After d08b0d9, the only remaining case involves validating br_table in the unreached-valid.wast test (#1894 (comment)).",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1889,2022-04-04T23:49:49Z,,2022-04-05T02:03:17Z,OPEN,False,53,32,3,https://github.com/takikawa,Fix parsing for typed function reference types,1,[],https://github.com/WebAssembly/wabt/pull/1889,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1889,"Previously an indexed ref type was parsed as a Var, assuming that regular types would be represented as index vars and indexed ref types would be named vars. The names would be resolved to actual indices later in a separate pass.
Unfortunately, it's also possible for a ref type to be an indexed var that overlaps with a type (e.g., the type ""any"" which is 0x0 and the index 0 for the type (ref 0)).
This patch fixes the issue by returning both a Type and a Var from ParseValueType.
Edit: I simplified this patch to just solve the issue at hand instead of introducing a bigger re-organization, which I realized was a bad idea.
This PR will close #1881.","Previously an indexed ref type was parsed as a Var, assuming that regular types would be represented as index vars and indexed ref types would be named vars. The names would be resolved to actual indices later in a separate pass.
Unfortunately, it's also possible for a ref type to be an indexed var that overlaps with a type (e.g., the type ""any"" which is 0x0 and the index 0 for the type (ref 0)).
This patch fixes the issue by returning both a Type and a Var from ParseValueType.
Edit: I simplified this patch to just solve the issue at hand instead of introducing a bigger re-organization, which I realized was a bad idea.
This PR will close #1881.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1889,2022-04-04T23:49:49Z,,2022-04-05T02:03:17Z,OPEN,False,53,32,3,https://github.com/takikawa,Fix parsing for typed function reference types,1,[],https://github.com/WebAssembly/wabt/pull/1889,https://github.com/takikawa,2,https://github.com/WebAssembly/wabt/pull/1889#issuecomment-1088129611,"Previously an indexed ref type was parsed as a Var, assuming that regular types would be represented as index vars and indexed ref types would be named vars. The names would be resolved to actual indices later in a separate pass.
Unfortunately, it's also possible for a ref type to be an indexed var that overlaps with a type (e.g., the type ""any"" which is 0x0 and the index 0 for the type (ref 0)).
This patch fixes the issue by returning both a Type and a Var from ParseValueType.
Edit: I simplified this patch to just solve the issue at hand instead of introducing a bigger re-organization, which I realized was a bad idea.
This PR will close #1881.",Pinging @dbezhetskov in case you have any thoughts on this approach too. :),True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1892,2022-04-11T09:33:43Z,,2022-04-28T06:45:08Z,OPEN,False,25,11,1,https://github.com/zherczeg,Throw error when a reference is not found.,1,[],https://github.com/WebAssembly/wabt/pull/1892,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1892,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1892,2022-04-11T09:33:43Z,,2022-04-28T06:45:08Z,OPEN,False,25,11,1,https://github.com/zherczeg,Throw error when a reference is not found.,1,[],https://github.com/WebAssembly/wabt/pull/1892,https://github.com/zherczeg,2,https://github.com/WebAssembly/wabt/pull/1892#issuecomment-1094816501,,"This is an attempt to fix #1890
The patch enhances ResolveTypeName to return with an error. However location info is missing, and tests are also missing. If this is the right way to fix this please let me know.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1894,2022-04-12T21:10:17Z,2022-04-13T18:31:46Z,2022-04-13T21:32:47Z,MERGED,True,8,15,2,https://github.com/takikawa,Fix checking of ref.func index declarations,2,[],https://github.com/WebAssembly/wabt/pull/1894,https://github.com/takikawa,1,https://github.com/WebAssembly/wabt/pull/1894,"The validation was overly strict for ref.func index uses. In the spec, the ref index just needs to appear in

the set of function indices occurring in the module, except in its functions or start function.

(https://webassembly.github.io/spec/core/valid/modules.html#valid-module)
which includes uses in the global and export sections. There were some test failures in the spec tests that were fixed by this, so the PR also changes test expectations.
Fixes issue #1893","The validation was overly strict for ref.func index uses. In the spec, the ref index just needs to appear in

the set of function indices occurring in the module, except in its functions or start function.

(https://webassembly.github.io/spec/core/valid/modules.html#valid-module)
which includes uses in the global and export sections. There were some test failures in the spec tests that were fixed by this, so the PR also changes test expectations.
Fixes issue #1893",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1894,2022-04-12T21:10:17Z,2022-04-13T18:31:46Z,2022-04-13T21:32:47Z,MERGED,True,8,15,2,https://github.com/takikawa,Fix checking of ref.func index declarations,2,[],https://github.com/WebAssembly/wabt/pull/1894,https://github.com/keithw,2,https://github.com/WebAssembly/wabt/pull/1894#issuecomment-1097301494,"The validation was overly strict for ref.func index uses. In the spec, the ref index just needs to appear in

the set of function indices occurring in the module, except in its functions or start function.

(https://webassembly.github.io/spec/core/valid/modules.html#valid-module)
which includes uses in the global and export sections. There were some test failures in the spec tests that were fixed by this, so the PR also changes test expectations.
Fixes issue #1893","This looks right to me (you may have seen #1888 where I tried to work around this).
What do you think about https://github.com/WebAssembly/wabt/blob/main/test/spec/unreached-valid.txt , which seems to be the other test with failed validation?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1894,2022-04-12T21:10:17Z,2022-04-13T18:31:46Z,2022-04-13T21:32:47Z,MERGED,True,8,15,2,https://github.com/takikawa,Fix checking of ref.func index declarations,2,[],https://github.com/WebAssembly/wabt/pull/1894,https://github.com/takikawa,3,https://github.com/WebAssembly/wabt/pull/1894#issuecomment-1097489677,"The validation was overly strict for ref.func index uses. In the spec, the ref index just needs to appear in

the set of function indices occurring in the module, except in its functions or start function.

(https://webassembly.github.io/spec/core/valid/modules.html#valid-module)
which includes uses in the global and export sections. There were some test failures in the spec tests that were fixed by this, so the PR also changes test expectations.
Fixes issue #1893","What do you think about https://github.com/WebAssembly/wabt/blob/main/test/spec/unreached-valid.txt , which seems to be the other test with failed validation?

The problem there seems to be that the validation semantics of br_table was not totally clear (see WebAssembly/relaxed-dead-code-validation#4) and had been revised in 2021. I think in any case, wabt should change to implement the current algorithm in https://webassembly.github.io/spec/core/appendix/algorithm.html#validation-of-opcode-sequences for br_table, which only checks that the current stack matches each target, rather than that all targets have equal type.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1894,2022-04-12T21:10:17Z,2022-04-13T18:31:46Z,2022-04-13T21:32:47Z,MERGED,True,8,15,2,https://github.com/takikawa,Fix checking of ref.func index declarations,2,[],https://github.com/WebAssembly/wabt/pull/1894,https://github.com/takikawa,4,https://github.com/WebAssembly/wabt/pull/1894#issuecomment-1097490714,"The validation was overly strict for ref.func index uses. In the spec, the ref index just needs to appear in

the set of function indices occurring in the module, except in its functions or start function.

(https://webassembly.github.io/spec/core/valid/modules.html#valid-module)
which includes uses in the global and export sections. There were some test failures in the spec tests that were fixed by this, so the PR also changes test expectations.
Fixes issue #1893","Thanks for working on this. I do wonder if we are lacking in test coverage (in the spec repo) given that the overall number of passing/failing tests stayed the same here (only the specific outout text changed).

Thanks for the feedback, I think I've addressed the comments.
Re: tests, I think the issue here is that a spec test command like (module ...) that doesn't assert anything and just checks that the module parses/validates doesn't currently count as a pass/fail test case for the wabt spec test runner.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1894,2022-04-12T21:10:17Z,2022-04-13T18:31:46Z,2022-04-13T21:32:47Z,MERGED,True,8,15,2,https://github.com/takikawa,Fix checking of ref.func index declarations,2,[],https://github.com/WebAssembly/wabt/pull/1894,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1894#issuecomment-1098358998,"The validation was overly strict for ref.func index uses. In the spec, the ref index just needs to appear in

the set of function indices occurring in the module, except in its functions or start function.

(https://webassembly.github.io/spec/core/valid/modules.html#valid-module)
which includes uses in the global and export sections. There were some test failures in the spec tests that were fixed by this, so the PR also changes test expectations.
Fixes issue #1893","Thanks for working on this. I do wonder if we are lacking in test coverage (in the spec repo) given that the overall number of passing/failing tests stayed the same here (only the specific outout text changed).

Thanks for the feedback, I think I've addressed the comments.
Re: tests, I think the issue here is that a spec test command like (module ...) that doesn't assert anything and just checks that the module parses/validates doesn't currently count as a pass/fail test case for the wabt spec test runner.

OK, that sounds like maybe something we should fix but is not related to this change.
Are you saying that if wabt can fail to validate such a (module ...) and that won't case a test failure?   That sounds like something we should fix.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1894,2022-04-12T21:10:17Z,2022-04-13T18:31:46Z,2022-04-13T21:32:47Z,MERGED,True,8,15,2,https://github.com/takikawa,Fix checking of ref.func index declarations,2,[],https://github.com/WebAssembly/wabt/pull/1894,https://github.com/takikawa,6,https://github.com/WebAssembly/wabt/pull/1894#issuecomment-1098434603,"The validation was overly strict for ref.func index uses. In the spec, the ref index just needs to appear in

the set of function indices occurring in the module, except in its functions or start function.

(https://webassembly.github.io/spec/core/valid/modules.html#valid-module)
which includes uses in the global and export sections. There were some test failures in the spec tests that were fixed by this, so the PR also changes test expectations.
Fixes issue #1893","Are you saying that if wabt can fail to validate such a (module ...) and that won't case a test failure? That sounds like something we should fix.

Right, because just a (module ...) on its own won't count as a test case. It will just have the stderr printout.
Just adding a TallyCommand here might solve this: https://github.com/WebAssembly/wabt/blob/main/src/tools/spectest-interp.cc#L1277 (and then many spec test expecations would need to be updated)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1894,2022-04-12T21:10:17Z,2022-04-13T18:31:46Z,2022-04-13T21:32:47Z,MERGED,True,8,15,2,https://github.com/takikawa,Fix checking of ref.func index declarations,2,[],https://github.com/WebAssembly/wabt/pull/1894,https://github.com/keithw,7,https://github.com/WebAssembly/wabt/pull/1894#issuecomment-1098508510,"The validation was overly strict for ref.func index uses. In the spec, the ref index just needs to appear in

the set of function indices occurring in the module, except in its functions or start function.

(https://webassembly.github.io/spec/core/valid/modules.html#valid-module)
which includes uses in the global and export sections. There were some test failures in the spec tests that were fixed by this, so the PR also changes test expectations.
Fixes issue #1893",#1895 is my attempt to address this with the smallest possible change (bombing out on error instead of adding TallyCommand and updating all tests).,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1895,2022-04-13T21:29:24Z,2022-04-13T22:17:13Z,2022-04-13T22:29:47Z,MERGED,True,180,190,176,https://github.com/keithw,update br_table validation rule + enforce module validity in spectest-interp,3,[],https://github.com/WebAssembly/wabt/pull/1895,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1895,"#1888 and #1894 (comment) observed that spectest-interp wasn't checking for errors on a ""module"" command. (Failure of a module to validate wasn't, by itself, a test failure.)
and #1894 (comment) observed that the semantics of br_table were relaxed after reference-types (leading to a test error message when wabt tried to enforce the old rule, but not a test failure because of the above)

This PR updates the br_table validation and then modifies spectest-interp to require success on ""module"" and ""register"" commands. (The only other test with this problem was just fixed in #1894.)
(Disclaimer: I'm not 100% positive that this correctly captures the new br_table validation algorithm -- it seems somehow too simple. But it does seem to be what the appendix (https://webassembly.github.io/spec/core/appendix/algorithm.html#validation-of-opcode-sequences) is asking for, and it does pass all of the core spec tests.)","#1888 and #1894 (comment) observed that spectest-interp wasn't checking for errors on a ""module"" command. (Failure of a module to validate wasn't, by itself, a test failure.)
and #1894 (comment) observed that the semantics of br_table were relaxed after reference-types (leading to a test error message when wabt tried to enforce the old rule, but not a test failure because of the above)

This PR updates the br_table validation and then modifies spectest-interp to require success on ""module"" and ""register"" commands. (The only other test with this problem was just fixed in #1894.)
(Disclaimer: I'm not 100% positive that this correctly captures the new br_table validation algorithm -- it seems somehow too simple. But it does seem to be what the appendix (https://webassembly.github.io/spec/core/appendix/algorithm.html#validation-of-opcode-sequences) is asking for, and it does pass all of the core spec tests.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1895,2022-04-13T21:29:24Z,2022-04-13T22:17:13Z,2022-04-13T22:29:47Z,MERGED,True,180,190,176,https://github.com/keithw,update br_table validation rule + enforce module validity in spectest-interp,3,[],https://github.com/WebAssembly/wabt/pull/1895,https://github.com/keithw,2,https://github.com/WebAssembly/wabt/pull/1895#issuecomment-1098529605,"#1888 and #1894 (comment) observed that spectest-interp wasn't checking for errors on a ""module"" command. (Failure of a module to validate wasn't, by itself, a test failure.)
and #1894 (comment) observed that the semantics of br_table were relaxed after reference-types (leading to a test error message when wabt tried to enforce the old rule, but not a test failure because of the above)

This PR updates the br_table validation and then modifies spectest-interp to require success on ""module"" and ""register"" commands. (The only other test with this problem was just fixed in #1894.)
(Disclaimer: I'm not 100% positive that this correctly captures the new br_table validation algorithm -- it seems somehow too simple. But it does seem to be what the appendix (https://webassembly.github.io/spec/core/appendix/algorithm.html#validation-of-opcode-sequences) is asking for, and it does pass all of the core spec tests.)","Done. If it's any solace, the corresponding wasm2c spec tests (for the same wast files) have been enforcing module validity all along, and that goes through basically the same codepath, so it hasn't exactly been missing out on this test coverage completely. (And of course the absence of an error message in the .txt file was also test coverage -- there were only two tests that had this issue, and now it's going to be zero.)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1896,2022-04-13T22:50:55Z,2022-04-14T07:58:11Z,2022-04-14T07:58:12Z,MERGED,True,36,91,8,https://github.com/sbc100,Remove signature mangling from wasm2c output,1,[],https://github.com/WebAssembly/wabt/pull/1896,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1896,"This effectively means that we no longer support imports that are
overloaded by signature only, which is not something that we need to
support in order to support the core wasm spec.
This feature is available in the JS embedding but there is no good
reason (AFAICT) to support it in wasm2c, and this simplifies the
generated code.
Fixes #1858","This effectively means that we no longer support imports that are
overloaded by signature only, which is not something that we need to
support in order to support the core wasm spec.
This feature is available in the JS embedding but there is no good
reason (AFAICT) to support it in wasm2c, and this simplifies the
generated code.
Fixes #1858",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1896,2022-04-13T22:50:55Z,2022-04-14T07:58:11Z,2022-04-14T07:58:12Z,MERGED,True,36,91,8,https://github.com/sbc100,Remove signature mangling from wasm2c output,1,[],https://github.com/WebAssembly/wabt/pull/1896,https://github.com/keithw,2,https://github.com/WebAssembly/wabt/pull/1896#issuecomment-1098566004,"This effectively means that we no longer support imports that are
overloaded by signature only, which is not something that we need to
support in order to support the core wasm spec.
This feature is available in the JS embedding but there is no good
reason (AFAICT) to support it in wasm2c, and this simplifies the
generated code.
Fixes #1858","In principle this is good by us, and we'll conform to whatever you want, but, @angelamontemayor and @yhdengh had already done a version of this in #1814 (including the name of the module in the name of an exported function -- e.g. ""Z_caesar_Z_rot13"" for a module named ""caesar"" that exports a function named ""rot13""), with #1877 and #1887 stacked behind it.
We added some checking for clearly erroneous duplicate imports (https://github.com/fixpointOS/wabt/blob/module_instancing/src/c-writer.cc#L953-L962) in response to @binji's review at #1877 (comment) , which might be a good idea in any case.
Bottom line, if it were up to us, our preference would be to do this as part of #1814 (after working through a review), rather than trying to rebase our PRs later. In the end, though, obviously it's your call and we'll work with whatever you prefer.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1896,2022-04-13T22:50:55Z,2022-04-14T07:58:11Z,2022-04-14T07:58:12Z,MERGED,True,36,91,8,https://github.com/sbc100,Remove signature mangling from wasm2c output,1,[],https://github.com/WebAssembly/wabt/pull/1896,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1896#issuecomment-1098570119,"This effectively means that we no longer support imports that are
overloaded by signature only, which is not something that we need to
support in order to support the core wasm spec.
This feature is available in the JS embedding but there is no good
reason (AFAICT) to support it in wasm2c, and this simplifies the
generated code.
Fixes #1858","In principle this is good by us, and we'll conform to whatever you want, but, @angelamontemayor and @yhdengh had already done a version of this in #1814 (including the name of the module in the name of an exported function -- e.g. ""Z_caesar_Z_rot13"" for a module named ""caesar"" that exports a function named ""rot13""), with #1877 and #1887 stacked behind it.
We added some checking for clearly erroneous duplicate imports (https://github.com/fixpointOS/wabt/blob/module_instancing/src/c-writer.cc#L953-L962) in response to @binji's review at #1877 (comment) , which might be a good idea in any case.
Bottom line, if it were up to us, our preference would be to do this as part of #1814 (after working through a review), rather than trying to rebase our PRs later. In the end, though, obviously it's your call and we'll work with whatever you prefer.

I like the idea to doing it stages:

remove signature mangling
Remove optional prefixing (make it mandatory)
Add instancing (#1814)

These all seems like logically separate things and should make #1814 a lot smaller and more precise.
I'm also looking to ways to remove the Z_ where possible.   It would be nicer do just have caesar_rot13 as the symbol name... but its complicated because module names and function names can also contain ""_"".",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1896,2022-04-13T22:50:55Z,2022-04-14T07:58:11Z,2022-04-14T07:58:12Z,MERGED,True,36,91,8,https://github.com/sbc100,Remove signature mangling from wasm2c output,1,[],https://github.com/WebAssembly/wabt/pull/1896,https://github.com/keithw,4,https://github.com/WebAssembly/wabt/pull/1896#issuecomment-1098574213,"This effectively means that we no longer support imports that are
overloaded by signature only, which is not something that we need to
support in order to support the core wasm spec.
This feature is available in the JS embedding but there is no good
reason (AFAICT) to support it in wasm2c, and this simplifies the
generated code.
Fixes #1858","Ok, fine with us.
On #2 (remove optional prefixing) after #3, we think it's simplest if instance naming dictates the prefixing:

the names of exported functions should be determined by the name of the module (e.g. ""caesar_rot13"")
the exported globals, memories, and tables will be members of the corresponding instance structure, which in turn is named something like ""caesar_module_instance_t"".

But we can cross that bridge when we come to it.
We'd love to get rid of ""Z""; I think what we'd have to do at that point would be to escape _ in the mangling. If every exported function symbol has a _ in it between the modname and func export name, then I don't think you have to worry about colliding with a C reserved word (like ""void"").",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1896,2022-04-13T22:50:55Z,2022-04-14T07:58:11Z,2022-04-14T07:58:12Z,MERGED,True,36,91,8,https://github.com/sbc100,Remove signature mangling from wasm2c output,1,[],https://github.com/WebAssembly/wabt/pull/1896,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1896#issuecomment-1098575268,"This effectively means that we no longer support imports that are
overloaded by signature only, which is not something that we need to
support in order to support the core wasm spec.
This feature is available in the JS embedding but there is no good
reason (AFAICT) to support it in wasm2c, and this simplifies the
generated code.
Fixes #1858",I also have PR for removal of optional prefixing: #1897.   I made these a few weeks ago but went on vacation before uploading them.   Sorry I didn't realize that both of them were already basically contained in  #1814,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1897,2022-04-13T23:32:46Z,2022-04-14T15:41:15Z,2022-04-14T15:41:16Z,MERGED,True,93,119,13,https://github.com/sbc100,wasm2c: Always use a module prefix and set one by default,1,[],https://github.com/WebAssembly/wabt/pull/1897,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1897,"The module prefix is no longer optional and is now set by default to the
name of the module as given in the name section, or taken from the name
of the input file.
A new -n/--module-name command line flag can also be used to override.
The prefix used by the generated code is now fixed at wasm2c time which
makes the output code easier to read and also avoid the symbol pasting
in the C pre-processor which makes the source hard to understand.  For
example, it makes symbols hard to grep for.","The module prefix is no longer optional and is now set by default to the
name of the module as given in the name section, or taken from the name
of the input file.
A new -n/--module-name command line flag can also be used to override.
The prefix used by the generated code is now fixed at wasm2c time which
makes the output code easier to read and also avoid the symbol pasting
in the C pre-processor which makes the source hard to understand.  For
example, it makes symbols hard to grep for.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1897,2022-04-13T23:32:46Z,2022-04-14T15:41:15Z,2022-04-14T15:41:16Z,MERGED,True,93,119,13,https://github.com/sbc100,wasm2c: Always use a module prefix and set one by default,1,[],https://github.com/WebAssembly/wabt/pull/1897,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1897#issuecomment-1098575588,"The module prefix is no longer optional and is now set by default to the
name of the module as given in the name section, or taken from the name
of the input file.
A new -n/--module-name command line flag can also be used to override.
The prefix used by the generated code is now fixed at wasm2c time which
makes the output code easier to read and also avoid the symbol pasting
in the C pre-processor which makes the source hard to understand.  For
example, it makes symbols hard to grep for.",For now this change leaves the Z_ mangling in place.  We can consider ways to remove that as a followup.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1898,2022-04-13T23:38:12Z,2022-04-14T14:38:37Z,2022-04-14T15:45:27Z,MERGED,True,1,0,1,https://github.com/mbrukman,Add `extended-const` repo link to fix table entry,1,[],https://github.com/WebAssembly/wabt/pull/1898,https://github.com/mbrukman,1,https://github.com/WebAssembly/wabt/pull/1898,"Add Markdown link to https://github.com/WebAssembly/extended-const
to resolve currently-broken reference in the table above.","Add Markdown link to https://github.com/WebAssembly/extended-const
to resolve currently-broken reference in the table above.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1900,2022-04-14T14:54:13Z,2022-04-14T15:27:08Z,2022-04-14T15:27:09Z,MERGED,True,6,6,6,https://github.com/sbc100,Fix spelling typo in wasm2c output. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1900,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1900,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1901,2022-04-14T19:18:05Z,2022-04-14T19:33:52Z,2022-04-14T19:34:05Z,MERGED,True,137,83,9,https://github.com/keithw,wasm2c: export free() function to free module state,1,[],https://github.com/WebAssembly/wabt/pull/1901,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1901,Split out from #1814.,Split out from #1814.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1902,2022-04-15T08:02:40Z,2022-04-21T04:10:27Z,2022-04-21T14:23:58Z,MERGED,True,21,3,4,https://github.com/remko,"wat2wasm: support ""-"" for outputting to stdout (#1692)",1,[],https://github.com/WebAssembly/wabt/pull/1902,https://github.com/remko,1,https://github.com/WebAssembly/wabt/pull/1902,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1902,2022-04-15T08:02:40Z,2022-04-21T04:10:27Z,2022-04-21T14:23:58Z,MERGED,True,21,3,4,https://github.com/remko,"wat2wasm: support ""-"" for outputting to stdout (#1692)",1,[],https://github.com/WebAssembly/wabt/pull/1902,https://github.com/remko,2,https://github.com/WebAssembly/wabt/pull/1902#issuecomment-1100688518,,"lgtm, but maybe worth mentioning that ""-"" works in the wat2wasm.cc help too

Done",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1903,2022-04-19T07:08:04Z,2022-04-26T06:29:21Z,2022-04-26T07:27:18Z,MERGED,True,33,4,2,https://github.com/zherczeg,Add base64 encoding support to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/1903,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1903,A new button is added for base64 encoding of the wasm binary. This allows getting the binary without downloading it.,A new button is added for base64 encoding of the wasm binary. This allows getting the binary without downloading it.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1903,2022-04-19T07:08:04Z,2022-04-26T06:29:21Z,2022-04-26T07:27:18Z,MERGED,True,33,4,2,https://github.com/zherczeg,Add base64 encoding support to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/1903,https://github.com/zherczeg,2,https://github.com/WebAssembly/wabt/pull/1903#issuecomment-1102174552,A new button is added for base64 encoding of the wasm binary. This allows getting the binary without downloading it.,It seems the FIXUP subsection size and FIXUP section size are not part of the base64 code. Not sure why.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1903,2022-04-19T07:08:04Z,2022-04-26T06:29:21Z,2022-04-26T07:27:18Z,MERGED,True,33,4,2,https://github.com/zherczeg,Add base64 encoding support to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/1903,https://github.com/binji,3,https://github.com/WebAssembly/wabt/pull/1903#issuecomment-1104688448,A new button is added for base64 encoding of the wasm binary. This allows getting the binary without downloading it.,Thanks for working on this! Would you mind sharing an image of the new layout?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1903,2022-04-19T07:08:04Z,2022-04-26T06:29:21Z,2022-04-26T07:27:18Z,MERGED,True,33,4,2,https://github.com/zherczeg,Add base64 encoding support to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/1903,https://github.com/zherczeg,4,https://github.com/WebAssembly/wabt/pull/1903#issuecomment-1104714419,A new button is added for base64 encoding of the wasm binary. This allows getting the binary without downloading it.,"Basically the ""BUILD LOG"" becomes a button, a new ""BASE64"" button is added, and the text of the currently active button is underlined. A simple version of tabs.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1903,2022-04-19T07:08:04Z,2022-04-26T06:29:21Z,2022-04-26T07:27:18Z,MERGED,True,33,4,2,https://github.com/zherczeg,Add base64 encoding support to wat2wasm demo,1,[],https://github.com/WebAssembly/wabt/pull/1903,https://github.com/zherczeg,5,https://github.com/WebAssembly/wabt/pull/1903#issuecomment-1108200900,A new button is added for base64 encoding of the wasm binary. This allows getting the binary without downloading it.,@binji thank you for the review. Who can commit this?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1904,2022-04-19T17:27:23Z,2022-04-20T16:11:39Z,2022-04-20T16:11:39Z,MERGED,True,1,1,1,https://github.com/keithw,run-spec-wasm2c.py: fix failure to free module #0 (NFC),1,[],https://github.com/WebAssembly/wabt/pull/1904,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1904,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1905,2022-04-20T22:10:10Z,2022-04-20T22:36:21Z,2022-04-20T23:11:20Z,MERGED,True,18,17,1,https://github.com/keithw,README.md: add wasm2c column to Supported Proposals table,1,[],https://github.com/WebAssembly/wabt/pull/1905,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1905,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1907,2022-04-26T06:35:42Z,2022-04-28T18:06:08Z,2022-04-28T18:06:09Z,MERGED,True,13,9,1,https://github.com/binji,Update docs/libwabt.js,1,[],https://github.com/WebAssembly/wabt/pull/1907,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1907,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1909,2022-04-28T08:38:44Z,2022-05-02T21:16:56Z,2022-05-03T03:50:36Z,MERGED,True,178,0,9,https://github.com/zherczeg,Implement \u{hex} escape parsing,1,[],https://github.com/WebAssembly/wabt/pull/1909,https://github.com/zherczeg,1,https://github.com/WebAssembly/wabt/pull/1909,Support \u{hex} escape sequences for string literals. These literals are converted to UTF-8 characters.,Support \u{hex} escape sequences for string literals. These literals are converted to UTF-8 characters.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1909,2022-04-28T08:38:44Z,2022-05-02T21:16:56Z,2022-05-03T03:50:36Z,MERGED,True,178,0,9,https://github.com/zherczeg,Implement \u{hex} escape parsing,1,[],https://github.com/WebAssembly/wabt/pull/1909,https://github.com/zherczeg,2,https://github.com/WebAssembly/wabt/pull/1909#issuecomment-1113000740,Support \u{hex} escape sequences for string literals. These literals are converted to UTF-8 characters.,"Thank you for the review, I have updated the patch.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1909,2022-04-28T08:38:44Z,2022-05-02T21:16:56Z,2022-05-03T03:50:36Z,MERGED,True,178,0,9,https://github.com/zherczeg,Implement \u{hex} escape parsing,1,[],https://github.com/WebAssembly/wabt/pull/1909,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1909#issuecomment-1113507111,Support \u{hex} escape sequences for string literals. These literals are converted to UTF-8 characters.,It seems rather odd that there are no spec tests that include these escape sequences... are these something we should add upstream?  @rossberg ?,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1909,2022-04-28T08:38:44Z,2022-05-02T21:16:56Z,2022-05-03T03:50:36Z,MERGED,True,178,0,9,https://github.com/zherczeg,Implement \u{hex} escape parsing,1,[],https://github.com/WebAssembly/wabt/pull/1909,https://github.com/rossberg,4,https://github.com/WebAssembly/wabt/pull/1909#issuecomment-1114610019,Support \u{hex} escape sequences for string literals. These literals are converted to UTF-8 characters.,"That would be great, yes. Nobody has bothered contributing lexical tests before, it seems.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1910,2022-04-29T14:17:45Z,2022-04-29T16:49:29Z,2022-04-29T16:49:29Z,MERGED,True,26,28,4,https://github.com/sbc100,wasm2c: Avoid unnecessary `extern` in function decls. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1910,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1910,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1910,2022-04-29T14:17:45Z,2022-04-29T16:49:29Z,2022-04-29T16:49:29Z,MERGED,True,26,28,4,https://github.com/sbc100,wasm2c: Avoid unnecessary `extern` in function decls. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1910,https://github.com/keithw,2,https://github.com/WebAssembly/wabt/pull/1910#issuecomment-1113506828,,"lgtm.
If you want to get rid of all of these, I think here are a few more locations:

most of the wasm-rt.h function declarations have extern, e.g. extern uint32_t wasm_rt_register_func_type(), extern void wasm_rt_allocate_memory(), etc.
src/c-writer.cc currently writes extern for all types of imports (https://github.com/WebAssembly/wabt/blob/main/src/c-writer.cc#L861) and exports (https://github.com/WebAssembly/wabt/blob/main/src/c-writer.cc#L1139); I think if we really don't want to use extern where it's already the default (on a function declaration), these sites could also be modified.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1910,2022-04-29T14:17:45Z,2022-04-29T16:49:29Z,2022-04-29T16:49:29Z,MERGED,True,26,28,4,https://github.com/sbc100,wasm2c: Avoid unnecessary `extern` in function decls. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1910,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1910#issuecomment-1113511405,,"lgtm.
If you want to get rid of all of these, I think here are a few more locations:

most of the wasm-rt.h function declarations have extern, e.g. extern uint32_t wasm_rt_register_func_type(), extern void wasm_rt_allocate_memory(), etc.


Done.


src/c-writer.cc currently writes extern for all types of imports (https://github.com/WebAssembly/wabt/blob/main/src/c-writer.cc#L861) and exports (https://github.com/WebAssembly/wabt/blob/main/src/c-writer.cc#L1139); I think if we really don't want to use extern where it's already the default (on a function declaration), these sites could also be modified.


At first I thought that same thing, but because they are declaring pointers to functions, and not functions, the export is actually needed in these cases.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1910,2022-04-29T14:17:45Z,2022-04-29T16:49:29Z,2022-04-29T16:49:29Z,MERGED,True,26,28,4,https://github.com/sbc100,wasm2c: Avoid unnecessary `extern` in function decls. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1910,https://github.com/keithw,4,https://github.com/WebAssembly/wabt/pull/1910#issuecomment-1113520458,,"Ah, yes, you're right.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1911,2022-04-29T17:00:00Z,,2022-04-29T17:56:44Z,OPEN,False,59,27,3,https://github.com/sbc100,[WIP] wasm2c: group imports for a given module into a struct type.,1,[],https://github.com/WebAssembly/wabt/pull/1911,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1911,"Rather than given each import a magic name we can group imports into a
single struct and pass that struct into the init function.
This means that in the generated code all access to imported elements
now goes via the g_imports struct.  Note that this is not a pointer
but a copy of the passed in struct, to avoid adding any extra
indirection.
This can be considered one step towards module instancing.
It also avoids the need for name mangling since individual imports no
longer live in the global namespace.","Rather than given each import a magic name we can group imports into a
single struct and pass that struct into the init function.
This means that in the generated code all access to imported elements
now goes via the g_imports struct.  Note that this is not a pointer
but a copy of the passed in struct, to avoid adding any extra
indirection.
This can be considered one step towards module instancing.
It also avoids the need for name mangling since individual imports no
longer live in the global namespace.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1911,2022-04-29T17:00:00Z,,2022-04-29T17:56:44Z,OPEN,False,59,27,3,https://github.com/sbc100,[WIP] wasm2c: group imports for a given module into a struct type.,1,[],https://github.com/WebAssembly/wabt/pull/1911,https://github.com/sbc100,2,https://github.com/WebAssembly/wabt/pull/1911#issuecomment-1113534603,"Rather than given each import a magic name we can group imports into a
single struct and pass that struct into the init function.
This means that in the generated code all access to imported elements
now goes via the g_imports struct.  Note that this is not a pointer
but a copy of the passed in struct, to avoid adding any extra
indirection.
This can be considered one step towards module instancing.
It also avoids the need for name mangling since individual imports no
longer live in the global namespace.",@keithw .. this is just a WIP .. but perhaps it makes a good stepping stone to #1814.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1912,2022-04-29T17:59:14Z,2022-04-29T20:04:05Z,2022-04-29T20:04:06Z,MERGED,True,33,18,2,https://github.com/sbc100,Fix javadoc-style comment formatting. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1912,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1912,"Multiline javadoc/doxygen comments start and end
with an empty line.","Multiline javadoc/doxygen comments start and end
with an empty line.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1915,2022-05-03T18:25:21Z,2022-05-04T14:41:07Z,2022-05-04T18:15:19Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.29,1,[],https://github.com/WebAssembly/wabt/pull/1915,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1915,See #1914,See #1914,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1915,2022-05-03T18:25:21Z,2022-05-04T14:41:07Z,2022-05-04T18:15:19Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.29,1,[],https://github.com/WebAssembly/wabt/pull/1915,https://github.com/steven-johnson,2,https://github.com/WebAssembly/wabt/pull/1915#issuecomment-1117628453,See #1914,"wait, what happened?",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1915,2022-05-03T18:25:21Z,2022-05-04T14:41:07Z,2022-05-04T18:15:19Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.29,1,[],https://github.com/WebAssembly/wabt/pull/1915,https://github.com/sbc100,3,https://github.com/WebAssembly/wabt/pull/1915#issuecomment-1117645699,See #1914,Just a normal periodic release.  Nothing special.,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1915,2022-05-03T18:25:21Z,2022-05-04T14:41:07Z,2022-05-04T18:15:19Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.29,1,[],https://github.com/WebAssembly/wabt/pull/1915,https://github.com/steven-johnson,4,https://github.com/WebAssembly/wabt/pull/1915#issuecomment-1117653738,See #1914,"No, I mean the branch was deleted, and there is no 1.0.29 release.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1915,2022-05-03T18:25:21Z,2022-05-04T14:41:07Z,2022-05-04T18:15:19Z,MERGED,True,1,1,1,https://github.com/sbc100,Version 1.0.29,1,[],https://github.com/WebAssembly/wabt/pull/1915,https://github.com/sbc100,5,https://github.com/WebAssembly/wabt/pull/1915#issuecomment-1117657368,See #1914,Oh this was just the PR to update the changlog.  I still need to create a release from this.  1 sec,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1917,2022-05-10T05:11:10Z,2022-05-10T21:09:29Z,2022-05-10T21:09:29Z,MERGED,True,1,1,1,https://github.com/sbc100,Update memory64 status in README,1,[],https://github.com/WebAssembly/wabt/pull/1917,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1917,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1918,2022-05-10T21:10:52Z,2022-05-10T22:12:04Z,2022-05-10T22:12:05Z,MERGED,True,15,15,1,https://github.com/sbc100,Format table in README.md. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1918,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1918,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1919,2022-05-10T22:21:25Z,2022-05-11T00:52:34Z,2022-05-11T00:52:35Z,MERGED,True,1,2,2,https://github.com/sbc100,Mark extended-const as implemented. NFC,1,[],https://github.com/WebAssembly/wabt/pull/1919,https://github.com/sbc100,1,https://github.com/WebAssembly/wabt/pull/1919,,,True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1928,2022-05-27T08:59:36Z,2022-05-27T16:35:55Z,2022-05-27T16:35:55Z,MERGED,True,6,5,5,https://github.com/asb,List funcref as one of the expected value types in WastParser::ParseValueType,1,[],https://github.com/WebAssembly/wabt/pull/1928,https://github.com/asb,1,https://github.com/WebAssembly/wabt/pull/1928,"Previously, externref was listed but not funcref.","Previously, externref was listed but not funcref.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1928,2022-05-27T08:59:36Z,2022-05-27T16:35:55Z,2022-05-27T16:35:55Z,MERGED,True,6,5,5,https://github.com/asb,List funcref as one of the expected value types in WastParser::ParseValueType,1,[],https://github.com/WebAssembly/wabt/pull/1928,https://github.com/asb,2,https://github.com/WebAssembly/wabt/pull/1928#issuecomment-1139730901,"Previously, externref was listed but not funcref.","(Force pushed a version fixing the clang-format issue).
I think to be comprehensive, we'd make v128 conditional on simd being enabled, and externref/funcref conditional on reference types being enabled. Doable, but as you say it's not obvious it's worth it.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1930,2022-06-01T08:41:10Z,,2022-06-04T05:35:30Z,OPEN,False,2819,5367,64,https://github.com/keithw,wasm2c: implement the exception-handling proposal,14,[],https://github.com/WebAssembly/wabt/pull/1930,https://github.com/keithw,1,https://github.com/WebAssembly/wabt/pull/1930,"(This PR is behind #1814, #1877, and #1887, but if there is interest in landing it sooner, it could be rebased on top of the current ToT.)
This PR adds support for the exception-handling proposal to wasm2c. The strategy involves setjmp at every try-catch and try-delegate, and then throwing/rethrowing uses goto (if the nearest catch is in the same function) or longjmp. There is no use of malloc/free; the wasm runtime maintains static storage for one ""active exception,"" and one unwind target in a jmp_buf. (I couldn't think of a way to implement ""zero-cost"" exception handling in portable C, even with libunwind.)
This also includes code in generate-names.cc (to generate names for try blocks) and apply-names.cc (to apply the correct names to delegate targets). I think this is essentially the apply-names version of the same fix that was done to resolve-names in 6448318. (@takikawa, would you be able to take a look?)","(This PR is behind #1814, #1877, and #1887, but if there is interest in landing it sooner, it could be rebased on top of the current ToT.)
This PR adds support for the exception-handling proposal to wasm2c. The strategy involves setjmp at every try-catch and try-delegate, and then throwing/rethrowing uses goto (if the nearest catch is in the same function) or longjmp. There is no use of malloc/free; the wasm runtime maintains static storage for one ""active exception,"" and one unwind target in a jmp_buf. (I couldn't think of a way to implement ""zero-cost"" exception handling in portable C, even with libunwind.)
This also includes code in generate-names.cc (to generate names for try blocks) and apply-names.cc (to apply the correct names to delegate targets). I think this is essentially the apply-names version of the same fix that was done to resolve-names in 6448318. (@takikawa, would you be able to take a look?)",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1931,2022-06-01T18:29:47Z,,2022-06-01T23:54:51Z,OPEN,False,15,0,3,https://github.com/Mem2019,Fix several issues found by fuzzing,1,[],https://github.com/WebAssembly/wabt/pull/1931,https://github.com/Mem2019,1,https://github.com/WebAssembly/wabt/pull/1931,"Fixes #1922
Fixes #1924
Fixes #1929","Fixes #1922
Fixes #1924
Fixes #1929",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1932,2022-06-02T05:02:13Z,2022-06-03T16:09:37Z,2022-06-03T16:09:38Z,MERGED,True,90,15,8,https://github.com/binji,wast2json: write binary modules verbatim,2,[],https://github.com/WebAssembly/wabt/pull/1932,https://github.com/binji,1,https://github.com/WebAssembly/wabt/pull/1932,"Previously any top-level module defined in a .wast file would be parsed
and converted to a Module and stored in a ModuleCommand, since it
may be used later by the script (e.g. via an invoke command). This
means that when it was written out later it may have been changed, which
is undesirable for binary and quoted modules.
This change adds a new ScriptModuleCommand, which stores both a
Module and a ScriptModule. The Module contains the parsed
information, and the ScriptModule contains the original contents of
the binary or quoted data.
This fixes issue #1927.","Previously any top-level module defined in a .wast file would be parsed
and converted to a Module and stored in a ModuleCommand, since it
may be used later by the script (e.g. via an invoke command). This
means that when it was written out later it may have been changed, which
is undesirable for binary and quoted modules.
This change adds a new ScriptModuleCommand, which stores both a
Module and a ScriptModule. The Module contains the parsed
information, and the ScriptModule contains the original contents of
the binary or quoted data.
This fixes issue #1927.",True,{}
WebAssembly/wabt,https://github.com/WebAssembly/wabt,1932,2022-06-02T05:02:13Z,2022-06-03T16:09:37Z,2022-06-03T16:09:38Z,MERGED,True,90,15,8,https://github.com/binji,wast2json: write binary modules verbatim,2,[],https://github.com/WebAssembly/wabt/pull/1932,https://github.com/binji,2,https://github.com/WebAssembly/wabt/pull/1932#issuecomment-1145283536,"Previously any top-level module defined in a .wast file would be parsed
and converted to a Module and stored in a ModuleCommand, since it
may be used later by the script (e.g. via an invoke command). This
means that when it was written out later it may have been changed, which
is undesirable for binary and quoted modules.
This change adds a new ScriptModuleCommand, which stores both a
Module and a ScriptModule. The Module contains the parsed
information, and the ScriptModule contains the original contents of
the binary or quoted data.
This fixes issue #1927.","When wast2json spits out .wat files are that byte for byte verbatim or are they also round-tripped trough IR.
It seems like all the output files from wast2json should be verbatim chunks of the input, right?

The wat files are also written out directly verbatim too, at least when used in assert_malformed constructs. The issue here was specifically with top-level module definitions. AFAIK there are no examples of using a ""quoted"" module at the top level, because there's no benefit to doing so. This currently will error out, but could be supported later if needed.",True,{}
