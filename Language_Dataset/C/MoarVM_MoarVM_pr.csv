MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,344,2016-03-07T17:00:03Z,2016-03-07T17:14:26Z,2016-03-07T17:14:26Z,MERGED,True,1,0,1,https://github.com/donaldh,Fix dyncall on raspberrypi for calls > 4 params,1,[],https://github.com/MoarVM/MoarVM/pull/344,https://github.com/donaldh,1,https://github.com/MoarVM/MoarVM/pull/344,"Dyncall docs say 'This function should be called after setting the call mode (using dcMode),
but prior to binding arguments to the CallVM'. Likely to be redundant on many platforms, but is the
documented API behaviour.","Dyncall docs say 'This function should be called after setting the call mode (using dcMode),
but prior to binding arguments to the CallVM'. Likely to be redundant on many platforms, but is the
documented API behaviour.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,345,2016-03-11T13:36:16Z,2016-03-11T14:05:59Z,2016-03-11T14:05:59Z,MERGED,True,12,1,2,https://github.com/rudis,syncpipe: implement .native_descriptor introspection,1,[],https://github.com/MoarVM/MoarVM/pull/345,https://github.com/rudis,1,https://github.com/MoarVM/MoarVM/pull/345,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,347,2016-03-22T23:15:17Z,2016-03-23T08:22:51Z,2016-03-23T08:22:51Z,CLOSED,False,4,0,1,https://github.com/salortiz,A proposed fix for RT#127756,1,[],https://github.com/MoarVM/MoarVM/pull/347,https://github.com/salortiz,1,https://github.com/MoarVM/MoarVM/pull/347,See https://rt.perl.org/Ticket/Display.html?id=127756,See https://rt.perl.org/Ticket/Display.html?id=127756,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,347,2016-03-22T23:15:17Z,2016-03-23T08:22:51Z,2016-03-23T08:22:51Z,CLOSED,False,4,0,1,https://github.com/salortiz,A proposed fix for RT#127756,1,[],https://github.com/MoarVM/MoarVM/pull/347,https://github.com/salortiz,2,https://github.com/MoarVM/MoarVM/pull/347#issuecomment-200240866,See https://rt.perl.org/Ticket/Display.html?id=127756,"If the slots contains objects or strings, they are gc marked, so is naive to simply zeroed them.
👎  to me.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,349,2016-03-25T17:35:43Z,2016-03-25T17:35:54Z,2016-03-25T17:35:54Z,MERGED,True,2819,1011,118,https://github.com/diakopter,merge from master,129,[],https://github.com/MoarVM/MoarVM/pull/349,https://github.com/diakopter,1,https://github.com/MoarVM/MoarVM/pull/349,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,350,2016-03-28T13:04:45Z,2016-03-28T13:19:45Z,2016-03-28T13:19:45Z,MERGED,True,1,1,1,https://github.com/stmuk,fix compile on FreeBSD 8 and 9 (also tested not to break 10),1,[],https://github.com/MoarVM/MoarVM/pull/350,https://github.com/stmuk,1,https://github.com/MoarVM/MoarVM/pull/350,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,353,2016-03-30T20:08:13Z,2016-03-30T20:08:22Z,2016-03-30T20:08:22Z,MERGED,True,52,4,2,https://github.com/diakopter,mer,5,[],https://github.com/MoarVM/MoarVM/pull/353,https://github.com/diakopter,1,https://github.com/MoarVM/MoarVM/pull/353,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,354,2016-03-30T21:03:03Z,2016-03-30T21:03:28Z,2016-03-30T21:03:29Z,MERGED,True,2,2,1,https://github.com/diakopter,merge from master,1,[],https://github.com/MoarVM/MoarVM/pull/354,https://github.com/diakopter,1,https://github.com/MoarVM/MoarVM/pull/354,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,356,2016-04-08T05:15:14Z,2016-04-08T12:38:19Z,2016-04-08T12:56:46Z,MERGED,True,2,0,1,https://github.com/dwarring,adjust byte count when UTF-16 BOM marker consumed,1,[],https://github.com/MoarVM/MoarVM/pull/356,https://github.com/dwarring,1,https://github.com/MoarVM/MoarVM/pull/356,"Something I noticed in Rakudo, when experimenting with
UTF-16 BOM markers. For example:
% perl6 -e'my $s = Buf.new([255, 254, 72, 0, 101, 0]).decode(""utf-16""); say $s.perl'
""He\0""

The 2-byte ""\xFF\FE"" BOM marker is consumed, but the byte count hasn't been adjusted, so
it's running past the end of the string.","Something I noticed in Rakudo, when experimenting with
UTF-16 BOM markers. For example:
% perl6 -e'my $s = Buf.new([255, 254, 72, 0, 101, 0]).decode(""utf-16""); say $s.perl'
""He\0""

The 2-byte ""\xFF\FE"" BOM marker is consumed, but the byte count hasn't been adjusted, so
it's running past the end of the string.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,356,2016-04-08T05:15:14Z,2016-04-08T12:38:19Z,2016-04-08T12:56:46Z,MERGED,True,2,0,1,https://github.com/dwarring,adjust byte count when UTF-16 BOM marker consumed,1,[],https://github.com/MoarVM/MoarVM/pull/356,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/356#issuecomment-207421927,"Something I noticed in Rakudo, when experimenting with
UTF-16 BOM markers. For example:
% perl6 -e'my $s = Buf.new([255, 254, 72, 0, 101, 0]).decode(""utf-16""); say $s.perl'
""He\0""

The 2-byte ""\xFF\FE"" BOM marker is consumed, but the byte count hasn't been adjusted, so
it's running past the end of the string.",Added a test in S32-str/encode.t. Thanks! 🍰,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,357,2016-04-08T05:32:23Z,2016-10-16T10:35:38Z,2016-10-16T10:35:38Z,MERGED,True,10,0,1,https://github.com/skids,"Workaround tommath issue #56, affects random bigint numbers > 32bits",2,[],https://github.com/MoarVM/MoarVM/pull/357,https://github.com/skids,1,https://github.com/MoarVM/MoarVM/pull/357,See rakudo RT#109586,See rakudo RT#109586,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,357,2016-04-08T05:32:23Z,2016-10-16T10:35:38Z,2016-10-16T10:35:38Z,MERGED,True,10,0,1,https://github.com/skids,"Workaround tommath issue #56, affects random bigint numbers > 32bits",2,[],https://github.com/MoarVM/MoarVM/pull/357,https://github.com/skids,2,https://github.com/MoarVM/MoarVM/pull/357#issuecomment-207223045,See rakudo RT#109586,Totally untested (up way past bedtime) and needs review.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,357,2016-04-08T05:32:23Z,2016-10-16T10:35:38Z,2016-10-16T10:35:38Z,MERGED,True,10,0,1,https://github.com/skids,"Workaround tommath issue #56, affects random bigint numbers > 32bits",2,[],https://github.com/MoarVM/MoarVM/pull/357,https://github.com/skids,3,https://github.com/MoarVM/MoarVM/pull/357#issuecomment-207229683,See rakudo RT#109586,Managed to squeeze off a rakudo and nqp test run before bed; they were OK.  Only tested on 64-bit linux.  Needs testing on 32-bit.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,357,2016-04-08T05:32:23Z,2016-10-16T10:35:38Z,2016-10-16T10:35:38Z,MERGED,True,10,0,1,https://github.com/skids,"Workaround tommath issue #56, affects random bigint numbers > 32bits",2,[],https://github.com/MoarVM/MoarVM/pull/357,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/357#issuecomment-207422253,See rakudo RT#109586,"I don't have a 32-bit thingy handy to try it out on, but I'm happy enough with the patch otherwise.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,357,2016-04-08T05:32:23Z,2016-10-16T10:35:38Z,2016-10-16T10:35:38Z,MERGED,True,10,0,1,https://github.com/skids,"Workaround tommath issue #56, affects random bigint numbers > 32bits",2,[],https://github.com/MoarVM/MoarVM/pull/357,https://github.com/jnthn,5,https://github.com/MoarVM/MoarVM/pull/357#issuecomment-213115812,See rakudo RT#109586,Any reports from 32-bit on this?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,357,2016-04-08T05:32:23Z,2016-10-16T10:35:38Z,2016-10-16T10:35:38Z,MERGED,True,10,0,1,https://github.com/skids,"Workaround tommath issue #56, affects random bigint numbers > 32bits",2,[],https://github.com/MoarVM/MoarVM/pull/357,https://github.com/FROGGS,6,https://github.com/MoarVM/MoarVM/pull/357#issuecomment-254039238,See rakudo RT#109586,The tests pass before and after applying the changes on x86.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,358,2016-04-08T22:07:33Z,2016-04-08T22:07:42Z,2016-04-08T22:07:42Z,MERGED,True,437,72,66,https://github.com/diakopter,merge from master,25,[],https://github.com/MoarVM/MoarVM/pull/358,https://github.com/diakopter,1,https://github.com/MoarVM/MoarVM/pull/358,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,359,2016-04-14T14:31:34Z,2016-04-14T14:51:52Z,2016-04-14T14:51:52Z,MERGED,True,11,3,1,https://github.com/pmurias,"Fix incorrect boolification of """" under mode MODE_UNBOX_STR_NOT_EMPTY_OR_ZERO",1,[],https://github.com/MoarVM/MoarVM/pull/359,https://github.com/pmurias,1,https://github.com/MoarVM/MoarVM/pull/359,Got a test for that which I'll commit once it's fixed.,Got a test for that which I'll commit once it's fixed.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,360,2016-04-14T21:05:46Z,2016-04-14T21:05:57Z,2016-04-14T21:05:57Z,MERGED,True,46,8,3,https://github.com/diakopter,merge from master,6,[],https://github.com/MoarVM/MoarVM/pull/360,https://github.com/diakopter,1,https://github.com/MoarVM/MoarVM/pull/360,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,361,2016-04-17T08:09:42Z,2016-04-18T16:48:20Z,2016-04-18T16:48:20Z,CLOSED,False,2,0,1,https://github.com/niner,Prohibit adding a non-serializable object to an SC,1,[],https://github.com/MoarVM/MoarVM/pull/361,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/361,"This would blow up later when trying to serialize the SC. By catching this
early, we give e.g. try_add_to_sc the chance to catch this error early
enough.","This would blow up later when trying to serialize the SC. By catching this
early, we give e.g. try_add_to_sc the chance to catch this error early
enough.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,361,2016-04-17T08:09:42Z,2016-04-18T16:48:20Z,2016-04-18T16:48:20Z,CLOSED,False,2,0,1,https://github.com/niner,Prohibit adding a non-serializable object to an SC,1,[],https://github.com/MoarVM/MoarVM/pull/361,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/361#issuecomment-211469107,"This would blow up later when trying to serialize the SC. By catching this
early, we give e.g. try_add_to_sc the chance to catch this error early
enough.",Retracting as it seems to cause regressions.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,362,2016-04-22T11:49:18Z,2016-04-23T11:27:04Z,2016-04-23T11:27:04Z,MERGED,True,2,2,1,https://github.com/pmurias,Fix segfault when composing an uncomposed P6opaque repr.,1,[],https://github.com/MoarVM/MoarVM/pull/362,https://github.com/pmurias,1,https://github.com/MoarVM/MoarVM/pull/362,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,362,2016-04-22T11:49:18Z,2016-04-23T11:27:04Z,2016-04-23T11:27:04Z,MERGED,True,2,2,1,https://github.com/pmurias,Fix segfault when composing an uncomposed P6opaque repr.,1,[],https://github.com/MoarVM/MoarVM/pull/362,https://github.com/vendethiel,2,https://github.com/MoarVM/MoarVM/pull/362#issuecomment-213394889,,shouldn't you check for both?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,362,2016-04-22T11:49:18Z,2016-04-23T11:27:04Z,2016-04-23T11:27:04Z,MERGED,True,2,2,1,https://github.com/pmurias,Fix segfault when composing an uncomposed P6opaque repr.,1,[],https://github.com/MoarVM/MoarVM/pull/362,https://github.com/pmurias,3,https://github.com/MoarVM/MoarVM/pull/362#issuecomment-213403272,,"No, if REPR_data is set (it can happen by either composing or deserialization) the name_to_index_mapping is always set.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,362,2016-04-22T11:49:18Z,2016-04-23T11:27:04Z,2016-04-23T11:27:04Z,MERGED,True,2,2,1,https://github.com/pmurias,Fix segfault when composing an uncomposed P6opaque repr.,1,[],https://github.com/MoarVM/MoarVM/pull/362,https://github.com/vendethiel,4,https://github.com/MoarVM/MoarVM/pull/362#issuecomment-213408001,,"okay, thanks.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,363,2016-04-27T00:37:00Z,2016-05-12T18:19:12Z,2016-05-12T18:19:12Z,MERGED,True,51,6,3,https://github.com/tomboy-64,update the build system to autodetect system provided libs,2,[],https://github.com/MoarVM/MoarVM/pull/363,https://github.com/tomboy-64,1,https://github.com/MoarVM/MoarVM/pull/363,"uses raw pkg-config to determine include directories
failover to the old behaviour when errors occur
fix DT_RPATH when @libdir@ has no / prepended","uses raw pkg-config to determine include directories
failover to the old behaviour when errors occur
fix DT_RPATH when @libdir@ has no / prepended",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,364,2016-05-04T16:38:30Z,2016-05-11T15:47:24Z,2016-05-11T15:47:24Z,MERGED,True,332,162,11,https://github.com/niner,	Implement loadbytecodebuffer OP,3,[],https://github.com/MoarVM/MoarVM/pull/364,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/364,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,364,2016-05-04T16:38:30Z,2016-05-11T15:47:24Z,2016-05-11T15:47:24Z,MERGED,True,332,162,11,https://github.com/niner,	Implement loadbytecodebuffer OP,3,[],https://github.com/MoarVM/MoarVM/pull/364,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/364#issuecomment-218254833,,Updated the PR with a new commit bringing back the mmap optimization,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,365,2016-05-12T13:52:56Z,2016-05-12T18:49:29Z,2016-05-15T10:59:49Z,MERGED,True,208,88,11,https://github.com/bdw,Reframe jit,11,[],https://github.com/MoarVM/MoarVM/pull/365,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/365,"It doesn't radically crash anymore, which is nice.","It doesn't radically crash anymore, which is nice.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,366,2016-05-12T16:08:20Z,2016-05-12T18:08:43Z,2016-05-12T18:08:43Z,MERGED,True,1,1,1,https://github.com/niner,Fix Windows build broken by pointer arithmetic on void*,1,[],https://github.com/MoarVM/MoarVM/pull/366,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/366,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,367,2016-05-14T07:33:02Z,2016-05-14T18:26:47Z,2016-05-15T10:59:37Z,MERGED,True,241,221,15,https://github.com/zhuomingliang,Serialization int,4,[],https://github.com/MoarVM/MoarVM/pull/367,https://github.com/zhuomingliang,1,https://github.com/MoarVM/MoarVM/pull/367,"Change the remaining serialization of int to varint.
This reduces rakudo core setting size about 11kb.
Rename MVM_serialization_read_varint back to MVM_serialization_read_int.
The old MVM_serialization_read_int function will be removed after next nqp bootstrap.","Change the remaining serialization of int to varint.
This reduces rakudo core setting size about 11kb.
Rename MVM_serialization_read_varint back to MVM_serialization_read_int.
The old MVM_serialization_read_int function will be removed after next nqp bootstrap.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,368,2016-05-14T15:42:06Z,2016-05-14T17:24:19Z,2016-05-14T17:24:19Z,MERGED,True,32,32,2,https://github.com/niner,Fix temp root stack underflow with exceptions in NC callbacks,2,[],https://github.com/MoarVM/MoarVM/pull/368,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/368,"MVM_gc_root_temp_mark marks the temporary root stack at its current height as
the limit for removing all roots. At this point all MVMROOTs have to be in
place. Otherwise a MVM_gc_root_temp_pop_all called by
MVM_exception_throw_adhoc_free_va will remove not only the temp roots installed
by the nested run loop, but also frame roots leading to a possible temp root
underflow later on.","MVM_gc_root_temp_mark marks the temporary root stack at its current height as
the limit for removing all roots. At this point all MVMROOTs have to be in
place. Otherwise a MVM_gc_root_temp_pop_all called by
MVM_exception_throw_adhoc_free_va will remove not only the temp roots installed
by the nested run loop, but also frame roots leading to a possible temp root
underflow later on.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,368,2016-05-14T15:42:06Z,2016-05-14T17:24:19Z,2016-05-14T17:24:19Z,MERGED,True,32,32,2,https://github.com/niner,Fix temp root stack underflow with exceptions in NC callbacks,2,[],https://github.com/MoarVM/MoarVM/pull/368,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/368#issuecomment-219227743,"MVM_gc_root_temp_mark marks the temporary root stack at its current height as
the limit for removing all roots. At this point all MVMROOTs have to be in
place. Otherwise a MVM_gc_root_temp_pop_all called by
MVM_exception_throw_adhoc_free_va will remove not only the temp roots installed
by the nested run loop, but also frame roots leading to a possible temp root
underflow later on.",Nice catch! Note that nativecall_libffi.c also needs a patch like this too. (Which probably means we need to factor stuff out a bit better...),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,368,2016-05-14T15:42:06Z,2016-05-14T17:24:19Z,2016-05-14T17:24:19Z,MERGED,True,32,32,2,https://github.com/niner,Fix temp root stack underflow with exceptions in NC callbacks,2,[],https://github.com/MoarVM/MoarVM/pull/368,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/368#issuecomment-219228440,"MVM_gc_root_temp_mark marks the temporary root stack at its current height as
the limit for removing all roots. At this point all MVMROOTs have to be in
place. Otherwise a MVM_gc_root_temp_pop_all called by
MVM_exception_throw_adhoc_free_va will remove not only the temp roots installed
by the nested run loop, but also frame roots leading to a possible temp root
underflow later on.","Thanks for the reminder! Added a second commit with a ported fix. And yes, that's much copy&pasted code...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,369,2016-05-15T11:04:32Z,2016-05-15T12:01:51Z,2016-05-15T12:04:23Z,CLOSED,False,78,28,1,https://github.com/zhuomingliang,Update more serialization from int32 to varint.,1,[],https://github.com/MoarVM/MoarVM/pull/369,https://github.com/zhuomingliang,1,https://github.com/MoarVM/MoarVM/pull/369,"This reduces rakudo core setting size about 512 KB.
Note: This is broken somewhere and I don't know where I should take a look or fix it.","This reduces rakudo core setting size about 512 KB.
Note: This is broken somewhere and I don't know where I should take a look or fix it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,369,2016-05-15T11:04:32Z,2016-05-15T12:01:51Z,2016-05-15T12:04:23Z,CLOSED,False,78,28,1,https://github.com/zhuomingliang,Update more serialization from int32 to varint.,1,[],https://github.com/MoarVM/MoarVM/pull/369,https://github.com/zhuomingliang,2,https://github.com/MoarVM/MoarVM/pull/369#issuecomment-219281876,"This reduces rakudo core setting size about 512 KB.
Note: This is broken somewhere and I don't know where I should take a look or fix it.",Merged.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,370,2016-05-18T14:29:32Z,2016-05-27T09:23:53Z,2016-05-27T09:23:53Z,MERGED,True,15,1,1,https://github.com/pmurias,Serialize hll role.,2,[],https://github.com/MoarVM/MoarVM/pull/370,https://github.com/pmurias,1,https://github.com/MoarVM/MoarVM/pull/370,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,370,2016-05-18T14:29:32Z,2016-05-27T09:23:53Z,2016-05-27T09:23:53Z,MERGED,True,15,1,1,https://github.com/pmurias,Serialize hll role.,2,[],https://github.com/MoarVM/MoarVM/pull/370,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/370#issuecomment-222101037,,"The version bump is required. Consider a serialized STable with a HLL role, serialized after this change. An older version of MoarVM that didn't recognize the new flag would end up reading the HLL role value as it if was, for example, part of a parametric type descriptor (simply because that is what comes next).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,375,2016-06-06T15:52:33Z,2016-06-09T13:21:44Z,2016-06-09T13:21:44Z,MERGED,True,43,43,2,https://github.com/coke,Smoke me/spaceybuild,2,[],https://github.com/MoarVM/MoarVM/pull/375,https://github.com/coke,1,https://github.com/MoarVM/MoarVM/pull/375,For issue #374,For issue #374,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,376,2016-06-11T13:52:54Z,2016-06-12T11:17:37Z,2016-07-05T22:13:58Z,CLOSED,False,16,0,1,https://github.com/MasterDuke17,Fix for RT #128306,1,[],https://github.com/MoarVM/MoarVM/pull/376,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/376,Converts Unicode codepoints to their numeric value,Converts Unicode codepoints to their numeric value,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,376,2016-06-11T13:52:54Z,2016-06-12T11:17:37Z,2016-07-05T22:13:58Z,CLOSED,False,16,0,1,https://github.com/MasterDuke17,Fix for RT #128306,1,[],https://github.com/MoarVM/MoarVM/pull/376,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/376#issuecomment-225427125,Converts Unicode codepoints to their numeric value,"Thanks for looking into the bug. While this patch may indeed fix the issue in question, it's the wrong place to fix it. The ASCII encoder should not be magically transforming input characters. A more likely fix is for the code processing named arguments in Actions.nqp in Rakudo to use a way of processing numbers that can properly handle other Unicode digits, such as the nqp::radix op.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,377,2016-06-28T07:49:59Z,2016-06-28T14:30:57Z,2016-06-28T17:48:38Z,MERGED,True,4,2,1,https://github.com/salortiz,A simple 'elems' implementation for MVMContext REPR,1,[],https://github.com/MoarVM/MoarVM/pull/377,https://github.com/salortiz,1,https://github.com/MoarVM/MoarVM/pull/377,"Seen on IRC:
jnthn  lizmat: (.elems) looks like something we should be able to fix.
lizmat jnthn: fixing nqp::elems on an MVMContext, would be great
With this the following holds in Rakudo REPL:
> say MY::.elems == MY::.pairs.elems;
True","Seen on IRC:
jnthn  lizmat: (.elems) looks like something we should be able to fix.
lizmat jnthn: fixing nqp::elems on an MVMContext, would be great
With this the following holds in Rakudo REPL:
> say MY::.elems == MY::.pairs.elems;
True",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,379,2016-06-30T16:35:31Z,2016-10-01T13:58:32Z,2016-10-01T13:58:33Z,MERGED,True,1,5,1,https://github.com/dod38fr,Fix build without libtommath source,1,[],https://github.com/MoarVM/MoarVM/pull/379,https://github.com/dod38fr,1,https://github.com/MoarVM/MoarVM/pull/379,"Debian policy requires (as far as possible) to remove convenience copy of source code before build.
libtommath is available on Debian as libtommath package, so libtommath source is removed from moar/3rdparty directory before build.
Unfortunately, Configure.pl --has-libtommath wants to create a libtommath archive:
Configuring 3rdparty libs .............................. OK

  3rdparty: 3rdparty/dyncall/dyncall/libdyncall_s.a
            3rdparty/dyncall/dyncallback/libdyncallback_s.a
            3rdparty/dyncall/dynload/libdynload_s.a
            3rdparty/libtommath/libtommath.a
            3rdparty/sha1/libsha1.a
            3rdparty/tinymt/libtinymt.a

And build fails with this message:
  make[2]: *** No rule to make target '3rdparty/libtommath/bn_mp_get_long.o', needed by '3rdparty/libtommath/libtommath.a'.  Stop.
  make[2]: Leaving directory '/home/domi/debian-dev/build-area/moarvm-2016.06+dfsg'

With this patch, the libtommath archive is no longer required and the build succeeds.
All the best
Dod","Debian policy requires (as far as possible) to remove convenience copy of source code before build.
libtommath is available on Debian as libtommath package, so libtommath source is removed from moar/3rdparty directory before build.
Unfortunately, Configure.pl --has-libtommath wants to create a libtommath archive:
Configuring 3rdparty libs .............................. OK

  3rdparty: 3rdparty/dyncall/dyncall/libdyncall_s.a
            3rdparty/dyncall/dyncallback/libdyncallback_s.a
            3rdparty/dyncall/dynload/libdynload_s.a
            3rdparty/libtommath/libtommath.a
            3rdparty/sha1/libsha1.a
            3rdparty/tinymt/libtinymt.a

And build fails with this message:
  make[2]: *** No rule to make target '3rdparty/libtommath/bn_mp_get_long.o', needed by '3rdparty/libtommath/libtommath.a'.  Stop.
  make[2]: Leaving directory '/home/domi/debian-dev/build-area/moarvm-2016.06+dfsg'

With this patch, the libtommath archive is no longer required and the build succeeds.
All the best
Dod",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,380,2016-07-05T02:43:49Z,2016-07-05T06:35:31Z,2016-07-05T06:35:31Z,MERGED,True,12,13,1,https://github.com/MasterDuke17,An attempt to get the generated file name to match the contents for tools/parse_coverage_report.p6,1,[],https://github.com/MoarVM/MoarVM/pull/380,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/380,"It's getting late and I'm definitely thinking kind of slowly, but this seems to work (it skips src/core/core_epilogue.pm).","It's getting late and I'm definitely thinking kind of slowly, but this seems to work (it skips src/core/core_epilogue.pm).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,381,2016-07-06T02:38:15Z,2016-07-06T11:03:17Z,2016-07-06T11:03:17Z,MERGED,True,363,17,1,https://github.com/MasterDuke17,Give percentage its own column and add some JS+CSS to make the table sortable,2,[],https://github.com/MoarVM/MoarVM/pull/381,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/381,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,382,2016-07-07T03:28:51Z,2016-07-07T08:16:48Z,2016-07-07T08:16:48Z,MERGED,True,16,11,1,https://github.com/MasterDuke17,Add line number from the source file as a column in the overview,3,[],https://github.com/MoarVM/MoarVM/pull/382,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/382,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,383,2016-07-07T13:41:29Z,2017-11-06T19:22:14Z,2017-11-06T19:22:14Z,CLOSED,False,0,0,0,https://github.com/coke,Smoke me/spaceybuild,3,[],https://github.com/MoarVM/MoarVM/pull/383,https://github.com/coke,1,https://github.com/MoarVM/MoarVM/pull/383,"Fix the issue with a space in the path during build.
Old branch, smoked but never merged, making pull request so we don't lose it.","Fix the issue with a space in the path during build.
Old branch, smoked but never merged, making pull request so we don't lose it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,383,2016-07-07T13:41:29Z,2017-11-06T19:22:14Z,2017-11-06T19:22:14Z,CLOSED,False,0,0,0,https://github.com/coke,Smoke me/spaceybuild,3,[],https://github.com/MoarVM/MoarVM/pull/383,https://github.com/coke,2,https://github.com/MoarVM/MoarVM/pull/383#issuecomment-231364309,"Fix the issue with a space in the path during build.
Old branch, smoked but never merged, making pull request so we don't lose it.","Not quite baked yet: If I build in ~/sandbox/Moar\ VM/ , make install still makes a ~/sandbox/Moar directory and then installs into ./VM",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,385,2016-07-13T00:22:48Z,2016-07-13T07:55:03Z,2016-07-13T18:54:20Z,MERGED,True,5,4,1,https://github.com/dwarring,fix sha1 op to work with null bytes,1,[],https://github.com/MoarVM/MoarVM/pull/385,https://github.com/dwarring,1,https://github.com/MoarVM/MoarVM/pull/385,"Fixes MoarVM terminating on null bytes, as in:
david@X346:~/git/rakudo-bleed$ ./perl6-m -e'use nqp; say nqp::sha1(""ab\x[0]c""); say nqp::sha1(""ab\x[0]d""); '
DA23614E02469A0D7C7BD1BDAB5C9C474B1904DC
DA23614E02469A0D7C7BD1BDAB5C9C474B1904DC
david@X346:~/git/rakudo-bleed$ ./perl6-j -e'use nqp; say nqp::sha1(""ab\x[0]c""); say nqp::sha1(""ab\x[0]d""); '
DBDD4F85D8A56500AA5C9C8A0D456F96280C92E5
2876366FE4F4BC6D0B9D7FEC1D6F757B94AFD827

This fixes MoarVM to act like the JVM
This is a prerequisite for this PR rakudo/rakudo#811","Fixes MoarVM terminating on null bytes, as in:
david@X346:~/git/rakudo-bleed$ ./perl6-m -e'use nqp; say nqp::sha1(""ab\x[0]c""); say nqp::sha1(""ab\x[0]d""); '
DA23614E02469A0D7C7BD1BDAB5C9C474B1904DC
DA23614E02469A0D7C7BD1BDAB5C9C474B1904DC
david@X346:~/git/rakudo-bleed$ ./perl6-j -e'use nqp; say nqp::sha1(""ab\x[0]c""); say nqp::sha1(""ab\x[0]d""); '
DBDD4F85D8A56500AA5C9C8A0D456F96280C92E5
2876366FE4F4BC6D0B9D7FEC1D6F757B94AFD827

This fixes MoarVM to act like the JVM
This is a prerequisite for this PR rakudo/rakudo#811",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,386,2016-07-23T12:00:06Z,2016-07-23T12:02:01Z,2016-07-23T12:03:41Z,MERGED,True,1,1,1,https://github.com/baby-gnu,Fix small typo,1,[],https://github.com/MoarVM/MoarVM/pull/386,https://github.com/baby-gnu,1,https://github.com/MoarVM/MoarVM/pull/386,Thanks to lintian,Thanks to lintian,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,388,2016-08-02T19:07:40Z,2016-08-02T19:38:03Z,2016-08-02T19:38:15Z,MERGED,True,4,1,1,https://github.com/cuonglm,Fix wrong EOF detect for /proc file.,1,[],https://github.com/MoarVM/MoarVM/pull/388,https://github.com/cuonglm,1,https://github.com/MoarVM/MoarVM/pull/388,Fixes RT #127370,Fixes RT #127370,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,388,2016-08-02T19:07:40Z,2016-08-02T19:38:03Z,2016-08-02T19:38:15Z,MERGED,True,4,1,1,https://github.com/cuonglm,Fix wrong EOF detect for /proc file.,1,[],https://github.com/MoarVM/MoarVM/pull/388,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/388#issuecomment-237018693,Fixes RT #127370,Looks reasonable; thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,390,2016-08-17T19:30:37Z,2016-08-19T06:26:22Z,2016-08-19T06:26:22Z,CLOSED,False,0,15,3,https://github.com/LemonBoy,Remove keep_caller from MVMFrame,1,[],https://github.com/MoarVM/MoarVM/pull/390,https://github.com/LemonBoy,1,https://github.com/MoarVM/MoarVM/pull/390,"Fixes some cases (RT #128803) where the backtraces would be abruptly
truncated due to an optimization introduced in cecf572.
As suggested by @jnthn [1] the best solution is to simply revert the
optimization as it's not worth it anymore.
Please keep in mind that at the moment this change makes the spectest suite fail when doing the t/spec/integration/error-reporting.rakudo.moar file as it contains a test for the RT #12745.
This change obsoletes the [https://github.com/rakudo/rakudo/commit/67b6544e48](commit referenced in the ticket) and renders the test useless as @zoffixznet pointed out.
[1] http://irclog.perlgeek.de/moarvm/2016-08-17#i_13040630","Fixes some cases (RT #128803) where the backtraces would be abruptly
truncated due to an optimization introduced in cecf572.
As suggested by @jnthn [1] the best solution is to simply revert the
optimization as it's not worth it anymore.
Please keep in mind that at the moment this change makes the spectest suite fail when doing the t/spec/integration/error-reporting.rakudo.moar file as it contains a test for the RT #12745.
This change obsoletes the [https://github.com/rakudo/rakudo/commit/67b6544e48](commit referenced in the ticket) and renders the test useless as @zoffixznet pointed out.
[1] http://irclog.perlgeek.de/moarvm/2016-08-17#i_13040630",True,{'THUMBS_UP': ['https://github.com/zoffixznet']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,390,2016-08-17T19:30:37Z,2016-08-19T06:26:22Z,2016-08-19T06:26:22Z,CLOSED,False,0,15,3,https://github.com/LemonBoy,Remove keep_caller from MVMFrame,1,[],https://github.com/MoarVM/MoarVM/pull/390,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/390#issuecomment-240938512,"Fixes some cases (RT #128803) where the backtraces would be abruptly
truncated due to an optimization introduced in cecf572.
As suggested by @jnthn [1] the best solution is to simply revert the
optimization as it's not worth it anymore.
Please keep in mind that at the moment this change makes the spectest suite fail when doing the t/spec/integration/error-reporting.rakudo.moar file as it contains a test for the RT #12745.
This change obsoletes the [https://github.com/rakudo/rakudo/commit/67b6544e48](commit referenced in the ticket) and renders the test useless as @zoffixznet pointed out.
[1] http://irclog.perlgeek.de/moarvm/2016-08-17#i_13040630",Looks good enough to me. I'll merge it. The test will have to be removed or changed.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,392,2016-08-18T16:16:16Z,2016-08-19T11:11:36Z,2016-08-19T11:11:36Z,MERGED,True,3,0,1,https://github.com/LemonBoy,Correctly NULL-terminate the buffer in MVM_vm_dump_file.,1,[],https://github.com/MoarVM/MoarVM/pull/392,https://github.com/LemonBoy,1,https://github.com/MoarVM/MoarVM/pull/392,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,392,2016-08-18T16:16:16Z,2016-08-19T11:11:36Z,2016-08-19T11:11:36Z,MERGED,True,3,0,1,https://github.com/LemonBoy,Correctly NULL-terminate the buffer in MVM_vm_dump_file.,1,[],https://github.com/MoarVM/MoarVM/pull/392,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/392#issuecomment-240991619,,"I read that as o[1] instead of o[l] for a moment and was thinking ""how could that possibly work?!"" :-) Looks good; thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,394,2016-08-22T15:49:21Z,2016-08-22T16:29:56Z,2016-08-22T16:29:56Z,MERGED,True,5,2,1,https://github.com/LemonBoy,Do not crash when the container config can't be read.,1,[],https://github.com/MoarVM/MoarVM/pull/394,https://github.com/LemonBoy,1,https://github.com/MoarVM/MoarVM/pull/394,"Still don't know why perl6 --target=mbc doesn't provide any rakudo_scalar, but at least it won't crash when loading a moarvm dump.","Still don't know why perl6 --target=mbc doesn't provide any rakudo_scalar, but at least it won't crash when loading a moarvm dump.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,395,2016-08-22T19:13:43Z,2016-08-22T20:02:28Z,2016-08-22T20:02:28Z,MERGED,True,12,2,1,https://github.com/LemonBoy,Correctly calculate the work_size when the inlining is enabled.,1,[],https://github.com/MoarVM/MoarVM/pull/395,https://github.com/LemonBoy,1,https://github.com/MoarVM/MoarVM/pull/395,"Thanks to @jnthn for pinpointing the problem.
RT#128705","Thanks to @jnthn for pinpointing the problem.
RT#128705",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,396,2016-08-23T09:18:09Z,2016-08-23T10:11:25Z,2016-08-23T10:11:25Z,MERGED,True,4,4,1,https://github.com/LemonBoy,"snprintf returns an int, not a size_t.",1,[],https://github.com/MoarVM/MoarVM/pull/396,https://github.com/LemonBoy,1,https://github.com/MoarVM/MoarVM/pull/396,Just a minor annoyance I discovered while building with clang. Closes #389,Just a minor annoyance I discovered while building with clang. Closes #389,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,397,2016-08-23T17:24:03Z,2016-09-06T17:37:48Z,2016-09-06T17:37:48Z,MERGED,True,9,1,1,https://github.com/LemonBoy,Fix mvm_tell for files that haven't been read from.,1,[],https://github.com/MoarVM/MoarVM/pull/397,https://github.com/LemonBoy,1,https://github.com/MoarVM/MoarVM/pull/397,"Not 100% sure about the exception message though,","Not 100% sure about the exception message though,",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,397,2016-08-23T17:24:03Z,2016-09-06T17:37:48Z,2016-09-06T17:37:48Z,MERGED,True,9,1,1,https://github.com/LemonBoy,Fix mvm_tell for files that haven't been read from.,1,[],https://github.com/MoarVM/MoarVM/pull/397,https://github.com/zhuomingliang,2,https://github.com/MoarVM/MoarVM/pull/397#issuecomment-241858469,"Not 100% sure about the exception message though,","Not sure about it, didn't it return 0 for files that haven't been read from?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,397,2016-08-23T17:24:03Z,2016-09-06T17:37:48Z,2016-09-06T17:37:48Z,MERGED,True,9,1,1,https://github.com/LemonBoy,Fix mvm_tell for files that haven't been read from.,1,[],https://github.com/MoarVM/MoarVM/pull/397,https://github.com/LemonBoy,3,https://github.com/MoarVM/MoarVM/pull/397#issuecomment-241877712,"Not 100% sure about the exception message though,",The user could've only written something to the file and in that case ds would still be NULL,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,397,2016-08-23T17:24:03Z,2016-09-06T17:37:48Z,2016-09-06T17:37:48Z,MERGED,True,9,1,1,https://github.com/LemonBoy,Fix mvm_tell for files that haven't been read from.,1,[],https://github.com/MoarVM/MoarVM/pull/397,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/397#issuecomment-245028602,"Not 100% sure about the exception message though,","Seems reasonable; can see the hesitation on the error, but it mentions the operation the user was trying to do (a tell) that failed, so I think it's OK.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,399,2016-08-30T19:39:04Z,2016-08-30T20:44:10Z,2016-08-31T02:05:21Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,"'Arguments' are what get passed to functions, etc.",1,[],https://github.com/MoarVM/MoarVM/pull/399,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/399,"See http://irclog.perlgeek.de/perl6-dev/2016-08-30#i_13119526
Passed 'make test' in nqp and 'make spectest' in Rakudo.","See http://irclog.perlgeek.de/perl6-dev/2016-08-30#i_13119526
Passed 'make test' in nqp and 'make spectest' in Rakudo.",True,{'THUMBS_UP': ['https://github.com/pmichaud']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,401,2016-09-06T09:07:11Z,2016-09-06T17:35:35Z,2016-09-06T17:35:35Z,MERGED,True,7,22,14,https://github.com/paultcochrane,Remove unused variables,4,[],https://github.com/MoarVM/MoarVM/pull/401,https://github.com/paultcochrane,1,https://github.com/MoarVM/MoarVM/pull/401,"Remove as many unused variables as found by the -Wunused-variable GCC compiler flag as possible.  This doesn't remove all such warnings since the copy_to() function in CUnion.c is currently NYI, and the automatically generated output in unicode.c contains in one place an unused size variable.
I've tried to slice the commits as thinly as possible so that they can be cherry-picked if so desired.
If I can improve upon the patches please let me know and I'll resubmit the PR.","Remove as many unused variables as found by the -Wunused-variable GCC compiler flag as possible.  This doesn't remove all such warnings since the copy_to() function in CUnion.c is currently NYI, and the automatically generated output in unicode.c contains in one place an unused size variable.
I've tried to slice the commits as thinly as possible so that they can be cherry-picked if so desired.
If I can improve upon the patches please let me know and I'll resubmit the PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,401,2016-09-06T09:07:11Z,2016-09-06T17:35:35Z,2016-09-06T17:35:35Z,MERGED,True,7,22,14,https://github.com/paultcochrane,Remove unused variables,4,[],https://github.com/MoarVM/MoarVM/pull/401,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/401#issuecomment-245027882,"Remove as many unused variables as found by the -Wunused-variable GCC compiler flag as possible.  This doesn't remove all such warnings since the copy_to() function in CUnion.c is currently NYI, and the automatically generated output in unicode.c contains in one place an unused size variable.
I've tried to slice the commits as thinly as possible so that they can be cherry-picked if so desired.
If I can improve upon the patches please let me know and I'll resubmit the PR.",All seem reasonable to me; thanks.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,402,2016-09-06T15:54:48Z,2016-09-06T17:34:11Z,2016-09-06T17:46:12Z,CLOSED,False,6,5,5,https://github.com/paultcochrane,Remove parentheses warnings in gcc,4,[],https://github.com/MoarVM/MoarVM/pull/402,https://github.com/paultcochrane,1,https://github.com/MoarVM/MoarVM/pull/402,"This pull request removes the parentheses issues highlighted by the -Wparentheses gcc warning option (on by default in -Wall).  It adds the -Wparentheses option to the list of gcc warnings flags so that such issues don't repeat themselves in the future.
If I can improve upon the PR please let me know and I'll update it and resubmit.","This pull request removes the parentheses issues highlighted by the -Wparentheses gcc warning option (on by default in -Wall).  It adds the -Wparentheses option to the list of gcc warnings flags so that such issues don't repeat themselves in the future.
If I can improve upon the PR please let me know and I'll update it and resubmit.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,402,2016-09-06T15:54:48Z,2016-09-06T17:34:11Z,2016-09-06T17:46:12Z,CLOSED,False,6,5,5,https://github.com/paultcochrane,Remove parentheses warnings in gcc,4,[],https://github.com/MoarVM/MoarVM/pull/402,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/402#issuecomment-245027443,"This pull request removes the parentheses issues highlighted by the -Wparentheses gcc warning option (on by default in -Wall).  It adds the -Wparentheses option to the list of gcc warnings flags so that such issues don't repeat themselves in the future.
If I can improve upon the PR please let me know and I'll update it and resubmit.","Argh, I explicitly disabled this warning on clang where it's a default one. Knowing that && is tighter than || is up there with knowing that * is tighter than +. And anyone feeling it ain't is in the worst place to submit patches changing it. :-)
Short of obviously OK stuff like removing dead code, I'm generally not fond of patches submitted purely for ""cleanup"". Folks fixing bugs, adding features, or doing optimizations are welcome and encouraged to leave the code in that area cleaner than they found it. They're doing so off the back of having gained an understanding of what's going on. Patches for the sake of cleanup are risky. Had this one got in, we'd have had two bugs in heap profiling, and they would not have come to light easily. Given the generally good code quality of MoarVM, the risk outweighs the gain to me.
In summary: thanks for trying to help, and sorry there was a misleading todo list hanging around, I'll reject this one, because it does harm, without doing good.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,402,2016-09-06T15:54:48Z,2016-09-06T17:34:11Z,2016-09-06T17:46:12Z,CLOSED,False,6,5,5,https://github.com/paultcochrane,Remove parentheses warnings in gcc,4,[],https://github.com/MoarVM/MoarVM/pull/402,https://github.com/paultcochrane,3,https://github.com/MoarVM/MoarVM/pull/402#issuecomment-245031098,"This pull request removes the parentheses issues highlighted by the -Wparentheses gcc warning option (on by default in -Wall).  It adds the -Wparentheses option to the list of gcc warnings flags so that such issues don't repeat themselves in the future.
If I can improve upon the PR please let me know and I'll update it and resubmit.",That's good to know.  Thanks for the clear explanation and comment about policy!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,405,2016-09-09T15:50:06Z,2016-09-27T14:24:14Z,2016-12-07T09:58:48Z,CLOSED,False,12,16,2,https://github.com/LemonBoy,Optimize the check for negative bignums.,2,[],https://github.com/MoarVM/MoarVM/pull/405,https://github.com/LemonBoy,1,https://github.com/MoarVM/MoarVM/pull/405,We save a function call for every check.,We save a function call for every check.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,405,2016-09-09T15:50:06Z,2016-09-27T14:24:14Z,2016-12-07T09:58:48Z,CLOSED,False,12,16,2,https://github.com/LemonBoy,Optimize the check for negative bignums.,2,[],https://github.com/MoarVM/MoarVM/pull/405,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/405#issuecomment-250903555,We save a function call for every check.,"@LemonBoy any reason to close this besides ""too slow to get review""? Finally got around to looking at it now, and it looks fine.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,405,2016-09-09T15:50:06Z,2016-09-27T14:24:14Z,2016-12-07T09:58:48Z,CLOSED,False,12,16,2,https://github.com/LemonBoy,Optimize the check for negative bignums.,2,[],https://github.com/MoarVM/MoarVM/pull/405,https://github.com/LemonBoy,3,https://github.com/MoarVM/MoarVM/pull/405#issuecomment-250908151,We save a function call for every check.,"None in particular, it got killed in a housekeeping spree :)
You can easily grab the patch and apply it using git though, I'd be happy to see this applied.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,405,2016-09-09T15:50:06Z,2016-09-27T14:24:14Z,2016-12-07T09:58:48Z,CLOSED,False,12,16,2,https://github.com/LemonBoy,Optimize the check for negative bignums.,2,[],https://github.com/MoarVM/MoarVM/pull/405,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/405#issuecomment-265340662,We save a function call for every check.,"I seem to recall this was related to https://rt.perl.org/Ticket/Display.html?id=128035, was the patch actually applied?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,405,2016-09-09T15:50:06Z,2016-09-27T14:24:14Z,2016-12-07T09:58:48Z,CLOSED,False,12,16,2,https://github.com/LemonBoy,Optimize the check for negative bignums.,2,[],https://github.com/MoarVM/MoarVM/pull/405,https://github.com/jnthn,5,https://github.com/MoarVM/MoarVM/pull/405#issuecomment-265404978,We save a function call for every check.,"D'oh, I forgot. It's applied now, though it was a welcome optimization rather than a behavior change, so no impact on the RT in question.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,406,2016-09-10T19:14:42Z,2016-10-01T09:42:30Z,2016-10-01T09:42:30Z,MERGED,True,51,19,1,https://github.com/cygx,Make MVM_file_open_fh() throw if the file we opened was a directory,3,[],https://github.com/MoarVM/MoarVM/pull/406,https://github.com/cygx,1,https://github.com/MoarVM/MoarVM/pull/406,"This means nqp::open() will now throw if we pass in the path to a directory, making the check in src/core/IO/Handle.pm superfluous.
Getting rid of that check is the Right Thing To Do if we care for atomicity of file system operations, but getting an exception of type X::IO::Directory thrown would need some additional fiddling...","This means nqp::open() will now throw if we pass in the path to a directory, making the check in src/core/IO/Handle.pm superfluous.
Getting rid of that check is the Right Thing To Do if we care for atomicity of file system operations, but getting an exception of type X::IO::Directory thrown would need some additional fiddling...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,406,2016-09-10T19:14:42Z,2016-10-01T09:42:30Z,2016-10-01T09:42:30Z,MERGED,True,51,19,1,https://github.com/cygx,Make MVM_file_open_fh() throw if the file we opened was a directory,3,[],https://github.com/MoarVM/MoarVM/pull/406,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/406#issuecomment-246262146,"This means nqp::open() will now throw if we pass in the path to a directory, making the check in src/core/IO/Handle.pm superfluous.
Getting rid of that check is the Right Thing To Do if we care for atomicity of file system operations, but getting an exception of type X::IO::Directory thrown would need some additional fiddling...","This would not only make open more atomic, but also remove a rather costly check on each file open.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,406,2016-09-10T19:14:42Z,2016-10-01T09:42:30Z,2016-10-01T09:42:30Z,MERGED,True,51,19,1,https://github.com/cygx,Make MVM_file_open_fh() throw if the file we opened was a directory,3,[],https://github.com/MoarVM/MoarVM/pull/406,https://github.com/cygx,3,https://github.com/MoarVM/MoarVM/pull/406#issuecomment-246284454,"This means nqp::open() will now throw if we pass in the path to a directory, making the check in src/core/IO/Handle.pm superfluous.
Getting rid of that check is the Right Thing To Do if we care for atomicity of file system operations, but getting an exception of type X::IO::Directory thrown would need some additional fiddling...","Also note that various code paths leak memory (fmode and data need to be freed and we need to call uv_fs_req_cleanup() on req).
As an aside, wow: From the libuv documentation:

const char* uv_strerror(int err)
Returns the error message for the given error code. Leaks a few bytes of memory when you call it with an unknown error code.

Well, at least it's documented ;)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,408,2016-09-17T21:30:01Z,2016-10-01T09:44:12Z,2016-10-01T09:44:12Z,MERGED,True,3,1,1,https://github.com/labster,Add error message for likely macOS build failure,1,[],https://github.com/MoarVM/MoarVM/pull/408,https://github.com/labster,1,https://github.com/MoarVM/MoarVM/pull/408,"On a recent Rakudo install, I encountered a build failure that is due to this happening after an Xcode upgrade:
brent@ragnar ~/c/rakudo (nom)> gcc


Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.


brent@ragnar ~/c/rakudo (nom)>
So, in the pursuit of awesome error messages, this.","On a recent Rakudo install, I encountered a build failure that is due to this happening after an Xcode upgrade:
brent@ragnar ~/c/rakudo (nom)> gcc


Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.


brent@ragnar ~/c/rakudo (nom)>
So, in the pursuit of awesome error messages, this.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,408,2016-09-17T21:30:01Z,2016-10-01T09:44:12Z,2016-10-01T09:44:12Z,MERGED,True,3,1,1,https://github.com/labster,Add error message for likely macOS build failure,1,[],https://github.com/MoarVM/MoarVM/pull/408,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/408#issuecomment-250903481,"On a recent Rakudo install, I encountered a build failure that is due to this happening after an Xcode upgrade:
brent@ragnar ~/c/rakudo (nom)> gcc


Agreeing to the Xcode/iOS license requires admin privileges, please re-run as root via sudo.


brent@ragnar ~/c/rakudo (nom)>
So, in the pursuit of awesome error messages, this.",The check fail is just that one of the builds timed out while doing a git clone.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,409,2016-09-20T22:14:38Z,2016-09-21T07:27:41Z,2016-09-21T07:27:41Z,MERGED,True,6,2,1,https://github.com/zoffixznet,Avoid 2 irrelevant lines and add line number IDs,1,[],https://github.com/MoarVM/MoarVM/pull/409,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/409,"This makes the line numbers reported in the report match those in the actual
individual source files and allows to map output of &some-code-sub.line to the
coverage report. Added line numbers in id="""" attribute allow to link people
to individual lines in the coverage report.","This makes the line numbers reported in the report match those in the actual
individual source files and allows to map output of &some-code-sub.line to the
coverage report. Added line numbers in id="""" attribute allow to link people
to individual lines in the coverage report.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,411,2016-09-22T21:50:26Z,2016-09-22T22:53:34Z,2016-09-22T23:33:55Z,MERGED,True,1,0,1,https://github.com/zoffixznet,Include a note on the date/time when the report was generated,1,[],https://github.com/MoarVM/MoarVM/pull/411,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/411,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,413,2016-09-25T23:41:15Z,2016-09-25T23:43:18Z,2016-09-25T23:59:50Z,MERGED,True,1,1,1,https://github.com/zoffixznet,Turn on interpolation for the generated-on date,1,[],https://github.com/MoarVM/MoarVM/pull/413,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/413,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,415,2016-09-26T19:11:02Z,2016-09-26T19:19:53Z,2016-09-26T19:21:59Z,MERGED,True,1,1,1,https://github.com/zoffixznet,Indicate encoding in HTML,1,[],https://github.com/MoarVM/MoarVM/pull/415,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/415,So we don't get mojibake:,So we don't get mojibake:,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,416,2016-09-30T08:15:41Z,2016-10-01T09:40:02Z,2016-10-01T09:40:02Z,MERGED,True,6,3,1,https://github.com/peschwa,Die on CStruct without any fields.,3,[],https://github.com/MoarVM/MoarVM/pull/416,https://github.com/peschwa,1,https://github.com/MoarVM/MoarVM/pull/416,"I'm personally not quite happy with info_alloc now existing as purely an alias to num_attrs, but it's probably semantically clearer that way.
In any case, purpose of this patch is to stop cheating when the user does something that doesn't really make sense. The equivalent patch on nqp-j locally also has the class name, but I haven't figured out how we do that on MoarVM.","I'm personally not quite happy with info_alloc now existing as purely an alias to num_attrs, but it's probably semantically clearer that way.
In any case, purpose of this patch is to stop cheating when the user does something that doesn't really make sense. The equivalent patch on nqp-j locally also has the class name, but I haven't figured out how we do that on MoarVM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,419,2016-10-06T18:18:55Z,2016-10-06T19:04:36Z,2016-10-06T19:04:36Z,MERGED,True,1,1,1,https://github.com/niner,Fix uninitialized arg_names of an MVMCallsite,1,[],https://github.com/MoarVM/MoarVM/pull/419,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/419,"Could be the reason for
==12118== Conditional jump or move depends on uninitialised value(s)
==12118==    at 0x40BA2D0: MVM_callsite_destroy (callsite.c:100)
reported by dogbert17++","Could be the reason for
==12118== Conditional jump or move depends on uninitialised value(s)
==12118==    at 0x40BA2D0: MVM_callsite_destroy (callsite.c:100)
reported by dogbert17++",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,420,2016-10-06T19:31:30Z,2016-10-06T19:32:17Z,2016-10-06T19:32:17Z,MERGED,True,39,35,1,https://github.com/niner,Fix CUnion::get_attribute treating inlined attrs as pointers,1,[],https://github.com/MoarVM/MoarVM/pull/420,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/420,"valgrind reports a Conditional jump or move depends on uninitialised value
when checking if cobj is not NULL. That's because inlined attributes are
not actually pointers but inlined values which may not have been initialized.
The attribute is still there though. Easily visible because the handlers for
the inlined cases don't actually use cobj. Fixed by moving the inlined cases
up and handling them separately.","valgrind reports a Conditional jump or move depends on uninitialised value
when checking if cobj is not NULL. That's because inlined attributes are
not actually pointers but inlined values which may not have been initialized.
The attribute is still there though. Easily visible because the handlers for
the inlined cases don't actually use cobj. Fixed by moving the inlined cases
up and handling them separately.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,421,2016-10-06T20:00:44Z,2016-10-06T20:05:36Z,2016-10-06T20:05:36Z,MERGED,True,1,1,1,https://github.com/niner,Fix 32 bit issue with rw args in NativeCall callbacks,1,[],https://github.com/MoarVM/MoarVM/pull/421,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/421,"We allocated the size of a pointer for storing a 64 bit integer.
Reported by valgrind as Invalid write of size 4 in MVM_nativecall_invoke
(nativecall_dyncall.c:491)","We allocated the size of a pointer for storing a 64 bit integer.
Reported by valgrind as Invalid write of size 4 in MVM_nativecall_invoke
(nativecall_dyncall.c:491)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,422,2016-10-07T13:10:34Z,2016-10-07T13:26:30Z,2016-10-07T13:26:30Z,MERGED,True,1,1,1,https://github.com/niner,Gracefully handle a 0 RSS reported by the Linux kernel,1,[],https://github.com/MoarVM/MoarVM/pull/422,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/422,"May fix a Floating point exception on armhf in case the reason is that
the Linux kernel just reports a 0 for RSS there.","May fix a Floating point exception on armhf in case the reason is that
the Linux kernel just reports a 0 for RSS there.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,429,2016-10-13T18:04:47Z,2016-10-16T09:45:20Z,2016-10-16T09:45:20Z,MERGED,True,3,1,1,https://github.com/dogbert17,Fix memory leaks in nqp_nfa_run.,1,[],https://github.com/MoarVM/MoarVM/pull/429,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/429,"MVM_unicode_normalizer_init allocates a buffer which, after use, should be
deallocated by a call to MVM_unicode_normalizer_cleanup. If this is not
done a memory leak occurs. There were three places in the file where the
call to MVM_unicode_normalizer_cleanup had been forgotten. Have run
valgrind and the memory leaks in t/spec/S05-metasyntax/charset.t are now
gone. Have also spectested, no failed tests.","MVM_unicode_normalizer_init allocates a buffer which, after use, should be
deallocated by a call to MVM_unicode_normalizer_cleanup. If this is not
done a memory leak occurs. There were three places in the file where the
call to MVM_unicode_normalizer_cleanup had been forgotten. Have run
valgrind and the memory leaks in t/spec/S05-metasyntax/charset.t are now
gone. Have also spectested, no failed tests.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,432,2016-10-18T11:12:28Z,2016-12-21T10:45:19Z,2016-12-21T10:45:21Z,MERGED,True,82,66,7,https://github.com/bdw,Extract spesh allocation from spesh,1,[],https://github.com/MoarVM/MoarVM/pull/432,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/432,"The spesh allocator uses a strategy known as memory-region
allocation and is suitable for more contexts than just spesh.
Not a strictly necessary step, but may be useful enough to merge.","The spesh allocator uses a strategy known as memory-region
allocation and is suitable for more contexts than just spesh.
Not a strictly necessary step, but may be useful enough to merge.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,434,2016-10-22T12:06:34Z,2016-10-22T13:25:12Z,2016-10-22T13:28:01Z,MERGED,True,4,4,4,https://github.com/titsuki,Fix the nativecall attribute error messages,1,[],https://github.com/MoarVM/MoarVM/pull/434,https://github.com/titsuki,1,https://github.com/MoarVM/MoarVM/pull/434,The nativecall attribute error messages are missing num64 in their list.,The nativecall attribute error messages are missing num64 in their list.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,434,2016-10-22T12:06:34Z,2016-10-22T13:25:12Z,2016-10-22T13:28:01Z,MERGED,True,4,4,4,https://github.com/titsuki,Fix the nativecall attribute error messages,1,[],https://github.com/MoarVM/MoarVM/pull/434,https://github.com/titsuki,2,https://github.com/MoarVM/MoarVM/pull/434#issuecomment-255528377,The nativecall attribute error messages are missing num64 in their list.,Thanks !,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,435,2016-10-26T11:36:34Z,2016-10-26T14:08:11Z,2016-10-26T14:08:11Z,MERGED,True,4,2,1,https://github.com/MasterDuke17,Add debug info when failing to bind an attribute,1,[],https://github.com/MoarVM/MoarVM/pull/435,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/435,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,438,2016-11-05T11:02:59Z,2016-11-14T12:02:16Z,2016-11-14T12:02:29Z,MERGED,True,16,2,1,https://github.com/FROGGS,work around clock_gettime issue on OSX,2,[],https://github.com/MoarVM/MoarVM/pull/438,https://github.com/FROGGS,1,https://github.com/MoarVM/MoarVM/pull/438,"This hopefully resolves issue #437. Needs testing on pre- and post
OSX 10.12 / Xcode 8.","This hopefully resolves issue #437. Needs testing on pre- and post
OSX 10.12 / Xcode 8.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,439,2016-11-06T16:03:48Z,2016-11-06T16:37:18Z,2016-11-06T16:39:52Z,MERGED,True,4,4,1,https://github.com/usev6,Fix typo in function name,1,[],https://github.com/MoarVM/MoarVM/pull/439,https://github.com/usev6,1,https://github.com/MoarVM/MoarVM/pull/439,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,440,2016-11-21T00:24:38Z,2016-11-21T13:04:35Z,2016-11-21T13:04:35Z,MERGED,True,3,3,1,https://github.com/MasterDuke17,Make multidim error messages say they are multidim,1,[],https://github.com/MoarVM/MoarVM/pull/440,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/440,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,442,2016-11-24T14:52:11Z,2016-11-26T03:01:53Z,2016-11-26T03:04:39Z,CLOSED,False,4,4,1,https://github.com/zoffixznet,Reduce big ints only when both operands are >1023 used size,1,[],https://github.com/MoarVM/MoarVM/pull/442,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/442,"The current implementation risks making one of the operands zero,
if it's small enough that when divided by 2**(max_size - 1023) its
whole part is zero. This causes operations like nqp::div_In(2**1020, 1)
to produce Inf and nqp::div_In(1, 2**1020) to produce zero, despite
both being perfectly representable in normalized double.
Fix by using the minimum size rather than the maximum size as a condition
for reduction.
Note: this still doesn't fix nqp::div_In() enterly, as (at least in
the docs[^1]) it's described as allowing scale of 309.
Fixes RT#130154: https://rt.perl.org/Ticket/Display.html?id=130154
Fixes RT#130153: https://rt.perl.org/Ticket/Display.html?id=130153
Fixes RT#130155: https://rt.perl.org/Ticket/Display.html?id=130155
[1] https://github.com/perl6/nqp/blob/master/docs/ops.markdown#div","The current implementation risks making one of the operands zero,
if it's small enough that when divided by 2**(max_size - 1023) its
whole part is zero. This causes operations like nqp::div_In(2**1020, 1)
to produce Inf and nqp::div_In(1, 2**1020) to produce zero, despite
both being perfectly representable in normalized double.
Fix by using the minimum size rather than the maximum size as a condition
for reduction.
Note: this still doesn't fix nqp::div_In() enterly, as (at least in
the docs[^1]) it's described as allowing scale of 309.
Fixes RT#130154: https://rt.perl.org/Ticket/Display.html?id=130154
Fixes RT#130153: https://rt.perl.org/Ticket/Display.html?id=130153
Fixes RT#130155: https://rt.perl.org/Ticket/Display.html?id=130155
[1] https://github.com/perl6/nqp/blob/master/docs/ops.markdown#div",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,442,2016-11-24T14:52:11Z,2016-11-26T03:01:53Z,2016-11-26T03:04:39Z,CLOSED,False,4,4,1,https://github.com/zoffixznet,Reduce big ints only when both operands are >1023 used size,1,[],https://github.com/MoarVM/MoarVM/pull/442,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/442#issuecomment-263040908,"The current implementation risks making one of the operands zero,
if it's small enough that when divided by 2**(max_size - 1023) its
whole part is zero. This causes operations like nqp::div_In(2**1020, 1)
to produce Inf and nqp::div_In(1, 2**1020) to produce zero, despite
both being perfectly representable in normalized double.
Fix by using the minimum size rather than the maximum size as a condition
for reduction.
Note: this still doesn't fix nqp::div_In() enterly, as (at least in
the docs[^1]) it's described as allowing scale of 309.
Fixes RT#130154: https://rt.perl.org/Ticket/Display.html?id=130154
Fixes RT#130153: https://rt.perl.org/Ticket/Display.html?id=130153
Fixes RT#130155: https://rt.perl.org/Ticket/Display.html?id=130155
[1] https://github.com/perl6/nqp/blob/master/docs/ops.markdown#div",I'll submit a different PR if I figure out a good solution. This one feels broken.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,443,2016-11-27T19:50:33Z,2016-11-27T19:56:28Z,2016-11-27T19:56:28Z,MERGED,True,1,1,1,https://github.com/dogbert17,The function MVMNFGTrieNode incorrectly tries to free a memory block of,1,[],https://github.com/MoarVM/MoarVM/pull/443,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/443,"sizeof(MVMNGFTrieNodeEntry) when the memory chunk to be freed contains
an MVMNFGTrieNode. This works on 64-bit systems since both structs
happens to be of the same size, something which is not the case on 32
bit systems. This resolves RT #130191 and is spectest clean.
cygx++ for helping track this down.","sizeof(MVMNGFTrieNodeEntry) when the memory chunk to be freed contains
an MVMNFGTrieNode. This works on 64-bit systems since both structs
happens to be of the same size, something which is not the case on 32
bit systems. This resolves RT #130191 and is spectest clean.
cygx++ for helping track this down.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,445,2016-11-30T19:51:03Z,2016-11-30T20:45:40Z,2016-11-30T20:45:40Z,MERGED,True,1,1,1,https://github.com/rurban,typo in nfg.h comment,1,[],https://github.com/MoarVM/MoarVM/pull/445,https://github.com/rurban,1,https://github.com/MoarVM/MoarVM/pull/445,look => lock,look => lock,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,447,2016-12-07T15:54:51Z,2016-12-07T16:30:49Z,2016-12-07T16:30:49Z,MERGED,True,15,13,1,https://github.com/pmurias,Fix pow_I when it takes an exponent larger than 2**32.,1,[],https://github.com/MoarVM/MoarVM/pull/447,https://github.com/pmurias,1,https://github.com/MoarVM/MoarVM/pull/447,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,455,2016-12-15T09:57:19Z,2016-12-20T18:28:22Z,2016-12-20T18:57:13Z,MERGED,True,96,27,7,https://github.com/zhuomingliang,Fix missing mvmroot and arg_flags allocation,9,[],https://github.com/MoarVM/MoarVM/pull/455,https://github.com/zhuomingliang,1,https://github.com/MoarVM/MoarVM/pull/455,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,459,2016-12-21T13:32:57Z,2016-12-30T12:25:41Z,2016-12-30T12:25:44Z,MERGED,True,4,30,2,https://github.com/zhuomingliang,Needless mvmroot,2,[],https://github.com/MoarVM/MoarVM/pull/459,https://github.com/zhuomingliang,1,https://github.com/MoarVM/MoarVM/pull/459,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,460,2016-12-22T02:08:58Z,2016-12-22T06:34:26Z,2016-12-22T11:00:27Z,MERGED,True,2,1,1,https://github.com/zoffixznet,Avoid division by zero error,1,[],https://github.com/MoarVM/MoarVM/pull/460,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/460,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,468,2016-12-25T06:49:46Z,2017-08-31T05:40:16Z,2017-08-31T05:40:16Z,CLOSED,False,62503,34799,3,https://github.com/samcv,[needs rework ] Add 8+ properties and fix several that were working incorrectly,7,[],https://github.com/MoarVM/MoarVM/pull/468,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/468,"Emoji properties
Bidi_Paired_Bracket
Bidi_Paired_Bracket_Type
Bidi_Mirroring_Glyph
Indic_Syllabic_Category
East_Asian_Width
Line_Break
Indic_Positional_Category
Jamo_Short_Name

Add in all Emoji properties (except Emoji_All which is a derived property) and add Indic_Syllabic_Category
With this change, Bidi_Mirroring_Glyph now returns a string instead of a
string which contains a hex number.
The Bidi_Paired_Bracket and Bidi_Paired_Bracket_Type properties have now been added.
Scrap the old LineBreak sub written in 2012 and use the one we use for enumerated values. The old one had hardcoded a set number of values for this property. Making that change fixes the tests we were failing for uniprop Line_Break in roast

With this change, rakudo.moar now passes all the tests for these three properties, as well as all the ones it was previously passing (aside from the failures for returning a 1 or 0 instead of True or False, which need to be handled on the Rakudo side).","Emoji properties
Bidi_Paired_Bracket
Bidi_Paired_Bracket_Type
Bidi_Mirroring_Glyph
Indic_Syllabic_Category
East_Asian_Width
Line_Break
Indic_Positional_Category
Jamo_Short_Name

Add in all Emoji properties (except Emoji_All which is a derived property) and add Indic_Syllabic_Category
With this change, Bidi_Mirroring_Glyph now returns a string instead of a
string which contains a hex number.
The Bidi_Paired_Bracket and Bidi_Paired_Bracket_Type properties have now been added.
Scrap the old LineBreak sub written in 2012 and use the one we use for enumerated values. The old one had hardcoded a set number of values for this property. Making that change fixes the tests we were failing for uniprop Line_Break in roast

With this change, rakudo.moar now passes all the tests for these three properties, as well as all the ones it was previously passing (aside from the failures for returning a 1 or 0 instead of True or False, which need to be handled on the Rakudo side).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,468,2016-12-25T06:49:46Z,2017-08-31T05:40:16Z,2017-08-31T05:40:16Z,CLOSED,False,62503,34799,3,https://github.com/samcv,[needs rework ] Add 8+ properties and fix several that were working incorrectly,7,[],https://github.com/MoarVM/MoarVM/pull/468,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/468#issuecomment-269112332,"Emoji properties
Bidi_Paired_Bracket
Bidi_Paired_Bracket_Type
Bidi_Mirroring_Glyph
Indic_Syllabic_Category
East_Asian_Width
Line_Break
Indic_Positional_Category
Jamo_Short_Name

Add in all Emoji properties (except Emoji_All which is a derived property) and add Indic_Syllabic_Category
With this change, Bidi_Mirroring_Glyph now returns a string instead of a
string which contains a hex number.
The Bidi_Paired_Bracket and Bidi_Paired_Bracket_Type properties have now been added.
Scrap the old LineBreak sub written in 2012 and use the one we use for enumerated values. The old one had hardcoded a set number of values for this property. Making that change fixes the tests we were failing for uniprop Line_Break in roast

With this change, rakudo.moar now passes all the tests for these three properties, as well as all the ones it was previously passing (aside from the failures for returning a 1 or 0 instead of True or False, which need to be handled on the Rakudo side).",This fixes #451 and #465,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,468,2016-12-25T06:49:46Z,2017-08-31T05:40:16Z,2017-08-31T05:40:16Z,CLOSED,False,62503,34799,3,https://github.com/samcv,[needs rework ] Add 8+ properties and fix several that were working incorrectly,7,[],https://github.com/MoarVM/MoarVM/pull/468,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/468#issuecomment-277430309,"Emoji properties
Bidi_Paired_Bracket
Bidi_Paired_Bracket_Type
Bidi_Mirroring_Glyph
Indic_Syllabic_Category
East_Asian_Width
Line_Break
Indic_Positional_Category
Jamo_Short_Name

Add in all Emoji properties (except Emoji_All which is a derived property) and add Indic_Syllabic_Category
With this change, Bidi_Mirroring_Glyph now returns a string instead of a
string which contains a hex number.
The Bidi_Paired_Bracket and Bidi_Paired_Bracket_Type properties have now been added.
Scrap the old LineBreak sub written in 2012 and use the one we use for enumerated values. The old one had hardcoded a set number of values for this property. Making that change fixes the tests we were failing for uniprop Line_Break in roast

With this change, rakudo.moar now passes all the tests for these three properties, as well as all the ones it was previously passing (aside from the failures for returning a 1 or 0 instead of True or False, which need to be handled on the Rakudo side).","Most of these have been added in other commits, but I am going to leave this open as reference until the rest of the values are added.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,468,2016-12-25T06:49:46Z,2017-08-31T05:40:16Z,2017-08-31T05:40:16Z,CLOSED,False,62503,34799,3,https://github.com/samcv,[needs rework ] Add 8+ properties and fix several that were working incorrectly,7,[],https://github.com/MoarVM/MoarVM/pull/468,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/468#issuecomment-326195138,"Emoji properties
Bidi_Paired_Bracket
Bidi_Paired_Bracket_Type
Bidi_Mirroring_Glyph
Indic_Syllabic_Category
East_Asian_Width
Line_Break
Indic_Positional_Category
Jamo_Short_Name

Add in all Emoji properties (except Emoji_All which is a derived property) and add Indic_Syllabic_Category
With this change, Bidi_Mirroring_Glyph now returns a string instead of a
string which contains a hex number.
The Bidi_Paired_Bracket and Bidi_Paired_Bracket_Type properties have now been added.
Scrap the old LineBreak sub written in 2012 and use the one we use for enumerated values. The old one had hardcoded a set number of values for this property. Making that change fixes the tests we were failing for uniprop Line_Break in roast

With this change, rakudo.moar now passes all the tests for these three properties, as well as all the ones it was previously passing (aside from the failures for returning a 1 or 0 instead of True or False, which need to be handled on the Rakudo side).",Closing. Stale and not needed anymore.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,469,2016-12-27T08:40:06Z,2016-12-27T11:47:44Z,2016-12-28T02:14:52Z,MERGED,True,11733,11733,3,https://github.com/samcv,Fix RT #122471 and #122470 return <control-0000> for \0 and other controls,1,[],https://github.com/MoarVM/MoarVM/pull/469,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/469,"RT: https://rt.perl.org/Ticket/Display.html?id=122471
https://rt.perl.org/Ticket/Display.html?id=122470
We now pass several tests we were not passing before in uniname.t","RT: https://rt.perl.org/Ticket/Display.html?id=122471
https://rt.perl.org/Ticket/Display.html?id=122470
We now pass several tests we were not passing before in uniname.t",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,469,2016-12-27T08:40:06Z,2016-12-27T11:47:44Z,2016-12-28T02:14:52Z,MERGED,True,11733,11733,3,https://github.com/samcv,Fix RT #122471 and #122470 return <control-0000> for \0 and other controls,1,[],https://github.com/MoarVM/MoarVM/pull/469,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/469#issuecomment-269294456,"RT: https://rt.perl.org/Ticket/Display.html?id=122471
https://rt.perl.org/Ticket/Display.html?id=122470
We now pass several tests we were not passing before in uniname.t","@jnthn you should probably accept this pull before #468, and I will rebase the other one to this.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,469,2016-12-27T08:40:06Z,2016-12-27T11:47:44Z,2016-12-28T02:14:52Z,MERGED,True,11733,11733,3,https://github.com/samcv,Fix RT #122471 and #122470 return <control-0000> for \0 and other controls,1,[],https://github.com/MoarVM/MoarVM/pull/469,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/469#issuecomment-269315635,"RT: https://rt.perl.org/Ticket/Display.html?id=122471
https://rt.perl.org/Ticket/Display.html?id=122470
We now pass several tests we were not passing before in uniname.t",Looks sensible to me. Thanks! :-),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,469,2016-12-27T08:40:06Z,2016-12-27T11:47:44Z,2016-12-28T02:14:52Z,MERGED,True,11733,11733,3,https://github.com/samcv,Fix RT #122471 and #122470 return <control-0000> for \0 and other controls,1,[],https://github.com/MoarVM/MoarVM/pull/469,https://github.com/zoffixznet,4,https://github.com/MoarVM/MoarVM/pull/469#issuecomment-269413733,"RT: https://rt.perl.org/Ticket/Display.html?id=122471
https://rt.perl.org/Ticket/Display.html?id=122470
We now pass several tests we were not passing before in uniname.t","This work appears to have broken some tests: https://gist.github.com/zoffixznet/29301168d1fbbfeb2f003d3c7f515802
Including failures in 6.c-errata: https://gist.github.com/zoffixznet/29f443ead147b43382756278a9892b79",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,471,2016-12-28T12:33:21Z,2016-12-28T12:33:26Z,2016-12-28T12:35:06Z,MERGED,True,11733,11733,3,https://github.com/jnthn,"Revert ""Fix RT #122471 and #122470 return <control-0000> for \0 and other controls""",1,[],https://github.com/MoarVM/MoarVM/pull/471,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/471,Reverts #469,Reverts #469,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,474,2016-12-29T11:58:54Z,2016-12-30T12:23:07Z,2016-12-30T12:23:08Z,MERGED,True,40658,21648,11,https://github.com/samcv,Add unicmp_s op implementing Unicode Collation Algorithm (UCA),8,[],https://github.com/MoarVM/MoarVM/pull/474,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/474,"Op: unicmp_s w(int64) r(str) r(str) r(int64) r(int64) r(int64)
Takes 5 Parameters:
stringa, # string a to compare
stringb, # string b to compare
collationmode (integer), # bitmask
ISO 639 Language code (integer),
ISO 3166 Country code (integer)
The default value for the collation mode is 7 which specifies to sort using Primary, Secondary, and Tertiary. This will sort as most users would expect text to be sorted visually.
The bitmask is as follows:
1 => Unicode Collation Primary
2 => Unicode Collation Secondary
4 => Unicode Collation Tertiary
While the Primary, Secondary and Tertiary mean different things for
different scripts, for the Latin script used in English they mostly
correspond with Primary being Alphabetic, Secondary being Diacritics
and Tertiary being Case.
Language and Country Codes
The default language and country code is 0, meaning to sort without
respect to country or language.
A setting 0 for language, and country will collate all scripts according to
their own scripts distinctions for Primary, Secondary, and Tertiary, although it
will not take into account certain languages or countries differences in sorting.
For example, some language based differences in collation
“…include ch as in traditional Spanish, ä as in traditional German,
and å as in Danish” ― See http://unicode.org/reports/tr10/ for more details on the UCA
Country and Language codes details:

ISO 3166 defines country numbers which do not change even when a
country's 2 or 3 letter identifier changes, for example if the country
split into more than one country, or its name changes. The
country code will use these numbers and will in the future also provide
a way to look up numeric codes from three letter identifiers.
ISO 639-5 language identifiers do not have a number assigned to them,
but they are presumed never to change. When implemented an op will be
added to get MVM's internal language identifier from 3 letter identifiers,
similar to looking up a MVM Unicode property code. These internal property codes are not
guaranteed nor expected to remain the same between releases.

Note

Currently only language and country insensitive sorting methods are implemented.
We have implemented the language and country insensitive sorting
using only the Primary level, and if they evaluate as the same on the
primary level it will fall back to comparing by codepoint. For Latin
script this will take case into account in most cases. In worst case it
will not do any worse than the current cmp_s op
The weight values are accessible by getting the MVM_COLLATION_PRIMARY, MVM_COLLATION_SECONDARY and MVM_COLLATION_TERTIARY properties of a grapheme.
At the moment we only implement collation by grapheme. The UCA has weights for multiple graphemes, which take precedence over the weights for single graphemes.","Op: unicmp_s w(int64) r(str) r(str) r(int64) r(int64) r(int64)
Takes 5 Parameters:
stringa, # string a to compare
stringb, # string b to compare
collationmode (integer), # bitmask
ISO 639 Language code (integer),
ISO 3166 Country code (integer)
The default value for the collation mode is 7 which specifies to sort using Primary, Secondary, and Tertiary. This will sort as most users would expect text to be sorted visually.
The bitmask is as follows:
1 => Unicode Collation Primary
2 => Unicode Collation Secondary
4 => Unicode Collation Tertiary
While the Primary, Secondary and Tertiary mean different things for
different scripts, for the Latin script used in English they mostly
correspond with Primary being Alphabetic, Secondary being Diacritics
and Tertiary being Case.
Language and Country Codes
The default language and country code is 0, meaning to sort without
respect to country or language.
A setting 0 for language, and country will collate all scripts according to
their own scripts distinctions for Primary, Secondary, and Tertiary, although it
will not take into account certain languages or countries differences in sorting.
For example, some language based differences in collation
“…include ch as in traditional Spanish, ä as in traditional German,
and å as in Danish” ― See http://unicode.org/reports/tr10/ for more details on the UCA
Country and Language codes details:

ISO 3166 defines country numbers which do not change even when a
country's 2 or 3 letter identifier changes, for example if the country
split into more than one country, or its name changes. The
country code will use these numbers and will in the future also provide
a way to look up numeric codes from three letter identifiers.
ISO 639-5 language identifiers do not have a number assigned to them,
but they are presumed never to change. When implemented an op will be
added to get MVM's internal language identifier from 3 letter identifiers,
similar to looking up a MVM Unicode property code. These internal property codes are not
guaranteed nor expected to remain the same between releases.

Note

Currently only language and country insensitive sorting methods are implemented.
We have implemented the language and country insensitive sorting
using only the Primary level, and if they evaluate as the same on the
primary level it will fall back to comparing by codepoint. For Latin
script this will take case into account in most cases. In worst case it
will not do any worse than the current cmp_s op
The weight values are accessible by getting the MVM_COLLATION_PRIMARY, MVM_COLLATION_SECONDARY and MVM_COLLATION_TERTIARY properties of a grapheme.
At the moment we only implement collation by grapheme. The UCA has weights for multiple graphemes, which take precedence over the weights for single graphemes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,474,2016-12-29T11:58:54Z,2016-12-30T12:23:07Z,2016-12-30T12:23:08Z,MERGED,True,40658,21648,11,https://github.com/samcv,Add unicmp_s op implementing Unicode Collation Algorithm (UCA),8,[],https://github.com/MoarVM/MoarVM/pull/474,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/474#issuecomment-269622748,"Op: unicmp_s w(int64) r(str) r(str) r(int64) r(int64) r(int64)
Takes 5 Parameters:
stringa, # string a to compare
stringb, # string b to compare
collationmode (integer), # bitmask
ISO 639 Language code (integer),
ISO 3166 Country code (integer)
The default value for the collation mode is 7 which specifies to sort using Primary, Secondary, and Tertiary. This will sort as most users would expect text to be sorted visually.
The bitmask is as follows:
1 => Unicode Collation Primary
2 => Unicode Collation Secondary
4 => Unicode Collation Tertiary
While the Primary, Secondary and Tertiary mean different things for
different scripts, for the Latin script used in English they mostly
correspond with Primary being Alphabetic, Secondary being Diacritics
and Tertiary being Case.
Language and Country Codes
The default language and country code is 0, meaning to sort without
respect to country or language.
A setting 0 for language, and country will collate all scripts according to
their own scripts distinctions for Primary, Secondary, and Tertiary, although it
will not take into account certain languages or countries differences in sorting.
For example, some language based differences in collation
“…include ch as in traditional Spanish, ä as in traditional German,
and å as in Danish” ― See http://unicode.org/reports/tr10/ for more details on the UCA
Country and Language codes details:

ISO 3166 defines country numbers which do not change even when a
country's 2 or 3 letter identifier changes, for example if the country
split into more than one country, or its name changes. The
country code will use these numbers and will in the future also provide
a way to look up numeric codes from three letter identifiers.
ISO 639-5 language identifiers do not have a number assigned to them,
but they are presumed never to change. When implemented an op will be
added to get MVM's internal language identifier from 3 letter identifiers,
similar to looking up a MVM Unicode property code. These internal property codes are not
guaranteed nor expected to remain the same between releases.

Note

Currently only language and country insensitive sorting methods are implemented.
We have implemented the language and country insensitive sorting
using only the Primary level, and if they evaluate as the same on the
primary level it will fall back to comparing by codepoint. For Latin
script this will take case into account in most cases. In worst case it
will not do any worse than the current cmp_s op
The weight values are accessible by getting the MVM_COLLATION_PRIMARY, MVM_COLLATION_SECONDARY and MVM_COLLATION_TERTIARY properties of a grapheme.
At the moment we only implement collation by grapheme. The UCA has weights for multiple graphemes, which take precedence over the weights for single graphemes.","I think I'd rather we add the Unicode collation algorithm based comparison as a new op, rather than modifying the semantics of the existing cmp_s op.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,474,2016-12-29T11:58:54Z,2016-12-30T12:23:07Z,2016-12-30T12:23:08Z,MERGED,True,40658,21648,11,https://github.com/samcv,Add unicmp_s op implementing Unicode Collation Algorithm (UCA),8,[],https://github.com/MoarVM/MoarVM/pull/474,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/474#issuecomment-269623022,"Op: unicmp_s w(int64) r(str) r(str) r(int64) r(int64) r(int64)
Takes 5 Parameters:
stringa, # string a to compare
stringb, # string b to compare
collationmode (integer), # bitmask
ISO 639 Language code (integer),
ISO 3166 Country code (integer)
The default value for the collation mode is 7 which specifies to sort using Primary, Secondary, and Tertiary. This will sort as most users would expect text to be sorted visually.
The bitmask is as follows:
1 => Unicode Collation Primary
2 => Unicode Collation Secondary
4 => Unicode Collation Tertiary
While the Primary, Secondary and Tertiary mean different things for
different scripts, for the Latin script used in English they mostly
correspond with Primary being Alphabetic, Secondary being Diacritics
and Tertiary being Case.
Language and Country Codes
The default language and country code is 0, meaning to sort without
respect to country or language.
A setting 0 for language, and country will collate all scripts according to
their own scripts distinctions for Primary, Secondary, and Tertiary, although it
will not take into account certain languages or countries differences in sorting.
For example, some language based differences in collation
“…include ch as in traditional Spanish, ä as in traditional German,
and å as in Danish” ― See http://unicode.org/reports/tr10/ for more details on the UCA
Country and Language codes details:

ISO 3166 defines country numbers which do not change even when a
country's 2 or 3 letter identifier changes, for example if the country
split into more than one country, or its name changes. The
country code will use these numbers and will in the future also provide
a way to look up numeric codes from three letter identifiers.
ISO 639-5 language identifiers do not have a number assigned to them,
but they are presumed never to change. When implemented an op will be
added to get MVM's internal language identifier from 3 letter identifiers,
similar to looking up a MVM Unicode property code. These internal property codes are not
guaranteed nor expected to remain the same between releases.

Note

Currently only language and country insensitive sorting methods are implemented.
We have implemented the language and country insensitive sorting
using only the Primary level, and if they evaluate as the same on the
primary level it will fall back to comparing by codepoint. For Latin
script this will take case into account in most cases. In worst case it
will not do any worse than the current cmp_s op
The weight values are accessible by getting the MVM_COLLATION_PRIMARY, MVM_COLLATION_SECONDARY and MVM_COLLATION_TERTIARY properties of a grapheme.
At the moment we only implement collation by grapheme. The UCA has weights for multiple graphemes, which take precedence over the weights for single graphemes.",Sounds good. What do you think it should be called?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,474,2016-12-29T11:58:54Z,2016-12-30T12:23:07Z,2016-12-30T12:23:08Z,MERGED,True,40658,21648,11,https://github.com/samcv,Add unicmp_s op implementing Unicode Collation Algorithm (UCA),8,[],https://github.com/MoarVM/MoarVM/pull/474,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/474#issuecomment-269623768,"Op: unicmp_s w(int64) r(str) r(str) r(int64) r(int64) r(int64)
Takes 5 Parameters:
stringa, # string a to compare
stringb, # string b to compare
collationmode (integer), # bitmask
ISO 639 Language code (integer),
ISO 3166 Country code (integer)
The default value for the collation mode is 7 which specifies to sort using Primary, Secondary, and Tertiary. This will sort as most users would expect text to be sorted visually.
The bitmask is as follows:
1 => Unicode Collation Primary
2 => Unicode Collation Secondary
4 => Unicode Collation Tertiary
While the Primary, Secondary and Tertiary mean different things for
different scripts, for the Latin script used in English they mostly
correspond with Primary being Alphabetic, Secondary being Diacritics
and Tertiary being Case.
Language and Country Codes
The default language and country code is 0, meaning to sort without
respect to country or language.
A setting 0 for language, and country will collate all scripts according to
their own scripts distinctions for Primary, Secondary, and Tertiary, although it
will not take into account certain languages or countries differences in sorting.
For example, some language based differences in collation
“…include ch as in traditional Spanish, ä as in traditional German,
and å as in Danish” ― See http://unicode.org/reports/tr10/ for more details on the UCA
Country and Language codes details:

ISO 3166 defines country numbers which do not change even when a
country's 2 or 3 letter identifier changes, for example if the country
split into more than one country, or its name changes. The
country code will use these numbers and will in the future also provide
a way to look up numeric codes from three letter identifiers.
ISO 639-5 language identifiers do not have a number assigned to them,
but they are presumed never to change. When implemented an op will be
added to get MVM's internal language identifier from 3 letter identifiers,
similar to looking up a MVM Unicode property code. These internal property codes are not
guaranteed nor expected to remain the same between releases.

Note

Currently only language and country insensitive sorting methods are implemented.
We have implemented the language and country insensitive sorting
using only the Primary level, and if they evaluate as the same on the
primary level it will fall back to comparing by codepoint. For Latin
script this will take case into account in most cases. In worst case it
will not do any worse than the current cmp_s op
The weight values are accessible by getting the MVM_COLLATION_PRIMARY, MVM_COLLATION_SECONDARY and MVM_COLLATION_TERTIARY properties of a grapheme.
At the moment we only implement collation by grapheme. The UCA has weights for multiple graphemes, which take precedence over the weights for single graphemes.","Well, the uni prefix we have on various of the Unicode data-based ops is probably worth having on the start of it. unicmp ain't bad, though unicolcmp makes clearer it's using the collation algorithm. More than just the name, however, we should think about what arguments it should take. So far as I understand it, the Unicode collation algorithm works at a number of different levels, and then there are further ways to customize it. It would be good to get the op interface worked out so we can support those various bits later (or those that we feel belong in the VM), even if for now they just throw due to being NYI.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,474,2016-12-29T11:58:54Z,2016-12-30T12:23:07Z,2016-12-30T12:23:08Z,MERGED,True,40658,21648,11,https://github.com/samcv,Add unicmp_s op implementing Unicode Collation Algorithm (UCA),8,[],https://github.com/MoarVM/MoarVM/pull/474,https://github.com/samcv,5,https://github.com/MoarVM/MoarVM/pull/474#issuecomment-269679744,"Op: unicmp_s w(int64) r(str) r(str) r(int64) r(int64) r(int64)
Takes 5 Parameters:
stringa, # string a to compare
stringb, # string b to compare
collationmode (integer), # bitmask
ISO 639 Language code (integer),
ISO 3166 Country code (integer)
The default value for the collation mode is 7 which specifies to sort using Primary, Secondary, and Tertiary. This will sort as most users would expect text to be sorted visually.
The bitmask is as follows:
1 => Unicode Collation Primary
2 => Unicode Collation Secondary
4 => Unicode Collation Tertiary
While the Primary, Secondary and Tertiary mean different things for
different scripts, for the Latin script used in English they mostly
correspond with Primary being Alphabetic, Secondary being Diacritics
and Tertiary being Case.
Language and Country Codes
The default language and country code is 0, meaning to sort without
respect to country or language.
A setting 0 for language, and country will collate all scripts according to
their own scripts distinctions for Primary, Secondary, and Tertiary, although it
will not take into account certain languages or countries differences in sorting.
For example, some language based differences in collation
“…include ch as in traditional Spanish, ä as in traditional German,
and å as in Danish” ― See http://unicode.org/reports/tr10/ for more details on the UCA
Country and Language codes details:

ISO 3166 defines country numbers which do not change even when a
country's 2 or 3 letter identifier changes, for example if the country
split into more than one country, or its name changes. The
country code will use these numbers and will in the future also provide
a way to look up numeric codes from three letter identifiers.
ISO 639-5 language identifiers do not have a number assigned to them,
but they are presumed never to change. When implemented an op will be
added to get MVM's internal language identifier from 3 letter identifiers,
similar to looking up a MVM Unicode property code. These internal property codes are not
guaranteed nor expected to remain the same between releases.

Note

Currently only language and country insensitive sorting methods are implemented.
We have implemented the language and country insensitive sorting
using only the Primary level, and if they evaluate as the same on the
primary level it will fall back to comparing by codepoint. For Latin
script this will take case into account in most cases. In worst case it
will not do any worse than the current cmp_s op
The weight values are accessible by getting the MVM_COLLATION_PRIMARY, MVM_COLLATION_SECONDARY and MVM_COLLATION_TERTIARY properties of a grapheme.
At the moment we only implement collation by grapheme. The UCA has weights for multiple graphemes, which take precedence over the weights for single graphemes.",@jnthn pull request is ready for merge as long as everything looks fine.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,476,2016-12-31T06:50:26Z,2017-01-02T16:25:50Z,2017-01-02T16:25:50Z,MERGED,True,30619,30800,5,https://github.com/samcv,"Implement More Unicode 9.0 GCB properties, Prepend, Emoji, and Bidi_Mirroring_Glyph",7,[],https://github.com/MoarVM/MoarVM/pull/476,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/476,"Add support for Grapheme_Cluster_Break=Prepend from Unicode 9.0
These marks were added in Unicode 9.0 which occur before the
codepoints they combine with. We had assumed that these controlling
characters would not appear before others and only after, but with
this change we now pass all the Prepend tests from GraphemeBreakTest.txt
except for a few odd ones ( line Prepend + a space or newline which
shouldn't occur in real life).
We now check these properties when breaking for graphemes:
Emoji_Modifier
Emoji_Base
E_Base_GAZ
Glue_After_ZWJ
Emoji properties except Emoji_All have been implemented as well.","Add support for Grapheme_Cluster_Break=Prepend from Unicode 9.0
These marks were added in Unicode 9.0 which occur before the
codepoints they combine with. We had assumed that these controlling
characters would not appear before others and only after, but with
this change we now pass all the Prepend tests from GraphemeBreakTest.txt
except for a few odd ones ( line Prepend + a space or newline which
shouldn't occur in real life).
We now check these properties when breaking for graphemes:
Emoji_Modifier
Emoji_Base
E_Base_GAZ
Glue_After_ZWJ
Emoji properties except Emoji_All have been implemented as well.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,476,2016-12-31T06:50:26Z,2017-01-02T16:25:50Z,2017-01-02T16:25:50Z,MERGED,True,30619,30800,5,https://github.com/samcv,"Implement More Unicode 9.0 GCB properties, Prepend, Emoji, and Bidi_Mirroring_Glyph",7,[],https://github.com/MoarVM/MoarVM/pull/476,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/476#issuecomment-269980743,"Add support for Grapheme_Cluster_Break=Prepend from Unicode 9.0
These marks were added in Unicode 9.0 which occur before the
codepoints they combine with. We had assumed that these controlling
characters would not appear before others and only after, but with
this change we now pass all the Prepend tests from GraphemeBreakTest.txt
except for a few odd ones ( line Prepend + a space or newline which
shouldn't occur in real life).
We now check these properties when breaking for graphemes:
Emoji_Modifier
Emoji_Base
E_Base_GAZ
Glue_After_ZWJ
Emoji properties except Emoji_All have been implemented as well.","Made those changes you wanted, and ran spectest again. Passing all but '  ' ~~ /<:space>/ which is from possibly some bug in nqp.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,477,2017-01-01T01:46:06Z,2017-01-03T10:17:25Z,2017-01-03T10:17:26Z,MERGED,True,40180,39917,4,https://github.com/samcv,Implement in unicmp_s checking of secondary and tetriary collation weights,1,[],https://github.com/MoarVM/MoarVM/pull/477,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/477,"An issue is also fixed where ucd2c.pl would not add up the total
weighting for characters which decompose into multiple characters.
We also return distinct values for the last level which decided the
result.

0   The strings are identical, includes codepoints
-1/1   We used the primary collation values to decide the result
-2/2   We used the secondary, meaning the primary weights were equal
-3/3   We used the tetriary, meaning the primary and also the secondary
weights (if we used that option, which is the default) were equal.
-4/4   We used codepoints to decide because primary, secondary and/or tetriary
were equal (depending if secondary and tetriary were requested).
If the codepoints are all the same, we will decide based on
length.
-10/10 means the collation algorithm was not able to be applied and so they
were compared based on codepoints

Currently in MoarVM this should almost always be because of
collation weights not found or NYI for the string.
Currently this happens for graphemes made up of more than one codepoint in composed form.","An issue is also fixed where ucd2c.pl would not add up the total
weighting for characters which decompose into multiple characters.
We also return distinct values for the last level which decided the
result.

0   The strings are identical, includes codepoints
-1/1   We used the primary collation values to decide the result
-2/2   We used the secondary, meaning the primary weights were equal
-3/3   We used the tetriary, meaning the primary and also the secondary
weights (if we used that option, which is the default) were equal.
-4/4   We used codepoints to decide because primary, secondary and/or tetriary
were equal (depending if secondary and tetriary were requested).
If the codepoints are all the same, we will decide based on
length.
-10/10 means the collation algorithm was not able to be applied and so they
were compared based on codepoints

Currently in MoarVM this should almost always be because of
collation weights not found or NYI for the string.
Currently this happens for graphemes made up of more than one codepoint in composed form.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,479,2017-01-03T03:56:12Z,2017-01-03T09:00:42Z,2017-01-04T10:21:54Z,MERGED,True,57,0,1,https://github.com/samcv,Add a script to download the latest version of all of the Unicode data,1,[],https://github.com/MoarVM/MoarVM/pull/479,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/479,"Downloads UCD.zip, collation data (allkeys.txt) and emoji-data.txt using this script.
Since there is no 'latest' folder on the ftp for Emoji, we check if the ReadMe.txt has draft or preliminary in the file. All the other draft specs on the Unicode ftp server use one or more of those words in the draft, while the final ones do not use them at all in the final revision.","Downloads UCD.zip, collation data (allkeys.txt) and emoji-data.txt using this script.
Since there is no 'latest' folder on the ftp for Emoji, we check if the ReadMe.txt has draft or preliminary in the file. All the other draft specs on the Unicode ftp server use one or more of those words in the draft, while the final ones do not use them at all in the final revision.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,479,2017-01-03T03:56:12Z,2017-01-03T09:00:42Z,2017-01-04T10:21:54Z,MERGED,True,57,0,1,https://github.com/samcv,Add a script to download the latest version of all of the Unicode data,1,[],https://github.com/MoarVM/MoarVM/pull/479,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/479#issuecomment-270082824,"Downloads UCD.zip, collation data (allkeys.txt) and emoji-data.txt using this script.
Since there is no 'latest' folder on the ftp for Emoji, we check if the ReadMe.txt has draft or preliminary in the file. All the other draft specs on the Unicode ftp server use one or more of those words in the draft, while the final ones do not use them at all in the final revision.",Nice! :-),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,483,2017-01-04T02:26:50Z,2017-01-04T08:20:53Z,2017-01-04T08:20:53Z,MERGED,True,8,1,1,https://github.com/samcv,Use much faster atoi function. 14% less CPU use when slurping a Unicode file,1,[],https://github.com/MoarVM/MoarVM/pull/483,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/483,"This should greatly speed up any calls made to ccc which is used
extensively in MVM_unicode_normalizer_process_codepoint_full and
canonical_composition.","This should greatly speed up any calls made to ccc which is used
extensively in MVM_unicode_normalizer_process_codepoint_full and
canonical_composition.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,484,2017-01-04T21:25:10Z,2017-01-04T21:41:45Z,2017-01-04T21:41:45Z,MERGED,True,2,2,1,https://github.com/samcv,Use /usr/bin/env perl for ./Configure.pl,1,[],https://github.com/MoarVM/MoarVM/pull/484,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/484,"We already do this for NQP and Rakudo now, and will make it be more
compatible on Unixish systems. Windows systems are unaffected by this
change.
Some trailing whitespace was also removed.","We already do this for NQP and Rakudo now, and will make it be more
compatible on Unixish systems. Windows systems are unaffected by this
change.
Some trailing whitespace was also removed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,485,2017-01-04T22:29:29Z,2017-01-04T22:51:47Z,2017-01-04T22:51:47Z,MERGED,True,30775,30692,4,https://github.com/samcv,Get property int property #define's in ucd2c.pl for Unicode,2,[],https://github.com/MoarVM/MoarVM/pull/485,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/485,"Generate Decomposition_Type Unicode prop. #define's in ucd2c.pl
Decompose_Type, Unicode: use int lookup instead of str for better perf.
Also generate Canonical_Combining_Class #define's in ucd2c.pl.
This will reduce our need to compare strings.","Generate Decomposition_Type Unicode prop. #define's in ucd2c.pl
Decompose_Type, Unicode: use int lookup instead of str for better perf.
Also generate Canonical_Combining_Class #define's in ucd2c.pl.
This will reduce our need to compare strings.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,485,2017-01-04T22:29:29Z,2017-01-04T22:51:47Z,2017-01-04T22:51:47Z,MERGED,True,30775,30692,4,https://github.com/samcv,Get property int property #define's in ucd2c.pl for Unicode,2,[],https://github.com/MoarVM/MoarVM/pull/485,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/485#issuecomment-270505920,"Generate Decomposition_Type Unicode prop. #define's in ucd2c.pl
Decompose_Type, Unicode: use int lookup instead of str for better perf.
Also generate Canonical_Combining_Class #define's in ucd2c.pl.
This will reduce our need to compare strings.",All tests pass.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,486,2017-01-06T04:44:05Z,2017-01-06T10:52:41Z,2017-01-06T10:52:41Z,MERGED,True,22,6,1,https://github.com/samcv,"Don't break after ZWJ or for MALE SIGN, FEMALE SIGN or Glue_After_ZWJ",2,[],https://github.com/MoarVM/MoarVM/pull/486,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/486,"Passes another ~700 more tests from emoji-test.t, also passes 2 more tests from GraphemeBreakTest.t","Passes another ~700 more tests from emoji-test.t, also passes 2 more tests from GraphemeBreakTest.t",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,487,2017-01-06T15:50:05Z,2017-01-10T12:50:53Z,2017-01-10T12:50:56Z,MERGED,True,226,377,21,https://github.com/jnthn,Clean up frame->work lifetime,16,[],https://github.com/MoarVM/MoarVM/pull/487,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/487,"This work ensures that the lifetime of ->work (a frame's working space) is strictly that of its lifetime on the call stack, modulo the case where the frame is not on the stack but its working storage lives on due to it having been captured in a continuation.
To achieve this, two VM features unused by Perl 6 have been eliminated:

Taking register references (unused; intended for localref which was also unused and never implemented by any other backend; this will likely be a relief to those implementing said other backends)
The partial (but already decidedly broken) bits of work towards supporting multi-shot continuations

With the lifetime clarified, it was possible to simplify a number of code paths, some of them hot. This also means memory can be freed sooner, reducing overhead and memory pressure.
This work leads to around 20% less time and 10% less memory in the CORE.setting build.","This work ensures that the lifetime of ->work (a frame's working space) is strictly that of its lifetime on the call stack, modulo the case where the frame is not on the stack but its working storage lives on due to it having been captured in a continuation.
To achieve this, two VM features unused by Perl 6 have been eliminated:

Taking register references (unused; intended for localref which was also unused and never implemented by any other backend; this will likely be a relief to those implementing said other backends)
The partial (but already decidedly broken) bits of work towards supporting multi-shot continuations

With the lifetime clarified, it was possible to simplify a number of code paths, some of them hot. This also means memory can be freed sooner, reducing overhead and memory pressure.
This work leads to around 20% less time and 10% less memory in the CORE.setting build.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,488,2017-01-06T17:00:11Z,2017-01-10T10:59:29Z,2017-01-10T11:01:01Z,MERGED,True,3,3,3,https://github.com/jnthn,Take into account actual allocated of I/O buffers.,1,[],https://github.com/MoarVM/MoarVM/pull/488,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/488,"It seems libuv suggest we allocate 64KB sometimes, even when the
input we get is tiny. While I'm not sure second-guessing it is wise,
we should at least be honest internally about what's allocated. By
storing the actual allocated size, the GC can track it as part of
the gen2 promotion statistics, and be smarter about triggering full
collections. This reduces memory overhead.","It seems libuv suggest we allocate 64KB sometimes, even when the
input we get is tiny. While I'm not sure second-guessing it is wise,
we should at least be honest internally about what's allocated. By
storing the actual allocated size, the GC can track it as part of
the gen2 promotion statistics, and be smarter about triggering full
collections. This reduces memory overhead.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,488,2017-01-06T17:00:11Z,2017-01-10T10:59:29Z,2017-01-10T11:01:01Z,MERGED,True,3,3,3,https://github.com/jnthn,Take into account actual allocated of I/O buffers.,1,[],https://github.com/MoarVM/MoarVM/pull/488,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/488#issuecomment-271546772,"It seems libuv suggest we allocate 64KB sometimes, even when the
input we get is tiny. While I'm not sure second-guessing it is wise,
we should at least be honest internally about what's allocated. By
storing the actual allocated size, the GC can track it as part of
the gen2 promotion statistics, and be smarter about triggering full
collections. This reduces memory overhead.",No objections; merging.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,489,2017-01-06T17:00:34Z,2017-01-10T10:59:10Z,2017-01-10T10:59:12Z,MERGED,True,6,1,2,https://github.com/jnthn,Heap profiler tweaks/fixes,2,[],https://github.com/MoarVM/MoarVM/pull/489,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/489,See commit messages for details.,See commit messages for details.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,490,2017-01-06T17:03:14Z,2017-01-10T11:04:02Z,2017-01-10T11:04:13Z,MERGED,True,4,0,1,https://github.com/jnthn,Free up spesh log slots after specialization.,1,[],https://github.com/MoarVM/MoarVM/pull/490,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/490,"Spesh logging keeps values alive, preventing the GC from collecting
them. It logs values to sample what types show up, which is fine, but
we should not hang on to them beyond the point the specializer has
used them in its analysis. This reduces memory overhead, perhaps
quite notably in some applications that have large objects (for
example, RT #130494 leaked many objects in this way). On CORE.setting
compilation it saves ~3MB - not much in the scheme of things, but nice
to win.","Spesh logging keeps values alive, preventing the GC from collecting
them. It logs values to sample what types show up, which is fine, but
we should not hang on to them beyond the point the specializer has
used them in its analysis. This reduces memory overhead, perhaps
quite notably in some applications that have large objects (for
example, RT #130494 leaked many objects in this way). On CORE.setting
compilation it saves ~3MB - not much in the scheme of things, but nice
to win.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,490,2017-01-06T17:03:14Z,2017-01-10T11:04:02Z,2017-01-10T11:04:13Z,MERGED,True,4,0,1,https://github.com/jnthn,Free up spesh log slots after specialization.,1,[],https://github.com/MoarVM/MoarVM/pull/490,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/490#issuecomment-271547747,"Spesh logging keeps values alive, preventing the GC from collecting
them. It logs values to sample what types show up, which is fine, but
we should not hang on to them beyond the point the specializer has
used them in its analysis. This reduces memory overhead, perhaps
quite notably in some applications that have large objects (for
example, RT #130494 leaked many objects in this way). On CORE.setting
compilation it saves ~3MB - not much in the scheme of things, but nice
to win.",No objections; merged.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,492,2017-01-10T07:18:46Z,2017-01-11T15:21:33Z,2017-01-11T15:21:33Z,MERGED,True,33842,30616,14,https://github.com/samcv,Implement getstrbyname/MVM_unicode_string_from_name to retrieve grapheme clusters by name,1,[],https://github.com/MoarVM/MoarVM/pull/492,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/492,"Returns a string from its Unicode name. Unlike MVM_unicode_lookup_by_name, this works
for multiple codepoints. This allows us to support Emoji sequences and other potential
names which are sequences of codepoints.
Working example: nqp-m -e ""say(nqp::getstrfromname('person golfing: medium-light skin tone'))"" #> 🏌🏼","Returns a string from its Unicode name. Unlike MVM_unicode_lookup_by_name, this works
for multiple codepoints. This allows us to support Emoji sequences and other potential
names which are sequences of codepoints.
Working example: nqp-m -e ""say(nqp::getstrfromname('person golfing: medium-light skin tone'))"" #> 🏌🏼",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,492,2017-01-10T07:18:46Z,2017-01-11T15:21:33Z,2017-01-11T15:21:33Z,MERGED,True,33842,30616,14,https://github.com/samcv,Implement getstrbyname/MVM_unicode_string_from_name to retrieve grapheme clusters by name,1,[],https://github.com/MoarVM/MoarVM/pull/492,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/492#issuecomment-271830542,"Returns a string from its Unicode name. Unlike MVM_unicode_lookup_by_name, this works
for multiple codepoints. This allows us to support Emoji sequences and other potential
names which are sequences of codepoints.
Working example: nqp-m -e ""say(nqp::getstrfromname('person golfing: medium-light skin tone'))"" #> 🏌🏼",Should have made all the changes you requested.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,493,2017-01-10T12:03:44Z,2017-01-10T13:47:31Z,2017-01-10T20:20:31Z,MERGED,True,22,16,2,https://github.com/samcv,Refactor MVM_unicode_codepoints_to_nfg_string,1,[],https://github.com/MoarVM/MoarVM/pull/493,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/493,"Separate out the section which involves MVMObject so we can re-use this
function in other places with native c data structures.","Separate out the section which involves MVMObject so we can re-use this
function in other places with native c data structures.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,494,2017-01-10T13:01:06Z,2017-01-10T18:27:22Z,2017-01-10T18:27:24Z,MERGED,True,24,10,1,https://github.com/jnthn,Decode (hopefully) all NFC UTF8 to NFG in UTF8-C8,1,[],https://github.com/MoarVM/MoarVM/pull/494,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/494,"In the last round of tweaks to UTF8-C8, we fixed some sequences that
would not round-trip properly due to being mis-represented in UTF8.
The fix dealt with those cases, but was a bit too sweeping. UTF8-C8
aims to decode everything that's both valid UTF8 and in NFC as the
UTF8 decoder would, and express everything else as synthetics that
will ensure round-tripping. This fix deals with the issue raised in
MoarVM Issue #482, while not regressing any of the UTF8-C8 roundtrip
tests.","In the last round of tweaks to UTF8-C8, we fixed some sequences that
would not round-trip properly due to being mis-represented in UTF8.
The fix dealt with those cases, but was a bit too sweeping. UTF8-C8
aims to decode everything that's both valid UTF8 and in NFC as the
UTF8 decoder would, and express everything else as synthetics that
will ensure round-tripping. This fix deals with the issue raised in
MoarVM Issue #482, while not regressing any of the UTF8-C8 roundtrip
tests.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,494,2017-01-10T13:01:06Z,2017-01-10T18:27:22Z,2017-01-10T18:27:24Z,MERGED,True,24,10,1,https://github.com/jnthn,Decode (hopefully) all NFC UTF8 to NFG in UTF8-C8,1,[],https://github.com/MoarVM/MoarVM/pull/494,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/494#issuecomment-271656428,"In the last round of tweaks to UTF8-C8, we fixed some sequences that
would not round-trip properly due to being mis-represented in UTF8.
The fix dealt with those cases, but was a bit too sweeping. UTF8-C8
aims to decode everything that's both valid UTF8 and in NFC as the
UTF8 decoder would, and express everything else as synthetics that
will ensure round-tripping. This fix deals with the issue raised in
MoarVM Issue #482, while not regressing any of the UTF8-C8 roundtrip
tests.",@arnsholt took a look at this and mentioned it looks fine; will take that as sufficient review. :-),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,495,2017-01-11T16:22:55Z,2017-01-13T15:53:05Z,2017-01-13T15:53:08Z,MERGED,True,83,49,6,https://github.com/jnthn,"Fix bugs in interaction between inlining, GC, and threads",4,[],https://github.com/MoarVM/MoarVM/pull/495,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/495,"This PR addresses:

Issue #478 by avoiding a bunch of codepaths that could end up with us running GC during specialization, which were triggered by cross-compilation-unit inlining
Three abuses of realloc that could lead to other threads reading freed memory (this accounts for the ASAN noise in spectest6, for example)","This PR addresses:

Issue #478 by avoiding a bunch of codepaths that could end up with us running GC during specialization, which were triggered by cross-compilation-unit inlining
Three abuses of realloc that could lead to other threads reading freed memory (this accounts for the ASAN noise in spectest6, for example)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,495,2017-01-11T16:22:55Z,2017-01-13T15:53:05Z,2017-01-13T15:53:08Z,MERGED,True,83,49,6,https://github.com/jnthn,"Fix bugs in interaction between inlining, GC, and threads",4,[],https://github.com/MoarVM/MoarVM/pull/495,https://github.com/timo,2,https://github.com/MoarVM/MoarVM/pull/495#issuecomment-271993242,"This PR addresses:

Issue #478 by avoiding a bunch of codepaths that could end up with us running GC during specialization, which were triggered by cross-compilation-unit inlining
Three abuses of realloc that could lead to other threads reading freed memory (this accounts for the ASAN noise in spectest6, for example)",looked though the diff and it looked good to me.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,496,2017-01-11T18:01:07Z,2017-01-11T20:48:07Z,2017-01-11T20:48:07Z,MERGED,True,40,0,2,https://github.com/samcv,Fix RT #117683 \c[LINE FEED] \c[CARRIAGE RETURN],1,[],https://github.com/MoarVM/MoarVM/pull/496,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/496,Also fixes \c[NEXT LINE] and \c[FORM FEED] as well.,Also fixes \c[NEXT LINE] and \c[FORM FEED] as well.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,497,2017-01-12T01:38:59Z,2017-01-13T13:29:31Z,2017-01-13T13:29:31Z,MERGED,True,30641,30537,4,https://github.com/samcv,Remove Unicode 1 names and add Unicode Name Aliases,1,[],https://github.com/MoarVM/MoarVM/pull/497,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/497,"This adds support in the codepointfromname op for all of the official
Unicode name aliases. It removes the old Unicode 1 names in the name
registry and replaces them with  with the codepoint
number.
There are only 5 codepoints which have changed their functionality
aside from the 400+ Name Aliases added:
Correction:

BELL

Used to resolve to U+0007 which caused the 🔔 U+1F514 to be
inaccessible.
The following can be used to access U+0007:
ALERT, or BEL



Unicode 1 Name removed:

LINE FEED (LF):

The following can be used instead:
LINE FEED, NEW LINE, END OF LINE, LF, NL or EOL


FORM FEED (FF)

The following can now be used instead:
FORM FEED or FF


CARRIAGE RETURN (CR)

The following can now be used instead:
CARRIAGE RETURN or CR


NEXT LINE (NEL)

The following can now be used instead:
NEXT LINE or NEL","This adds support in the codepointfromname op for all of the official
Unicode name aliases. It removes the old Unicode 1 names in the name
registry and replaces them with  with the codepoint
number.
There are only 5 codepoints which have changed their functionality
aside from the 400+ Name Aliases added:
Correction:

BELL

Used to resolve to U+0007 which caused the 🔔 U+1F514 to be
inaccessible.
The following can be used to access U+0007:
ALERT, or BEL



Unicode 1 Name removed:

LINE FEED (LF):

The following can be used instead:
LINE FEED, NEW LINE, END OF LINE, LF, NL or EOL


FORM FEED (FF)

The following can now be used instead:
FORM FEED or FF


CARRIAGE RETURN (CR)

The following can now be used instead:
CARRIAGE RETURN or CR


NEXT LINE (NEL)

The following can now be used instead:
NEXT LINE or NEL",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,497,2017-01-12T01:38:59Z,2017-01-13T13:29:31Z,2017-01-13T13:29:31Z,MERGED,True,30641,30537,4,https://github.com/samcv,Remove Unicode 1 names and add Unicode Name Aliases,1,[],https://github.com/MoarVM/MoarVM/pull/497,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/497#issuecomment-272055067,"This adds support in the codepointfromname op for all of the official
Unicode name aliases. It removes the old Unicode 1 names in the name
registry and replaces them with  with the codepoint
number.
There are only 5 codepoints which have changed their functionality
aside from the 400+ Name Aliases added:
Correction:

BELL

Used to resolve to U+0007 which caused the 🔔 U+1F514 to be
inaccessible.
The following can be used to access U+0007:
ALERT, or BEL



Unicode 1 Name removed:

LINE FEED (LF):

The following can be used instead:
LINE FEED, NEW LINE, END OF LINE, LF, NL or EOL


FORM FEED (FF)

The following can now be used instead:
FORM FEED or FF


CARRIAGE RETURN (CR)

The following can now be used instead:
CARRIAGE RETURN or CR


NEXT LINE (NEL)

The following can now be used instead:
NEXT LINE or NEL","Typo, 'depreciated' should be 'deprecated'.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,497,2017-01-12T01:38:59Z,2017-01-13T13:29:31Z,2017-01-13T13:29:31Z,MERGED,True,30641,30537,4,https://github.com/samcv,Remove Unicode 1 names and add Unicode Name Aliases,1,[],https://github.com/MoarVM/MoarVM/pull/497,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/497#issuecomment-272055480,"This adds support in the codepointfromname op for all of the official
Unicode name aliases. It removes the old Unicode 1 names in the name
registry and replaces them with  with the codepoint
number.
There are only 5 codepoints which have changed their functionality
aside from the 400+ Name Aliases added:
Correction:

BELL

Used to resolve to U+0007 which caused the 🔔 U+1F514 to be
inaccessible.
The following can be used to access U+0007:
ALERT, or BEL



Unicode 1 Name removed:

LINE FEED (LF):

The following can be used instead:
LINE FEED, NEW LINE, END OF LINE, LF, NL or EOL


FORM FEED (FF)

The following can now be used instead:
FORM FEED or FF


CARRIAGE RETURN (CR)

The following can now be used instead:
CARRIAGE RETURN or CR


NEXT LINE (NEL)

The following can now be used instead:
NEXT LINE or NEL","Thanks, typos have been fixed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,497,2017-01-12T01:38:59Z,2017-01-13T13:29:31Z,2017-01-13T13:29:31Z,MERGED,True,30641,30537,4,https://github.com/samcv,Remove Unicode 1 names and add Unicode Name Aliases,1,[],https://github.com/MoarVM/MoarVM/pull/497,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/497#issuecomment-272364944,"This adds support in the codepointfromname op for all of the official
Unicode name aliases. It removes the old Unicode 1 names in the name
registry and replaces them with  with the codepoint
number.
There are only 5 codepoints which have changed their functionality
aside from the 400+ Name Aliases added:
Correction:

BELL

Used to resolve to U+0007 which caused the 🔔 U+1F514 to be
inaccessible.
The following can be used to access U+0007:
ALERT, or BEL



Unicode 1 Name removed:

LINE FEED (LF):

The following can be used instead:
LINE FEED, NEW LINE, END OF LINE, LF, NL or EOL


FORM FEED (FF)

The following can now be used instead:
FORM FEED or FF


CARRIAGE RETURN (CR)

The following can now be used instead:
CARRIAGE RETURN or CR


NEXT LINE (NEL)

The following can now be used instead:
NEXT LINE or NEL","@jnthn just pushed some new changes. Spectest pass, plus many todo tests as well. Ready for merge.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,498,2017-01-12T16:17:35Z,2017-01-13T15:52:26Z,2017-01-13T15:57:37Z,MERGED,True,12,24,8,https://github.com/MasterDuke17,Convert MVM_malloc+memset to MVM_calloc,1,[],https://github.com/MoarVM/MoarVM/pull/498,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/498,"In cases of foo = MVM_malloc(...); memset(foo, 0, ...);, convert them
to foo = MVM_calloc(...);
NQP builds and passes make m-test and Rakudo build and passes make m-spectest.","In cases of foo = MVM_malloc(...); memset(foo, 0, ...);, convert them
to foo = MVM_calloc(...);
NQP builds and passes make m-test and Rakudo build and passes make m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,498,2017-01-12T16:17:35Z,2017-01-13T15:52:26Z,2017-01-13T15:57:37Z,MERGED,True,12,24,8,https://github.com/MasterDuke17,Convert MVM_malloc+memset to MVM_calloc,1,[],https://github.com/MoarVM/MoarVM/pull/498,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/498#issuecomment-272457458,"In cases of foo = MVM_malloc(...); memset(foo, 0, ...);, convert them
to foo = MVM_calloc(...);
NQP builds and passes make m-test and Rakudo build and passes make m-spectest.","Ugh, can't believe I didn't see that. Anyway, updated to remove that one. jnthn++",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,499,2017-01-13T22:07:45Z,2017-01-14T00:01:06Z,2017-01-14T00:01:06Z,MERGED,True,2,2,2,https://github.com/samcv,Fix ASAN errors in generate_codepoints_by_name,1,[],https://github.com/MoarVM/MoarVM/pull/499,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/499,Off by one error.,Off by one error.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,500,2017-01-15T15:09:58Z,2017-01-15T15:45:06Z,2017-01-15T18:27:28Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Fix typo in comment,1,[],https://github.com/MoarVM/MoarVM/pull/500,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/500,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,501,2017-01-15T15:12:09Z,2017-01-21T11:45:33Z,2017-01-21T13:25:39Z,MERGED,True,10,10,5,https://github.com/MasterDuke17,Fix warnings during compile,1,[],https://github.com/MoarVM/MoarVM/pull/501,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/501,"I get the format string warnings on my Kubuntu 16.10 machine (gcc 6.2.0), but not on my Arch Linux machine (gcc 6.3.1).","I get the format string warnings on my Kubuntu 16.10 machine (gcc 6.2.0), but not on my Arch Linux machine (gcc 6.3.1).",True,{'THUMBS_UP': ['https://github.com/jonathanstowe']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,501,2017-01-15T15:12:09Z,2017-01-21T11:45:33Z,2017-01-21T13:25:39Z,MERGED,True,10,10,5,https://github.com/MasterDuke17,Fix warnings during compile,1,[],https://github.com/MoarVM/MoarVM/pull/501,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/501#issuecomment-273639516,"I get the format string warnings on my Kubuntu 16.10 machine (gcc 6.2.0), but not on my Arch Linux machine (gcc 6.3.1).",@jnthn fixed the warning that the second commit in this PR addressed. Should I remove that commit so the rest of the PR can be merged? Or are those changes not wanted and I should just close it?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,501,2017-01-15T15:12:09Z,2017-01-21T11:45:33Z,2017-01-21T13:25:39Z,MERGED,True,10,10,5,https://github.com/MasterDuke17,Fix warnings during compile,1,[],https://github.com/MoarVM/MoarVM/pull/501,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/501#issuecomment-273640127,"I get the format string warnings on my Kubuntu 16.10 machine (gcc 6.2.0), but not on my Arch Linux machine (gcc 6.3.1).",Remove the commit; rest of the PR looked good.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,501,2017-01-15T15:12:09Z,2017-01-21T11:45:33Z,2017-01-21T13:25:39Z,MERGED,True,10,10,5,https://github.com/MasterDuke17,Fix warnings during compile,1,[],https://github.com/MoarVM/MoarVM/pull/501,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/501#issuecomment-273640334,"I get the format string warnings on my Kubuntu 16.10 machine (gcc 6.2.0), but not on my Arch Linux machine (gcc 6.3.1).",Done.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,502,2017-01-15T15:15:01Z,2017-01-15T15:48:46Z,2017-01-15T18:27:20Z,MERGED,True,15,15,11,https://github.com/MasterDuke17,Fix order of args in mvm callocs,3,[],https://github.com/MoarVM/MoarVM/pull/502,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/502,NQP builds and passes make m-test and Rakudo builds and passes make m-spectest.,NQP builds and passes make m-test and Rakudo builds and passes make m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,503,2017-01-16T08:14:11Z,,2017-01-16T08:55:33Z,OPEN,False,37,31,5,https://github.com/timo,Save a tiny bit of space in 6 of our structs,5,[],https://github.com/MoarVM/MoarVM/pull/503,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/503,"Since the struct members used to be grouped together, feel free to reject any of the individual patches. Of course, the comments can also be changed to make things easier to figure out.","Since the struct members used to be grouped together, feel free to reject any of the individual patches. Of course, the comments can also be changed to make things easier to figure out.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,503,2017-01-16T08:14:11Z,,2017-01-16T08:55:33Z,OPEN,False,37,31,5,https://github.com/timo,Save a tiny bit of space in 6 of our structs,5,[],https://github.com/MoarVM/MoarVM/pull/503,https://github.com/timo,2,https://github.com/MoarVM/MoarVM/pull/503#issuecomment-272803058,"Since the struct members used to be grouped together, feel free to reject any of the individual patches. Of course, the comments can also be changed to make things easier to figure out.","Here's the rest that could be optimized. The last column is how much can be saved by shuffling things around.
MVMInstance	1960	1952	8
MVMSpeshGraph	216	208	8
MVMNormalizer	48	40	8
MVMCArrayREPRData	24	16	8
MVMJitGraph	88	80	8",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,504,2017-01-16T10:38:49Z,,2018-09-03T11:15:36Z,OPEN,False,15,3,2,https://github.com/timo,Multi cache no segfault on null,4,[],https://github.com/MoarVM/MoarVM/pull/504,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/504,"liz' recent changes to how X works somehow managed to sneak a null pointer into these code paths, and i think it's much better to not segfault when that happens.
not 100% sure if the handling of null pointers in the cache is correct. I tried to make it ""ignore the cache completely"" when a null pointer arrives.","liz' recent changes to how X works somehow managed to sneak a null pointer into these code paths, and i think it's much better to not segfault when that happens.
not 100% sure if the handling of null pointers in the cache is correct. I tried to make it ""ignore the cache completely"" when a null pointer arrives.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,504,2017-01-16T10:38:49Z,,2018-09-03T11:15:36Z,OPEN,False,15,3,2,https://github.com/timo,Multi cache no segfault on null,4,[],https://github.com/MoarVM/MoarVM/pull/504,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/504#issuecomment-418083796,"liz' recent changes to how X works somehow managed to sneak a null pointer into these code paths, and i think it's much better to not segfault when that happens.
not 100% sure if the handling of null pointers in the cache is correct. I tried to make it ""ignore the cache completely"" when a null pointer arrives.",@timo is this still relevant?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,505,2017-01-18T13:59:56Z,2017-01-27T16:06:46Z,2017-01-27T16:06:46Z,CLOSED,False,317,153,6,https://github.com/MasterDuke17,Add some new nqp:: ops for swapping array entries,1,[],https://github.com/MoarVM/MoarVM/pull/505,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/505,"nqp::swappos[_i, _n, _s](@A, int $index1, int $index2)
See https://irclog.perlgeek.de/perl6-dev/2017-01-18#i_13940214 and https://irclog.perlgeek.de/perl6-dev/2017-01-18#i_13941033","nqp::swappos[_i, _n, _s](@A, int $index1, int $index2)
See https://irclog.perlgeek.de/perl6-dev/2017-01-18#i_13940214 and https://irclog.perlgeek.de/perl6-dev/2017-01-18#i_13941033",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,505,2017-01-18T13:59:56Z,2017-01-27T16:06:46Z,2017-01-27T16:06:46Z,CLOSED,False,317,153,6,https://github.com/MasterDuke17,Add some new nqp:: ops for swapping array entries,1,[],https://github.com/MoarVM/MoarVM/pull/505,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/505#issuecomment-275702202,"nqp::swappos[_i, _n, _s](@A, int $index1, int $index2)
See https://irclog.perlgeek.de/perl6-dev/2017-01-18#i_13940214 and https://irclog.perlgeek.de/perl6-dev/2017-01-18#i_13941033","Thanks, but I don't think this deserves to be a VM-level op. It may be that there's value in Perl 6 defining a desugar (like this) or a more likely code-gen function for a new op that turns into multiple VM ops (like here).
In general, we try to avoid adding complex VM ops that are easily made up out of smaller ones, because the only thing they save is interpreter overhead, which disappears under JIT compilation anyway. The cost of having them is fairly high in the long run, because they are harder to analyze, so in the end are liable to end up missing out on optimizations that the simpler operations they are made up of would get.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,506,2017-01-18T16:15:11Z,2017-01-21T11:45:04Z,2017-01-21T11:45:06Z,MERGED,True,94,51,8,https://github.com/jnthn,Inactivate async tasks,5,[],https://github.com/MoarVM/MoarVM/pull/506,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/506,"This fixes a leak of async task handles, which was responsible for a managed memory leak (e.g. GC-managed objects that never became collectable). The mechanism to blame exists in order to safely have libuv callbacks able to obtain GC-managed references. We can't have the GC traverse libuv internals, so we stash the async task handles in an array, and store that index. This works well, but we needed to clear those array entries in the future, to avoid leaking AsyncTask handles. This is achieved by this work.
This gets rid of most of the leakage, but there is still a far more minor one: the task handles array itself will grow uboundedly. This will be fixed by re-using the indexes; that will happen in a future PR, once this one has gone in and had some real-world testing.","This fixes a leak of async task handles, which was responsible for a managed memory leak (e.g. GC-managed objects that never became collectable). The mechanism to blame exists in order to safely have libuv callbacks able to obtain GC-managed references. We can't have the GC traverse libuv internals, so we stash the async task handles in an array, and store that index. This works well, but we needed to clear those array entries in the future, to avoid leaking AsyncTask handles. This is achieved by this work.
This gets rid of most of the leakage, but there is still a far more minor one: the task handles array itself will grow uboundedly. This will be fixed by re-using the indexes; that will happen in a future PR, once this one has gone in and had some real-world testing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,506,2017-01-18T16:15:11Z,2017-01-21T11:45:04Z,2017-01-21T11:45:06Z,MERGED,True,94,51,8,https://github.com/jnthn,Inactivate async tasks,5,[],https://github.com/MoarVM/MoarVM/pull/506,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/506#issuecomment-273757356,"This fixes a leak of async task handles, which was responsible for a managed memory leak (e.g. GC-managed objects that never became collectable). The mechanism to blame exists in order to safely have libuv callbacks able to obtain GC-managed references. We can't have the GC traverse libuv internals, so we stash the async task handles in an array, and store that index. This works well, but we needed to clear those array entries in the future, to avoid leaking AsyncTask handles. This is achieved by this work.
This gets rid of most of the leakage, but there is still a far more minor one: the task handles array itself will grow uboundedly. This will be fixed by re-using the indexes; that will happen in a future PR, once this one has gone in and had some real-world testing.","All changes reviewed, understood and approved. Please merge :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,506,2017-01-18T16:15:11Z,2017-01-21T11:45:04Z,2017-01-21T11:45:06Z,MERGED,True,94,51,8,https://github.com/jnthn,Inactivate async tasks,5,[],https://github.com/MoarVM/MoarVM/pull/506,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/506#issuecomment-274084468,"This fixes a leak of async task handles, which was responsible for a managed memory leak (e.g. GC-managed objects that never became collectable). The mechanism to blame exists in order to safely have libuv callbacks able to obtain GC-managed references. We can't have the GC traverse libuv internals, so we stash the async task handles in an array, and store that index. This works well, but we needed to clear those array entries in the future, to avoid leaking AsyncTask handles. This is achieved by this work.
This gets rid of most of the leakage, but there is still a far more minor one: the task handles array itself will grow uboundedly. This will be fixed by re-using the indexes; that will happen in a future PR, once this one has gone in and had some real-world testing.","Decided to do it after the monthly release; just a tiny bit fearful one of the new panics may be hit accidentally (can't think of or produce a case, but would kick myself if I shoved it in the day before release, and we find such a case the day after...)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,507,2017-01-18T16:21:01Z,2017-01-20T13:17:30Z,2017-01-20T13:17:33Z,MERGED,True,25,15,10,https://github.com/jnthn,Fix decode stream leaks,3,[],https://github.com/MoarVM/MoarVM/pull/507,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/507,"This fixes a couple of leaks related to decode streams, and also fixes a typo.","This fixes a couple of leaks related to decode streams, and also fixes a typo.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,507,2017-01-18T16:21:01Z,2017-01-20T13:17:30Z,2017-01-20T13:17:33Z,MERGED,True,25,15,10,https://github.com/jnthn,Fix decode stream leaks,3,[],https://github.com/MoarVM/MoarVM/pull/507,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/507#issuecomment-273757830,"This fixes a couple of leaks related to decode streams, and also fixes a typo.",The only thing I don't like about this PR is that you first introduce a call to a misspelled function and then afterwards change the new call along with the others. A bit of unnecessary churn. Other than that this looks quite straight forward.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,507,2017-01-18T16:21:01Z,2017-01-20T13:17:30Z,2017-01-20T13:17:33Z,MERGED,True,25,15,10,https://github.com/jnthn,Fix decode stream leaks,3,[],https://github.com/MoarVM/MoarVM/pull/507,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/507#issuecomment-274069810,"This fixes a couple of leaks related to decode streams, and also fixes a typo.","I didn't notice the typo until afterwards, and even then pondered whether to just leave it be for somebody else to fix. :-) Will merge as is, rather than do a rebase dance etc.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,508,2017-01-18T16:34:29Z,2017-01-18T16:37:01Z,2017-08-14T16:17:39Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Fix typo in comment,1,[],https://github.com/MoarVM/MoarVM/pull/508,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/508,Final destory->destroy?,Final destory->destroy?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,508,2017-01-18T16:34:29Z,2017-01-18T16:37:01Z,2017-08-14T16:17:39Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Fix typo in comment,1,[],https://github.com/MoarVM/MoarVM/pull/508,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/508#issuecomment-273527354,Final destory->destroy?,"Heh, forgot git grep is case-sensitive. :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,509,2017-01-18T23:49:42Z,2017-01-18T23:54:31Z,2017-01-18T23:54:31Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Remove 'SETTING::' from line directive filenames,1,[],https://github.com/MoarVM/MoarVM/pull/509,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/509,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,510,2017-01-21T15:25:09Z,2017-01-22T09:17:59Z,2017-01-22T14:28:09Z,MERGED,True,38,42,12,https://github.com/MasterDuke17,Change tabs to spaces,1,[],https://github.com/MoarVM/MoarVM/pull/510,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/510,To be consistent with the rest of the source.,To be consistent with the rest of the source.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,511,2017-01-25T11:41:38Z,2017-01-25T13:15:39Z,2017-01-25T13:15:39Z,MERGED,True,33423,32393,4,https://github.com/samcv,Make getting Uni seq/cp's case insensitive and add seq from NamedSequences.txt,2,[],https://github.com/MoarVM/MoarVM/pull/511,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/511,"This makes looking up codepoints or sequences by name case insensitive. We store them
all in uppercase when generating the Unicode database and then uppercase any requests we
receive before trying to look them up.
This also adds the sequences from NamedSequences.txt, previously only the Emoji Sequences
and Emoji ZWJ Sequences were in our database.","This makes looking up codepoints or sequences by name case insensitive. We store them
all in uppercase when generating the Unicode database and then uppercase any requests we
receive before trying to look them up.
This also adds the sequences from NamedSequences.txt, previously only the Emoji Sequences
and Emoji ZWJ Sequences were in our database.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,512,2017-01-26T23:49:21Z,2017-03-30T11:17:13Z,2017-06-30T14:08:36Z,MERGED,True,725,7,16,https://github.com/timo,Line based coverage pr,22,[],https://github.com/MoarVM/MoarVM/pull/512,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/512,we've had the line based coverage thing in a bunch of often-rebased branches so far. It's time to merge it into master so the oplist and interp.c and such no longer give merge conflicts :),we've had the line based coverage thing in a bunch of often-rebased branches so far. It's time to merge it into master so the oplist and interp.c and such no longer give merge conflicts :),True,"{'THUMBS_UP': ['https://github.com/zoffixznet', 'https://github.com/MasterDuke17']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,512,2017-01-26T23:49:21Z,2017-03-30T11:17:13Z,2017-06-30T14:08:36Z,MERGED,True,725,7,16,https://github.com/timo,Line based coverage pr,22,[],https://github.com/MoarVM/MoarVM/pull/512,https://github.com/timo,2,https://github.com/MoarVM/MoarVM/pull/512#issuecomment-275551246,we've had the line based coverage thing in a bunch of often-rebased branches so far. It's time to merge it into master so the oplist and interp.c and such no longer give merge conflicts :),"annoyingly the line based profiler still causes lines that were definitely executed to not be marked as executed.
I think that's because the code so far only takes the first annotation that belongs to each BB, but we probably have BBs that span multiple lines, and those only get the first line reported.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,512,2017-01-26T23:49:21Z,2017-03-30T11:17:13Z,2017-06-30T14:08:36Z,MERGED,True,725,7,16,https://github.com/timo,Line based coverage pr,22,[],https://github.com/MoarVM/MoarVM/pull/512,https://github.com/timo,3,https://github.com/MoarVM/MoarVM/pull/512#issuecomment-275551754,we've had the line based coverage thing in a bunch of often-rebased branches so far. It's time to merge it into master so the oplist and interp.c and such no longer give merge conflicts :),"Also, the procedure to actually get a report is annoyingly roundabout; you have to moar --dump the file you want to have reported, you should collect all the output files and to make things faster run it through sort and uniq, and then you can finally put those files together with the source file/files that gave the .moarvm file you --dump'ed and get a folder full of html out of the whole ordeal ...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,512,2017-01-26T23:49:21Z,2017-03-30T11:17:13Z,2017-06-30T14:08:36Z,MERGED,True,725,7,16,https://github.com/timo,Line based coverage pr,22,[],https://github.com/MoarVM/MoarVM/pull/512,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/512#issuecomment-275700921,we've had the line based coverage thing in a bunch of often-rebased branches so far. It's time to merge it into master so the oplist and interp.c and such no longer give merge conflicts :),"A current problem we have is that we end up with wrong line numbers etc. when reporting on specialized code. The solution for that would partly consist of inserting spesh annotations onto nodes where the original bytecode stream had a line/file number annotation. We could then use those to generate specialized annotations. It strikes me that implementing the first half of that would get you more accurate reporting when a basic block contains multiple lines of code, which is likely not rare.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,512,2017-01-26T23:49:21Z,2017-03-30T11:17:13Z,2017-06-30T14:08:36Z,MERGED,True,725,7,16,https://github.com/timo,Line based coverage pr,22,[],https://github.com/MoarVM/MoarVM/pull/512,https://github.com/timo,5,https://github.com/MoarVM/MoarVM/pull/512#issuecomment-290376205,we've had the line based coverage thing in a bunch of often-rebased branches so far. It's time to merge it into master so the oplist and interp.c and such no longer give merge conflicts :),"even though this branch still needs work to be really good, we'll merge it so that the oplist doesn't cause merge conflicts every time a new op gets added.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,514,2017-01-29T14:13:44Z,2017-01-31T10:10:44Z,2017-01-31T10:10:44Z,MERGED,True,16,0,1,https://github.com/MasterDuke17,JIT MVM_radix() like MVM_bigint_radix(),1,[],https://github.com/MoarVM/MoarVM/pull/514,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/514,"This means nqp::radix() will be JITted like nqp::radix_I() already is.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-spectest.","This means nqp::radix() will be JITted like nqp::radix_I() already is.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,515,2017-01-29T14:30:16Z,2017-01-31T10:13:23Z,2017-02-08T13:28:11Z,MERGED,True,38800,38752,4,https://github.com/samcv,"Make radix 50% faster with Unicode Nd, add East_Asian_Width prop.",2,[],https://github.com/MoarVM/MoarVM/pull/515,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/515,"Don't use the general category which is slow and requires string operations.
Check that Numeric_Type=Decimal
This should also speed up radix in general when it is given non A-Z, a-z or 0-9 codepoints
This also adds support for the East_Asian_Width property.","Don't use the general category which is slow and requires string operations.
Check that Numeric_Type=Decimal
This should also speed up radix in general when it is given non A-Z, a-z or 0-9 codepoints
This also adds support for the East_Asian_Width property.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,515,2017-01-29T14:30:16Z,2017-01-31T10:13:23Z,2017-02-08T13:28:11Z,MERGED,True,38800,38752,4,https://github.com/samcv,"Make radix 50% faster with Unicode Nd, add East_Asian_Width prop.",2,[],https://github.com/MoarVM/MoarVM/pull/515,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/515#issuecomment-275917355,"Don't use the general category which is slow and requires string operations.
Check that Numeric_Type=Decimal
This should also speed up radix in general when it is given non A-Z, a-z or 0-9 codepoints
This also adds support for the East_Asian_Width property.","Spectest pass, plus some todo'd",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,515,2017-01-29T14:30:16Z,2017-01-31T10:13:23Z,2017-02-08T13:28:11Z,MERGED,True,38800,38752,4,https://github.com/samcv,"Make radix 50% faster with Unicode Nd, add East_Asian_Width prop.",2,[],https://github.com/MoarVM/MoarVM/pull/515,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/515#issuecomment-275940844,"Don't use the general category which is slow and requires string operations.
Check that Numeric_Type=Decimal
This should also speed up radix in general when it is given non A-Z, a-z or 0-9 codepoints
This also adds support for the East_Asian_Width property.",Could this same change be done for MVM_bigint_radix() also?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,515,2017-01-29T14:30:16Z,2017-01-31T10:13:23Z,2017-02-08T13:28:11Z,MERGED,True,38800,38752,4,https://github.com/samcv,"Make radix 50% faster with Unicode Nd, add East_Asian_Width prop.",2,[],https://github.com/MoarVM/MoarVM/pull/515,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/515#issuecomment-278328419,"Don't use the general category which is slow and requires string operations.
Check that Numeric_Type=Decimal
This should also speed up radix in general when it is given non A-Z, a-z or 0-9 codepoints
This also adds support for the East_Asian_Width property.",@MasterDuke17 also going to mention I applied this to MVM_bigint_radix as well,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,516,2017-02-01T08:32:32Z,2017-02-08T10:28:06Z,2017-02-08T10:28:10Z,MERGED,True,60,14,7,https://github.com/bdw,Add data section for JIT compiled code,2,[],https://github.com/MoarVM/MoarVM/pull/516,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/516,"Adding a data section allows us to store large data blobs in code rather than loading them as constants or using externally allocated memory. This is expected to plug a memory leak of malloc()'ed extop 'fake registers', and it is used to store constant pointers to functions, avoiding emitting a large 'movabs' instruction.","Adding a data section allows us to store large data blobs in code rather than loading them as constants or using externally allocated memory. This is expected to plug a memory leak of malloc()'ed extop 'fake registers', and it is used to store constant pointers to functions, avoiding emitting a large 'movabs' instruction.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,516,2017-02-01T08:32:32Z,2017-02-08T10:28:06Z,2017-02-08T10:28:10Z,MERGED,True,60,14,7,https://github.com/bdw,Add data section for JIT compiled code,2,[],https://github.com/MoarVM/MoarVM/pull/516,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/516#issuecomment-278289907,"Adding a data section allows us to store large data blobs in code rather than loading them as constants or using externally allocated memory. This is expected to plug a memory leak of malloc()'ed extop 'fake registers', and it is used to store constant pointers to functions, avoiding emitting a large 'movabs' instruction.","Reviewed this, looks like a really nice improvement that we'll be able to use for various things. Thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,517,2017-02-02T14:57:00Z,2017-02-02T16:30:56Z,2017-02-02T16:30:56Z,MERGED,True,8,8,3,https://github.com/lucasbuchala,Correct typo in struct name (s/NGF/NFG/),1,[],https://github.com/MoarVM/MoarVM/pull/517,https://github.com/lucasbuchala,1,https://github.com/MoarVM/MoarVM/pull/517,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,518,2017-02-02T19:51:17Z,2017-02-03T14:50:11Z,2017-02-03T14:50:59Z,MERGED,True,2,2,1,https://github.com/zoffixznet,Fix overflow in div_i op,1,[],https://github.com/MoarVM/MoarVM/pull/518,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/518,"The op uses int which overflows on large numbers, making the op
produce wrong results.
Fix by using MVMint64 instead.
Fixes RT#130686: https://rt.perl.org/Ticket/Display.html?id=130686","The op uses int which overflows on large numbers, making the op
produce wrong results.
Fix by using MVMint64 instead.
Fixes RT#130686: https://rt.perl.org/Ticket/Display.html?id=130686",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,520,2017-02-03T08:54:00Z,2017-02-04T09:05:15Z,2017-02-04T09:05:15Z,CLOSED,False,2,2,1,https://github.com/samcv,Apply the radix speed improvement to MVM_bigint_radix as well,1,[],https://github.com/MoarVM/MoarVM/pull/520,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/520,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,520,2017-02-03T08:54:00Z,2017-02-04T09:05:15Z,2017-02-04T09:05:15Z,CLOSED,False,2,2,1,https://github.com/samcv,Apply the radix speed improvement to MVM_bigint_radix as well,1,[],https://github.com/MoarVM/MoarVM/pull/520,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/520#issuecomment-277430288,,Closing since I committed this directly.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,522,2017-02-05T03:23:03Z,2017-02-11T14:33:06Z,2017-02-11T14:33:06Z,CLOSED,False,244,244,23,https://github.com/jeffythedragonslayer,renamed MVMArray to VMArray,1,[],https://github.com/MoarVM/MoarVM/pull/522,https://github.com/jeffythedragonslayer,1,https://github.com/MoarVM/MoarVM/pull/522,"I fixed #59
FYI, this is my first time ever contributing to an open source project","I fixed #59
FYI, this is my first time ever contributing to an open source project",True,{'HOORAY': ['https://github.com/zoffixznet']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,522,2017-02-05T03:23:03Z,2017-02-11T14:33:06Z,2017-02-11T14:33:06Z,CLOSED,False,244,244,23,https://github.com/jeffythedragonslayer,renamed MVMArray to VMArray,1,[],https://github.com/MoarVM/MoarVM/pull/522,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/522#issuecomment-278108923,"I fixed #59
FYI, this is my first time ever contributing to an open source project","Comments from IRC:

<jnthn>  Hmm...looking at that one for a moment between cooking tasks...I'm not quite convinced it's a desirable change. :-( We try to prefix everything that we export MVMFoo (types) or MVM_foo (functions)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,522,2017-02-05T03:23:03Z,2017-02-11T14:33:06Z,2017-02-11T14:33:06Z,CLOSED,False,244,244,23,https://github.com/jeffythedragonslayer,renamed MVMArray to VMArray,1,[],https://github.com/MoarVM/MoarVM/pull/522,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/522#issuecomment-278309957,"I fixed #59
FYI, this is my first time ever contributing to an open source project","I just took a look at #59 and while it was well-intended, it would also cause us to expose non-MVM-prefixed things, which would make for a potential source of conflicts for anyone embedding. Generally, it's polite for libraries that may be embedded to have a common prefix on things; we use MVM, as MVMFoo for types and MVM_foo for functions. So, I'd say we can live with the inconsistency as the less bad thing.
What we do seem to do in most cases (but not this one) is to name the constant and the filename without MVM in the cases of public REPRS. So, the rename of MVMArray.c to VMArray.c is OK, as is the constant MVM_REPR_ID_MVMArray changing to MVM_REPR_ID_VMArray; that is consistent with what we do elsewhere. The typename changes aren't so desirable, however. If you fancy backing those parts out, the remaining bits (constant name change, file name change) would be fine to merge.
Sorry for the confusion, and thanks for contributing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,522,2017-02-05T03:23:03Z,2017-02-11T14:33:06Z,2017-02-11T14:33:06Z,CLOSED,False,244,244,23,https://github.com/jeffythedragonslayer,renamed MVMArray to VMArray,1,[],https://github.com/MoarVM/MoarVM/pull/522,https://github.com/jeffythedragonslayer,4,https://github.com/MoarVM/MoarVM/pull/522#issuecomment-278875514,"I fixed #59
FYI, this is my first time ever contributing to an open source project","Ok, I'll try again with just those changes.  Hopefully soon.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,522,2017-02-05T03:23:03Z,2017-02-11T14:33:06Z,2017-02-11T14:33:06Z,CLOSED,False,244,244,23,https://github.com/jeffythedragonslayer,renamed MVMArray to VMArray,1,[],https://github.com/MoarVM/MoarVM/pull/522,https://github.com/jnthn,5,https://github.com/MoarVM/MoarVM/pull/522#issuecomment-279147420,"I fixed #59
FYI, this is my first time ever contributing to an open source project",Closing as replaced by #532.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,523,2017-02-05T10:25:19Z,2017-02-06T11:00:39Z,2017-02-06T11:00:39Z,CLOSED,False,99,50,1,https://github.com/samcv,Implement support for synthetic graphemes in MVM_unicode_string_compare,1,[],https://github.com/MoarVM/MoarVM/pull/523,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/523,"We iterate by grapheme, and if we find one which is synthetic, we add all of the
collation weights for the codepoints which make it up together and compare that way.","We iterate by grapheme, and if we find one which is synthetic, we add all of the
collation weights for the codepoints which make it up together and compare that way.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,523,2017-02-05T10:25:19Z,2017-02-06T11:00:39Z,2017-02-06T11:00:39Z,CLOSED,False,99,50,1,https://github.com/samcv,Implement support for synthetic graphemes in MVM_unicode_string_compare,1,[],https://github.com/MoarVM/MoarVM/pull/523,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/523#issuecomment-277649999,"We iterate by grapheme, and if we find one which is synthetic, we add all of the
collation weights for the codepoints which make it up together and compare that way.",Commited this directly. Closing.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,524,2017-02-05T16:45:02Z,2017-02-05T23:01:52Z,2017-02-05T23:01:52Z,MERGED,True,3,2,1,https://github.com/bsiegert,Use LDFLAGS in ld invocations,1,[],https://github.com/MoarVM/MoarVM/pull/524,https://github.com/bsiegert,1,https://github.com/MoarVM/MoarVM/pull/524,"I am the maintainer of the pkgsrc package for MoarVM (http://pkgsrc.se/devel/MoarVM). The library paths we use are non-standard, for example /opt/pkg/lib (but it could be anything really). I needed this patch to make the MoarVM configure file use LDFLAGS in all invocations of ld.","I am the maintainer of the pkgsrc package for MoarVM (http://pkgsrc.se/devel/MoarVM). The library paths we use are non-standard, for example /opt/pkg/lib (but it could be anything really). I needed this patch to make the MoarVM configure file use LDFLAGS in all invocations of ld.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,526,2017-02-08T14:37:34Z,2017-02-08T19:20:42Z,2017-02-08T19:20:42Z,MERGED,True,2,1,1,https://github.com/zoffixznet,Fix abs_n op for negative zeros,1,[],https://github.com/MoarVM/MoarVM/pull/526,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/526,"Currently, abs_n(-0e0) leaves the sign intact, returning -0e0.
IEEE 754-2008[^1], section 5.5.1 says ""abs(x) copies a floating-point
operand x to a destination in the same format, setting the sign bit
to 0 (positive)."" Which means the -0e0 needs to become 0e0.
Fix by adding a check for negative zero together with a check for
other negatives.
[1] http://www.csee.umbc.edu/%7Etsimo1/CMSC455/IEEE-754-2008.pdf","Currently, abs_n(-0e0) leaves the sign intact, returning -0e0.
IEEE 754-2008[^1], section 5.5.1 says ""abs(x) copies a floating-point
operand x to a destination in the same format, setting the sign bit
to 0 (positive)."" Which means the -0e0 needs to become 0e0.
Fix by adding a check for negative zero together with a check for
other negatives.
[1] http://www.csee.umbc.edu/%7Etsimo1/CMSC455/IEEE-754-2008.pdf",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,526,2017-02-08T14:37:34Z,2017-02-08T19:20:42Z,2017-02-08T19:20:42Z,MERGED,True,2,1,1,https://github.com/zoffixznet,Fix abs_n op for negative zeros,1,[],https://github.com/MoarVM/MoarVM/pull/526,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/526#issuecomment-278361074,"Currently, abs_n(-0e0) leaves the sign intact, returning -0e0.
IEEE 754-2008[^1], section 5.5.1 says ""abs(x) copies a floating-point
operand x to a destination in the same format, setting the sign bit
to 0 (positive)."" Which means the -0e0 needs to become 0e0.
Fix by adding a check for negative zero together with a check for
other negatives.
[1] http://www.csee.umbc.edu/%7Etsimo1/CMSC455/IEEE-754-2008.pdf","Sadly, this doesn't build on MSVC:
   Creating library moar.dll.lib and object moar.dll.exp
interp.obj : error LNK2001: unresolved external symbol copysign
moar.dll : fatal error LNK1120: 1 unresolved externals",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,526,2017-02-08T14:37:34Z,2017-02-08T19:20:42Z,2017-02-08T19:20:42Z,MERGED,True,2,1,1,https://github.com/zoffixznet,Fix abs_n op for negative zeros,1,[],https://github.com/MoarVM/MoarVM/pull/526,https://github.com/zoffixznet,3,https://github.com/MoarVM/MoarVM/pull/526#issuecomment-278364013,"Currently, abs_n(-0e0) leaves the sign intact, returning -0e0.
IEEE 754-2008[^1], section 5.5.1 says ""abs(x) copies a floating-point
operand x to a destination in the same format, setting the sign bit
to 0 (positive)."" Which means the -0e0 needs to become 0e0.
Fix by adding a check for negative zero together with a check for
other negatives.
[1] http://www.csee.umbc.edu/%7Etsimo1/CMSC455/IEEE-754-2008.pdf",Updated.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,526,2017-02-08T14:37:34Z,2017-02-08T19:20:42Z,2017-02-08T19:20:42Z,MERGED,True,2,1,1,https://github.com/zoffixznet,Fix abs_n op for negative zeros,1,[],https://github.com/MoarVM/MoarVM/pull/526,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/526#issuecomment-278405499,"Currently, abs_n(-0e0) leaves the sign intact, returning -0e0.
IEEE 754-2008[^1], section 5.5.1 says ""abs(x) copies a floating-point
operand x to a destination in the same format, setting the sign bit
to 0 (positive)."" Which means the -0e0 needs to become 0e0.
Fix by adding a check for negative zero together with a check for
other negatives.
[1] http://www.csee.umbc.edu/%7Etsimo1/CMSC455/IEEE-754-2008.pdf","Checked, and now it builds fine.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,1,https://github.com/MoarVM/MoarVM/pull/528,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278455029,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","Fails to build on my debian VM:
...",True,{'THUMBS_UP': ['https://github.com/nanis']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,3,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278455380,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","@zoffixznet Oh, that was stupid of me. Will fix in second.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,4,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278459227,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.",@zoffixznet I think it should be fixed now. It builds on my ArchLinux VM.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/zoffixznet,5,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278472083,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","Builds fine on my debian now and stresstest passes too, but it fails to build with undefined reference to WinMain'` on my Windows 10 box... unless I'm doing it wrong? Full output here
If I checkout master and build then it does compiles; full output here
No idea if I'm using a supported toolchain though. I think I just have whatever Strawberry Perl came with.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,6,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278481681,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","@zoffixznet Yeah, Strawberry comes with MinGW and I checked with Visual Studio 2015 tools only. I'll have to look into that. In the short term, I might have to change the conditional to only build Unicode support when compiling under MSVC.",True,{'THUMBS_UP': ['https://github.com/zoffixznet']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,7,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278483137,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","I think MinGW needs -mconsole -mwindows for wmain to work.
I also noticed another potential error in the build output.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,8,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278490740,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","@zoffixznet Before I try to fiddle with Configure.pl, could you do:
C:\> set CFLAGS=%CFLAGS% -mconsole -mwindows

then run perl Configure.pl ... again and the try the build again?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,9,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278497074,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","@zoffixznet Actually, looking at the FAQ again, if setting CFLAGS does not work, then please try
C:\> set LDFLAGS=%LDFLAGS% -mconsole -mwindows",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/zoffixznet,10,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278501285,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","Doesn't seem to like either:
C:\rakudo-git\nqp\MoarVM>set CFLAGS=%CFLAGS% -mconsole -mwindows

C:\rakudo-git\nqp\MoarVM>perl Configure.pl --prefix=../../install
Welcome to MoarVM!

Updating submodules .................................... OK
Configuring native build environment ................... OK
    auto-detecting x64 toolchain ....................... YES
    trying to compile a simple C program ............... YES
    probing whether your compiler thinks that it is gcc  YES
    probing how your compiler does static inline ....... static __inline__
    your CPU can read unaligned values for all of int32 int64 num64
    probing the size of pointers ....................... 8
    probing C type support for: _Bool, bool ............ YES: _Bool,bool
    probing computed goto support ...................... YES
    probing pthread_yield support ...................... NO

        make: gmake
     compile: gcc -Wdeclaration-after-statement -Werror=declaration-after-statement -O3 -DNDEBUG  -DWIN32 -DAO_ASSUME_WINDOWS98 -D_WIN32_WINNT=0x0600  %CFLAGS% -mconsole -mwindows
    includes:  -I3rdparty/libuv/include -I3rdparty/libuv/src -I3rdparty/libatomic_ops/src -I3rdparty/libtommath -I3rdparty/dynasm -I3rdparty/dyncall/dynload -I3rdparty/dyncall/dyncall -I3rdparty/dyncall/dyncallback
        link: gcc  -O3 -DNDEBUG
        libs: -lshell32 -lws2_32 -lmswsock -lrpcrt4 -ladvapi32 -lpsapi -liphlpapi -luserenv

  byte order: little endian

Configuring 3rdparty libs .............................. OK

  3rdparty: 3rdparty/dyncall/dyncall/libdyncall_s.a
            3rdparty/dyncall/dyncallback/libdyncallback_s.a
            3rdparty/dyncall/dynload/libdynload_s.a
            3rdparty/libtommath/libtommath.a
            3rdparty/libuv/libuv.a
            3rdparty/sha1/libsha1.a
            3rdparty/tinymt/libtinymt.a

Generating src/gen/config.c ............................ OK
Generating src/gen/config.h ............................ OK
Generating Makefile .................................... OK
Generating tools/check.mk .............................. OK
Generating build/mk-moar-pc.pl ......................... OK

Configuration SUCCESS.

Type 'gmake' to build and 'gmake help' to see a list of
available make targets.

C:\rakudo-git\nqp\MoarVM>gmake -j8
compiling src\core\callsite.o
compiling src\core\exceptions.o
compiling src\core\interp.o
compiling src\core\args.o
compiling src\core\threadcontext.o
gcc: error: %CFLAGS%: No such file or directory
gcc: error: %CFLAGS%: No such file or directory
makefile:563: recipe for target 'src\core\callsite.o' failed
gmake: *** [src\core\callsite.o] Error 1
gmake: *** Waiting for unfinished jobs....
makefile:563: recipe for target 'src\core\exceptions.o' failed
gmake: *** [src\core\exceptions.o] Error 1
gcc: error: %CFLAGS%: No such file or directory
gcc: error: %CFLAGS%: No such file or directory
compiling src\main.o
makefile:563: recipe for target 'src\core\threadcontext.o' failed
gcc: error: %CFLAGS%: No such file or directory
gmake: *** [src\core\threadcontext.o] Error 1
compiling src\core\compunit.o
makefile:563: recipe for target 'src\core\interp.o' failed
gmake: *** [src\core\interp.o] Error 1
makefile:563: recipe for target 'src\core\args.o' failed
gcc: error: %CFLAGS%: No such file or directory
gcc: error: %CFLAGS%: No such file or directory
gmake: *** [src\core\args.o] Error 1
makefile:563: recipe for target 'src\core\compunit.o' failed
gmake: *** [src\core\compunit.o] Error 1
makefile:568: recipe for target 'src\main.o' failed
gmake: *** [src\main.o] Error 1

C:\rakudo-git\nqp\MoarVM>

I then closed the terminal and opend a new one:
C:\rakudo-git\nqp\MoarVM>set LDFLAGS=%LDFLAGS% -mconsole -mwindows

C:\rakudo-git\nqp\MoarVM>perl Configure.pl --prefix=../../install
Welcome to MoarVM!

Updating submodules .................................... OK
Configuring native build environment ................... OK
    auto-detecting x64 toolchain ....................... YES
    trying to compile a simple C program ............... ERROR

    Can't link simple C program.
    Failing command: gcc %LDFLAGS% -mconsole -mwindows -o try try.o -lshell32 -lws2_32 -lmswsock -lrpcrt4 -ladvapi32 -lpsapi -liphlpapi -luserenv 2>&1
    Error: gcc: error: %LDFLAGS%: No such file or directory


Cannot continue after this error.
On linux, maybe you need something like 'sudo apt-get install build-essential'.
On macOS, maybe you need to install XCode and accept the XCode EULA.

C:\rakudo-git\nqp\MoarVM>",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,11,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278508371,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","Argh! The environment variable LDFLAGS is not set. Therefore, in cmd.exe, %LDFLAGS% evaluates to the literal string (instead of the empty string) and that confuses gcc.
Those variables were not empty in my environment, so I did not realize.
Please try set LDFLAGS=-mwindows -mconsole. If that does not work, please try CFLAGS=-mwindows -mconsole. Thank you.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/zoffixznet,12,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278511649,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.",Both still seem to fail with undefined reference to WinMain' collect2.exe: error: ld returned 1 exit status`  at the end. Full output of CFLAGS one here,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,13,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278518786,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.",@zoffixznet OK ... I think I need to pause a little and take another look again later. It must be something obvious. Thank you.,True,{'THUMBS_UP': ['https://github.com/zoffixznet']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,14,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278519540,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","Grasping at straws here ... How about set LDFLAGS=-municode?
Update: I feel like I am living in a strange land here. I downloaded Strawberry Perl 5.24.1 just in case I was missing something. With the bundled MinGW, this works:
C:\Temp> type t.c
#include <wchar.h>
#include <stdio.h>

int wmain(int argc, wchar_t *wargv[])
{
    wprintf(L""hello\n"");
    return 0;
}

C:\Temp> gcc t.c -o t -municode

C:\Temp> t
hello

Yet using -municode in LDFLAGS and/or CFLAGS does not:
C:\Temp\MoarVM (nanis-utf8-argv) > perl Configure.pl
Welcome to MoarVM!

Updating submodules .................................... OK
Configuring native build environment ................... OK
    auto-detecting x64 toolchain ....................... YES
    trying to compile a simple C program ............... ERROR

    Can't link simple C program.
    Failing command: gcc -municode -o try try.o -lshell32 -lws2_32 -lmswsock -lrpcrt4 -ladvapi32 -lpsapi -liphlpapi -luserenv 2>&1
    Error: c:/opt/strawberry/c/bin/../lib/gcc/x86_64-w64-mingw32/4.9.2/../../../../x86_64-w64-mingw32/lib/../lib/libmingw32.a(lib64_libmingw32_a-crt0_w.o):crt0_w.c:(.text+0x18): undefined reference to `wWinMain'
collect2.exe: error: ld returned 1 exit status",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,15,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278612759,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","@zoffixznet I think I know what's going on ... The test program Configure.pl tries to compile does not have wmain, so specifying -municode fails at that step. Now, I need to find that program ;-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,16,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278618366,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","All the test programlets in build/probe.pm need to be rewritten to use wmain because I am adding -municode for gcc. But, of course, on non-Windows systems with gcc, that is going to be problematic.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,17,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278620221,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","So, leaving out -municode for perl Configure.pl --os mingw32, and then manually adding it to LDFLAGS in the generated Makefile enables the build to succeed.
That means we need to figure out where in Configure.pl we need to push -municode onto @ldflags ... after the probes are done but before the Makefile is generated.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/samcv,18,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-278882229,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.",@nanis thanks for all your work on this! Great to have better Windows support.,True,{'THUMBS_UP': ['https://github.com/nanis']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/zoffixznet,19,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-279092393,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","I have mixed news...
So I still had the directory from all the previous attempts, right? I then did git pull to fetch your updates, closed the terminal and opened a new one (to get rid of any env vars set last time), then I ran perl Configure --prefix=../../install, gmake -j8, gmake install and everything built and I was able to confirm the bug got fixed. Full output here
I figured that Configure.pl probably had stuff from previous runs, so I nuked nqp/MoarVM cloned the repo again and now it fails on the gmake -j8 step. Full output here",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,20,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-279095633,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","@zoffixznet OK ... So, -municode doesn't play well with minilua because it doesn't have a wmain.
Also, I guess make clean doesn't clean up everything.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,21,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-279097720,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","I don't know if this is fixable without completely overhauling Configure.pl
Actually, I think it's a small fix.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,22,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-279142773,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","@timo @zoffixznet Added an extra variable to %config and Makefile.in to only add -municode when moar.exe is being linked using MinGW toolchain. This will still fail if someone is using the original (and outdated) MinGW toolchain rather than the MinGW-w64 fork.
I don't know how to distinguish between the two in the context of Configure.pl and I don't think it is necessary to get into that.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/zoffixznet,23,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-279148947,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.","Confirming build succeeds, bug gets fixed, and stresstest on Debian passes (Windows stresstest has known failures many of which are due to poor tests, so I didn't bother running it).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,24,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-279151332,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.",@jnthn Thanks. Will take care of those next time I look at it.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/nanis,25,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-279156288,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.",@jnthn Changes made. Thank you.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,528,2017-02-08T20:26:39Z,2017-02-11T16:31:48Z,2017-02-11T16:32:33Z,MERGED,True,47,13,5,https://github.com/nanis,"On Windows, improve handling of Unicode in command line arguments and environment strings",11,[],https://github.com/MoarVM/MoarVM/pull/528,https://github.com/jnthn,26,https://github.com/MoarVM/MoarVM/pull/528#issuecomment-279157646,"These changes relate to issue #527. With the changes included in this request, I get:
C:\> chcp 65001
Active code page: 65001

C:\> set iş=kârlı

C:\> perl6 -e ""say %*ENV<iş>""
kârlı

C:\> perl6 -e ""say 'kârlı iş'""
kârlı iş

This the kind of thing that ""works on my machine"" ... I'd rather see someone else try them out with the full test suite before recommending any merges.
I tried to make the smallest number of edits to get the desired output. I am not very familiar with the ins and outs of the source code and I might have missed something important, but I hope this helps.
PS: Most importantly, I couldn't decide where/if the wargv array and the strings to which it points should be freed.",Thanks; merged.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,530,2017-02-09T06:03:52Z,2017-02-09T10:06:42Z,2017-02-09T10:06:42Z,MERGED,True,30,30,6,https://github.com/samcv,Enforce consistent commenting style,1,[],https://github.com/MoarVM/MoarVM/pull/530,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/530,"Use /* */ instead of //
// commenting is not part of C standards before C99","Use /* */ instead of //
// commenting is not part of C standards before C99",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,530,2017-02-09T06:03:52Z,2017-02-09T10:06:42Z,2017-02-09T10:06:42Z,MERGED,True,30,30,6,https://github.com/samcv,Enforce consistent commenting style,1,[],https://github.com/MoarVM/MoarVM/pull/530,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/530#issuecomment-278598674,"Use /* */ instead of //
// commenting is not part of C standards before C99","I was sorta expecting ""enforce"" to mean ""add compiler flag to make it happen"". :-) Anyway, this is nice for consistency, so will merge.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,531,2017-02-10T14:33:43Z,2017-02-10T20:07:07Z,2017-02-10T20:07:07Z,MERGED,True,5,4,1,https://github.com/dogbert17,Fix overflow on 32 bit systems in is_full_collection(),1,[],https://github.com/MoarVM/MoarVM/pull/531,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/531,"In order to figure out whether a full GC should be made the code
has logic which calculates the percentage of 'promoted' bytes as part
of the resident set size. If the calculated percentage is equal to
or larger than MVM_GC_GEN2_THRESHOLD_PERCENT a full collection will
be made. However, the code which calculate the percent_growth does
not work properly on 32 bit systems due to the fact that size_t is
only 32 bits on such systems. When 'promoted' was multiplied by 100
an overflow would occur as soon as that variable contained a large
enough value. This, in turn, would lead to a situation where a full
collection would never be made which in the end lead to an out of
memory error.
Changing the type of the variable 'promoted' to MVMuint64 fixes the
problem on 32 bit systems. The problem didn't appear on 64-bit
systems since size_t is 64 bits there.","In order to figure out whether a full GC should be made the code
has logic which calculates the percentage of 'promoted' bytes as part
of the resident set size. If the calculated percentage is equal to
or larger than MVM_GC_GEN2_THRESHOLD_PERCENT a full collection will
be made. However, the code which calculate the percent_growth does
not work properly on 32 bit systems due to the fact that size_t is
only 32 bits on such systems. When 'promoted' was multiplied by 100
an overflow would occur as soon as that variable contained a large
enough value. This, in turn, would lead to a situation where a full
collection would never be made which in the end lead to an out of
memory error.
Changing the type of the variable 'promoted' to MVMuint64 fixes the
problem on 32 bit systems. The problem didn't appear on 64-bit
systems since size_t is 64 bits there.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,532,2017-02-11T02:33:54Z,2017-02-11T22:49:42Z,2017-02-11T22:49:42Z,MERGED,True,30,30,20,https://github.com/jeffythedragonslayer,VMArray2,3,[],https://github.com/MoarVM/MoarVM/pull/532,https://github.com/jeffythedragonslayer,1,https://github.com/MoarVM/MoarVM/pull/532,Second attempt at the rename!,Second attempt at the rename!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,532,2017-02-11T02:33:54Z,2017-02-11T22:49:42Z,2017-02-11T22:49:42Z,MERGED,True,30,30,20,https://github.com/jeffythedragonslayer,VMArray2,3,[],https://github.com/MoarVM/MoarVM/pull/532,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/532#issuecomment-279141124,Second attempt at the rename!,"This appears to be missing a couple of things. First, the Makefile.in needs updating for the changed filename; the automated build reports:
gcc: error: src/6model/reprs/MVMArray.o: No such file or directory
make: *** [libmoar.so] Error 1

Secondly, it'd be good to rename the header file MVMArray.h to VMArray.h also. (Note this will also need tweaking in the Makefile, and probably in something like reprs.h also).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,532,2017-02-11T02:33:54Z,2017-02-11T22:49:42Z,2017-02-11T22:49:42Z,MERGED,True,30,30,20,https://github.com/jeffythedragonslayer,VMArray2,3,[],https://github.com/MoarVM/MoarVM/pull/532,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/532#issuecomment-279181550,Second attempt at the rename!,Looks good now; thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,534,2017-02-11T14:55:43Z,2017-02-11T15:06:25Z,2017-02-11T16:09:01Z,MERGED,True,1,2,1,https://github.com/nanis,Issue #533: MoarVM does not build on `cygwin`.,1,[],https://github.com/MoarVM/MoarVM/pull/534,https://github.com/nanis,1,https://github.com/MoarVM/MoarVM/pull/534,Remove mention of cygwin support from Configure.pl.,Remove mention of cygwin support from Configure.pl.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,534,2017-02-11T14:55:43Z,2017-02-11T15:06:25Z,2017-02-11T16:09:01Z,MERGED,True,1,2,1,https://github.com/nanis,Issue #533: MoarVM does not build on `cygwin`.,1,[],https://github.com/MoarVM/MoarVM/pull/534,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/534#issuecomment-279150222,Remove mention of cygwin support from Configure.pl.,"Wow, didn't even realize that was there. Thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,535,2017-02-11T20:45:43Z,2017-02-11T22:45:13Z,2017-02-11T22:45:13Z,MERGED,True,30574,30560,4,https://github.com/samcv,Use utf8 for unicode_db files; Add missing #ifdef for variable initialization,2,[],https://github.com/MoarVM/MoarVM/pull/535,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/535,"Fixes a compiler warning from having non-UTF-8 encoded text in unicode_db.c


Also ensures when we uppercase the Emoji sequence names, letters with diacritics
get uppercased properly.


Add missing #ifdef for variable initialization


This variable is unused except when #ifdef is true, so have an #ifdef for
the initialization too.","Fixes a compiler warning from having non-UTF-8 encoded text in unicode_db.c


Also ensures when we uppercase the Emoji sequence names, letters with diacritics
get uppercased properly.


Add missing #ifdef for variable initialization


This variable is unused except when #ifdef is true, so have an #ifdef for
the initialization too.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,536,2017-02-12T16:32:52Z,,2017-02-20T18:11:38Z,OPEN,False,451,189,15,https://github.com/timo,vmhealth op that spits out some stats,9,[],https://github.com/MoarVM/MoarVM/pull/536,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/536,"i've implemented an op that you can use to query some random information about the state of the running MoarVM. Here's some example output:
:nursery_bytes((77568,))
:jitframes_produced(790)
:gc_seqnr(115)
:num_threads(1)
:gen2_pagecounts(((0, 0, 14, 843, 25, 207, 425, 4, 164, 5, 52, 2, 9, 45, 1, 1, 42, 1, 22, 3, 1, 0, 1, 0, 14, 0, 1, 0, 0, 1, 0, 0, 75, 23, 0, 0, 0, 0, 0, 0),))
:fsa_free_elems((82, 3, 50, 54, 106, 82, 105, 51, 117, 48, 53, 103, 0, 93, 119, 77, 111, 70, 65, 74, 119, 98, 122, 108, 120, 88, 115, 105, 107, 117, 125, 117, 123, 121, 121, 117, 125, 109, 126, 122, 125, 120, 127, 121, 125, 63, 126, 114, 117, 110, 124, 108, 119, 116, 115, 78, 124, 124, 127, 123, 115, 121, 123, 126, 126, 126, 123, 121, 127, 126, 114, 123, 122, 126, 118, 125, 125, 77, 120, 122, 123, 93, 124, 115, 119, 122, 123, 113, 118, 124, 125, 121, 124, 115, 126, 125))
:fsa_pagecounts((16, 8, 8, 10, 13, 800, 32, 20, 4, 5, 2, 2, 2, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
:gc_bytes_promoted_since_full(14900680)
:speshframes_produced(1111)
:gen2_free_elems(((0, 0, 7, 149, 224, 90, 94, 19, 241, 70, 216, 33, 110, 37, 50, 7, 238, 87, 220, 31, 1, 0, 47, 0, 68, 0, 4, 0, 0, 168, 0, 0, 99, 100, 0, 0, 0, 0, 0, 0),))

nursery_bytes gives the number of bytes in use in each thread
jitframes_produced spits out the jit sequence number
speshframes_produced spits out the spesh sequence number (same number that's used for the spesh limit)
gc_seqnr is basically the number of GC runs so far
num_threads is how many threads are currently in the ""started"" state
gc_bytes_promoted_since_full (a mouthful!) is how many bytes moar thinks have been promoted to gen2 since there last was a full collection,
gen2_pagecounts gives a list of gen2 pages allocated each size bucket for each thread
gen2_free_elems gives a list of how far the allocation pointer is from the allocation limit (in units) in each size class for every thread
fsa_pagecounts and fsa_free_elems works the same as gen2_*, but since the fsa is shared between threads, it just has one list where the others have one list per thread.

I'm opening this pull request for discussion. Especially:

What other stats would be interesting to probe regularly, for example in a monitoring system like prometheus?
how do i make this a bit safer? currently it follows some pointers that other threads may update at some point, and that could explode when another thread frees the thing in question
should the API change? should the user be allowed to bitmask out stuff they want vs stuff they don't want?
is it acceptable for the contents of the results to change from version to version? should we warn users that they shouldn't rely on the output being compatible? add a version parameter for backwards compat? just yolo it?

One thing I'd like to see is how many major collections have been done so far, we don't count that yet. We have the number of gen2 roots in the profiler, but not yet here. Maybe that's interesting, too. In combination with the size buckets, it'd be pretty neat if you could query an object for what its size in the nursery/gen2 will be so you can correlate consumption of gen2 space with what objects are likely to be the cause.
Have at it!","i've implemented an op that you can use to query some random information about the state of the running MoarVM. Here's some example output:
:nursery_bytes((77568,))
:jitframes_produced(790)
:gc_seqnr(115)
:num_threads(1)
:gen2_pagecounts(((0, 0, 14, 843, 25, 207, 425, 4, 164, 5, 52, 2, 9, 45, 1, 1, 42, 1, 22, 3, 1, 0, 1, 0, 14, 0, 1, 0, 0, 1, 0, 0, 75, 23, 0, 0, 0, 0, 0, 0),))
:fsa_free_elems((82, 3, 50, 54, 106, 82, 105, 51, 117, 48, 53, 103, 0, 93, 119, 77, 111, 70, 65, 74, 119, 98, 122, 108, 120, 88, 115, 105, 107, 117, 125, 117, 123, 121, 121, 117, 125, 109, 126, 122, 125, 120, 127, 121, 125, 63, 126, 114, 117, 110, 124, 108, 119, 116, 115, 78, 124, 124, 127, 123, 115, 121, 123, 126, 126, 126, 123, 121, 127, 126, 114, 123, 122, 126, 118, 125, 125, 77, 120, 122, 123, 93, 124, 115, 119, 122, 123, 113, 118, 124, 125, 121, 124, 115, 126, 125))
:fsa_pagecounts((16, 8, 8, 10, 13, 800, 32, 20, 4, 5, 2, 2, 2, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
:gc_bytes_promoted_since_full(14900680)
:speshframes_produced(1111)
:gen2_free_elems(((0, 0, 7, 149, 224, 90, 94, 19, 241, 70, 216, 33, 110, 37, 50, 7, 238, 87, 220, 31, 1, 0, 47, 0, 68, 0, 4, 0, 0, 168, 0, 0, 99, 100, 0, 0, 0, 0, 0, 0),))

nursery_bytes gives the number of bytes in use in each thread
jitframes_produced spits out the jit sequence number
speshframes_produced spits out the spesh sequence number (same number that's used for the spesh limit)
gc_seqnr is basically the number of GC runs so far
num_threads is how many threads are currently in the ""started"" state
gc_bytes_promoted_since_full (a mouthful!) is how many bytes moar thinks have been promoted to gen2 since there last was a full collection,
gen2_pagecounts gives a list of gen2 pages allocated each size bucket for each thread
gen2_free_elems gives a list of how far the allocation pointer is from the allocation limit (in units) in each size class for every thread
fsa_pagecounts and fsa_free_elems works the same as gen2_*, but since the fsa is shared between threads, it just has one list where the others have one list per thread.

I'm opening this pull request for discussion. Especially:

What other stats would be interesting to probe regularly, for example in a monitoring system like prometheus?
how do i make this a bit safer? currently it follows some pointers that other threads may update at some point, and that could explode when another thread frees the thing in question
should the API change? should the user be allowed to bitmask out stuff they want vs stuff they don't want?
is it acceptable for the contents of the results to change from version to version? should we warn users that they shouldn't rely on the output being compatible? add a version parameter for backwards compat? just yolo it?

One thing I'd like to see is how many major collections have been done so far, we don't count that yet. We have the number of gen2 roots in the profiler, but not yet here. Maybe that's interesting, too. In combination with the size buckets, it'd be pretty neat if you could query an object for what its size in the nursery/gen2 will be so you can correlate consumption of gen2 space with what objects are likely to be the cause.
Have at it!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,536,2017-02-12T16:32:52Z,,2017-02-20T18:11:38Z,OPEN,False,451,189,15,https://github.com/timo,vmhealth op that spits out some stats,9,[],https://github.com/MoarVM/MoarVM/pull/536,https://github.com/moritz,2,https://github.com/MoarVM/MoarVM/pull/536#issuecomment-279234782,"i've implemented an op that you can use to query some random information about the state of the running MoarVM. Here's some example output:
:nursery_bytes((77568,))
:jitframes_produced(790)
:gc_seqnr(115)
:num_threads(1)
:gen2_pagecounts(((0, 0, 14, 843, 25, 207, 425, 4, 164, 5, 52, 2, 9, 45, 1, 1, 42, 1, 22, 3, 1, 0, 1, 0, 14, 0, 1, 0, 0, 1, 0, 0, 75, 23, 0, 0, 0, 0, 0, 0),))
:fsa_free_elems((82, 3, 50, 54, 106, 82, 105, 51, 117, 48, 53, 103, 0, 93, 119, 77, 111, 70, 65, 74, 119, 98, 122, 108, 120, 88, 115, 105, 107, 117, 125, 117, 123, 121, 121, 117, 125, 109, 126, 122, 125, 120, 127, 121, 125, 63, 126, 114, 117, 110, 124, 108, 119, 116, 115, 78, 124, 124, 127, 123, 115, 121, 123, 126, 126, 126, 123, 121, 127, 126, 114, 123, 122, 126, 118, 125, 125, 77, 120, 122, 123, 93, 124, 115, 119, 122, 123, 113, 118, 124, 125, 121, 124, 115, 126, 125))
:fsa_pagecounts((16, 8, 8, 10, 13, 800, 32, 20, 4, 5, 2, 2, 2, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
:gc_bytes_promoted_since_full(14900680)
:speshframes_produced(1111)
:gen2_free_elems(((0, 0, 7, 149, 224, 90, 94, 19, 241, 70, 216, 33, 110, 37, 50, 7, 238, 87, 220, 31, 1, 0, 47, 0, 68, 0, 4, 0, 0, 168, 0, 0, 99, 100, 0, 0, 0, 0, 0, 0),))

nursery_bytes gives the number of bytes in use in each thread
jitframes_produced spits out the jit sequence number
speshframes_produced spits out the spesh sequence number (same number that's used for the spesh limit)
gc_seqnr is basically the number of GC runs so far
num_threads is how many threads are currently in the ""started"" state
gc_bytes_promoted_since_full (a mouthful!) is how many bytes moar thinks have been promoted to gen2 since there last was a full collection,
gen2_pagecounts gives a list of gen2 pages allocated each size bucket for each thread
gen2_free_elems gives a list of how far the allocation pointer is from the allocation limit (in units) in each size class for every thread
fsa_pagecounts and fsa_free_elems works the same as gen2_*, but since the fsa is shared between threads, it just has one list where the others have one list per thread.

I'm opening this pull request for discussion. Especially:

What other stats would be interesting to probe regularly, for example in a monitoring system like prometheus?
how do i make this a bit safer? currently it follows some pointers that other threads may update at some point, and that could explode when another thread frees the thing in question
should the API change? should the user be allowed to bitmask out stuff they want vs stuff they don't want?
is it acceptable for the contents of the results to change from version to version? should we warn users that they shouldn't rely on the output being compatible? add a version parameter for backwards compat? just yolo it?

One thing I'd like to see is how many major collections have been done so far, we don't count that yet. We have the number of gen2 roots in the profiler, but not yet here. Maybe that's interesting, too. In combination with the size buckets, it'd be pretty neat if you could query an object for what its size in the nursery/gen2 will be so you can correlate consumption of gen2 space with what objects are likely to be the cause.
Have at it!","For monitoring an application, I'd want to know things like

memory used
number of GC runs
number of active threads
number of waiting threads
some performance counters, like percentage of time spent in the GC so far.

And of course I'd want that to be a stable interface.
Now the question is, is that actually the use case you're going for? Or do you want to debug MoarVM internals?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,536,2017-02-12T16:32:52Z,,2017-02-20T18:11:38Z,OPEN,False,451,189,15,https://github.com/timo,vmhealth op that spits out some stats,9,[],https://github.com/MoarVM/MoarVM/pull/536,https://github.com/timo,3,https://github.com/MoarVM/MoarVM/pull/536#issuecomment-281147702,"i've implemented an op that you can use to query some random information about the state of the running MoarVM. Here's some example output:
:nursery_bytes((77568,))
:jitframes_produced(790)
:gc_seqnr(115)
:num_threads(1)
:gen2_pagecounts(((0, 0, 14, 843, 25, 207, 425, 4, 164, 5, 52, 2, 9, 45, 1, 1, 42, 1, 22, 3, 1, 0, 1, 0, 14, 0, 1, 0, 0, 1, 0, 0, 75, 23, 0, 0, 0, 0, 0, 0),))
:fsa_free_elems((82, 3, 50, 54, 106, 82, 105, 51, 117, 48, 53, 103, 0, 93, 119, 77, 111, 70, 65, 74, 119, 98, 122, 108, 120, 88, 115, 105, 107, 117, 125, 117, 123, 121, 121, 117, 125, 109, 126, 122, 125, 120, 127, 121, 125, 63, 126, 114, 117, 110, 124, 108, 119, 116, 115, 78, 124, 124, 127, 123, 115, 121, 123, 126, 126, 126, 123, 121, 127, 126, 114, 123, 122, 126, 118, 125, 125, 77, 120, 122, 123, 93, 124, 115, 119, 122, 123, 113, 118, 124, 125, 121, 124, 115, 126, 125))
:fsa_pagecounts((16, 8, 8, 10, 13, 800, 32, 20, 4, 5, 2, 2, 2, 1, 2, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
:gc_bytes_promoted_since_full(14900680)
:speshframes_produced(1111)
:gen2_free_elems(((0, 0, 7, 149, 224, 90, 94, 19, 241, 70, 216, 33, 110, 37, 50, 7, 238, 87, 220, 31, 1, 0, 47, 0, 68, 0, 4, 0, 0, 168, 0, 0, 99, 100, 0, 0, 0, 0, 0, 0),))

nursery_bytes gives the number of bytes in use in each thread
jitframes_produced spits out the jit sequence number
speshframes_produced spits out the spesh sequence number (same number that's used for the spesh limit)
gc_seqnr is basically the number of GC runs so far
num_threads is how many threads are currently in the ""started"" state
gc_bytes_promoted_since_full (a mouthful!) is how many bytes moar thinks have been promoted to gen2 since there last was a full collection,
gen2_pagecounts gives a list of gen2 pages allocated each size bucket for each thread
gen2_free_elems gives a list of how far the allocation pointer is from the allocation limit (in units) in each size class for every thread
fsa_pagecounts and fsa_free_elems works the same as gen2_*, but since the fsa is shared between threads, it just has one list where the others have one list per thread.

I'm opening this pull request for discussion. Especially:

What other stats would be interesting to probe regularly, for example in a monitoring system like prometheus?
how do i make this a bit safer? currently it follows some pointers that other threads may update at some point, and that could explode when another thread frees the thing in question
should the API change? should the user be allowed to bitmask out stuff they want vs stuff they don't want?
is it acceptable for the contents of the results to change from version to version? should we warn users that they shouldn't rely on the output being compatible? add a version parameter for backwards compat? just yolo it?

One thing I'd like to see is how many major collections have been done so far, we don't count that yet. We have the number of gen2 roots in the profiler, but not yet here. Maybe that's interesting, too. In combination with the size buckets, it'd be pretty neat if you could query an object for what its size in the nursery/gen2 will be so you can correlate consumption of gen2 space with what objects are likely to be the cause.
Have at it!","Here's an output of the current format with my shooter game (but it has a start { } at the beginning to force creation of a second thread)
:nursery_bytes((435736, 0))
:jitframes_produced(1035)
:gc_major_seqnr(1)
:gc_seqnr(5747)
:num_threads((0, 0, 0, 2, 0, 0, 0))
:gen2_pagecounts(((0, 0, 14, 954, 296, 275, 741, 10, 219, 6, 60, 4, 10, 49, 7, 1, 43, 1, 23, 3, 1, 0, 3, 0, 14, 0, 1, 0, 0, 1, 0, 0, 75, 82, 0, 0, 0, 0, 0, 0), (0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0)))
:fsa_free_elems((4, 75, 127, 49, 115, 60, 1, 74, 106, 53, 1, 105, 53, 59, 86, 45, 109, 72, 64, 62, 117, 97, 121, 106, 117, 84, 117, 108, 107, 117, 125, 103, 122, 120, 121, 117, 123, 109, 126, 122, 126, 116, 126, 121, 125, 58, 126, 111, 116, 109, 125, 107, 119, 116, 124, 122, 82, 125, 115, 117, 115, 122, 124, 126, 126, 126, 123, 121, 114, 126, 126, 124, 122, 126, 118, 125, 124, 122, 78, 122, 122, 93, 123, 115, 119, 122, 123, 113, 118, 124, 125, 121, 124, 115, 126, 122))
:fsa_pagecounts((15, 19, 31, 12, 13, 1133, 33, 33, 5, 14, 19, 4, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
:gc_bytes_promoted_since_full(261037)
:speshframes_produced(1389)
:gen2_free_elems(((0, 0, 36, 46, 109, 231, 196, 137, 44, 10, 230, 77, 186, 173, 184, 7, 171, 121, 52, 52, 101, 0, 91, 0, 95, 0, 4, 0, 0, 168, 0, 0, 198, 49, 0, 0, 0, 0, 0, 0), (0, 0, 1, 13, 4, 6, 47, 0, 65, 0, 0, 0, 0, 0, 0, 0, 29, 0, 10, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0)))
:gc_timings_minor(1867338)
:gc_timings_major(51076178)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,537,2017-02-14T05:07:59Z,2017-02-15T11:40:12Z,2017-02-15T13:06:08Z,MERGED,True,4,4,1,https://github.com/MasterDuke17,Minor optimization to MVM_string_indexing_optimized,1,[],https://github.com/MoarVM/MoarVM/pull/537,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/537,"NQP passes make m-test, Rakudo passes make m-spectest.","NQP passes make m-test, Rakudo passes make m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,539,2017-02-21T23:50:22Z,2017-02-22T10:42:50Z,2017-02-22T10:42:50Z,MERGED,True,3,9,1,https://github.com/samcv,Streamline some switches and try to suppress Coverity warnings,1,[],https://github.com/MoarVM/MoarVM/pull/539,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/539,"Streamline switches, try to suppress Coverity warnings in MVM_string_compute_hash_code","Streamline switches, try to suppress Coverity warnings in MVM_string_compute_hash_code",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,539,2017-02-21T23:50:22Z,2017-02-22T10:42:50Z,2017-02-22T10:42:50Z,MERGED,True,3,9,1,https://github.com/samcv,Streamline some switches and try to suppress Coverity warnings,1,[],https://github.com/MoarVM/MoarVM/pull/539,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/539#issuecomment-281633250,"Streamline switches, try to suppress Coverity warnings in MVM_string_compute_hash_code","Took me a bit to be comfortable with this, since it seems to flip the order we put stuff into the buffer for hashing. However, that appears not to matter since we add the bytes into the hash in the correct order.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,540,2017-02-23T19:38:45Z,2017-02-25T12:09:50Z,2017-02-25T12:09:50Z,MERGED,True,6,6,1,https://github.com/MasterDuke17,Change MVM_string_equal_at_ignore_case to use fc,1,[],https://github.com/MoarVM/MoarVM/pull/540,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/540,"NQP passes make m-test. Rakudo passes make m-spectest, with two todo's now passing.
t/spec/S05-modifier/ignorecase.rakudo.moar (Wstat: 0 Tests: 25 Failed: 0)
  TODO passed:   12-13","NQP passes make m-test. Rakudo passes make m-spectest, with two todo's now passing.
t/spec/S05-modifier/ignorecase.rakudo.moar (Wstat: 0 Tests: 25 Failed: 0)
  TODO passed:   12-13",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,540,2017-02-23T19:38:45Z,2017-02-25T12:09:50Z,2017-02-25T12:09:50Z,MERGED,True,6,6,1,https://github.com/MasterDuke17,Change MVM_string_equal_at_ignore_case to use fc,1,[],https://github.com/MoarVM/MoarVM/pull/540,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/540#issuecomment-282098087,"NQP passes make m-test. Rakudo passes make m-spectest, with two todo's now passing.
t/spec/S05-modifier/ignorecase.rakudo.moar (Wstat: 0 Tests: 25 Failed: 0)
  TODO passed:   12-13","Those todo's are marked RT #121377, https://rt.perl.org/Ticket/Display.html?id=121377, although that ticket has been marked as resolved.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,540,2017-02-23T19:38:45Z,2017-02-25T12:09:50Z,2017-02-25T12:09:50Z,MERGED,True,6,6,1,https://github.com/MasterDuke17,Change MVM_string_equal_at_ignore_case to use fc,1,[],https://github.com/MoarVM/MoarVM/pull/540,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/540#issuecomment-282166644,"NQP passes make m-test. Rakudo passes make m-spectest, with two todo's now passing.
t/spec/S05-modifier/ignorecase.rakudo.moar (Wstat: 0 Tests: 25 Failed: 0)
  TODO passed:   12-13",Awesome 😄,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,541,2017-02-24T14:33:03Z,2017-02-25T12:09:13Z,2017-02-25T12:09:13Z,MERGED,True,7,1,1,https://github.com/niner,Yet another attempt at silencing the pthread_yield warnings,1,[],https://github.com/MoarVM/MoarVM/pull/541,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/541,"According to commit d47dec1 sched_yield
should be used when _POSIX_PRIORITY_SCHEDULING is defined. We lost that
with commit ddb1bf9.
According to sched_yield(2) POSIX systems on which sched_yield() is
available define _POSIX_PRIORITY_SCHEDULING in <unistd.h>.
As src/platform/threads.h falls back to sched_yield if pthread_yield is
unavailable we sabotage pthread_yield detection if _POSIX_PRIORITY_SCHEDULING
is defined. I hope that this roundabout way has minimal impact on other
situations.","According to commit d47dec1 sched_yield
should be used when _POSIX_PRIORITY_SCHEDULING is defined. We lost that
with commit ddb1bf9.
According to sched_yield(2) POSIX systems on which sched_yield() is
available define _POSIX_PRIORITY_SCHEDULING in <unistd.h>.
As src/platform/threads.h falls back to sched_yield if pthread_yield is
unavailable we sabotage pthread_yield detection if _POSIX_PRIORITY_SCHEDULING
is defined. I hope that this roundabout way has minimal impact on other
situations.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,542,2017-02-25T15:12:11Z,2017-03-04T02:29:46Z,2017-03-04T02:29:46Z,CLOSED,False,2,2,2,https://github.com/MasterDuke17,Update libuv to v1.11.0,2,[],https://github.com/MoarVM/MoarVM/pull/542,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/542,"NQP builds and passes make m-test. Rakudo builds t/spec/S11-modules/nested.t didn't run during a make m-spectest, however I did a whole bunch (~500) of make t/spec/S11-modules/nested.t in a loop and they all passed.","NQP builds and passes make m-test. Rakudo builds t/spec/S11-modules/nested.t didn't run during a make m-spectest, however I did a whole bunch (~500) of make t/spec/S11-modules/nested.t in a loop and they all passed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,544,2017-03-04T13:49:09Z,2017-03-04T16:14:36Z,2017-03-04T16:14:36Z,MERGED,True,1,1,1,https://github.com/lucasbuchala,Reword exception message for read() outside original thread,1,[],https://github.com/MoarVM/MoarVM/pull/544,https://github.com/lucasbuchala,1,https://github.com/MoarVM/MoarVM/pull/544,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,546,2017-03-05T23:56:42Z,2017-03-08T22:34:48Z,2017-03-08T22:35:45Z,MERGED,True,17,1,1,https://github.com/MasterDuke17,Check result of repeat/concat fit in an MVMString,1,[],https://github.com/MoarVM/MoarVM/pull/546,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/546,"NQP passes make m-test and Rakudo passes make m-spectest.
Fixes https://rt.perl.org/Ticket/Display.html?id=127971","NQP passes make m-test and Rakudo passes make m-spectest.
Fixes https://rt.perl.org/Ticket/Display.html?id=127971",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,548,2017-03-08T21:37:49Z,2017-03-10T21:46:21Z,2017-03-10T21:46:21Z,MERGED,True,53,8,1,https://github.com/samcv,Fix string_equal_at_ignore_case when string `a` changes length,9,[],https://github.com/MoarVM/MoarVM/pull/548,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/548,"This makes nqp tests using nqp::eqatic that will soon to be in the nqp
repo pass.","This makes nqp tests using nqp::eqatic that will soon to be in the nqp
repo pass.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,548,2017-03-08T21:37:49Z,2017-03-10T21:46:21Z,2017-03-10T21:46:21Z,MERGED,True,53,8,1,https://github.com/samcv,Fix string_equal_at_ignore_case when string `a` changes length,9,[],https://github.com/MoarVM/MoarVM/pull/548,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/548#issuecomment-285227166,"This makes nqp tests using nqp::eqatic that will soon to be in the nqp
repo pass.","Found a major flaw, since I compare the string to find where they changed case, if there's a capital letter before the special character then it completely misses it.
I am working on writing new code that will only fold case from the offset, instead of the entire string, which will avoid this issue.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,548,2017-03-08T21:37:49Z,2017-03-10T21:46:21Z,2017-03-10T21:46:21Z,MERGED,True,53,8,1,https://github.com/samcv,Fix string_equal_at_ignore_case when string `a` changes length,9,[],https://github.com/MoarVM/MoarVM/pull/548,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/548#issuecomment-285589282,"This makes nqp tests using nqp::eqatic that will soon to be in the nqp
repo pass.",Version 2.0 is done and pushed to my repo. Full spectest pass. @jnthn let me know if it is fine and if so I will squash it a bit and then merge. Thanks :),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,550,2017-03-14T13:24:26Z,2017-03-15T21:20:03Z,2017-03-15T21:20:03Z,MERGED,True,231,171,8,https://github.com/samcv,Add case insensitive string index op indexic_s,5,[],https://github.com/MoarVM/MoarVM/pull/550,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/550,"And corresponding MVM C function MVM_string_index_ignore_case.
For now, calls MVM_string_equal_at_ignore_case along the string, which ends up with the needle being foldcased each time.","And corresponding MVM C function MVM_string_index_ignore_case.
For now, calls MVM_string_equal_at_ignore_case along the string, which ends up with the needle being foldcased each time.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,550,2017-03-14T13:24:26Z,2017-03-15T21:20:03Z,2017-03-15T21:20:03Z,MERGED,True,231,171,8,https://github.com/samcv,Add case insensitive string index op indexic_s,5,[],https://github.com/MoarVM/MoarVM/pull/550,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/550#issuecomment-286882931,"And corresponding MVM C function MVM_string_index_ignore_case.
For now, calls MVM_string_equal_at_ignore_case along the string, which ends up with the needle being foldcased each time.","The one Travis failure was just a connection error, so all goods good.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,551,2017-03-14T17:31:06Z,2017-03-23T10:26:07Z,2017-03-24T01:29:46Z,MERGED,True,27,0,1,https://github.com/MasterDuke17,Shorten the nursery when creating large bigints,5,[],https://github.com/MoarVM/MoarVM/pull/551,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/551,"A bigint takes only very little space in the nursery, but it can hold
onto a large buffer. When creating a bigint that's larger than a native,
decrease the nursery_alloc_limit if possible. The decreased nursery
means a garbage collection will happen sooner, cleaning up any unused
bigints and their buffers.
An initial stab at MoarVM issue #545 and RT #126450.
NQP passes make m-test and Rakudo passes make m-spectest.
For this code my ($x,$y,$i) = (0,1,1); while ($i < 200000) {$y += $x ; $x = $y - $x ; $i += 1 } ; say $y;, /usr/bin/time reports:
1129284maxresident - before
844512maxresident - after","A bigint takes only very little space in the nursery, but it can hold
onto a large buffer. When creating a bigint that's larger than a native,
decrease the nursery_alloc_limit if possible. The decreased nursery
means a garbage collection will happen sooner, cleaning up any unused
bigints and their buffers.
An initial stab at MoarVM issue #545 and RT #126450.
NQP passes make m-test and Rakudo passes make m-spectest.
For this code my ($x,$y,$i) = (0,1,1); while ($i < 200000) {$y += $x ; $x = $y - $x ; $i += 1 } ; say $y;, /usr/bin/time reports:
1129284maxresident - before
844512maxresident - after",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,551,2017-03-14T17:31:06Z,2017-03-23T10:26:07Z,2017-03-24T01:29:46Z,MERGED,True,27,0,1,https://github.com/MasterDuke17,Shorten the nursery when creating large bigints,5,[],https://github.com/MoarVM/MoarVM/pull/551,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/551#issuecomment-286574893,"A bigint takes only very little space in the nursery, but it can hold
onto a large buffer. When creating a bigint that's larger than a native,
decrease the nursery_alloc_limit if possible. The decreased nursery
means a garbage collection will happen sooner, cleaning up any unused
bigints and their buffers.
An initial stab at MoarVM issue #545 and RT #126450.
NQP passes make m-test and Rakudo passes make m-spectest.
For this code my ($x,$y,$i) = (0,1,1); while ($i < 200000) {$y += $x ; $x = $y - $x ; $i += 1 } ; say $y;, /usr/bin/time reports:
1129284maxresident - before
844512maxresident - after","108668maxresident now. Also, total run time is the same, but the original code did 6 GCs in 82ms, the new code does 114 GCs in 185ms.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,551,2017-03-14T17:31:06Z,2017-03-23T10:26:07Z,2017-03-24T01:29:46Z,MERGED,True,27,0,1,https://github.com/MasterDuke17,Shorten the nursery when creating large bigints,5,[],https://github.com/MoarVM/MoarVM/pull/551,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/551#issuecomment-288676716,"A bigint takes only very little space in the nursery, but it can hold
onto a large buffer. When creating a bigint that's larger than a native,
decrease the nursery_alloc_limit if possible. The decreased nursery
means a garbage collection will happen sooner, cleaning up any unused
bigints and their buffers.
An initial stab at MoarVM issue #545 and RT #126450.
NQP passes make m-test and Rakudo passes make m-spectest.
For this code my ($x,$y,$i) = (0,1,1); while ($i < 200000) {$y += $x ; $x = $y - $x ; $i += 1 } ; say $y;, /usr/bin/time reports:
1129284maxresident - before
844512maxresident - after",Looks good to me now; thanks! :-),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,553,2017-03-14T20:08:30Z,2017-03-14T20:18:43Z,2017-03-14T20:18:43Z,MERGED,True,1,1,1,https://github.com/perlpilot,Use HTTPS protocol for fetching libtommath,1,[],https://github.com/MoarVM/MoarVM/pull/553,https://github.com/perlpilot,1,https://github.com/MoarVM/MoarVM/pull/553,"Some organizations won't allow the git protocol, but will allow https.","Some organizations won't allow the git protocol, but will allow https.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,555,2017-03-17T22:33:10Z,2017-03-22T21:32:14Z,2017-03-22T21:32:14Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Use correct format for repeat/concat errors,1,[],https://github.com/MoarVM/MoarVM/pull/555,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/555,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,556,2017-03-19T01:07:32Z,2017-03-19T07:27:50Z,2017-03-19T11:03:27Z,MERGED,True,7,4,1,https://github.com/MasterDuke17,"Special case ""\r\n"" in MVM_nfg_is_concat_stable",1,[],https://github.com/MoarVM/MoarVM/pull/556,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/556,"""\r\n"" can never combine with anything else, so we can special-case it
in the check whether the relevant graphemes are synthetic.
NQP passes make m-test and Rakudo passes make m-spectest.","""\r\n"" can never combine with anything else, so we can special-case it
in the check whether the relevant graphemes are synthetic.
NQP passes make m-test and Rakudo passes make m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,556,2017-03-19T01:07:32Z,2017-03-19T07:27:50Z,2017-03-19T11:03:27Z,MERGED,True,7,4,1,https://github.com/MasterDuke17,"Special case ""\r\n"" in MVM_nfg_is_concat_stable",1,[],https://github.com/MoarVM/MoarVM/pull/556,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/556#issuecomment-287588861,"""\r\n"" can never combine with anything else, so we can special-case it
in the check whether the relevant graphemes are synthetic.
NQP passes make m-test and Rakudo passes make m-spectest.","I'm probably going to change a lot of this section to more narrowly decide if normalization is needed;  but this change seems like it may be fine because of it being a possibly very common case.
How does this improve speed/memory with that JSON file?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,556,2017-03-19T01:07:32Z,2017-03-19T07:27:50Z,2017-03-19T11:03:27Z,MERGED,True,7,4,1,https://github.com/MasterDuke17,"Special case ""\r\n"" in MVM_nfg_is_concat_stable",1,[],https://github.com/MoarVM/MoarVM/pull/556,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/556#issuecomment-287588989,"""\r\n"" can never combine with anything else, so we can special-case it
in the check whether the relevant graphemes are synthetic.
NQP passes make m-test and Rakudo passes make m-spectest.",".5s faster, .4g less ram
…
 On Mar 18, 2017, at 10:09 PM, Samantha McVey ***@***.***> wrote:

 I'm probably going to change a lot of this section to more narrowly decide if normalization is needed; but this change seems like it may be fine because of it being a possibly very common case.

 How does this improve speed/memory with that JSON file?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,556,2017-03-19T01:07:32Z,2017-03-19T07:27:50Z,2017-03-19T11:03:27Z,MERGED,True,7,4,1,https://github.com/MasterDuke17,"Special case ""\r\n"" in MVM_nfg_is_concat_stable",1,[],https://github.com/MoarVM/MoarVM/pull/556,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/556#issuecomment-287589946,"""\r\n"" can never combine with anything else, so we can special-case it
in the check whether the relevant graphemes are synthetic.
NQP passes make m-test and Rakudo passes make m-spectest.","I'm probably going to change a lot of this section to more narrowly decide if normalization is needed;  but this change seems like it may be fine because of it be.  .x.   ing a possibly very common case.
How does this improve speed/memory with that JSON file?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,557,2017-03-19T19:18:21Z,2017-03-24T23:14:37Z,2017-03-25T03:28:02Z,MERGED,True,30,21,1,https://github.com/MasterDuke17,Correctly detect+handle overflow in mp_get_int64,3,[],https://github.com/MoarVM/MoarVM/pull/557,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/557,"Handles the fact that for 64-bit 2's complement numbers the maximum
positive value is 2**63 - 1, but the maximum negative value is 2**63.
Uses the mp_get_long_long now available with the newer version of
libtommath. Also, instead of counting the bits every time, only do it
during the too-large-value error path.
Fixes issue #513. NQP passes make m-test and Rakudo passes make m-spectest, with two todo's now passing in t/spec/S02-types/int-uint.t and one todo now passing in t/spec/S03-operators/repeat.t.","Handles the fact that for 64-bit 2's complement numbers the maximum
positive value is 2**63 - 1, but the maximum negative value is 2**63.
Uses the mp_get_long_long now available with the newer version of
libtommath. Also, instead of counting the bits every time, only do it
during the too-large-value error path.
Fixes issue #513. NQP passes make m-test and Rakudo passes make m-spectest, with two todo's now passing in t/spec/S02-types/int-uint.t and one todo now passing in t/spec/S03-operators/repeat.t.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,557,2017-03-19T19:18:21Z,2017-03-24T23:14:37Z,2017-03-25T03:28:02Z,MERGED,True,30,21,1,https://github.com/MasterDuke17,Correctly detect+handle overflow in mp_get_int64,3,[],https://github.com/MoarVM/MoarVM/pull/557,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/557#issuecomment-287659446,"Handles the fact that for 64-bit 2's complement numbers the maximum
positive value is 2**63 - 1, but the maximum negative value is 2**63.
Uses the mp_get_long_long now available with the newer version of
libtommath. Also, instead of counting the bits every time, only do it
during the too-large-value error path.
Fixes issue #513. NQP passes make m-test and Rakudo passes make m-spectest, with two todo's now passing in t/spec/S02-types/int-uint.t and one todo now passing in t/spec/S03-operators/repeat.t.","loop (my int $i = 1; $i <= 10_000_000; $i = $i + 1) {
    my uint64 $a = 2**64-1; my int64 $b = 2**62; my int64 $c = -2**63
}
say now - INIT now

reported an average of about 3.5s before, 3.4s after",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,557,2017-03-19T19:18:21Z,2017-03-24T23:14:37Z,2017-03-25T03:28:02Z,MERGED,True,30,21,1,https://github.com/MasterDuke17,Correctly detect+handle overflow in mp_get_int64,3,[],https://github.com/MoarVM/MoarVM/pull/557,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/557#issuecomment-289162111,"Handles the fact that for 64-bit 2's complement numbers the maximum
positive value is 2**63 - 1, but the maximum negative value is 2**63.
Uses the mp_get_long_long now available with the newer version of
libtommath. Also, instead of counting the bits every time, only do it
during the too-large-value error path.
Fixes issue #513. NQP passes make m-test and Rakudo passes make m-spectest, with two todo's now passing in t/spec/S02-types/int-uint.t and one todo now passing in t/spec/S03-operators/repeat.t.","NQP and Rakudo still pass their respective tests, with two todo's now passing in t/spec/S02-types/int-uint.t and one todo now passing in t/spec/S03-operators/repeat.t.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,558,2017-03-22T04:52:34Z,2017-03-22T07:20:34Z,2017-03-22T07:20:34Z,MERGED,True,15,6,1,https://github.com/samcv,Optimize MVM_nfg_is_concat_stable to speed up concatenation of strings,1,[],https://github.com/MoarVM/MoarVM/pull/558,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/558,"Here we special case '\r' ~ '\n' to ensure it will be normalized, since
it is a common possible case.
All other characters that have Grapheme_Cluster_Break=Control will
always break and do not change under normalization.
This speeds up concatenation greatly in a testcase with JSON::Fast
processing a file with all \r\n line endings. This speeds up JSON
parsing 39%, so the savings to the concatenation function itself are likely
greatly in excess of that for concatenation of strings whose borders
may be control characters.","Here we special case '\r' ~ '\n' to ensure it will be normalized, since
it is a common possible case.
All other characters that have Grapheme_Cluster_Break=Control will
always break and do not change under normalization.
This speeds up concatenation greatly in a testcase with JSON::Fast
processing a file with all \r\n line endings. This speeds up JSON
parsing 39%, so the savings to the concatenation function itself are likely
greatly in excess of that for concatenation of strings whose borders
may be control characters.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,558,2017-03-22T04:52:34Z,2017-03-22T07:20:34Z,2017-03-22T07:20:34Z,MERGED,True,15,6,1,https://github.com/samcv,Optimize MVM_nfg_is_concat_stable to speed up concatenation of strings,1,[],https://github.com/MoarVM/MoarVM/pull/558,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/558#issuecomment-288317937,"Here we special case '\r' ~ '\n' to ensure it will be normalized, since
it is a common possible case.
All other characters that have Grapheme_Cluster_Break=Control will
always break and do not change under normalization.
This speeds up concatenation greatly in a testcase with JSON::Fast
processing a file with all \r\n line endings. This speeds up JSON
parsing 39%, so the savings to the concatenation function itself are likely
greatly in excess of that for concatenation of strings whose borders
may be control characters.",Happy with this. Going to merge.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,559,2017-03-22T20:41:48Z,2017-03-22T21:53:58Z,2017-03-22T21:53:58Z,MERGED,True,6,7,1,https://github.com/samcv,Optimize passes_quickcheck_and_zero_ccc to be much faster,1,[],https://github.com/MoarVM/MoarVM/pull/559,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/559,"Use MVM_unicode_codepoint_get_property_int instead of
MVM_unicode_codepoint_get_property_str and simplify it as well.","Use MVM_unicode_codepoint_get_property_int instead of
MVM_unicode_codepoint_get_property_str and simplify it as well.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,563,2017-03-25T12:14:49Z,2017-03-28T07:47:11Z,2017-03-28T07:47:11Z,MERGED,True,22,6,3,https://github.com/samcv,UTF-8 Provide a better error when failing to encode surrogates or out of bounds characters,2,[],https://github.com/MoarVM/MoarVM/pull/563,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/563,"Check the general category is ""Cs"" (Control, Surrogates) and if so show
a more useful error message.
Share the exception code between both utf8 and utf8-c8
Have a new function MVM_exception_throw_utf8 so code does not have to
be repeated between utf8.c and utf8_c8.c implementations.
In addition add a seperate exception message if the codepoint that
is attempted to be encoded is > 0x10FFFF which is the legal limit for
UTF8
Roast has a test todo'd for RT #124834","Check the general category is ""Cs"" (Control, Surrogates) and if so show
a more useful error message.
Share the exception code between both utf8 and utf8-c8
Have a new function MVM_exception_throw_utf8 so code does not have to
be repeated between utf8.c and utf8_c8.c implementations.
In addition add a seperate exception message if the codepoint that
is attempted to be encoded is > 0x10FFFF which is the legal limit for
UTF8
Roast has a test todo'd for RT #124834",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,563,2017-03-25T12:14:49Z,2017-03-28T07:47:11Z,2017-03-28T07:47:11Z,MERGED,True,22,6,3,https://github.com/samcv,UTF-8 Provide a better error when failing to encode surrogates or out of bounds characters,2,[],https://github.com/MoarVM/MoarVM/pull/563,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/563#issuecomment-289311726,"Check the general category is ""Cs"" (Control, Surrogates) and if so show
a more useful error message.
Share the exception code between both utf8 and utf8-c8
Have a new function MVM_exception_throw_utf8 so code does not have to
be repeated between utf8.c and utf8_c8.c implementations.
In addition add a seperate exception message if the codepoint that
is attempted to be encoded is > 0x10FFFF which is the legal limit for
UTF8
Roast has a test todo'd for RT #124834",@jnthn what are your thoughts on this?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,563,2017-03-25T12:14:49Z,2017-03-28T07:47:11Z,2017-03-28T07:47:11Z,MERGED,True,22,6,3,https://github.com/samcv,UTF-8 Provide a better error when failing to encode surrogates or out of bounds characters,2,[],https://github.com/MoarVM/MoarVM/pull/563,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/563#issuecomment-289690593,"Check the general category is ""Cs"" (Control, Surrogates) and if so show
a more useful error message.
Share the exception code between both utf8 and utf8-c8
Have a new function MVM_exception_throw_utf8 so code does not have to
be repeated between utf8.c and utf8_c8.c implementations.
In addition add a seperate exception message if the codepoint that
is attempted to be encoded is > 0x10FFFF which is the legal limit for
UTF8
Roast has a test todo'd for RT #124834",Merging.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,564,2017-03-27T15:06:15Z,2017-03-27T15:11:17Z,2017-03-27T15:11:17Z,CLOSED,False,1818,11911,223,https://github.com/zoffixznet,Fix breakage due to new ops,116,[],https://github.com/MoarVM/MoarVM/pull/564,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/564,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,565,2017-03-28T04:52:57Z,2017-03-29T23:04:01Z,2017-03-29T23:04:01Z,MERGED,True,54,48,1,https://github.com/samcv,Refactor eqatic and indexic and make Perl 6 :i regex 1.8x faster,6,[],https://github.com/MoarVM/MoarVM/pull/565,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/565,"1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.","1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,565,2017-03-28T04:52:57Z,2017-03-29T23:04:01Z,2017-03-29T23:04:01Z,MERGED,True,54,48,1,https://github.com/samcv,Refactor eqatic and indexic and make Perl 6 :i regex 1.8x faster,6,[],https://github.com/MoarVM/MoarVM/pull/565,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/565#issuecomment-289684042,"1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.",@zhuomingliang made those two changes. Otherwise does it seem to be good? I have full spectest passing + some todo.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,565,2017-03-28T04:52:57Z,2017-03-29T23:04:01Z,2017-03-29T23:04:01Z,MERGED,True,54,48,1,https://github.com/samcv,Refactor eqatic and indexic and make Perl 6 :i regex 1.8x faster,6,[],https://github.com/MoarVM/MoarVM/pull/565,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/565#issuecomment-289690176,"1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.",@zhuomingliang Looks like the change of removing the MVMROOT caused all the indexic tests to fail. Removing it and putting that back the way it was.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,565,2017-03-28T04:52:57Z,2017-03-29T23:04:01Z,2017-03-29T23:04:01Z,MERGED,True,54,48,1,https://github.com/samcv,Refactor eqatic and indexic and make Perl 6 :i regex 1.8x faster,6,[],https://github.com/MoarVM/MoarVM/pull/565,https://github.com/zhuomingliang,4,https://github.com/MoarVM/MoarVM/pull/565#issuecomment-289708927,"1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.","@samcv It should looks like
    MVMROOT(tc, haystack, {
            needle_fc = MVM_string_fc(tc, needle);
    });",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,565,2017-03-28T04:52:57Z,2017-03-29T23:04:01Z,2017-03-29T23:04:01Z,MERGED,True,54,48,1,https://github.com/samcv,Refactor eqatic and indexic and make Perl 6 :i regex 1.8x faster,6,[],https://github.com/MoarVM/MoarVM/pull/565,https://github.com/samcv,5,https://github.com/MoarVM/MoarVM/pull/565#issuecomment-289880247,"1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.","@zhuomingliang yes,that is what I tried but then most of the tests failed which use these functions.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,565,2017-03-28T04:52:57Z,2017-03-29T23:04:01Z,2017-03-29T23:04:01Z,MERGED,True,54,48,1,https://github.com/samcv,Refactor eqatic and indexic and make Perl 6 :i regex 1.8x faster,6,[],https://github.com/MoarVM/MoarVM/pull/565,https://github.com/samcv,6,https://github.com/MoarVM/MoarVM/pull/565#issuecomment-289881527,"1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.","Trying again. Seems to be passing NQP tests, going to make sure it passes roast too.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,565,2017-03-28T04:52:57Z,2017-03-29T23:04:01Z,2017-03-29T23:04:01Z,MERGED,True,54,48,1,https://github.com/samcv,Refactor eqatic and indexic and make Perl 6 :i regex 1.8x faster,6,[],https://github.com/MoarVM/MoarVM/pull/565,https://github.com/samcv,7,https://github.com/MoarVM/MoarVM/pull/565#issuecomment-289887529,"1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.",Got passing on roast. just going to wait for Travis to check,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,565,2017-03-28T04:52:57Z,2017-03-29T23:04:01Z,2017-03-29T23:04:01Z,MERGED,True,54,48,1,https://github.com/samcv,Refactor eqatic and indexic and make Perl 6 :i regex 1.8x faster,6,[],https://github.com/MoarVM/MoarVM/pull/565,https://github.com/samcv,8,https://github.com/MoarVM/MoarVM/pull/565#issuecomment-289992054,"1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.",Got spectest pass. Any other concerns @zhuomingliang ? I also removed a couple of unused variables that were left over from the refactor.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,565,2017-03-28T04:52:57Z,2017-03-29T23:04:01Z,2017-03-29T23:04:01Z,MERGED,True,54,48,1,https://github.com/samcv,Refactor eqatic and indexic and make Perl 6 :i regex 1.8x faster,6,[],https://github.com/MoarVM/MoarVM/pull/565,https://github.com/zhuomingliang,9,https://github.com/MoarVM/MoarVM/pull/565#issuecomment-290091667,"1.8x factor is dependent on not yet merged nqp code where it switches
MVM to use indexic instead of index + fc for locating sections of a string.
MVM_string_equal_at_ignore_case_INTERNAL_loop is the internal loop that
will be used be MVM_string_index_ignore_case. This will allow sharing
code between MVM_string_index_ignore_case and
MVM_string_equal_at_ignore_case and prevent the index function from getting
too messy.",@samcv No other concerns from me now. 👍,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,567,2017-03-28T22:20:03Z,2017-03-29T18:55:19Z,2017-03-29T18:55:36Z,CLOSED,False,48,17,10,https://github.com/samcv,Use PRIu64 in fprintf's to fix compiler warning RE incorrect types,12,[],https://github.com/MoarVM/MoarVM/pull/567,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/567,"PR just to get Travis CI to run, will commit directly if all is fine.","PR just to get Travis CI to run, will commit directly if all is fine.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,567,2017-03-28T22:20:03Z,2017-03-29T18:55:19Z,2017-03-29T18:55:36Z,CLOSED,False,48,17,10,https://github.com/samcv,Use PRIu64 in fprintf's to fix compiler warning RE incorrect types,12,[],https://github.com/MoarVM/MoarVM/pull/567,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/567#issuecomment-290190282,"PR just to get Travis CI to run, will commit directly if all is fine.",Reopening a new one with extraneous commits removed,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,568,2017-03-29T00:20:40Z,2017-03-29T19:21:33Z,2017-03-30T03:40:46Z,MERGED,True,2,1,1,https://github.com/MasterDuke17,Add a check that introspection->is_tty is not NULL,1,[],https://github.com/MoarVM/MoarVM/pull/568,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/568,"Since it is for pipes. Fixes MoarVM issue #561
perl6 -e 'run(:out, ""bash"").out.t.say' now returns False.
NQP passes make m-test and Rakudo passes make m-spectest.","Since it is for pipes. Fixes MoarVM issue #561
perl6 -e 'run(:out, ""bash"").out.t.say' now returns False.
NQP passes make m-test and Rakudo passes make m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,568,2017-03-29T00:20:40Z,2017-03-29T19:21:33Z,2017-03-30T03:40:46Z,MERGED,True,2,1,1,https://github.com/MasterDuke17,Add a check that introspection->is_tty is not NULL,1,[],https://github.com/MoarVM/MoarVM/pull/568,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/568#issuecomment-290197481,"Since it is for pipes. Fixes MoarVM issue #561
perl6 -e 'run(:out, ""bash"").out.t.say' now returns False.
NQP passes make m-test and Rakudo passes make m-spectest.","It mighta been easier to just implement it on pipes. On the other hand, I/O will no doubt be in for a notable refactor when we move synchronous I/O away from libuv, so will just merge this.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,568,2017-03-29T00:20:40Z,2017-03-29T19:21:33Z,2017-03-30T03:40:46Z,MERGED,True,2,1,1,https://github.com/MasterDuke17,Add a check that introspection->is_tty is not NULL,1,[],https://github.com/MoarVM/MoarVM/pull/568,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/568#issuecomment-290293697,"Since it is for pipes. Fixes MoarVM issue #561
perl6 -e 'run(:out, ""bash"").out.t.say' now returns False.
NQP passes make m-test and Rakudo passes make m-spectest.","I meant to include this in the first comment, but here's some discussion with @timo and geekosaur about that very idea (implementing for pipes vs the check in this PR) https://irclog.perlgeek.de/moarvm/2017-03-28#i_14340977",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,569,2017-03-29T18:57:01Z,2017-03-29T21:37:17Z,2017-03-29T21:37:17Z,MERGED,True,17,17,9,https://github.com/samcv,Fix Various Compiler Warnings,7,[],https://github.com/MoarVM/MoarVM/pull/569,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/569,"Explicitly cast as (const MVMuint*) in utf8_c8.c
Fix another compiler warning in src/moar.c
Make if statement in adjust_nursery() more readable
Fix warning in VMArray.c
Fix compiler warnings using PRIu64 for three more files
Fix compiler warnings from moar.c and heapsnapshot.c (PRIu64)
Use PRIu64 in fprintf's to fix compiler warning RE incorrect types","Explicitly cast as (const MVMuint*) in utf8_c8.c
Fix another compiler warning in src/moar.c
Make if statement in adjust_nursery() more readable
Fix warning in VMArray.c
Fix compiler warnings using PRIu64 for three more files
Fix compiler warnings from moar.c and heapsnapshot.c (PRIu64)
Use PRIu64 in fprintf's to fix compiler warning RE incorrect types",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,570,2017-03-30T22:53:19Z,2017-04-09T14:27:06Z,2017-04-09T15:52:10Z,MERGED,True,115,156,1,https://github.com/zoffixznet,Fix coverage parser,1,[],https://github.com/MoarVM/MoarVM/pull/570,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/570,"Updates the parser to handle our new SETTING::src/core format.
https://perl6.wtf/ has the HTML generated using this new version","Updates the parser to handle our new SETTING::src/core format.
https://perl6.wtf/ has the HTML generated using this new version",True,"{'HOORAY': ['https://github.com/MasterDuke17', 'https://github.com/timo']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,573,2017-04-06T23:58:11Z,2017-04-09T03:51:09Z,2017-04-09T03:51:09Z,MERGED,True,10,7,1,https://github.com/samcv,Have two part loop in collapse strands to make loop tighter when possible,1,[],https://github.com/MoarVM/MoarVM/pull/573,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/573,"If we find out that we can't fit a string into 8 bits, we don't need to check
anymore whether or not subsequent characters are > 127 or < -127.
cygx++ for the suggestion
Also eliminates the can_use_8bit variable","If we find out that we can't fit a string into 8 bits, we don't need to check
anymore whether or not subsequent characters are > 127 or < -127.
cygx++ for the suggestion
Also eliminates the can_use_8bit variable",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,574,2017-04-07T01:56:21Z,2017-04-09T06:54:09Z,2017-04-11T06:51:52Z,MERGED,True,249,2,4,https://github.com/samcv,Use memmem in string index. Uses Knuth-Morris-Pratt on glibc 2.2x+ faster,10,[],https://github.com/MoarVM/MoarVM/pull/574,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/574,"Update:
All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
FreeBSD's memmem is included in 3rdparty/freebsd/memmem.c and the #ifdef's and new MVM_memmem function are in src/platform/memmem.h.
Comments within the code explain this as well. :-)

Opening this Pull Request to allow for comments. In perl 6 matching in regex becomes
2.2x faster (in case needle is at very end of string). It is likely that the
index operation itself is slightly faster than that.
On MacOS memmem does not use Knuth-Morris-Pratt algorithm, and just searches in a standard
way. We should get some benchmarks on MacOS and see how they compare.
It may be beneficial to (eventually) put parts of glibc in 3rdparty or somehow incorporate the code
for memmem() so we can use it on MacOS and Windows as well.
Even better would be to adapt the code to make a memmem that can skip a specified number of bytes,
so we can index 32bit strings faster. Although unlikely, at the moment it just panics if it gets back
and pointer that isn't along the boundaries of a 32bit integer. Preliminary plan is to run memmem from
from the returned pointer to continue searching inside the string in the rare (but possible) chance this
were to occur.

Windows now uses FreeBSD's memmem implementation, and has been tested with nqp test suite on Windows

Feedback requested :-)
P.S. glibc-2.8 was released in 2008-04-12, previous to this it did not use a special algorithm but should still work fine with 2.1 or newer (1999-02-03)","Update:
All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
FreeBSD's memmem is included in 3rdparty/freebsd/memmem.c and the #ifdef's and new MVM_memmem function are in src/platform/memmem.h.
Comments within the code explain this as well. :-)

Opening this Pull Request to allow for comments. In perl 6 matching in regex becomes
2.2x faster (in case needle is at very end of string). It is likely that the
index operation itself is slightly faster than that.
On MacOS memmem does not use Knuth-Morris-Pratt algorithm, and just searches in a standard
way. We should get some benchmarks on MacOS and see how they compare.
It may be beneficial to (eventually) put parts of glibc in 3rdparty or somehow incorporate the code
for memmem() so we can use it on MacOS and Windows as well.
Even better would be to adapt the code to make a memmem that can skip a specified number of bytes,
so we can index 32bit strings faster. Although unlikely, at the moment it just panics if it gets back
and pointer that isn't along the boundaries of a 32bit integer. Preliminary plan is to run memmem from
from the returned pointer to continue searching inside the string in the rare (but possible) chance this
were to occur.

Windows now uses FreeBSD's memmem implementation, and has been tested with nqp test suite on Windows

Feedback requested :-)
P.S. glibc-2.8 was released in 2008-04-12, previous to this it did not use a special algorithm but should still work fine with 2.1 or newer (1999-02-03)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,574,2017-04-07T01:56:21Z,2017-04-09T06:54:09Z,2017-04-11T06:51:52Z,MERGED,True,249,2,4,https://github.com/samcv,Use memmem in string index. Uses Knuth-Morris-Pratt on glibc 2.2x+ faster,10,[],https://github.com/MoarVM/MoarVM/pull/574,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/574#issuecomment-292464575,"Update:
All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
FreeBSD's memmem is included in 3rdparty/freebsd/memmem.c and the #ifdef's and new MVM_memmem function are in src/platform/memmem.h.
Comments within the code explain this as well. :-)

Opening this Pull Request to allow for comments. In perl 6 matching in regex becomes
2.2x faster (in case needle is at very end of string). It is likely that the
index operation itself is slightly faster than that.
On MacOS memmem does not use Knuth-Morris-Pratt algorithm, and just searches in a standard
way. We should get some benchmarks on MacOS and see how they compare.
It may be beneficial to (eventually) put parts of glibc in 3rdparty or somehow incorporate the code
for memmem() so we can use it on MacOS and Windows as well.
Even better would be to adapt the code to make a memmem that can skip a specified number of bytes,
so we can index 32bit strings faster. Although unlikely, at the moment it just panics if it gets back
and pointer that isn't along the boundaries of a 32bit integer. Preliminary plan is to run memmem from
from the returned pointer to continue searching inside the string in the rare (but possible) chance this
were to occur.

Windows now uses FreeBSD's memmem implementation, and has been tested with nqp test suite on Windows

Feedback requested :-)
P.S. glibc-2.8 was released in 2008-04-12, previous to this it did not use a special algorithm but should still work fine with 2.1 or newer (1999-02-03)","Very good find, nice work, but cannot be merged as is.

memmem is not available on windows, and so we need to either wrap this code path in an ifdef, or implement a wrapper
it throws on finding a match in the non-32 bit index, and obviously that isn't really an error; it should continue at the next boundary (memmem finds the first match, so there is no earlier match at a boundary; this can be skipped if the remainder is less than the length of the short string). So this needs to be converted to a loop.
personally, i'd write the boundary check as (((char*) foo) - ((char*) bar) & 3) == 0; the compiler will probably do the same as an optimization, but still.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,574,2017-04-07T01:56:21Z,2017-04-09T06:54:09Z,2017-04-11T06:51:52Z,MERGED,True,249,2,4,https://github.com/samcv,Use memmem in string index. Uses Knuth-Morris-Pratt on glibc 2.2x+ faster,10,[],https://github.com/MoarVM/MoarVM/pull/574,https://github.com/bdw,3,https://github.com/MoarVM/MoarVM/pull/574#issuecomment-292465625,"Update:
All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
FreeBSD's memmem is included in 3rdparty/freebsd/memmem.c and the #ifdef's and new MVM_memmem function are in src/platform/memmem.h.
Comments within the code explain this as well. :-)

Opening this Pull Request to allow for comments. In perl 6 matching in regex becomes
2.2x faster (in case needle is at very end of string). It is likely that the
index operation itself is slightly faster than that.
On MacOS memmem does not use Knuth-Morris-Pratt algorithm, and just searches in a standard
way. We should get some benchmarks on MacOS and see how they compare.
It may be beneficial to (eventually) put parts of glibc in 3rdparty or somehow incorporate the code
for memmem() so we can use it on MacOS and Windows as well.
Even better would be to adapt the code to make a memmem that can skip a specified number of bytes,
so we can index 32bit strings faster. Although unlikely, at the moment it just panics if it gets back
and pointer that isn't along the boundaries of a 32bit integer. Preliminary plan is to run memmem from
from the returned pointer to continue searching inside the string in the rare (but possible) chance this
were to occur.

Windows now uses FreeBSD's memmem implementation, and has been tested with nqp test suite on Windows

Feedback requested :-)
P.S. glibc-2.8 was released in 2008-04-12, previous to this it did not use a special algorithm but should still work fine with 2.1 or newer (1999-02-03)","Note that for a wrapper, you could fallback to memchr + memcmp and a boundary check, which are C standard library functions.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,574,2017-04-07T01:56:21Z,2017-04-09T06:54:09Z,2017-04-11T06:51:52Z,MERGED,True,249,2,4,https://github.com/samcv,Use memmem in string index. Uses Knuth-Morris-Pratt on glibc 2.2x+ faster,10,[],https://github.com/MoarVM/MoarVM/pull/574,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/574#issuecomment-292465995,"Update:
All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
FreeBSD's memmem is included in 3rdparty/freebsd/memmem.c and the #ifdef's and new MVM_memmem function are in src/platform/memmem.h.
Comments within the code explain this as well. :-)

Opening this Pull Request to allow for comments. In perl 6 matching in regex becomes
2.2x faster (in case needle is at very end of string). It is likely that the
index operation itself is slightly faster than that.
On MacOS memmem does not use Knuth-Morris-Pratt algorithm, and just searches in a standard
way. We should get some benchmarks on MacOS and see how they compare.
It may be beneficial to (eventually) put parts of glibc in 3rdparty or somehow incorporate the code
for memmem() so we can use it on MacOS and Windows as well.
Even better would be to adapt the code to make a memmem that can skip a specified number of bytes,
so we can index 32bit strings faster. Although unlikely, at the moment it just panics if it gets back
and pointer that isn't along the boundaries of a 32bit integer. Preliminary plan is to run memmem from
from the returned pointer to continue searching inside the string in the rare (but possible) chance this
were to occur.

Windows now uses FreeBSD's memmem implementation, and has been tested with nqp test suite on Windows

Feedback requested :-)
P.S. glibc-2.8 was released in 2008-04-12, previous to this it did not use a special algorithm but should still work fine with 2.1 or newer (1999-02-03)","Totally agree with you. Wanted to do a PR to judge how to move this forward. The throwing was mainly for me to check if it ever got to that point while MoarVM and roast/testset for a while, which it did not trigger, but it still needs to be planned for because it is possible for that to happen.
I would think that using % sizeof(MVMGrapheme32) would be easier to port to other sizes, and I am considering having a MVM_memmem which will do this check across amounts that are different from 32bit integers as well.
void *MVM_memmem(const void *haystack, size_t haystacklen,
                    const void *needle, size_t needlelen,
                    size_t sizeof);",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,574,2017-04-07T01:56:21Z,2017-04-09T06:54:09Z,2017-04-11T06:51:52Z,MERGED,True,249,2,4,https://github.com/samcv,Use memmem in string index. Uses Knuth-Morris-Pratt on glibc 2.2x+ faster,10,[],https://github.com/MoarVM/MoarVM/pull/574,https://github.com/samcv,5,https://github.com/MoarVM/MoarVM/pull/574#issuecomment-292670702,"Update:
All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
FreeBSD's memmem is included in 3rdparty/freebsd/memmem.c and the #ifdef's and new MVM_memmem function are in src/platform/memmem.h.
Comments within the code explain this as well. :-)

Opening this Pull Request to allow for comments. In perl 6 matching in regex becomes
2.2x faster (in case needle is at very end of string). It is likely that the
index operation itself is slightly faster than that.
On MacOS memmem does not use Knuth-Morris-Pratt algorithm, and just searches in a standard
way. We should get some benchmarks on MacOS and see how they compare.
It may be beneficial to (eventually) put parts of glibc in 3rdparty or somehow incorporate the code
for memmem() so we can use it on MacOS and Windows as well.
Even better would be to adapt the code to make a memmem that can skip a specified number of bytes,
so we can index 32bit strings faster. Although unlikely, at the moment it just panics if it gets back
and pointer that isn't along the boundaries of a 32bit integer. Preliminary plan is to run memmem from
from the returned pointer to continue searching inside the string in the rare (but possible) chance this
were to occur.

Windows now uses FreeBSD's memmem implementation, and has been tested with nqp test suite on Windows

Feedback requested :-)
P.S. glibc-2.8 was released in 2008-04-12, previous to this it did not use a special algorithm but should still work fine with 2.1 or newer (1999-02-03)","Updated the PR. I have added memmem.c from libc (FreeBSD) and a file platform/memmem.h which handles the distribution specific stuff. For now i'm not going to add a specialized  memmem wrapper, but that will probably be something I will do in the future.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,574,2017-04-07T01:56:21Z,2017-04-09T06:54:09Z,2017-04-11T06:51:52Z,MERGED,True,249,2,4,https://github.com/samcv,Use memmem in string index. Uses Knuth-Morris-Pratt on glibc 2.2x+ faster,10,[],https://github.com/MoarVM/MoarVM/pull/574,https://github.com/coke,6,https://github.com/MoarVM/MoarVM/pull/574#issuecomment-292671777,"Update:
All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
FreeBSD's memmem is included in 3rdparty/freebsd/memmem.c and the #ifdef's and new MVM_memmem function are in src/platform/memmem.h.
Comments within the code explain this as well. :-)

Opening this Pull Request to allow for comments. In perl 6 matching in regex becomes
2.2x faster (in case needle is at very end of string). It is likely that the
index operation itself is slightly faster than that.
On MacOS memmem does not use Knuth-Morris-Pratt algorithm, and just searches in a standard
way. We should get some benchmarks on MacOS and see how they compare.
It may be beneficial to (eventually) put parts of glibc in 3rdparty or somehow incorporate the code
for memmem() so we can use it on MacOS and Windows as well.
Even better would be to adapt the code to make a memmem that can skip a specified number of bytes,
so we can index 32bit strings faster. Although unlikely, at the moment it just panics if it gets back
and pointer that isn't along the boundaries of a 32bit integer. Preliminary plan is to run memmem from
from the returned pointer to continue searching inside the string in the rare (but possible) chance this
were to occur.

Windows now uses FreeBSD's memmem implementation, and has been tested with nqp test suite on Windows

Feedback requested :-)
P.S. glibc-2.8 was released in 2008-04-12, previous to this it did not use a special algorithm but should still work fine with 2.1 or newer (1999-02-03)","Any licensing issues?
…
On Fri, Apr 7, 2017 at 6:54 PM, Samantha McVey ***@***.***> wrote:
 Updated the PR. I have added memmem.c from libc (FreeBSD) and a file
 platform/memmem.h which handles the distribution specific stuff. For now
 i'm not going to add a specialized memmem wrapper, but that will probably
 be something I will do in the future.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 <#574 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AADEUZTfijcnNjh-wL4rW_7oAb6G4Xe0ks5rtr6xgaJpZM4M2XrS>
 .


-- 
Will ""Coke"" Coleda",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,574,2017-04-07T01:56:21Z,2017-04-09T06:54:09Z,2017-04-11T06:51:52Z,MERGED,True,249,2,4,https://github.com/samcv,Use memmem in string index. Uses Knuth-Morris-Pratt on glibc 2.2x+ faster,10,[],https://github.com/MoarVM/MoarVM/pull/574,https://github.com/samcv,7,https://github.com/MoarVM/MoarVM/pull/574#issuecomment-292683393,"Update:
All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
FreeBSD's memmem is included in 3rdparty/freebsd/memmem.c and the #ifdef's and new MVM_memmem function are in src/platform/memmem.h.
Comments within the code explain this as well. :-)

Opening this Pull Request to allow for comments. In perl 6 matching in regex becomes
2.2x faster (in case needle is at very end of string). It is likely that the
index operation itself is slightly faster than that.
On MacOS memmem does not use Knuth-Morris-Pratt algorithm, and just searches in a standard
way. We should get some benchmarks on MacOS and see how they compare.
It may be beneficial to (eventually) put parts of glibc in 3rdparty or somehow incorporate the code
for memmem() so we can use it on MacOS and Windows as well.
Even better would be to adapt the code to make a memmem that can skip a specified number of bytes,
so we can index 32bit strings faster. Although unlikely, at the moment it just panics if it gets back
and pointer that isn't along the boundaries of a 32bit integer. Preliminary plan is to run memmem from
from the returned pointer to continue searching inside the string in the rare (but possible) chance this
were to occur.

Windows now uses FreeBSD's memmem implementation, and has been tested with nqp test suite on Windows

Feedback requested :-)
P.S. glibc-2.8 was released in 2008-04-12, previous to this it did not use a special algorithm but should still work fine with 2.1 or newer (1999-02-03)","@coke it is under MIT licensing.
Our utf8 decoding code is MIT license, so it should probably be fine. UTF8 code for reference: https://github.com/MoarVM/MoarVM/blob/master/src/strings/utf8.c#L3
Side note: ~~~the BSD version which this PR uses for Windows is the same code that is used for MacOS since they have lots of BSD code.~~~ Looks like memmem in MacOS is from FreeBSD but from 2005, and is quite different https://opensource.apple.com/source/Libc/Libc-1158.50.2/string/FreeBSD/memmem.c.auto.html",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,574,2017-04-07T01:56:21Z,2017-04-09T06:54:09Z,2017-04-11T06:51:52Z,MERGED,True,249,2,4,https://github.com/samcv,Use memmem in string index. Uses Knuth-Morris-Pratt on glibc 2.2x+ faster,10,[],https://github.com/MoarVM/MoarVM/pull/574,https://github.com/samcv,8,https://github.com/MoarVM/MoarVM/pull/574#issuecomment-292700912,"Update:
All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
FreeBSD's memmem is included in 3rdparty/freebsd/memmem.c and the #ifdef's and new MVM_memmem function are in src/platform/memmem.h.
Comments within the code explain this as well. :-)

Opening this Pull Request to allow for comments. In perl 6 matching in regex becomes
2.2x faster (in case needle is at very end of string). It is likely that the
index operation itself is slightly faster than that.
On MacOS memmem does not use Knuth-Morris-Pratt algorithm, and just searches in a standard
way. We should get some benchmarks on MacOS and see how they compare.
It may be beneficial to (eventually) put parts of glibc in 3rdparty or somehow incorporate the code
for memmem() so we can use it on MacOS and Windows as well.
Even better would be to adapt the code to make a memmem that can skip a specified number of bytes,
so we can index 32bit strings faster. Although unlikely, at the moment it just panics if it gets back
and pointer that isn't along the boundaries of a 32bit integer. Preliminary plan is to run memmem from
from the returned pointer to continue searching inside the string in the rare (but possible) chance this
were to occur.

Windows now uses FreeBSD's memmem implementation, and has been tested with nqp test suite on Windows

Feedback requested :-)
P.S. glibc-2.8 was released in 2008-04-12, previous to this it did not use a special algorithm but should still work fine with 2.1 or newer (1999-02-03)","All checks pass on Windows Appveyor and Travis CI on MacOS and Linux. The PR now uses FreeBSD's memmem on both Windows and MacOS to take advantage of the Crochemore-Perrin two-way string matching algorithm it uses. Link to PDF of paper  which describes it and interestingly compares it to Knuth-Morris-Pratt and Boyer-Moore for any interested. We will still use glibc's Knuth-Morris-Pratt based memmem on Linux, since it is 13% faster in this test:
say 'a' x 1000000000 ~ 'b' ~~ /abcde/; say now - INIT now; # FreeBSD libc 4.29s, glibc 3.78s
This PR should be ready for merge unless anybody has any other concerns.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,576,2017-04-08T16:55:33Z,2017-04-09T00:15:09Z,2017-06-30T14:08:31Z,MERGED,True,9,1,1,https://github.com/timo,join: extra check for empty string + empty sep,2,[],https://github.com/MoarVM/MoarVM/pull/576,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/576,"this could cause \r and \n to be kept as two graphemes
when they were joined with an empty string in between and
the empty string as the separator.","this could cause \r and \n to be kept as two graphemes
when they were joined with an empty string in between and
the empty string as the separator.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,577,2017-04-09T09:26:35Z,,2017-04-09T09:26:35Z,OPEN,False,556,32,13,https://github.com/spebern,add CStructArray representation to embed structs inside of an array,1,[],https://github.com/MoarVM/MoarVM/pull/577,https://github.com/spebern,1,https://github.com/MoarVM/MoarVM/pull/577,"CArray representations can only store pointers to structs in
contiguous memory. CStructArray will store the structs inside a
contiguous block of memory.
CStruct objects that are assigned to a CStructArray will be copied.
The code is very close to the CArray code so there might be a better way
so that both representations can share some code. I hope I haven't missed
anything.
I'm looking forward to comments :-)","CArray representations can only store pointers to structs in
contiguous memory. CStructArray will store the structs inside a
contiguous block of memory.
CStruct objects that are assigned to a CStructArray will be copied.
The code is very close to the CArray code so there might be a better way
so that both representations can share some code. I hope I haven't missed
anything.
I'm looking forward to comments :-)",True,{'THUMBS_UP': ['https://github.com/cgebe']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,578,2017-04-11T01:02:51Z,2017-04-11T11:23:31Z,2017-04-11T11:30:58Z,MERGED,True,18,18,1,https://github.com/MasterDuke17,Fix mp_get_int64 and mp_get_uint64 for realz,2,[],https://github.com/MoarVM/MoarVM/pull/578,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/578,"mp_get_long_long does in fact overflow/wrap around when the mp_int is
too large. So bring back checking the number of bits in the mp_int
before calling it. Also, remove the redundant check for whether the
mp_int is 0, since the exact same check is done in mp_get_long_long.
NQP passes make m-test and Rakudo passes make m-spectest.
Before #557, sub (int $x) {dd $x}(999999999999999999999999999999999999999999999) gave Cannot unbox 150 bit wide bigint into native integer. After that PR was merged, it then gave 802379605485813759. This PR corrects it back to  Cannot unbox 150 bit wide bigint into native integer, while still keeping the other fixes from #557.
I'm not exactly sure how it happened, since I did do lots of testing before, but I guess I just used values that were multiples of the size needed to get the correct behavior I was testing. MasterDuke17--","mp_get_long_long does in fact overflow/wrap around when the mp_int is
too large. So bring back checking the number of bits in the mp_int
before calling it. Also, remove the redundant check for whether the
mp_int is 0, since the exact same check is done in mp_get_long_long.
NQP passes make m-test and Rakudo passes make m-spectest.
Before #557, sub (int $x) {dd $x}(999999999999999999999999999999999999999999999) gave Cannot unbox 150 bit wide bigint into native integer. After that PR was merged, it then gave 802379605485813759. This PR corrects it back to  Cannot unbox 150 bit wide bigint into native integer, while still keeping the other fixes from #557.
I'm not exactly sure how it happened, since I did do lots of testing before, but I guess I just used values that were multiples of the size needed to get the correct behavior I was testing. MasterDuke17--",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,580,2017-04-15T07:44:33Z,2017-04-16T10:06:18Z,2017-04-16T10:06:18Z,CLOSED,False,155,18,4,https://github.com/samcv,Merge coverage into master,14,[],https://github.com/MoarVM/MoarVM/pull/580,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/580,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,580,2017-04-15T07:44:33Z,2017-04-16T10:06:18Z,2017-04-16T10:06:18Z,CLOSED,False,155,18,4,https://github.com/samcv,Merge coverage into master,14,[],https://github.com/MoarVM/MoarVM/pull/580,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/580#issuecomment-294317652,,This should be ready for merge now. If @jnthn can make sure the scripts don't infringe on any licensing issues. Since they're not a main part of MoarVM and all sources where the make-index.sh (CC-by-SA) and update-gh-pages.sh (Creative Commons Zero v1.0 Universal [aka public domain dedication]).,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,581,2017-04-16T10:07:13Z,2017-04-16T10:11:11Z,2018-04-27T16:31:47Z,MERGED,True,156,18,4,https://github.com/samcv,Merge coverage branch into master,17,[],https://github.com/MoarVM/MoarVM/pull/581,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/581,Now is successfully pushing to MoarVM/coverage accessible at https://moarvm.github.io/coverage/,Now is successfully pushing to MoarVM/coverage accessible at https://moarvm.github.io/coverage/,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,582,2017-04-16T11:00:51Z,2017-04-16T13:55:53Z,2017-07-28T07:50:00Z,MERGED,True,3,2,1,https://github.com/the-eater,Also pass cflags when building probe shared object,2,[],https://github.com/MoarVM/MoarVM/pull/582,https://github.com/the-eater,1,https://github.com/MoarVM/MoarVM/pull/582,"Currently no flags are sent when building the object, which may default to building a non-shared object passing the cflags makes sure it will use the defined cflags by building the object","Currently no flags are sent when building the object, which may default to building a non-shared object passing the cflags makes sure it will use the defined cflags by building the object",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,583,2017-04-17T02:56:16Z,2017-04-17T10:06:00Z,2017-04-17T10:06:00Z,MERGED,True,17,14,1,https://github.com/samcv,Make sure that coverage Travis CI executes normally except for uploading,1,[],https://github.com/MoarVM/MoarVM/pull/583,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/583,"Make sure that the MoarVM options still are set and built properly, but as before,
it does not try and decrypt the key and other such things that only should happen
on non-Pull-Requests and when it's in MoarVM/MoarVM.","Make sure that the MoarVM options still are set and built properly, but as before,
it does not try and decrypt the key and other such things that only should happen
on non-Pull-Requests and when it's in MoarVM/MoarVM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,585,2017-04-21T21:51:10Z,2017-04-21T21:52:06Z,2017-04-21T21:52:14Z,CLOSED,False,1,1,1,https://github.com/zoffixznet,Fix broken multi when annotations file isn't given,1,[],https://github.com/MoarVM/MoarVM/pull/585,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/585,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,585,2017-04-21T21:51:10Z,2017-04-21T21:52:06Z,2017-04-21T21:52:14Z,CLOSED,False,1,1,1,https://github.com/zoffixznet,Fix broken multi when annotations file isn't given,1,[],https://github.com/MoarVM/MoarVM/pull/585,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/585#issuecomment-296313956,,Fixed in another commit,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,586,2017-04-22T05:56:01Z,2017-04-22T07:18:17Z,2018-04-27T16:31:46Z,MERGED,True,19,8,1,https://github.com/samcv,Fix bug in index ignorecase and equal at ignorecase,2,[],https://github.com/MoarVM/MoarVM/pull/586,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/586,"This bug occurred when the entire length of the haystack was searched
and all of the graphemes matched the needle.
If the needle exceeded the length of the haystack past that point,
it would erroneously think there was a match there, as it only checked
that it matched the whole length of the haystack.
Would cause 'fgh' to be found in: 'abcdefg'. This only occurred at
the very end of the haystack.
The internal string_equal_at_ignore_case_INTERNAL_loop now returns:

-1 if there was no match and 0 or more if there was a match at that index.

This return value provides new information which is 0 if there was a match
and some positive integer when the haystack was expanded when casefolding it.
This information had been planned to be exposed in some way at a future date,
as if we are searching for 'st' inside a string 'ﬆabc', index ignorecase
will indicate that it is located at index 0, and in Perl 6 Rakudo it will
return 'ﬆa' when it should instead have returned 'ﬆ'.
For now this additional information is only internal and the return values
of the indexic_s and equatic_s ops have not changed.","This bug occurred when the entire length of the haystack was searched
and all of the graphemes matched the needle.
If the needle exceeded the length of the haystack past that point,
it would erroneously think there was a match there, as it only checked
that it matched the whole length of the haystack.
Would cause 'fgh' to be found in: 'abcdefg'. This only occurred at
the very end of the haystack.
The internal string_equal_at_ignore_case_INTERNAL_loop now returns:

-1 if there was no match and 0 or more if there was a match at that index.

This return value provides new information which is 0 if there was a match
and some positive integer when the haystack was expanded when casefolding it.
This information had been planned to be exposed in some way at a future date,
as if we are searching for 'st' inside a string 'ﬆabc', index ignorecase
will indicate that it is located at index 0, and in Perl 6 Rakudo it will
return 'ﬆa' when it should instead have returned 'ﬆ'.
For now this additional information is only internal and the return values
of the indexic_s and equatic_s ops have not changed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,588,2017-04-30T13:15:21Z,2017-05-20T17:52:46Z,2017-05-20T17:52:46Z,MERGED,True,308,18,6,https://github.com/pmurias,Coerce s n,8,[],https://github.com/MoarVM/MoarVM/pull/588,https://github.com/pmurias,1,https://github.com/MoarVM/MoarVM/pull/588,"Make coercing a str to a num behave more like the .Num method.
Make it no longer os dependent.","Make coercing a str to a num behave more like the .Num method.
Make it no longer os dependent.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,588,2017-04-30T13:15:21Z,2017-05-20T17:52:46Z,2017-05-20T17:52:46Z,MERGED,True,308,18,6,https://github.com/pmurias,Coerce s n,8,[],https://github.com/MoarVM/MoarVM/pull/588,https://github.com/pmurias,2,https://github.com/MoarVM/MoarVM/pull/588#issuecomment-298261278,"Make coercing a str to a num behave more like the .Num method.
Make it no longer os dependent.","Fixed.
…
On 30 April 2017 at 16:35, Jimmy Zhuo ***@***.***> wrote:
 ***@***.**** commented on this pull request.
 ------------------------------

 In src/strings/parse_num.h
 <#588 (comment)>:

 > @@ -0,0 +1 @@
 +MVMnum64 MVM_coerce_s_n_new(MVMThreadContext *tc, MVMString *s);

 MVM_coerce_s_n me thinks?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#588 (review)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AAGXpiG8N5n9PairfjaAZRThjVaFl0NEks5r1Jw-gaJpZM4NMkN8>
 .",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,588,2017-04-30T13:15:21Z,2017-05-20T17:52:46Z,2017-05-20T17:52:46Z,MERGED,True,308,18,6,https://github.com/pmurias,Coerce s n,8,[],https://github.com/MoarVM/MoarVM/pull/588,https://github.com/pmurias,3,https://github.com/MoarVM/MoarVM/pull/588#issuecomment-298316061,"Make coercing a str to a num behave more like the .Num method.
Make it no longer os dependent.","NQP tests where doing some incorrect conversions that where uncovered by this PR.
I fixed those tests.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,588,2017-04-30T13:15:21Z,2017-05-20T17:52:46Z,2017-05-20T17:52:46Z,MERGED,True,308,18,6,https://github.com/pmurias,Coerce s n,8,[],https://github.com/MoarVM/MoarVM/pull/588,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/588#issuecomment-302737919,"Make coercing a str to a num behave more like the .Num method.
Make it no longer os dependent.","Finally got around to reviewing this (sorry it took a while), and it looks good overall to me. Release is very soon, so suggest merging this just after that.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,589,2017-05-03T03:01:37Z,2017-05-03T13:16:22Z,2017-05-03T13:26:35Z,MERGED,True,14,12,1,https://github.com/MasterDuke17,Zero slot when popping an array,2,[],https://github.com/MoarVM/MoarVM/pull/589,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/589,"Otherwise ghost elements are left.
Fixes https://rt.perl.org/Ticket/Display.html?id=131245
Previously perl6 -e 'my @a=(1,2,3,4,5); @a.pop; @a.pop, @a[4]=""hi""; say @a.join("","");' would print 1,2,3,4,hi, now it prints 1,2,3,,hi.
NQP passes make m-test and Rakudo passes make m-spectest.","Otherwise ghost elements are left.
Fixes https://rt.perl.org/Ticket/Display.html?id=131245
Previously perl6 -e 'my @a=(1,2,3,4,5); @a.pop; @a.pop, @a[4]=""hi""; say @a.join("","");' would print 1,2,3,4,hi, now it prints 1,2,3,,hi.
NQP passes make m-test and Rakudo passes make m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,590,2017-05-04T02:37:08Z,2017-07-11T18:42:20Z,2017-07-12T01:10:40Z,MERGED,True,12,9,1,https://github.com/MasterDuke17,Remove arbitrary string repeat limit,6,[],https://github.com/MoarVM/MoarVM/pull/590,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/590,"Instead make the limit the same as the max number of graphemes possible
in a string. This is ok because there's a later check that the size of
the resulting string (i.e., size of original string * count) is also
less than the max number of graphemes possible.
NQP passes make m-test and Rakudo passes make m-spectest.","Instead make the limit the same as the max number of graphemes possible
in a string. This is ok because there's a later check that the size of
the resulting string (i.e., size of original string * count) is also
less than the max number of graphemes possible.
NQP passes make m-test and Rakudo passes make m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,590,2017-05-04T02:37:08Z,2017-07-11T18:42:20Z,2017-07-12T01:10:40Z,MERGED,True,12,9,1,https://github.com/MasterDuke17,Remove arbitrary string repeat limit,6,[],https://github.com/MoarVM/MoarVM/pull/590,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/590#issuecomment-299172377,"Instead make the limit the same as the max number of graphemes possible
in a string. This is ok because there's a later check that the size of
the resulting string (i.e., size of original string * count) is also
less than the max number of graphemes possible.
NQP passes make m-test and Rakudo passes make m-spectest.",How crazy would it be to use bigints to calculate the number of graphemes requested in the error branch so it reports the correct value even if it would be bigger than an MVMuint64?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,590,2017-05-04T02:37:08Z,2017-07-11T18:42:20Z,2017-07-12T01:10:40Z,MERGED,True,12,9,1,https://github.com/MasterDuke17,Remove arbitrary string repeat limit,6,[],https://github.com/MoarVM/MoarVM/pull/590,https://github.com/pmurias,3,https://github.com/MoarVM/MoarVM/pull/590#issuecomment-299848990,"Instead make the limit the same as the max number of graphemes possible
in a string. This is ok because there's a later check that the size of
the resulting string (i.e., size of original string * count) is also
less than the max number of graphemes possible.
NQP passes make m-test and Rakudo passes make m-spectest.",Instead of using bignum math maybe just mentioning the size of the original string and the count would be better?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,590,2017-05-04T02:37:08Z,2017-07-11T18:42:20Z,2017-07-12T01:10:40Z,MERGED,True,12,9,1,https://github.com/MasterDuke17,Remove arbitrary string repeat limit,6,[],https://github.com/MoarVM/MoarVM/pull/590,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/590#issuecomment-300469104,"Instead make the limit the same as the max number of graphemes possible
in a string. This is ok because there's a later check that the size of
the resulting string (i.e., size of original string * count) is also
less than the max number of graphemes possible.
NQP passes make m-test and Rakudo passes make m-spectest.","I could just do something ""Can't repeat string, required number of graphemes (%lu * %lu) is greater than max allowed of %u"",, so we don't have to worry about actually doing the multiplication and handling overflow.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,590,2017-05-04T02:37:08Z,2017-07-11T18:42:20Z,2017-07-12T01:10:40Z,MERGED,True,12,9,1,https://github.com/MasterDuke17,Remove arbitrary string repeat limit,6,[],https://github.com/MoarVM/MoarVM/pull/590,https://github.com/samcv,5,https://github.com/MoarVM/MoarVM/pull/590#issuecomment-300652941,"Instead make the limit the same as the max number of graphemes possible
in a string. This is ok because there's a later check that the size of
the resulting string (i.e., size of original string * count) is also
less than the max number of graphemes possible.
NQP passes make m-test and Rakudo passes make m-spectest.","@MasterDuke17 that sounds like an alright idea. We could use the unicode × maybe? Would look nicer than a star. Though maybe people don't like that. Either way just throwing that out there.
Go ahead and have some variation on what you said in your most recent comment.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,590,2017-05-04T02:37:08Z,2017-07-11T18:42:20Z,2017-07-12T01:10:40Z,MERGED,True,12,9,1,https://github.com/MasterDuke17,Remove arbitrary string repeat limit,6,[],https://github.com/MoarVM/MoarVM/pull/590,https://github.com/samcv,6,https://github.com/MoarVM/MoarVM/pull/590#issuecomment-314327943,"Instead make the limit the same as the max number of graphemes possible
in a string. This is ok because there's a later check that the size of
the resulting string (i.e., size of original string * count) is also
less than the max number of graphemes possible.
NQP passes make m-test and Rakudo passes make m-spectest.",@MasterDuke17 is this commit ready for merge now or do you still need to make changes?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,590,2017-05-04T02:37:08Z,2017-07-11T18:42:20Z,2017-07-12T01:10:40Z,MERGED,True,12,9,1,https://github.com/MasterDuke17,Remove arbitrary string repeat limit,6,[],https://github.com/MoarVM/MoarVM/pull/590,https://github.com/MasterDuke17,7,https://github.com/MoarVM/MoarVM/pull/590#issuecomment-314413035,"Instead make the limit the same as the max number of graphemes possible
in a string. This is ok because there's a later check that the size of
the resulting string (i.e., size of original string * count) is also
less than the max number of graphemes possible.
NQP passes make m-test and Rakudo passes make m-spectest.",@samcv should be good to go.,True,{'THUMBS_UP': ['https://github.com/samcv']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,591,2017-05-05T14:18:41Z,2017-05-06T10:37:04Z,2017-05-06T10:37:04Z,MERGED,True,19,13,1,https://github.com/samcv,"Add can_fit_into_8bit funct, put logic used many places into one funct",1,[],https://github.com/MoarVM/MoarVM/pull/591,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/591,"There are 7 places we use checks for this within src/strings/ops.c
Writing out the conditionals which sometimes use || and sometimes
use &&. They also sometimes use >= sign and other times > signs.
Make it more consistent for ease of reading and clarity.","There are 7 places we use checks for this within src/strings/ops.c
Writing out the conditionals which sometimes use || and sometimes
use &&. They also sometimes use >= sign and other times > signs.
Make it more consistent for ease of reading and clarity.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,591,2017-05-05T14:18:41Z,2017-05-06T10:37:04Z,2017-05-06T10:37:04Z,MERGED,True,19,13,1,https://github.com/samcv,"Add can_fit_into_8bit funct, put logic used many places into one funct",1,[],https://github.com/MoarVM/MoarVM/pull/591,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/591#issuecomment-299624416,"There are 7 places we use checks for this within src/strings/ops.c
Writing out the conditionals which sometimes use || and sometimes
use &&. They also sometimes use >= sign and other times > signs.
Make it more consistent for ease of reading and clarity.","Okay, @zhuomingliang, removed the new functions from the .h file. Good to go with this change?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,591,2017-05-05T14:18:41Z,2017-05-06T10:37:04Z,2017-05-06T10:37:04Z,MERGED,True,19,13,1,https://github.com/samcv,"Add can_fit_into_8bit funct, put logic used many places into one funct",1,[],https://github.com/MoarVM/MoarVM/pull/591,https://github.com/zhuomingliang,3,https://github.com/MoarVM/MoarVM/pull/591#issuecomment-299629841,"There are 7 places we use checks for this within src/strings/ops.c
Writing out the conditionals which sometimes use || and sometimes
use &&. They also sometimes use >= sign and other times > signs.
Make it more consistent for ease of reading and clarity.","As long as test is passed, I think so, yes 👍",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,592,2017-05-08T18:23:57Z,2017-05-09T14:22:59Z,2017-05-09T14:23:00Z,CLOSED,False,43,1,1,https://github.com/MasterDuke17,Add at_pos support for VMHash,1,[],https://github.com/MoarVM/MoarVM/pull/592,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/592,"With this, nqp-m -e 'my %h := nqp::hash(""a"", ""b"", ""c"", ""d""); say(nqp::atpos(%h, 0))' returns ""b"".
NQP passes make m-test, haven't run a Rakudo spectest yet.","With this, nqp-m -e 'my %h := nqp::hash(""a"", ""b"", ""c"", ""d""); say(nqp::atpos(%h, 0))' returns ""b"".
NQP passes make m-test, haven't run a Rakudo spectest yet.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,592,2017-05-08T18:23:57Z,2017-05-09T14:22:59Z,2017-05-09T14:23:00Z,CLOSED,False,43,1,1,https://github.com/MasterDuke17,Add at_pos support for VMHash,1,[],https://github.com/MoarVM/MoarVM/pull/592,https://github.com/zhuomingliang,2,https://github.com/MoarVM/MoarVM/pull/592#issuecomment-300128683,"With this, nqp-m -e 'my %h := nqp::hash(""a"", ""b"", ""c"", ""d""); say(nqp::atpos(%h, 0))' returns ""b"".
NQP passes make m-test, haven't run a Rakudo spectest yet.","-1, Because hash is not ordered.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,592,2017-05-08T18:23:57Z,2017-05-09T14:22:59Z,2017-05-09T14:23:00Z,CLOSED,False,43,1,1,https://github.com/MasterDuke17,Add at_pos support for VMHash,1,[],https://github.com/MoarVM/MoarVM/pull/592,https://github.com/lizmat,3,https://github.com/MoarVM/MoarVM/pull/592#issuecomment-300170140,"With this, nqp-m -e 'my %h := nqp::hash(""a"", ""b"", ""c"", ""d""); say(nqp::atpos(%h, 0))' returns ""b"".
NQP passes make m-test, haven't run a Rakudo spectest yet.","@zhuomingliang: indeed, and that is the point!  If you want to take a random element from a VMhash with N elements, you need to run an NQP iterator for the rand(N) in NQP code.  This merely shifts it to C-land, where it can be faster.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,592,2017-05-08T18:23:57Z,2017-05-09T14:22:59Z,2017-05-09T14:23:00Z,CLOSED,False,43,1,1,https://github.com/MasterDuke17,Add at_pos support for VMHash,1,[],https://github.com/MoarVM/MoarVM/pull/592,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/592#issuecomment-300180842,"With this, nqp-m -e 'my %h := nqp::hash(""a"", ""b"", ""c"", ""d""); say(nqp::atpos(%h, 0))' returns ""b"".
NQP passes make m-test, haven't run a Rakudo spectest yet.",Closing after discussion here https://irclog.perlgeek.de/moarvm/2017-05-09#i_14554429 and here https://irclog.perlgeek.de/moarvm/2017-05-09#i_14555813,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,593,2017-05-10T13:33:37Z,2017-05-10T19:12:29Z,2017-05-10T19:23:43Z,MERGED,True,1,1,1,https://github.com/zoffixznet,Use -1 instead of 0 when long right-shifting negative smallints,1,[],https://github.com/MoarVM/MoarVM/pull/593,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/593,"Passes Rakudo's stresstest.

The value of -1 is what falls out when you calculate with
fakely-big big ints, like -15**1 (that ends up going through the
""big int"" path 'cause the flag is apparently set)
This is also the value you get with div (e.g. dd -12 div 2**32)
This is also the value you get on JVM backend
This is also the value you get with Perl 5 use integer; say -12 >> 32
This is also the value Zefram mentions in RT#126942:

Together with a Rakudo patch I'm preparing, fixes
RT#126942: https://rt.perl.org/Ticket/Display.html?id=126942
and RT#13278: https://rt.perl.org/Ticket/Display.html?id=131278","Passes Rakudo's stresstest.

The value of -1 is what falls out when you calculate with
fakely-big big ints, like -15**1 (that ends up going through the
""big int"" path 'cause the flag is apparently set)
This is also the value you get with div (e.g. dd -12 div 2**32)
This is also the value you get on JVM backend
This is also the value you get with Perl 5 use integer; say -12 >> 32
This is also the value Zefram mentions in RT#126942:

Together with a Rakudo patch I'm preparing, fixes
RT#126942: https://rt.perl.org/Ticket/Display.html?id=126942
and RT#13278: https://rt.perl.org/Ticket/Display.html?id=131278",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,595,2017-05-11T13:55:30Z,2017-05-11T18:35:12Z,2017-05-11T18:35:14Z,MERGED,True,0,9,1,https://github.com/lizmat,Remove workaround for tommath issue $56,1,[],https://github.com/MoarVM/MoarVM/pull/595,https://github.com/lizmat,1,https://github.com/MoarVM/MoarVM/pull/595,"As fas as I know, we've upgraded tommath and the issue there is fixed.
If we didn't upgrade yet, maybe we should also have a libtommath upgrade?
This would make nqp::rand_I a lot faster again, so it can actually be used in many cases.","As fas as I know, we've upgraded tommath and the issue there is fixed.
If we didn't upgrade yet, maybe we should also have a libtommath upgrade?
This would make nqp::rand_I a lot faster again, so it can actually be used in many cases.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,595,2017-05-11T13:55:30Z,2017-05-11T18:35:12Z,2017-05-11T18:35:14Z,MERGED,True,0,9,1,https://github.com/lizmat,Remove workaround for tommath issue $56,1,[],https://github.com/MoarVM/MoarVM/pull/595,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/595#issuecomment-300878910,"As fas as I know, we've upgraded tommath and the issue there is fixed.
If we didn't upgrade yet, maybe we should also have a libtommath upgrade?
This would make nqp::rand_I a lot faster again, so it can actually be used in many cases.","Indeed, it's fixed there and we have that commit in our libtommath fork also.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,599,2017-05-19T12:42:38Z,2017-09-19T13:17:43Z,2017-09-19T13:18:11Z,CLOSED,False,8,1,3,https://github.com/timo,protect the parameterization lookup list with a mutex,1,[],https://github.com/MoarVM/MoarVM/pull/599,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/599,"addresses #554
but perhaps we can do better than a mutex?","addresses #554
but perhaps we can do better than a mutex?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,599,2017-05-19T12:42:38Z,2017-09-19T13:17:43Z,2017-09-19T13:18:11Z,CLOSED,False,8,1,3,https://github.com/timo,protect the parameterization lookup list with a mutex,1,[],https://github.com/MoarVM/MoarVM/pull/599,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/599#issuecomment-302697212,"addresses #554
but perhaps we can do better than a mutex?","This is a step in the right direction, but not sufficient; there's still two races:

Reading the parameterizations array when it may be being written to
Ending up with the same parameterization key in the array twice, when we need to have interning semantics, which is what the original comment was about",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,599,2017-05-19T12:42:38Z,2017-09-19T13:17:43Z,2017-09-19T13:18:11Z,CLOSED,False,8,1,3,https://github.com/timo,protect the parameterization lookup list with a mutex,1,[],https://github.com/MoarVM/MoarVM/pull/599,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/599#issuecomment-330535830,"addresses #554
but perhaps we can do better than a mutex?",Cherry-picked this and fixed the conflict; will now do the remaining bits to make it fully safe.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,599,2017-05-19T12:42:38Z,2017-09-19T13:17:43Z,2017-09-19T13:18:11Z,CLOSED,False,8,1,3,https://github.com/timo,protect the parameterization lookup list with a mutex,1,[],https://github.com/MoarVM/MoarVM/pull/599,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/599#issuecomment-330535943,"addresses #554
but perhaps we can do better than a mutex?",Cherry pick commit ID is 8640703,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,600,2017-05-22T11:47:51Z,2017-05-23T13:05:47Z,2017-05-23T13:05:47Z,CLOSED,False,242,170,9,https://github.com/cono,Add ability to get port from already bind-ed socket,2,[],https://github.com/MoarVM/MoarVM/pull/600,https://github.com/cono,1,https://github.com/MoarVM/MoarVM/pull/600,"Overview
This change trying to simplify S32-io/IO-Socket-INET.t and add ability to bind on first un-used port.
Description
There is a possibility to find first unused port. You just making a bind on port = 0 and with ability of getsockname call you can get what port is in use. Here is an example in C:
#include <stdio.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <strings.h>
#include <arpa/inet.h>
#include <unistd.h>

int
main(int argc, char **argv) {
	int s;
	struct sockaddr_in addr;
	socklen_t s_size;

	s = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0);

	if (s < 0) {
		perror(""Can't create socket"");
		return errno;
	}

	printf(""AF_INET: %d, AF_INET6: %d\n"", AF_INET, AF_INET6);
	bzero(&addr, sizeof(addr));
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = INADDR_ANY;
	addr.sin_port = 0;

	if (bind(s, (struct sockaddr *) &addr, sizeof(addr)) < 0) {
		perror(""Can't bind to address"");
		return errno;
	}

	s_size = sizeof(addr);
	if (getsockname(s, (struct sockaddr *) &addr, &s_size) < 0) {
		perror(""can't getsockname"");
		return errno;
	}

	if (close(s) < 0) {
		perror(""Can't close socket"");
		return errno;
	}

	printf(""port: %d\n"", ntohs(addr.sin_port));

	return 0;
}
Working example
IPv6:
% perl6 -e 'my $l = IO::Socket::INET.new(:listen, :localhost<localhost>, :localport(0)); qx{netstat -lnp 2>/dev/null| grep moar}.chomp.say; $l.localport.say'
tcp6       0      0 ::1:45073               :::*                    LISTEN      25558/moar          
45073

IPv4:
% perl6 -e 'my $l = IO::Socket::INET.new(:listen, :localhost<127.0.0.1>, :localport(0)); qx{netstat -lnp 2>/dev/null| grep moar}.chomp.say; $l.localport.say'
tcp        0      0 127.0.0.1:46149         0.0.0.0:*               LISTEN      25573/moar          
46149

Reference
Pull-request of NQP: Raku/nqp#360
Pull-request of Rakudo: rakudo/rakudo#1086
Pull-request of spec-tests: Raku/roast#270","Overview
This change trying to simplify S32-io/IO-Socket-INET.t and add ability to bind on first un-used port.
Description
There is a possibility to find first unused port. You just making a bind on port = 0 and with ability of getsockname call you can get what port is in use. Here is an example in C:
#include <stdio.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <strings.h>
#include <arpa/inet.h>
#include <unistd.h>

int
main(int argc, char **argv) {
	int s;
	struct sockaddr_in addr;
	socklen_t s_size;

	s = socket(AF_INET, SOCK_STREAM | SOCK_NONBLOCK, 0);

	if (s < 0) {
		perror(""Can't create socket"");
		return errno;
	}

	printf(""AF_INET: %d, AF_INET6: %d\n"", AF_INET, AF_INET6);
	bzero(&addr, sizeof(addr));
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = INADDR_ANY;
	addr.sin_port = 0;

	if (bind(s, (struct sockaddr *) &addr, sizeof(addr)) < 0) {
		perror(""Can't bind to address"");
		return errno;
	}

	s_size = sizeof(addr);
	if (getsockname(s, (struct sockaddr *) &addr, &s_size) < 0) {
		perror(""can't getsockname"");
		return errno;
	}

	if (close(s) < 0) {
		perror(""Can't close socket"");
		return errno;
	}

	printf(""port: %d\n"", ntohs(addr.sin_port));

	return 0;
}
Working example
IPv6:
% perl6 -e 'my $l = IO::Socket::INET.new(:listen, :localhost<localhost>, :localport(0)); qx{netstat -lnp 2>/dev/null| grep moar}.chomp.say; $l.localport.say'
tcp6       0      0 ::1:45073               :::*                    LISTEN      25558/moar          
45073

IPv4:
% perl6 -e 'my $l = IO::Socket::INET.new(:listen, :localhost<127.0.0.1>, :localport(0)); qx{netstat -lnp 2>/dev/null| grep moar}.chomp.say; $l.localport.say'
tcp        0      0 127.0.0.1:46149         0.0.0.0:*               LISTEN      25573/moar          
46149

Reference
Pull-request of NQP: Raku/nqp#360
Pull-request of Rakudo: rakudo/rakudo#1086
Pull-request of spec-tests: Raku/roast#270",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,602,2017-05-23T13:41:35Z,2017-05-23T14:09:01Z,2017-05-23T14:10:35Z,MERGED,True,233,170,9,https://github.com/cono,getport op code,3,[],https://github.com/MoarVM/MoarVM/pull/602,https://github.com/cono,1,https://github.com/MoarVM/MoarVM/pull/602,"In continuation of #600
Reference
Pull-request of NQP: Raku/nqp#360
Pull-request of Rakudo: rakudo/rakudo#1086
Pull-request of spec-tests: Raku/roast#270","In continuation of #600
Reference
Pull-request of NQP: Raku/nqp#360
Pull-request of Rakudo: rakudo/rakudo#1086
Pull-request of spec-tests: Raku/roast#270",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,602,2017-05-23T13:41:35Z,2017-05-23T14:09:01Z,2017-05-23T14:10:35Z,MERGED,True,233,170,9,https://github.com/cono,getport op code,3,[],https://github.com/MoarVM/MoarVM/pull/602,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/602#issuecomment-303409911,"In continuation of #600
Reference
Pull-request of NQP: Raku/nqp#360
Pull-request of Rakudo: rakudo/rakudo#1086
Pull-request of spec-tests: Raku/roast#270",Looks good; thanks.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,604,2017-05-26T21:49:41Z,2017-05-28T17:43:40Z,2017-05-28T19:26:54Z,MERGED,True,220,260,11,https://github.com/robertlemmen,"new ""hardware_concurrency"" op",4,[],https://github.com/MoarVM/MoarVM/pull/604,https://github.com/robertlemmen,1,https://github.com/MoarVM/MoarVM/pull/604,"among other things, this can be used in rakudo to auto-size the default
thread pool","among other things, this can be used in rakudo to auto-size the default
thread pool",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,604,2017-05-26T21:49:41Z,2017-05-28T17:43:40Z,2017-05-28T19:26:54Z,MERGED,True,220,260,11,https://github.com/robertlemmen,"new ""hardware_concurrency"" op",4,[],https://github.com/MoarVM/MoarVM/pull/604,https://github.com/robertlemmen,2,https://github.com/MoarVM/MoarVM/pull/604#issuecomment-304395547,"among other things, this can be used in rakudo to auto-size the default
thread pool","related: Raku/nqp#362, rakudo/rakudo#1088",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,605,2017-05-29T04:35:06Z,2017-05-29T08:51:53Z,2017-05-29T08:51:56Z,MERGED,True,6,1,2,https://github.com/zhuomingliang,fixed some memory leaks,1,[],https://github.com/MoarVM/MoarVM/pull/605,https://github.com/zhuomingliang,1,https://github.com/MoarVM/MoarVM/pull/605,Fixed some memory leaks reported by https://irclog.perlgeek.de/moarvm/2017-05-28#i_14650031,Fixed some memory leaks reported by https://irclog.perlgeek.de/moarvm/2017-05-28#i_14650031,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,605,2017-05-29T04:35:06Z,2017-05-29T08:51:53Z,2017-05-29T08:51:56Z,MERGED,True,6,1,2,https://github.com/zhuomingliang,fixed some memory leaks,1,[],https://github.com/MoarVM/MoarVM/pull/605,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/605#issuecomment-304609136,Fixed some memory leaks reported by https://irclog.perlgeek.de/moarvm/2017-05-28#i_14650031,Seems reasonable; thanks.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,606,2017-06-12T13:49:06Z,2017-06-12T14:07:53Z,2017-06-12T14:14:23Z,MERGED,True,1,1,1,https://github.com/zoffixznet,Use more professional language in error message,1,[],https://github.com/MoarVM/MoarVM/pull/606,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/606,,,True,{'THUMBS_UP': ['https://github.com/teodozjan']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,607,2017-06-16T08:47:50Z,2017-06-16T08:56:19Z,2017-06-16T08:56:19Z,MERGED,True,6,0,1,https://github.com/gerd,add help text for environment variables,1,[],https://github.com/MoarVM/MoarVM/pull/607,https://github.com/gerd,1,https://github.com/MoarVM/MoarVM/pull/607,should work on every operating system,should work on every operating system,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,609,2017-07-05T15:24:28Z,2017-07-05T15:26:01Z,2017-07-05T15:28:01Z,CLOSED,False,1,1,1,https://github.com/vendethiel,Fix typo in add_guard,1,[],https://github.com/MoarVM/MoarVM/pull/609,https://github.com/vendethiel,1,https://github.com/MoarVM/MoarVM/pull/609,"c0ffc6d#commitcomment-22931155
At least from reading the code it doesn't seem like the first of types should always be used, but I'd gladly be taught otherwise

7598dfdfdb","c0ffc6d#commitcomment-22931155
At least from reading the code it doesn't seem like the first of types should always be used, but I'd gladly be taught otherwise

7598dfdfdb",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,613,2017-07-10T16:37:41Z,2017-07-10T17:53:36Z,2017-07-10T17:53:36Z,MERGED,True,1,1,1,https://github.com/stmuk,Fix ARM build,1,[],https://github.com/MoarVM/MoarVM/pull/613,https://github.com/stmuk,1,https://github.com/MoarVM/MoarVM/pull/613,"Don't pass CFLAGS (which includes -Werror=declaration-after-statement)
to dyncall. Just pass -fPIC. Otherwise we see a fatal warning with
dyncall_callvm_arm32_arm_armhf.c","Don't pass CFLAGS (which includes -Werror=declaration-after-statement)
to dyncall. Just pass -fPIC. Otherwise we see a fatal warning with
dyncall_callvm_arm32_arm_armhf.c",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,613,2017-07-10T16:37:41Z,2017-07-10T17:53:36Z,2017-07-10T17:53:36Z,MERGED,True,1,1,1,https://github.com/stmuk,Fix ARM build,1,[],https://github.com/MoarVM/MoarVM/pull/613,https://github.com/stmuk,2,https://github.com/MoarVM/MoarVM/pull/613#issuecomment-314162966,"Don't pass CFLAGS (which includes -Werror=declaration-after-statement)
to dyncall. Just pass -fPIC. Otherwise we see a fatal warning with
dyncall_callvm_arm32_arm_armhf.c",Also see comments on #610,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,614,2017-07-14T16:12:26Z,2017-07-14T16:24:13Z,2017-07-14T16:24:13Z,MERGED,True,3,3,1,https://github.com/lucasbuchala,Decoder typos,1,[],https://github.com/MoarVM/MoarVM/pull/614,https://github.com/lucasbuchala,1,https://github.com/MoarVM/MoarVM/pull/614,,,True,{'THUMBS_UP': ['https://github.com/coke']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,615,2017-07-18T04:50:19Z,2017-07-19T12:10:15Z,2017-07-19T12:10:15Z,MERGED,True,118,20,3,https://github.com/samcv,"Don't re_nfg string a + string b when concatenating in many cases, instead add only the section needing renormalization in as another strand",1,[],https://github.com/MoarVM/MoarVM/pull/615,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/615,"PR is ready for review, spectest passes, was wondering if people wanted to take a look and make there's nothing code quality wise that needs changing. Thanks.","PR is ready for review, spectest passes, was wondering if people wanted to take a look and make there's nothing code quality wise that needs changing. Thanks.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,616,2017-07-19T04:48:56Z,2017-07-20T03:03:50Z,2017-07-20T03:03:50Z,MERGED,True,21,8,1,https://github.com/samcv,Start off collapsing strands as 8bit instead of 32bit,1,[],https://github.com/MoarVM/MoarVM/pull/616,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/616,"Here instead of starting as 32-bit and then at the end converting
the already iterated 32-bit blob to 8bit, we instead start off
converting as 8-bit and as soon as we see a character that won't
fit, we do the following:

Store the old blob pointer and previous value of i
Set the string type to 32bit and allocate space for the 32-bit blob
Copy the data so far copied from the 8bit blob into the new 32-bit blob
since it's faster than setting up the grapheme iterator again and starting
over
Free the 8-bit blob
Once that data is copied we store the grapheme which interupted our
previous iteration. Once this is done we are able to continue where
we left off with the original iterator

This greatly speeds up when we only have data that fits in 8-bits without
impacting the 32-bit strings too much.","Here instead of starting as 32-bit and then at the end converting
the already iterated 32-bit blob to 8bit, we instead start off
converting as 8-bit and as soon as we see a character that won't
fit, we do the following:

Store the old blob pointer and previous value of i
Set the string type to 32bit and allocate space for the 32-bit blob
Copy the data so far copied from the 8bit blob into the new 32-bit blob
since it's faster than setting up the grapheme iterator again and starting
over
Free the 8-bit blob
Once that data is copied we store the grapheme which interupted our
previous iteration. Once this is done we are able to continue where
we left off with the original iterator

This greatly speeds up when we only have data that fits in 8-bits without
impacting the 32-bit strings too much.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,616,2017-07-19T04:48:56Z,2017-07-20T03:03:50Z,2017-07-20T03:03:50Z,MERGED,True,21,8,1,https://github.com/samcv,Start off collapsing strands as 8bit instead of 32bit,1,[],https://github.com/MoarVM/MoarVM/pull/616,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/616#issuecomment-316272579,"Here instead of starting as 32-bit and then at the end converting
the already iterated 32-bit blob to 8bit, we instead start off
converting as 8-bit and as soon as we see a character that won't
fit, we do the following:

Store the old blob pointer and previous value of i
Set the string type to 32bit and allocate space for the 32-bit blob
Copy the data so far copied from the 8bit blob into the new 32-bit blob
since it's faster than setting up the grapheme iterator again and starting
over
Free the 8-bit blob
Once that data is copied we store the grapheme which interupted our
previous iteration. Once this is done we are able to continue where
we left off with the original iterator

This greatly speeds up when we only have data that fits in 8-bits without
impacting the 32-bit strings too much.","Here are some code and times or the new vs the old code
Code:
# 8bit test:
use nqp; nqp::indexingoptimized((""abcde"" x 100_000_000) ~ ""fo"")
32bit test:
# use nqp; nqp::indexingoptimized((""abcde"" x 100_000_000) ~ ""fo»"")
Times:
32bit times:
now: 1.0827963
before: 0.81091399

8bit times: 
now: 0.7526170
before: 1.18165355",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,616,2017-07-19T04:48:56Z,2017-07-20T03:03:50Z,2017-07-20T03:03:50Z,MERGED,True,21,8,1,https://github.com/samcv,Start off collapsing strands as 8bit instead of 32bit,1,[],https://github.com/MoarVM/MoarVM/pull/616,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/616#issuecomment-316318788,"Here instead of starting as 32-bit and then at the end converting
the already iterated 32-bit blob to 8bit, we instead start off
converting as 8-bit and as soon as we see a character that won't
fit, we do the following:

Store the old blob pointer and previous value of i
Set the string type to 32bit and allocate space for the 32-bit blob
Copy the data so far copied from the 8bit blob into the new 32-bit blob
since it's faster than setting up the grapheme iterator again and starting
over
Free the 8-bit blob
Once that data is copied we store the grapheme which interupted our
previous iteration. Once this is done we are able to continue where
we left off with the original iterator

This greatly speeds up when we only have data that fits in 8-bits without
impacting the 32-bit strings too much.","I wonder to what degree we can take the inputs being 8-bit as an indicator that this is likely to work out? Or maybe we can use a flag in the header to indicate ""known as needing 32-bit"". Probably quite a lot of tweaks we could do, but this seems fairly safe to merge now.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,616,2017-07-19T04:48:56Z,2017-07-20T03:03:50Z,2017-07-20T03:03:50Z,MERGED,True,21,8,1,https://github.com/samcv,Start off collapsing strands as 8bit instead of 32bit,1,[],https://github.com/MoarVM/MoarVM/pull/616,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/616#issuecomment-316583090,"Here instead of starting as 32-bit and then at the end converting
the already iterated 32-bit blob to 8bit, we instead start off
converting as 8-bit and as soon as we see a character that won't
fit, we do the following:

Store the old blob pointer and previous value of i
Set the string type to 32bit and allocate space for the 32-bit blob
Copy the data so far copied from the 8bit blob into the new 32-bit blob
since it's faster than setting up the grapheme iterator again and starting
over
Free the 8-bit blob
Once that data is copied we store the grapheme which interupted our
previous iteration. Once this is done we are able to continue where
we left off with the original iterator

This greatly speeds up when we only have data that fits in 8-bits without
impacting the 32-bit strings too much.",Yeah maybe it would be a good idea for us to have a flag on strings so we can choose easier and faster. That would be pretty nice. Going to merge this now because of the benefit.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,617,2017-07-19T22:57:09Z,2017-08-06T12:41:24Z,2017-08-06T12:41:24Z,MERGED,True,1,1,1,https://github.com/dwarring,attempt at a better error message for RT#126341,1,[],https://github.com/MoarVM/MoarVM/pull/617,https://github.com/dwarring,1,https://github.com/MoarVM/MoarVM/pull/617,"I got hit by the same vexing message this morning. Didn't discover the real cause until I searched the RT queue and found this ticket.
Is this wording better?","I got hit by the same vexing message this morning. Didn't discover the real cause until I searched the RT queue and found this ticket.
Is this wording better?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,617,2017-07-19T22:57:09Z,2017-08-06T12:41:24Z,2017-08-06T12:41:24Z,MERGED,True,1,1,1,https://github.com/dwarring,attempt at a better error message for RT#126341,1,[],https://github.com/MoarVM/MoarVM/pull/617,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/617#issuecomment-320504576,"I got hit by the same vexing message this morning. Didn't discover the real cause until I searched the RT queue and found this ticket.
Is this wording better?","Probably can be tweaked further, but if this would have helped you figure the problem out sooner then it's worth including.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,618,2017-07-26T14:54:11Z,2017-07-26T15:06:33Z,2017-07-26T15:06:44Z,MERGED,True,1,1,1,https://github.com/paulsmith,Fix typo in comment,1,[],https://github.com/MoarVM/MoarVM/pull/618,https://github.com/paulsmith,1,https://github.com/MoarVM/MoarVM/pull/618,Fix a misspelling.,Fix a misspelling.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,618,2017-07-26T14:54:11Z,2017-07-26T15:06:33Z,2017-07-26T15:06:44Z,MERGED,True,1,1,1,https://github.com/paulsmith,Fix typo in comment,1,[],https://github.com/MoarVM/MoarVM/pull/618,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/618#issuecomment-318082588,Fix a misspelling.,Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,619,2017-07-28T15:46:46Z,2017-08-06T12:40:09Z,2017-08-06T12:42:53Z,MERGED,True,2,4,2,https://github.com/MasterDuke17,Remove unnecessary variable in MVM_string_(ascii|latin1)_encode_substr,2,[],https://github.com/MoarVM/MoarVM/pull/619,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/619,Passes NQP's make m-test and Rakudo's make m-test m-spectest.,Passes NQP's make m-test and Rakudo's make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,623,2017-08-03T03:44:43Z,2017-08-03T22:35:23Z,2017-08-03T22:36:18Z,MERGED,True,16,0,1,https://github.com/MasterDuke17,JIT pow_I,1,[],https://github.com/MoarVM/MoarVM/pull/623,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/623,"It's slightly faster to call this from the JIT.
Passes NQP's make m-test and Rakudo's make m-test m-spectest.","It's slightly faster to call this from the JIT.
Passes NQP's make m-test and Rakudo's make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,624,2017-08-04T17:42:50Z,2017-08-04T17:43:32Z,2017-08-04T17:43:54Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Fix spelling in comments,1,[],https://github.com/MoarVM/MoarVM/pull/624,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/624,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,625,2017-08-04T19:20:23Z,2017-08-23T11:45:57Z,2017-08-23T11:45:57Z,CLOSED,False,10887,820,66,https://github.com/bdw,Merge new 'expression' JIT backend,459,[],https://github.com/MoarVM/MoarVM/pull/625,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/625,"This branch adds a new 'expression' JIT compiler backend that introduces an architecture-independent intermediate format that is intended to:

enhance portability
enable optimizations
enable type-specialized JIT code

The JIT is embedded in the base/legacy JIT compiler and is intended to fully replace it over time.
Currently, the enhancements provided by this backend are modest, and there will be cases where it is a net loss, because it relies on an optimizer (which is yet to be developed) to achieve results similar to hand-optimized assembly.
This branch also introduces significant improvements to the JIT debugging support.
If this branch is merged at this point, it does not mean that the work on this backend is completed, merely that it will be wider-tested, and that new features (such as the aforementioned optimizer and type specializer) can be developed in separate branches as smaller changes.","This branch adds a new 'expression' JIT compiler backend that introduces an architecture-independent intermediate format that is intended to:

enhance portability
enable optimizations
enable type-specialized JIT code

The JIT is embedded in the base/legacy JIT compiler and is intended to fully replace it over time.
Currently, the enhancements provided by this backend are modest, and there will be cases where it is a net loss, because it relies on an optimizer (which is yet to be developed) to achieve results similar to hand-optimized assembly.
This branch also introduces significant improvements to the JIT debugging support.
If this branch is merged at this point, it does not mean that the work on this backend is completed, merely that it will be wider-tested, and that new features (such as the aforementioned optimizer and type specializer) can be developed in separate branches as smaller changes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,625,2017-08-04T19:20:23Z,2017-08-23T11:45:57Z,2017-08-23T11:45:57Z,CLOSED,False,10887,820,66,https://github.com/bdw,Merge new 'expression' JIT backend,459,[],https://github.com/MoarVM/MoarVM/pull/625,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/625#issuecomment-324304156,"This branch adds a new 'expression' JIT compiler backend that introduces an architecture-independent intermediate format that is intended to:

enhance portability
enable optimizations
enable type-specialized JIT code

The JIT is embedded in the base/legacy JIT compiler and is intended to fully replace it over time.
Currently, the enhancements provided by this backend are modest, and there will be cases where it is a net loss, because it relies on an optimizer (which is yet to be developed) to achieve results similar to hand-optimized assembly.
This branch also introduces significant improvements to the JIT debugging support.
If this branch is merged at this point, it does not mean that the work on this backend is completed, merely that it will be wider-tested, and that new features (such as the aforementioned optimizer and type specializer) can be developed in separate branches as smaller changes.","To simplify merging this, I will split the changes to the legacy JIT into a separate branch (jit-legacy-cleanup) and rebase even-moar-jit on top of that. If jit-legacy-cleanup is merged, it will be simpler to merge even-moar-jit, since it will reduce the number of merge conflicts.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,626,2017-08-05T15:26:37Z,2017-08-15T21:23:12Z,2017-08-15T21:24:47Z,MERGED,True,232,196,10,https://github.com/MasterDuke17,Add nqp::coveragecontrol op,5,[],https://github.com/MoarVM/MoarVM/pull/626,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/626,"If MVM_COVERAGE_CONTROL is set (along with MVM_COVERAGE_LOG), line
converage has to be started with a call to nqp::coveragecontrol(1) and
can be stopped with a call to nqp::coveragecontrol(0). Additionally,
when MVM_COVERAGE_CONTROL is set the coverage report is no longer
de-duplicated.","If MVM_COVERAGE_CONTROL is set (along with MVM_COVERAGE_LOG), line
converage has to be started with a call to nqp::coveragecontrol(1) and
can be stopped with a call to nqp::coveragecontrol(0). Additionally,
when MVM_COVERAGE_CONTROL is set the coverage report is no longer
de-duplicated.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,626,2017-08-05T15:26:37Z,2017-08-15T21:23:12Z,2017-08-15T21:24:47Z,MERGED,True,232,196,10,https://github.com/MasterDuke17,Add nqp::coveragecontrol op,5,[],https://github.com/MoarVM/MoarVM/pull/626,https://github.com/timo,2,https://github.com/MoarVM/MoarVM/pull/626#issuecomment-321704893,"If MVM_COVERAGE_CONTROL is set (along with MVM_COVERAGE_LOG), line
converage has to be started with a call to nqp::coveragecontrol(1) and
can be stopped with a call to nqp::coveragecontrol(0). Additionally,
when MVM_COVERAGE_CONTROL is set the coverage report is no longer
de-duplicated.",👍,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,626,2017-08-05T15:26:37Z,2017-08-15T21:23:12Z,2017-08-15T21:24:47Z,MERGED,True,232,196,10,https://github.com/MasterDuke17,Add nqp::coveragecontrol op,5,[],https://github.com/MoarVM/MoarVM/pull/626,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/626#issuecomment-322499353,"If MVM_COVERAGE_CONTROL is set (along with MVM_COVERAGE_LOG), line
converage has to be started with a call to nqp::coveragecontrol(1) and
can be stopped with a call to nqp::coveragecontrol(0). Additionally,
when MVM_COVERAGE_CONTROL is set the coverage report is no longer
de-duplicated.",Should be good now.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,627,2017-08-05T19:16:14Z,2017-08-05T20:12:11Z,2017-08-07T09:21:03Z,MERGED,True,1,1,1,https://github.com/ilmari,Add -Werror=pointer-arith for gcc,1,[],https://github.com/MoarVM/MoarVM/pull/627,https://github.com/ilmari,1,https://github.com/MoarVM/MoarVM/pull/627,"This disables the GNU extension that allows arithmetic on pointers to
void and functions, which standard C (and MSVC) don't allow.
Also remove redundant -Wdeclaration-after-statement: -Werror=foo implies
-Wfoo.","This disables the GNU extension that allows arithmetic on pointers to
void and functions, which standard C (and MSVC) don't allow.
Also remove redundant -Wdeclaration-after-statement: -Werror=foo implies
-Wfoo.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,628,2017-08-05T21:07:44Z,2017-08-06T08:10:36Z,2017-08-06T08:10:36Z,MERGED,True,0,2,2,https://github.com/dogbert17,Remove unused vars,2,[],https://github.com/MoarVM/MoarVM/pull/628,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/628,Found with cppcheck,Found with cppcheck,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,630,2017-08-11T21:15:14Z,2017-09-22T09:01:38Z,2017-09-22T09:01:38Z,MERGED,True,56,17,1,https://github.com/the-eater,Add unix socket support,6,[],https://github.com/MoarVM/MoarVM/pull/630,https://github.com/the-eater,1,https://github.com/MoarVM/MoarVM/pull/630,"This merge add support for unix sockets, since we don't want Moar ops to change, we use the upper range from port as it's not used (port is 64 bits int, while in reality max port is 65535)","This merge add support for unix sockets, since we don't want Moar ops to change, we use the upper range from port as it's not used (port is 64 bits int, while in reality max port is 65535)",True,"{'THUMBS_UP': ['https://github.com/7ojo', 'https://github.com/samcv', 'https://github.com/Demayl']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,630,2017-08-11T21:15:14Z,2017-09-22T09:01:38Z,2017-09-22T09:01:38Z,MERGED,True,56,17,1,https://github.com/the-eater,Add unix socket support,6,[],https://github.com/MoarVM/MoarVM/pull/630,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/630#issuecomment-328178486,"This merge add support for unix sockets, since we don't want Moar ops to change, we use the upper range from port as it's not used (port is 64 bits int, while in reality max port is 65535)",Looks good overall.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,630,2017-08-11T21:15:14Z,2017-09-22T09:01:38Z,2017-09-22T09:01:38Z,MERGED,True,56,17,1,https://github.com/the-eater,Add unix socket support,6,[],https://github.com/MoarVM/MoarVM/pull/630,https://github.com/the-eater,3,https://github.com/MoarVM/MoarVM/pull/630#issuecomment-328179377,"This merge add support for unix sockets, since we don't want Moar ops to change, we use the upper range from port as it's not used (port is 64 bits int, while in reality max port is 65535)","Thanks :) but still I still need to make the IO::Socket::Async also support this, with which I was kinda fighting with, and haven't found time to work on it. may have this weekend. will try to resolve all comments also :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,630,2017-08-11T21:15:14Z,2017-09-22T09:01:38Z,2017-09-22T09:01:38Z,MERGED,True,56,17,1,https://github.com/the-eater,Add unix socket support,6,[],https://github.com/MoarVM/MoarVM/pull/630,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/630#issuecomment-328181464,"This merge add support for unix sockets, since we don't want Moar ops to change, we use the upper range from port as it's not used (port is 64 bits int, while in reality max port is 65535)","Cool, thanks. A separate PR for the async sockets after this one would be better anyway; easier to review one at a time. 👍",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,630,2017-08-11T21:15:14Z,2017-09-22T09:01:38Z,2017-09-22T09:01:38Z,MERGED,True,56,17,1,https://github.com/the-eater,Add unix socket support,6,[],https://github.com/MoarVM/MoarVM/pull/630,https://github.com/the-eater,5,https://github.com/MoarVM/MoarVM/pull/630#issuecomment-331390495,"This merge add support for unix sockets, since we don't want Moar ops to change, we use the upper range from port as it's not used (port is 64 bits int, while in reality max port is 65535)","@jnthn should be fixed now, only 1 check fails because apt fails .-.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,630,2017-08-11T21:15:14Z,2017-09-22T09:01:38Z,2017-09-22T09:01:38Z,MERGED,True,56,17,1,https://github.com/the-eater,Add unix socket support,6,[],https://github.com/MoarVM/MoarVM/pull/630,https://github.com/jnthn,6,https://github.com/MoarVM/MoarVM/pull/630#issuecomment-331392465,"This merge add support for unix sockets, since we don't want Moar ops to change, we use the upper range from port as it's not used (port is 64 bits int, while in reality max port is 65535)","Thanks, looks good to me. 👍",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,631,2017-08-12T17:06:26Z,2017-09-08T18:15:08Z,2017-09-08T21:32:15Z,MERGED,True,17,3,1,https://github.com/MasterDuke17,Alloc proc read buffer based on amount last read,4,[],https://github.com/MoarVM/MoarVM/pull/631,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/631,"Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the SpawnInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.
For https://gist.github.com/MasterDuke17/685b627a6a2749483dc5ec09c6a777a4
with only 5 iterations, compared to HEAD, heaptrack reports 654m ""bytes allocated in total""
instead of 1.1g, 255m peak memory consumption instead of 387m, and on_alloc in
""most memory allocated"" using 4.4m instead of 480m.","Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the SpawnInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.
For https://gist.github.com/MasterDuke17/685b627a6a2749483dc5ec09c6a777a4
with only 5 iterations, compared to HEAD, heaptrack reports 654m ""bytes allocated in total""
instead of 1.1g, 255m peak memory consumption instead of 387m, and on_alloc in
""most memory allocated"" using 4.4m instead of 480m.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,631,2017-08-12T17:06:26Z,2017-09-08T18:15:08Z,2017-09-08T21:32:15Z,MERGED,True,17,3,1,https://github.com/MasterDuke17,Alloc proc read buffer based on amount last read,4,[],https://github.com/MoarVM/MoarVM/pull/631,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/631#issuecomment-322011438,"Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the SpawnInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.
For https://gist.github.com/MasterDuke17/685b627a6a2749483dc5ec09c6a777a4
with only 5 iterations, compared to HEAD, heaptrack reports 654m ""bytes allocated in total""
instead of 1.1g, 255m peak memory consumption instead of 387m, and on_alloc in
""most memory allocated"" using 4.4m instead of 480m.",Wouldn't this be obsoleted by further implementing $*DEFAULT-READ-ELEMS?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,631,2017-08-12T17:06:26Z,2017-09-08T18:15:08Z,2017-09-08T21:32:15Z,MERGED,True,17,3,1,https://github.com/MasterDuke17,Alloc proc read buffer based on amount last read,4,[],https://github.com/MoarVM/MoarVM/pull/631,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/631#issuecomment-328176739,"Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the SpawnInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.
For https://gist.github.com/MasterDuke17/685b627a6a2749483dc5ec09c6a777a4
with only 5 iterations, compared to HEAD, heaptrack reports 654m ""bytes allocated in total""
instead of 1.1g, 255m peak memory consumption instead of 387m, and on_alloc in
""most memory allocated"" using 4.4m instead of 480m.","Even if $*DEFAULT-READ-ELEMS were made to affect this some day, it'd still not provide automatic tuning as we achieve here. So I don't think it's either-or. (I'm not quite sure if $*DEFAULT-READ-ELEMS should affect this or not.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,632,2017-08-13T02:49:58Z,2021-07-16T02:05:02Z,2021-07-16T02:05:03Z,CLOSED,False,15,1,1,https://github.com/MasterDuke17,Alloc asyncsocket read buffer based on amount last read,2,[],https://github.com/MoarVM/MoarVM/pull/632,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/632,"Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the ReadInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.","Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the ReadInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,632,2017-08-13T02:49:58Z,2021-07-16T02:05:02Z,2021-07-16T02:05:03Z,CLOSED,False,15,1,1,https://github.com/MasterDuke17,Alloc asyncsocket read buffer based on amount last read,2,[],https://github.com/MoarVM/MoarVM/pull/632,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/632#issuecomment-328177503,"Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the ReadInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.","I'm not quite sure if this has so much value with sockets as it has with processes. With processes, line buffered output is pretty common and so we want to tune it down. But incoming packet sizes will typically be far more noisy, and the last one is likely not a particularly good indicator for the next one in plenty of common traffic patterns I've seen. So I'm a bit reluctant on this one.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,632,2017-08-13T02:49:58Z,2021-07-16T02:05:02Z,2021-07-16T02:05:03Z,CLOSED,False,15,1,1,https://github.com/MasterDuke17,Alloc asyncsocket read buffer based on amount last read,2,[],https://github.com/MoarVM/MoarVM/pull/632,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/632#issuecomment-328177581,"Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the ReadInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.","Oops, didn't mean to close it; happy for further input/discussion.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,632,2017-08-13T02:49:58Z,2021-07-16T02:05:02Z,2021-07-16T02:05:03Z,CLOSED,False,15,1,1,https://github.com/MasterDuke17,Alloc asyncsocket read buffer based on amount last read,2,[],https://github.com/MoarVM/MoarVM/pull/632,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/632#issuecomment-328222452,"Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the ReadInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.",@jnthn thanks for looking. Do you have any suggestions for what to benchmark it with?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,632,2017-08-13T02:49:58Z,2021-07-16T02:05:02Z,2021-07-16T02:05:03Z,CLOSED,False,15,1,1,https://github.com/MasterDuke17,Alloc asyncsocket read buffer based on amount last read,2,[],https://github.com/MoarVM/MoarVM/pull/632,https://github.com/jnthn,5,https://github.com/MoarVM/MoarVM/pull/632#issuecomment-328636746,"Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the ReadInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.",@MasterDuke17 Consider a persistent HTTP session. Responses will have highly variable sizes.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,632,2017-08-13T02:49:58Z,2021-07-16T02:05:02Z,2021-07-16T02:05:03Z,CLOSED,False,15,1,1,https://github.com/MasterDuke17,Alloc asyncsocket read buffer based on amount last read,2,[],https://github.com/MoarVM/MoarVM/pull/632,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/632#issuecomment-881122663,"Instead of using the suggested_size (which is almost always 65536
according to http://docs.libuv.org/en/v1.x/handle.html#data-types), use
the next power of two greater than the amount last read (which has been
added to the ReadInfo struct).
Passes NQP's make m-test and Rakudo's make m-test m-spectest.","I never could find a compelling enough benchmark for this, so closing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,633,2017-08-13T06:08:52Z,2017-08-17T13:00:32Z,2017-08-17T13:00:33Z,MERGED,True,0,1,1,https://github.com/markmont,Make sure libffi callbacks can be reused.,1,[],https://github.com/MoarVM/MoarVM/pull/633,https://github.com/markmont,1,https://github.com/MoarVM/MoarVM/pull/633,"Rakudo test t/04-nativecall/21-callback-other-thread.t tests 2..9
fail with a segmentation fault or glibc error (double free or
malloc() problem) when MoarVM is built with --has-libffi.
The problem is due to the callback handler freeing the memory for
its first argument (the libffi call interface, cif).  Doing this
makes the callback not reusable (the callback still exists in
tc->native_callback_cache).  Fix the problem by not freeing
the memory.","Rakudo test t/04-nativecall/21-callback-other-thread.t tests 2..9
fail with a segmentation fault or glibc error (double free or
malloc() problem) when MoarVM is built with --has-libffi.
The problem is due to the callback handler freeing the memory for
its first argument (the libffi call interface, cif).  Doing this
makes the callback not reusable (the callback still exists in
tc->native_callback_cache).  Fix the problem by not freeing
the memory.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,633,2017-08-13T06:08:52Z,2017-08-17T13:00:32Z,2017-08-17T13:00:33Z,MERGED,True,0,1,1,https://github.com/markmont,Make sure libffi callbacks can be reused.,1,[],https://github.com/MoarVM/MoarVM/pull/633,https://github.com/markmont,2,https://github.com/MoarVM/MoarVM/pull/633#issuecomment-322024132,"Rakudo test t/04-nativecall/21-callback-other-thread.t tests 2..9
fail with a segmentation fault or glibc error (double free or
malloc() problem) when MoarVM is built with --has-libffi.
The problem is due to the callback handler freeing the memory for
its first argument (the libffi call interface, cif).  Doing this
makes the callback not reusable (the callback still exists in
tc->native_callback_cache).  Fix the problem by not freeing
the memory.","It looks like the native callback cache is never destroyed, is this correct?
For each entry in the cache, *types and target are garbage collected, but
not cb.  If cb is not GC'd (dcbFreeCallback() does not get called on it
in nativecall_dyncall.c), then cif should not be either
(in nativecall_libffi.c).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,634,2017-08-14T01:36:09Z,2017-08-15T12:13:37Z,2017-08-15T12:13:37Z,MERGED,True,2,0,1,https://github.com/markmont,check ffi_closure_alloc() return value,3,[],https://github.com/MoarVM/MoarVM/pull/634,https://github.com/markmont,1,https://github.com/MoarVM/MoarVM/pull/634,"It's possible for the call to ffi_closure_alloc() to return NULL when unmarshalling a callback.  Check for this and panic if it happens.
This change doesn't solve any real-world issue, it's just a small code cleanup.","It's possible for the call to ffi_closure_alloc() to return NULL when unmarshalling a callback.  Check for this and panic if it happens.
This change doesn't solve any real-world issue, it's just a small code cleanup.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,635,2017-08-14T15:01:06Z,2017-08-14T15:06:02Z,2017-08-14T15:06:19Z,MERGED,True,1,1,1,https://github.com/vendethiel,Fix typo in MVM_6model_container_atomic_store,1,[],https://github.com/MoarVM/MoarVM/pull/635,https://github.com/vendethiel,1,https://github.com/MoarVM/MoarVM/pull/635,"In containers.c
The function checked for cs->atomic_load being present, but then went on using cs->atomic_store.","In containers.c
The function checked for cs->atomic_load being present, but then went on using cs->atomic_store.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,635,2017-08-14T15:01:06Z,2017-08-14T15:06:02Z,2017-08-14T15:06:19Z,MERGED,True,1,1,1,https://github.com/vendethiel,Fix typo in MVM_6model_container_atomic_store,1,[],https://github.com/MoarVM/MoarVM/pull/635,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/635#issuecomment-322215852,"In containers.c
The function checked for cs->atomic_load being present, but then went on using cs->atomic_store.",Nice catch!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,637,2017-08-14T16:12:16Z,2017-08-14T16:15:09Z,2017-08-14T16:16:13Z,MERGED,True,20,22,1,https://github.com/MasterDuke17,"Cleanup typos, formatting, etc in comments",1,[],https://github.com/MoarVM/MoarVM/pull/637,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/637,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,638,2017-08-14T16:32:34Z,2017-09-03T14:36:48Z,2017-09-03T14:39:02Z,MERGED,True,8,8,1,https://github.com/MasterDuke17,"Clean up typos, formatting, etc in comments",1,[],https://github.com/MoarVM/MoarVM/pull/638,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/638,"It looks like the last sentence in the comment starting on line 427 is incomplete, but I'm not sure how it should be finished.","It looks like the last sentence in the comment starting on line 427 is incomplete, but I'm not sure how it should be finished.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,639,2017-08-14T16:43:22Z,2017-08-14T16:47:47Z,2017-08-14T16:51:55Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,"Cleanup typos, formatting, etc in comments",1,[],https://github.com/MoarVM/MoarVM/pull/639,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/639,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,640,2017-08-14T16:44:32Z,2017-08-14T16:47:22Z,2017-08-14T16:51:50Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Cleanup typo in comments,1,[],https://github.com/MoarVM/MoarVM/pull/640,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/640,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,641,2017-08-14T16:49:26Z,2017-08-14T18:32:12Z,2017-08-14T18:36:09Z,MERGED,True,12,12,1,https://github.com/MasterDuke17,"Cleanup typos, formatting, etc in comments",1,[],https://github.com/MoarVM/MoarVM/pull/641,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/641,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,642,2017-08-14T16:51:39Z,2017-08-14T18:32:43Z,2017-08-14T18:36:13Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,"Cleanup typos, formatting, etc in comments",1,[],https://github.com/MoarVM/MoarVM/pull/642,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/642,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,643,2017-08-15T02:28:01Z,2017-08-17T13:29:12Z,2017-08-17T13:29:12Z,CLOSED,False,30,7,2,https://github.com/markmont,"Add W->!X JIT support for NetBSD 8, SELinux with deny_execmem, PaX",1,[],https://github.com/MoarVM/MoarVM/pull/643,https://github.com/markmont,1,https://github.com/MoarVM/MoarVM/pull/643,"When MoarVM is compiled with --has-libffi, make the code produced by
the JIT compiler writable at an address but then never executable
through the same address (W->!X).
This allows MoarVM to be installed and used on systems that enforce
W->!X without any special filesystem permissions (NetBSD 8) or
writing special security policy (SELinux with deny_execmem). This
does not offer additional security beyond what is provided by
default when MoarVM uses mprotect(); it just makes MoarVM easier to
install and use on systems that require W->!X.","When MoarVM is compiled with --has-libffi, make the code produced by
the JIT compiler writable at an address but then never executable
through the same address (W->!X).
This allows MoarVM to be installed and used on systems that enforce
W->!X without any special filesystem permissions (NetBSD 8) or
writing special security policy (SELinux with deny_execmem). This
does not offer additional security beyond what is provided by
default when MoarVM uses mprotect(); it just makes MoarVM easier to
install and use on systems that require W->!X.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,643,2017-08-15T02:28:01Z,2017-08-17T13:29:12Z,2017-08-17T13:29:12Z,CLOSED,False,30,7,2,https://github.com/markmont,"Add W->!X JIT support for NetBSD 8, SELinux with deny_execmem, PaX",1,[],https://github.com/MoarVM/MoarVM/pull/643,https://github.com/markmont,2,https://github.com/MoarVM/MoarVM/pull/643#issuecomment-322360543,"When MoarVM is compiled with --has-libffi, make the code produced by
the JIT compiler writable at an address but then never executable
through the same address (W->!X).
This allows MoarVM to be installed and used on systems that enforce
W->!X without any special filesystem permissions (NetBSD 8) or
writing special security policy (SELinux with deny_execmem). This
does not offer additional security beyond what is provided by
default when MoarVM uses mprotect(); it just makes MoarVM easier to
install and use on systems that require W->!X.","To implement W->!X on systems where it is necessary, libffi will
create and unlink a temporary file which gets mapped to two separate
addresses, one address writable and one executable.  Only a single
file and file descriptor is used regardless of how many pieces of
JIT code are compiled.
On systems where W->!X is not necessary, libffi will use mprotect()
or just regular malloc().
The libffi function that implements W->!X, ffi_closure_alloc(), is
already used in MoarVM to implement nativecall callbacks when MoarVM
is compiled with --has-libffi.  Using ffi_closure_alloc() again for
for JIT compilation does not increase the risk as far as the temp
file creation is concerned, especially since libffi will use
O_TMPFILE on systems and filesystems which support it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,643,2017-08-15T02:28:01Z,2017-08-17T13:29:12Z,2017-08-17T13:29:12Z,CLOSED,False,30,7,2,https://github.com/markmont,"Add W->!X JIT support for NetBSD 8, SELinux with deny_execmem, PaX",1,[],https://github.com/MoarVM/MoarVM/pull/643,https://github.com/bdw,3,https://github.com/MoarVM/MoarVM/pull/643#issuecomment-322812008,"When MoarVM is compiled with --has-libffi, make the code produced by
the JIT compiler writable at an address but then never executable
through the same address (W->!X).
This allows MoarVM to be installed and used on systems that enforce
W->!X without any special filesystem permissions (NetBSD 8) or
writing special security policy (SELinux with deny_execmem). This
does not offer additional security beyond what is provided by
default when MoarVM uses mprotect(); it just makes MoarVM easier to
install and use on systems that require W->!X.","Hi.
First of all, let me say that I very much appreciate the effort you put into working this out, and that I fully support the notion that user experience for MoarVM users on all platforms should be as frictionless as possible.
Unfortunately I feel like I must object to this patch as it is, on the following grounds:

I'm very worried about introducing separate behaviour to the JIT compiler based not on any compilation flag which we might set on the JIT itself but rather on a third-party library the user has chosen to install. This feels strongly like dangerous and opaque action at a distance to me, not to mention tight coupling between this and an unrelated library, that we might have to support now for a long time.

I'd much prefer this behaviour to be defined with it's own compilation flag and documentation, e..g --jit-use-dualmap or something. And perhaps refactor this into an API that doesn't expose switching permissions on the same memory, but rather allows an 'exchange' between writeable and executable memory, which would amount to a mprotect on normal systems, and a dualmap-dance on 'hardened' systems.


Strictly speaking this introduces a potential security issue for us, since we now have a writeable and executable pointer to the same memory, and updates between the two are shared. That is not currently the case, and I especially don't feel well about introducing that for users that don't see any benefit.
We rely on the function ffi_closure_alloc and ffi_closure_free, both of which have three separate implementations in libffi (1, 2, 3), the first of which is not compatible with the usage here (the trampoline section is a fixed-size structure within another structure, and which appears to be compiled on __mach__ exporting platforms, i.e. mac os x. Or at least, that is how it looks like to me.
For the second implementation (which I think is what we will actually run on most systems) I can't readily figure out how it works based on reading  the dlmalloc source code. This worries me, dualmapping should not be hard, see this example on stack overflow.
If a user is working on a 'hardened' system that should prevent the execution of program-written memory, then I can't see how writing to a (temporary/unlinked) file or shared memory, and then mapping that as executable, is going to keep that security expectation. Indeed the fact that a user runs a W!->X system would seem to be inconsistent with  them caring much about JIT-compiler optimized performance, and hacking around it by dualmapping or any other method seems like the antisocial thing to do.

More to the point, the speed advantage of using the JIT is currently not so great that perl6 becomes unusable without it.


Both SELinux and NetBSD provide escape mechanisms to users that do care about JIT performance after all. It seems that the path of least surprise for these users is to document the issue and list possible solutions, potentially adding them to the build system.

Although arguably that may also be 'antisocial'.



So unfortunately I cannot support this PR as is.
I will not 'veto' it - it is not in my power to do so, and I don't want that power - but I hope you can see my points, and maybe we can find another way to help these users.
Thanks again for your effort.",True,{'THUMBS_UP': ['https://github.com/b2gills']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,643,2017-08-15T02:28:01Z,2017-08-17T13:29:12Z,2017-08-17T13:29:12Z,CLOSED,False,30,7,2,https://github.com/markmont,"Add W->!X JIT support for NetBSD 8, SELinux with deny_execmem, PaX",1,[],https://github.com/MoarVM/MoarVM/pull/643,https://github.com/markmont,4,https://github.com/MoarVM/MoarVM/pull/643#issuecomment-322830591,"When MoarVM is compiled with --has-libffi, make the code produced by
the JIT compiler writable at an address but then never executable
through the same address (W->!X).
This allows MoarVM to be installed and used on systems that enforce
W->!X without any special filesystem permissions (NetBSD 8) or
writing special security policy (SELinux with deny_execmem). This
does not offer additional security beyond what is provided by
default when MoarVM uses mprotect(); it just makes MoarVM easier to
install and use on systems that require W->!X.","Hi, Bart -- thanks for your long and thoughtful response.  I'm willing to re-implement libffi's closures.c and dlmalloc.c in MoarVM and craft the API to do the 'exchange' between writable and executable memory as you describe above, if there is general consensus that this is the best thing to do and the code will be accepted into MoarVM.  I'll wait for the consensus before beginning since this would be significant work that would have to be done outside of my $dayjob.
Here are a few comments on your comments:

Regarding introducing a potential security issue: There is significant disagreement on this, but, according to the NetBSD and SELinux security experts, having two different addresses (one writable, one executable) is preferable to having a single address that starts writable and is later changed to executable, due to race conditions and other concerns (1, 2, 3).
The following two points are important since if I reimplement the libffi functionality in MoarVM, they would likely pertain to MoarVM's implementation, too:

The most appropriate of the three implementations of ffi_closure_alloc and ffi_closure_free is chosen at the time libffi is compiled, based on the security requirements of the target system.  The choices include just using malloc/free, using mprotect, and using dual mapping of a temp file.  This has the advantage that libffi won't do things which are more complicated than necessary -- the writable and executable addresses will be the same and dual mapping won't be used unless the program is running on a platform where dual mapping is necessary.
The mapped regions are set up by dlmmap_locked which is only a little more complicated than the StackOverflow example you provided.  dlmmap_locked is called by dlmmap only if the system security requires it; dlmmap in turn is called from dlmalloc.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,643,2017-08-15T02:28:01Z,2017-08-17T13:29:12Z,2017-08-17T13:29:12Z,CLOSED,False,30,7,2,https://github.com/markmont,"Add W->!X JIT support for NetBSD 8, SELinux with deny_execmem, PaX",1,[],https://github.com/MoarVM/MoarVM/pull/643,https://github.com/bdw,5,https://github.com/MoarVM/MoarVM/pull/643#issuecomment-323055703,"When MoarVM is compiled with --has-libffi, make the code produced by
the JIT compiler writable at an address but then never executable
through the same address (W->!X).
This allows MoarVM to be installed and used on systems that enforce
W->!X without any special filesystem permissions (NetBSD 8) or
writing special security policy (SELinux with deny_execmem). This
does not offer additional security beyond what is provided by
default when MoarVM uses mprotect(); it just makes MoarVM easier to
install and use on systems that require W->!X.","Hi Mark,
Thanks for the links, they are very interesting. I'll be honest, the stance of some developers and/or security experts make my blood boil.... but that is a discussion best left to another day!
There is one minor but important detail that we have glossed over so far. The papers and/or solutions all seem to presume that we require run-time updates of the generated code. The spidermonkey JIT does this. This is not true for the MoarVM JIT. Once executable, it is never made writeable again, not by any thread.
The argument that a 'bad guy' can use a call to mprotect to made memory read-writeable again is also suspicious.... For that to work, the attacker has to:

Overwrite the stack (presumably by a stack-buffer-overflow) to insert an mprotect, and overwrite registers so that the arguments are just so that mprotect does what you mean.
And overwrite the heap (presumably by a heap-buffer overflow, but there are other ways...) to overwrite the now-writeable JIT memory. Before this code is ever entered again, because then the program won't work.
And overwrite the stack further so that the same memory is now executable again.

This is becoming a really difficult attack, I think.
On the other hand, if I have a (shared) mapping between a RW and RX piece of memory, all I need to do is find one heap-buffer-overflow - and keep on writing until I happen to find a writeable memory region that happens to be shared-mapped to an executable memory. And then I'm golden, because I now just have to wait until the interpreter enters that code. And both are reasonably probable, because a significant part of my memory region are going to represent compiled code. We could protect against that by surrounding the writeable memory with a region PROT_NONE so we get a segmentation violation, but even that is not going to be safe.
Furthermore, if I generate a private file with mkstemp as given in this example then I can not prevent another process from opening the file before I unlink it, and once the other process has an open file descriptor, I'm not sure how I'm going to prevent them from writing there, or mapping it themselves. I guess I could try and protect against that with file locking, but that would then set me up for a denial-of-service attack......
So I think you'll see why I think having RW/RX toggling is by far the preferred option on all platforms that support it.
Anyway, on to the more productive part of the discussion:

As mentioned before, I'd be fine with this patch being contained in its own API, e.g. a MVMJitExecMem structure, potentially embedded into the MVMJitCode structure, and such methods:

void MVM_jit_execmem_init(MVMThreadContext *tc, MVMJitExecMem *exec_mem, size_t size);
void * MVM_jit_execmem_get_writeable(MVMThreadContext *tc, MVMJitExecMem *exec_mem);
void * MVM_jit_execmem_get_executable(MVMThreadContext *tc, MVMJitExecMem *exec_mem);
void MVM_jit_execmem_deinit(MVMThreadContext *tc, MVMJItExecMem *exec_mem);


If we did that, I'd like to have a separate configuration flag and definition flag to switch to it. I'm partial to --jit-security-theater and #ifdef MVM_JIT_SECURITY_THEATER but that might be needlessly provocative.
If we have the code 'contained' like this, I'm okay with using the libffi ffi_closure_alloc function, but I'd prefer a handrolled solution that took into account the fact that we don't in fact need writeable memory, so we can do:

    fd = mkstemp(pattern);
    /* ... */
    void * writeable = malloc(code_size);
    dasm_encode(&dasm_state, writeable);
    for (left = code_size; left >= 0; left -= written) {
        written = write(fd, writeable, code_size);
        if (written < 0) { die(errno); } /* etc */
    }
    /* and only then */
    executable = mmap(NULL, code_size, PROT_READ|PROT_EXEC, MAP_PRIVATE, fd, 0);
    /* because there is really no reason to have it writeable */
    fclose(fd);

Or indeed any other such scheme that avoids having a read-writeable mapping active at the same time. Alternatively - as a 'performance improvement', we could map multiple executable segments on the same file descriptor, using the offset argument to mmap.
Again, thanks for bringing this to our attention, and for all the effort you've put in so far. I really appreciate it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,643,2017-08-15T02:28:01Z,2017-08-17T13:29:12Z,2017-08-17T13:29:12Z,CLOSED,False,30,7,2,https://github.com/markmont,"Add W->!X JIT support for NetBSD 8, SELinux with deny_execmem, PaX",1,[],https://github.com/MoarVM/MoarVM/pull/643,https://github.com/markmont,6,https://github.com/MoarVM/MoarVM/pull/643#issuecomment-323073666,"When MoarVM is compiled with --has-libffi, make the code produced by
the JIT compiler writable at an address but then never executable
through the same address (W->!X).
This allows MoarVM to be installed and used on systems that enforce
W->!X without any special filesystem permissions (NetBSD 8) or
writing special security policy (SELinux with deny_execmem). This
does not offer additional security beyond what is provided by
default when MoarVM uses mprotect(); it just makes MoarVM easier to
install and use on systems that require W->!X.","Per discussion in IRC, I'm closing this PR and will submit a new one in a week or so that abstracts out the W^X functionality for both the libffi dual-mapping case and the no-libffi mprotect case, behind a clean API.  This will keep ifdef's out of the JIT code and allow us to more easily in-source the functionality someday if we ever want to get away from libffi.
The new PR will also provide an explicit way to enable/disable W->!X dual-mapping, either via a Configure.pl flag and/or environment variable.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,644,2017-08-15T15:53:23Z,2017-08-15T16:18:34Z,2017-08-15T16:23:30Z,CLOSED,False,1,1,1,https://github.com/MasterDuke17,Fix typo,1,[],https://github.com/MoarVM/MoarVM/pull/644,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/644,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,644,2017-08-15T15:53:23Z,2017-08-15T16:18:34Z,2017-08-15T16:23:30Z,CLOSED,False,1,1,1,https://github.com/MasterDuke17,Fix typo,1,[],https://github.com/MoarVM/MoarVM/pull/644,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/644#issuecomment-322514829,,"Conflicted after other changes, but done the equivalent fix.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,645,2017-08-15T21:09:38Z,2017-08-15T21:24:04Z,2017-08-15T21:24:24Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Fix what I believe is a typo in a comment,1,[],https://github.com/MoarVM/MoarVM/pull/645,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/645,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,646,2017-08-15T23:57:16Z,2017-08-17T16:02:14Z,2017-08-17T22:03:53Z,MERGED,True,0,4,1,https://github.com/MasterDuke17,Remove impossible check,1,[],https://github.com/MoarVM/MoarVM/pull/646,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/646,"n is an MVMuint64, so it can never be negative.","n is an MVMuint64, so it can never be negative.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,647,2017-08-16T00:02:49Z,2017-08-17T16:02:33Z,2017-08-17T22:03:57Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Remove impossible check,1,[],https://github.com/MoarVM/MoarVM/pull/647,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/647,"slot is a size_t, so it can never be negative.","slot is a size_t, so it can never be negative.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,648,2017-08-16T07:40:52Z,2017-08-23T21:55:51Z,2017-08-23T21:55:52Z,MERGED,True,58,3,1,https://github.com/samcv,Implement the Knuth-Morris-Pratt string search algorithm,8,[],https://github.com/MoarVM/MoarVM/pull/648,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/648,"We use this in MVM_string_index for:

Strings with non-matching types
** That have more than one codepoint in the needle
** That don't have a needle more than 100 graphemes long","We use this in MVM_string_index for:

Strings with non-matching types
** That have more than one codepoint in the needle
** That don't have a needle more than 100 graphemes long",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,648,2017-08-16T07:40:52Z,2017-08-23T21:55:51Z,2017-08-23T21:55:52Z,MERGED,True,58,3,1,https://github.com/samcv,Implement the Knuth-Morris-Pratt string search algorithm,8,[],https://github.com/MoarVM/MoarVM/pull/648,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/648#issuecomment-324415389,"We use this in MVM_string_index for:

Strings with non-matching types
** That have more than one codepoint in the needle
** That don't have a needle more than 100 graphemes long","@bdw the reason for the max pattern length is that the longer the pattern, the more space we have to allocate on the stack for the jump table (which is the same length as the needle itself). So it will take extra time to process the pattern before starting the search. I'm not sure what limits we should have on the length of the pattern, and eventually we may be able to only process the start of the needle and only process the rest of the needle in case we find a match for that length of the needle (so we can avoid having to process a very long needle in full, when that needle may not end up matching).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,648,2017-08-16T07:40:52Z,2017-08-23T21:55:51Z,2017-08-23T21:55:52Z,MERGED,True,58,3,1,https://github.com/samcv,Implement the Knuth-Morris-Pratt string search algorithm,8,[],https://github.com/MoarVM/MoarVM/pull/648,https://github.com/bdw,3,https://github.com/MoarVM/MoarVM/pull/648#issuecomment-324437989,"We use this in MVM_string_index for:

Strings with non-matching types
** That have more than one codepoint in the needle
** That don't have a needle more than 100 graphemes long","Cool, that makes sense.
On the other hand, I'd think the win for this would be most with a relatively long needle and a much longer haystack. Because the bigger the needle, the greater the possible skip will be. So maybe the ratio could be a good heuristic?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,648,2017-08-16T07:40:52Z,2017-08-23T21:55:51Z,2017-08-23T21:55:52Z,MERGED,True,58,3,1,https://github.com/samcv,Implement the Knuth-Morris-Pratt string search algorithm,8,[],https://github.com/MoarVM/MoarVM/pull/648,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/648#issuecomment-324473554,"We use this in MVM_string_index for:

Strings with non-matching types
** That have more than one codepoint in the needle
** That don't have a needle more than 100 graphemes long","@bdw hmm we could maybe move to ratio eventually. I did some tests and above 10,000 length needle, and a 100,000 length haystack, it takes more time to do the KMP algorithm. Though taking the time to flatten the needle could be contributing to that, so what I would recommend is for us to figure out when flattening the needle is not worth it time wise, and then once we have a cutoff regarding that, to then figure out some ratio for deciding if processing the whole needle is worth it or not.
For now i'm setting the max pattern size at 4069 as it's a little less than half the 10,000 mark which the KMP algorithm started to not be faster.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,649,2017-08-18T03:43:26Z,2017-08-18T05:55:57Z,2017-08-18T21:37:53Z,MERGED,True,3,2,1,https://github.com/MasterDuke17,Add hostname to failed to resolve error,1,[],https://github.com/MoarVM/MoarVM/pull/649,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/649,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,649,2017-08-18T03:43:26Z,2017-08-18T05:55:57Z,2017-08-18T21:37:53Z,MERGED,True,3,2,1,https://github.com/MasterDuke17,Add hostname to failed to resolve error,1,[],https://github.com/MoarVM/MoarVM/pull/649,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/649#issuecomment-323266470,,Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,650,2017-08-18T12:51:03Z,2017-08-18T12:51:40Z,2017-08-18T13:10:06Z,MERGED,True,0,4,1,https://github.com/duke-m,removing test that will always fail,1,[],https://github.com/MoarVM/MoarVM/pull/650,https://github.com/duke-m,1,https://github.com/MoarVM/MoarVM/pull/650,MVMuint64 (uint64) will always be positive,MVMuint64 (uint64) will always be positive,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,652,2017-08-19T00:52:40Z,2017-08-23T17:55:16Z,2017-08-23T19:46:48Z,MERGED,True,2,1,1,https://github.com/MasterDuke17,Add error string to 'failed to resolve' exception,2,[],https://github.com/MoarVM/MoarVM/pull/652,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/652,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,652,2017-08-19T00:52:40Z,2017-08-23T17:55:16Z,2017-08-23T19:46:48Z,MERGED,True,2,1,1,https://github.com/MasterDuke17,Add error string to 'failed to resolve' exception,2,[],https://github.com/MoarVM/MoarVM/pull/652,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/652#issuecomment-324221346,,Updated.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,655,2017-08-20T20:26:47Z,2017-08-21T08:40:10Z,2017-08-21T08:40:13Z,MERGED,True,9,22,2,https://github.com/bdw,Fix new jit ops win32,2,[],https://github.com/MoarVM/MoarVM/pull/655,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/655,"Timotimo++ fixed the assembly.
param_rp_i and param_rp_o still can't be JITted cross-platform","Timotimo++ fixed the assembly.
param_rp_i and param_rp_o still can't be JITted cross-platform",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,656,2017-08-23T02:09:42Z,2017-08-23T05:41:02Z,2017-08-23T19:46:36Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,"== was a no-op, correct it to an =",1,[],https://github.com/MoarVM/MoarVM/pull/656,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/656,"This was the typo @coke++ found, just getting a PR in so it doesn't slip through the cracks. NQP passes make m-test and Rakudo passes make m-test m-spectest.","This was the typo @coke++ found, just getting a PR in so it doesn't slip through the cracks. NQP passes make m-test and Rakudo passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,657,2017-08-23T02:22:35Z,2017-09-03T01:06:34Z,2017-09-03T01:06:35Z,MERGED,True,58,88,7,https://github.com/samcv,Rework MVMNFGSynthetic to not store base separately,3,[],https://github.com/MoarVM/MoarVM/pull/657,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/657,"This is done to (eventually) get Prepend support working. Unlike
all other marks which come after a base character, Prepend characters
come before the base character. All of our current code assumed the
first codepoint of the synthetic is the base character.
For now, we also assume the first codepoint of the synthetic is the
base character, but we now have a base_index which will be able to hold
the index of the base character in the codepoint array.
While this doesn't add Prepend support to everything, this is one step
toward getting that working, and decoupling base codepoints from being
the first codepoint of a synthetic.","This is done to (eventually) get Prepend support working. Unlike
all other marks which come after a base character, Prepend characters
come before the base character. All of our current code assumed the
first codepoint of the synthetic is the base character.
For now, we also assume the first codepoint of the synthetic is the
base character, but we now have a base_index which will be able to hold
the index of the base character in the codepoint array.
While this doesn't add Prepend support to everything, this is one step
toward getting that working, and decoupling base codepoints from being
the first codepoint of a synthetic.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,658,2017-08-23T15:32:46Z,2017-08-28T20:17:13Z,2017-08-28T20:17:13Z,MERGED,True,1,1,1,https://github.com/pmurias,Avoid evaluating arguments to MVM_ASSERT_NOT_FROMSPACE ,1,[],https://github.com/MoarVM/MoarVM/pull/658,https://github.com/pmurias,1,https://github.com/MoarVM/MoarVM/pull/658,Don't evaluate those arguments when the macro is disabled. This prevents compiler warnings.,Don't evaluate those arguments when the macro is disabled. This prevents compiler warnings.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,659,2017-08-23T16:27:34Z,,2018-11-04T23:42:31Z,OPEN,False,262,219,7,https://github.com/Skarsnik,Add a source_address parameter to the connect instruction.,3,[],https://github.com/MoarVM/MoarVM/pull/659,https://github.com/Skarsnik,1,https://github.com/MoarVM/MoarVM/pull/659,"For IO::Socket::INET, to allow the user to specify on what local address he wants to connect from.","For IO::Socket::INET, to allow the user to specify on what local address he wants to connect from.",True,"{'HEART': ['https://github.com/AlexDaniel', 'https://github.com/Kaiepi']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,659,2017-08-23T16:27:34Z,,2018-11-04T23:42:31Z,OPEN,False,262,219,7,https://github.com/Skarsnik,Add a source_address parameter to the connect instruction.,3,[],https://github.com/MoarVM/MoarVM/pull/659,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/659#issuecomment-324420092,"For IO::Socket::INET, to allow the user to specify on what local address he wants to connect from.","What about source_port? Also, if we add source_port, then maybe it should be source-host&source-port in rakudo?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,659,2017-08-23T16:27:34Z,,2018-11-04T23:42:31Z,OPEN,False,262,219,7,https://github.com/Skarsnik,Add a source_address parameter to the connect instruction.,3,[],https://github.com/MoarVM/MoarVM/pull/659,https://github.com/Skarsnik,3,https://github.com/MoarVM/MoarVM/pull/659#issuecomment-324421944,"For IO::Socket::INET, to allow the user to specify on what local address he wants to connect from.",I am not sure this has many usage. And the whole IO::Socket::Inet is rather bare in features. There is probably lot of work that can be done to provide more of what is possible for this type of connection. But it probably should be done with someone with more experience with network programming.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,659,2017-08-23T16:27:34Z,,2018-11-04T23:42:31Z,OPEN,False,262,219,7,https://github.com/Skarsnik,Add a source_address parameter to the connect instruction.,3,[],https://github.com/MoarVM/MoarVM/pull/659,https://github.com/AlexDaniel,4,https://github.com/MoarVM/MoarVM/pull/659#issuecomment-352553535,"For IO::Socket::INET, to allow the user to specify on what local address he wants to connect from.","Awww, totally forgot about this one. Will review & merge in early January If nobody beats me to it.",True,{'CONFUSED': ['https://github.com/AlexDaniel']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,659,2017-08-23T16:27:34Z,,2018-11-04T23:42:31Z,OPEN,False,262,219,7,https://github.com/Skarsnik,Add a source_address parameter to the connect instruction.,3,[],https://github.com/MoarVM/MoarVM/pull/659,https://github.com/Skarsnik,5,https://github.com/MoarVM/MoarVM/pull/659#issuecomment-352561379,"For IO::Socket::INET, to allow the user to specify on what local address he wants to connect from.","I kinda wanted to do
https://gist.github.com/Skarsnik/3fc513cbd7875220d2bd021a64286f51 instead
but don't have much free time now.

2017-12-18 21:50 GMT+01:00 Aleks-Daniel Jakimenko-Aleksejev <
notifications@github.com>:
…
 Awww, totally forgot about this one. Will review & merge in early January
 If nobody beats me to it.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#659 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AMYVf1I2p6lPRJq-F94S5qyeATHJdehhks5tBtACgaJpZM4PARJJ>
 .


-- 
Sylvain ""Skarsnik"" Colinet

Victory was near but the power of the ring couldn't be undone",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,660,2017-08-24T02:45:27Z,2020-04-19T14:27:08Z,2020-04-19T14:27:08Z,CLOSED,False,33,13,4,https://github.com/MasterDuke17,JIT param_op_(i|o),1,[],https://github.com/MoarVM/MoarVM/pull/660,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/660,"These were causing INTERPOLATE to bail. Follow the example of the recent
JITting of param_rp_(i|o) (e4e9c04).
NQP passes make m-test and Rakudo passes make m-test m-spectest.
INTERPOLATE now doesn't bail in the jit log, but still isn't being JITted according
to a profile, I don't know why.","These were causing INTERPOLATE to bail. Follow the example of the recent
JITting of param_rp_(i|o) (e4e9c04).
NQP passes make m-test and Rakudo passes make m-test m-spectest.
INTERPOLATE now doesn't bail in the jit log, but still isn't being JITted according
to a profile, I don't know why.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,660,2017-08-24T02:45:27Z,2020-04-19T14:27:08Z,2020-04-19T14:27:08Z,CLOSED,False,33,13,4,https://github.com/MasterDuke17,JIT param_op_(i|o),1,[],https://github.com/MoarVM/MoarVM/pull/660,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/660#issuecomment-326480024,"These were causing INTERPOLATE to bail. Follow the example of the recent
JITting of param_rp_(i|o) (e4e9c04).
NQP passes make m-test and Rakudo passes make m-test m-spectest.
INTERPOLATE now doesn't bail in the jit log, but still isn't being JITted according
to a profile, I don't know why.","For anyone who hasn't been following #moarvm recently, this PR incorrectly JITs these ops. I'm just leaving it open for now for reference to a possible correct solution.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,660,2017-08-24T02:45:27Z,2020-04-19T14:27:08Z,2020-04-19T14:27:08Z,CLOSED,False,33,13,4,https://github.com/MasterDuke17,JIT param_op_(i|o),1,[],https://github.com/MoarVM/MoarVM/pull/660,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/660#issuecomment-346888763,"These were causing INTERPOLATE to bail. Follow the example of the recent
JITting of param_rp_(i|o) (e4e9c04).
NQP passes make m-test and Rakudo passes make m-test m-spectest.
INTERPOLATE now doesn't bail in the jit log, but still isn't being JITted according
to a profile, I don't know why.","@bdw @niner I think I first understood this to be incorrect because it doesn't adjust the runloop in the JITted case, but now I think that's not the right reason, though I'm not sure what is. Mind explaining?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,660,2017-08-24T02:45:27Z,2020-04-19T14:27:08Z,2020-04-19T14:27:08Z,CLOSED,False,33,13,4,https://github.com/MasterDuke17,JIT param_op_(i|o),1,[],https://github.com/MoarVM/MoarVM/pull/660,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/660#issuecomment-616147441,"These were causing INTERPOLATE to bail. Follow the example of the recent
JITting of param_rp_(i|o) (e4e9c04).
NQP passes make m-test and Rakudo passes make m-test m-spectest.
INTERPOLATE now doesn't bail in the jit log, but still isn't being JITted according
to a profile, I don't know why.","""jnthn: I'm still unconvinced by trying to JIT the param_* ops.
They mostly get specialized away, and I'd rather we fix the causes of them not being.""
There have been some other questions about whether this is even needed/desired/may become outdated by a more complete re-working of JITting optionals anyway. It's also more complicated than its current incorrect state, so I'm just going to close this. The code that saw the bails originally now doesn't because of spesh.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,661,2017-08-26T02:05:00Z,2017-09-04T06:17:07Z,2017-09-04T06:17:07Z,MERGED,True,86,12,2,https://github.com/samcv,Grapheme iterator cached,7,[],https://github.com/MoarVM/MoarVM/pull/661,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/661,"Here's a rundown on before/after this change:



Description
caching
master




index with single codepoint needle
0.21844425
0.2195167


index with word needle
0.8477450
1.0048890


index with word needle STRAND
0.832730
2.67385181


index with word needle INDEXINGOPT
0.8357464
1.01405131","Here's a rundown on before/after this change:



Description
caching
master




index with single codepoint needle
0.21844425
0.2195167


index with word needle
0.8477450
1.0048890


index with word needle STRAND
0.832730
2.67385181


index with word needle INDEXINGOPT
0.8357464
1.01405131",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,662,2017-08-26T07:37:22Z,2017-08-26T18:37:59Z,2017-08-26T18:37:59Z,MERGED,True,9,2,1,https://github.com/samcv,Generate stacktraces on Travis CI when getting a segfault,1,[],https://github.com/MoarVM/MoarVM/pull/662,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/662,"On Linux we enable coredumps, and then set the coredumps folder to our
build directory. It is then set so that gdb will print out a stacktrace
from the coredumps if the build fails.","On Linux we enable coredumps, and then set the coredumps folder to our
build directory. It is then set so that gdb will print out a stacktrace
from the coredumps if the build fails.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,662,2017-08-26T07:37:22Z,2017-08-26T18:37:59Z,2017-08-26T18:37:59Z,MERGED,True,9,2,1,https://github.com/samcv,Generate stacktraces on Travis CI when getting a segfault,1,[],https://github.com/MoarVM/MoarVM/pull/662,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/662#issuecomment-325153082,"On Linux we enable coredumps, and then set the coredumps folder to our
build directory. It is then set so that gdb will print out a stacktrace
from the coredumps if the build fails.","I am running Travis on my own forks. I made a PR because for some reason it was not segfaulting when I built it on Travis, but it would here on certain builds in the matrix.
It's still not triggering on the PR either, but I ended up getting it so Travis builds can now generate a core dump and then use use gdb to print a stacktrace at the very end of the build in case we get any segfaults.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,665,2017-08-27T23:22:32Z,2017-08-27T23:42:30Z,2017-08-27T23:42:30Z,MERGED,True,30,35,4,https://github.com/samcv,Fix GC issues and misc.,5,[],https://github.com/MoarVM/MoarVM/pull/665,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/665,"Make sure MVMROOT'd pointer is initialized as NULL   * Can cause issues if GC runs while the pointer is uninitialized.


Revise some comments in MVM_string_is_control_full()


NFG_check, make sure we don't lookup props of synthetics

Our call to check if a codepoint was or wasn't a Control character would
cause us to throw. Fix this by adding a check.



Only run NFG_CHECK on concat result that should be normalized

Before it could run NFG_CHECK when we knew our string was not properly
normalized.
Add MVMROOT for result so it doesn't get garbage collected
before we return.
Move strand and NFG_CHECK's inside the MVMROOT of concat



Initialize more pointers to null cautiously","Make sure MVMROOT'd pointer is initialized as NULL   * Can cause issues if GC runs while the pointer is uninitialized.


Revise some comments in MVM_string_is_control_full()


NFG_check, make sure we don't lookup props of synthetics

Our call to check if a codepoint was or wasn't a Control character would
cause us to throw. Fix this by adding a check.



Only run NFG_CHECK on concat result that should be normalized

Before it could run NFG_CHECK when we knew our string was not properly
normalized.
Add MVMROOT for result so it doesn't get garbage collected
before we return.
Move strand and NFG_CHECK's inside the MVMROOT of concat



Initialize more pointers to null cautiously",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,667,2017-08-28T20:18:21Z,2017-08-28T20:19:37Z,2017-08-28T20:20:33Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Align MVM_TELEMETRY_LOG usage statement,1,[],https://github.com/MoarVM/MoarVM/pull/667,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/667,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,668,2017-08-28T20:25:03Z,2017-08-29T14:35:47Z,2017-08-29T19:33:21Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Align --tracing usage statement,1,[],https://github.com/MoarVM/MoarVM/pull/668,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/668,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,669,2017-08-29T15:29:40Z,2017-09-04T10:25:11Z,2018-04-27T16:31:37Z,MERGED,True,939,728,25,https://github.com/bdw,Cleanup legacy JIT,28,[],https://github.com/MoarVM/MoarVM/pull/669,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/669,"Branch even-moar-jit contained numerous improvements and cleanups that affected the legacy JIT. Having these separate would mean that even-moar-jit could not not merge cleanly without developer involvement because changes to the legacy JIT would mean it diverted.
This branch separates out the legacy JIT changes from even-moar-jit, so that even-moar-jit can be rebased cleanly on top of them, and we have a simpler patch set to review.","Branch even-moar-jit contained numerous improvements and cleanups that affected the legacy JIT. Having these separate would mean that even-moar-jit could not not merge cleanly without developer involvement because changes to the legacy JIT would mean it diverted.
This branch separates out the legacy JIT changes from even-moar-jit, so that even-moar-jit can be rebased cleanly on top of them, and we have a simpler patch set to review.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,669,2017-08-29T15:29:40Z,2017-09-04T10:25:11Z,2018-04-27T16:31:37Z,MERGED,True,939,728,25,https://github.com/bdw,Cleanup legacy JIT,28,[],https://github.com/MoarVM/MoarVM/pull/669,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/669#issuecomment-326809599,"Branch even-moar-jit contained numerous improvements and cleanups that affected the legacy JIT. Having these separate would mean that even-moar-jit could not not merge cleanly without developer involvement because changes to the legacy JIT would mean it diverted.
This branch separates out the legacy JIT changes from even-moar-jit, so that even-moar-jit can be rebased cleanly on top of them, and we have a simpler patch set to review.",Looks very good overall; left a few comments.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,670,2017-08-31T05:21:07Z,2017-08-31T05:51:40Z,2017-08-31T05:51:40Z,MERGED,True,55095,49461,4,https://github.com/samcv,Update Unicode database for Unicode 10,1,[],https://github.com/MoarVM/MoarVM/pull/670,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/670,"Also make changes to the Unicode database so property values
are unique for each property.
Rebase MVM_unicode_cname_to_property_value_code and MVM_unicode_name_to_property_value_code to share code with each other.","Also make changes to the Unicode database so property values
are unique for each property.
Rebase MVM_unicode_cname_to_property_value_code and MVM_unicode_name_to_property_value_code to share code with each other.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,671,2017-08-31T10:18:20Z,2017-09-08T18:08:02Z,2017-09-11T09:53:54Z,MERGED,True,1,1,1,https://github.com/duke-m,MVM_IS_32BIT_INT(i) with explicit casts,1,[],https://github.com/MoarVM/MoarVM/pull/671,https://github.com/duke-m,1,https://github.com/MoarVM/MoarVM/pull/671,"see also
#594 (comment)","see also
#594 (comment)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,672,2017-09-01T04:04:20Z,2017-09-01T06:54:13Z,2017-09-01T11:42:34Z,MERGED,True,42,0,1,https://github.com/MasterDuke17,JIT eqat(ic|im|icim),1,[],https://github.com/MoarVM/MoarVM/pull/672,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/672,NQP passes make m-test and Rakudo passes make m-test m-spectest.,NQP passes make m-test and Rakudo passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,673,2017-09-02T06:06:26Z,2017-09-03T01:15:00Z,2017-09-03T01:15:00Z,MERGED,True,11,10,4,https://github.com/samcv,Replace all uses of sprintf with snprintf,1,[],https://github.com/MoarVM/MoarVM/pull/673,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/673,For extra security and ensuring we don't overflow the buffer.,For extra security and ensuring we don't overflow the buffer.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,674,2017-09-04T16:01:52Z,2017-10-03T15:35:39Z,2018-04-27T16:31:30Z,MERGED,True,8779,155,58,https://github.com/bdw,Merge 'expression' JIT backend,472,[],https://github.com/MoarVM/MoarVM/pull/674,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/674,"Now that the changes to the legacy JIT have been applied and merged, this branch now contains (mostly) the addition of the expression JIT compiler.
Added functionality includes:

Expression tree building
Code generation by means of tree tiling
Full register selection via DynASM
A general register allocator

Although it can only handle forward-only graphs for now


Allocating values in local memory (for spilling)
Automated 'bad copmpilation' bisect process
A minor 'bitmap' library (used in the register allocator)

Not yet implemented, but planned:

An optimizer
REPR-specialized templates or tree generation
Multiple basic blocks per expression tree","Now that the changes to the legacy JIT have been applied and merged, this branch now contains (mostly) the addition of the expression JIT compiler.
Added functionality includes:

Expression tree building
Code generation by means of tree tiling
Full register selection via DynASM
A general register allocator

Although it can only handle forward-only graphs for now


Allocating values in local memory (for spilling)
Automated 'bad copmpilation' bisect process
A minor 'bitmap' library (used in the register allocator)

Not yet implemented, but planned:

An optimizer
REPR-specialized templates or tree generation
Multiple basic blocks per expression tree",True,"{'HEART': ['https://github.com/Demayl', 'https://github.com/rafaelschipiura', 'https://github.com/leedo']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,674,2017-09-04T16:01:52Z,2017-10-03T15:35:39Z,2018-04-27T16:31:30Z,MERGED,True,8779,155,58,https://github.com/bdw,Merge 'expression' JIT backend,472,[],https://github.com/MoarVM/MoarVM/pull/674,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/674#issuecomment-333664167,"Now that the changes to the legacy JIT have been applied and merged, this branch now contains (mostly) the addition of the expression JIT compiler.
Added functionality includes:

Expression tree building
Code generation by means of tree tiling
Full register selection via DynASM
A general register allocator

Although it can only handle forward-only graphs for now


Allocating values in local memory (for spilling)
Automated 'bad copmpilation' bisect process
A minor 'bitmap' library (used in the register allocator)

Not yet implemented, but planned:

An optimizer
REPR-specialized templates or tree generation
Multiple basic blocks per expression tree","I've left a few small cleanup comments, but overall am very happy with this PR, and happy for it to be merged. Very nice work! 👍",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,674,2017-09-04T16:01:52Z,2017-10-03T15:35:39Z,2018-04-27T16:31:30Z,MERGED,True,8779,155,58,https://github.com/bdw,Merge 'expression' JIT backend,472,[],https://github.com/MoarVM/MoarVM/pull/674,https://github.com/AlexDaniel,3,https://github.com/MoarVM/MoarVM/pull/674#issuecomment-333694918,"Now that the changes to the legacy JIT have been applied and merged, this branch now contains (mostly) the addition of the expression JIT compiler.
Added functionality includes:

Expression tree building
Code generation by means of tree tiling
Full register selection via DynASM
A general register allocator

Although it can only handle forward-only graphs for now


Allocating values in local memory (for spilling)
Automated 'bad copmpilation' bisect process
A minor 'bitmap' library (used in the register allocator)

Not yet implemented, but planned:

An optimizer
REPR-specialized templates or tree generation
Multiple basic blocks per expression tree","FWIW If it looks good, I'd prefer to see this merged this week. Any later than that raises the possibility of unnecessary headache with the upcoming release (this month we have rakudo * release too).
I don't know, maybe this won't be disruptive at all, but better safe than sorry.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,674,2017-09-04T16:01:52Z,2017-10-03T15:35:39Z,2018-04-27T16:31:30Z,MERGED,True,8779,155,58,https://github.com/bdw,Merge 'expression' JIT backend,472,[],https://github.com/MoarVM/MoarVM/pull/674,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/674#issuecomment-333696526,"Now that the changes to the legacy JIT have been applied and merged, this branch now contains (mostly) the addition of the expression JIT compiler.
Added functionality includes:

Expression tree building
Code generation by means of tree tiling
Full register selection via DynASM
A general register allocator

Although it can only handle forward-only graphs for now


Allocating values in local memory (for spilling)
Automated 'bad copmpilation' bisect process
A minor 'bitmap' library (used in the register allocator)

Not yet implemented, but planned:

An optimizer
REPR-specialized templates or tree generation
Multiple basic blocks per expression tree","@AlexDaniel Yes, getting this into the upcoming release in good time is why I spent a good chunk of my evening reviewing this. :-) Provided @bdw is happy that it's ready, so am I.",True,"{'HEART': ['https://github.com/AlexDaniel', 'https://github.com/rafaelschipiura', 'https://github.com/Altai-man'], 'HOORAY': ['https://github.com/MasterDuke17', 'https://github.com/b2gills']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,675,2017-09-05T22:28:16Z,2017-09-07T07:23:30Z,2017-09-07T07:23:30Z,MERGED,True,43,33,1,https://github.com/samcv,"Optimize MVM_string_gi_move_to, fix if not starting at 0",2,[],https://github.com/MoarVM/MoarVM/pull/675,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/675,"Move some gi struct variables so they only have to be set once instead of
every time of the loop which locates the correct strand.
Optimize the loop which finds the correct location within a strand so that
it isn't a loop and is just conditionals.
Also fix a bug:
If we didn't move from the very start of a string, and the
string had repetitions, we could iterate past the end of a grapheme
iterator. Fix this by making sure to not assume we are always at the
start, since gi->start may not equal gi->pos","Move some gi struct variables so they only have to be set once instead of
every time of the loop which locates the correct strand.
Optimize the loop which finds the correct location within a strand so that
it isn't a loop and is just conditionals.
Also fix a bug:
If we didn't move from the very start of a string, and the
string had repetitions, we could iterate past the end of a grapheme
iterator. Fix this by making sure to not assume we are always at the
start, since gi->start may not equal gi->pos",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,676,2017-09-06T18:20:08Z,2017-09-27T13:00:15Z,2017-09-27T13:00:19Z,MERGED,True,818,394,20,https://github.com/niner,JIT compile native calls,2,[],https://github.com/MoarVM/MoarVM/pull/676,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/676,This is accompanied by jit_nativecall branches in nqp and rakudo.,This is accompanied by jit_nativecall branches in nqp and rakudo.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,676,2017-09-06T18:20:08Z,2017-09-27T13:00:15Z,2017-09-27T13:00:19Z,MERGED,True,818,394,20,https://github.com/niner,JIT compile native calls,2,[],https://github.com/MoarVM/MoarVM/pull/676,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/676#issuecomment-331481473,This is accompanied by jit_nativecall branches in nqp and rakudo.,I've addressed all the excellent suggestions (some by adding explanatory comments).,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,677,2017-09-06T22:35:05Z,2017-09-07T07:23:27Z,2017-09-07T07:23:27Z,MERGED,True,81,53,2,https://github.com/samcv,Optimize MVM_string_gi_move_to and use for index* ops,4,[],https://github.com/MoarVM/MoarVM/pull/677,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/677,"Use grapheme iterator cached for ignorecase/ignoremark index ops
For a haystack made up of 10 strands, shows a speedup of 2x.
Move some gi struct variables so they only have to be set once instead of
every time of the loop which locates the correct strand.
Optimize the loop which finds the correct location within a strand so that
it isn't a loop and is just conditionals.
If we didn't move from the very start of a string, and the string had
repetitions, we could iterate past the end of a grapheme iterator. Fix this
by making sure to not assume we are always at the start, since gi->start
may not equal gi->pos.","Use grapheme iterator cached for ignorecase/ignoremark index ops
For a haystack made up of 10 strands, shows a speedup of 2x.
Move some gi struct variables so they only have to be set once instead of
every time of the loop which locates the correct strand.
Optimize the loop which finds the correct location within a strand so that
it isn't a loop and is just conditionals.
If we didn't move from the very start of a string, and the string had
repetitions, we could iterate past the end of a grapheme iterator. Fix this
by making sure to not assume we are always at the start, since gi->start
may not equal gi->pos.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,679,2017-09-07T03:15:15Z,2017-09-08T18:07:00Z,2017-09-08T19:36:51Z,MERGED,True,151,66,1,https://github.com/ugexe,Mark GC blocked when acquiring mutex,2,[],https://github.com/MoarVM/MoarVM/pull/679,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/679,"Fixes: perl6 -e 'my $foo = 0; for ^50000 { start { say $foo++ } };'
https://irclog.perlgeek.de/perl6-dev/2017-09-06#i_15127640
https://rt.perl.org/Ticket/Display.html?id=132042","Fixes: perl6 -e 'my $foo = 0; for ^50000 { start { say $foo++ } };'
https://irclog.perlgeek.de/perl6-dev/2017-09-06#i_15127640
https://rt.perl.org/Ticket/Display.html?id=132042",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,682,2017-09-08T14:55:02Z,2017-09-18T10:26:37Z,2017-09-18T10:26:37Z,MERGED,True,1,1,1,https://github.com/dogbert17,Bump libuv to ver. 1.14.1,1,[],https://github.com/MoarVM/MoarVM/pull/682,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/682,"The version we're currently using, i.e. 1.8 is quite old.","The version we're currently using, i.e. 1.8 is quite old.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,682,2017-09-08T14:55:02Z,2017-09-18T10:26:37Z,2017-09-18T10:26:37Z,MERGED,True,1,1,1,https://github.com/dogbert17,Bump libuv to ver. 1.14.1,1,[],https://github.com/MoarVM/MoarVM/pull/682,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/682#issuecomment-328175307,"The version we're currently using, i.e. 1.8 is quite old.",I presume this has been tested and found to build NQP/Rakudo and pass test/stresstest?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,682,2017-09-08T14:55:02Z,2017-09-18T10:26:37Z,2017-09-18T10:26:37Z,MERGED,True,1,1,1,https://github.com/dogbert17,Bump libuv to ver. 1.14.1,1,[],https://github.com/MoarVM/MoarVM/pull/682,https://github.com/dogbert17,3,https://github.com/MoarVM/MoarVM/pull/682#issuecomment-328180374,"The version we're currently using, i.e. 1.8 is quite old.","Hold on, let me verify that the testing was done correctly.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,682,2017-09-08T14:55:02Z,2017-09-18T10:26:37Z,2017-09-18T10:26:37Z,MERGED,True,1,1,1,https://github.com/dogbert17,Bump libuv to ver. 1.14.1,1,[],https://github.com/MoarVM/MoarVM/pull/682,https://github.com/dogbert17,4,https://github.com/MoarVM/MoarVM/pull/682#issuecomment-328271332,"The version we're currently using, i.e. 1.8 is quite old.","On my 32 bit Linux system I've tested the following. Note that i don't believe that this is the correct way to do this so it would be nice if someone else tested this as well.
# build MoarVM with the new libuv present in 3rdparty/libuv
# in order to do this I had to disable the syncing of submodules
# which was done automatically on my system when running 'perl Configure.pl'
# if not the version of libuv I had checked out would be silently replaced with
# v 1.8 thus rendering all further testing useless
make realclean
perl Configure.pl --debug --prefix=../../install/
make -j6 install
# build rakudo
git pull
perl Configure.pl --gen-moar --gen-nqp --backends=moar
make
make test
make install
# build nqp using the MoarVM built with libuv 1.14.1
perl Configure.pl --prefix=../install --backends=moar
make test
# in the rakudo dir
make stresstest TEST_JOBS=7
Everything works for me, whether that's enough is another question :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,682,2017-09-08T14:55:02Z,2017-09-18T10:26:37Z,2017-09-18T10:26:37Z,MERGED,True,1,1,1,https://github.com/dogbert17,Bump libuv to ver. 1.14.1,1,[],https://github.com/MoarVM/MoarVM/pull/682,https://github.com/jnthn,5,https://github.com/MoarVM/MoarVM/pull/682#issuecomment-328637067,"The version we're currently using, i.e. 1.8 is quite old.","Let's merge this right after the next release; it's only 4 days away now, and that's a tad short for testing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,684,2017-09-09T13:27:28Z,2017-09-10T07:30:15Z,2017-09-10T07:30:15Z,MERGED,True,3,5,1,https://github.com/Skarsnik,Fix a leak in CArray repr.,1,[],https://github.com/MoarVM/MoarVM/pull/684,https://github.com/Skarsnik,1,https://github.com/MoarVM/MoarVM/pull/684,"When expand is called (via at-pos) it make room for more perl6 object in the body, but this does not get free if the array is not managed by MoarVM.","When expand is called (via at-pos) it make room for more perl6 object in the body, but this does not get free if the array is not managed by MoarVM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,685,2017-09-10T05:02:13Z,2017-09-10T10:18:16Z,2017-09-10T10:18:16Z,MERGED,True,4357,121,8,https://github.com/samcv,Merge collation-arrays branch,54,[],https://github.com/MoarVM/MoarVM/pull/685,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/685,"This is a full implementation of the Unicode Collation Algorithm. We iterate
by codepoint and put this into a ring buffer. The ring buffers hold the exact
number of codepoints which comprise the longest sequence of codepoints which
map to its own collation keys in the Unicode Collation Algorithm. As of Unicode
9.0 this number was 3. When Generate-Collation-Data.p6 is run, this number will
be updated in case future versions contain a higher number. Once the codepoint
iteration into the ringbuffer finds a non-matching codepoint, whether the two
codepoints are less or more than each other is saved in a variable for later in
case we end up needing to break a tie by codepoint.
We only pull as many keys as needed, so usually we only need to use what is in
the ring buffer. Then we compare by primary levels, all the keys pushed so far.
If all the primaries match then we iterate more codepoints and push the
collation values onto a stack. This stack is malloced and can expand as needed,
but this should practically never be the case.
Using the stack how we do is a modified verrsion of the UCA which lets us not
have to push all primaries from start to end of the string onto a one
dimensional array, and then after that push all the secondary, then all the
tertiary.
Codepoints which have single collation array elements get the data from the MVM
UCD database created with ucd2c.pl Any codepoints which have more than one
collation array element or if it is a sequence of codepoints, that uses the data
in src/strings/unicode_uca.c
Tangut, Ideographs, Nushu and Unassigned codepoints have collation values which
are generated algorithmically based on their codepoint. Hangul characters
decompose before they are pushed onto the array.
Like before, we support the ability to configure collation so you can reverse or
disable levels as you wish. The trick to this is knowing that for all collation
values: tertiary < secondary < primary
We use level_eval_settings to store the settings for each level, which we set
up based on the bitmask of the collation_mode argument to the fuction. If the
two levels are the same we are able to compare them based on the setting. If the
levels are not equal, we do not need to do this, since tertiary < secondary <
primary for all values.
Some info on our collation values. They are all 1 higher than those listed for
DUCET (Default Unicode Collation Element Table). The reason for this is that a 0
counts as 0 while a 1 is skipped and ignorable. This corresponds to things
listed as 0 in DUCET, which our implementation gives a value of 1. We only use 0
for the tertiary value of the level separator to ensure that longer strings win
(though we also have a fallback to ensure this happens in certain cases which
this isn't enough).","This is a full implementation of the Unicode Collation Algorithm. We iterate
by codepoint and put this into a ring buffer. The ring buffers hold the exact
number of codepoints which comprise the longest sequence of codepoints which
map to its own collation keys in the Unicode Collation Algorithm. As of Unicode
9.0 this number was 3. When Generate-Collation-Data.p6 is run, this number will
be updated in case future versions contain a higher number. Once the codepoint
iteration into the ringbuffer finds a non-matching codepoint, whether the two
codepoints are less or more than each other is saved in a variable for later in
case we end up needing to break a tie by codepoint.
We only pull as many keys as needed, so usually we only need to use what is in
the ring buffer. Then we compare by primary levels, all the keys pushed so far.
If all the primaries match then we iterate more codepoints and push the
collation values onto a stack. This stack is malloced and can expand as needed,
but this should practically never be the case.
Using the stack how we do is a modified verrsion of the UCA which lets us not
have to push all primaries from start to end of the string onto a one
dimensional array, and then after that push all the secondary, then all the
tertiary.
Codepoints which have single collation array elements get the data from the MVM
UCD database created with ucd2c.pl Any codepoints which have more than one
collation array element or if it is a sequence of codepoints, that uses the data
in src/strings/unicode_uca.c
Tangut, Ideographs, Nushu and Unassigned codepoints have collation values which
are generated algorithmically based on their codepoint. Hangul characters
decompose before they are pushed onto the array.
Like before, we support the ability to configure collation so you can reverse or
disable levels as you wish. The trick to this is knowing that for all collation
values: tertiary < secondary < primary
We use level_eval_settings to store the settings for each level, which we set
up based on the bitmask of the collation_mode argument to the fuction. If the
two levels are the same we are able to compare them based on the setting. If the
levels are not equal, we do not need to do this, since tertiary < secondary <
primary for all values.
Some info on our collation values. They are all 1 higher than those listed for
DUCET (Default Unicode Collation Element Table). The reason for this is that a 0
counts as 0 while a 1 is skipped and ignorable. This corresponds to things
listed as 0 in DUCET, which our implementation gives a value of 1. We only use 0
for the tertiary value of the level separator to ensure that longer strings win
(though we also have a fallback to ensure this happens in certain cases which
this isn't enough).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,687,2017-09-11T09:44:55Z,2017-09-11T19:39:13Z,2017-09-11T19:39:13Z,MERGED,True,6,6,1,https://github.com/Skarsnik,Nativecall code : fix invalid pointer creation,1,[],https://github.com/MoarVM/MoarVM/pull/687,https://github.com/Skarsnik,1,https://github.com/MoarVM/MoarVM/pull/687,"This fix what is probably an extra indirection. If I understand this correctly cptr is the address of a field inside a CStruct, the previous code was assigning to cptr the value of the field.
This make efence/valgrind/asan happy (fix an invalid read size of 8 errors message  in this function)
The uintptr _t cast are to respect https://www.securecoding.cert.org/confluence/display/c/INT36-C.+Converting+a+pointer+to+integer+or+integer+to+pointer
All nativecall tests in rakudo still run fine with this fix","This fix what is probably an extra indirection. If I understand this correctly cptr is the address of a field inside a CStruct, the previous code was assigning to cptr the value of the field.
This make efence/valgrind/asan happy (fix an invalid read size of 8 errors message  in this function)
The uintptr _t cast are to respect https://www.securecoding.cert.org/confluence/display/c/INT36-C.+Converting+a+pointer+to+integer+or+integer+to+pointer
All nativecall tests in rakudo still run fine with this fix",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,687,2017-09-11T09:44:55Z,2017-09-11T19:39:13Z,2017-09-11T19:39:13Z,MERGED,True,6,6,1,https://github.com/Skarsnik,Nativecall code : fix invalid pointer creation,1,[],https://github.com/MoarVM/MoarVM/pull/687,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/687#issuecomment-328492796,"This fix what is probably an extra indirection. If I understand this correctly cptr is the address of a field inside a CStruct, the previous code was assigning to cptr the value of the field.
This make efence/valgrind/asan happy (fix an invalid read size of 8 errors message  in this function)
The uintptr _t cast are to respect https://www.securecoding.cert.org/confluence/display/c/INT36-C.+Converting+a+pointer+to+integer+or+integer+to+pointer
All nativecall tests in rakudo still run fine with this fix",Seems like a reasonable fix.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,688,2017-09-14T11:34:51Z,2017-09-18T11:01:31Z,2017-09-18T21:32:00Z,MERGED,True,35,0,2,https://github.com/MasterDuke17,Add MVM_fixed_size_realloc,1,[],https://github.com/MoarVM/MoarVM/pull/688,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/688,"Also add an _at_safepoint version.
Required for a PR to come that uses the FSA in VMArray.c","Also add an _at_safepoint version.
Required for a PR to come that uses the FSA in VMArray.c",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,689,2017-09-14T12:02:38Z,,2020-11-23T12:11:54Z,OPEN,False,57,34,8,https://github.com/MasterDuke17,Use FSA in VMArray,13,[],https://github.com/MoarVM/MoarVM/pull/689,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/689,"Requires #688. NQP builds and passes make m-test, Rakudo build and passes make m-test m-spectest.","Requires #688. NQP builds and passes make m-test, Rakudo build and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,689,2017-09-14T12:02:38Z,,2020-11-23T12:11:54Z,OPEN,False,57,34,8,https://github.com/MasterDuke17,Use FSA in VMArray,13,[],https://github.com/MoarVM/MoarVM/pull/689,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/689#issuecomment-334258304,"Requires #688. NQP builds and passes make m-test, Rakudo build and passes make m-test m-spectest.","Just to check I'm following correctly: this PR so far only enables using the FSA for:

Arrays deserialized from bytecode
Arrays that are cloned

And other cases don't yet have the flag set (like just nqp::create-ing a new array)? (This is totally fine, in fact, it's probably wise to bring it in slowly, just want to be sure I didn't miss something while reviewing.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,689,2017-09-14T12:02:38Z,,2020-11-23T12:11:54Z,OPEN,False,57,34,8,https://github.com/MasterDuke17,Use FSA in VMArray,13,[],https://github.com/MoarVM/MoarVM/pull/689,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/689#issuecomment-334264709,"Requires #688. NQP builds and passes make m-test, Rakudo build and passes make m-test m-spectest.","That's how I understand what I did, yep.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,689,2017-09-14T12:02:38Z,,2020-11-23T12:11:54Z,OPEN,False,57,34,8,https://github.com/MasterDuke17,Use FSA in VMArray,13,[],https://github.com/MoarVM/MoarVM/pull/689,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/689#issuecomment-334639600,"Requires #688. NQP builds and passes make m-test, Rakudo build and passes make m-test m-spectest.",@jnthn Updated with those two changes.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,690,2017-09-14T17:33:03Z,2017-09-14T22:28:38Z,2017-09-14T22:29:27Z,MERGED,True,1,1,1,https://github.com/zoffixznet,Use safer macro formatting,1,[],https://github.com/MoarVM/MoarVM/pull/690,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/690,"To ensure it works right, regardless of what arg is used.
e.g. if one were to write MVM_IS_32BIT_INT2(42 ? i : j) the result would expand to ((long long)42 ? i : j >= -2147483648LL && (long long)42 ? i : j <= 2147483647LL)) and be incorrect.
The extra parens avoid this issue.","To ensure it works right, regardless of what arg is used.
e.g. if one were to write MVM_IS_32BIT_INT2(42 ? i : j) the result would expand to ((long long)42 ? i : j >= -2147483648LL && (long long)42 ? i : j <= 2147483647LL)) and be incorrect.
The extra parens avoid this issue.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,691,2017-09-15T07:43:04Z,2017-09-15T09:34:16Z,2017-09-15T09:34:16Z,MERGED,True,8,1,1,https://github.com/duke-m,+get it: release tarballs won't work out of the box,3,[],https://github.com/MoarVM/MoarVM/pull/691,https://github.com/duke-m,1,https://github.com/MoarVM/MoarVM/pull/691,"the automatically generated release tarballs do not contain 3rd party libs like dyncall or libuv,
see also #71,
""releases"" sound official and might lead to confusion","the automatically generated release tarballs do not contain 3rd party libs like dyncall or libuv,
see also #71,
""releases"" sound official and might lead to confusion",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,691,2017-09-15T07:43:04Z,2017-09-15T09:34:16Z,2017-09-15T09:34:16Z,MERGED,True,8,1,1,https://github.com/duke-m,+get it: release tarballs won't work out of the box,3,[],https://github.com/MoarVM/MoarVM/pull/691,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/691#issuecomment-329732183,"the automatically generated release tarballs do not contain 3rd party libs like dyncall or libuv,
see also #71,
""releases"" sound official and might lead to confusion",Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,692,2017-09-15T08:43:16Z,2017-10-03T16:13:08Z,2017-10-04T07:17:36Z,MERGED,True,5,2,1,https://github.com/duke-m,getsockname / end of non-void function,8,[],https://github.com/MoarVM/MoarVM/pull/692,https://github.com/duke-m,1,https://github.com/MoarVM/MoarVM/pull/692,"getsockname expects a socklen_t* as third argument (which is an unsigned int*) and not a signed int.
pragma to turn off the ""end of non-void function"" warning (hope you don't find pragmas ugly)","getsockname expects a socklen_t* as third argument (which is an unsigned int*) and not a signed int.
pragma to turn off the ""end of non-void function"" warning (hope you don't find pragmas ugly)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,692,2017-09-15T08:43:16Z,2017-10-03T16:13:08Z,2017-10-04T07:17:36Z,MERGED,True,5,2,1,https://github.com/duke-m,getsockname / end of non-void function,8,[],https://github.com/MoarVM/MoarVM/pull/692,https://github.com/duke-m,2,https://github.com/MoarVM/MoarVM/pull/692#issuecomment-331434805,"getsockname expects a socklen_t* as third argument (which is an unsigned int*) and not a signed int.
pragma to turn off the ""end of non-void function"" warning (hope you don't find pragmas ugly)","thanks for the information, I've changed throw_error to have the no-return-attribute",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,692,2017-09-15T08:43:16Z,2017-10-03T16:13:08Z,2017-10-04T07:17:36Z,MERGED,True,5,2,1,https://github.com/duke-m,getsockname / end of non-void function,8,[],https://github.com/MoarVM/MoarVM/pull/692,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/692#issuecomment-331446432,"getsockname expects a socklen_t* as third argument (which is an unsigned int*) and not a signed int.
pragma to turn off the ""end of non-void function"" warning (hope you don't find pragmas ugly)",Looks better. Just checked and I suspect that socklen_t may need one more include on Windows; see https://stackoverflow.com/questions/4453992/error-c2065-socklen-t-undeclared-identifier,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,692,2017-09-15T08:43:16Z,2017-10-03T16:13:08Z,2017-10-04T07:17:36Z,MERGED,True,5,2,1,https://github.com/duke-m,getsockname / end of non-void function,8,[],https://github.com/MoarVM/MoarVM/pull/692,https://github.com/duke-m,4,https://github.com/MoarVM/MoarVM/pull/692#issuecomment-331570273,"getsockname expects a socklen_t* as third argument (which is an unsigned int*) and not a signed int.
pragma to turn off the ""end of non-void function"" warning (hope you don't find pragmas ugly)","I'll get back to this next Tuesday, thanks and have a nice weekend",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,692,2017-09-15T08:43:16Z,2017-10-03T16:13:08Z,2017-10-04T07:17:36Z,MERGED,True,5,2,1,https://github.com/duke-m,getsockname / end of non-void function,8,[],https://github.com/MoarVM/MoarVM/pull/692,https://github.com/duke-m,5,https://github.com/MoarVM/MoarVM/pull/692#issuecomment-331854882,"getsockname expects a socklen_t* as third argument (which is an unsigned int*) and not a signed int.
pragma to turn off the ""end of non-void function"" warning (hope you don't find pragmas ugly)","Hi Jonathan, I did not see the appveyor build complain, what did I miss? thanks",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,692,2017-09-15T08:43:16Z,2017-10-03T16:13:08Z,2017-10-04T07:17:36Z,MERGED,True,5,2,1,https://github.com/duke-m,getsockname / end of non-void function,8,[],https://github.com/MoarVM/MoarVM/pull/692,https://github.com/jnthn,6,https://github.com/MoarVM/MoarVM/pull/692#issuecomment-333892853,"getsockname expects a socklen_t* as third argument (which is an unsigned int*) and not a signed int.
pragma to turn off the ""end of non-void function"" warning (hope you don't find pragmas ugly)",This looks OK to me now; thanks.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,694,2017-09-18T23:22:26Z,2017-09-18T23:39:12Z,2017-09-18T23:39:12Z,MERGED,True,1,1,1,https://github.com/ugexe,Pass user32 lib to build on windows,1,[],https://github.com/MoarVM/MoarVM/pull/694,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/694,See: libuv/libuv@e51442b#diff-67e997bcfdac55191033d57a16d1408aR62,See: libuv/libuv@e51442b#diff-67e997bcfdac55191033d57a16d1408aR62,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,695,2017-09-19T18:18:05Z,2017-09-19T18:52:12Z,2017-09-19T19:01:15Z,MERGED,True,1,1,1,https://github.com/usev6,Fix FreeBSD build,1,[],https://github.com/MoarVM/MoarVM/pull/695,https://github.com/usev6,1,https://github.com/MoarVM/MoarVM/pull/695,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,696,2017-09-19T19:55:31Z,2017-10-03T16:11:24Z,2017-10-03T16:11:24Z,MERGED,True,50,8,2,https://github.com/patrickbkr,Probe for gcc -Werror=* support,1,[],https://github.com/MoarVM/MoarVM/pull/696,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/696,"This fixes #277.
I had to shuffle the probes around a little to get them working.
Tested on fedora 25 and RHEL5. I do appreciate testing on other systems.","This fixes #277.
I had to shuffle the probes around a little to get them working.
Tested on fedora 25 and RHEL5. I do appreciate testing on other systems.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,696,2017-09-19T19:55:31Z,2017-10-03T16:11:24Z,2017-10-03T16:11:24Z,MERGED,True,50,8,2,https://github.com/patrickbkr,Probe for gcc -Werror=* support,1,[],https://github.com/MoarVM/MoarVM/pull/696,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/696#issuecomment-332508879,"This fixes #277.
I had to shuffle the probes around a little to get them working.
Tested on fedora 25 and RHEL5. I do appreciate testing on other systems.","Set off another Travis run, since all the OSX runs didn't work out. So far as I understand the configure/build system, I think this looks OK.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,698,2017-09-20T23:07:13Z,2017-09-22T09:06:42Z,2017-09-23T00:40:57Z,MERGED,True,5,3,1,https://github.com/MasterDuke17,Use the FSA for a temp alloc in MVM_string_join,1,[],https://github.com/MoarVM/MoarVM/pull/698,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/698,"NQP builds and passes make m-test and Rakudo builds and passes make m-test m-spectest.
Callgrind reports 13.8 million instructions fewer to run this code my $s; my $a = ""a"" x 50; my $aa = $a x 20; my $b = ""b"" x 50; my $bb = $b x 20; my $cc; for ^10_000 { $cc = join $aa, $bb; $s = $cc.chars }; say $s, 2.4 million fewer if you make the 'x' values 5 and 2 (all with MVM_SPESH_BLOCKING=1)","NQP builds and passes make m-test and Rakudo builds and passes make m-test m-spectest.
Callgrind reports 13.8 million instructions fewer to run this code my $s; my $a = ""a"" x 50; my $aa = $a x 20; my $b = ""b"" x 50; my $bb = $b x 20; my $cc; for ^10_000 { $cc = join $aa, $bb; $s = $cc.chars }; say $s, 2.4 million fewer if you make the 'x' values 5 and 2 (all with MVM_SPESH_BLOCKING=1)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,699,2017-09-21T16:52:52Z,2017-09-21T20:39:38Z,2017-09-21T20:39:48Z,MERGED,True,2,2,1,https://github.com/jdv,Fix returned tcp port values for async sockets (ntohs).  See RT#132135.,1,[],https://github.com/MoarVM/MoarVM/pull/699,https://github.com/jdv,1,https://github.com/MoarVM/MoarVM/pull/699,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,699,2017-09-21T16:52:52Z,2017-09-21T20:39:38Z,2017-09-21T20:39:48Z,MERGED,True,2,2,1,https://github.com/jdv,Fix returned tcp port values for async sockets (ntohs).  See RT#132135.,1,[],https://github.com/MoarVM/MoarVM/pull/699,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/699#issuecomment-331274997,,Nice find; thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,700,2017-09-22T11:11:51Z,2017-09-22T12:27:06Z,2017-09-22T12:27:06Z,MERGED,True,23,8,1,https://github.com/the-eater,Define flags as socket family and use getaddrinfo hints,1,[],https://github.com/MoarVM/MoarVM/pull/700,https://github.com/the-eater,1,https://github.com/MoarVM/MoarVM/pull/700,"With this change you can enforce IPv6 or IPv4 sockets, on of the parts to fix #683","With this change you can enforce IPv6 or IPv4 sockets, on of the parts to fix #683",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,701,2017-09-22T11:32:13Z,2017-09-22T12:26:07Z,2017-09-22T12:26:07Z,MERGED,True,1,0,1,https://github.com/the-eater,#define sa_family_t for Windows,1,[],https://github.com/MoarVM/MoarVM/pull/701,https://github.com/the-eater,1,https://github.com/MoarVM/MoarVM/pull/701,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,702,2017-09-22T20:09:04Z,2017-09-22T20:19:04Z,2018-03-20T16:16:35Z,MERGED,True,1,1,1,https://github.com/the-eater,Fix hint,1,[],https://github.com/MoarVM/MoarVM/pull/702,https://github.com/the-eater,1,https://github.com/MoarVM/MoarVM/pull/702,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,702,2017-09-22T20:09:04Z,2017-09-22T20:19:04Z,2018-03-20T16:16:35Z,MERGED,True,1,1,1,https://github.com/the-eater,Fix hint,1,[],https://github.com/MoarVM/MoarVM/pull/702,https://github.com/the-eater,2,https://github.com/MoarVM/MoarVM/pull/702#issuecomment-374659346,,"Yeah you're correct. Now I don't really know how to solve the BSD situation, I'm assuming Mac also uses 28, being a BSD-born system. will look into it! thanks for noticing!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,704,2017-09-23T16:34:43Z,2017-09-23T18:08:59Z,2017-09-23T19:21:03Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Add missing word in comment,1,[],https://github.com/MoarVM/MoarVM/pull/704,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/704,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,705,2017-09-24T04:29:30Z,2017-09-29T02:34:35Z,2017-09-29T02:35:37Z,MERGED,True,69,9,1,https://github.com/MasterDuke17,Optimize MVM_string_join in both case of all strands and case of a single element to join,2,[],https://github.com/MoarVM/MoarVM/pull/705,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/705,"When everything to be joined are strands of the same type, just copy
them directly instead of creating a single flat string. For small
strings the overhead of being strands counteracts the saving in copying,
but for large strings it's much faster.
For example:
my $b = ""bbbbbbbb"" x 200;
my $c = ""cccccccccccccc"" x 300;
for ^100_000 {
    $ = join("","", $b, $c, ""dddd"")
}

took ~3.7s before this change and ~1.5s after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","When everything to be joined are strands of the same type, just copy
them directly instead of creating a single flat string. For small
strings the overhead of being strands counteracts the saving in copying,
but for large strings it's much faster.
For example:
my $b = ""bbbbbbbb"" x 200;
my $c = ""cccccccccccccc"" x 300;
for ^100_000 {
    $ = join("","", $b, $c, ""dddd"")
}

took ~3.7s before this change and ~1.5s after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,705,2017-09-24T04:29:30Z,2017-09-29T02:34:35Z,2017-09-29T02:35:37Z,MERGED,True,69,9,1,https://github.com/MasterDuke17,Optimize MVM_string_join in both case of all strands and case of a single element to join,2,[],https://github.com/MoarVM/MoarVM/pull/705,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/705#issuecomment-331726356,"When everything to be joined are strands of the same type, just copy
them directly instead of creating a single flat string. For small
strings the overhead of being strands counteracts the saving in copying,
but for large strings it's much faster.
For example:
my $b = ""bbbbbbbb"" x 200;
my $c = ""cccccccccccccc"" x 300;
for ^100_000 {
    $ = join("","", $b, $c, ""dddd"")
}

took ~3.7s before this change and ~1.5s after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","40da3e6 removes the need for rakudo/rakudo#1171 (and still passes all tests and spectests).
For a 50mb file of 1million lines, the time to slurp it dropped from 2.3s to 1.8s, and ~230mb of memory didn't need to be allocated.
@jnthn ping",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,705,2017-09-24T04:29:30Z,2017-09-29T02:34:35Z,2017-09-29T02:35:37Z,MERGED,True,69,9,1,https://github.com/MasterDuke17,Optimize MVM_string_join in both case of all strands and case of a single element to join,2,[],https://github.com/MoarVM/MoarVM/pull/705,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/705#issuecomment-332726454,"When everything to be joined are strands of the same type, just copy
them directly instead of creating a single flat string. For small
strings the overhead of being strands counteracts the saving in copying,
but for large strings it's much faster.
For example:
my $b = ""bbbbbbbb"" x 200;
my $c = ""cccccccccccccc"" x 300;
for ^100_000 {
    $ = join("","", $b, $c, ""dddd"")
}

took ~3.7s before this change and ~1.5s after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","@jnthn removed the bit about all strands having to have the same storage_type and added in the concat stability checking code from the not-all-strands else branch.
With @samcv++'s help, added in some debugging code that did get tripped up with the initial changes, but now is clean.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,705,2017-09-24T04:29:30Z,2017-09-29T02:34:35Z,2017-09-29T02:35:37Z,MERGED,True,69,9,1,https://github.com/MasterDuke17,Optimize MVM_string_join in both case of all strands and case of a single element to join,2,[],https://github.com/MoarVM/MoarVM/pull/705,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/705#issuecomment-333004133,"When everything to be joined are strands of the same type, just copy
them directly instead of creating a single flat string. For small
strings the overhead of being strands counteracts the saving in copying,
but for large strings it's much faster.
For example:
my $b = ""bbbbbbbb"" x 200;
my $c = ""cccccccccccccc"" x 300;
for ^100_000 {
    $ = join("","", $b, $c, ""dddd"")
}

took ~3.7s before this change and ~1.5s after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",@samcv and done.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,705,2017-09-24T04:29:30Z,2017-09-29T02:34:35Z,2017-09-29T02:35:37Z,MERGED,True,69,9,1,https://github.com/MasterDuke17,Optimize MVM_string_join in both case of all strands and case of a single element to join,2,[],https://github.com/MoarVM/MoarVM/pull/705,https://github.com/samcv,5,https://github.com/MoarVM/MoarVM/pull/705#issuecomment-333015308,"When everything to be joined are strands of the same type, just copy
them directly instead of creating a single flat string. For small
strings the overhead of being strands counteracts the saving in copying,
but for large strings it's much faster.
For example:
my $b = ""bbbbbbbb"" x 200;
my $c = ""cccccccccccccc"" x 300;
for ^100_000 {
    $ = join("","", $b, $c, ""dddd"")
}

took ~3.7s before this change and ~1.5s after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",Thank you :-),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,706,2017-09-25T11:54:42Z,2017-09-25T11:56:45Z,2017-09-25T12:01:27Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Fix comment,1,[],https://github.com/MoarVM/MoarVM/pull/706,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/706,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,709,2017-09-29T22:44:06Z,2017-10-03T01:10:58Z,2017-10-03T01:10:58Z,CLOSED,False,20,24,1,https://github.com/samcv,Used FSA allocator for jump table in KMP index algorithm,1,[],https://github.com/MoarVM/MoarVM/pull/709,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/709,"We can save cpu cycles by using FSA, since we just end up freeing it as
soon as the function returns.
Also, since the loop is duplicated, turn it into a #define so we can
use the same code with different functions for accessing the Haystack.","We can save cpu cycles by using FSA, since we just end up freeing it as
soon as the function returns.
Also, since the loop is duplicated, turn it into a #define so we can
use the same code with different functions for accessing the Haystack.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,709,2017-09-29T22:44:06Z,2017-10-03T01:10:58Z,2017-10-03T01:10:58Z,CLOSED,False,20,24,1,https://github.com/samcv,Used FSA allocator for jump table in KMP index algorithm,1,[],https://github.com/MoarVM/MoarVM/pull/709,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/709#issuecomment-333710011,"We can save cpu cycles by using FSA, since we just end up freeing it as
soon as the function returns.
Also, since the loop is duplicated, turn it into a #define so we can
use the same code with different functions for accessing the Haystack.",Commited this directly,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,710,2017-09-30T01:57:56Z,2017-09-30T02:05:52Z,2017-09-30T02:06:14Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Change realloc condition in MVM_string_utf8_decode,1,[],https://github.com/MoarVM/MoarVM/pull/710,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/710,"The conditional being >= instead of > meant that the buffer was
frequently being realloced to the same size.
Callgrind reports ~13k fewer instructions and heaptrack reports ~90
fewer realloc calls for perl6 -e ''.
NQP builds ok and passes make m-test and Rakudo builds ok and
passes make m-test m-spectest.","The conditional being >= instead of > meant that the buffer was
frequently being realloced to the same size.
Callgrind reports ~13k fewer instructions and heaptrack reports ~90
fewer realloc calls for perl6 -e ''.
NQP builds ok and passes make m-test and Rakudo builds ok and
passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,710,2017-09-30T01:57:56Z,2017-09-30T02:05:52Z,2017-09-30T02:06:14Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Change realloc condition in MVM_string_utf8_decode,1,[],https://github.com/MoarVM/MoarVM/pull/710,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/710#issuecomment-333274747,"The conditional being >= instead of > meant that the buffer was
frequently being realloced to the same size.
Callgrind reports ~13k fewer instructions and heaptrack reports ~90
fewer realloc calls for perl6 -e ''.
NQP builds ok and passes make m-test and Rakudo builds ok and
passes make m-test m-spectest.",Looks good.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,711,2017-09-30T17:31:56Z,2017-10-28T09:29:59Z,2017-10-28T13:14:54Z,MERGED,True,14,0,1,https://github.com/MasterDuke17,Support FSA_SIZE_DEBUG in MVM_fixed_size_realloc*,2,[],https://github.com/MoarVM/MoarVM/pull/711,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/711,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,712,2017-10-01T17:00:09Z,2017-10-28T09:29:19Z,2017-10-28T13:14:46Z,MERGED,True,2,4,1,https://github.com/MasterDuke17,Convert realloc plus memset 0 to recalloc,1,[],https://github.com/MoarVM/MoarVM/pull/712,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/712,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,713,2017-10-01T17:33:21Z,2017-11-03T21:56:03Z,2017-11-03T21:56:06Z,MERGED,True,29,4,1,https://github.com/timo,FSA size debug: cooperate with valgrind,2,[],https://github.com/MoarVM/MoarVM/pull/713,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/713,"when the free size is wrong, it gives the stack trace for
where the corresponding data was allocated, how many bytes are
marked ""defined"" by valgrind, and of course the current stacktrace.
On top of that, it outputs the passed and expected size.
looks like this:
Address 0x8164E30 len 376 not defined:
Uninitialised value at 0x8164EA0
==11815==  Address 0x8164e30 is 0 bytes inside a block of size 192 alloc'd
==11815==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)
==11815==    by 0x50428C2: MVM_malloc (alloc.h:2)
==11815==    by 0x5043497: MVM_fixed_size_alloc (fixedsizealloc.c:178)
==11815==    by 0x5026329: allocate_frame (frame.c:287)
==11815==    by 0x5026DC2: MVM_frame_invoke (frame.c:517)
==11815==    by 0x507C8BF: invoke_handler (MVMCode.c:10)
==11815==    by 0x4FFB99A: MVM_interp_run (interp.c:990)
==11815==    by 0x51108E2: MVM_vm_run_file (moar.c:387)
==11815==    by 0x4014D1: main (main.c:255)
**11815** Fixed size allocator: wrong size in free: expected 184, got 368   at 0x5042B86: VALGRIND_PRINTF_BACKTRACE (valgrind.h:6818)
==11815==    by 0x50439CD: MVM_fixed_size_free (fixedsizealloc.c:277)
==11815==    by 0x5027728: remove_one_frame (frame.c:771)
==11815==    by 0x5027C51: MVM_frame_try_return (frame.c:889)
==11815==    by 0x4FF77A5: MVM_interp_run (interp.c:486)
==11815==    by 0x51108E2: MVM_vm_run_file (moar.c:387)
==11815==    by 0x4014D1: main (main.c:255)
==11815== ```","when the free size is wrong, it gives the stack trace for
where the corresponding data was allocated, how many bytes are
marked ""defined"" by valgrind, and of course the current stacktrace.
On top of that, it outputs the passed and expected size.
looks like this:
Address 0x8164E30 len 376 not defined:
Uninitialised value at 0x8164EA0
==11815==  Address 0x8164e30 is 0 bytes inside a block of size 192 alloc'd
==11815==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)
==11815==    by 0x50428C2: MVM_malloc (alloc.h:2)
==11815==    by 0x5043497: MVM_fixed_size_alloc (fixedsizealloc.c:178)
==11815==    by 0x5026329: allocate_frame (frame.c:287)
==11815==    by 0x5026DC2: MVM_frame_invoke (frame.c:517)
==11815==    by 0x507C8BF: invoke_handler (MVMCode.c:10)
==11815==    by 0x4FFB99A: MVM_interp_run (interp.c:990)
==11815==    by 0x51108E2: MVM_vm_run_file (moar.c:387)
==11815==    by 0x4014D1: main (main.c:255)
**11815** Fixed size allocator: wrong size in free: expected 184, got 368   at 0x5042B86: VALGRIND_PRINTF_BACKTRACE (valgrind.h:6818)
==11815==    by 0x50439CD: MVM_fixed_size_free (fixedsizealloc.c:277)
==11815==    by 0x5027728: remove_one_frame (frame.c:771)
==11815==    by 0x5027C51: MVM_frame_try_return (frame.c:889)
==11815==    by 0x4FF77A5: MVM_interp_run (interp.c:486)
==11815==    by 0x51108E2: MVM_vm_run_file (moar.c:387)
==11815==    by 0x4014D1: main (main.c:255)
==11815== ```",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,713,2017-10-01T17:33:21Z,2017-11-03T21:56:03Z,2017-11-03T21:56:06Z,MERGED,True,29,4,1,https://github.com/timo,FSA size debug: cooperate with valgrind,2,[],https://github.com/MoarVM/MoarVM/pull/713,https://github.com/timo,2,https://github.com/MoarVM/MoarVM/pull/713#issuecomment-333393489,"when the free size is wrong, it gives the stack trace for
where the corresponding data was allocated, how many bytes are
marked ""defined"" by valgrind, and of course the current stacktrace.
On top of that, it outputs the passed and expected size.
looks like this:
Address 0x8164E30 len 376 not defined:
Uninitialised value at 0x8164EA0
==11815==  Address 0x8164e30 is 0 bytes inside a block of size 192 alloc'd
==11815==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)
==11815==    by 0x50428C2: MVM_malloc (alloc.h:2)
==11815==    by 0x5043497: MVM_fixed_size_alloc (fixedsizealloc.c:178)
==11815==    by 0x5026329: allocate_frame (frame.c:287)
==11815==    by 0x5026DC2: MVM_frame_invoke (frame.c:517)
==11815==    by 0x507C8BF: invoke_handler (MVMCode.c:10)
==11815==    by 0x4FFB99A: MVM_interp_run (interp.c:990)
==11815==    by 0x51108E2: MVM_vm_run_file (moar.c:387)
==11815==    by 0x4014D1: main (main.c:255)
**11815** Fixed size allocator: wrong size in free: expected 184, got 368   at 0x5042B86: VALGRIND_PRINTF_BACKTRACE (valgrind.h:6818)
==11815==    by 0x50439CD: MVM_fixed_size_free (fixedsizealloc.c:277)
==11815==    by 0x5027728: remove_one_frame (frame.c:771)
==11815==    by 0x5027C51: MVM_frame_try_return (frame.c:889)
==11815==    by 0x4FF77A5: MVM_interp_run (interp.c:486)
==11815==    by 0x51108E2: MVM_vm_run_file (moar.c:387)
==11815==    by 0x4014D1: main (main.c:255)
==11815== ```","I've decided that it's helpful to keep the program running even after a wrong free size was passed so that maybe you can find more problems at once. Of course, it only does that if valgrind is actualy currently running. If it isn't, just panic like usual",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,713,2017-10-01T17:33:21Z,2017-11-03T21:56:03Z,2017-11-03T21:56:06Z,MERGED,True,29,4,1,https://github.com/timo,FSA size debug: cooperate with valgrind,2,[],https://github.com/MoarVM/MoarVM/pull/713,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/713#issuecomment-333522141,"when the free size is wrong, it gives the stack trace for
where the corresponding data was allocated, how many bytes are
marked ""defined"" by valgrind, and of course the current stacktrace.
On top of that, it outputs the passed and expected size.
looks like this:
Address 0x8164E30 len 376 not defined:
Uninitialised value at 0x8164EA0
==11815==  Address 0x8164e30 is 0 bytes inside a block of size 192 alloc'd
==11815==    at 0x4C2DB9D: malloc (vg_replace_malloc.c:299)
==11815==    by 0x50428C2: MVM_malloc (alloc.h:2)
==11815==    by 0x5043497: MVM_fixed_size_alloc (fixedsizealloc.c:178)
==11815==    by 0x5026329: allocate_frame (frame.c:287)
==11815==    by 0x5026DC2: MVM_frame_invoke (frame.c:517)
==11815==    by 0x507C8BF: invoke_handler (MVMCode.c:10)
==11815==    by 0x4FFB99A: MVM_interp_run (interp.c:990)
==11815==    by 0x51108E2: MVM_vm_run_file (moar.c:387)
==11815==    by 0x4014D1: main (main.c:255)
**11815** Fixed size allocator: wrong size in free: expected 184, got 368   at 0x5042B86: VALGRIND_PRINTF_BACKTRACE (valgrind.h:6818)
==11815==    by 0x50439CD: MVM_fixed_size_free (fixedsizealloc.c:277)
==11815==    by 0x5027728: remove_one_frame (frame.c:771)
==11815==    by 0x5027C51: MVM_frame_try_return (frame.c:889)
==11815==    by 0x4FF77A5: MVM_interp_run (interp.c:486)
==11815==    by 0x51108E2: MVM_vm_run_file (moar.c:387)
==11815==    by 0x4014D1: main (main.c:255)
==11815== ```","gcc complains about the %d in the panic, think you need %lu.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,714,2017-10-01T17:55:02Z,2017-10-03T16:10:10Z,2017-10-03T17:27:34Z,MERGED,True,4,0,1,https://github.com/usev6,Fix getaddrinfo failing with EAI_HINTS on FreeBSD,1,[],https://github.com/MoarVM/MoarVM/pull/714,https://github.com/usev6,1,https://github.com/MoarVM/MoarVM/pull/714,"This fixes spectest failures (e.g. in S32-io/IO-Socket-INET.t) on FreeBSD.
According to the man page of getaddrinfo() '[a]ll other elements of the
addrinfo structure passed via hints must be zero or the null pointer'
(similiar wording on Linux). This requirement is actually enforced on
FreeBSD:
https://github.com/freebsd/freebsd/blob/89c48e12204df05d7db296d3ae5d2fd002b4b510/lib/libc/net/getaddrinfo.c#L429","This fixes spectest failures (e.g. in S32-io/IO-Socket-INET.t) on FreeBSD.
According to the man page of getaddrinfo() '[a]ll other elements of the
addrinfo structure passed via hints must be zero or the null pointer'
(similiar wording on Linux). This requirement is actually enforced on
FreeBSD:
https://github.com/freebsd/freebsd/blob/89c48e12204df05d7db296d3ae5d2fd002b4b510/lib/libc/net/getaddrinfo.c#L429",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,715,2017-10-02T18:12:45Z,2017-10-02T18:27:45Z,2017-10-02T18:27:45Z,MERGED,True,1,1,1,https://github.com/coypoop,Correct typo in comment,1,[],https://github.com/MoarVM/MoarVM/pull/715,https://github.com/coypoop,1,https://github.com/MoarVM/MoarVM/pull/715,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,716,2017-10-04T05:00:34Z,2017-10-14T20:39:59Z,2017-10-14T20:39:59Z,MERGED,True,66,102,1,https://github.com/samcv,join: simplify some conditionals and factor out some code,3,[],https://github.com/MoarVM/MoarVM/pull/716,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/716,"Reduce the complexity of several conditionals, from multiple to
just one. Reduce the depth of one set of conditionals.
Factor out the by grapheme copying code to make the somewhat long
function shorter and easier to navigate.","Reduce the complexity of several conditionals, from multiple to
just one. Reduce the depth of one set of conditionals.
Factor out the by grapheme copying code to make the somewhat long
function shorter and easier to navigate.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,716,2017-10-04T05:00:34Z,2017-10-14T20:39:59Z,2017-10-14T20:39:59Z,MERGED,True,66,102,1,https://github.com/samcv,join: simplify some conditionals and factor out some code,3,[],https://github.com/MoarVM/MoarVM/pull/716,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/716#issuecomment-334252958,"Reduce the complexity of several conditionals, from multiple to
just one. Reduce the depth of one set of conditionals.
Factor out the by grapheme copying code to make the somewhat long
function shorter and easier to navigate.","I'm definitely on board with pulling out the copy_to_32bit function. However, (and this may just be personal preference) I don't find the re-worked conditionals easier to read/understand.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,716,2017-10-04T05:00:34Z,2017-10-14T20:39:59Z,2017-10-14T20:39:59Z,MERGED,True,66,102,1,https://github.com/samcv,join: simplify some conditionals and factor out some code,3,[],https://github.com/MoarVM/MoarVM/pull/716,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/716#issuecomment-334324493,"Reduce the complexity of several conditionals, from multiple to
just one. Reduce the depth of one set of conditionals.
Factor out the by grapheme copying code to make the somewhat long
function shorter and easier to navigate.",@MasterDuke17 I could change the conditionals to use if (!sgraphs) instead of including with the others. So instead of reducing 3 to 1 conditional. It goes from 3 to 2. 1 for the !concats_stable and 1 for the concat checks,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,717,2017-10-05T00:18:25Z,2017-10-05T01:14:58Z,2017-10-05T01:14:58Z,MERGED,True,3,3,1,https://github.com/samcv,Disable tests on Appveyor until we can fix the build,1,[],https://github.com/MoarVM/MoarVM/pull/717,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/717,"If it stalls during testing, we get no feedback on when the build itself
has broken.","If it stalls during testing, we get no feedback on when the build itself
has broken.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,717,2017-10-05T00:18:25Z,2017-10-05T01:14:58Z,2017-10-05T01:14:58Z,MERGED,True,3,3,1,https://github.com/samcv,Disable tests on Appveyor until we can fix the build,1,[],https://github.com/MoarVM/MoarVM/pull/717,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/717#issuecomment-334325826,"If it stalls during testing, we get no feedback on when the build itself
has broken.","Hold on, but #718 ? It does not seem to stall there.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,717,2017-10-05T00:18:25Z,2017-10-05T01:14:58Z,2017-10-05T01:14:58Z,MERGED,True,3,3,1,https://github.com/samcv,Disable tests on Appveyor until we can fix the build,1,[],https://github.com/MoarVM/MoarVM/pull/717,https://github.com/AlexDaniel,3,https://github.com/MoarVM/MoarVM/pull/717#issuecomment-334331930,"If it stalls during testing, we get no feedback on when the build itself
has broken.","samcv (IRC): because of that we didn't notice the build actually breaking with the recent JIT merge
AlexDaniel: samcv: oooh, I understand your point now

So the status will be showing if it's possible to compile Moar on not. OK then. 👍",True,{'THUMBS_UP': ['https://github.com/samcv']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,719,2017-10-08T21:19:40Z,2017-10-28T09:28:35Z,2017-10-28T09:28:35Z,MERGED,True,8,68,2,https://github.com/ugexe,Use uv_fs_copyfile API,2,[],https://github.com/MoarVM/MoarVM/pull/719,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/719,"uv_fs_copyfile uses CopyFileW on windows and copyfile(3) on OSX (when available), while otherwise falling back to using  a loop + uv_fs_sendfile (similar to the code this replaces).","uv_fs_copyfile uses CopyFileW on windows and copyfile(3) on OSX (when available), while otherwise falling back to using  a loop + uv_fs_sendfile (similar to the code this replaces).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,719,2017-10-08T21:19:40Z,2017-10-28T09:28:35Z,2017-10-28T09:28:35Z,MERGED,True,8,68,2,https://github.com/ugexe,Use uv_fs_copyfile API,2,[],https://github.com/MoarVM/MoarVM/pull/719,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/719#issuecomment-335366989,"uv_fs_copyfile uses CopyFileW on windows and copyfile(3) on OSX (when available), while otherwise falling back to using  a loop + uv_fs_sendfile (similar to the code this replaces).","Some rudimentary benchmarks on OSX notably show a decrease in sys time (12s to 3.6s) for large files:
OSX
rakudo-e11f4ea
$ time perl6 -e 'for ^10 { my $file = ""1gFile"".IO; my $copy-name = ^100000000 .pick; $file.copy($copy-name); $copy-name.IO.unlink; };'

real    0m13.736s
user    0m0.544s
sys 0m11.317s

$ time perl6 -e 'for ^10000 { my $file = ""50kFile"".IO; my $copy-name = ^100000000 .pick; $file.copy($copy-name); $copy-name.IO.unlink; };'

real    0m7.135s
user    0m2.212s
sys 0m2.820s

rakudo-e11f4ea + PR
$ time perl6 -e 'for ^10 { my $file = ""1gFile"".IO; my $copy-name = ^100000000 .pick; $file.copy($copy-name); $copy-name.IO.unlink; };'

real    0m12.774s
user    0m0.220s
sys 0m3.566s

$ time perl6 -e 'for ^10000 { my $file = ""50kFile"".IO; my $copy-name = ^100000000 .pick; $file.copy($copy-name); $copy-name.IO.unlink; };'

real    0m8.381s
user    0m1.825s
sys 0m2.812s",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,719,2017-10-08T21:19:40Z,2017-10-28T09:28:35Z,2017-10-28T09:28:35Z,MERGED,True,8,68,2,https://github.com/ugexe,Use uv_fs_copyfile API,2,[],https://github.com/MoarVM/MoarVM/pull/719,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/719#issuecomment-335493410,"uv_fs_copyfile uses CopyFileW on windows and copyfile(3) on OSX (when available), while otherwise falling back to using  a loop + uv_fs_sendfile (similar to the code this replaces).",👍 to merge this after the upcoming release,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,722,2017-10-09T17:06:25Z,2017-10-09T18:30:30Z,2017-10-09T18:52:40Z,MERGED,True,1,1,1,https://github.com/zoffixznet,Fix typo in comment,1,[],https://github.com/MoarVM/MoarVM/pull/722,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/722,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,723,2017-10-09T18:52:08Z,2017-10-09T22:46:59Z,2017-10-09T22:47:02Z,MERGED,True,4,0,1,https://github.com/zoffixznet,[WIN32] Fix ->seakable detection on TTY handles,1,[],https://github.com/MoarVM/MoarVM/pull/723,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/723,"Fixes RT#132254: https://rt.perl.org/Ticket/Display.html?id=132254
Fixes all t/02-rakudo/repl.t failures
The SetFilePointer() routine silently fails[^1] when the handle is
not a seekable handle, so check the handle is a disk handle[^2] before
trying to seek stuf.
[1] (Remarks section)
https://msdn.microsoft.com/en-us/library/windows/desktop/aa365541(v=vs.85).aspx
[2]
https://msdn.microsoft.com/en-us/library/windows/desktop/aa364960(v=vs.85).aspx","Fixes RT#132254: https://rt.perl.org/Ticket/Display.html?id=132254
Fixes all t/02-rakudo/repl.t failures
The SetFilePointer() routine silently fails[^1] when the handle is
not a seekable handle, so check the handle is a disk handle[^2] before
trying to seek stuf.
[1] (Remarks section)
https://msdn.microsoft.com/en-us/library/windows/desktop/aa365541(v=vs.85).aspx
[2]
https://msdn.microsoft.com/en-us/library/windows/desktop/aa364960(v=vs.85).aspx",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,723,2017-10-09T18:52:08Z,2017-10-09T22:46:59Z,2017-10-09T22:47:02Z,MERGED,True,4,0,1,https://github.com/zoffixznet,[WIN32] Fix ->seakable detection on TTY handles,1,[],https://github.com/MoarVM/MoarVM/pull/723,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/723#issuecomment-335271959,"Fixes RT#132254: https://rt.perl.org/Ticket/Display.html?id=132254
Fixes all t/02-rakudo/repl.t failures
The SetFilePointer() routine silently fails[^1] when the handle is
not a seekable handle, so check the handle is a disk handle[^2] before
trying to seek stuf.
[1] (Remarks section)
https://msdn.microsoft.com/en-us/library/windows/desktop/aa365541(v=vs.85).aspx
[2]
https://msdn.microsoft.com/en-us/library/windows/desktop/aa364960(v=vs.85).aspx",Should failure of the new condition set errno = ESPIPE instead of errno = EBADF?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,723,2017-10-09T18:52:08Z,2017-10-09T22:46:59Z,2017-10-09T22:47:02Z,MERGED,True,4,0,1,https://github.com/zoffixznet,[WIN32] Fix ->seakable detection on TTY handles,1,[],https://github.com/MoarVM/MoarVM/pull/723,https://github.com/zoffixznet,3,https://github.com/MoarVM/MoarVM/pull/723#issuecomment-335274057,"Fixes RT#132254: https://rt.perl.org/Ticket/Display.html?id=132254
Fixes all t/02-rakudo/repl.t failures
The SetFilePointer() routine silently fails[^1] when the handle is
not a seekable handle, so check the handle is a disk handle[^2] before
trying to seek stuf.
[1] (Remarks section)
https://msdn.microsoft.com/en-us/library/windows/desktop/aa365541(v=vs.85).aspx
[2]
https://msdn.microsoft.com/en-us/library/windows/desktop/aa364960(v=vs.85).aspx","Should failure of the new condition set errno = ESPIPE instead of errno = EBADF?

Thanks. Fixed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,725,2017-10-09T23:00:22Z,2017-10-09T23:03:50Z,2017-10-09T23:03:50Z,MERGED,True,1,1,1,https://github.com/ugexe,Fix cwd error message,1,[],https://github.com/MoarVM/MoarVM/pull/725,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/725,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,726,2017-10-10T19:39:09Z,2017-10-10T19:52:37Z,2017-10-11T13:39:05Z,MERGED,True,1,1,1,https://github.com/jsimonet,Typo symobls -> symbols,1,[],https://github.com/MoarVM/MoarVM/pull/726,https://github.com/jsimonet,1,https://github.com/MoarVM/MoarVM/pull/726,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,726,2017-10-10T19:39:09Z,2017-10-10T19:52:37Z,2017-10-11T13:39:05Z,MERGED,True,1,1,1,https://github.com/jsimonet,Typo symobls -> symbols,1,[],https://github.com/MoarVM/MoarVM/pull/726,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/726#issuecomment-335588228,,👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,727,2017-10-11T05:26:39Z,2017-10-11T10:00:10Z,2017-10-11T13:38:43Z,MERGED,True,1,1,1,https://github.com/jsimonet,typo,1,[],https://github.com/MoarVM/MoarVM/pull/727,https://github.com/jsimonet,1,https://github.com/MoarVM/MoarVM/pull/727,"This -> """"","This -> """"",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,727,2017-10-11T05:26:39Z,2017-10-11T10:00:10Z,2017-10-11T13:38:43Z,MERGED,True,1,1,1,https://github.com/jsimonet,typo,1,[],https://github.com/MoarVM/MoarVM/pull/727,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/727#issuecomment-335760168,"This -> """"",👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,729,2017-10-21T17:58:27Z,2017-10-28T17:41:27Z,2017-10-28T19:24:04Z,MERGED,True,18,5,4,https://github.com/MasterDuke17,JIT the getexcategory op,1,[],https://github.com/MoarVM/MoarVM/pull/729,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/729,"Create an MVM_get_exception_category function and call that in interp.c
and graph.c.
Used to cause 15 BAILs when building the Rakudo core setting.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Create an MVM_get_exception_category function and call that in interp.c
and graph.c.
Used to cause 15 BAILs when building the Rakudo core setting.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,730,2017-10-21T19:19:05Z,2017-10-28T16:50:45Z,2017-10-28T16:50:45Z,CLOSED,False,17,0,3,https://github.com/MasterDuke17,Jit param_rp_s op,1,[],https://github.com/MoarVM/MoarVM/pull/730,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/730,"Used to cause 22 BAILs when building the Rakudo core setting.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Used to cause 22 BAILs when building the Rakudo core setting.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,731,2017-10-24T02:43:09Z,2017-10-24T21:55:08Z,2017-10-24T21:55:11Z,MERGED,True,32,3,4,https://github.com/zoffixznet,Fix seekability detection on MacOS,1,[],https://github.com/MoarVM/MoarVM/pull/731,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/731,"This fixes the bug it was meant to fix, but needs a spectest/stresstest on MacOS done and seeing if it introduces any significant performance degradation on MacOS. Also, I'm out of my depth here and poorly know what I'm doing.

POSIX does not define which devices must support lseek() and on
MacOS it returns some non-zero value that isn't -1 indicating failure
when lseek()ing TTY STDIN. This results in such handles marked
as seekable and in turn causes issues, such as mvm_eof() trying
to figure out whether we've reached EOF and falsely returning True
even when we didn't because the statbuf.st_size is zero.
After discussion[^1] and some research, the solution in this patch
is what I came up with and that actually works. We try to seek
a handle with lseek and on MacOS, if it doesn't error out, then
try to see if the file is a regular file, which is guaranteed to
be seekable.
Does this work? It passes the rakudo test[^1] to cover the bug,
but so far I'm having trouble completing spectest on the macos VM
I got (maybe something with VM I dunno).
Is this sane? I've no idea. I'm a n00b at this.
[1] (Notes section) http://man7.org/linux/man-pages/man2/lseek.2.html
[2] https://irclog.perlgeek.de/perl6-dev/2017-10-23#i_15341511
[3] Raku/roast@27833272b4","This fixes the bug it was meant to fix, but needs a spectest/stresstest on MacOS done and seeing if it introduces any significant performance degradation on MacOS. Also, I'm out of my depth here and poorly know what I'm doing.

POSIX does not define which devices must support lseek() and on
MacOS it returns some non-zero value that isn't -1 indicating failure
when lseek()ing TTY STDIN. This results in such handles marked
as seekable and in turn causes issues, such as mvm_eof() trying
to figure out whether we've reached EOF and falsely returning True
even when we didn't because the statbuf.st_size is zero.
After discussion[^1] and some research, the solution in this patch
is what I came up with and that actually works. We try to seek
a handle with lseek and on MacOS, if it doesn't error out, then
try to see if the file is a regular file, which is guaranteed to
be seekable.
Does this work? It passes the rakudo test[^1] to cover the bug,
but so far I'm having trouble completing spectest on the macos VM
I got (maybe something with VM I dunno).
Is this sane? I've no idea. I'm a n00b at this.
[1] (Notes section) http://man7.org/linux/man-pages/man2/lseek.2.html
[2] https://irclog.perlgeek.de/perl6-dev/2017-10-23#i_15341511
[3] Raku/roast@27833272b4",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,731,2017-10-24T02:43:09Z,2017-10-24T21:55:08Z,2017-10-24T21:55:11Z,MERGED,True,32,3,4,https://github.com/zoffixznet,Fix seekability detection on MacOS,1,[],https://github.com/MoarVM/MoarVM/pull/731,https://github.com/geekosaur,2,https://github.com/MoarVM/MoarVM/pull/731#issuecomment-338890688,"This fixes the bug it was meant to fix, but needs a spectest/stresstest on MacOS done and seeing if it introduces any significant performance degradation on MacOS. Also, I'm out of my depth here and poorly know what I'm doing.

POSIX does not define which devices must support lseek() and on
MacOS it returns some non-zero value that isn't -1 indicating failure
when lseek()ing TTY STDIN. This results in such handles marked
as seekable and in turn causes issues, such as mvm_eof() trying
to figure out whether we've reached EOF and falsely returning True
even when we didn't because the statbuf.st_size is zero.
After discussion[^1] and some research, the solution in this patch
is what I came up with and that actually works. We try to seek
a handle with lseek and on MacOS, if it doesn't error out, then
try to see if the file is a regular file, which is guaranteed to
be seekable.
Does this work? It passes the rakudo test[^1] to cover the bug,
but so far I'm having trouble completing spectest on the macos VM
I got (maybe something with VM I dunno).
Is this sane? I've no idea. I'm a n00b at this.
[1] (Notes section) http://man7.org/linux/man-pages/man2/lseek.2.html
[2] https://irclog.perlgeek.de/perl6-dev/2017-10-23#i_15341511
[3] Raku/roast@27833272b4",fwiw a more robust check is probably to isatty() it on open and mark it non-seekable if true.,True,{'THUMBS_UP': ['https://github.com/zoffixznet']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,731,2017-10-24T02:43:09Z,2017-10-24T21:55:08Z,2017-10-24T21:55:11Z,MERGED,True,32,3,4,https://github.com/zoffixznet,Fix seekability detection on MacOS,1,[],https://github.com/MoarVM/MoarVM/pull/731,https://github.com/zoffixznet,3,https://github.com/MoarVM/MoarVM/pull/731#issuecomment-339045518,"This fixes the bug it was meant to fix, but needs a spectest/stresstest on MacOS done and seeing if it introduces any significant performance degradation on MacOS. Also, I'm out of my depth here and poorly know what I'm doing.

POSIX does not define which devices must support lseek() and on
MacOS it returns some non-zero value that isn't -1 indicating failure
when lseek()ing TTY STDIN. This results in such handles marked
as seekable and in turn causes issues, such as mvm_eof() trying
to figure out whether we've reached EOF and falsely returning True
even when we didn't because the statbuf.st_size is zero.
After discussion[^1] and some research, the solution in this patch
is what I came up with and that actually works. We try to seek
a handle with lseek and on MacOS, if it doesn't error out, then
try to see if the file is a regular file, which is guaranteed to
be seekable.
Does this work? It passes the rakudo test[^1] to cover the bug,
but so far I'm having trouble completing spectest on the macos VM
I got (maybe something with VM I dunno).
Is this sane? I've no idea. I'm a n00b at this.
[1] (Notes section) http://man7.org/linux/man-pages/man2/lseek.2.html
[2] https://irclog.perlgeek.de/perl6-dev/2017-10-23#i_15341511
[3] Raku/roast@27833272b4","fwiw a more robust check is probably to isatty() it on open and mark it non-seekable if true.

Thanks. Made that change now. If I remove the MacOS detection and stresstest on Linux with the patch, I see no noticable perf impact. Don't have access to a MacOS ATM so if someone could test this out that'd be great (just see if perl6 -e '$*IN.getc.say' waits to read a char and prints it instead of printing Nil right away)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,732,2017-10-25T21:34:51Z,2017-10-26T07:13:32Z,2018-04-04T23:48:23Z,MERGED,True,42,7,6,https://github.com/samcv,Include the type of unhandled register in error messages,1,[],https://github.com/MoarVM/MoarVM/pull/732,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/732,"Added better errors for CStruct, MVMiter, VMArray, and frame.c
Example: Unhandled lexical type 'int8' in lexprimspec for '$var'
Before: Unhandled lexical type in lexprimspec for '$var'","Added better errors for CStruct, MVMiter, VMArray, and frame.c
Example: Unhandled lexical type 'int8' in lexprimspec for '$var'
Before: Unhandled lexical type in lexprimspec for '$var'",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,733,2017-10-25T21:57:48Z,2017-10-28T07:42:53Z,2018-04-04T23:47:59Z,MERGED,True,24,0,1,https://github.com/samcv,Handle unsigned types to switch in MVM_iter(),1,[],https://github.com/MoarVM/MoarVM/pull/733,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/733,"Fixes ""Unknown lexical type encountered while building context iterator""
error when MVM_iter() tries to handle unsigned integers.","Fixes ""Unknown lexical type encountered while building context iterator""
error when MVM_iter() tries to handle unsigned integers.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,733,2017-10-25T21:57:48Z,2017-10-28T07:42:53Z,2018-04-04T23:47:59Z,MERGED,True,24,0,1,https://github.com/samcv,Handle unsigned types to switch in MVM_iter(),1,[],https://github.com/MoarVM/MoarVM/pull/733,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/733#issuecomment-339574275,"Fixes ""Unknown lexical type encountered while building context iterator""
error when MVM_iter() tries to handle unsigned integers.",The only nit I have to pick with this is the commit message. It tells me the same as the patch (some cases added to a switch statement) but not why we'd want that.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,733,2017-10-25T21:57:48Z,2017-10-28T07:42:53Z,2018-04-04T23:47:59Z,MERGED,True,24,0,1,https://github.com/samcv,Handle unsigned types to switch in MVM_iter(),1,[],https://github.com/MoarVM/MoarVM/pull/733,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/733#issuecomment-340079155,"Fixes ""Unknown lexical type encountered while building context iterator""
error when MVM_iter() tries to handle unsigned integers.",@niner updated to include the reasoning. Thanks.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,734,2017-10-26T03:05:22Z,2017-11-03T21:53:56Z,2017-11-03T21:55:37Z,MERGED,True,4,0,1,https://github.com/MasterDuke17,"If dividing by 1, just return the numerator",4,[],https://github.com/MoarVM/MoarVM/pull/734,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/734,"This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.","This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,734,2017-10-26T03:05:22Z,2017-11-03T21:53:56Z,2017-11-03T21:55:37Z,MERGED,True,4,0,1,https://github.com/MasterDuke17,"If dividing by 1, just return the numerator",4,[],https://github.com/MoarVM/MoarVM/pull/734,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/734#issuecomment-339630436,"This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.","This would break the code like this, won't it:
m: use nqp; class Meow is Int {}; dd nqp::div_I(<42>, 1, Meow).^name
rakudo-moar 9554a97c5: OUTPUT: «""Meow""␤»

In other words, the optimized path doesn't bother setting the correct requested type.
Also, any idea what to do in Int.new to get the wanted behaviour back?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,734,2017-10-26T03:05:22Z,2017-11-03T21:53:56Z,2017-11-03T21:55:37Z,MERGED,True,4,0,1,https://github.com/MasterDuke17,"If dividing by 1, just return the numerator",4,[],https://github.com/MoarVM/MoarVM/pull/734,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/734#issuecomment-339631825,"This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.",We should only do the optimization in this operation if the required type and the numerator type match exactly. Rakudo shouldn't have to change.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,734,2017-10-26T03:05:22Z,2017-11-03T21:53:56Z,2017-11-03T21:55:37Z,MERGED,True,4,0,1,https://github.com/MasterDuke17,"If dividing by 1, just return the numerator",4,[],https://github.com/MoarVM/MoarVM/pull/734,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/734#issuecomment-339646747,"This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.",Something like adding ' && REPR(a) == REPR(b)' to the conditional?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,734,2017-10-26T03:05:22Z,2017-11-03T21:53:56Z,2017-11-03T21:55:37Z,MERGED,True,4,0,1,https://github.com/MasterDuke17,"If dividing by 1, just return the numerator",4,[],https://github.com/MoarVM/MoarVM/pull/734,https://github.com/zoffixznet,5,https://github.com/MoarVM/MoarVM/pull/734#issuecomment-339647269,"This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.","Rakudo shouldn't have to change.

It'll likely need to, mostly because I'm abusing div_I op in Int.new to get a fresh object. I wasn't sure what's a proper to do that was… Basically makes stuff like this work:
m: my $orig = 2; my $new = Int.new: my int $ = 2; $new does role Meows {}; say $orig.^name
rakudo-moar 10e7af009: OUTPUT: «Int␤»

Where Int.new is a way to get a fresh object you could mess with without affecting all the other cached constants.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,734,2017-10-26T03:05:22Z,2017-11-03T21:53:56Z,2017-11-03T21:55:37Z,MERGED,True,4,0,1,https://github.com/MasterDuke17,"If dividing by 1, just return the numerator",4,[],https://github.com/MoarVM/MoarVM/pull/734,https://github.com/jnthn,6,https://github.com/MoarVM/MoarVM/pull/734#issuecomment-339650878,"This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.","@MasterDuke17 STABLE, not REPR",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,734,2017-10-26T03:05:22Z,2017-11-03T21:53:56Z,2017-11-03T21:55:37Z,MERGED,True,4,0,1,https://github.com/MasterDuke17,"If dividing by 1, just return the numerator",4,[],https://github.com/MoarVM/MoarVM/pull/734,https://github.com/MasterDuke17,7,https://github.com/MoarVM/MoarVM/pull/734#issuecomment-340058645,"This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.","If #737, Raku/nqp#378, and rakudo/rakudo#1217 are merged, an NQP and Rakudo built with this PR pass all tests.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,734,2017-10-26T03:05:22Z,2017-11-03T21:53:56Z,2017-11-03T21:55:37Z,MERGED,True,4,0,1,https://github.com/MasterDuke17,"If dividing by 1, just return the numerator",4,[],https://github.com/MoarVM/MoarVM/pull/734,https://github.com/jnthn,8,https://github.com/MoarVM/MoarVM/pull/734#issuecomment-341590193,"This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.","I'm happy for this to go in, though it'll need deconflicting first.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,734,2017-10-26T03:05:22Z,2017-11-03T21:53:56Z,2017-11-03T21:55:37Z,MERGED,True,4,0,1,https://github.com/MasterDuke17,"If dividing by 1, just return the numerator",4,[],https://github.com/MoarVM/MoarVM/pull/734,https://github.com/MasterDuke17,9,https://github.com/MoarVM/MoarVM/pull/734#issuecomment-341591978,"This avoids allocating a new mp_int and actually performing the
division.
NQP builds ok and passes make m-test. Rakudo builds ok and passes make m-test. However, there are two spectest failures, one in S02-types/set.t and one in S32-num/int.t. These are both because Int.new(int   \value) and Int.new(Int:D \value = 0) are explicitly using nqp::div_I to create new Ints.
Some benchmarking results for this code: perl6 -e 'use nqp; my $s; for ^1_000_000 { $s = nqp::div_I($_, 1, Int) }; say now - INIT now; say $s'
Callgrind reports ~2m more instructions for dividing by 17, but 300m fewer instructions for dividing by 1.","Don't know what happened there, but resolved now.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,735,2017-10-26T19:03:17Z,2017-10-26T20:52:05Z,2017-10-26T20:55:12Z,MERGED,True,7,1,1,https://github.com/ugexe,Don't throw exception for EINTR when writing to fd,1,[],https://github.com/MoarVM/MoarVM/pull/735,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/735,"Fixes Failed to write bytes to filehandle: Interrupted system call when running:
strace perl6 -e 'while 1 { use nqp; my $s := $*SCHEDULER; my $c := nqp::list(""echo"", ""-n"", q||); my $e := CLONE-HASH-DECONTAINERIZED %*ENV; await ^500 .map: { start nqp::spawnprocasync($s.queue, $c, ""/"", $e, nqp::hash()) }; print ""."" }'","Fixes Failed to write bytes to filehandle: Interrupted system call when running:
strace perl6 -e 'while 1 { use nqp; my $s := $*SCHEDULER; my $c := nqp::list(""echo"", ""-n"", q||); my $e := CLONE-HASH-DECONTAINERIZED %*ENV; await ^500 .map: { start nqp::spawnprocasync($s.queue, $c, ""/"", $e, nqp::hash()) }; print ""."" }'",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,735,2017-10-26T19:03:17Z,2017-10-26T20:52:05Z,2017-10-26T20:55:12Z,MERGED,True,7,1,1,https://github.com/ugexe,Don't throw exception for EINTR when writing to fd,1,[],https://github.com/MoarVM/MoarVM/pull/735,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/735#issuecomment-339766906,"Fixes Failed to write bytes to filehandle: Interrupted system call when running:
strace perl6 -e 'while 1 { use nqp; my $s := $*SCHEDULER; my $c := nqp::list(""echo"", ""-n"", q||); my $e := CLONE-HASH-DECONTAINERIZED %*ENV; await ^500 .map: { start nqp::spawnprocasync($s.queue, $c, ""/"", $e, nqp::hash()) }; print ""."" }'",Note that I have been unable to reproduce without invoking strace,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,735,2017-10-26T19:03:17Z,2017-10-26T20:52:05Z,2017-10-26T20:55:12Z,MERGED,True,7,1,1,https://github.com/ugexe,Don't throw exception for EINTR when writing to fd,1,[],https://github.com/MoarVM/MoarVM/pull/735,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/735#issuecomment-339797146,"Fixes Failed to write bytes to filehandle: Interrupted system call when running:
strace perl6 -e 'while 1 { use nqp; my $s := $*SCHEDULER; my $c := nqp::list(""echo"", ""-n"", q||); my $e := CLONE-HASH-DECONTAINERIZED %*ENV; await ^500 .map: { start nqp::spawnprocasync($s.queue, $c, ""/"", $e, nqp::hash()) }; print ""."" }'","Good catch, though I suspect this is not the only place we need such a patch. Will create a ticket to audit the code for other places.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,737,2017-10-27T03:14:04Z,2017-11-02T23:37:09Z,2017-11-02T23:38:49Z,MERGED,True,235,168,9,https://github.com/MasterDuke17,Create and JIT coerce_II op,3,[],https://github.com/MoarVM/MoarVM/pull/737,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/737,"Implement it with the new MVM_bigint_from_bigint function. This will be
used in Rakudo's Int.new to create one Int from another, but without any
mix-ins the source might have.","Implement it with the new MVM_bigint_from_bigint function. This will be
used in Rakudo's Int.new to create one Int from another, but without any
mix-ins the source might have.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,737,2017-10-27T03:14:04Z,2017-11-02T23:37:09Z,2017-11-02T23:38:49Z,MERGED,True,235,168,9,https://github.com/MasterDuke17,Create and JIT coerce_II op,3,[],https://github.com/MoarVM/MoarVM/pull/737,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/737#issuecomment-341440297,"Implement it with the new MVM_bigint_from_bigint function. This will be
used in Rakudo's Int.new to create one Int from another, but without any
mix-ins the source might have.",Added the MVMROOT.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,738,2017-10-27T05:32:51Z,2017-11-02T23:41:13Z,2017-11-02T23:41:13Z,MERGED,True,25,17,2,https://github.com/ugexe,Retry in certain cases of EINTR,3,[],https://github.com/MoarVM/MoarVM/pull/738,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/738,"These are based on test cases from libuv, although there is no
evidence this fixes anything.
See: #736","These are based on test cases from libuv, although there is no
evidence this fixes anything.
See: #736",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,738,2017-10-27T05:32:51Z,2017-11-02T23:41:13Z,2017-11-02T23:41:13Z,MERGED,True,25,17,2,https://github.com/ugexe,Retry in certain cases of EINTR,3,[],https://github.com/MoarVM/MoarVM/pull/738,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/738#issuecomment-341589951,"These are based on test cases from libuv, although there is no
evidence this fixes anything.
See: #736",Looks sensible to me. 👍,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,739,2017-10-28T12:29:23Z,2017-10-28T13:54:43Z,2017-10-28T13:54:43Z,MERGED,True,6,2,1,https://github.com/dogbert17,Add two more missing MVMROOTs around managed mutex acquire,1,[],https://github.com/MoarVM/MoarVM/pull/739,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/739,"The mutex acquire may GC block and thus trigger GC, moving objects.","The mutex acquire may GC block and thus trigger GC, moving objects.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,739,2017-10-28T12:29:23Z,2017-10-28T13:54:43Z,2017-10-28T13:54:43Z,MERGED,True,6,2,1,https://github.com/dogbert17,Add two more missing MVMROOTs around managed mutex acquire,1,[],https://github.com/MoarVM/MoarVM/pull/739,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/739#issuecomment-340191334,"The mutex acquire may GC block and thus trigger GC, moving objects.",Leaving this to jnthn to vet,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,740,2017-10-28T15:44:01Z,2017-10-28T16:06:11Z,2017-10-28T16:06:48Z,MERGED,True,2,0,1,https://github.com/dogbert17,Add another MVMROOT around managed mutex acquire. jnthn++,1,[],https://github.com/MoarVM/MoarVM/pull/740,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/740,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,740,2017-10-28T15:44:01Z,2017-10-28T16:06:11Z,2017-10-28T16:06:48Z,MERGED,True,2,0,1,https://github.com/dogbert17,Add another MVMROOT around managed mutex acquire. jnthn++,1,[],https://github.com/MoarVM/MoarVM/pull/740,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/740#issuecomment-340200560,,The indenting appears to be a little weird ?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,740,2017-10-28T15:44:01Z,2017-10-28T16:06:11Z,2017-10-28T16:06:48Z,MERGED,True,2,0,1,https://github.com/dogbert17,Add another MVMROOT around managed mutex acquire. jnthn++,1,[],https://github.com/MoarVM/MoarVM/pull/740,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/740#issuecomment-340201629,,@lizmat We don't tend to add an extra level of indentation for every MVMROOT when there's a bunch in a row; in some places there's 4 and it'd get crazy. :-),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,741,2017-10-28T16:09:58Z,2017-10-28T16:57:30Z,2017-10-28T16:57:30Z,CLOSED,False,539,320,28,https://github.com/ugexe,Add MVMROOT around more reentrantmutex acquires,21,[],https://github.com/MoarVM/MoarVM/pull/741,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/741,See: 9ad1f5f,See: 9ad1f5f,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,741,2017-10-28T16:09:58Z,2017-10-28T16:57:30Z,2017-10-28T16:57:30Z,CLOSED,False,539,320,28,https://github.com/ugexe,Add MVMROOT around more reentrantmutex acquires,21,[],https://github.com/MoarVM/MoarVM/pull/741,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/741#issuecomment-340204883,See: 9ad1f5f,Will reopen in new PR,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,742,2017-10-28T17:01:10Z,2017-11-02T23:38:10Z,2017-11-02T23:38:10Z,MERGED,True,11,2,2,https://github.com/ugexe,Add more missing MVMROOTs,1,[],https://github.com/MoarVM/MoarVM/pull/742,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/742,"Redo of #741
See: 9ad1f5f","Redo of #741
See: 9ad1f5f",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,743,2017-10-31T22:30:17Z,2017-11-01T23:25:31Z,2018-04-04T23:48:20Z,MERGED,True,48,23,1,https://github.com/samcv,Speed up concat of longer strings by a significant amount,2,[],https://github.com/MoarVM/MoarVM/pull/743,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/743,"4136ae2 (Samantha McVey, 4 minutes ago)
speed up join of longer strings by a significant amount
Here we concat multiple times for >300 graphemes per string or if there's
<4 pieces and >150 graphemes per string.

This can be up to 10x faster for joining very long strings. The conditions
were created after extensive testing of joining strings with a separator.

11ab1dc (Samantha McVey, 2 hours ago)
join: factor code into join_get_str_from_pos() function
Function returns the string by two methods depending on if the array is an
object array or a string array.","4136ae2 (Samantha McVey, 4 minutes ago)
speed up join of longer strings by a significant amount
Here we concat multiple times for >300 graphemes per string or if there's
<4 pieces and >150 graphemes per string.

This can be up to 10x faster for joining very long strings. The conditions
were created after extensive testing of joining strings with a separator.

11ab1dc (Samantha McVey, 2 hours ago)
join: factor code into join_get_str_from_pos() function
Function returns the string by two methods depending on if the array is an
object array or a string array.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,744,2017-11-02T02:04:32Z,,2017-11-11T15:27:13Z,OPEN,False,31,1,6,https://github.com/timo,subtract size of profiling ops from bytecode size,3,[],https://github.com/MoarVM/MoarVM/pull/744,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/744,"so that turning profiling on can't push some functions
over the inline size limit, which causes differences
between profiled and non-profiled runs.
Not inlining some candidate only during profiling can
have ripple effects if an inlined piece of code causes
a bigger frame to bail in the JIT.","so that turning profiling on can't push some functions
over the inline size limit, which causes differences
between profiled and non-profiled runs.
Not inlining some candidate only during profiling can
have ripple effects if an inlined piece of code causes
a bigger frame to bail in the JIT.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,744,2017-11-02T02:04:32Z,,2017-11-11T15:27:13Z,OPEN,False,31,1,6,https://github.com/timo,subtract size of profiling ops from bytecode size,3,[],https://github.com/MoarVM/MoarVM/pull/744,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/744#issuecomment-341339025,"so that turning profiling on can't push some functions
over the inline size limit, which causes differences
between profiled and non-profiled runs.
Not inlining some candidate only during profiling can
have ripple effects if an inlined piece of code causes
a bigger frame to bail in the JIT.","I'm not a huge fan of assigning meaning to the opcode number, when opcodes can already have adverbs. Could you at least put the ins->info->opcode >= MVM_OP_prof_enter test into a macro, so a casual reader doesn't have to know about the convention and to make it easier to change it later?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,746,2017-11-06T00:30:55Z,2017-11-06T01:26:56Z,2017-11-06T01:36:16Z,MERGED,True,0,1,1,https://github.com/MasterDuke17,Remove duplicate env variable usage line,1,[],https://github.com/MoarVM/MoarVM/pull/746,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/746,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,746,2017-11-06T00:30:55Z,2017-11-06T01:26:56Z,2017-11-06T01:36:16Z,MERGED,True,0,1,1,https://github.com/MasterDuke17,Remove duplicate env variable usage line,1,[],https://github.com/MoarVM/MoarVM/pull/746,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/746#issuecomment-342023560,,👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,747,2017-11-08T23:23:40Z,2017-11-08T23:42:00Z,2017-11-08T23:42:00Z,MERGED,True,6,6,1,https://github.com/ugexe,Put op in same order relative to oplist,1,[],https://github.com/MoarVM/MoarVM/pull/747,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/747,"The ops should be in the same order here as in the oplist file, so the compiler can can optimize the switch properly.","The ops should be in the same order here as in the oplist file, so the compiler can can optimize the switch properly.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/748,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","Allows a child process to get the parent process id, and thus guess if it has become orphaned.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-343038256,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.",Hold off on this until the next libuv release. It seems libuv 1.16.0 broke builds on many windows configurations. PR has been submitted.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/ugexe,3,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-343592740,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","libuv 1.16.1 fixed the windows issue noted previously and getppid works.
@jnthn
Using any libuv past v1.14.1, however, results in an unrelated proc regression on windows that was not noticed before. This means 8b53b1e will need to be reverted if there is no solution before the next MoarVM release.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/AlexDaniel,4,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-346945329,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.",Why did you close this?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/ugexe,5,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-346949767,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","I was tired of being mentioned in an individuals commit messages in the perl6 community, and when I spoke up about it someone belittled it and encouraged the perpetrator that they were doing the right thing despite having no background information on what happened. I don’t want to feel like I’m being gaslighted in the community I’ve been a part of for 5 years, yet in the last few months I always know exactly who will send a patronizing smiley face as their response if someone speaks up about anything they don’t personally believe. So I’ve chosen to speak up with my work/merit by closing my PRs until/if this recent change in attitude goes away.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/zoffixznet,6,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-346956692,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","when I spoke up about it

Personally, what I saw is you calling another community member an angry racist, publicly, in a channel of 300 people. Which seemed to stem from an unfortunate choice of a test input string. The user both repeatedly apologized and offered to follow up on the matter in private.
I looked through the user's repos and found just a single commit mentioning you and all it said is you refused to support a feature.

So I’ve chosen to speak up with my work/merit by closing my PRs until/if this recent change in attitude goes away.

Judging by comments on your closures, everyone's simply confused and no one knows wtf you're talking about. ""patronizing smiley face""? wat? Nothing's gonna change if no one knows what needs to change.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/AlexDaniel,7,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-346957350,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","""patronizing smiley face""? wat?

I think it's about my message. See this: https://irclog.perlgeek.de/perl6/2017-11-23#i_15486717
I've sent it because I disapprove continuous bullying for making a mistake. As for the commit messages,  I have spent an unjustified amount of time trying to find them, and I didn't. Maybe they were force-pushed into nonexistence, I don't know. There was a commit saying that something is done “just to please zef” but that looked rather technical to me.
The smiley face could've been replaced with words, something like “I think he understood everything, please stop”. It could be that my position is wrong. If so, let me know.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/AlexDaniel,8,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-346957990,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","Ah, maybe it's also worth elaborating a little bit on this:

despite having no background information on what happened

When I see public bashing of someone who is clearly not being aggressive at the moment of bashing, I want it to stop. You are right that I didn't have enough information (and still don't have it), but I believe that we can have peaceful discussions of these issues.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/ugexe,9,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-346968503,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","ugexe:   title (tyil) that exception from ComUnit::Repository but you seem so busy writing pissed off comments about zef in all your module commit messages that I can see why you would not have had the time to just look at the source


tyil:    I wonder why


ugexe:   Me too


tyil: 	I don't really feel like having to go through this again


tyil:    feel free to pm w/ otr if you truly wonder ;)

if we want to ignore the above we can pretend i'm just making all of this up.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/zoffixznet,10,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-346971566,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","if we want to ignore the above we can pretend i'm just making all of this up.

I'm unsure what we're meant to be paying attention to there. You're publicly accusing tyil of ""writing pissed off comments about zef in all your module commit messages"", an action for which two people so far failed to find any evidence of.
I've no idea what ""w/ otr"" means, but the rest of the conversation suggests to me some discussion happened between you two in the past—a discussion I, and likely most of the other people you're blackmailing, don't even know about.
So from where I'm sitting: I see you're pissed off at single guy, for reasons I don't know and which you're being very cryptic about. The other day, I got a couple dozen notifications about closed PRs and Issues from you. And today you said those were because we need an attitude adjustment and I've no idea what that even means.
I don't intend to follow this conversation after this comment, and I'll end it with something that was said on IRC awhile back:

sorry, we don't play the nuclear blackmail game here",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/AlexDaniel,11,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-346972687,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","I've no idea what ""w/ otr"" means

I was wondering that too. My best guess is that “otr” itself stands for “off-the-record”, so the person was simply implying that it'd be a private conversation not recorded anywhere. The wording is really weird but that's all I could make out of it.

yet in the last few months I always know exactly who will send a patronizing smiley face as their response if someone speaks up about anything they don’t personally believe

If I am the problem, we should discuss it. Sometimes I'm indeed too vocal about some things, so given enough feedback we can all become better I think.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,748,2017-11-08T23:26:19Z,2017-11-24T03:06:51Z,2018-02-22T02:03:47Z,CLOSED,False,233,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/748,https://github.com/jnthn,12,https://github.com/MoarVM/MoarVM/pull/748#issuecomment-346975661,"Allows a child process to get the parent process id, and thus guess if it has become orphaned.","I'm sad to see all of this.
First of all, I'd hope that as a community we can agree the language used in tyil's now-deleted upload to CPAN is unacceptable, and falls well below what we should expect of those who consider themselves part of our community. In my view, it's quite right that tyil was publicly challenged about this, because we should not be seen as a community that is accepting of such behavior. At the same time, people can make mistakes that are out of character, and I believe tyil deserves the opportunity to demonstrate that's all it was, without being reminded of it every single day.
Secondly, if ugexe says he has been repeatedly mentioned in commits - I'm assuming in a way that he finds hurtful or that makes him lose his wish to continue being part of the community - then I'd like to see that received in a more accepting and caring manner than I see in this thread, where the first instinct seems to have been to request proof, then claim this is some kind of ""nuclear blackmail"". To which I can only say - uh, really? Is it really more likely that somebody who has contributed in a huge number of ways to our community over the years suddenly decides to engage in some strange blackmail plot, than that they legitimately were hurt by something that happened?
Further, trying to argue that something is ""rather technical"" isn't particularly helpful. It doesn't matter if you wouldn't be upset by it, or if - as may well be the case - the author didn't intend to cause hurt to another person and was just ranting about some inanimate bit of software, forgetting that there's real people on the other side of that software. The point is that somebody in our community is quite evidently feeling crap, and I think it would have been nice if the reactions here involved a good dose more empathy.
@ugexe, if you wish to discuss this further privately, feel free to drop me an email or catch me on IRC (OK, not right now as I should already be sleeping...) Ditto for the others of you on this thread.",True,"{'THUMBS_UP': ['https://github.com/AlexDaniel', 'https://github.com/lizmat', 'https://github.com/usev6', 'https://github.com/tbrowder', 'https://github.com/b2gills', 'https://github.com/cjfields', 'https://github.com/japhb', 'https://github.com/raiph', 'https://github.com/sergot']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,750,2017-11-10T23:25:55Z,2017-11-12T05:28:07Z,2017-11-12T13:40:19Z,MERGED,True,24,7,1,https://github.com/MasterDuke17,Optimize MVM_string_concat when the RHS is a...,3,[],https://github.com/MoarVM/MoarVM/pull/750,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/750,"single strand that's equal to the LHS's final strand. In that case, just
increase the LHS's repetition count by the number of repetition of the
RHS.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This adapted code from https://rt.perl.org/Ticket/Display.html?id=131774:
$ /usr/bin/time perl6-m -e 'for (1, 10, 100, 1_000, 10_000, 100_000) -> $limit {my $x; my $y = ""x"" x 100; $x ~= $y for (1..$limit); say ""$limit: "", now - ENTER now}' used to report:
1: 0.0045150 
10: 0.0004916 
100: 0.00096704 
1000: 0.0077635 
10000: 0.4149077 
100000: 40.1284791 
37.36user 3.66system 0:41.02elapsed 100%CPU (0avgtext+0avgdata 3776812maxresident)k

and now reports:
1: 0.0043542
10: 0.0005357
100: 0.0008045
1000: 0.00442383
10000: 0.0260266
100000: 0.1531845
0.58user 0.01system 0:00.47elapsed 125%CPU (0avgtext+0avgdata 91024maxresident)k","single strand that's equal to the LHS's final strand. In that case, just
increase the LHS's repetition count by the number of repetition of the
RHS.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This adapted code from https://rt.perl.org/Ticket/Display.html?id=131774:
$ /usr/bin/time perl6-m -e 'for (1, 10, 100, 1_000, 10_000, 100_000) -> $limit {my $x; my $y = ""x"" x 100; $x ~= $y for (1..$limit); say ""$limit: "", now - ENTER now}' used to report:
1: 0.0045150 
10: 0.0004916 
100: 0.00096704 
1000: 0.0077635 
10000: 0.4149077 
100000: 40.1284791 
37.36user 3.66system 0:41.02elapsed 100%CPU (0avgtext+0avgdata 3776812maxresident)k

and now reports:
1: 0.0043542
10: 0.0005357
100: 0.0008045
1000: 0.00442383
10000: 0.0260266
100000: 0.1531845
0.58user 0.01system 0:00.47elapsed 125%CPU (0avgtext+0avgdata 91024maxresident)k",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,750,2017-11-10T23:25:55Z,2017-11-12T05:28:07Z,2017-11-12T13:40:19Z,MERGED,True,24,7,1,https://github.com/MasterDuke17,Optimize MVM_string_concat when the RHS is a...,3,[],https://github.com/MoarVM/MoarVM/pull/750,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/750#issuecomment-343661789,"single strand that's equal to the LHS's final strand. In that case, just
increase the LHS's repetition count by the number of repetition of the
RHS.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This adapted code from https://rt.perl.org/Ticket/Display.html?id=131774:
$ /usr/bin/time perl6-m -e 'for (1, 10, 100, 1_000, 10_000, 100_000) -> $limit {my $x; my $y = ""x"" x 100; $x ~= $y for (1..$limit); say ""$limit: "", now - ENTER now}' used to report:
1: 0.0045150 
10: 0.0004916 
100: 0.00096704 
1000: 0.0077635 
10000: 0.4149077 
100000: 40.1284791 
37.36user 3.66system 0:41.02elapsed 100%CPU (0avgtext+0avgdata 3776812maxresident)k

and now reports:
1: 0.0043542
10: 0.0005357
100: 0.0008045
1000: 0.00442383
10000: 0.0260266
100000: 0.1531845
0.58user 0.01system 0:00.47elapsed 125%CPU (0avgtext+0avgdata 91024maxresident)k","This is a great fix for this special case.  But I can’t help but wonder what costs are involved for the other, more often ocurring cases of string concatenation.  Could you provide some benchmarks for that as well?
…
 On 11 Nov 2017, at 00:25, MasterDuke17 ***@***.***> wrote:

 single strand that's equal to the LHS's final strand. In that case, just
 increase the LHS's repetition count by the number of repetition of the
 RHS.

 NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.

 This adapted code from https://rt.perl.org/Ticket/Display.html?id=131774:
 $ /usr/bin/time perl6-m -e 'for (1, 10, 100, 1_000, 10_000, 100_000) -> $limit {my $x; my $y = ""x"" x 100; $x ~= $y for (1..$limit); say ""$limit: "", now - ENTER now}' used to report:

 1: 0.0045150
 10: 0.0004916
 100: 0.00096704
 1000: 0.0077635
 10000: 0.4149077
 100000: 40.1284791
 37.36user 3.66system 0:41.02elapsed 100%CPU (0avgtext+0avgdata 3776812maxresident)k

 and now reports:

 1: 0.0043542
 10: 0.0005357
 100: 0.0008045
 1000: 0.00442383
 10000: 0.0260266
 100000: 0.1531845
 0.58user 0.01system 0:00.47elapsed 125%CPU (0avgtext+0avgdata 91024maxresident)k

 You can view, comment on, or merge this pull request online at:

   #750

 Commit Summary

 	• Optimize MVM_string_concat when the RHS is a...
 File Changes

 	• M src/strings/ops.c (19)
 Patch Links:

 	• https://github.com/MoarVM/MoarVM/pull/750.patch
 	• https://github.com/MoarVM/MoarVM/pull/750.diff
 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{'THUMBS_UP': ['https://github.com/AlexDaniel']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,750,2017-11-10T23:25:55Z,2017-11-12T05:28:07Z,2017-11-12T13:40:19Z,MERGED,True,24,7,1,https://github.com/MasterDuke17,Optimize MVM_string_concat when the RHS is a...,3,[],https://github.com/MoarVM/MoarVM/pull/750,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/750#issuecomment-343671699,"single strand that's equal to the LHS's final strand. In that case, just
increase the LHS's repetition count by the number of repetition of the
RHS.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This adapted code from https://rt.perl.org/Ticket/Display.html?id=131774:
$ /usr/bin/time perl6-m -e 'for (1, 10, 100, 1_000, 10_000, 100_000) -> $limit {my $x; my $y = ""x"" x 100; $x ~= $y for (1..$limit); say ""$limit: "", now - ENTER now}' used to report:
1: 0.0045150 
10: 0.0004916 
100: 0.00096704 
1000: 0.0077635 
10000: 0.4149077 
100000: 40.1284791 
37.36user 3.66system 0:41.02elapsed 100%CPU (0avgtext+0avgdata 3776812maxresident)k

and now reports:
1: 0.0043542
10: 0.0005357
100: 0.0008045
1000: 0.00442383
10000: 0.0260266
100000: 0.1531845
0.58user 0.01system 0:00.47elapsed 125%CPU (0avgtext+0avgdata 91024maxresident)k","I ran several different cases and didn't notice any slowdown because of this fix.
for (1, 10, 100, 1_000, 10_000, 100_000) -> $limit {

# these are the different bodies I tried for this loop
    my $x = ""yyy""; my $y = ""x"" x 100; $x ~= $y for (1..$limit); 
    my $x = ""yyy""; my $y = ""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""; $x ~= $y for (1..$limit);
    my $x = ""y"" x 5; my $y = ""x"" x 100; $x ~= $y for (1..$limit);
    my $x = ""y"" x 5; my $y = ""xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx""; $x ~= $y for (1..$limit);
    my $x; $x ~= (""a""..""z"").pick x 100 for (1..$limit);

    say ""$limit: "", now - ENTER now
}

This should be the worst case, as it passes the first part of the conditional I added, but fails the second more expensive part.
my $a = ""aaaaaaaaaa"" x 100; my $b = ""aaaaaaaaaab"" x 100; my $c; $c ~= $a ~ $b for ^10_000; say now - INIT now

I didn't see a noticeable slowdown in any of the above cases. Anything I might have missed?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,750,2017-11-10T23:25:55Z,2017-11-12T05:28:07Z,2017-11-12T13:40:19Z,MERGED,True,24,7,1,https://github.com/MasterDuke17,Optimize MVM_string_concat when the RHS is a...,3,[],https://github.com/MoarVM/MoarVM/pull/750,https://github.com/lizmat,4,https://github.com/MoarVM/MoarVM/pull/750#issuecomment-343687460,"single strand that's equal to the LHS's final strand. In that case, just
increase the LHS's repetition count by the number of repetition of the
RHS.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This adapted code from https://rt.perl.org/Ticket/Display.html?id=131774:
$ /usr/bin/time perl6-m -e 'for (1, 10, 100, 1_000, 10_000, 100_000) -> $limit {my $x; my $y = ""x"" x 100; $x ~= $y for (1..$limit); say ""$limit: "", now - ENTER now}' used to report:
1: 0.0045150 
10: 0.0004916 
100: 0.00096704 
1000: 0.0077635 
10000: 0.4149077 
100000: 40.1284791 
37.36user 3.66system 0:41.02elapsed 100%CPU (0avgtext+0avgdata 3776812maxresident)k

and now reports:
1: 0.0043542
10: 0.0005357
100: 0.0008045
1000: 0.00442383
10000: 0.0260266
100000: 0.1531845
0.58user 0.01system 0:00.47elapsed 125%CPU (0avgtext+0avgdata 91024maxresident)k","If you didn't notice a slowdown, then this is fine by me :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,750,2017-11-10T23:25:55Z,2017-11-12T05:28:07Z,2017-11-12T13:40:19Z,MERGED,True,24,7,1,https://github.com/MasterDuke17,Optimize MVM_string_concat when the RHS is a...,3,[],https://github.com/MoarVM/MoarVM/pull/750,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/750#issuecomment-343697876,"single strand that's equal to the LHS's final strand. In that case, just
increase the LHS's repetition count by the number of repetition of the
RHS.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This adapted code from https://rt.perl.org/Ticket/Display.html?id=131774:
$ /usr/bin/time perl6-m -e 'for (1, 10, 100, 1_000, 10_000, 100_000) -> $limit {my $x; my $y = ""x"" x 100; $x ~= $y for (1..$limit); say ""$limit: "", now - ENTER now}' used to report:
1: 0.0045150 
10: 0.0004916 
100: 0.00096704 
1000: 0.0077635 
10000: 0.4149077 
100000: 40.1284791 
37.36user 3.66system 0:41.02elapsed 100%CPU (0avgtext+0avgdata 3776812maxresident)k

and now reports:
1: 0.0043542
10: 0.0005357
100: 0.0008045
1000: 0.00442383
10000: 0.0260266
100000: 0.1531845
0.58user 0.01system 0:00.47elapsed 125%CPU (0avgtext+0avgdata 91024maxresident)k",Updated.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,750,2017-11-10T23:25:55Z,2017-11-12T05:28:07Z,2017-11-12T13:40:19Z,MERGED,True,24,7,1,https://github.com/MasterDuke17,Optimize MVM_string_concat when the RHS is a...,3,[],https://github.com/MoarVM/MoarVM/pull/750,https://github.com/samcv,6,https://github.com/MoarVM/MoarVM/pull/750#issuecomment-343714573,"single strand that's equal to the LHS's final strand. In that case, just
increase the LHS's repetition count by the number of repetition of the
RHS.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This adapted code from https://rt.perl.org/Ticket/Display.html?id=131774:
$ /usr/bin/time perl6-m -e 'for (1, 10, 100, 1_000, 10_000, 100_000) -> $limit {my $x; my $y = ""x"" x 100; $x ~= $y for (1..$limit); say ""$limit: "", now - ENTER now}' used to report:
1: 0.0045150 
10: 0.0004916 
100: 0.00096704 
1000: 0.0077635 
10000: 0.4149077 
100000: 40.1284791 
37.36user 3.66system 0:41.02elapsed 100%CPU (0avgtext+0avgdata 3776812maxresident)k

and now reports:
1: 0.0043542
10: 0.0005357
100: 0.0008045
1000: 0.00442383
10000: 0.0260266
100000: 0.1531845
0.58user 0.01system 0:00.47elapsed 125%CPU (0avgtext+0avgdata 91024maxresident)k",Looks good now. Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,752,2017-11-13T21:18:08Z,2017-11-18T20:38:58Z,2017-11-18T20:38:58Z,MERGED,True,68,8,2,https://github.com/ugexe,"Revert ""Use uv_fs_copyfile API""",1,[],https://github.com/MoarVM/MoarVM/pull/752,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/752,"Reverts #719
See: libuv/libuv#1625","Reverts #719
See: libuv/libuv#1625",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,752,2017-11-13T21:18:08Z,2017-11-18T20:38:58Z,2017-11-18T20:38:58Z,MERGED,True,68,8,2,https://github.com/ugexe,"Revert ""Use uv_fs_copyfile API""",1,[],https://github.com/MoarVM/MoarVM/pull/752,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/752#issuecomment-344061305,"Reverts #719
See: libuv/libuv#1625","May be worth waiting a day or two before reverting, but with an imminent release we should be ready. Until then MoarVM should only use libuv versions prior to v1.15",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,753,2017-11-15T20:23:30Z,2017-11-16T02:02:58Z,2017-11-16T02:02:58Z,MERGED,True,73,8,1,https://github.com/samcv,collapse_strands with memcpy if all strands are same type 4x faster,1,[],https://github.com/MoarVM/MoarVM/pull/753,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/753,"If all the strands to collapse are of the same type (ASCII, 8bit, or
32bit) then use memcpy to collapse the strands. If they are not all the
same type then we use the traditional grapheme iterator based collapsing
that we previously used to collapse strands.
If it's 8bit and a repetition with only one grapheme, it will use memset
to more quickly write the memory.
This is 4-4.5x faster as long as all the strands are of the same type.","If all the strands to collapse are of the same type (ASCII, 8bit, or
32bit) then use memcpy to collapse the strands. If they are not all the
same type then we use the traditional grapheme iterator based collapsing
that we previously used to collapse strands.
If it's 8bit and a repetition with only one grapheme, it will use memset
to more quickly write the memory.
This is 4-4.5x faster as long as all the strands are of the same type.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,755,2017-11-24T22:41:11Z,2017-11-25T00:00:13Z,2017-11-25T00:00:13Z,MERGED,True,1,1,1,https://github.com/dogbert17,Fix missing parens,1,[],https://github.com/MoarVM/MoarVM/pull/755,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/755,"They aren't strictly necessary but it's inconsistent, looks odd and
it causes cppcheck to generate a syntax error. Spectest clean.","They aren't strictly necessary but it's inconsistent, looks odd and
it causes cppcheck to generate a syntax error. Spectest clean.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,756,2017-11-25T06:10:09Z,2017-11-25T06:10:33Z,2018-04-04T23:48:39Z,MERGED,True,60,53,1,https://github.com/samcv,ucd2c.pl Improvements,3,[],https://github.com/MoarVM/MoarVM/pull/756,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/756,"ucd2c.pl: Eliminate $points_by_hex ref hash
This hash is being removed and all uses of it instead have been turned into
use of $points_by_code instead. While the Unicode database seems to always
provide hex numbers in sprintf format %.4X, I believe it's much better to
use the numerical values so we don't have to worry about having two ref
hashes to store the same type of data and making sure they sync up.
ucd2c.pl: Check that each pvalue code isn't assigned twice
Additional improvement on top of the previous commit. The last commit set
the starting pvalue programmatically instead of as an argument. This one
doubly ensures that we don't assign multiple pvalues when registering an
enumerated property.
ucd2c.pl: Simplify number of arguments for enumerated_property()
We can calculate these numbers by checking the number of items provided in
another argument to it.","ucd2c.pl: Eliminate $points_by_hex ref hash
This hash is being removed and all uses of it instead have been turned into
use of $points_by_code instead. While the Unicode database seems to always
provide hex numbers in sprintf format %.4X, I believe it's much better to
use the numerical values so we don't have to worry about having two ref
hashes to store the same type of data and making sure they sync up.
ucd2c.pl: Check that each pvalue code isn't assigned twice
Additional improvement on top of the previous commit. The last commit set
the starting pvalue programmatically instead of as an argument. This one
doubly ensures that we don't assign multiple pvalues when registering an
enumerated property.
ucd2c.pl: Simplify number of arguments for enumerated_property()
We can calculate these numbers by checking the number of items provided in
another argument to it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,758,2017-11-29T07:20:43Z,2017-11-29T08:57:01Z,2018-04-04T23:48:42Z,MERGED,True,31977,31643,3,https://github.com/samcv,UCD and ucd2c.pl fixes. Fix Digit and add int enum property functionality,8,[],https://github.com/MoarVM/MoarVM/pull/758,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/758,"Commit updated Unicode database, produced with latest ucd2c.pl
ucd2c.pl: Put the MVM_COLLATION values back to int not int enum
Since the values are fairly linear, it takes more space to store the enum
array than to just store the raw integer values in the bitfield.
ucd2c.pl: Update copyright for Unicode Database
Also use the text in ReadMe.txt from the raw database files and add it to
the start of unicode_db.c along with the updated copyright message.
Fix bug causing breakage of Numeric_Type=Digit
This caused <:Digit> to match anything with regex, as well as codepoints
that should have had the Digit property value for Numeric_Type returning an
empty string instead.
This was caused by some code trying to add Digit as a subtype of
Numeric_Type for unknown reasons, causing it to be broken.
ucd2c.pl: Remove LineBreak sub and consolidate into another
ucd2c.pl: Streamline and rework code, remove dead code
Mostly it is functionally the same as before.
ucd2c.pl: Add support for integer based enum properties
This acts similarly to our string enums except it uses an enum of integers.
Currently our integer properties store the integer values themselves in the
bitfield.
This change also makes improvements in property checking. Checking that
property value codes are not repeated and all of them are in the same
order. For now there is an exception for Numeric_Type because for whatever
reason Digit is removed and it is registered as its own property.
This is a long standing bug where <:Digit> matches anything, but I am
leaving that as it is until another commit.
Add support for enum int properties","Commit updated Unicode database, produced with latest ucd2c.pl
ucd2c.pl: Put the MVM_COLLATION values back to int not int enum
Since the values are fairly linear, it takes more space to store the enum
array than to just store the raw integer values in the bitfield.
ucd2c.pl: Update copyright for Unicode Database
Also use the text in ReadMe.txt from the raw database files and add it to
the start of unicode_db.c along with the updated copyright message.
Fix bug causing breakage of Numeric_Type=Digit
This caused <:Digit> to match anything with regex, as well as codepoints
that should have had the Digit property value for Numeric_Type returning an
empty string instead.
This was caused by some code trying to add Digit as a subtype of
Numeric_Type for unknown reasons, causing it to be broken.
ucd2c.pl: Remove LineBreak sub and consolidate into another
ucd2c.pl: Streamline and rework code, remove dead code
Mostly it is functionally the same as before.
ucd2c.pl: Add support for integer based enum properties
This acts similarly to our string enums except it uses an enum of integers.
Currently our integer properties store the integer values themselves in the
bitfield.
This change also makes improvements in property checking. Checking that
property value codes are not repeated and all of them are in the same
order. For now there is an exception for Numeric_Type because for whatever
reason Digit is removed and it is registered as its own property.
This is a long standing bug where <:Digit> matches anything, but I am
leaving that as it is until another commit.
Add support for enum int properties",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,759,2017-11-30T06:42:31Z,2017-11-30T07:08:10Z,2017-11-30T07:08:10Z,MERGED,True,1,1,1,https://github.com/briandfoy,Update Unicode version,1,[],https://github.com/MoarVM/MoarVM/pull/759,https://github.com/briandfoy,1,https://github.com/MoarVM/MoarVM/pull/759,The moarvm.org page touts Unicode 10.,The moarvm.org page touts Unicode 10.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,759,2017-11-30T06:42:31Z,2017-11-30T07:08:10Z,2017-11-30T07:08:10Z,MERGED,True,1,1,1,https://github.com/briandfoy,Update Unicode version,1,[],https://github.com/MoarVM/MoarVM/pull/759,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/759#issuecomment-348101633,The moarvm.org page touts Unicode 10.,I changed the commit title and description to be a bit more clear. Merging now. Thanks,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,760,2017-12-03T16:54:46Z,2017-12-03T18:16:18Z,2017-12-03T19:13:34Z,MERGED,True,1,0,1,https://github.com/dogbert17,Impl. of the new inline boundary indicators forgot to set action,1,[],https://github.com/MoarVM/MoarVM/pull/760,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/760,"The newly implemented inline boundary indicators omitted to set
the action field. This led to a warning from valgrind. Although
the warning was benign in this case, it should be fixed anyway.
jnthn++ for providing the fix.","The newly implemented inline boundary indicators omitted to set
the action field. This led to a warning from valgrind. Although
the warning was benign in this case, it should be fixed anyway.
jnthn++ for providing the fix.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,761,2017-12-07T06:33:03Z,2017-12-08T22:07:16Z,2018-04-04T23:47:41Z,MERGED,True,17588,17548,3,https://github.com/samcv,Improvements to ucd2c.pl,8,[],https://github.com/MoarVM/MoarVM/pull/761,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/761,"Commit updated Unicode Database generated with latest ucd2c.pl
ucd2c.pl: Set {next_point} all at once instead of iteratively
So we don't have to worry about setting it properly, it is easier to set it
all at once.
ucd2c.pl: Add things to $PLANES all at once instead of iteratively
Simpler to do it all at once.
ucd2c.pl: Separate code out into get_next_point()
This code returns the requested codepoint, or if it doesn't exist, creates
it.
ucd2c.pl: Use dedicated plane subs instead of just in UnicodeData()
ucd2c.pl: Rename all global variables to UPPERCASE
Several important subs use the same variable names but as locals, which is
bad policy. Make all globals uppercase so they are easily distinguishable.","Commit updated Unicode Database generated with latest ucd2c.pl
ucd2c.pl: Set {next_point} all at once instead of iteratively
So we don't have to worry about setting it properly, it is easier to set it
all at once.
ucd2c.pl: Add things to $PLANES all at once instead of iteratively
Simpler to do it all at once.
ucd2c.pl: Separate code out into get_next_point()
This code returns the requested codepoint, or if it doesn't exist, creates
it.
ucd2c.pl: Use dedicated plane subs instead of just in UnicodeData()
ucd2c.pl: Rename all global variables to UPPERCASE
Several important subs use the same variable names but as locals, which is
bad policy. Make all globals uppercase so they are easily distinguishable.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,766,2017-12-21T09:43:56Z,2018-01-02T11:41:07Z,2018-01-02T11:41:13Z,MERGED,True,27,6,7,https://github.com/bdw,Memory leak fixes,3,[],https://github.com/MoarVM/MoarVM/pull/766,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/766,Fixes some memory leaks found by ASAN.,Fixes some memory leaks found by ASAN.,True,{'LAUGH': ['https://github.com/Napoleonj45']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,767,2017-12-24T23:33:40Z,,2018-04-04T23:52:46Z,OPEN,False,2,2,1,https://github.com/zoffixznet,Fix unwanted null strings in VMArray holes,1,[],https://github.com/MoarVM/MoarVM/pull/767,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/767,"Whenever we read past end or zero out str VMArrays, stick empty strings instead of a null pointer there.
Before:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
chars requires a concrete string, but got null
  in block <unit> at -e line 1

After:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
array[str].new("""", """", """", ""x"")

This fixes the issue, but I just did brute-force-fixage and...

Passes Rakudo's stresstest.","Whenever we read past end or zero out str VMArrays, stick empty strings instead of a null pointer there.
Before:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
chars requires a concrete string, but got null
  in block <unit> at -e line 1

After:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
array[str].new("""", """", """", ""x"")

This fixes the issue, but I just did brute-force-fixage and...

Passes Rakudo's stresstest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,767,2017-12-24T23:33:40Z,,2018-04-04T23:52:46Z,OPEN,False,2,2,1,https://github.com/zoffixznet,Fix unwanted null strings in VMArray holes,1,[],https://github.com/MoarVM/MoarVM/pull/767,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/767#issuecomment-353867732,"Whenever we read past end or zero out str VMArrays, stick empty strings instead of a null pointer there.
Before:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
chars requires a concrete string, but got null
  in block <unit> at -e line 1

After:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
array[str].new("""", """", """", ""x"")

This fixes the issue, but I just did brute-force-fixage and...

Passes Rakudo's stresstest.","I think this is a problem of native array .perl, rather than this should be fixed at the VM level.  Also, wouldn’t this mess with :exists ???
…
 On 25 Dec 2017, at 00:33, Zoffix Znet ***@***.***> wrote:

 Whenever we read past end or zero out str VMArrays, stick empty strings instead of a null pointer there.

 Before:

 $ perl6 -e 'my str @A; @A[3] = ""x""; dd @A'
 chars requires a concrete string, but got null
   in block <unit> at -e line 1

 After:

 $ perl6 -e 'my str @A; @A[3] = ""x""; dd @A'
 array[str].new("""", """", """", ""x"")

 This fixes the issue, but I just did brute-force-fixage and...



 You can view, comment on, or merge this pull request online at:

   #767

 Commit Summary

 	• Fix unwanted null strings in VMArray holes
 File Changes

 	• M src/6model/reprs/VMArray.c (4)
 Patch Links:

 	• https://github.com/MoarVM/MoarVM/pull/767.patch
 	• https://github.com/MoarVM/MoarVM/pull/767.diff
 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,767,2017-12-24T23:33:40Z,,2018-04-04T23:52:46Z,OPEN,False,2,2,1,https://github.com/zoffixznet,Fix unwanted null strings in VMArray holes,1,[],https://github.com/MoarVM/MoarVM/pull/767,https://github.com/zoffixznet,3,https://github.com/MoarVM/MoarVM/pull/767#issuecomment-353889485,"Whenever we read past end or zero out str VMArrays, stick empty strings instead of a null pointer there.
Before:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
chars requires a concrete string, but got null
  in block <unit> at -e line 1

After:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
array[str].new("""", """", """", ""x"")

This fixes the issue, but I just did brute-force-fixage and...

Passes Rakudo's stresstest.","I think this is a problem of native array .perl

It's a problem with anything that touches it:
<Zoffix_> m: my str @a; @a[3] = ""x""; put @a[1]
<camelia> rakudo-moar 5b147fc81: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»
<Zoffix_> m: my str @a; @a[3] = ""x""; say @a[1]
<camelia> rakudo-moar 5b147fc81: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»
<Zoffix_> m: my str @a; @a[3] = ""x""; say @a[1] ~ 42
<camelia> rakudo-moar 5b147fc81: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»


rather than this should be fixed at the VM level

Hence the dog picture :) I notice nqp::null gets HLLified to a Mu, but nqp::null_s doesn't. Is that how to fix the problem maybe?

Also, wouldn’t this mess with :exists ???

That thought occurred to me, but then I noticed that issue... exists... even without my PR, so at the time I assumed since you can't have str type objects that was why. But perhaps this is a bug?
<Zoffix_> m: my str @a; @a[3] = ""x""; say @a[1]:exists
<camelia> rakudo-moar 5b147fc81: OUTPUT: «True␤»",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,767,2017-12-24T23:33:40Z,,2018-04-04T23:52:46Z,OPEN,False,2,2,1,https://github.com/zoffixznet,Fix unwanted null strings in VMArray holes,1,[],https://github.com/MoarVM/MoarVM/pull/767,https://github.com/lizmat,4,https://github.com/MoarVM/MoarVM/pull/767#issuecomment-353896089,"Whenever we read past end or zero out str VMArrays, stick empty strings instead of a null pointer there.
Before:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
chars requires a concrete string, but got null
  in block <unit> at -e line 1

After:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
array[str].new("""", """", """", ""x"")

This fixes the issue, but I just did brute-force-fixage and...

Passes Rakudo's stresstest.","On 25 Dec 2017, at 21:29, Zoffix Znet ***@***.***> wrote:

 I think this is a problem of native array .perl

 It's a problem with anything that touches it:

 <Zoffix_> m: my str @A; @A[3] = ""x""; put @A[1]
 <camelia> rakudo-moar 5b147fc81: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»
 <Zoffix_> m: my str @A; @A[3] = ""x""; say @A[1]
 <camelia> rakudo-moar 5b147fc81: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»
 <Zoffix_> m: my str @A; @A[3] = ""x""; say @A[1] ~ 42
 <camelia> rakudo-moar 5b147fc81: OUTPUT: «concatenate requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

 rather than this should be fixed at the VM level

 Hence the dog picture :) I notice nqp::null gets HLLified to a Mu, but nqp::null_s doesn't. Is that how to fix the problem maybe?
That feels better.  Perhaps that should HLLize to Str ?
 Also, wouldn’t this mess with :exists ???

 That thought occurred to me, but then I noticed that issue... exists... even without my PR, so at the time I assumed since you can't have str type objects that was why. But perhaps this is a bug?

 <Zoffix_> m: my str @A; @A[3] = ""x""; say @A[1]:exists
 <camelia> rakudo-moar 5b147fc81: OUTPUT: «True␤»
After looking at it earlier today, I think the rule is that anything below elems exists, and anything beyond that doesn’t

$ 6 'my int @A; @A[2] = 42; dd @a.EXISTS-POS(1); dd @a.EXISTS-POS(3)'
Bool::True
Bool::False",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,767,2017-12-24T23:33:40Z,,2018-04-04T23:52:46Z,OPEN,False,2,2,1,https://github.com/zoffixznet,Fix unwanted null strings in VMArray holes,1,[],https://github.com/MoarVM/MoarVM/pull/767,https://github.com/zoffixznet,5,https://github.com/MoarVM/MoarVM/pull/767#issuecomment-353896361,"Whenever we read past end or zero out str VMArrays, stick empty strings instead of a null pointer there.
Before:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
chars requires a concrete string, but got null
  in block <unit> at -e line 1

After:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
array[str].new("""", """", """", ""x"")

This fixes the issue, but I just did brute-force-fixage and...

Passes Rakudo's stresstest.","That feels better.  Perhaps that should HLLize to Str ?

Wouldn't that be weird that we'd have a native type that HLLizes to Str, yet you can't put Str into it? Especially since all the other natives like int, default to 0 not Int?
For the record, Scalar native types seem to behave like what this PR makes them as in arrays; empty strings:
<Zoffix_> m: my str $x; dd $x
<camelia> rakudo-moar 8aa17f273: OUTPUT: «""""␤»",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,767,2017-12-24T23:33:40Z,,2018-04-04T23:52:46Z,OPEN,False,2,2,1,https://github.com/zoffixznet,Fix unwanted null strings in VMArray holes,1,[],https://github.com/MoarVM/MoarVM/pull/767,https://github.com/zoffixznet,6,https://github.com/MoarVM/MoarVM/pull/767#issuecomment-378780432,"Whenever we read past end or zero out str VMArrays, stick empty strings instead of a null pointer there.
Before:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
chars requires a concrete string, but got null
  in block <unit> at -e line 1

After:
$ perl6 -e 'my str @a; @a[3] = ""x""; dd @a'
array[str].new("""", """", """", ""x"")

This fixes the issue, but I just did brute-force-fixage and...

Passes Rakudo's stresstest.",ping for review,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,770,2017-12-27T06:39:56Z,2017-12-27T10:10:35Z,2017-12-27T10:16:19Z,MERGED,True,3,0,1,https://github.com/lefth,"On Windows (not using Visual Studio), print size_t with %Iu",1,[],https://github.com/MoarVM/MoarVM/pull/770,https://github.com/lefth,1,https://github.com/MoarVM/MoarVM/pull/770,"Don't use the %zu format string because it's not handled, so a literal
""zu"" is printed.
See issue #769.","Don't use the %zu format string because it's not handled, so a literal
""zu"" is printed.
See issue #769.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,770,2017-12-27T06:39:56Z,2017-12-27T10:10:35Z,2017-12-27T10:16:19Z,MERGED,True,3,0,1,https://github.com/lefth,"On Windows (not using Visual Studio), print size_t with %Iu",1,[],https://github.com/MoarVM/MoarVM/pull/770,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/770#issuecomment-354070482,"Don't use the %zu format string because it's not handled, so a literal
""zu"" is printed.
See issue #769.","You mention %zu doesn't work on gcc, so presumably the fix is just for that, but the conditional being added in the PR also includes MVC version >=1800.  Does Iu with a different header work there or does the condition need to be changed?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,770,2017-12-27T06:39:56Z,2017-12-27T10:10:35Z,2017-12-27T10:16:19Z,MERGED,True,3,0,1,https://github.com/lefth,"On Windows (not using Visual Studio), print size_t with %Iu",1,[],https://github.com/MoarVM/MoarVM/pull/770,https://github.com/lefth,3,https://github.com/MoarVM/MoarVM/pull/770#issuecomment-354082423,"Don't use the %zu format string because it's not handled, so a literal
""zu"" is printed.
See issue #769.",@zoffixznet I fixed the condition. Thanks for catching that. I didn't mean to change the behavior for MSVC builds (any version).,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,770,2017-12-27T06:39:56Z,2017-12-27T10:10:35Z,2017-12-27T10:16:19Z,MERGED,True,3,0,1,https://github.com/lefth,"On Windows (not using Visual Studio), print size_t with %Iu",1,[],https://github.com/MoarVM/MoarVM/pull/770,https://github.com/zoffixznet,4,https://github.com/MoarVM/MoarVM/pull/770#issuecomment-354089972,"Don't use the %zu format string because it's not handled, so a literal
""zu"" is printed.
See issue #769.",👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,771,2017-12-27T15:38:36Z,2017-12-27T15:42:36Z,2017-12-27T15:45:07Z,MERGED,True,1,1,1,https://github.com/baby-gnu,Fix typo,1,[],https://github.com/MoarVM/MoarVM/pull/771,https://github.com/baby-gnu,1,https://github.com/MoarVM/MoarVM/pull/771,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,771,2017-12-27T15:38:36Z,2017-12-27T15:42:36Z,2017-12-27T15:45:07Z,MERGED,True,1,1,1,https://github.com/baby-gnu,Fix typo,1,[],https://github.com/MoarVM/MoarVM/pull/771,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/771#issuecomment-354131710,,Thanks! 👍,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,771,2017-12-27T15:38:36Z,2017-12-27T15:42:36Z,2017-12-27T15:45:07Z,MERGED,True,1,1,1,https://github.com/baby-gnu,Fix typo,1,[],https://github.com/MoarVM/MoarVM/pull/771,https://github.com/baby-gnu,3,https://github.com/MoarVM/MoarVM/pull/771#issuecomment-354132080,,Thanks to lintian ;-),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,772,2017-12-27T15:47:57Z,2017-12-27T15:58:51Z,2017-12-27T16:00:45Z,MERGED,True,3,3,2,https://github.com/baby-gnu,Fix a bunch of typos found by lintian,1,[],https://github.com/MoarVM/MoarVM/pull/772,https://github.com/baby-gnu,1,https://github.com/MoarVM/MoarVM/pull/772,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,772,2017-12-27T15:47:57Z,2017-12-27T15:58:51Z,2017-12-27T16:00:45Z,MERGED,True,3,3,2,https://github.com/baby-gnu,Fix a bunch of typos found by lintian,1,[],https://github.com/MoarVM/MoarVM/pull/772,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/772#issuecomment-354134035,,👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,773,2018-01-01T19:40:41Z,2022-01-25T16:54:46Z,2022-01-25T16:54:46Z,CLOSED,False,143,48,5,https://github.com/MasterDuke17,Use FSA for string storage,1,[],https://github.com/MoarVM/MoarVM/pull/773,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/773,"This covers a lot of MVMString usage, but not everything. E.g., it might be possible to do the same thing in src/strings/normalize.c.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","This covers a lot of MVMString usage, but not everything. E.g., it might be possible to do the same thing in src/strings/normalize.c.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,773,2018-01-01T19:40:41Z,2022-01-25T16:54:46Z,2022-01-25T16:54:46Z,CLOSED,False,143,48,5,https://github.com/MasterDuke17,Use FSA for string storage,1,[],https://github.com/MoarVM/MoarVM/pull/773,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/773#issuecomment-1021399620,"This covers a lot of MVMString usage, but not everything. E.g., it might be possible to do the same thing in src/strings/normalize.c.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",Not needed now that we're using mimalloc (and likely getting rid of the FSA entirely).,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,776,2018-01-05T18:43:57Z,2018-01-05T18:49:26Z,2018-01-05T18:59:35Z,MERGED,True,1,1,1,https://github.com/dogbert17,Fix typo,1,[],https://github.com/MoarVM/MoarVM/pull/776,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/776,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,776,2018-01-05T18:43:57Z,2018-01-05T18:49:26Z,2018-01-05T18:59:35Z,MERGED,True,1,1,1,https://github.com/dogbert17,Fix typo,1,[],https://github.com/MoarVM/MoarVM/pull/776,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/776#issuecomment-355634168,,👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,780,2018-01-12T00:58:36Z,2018-01-12T03:10:18Z,2018-01-12T03:10:22Z,MERGED,True,30,7,1,https://github.com/Kaiepi,Try to use egcc when compiling on OpenBSD,1,[],https://github.com/MoarVM/MoarVM/pull/780,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/780,"egcc's a package providing an up-to-date version of gcc in OpenBSD,
which still uses v4.2 at the moment","egcc's a package providing an up-to-date version of gcc in OpenBSD,
which still uses v4.2 at the moment",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,780,2018-01-12T00:58:36Z,2018-01-12T03:10:18Z,2018-01-12T03:10:22Z,MERGED,True,30,7,1,https://github.com/Kaiepi,Try to use egcc when compiling on OpenBSD,1,[],https://github.com/MoarVM/MoarVM/pull/780,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/780#issuecomment-357131154,"egcc's a package providing an up-to-date version of gcc in OpenBSD,
which still uses v4.2 at the moment",👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,781,2018-01-18T05:22:07Z,2018-01-19T08:13:59Z,2018-04-04T23:48:36Z,MERGED,True,1431,1594,3,https://github.com/samcv,UCD Cleanup,19,[],https://github.com/MoarVM/MoarVM/pull/781,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/781,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,781,2018-01-18T05:22:07Z,2018-01-19T08:13:59Z,2018-04-04T23:48:36Z,MERGED,True,1431,1594,3,https://github.com/samcv,UCD Cleanup,19,[],https://github.com/MoarVM/MoarVM/pull/781,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/781#issuecomment-358617173,,Glad to see that getting cleaned up. 👍,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,781,2018-01-18T05:22:07Z,2018-01-19T08:13:59Z,2018-04-04T23:48:36Z,MERGED,True,1431,1594,3,https://github.com/samcv,UCD Cleanup,19,[],https://github.com/MoarVM/MoarVM/pull/781,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/781#issuecomment-358895801,,Merging now. Have a bit more but I think it's time to merge since there's already many commits.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,784,2018-01-21T02:25:35Z,2018-01-21T02:42:19Z,2018-01-21T02:47:37Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Un-bitrot tools/parse_jitgraph.p6,1,[],https://github.com/MoarVM/MoarVM/pull/784,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/784,"Convert first-index(...) to first(..., :k).
It now produces output instead of dying with No such method 'first-index' for invocant of type 'Array'.","Convert first-index(...) to first(..., :k).
It now produces output instead of dying with No such method 'first-index' for invocant of type 'Array'.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,784,2018-01-21T02:25:35Z,2018-01-21T02:42:19Z,2018-01-21T02:47:37Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Un-bitrot tools/parse_jitgraph.p6,1,[],https://github.com/MoarVM/MoarVM/pull/784,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/784#issuecomment-359219419,"Convert first-index(...) to first(..., :k).
It now produces output instead of dying with No such method 'first-index' for invocant of type 'Array'.",👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,785,2018-01-21T05:15:30Z,2018-01-26T02:30:13Z,2018-01-26T02:31:21Z,MERGED,True,16,0,1,https://github.com/MasterDuke17,Add JIT template for atkey_o,1,[],https://github.com/MoarVM/MoarVM/pull/785,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/785,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
atkey_o was the second most common op (at 3,654 instances) that caused a Cannot get template for: in a JIT log of building Rakudo's CORE.setting.","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
atkey_o was the second most common op (at 3,654 instances) that caused a Cannot get template for: in a JIT log of building Rakudo's CORE.setting.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,786,2018-01-23T17:41:08Z,2018-01-24T00:55:19Z,2018-04-04T23:48:05Z,MERGED,True,1392,1101,3,https://github.com/samcv,ucd2c.pl: Fix White_Space/space Unicode Property +many other improvements,1,[],https://github.com/MoarVM/MoarVM/pull/786,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/786,"Fix Property Name 'space' so it doesn't incorrectly refer to the
Line_Break=space property and fix White_Space property so it doesn't refer to
Bidi_Class=White_Space and instead refers to the White_Space property.

Fixes ""\t"" ~~ /<:space>/ which now correctly matches
Fixes ""1"".uniprop('White_Space') so it doesn't return True


Fix property names/values so that more variations of case and underline's
are used. Before if we had a property name called Foo_Bar we would get:

FooBar (No underscore)
foobar (lowercase and no underscore)
Now an additional one is added:
foo_bar (lowercase but with underscore retained)


Add all property names first, before adding any property aliases. Also check
that a property value does not have the same name as a property before
putting it in the datastructure
Remove workaround for correcting union property values which is no longer
needed anymore since commit
Rename some variables names to be more clear
Fix sprintf warning by not escaping % signs as %%
Add many more comments to this sub (emit_unicode_property_keypairs) than before","Fix Property Name 'space' so it doesn't incorrectly refer to the
Line_Break=space property and fix White_Space property so it doesn't refer to
Bidi_Class=White_Space and instead refers to the White_Space property.

Fixes ""\t"" ~~ /<:space>/ which now correctly matches
Fixes ""1"".uniprop('White_Space') so it doesn't return True


Fix property names/values so that more variations of case and underline's
are used. Before if we had a property name called Foo_Bar we would get:

FooBar (No underscore)
foobar (lowercase and no underscore)
Now an additional one is added:
foo_bar (lowercase but with underscore retained)


Add all property names first, before adding any property aliases. Also check
that a property value does not have the same name as a property before
putting it in the datastructure
Remove workaround for correcting union property values which is no longer
needed anymore since commit
Rename some variables names to be more clear
Fix sprintf warning by not escaping % signs as %%
Add many more comments to this sub (emit_unicode_property_keypairs) than before",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,786,2018-01-23T17:41:08Z,2018-01-24T00:55:19Z,2018-04-04T23:48:05Z,MERGED,True,1392,1101,3,https://github.com/samcv,ucd2c.pl: Fix White_Space/space Unicode Property +many other improvements,1,[],https://github.com/MoarVM/MoarVM/pull/786,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/786#issuecomment-359875941,"Fix Property Name 'space' so it doesn't incorrectly refer to the
Line_Break=space property and fix White_Space property so it doesn't refer to
Bidi_Class=White_Space and instead refers to the White_Space property.

Fixes ""\t"" ~~ /<:space>/ which now correctly matches
Fixes ""1"".uniprop('White_Space') so it doesn't return True


Fix property names/values so that more variations of case and underline's
are used. Before if we had a property name called Foo_Bar we would get:

FooBar (No underscore)
foobar (lowercase and no underscore)
Now an additional one is added:
foo_bar (lowercase but with underscore retained)


Add all property names first, before adding any property aliases. Also check
that a property value does not have the same name as a property before
putting it in the datastructure
Remove workaround for correcting union property values which is no longer
needed anymore since commit
Rename some variables names to be more clear
Fix sprintf warning by not escaping % signs as %%
Add many more comments to this sub (emit_unicode_property_keypairs) than before","That's a long list of changes. Perhaps, it's safer to merge it after the release? The whitespace thing was broken for some months; doesn't seem like it'd hurt to wait one more for its fix.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,786,2018-01-23T17:41:08Z,2018-01-24T00:55:19Z,2018-04-04T23:48:05Z,MERGED,True,1392,1101,3,https://github.com/samcv,ucd2c.pl: Fix White_Space/space Unicode Property +many other improvements,1,[],https://github.com/MoarVM/MoarVM/pull/786,https://github.com/lizmat,3,https://github.com/MoarVM/MoarVM/pull/786#issuecomment-359894716,"Fix Property Name 'space' so it doesn't incorrectly refer to the
Line_Break=space property and fix White_Space property so it doesn't refer to
Bidi_Class=White_Space and instead refers to the White_Space property.

Fixes ""\t"" ~~ /<:space>/ which now correctly matches
Fixes ""1"".uniprop('White_Space') so it doesn't return True


Fix property names/values so that more variations of case and underline's
are used. Before if we had a property name called Foo_Bar we would get:

FooBar (No underscore)
foobar (lowercase and no underscore)
Now an additional one is added:
foo_bar (lowercase but with underscore retained)


Add all property names first, before adding any property aliases. Also check
that a property value does not have the same name as a property before
putting it in the datastructure
Remove workaround for correcting union property values which is no longer
needed anymore since commit
Rename some variables names to be more clear
Fix sprintf warning by not escaping % signs as %%
Add many more comments to this sub (emit_unicode_property_keypairs) than before","+1 on post release
…
 On 23 Jan 2018, at 18:58, Zoffix Znet ***@***.***> wrote:

 That's a long list of changes. Perhaps, it's safer to merge it after the release? The whitespace thing was broken for some months; doesn't seem like it'd hurt to wait one more for its fix.

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,786,2018-01-23T17:41:08Z,2018-01-24T00:55:19Z,2018-04-04T23:48:05Z,MERGED,True,1392,1101,3,https://github.com/samcv,ucd2c.pl: Fix White_Space/space Unicode Property +many other improvements,1,[],https://github.com/MoarVM/MoarVM/pull/786,https://github.com/AlexDaniel,4,https://github.com/MoarVM/MoarVM/pull/786#issuecomment-359899875,"Fix Property Name 'space' so it doesn't incorrectly refer to the
Line_Break=space property and fix White_Space property so it doesn't refer to
Bidi_Class=White_Space and instead refers to the White_Space property.

Fixes ""\t"" ~~ /<:space>/ which now correctly matches
Fixes ""1"".uniprop('White_Space') so it doesn't return True


Fix property names/values so that more variations of case and underline's
are used. Before if we had a property name called Foo_Bar we would get:

FooBar (No underscore)
foobar (lowercase and no underscore)
Now an additional one is added:
foo_bar (lowercase but with underscore retained)


Add all property names first, before adding any property aliases. Also check
that a property value does not have the same name as a property before
putting it in the datastructure
Remove workaround for correcting union property values which is no longer
needed anymore since commit
Rename some variables names to be more clear
Fix sprintf warning by not escaping % signs as %%
Add many more comments to this sub (emit_unicode_property_keypairs) than before",I'm OK with this merged before the release as long as @samcv is confident with the changes. For rakudo star users that's not just one month to wait. If that's merged I'll do a quick toaster run to make sure the world didn't break apart.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,786,2018-01-23T17:41:08Z,2018-01-24T00:55:19Z,2018-04-04T23:48:05Z,MERGED,True,1392,1101,3,https://github.com/samcv,ucd2c.pl: Fix White_Space/space Unicode Property +many other improvements,1,[],https://github.com/MoarVM/MoarVM/pull/786,https://github.com/lizmat,5,https://github.com/MoarVM/MoarVM/pull/786#issuecomment-359900331,"Fix Property Name 'space' so it doesn't incorrectly refer to the
Line_Break=space property and fix White_Space property so it doesn't refer to
Bidi_Class=White_Space and instead refers to the White_Space property.

Fixes ""\t"" ~~ /<:space>/ which now correctly matches
Fixes ""1"".uniprop('White_Space') so it doesn't return True


Fix property names/values so that more variations of case and underline's
are used. Before if we had a property name called Foo_Bar we would get:

FooBar (No underscore)
foobar (lowercase and no underscore)
Now an additional one is added:
foo_bar (lowercase but with underscore retained)


Add all property names first, before adding any property aliases. Also check
that a property value does not have the same name as a property before
putting it in the datastructure
Remove workaround for correcting union property values which is no longer
needed anymore since commit
Rename some variables names to be more clear
Fix sprintf warning by not escaping % signs as %%
Add many more comments to this sub (emit_unicode_property_keypairs) than before","ok, if you’re willing to do that, I’m reverting to +1 *before* release  :-)
…
 On 23 Jan 2018, at 20:19, Aleks-Daniel Jakimenko-Aleksejev ***@***.***> wrote:

 I'm OK with this merged before the release as long as @samcv is confident with the changes. For rakudo star users that's not just one month to wait. If that's merged I'll do a quick toaster run to make sure the world didn't break apart.

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,786,2018-01-23T17:41:08Z,2018-01-24T00:55:19Z,2018-04-04T23:48:05Z,MERGED,True,1392,1101,3,https://github.com/samcv,ucd2c.pl: Fix White_Space/space Unicode Property +many other improvements,1,[],https://github.com/MoarVM/MoarVM/pull/786,https://github.com/samcv,6,https://github.com/MoarVM/MoarVM/pull/786#issuecomment-359984729,"Fix Property Name 'space' so it doesn't incorrectly refer to the
Line_Break=space property and fix White_Space property so it doesn't refer to
Bidi_Class=White_Space and instead refers to the White_Space property.

Fixes ""\t"" ~~ /<:space>/ which now correctly matches
Fixes ""1"".uniprop('White_Space') so it doesn't return True


Fix property names/values so that more variations of case and underline's
are used. Before if we had a property name called Foo_Bar we would get:

FooBar (No underscore)
foobar (lowercase and no underscore)
Now an additional one is added:
foo_bar (lowercase but with underscore retained)


Add all property names first, before adding any property aliases. Also check
that a property value does not have the same name as a property before
putting it in the datastructure
Remove workaround for correcting union property values which is no longer
needed anymore since commit
Rename some variables names to be more clear
Fix sprintf warning by not escaping % signs as %%
Add many more comments to this sub (emit_unicode_property_keypairs) than before","@AlexDaniel yes i'm pretty confident in the changes :) pretty sure all will be fine on Toaster, but running it is a very good idea.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,787,2018-01-23T23:45:48Z,2018-11-05T16:32:47Z,2018-11-05T16:33:37Z,CLOSED,False,14,2,3,https://github.com/MasterDuke17,Add JIT template for sp_findmeth,3,[],https://github.com/MoarVM/MoarVM/pull/787,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/787,"Also mark it invokish in the oplist, since its slow path might invoke,
and the Rakudo build breaks without it. Some chat about this starting
here: https://irclog.perlgeek.de/moarvm/2018-01-23#i_15726145
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
sp_findmeth was the most common op (at 7,890 instances) that caused a Cannot get template for: in a JIT log of building Rakudo's CORE.setting.","Also mark it invokish in the oplist, since its slow path might invoke,
and the Rakudo build breaks without it. Some chat about this starting
here: https://irclog.perlgeek.de/moarvm/2018-01-23#i_15726145
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
sp_findmeth was the most common op (at 7,890 instances) that caused a Cannot get template for: in a JIT log of building Rakudo's CORE.setting.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,787,2018-01-23T23:45:48Z,2018-11-05T16:32:47Z,2018-11-05T16:33:37Z,CLOSED,False,14,2,3,https://github.com/MasterDuke17,Add JIT template for sp_findmeth,3,[],https://github.com/MoarVM/MoarVM/pull/787,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/787#issuecomment-361236350,"Also mark it invokish in the oplist, since its slow path might invoke,
and the Rakudo build breaks without it. Some chat about this starting
here: https://irclog.perlgeek.de/moarvm/2018-01-23#i_15726145
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
sp_findmeth was the most common op (at 7,890 instances) that caused a Cannot get template for: in a JIT log of building Rakudo's CORE.setting.","So, two thoughts:

we currently have a special-cased invokish check for the slow case. (When I implemented that with an expicit GUARD node for the expr JIT, I found the guard node overwrote my rdi register, which is bad, and I have to debug it).
This patch makes us pay the cost of the invokish check in all cases, which is suboptimal; then again, making it 'internal' is not compatible with how the expr JIT handles the guard as a barrier, so that optimization will have to go.
The lego JIT will now do the throwish check twice - in this patch, it should be removed",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,787,2018-01-23T23:45:48Z,2018-11-05T16:32:47Z,2018-11-05T16:33:37Z,CLOSED,False,14,2,3,https://github.com/MasterDuke17,Add JIT template for sp_findmeth,3,[],https://github.com/MoarVM/MoarVM/pull/787,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/787#issuecomment-363771344,"Also mark it invokish in the oplist, since its slow path might invoke,
and the Rakudo build breaks without it. Some chat about this starting
here: https://irclog.perlgeek.de/moarvm/2018-01-23#i_15726145
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
sp_findmeth was the most common op (at 7,890 instances) that caused a Cannot get template for: in a JIT log of building Rakudo's CORE.setting.","Is this where the lego JIT does the second throwish check? If so, should it be reduced to just the first/if branch?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,787,2018-01-23T23:45:48Z,2018-11-05T16:32:47Z,2018-11-05T16:33:37Z,CLOSED,False,14,2,3,https://github.com/MasterDuke17,Add JIT template for sp_findmeth,3,[],https://github.com/MoarVM/MoarVM/pull/787,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/787#issuecomment-435940968,"Also mark it invokish in the oplist, since its slow path might invoke,
and the Rakudo build breaks without it. Some chat about this starting
here: https://irclog.perlgeek.de/moarvm/2018-01-23#i_15726145
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
sp_findmeth was the most common op (at 7,890 instances) that caused a Cannot get template for: in a JIT log of building Rakudo's CORE.setting.",Closing because this has already been done.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,788,2018-01-26T04:57:40Z,2018-01-28T21:29:05Z,2018-01-28T21:46:40Z,MERGED,True,59,2,2,https://github.com/MasterDuke17,Add more jit templates,8,[],https://github.com/MoarVM/MoarVM/pull/788,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/788,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
box_i caused the Rakudo build to break when I first added it, but after rebasing against master it's now fine. I didn't try to bisect, but I guess @niner's JIT related commits fixed it. @bdw any thoughts?
getdynlex caused a segv when building NQP, but @timo++ gave me a fix for the ^caller macro and now everything works just fine.","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
box_i caused the Rakudo build to break when I first added it, but after rebasing against master it's now fine. I didn't try to bisect, but I guess @niner's JIT related commits fixed it. @bdw any thoughts?
getdynlex caused a segv when building NQP, but @timo++ gave me a fix for the ^caller macro and now everything works just fine.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,789,2018-01-27T23:04:15Z,2018-01-28T09:00:09Z,2018-01-28T09:00:09Z,MERGED,True,1,1,1,https://github.com/cygx,Make MVM_spesh_manipulate_remove_handler_successors() public,1,[],https://github.com/MoarVM/MoarVM/pull/789,https://github.com/cygx,1,https://github.com/MoarVM/MoarVM/pull/789,Rakudo commit baa1393 uses it in src/vm/moar/ops/container.c,Rakudo commit baa1393 uses it in src/vm/moar/ops/container.c,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,790,2018-01-30T01:57:21Z,2018-01-30T08:28:33Z,2018-01-30T11:36:14Z,MERGED,True,119,0,1,https://github.com/MasterDuke17,Add even more jit templates,14,[],https://github.com/MoarVM/MoarVM/pull/790,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/790,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,792,2018-01-30T20:00:38Z,2018-02-03T22:48:55Z,2018-02-04T12:27:43Z,MERGED,True,212,0,1,https://github.com/MasterDuke17,Yet more jit templates,17,[],https://github.com/MoarVM/MoarVM/pull/792,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/792,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,793,2018-02-01T23:43:13Z,2018-02-02T01:41:56Z,2018-04-04T23:48:45Z,MERGED,True,811,92,6,https://github.com/samcv,Add windows-1251 (Cyrillic) decode/encode. Fix bug in windows-1252,1,[],https://github.com/MoarVM/MoarVM/pull/793,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/793,"We now have support for windows-1251 decoding and encoding.
This also fixes a bug with windows-1252 (Latin) which would cause
certain codepoints not to convert properly, for example the ™ mark and
likely at least one other.","We now have support for windows-1251 decoding and encoding.
This also fixes a bug with windows-1252 (Latin) which would cause
certain codepoints not to convert properly, for example the ™ mark and
likely at least one other.",True,{'HEART': ['https://github.com/Demayl']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,796,2018-02-03T22:17:45Z,2020-04-18T13:35:12Z,2020-04-18T13:37:17Z,CLOSED,False,28,12,3,https://github.com/wictory,Fix alignment of sizes for gc allocated objects.,6,[],https://github.com/MoarVM/MoarVM/pull/796,https://github.com/wictory,1,https://github.com/MoarVM/MoarVM/pull/796,"Hi!
So I discovered that there are some alignment problems sometimes in moarvm. I found this using the OpenBSD of rakudo, because the atomic_ops library has alignment assertions enabled by default. The noticed the bug the first time when I ran zef install OpenSSL. The output I get from a triggering program is this:
$ perl6 -I . -e ""use CrashTest;""                         
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
Abort trap (core dumped)

I started investigating this issue in the garbage collector, but @jnthn suggested on IRC that it would be better to fix the issue when the types are created.
Anyhow, I have started with adding assertions all over the place, and I will check if the CI will give same results as I get on my system. After this I will commit a fix.","Hi!
So I discovered that there are some alignment problems sometimes in moarvm. I found this using the OpenBSD of rakudo, because the atomic_ops library has alignment assertions enabled by default. The noticed the bug the first time when I ran zef install OpenSSL. The output I get from a triggering program is this:
$ perl6 -I . -e ""use CrashTest;""                         
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
Abort trap (core dumped)

I started investigating this issue in the garbage collector, but @jnthn suggested on IRC that it would be better to fix the issue when the types are created.
Anyhow, I have started with adding assertions all over the place, and I will check if the CI will give same results as I get on my system. After this I will commit a fix.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,796,2018-02-03T22:17:45Z,2020-04-18T13:35:12Z,2020-04-18T13:37:17Z,CLOSED,False,28,12,3,https://github.com/wictory,Fix alignment of sizes for gc allocated objects.,6,[],https://github.com/MoarVM/MoarVM/pull/796,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/796#issuecomment-364262903,"Hi!
So I discovered that there are some alignment problems sometimes in moarvm. I found this using the OpenBSD of rakudo, because the atomic_ops library has alignment assertions enabled by default. The noticed the bug the first time when I ran zef install OpenSSL. The output I get from a triggering program is this:
$ perl6 -I . -e ""use CrashTest;""                         
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
Abort trap (core dumped)

I started investigating this issue in the garbage collector, but @jnthn suggested on IRC that it would be better to fix the issue when the types are created.
Anyhow, I have started with adding assertions all over the place, and I will check if the CI will give same results as I get on my system. After this I will commit a fix.","There'll likely be more places that need this, so we could in the future lift the align_to out. But I guess aligning P6Opaque already goes a long way, given it's one of the most common representations.",True,{'THUMBS_UP': ['https://github.com/wictory']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,796,2018-02-03T22:17:45Z,2020-04-18T13:35:12Z,2020-04-18T13:37:17Z,CLOSED,False,28,12,3,https://github.com/wictory,Fix alignment of sizes for gc allocated objects.,6,[],https://github.com/MoarVM/MoarVM/pull/796,https://github.com/wictory,3,https://github.com/MoarVM/MoarVM/pull/796#issuecomment-364788837,"Hi!
So I discovered that there are some alignment problems sometimes in moarvm. I found this using the OpenBSD of rakudo, because the atomic_ops library has alignment assertions enabled by default. The noticed the bug the first time when I ran zef install OpenSSL. The output I get from a triggering program is this:
$ perl6 -I . -e ""use CrashTest;""                         
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
Abort trap (core dumped)

I started investigating this issue in the garbage collector, but @jnthn suggested on IRC that it would be better to fix the issue when the types are created.
Anyhow, I have started with adding assertions all over the place, and I will check if the CI will give same results as I get on my system. After this I will commit a fix.","I grepped for st->size, to find the places where the size changed to something not coming from a sizeof() constant. I assumed that the sizeof() constants are aligned, but that could obviously be false under certain circumstances. Also, there might be other places where the size is assigned to.
It's a bit annoying that this kind of bug is so difficult to test properly. I was thinking about learning some nqp and and write a compose torture program which would compose all kinds of types and see which size is obtained.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,796,2018-02-03T22:17:45Z,2020-04-18T13:35:12Z,2020-04-18T13:37:17Z,CLOSED,False,28,12,3,https://github.com/wictory,Fix alignment of sizes for gc allocated objects.,6,[],https://github.com/MoarVM/MoarVM/pull/796,https://github.com/AlexDaniel,4,https://github.com/MoarVM/MoarVM/pull/796#issuecomment-615872923,"Hi!
So I discovered that there are some alignment problems sometimes in moarvm. I found this using the OpenBSD of rakudo, because the atomic_ops library has alignment assertions enabled by default. The noticed the bug the first time when I ran zef install OpenSSL. The output I get from a triggering program is this:
$ perl6 -I . -e ""use CrashTest;""                         
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
assertion ""((size_t)addr & (sizeof(*addr) - 1)) == 0"" failed: file ""/usr/local/include/atomic_ops/sysdeps/gcc/../loadstore/atomic_load.h"", line 31, function ""AO_load""
Abort trap (core dumped)

I started investigating this issue in the garbage collector, but @jnthn suggested on IRC that it would be better to fix the issue when the types are created.
Anyhow, I have started with adding assertions all over the place, and I will check if the CI will give same results as I get on my system. After this I will commit a fix.","Thank you for the PR, @wictory! It was getting a bit old so I rebased it, fixed a conflict, and then merged it into master!

ab089e9
e6e36fb
bcf3969
5d65d9e
e932be9
1eba4e8
02486a3
02486a3",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,798,2018-02-07T01:43:24Z,2018-04-11T04:10:52Z,2018-04-11T04:10:52Z,CLOSED,False,462,239,10,https://github.com/samcv,RFC Allow optional strict decoding of windows-1251/1252 (new ops),2,[],https://github.com/MoarVM/MoarVM/pull/798,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/798,"This is an RFC for comment on these changes. The op names need to be
changed, so name suggestions are appreciated. Also I would like comment
on whether I should just change the arguments for any function which
is not used in a MoarVM OP, instead of having redundant functions,
would be appreciated.

We have new versions of encode, decode, and encoderep that allow
the new config flag. decoderep never existed before, so this feature
was added to the decoder functions and a function to decode supporting
replacements and a flag was added (decode2rep)
Flags for these op currently have only one setting:
Config flag 1:

Throws when it encounters a character which does not map to the
other encoding.
When used under replacement mode, this causes
replacements to be done with codepoints that may fit into the target
encoding but are invalid (i.e. 129 in windows-1252).

This adds new ops (names will likely be changed)

decode2rep: we never had a decoderep op. This op replaces decoded
characters that don't have official mappings with a supplied
replacement string. Currently it is limited to replacement of strings
with only one grapheme.
encode2: like encode except you can set an additional config flag
decode2: like decode except you can set an additional config flag
encoderep2: like encoderep except you can set an additional config
flag","This is an RFC for comment on these changes. The op names need to be
changed, so name suggestions are appreciated. Also I would like comment
on whether I should just change the arguments for any function which
is not used in a MoarVM OP, instead of having redundant functions,
would be appreciated.

We have new versions of encode, decode, and encoderep that allow
the new config flag. decoderep never existed before, so this feature
was added to the decoder functions and a function to decode supporting
replacements and a flag was added (decode2rep)
Flags for these op currently have only one setting:
Config flag 1:

Throws when it encounters a character which does not map to the
other encoding.
When used under replacement mode, this causes
replacements to be done with codepoints that may fit into the target
encoding but are invalid (i.e. 129 in windows-1252).

This adds new ops (names will likely be changed)

decode2rep: we never had a decoderep op. This op replaces decoded
characters that don't have official mappings with a supplied
replacement string. Currently it is limited to replacement of strings
with only one grapheme.
encode2: like encode except you can set an additional config flag
decode2: like decode except you can set an additional config flag
encoderep2: like encoderep except you can set an additional config
flag",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,798,2018-02-07T01:43:24Z,2018-04-11T04:10:52Z,2018-04-11T04:10:52Z,CLOSED,False,462,239,10,https://github.com/samcv,RFC Allow optional strict decoding of windows-1251/1252 (new ops),2,[],https://github.com/MoarVM/MoarVM/pull/798,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/798#issuecomment-364260704,"This is an RFC for comment on these changes. The op names need to be
changed, so name suggestions are appreciated. Also I would like comment
on whether I should just change the arguments for any function which
is not used in a MoarVM OP, instead of having redundant functions,
would be appreciated.

We have new versions of encode, decode, and encoderep that allow
the new config flag. decoderep never existed before, so this feature
was added to the decoder functions and a function to decode supporting
replacements and a flag was added (decode2rep)
Flags for these op currently have only one setting:
Config flag 1:

Throws when it encounters a character which does not map to the
other encoding.
When used under replacement mode, this causes
replacements to be done with codepoints that may fit into the target
encoding but are invalid (i.e. 129 in windows-1252).

This adds new ops (names will likely be changed)

decode2rep: we never had a decoderep op. This op replaces decoded
characters that don't have official mappings with a supplied
replacement string. Currently it is limited to replacement of strings
with only one grapheme.
encode2: like encode except you can set an additional config flag
decode2: like decode except you can set an additional config flag
encoderep2: like encoderep except you can set an additional config
flag","Not entirely keen on the 2 in the op name. Maybe conf could be better (so, encodeconf, encoderepconf, decoderepconf, etc.)
I think I'd prefer it slightly if the default were to be strict and we had a flag that made it loose.
One other thought: it's tiresome to implement every decoder twice, once streaming and once not. I wonder if we can do everything in terms of the streaming (not at the op level, but at the function level).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,798,2018-02-07T01:43:24Z,2018-04-11T04:10:52Z,2018-04-11T04:10:52Z,CLOSED,False,462,239,10,https://github.com/samcv,RFC Allow optional strict decoding of windows-1251/1252 (new ops),2,[],https://github.com/MoarVM/MoarVM/pull/798,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/798#issuecomment-364733876,"This is an RFC for comment on these changes. The op names need to be
changed, so name suggestions are appreciated. Also I would like comment
on whether I should just change the arguments for any function which
is not used in a MoarVM OP, instead of having redundant functions,
would be appreciated.

We have new versions of encode, decode, and encoderep that allow
the new config flag. decoderep never existed before, so this feature
was added to the decoder functions and a function to decode supporting
replacements and a flag was added (decode2rep)
Flags for these op currently have only one setting:
Config flag 1:

Throws when it encounters a character which does not map to the
other encoding.
When used under replacement mode, this causes
replacements to be done with codepoints that may fit into the target
encoding but are invalid (i.e. 129 in windows-1252).

This adds new ops (names will likely be changed)

decode2rep: we never had a decoderep op. This op replaces decoded
characters that don't have official mappings with a supplied
replacement string. Currently it is limited to replacement of strings
with only one grapheme.
encode2: like encode except you can set an additional config flag
decode2: like decode except you can set an additional config flag
encoderep2: like encoderep except you can set an additional config
flag",@jnthn I've updated it so that all the ops end with config and the default is to be strict. Full details in the commit message of the updated commit. I will probably merge it after the next release.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,798,2018-02-07T01:43:24Z,2018-04-11T04:10:52Z,2018-04-11T04:10:52Z,CLOSED,False,462,239,10,https://github.com/samcv,RFC Allow optional strict decoding of windows-1251/1252 (new ops),2,[],https://github.com/MoarVM/MoarVM/pull/798,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/798#issuecomment-380321233,"This is an RFC for comment on these changes. The op names need to be
changed, so name suggestions are appreciated. Also I would like comment
on whether I should just change the arguments for any function which
is not used in a MoarVM OP, instead of having redundant functions,
would be appreciated.

We have new versions of encode, decode, and encoderep that allow
the new config flag. decoderep never existed before, so this feature
was added to the decoder functions and a function to decode supporting
replacements and a flag was added (decode2rep)
Flags for these op currently have only one setting:
Config flag 1:

Throws when it encounters a character which does not map to the
other encoding.
When used under replacement mode, this causes
replacements to be done with codepoints that may fit into the target
encoding but are invalid (i.e. 129 in windows-1252).

This adds new ops (names will likely be changed)

decode2rep: we never had a decoderep op. This op replaces decoded
characters that don't have official mappings with a supplied
replacement string. Currently it is limited to replacement of strings
with only one grapheme.
encode2: like encode except you can set an additional config flag
decode2: like decode except you can set an additional config flag
encoderep2: like encoderep except you can set an additional config
flag",This was added in to master. Closing.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,799,2018-02-08T23:26:21Z,2018-04-05T22:31:14Z,2018-04-05T22:31:14Z,MERGED,True,5,34545,108,https://github.com/samcv,Add libatomic_ops as a submodule instead of in-tree,2,[],https://github.com/MoarVM/MoarVM/pull/799,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/799,"The old in-tree 3rdparty/libatomic_ops files have been removed and they
are replaced by a submodule. This submodule was created by merging only
the commits and files from 3rdparty/libatomic_ops into the upstream
libatomic_ops repository.","The old in-tree 3rdparty/libatomic_ops files have been removed and they
are replaced by a submodule. This submodule was created by merging only
the commits and files from 3rdparty/libatomic_ops into the upstream
libatomic_ops repository.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,799,2018-02-08T23:26:21Z,2018-04-05T22:31:14Z,2018-04-05T22:31:14Z,MERGED,True,5,34545,108,https://github.com/samcv,Add libatomic_ops as a submodule instead of in-tree,2,[],https://github.com/MoarVM/MoarVM/pull/799,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/799#issuecomment-367147337,"The old in-tree 3rdparty/libatomic_ops files have been removed and they
are replaced by a submodule. This submodule was created by merging only
the commits and files from 3rdparty/libatomic_ops into the upstream
libatomic_ops repository.",👍 from me,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,801,2018-02-12T12:33:26Z,2018-02-12T12:38:48Z,2018-02-12T12:57:16Z,MERGED,True,1,1,1,https://github.com/wukgdu,fix format string's parameters,1,[],https://github.com/MoarVM/MoarVM/pull/801,https://github.com/wukgdu,1,https://github.com/MoarVM/MoarVM/pull/801,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,801,2018-02-12T12:33:26Z,2018-02-12T12:38:48Z,2018-02-12T12:57:16Z,MERGED,True,1,1,1,https://github.com/wukgdu,fix format string's parameters,1,[],https://github.com/MoarVM/MoarVM/pull/801,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/801#issuecomment-364911147,,👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,802,2018-02-14T00:42:40Z,2018-02-14T00:51:30Z,2018-02-14T00:56:32Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Fix typos in comments,1,[],https://github.com/MoarVM/MoarVM/pull/802,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/802,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,805,2018-02-17T15:24:46Z,2018-02-17T22:24:58Z,2018-02-17T23:14:43Z,CLOSED,False,12,5,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on StaticFrame,1,[],https://github.com/MoarVM/MoarVM/pull/805,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/805,"Add a value that indicates whether the lexical in the static frame has
been assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","Add a value that indicates whether the lexical in the static frame has
been assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,805,2018-02-17T15:24:46Z,2018-02-17T22:24:58Z,2018-02-17T23:14:43Z,CLOSED,False,12,5,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on StaticFrame,1,[],https://github.com/MoarVM/MoarVM/pull/805,https://github.com/jstuder-gh,2,https://github.com/MoarVM/MoarVM/pull/805#issuecomment-366448498,"Add a value that indicates whether the lexical in the static frame has
been assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994",See rakudo/rakudo#1539,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,805,2018-02-17T15:24:46Z,2018-02-17T22:24:58Z,2018-02-17T23:14:43Z,CLOSED,False,12,5,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on StaticFrame,1,[],https://github.com/MoarVM/MoarVM/pull/805,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/805#issuecomment-366453502,"Add a value that indicates whether the lexical in the static frame has
been assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994",This won't work; state variables exist per closure clone.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,805,2018-02-17T15:24:46Z,2018-02-17T22:24:58Z,2018-02-17T23:14:43Z,CLOSED,False,12,5,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on StaticFrame,1,[],https://github.com/MoarVM/MoarVM/pull/805,https://github.com/jstuder-gh,4,https://github.com/MoarVM/MoarVM/pull/805#issuecomment-366455666,"Add a value that indicates whether the lexical in the static frame has
been assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","On the HLL side, the p6stateinit extop is using the existing p6stateinit logic and deferring to that. So
the MVM_FRAME_FLAG_STATE_INIT set on the frames determines that when assignment occurs with the HLL init flag acting as a fallback.
MVMint64 do_init = tc->cur_frame->flags & MVM_FRAME_FLAG_STATE_INIT ? 1 : 0;

...

GET_REG(tc, 0).i64 = do_init || !*is_hll_init;

It appears to work in practice, at least for the scenario presented in the Rakudo PR. Is this likely to fail given more complicated scenarios? If you think this is a wrong way to go about it, I can rework it. I
would just need you to point me in the right direction.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,805,2018-02-17T15:24:46Z,2018-02-17T22:24:58Z,2018-02-17T23:14:43Z,CLOSED,False,12,5,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on StaticFrame,1,[],https://github.com/MoarVM/MoarVM/pull/805,https://github.com/jstuder-gh,5,https://github.com/MoarVM/MoarVM/pull/805#issuecomment-366461300,"Add a value that indicates whether the lexical in the static frame has
been assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","It does indeed fail to work in more complicated scenarios
Given the following:
say do for ^5 {
    sub f($x) {
        return if $x;
        state $y = 5;
        $y
    };
    f 1;
    f 0
}

This results in:
(5 (Any) (Any) (Any) (Any))

I just want to make sure that I have what you are saying correct:
In Rakudo, a block that is declared ""declaration_static"" has a static frame created for it. Each closure or clone creates a new frame which inherits certain data from the static frame. The issue here is that the statevars exist per clone where the static frame is shared among all instances (and thus all invocations). Is this correct?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,805,2018-02-17T15:24:46Z,2018-02-17T22:24:58Z,2018-02-17T23:14:43Z,CLOSED,False,12,5,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on StaticFrame,1,[],https://github.com/MoarVM/MoarVM/pull/805,https://github.com/jstuder-gh,6,https://github.com/MoarVM/MoarVM/pull/805#issuecomment-366463195,"Add a value that indicates whether the lexical in the static frame has
been assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","The CodeRef is shared between frames invoked from the same closure but not all like the static frame, is it not? So any statevar init indicator could go there?
I suppose it should have been obvious considering that the statevar values per frame are retrieved from there, but somehow it didn't click.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,805,2018-02-17T15:24:46Z,2018-02-17T22:24:58Z,2018-02-17T23:14:43Z,CLOSED,False,12,5,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on StaticFrame,1,[],https://github.com/MoarVM/MoarVM/pull/805,https://github.com/jnthn,7,https://github.com/MoarVM/MoarVM/pull/805#issuecomment-366476082,"Add a value that indicates whether the lexical in the static frame has
been assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","Yes, alongside the state values (which are in the code object) would be the place for it to go, since they share the same lifecycle.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,805,2018-02-17T15:24:46Z,2018-02-17T22:24:58Z,2018-02-17T23:14:43Z,CLOSED,False,12,5,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on StaticFrame,1,[],https://github.com/MoarVM/MoarVM/pull/805,https://github.com/jstuder-gh,8,https://github.com/MoarVM/MoarVM/pull/805#issuecomment-366478561,"Add a value that indicates whether the lexical in the static frame has
been assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994",Thanks for confirming. I'll have another go at it and submit a working version at a later date.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,806,2018-02-18T17:15:16Z,2018-07-21T15:45:13Z,2018-07-21T15:45:14Z,CLOSED,False,8,4,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on CodeRef (CodeRef edition),2,[],https://github.com/MoarVM/MoarVM/pull/806,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/806,"Add a value that indicates whether the statevar in the coderef has been
assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","Add a value that indicates whether the statevar in the coderef has been
assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,806,2018-02-18T17:15:16Z,2018-07-21T15:45:13Z,2018-07-21T15:45:14Z,CLOSED,False,8,4,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on CodeRef (CodeRef edition),2,[],https://github.com/MoarVM/MoarVM/pull/806,https://github.com/jstuder-gh,2,https://github.com/MoarVM/MoarVM/pull/806#issuecomment-366531137,"Add a value that indicates whether the statevar in the coderef has been
assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","This is different from the PR I submitted yesterday. This PR sets the flags on the CodeRef associated with a closure, making it about 100% more useful.
See Rakudo PR#1542",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,806,2018-02-18T17:15:16Z,2018-07-21T15:45:13Z,2018-07-21T15:45:14Z,CLOSED,False,8,4,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on CodeRef (CodeRef edition),2,[],https://github.com/MoarVM/MoarVM/pull/806,https://github.com/pmurias,3,https://github.com/MoarVM/MoarVM/pull/806#issuecomment-366537447,"Add a value that indicates whether the statevar in the coderef has been
assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994",Did you consider storing a special marker pointer in the state var storage instead of allocating extra storage?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,806,2018-02-18T17:15:16Z,2018-07-21T15:45:13Z,2018-07-21T15:45:14Z,CLOSED,False,8,4,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on CodeRef (CodeRef edition),2,[],https://github.com/MoarVM/MoarVM/pull/806,https://github.com/jstuder-gh,4,https://github.com/MoarVM/MoarVM/pull/806#issuecomment-366546458,"Add a value that indicates whether the statevar in the coderef has been
assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","I did consider it, but it was unclear to me where to store it. The lexicals are stored on the code ref and in the frame's env as a heap-allocated array of MVMRegister pointers.
If can we assume that all the lexicals will be MVMObjects, then MVMCollectableFlags has a few free bits, but since it mostly deals with GC it didn't feel appropriate. Neither did anywhere on the STable. I'm also a little wary of messing with the structure of the memory on something as fundamental as MVMObject, given my lack of knowledge of GC, Spesh, etc, and the types of assumptions they would make.
When native state variables are implemented, it would get trickier I imagine.
This seemed like a simple place to put it, but also applicable across the board on all different REPR types.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,806,2018-02-18T17:15:16Z,2018-07-21T15:45:13Z,2018-07-21T15:45:14Z,CLOSED,False,8,4,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on CodeRef (CodeRef edition),2,[],https://github.com/MoarVM/MoarVM/pull/806,https://github.com/jstuder-gh,5,https://github.com/MoarVM/MoarVM/pull/806#issuecomment-367352546,"Add a value that indicates whether the statevar in the coderef has been
assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","Is this an improper place to store the data or perhaps an inappropriate way to solve the Rakudo bug altogether? If so, please let me know what I can do to improve this so that we can squash this long-standing bug once and for all :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,806,2018-02-18T17:15:16Z,2018-07-21T15:45:13Z,2018-07-21T15:45:14Z,CLOSED,False,8,4,3,https://github.com/jstuder-gh,Rakudo RT#102994: Add flag indicating HLL init status on CodeRef (CodeRef edition),2,[],https://github.com/MoarVM/MoarVM/pull/806,https://github.com/jstuder-gh,6,https://github.com/MoarVM/MoarVM/pull/806#issuecomment-406805082,"Add a value that indicates whether the statevar in the coderef has been
assigned a value by the HLL (flag set via extop on HLL side).
This change is being made to coincide with a Rakudo development
regarding statevar initialization.
See RT#102994","I'm closing this PR. I intend to resubmit in the future, but with a rebased and reworked version.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,807,2018-02-22T02:06:19Z,2018-02-22T07:47:05Z,2018-02-22T07:47:05Z,MERGED,True,1,1,1,https://github.com/ugexe,Bump libuv version 1.19.2,1,[],https://github.com/MoarVM/MoarVM/pull/807,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/807,Resolves #757,Resolves #757,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,808,2018-02-22T02:08:02Z,2018-02-22T08:14:14Z,2018-02-22T08:14:15Z,MERGED,True,8,68,2,https://github.com/ugexe,Use uv_fs_copyfile api,2,[],https://github.com/MoarVM/MoarVM/pull/808,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/808,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,809,2018-02-22T02:09:09Z,2018-02-22T08:24:54Z,2018-02-22T08:24:54Z,MERGED,True,234,204,9,https://github.com/ugexe,Add getppid op,2,[],https://github.com/MoarVM/MoarVM/pull/809,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/809,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,810,2018-02-25T23:27:53Z,2018-03-11T22:10:06Z,2018-03-11T22:10:11Z,MERGED,True,2,0,1,https://github.com/Kaiepi,Panic when Dyncall fails to allocate native callbacks,1,[],https://github.com/MoarVM/MoarVM/pull/810,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/810,Related to #794,Related to #794,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,810,2018-02-25T23:27:53Z,2018-03-11T22:10:06Z,2018-03-11T22:10:11Z,MERGED,True,2,0,1,https://github.com/Kaiepi,Panic when Dyncall fails to allocate native callbacks,1,[],https://github.com/MoarVM/MoarVM/pull/810,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/810#issuecomment-372154148,Related to #794,Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,812,2018-03-02T22:03:21Z,2018-03-03T17:48:23Z,2018-03-03T17:49:03Z,MERGED,True,6,0,1,https://github.com/MasterDuke17,"If no start time set, don't end a spesh log",1,[],https://github.com/MoarVM/MoarVM/pull/812,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/812,"Otherwise doing a --profile-compile or --profile-stage would show
gigantic times for ""Dynamic Optimization"".
@timo (or @jnthn or anybody else), please feel free to change or reject this if you have a better suggestion.","Otherwise doing a --profile-compile or --profile-stage would show
gigantic times for ""Dynamic Optimization"".
@timo (or @jnthn or anybody else), please feel free to change or reject this if you have a better suggestion.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,814,2018-03-08T19:05:23Z,2018-03-30T09:37:27Z,2018-03-30T09:37:27Z,MERGED,True,403,294,10,https://github.com/jstuder-gh,Rakudo Issue 1588: Create getsignals op to query for valid sigs ,13,[],https://github.com/MoarVM/MoarVM/pull/814,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/814,"Create the getsignals op in MoarVM which will return a mapping of the
signals supported by MVM and map them to the proper values on the host
system.
See rakudo/rakudo#1588","Create the getsignals op in MoarVM which will return a mapping of the
signals supported by MVM and map them to the proper values on the host
system.
See rakudo/rakudo#1588",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,814,2018-03-08T19:05:23Z,2018-03-30T09:37:27Z,2018-03-30T09:37:27Z,MERGED,True,403,294,10,https://github.com/jstuder-gh,Rakudo Issue 1588: Create getsignals op to query for valid sigs ,13,[],https://github.com/MoarVM/MoarVM/pull/814,https://github.com/jstuder-gh,2,https://github.com/MoarVM/MoarVM/pull/814#issuecomment-371591045,"Create the getsignals op in MoarVM which will return a mapping of the
signals supported by MVM and map them to the proper values on the host
system.
See rakudo/rakudo#1588",Corresponding Rakudo PR: rakudo/rakudo#1601,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,814,2018-03-08T19:05:23Z,2018-03-30T09:37:27Z,2018-03-30T09:37:27Z,MERGED,True,403,294,10,https://github.com/jstuder-gh,Rakudo Issue 1588: Create getsignals op to query for valid sigs ,13,[],https://github.com/MoarVM/MoarVM/pull/814,https://github.com/jstuder-gh,3,https://github.com/MoarVM/MoarVM/pull/814#issuecomment-373542435,"Create the getsignals op in MoarVM which will return a mapping of the
signals supported by MVM and map them to the proper values on the host
system.
See rakudo/rakudo#1588",I have updated the branch both to address the instance root issue and to update the ops so that it merges cleanly into the current HEAD of master.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,814,2018-03-08T19:05:23Z,2018-03-30T09:37:27Z,2018-03-30T09:37:27Z,MERGED,True,403,294,10,https://github.com/jstuder-gh,Rakudo Issue 1588: Create getsignals op to query for valid sigs ,13,[],https://github.com/MoarVM/MoarVM/pull/814,https://github.com/jstuder-gh,4,https://github.com/MoarVM/MoarVM/pull/814#issuecomment-373547939,"Create the getsignals op in MoarVM which will return a mapping of the
signals supported by MVM and map them to the proper values on the host
system.
See rakudo/rakudo#1588","In the Rakudo Issue 1588 thread, I proposed an additional change to the signal code to deal with the difference between what signals are available for the host platform and what signals are supported by the backend running Rakudo. You can see the post at rakudo/rakudo#1588 (comment).
This would involve registering a redundant op in MoarVM, but would be helpful for backends such as the JVM where not many sigs are supported.
Does the proposal sound good? Should I implement the proposed change into this branch and PR or save it for another time?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,814,2018-03-08T19:05:23Z,2018-03-30T09:37:27Z,2018-03-30T09:37:27Z,MERGED,True,403,294,10,https://github.com/jstuder-gh,Rakudo Issue 1588: Create getsignals op to query for valid sigs ,13,[],https://github.com/MoarVM/MoarVM/pull/814,https://github.com/jstuder-gh,5,https://github.com/MoarVM/MoarVM/pull/814#issuecomment-374014028,"Create the getsignals op in MoarVM which will return a mapping of the
signals supported by MVM and map them to the proper values on the host
system.
See rakudo/rakudo#1588","Regarding the proposal from the last comment, niner made great suggestion in the other thread to use negative values to indicate lack of VM support, and I implemented just that in the NQP and Rakudo branches, requiring no change in MoarVM. All of my concerns regarding signal usage in P6 have been addressed, so assuming there is approval and that this addresses the community's concerns as well, I believe this is finished.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,814,2018-03-08T19:05:23Z,2018-03-30T09:37:27Z,2018-03-30T09:37:27Z,MERGED,True,403,294,10,https://github.com/jstuder-gh,Rakudo Issue 1588: Create getsignals op to query for valid sigs ,13,[],https://github.com/MoarVM/MoarVM/pull/814,https://github.com/jstuder-gh,6,https://github.com/MoarVM/MoarVM/pull/814#issuecomment-377112985,"Create the getsignals op in MoarVM which will return a mapping of the
signals supported by MVM and map them to the proper values on the host
system.
See rakudo/rakudo#1588","@jnthn, I believe that this is completed, assuming that it has addressed your concerns.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,814,2018-03-08T19:05:23Z,2018-03-30T09:37:27Z,2018-03-30T09:37:27Z,MERGED,True,403,294,10,https://github.com/jstuder-gh,Rakudo Issue 1588: Create getsignals op to query for valid sigs ,13,[],https://github.com/MoarVM/MoarVM/pull/814,https://github.com/jnthn,7,https://github.com/MoarVM/MoarVM/pull/814#issuecomment-377489119,"Create the getsignals op in MoarVM which will return a mapping of the
signals supported by MVM and map them to the proper values on the host
system.
See rakudo/rakudo#1588","Indeed, I don't see any further problems. Thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,815,2018-03-11T07:22:29Z,2018-03-14T23:26:10Z,2018-04-04T23:48:10Z,MERGED,True,69,41,5,https://github.com/samcv,Add proper support for replacements in decodestream for windows1252/1,4,[],https://github.com/MoarVM/MoarVM/pull/815,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/815,"We add the setting for strict/permissive and the replacement string to the
MVMDecodeStream object. Fixes bugs in the previous version which caused it
not to properly throw if strict was set and there was no replacement. Also
adds support for multiple character replacements.
Change arguments for windows1252/1 decodestream ops
We no longer need replacement and config to be arguments since they are
included in the MVMDecodeStream struct. Remove the variations which contain
this as the argument completely.","We add the setting for strict/permissive and the replacement string to the
MVMDecodeStream object. Fixes bugs in the previous version which caused it
not to properly throw if strict was set and there was no replacement. Also
adds support for multiple character replacements.
Change arguments for windows1252/1 decodestream ops
We no longer need replacement and config to be arguments since they are
included in the MVMDecodeStream struct. Remove the variations which contain
this as the argument completely.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,815,2018-03-11T07:22:29Z,2018-03-14T23:26:10Z,2018-04-04T23:48:10Z,MERGED,True,69,41,5,https://github.com/samcv,Add proper support for replacements in decodestream for windows1252/1,4,[],https://github.com/MoarVM/MoarVM/pull/815,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/815#issuecomment-372095193,"We add the setting for strict/permissive and the replacement string to the
MVMDecodeStream object. Fixes bugs in the previous version which caused it
not to properly throw if strict was set and there was no replacement. Also
adds support for multiple character replacements.
Change arguments for windows1252/1 decodestream ops
We no longer need replacement and config to be arguments since they are
included in the MVMDecodeStream struct. Remove the variations which contain
this as the argument completely.","@jnthn asking for your input on this. With modifications to rakudo this is working but I wanted to ask you how you felt about adding the replacement and strict/permissive config to MVMDecodeStream struct. Looking through the code, it seemed to be the only sane way, and makes sure we don't have to change more than a dozen functions to add additional arguments, because the MVMDecodeStream object gets passed around quite a bit. This also causes us to not have to add a new op.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,815,2018-03-11T07:22:29Z,2018-03-14T23:26:10Z,2018-04-04T23:48:10Z,MERGED,True,69,41,5,https://github.com/samcv,Add proper support for replacements in decodestream for windows1252/1,4,[],https://github.com/MoarVM/MoarVM/pull/815,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/815#issuecomment-372952436,"We add the setting for strict/permissive and the replacement string to the
MVMDecodeStream object. Fixes bugs in the previous version which caused it
not to properly throw if strict was set and there was no replacement. Also
adds support for multiple character replacements.
Change arguments for windows1252/1 decodestream ops
We no longer need replacement and config to be arguments since they are
included in the MVMDecodeStream struct. Remove the variations which contain
this as the argument completely.",@jnthn can you take a look at it again. I think I corrected your suggestions correctly. Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,816,2018-03-12T16:33:54Z,2018-03-15T07:13:58Z,2018-03-15T23:31:24Z,MERGED,True,79,0,1,https://github.com/MasterDuke17,More templates to the eleventeenth power,11,[],https://github.com/MoarVM/MoarVM/pull/816,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/816,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,816,2018-03-12T16:33:54Z,2018-03-15T07:13:58Z,2018-03-15T23:31:24Z,MERGED,True,79,0,1,https://github.com/MasterDuke17,More templates to the eleventeenth power,11,[],https://github.com/MoarVM/MoarVM/pull/816,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/816#issuecomment-373246553,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,@bdw should be good to go.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,817,2018-03-13T22:27:39Z,2018-03-14T23:21:30Z,2018-03-14T23:21:30Z,MERGED,True,3979,25,27,https://github.com/timo,MoarVM Remote Debugging Support,111,[],https://github.com/MoarVM/MoarVM/pull/817,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/817,"This PR introduces remote debugging support for MoarVM. This means that you can start MoarVM in a special mode and it will listen for incoming connections on a specified port. A simple protocol based on MessagePack is spoken over TCP on this port between a client (""a debugger"") and the server (MoarVM, the ""debuggee"").
Start MoarVM with the commandline parameter --debug-port=9999 to make it listen for connections on port 9999. Additionally, you can pass --debug-suspend, which will cause the program to pause (""suspend"") at the earliest instruction.
If --debug-port is not passed, the regular operation of MoarVM should not be impacted in any way, even if the debug server implementation is buggy.
The specification for the protocol is included in docs/debug-server-protocol.md. A Perl 6 module that implements the protocol as well as an initial implementation of a CLI debugger will soon be available.","This PR introduces remote debugging support for MoarVM. This means that you can start MoarVM in a special mode and it will listen for incoming connections on a specified port. A simple protocol based on MessagePack is spoken over TCP on this port between a client (""a debugger"") and the server (MoarVM, the ""debuggee"").
Start MoarVM with the commandline parameter --debug-port=9999 to make it listen for connections on port 9999. Additionally, you can pass --debug-suspend, which will cause the program to pause (""suspend"") at the earliest instruction.
If --debug-port is not passed, the regular operation of MoarVM should not be impacted in any way, even if the debug server implementation is buggy.
The specification for the protocol is included in docs/debug-server-protocol.md. A Perl 6 module that implements the protocol as well as an initial implementation of a CLI debugger will soon be available.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,820,2018-03-21T22:41:50Z,2018-03-25T07:31:50Z,2018-04-04T23:48:32Z,MERGED,True,7720,17,6,https://github.com/samcv,Implement ShiftJIS decode and decodestream,4,[],https://github.com/MoarVM/MoarVM/pull/820,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/820,"There are a few variations of ShiftJIS, I have implemented it as
specified here:
https://encoding.spec.whatwg.org/#shift_jis
This should allow it to read ShiftJIS as it is used on the web, as
implementing the base spec would be insufficient to decoding all
documents properly.
This is the windows-932 variant, which is what is by far the one used online.
The functions are listed under the shiftjis name, although it is accessible with
the windows-932 name to avoid any confusion and remain forward compatible
in case other shiftjis variants are added.","There are a few variations of ShiftJIS, I have implemented it as
specified here:
https://encoding.spec.whatwg.org/#shift_jis
This should allow it to read ShiftJIS as it is used on the web, as
implementing the base spec would be insufficient to decoding all
documents properly.
This is the windows-932 variant, which is what is by far the one used online.
The functions are listed under the shiftjis name, although it is accessible with
the windows-932 name to avoid any confusion and remain forward compatible
in case other shiftjis variants are added.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,823,2018-03-25T04:06:10Z,2018-03-25T04:06:16Z,2018-03-25T04:06:21Z,MERGED,True,445,30,5,https://github.com/zoffixznet,Stringify Num using Grisu3 algo / Generalize mp_get_double() routine,4,[],https://github.com/MoarVM/MoarVM/pull/823,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/823,"Makes Num stringification 2x faster (tested with rand.Str)
Fixes RT#127184 https://rt.perl.org/Ticket/Display.html?id=127184
Fixes RT#132330 https://rt.perl.org/Ticket/Display.html?id=132330
(fixes Num.WHICH and problems with set()s mentioned in that ticket;
also fixes the issues with == on Nums, but the fact that stringification
fixes fixed that problem, I suspect there's another problem lurking somewhere)","Makes Num stringification 2x faster (tested with rand.Str)
Fixes RT#127184 https://rt.perl.org/Ticket/Display.html?id=127184
Fixes RT#132330 https://rt.perl.org/Ticket/Display.html?id=132330
(fixes Num.WHICH and problems with set()s mentioned in that ticket;
also fixes the issues with == on Nums, but the fact that stringification
fixes fixed that problem, I suspect there's another problem lurking somewhere)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,824,2018-03-25T05:09:14Z,2019-06-24T22:52:35Z,2019-06-24T22:52:35Z,CLOSED,False,3,1,3,https://github.com/Kaiepi,Allow NativeCall support for wchar_t,1,[],https://github.com/MoarVM/MoarVM/pull/824,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/824,"A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later","A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,824,2018-03-25T05:09:14Z,2019-06-24T22:52:35Z,2019-06-24T22:52:35Z,CLOSED,False,3,1,3,https://github.com/Kaiepi,Allow NativeCall support for wchar_t,1,[],https://github.com/MoarVM/MoarVM/pull/824,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/824#issuecomment-375955795,"A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later","For full NativeCall support, you're gonna need a couple for changes in src/core/nativecall.c, src/core/nativecall_dyncall.c and src/core/nativecall_libffi.c basically wherever you see  MVM_NATIVECALL_ARG_LONG mentioned. I guess with your patch support is restricted to wchar_t arrays.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,824,2018-03-25T05:09:14Z,2019-06-24T22:52:35Z,2019-06-24T22:52:35Z,CLOSED,False,3,1,3,https://github.com/Kaiepi,Allow NativeCall support for wchar_t,1,[],https://github.com/MoarVM/MoarVM/pull/824,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/824#issuecomment-375961873,"A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later",Would that be for making Str work instead of CArray[wchar_t]? What do I need to change?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,824,2018-03-25T05:09:14Z,2019-06-24T22:52:35Z,2019-06-24T22:52:35Z,CLOSED,False,3,1,3,https://github.com/Kaiepi,Allow NativeCall support for wchar_t,1,[],https://github.com/MoarVM/MoarVM/pull/824,https://github.com/Kaiepi,4,https://github.com/MoarVM/MoarVM/pull/824#issuecomment-377397046,"A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later","I tested this with the following code:
#include <stddef.h>

extern const
wchar_t *test(const wchar_t* foo)
{
     return foo;
}
When I test in perl6, this happens with Str:
> sub test(Str --> Str) is native('./libtest.so') { * }
sub test (Str $ --> Str) { #`(Sub+{Callable[Str]}+{NativeCall::Native[Sub+{Callable[Str]},Str]}|18948345937280) ... }
> test('test')
test
> test('test')
test
Malformed UTF-8 at line 1 col 1
  in block <unit> at <unknown file> line 1
With CArray[wchar_t], the function returns an empty instance of CArray[wchar_t] instead of the CArray I passed in. So you're right, the implementation is not quite complete yet.
Edit: this is including the changes to nqp and rakudo. Maybe I should open the pullreqs for the changes to those since my issues may lay there rather than in MoarVM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,824,2018-03-25T05:09:14Z,2019-06-24T22:52:35Z,2019-06-24T22:52:35Z,CLOSED,False,3,1,3,https://github.com/Kaiepi,Allow NativeCall support for wchar_t,1,[],https://github.com/MoarVM/MoarVM/pull/824,https://github.com/Kaiepi,5,https://github.com/MoarVM/MoarVM/pull/824#issuecomment-377455405,"A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later","OK, you're right about the support being incomplete:
#include <wchar.h>

extern wchar_t *
test(const wchar_t *foo)
{
	wchar_t *bar;
	size_t len = wcslen(foo);
	wmemcpy(bar, foo, len);
	return bar;
}
> use NativeCall
Nil
> sub test(CArray[wchar_t] --> CArray[wchar_t]) is native('./libtest.so') { * }
sub test (NativeCall::Types::CArray[NativeCall::Types::wchar_t] $ --> NativeCall::Types::CArray[NativeCall::Types::wchar_t]) { #`(Sub+{Callable[NativeCall::Types::CArray[NativeCall::Types::wchar_t]]}+{NativeCall::Native[Sub+{Callable[NativeCall::Types::CArray[NativeCall::Types::wchar_t]]},Str]}|34912317730176) ... }
> test(CArray[wchar_t].new: 'test'.ords)
NativeCall::Types::CArray[NativeCall::Types::wchar_t].new
> my $a = test(CArray[wchar_t].new: 'test'.ords)
Internal error: unhandled dyncall argument type
  in block <unit> at <unknown file> line 1
I'll read through the nativecall files and see what I'll need to do to get full support implemented.
Edit: this fixed the issue:
#include <wchar.h>

extern wchar_t *
test(const wchar_t *foo)
{
	size_t len = wcslen(foo);
	wchar_t bar[255];
	wmemcpy(bar, foo, len);
	return bar;
}",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,824,2018-03-25T05:09:14Z,2019-06-24T22:52:35Z,2019-06-24T22:52:35Z,CLOSED,False,3,1,3,https://github.com/Kaiepi,Allow NativeCall support for wchar_t,1,[],https://github.com/MoarVM/MoarVM/pull/824,https://github.com/Kaiepi,6,https://github.com/MoarVM/MoarVM/pull/824#issuecomment-383327328,"A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later","Something I noticed trying to use wchar_t with strings is that it doesn't get encoded properly, with ""012"" becoming ""48 49 50"" it becomes ""48 0 0 0 49 0 0 0 50 0 0 0"". I tested casting a wchar_t * to a char * in C and got the same results. I think for full support I'll need to do a lot more work.
I also forgot to add wint_t lol",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,824,2018-03-25T05:09:14Z,2019-06-24T22:52:35Z,2019-06-24T22:52:35Z,CLOSED,False,3,1,3,https://github.com/Kaiepi,Allow NativeCall support for wchar_t,1,[],https://github.com/MoarVM/MoarVM/pull/824,https://github.com/Kaiepi,7,https://github.com/MoarVM/MoarVM/pull/824#issuecomment-383343454,"A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later",Added wint_t support,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,824,2018-03-25T05:09:14Z,2019-06-24T22:52:35Z,2019-06-24T22:52:35Z,CLOSED,False,3,1,3,https://github.com/Kaiepi,Allow NativeCall support for wchar_t,1,[],https://github.com/MoarVM/MoarVM/pull/824,https://github.com/Kaiepi,8,https://github.com/MoarVM/MoarVM/pull/824#issuecomment-383344613,"A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later",Changed my mind about wint_t. There wasn't a good way that I know of to get the right values of it for the JVM,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,824,2018-03-25T05:09:14Z,2019-06-24T22:52:35Z,2019-06-24T22:52:35Z,CLOSED,False,3,1,3,https://github.com/Kaiepi,Allow NativeCall support for wchar_t,1,[],https://github.com/MoarVM/MoarVM/pull/824,https://github.com/Kaiepi,9,https://github.com/MoarVM/MoarVM/pull/824#issuecomment-505210684,"A library I'm writing bindings for uses wchar_t in some places, so I thought it'd be useful to be able to use it as a type. NQP and Rakudo pullreqs will come later","I'll redo this properly with support for wchar_t, wint_t, char16_t and char32_t at some point.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,826,2018-03-27T05:44:04Z,2018-04-01T19:55:28Z,2018-04-01T19:55:41Z,MERGED,True,239,237,1,https://github.com/bdw,Refactor optimize_iffy,7,[],https://github.com/MoarVM/MoarVM/pull/826,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/826,"Over time optimize_iffy has accumulated a number of special-case optimizations like lowering-the-conditional from istrue to known values or type-specific optimizations, and even an unbox-remover.
Also, it was clear that having a 'normal' optimize_iffy case and a special case for if_o and unless_o splitting was far too complex.
I felt like it'd be cleaner if these optimizations were separated out of optimize_iffy and into their own optimizations. So, that is what happens now:

rather than split 'remaining' if_o after optimize_iffy, split them directly, then lower the resulting istrue

push the split if_i forward rather than istrue backwards, which makes sure that the


teach optimize_istrue_isfalse all the tricks that optimize_iffy knew

make the isfalse split into boolifier + not_i happen after the boolification-lowering (also, simpler)


take the unbox-removal out into its own optimization, although that doesn't really work yet

this needs some more thinking - or maybe just allocating a unique temporary register for it



This also fixed the bug that was fixed by nine++ and timotimo++ independently, which is that decompose_object_conditional would remove a branch twice in some cases","Over time optimize_iffy has accumulated a number of special-case optimizations like lowering-the-conditional from istrue to known values or type-specific optimizations, and even an unbox-remover.
Also, it was clear that having a 'normal' optimize_iffy case and a special case for if_o and unless_o splitting was far too complex.
I felt like it'd be cleaner if these optimizations were separated out of optimize_iffy and into their own optimizations. So, that is what happens now:

rather than split 'remaining' if_o after optimize_iffy, split them directly, then lower the resulting istrue

push the split if_i forward rather than istrue backwards, which makes sure that the


teach optimize_istrue_isfalse all the tricks that optimize_iffy knew

make the isfalse split into boolifier + not_i happen after the boolification-lowering (also, simpler)


take the unbox-removal out into its own optimization, although that doesn't really work yet

this needs some more thinking - or maybe just allocating a unique temporary register for it



This also fixed the bug that was fixed by nine++ and timotimo++ independently, which is that decompose_object_conditional would remove a branch twice in some cases",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,826,2018-03-27T05:44:04Z,2018-04-01T19:55:28Z,2018-04-01T19:55:41Z,MERGED,True,239,237,1,https://github.com/bdw,Refactor optimize_iffy,7,[],https://github.com/MoarVM/MoarVM/pull/826,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/826#issuecomment-377721791,"Over time optimize_iffy has accumulated a number of special-case optimizations like lowering-the-conditional from istrue to known values or type-specific optimizations, and even an unbox-remover.
Also, it was clear that having a 'normal' optimize_iffy case and a special case for if_o and unless_o splitting was far too complex.
I felt like it'd be cleaner if these optimizations were separated out of optimize_iffy and into their own optimizations. So, that is what happens now:

rather than split 'remaining' if_o after optimize_iffy, split them directly, then lower the resulting istrue

push the split if_i forward rather than istrue backwards, which makes sure that the


teach optimize_istrue_isfalse all the tricks that optimize_iffy knew

make the isfalse split into boolifier + not_i happen after the boolification-lowering (also, simpler)


take the unbox-removal out into its own optimization, although that doesn't really work yet

this needs some more thinking - or maybe just allocating a unique temporary register for it



This also fixed the bug that was fixed by nine++ and timotimo++ independently, which is that decompose_object_conditional would remove a branch twice in some cases","I had missed a patch on the isconcrete optimization that removed the comment (and fixed the bug there), pushed now, should be good to merge",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,830,2018-03-30T09:10:09Z,2018-04-03T04:35:29Z,2018-04-04T23:48:14Z,MERGED,True,180,43,6,https://github.com/samcv,Speed up collapse_strands 4x by full rewrite targeting SIMD optims,3,[],https://github.com/MoarVM/MoarVM/pull/830,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/830,"collapse_strands and certain conditions of substr rely on
iterate_gi_into_string() for flattening a specified section of a string.
This has been a performance issue since forever, and though I made
changes to make it faster, it still had issues. These new changes are a
full rewrite of that function and a new function which checks if a
string for the specified length can fit into 8 or 32 bits.
Both these functions have been rewritten to take advantage of compiler
vectorization which will utilize instructions such as SSE* or AVX*.
In string_can_be_8bit() we use multiple bitwise AND operations to check
the 32 bit integers while ORing the result with val.
Care must be taken so that any variables altered by the loop are not used
outside of the loop. Even more critical, there cannot be  any branching or
function calls. For example: i is not used outside the loop, while val
is allowed as biwise OR works with vectorization well.
To support both of these changes a new grapheme iterator function has
been added called MVM_string_gi_next_strand() which moves to the next
strand. This allows us to process each strand at a time without having
to process each grapheme at a time. This was needed to either memcpy()
or use vectorizable loops to copy the graphemes based on strand bit
type.","collapse_strands and certain conditions of substr rely on
iterate_gi_into_string() for flattening a specified section of a string.
This has been a performance issue since forever, and though I made
changes to make it faster, it still had issues. These new changes are a
full rewrite of that function and a new function which checks if a
string for the specified length can fit into 8 or 32 bits.
Both these functions have been rewritten to take advantage of compiler
vectorization which will utilize instructions such as SSE* or AVX*.
In string_can_be_8bit() we use multiple bitwise AND operations to check
the 32 bit integers while ORing the result with val.
Care must be taken so that any variables altered by the loop are not used
outside of the loop. Even more critical, there cannot be  any branching or
function calls. For example: i is not used outside the loop, while val
is allowed as biwise OR works with vectorization well.
To support both of these changes a new grapheme iterator function has
been added called MVM_string_gi_next_strand() which moves to the next
strand. This allows us to process each strand at a time without having
to process each grapheme at a time. This was needed to either memcpy()
or use vectorizable loops to copy the graphemes based on strand bit
type.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,831,2018-03-30T15:39:30Z,2018-03-30T20:05:08Z,2018-03-30T20:05:09Z,MERGED,True,9,5,1,https://github.com/dogbert17,Add missing write barrier enforcement in CPPStruct,1,[],https://github.com/MoarVM/MoarVM/pull/831,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/831,"This was done earlier for CStruct, by jnthn++, in commit 85fc758.
Stress testing of t/04-nativecall/11-cpp.t showed that the same fix
had to be applied to CPPStruct as well.","This was done earlier for CStruct, by jnthn++, in commit 85fc758.
Stress testing of t/04-nativecall/11-cpp.t showed that the same fix
had to be applied to CPPStruct as well.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,831,2018-03-30T15:39:30Z,2018-03-30T20:05:08Z,2018-03-30T20:05:09Z,MERGED,True,9,5,1,https://github.com/dogbert17,Add missing write barrier enforcement in CPPStruct,1,[],https://github.com/MoarVM/MoarVM/pull/831,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/831#issuecomment-377610454,"This was done earlier for CStruct, by jnthn++, in commit 85fc758.
Stress testing of t/04-nativecall/11-cpp.t showed that the same fix
had to be applied to CPPStruct as well.","Only Travis failure looks like an apt repo fail. So, merging. Thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,836,2018-04-05T02:23:07Z,2018-05-16T00:31:51Z,2018-05-16T00:31:51Z,CLOSED,False,3,1,2,https://github.com/samcv,Ensure `make realclean` cleans cmp and libatomic_ops,1,[],https://github.com/MoarVM/MoarVM/pull/836,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/836,"The cmp lib had not been added to Makefile.in and setup.pm yet.
libatomic_ops was already running make distclean in
3rdparty/libatomic_ops/src, but this didn't remove libatomic_ops.a, so
remove it manually.","The cmp lib had not been added to Makefile.in and setup.pm yet.
libatomic_ops was already running make distclean in
3rdparty/libatomic_ops/src, but this didn't remove libatomic_ops.a, so
remove it manually.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,836,2018-04-05T02:23:07Z,2018-05-16T00:31:51Z,2018-05-16T00:31:51Z,CLOSED,False,3,1,2,https://github.com/samcv,Ensure `make realclean` cleans cmp and libatomic_ops,1,[],https://github.com/MoarVM/MoarVM/pull/836,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/836#issuecomment-389357088,"The cmp lib had not been added to Makefile.in and setup.pm yet.
libatomic_ops was already running make distclean in
3rdparty/libatomic_ops/src, but this didn't remove libatomic_ops.a, so
remove it manually.",I fixed cmp and i'm not seeing any issue with libatomic_ops anymore since I separated it into its own submodule. Closing.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,840,2018-04-11T22:44:37Z,2018-04-13T08:57:06Z,2018-04-13T08:57:06Z,MERGED,True,21,21,6,https://github.com/samcv,Move libatomic_ops module to a different directory,1,[],https://github.com/MoarVM/MoarVM/pull/840,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/840,"This should make sure there aren't issues when git fast forwards.
Fixes issue #839","This should make sure there aren't issues when git fast forwards.
Fixes issue #839",True,"{'THUMBS_UP': ['https://github.com/lizmat'], 'HOORAY': ['https://github.com/zoffixznet']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,840,2018-04-11T22:44:37Z,2018-04-13T08:57:06Z,2018-04-13T08:57:06Z,MERGED,True,21,21,6,https://github.com/samcv,Move libatomic_ops module to a different directory,1,[],https://github.com/MoarVM/MoarVM/pull/840,https://github.com/timo,2,https://github.com/MoarVM/MoarVM/pull/840#issuecomment-380621693,"This should make sure there aren't issues when git fast forwards.
Fixes issue #839","maybe we should also rename the old folder during Configure or something so that people don't get confused, because they'll end up with two folders for libatomicops? And i say rename because perhaps someone has some legit local changes to the lib code that we might not want to just nuke.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,840,2018-04-11T22:44:37Z,2018-04-13T08:57:06Z,2018-04-13T08:57:06Z,MERGED,True,21,21,6,https://github.com/samcv,Move libatomic_ops module to a different directory,1,[],https://github.com/MoarVM/MoarVM/pull/840,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/840#issuecomment-380713158,"This should make sure there aren't issues when git fast forwards.
Fixes issue #839",@timo we can't rename because then the git reference will be wrong since the folder is a git repository itself and it stores where it thinks it should be located.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,841,2018-04-12T07:55:23Z,2018-04-25T21:11:20Z,2018-04-25T21:11:20Z,MERGED,True,167,3,7,https://github.com/samcv,Randomly seed a hash secret to mitigate ease of DOS attack,4,[],https://github.com/MoarVM/MoarVM/pull/841,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/841,"Without a random hash seed it is easy for an attacker to generate
strings which will result in the same hash. This devolves to O(n**2)
time for the hash insertion and is increased even more by the fact that
a string must be compared with all strings in the bucket until the right
string is found.
This attack is done by creating a function that essentially is our
hashing function backward. We hash our target string, t. We then
use random 3 character sequences (in our case graphemes) and plug them
into our backward hashing function along with the hash for our target
t. The backward hash and the random character sequence are stored in
the dictionary and the process is repeated until we have a very large
number of backward hash's and random 3 grapheme prefixes.
We can then use this dictionary to construct successively longer strings
(or short if we so desire) which are the same hash as our target string
t.
This has been fixed in most programming languages (Python, Ruby, Perl),
and several CVE's have been issues over the years for this exploit.
It may also be a good idea to later implement a stronger hashing
function. Many languages are now using SipHash which is meant to protect
against an attacker discovering a hash secret remotely. This change decreases
the ease of this attack and makes the hash secret
unpredictable.
Randomness source:
We prefer function calls rather than reading from /dev/urandom. Reasons
include: not having to open a file descriptor and that /dev/urandom may
not exist if we are in a chroot. Since we don't want to stop startup of
MoarVM, if we have to fallback to /dev/urandom since the OS doesn't
support the function call we continue starting MoarVM normally.
Linux, FreeBSD, OpenBSD and MacOS all use system provided random calls
to get the data rather than having to open /dev/urandom. All these OS's
guarantee these to be non-blocking, though MacOS's documentation does
not comment on it.
Whether the calls block is primarily a concern during very early boot
which is why Python 3 makes sure to use non-blocking calls when their
hash secret is seeded an interpreter start up.
If not available we fall back to using /dev/urandom on Unix like OS's.
This change was tested on Linux both pre-addition of getrandom() and
after, as well as Solaris, FreeBSD and OpenBSD. CI testing for Windows
and MacOS look good. All Unix are supported due to /dev/urandom fallback
and Windows is supported to version 95 with the API we use.","Without a random hash seed it is easy for an attacker to generate
strings which will result in the same hash. This devolves to O(n**2)
time for the hash insertion and is increased even more by the fact that
a string must be compared with all strings in the bucket until the right
string is found.
This attack is done by creating a function that essentially is our
hashing function backward. We hash our target string, t. We then
use random 3 character sequences (in our case graphemes) and plug them
into our backward hashing function along with the hash for our target
t. The backward hash and the random character sequence are stored in
the dictionary and the process is repeated until we have a very large
number of backward hash's and random 3 grapheme prefixes.
We can then use this dictionary to construct successively longer strings
(or short if we so desire) which are the same hash as our target string
t.
This has been fixed in most programming languages (Python, Ruby, Perl),
and several CVE's have been issues over the years for this exploit.
It may also be a good idea to later implement a stronger hashing
function. Many languages are now using SipHash which is meant to protect
against an attacker discovering a hash secret remotely. This change decreases
the ease of this attack and makes the hash secret
unpredictable.
Randomness source:
We prefer function calls rather than reading from /dev/urandom. Reasons
include: not having to open a file descriptor and that /dev/urandom may
not exist if we are in a chroot. Since we don't want to stop startup of
MoarVM, if we have to fallback to /dev/urandom since the OS doesn't
support the function call we continue starting MoarVM normally.
Linux, FreeBSD, OpenBSD and MacOS all use system provided random calls
to get the data rather than having to open /dev/urandom. All these OS's
guarantee these to be non-blocking, though MacOS's documentation does
not comment on it.
Whether the calls block is primarily a concern during very early boot
which is why Python 3 makes sure to use non-blocking calls when their
hash secret is seeded an interpreter start up.
If not available we fall back to using /dev/urandom on Unix like OS's.
This change was tested on Linux both pre-addition of getrandom() and
after, as well as Solaris, FreeBSD and OpenBSD. CI testing for Windows
and MacOS look good. All Unix are supported due to /dev/urandom fallback
and Windows is supported to version 95 with the API we use.",True,"{'HEART': ['https://github.com/AlexDaniel', 'https://github.com/lizmat', 'https://github.com/Beagon'], 'THUMBS_UP': ['https://github.com/Tyil', 'https://github.com/Beagon']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,841,2018-04-12T07:55:23Z,2018-04-25T21:11:20Z,2018-04-25T21:11:20Z,MERGED,True,167,3,7,https://github.com/samcv,Randomly seed a hash secret to mitigate ease of DOS attack,4,[],https://github.com/MoarVM/MoarVM/pull/841,https://github.com/zhuomingliang,2,https://github.com/MoarVM/MoarVM/pull/841#issuecomment-380718203,"Without a random hash seed it is easy for an attacker to generate
strings which will result in the same hash. This devolves to O(n**2)
time for the hash insertion and is increased even more by the fact that
a string must be compared with all strings in the bucket until the right
string is found.
This attack is done by creating a function that essentially is our
hashing function backward. We hash our target string, t. We then
use random 3 character sequences (in our case graphemes) and plug them
into our backward hashing function along with the hash for our target
t. The backward hash and the random character sequence are stored in
the dictionary and the process is repeated until we have a very large
number of backward hash's and random 3 grapheme prefixes.
We can then use this dictionary to construct successively longer strings
(or short if we so desire) which are the same hash as our target string
t.
This has been fixed in most programming languages (Python, Ruby, Perl),
and several CVE's have been issues over the years for this exploit.
It may also be a good idea to later implement a stronger hashing
function. Many languages are now using SipHash which is meant to protect
against an attacker discovering a hash secret remotely. This change decreases
the ease of this attack and makes the hash secret
unpredictable.
Randomness source:
We prefer function calls rather than reading from /dev/urandom. Reasons
include: not having to open a file descriptor and that /dev/urandom may
not exist if we are in a chroot. Since we don't want to stop startup of
MoarVM, if we have to fallback to /dev/urandom since the OS doesn't
support the function call we continue starting MoarVM normally.
Linux, FreeBSD, OpenBSD and MacOS all use system provided random calls
to get the data rather than having to open /dev/urandom. All these OS's
guarantee these to be non-blocking, though MacOS's documentation does
not comment on it.
Whether the calls block is primarily a concern during very early boot
which is why Python 3 makes sure to use non-blocking calls when their
hash secret is seeded an interpreter start up.
If not available we fall back to using /dev/urandom on Unix like OS's.
This change was tested on Linux both pre-addition of getrandom() and
after, as well as Solaris, FreeBSD and OpenBSD. CI testing for Windows
and MacOS look good. All Unix are supported due to /dev/urandom fallback
and Windows is supported to version 95 with the API we use.","@samcv https://github.com/google/highwayhash, FYI .",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,841,2018-04-12T07:55:23Z,2018-04-25T21:11:20Z,2018-04-25T21:11:20Z,MERGED,True,167,3,7,https://github.com/samcv,Randomly seed a hash secret to mitigate ease of DOS attack,4,[],https://github.com/MoarVM/MoarVM/pull/841,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/841#issuecomment-381362982,"Without a random hash seed it is easy for an attacker to generate
strings which will result in the same hash. This devolves to O(n**2)
time for the hash insertion and is increased even more by the fact that
a string must be compared with all strings in the bucket until the right
string is found.
This attack is done by creating a function that essentially is our
hashing function backward. We hash our target string, t. We then
use random 3 character sequences (in our case graphemes) and plug them
into our backward hashing function along with the hash for our target
t. The backward hash and the random character sequence are stored in
the dictionary and the process is repeated until we have a very large
number of backward hash's and random 3 grapheme prefixes.
We can then use this dictionary to construct successively longer strings
(or short if we so desire) which are the same hash as our target string
t.
This has been fixed in most programming languages (Python, Ruby, Perl),
and several CVE's have been issues over the years for this exploit.
It may also be a good idea to later implement a stronger hashing
function. Many languages are now using SipHash which is meant to protect
against an attacker discovering a hash secret remotely. This change decreases
the ease of this attack and makes the hash secret
unpredictable.
Randomness source:
We prefer function calls rather than reading from /dev/urandom. Reasons
include: not having to open a file descriptor and that /dev/urandom may
not exist if we are in a chroot. Since we don't want to stop startup of
MoarVM, if we have to fallback to /dev/urandom since the OS doesn't
support the function call we continue starting MoarVM normally.
Linux, FreeBSD, OpenBSD and MacOS all use system provided random calls
to get the data rather than having to open /dev/urandom. All these OS's
guarantee these to be non-blocking, though MacOS's documentation does
not comment on it.
Whether the calls block is primarily a concern during very early boot
which is why Python 3 makes sure to use non-blocking calls when their
hash secret is seeded an interpreter start up.
If not available we fall back to using /dev/urandom on Unix like OS's.
This change was tested on Linux both pre-addition of getrandom() and
after, as well as Solaris, FreeBSD and OpenBSD. CI testing for Windows
and MacOS look good. All Unix are supported due to /dev/urandom fallback
and Windows is supported to version 95 with the API we use.","@jnthn when you get a chance, can you review this pull request?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,842,2018-04-19T17:02:20Z,2018-05-01T09:28:27Z,2018-05-01T12:55:59Z,MERGED,True,56,26,7,https://github.com/bdw,Restrict spesh debug logging to selected frames,4,[],https://github.com/MoarVM/MoarVM/pull/842,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/842,"This is simple enough change, but anyway; I want spesh debugging to be more useful, by being more silent. I'm repurposing MVM_SPESH_LIMIT to achieve this; not necessarily the nicest thing, but otherwise we don't even maintain a count of the frames, so we can't identify them at all.","This is simple enough change, but anyway; I want spesh debugging to be more useful, by being more silent. I'm repurposing MVM_SPESH_LIMIT to achieve this; not necessarily the nicest thing, but otherwise we don't even maintain a count of the frames, so we can't identify them at all.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,842,2018-04-19T17:02:20Z,2018-05-01T09:28:27Z,2018-05-01T12:55:59Z,MERGED,True,56,26,7,https://github.com/bdw,Restrict spesh debug logging to selected frames,4,[],https://github.com/MoarVM/MoarVM/pull/842,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/842#issuecomment-385632354,"This is simple enough change, but anyway; I want spesh debugging to be more useful, by being more silent. I'm repurposing MVM_SPESH_LIMIT to achieve this; not necessarily the nicest thing, but otherwise we don't even maintain a count of the frames, so we can't identify them at all.","Let's give this a try, I think. Will have to see how it is...though I think that perhaps printing out the inlines too will make it reasonable.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/843,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)",True,"{'THUMBS_UP': ['https://github.com/lizmat', 'https://github.com/Kaiepi']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-382937603,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)",I'm sure people are going to want this jitted if it gets added. Have you tried jitting it?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,3,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-382945387,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","I have not. I'll have to look more closely at the JIT documentation. Right now I don't really know how it all  works, to be honest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,4,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-382948863,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","Do you know of any good resources not just on our JIT, but JITing in general? I could probably stand to read up on it a bit :P",True,{'THUMBS_UP': ['https://github.com/Kaiepi']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/timo,5,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-383239939,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","There's multiple facets to jitting an op. You're adding a reprop, i.e. an op that just looks up a function pointer from a REPR (for example ""this object uses the VMArray REPR"") and calls that; we have a special optimization for those in our regular jit. But in general, we can make the distinction between two kinds of ops. One kind just takes some stuff out of registers, calls some MVM_ function, and optionally stashes the return value in some other register. Another kind has some more stuff to do, like check if the right REPR is present. The last kind doesn't involve calling C functions at all. You can tell the difference in the interp.c implementation of the given op.
For ops that really just take values from registers in some way and call a C function and optionally do something with the return value, we have an API that makes this easy: Some simple examples start here: https://github.com/MoarVM/MoarVM/blob/master/src/jit/graph.c#L2467 - your corresponding C function also has to be added to op_to_func here: https://github.com/MoarVM/MoarVM/blob/master/src/jit/graph.c#L96
For the repr-specific optimization, look at https://github.com/MoarVM/MoarVM/blob/master/src/jit/graph.c#L829 - the idea is that if the bytecode specializer has already made sure that the type is known, we can pull up the REPR for the given type and instead of calling functions from reprconv.c that forward to the real function by looking up what the REPR is, we just put the right function right in the assembly code.
I hope that kind of helps :)",True,{'HEART': ['https://github.com/jstuder-gh']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,6,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-383341754,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","@timo, it more than kind of helps. Thanks!
I do have one other question. How do the expression templates factor in? Are they for the legacy JIT? And would there be any benefit in attempting to implement one for this op?
I added a case to jit the slice op in graph.c linked above. The interface provided seems pretty straight-forward, but if any more experienced members have a bit of time to review, it would be appreciated :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,7,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-384691300,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","I think the slice jit is working but it doesn't seem to affect the results too much, even in longer running scripts (like when turning using (^10).permutations in this script).
One run might have a difference of 100-200 ms in favor of an interp-only execution and then the next run might be 100-200 ms in favor of the jitted execution.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/timo,8,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-385195749,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","Hey, sorry for taking ages to respond, I didn't notice this issue had some more comments.
The expression templates thing is ""the new jit"", and it's basically ""plugged into"" the legacy jit so that the legacy jit can take over whenever the exprjit doesn't have a template for some op, or faces some other situation it can't yet handle. It re-attempts the exprjit compilation after every basic block boundary, though, so one missing exprjit template doesn't doom the whole compilation (unlike a missing op for the legacy jit which causes the whole jitting process for the given routine to be aborted).
It could very well be that this is actually what's making the jitted vs non-jitted execution so similar in run time on your end; try either --profile or setting MVM_JIT_LOG to a filename and searching for BAIL in the resulting file to see if the subs are actually getting the jit treatment or not. I'll try to have a look myself later today, though!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/timo,9,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-385257319,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","I've looked into it some more: in the nqp path of the example code (the one based on permutations) the frame containing the slice op is not actually running jitted, and it's because of an op that I recently introduced that doesn't get jitted yet: getstringfrom. I've got an exprjit implementation, but not a template jit one, and the BB it's in is even the same one that contains slice, but it has an op that bails out the exprjit before it gets to that op.
In short, if I implement gestringfrom (and i should also implement the others i recently added) could start seeing a difference.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,10,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-385298349,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","So the slice jit template was never being jitted at all? That would explain the results.
I have a few more questions about the jit. I'm trying to get a sense of how it works, if only at a high level.
So if I understand correctly, the jit creates a series of jit graphs made up of basic blocks (which themselves are constructed from the expr jit templates and augmented with the legacy jit nodes). Tiles are defined that map the blocks of the expression graphs to machine code (for a given architecture) and the resulting machine code is substituted for hot code. Is this correct or am I off?
What do the basic blocks and jit graphs correspond to? Do the graphs directly map to frames/routines in the HLL?
So when creating a new op, it is a good idea to attempt a expr jit template and include a legacy jit template as a fallback? The legacy jit it seems is important to include as omitting that bails on the construction of that entire jit graph, but I presume that there would be some benefit to rewriting as many ops as possible for the expr jit (more effective retrieval of branching code due to it's graph structure)?
Don't worry about the time delay. I appreciate you taking the time to answer my questions.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,11,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-385868528,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","I've created and uploaded an exprjit template for the 'slice' op.
I've added it to the branch a bit tentatively, as I haven't really seen it in action yet. I haven't found a scenario yet where it does not either bail or fallback to legacy templates before utilizing the 'slice' exprjit. But I wanted to submit it so that it could be reviewed.
If it turns out that there is a problem with this implementation, I will of course remove it from the branch.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,12,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-386660384,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","@timo, if you have the time, could you review this again? I believe that this functionality is complete and, if you and @jnthn believe it would be helpful, is ready to be merged.
The accompanying NQP PR (located here) also ports the op to the JVM P6 runtime and adds tests and a bit of documentation. Also worth noting that the Travis JVM build passes the newly created tests (MoarVM ones fail for obvious reasons).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/lizmat,13,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-386713914,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","Re: lib/MAST/Ops.nqp : I thought it was a problem if existing ops have their number changed?  aka, shouldn't slice be behind breakpoint ?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,14,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-386750174,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","IMPORTANT NOTE: MoarVM is meant to be able to read bytecode files
from some number of versions back. This means that new ops should,
in general, always be added at the end of this file (but before
spesh ops), so they get new numbers. Similarly, do not remove an
op; rename it DEPRECATED_n (where n is unique for each one).
Otherwise the numbering of those after it will be broken. The
alternative is writing a bunch of very boring mapping code and
rendering old bytecode impossible to simply run from the mmap'd file.
The exception to this rule is the spesh ops, which must come at the
very end of the file, and since they are never emitted into bytecode
files (the specializer inserts them) can be renumbered any time.

I've lifted that from src/core/oplist since it explains it way better than I could :P",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/jstuder-gh,15,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-386883402,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)","Looks like one of the Appveyor builds failed, but only because it could not find Strawberry Perl. One of those odd flukes?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,843,2018-04-20T01:06:31Z,2018-05-08T08:00:51Z,2018-05-08T08:00:52Z,MERGED,True,412,252,21,https://github.com/jstuder-gh,Add 'slice' op,13,[],https://github.com/MoarVM/MoarVM/pull/843,https://github.com/ugexe,16,https://github.com/MoarVM/MoarVM/pull/843#issuecomment-386883650,"This PR is a new op 'slice', inspired by @lizmat's RFC issue and implemented for VMArray.
Repurposes the element copying functionality from VMArray's 'splice' implementation to create a new VMArray array from slice of existing one.
Profile NQP slicing (~3 secs total)
Profile P6 slicing (~42 secs total)
The above profiles are measuring runs of this script (once with --nqp opt, once without)",I'd say that is because the appveyor file was written to only use --version 5.20.1.1 for some reason ( although I can not think of a reason for this restriction ),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,845,2018-04-23T06:04:47Z,2018-04-23T10:25:25Z,2018-04-23T10:25:25Z,CLOSED,False,686,7371,6,https://github.com/samcv,Use an array instead of a big switch for ShiftJIS decoding,1,[],https://github.com/MoarVM/MoarVM/pull/845,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/845,"Since we can easily map index->codepoint, turn the big switch into an
array. There are only 11 gaps of the indexes, so we just check we aren't
in a gap and apply an offset. Makes the shiftjis files compile twice as
fast.
We still use a big switch for encoding because codepoints are not at all
in order, so for now let the compiler handle this.","Since we can easily map index->codepoint, turn the big switch into an
array. There are only 11 gaps of the indexes, so we just check we aren't
in a gap and apply an offset. Makes the shiftjis files compile twice as
fast.
We still use a big switch for encoding because codepoints are not at all
in order, so for now let the compiler handle this.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,845,2018-04-23T06:04:47Z,2018-04-23T10:25:25Z,2018-04-23T10:25:25Z,CLOSED,False,686,7371,6,https://github.com/samcv,Use an array instead of a big switch for ShiftJIS decoding,1,[],https://github.com/MoarVM/MoarVM/pull/845,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/845#issuecomment-383528195,"Since we can easily map index->codepoint, turn the big switch into an
array. There are only 11 gaps of the indexes, so we just check we aren't
in a gap and apply an offset. Makes the shiftjis files compile twice as
fast.
We still use a big switch for encoding because codepoints are not at all
in order, so for now let the compiler handle this.",Closing since I commited directly.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,848,2018-04-26T20:59:43Z,2018-04-26T22:25:14Z,2018-04-26T22:25:14Z,MERGED,True,19,0,1,https://github.com/jstuder-gh,Use operand type in splice jit,1,[],https://github.com/MoarVM/MoarVM/pull/848,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/848,"If the operand type is known, have the jit use that type information to
select the proper 'splice' implementation. Saves us an extra call to
MVM_repr_pos_splice.","If the operand type is known, have the jit use that type information to
select the proper 'splice' implementation. Saves us an extra call to
MVM_repr_pos_splice.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,850,2018-04-27T03:04:26Z,2018-04-27T03:04:31Z,2018-04-27T03:04:34Z,MERGED,True,44,30,1,https://github.com/zoffixznet,Nummy num,2,[],https://github.com/MoarVM/MoarVM/pull/850,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/850,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,851,2018-04-27T05:01:53Z,2018-04-27T05:05:41Z,2018-04-27T06:08:04Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,Fix installs having an outdated version,1,[],https://github.com/MoarVM/MoarVM/pull/851,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/851,This was breaking configuring nqp and Rakudo when I was building all three manually,This was breaking configuring nqp and Rakudo when I was building all three manually,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,851,2018-04-27T05:01:53Z,2018-04-27T05:05:41Z,2018-04-27T06:08:04Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,Fix installs having an outdated version,1,[],https://github.com/MoarVM/MoarVM/pull/851,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/851#issuecomment-384865190,This was breaking configuring nqp and Rakudo when I was building all three manually,"Never mind, I tested again and this didn't work. I'll reopen when I find a working solution",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,851,2018-04-27T05:01:53Z,2018-04-27T05:05:41Z,2018-04-27T06:08:04Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,Fix installs having an outdated version,1,[],https://github.com/MoarVM/MoarVM/pull/851,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/851#issuecomment-384873844,This was breaking configuring nqp and Rakudo when I was building all three manually,The problem was just me forgetting to git fetch before building. My bad,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,852,2018-04-29T21:37:17Z,2018-05-01T14:10:31Z,2018-05-02T02:53:11Z,MERGED,True,483,507,1,https://github.com/MasterDuke17,Clean up src/jit/core_templates.expr a bit,2,[],https://github.com/MoarVM/MoarVM/pull/852,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/852,Put jit templates in same order as ops in interp.c. Also try to make formatting consistent across all the templates.,Put jit templates in same order as ops in interp.c. Also try to make formatting consistent across all the templates.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,852,2018-04-29T21:37:17Z,2018-05-01T14:10:31Z,2018-05-02T02:53:11Z,MERGED,True,483,507,1,https://github.com/MasterDuke17,Clean up src/jit/core_templates.expr a bit,2,[],https://github.com/MoarVM/MoarVM/pull/852,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/852#issuecomment-385284582,Put jit templates in same order as ops in interp.c. Also try to make formatting consistent across all the templates.,"First commit inspired by https://irclog.perlgeek.de/moarvm/2018-03-12#i_15911914, second was a bonus. @bdw @niner @timo you three are the only other people to write templates, I just merged together all the different formatting styles into one, let me know if anybody objects to how I did it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,852,2018-04-29T21:37:17Z,2018-05-01T14:10:31Z,2018-05-02T02:53:11Z,MERGED,True,483,507,1,https://github.com/MasterDuke17,Clean up src/jit/core_templates.expr a bit,2,[],https://github.com/MoarVM/MoarVM/pull/852,https://github.com/bdw,3,https://github.com/MoarVM/MoarVM/pull/852#issuecomment-385541066,Put jit templates in same order as ops in interp.c. Also try to make formatting consistent across all the templates.,"It looks good and clean; it is unfortunately too large to 'review' by hand, so if this passes tests, I trust that it is good. The only drawback is that it makes code archeology a bit harder - git blame cannot make sense of this. But if this makes collaborating on the expr jit even a bit easier then I'm all in favor.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,852,2018-04-29T21:37:17Z,2018-05-01T14:10:31Z,2018-05-02T02:53:11Z,MERGED,True,483,507,1,https://github.com/MasterDuke17,Clean up src/jit/core_templates.expr a bit,2,[],https://github.com/MoarVM/MoarVM/pull/852,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/852#issuecomment-385591112,Put jit templates in same order as ops in interp.c. Also try to make formatting consistent across all the templates.,"I forgot to mention, but yes, NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,854,2018-05-05T12:21:17Z,2018-05-07T16:10:14Z,2018-05-07T16:12:19Z,MERGED,True,131,21,3,https://github.com/bdw,We can haz moar JIT-compiled opcodes,9,[],https://github.com/MoarVM/MoarVM/pull/854,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/854,"Per popular request, some of the more common reasons for bailing.","Per popular request, some of the more common reasons for bailing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,854,2018-05-05T12:21:17Z,2018-05-07T16:10:14Z,2018-05-07T16:12:19Z,MERGED,True,131,21,3,https://github.com/bdw,We can haz moar JIT-compiled opcodes,9,[],https://github.com/MoarVM/MoarVM/pull/854,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/854#issuecomment-387116531,"Per popular request, some of the more common reasons for bailing.",Thank you!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,855,2018-05-07T10:07:17Z,2018-05-07T10:46:37Z,2018-05-07T10:46:37Z,MERGED,True,219,53,4,https://github.com/samcv,Implement a optimized memmem 32 bit search 4-15x faster,2,[],https://github.com/MoarVM/MoarVM/pull/855,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/855,"This is a modification of the memmem used in FreeBSD to allow us to quickly
search 32 bit strings. This is much more efficient than searching by byte
since we can skip every 4 bytes instead of every 1 byte, as well as the
fact that in a 32 bit integer, some of the bytes will be empty, making it
even less efficient.
The only caveat is the table uses a modulus so it can only jump to the next
codepoint of the same modulus. So it can only jump forward to the next
codepoint of the same modulus. This is generally not too much of a problem
and performs better than the previous 8 bit memmem for 32 bit strings in
all possible cases.
Factor out the memmem wrapper for searching Grapheme32 blobs","This is a modification of the memmem used in FreeBSD to allow us to quickly
search 32 bit strings. This is much more efficient than searching by byte
since we can skip every 4 bytes instead of every 1 byte, as well as the
fact that in a 32 bit integer, some of the bytes will be empty, making it
even less efficient.
The only caveat is the table uses a modulus so it can only jump to the next
codepoint of the same modulus. So it can only jump forward to the next
codepoint of the same modulus. This is generally not too much of a problem
and performs better than the previous 8 bit memmem for 32 bit strings in
all possible cases.
Factor out the memmem wrapper for searching Grapheme32 blobs",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,856,2018-05-09T10:22:22Z,2018-05-10T09:40:23Z,2018-05-10T09:40:24Z,MERGED,True,71,19,1,https://github.com/samcv,"Implement memmem_two_uint32, up to 45% faster index of short 32bitstr",1,[],https://github.com/MoarVM/MoarVM/pull/856,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/856,"In cases where the first grapheme is found throughout the haystack this
can speed things up by indexing by two graphemes at the same time. To do
this we index two graphemes at a time which prevents us from finding
needles of short strings in the wrong location. Worst case it is about
the same speed on 64 bit systems. May be slower on 32-bit systems which
is why for now it is only used on 64 bit systems.
We treat the two graphemes as a 64 bit integer
and search for that, moving 32 bits at a time down the haystack, reading
each two graphemes in the haystack as a 64 bit integer and then
comparing the needle and the haystack.","In cases where the first grapheme is found throughout the haystack this
can speed things up by indexing by two graphemes at the same time. To do
this we index two graphemes at a time which prevents us from finding
needles of short strings in the wrong location. Worst case it is about
the same speed on 64 bit systems. May be slower on 32-bit systems which
is why for now it is only used on 64 bit systems.
We treat the two graphemes as a 64 bit integer
and search for that, moving 32 bits at a time down the haystack, reading
each two graphemes in the haystack as a 64 bit integer and then
comparing the needle and the haystack.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,857,2018-05-12T23:32:56Z,2018-05-15T06:16:42Z,2018-05-15T06:16:42Z,MERGED,True,71,0,1,https://github.com/jstuder-gh,Add a few exprjit templates,3,[],https://github.com/MoarVM/MoarVM/pull/857,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/857,"Wasn't sure whether to submit this or not, as it isn't any faster, but there is a practical benefit to exprjitting more ops right? If not now, for new architectures down the road?","Wasn't sure whether to submit this or not, as it isn't any faster, but there is a practical benefit to exprjitting more ops right? If not now, for new architectures down the road?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,858,2018-05-13T11:29:08Z,2018-05-14T13:13:27Z,2018-05-17T14:41:04Z,MERGED,True,80,46,6,https://github.com/bdw,Moar JIT ops,4,[],https://github.com/MoarVM/MoarVM/pull/858,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/858,"Now with a fixed ctxlexpad.
And I removed the SAVE_RV node, folding that into the call node itself.","Now with a fixed ctxlexpad.
And I removed the SAVE_RV node, folding that into the call node itself.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,858,2018-05-13T11:29:08Z,2018-05-14T13:13:27Z,2018-05-17T14:41:04Z,MERGED,True,80,46,6,https://github.com/bdw,Moar JIT ops,4,[],https://github.com/MoarVM/MoarVM/pull/858,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/858#issuecomment-388822226,"Now with a fixed ctxlexpad.
And I removed the SAVE_RV node, folding that into the call node itself.",Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,860,2018-05-15T02:06:27Z,2018-05-15T06:23:13Z,2018-05-15T06:23:13Z,MERGED,True,5,4,1,https://github.com/MasterDuke17,Add bytecode size to inline log,1,[],https://github.com/MoarVM/MoarVM/pull/860,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/860,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,861,2018-05-15T02:08:38Z,2018-05-15T02:26:58Z,2018-05-15T02:40:33Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Correct op name in exception message,1,[],https://github.com/MoarVM/MoarVM/pull/861,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/861,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,863,2018-05-17T21:49:13Z,2018-05-18T00:54:12Z,2018-05-18T00:54:12Z,CLOSED,False,75,75,2,https://github.com/jstuder-gh,Reorder a few ops in interp.c to match oplist,1,[],https://github.com/MoarVM/MoarVM/pull/863,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/863,"For compiler optimization purposes.
SEE: 82eb5fc","For compiler optimization purposes.
SEE: 82eb5fc",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,863,2018-05-17T21:49:13Z,2018-05-18T00:54:12Z,2018-05-18T00:54:12Z,CLOSED,False,75,75,2,https://github.com/jstuder-gh,Reorder a few ops in interp.c to match oplist,1,[],https://github.com/MoarVM/MoarVM/pull/863,https://github.com/jstuder-gh,2,https://github.com/MoarVM/MoarVM/pull/863#issuecomment-390024581,"For compiler optimization purposes.
SEE: 82eb5fc",I didn't move any of the DEPRECATED ops. Having them out of order is ok?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,863,2018-05-17T21:49:13Z,2018-05-18T00:54:12Z,2018-05-18T00:54:12Z,CLOSED,False,75,75,2,https://github.com/jstuder-gh,Reorder a few ops in interp.c to match oplist,1,[],https://github.com/MoarVM/MoarVM/pull/863,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/863#issuecomment-390026644,"For compiler optimization purposes.
SEE: 82eb5fc","I recently re-ordered the JIT templates to be in the same order as interp.c. If any of the ops this commit moves are templated, could you also re-order them there?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,863,2018-05-17T21:49:13Z,2018-05-18T00:54:12Z,2018-05-18T00:54:12Z,CLOSED,False,75,75,2,https://github.com/jstuder-gh,Reorder a few ops in interp.c to match oplist,1,[],https://github.com/MoarVM/MoarVM/pull/863,https://github.com/jstuder-gh,4,https://github.com/MoarVM/MoarVM/pull/863#issuecomment-390048180,"For compiler optimization purposes.
SEE: 82eb5fc","@MasterDuke17, they look good. There was only one template that needed to be moved; it's included in the commit.
@bdw, good point about git blame. We don't want to make searching history more difficult if it doesn't get us anything. I was thinking consistency would be good, but not at the cost of history. I'll try to profile this a bit; if it isn't any faster I'll close the PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,863,2018-05-17T21:49:13Z,2018-05-18T00:54:12Z,2018-05-18T00:54:12Z,CLOSED,False,75,75,2,https://github.com/jstuder-gh,Reorder a few ops in interp.c to match oplist,1,[],https://github.com/MoarVM/MoarVM/pull/863,https://github.com/jstuder-gh,5,https://github.com/MoarVM/MoarVM/pull/863#issuecomment-390059993,"For compiler optimization purposes.
SEE: 82eb5fc","I tried profiling both the reordered version and the previous, not-reordered version.
Both were compiled with gcc using the -03 flag. When running Rakudo, I set the MVM_SPESH_DISABLE=1 env var, so that it was running pure interp.
I used the following (rather sophisticated) test script...
use nqp;

my str $haystack = 'This is a rather large haystack';
my str $needle   = 'the';

say nqp::indexicim($haystack, $needle, 0) xx 10_000_000;

with the thought that repeatedly dispatching to one of the reordered ops might yield some difference.
There was no difference. Closing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,864,2018-05-20T15:22:32Z,2018-11-21T20:13:14Z,2018-11-21T20:13:14Z,CLOSED,False,100,31,5,https://github.com/samcv,Rotate hash value randomly for each hash and on hash table expansion,2,[],https://github.com/MoarVM/MoarVM/pull/864,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/864,"This is another improvement to prevent DOS as well as to improve our
conflict resolution. Currently a conflict of the lower x bits of the
hash value will cause conflicts every time we expand the table. It is
much smarter to attempt to use the full bit width of our hash value.
We define an offset for each hash table which is randomized. The hash
values are then rotated that number of bits to determine which bucket
the hash key goes into. On hash table expansion the offset is generated
randomly again.","This is another improvement to prevent DOS as well as to improve our
conflict resolution. Currently a conflict of the lower x bits of the
hash value will cause conflicts every time we expand the table. It is
much smarter to attempt to use the full bit width of our hash value.
We define an offset for each hash table which is randomized. The hash
values are then rotated that number of bits to determine which bucket
the hash key goes into. On hash table expansion the offset is generated
randomly again.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,864,2018-05-20T15:22:32Z,2018-11-21T20:13:14Z,2018-11-21T20:13:14Z,CLOSED,False,100,31,5,https://github.com/samcv,Rotate hash value randomly for each hash and on hash table expansion,2,[],https://github.com/MoarVM/MoarVM/pull/864,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/864#issuecomment-440613660,"This is another improvement to prevent DOS as well as to improve our
conflict resolution. Currently a conflict of the lower x bits of the
hash value will cause conflicts every time we expand the table. It is
much smarter to attempt to use the full bit width of our hash value.
We define an offset for each hash table which is randomized. The hash
values are then rotated that number of bits to determine which bucket
the hash key goes into. On hash table expansion the offset is generated
randomly again.","@samcv is this still something we want, or have you implemented this in another way?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,864,2018-05-20T15:22:32Z,2018-11-21T20:13:14Z,2018-11-21T20:13:14Z,CLOSED,False,100,31,5,https://github.com/samcv,Rotate hash value randomly for each hash and on hash table expansion,2,[],https://github.com/MoarVM/MoarVM/pull/864,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/864#issuecomment-440795462,"This is another improvement to prevent DOS as well as to improve our
conflict resolution. Currently a conflict of the lower x bits of the
hash value will cause conflicts every time we expand the table. It is
much smarter to attempt to use the full bit width of our hash value.
We define an offset for each hash table which is randomized. The hash
values are then rotated that number of bits to determine which bucket
the hash key goes into. On hash table expansion the offset is generated
randomly again.",Yeah I believe I've implemented this separately. Going to close this PR,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,868,2018-05-31T18:50:47Z,2018-06-06T14:36:10Z,2018-06-06T14:36:10Z,MERGED,True,514,316,28,https://github.com/bdw,[JIT] Use on-stack return address for reading and writing the current position,20,[],https://github.com/MoarVM/MoarVM/pull/868,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/868,"The JIT currently relies on compiled control guards for two purposes:

To signal to the rest of the interpreter our current position in the code, so that we can correctly lookup exceptions handlers, dynamic lexical variables etc, the JIT-compiled code stores its' 'current position' into the current frame on entry of every basic block.
To 'follow' control flow changes (e.g. in case of 'invokish' operators that may or may not invoke another frame, or exceptions that are thrown, we maintain an on-stack copy of the current frame number, and 'trampoline' back to the interpreter if we find a difference.

These were workarrounds for the fact that MoarVM has been designed around the notion of efficient access to the current position pointer (as an interpreter, since this is explicit), and for JIT-compiled code, the equivalent (rip) register, does not provide explicit access.
However, whenever we actually call a function, we necessarily store the 'current position' (actually the continuation position) on the stack (per semantics of call). Furthermore, because we control the layout of the stack prior to the call, we know exactly where that pointer will be stored and compute a pointer to the (future) position of the return address pointer. Armed with this, we can read the current position directly from the stack, as well as update the position when we need to leave the frame (or go to an exception handler).
I expect this to cause a sizable reduction in compiled code size, and hopefully a performance improvement as well.","The JIT currently relies on compiled control guards for two purposes:

To signal to the rest of the interpreter our current position in the code, so that we can correctly lookup exceptions handlers, dynamic lexical variables etc, the JIT-compiled code stores its' 'current position' into the current frame on entry of every basic block.
To 'follow' control flow changes (e.g. in case of 'invokish' operators that may or may not invoke another frame, or exceptions that are thrown, we maintain an on-stack copy of the current frame number, and 'trampoline' back to the interpreter if we find a difference.

These were workarrounds for the fact that MoarVM has been designed around the notion of efficient access to the current position pointer (as an interpreter, since this is explicit), and for JIT-compiled code, the equivalent (rip) register, does not provide explicit access.
However, whenever we actually call a function, we necessarily store the 'current position' (actually the continuation position) on the stack (per semantics of call). Furthermore, because we control the layout of the stack prior to the call, we know exactly where that pointer will be stored and compute a pointer to the (future) position of the return address pointer. Armed with this, we can read the current position directly from the stack, as well as update the position when we need to leave the frame (or go to an exception handler).
I expect this to cause a sizable reduction in compiled code size, and hopefully a performance improvement as well.",True,"{'HEART': ['https://github.com/lizmat'], 'HOORAY': ['https://github.com/Demayl']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,869,2018-06-03T01:50:11Z,2018-06-03T02:37:33Z,2018-06-03T02:37:33Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,Set UV_TCP_IPV6ONLY flag when binding async IPv6 TCP connnections,1,[],https://github.com/MoarVM/MoarVM/pull/869,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/869,"Binding without it on OpenBSD causes uv_tcp_bind to return EINVAL when
calling MVM_io_socket_listen_async with an IPv6 address.
Fixes rakudo/rakudo#1879","Binding without it on OpenBSD causes uv_tcp_bind to return EINVAL when
calling MVM_io_socket_listen_async with an IPv6 address.
Fixes rakudo/rakudo#1879",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,869,2018-06-03T01:50:11Z,2018-06-03T02:37:33Z,2018-06-03T02:37:33Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,Set UV_TCP_IPV6ONLY flag when binding async IPv6 TCP connnections,1,[],https://github.com/MoarVM/MoarVM/pull/869,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/869#issuecomment-394130703,"Binding without it on OpenBSD causes uv_tcp_bind to return EINVAL when
calling MVM_io_socket_listen_async with an IPv6 address.
Fixes rakudo/rakudo#1879","Never mind, this breaks hosting on localhost. I'll keep looking for a proper fix",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,870,2018-06-03T17:08:43Z,2018-06-12T18:51:12Z,2018-06-12T18:51:12Z,MERGED,True,29,14,5,https://github.com/jstuder-gh,Change getsignals output from hash to array ,2,[],https://github.com/MoarVM/MoarVM/pull/870,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/870,"This is the MoarVM component of a whole spanning the MoarVM, NQP,
and Rakudo repos.
NQP
Rakudo
Changed the output of getsignals from a hash to an array with signal
names interleaved with signal values.
The purpose of this is to allow for a more consistent ordering of
signals when exposed to the HLL.
Also, although this probably isn't likely to be part of any hot code path,
adding JIT support for the getsignals op.","This is the MoarVM component of a whole spanning the MoarVM, NQP,
and Rakudo repos.
NQP
Rakudo
Changed the output of getsignals from a hash to an array with signal
names interleaved with signal values.
The purpose of this is to allow for a more consistent ordering of
signals when exposed to the HLL.
Also, although this probably isn't likely to be part of any hot code path,
adding JIT support for the getsignals op.",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,872,2018-06-08T22:13:26Z,2018-06-08T22:41:01Z,2018-06-08T22:41:01Z,MERGED,True,2,0,1,https://github.com/jstuder-gh,Define SIGBREAK on WIN32,1,[],https://github.com/MoarVM/MoarVM/pull/872,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/872,"SIGBREAK is another signal emulated by libuv on Windows, but is not
defined in the platform's signal.h file. Using the same signum provided
to it in NodeJS's os.constants.signals object.","SIGBREAK is another signal emulated by libuv on Windows, but is not
defined in the platform's signal.h file. Using the same signum provided
to it in NodeJS's os.constants.signals object.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,873,2018-06-09T06:42:13Z,2018-06-26T08:48:28Z,2018-06-26T08:48:28Z,CLOSED,False,425,27,9,https://github.com/samcv,Add 57 more expr JIT templates,8,[],https://github.com/MoarVM/MoarVM/pull/873,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/873,"eqatic_s, eqatim_s, ordbaseat, uc, lc, tc, split, join, getcp_s,
indexcp_s, index_s, graphs_s, codes_s, substr_s, ordat, chr, getenvhash,
backendconfig, coerce_si, equaticim_s, unicmp_s, indexicim_s,
getstrfromname, indexic_s, die, eqatic_s, haveat_s, repeat_s, getcpbyname, unipropcode, unipvalcode,
hasuniprop, ordfirst, rindexfrom, flip, unbox_s, atpos_n, atpos_s, getuniname, getuniprop_int, getuniprop_bool, getuniprop_str, matchuniprop, nativecallbuild, nativecallinvoke, nativecallrefresh,
threadrun, threadid, threadyield, currentthread, lock, unlock, timer, iscont_i, iscont_n, iscont_s, eqaticim_s
Move coerce_sI and unbox_s into a functions so we are able to JIT it.","eqatic_s, eqatim_s, ordbaseat, uc, lc, tc, split, join, getcp_s,
indexcp_s, index_s, graphs_s, codes_s, substr_s, ordat, chr, getenvhash,
backendconfig, coerce_si, equaticim_s, unicmp_s, indexicim_s,
getstrfromname, indexic_s, die, eqatic_s, haveat_s, repeat_s, getcpbyname, unipropcode, unipvalcode,
hasuniprop, ordfirst, rindexfrom, flip, unbox_s, atpos_n, atpos_s, getuniname, getuniprop_int, getuniprop_bool, getuniprop_str, matchuniprop, nativecallbuild, nativecallinvoke, nativecallrefresh,
threadrun, threadid, threadyield, currentthread, lock, unlock, timer, iscont_i, iscont_n, iscont_s, eqaticim_s
Move coerce_sI and unbox_s into a functions so we are able to JIT it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,873,2018-06-09T06:42:13Z,2018-06-26T08:48:28Z,2018-06-26T08:48:28Z,CLOSED,False,425,27,9,https://github.com/samcv,Add 57 more expr JIT templates,8,[],https://github.com/MoarVM/MoarVM/pull/873,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/873#issuecomment-399693211,"eqatic_s, eqatim_s, ordbaseat, uc, lc, tc, split, join, getcp_s,
indexcp_s, index_s, graphs_s, codes_s, substr_s, ordat, chr, getenvhash,
backendconfig, coerce_si, equaticim_s, unicmp_s, indexicim_s,
getstrfromname, indexic_s, die, eqatic_s, haveat_s, repeat_s, getcpbyname, unipropcode, unipvalcode,
hasuniprop, ordfirst, rindexfrom, flip, unbox_s, atpos_n, atpos_s, getuniname, getuniprop_int, getuniprop_bool, getuniprop_str, matchuniprop, nativecallbuild, nativecallinvoke, nativecallrefresh,
threadrun, threadid, threadyield, currentthread, lock, unlock, timer, iscont_i, iscont_n, iscont_s, eqaticim_s
Move coerce_sI and unbox_s into a functions so we are able to JIT it.","@bdw can you take a look at this pull request and make sure I did things correctly?

Adding unbox_s as a function was a good idea
I added die, atpos_n and atpos_s properly
Especially make sure nativecallrefresh, threadrun were added properly

And just look over the rest quickly. Thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,873,2018-06-09T06:42:13Z,2018-06-26T08:48:28Z,2018-06-26T08:48:28Z,CLOSED,False,425,27,9,https://github.com/samcv,Add 57 more expr JIT templates,8,[],https://github.com/MoarVM/MoarVM/pull/873,https://github.com/bdw,3,https://github.com/MoarVM/MoarVM/pull/873#issuecomment-399768116,"eqatic_s, eqatim_s, ordbaseat, uc, lc, tc, split, join, getcp_s,
indexcp_s, index_s, graphs_s, codes_s, substr_s, ordat, chr, getenvhash,
backendconfig, coerce_si, equaticim_s, unicmp_s, indexicim_s,
getstrfromname, indexic_s, die, eqatic_s, haveat_s, repeat_s, getcpbyname, unipropcode, unipvalcode,
hasuniprop, ordfirst, rindexfrom, flip, unbox_s, atpos_n, atpos_s, getuniname, getuniprop_int, getuniprop_bool, getuniprop_str, matchuniprop, nativecallbuild, nativecallinvoke, nativecallrefresh,
threadrun, threadid, threadyield, currentthread, lock, unlock, timer, iscont_i, iscont_n, iscont_s, eqaticim_s
Move coerce_sI and unbox_s into a functions so we are able to JIT it.",I've rebased and pushed to origin/add-more-expr-ops. I'll run a spectest and if clean will merge.,True,{'THUMBS_UP': ['https://github.com/samcv']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,873,2018-06-09T06:42:13Z,2018-06-26T08:48:28Z,2018-06-26T08:48:28Z,CLOSED,False,425,27,9,https://github.com/samcv,Add 57 more expr JIT templates,8,[],https://github.com/MoarVM/MoarVM/pull/873,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/873#issuecomment-400231254,"eqatic_s, eqatim_s, ordbaseat, uc, lc, tc, split, join, getcp_s,
indexcp_s, index_s, graphs_s, codes_s, substr_s, ordat, chr, getenvhash,
backendconfig, coerce_si, equaticim_s, unicmp_s, indexicim_s,
getstrfromname, indexic_s, die, eqatic_s, haveat_s, repeat_s, getcpbyname, unipropcode, unipvalcode,
hasuniprop, ordfirst, rindexfrom, flip, unbox_s, atpos_n, atpos_s, getuniname, getuniprop_int, getuniprop_bool, getuniprop_str, matchuniprop, nativecallbuild, nativecallinvoke, nativecallrefresh,
threadrun, threadid, threadyield, currentthread, lock, unlock, timer, iscont_i, iscont_n, iscont_s, eqaticim_s
Move coerce_sI and unbox_s into a functions so we are able to JIT it.",Closing since it was merged in by way of another branch,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,876,2018-06-15T04:04:06Z,2018-06-17T18:10:53Z,2018-06-17T18:10:53Z,MERGED,True,296,196,10,https://github.com/samcv,Add support for all native int types to getlexref_ni and new atkey_u op,5,[],https://github.com/MoarVM/MoarVM/pull/876,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/876,"Unlike with atkey we don't have to add additional ops because getlexref_ni
returns an object and not a native int. Make getlexref_ni accept any native
int type so we don't have to create more opcodes without reason.
Add new atkey_u op
This is needed in nqp for the lexpad.
Add support for all native int's in lexprimspec
This was missing the non-64 bit signed ints as well as all unsigned types.
Allow MVMContext atkey to work on all sizes of native ints","Unlike with atkey we don't have to add additional ops because getlexref_ni
returns an object and not a native int. Make getlexref_ni accept any native
int type so we don't have to create more opcodes without reason.
Add new atkey_u op
This is needed in nqp for the lexpad.
Add support for all native int's in lexprimspec
This was missing the non-64 bit signed ints as well as all unsigned types.
Allow MVMContext atkey to work on all sizes of native ints",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,879,2018-06-22T15:21:12Z,2018-06-23T08:07:05Z,2018-06-23T08:07:09Z,MERGED,True,1,1,1,https://github.com/stmuk,Use clang with OpenBSD since their ancient gcc creates a moar which can't generate NQP anymore. See #878,1,[],https://github.com/MoarVM/MoarVM/pull/879,https://github.com/stmuk,1,https://github.com/MoarVM/MoarVM/pull/879,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,879,2018-06-22T15:21:12Z,2018-06-23T08:07:05Z,2018-06-23T08:07:09Z,MERGED,True,1,1,1,https://github.com/stmuk,Use clang with OpenBSD since their ancient gcc creates a moar which can't generate NQP anymore. See #878,1,[],https://github.com/MoarVM/MoarVM/pull/879,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/879#issuecomment-399650292,,I think this is a great plan. Going to merge. Thanks for this!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,880,2018-06-22T15:52:56Z,2018-07-02T20:21:59Z,2018-07-02T20:21:59Z,MERGED,True,27,11,1,https://github.com/Kaiepi,Expose file descriptors of IO::Socket::INET instances,1,[],https://github.com/MoarVM/MoarVM/pull/880,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/880,"Before, .native-descriptor was available from IO::Socket, but always
returned -1.
Could be useful if people want to do stuff with sockets natively","Before, .native-descriptor was available from IO::Socket, but always
returned -1.
Could be useful if people want to do stuff with sockets natively",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,881,2018-06-24T00:03:22Z,2018-06-24T04:15:08Z,2018-06-24T04:15:09Z,MERGED,True,2,2,1,https://github.com/Kaiepi,Fix tools/compare-oplist-interp-order.sh on *BSD,1,[],https://github.com/MoarVM/MoarVM/pull/881,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/881,\s and \S aren't tokens in BSD regex.,\s and \S aren't tokens in BSD regex.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,881,2018-06-24T00:03:22Z,2018-06-24T04:15:08Z,2018-06-24T04:15:09Z,MERGED,True,2,2,1,https://github.com/Kaiepi,Fix tools/compare-oplist-interp-order.sh on *BSD,1,[],https://github.com/MoarVM/MoarVM/pull/881,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/881#issuecomment-399727675,\s and \S aren't tokens in BSD regex.,Thanks for this :),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,882,2018-06-25T02:32:41Z,2018-07-02T08:43:03Z,2018-07-02T08:43:03Z,MERGED,True,441,33,4,https://github.com/jstuder-gh,Add more exprjit templates (06/24/18),49,[],https://github.com/MoarVM/MoarVM/pull/882,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/882,66 new templates.,66 new templates.,True,"{'HOORAY': ['https://github.com/zoffixznet', 'https://github.com/lizmat']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,882,2018-06-25T02:32:41Z,2018-07-02T08:43:03Z,2018-07-02T08:43:03Z,MERGED,True,441,33,4,https://github.com/jstuder-gh,Add more exprjit templates (06/24/18),49,[],https://github.com/MoarVM/MoarVM/pull/882,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/882#issuecomment-401614797,66 new templates.,Can't wait to see these merged.  But I'm in no position to judge their correctness  :-(,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,882,2018-06-25T02:32:41Z,2018-07-02T08:43:03Z,2018-07-02T08:43:03Z,MERGED,True,441,33,4,https://github.com/jstuder-gh,Add more exprjit templates (06/24/18),49,[],https://github.com/MoarVM/MoarVM/pull/882,https://github.com/jstuder-gh,3,https://github.com/MoarVM/MoarVM/pull/882#issuecomment-401627845,66 new templates.,"@bdw, Thanks for the review! I've incorporated your suggestions and pushed up the new commits.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,883,2018-06-26T09:15:03Z,2018-06-26T20:24:13Z,2018-06-26T20:24:13Z,MERGED,True,54,0,1,https://github.com/samcv,Add expr jit templates for atkey_i/n/s/u coerce_iu/ui decont_u,1,[],https://github.com/MoarVM/MoarVM/pull/883,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/883,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,884,2018-06-26T15:07:38Z,2018-06-26T15:09:17Z,2018-06-26T15:33:40Z,MERGED,True,1,1,1,https://github.com/tisonkun,NQP does not support parrot any more,1,[],https://github.com/MoarVM/MoarVM/pull/884,https://github.com/tisonkun,1,https://github.com/MoarVM/MoarVM/pull/884,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,884,2018-06-26T15:07:38Z,2018-06-26T15:09:17Z,2018-06-26T15:33:40Z,MERGED,True,1,1,1,https://github.com/tisonkun,NQP does not support parrot any more,1,[],https://github.com/MoarVM/MoarVM/pull/884,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/884#issuecomment-400345454,,There are other mentions of parrot that are probably also worth removing.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,885,2018-06-26T15:59:22Z,2018-06-26T16:24:46Z,2018-06-26T16:40:24Z,MERGED,True,9,9,3,https://github.com/tisonkun,Clean outdated mention of Parrot,1,[],https://github.com/MoarVM/MoarVM/pull/885,https://github.com/tisonkun,1,https://github.com/MoarVM/MoarVM/pull/885,"There is 2 mention of Parrot.

docs/reveal.md
src/6model/reprs/SCRef.h

Both of them talking about history instead of outdated
info. Thus no reason for removing them.","There is 2 mention of Parrot.

docs/reveal.md
src/6model/reprs/SCRef.h

Both of them talking about history instead of outdated
info. Thus no reason for removing them.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,885,2018-06-26T15:59:22Z,2018-06-26T16:24:46Z,2018-06-26T16:40:24Z,MERGED,True,9,9,3,https://github.com/tisonkun,Clean outdated mention of Parrot,1,[],https://github.com/MoarVM/MoarVM/pull/885,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/885#issuecomment-400375911,"There is 2 mention of Parrot.

docs/reveal.md
src/6model/reprs/SCRef.h

Both of them talking about history instead of outdated
info. Thus no reason for removing them.",👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,886,2018-06-27T04:28:16Z,2018-07-02T08:40:03Z,2018-07-02T08:40:04Z,MERGED,True,233,3,4,https://github.com/Kaiepi,Implement JIT templates for 12 ops (27/06/18),4,[],https://github.com/MoarVM/MoarVM/pull/886,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/886,"Adds JIT support for the following ops:

isinvokable
getlexreldyn
objprimunsigned
scgethandle
scobjcount
setobjsc
getcodename
captureposarg_i
captureposarg_n
captureposarg_s
ctxcallerskipthunks
setwho","Adds JIT support for the following ops:

isinvokable
getlexreldyn
objprimunsigned
scgethandle
scobjcount
setobjsc
getcodename
captureposarg_i
captureposarg_n
captureposarg_s
ctxcallerskipthunks
setwho",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,886,2018-06-27T04:28:16Z,2018-07-02T08:40:03Z,2018-07-02T08:40:04Z,MERGED,True,233,3,4,https://github.com/Kaiepi,Implement JIT templates for 12 ops (27/06/18),4,[],https://github.com/MoarVM/MoarVM/pull/886,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/886#issuecomment-400682568,"Adds JIT support for the following ops:

isinvokable
getlexreldyn
objprimunsigned
scgethandle
scobjcount
setobjsc
getcodename
captureposarg_i
captureposarg_n
captureposarg_s
ctxcallerskipthunks
setwho",Updated. This is all the ops I was able to get working for now.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,886,2018-06-27T04:28:16Z,2018-07-02T08:40:03Z,2018-07-02T08:40:04Z,MERGED,True,233,3,4,https://github.com/Kaiepi,Implement JIT templates for 12 ops (27/06/18),4,[],https://github.com/MoarVM/MoarVM/pull/886,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/886#issuecomment-401362094,"Adds JIT support for the following ops:

isinvokable
getlexreldyn
objprimunsigned
scgethandle
scobjcount
setobjsc
getcodename
captureposarg_i
captureposarg_n
captureposarg_s
ctxcallerskipthunks
setwho",Removed the template for getlexrelcaller since it was breaking things after more testing,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,888,2018-06-27T05:39:19Z,2018-08-05T14:07:54Z,2018-08-05T14:07:54Z,MERGED,True,1,1,1,https://github.com/Kaiepi,Fix Configure.pl version detection,1,[],https://github.com/MoarVM/MoarVM/pull/888,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/888,"Configure.pl was sometimes giving versions based off past tags instead
of the current one.","Configure.pl was sometimes giving versions based off past tags instead
of the current one.",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,889,2018-07-02T04:10:01Z,2018-07-16T12:07:03Z,2018-07-16T12:07:03Z,MERGED,True,387,135,12,https://github.com/samcv,"Implement SipHash, use as our hashing function w/ 64bit hashvals",2,[],https://github.com/MoarVM/MoarVM/pull/889,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/889,"Implement SipHash, use as our hashing function w/ 64bit hashvals
This switches our hashing function from ""Jenkins's Lookup2"" to SipHash.
This adds a heavily modified version of https://github.com/majek/csiphash
which has been modified to use a struct to store the state and allow us to
add 64 bits at a time (two graphemes). It also has been modified to take
64 bit integers instead of pointers to bytes.
Rewriting the CSipHash code to take a 64 bit integer is significant because
it gives us a massive speedup due to much better inlining and less data
copying.
Some of this SipHash code was finished a month ago but only recently had I
optimized it enough so that was just as fast as our current hashing
function. It makes my hashing speed test file 0.5% slower, which is totally
acceptable given it has been studied extensively, while our previous hash fn
has not been studied for security to the best of my knowledge.
We now use a 128-bit hashSecret stored in two MVMuint64's. Previously we
only had a 32-bit length hashSecret (stored in a MVMuint32).
The hash values are now 64-bits instead of 32-bits.","Implement SipHash, use as our hashing function w/ 64bit hashvals
This switches our hashing function from ""Jenkins's Lookup2"" to SipHash.
This adds a heavily modified version of https://github.com/majek/csiphash
which has been modified to use a struct to store the state and allow us to
add 64 bits at a time (two graphemes). It also has been modified to take
64 bit integers instead of pointers to bytes.
Rewriting the CSipHash code to take a 64 bit integer is significant because
it gives us a massive speedup due to much better inlining and less data
copying.
Some of this SipHash code was finished a month ago but only recently had I
optimized it enough so that was just as fast as our current hashing
function. It makes my hashing speed test file 0.5% slower, which is totally
acceptable given it has been studied extensively, while our previous hash fn
has not been studied for security to the best of my knowledge.
We now use a 128-bit hashSecret stored in two MVMuint64's. Previously we
only had a 32-bit length hashSecret (stored in a MVMuint32).
The hash values are now 64-bits instead of 32-bits.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,889,2018-07-02T04:10:01Z,2018-07-16T12:07:03Z,2018-07-16T12:07:03Z,MERGED,True,387,135,12,https://github.com/samcv,"Implement SipHash, use as our hashing function w/ 64bit hashvals",2,[],https://github.com/MoarVM/MoarVM/pull/889,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/889#issuecomment-401756927,"Implement SipHash, use as our hashing function w/ 64bit hashvals
This switches our hashing function from ""Jenkins's Lookup2"" to SipHash.
This adds a heavily modified version of https://github.com/majek/csiphash
which has been modified to use a struct to store the state and allow us to
add 64 bits at a time (two graphemes). It also has been modified to take
64 bit integers instead of pointers to bytes.
Rewriting the CSipHash code to take a 64 bit integer is significant because
it gives us a massive speedup due to much better inlining and less data
copying.
Some of this SipHash code was finished a month ago but only recently had I
optimized it enough so that was just as fast as our current hashing
function. It makes my hashing speed test file 0.5% slower, which is totally
acceptable given it has been studied extensively, while our previous hash fn
has not been studied for security to the best of my knowledge.
We now use a 128-bit hashSecret stored in two MVMuint64's. Previously we
only had a 32-bit length hashSecret (stored in a MVMuint32).
The hash values are now 64-bits instead of 32-bits.","The Appveyor failure looks like a legit problem also.
Really nice work otherwise. :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,889,2018-07-02T04:10:01Z,2018-07-16T12:07:03Z,2018-07-16T12:07:03Z,MERGED,True,387,135,12,https://github.com/samcv,"Implement SipHash, use as our hashing function w/ 64bit hashvals",2,[],https://github.com/MoarVM/MoarVM/pull/889,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/889#issuecomment-405226463,"Implement SipHash, use as our hashing function w/ 64bit hashvals
This switches our hashing function from ""Jenkins's Lookup2"" to SipHash.
This adds a heavily modified version of https://github.com/majek/csiphash
which has been modified to use a struct to store the state and allow us to
add 64 bits at a time (two graphemes). It also has been modified to take
64 bit integers instead of pointers to bytes.
Rewriting the CSipHash code to take a 64 bit integer is significant because
it gives us a massive speedup due to much better inlining and less data
copying.
Some of this SipHash code was finished a month ago but only recently had I
optimized it enough so that was just as fast as our current hashing
function. It makes my hashing speed test file 0.5% slower, which is totally
acceptable given it has been studied extensively, while our previous hash fn
has not been studied for security to the best of my knowledge.
We now use a 128-bit hashSecret stored in two MVMuint64's. Previously we
only had a 32-bit length hashSecret (stored in a MVMuint32).
The hash values are now 64-bits instead of 32-bits.",Merging this now.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,891,2018-07-03T02:15:10Z,2018-07-03T09:04:37Z,2018-07-03T09:04:37Z,MERGED,True,10,11,2,https://github.com/jstuder-gh,Alter some exprjit templates to remove branching,1,[],https://github.com/MoarVM/MoarVM/pull/891,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/891,Remove branching from some templates where a bitwise op will do.,Remove branching from some templates where a bitwise op will do.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,891,2018-07-03T02:15:10Z,2018-07-03T09:04:37Z,2018-07-03T09:04:37Z,MERGED,True,10,11,2,https://github.com/jstuder-gh,Alter some exprjit templates to remove branching,1,[],https://github.com/MoarVM/MoarVM/pull/891,https://github.com/jstuder-gh,2,https://github.com/MoarVM/MoarVM/pull/891#issuecomment-402036086,Remove branching from some templates where a bitwise op will do.,"Darn, I should have noticed that glaring issue. @bdw, I reworked the commit and re-pushed to include the (few) safe changes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,893,2018-07-04T23:05:40Z,,2018-07-05T06:58:15Z,OPEN,False,30,20,2,https://github.com/jstuder-gh,Display build/commit info on config/make,2,[],https://github.com/MoarVM/MoarVM/pull/893,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/893,"This will be most helpful using '--gen-moar=master' when configuring
NQP or Rakudo in an environment like Travis or AppVeyor.
This PR does up the required Perl 5 version to 5.10 (due to the named
captures). I'm not sure if that is an issue or not.","This will be most helpful using '--gen-moar=master' when configuring
NQP or Rakudo in an environment like Travis or AppVeyor.
This PR does up the required Perl 5 version to 5.10 (due to the named
captures). I'm not sure if that is an issue or not.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,895,2018-07-05T21:41:49Z,2018-07-05T22:02:31Z,2018-07-05T22:06:17Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Remove useless conditional,1,[],https://github.com/MoarVM/MoarVM/pull/895,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/895,"i is an MVMuint64, so it will always be >= 0.","i is an MVMuint64, so it will always be >= 0.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,895,2018-07-05T21:41:49Z,2018-07-05T22:02:31Z,2018-07-05T22:06:17Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Remove useless conditional,1,[],https://github.com/MoarVM/MoarVM/pull/895,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/895#issuecomment-402866024,"i is an MVMuint64, so it will always be >= 0.",👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,896,2018-07-06T01:39:18Z,2018-08-04T20:58:44Z,2018-08-04T21:13:51Z,MERGED,True,10,10,6,https://github.com/MasterDuke17,Add parens to expressions to silence clang warning,1,[],https://github.com/MoarVM/MoarVM/pull/896,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/896,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,897,2018-07-06T01:49:37Z,2018-08-04T20:58:59Z,2018-08-04T21:14:00Z,MERGED,True,6,0,1,https://github.com/MasterDuke17,Add pragma to switch to silence clang warning,1,[],https://github.com/MoarVM/MoarVM/pull/897,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/897,"[16:45]  jnthn: is it intentional that not all the enum cases are handled in this switch? https://github.com/MoarVM/MoarVM/blob/master/src/spesh/arg_guard.c#L534-L539
[17:24]  MasterDuke: Yes, not all of them have anything to mark; see https://github.com/MoarVM/MoarVM/blob/master/src/spesh/arg_guard.h#L72","[16:45]  jnthn: is it intentional that not all the enum cases are handled in this switch? https://github.com/MoarVM/MoarVM/blob/master/src/spesh/arg_guard.c#L534-L539
[17:24]  MasterDuke: Yes, not all of them have anything to mark; see https://github.com/MoarVM/MoarVM/blob/master/src/spesh/arg_guard.h#L72",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,898,2018-07-06T17:08:05Z,,2018-07-06T17:08:05Z,OPEN,False,4,6,1,https://github.com/ugexe,Remove unnecessary MVMROOT,1,[],https://github.com/MoarVM/MoarVM/pull/898,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/898,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,899,2018-07-08T16:28:51Z,2018-08-06T03:20:58Z,2018-08-06T03:21:04Z,MERGED,True,17,9,8,https://github.com/MasterDuke17,Rename (and JIT) getstrfromname,2,[],https://github.com/MoarVM/MoarVM/pull/899,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/899,This better fits the convention of the other *from* ops.,This better fits the convention of the other *from* ops.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,899,2018-07-08T16:28:51Z,2018-08-06T03:20:58Z,2018-08-06T03:21:04Z,MERGED,True,17,9,8,https://github.com/MasterDuke17,Rename (and JIT) getstrfromname,2,[],https://github.com/MoarVM/MoarVM/pull/899,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/899#issuecomment-410545530,This better fits the convention of the other *from* ops.,"@bdw yeah, my plan if this was approved was to rebase everything, and then add the appropriate bumps to Raku/nqp#483 and rakudo/rakudo#2035 as the PRs were merged.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,900,2018-07-08T19:13:47Z,2018-07-21T15:41:25Z,2018-07-21T15:41:26Z,CLOSED,False,493,19,3,https://github.com/jstuder-gh,Add more exprjit templates (07/08/18),25,[],https://github.com/MoarVM/MoarVM/pull/900,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/900,"Add 59 more templates and nullptr macro.
They've  passed the spectest with the following env vars set:

MVM_SPESH_NODELAY=1
MVM_SPESH_INLINE_DISABLE=1
MVM_SPESH_OSR_DISABLE=1","Add 59 more templates and nullptr macro.
They've  passed the spectest with the following env vars set:

MVM_SPESH_NODELAY=1
MVM_SPESH_INLINE_DISABLE=1
MVM_SPESH_OSR_DISABLE=1",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,900,2018-07-08T19:13:47Z,2018-07-21T15:41:25Z,2018-07-21T15:41:26Z,CLOSED,False,493,19,3,https://github.com/jstuder-gh,Add more exprjit templates (07/08/18),25,[],https://github.com/MoarVM/MoarVM/pull/900,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/900#issuecomment-404438566,"Add 59 more templates and nullptr macro.
They've  passed the spectest with the following env vars set:

MVM_SPESH_NODELAY=1
MVM_SPESH_INLINE_DISABLE=1
MVM_SPESH_OSR_DISABLE=1","Thank you for all the hard work.  But I think these should be added as separate Pull Requests, so they can be judged separately, and bisected better in case of problems.
Now, it is an all-or-nothing Pull Request, which gets scarier to commit with each addition.",True,{'THUMBS_UP': ['https://github.com/zoffixznet']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,900,2018-07-08T19:13:47Z,2018-07-21T15:41:25Z,2018-07-21T15:41:26Z,CLOSED,False,493,19,3,https://github.com/jstuder-gh,Add more exprjit templates (07/08/18),25,[],https://github.com/MoarVM/MoarVM/pull/900,https://github.com/jstuder-gh,3,https://github.com/MoarVM/MoarVM/pull/900#issuecomment-405061538,"Add 59 more templates and nullptr macro.
They've  passed the spectest with the following env vars set:

MVM_SPESH_NODELAY=1
MVM_SPESH_INLINE_DISABLE=1
MVM_SPESH_OSR_DISABLE=1","I understand and appreciate your concern. I think that you're right that it would be better to submit in smaller, digestable chunks than with one monolithic PR. In the future, I'll definitely submit more along those lines.
I do want to mention that I have been working on this branch with bisectability in mind. Each commit only has a few related templates included at a time (if they are only calling a C function) or only one if it is a bit more involved.
I run this script as I add new commits and use it with git bisect to track down issues when they appear. This script runs the spectest and sets MVM_SPESH_NODELAY so that the jitting will occur right away (as well as MVM_SPESH_INLINE_DISABLE and MVM_SPESH_OSR_DISABLE so that there is less optimization going on other than the jitting).
This branch passes for me when I run this with commit 2ff4274d6482eafadce42c06b9763b6d084ab277 checked out for the roast (it's a bit older, but so is the head of MoarVM's master that I branched off from). I'm also using commit cec76ff79ebb4092803d5e680e648883bda1bc55 on NQP and commit ade83c861484f5f4e4184a88d9dae79a2cdf110c on Rakudo.
This script is assuming that all the source directories have the same base directory and that MoarVM has already had Configure.pl run for it. Also I tend to run it with a local branch other than master checked out on ${basedir}/rakudo/t/spec so that the spectest won't be updated (there's probably a better way but it works).
I won't add any more commits to this branch. If need be I can break this one up too.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,900,2018-07-08T19:13:47Z,2018-07-21T15:41:25Z,2018-07-21T15:41:26Z,CLOSED,False,493,19,3,https://github.com/jstuder-gh,Add more exprjit templates (07/08/18),25,[],https://github.com/MoarVM/MoarVM/pull/900,https://github.com/lizmat,4,https://github.com/MoarVM/MoarVM/pull/900#issuecomment-405082781,"Add 59 more templates and nullptr macro.
They've  passed the spectest with the following env vars set:

MVM_SPESH_NODELAY=1
MVM_SPESH_INLINE_DISABLE=1
MVM_SPESH_OSR_DISABLE=1","Wrt this branch, I'll leave that up to the people deciding the correctness of it.  :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,900,2018-07-08T19:13:47Z,2018-07-21T15:41:25Z,2018-07-21T15:41:26Z,CLOSED,False,493,19,3,https://github.com/jstuder-gh,Add more exprjit templates (07/08/18),25,[],https://github.com/MoarVM/MoarVM/pull/900,https://github.com/jstuder-gh,5,https://github.com/MoarVM/MoarVM/pull/900#issuecomment-406804837,"Add 59 more templates and nullptr macro.
They've  passed the spectest with the following env vars set:

MVM_SPESH_NODELAY=1
MVM_SPESH_INLINE_DISABLE=1
MVM_SPESH_OSR_DISABLE=1",Closing (was merged in commit 691aa0d).,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,901,2018-07-08T23:01:23Z,2018-07-09T10:59:14Z,2018-07-09T10:59:14Z,MERGED,True,175,105,13,https://github.com/samcv,Make a faster HASH_ITER macro and make other hash optimizations,1,[],https://github.com/MoarVM/MoarVM/pull/901,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/901,"HASH_ITER_FAST is faster and it doesn't randomize bucket order (though
it's faster regardless of that).
Makes the biggest difference when we are iterating a hash with a LOT of
keys in it, such as adding a million keys to a hash then deleting and
adding back again. Got about 40% speed improvement on this nqp script:
https://gist.github.com/9a65a586ea21b20def8efe4aaaab55de
Also optimize GET_X_BITS by making a switch out of it. It doesn't seem
like this would be faster, but it is due to compiler optimizations.","HASH_ITER_FAST is faster and it doesn't randomize bucket order (though
it's faster regardless of that).
Makes the biggest difference when we are iterating a hash with a LOT of
keys in it, such as adding a million keys to a hash then deleting and
adding back again. Got about 40% speed improvement on this nqp script:
https://gist.github.com/9a65a586ea21b20def8efe4aaaab55de
Also optimize GET_X_BITS by making a switch out of it. It doesn't seem
like this would be faster, but it is due to compiler optimizations.",True,{'HEART': ['https://github.com/AlexDaniel']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,903,2018-07-12T09:33:02Z,2018-07-12T09:34:34Z,2018-07-12T09:39:59Z,MERGED,True,4,4,1,https://github.com/vendethiel,fix minor typos,1,[],https://github.com/MoarVM/MoarVM/pull/903,https://github.com/vendethiel,1,https://github.com/MoarVM/MoarVM/pull/903,,,True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,904,2018-07-14T11:28:22Z,2018-07-15T06:52:54Z,2018-07-15T06:52:55Z,MERGED,True,119,39,6,https://github.com/samcv,Remove previous hash handle pointers in hash implementation,1,[],https://github.com/MoarVM/MoarVM/pull/904,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/904,"This makes each hash handle 8 bytes (on 64-bit) smaller. It results in a
speedup on my hash speed test by ~1% as well (likely due to more entries
fitting in the cache) and reduces memory by 8MB with a million hash
entries. The test wastes about half cpu on GC so likely the speed
increase is at least 3% or more if just taking the hash impl. code into
account.
Main changes to the code is adding additional functions that don't just
find the hash pointer, but its previous entry (since we don't store it
in the pointer itself anymore).
A convenience HASH_FIND_AND_DELETE has been added which acts just like
the old HASH_DELETE performed while also letting us use HASH_FIND_prev
in places where we want to access the found object before then calling
HASH_DELETE on it.","This makes each hash handle 8 bytes (on 64-bit) smaller. It results in a
speedup on my hash speed test by ~1% as well (likely due to more entries
fitting in the cache) and reduces memory by 8MB with a million hash
entries. The test wastes about half cpu on GC so likely the speed
increase is at least 3% or more if just taking the hash impl. code into
account.
Main changes to the code is adding additional functions that don't just
find the hash pointer, but its previous entry (since we don't store it
in the pointer itself anymore).
A convenience HASH_FIND_AND_DELETE has been added which acts just like
the old HASH_DELETE performed while also letting us use HASH_FIND_prev
in places where we want to access the found object before then calling
HASH_DELETE on it.",True,{'THUMBS_UP': ['https://github.com/jnthn']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,905,2018-07-15T12:17:44Z,2018-07-15T12:46:02Z,2018-07-15T12:46:07Z,CLOSED,False,0,0,2,https://github.com/samcv,Test branch,2,[],https://github.com/MoarVM/MoarVM/pull/905,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/905,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,905,2018-07-15T12:17:44Z,2018-07-15T12:46:02Z,2018-07-15T12:46:07Z,CLOSED,False,0,0,2,https://github.com/samcv,Test branch,2,[],https://github.com/MoarVM/MoarVM/pull/905,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/905#issuecomment-405089747,,Closing this test branch,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,911,2018-07-20T00:36:28Z,2018-07-20T06:26:01Z,2018-07-20T06:26:01Z,MERGED,True,1,34,1,https://github.com/jstuder-gh,Rm 'unsafe' templates already in core_templates,1,[],https://github.com/MoarVM/MoarVM/pull/911,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/911,These templates have working versions in src/jit/core_templates.expr,These templates have working versions in src/jit/core_templates.expr,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,912,2018-07-20T13:27:23Z,2018-07-20T13:31:31Z,2018-07-20T13:31:32Z,MERGED,True,14,2,15,https://github.com/jkramer,Add +x and shebangs for scripts.,1,[],https://github.com/MoarVM/MoarVM/pull/912,https://github.com/jkramer,1,https://github.com/MoarVM/MoarVM/pull/912,"Same cleanup as for rakudo and nqp repos, see rakudo/rakudo#2077.","Same cleanup as for rakudo and nqp repos, see rakudo/rakudo#2077.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,912,2018-07-20T13:27:23Z,2018-07-20T13:31:31Z,2018-07-20T13:31:32Z,MERGED,True,14,2,15,https://github.com/jkramer,Add +x and shebangs for scripts.,1,[],https://github.com/MoarVM/MoarVM/pull/912,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/912#issuecomment-406601344,"Same cleanup as for rakudo and nqp repos, see rakudo/rakudo#2077.",Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,914,2018-07-20T22:19:33Z,2020-04-18T12:41:53Z,2020-04-18T12:41:53Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,Update dyncall to latest commit,1,[],https://github.com/MoarVM/MoarVM/pull/914,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/914,Forgot to do this when I updated MoarVM/dyncall since I was using --has-dyncall to build MoarVM instead,Forgot to do this when I updated MoarVM/dyncall since I was using --has-dyncall to build MoarVM instead,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,914,2018-07-20T22:19:33Z,2020-04-18T12:41:53Z,2020-04-18T12:41:53Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,Update dyncall to latest commit,1,[],https://github.com/MoarVM/MoarVM/pull/914,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/914#issuecomment-615861998,Forgot to do this when I updated MoarVM/dyncall since I was using --has-dyncall to build MoarVM instead,"I think dyncall was updated some time ago, so there's no need in this PR. Correct me if I'm wrong.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,915,2018-07-21T12:23:36Z,2018-08-05T19:26:40Z,2018-08-05T19:26:46Z,MERGED,True,41,11,5,https://github.com/MasterDuke17,JIT neg_I and abs_I,3,[],https://github.com/MoarVM/MoarVM/pull/915,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/915,"Rewrite the MVM_BIGINT_UNARY_OP macro the same way as was done for the
MVM_BIGINT_BINARY_OP macro so it can be JITted.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Rewrite the MVM_BIGINT_UNARY_OP macro the same way as was done for the
MVM_BIGINT_BINARY_OP macro so it can be JITted.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{'THUMBS_UP': ['https://github.com/jstuder-gh']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,915,2018-07-21T12:23:36Z,2018-08-05T19:26:40Z,2018-08-05T19:26:46Z,MERGED,True,41,11,5,https://github.com/MasterDuke17,JIT neg_I and abs_I,3,[],https://github.com/MoarVM/MoarVM/pull/915,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/915#issuecomment-406798486,"Rewrite the MVM_BIGINT_UNARY_OP macro the same way as was done for the
MVM_BIGINT_BINARY_OP macro so it can be JITted.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Good catch.
…
Sent from my iPhone
 On Jul 21, 2018, at 9:48 AM, Jeremy Studer ***@***.***> wrote:

 @jstuder-gh commented on this pull request.

 In src/jit/core_templates.expr:

 > @@ -1436,6 +1436,20 @@
        (carg $1   ptr)
        (carg $2   ptr)) ptr_sz))

 +(template: neg_I
 +  (call (^func &MVM_bigint_neg)
 +    (arglist
 +      (carg (tc) ptr)
 +      (carg $2   ptr)
 +      (carg $1   ptr)) int_sz))
 +
 +(template: abs_I
 +  (call (^func &MVM_bigint_abs)
 +    (arglist
 +      (carg (tc) ptr)
 +      (carg $2   ptr)
 +      (carg $1   ptr)) int_sz))
 Same as above.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,916,2018-07-21T19:44:23Z,,2018-07-23T15:48:09Z,OPEN,False,22,5,5,https://github.com/jstuder-gh,Fix Multiple Statevar Initialization Bugs,4,[],https://github.com/MoarVM/MoarVM/pull/916,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/916,"This PR is one part of a series spanning the MoarVM, NQP, and Rakudo repositories.
NQP
Rakudo
This series of PRs modifies the state init check to instead keep a record of the statevars that have been 'HLL init-ed' and have that value determine whether to perform the assignment or not. If the statevar is not assigned to on the first invocation, it is shown as needing assignment the next time it is encountered despite what the MVM_FRAME_FLAG_STATE_INIT value is. If the statevar has been assigned to already and is encountered again within the same frame invocation (as the C-style loop example below), it is aware the that assignment has occurred and does not repeat it.
I had submitted a PR similar to this in the past, but this one has been rebased to a much newer HEAD and changed enough to the point that it feels appropriate to open a new PR.
Specific modifications made are:


Modified the p6stateinit extop to take a symbol as an argument. Within the function, lookup that symbol within the frame's lexical registry and determine whether the 'HLL assignment' has taken place. If so, do not assign again.

The value that persists whether an 'HLL assignment' has taken place is stored in the CodeRef object (alongside the statevar values themselves), which is unique to each closure. This 'isHllInit' value is a variable-length bit array, with each lexical represented by one bit.



Added a new extop, p6stateinitbulk, that will take a list of symbols and check multiple in one extop execution (for use in destructuring state assignments)


Implemented for both the MoarVM and JVM backends.


Issue being addressed:
In the past, we have determined whether to perform an assignment to a state variable by determining whether or not it was the first invocation of a closure (or clone of a frame). In MoarVM, an MVM_FRAME_FLAG_STATE_INIT value is set on the first frame of a given closure.
This works most of the time, but there are some instances where this is producing undesired results (see RT #102994)
sub f($x) {
    return if $x;
    state $y = 5;
    $y;
} 

f(1);
say f(0);
# OUTPUT:   (Any)
# EXPECTED: 5
Since during the first invocation of this closure (when MVM_FRAME_FLAG_STATE_INIT is set) the statevar is not assigned to, on the next invocation the assignment is skipped and the unassigned value (Any) is returned.
In the case of 'once' with a C-style loop conditional (see GH issue 1684), this method also produces some unexpected results.
loop (my $i = 0; $i < once { print $i; 10 }; ++$i ) { }
# OUTPUT:   012345678910
# EXPECTED: 0
In this case, the 'once' appears in the e2 expression in the C-style loop. The statevar init check occurs within the loop conditional and is executed multiple times within the same initial closure invocation. Because of this, MVM_FRAME_FLAG_STATE_INIT is set and the code within the block (containing print) is executed for each iteration.","This PR is one part of a series spanning the MoarVM, NQP, and Rakudo repositories.
NQP
Rakudo
This series of PRs modifies the state init check to instead keep a record of the statevars that have been 'HLL init-ed' and have that value determine whether to perform the assignment or not. If the statevar is not assigned to on the first invocation, it is shown as needing assignment the next time it is encountered despite what the MVM_FRAME_FLAG_STATE_INIT value is. If the statevar has been assigned to already and is encountered again within the same frame invocation (as the C-style loop example below), it is aware the that assignment has occurred and does not repeat it.
I had submitted a PR similar to this in the past, but this one has been rebased to a much newer HEAD and changed enough to the point that it feels appropriate to open a new PR.
Specific modifications made are:


Modified the p6stateinit extop to take a symbol as an argument. Within the function, lookup that symbol within the frame's lexical registry and determine whether the 'HLL assignment' has taken place. If so, do not assign again.

The value that persists whether an 'HLL assignment' has taken place is stored in the CodeRef object (alongside the statevar values themselves), which is unique to each closure. This 'isHllInit' value is a variable-length bit array, with each lexical represented by one bit.



Added a new extop, p6stateinitbulk, that will take a list of symbols and check multiple in one extop execution (for use in destructuring state assignments)


Implemented for both the MoarVM and JVM backends.


Issue being addressed:
In the past, we have determined whether to perform an assignment to a state variable by determining whether or not it was the first invocation of a closure (or clone of a frame). In MoarVM, an MVM_FRAME_FLAG_STATE_INIT value is set on the first frame of a given closure.
This works most of the time, but there are some instances where this is producing undesired results (see RT #102994)
sub f($x) {
    return if $x;
    state $y = 5;
    $y;
} 

f(1);
say f(0);
# OUTPUT:   (Any)
# EXPECTED: 5
Since during the first invocation of this closure (when MVM_FRAME_FLAG_STATE_INIT is set) the statevar is not assigned to, on the next invocation the assignment is skipped and the unassigned value (Any) is returned.
In the case of 'once' with a C-style loop conditional (see GH issue 1684), this method also produces some unexpected results.
loop (my $i = 0; $i < once { print $i; 10 }; ++$i ) { }
# OUTPUT:   012345678910
# EXPECTED: 0
In this case, the 'once' appears in the e2 expression in the C-style loop. The statevar init check occurs within the loop conditional and is executed multiple times within the same initial closure invocation. Because of this, MVM_FRAME_FLAG_STATE_INIT is set and the code within the block (containing print) is executed for each iteration.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,918,2018-07-22T19:23:54Z,2018-10-06T06:28:54Z,2018-10-06T06:28:54Z,CLOSED,False,39,6,2,https://github.com/Kaiepi,Allow getting file descriptors from async sockets,1,[],https://github.com/MoarVM/MoarVM/pull/918,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/918,"This is so Rakudo can provide them as properties on clients and servers
created through IO::Socket::Async.","This is so Rakudo can provide them as properties on clients and servers
created through IO::Socket::Async.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,918,2018-07-22T19:23:54Z,2018-10-06T06:28:54Z,2018-10-06T06:28:54Z,CLOSED,False,39,6,2,https://github.com/Kaiepi,Allow getting file descriptors from async sockets,1,[],https://github.com/MoarVM/MoarVM/pull/918,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/918#issuecomment-427550419,"This is so Rakudo can provide them as properties on clients and servers
created through IO::Socket::Async.",Closing this since the way I worked out how to get the server's native descriptor as soon as it gets tapped really needs to be two separate pull requests,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,920,2018-07-26T21:50:45Z,2018-08-05T14:07:01Z,2018-08-05T14:07:01Z,MERGED,True,13,12,1,https://github.com/jstuder-gh,Move some exprjit templates to the proper order,1,[],https://github.com/MoarVM/MoarVM/pull/920,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/920,In order to match oplist and interp.c,In order to match oplist and interp.c,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,921,2018-07-27T03:02:38Z,2018-08-05T14:06:39Z,2018-08-05T14:06:39Z,MERGED,True,10,2,1,https://github.com/jstuder-gh,Fix memory leak in CArray given P6 Strs,1,[],https://github.com/MoarVM/MoarVM/pull/921,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/921,"Within the CArray's bind_pos function, we are creating UTF8-encoded
C-strings but are never freeing them. Make sure to free them when the
CArray is GC collected.","Within the CArray's bind_pos function, we are creating UTF8-encoded
C-strings but are never freeing them. Make sure to free them when the
CArray is GC collected.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,922,2018-07-27T04:04:15Z,2018-08-04T16:25:49Z,2018-08-04T16:25:49Z,MERGED,True,1,1,1,https://github.com/Kaiepi,Add missing .h suffix to build/Makefile.in,1,[],https://github.com/MoarVM/MoarVM/pull/922,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/922,"This was making compiling the JIT fail on NetBSD since
src/jit/core_templates.h was never getting compiled.
Fixes #917","This was making compiling the JIT fail on NetBSD since
src/jit/core_templates.h was never getting compiled.
Fixes #917",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,922,2018-07-27T04:04:15Z,2018-08-04T16:25:49Z,2018-08-04T16:25:49Z,MERGED,True,1,1,1,https://github.com/Kaiepi,Add missing .h suffix to build/Makefile.in,1,[],https://github.com/MoarVM/MoarVM/pull/922,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/922#issuecomment-410460425,"This was making compiling the JIT fail on NetBSD since
src/jit/core_templates.h was never getting compiled.
Fixes #917","Can someone review this? According to man make, .h is supposed to be in @SUFFIXES to be used in the .expr.h pattern like it is. NetBSD make seems to be more strict about it compared to other versions of make though",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,922,2018-07-27T04:04:15Z,2018-08-04T16:25:49Z,2018-08-04T16:25:49Z,MERGED,True,1,1,1,https://github.com/Kaiepi,Add missing .h suffix to build/Makefile.in,1,[],https://github.com/MoarVM/MoarVM/pull/922,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/922#issuecomment-410460869,"This was making compiling the JIT fail on NetBSD since
src/jit/core_templates.h was never getting compiled.
Fixes #917","Well, seems the automated checks are happy with this, which means it doesn't make any of those other make programs we exercise there unhappy. I figure 9 days is enough for somebody more make-savvy to have weighed in on the PR if there were going to, so will merge. Thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,925,2018-08-02T22:05:37Z,2018-08-02T23:24:21Z,2018-08-02T23:24:26Z,MERGED,True,1,1,1,https://github.com/xelak6,Use the pointer dereference instead of the pointer.,1,[],https://github.com/MoarVM/MoarVM/pull/925,https://github.com/xelak6,1,https://github.com/MoarVM/MoarVM/pull/925,"This fixes an obvious typo, since using a pointer comparison in the
condition does not make sense.","This fixes an obvious typo, since using a pointer comparison in the
condition does not make sense.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,925,2018-08-02T22:05:37Z,2018-08-02T23:24:21Z,2018-08-02T23:24:26Z,MERGED,True,1,1,1,https://github.com/xelak6,Use the pointer dereference instead of the pointer.,1,[],https://github.com/MoarVM/MoarVM/pull/925,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/925#issuecomment-410098139,"This fixes an obvious typo, since using a pointer comparison in the
condition does not make sense.",👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,926,2018-08-04T04:11:44Z,2018-09-04T11:56:05Z,2018-09-05T00:23:56Z,MERGED,True,32,2,1,https://github.com/MasterDuke17,JIT decoder(empty|takebytes),2,[],https://github.com/MoarVM/MoarVM/pull/926,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/926,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This gets rid of some BAILs I saw when using Compress::Zlib. However, it seemed to actually make it slightly slower (roughly from 6.4s before to 6.6s after when gzslurping a 975k file). @bdw any idea why?","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This gets rid of some BAILs I saw when using Compress::Zlib. However, it seemed to actually make it slightly slower (roughly from 6.4s before to 6.6s after when gzslurping a 975k file). @bdw any idea why?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,926,2018-08-04T04:11:44Z,2018-09-04T11:56:05Z,2018-09-05T00:23:56Z,MERGED,True,32,2,1,https://github.com/MasterDuke17,JIT decoder(empty|takebytes),2,[],https://github.com/MoarVM/MoarVM/pull/926,https://github.com/timo,2,https://github.com/MoarVM/MoarVM/pull/926#issuecomment-410437869,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This gets rid of some BAILs I saw when using Compress::Zlib. However, it seemed to actually make it slightly slower (roughly from 6.4s before to 6.6s after when gzslurping a 975k file). @bdw any idea why?","not sure if the impact can be this big, but i'd assume that ensure_decoder would be inlined in the non-jit version, and is a ""full"" call in this one.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,926,2018-08-04T04:11:44Z,2018-09-04T11:56:05Z,2018-09-05T00:23:56Z,MERGED,True,32,2,1,https://github.com/MasterDuke17,JIT decoder(empty|takebytes),2,[],https://github.com/MoarVM/MoarVM/pull/926,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/926#issuecomment-410448989,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This gets rid of some BAILs I saw when using Compress::Zlib. However, it seemed to actually make it slightly slower (roughly from 6.4s before to 6.6s after when gzslurping a 975k file). @bdw any idea why?","@timo huh, might that be the same for the other decoder* ops also? They could actually be faster non-jitted? Is there a way to fix that?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,926,2018-08-04T04:11:44Z,2018-09-04T11:56:05Z,2018-09-05T00:23:56Z,MERGED,True,32,2,1,https://github.com/MasterDuke17,JIT decoder(empty|takebytes),2,[],https://github.com/MoarVM/MoarVM/pull/926,https://github.com/timo,4,https://github.com/MoarVM/MoarVM/pull/926#issuecomment-410461395,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This gets rid of some BAILs I saw when using Compress::Zlib. However, it seemed to actually make it slightly slower (roughly from 6.4s before to 6.6s after when gzslurping a 975k file). @bdw any idea why?","either make a c function that's only meant to be called by the jit that has the ensure function at its start, or implement it in the exprjit as a template (i.e. port the ensure function to expr template language)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,927,2018-08-05T00:15:39Z,2018-08-05T06:48:38Z,2018-08-05T20:21:11Z,MERGED,True,12,24,1,https://github.com/MasterDuke17,Speedup zero_slots by using memset...,1,[],https://github.com/MoarVM/MoarVM/pull/927,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/927,"instead of looping over the array and setting each element.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This test case use Compress::Zlib; my $a = gzslurp(""100k.txt.gz""); say $a.lines.elems; say now - INIT now (where 100k.txt.gz is 2mb and decompresses to 6.8mb) used to take ~10.2s and now takes ~9.7s. Additionally, zero_slots used to be 2nd most expensive in a perf report, but now it's not even in the top 30.","instead of looping over the array and setting each element.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This test case use Compress::Zlib; my $a = gzslurp(""100k.txt.gz""); say $a.lines.elems; say now - INIT now (where 100k.txt.gz is 2mb and decompresses to 6.8mb) used to take ~10.2s and now takes ~9.7s. Additionally, zero_slots used to be 2nd most expensive in a perf report, but now it's not even in the top 30.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,928,2018-08-05T13:11:59Z,2018-08-05T14:06:09Z,2018-08-05T17:05:03Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Use correct types in find_deopt_target_and_index,1,[],https://github.com/MoarVM/MoarVM/pull/928,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/928,"The signature had MVMint32 for the deopt_target_out and deopt_index_out
parameters, but they were only ever passed MVMuint32s.
Silences clang warnings.","The signature had MVMint32 for the deopt_target_out and deopt_index_out
parameters, but they were only ever passed MVMuint32s.
Silences clang warnings.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,929,2018-08-05T16:21:16Z,2018-08-05T19:36:41Z,2018-08-05T20:20:21Z,MERGED,True,1088,799,20,https://github.com/bdw,Refactor Expression JIT to make tree manipulation easier,18,[],https://github.com/MoarVM/MoarVM/pull/929,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/929,"This introduces a number of internal changes in the expression JIT. The purpose of these changes is to make the internal representation easier to manipulate, which should help the development of the expression optimizer.

Assigning labels for branches now happens during tiling process, which allows us to assign absolute labels (since the compiler is already constructed at tiling time)
We add a new function MVM_jit_expr_apply_template_adhoc which unifies adhoc tree manipulation with template application
Small constants (up to 32 bits) and large constants (64 bits) are now treated separately. This simplifies assembly language of tiles using constants, and allows us to reduce the node size to 32 bit.
MVMJitExprNode is no longer a separate type (although we named the enum of operators MVMJitExprOperator.
We got rid of the separate MVMJitExprNodeInfo parallel-tree, which needed to be maintained separately during tree manipulation, was massively wasteful (none of the nodes corresponding to arguments or links were filled in) and cache-unfriendly.
The same informationMVMJitExprInfo node which is stored inline (next to the operator node; both are now 32 bits in size). As an additional result, there is no longer any difference in handling variadic versus nonvariadic nodes, which should make tree processing a bit faster as well.
The JIT sequence number starts at 1 so the jit-bisect.pl tool can bisect the first compiled frame.
Cast mode and operand type information has been removed from expr_ops.h into the node analysis and tree precompilation code, respectively, the only places where they are useful.
The expression template validator has stopped destructively modifying the template array (it used to insert the variadic argument length, but this now happens during template emitting)","This introduces a number of internal changes in the expression JIT. The purpose of these changes is to make the internal representation easier to manipulate, which should help the development of the expression optimizer.

Assigning labels for branches now happens during tiling process, which allows us to assign absolute labels (since the compiler is already constructed at tiling time)
We add a new function MVM_jit_expr_apply_template_adhoc which unifies adhoc tree manipulation with template application
Small constants (up to 32 bits) and large constants (64 bits) are now treated separately. This simplifies assembly language of tiles using constants, and allows us to reduce the node size to 32 bit.
MVMJitExprNode is no longer a separate type (although we named the enum of operators MVMJitExprOperator.
We got rid of the separate MVMJitExprNodeInfo parallel-tree, which needed to be maintained separately during tree manipulation, was massively wasteful (none of the nodes corresponding to arguments or links were filled in) and cache-unfriendly.
The same informationMVMJitExprInfo node which is stored inline (next to the operator node; both are now 32 bits in size). As an additional result, there is no longer any difference in handling variadic versus nonvariadic nodes, which should make tree processing a bit faster as well.
The JIT sequence number starts at 1 so the jit-bisect.pl tool can bisect the first compiled frame.
Cast mode and operand type information has been removed from expr_ops.h into the node analysis and tree precompilation code, respectively, the only places where they are useful.
The expression template validator has stopped destructively modifying the template array (it used to insert the variadic argument length, but this now happens during template emitting)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,929,2018-08-05T16:21:16Z,2018-08-05T19:36:41Z,2018-08-05T20:20:21Z,MERGED,True,1088,799,20,https://github.com/bdw,Refactor Expression JIT to make tree manipulation easier,18,[],https://github.com/MoarVM/MoarVM/pull/929,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/929#issuecomment-410533740,"This introduces a number of internal changes in the expression JIT. The purpose of these changes is to make the internal representation easier to manipulate, which should help the development of the expression optimizer.

Assigning labels for branches now happens during tiling process, which allows us to assign absolute labels (since the compiler is already constructed at tiling time)
We add a new function MVM_jit_expr_apply_template_adhoc which unifies adhoc tree manipulation with template application
Small constants (up to 32 bits) and large constants (64 bits) are now treated separately. This simplifies assembly language of tiles using constants, and allows us to reduce the node size to 32 bit.
MVMJitExprNode is no longer a separate type (although we named the enum of operators MVMJitExprOperator.
We got rid of the separate MVMJitExprNodeInfo parallel-tree, which needed to be maintained separately during tree manipulation, was massively wasteful (none of the nodes corresponding to arguments or links were filled in) and cache-unfriendly.
The same informationMVMJitExprInfo node which is stored inline (next to the operator node; both are now 32 bits in size). As an additional result, there is no longer any difference in handling variadic versus nonvariadic nodes, which should make tree processing a bit faster as well.
The JIT sequence number starts at 1 so the jit-bisect.pl tool can bisect the first compiled frame.
Cast mode and operand type information has been removed from expr_ops.h into the node analysis and tree precompilation code, respectively, the only places where they are useful.
The expression template validator has stopped destructively modifying the template array (it used to insert the variadic argument length, but this now happens during template emitting)",Looks like a very nice set of improvements. 👍,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,932,2018-08-07T16:10:41Z,,2018-09-17T06:40:35Z,OPEN,False,307,212,8,https://github.com/timo,"add speshguardgetstaticcode, for closures and such",1,[],https://github.com/MoarVM/MoarVM/pull/932,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/932,"lets a spesh plugin figure out if a given object,
such as the $!do attribute of a Code, is ""the same""
across invocations - ignoring what exactly it closes
over.
i implemented this so i could make the ""assign"" spesh
plugin in rakudo understand Proxy objects.","lets a spesh plugin figure out if a given object,
such as the $!do attribute of a Code, is ""the same""
across invocations - ignoring what exactly it closes
over.
i implemented this so i could make the ""assign"" spesh
plugin in rakudo understand Proxy objects.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,932,2018-08-07T16:10:41Z,,2018-09-17T06:40:35Z,OPEN,False,307,212,8,https://github.com/timo,"add speshguardgetstaticcode, for closures and such",1,[],https://github.com/MoarVM/MoarVM/pull/932,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/932#issuecomment-418087771,"lets a spesh plugin figure out if a given object,
such as the $!do attribute of a Code, is ""the same""
across invocations - ignoring what exactly it closes
over.
i implemented this so i could make the ""assign"" spesh
plugin in rakudo understand Proxy objects.","@timo - is this still valuable, and if so, can you resolve the conflict above?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,934,2018-08-07T20:25:07Z,2018-08-07T22:22:46Z,2018-08-07T22:22:46Z,MERGED,True,1,1,1,https://github.com/xelak6,Get the number of bytes to be processed from the current buffer and not from the header.,1,[],https://github.com/MoarVM/MoarVM/pull/934,https://github.com/xelak6,1,https://github.com/MoarVM/MoarVM/pull/934,This fixes issue #2158.,This fixes issue #2158.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,934,2018-08-07T20:25:07Z,2018-08-07T22:22:46Z,2018-08-07T22:22:46Z,MERGED,True,1,1,1,https://github.com/xelak6,Get the number of bytes to be processed from the current buffer and not from the header.,1,[],https://github.com/MoarVM/MoarVM/pull/934,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/934#issuecomment-411190868,This fixes issue #2158.,rakudo/rakudo#2158,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,935,2018-08-08T03:29:09Z,2019-05-11T12:19:59Z,2019-05-11T12:20:03Z,MERGED,True,3,6,1,https://github.com/MasterDuke17,Silence an incorrect GCC string overflow warning,1,[],https://github.com/MoarVM/MoarVM/pull/935,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/935,"The string in question is created by MVM_string_utf8_c8_encode_C_string
for the only call of this function, so we can be assured it does in fact
have a null terminator and using strlen is safe.","The string in question is created by MVM_string_utf8_c8_encode_C_string
for the only call of this function, so we can be assured it does in fact
have a null terminator and using strlen is safe.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,935,2018-08-08T03:29:09Z,2019-05-11T12:19:59Z,2019-05-11T12:20:03Z,MERGED,True,3,6,1,https://github.com/MasterDuke17,Silence an incorrect GCC string overflow warning,1,[],https://github.com/MoarVM/MoarVM/pull/935,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/935#issuecomment-489505339,"The string in question is created by MVM_string_utf8_c8_encode_C_string
for the only call of this function, so we can be assured it does in fact
have a null terminator and using strlen is safe.",Why use strncpy when you allocate the buffer based on temp_size already?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,935,2018-08-08T03:29:09Z,2019-05-11T12:19:59Z,2019-05-11T12:20:03Z,MERGED,True,3,6,1,https://github.com/MasterDuke17,Silence an incorrect GCC string overflow warning,1,[],https://github.com/MoarVM/MoarVM/pull/935,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/935#issuecomment-489588632,"The string in question is created by MVM_string_utf8_c8_encode_C_string
for the only call of this function, so we can be assured it does in fact
have a null terminator and using strlen is safe.","Why use strncpy when you allocate the buffer based on temp_size already?

@nine I'm just attempting to silence the warning, I didn't write the original code, so I couldn't say. But I guess it could be changed to just a strdup()?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,936,2018-08-08T17:02:18Z,2018-08-08T17:09:36Z,2018-08-08T17:09:46Z,MERGED,True,1,1,1,https://github.com/xelak6,Increase the result buffer size.,1,[],https://github.com/MoarVM/MoarVM/pull/936,https://github.com/xelak6,1,https://github.com/MoarVM/MoarVM/pull/936,"The last grapheme of the previous input buffer is inserted in the
current result buffer. Therefore, the result buffer needs space
for an additional grapheme when processing the last input buffer.","The last grapheme of the previous input buffer is inserted in the
current result buffer. Therefore, the result buffer needs space
for an additional grapheme when processing the last input buffer.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,936,2018-08-08T17:02:18Z,2018-08-08T17:09:36Z,2018-08-08T17:09:46Z,MERGED,True,1,1,1,https://github.com/xelak6,Increase the result buffer size.,1,[],https://github.com/MoarVM/MoarVM/pull/936,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/936#issuecomment-411481420,"The last grapheme of the previous input buffer is inserted in the
current result buffer. Therefore, the result buffer needs space
for an additional grapheme when processing the last input buffer.",👍 Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,941,2018-08-15T17:18:12Z,2018-09-03T11:33:24Z,2018-09-03T11:33:24Z,MERGED,True,46,23,9,https://github.com/bdw,Fix Spesh Memory Leaks,3,[],https://github.com/MoarVM/MoarVM/pull/941,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/941,"Spesh memory management is mostly simple except for the cases where it isn't.
We create spesh graphs in three ways:

From a spesh plan (i.e. the original bytecode)
From a spesh candidate, when inlining
From a known invocant, when we do not have a pre-existing specialization, when inlining.

When we generate a spesh candidate, we transfer ownership of allocated memory (e.g. for inlines, handlers, local type maps, spesh slots) to that candidate.
I found that we had a number of leaks coming from the third case, and that they were not straightforward to fix. The code assumed that inlinees came from spesh candidates and that the spesh candidate would therefore own the allocated memory, and not free it. But in the third case there is no spesh candidate, so those fields would leak.
I fixed this in two ways:

I made sure the inlinee graph was destroyed directly after inlining. The memory allocated by the region allocator (for the graph nodes that are merged into the inliner) is merged into the inliner region allocator.
I made sure we free all allocated fields, if and only if they are different from the ones allocated for the spesh candidate, so that we don't free those that are still in use.

Further, there is a fix for the FSA, so that the per-thread FSA freelist is cleaned up before freeing the memory of the FSA allocator as a whole.","Spesh memory management is mostly simple except for the cases where it isn't.
We create spesh graphs in three ways:

From a spesh plan (i.e. the original bytecode)
From a spesh candidate, when inlining
From a known invocant, when we do not have a pre-existing specialization, when inlining.

When we generate a spesh candidate, we transfer ownership of allocated memory (e.g. for inlines, handlers, local type maps, spesh slots) to that candidate.
I found that we had a number of leaks coming from the third case, and that they were not straightforward to fix. The code assumed that inlinees came from spesh candidates and that the spesh candidate would therefore own the allocated memory, and not free it. But in the third case there is no spesh candidate, so those fields would leak.
I fixed this in two ways:

I made sure the inlinee graph was destroyed directly after inlining. The memory allocated by the region allocator (for the graph nodes that are merged into the inliner) is merged into the inliner region allocator.
I made sure we free all allocated fields, if and only if they are different from the ones allocated for the spesh candidate, so that we don't free those that are still in use.

Further, there is a fix for the FSA, so that the per-thread FSA freelist is cleaned up before freeing the memory of the FSA allocator as a whole.",True,"{'HEART': ['https://github.com/AlexDaniel', 'https://github.com/Demayl']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,941,2018-08-15T17:18:12Z,2018-09-03T11:33:24Z,2018-09-03T11:33:24Z,MERGED,True,46,23,9,https://github.com/bdw,Fix Spesh Memory Leaks,3,[],https://github.com/MoarVM/MoarVM/pull/941,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/941#issuecomment-413270179,"Spesh memory management is mostly simple except for the cases where it isn't.
We create spesh graphs in three ways:

From a spesh plan (i.e. the original bytecode)
From a spesh candidate, when inlining
From a known invocant, when we do not have a pre-existing specialization, when inlining.

When we generate a spesh candidate, we transfer ownership of allocated memory (e.g. for inlines, handlers, local type maps, spesh slots) to that candidate.
I found that we had a number of leaks coming from the third case, and that they were not straightforward to fix. The code assumed that inlinees came from spesh candidates and that the spesh candidate would therefore own the allocated memory, and not free it. But in the third case there is no spesh candidate, so those fields would leak.
I fixed this in two ways:

I made sure the inlinee graph was destroyed directly after inlining. The memory allocated by the region allocator (for the graph nodes that are merged into the inliner) is merged into the inliner region allocator.
I made sure we free all allocated fields, if and only if they are different from the ones allocated for the spesh candidate, so that we don't free those that are still in use.

Further, there is a fix for the FSA, so that the per-thread FSA freelist is cleaned up before freeing the memory of the FSA allocator as a whole.","Not sure how I feel about this in terms of the upcoming release. Less memory leaks is nice, but current moar+nqp+rakudo seems to be very stable and ready for the release. Merging this after the release sounds much safer to me, but I'd let @jnthn++ judge (I'll likely run toaster again a bit later, so we still have a chance to sneak some stuff in).",True,{'THUMBS_UP': ['https://github.com/zoffixznet']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,941,2018-08-15T17:18:12Z,2018-09-03T11:33:24Z,2018-09-03T11:33:24Z,MERGED,True,46,23,9,https://github.com/bdw,Fix Spesh Memory Leaks,3,[],https://github.com/MoarVM/MoarVM/pull/941,https://github.com/coke,3,https://github.com/MoarVM/MoarVM/pull/941#issuecomment-413273312,"Spesh memory management is mostly simple except for the cases where it isn't.
We create spesh graphs in three ways:

From a spesh plan (i.e. the original bytecode)
From a spesh candidate, when inlining
From a known invocant, when we do not have a pre-existing specialization, when inlining.

When we generate a spesh candidate, we transfer ownership of allocated memory (e.g. for inlines, handlers, local type maps, spesh slots) to that candidate.
I found that we had a number of leaks coming from the third case, and that they were not straightforward to fix. The code assumed that inlinees came from spesh candidates and that the spesh candidate would therefore own the allocated memory, and not free it. But in the third case there is no spesh candidate, so those fields would leak.
I fixed this in two ways:

I made sure the inlinee graph was destroyed directly after inlining. The memory allocated by the region allocator (for the graph nodes that are merged into the inliner) is merged into the inliner region allocator.
I made sure we free all allocated fields, if and only if they are different from the ones allocated for the spesh candidate, so that we don't free those that are still in use.

Further, there is a fix for the FSA, so that the per-thread FSA freelist is cleaned up before freeing the memory of the FSA allocator as a whole.",+1 for post-release merge.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,941,2018-08-15T17:18:12Z,2018-09-03T11:33:24Z,2018-09-03T11:33:24Z,MERGED,True,46,23,9,https://github.com/bdw,Fix Spesh Memory Leaks,3,[],https://github.com/MoarVM/MoarVM/pull/941,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/941#issuecomment-413298314,"Spesh memory management is mostly simple except for the cases where it isn't.
We create spesh graphs in three ways:

From a spesh plan (i.e. the original bytecode)
From a spesh candidate, when inlining
From a known invocant, when we do not have a pre-existing specialization, when inlining.

When we generate a spesh candidate, we transfer ownership of allocated memory (e.g. for inlines, handlers, local type maps, spesh slots) to that candidate.
I found that we had a number of leaks coming from the third case, and that they were not straightforward to fix. The code assumed that inlinees came from spesh candidates and that the spesh candidate would therefore own the allocated memory, and not free it. But in the third case there is no spesh candidate, so those fields would leak.
I fixed this in two ways:

I made sure the inlinee graph was destroyed directly after inlining. The memory allocated by the region allocator (for the graph nodes that are merged into the inliner) is merged into the inliner region allocator.
I made sure we free all allocated fields, if and only if they are different from the ones allocated for the spesh candidate, so that we don't free those that are still in use.

Further, there is a fix for the FSA, so that the per-thread FSA freelist is cleaned up before freeing the memory of the FSA allocator as a whole.","This looks good, but I agree it's probably most sensible to hold off until after the release, given it's not so trivial a change that I can say ""this can't possibly be wrong"". :-)
I have a couple of fixes that are in the same boat, fwiw: they fix deopt bugs that could theoretically occur on master (even if I didn't ever observe that happening), but are involved enough to carry a small risk of bringing their own issue. I'm happy to lean towards ""devil we know"" for both those fixes and this PR.",True,{'THUMBS_UP': ['https://github.com/AlexDaniel']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,941,2018-08-15T17:18:12Z,2018-09-03T11:33:24Z,2018-09-03T11:33:24Z,MERGED,True,46,23,9,https://github.com/bdw,Fix Spesh Memory Leaks,3,[],https://github.com/MoarVM/MoarVM/pull/941,https://github.com/bdw,5,https://github.com/MoarVM/MoarVM/pull/941#issuecomment-413312933,"Spesh memory management is mostly simple except for the cases where it isn't.
We create spesh graphs in three ways:

From a spesh plan (i.e. the original bytecode)
From a spesh candidate, when inlining
From a known invocant, when we do not have a pre-existing specialization, when inlining.

When we generate a spesh candidate, we transfer ownership of allocated memory (e.g. for inlines, handlers, local type maps, spesh slots) to that candidate.
I found that we had a number of leaks coming from the third case, and that they were not straightforward to fix. The code assumed that inlinees came from spesh candidates and that the spesh candidate would therefore own the allocated memory, and not free it. But in the third case there is no spesh candidate, so those fields would leak.
I fixed this in two ways:

I made sure the inlinee graph was destroyed directly after inlining. The memory allocated by the region allocator (for the graph nodes that are merged into the inliner) is merged into the inliner region allocator.
I made sure we free all allocated fields, if and only if they are different from the ones allocated for the spesh candidate, so that we don't free those that are still in use.

Further, there is a fix for the FSA, so that the per-thread FSA freelist is cleaned up before freeing the memory of the FSA allocator as a whole.","Thank you for the review. I will merge after the release.
Maybe for the future, it is better to have an (explicitly stable) pre-release branch than to lock development on master for an indefinite time.",True,{'HEART': ['https://github.com/zoffixznet']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,941,2018-08-15T17:18:12Z,2018-09-03T11:33:24Z,2018-09-03T11:33:24Z,MERGED,True,46,23,9,https://github.com/bdw,Fix Spesh Memory Leaks,3,[],https://github.com/MoarVM/MoarVM/pull/941,https://github.com/AlexDaniel,6,https://github.com/MoarVM/MoarVM/pull/941#issuecomment-413324950,"Spesh memory management is mostly simple except for the cases where it isn't.
We create spesh graphs in three ways:

From a spesh plan (i.e. the original bytecode)
From a spesh candidate, when inlining
From a known invocant, when we do not have a pre-existing specialization, when inlining.

When we generate a spesh candidate, we transfer ownership of allocated memory (e.g. for inlines, handlers, local type maps, spesh slots) to that candidate.
I found that we had a number of leaks coming from the third case, and that they were not straightforward to fix. The code assumed that inlinees came from spesh candidates and that the spesh candidate would therefore own the allocated memory, and not free it. But in the third case there is no spesh candidate, so those fields would leak.
I fixed this in two ways:

I made sure the inlinee graph was destroyed directly after inlining. The memory allocated by the region allocator (for the graph nodes that are merged into the inliner) is merged into the inliner region allocator.
I made sure we free all allocated fields, if and only if they are different from the ones allocated for the spesh candidate, so that we don't free those that are still in use.

Further, there is a fix for the FSA, so that the per-thread FSA freelist is cleaned up before freeing the memory of the FSA allocator as a whole.",@bdw there is a post-release branch https://github.com/MoarVM/MoarVM/tree/postrelease-opts and you can merge this PR there.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,941,2018-08-15T17:18:12Z,2018-09-03T11:33:24Z,2018-09-03T11:33:24Z,MERGED,True,46,23,9,https://github.com/bdw,Fix Spesh Memory Leaks,3,[],https://github.com/MoarVM/MoarVM/pull/941,https://github.com/bdw,7,https://github.com/MoarVM/MoarVM/pull/941#issuecomment-413510725,"Spesh memory management is mostly simple except for the cases where it isn't.
We create spesh graphs in three ways:

From a spesh plan (i.e. the original bytecode)
From a spesh candidate, when inlining
From a known invocant, when we do not have a pre-existing specialization, when inlining.

When we generate a spesh candidate, we transfer ownership of allocated memory (e.g. for inlines, handlers, local type maps, spesh slots) to that candidate.
I found that we had a number of leaks coming from the third case, and that they were not straightforward to fix. The code assumed that inlinees came from spesh candidates and that the spesh candidate would therefore own the allocated memory, and not free it. But in the third case there is no spesh candidate, so those fields would leak.
I fixed this in two ways:

I made sure the inlinee graph was destroyed directly after inlining. The memory allocated by the region allocator (for the graph nodes that are merged into the inliner) is merged into the inliner region allocator.
I made sure we free all allocated fields, if and only if they are different from the ones allocated for the spesh candidate, so that we don't free those that are still in use.

Further, there is a fix for the FSA, so that the per-thread FSA freelist is cleaned up before freeing the memory of the FSA allocator as a whole.","That is literally the opposite of what I meant 😄
Either way, there is clear need for a branch that is 'open for development', and one that is stable for release.
So whether we call the one master and the other release, or the first 'postrelease' or 'development', and the second 'master', matters not very much, but we should probably do something for it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,942,2018-08-18T19:05:45Z,,2018-08-18T23:43:29Z,OPEN,False,4,1,1,https://github.com/jstuder-gh,Improve exception msg for slice op on VMArray,1,[],https://github.com/MoarVM/MoarVM/pull/942,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/942,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,944,2018-08-19T20:37:12Z,2018-08-20T07:29:13Z,2022-02-09T20:52:56Z,MERGED,True,8,22,2,https://github.com/bdw,[JIT] Use reference counting for maintaining multiple code copies,1,[],https://github.com/MoarVM/MoarVM/pull/944,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/944,"We take some care to make executable memory read/executable, so they are
mmap()'d. The copied' frames would have malloc()'d memory. It is
probably better to treat them as shared resources and use reference
counting to decide when to actually destroy them.
This may be the fix to some bugs, and it may not (JIT code copy and destruction both ought to be rare).","We take some care to make executable memory read/executable, so they are
mmap()'d. The copied' frames would have malloc()'d memory. It is
probably better to treat them as shared resources and use reference
counting to decide when to actually destroy them.
This may be the fix to some bugs, and it may not (JIT code copy and destruction both ought to be rare).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,944,2018-08-19T20:37:12Z,2018-08-20T07:29:13Z,2022-02-09T20:52:56Z,MERGED,True,8,22,2,https://github.com/bdw,[JIT] Use reference counting for maintaining multiple code copies,1,[],https://github.com/MoarVM/MoarVM/pull/944,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/944#issuecomment-414160110,"We take some care to make executable memory read/executable, so they are
mmap()'d. The copied' frames would have malloc()'d memory. It is
probably better to treat them as shared resources and use reference
counting to decide when to actually destroy them.
This may be the fix to some bugs, and it may not (JIT code copy and destruction both ought to be rare).","Looks sane to me, though @niner can probably do a better review, having been in that bit of the code recently.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,945,2018-08-21T02:18:12Z,2018-08-23T09:17:35Z,2018-08-23T09:17:40Z,MERGED,True,3,1,1,https://github.com/jstuder-gh,Workaround version failure on Travis CI (MacOS),2,[],https://github.com/MoarVM/MoarVM/pull/945,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/945,"Travis doesn't fetch the full history (only 50 commits by default) and
we use git fetch --unshallow to retrieve the rest. This is necessary
to retrieve the tags used in versioning MoarVM. That process does not
appear to be working on MacOS currently.
Explicitly fetch the full history in order to work around this defect.
See this thread
for more information.
I don't really know if this works or not without submitting the PR and
letting Travis do it's thing :P","Travis doesn't fetch the full history (only 50 commits by default) and
we use git fetch --unshallow to retrieve the rest. This is necessary
to retrieve the tags used in versioning MoarVM. That process does not
appear to be working on MacOS currently.
Explicitly fetch the full history in order to work around this defect.
See this thread
for more information.
I don't really know if this works or not without submitting the PR and
letting Travis do it's thing :P",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,945,2018-08-21T02:18:12Z,2018-08-23T09:17:35Z,2018-08-23T09:17:40Z,MERGED,True,3,1,1,https://github.com/jstuder-gh,Workaround version failure on Travis CI (MacOS),2,[],https://github.com/MoarVM/MoarVM/pull/945,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/945#issuecomment-415241942,"Travis doesn't fetch the full history (only 50 commits by default) and
we use git fetch --unshallow to retrieve the rest. This is necessary
to retrieve the tags used in versioning MoarVM. That process does not
appear to be working on MacOS currently.
Explicitly fetch the full history in order to work around this defect.
See this thread
for more information.
I don't really know if this works or not without submitting the PR and
letting Travis do it's thing :P",👍,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,945,2018-08-21T02:18:12Z,2018-08-23T09:17:35Z,2018-08-23T09:17:40Z,MERGED,True,3,1,1,https://github.com/jstuder-gh,Workaround version failure on Travis CI (MacOS),2,[],https://github.com/MoarVM/MoarVM/pull/945,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/945#issuecomment-415349391,"Travis doesn't fetch the full history (only 50 commits by default) and
we use git fetch --unshallow to retrieve the rest. This is necessary
to retrieve the tags used in versioning MoarVM. That process does not
appear to be working on MacOS currently.
Explicitly fetch the full history in order to work around this defect.
See this thread
for more information.
I don't really know if this works or not without submitting the PR and
letting Travis do it's thing :P",Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,946,2018-08-21T05:10:14Z,2018-09-04T11:50:34Z,2018-09-04T11:50:34Z,MERGED,True,75,0,1,https://github.com/jstuder-gh,A few more exprjit templates (08/14/18),6,[],https://github.com/MoarVM/MoarVM/pull/946,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/946,+9 new templates,+9 new templates,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,947,2018-08-21T16:04:31Z,2018-09-12T09:52:29Z,2018-09-12T09:52:29Z,CLOSED,False,290,212,9,https://github.com/pmurias,Add decodelocaltime op,4,[],https://github.com/MoarVM/MoarVM/pull/947,https://github.com/pmurias,1,https://github.com/MoarVM/MoarVM/pull/947,"Will help us remove nqp::p6decodelocaltime.
Not tested on windows as I don't have a dev env set up on it :(","Will help us remove nqp::p6decodelocaltime.
Not tested on windows as I don't have a dev env set up on it :(",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,947,2018-08-21T16:04:31Z,2018-09-12T09:52:29Z,2018-09-12T09:52:29Z,CLOSED,False,290,212,9,https://github.com/pmurias,Add decodelocaltime op,4,[],https://github.com/MoarVM/MoarVM/pull/947,https://github.com/pmurias,2,https://github.com/MoarVM/MoarVM/pull/947#issuecomment-420585596,"Will help us remove nqp::p6decodelocaltime.
Not tested on windows as I don't have a dev env set up on it :(",I fixed the localtime_s use. I don't use windows so I haven't tested the fix :(,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,948,2018-08-22T22:24:38Z,2018-09-04T11:51:12Z,2018-09-04T11:51:12Z,MERGED,True,2,2,2,https://github.com/ugexe,Update libuv to 1.23.0,2,[],https://github.com/MoarVM/MoarVM/pull/948,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/948,"Many windows bugfixes -- notably ""win,pipe: fix IPC pipe deadlock""
https://github.com/libuv/libuv/blob/90891b4232e91dbd7a2e2077e4d23d16a374b41d/ChangeLog#L3-L255","Many windows bugfixes -- notably ""win,pipe: fix IPC pipe deadlock""
https://github.com/libuv/libuv/blob/90891b4232e91dbd7a2e2077e4d23d16a374b41d/ChangeLog#L3-L255",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,948,2018-08-22T22:24:38Z,2018-09-04T11:51:12Z,2018-09-04T11:51:12Z,MERGED,True,2,2,2,https://github.com/ugexe,Update libuv to 1.23.0,2,[],https://github.com/MoarVM/MoarVM/pull/948,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/948#issuecomment-415349560,"Many windows bugfixes -- notably ""win,pipe: fix IPC pipe deadlock""
https://github.com/libuv/libuv/blob/90891b4232e91dbd7a2e2077e4d23d16a374b41d/ChangeLog#L3-L255","Will merge this after the upcoming release, so it gets proper testing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,949,2018-08-24T01:26:34Z,2018-09-25T01:47:51Z,2018-09-26T23:31:03Z,CLOSED,False,1104,572,36,https://github.com/MasterDuke17,Cleanup *_I ops,26,[],https://github.com/MoarVM/MoarVM/pull/949,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/949,"Make the ops in interp.c more consistent, and convert expmod_I to allocate in the function like the other *_I ops do.
NQP builds ok and passe make m-test and Rakudo builds ok and passes make m-test m-spectest.","Make the ops in interp.c more consistent, and convert expmod_I to allocate in the function like the other *_I ops do.
NQP builds ok and passe make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,949,2018-08-24T01:26:34Z,2018-09-25T01:47:51Z,2018-09-26T23:31:03Z,CLOSED,False,1104,572,36,https://github.com/MasterDuke17,Cleanup *_I ops,26,[],https://github.com/MoarVM/MoarVM/pull/949,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/949#issuecomment-424180337,"Make the ops in interp.c more consistent, and convert expmod_I to allocate in the function like the other *_I ops do.
NQP builds ok and passe make m-test and Rakudo builds ok and passes make m-test m-spectest.",Closing this in favor of the cleaner #970.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,950,2018-08-31T13:23:35Z,2018-09-04T10:45:43Z,2018-09-04T10:45:44Z,MERGED,True,462,331,5,https://github.com/bdw,[JIT] New template compiler,4,[],https://github.com/MoarVM/MoarVM/pull/950,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/950,"Single-pass compilation (no separate 'validate_template' step
Better type and format checking (operands should be expressions or references, parameters should be barewords, numbers or macros)
Write-out parameters need to be refered with a \$ sigil, like \$0, and templates without output operands should not get a '!' suffix

Already caught a few issues this way.","Single-pass compilation (no separate 'validate_template' step
Better type and format checking (operands should be expressions or references, parameters should be barewords, numbers or macros)
Write-out parameters need to be refered with a \$ sigil, like \$0, and templates without output operands should not get a '!' suffix

Already caught a few issues this way.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,950,2018-08-31T13:23:35Z,2018-09-04T10:45:43Z,2018-09-04T10:45:44Z,MERGED,True,462,331,5,https://github.com/bdw,[JIT] New template compiler,4,[],https://github.com/MoarVM/MoarVM/pull/950,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/950#issuecomment-418310528,"Single-pass compilation (no separate 'validate_template' step
Better type and format checking (operands should be expressions or references, parameters should be barewords, numbers or macros)
Write-out parameters need to be refered with a \$ sigil, like \$0, and templates without output operands should not get a '!' suffix

Already caught a few issues this way.","Also added hygienic macros by eager resolution of let: declarations, e.g. the following ought to work, even though it is nonsense:
(macro: ^foo (,bar) (let: (($obj (load ,bar ptr_sz))) (addr $obj ,bar))
(template: foobar (let: (($obj (load $1 ptr_sz))) (^foo $obj))

I.e. the $obj in the macro ^foo refers only to the declaration within the macro, not to the declaration in the template; and the ,bar substitution in the application of ^foo correctly refers to the declaration of $obj in the outer let:.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,952,2018-09-04T22:04:56Z,2018-09-05T06:14:41Z,2018-09-05T06:14:41Z,MERGED,True,11,11,2,https://github.com/ugexe,Fix sprintf formatting for the debugserver port,1,[],https://github.com/MoarVM/MoarVM/pull/952,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/952,"Fixes clang warnings such as ""format specifies type 'unsigned long'
but the argument has type 'MVMuint64' (aka 'unsigned long long')""
See: https://travis-ci.org/rakudo/rakudo/jobs/424479274#L228","Fixes clang warnings such as ""format specifies type 'unsigned long'
but the argument has type 'MVMuint64' (aka 'unsigned long long')""
See: https://travis-ci.org/rakudo/rakudo/jobs/424479274#L228",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,953,2018-09-05T04:44:02Z,2018-09-07T17:29:50Z,2018-09-07T20:05:17Z,MERGED,True,47,0,2,https://github.com/MasterDuke17,Add a macro for decoder_ensure_decoder and ...,1,[],https://github.com/MoarVM/MoarVM/pull/953,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/953,"templates for decoder<addbytes takebytes takeline empty>.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","templates for decoder<addbytes takebytes takeline empty>.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,953,2018-09-05T04:44:02Z,2018-09-07T17:29:50Z,2018-09-07T20:05:17Z,MERGED,True,47,0,2,https://github.com/MasterDuke17,Add a macro for decoder_ensure_decoder and ...,1,[],https://github.com/MoarVM/MoarVM/pull/953,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/953#issuecomment-419543787,"templates for decoder<addbytes takebytes takeline empty>.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Shouldn't spesh be able to ensure that the prerequisites are actually met, so we don't even need the code to throw an exception in JITed code?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,953,2018-09-05T04:44:02Z,2018-09-07T17:29:50Z,2018-09-07T20:05:17Z,MERGED,True,47,0,2,https://github.com/MasterDuke17,Add a macro for decoder_ensure_decoder and ...,1,[],https://github.com/MoarVM/MoarVM/pull/953,https://github.com/bdw,3,https://github.com/MoarVM/MoarVM/pull/953#issuecomment-419551372,"templates for decoder<addbytes takebytes takeline empty>.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Yes, in many cases it ought to... and so repr id check elimination is on the roadmap for the expression optimizer. I'm not quite sure how I'd do it, though....",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,954,2018-09-05T20:18:37Z,2018-09-07T18:02:52Z,2018-09-07T18:02:52Z,MERGED,True,79,8,7,https://github.com/jstuder-gh,Implement 'cast_load_addr' tile for exprjit ,4,[],https://github.com/MoarVM/MoarVM/pull/954,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/954,"Implement the 'cast_load_addr' tile for the exprjit template.
Logic mirrors that of the standard cast operation.
Also adds a template that uses the new tile and a macro for storage_spec.
Compiles and passes spectest, but definitely could use review. ping @bdw.","Implement the 'cast_load_addr' tile for the exprjit template.
Logic mirrors that of the standard cast operation.
Also adds a template that uses the new tile and a macro for storage_spec.
Compiles and passes spectest, but definitely could use review. ping @bdw.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,954,2018-09-05T20:18:37Z,2018-09-07T18:02:52Z,2018-09-07T18:02:52Z,MERGED,True,79,8,7,https://github.com/jstuder-gh,Implement 'cast_load_addr' tile for exprjit ,4,[],https://github.com/MoarVM/MoarVM/pull/954,https://github.com/jstuder-gh,2,https://github.com/MoarVM/MoarVM/pull/954#issuecomment-419178783,"Implement the 'cast_load_addr' tile for the exprjit template.
Logic mirrors that of the standard cast operation.
Also adds a template that uses the new tile and a macro for storage_spec.
Compiles and passes spectest, but definitely could use review. ping @bdw.","@bdw, thanks for the review! I've added another commit extending the size of the args array to 6.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,959,2018-09-11T03:02:43Z,2018-09-11T10:21:23Z,2018-09-11T10:21:23Z,MERGED,True,88,1,2,https://github.com/jstuder-gh,More exprjit templates (09/05/18),7,[],https://github.com/MoarVM/MoarVM/pull/959,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/959,"+14 new templates
+1 macro","+14 new templates
+1 macro",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,961,2018-09-13T11:56:53Z,2018-09-13T12:13:36Z,2018-09-13T12:13:36Z,MERGED,True,4,1,2,https://github.com/robertlemmen,Fix alignment of nursery allocations,1,[],https://github.com/MoarVM/MoarVM/pull/961,https://github.com/robertlemmen,1,https://github.com/MoarVM/MoarVM/pull/961,"Recent changes used a path to nursery allocation that are not aligned,
leading to segfaults on e.g. armhf. Alignment is really a property of
the nursery as it is also encoded in the collector, so doing the
alignment within the allocator, not at the call site.
Fixes #951","Recent changes used a path to nursery allocation that are not aligned,
leading to segfaults on e.g. armhf. Alignment is really a property of
the nursery as it is also encoded in the collector, so doing the
alignment within the allocator, not at the call site.
Fixes #951",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,963,2018-09-14T04:55:16Z,2018-09-14T11:54:02Z,2018-09-14T11:54:02Z,MERGED,True,107,95,5,https://github.com/jstuder-gh,Exprjit: Macros & Alterations,4,[],https://github.com/MoarVM/MoarVM/pull/963,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/963,"Implements a few macros and alterations.
Also changes signature for and args passed to
MVM_frame_bind_lexical_by_name to better
accomodate the exprjit.","Implements a few macros and alterations.
Also changes signature for and args passed to
MVM_frame_bind_lexical_by_name to better
accomodate the exprjit.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,964,2018-09-15T03:35:12Z,2018-09-15T07:36:04Z,2018-09-15T07:36:04Z,MERGED,True,13,9,2,https://github.com/jstuder-gh,Fix wrong field in exprjit cast template and add macro,1,[],https://github.com/MoarVM/MoarVM/pull/964,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/964,"In the 'objprimbits' template, accidently used the wrong field name for
cast's from_size value ('boxed_primitive' instead of 'bits').
In this case, 'boxed_primitive' and 'bits' are both the same size, but
that doesn't make it less wrong just less painfully wrong 😉.
Added a macro that makes this idiom more DRY and less prone to this type
of error.","In the 'objprimbits' template, accidently used the wrong field name for
cast's from_size value ('boxed_primitive' instead of 'bits').
In this case, 'boxed_primitive' and 'bits' are both the same size, but
that doesn't make it less wrong just less painfully wrong 😉.
Added a macro that makes this idiom more DRY and less prone to this type
of error.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,964,2018-09-15T03:35:12Z,2018-09-15T07:36:04Z,2018-09-15T07:36:04Z,MERGED,True,13,9,2,https://github.com/jstuder-gh,Fix wrong field in exprjit cast template and add macro,1,[],https://github.com/MoarVM/MoarVM/pull/964,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/964#issuecomment-421536957,"In the 'objprimbits' template, accidently used the wrong field name for
cast's from_size value ('boxed_primitive' instead of 'bits').
In this case, 'boxed_primitive' and 'bits' are both the same size, but
that doesn't make it less wrong just less painfully wrong 😉.
Added a macro that makes this idiom more DRY and less prone to this type
of error.",Awesome 👍,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,967,2018-09-16T19:53:55Z,2018-09-24T18:04:25Z,2022-02-09T20:52:32Z,MERGED,True,722,436,25,https://github.com/bdw,Safe fork in MoarVM,12,[],https://github.com/MoarVM/MoarVM/pull/967,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/967,"The fork() system call poses problems for multithreaded programs such as MoarVM, on account that there is only one thread that is inherited by the child process, and that the other threads in the parent process might be modifying heap memory (e.g. processing malloc) while the fork() call occured. So having multiple threads while forking might leave the child process in an inconsistent state.
Fortunately, we have some degree of control over the threads started by the VM itself, meaning we can try to stop them (and temporarily become a single-threaded process) prior to the call to fork(), and reinstall them afterwards.
As a nice side effect, this also means that we can shut down the spesh and IO threads before exit (in --full_cleanup mode), which means that this crashes only sometimes rather than always.
This means, though, that the state used by the system threads (IO eventloop and spesh worker) must become attached to the VM instance, and that we must be able to send effective stop signals. The eventloop thread provides a convenient means by the uv_loop_stop call and a uv_async_send wakeup. The spesh worker will now recognize VMNull on the work queue as a stop signal. To ensure that this signal is processed speedily, I implemented an unshift operation on the MVMConcBlockingQueue REPR.
Other changes are:

the IO eventloop now uses a per-MVMInstance uv_loop_t structure, rather than the default per-threadcontext structure. Since we now only use the per-thread loop for synchronous file system operations, we might get rid of it entirely.

I had to fix several bugs in clients of the eventloop to use the correct (passed in) uv_loop_t structure, rather than the redundant one assigned to the threadcontext.


The entire MVMConcBlockingQueueBody structure is now malloc'd, rather than jsut the locks sections; this significantly simplifies code.
The spesh worker thread is now published as an MVMInstance variable. No attempt is made to protect it, but it is started when the process is single-threaded (or holding a mutex)

Whether this has more practical value than hack value is open for debate 😄 - but at least the non-crashing full-cleanup should be welcome.","The fork() system call poses problems for multithreaded programs such as MoarVM, on account that there is only one thread that is inherited by the child process, and that the other threads in the parent process might be modifying heap memory (e.g. processing malloc) while the fork() call occured. So having multiple threads while forking might leave the child process in an inconsistent state.
Fortunately, we have some degree of control over the threads started by the VM itself, meaning we can try to stop them (and temporarily become a single-threaded process) prior to the call to fork(), and reinstall them afterwards.
As a nice side effect, this also means that we can shut down the spesh and IO threads before exit (in --full_cleanup mode), which means that this crashes only sometimes rather than always.
This means, though, that the state used by the system threads (IO eventloop and spesh worker) must become attached to the VM instance, and that we must be able to send effective stop signals. The eventloop thread provides a convenient means by the uv_loop_stop call and a uv_async_send wakeup. The spesh worker will now recognize VMNull on the work queue as a stop signal. To ensure that this signal is processed speedily, I implemented an unshift operation on the MVMConcBlockingQueue REPR.
Other changes are:

the IO eventloop now uses a per-MVMInstance uv_loop_t structure, rather than the default per-threadcontext structure. Since we now only use the per-thread loop for synchronous file system operations, we might get rid of it entirely.

I had to fix several bugs in clients of the eventloop to use the correct (passed in) uv_loop_t structure, rather than the redundant one assigned to the threadcontext.


The entire MVMConcBlockingQueueBody structure is now malloc'd, rather than jsut the locks sections; this significantly simplifies code.
The spesh worker thread is now published as an MVMInstance variable. No attempt is made to protect it, but it is started when the process is single-threaded (or holding a mutex)

Whether this has more practical value than hack value is open for debate 😄 - but at least the non-crashing full-cleanup should be welcome.",True,{'HOORAY': ['https://github.com/MasterDuke17']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,967,2018-09-16T19:53:55Z,2018-09-24T18:04:25Z,2022-02-09T20:52:32Z,MERGED,True,722,436,25,https://github.com/bdw,Safe fork in MoarVM,12,[],https://github.com/MoarVM/MoarVM/pull/967,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/967#issuecomment-421857061,"The fork() system call poses problems for multithreaded programs such as MoarVM, on account that there is only one thread that is inherited by the child process, and that the other threads in the parent process might be modifying heap memory (e.g. processing malloc) while the fork() call occured. So having multiple threads while forking might leave the child process in an inconsistent state.
Fortunately, we have some degree of control over the threads started by the VM itself, meaning we can try to stop them (and temporarily become a single-threaded process) prior to the call to fork(), and reinstall them afterwards.
As a nice side effect, this also means that we can shut down the spesh and IO threads before exit (in --full_cleanup mode), which means that this crashes only sometimes rather than always.
This means, though, that the state used by the system threads (IO eventloop and spesh worker) must become attached to the VM instance, and that we must be able to send effective stop signals. The eventloop thread provides a convenient means by the uv_loop_stop call and a uv_async_send wakeup. The spesh worker will now recognize VMNull on the work queue as a stop signal. To ensure that this signal is processed speedily, I implemented an unshift operation on the MVMConcBlockingQueue REPR.
Other changes are:

the IO eventloop now uses a per-MVMInstance uv_loop_t structure, rather than the default per-threadcontext structure. Since we now only use the per-thread loop for synchronous file system operations, we might get rid of it entirely.

I had to fix several bugs in clients of the eventloop to use the correct (passed in) uv_loop_t structure, rather than the redundant one assigned to the threadcontext.


The entire MVMConcBlockingQueueBody structure is now malloc'd, rather than jsut the locks sections; this significantly simplifies code.
The spesh worker thread is now published as an MVMInstance variable. No attempt is made to protect it, but it is started when the process is single-threaded (or holding a mutex)

Whether this has more practical value than hack value is open for debate 😄 - but at least the non-crashing full-cleanup should be welcome.",Does this avoid the need for http://docs.libuv.org/en/v1.x/loop.html#c.uv_loop_fork ?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,967,2018-09-16T19:53:55Z,2018-09-24T18:04:25Z,2022-02-09T20:52:32Z,MERGED,True,722,436,25,https://github.com/bdw,Safe fork in MoarVM,12,[],https://github.com/MoarVM/MoarVM/pull/967,https://github.com/bdw,3,https://github.com/MoarVM/MoarVM/pull/967#issuecomment-421894036,"The fork() system call poses problems for multithreaded programs such as MoarVM, on account that there is only one thread that is inherited by the child process, and that the other threads in the parent process might be modifying heap memory (e.g. processing malloc) while the fork() call occured. So having multiple threads while forking might leave the child process in an inconsistent state.
Fortunately, we have some degree of control over the threads started by the VM itself, meaning we can try to stop them (and temporarily become a single-threaded process) prior to the call to fork(), and reinstall them afterwards.
As a nice side effect, this also means that we can shut down the spesh and IO threads before exit (in --full_cleanup mode), which means that this crashes only sometimes rather than always.
This means, though, that the state used by the system threads (IO eventloop and spesh worker) must become attached to the VM instance, and that we must be able to send effective stop signals. The eventloop thread provides a convenient means by the uv_loop_stop call and a uv_async_send wakeup. The spesh worker will now recognize VMNull on the work queue as a stop signal. To ensure that this signal is processed speedily, I implemented an unshift operation on the MVMConcBlockingQueue REPR.
Other changes are:

the IO eventloop now uses a per-MVMInstance uv_loop_t structure, rather than the default per-threadcontext structure. Since we now only use the per-thread loop for synchronous file system operations, we might get rid of it entirely.

I had to fix several bugs in clients of the eventloop to use the correct (passed in) uv_loop_t structure, rather than the redundant one assigned to the threadcontext.


The entire MVMConcBlockingQueueBody structure is now malloc'd, rather than jsut the locks sections; this significantly simplifies code.
The spesh worker thread is now published as an MVMInstance variable. No attempt is made to protect it, but it is started when the process is single-threaded (or holding a mutex)

Whether this has more practical value than hack value is open for debate 😄 - but at least the non-crashing full-cleanup should be welcome.","Actually, that's a good question. I think that is still necessary, yes.",True,{'THUMBS_UP': ['https://github.com/ugexe']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,969,2018-09-24T10:10:42Z,2018-09-24T14:19:21Z,2018-09-24T14:19:21Z,MERGED,True,2022,456,43,https://github.com/bdw,Postrelease opts,68,[],https://github.com/MoarVM/MoarVM/pull/969,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/969,Optimizations and stuff,Optimizations and stuff,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,970,2018-09-25T01:47:05Z,2018-09-26T23:28:25Z,2018-09-26T23:31:03Z,MERGED,True,48,46,4,https://github.com/MasterDuke17,Cleanup _I ops,2,[],https://github.com/MoarVM/MoarVM/pull/970,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/970,"Make the ops in interp.c more consistent, and convert expmod_I to allocate in the function like the other *_I ops do.
NQP builds ok and passe make m-test and Rakudo builds ok and passes make m-test m-spectest.","Make the ops in interp.c more consistent, and convert expmod_I to allocate in the function like the other *_I ops do.
NQP builds ok and passe make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,970,2018-09-25T01:47:05Z,2018-09-26T23:28:25Z,2018-09-26T23:31:03Z,MERGED,True,48,46,4,https://github.com/MasterDuke17,Cleanup _I ops,2,[],https://github.com/MoarVM/MoarVM/pull/970,https://github.com/timo,2,https://github.com/MoarVM/MoarVM/pull/970#issuecomment-424903420,"Make the ops in interp.c more consistent, and convert expmod_I to allocate in the function like the other *_I ops do.
NQP builds ok and passe make m-test and Rakudo builds ok and passes make m-test m-spectest.","good work, thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,972,2018-09-27T14:43:45Z,2018-09-30T11:14:40Z,2018-09-30T11:14:40Z,MERGED,True,247,250,19,https://github.com/bdw,Remove JIT log file,12,[],https://github.com/MoarVM/MoarVM/pull/972,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/972,"Using the new spesh graph comments, let's get rid of the adhoc JIT log.","Using the new spesh graph comments, let's get rid of the adhoc JIT log.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,972,2018-09-27T14:43:45Z,2018-09-30T11:14:40Z,2018-09-30T11:14:40Z,MERGED,True,247,250,19,https://github.com/bdw,Remove JIT log file,12,[],https://github.com/MoarVM/MoarVM/pull/972,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/972#issuecomment-425140223,"Using the new spesh graph comments, let's get rid of the adhoc JIT log.","So, how would one find out which blocks are not getting JITted?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,972,2018-09-27T14:43:45Z,2018-09-30T11:14:40Z,2018-09-30T11:14:40Z,MERGED,True,247,250,19,https://github.com/bdw,Remove JIT log file,12,[],https://github.com/MoarVM/MoarVM/pull/972,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/972#issuecomment-425143775,"Using the new spesh graph comments, let's get rid of the adhoc JIT log.",@lizmat The information is now folded into the specialization log.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,973,2018-09-28T18:42:50Z,2018-09-28T19:34:42Z,2018-11-28T08:56:09Z,MERGED,True,0,23,1,https://github.com/patrickbkr,Remove som dead code.,1,[],https://github.com/MoarVM/MoarVM/pull/973,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/973,The two #ifndef branches were equal. Just remove the #ifndef.,The two #ifndef branches were equal. Just remove the #ifndef.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,973,2018-09-28T18:42:50Z,2018-09-28T19:34:42Z,2018-11-28T08:56:09Z,MERGED,True,0,23,1,https://github.com/patrickbkr,Remove som dead code.,1,[],https://github.com/MoarVM/MoarVM/pull/973,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/973#issuecomment-425532524,The two #ifndef branches were equal. Just remove the #ifndef.,"Nice catch, thanks! Will leave the CI to run before merging.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,976,2018-09-30T17:35:23Z,2018-11-21T11:40:20Z,2018-11-21T11:40:21Z,CLOSED,False,52,0,1,https://github.com/jstuder-gh,Exprjit Templates (09/20/18),4,[],https://github.com/MoarVM/MoarVM/pull/976,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/976,+12 templates,+12 templates,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,976,2018-09-30T17:35:23Z,2018-11-21T11:40:20Z,2018-11-21T11:40:21Z,CLOSED,False,52,0,1,https://github.com/jstuder-gh,Exprjit Templates (09/20/18),4,[],https://github.com/MoarVM/MoarVM/pull/976,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/976#issuecomment-440634036,+12 templates,Merged in as 0939a10,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,977,2018-09-30T20:26:21Z,2018-10-03T08:47:11Z,2018-10-03T08:47:11Z,MERGED,True,125,55,7,https://github.com/jstuder-gh,Implement shift ops for exprjit,3,[],https://github.com/MoarVM/MoarVM/pull/977,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/977,"Implement binary arithmetic shift ops (left and right) for the exprjit
(AMD64).
+3 templates (using new ops)
Updated JIT docs to include new ops","Implement binary arithmetic shift ops (left and right) for the exprjit
(AMD64).
+3 templates (using new ops)
Updated JIT docs to include new ops",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,978,2018-10-01T06:23:32Z,2018-10-01T06:50:45Z,2022-02-09T20:57:11Z,MERGED,True,47999,46696,5,https://github.com/samcv,Update Unicode to 11.0 and update grapheme break rules,2,[],https://github.com/MoarVM/MoarVM/pull/978,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/978,"Update to the 11.0 version of the Unicode database. Get rid of multiple old
rules using now obsolete Emoji rules/guidelines for favor of the new
Extended_Pictographic property. We don't pass three of the Unicode grapheme
break tests 11.0, though this is about where we were for the Unicode 10.0
tests and is acceptable enough to change versions.

Update Unicode Collation data to UCA 11.0","Update to the 11.0 version of the Unicode database. Get rid of multiple old
rules using now obsolete Emoji rules/guidelines for favor of the new
Extended_Pictographic property. We don't pass three of the Unicode grapheme
break tests 11.0, though this is about where we were for the Unicode 10.0
tests and is acceptable enough to change versions.

Update Unicode Collation data to UCA 11.0",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,979,2018-10-02T08:58:51Z,2019-06-09T16:45:02Z,2019-06-09T16:45:02Z,CLOSED,False,16,0,2,https://github.com/timo,Better takedispatcher opt,2,[],https://github.com/MoarVM/MoarVM/pull/979,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/979,"takedispatcher was already turned into a null instruction, but nothing downstream was taking advantage of this.
quoth jonathan at http://colabti.org/irclogger/irclogger_log/moarvm?date=2018-10-02#l50

jnthn: Uh, yeah, you can't optimize much inside inlines at the moment :)
jnthn: Because there's no information on what is retained for deopt available
jnthn: So the chances of screwing things up is very high.
timotimo: i'll create a PR for the changes, i suppose?
jnthn: Yeah, but I'm going to reject it on principle in the immediate.
jnthn: Or well, defer it until we have the things needed to do it safely.
[…]
jnthn: fwiw, I think the better approah on this will be to do a normal optimize_bb pass on the inlinee - when we're got to the point where we can do it safely","takedispatcher was already turned into a null instruction, but nothing downstream was taking advantage of this.
quoth jonathan at http://colabti.org/irclogger/irclogger_log/moarvm?date=2018-10-02#l50

jnthn: Uh, yeah, you can't optimize much inside inlines at the moment :)
jnthn: Because there's no information on what is retained for deopt available
jnthn: So the chances of screwing things up is very high.
timotimo: i'll create a PR for the changes, i suppose?
jnthn: Yeah, but I'm going to reject it on principle in the immediate.
jnthn: Or well, defer it until we have the things needed to do it safely.
[…]
jnthn: fwiw, I think the better approah on this will be to do a normal optimize_bb pass on the inlinee - when we're got to the point where we can do it safely",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,979,2018-10-02T08:58:51Z,2019-06-09T16:45:02Z,2019-06-09T16:45:02Z,CLOSED,False,16,0,2,https://github.com/timo,Better takedispatcher opt,2,[],https://github.com/MoarVM/MoarVM/pull/979,https://github.com/timo,2,https://github.com/MoarVM/MoarVM/pull/979#issuecomment-426204823,"takedispatcher was already turned into a null instruction, but nothing downstream was taking advantage of this.
quoth jonathan at http://colabti.org/irclogger/irclogger_log/moarvm?date=2018-10-02#l50

jnthn: Uh, yeah, you can't optimize much inside inlines at the moment :)
jnthn: Because there's no information on what is retained for deopt available
jnthn: So the chances of screwing things up is very high.
timotimo: i'll create a PR for the changes, i suppose?
jnthn: Yeah, but I'm going to reject it on principle in the immediate.
jnthn: Or well, defer it until we have the things needed to do it safely.
[…]
jnthn: fwiw, I think the better approah on this will be to do a normal optimize_bb pass on the inlinee - when we're got to the point where we can do it safely","i've found this to cause some random spec test crashes, fwiw.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,979,2018-10-02T08:58:51Z,2019-06-09T16:45:02Z,2019-06-09T16:45:02Z,CLOSED,False,16,0,2,https://github.com/timo,Better takedispatcher opt,2,[],https://github.com/MoarVM/MoarVM/pull/979,https://github.com/bdw,3,https://github.com/MoarVM/MoarVM/pull/979#issuecomment-440611733,"takedispatcher was already turned into a null instruction, but nothing downstream was taking advantage of this.
quoth jonathan at http://colabti.org/irclogger/irclogger_log/moarvm?date=2018-10-02#l50

jnthn: Uh, yeah, you can't optimize much inside inlines at the moment :)
jnthn: Because there's no information on what is retained for deopt available
jnthn: So the chances of screwing things up is very high.
timotimo: i'll create a PR for the changes, i suppose?
jnthn: Yeah, but I'm going to reject it on principle in the immediate.
jnthn: Or well, defer it until we have the things needed to do it safely.
[…]
jnthn: fwiw, I think the better approah on this will be to do a normal optimize_bb pass on the inlinee - when we're got to the point where we can do it safely",@timo do you still want this merged in? Or shall I close the branch?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,979,2018-10-02T08:58:51Z,2019-06-09T16:45:02Z,2019-06-09T16:45:02Z,CLOSED,False,16,0,2,https://github.com/timo,Better takedispatcher opt,2,[],https://github.com/MoarVM/MoarVM/pull/979,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/979#issuecomment-500227533,"takedispatcher was already turned into a null instruction, but nothing downstream was taking advantage of this.
quoth jonathan at http://colabti.org/irclogger/irclogger_log/moarvm?date=2018-10-02#l50

jnthn: Uh, yeah, you can't optimize much inside inlines at the moment :)
jnthn: Because there's no information on what is retained for deopt available
jnthn: So the chances of screwing things up is very high.
timotimo: i'll create a PR for the changes, i suppose?
jnthn: Yeah, but I'm going to reject it on principle in the immediate.
jnthn: Or well, defer it until we have the things needed to do it safely.
[…]
jnthn: fwiw, I think the better approah on this will be to do a normal optimize_bb pass on the inlinee - when we're got to the point where we can do it safely","We now retain deopt info and run the optimizer over the inlined code, which rips the takedispatcher branch out fully. That's a more general solution (covers more opts on the inlinee). So I'd say it supersedes this. Thanks, though.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,980,2018-10-06T15:59:33Z,2018-10-20T01:36:29Z,2018-10-20T01:36:29Z,MERGED,True,584,404,10,https://github.com/Kaiepi,Implement async socket introspection,2,[],https://github.com/MoarVM/MoarVM/pull/980,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/980,"This will make it possible to get the native descriptor of
IO::Socket::Async instances later on.","This will make it possible to get the native descriptor of
IO::Socket::Async instances later on.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,980,2018-10-06T15:59:33Z,2018-10-20T01:36:29Z,2018-10-20T01:36:29Z,MERGED,True,584,404,10,https://github.com/Kaiepi,Implement async socket introspection,2,[],https://github.com/MoarVM/MoarVM/pull/980,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/980#issuecomment-430218327,"This will make it possible to get the native descriptor of
IO::Socket::Async instances later on.",Updated,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,982,2018-10-06T16:55:39Z,2018-10-06T19:31:04Z,2018-10-06T19:32:42Z,MERGED,True,0,68,7,https://github.com/jstuder-gh,Remove exprjit shift operations for now,1,[],https://github.com/MoarVM/MoarVM/pull/982,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/982,See Github Issue #981,See Github Issue #981,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,982,2018-10-06T16:55:39Z,2018-10-06T19:31:04Z,2018-10-06T19:32:42Z,MERGED,True,0,68,7,https://github.com/jstuder-gh,Remove exprjit shift operations for now,1,[],https://github.com/MoarVM/MoarVM/pull/982,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/982#issuecomment-427600356,See Github Issue #981,"You're quite correct. Because shl/shr don't take operand other than from cl (hysterical raisins?), we can't implement this correctly without implementing register requirements.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,982,2018-10-06T16:55:39Z,2018-10-06T19:31:04Z,2018-10-06T19:32:42Z,MERGED,True,0,68,7,https://github.com/jstuder-gh,Remove exprjit shift operations for now,1,[],https://github.com/MoarVM/MoarVM/pull/982,https://github.com/bdw,3,https://github.com/MoarVM/MoarVM/pull/982#issuecomment-427600455,See Github Issue #981,Replication that demonstrates the problem: https://gist.github.com/bdw/f1c4db2a029c8e601025d0caa23ade0c,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,984,2018-10-16T17:14:08Z,2018-10-17T00:15:14Z,2018-10-17T00:15:17Z,MERGED,True,73,1,1,https://github.com/zoffixznet,Make big Int stringification 1.58x as fast,2,[],https://github.com/MoarVM/MoarVM/pull/984,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/984,"For Ints larger than 2⁶⁰ and only in base-10.
We do it by reducing the value by largest 10**n number that
fits into a single mp_digit and doing so until our remaining
number fits into a single mp_digit, at which point we continue
using the traditional algo.
The reason we go for mp_digit-sized divisor is because we can use
mp_div_d routine with it. I also tried using mp_div with an even
larger divisor, but that made things a lot slower than original.
The only modification to libtommath routine is the code inside #if/#endif
unsure if this is a decent way to do this sort of thing.
Perf measurements with this commit:
Measured with say now - ENTER now using the mean of three samples for each measurement.



Number
Old (s)
New (s)
Speedup




10
1.4140471567
1.3842983
noise (optimized codepath doesn't run for this case)


10**10
1.16266601
1.1660879367
noise (optimized codepath doesn't run for this case)


2**64
5.0117614633
3.1652399633
1.58x as fast


10**1000
2.17431698
1.2189989967
1.78x as fast


10**100000
8.44483905
4.73683458
1.78x as fast


10**200000
34.10054
18.62298607
1.83x as fast (took only 1 sample of each measurement)","For Ints larger than 2⁶⁰ and only in base-10.
We do it by reducing the value by largest 10**n number that
fits into a single mp_digit and doing so until our remaining
number fits into a single mp_digit, at which point we continue
using the traditional algo.
The reason we go for mp_digit-sized divisor is because we can use
mp_div_d routine with it. I also tried using mp_div with an even
larger divisor, but that made things a lot slower than original.
The only modification to libtommath routine is the code inside #if/#endif
unsure if this is a decent way to do this sort of thing.
Perf measurements with this commit:
Measured with say now - ENTER now using the mean of three samples for each measurement.



Number
Old (s)
New (s)
Speedup




10
1.4140471567
1.3842983
noise (optimized codepath doesn't run for this case)


10**10
1.16266601
1.1660879367
noise (optimized codepath doesn't run for this case)


2**64
5.0117614633
3.1652399633
1.58x as fast


10**1000
2.17431698
1.2189989967
1.78x as fast


10**100000
8.44483905
4.73683458
1.78x as fast


10**200000
34.10054
18.62298607
1.83x as fast (took only 1 sample of each measurement)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,984,2018-10-16T17:14:08Z,2018-10-17T00:15:14Z,2018-10-17T00:15:17Z,MERGED,True,73,1,1,https://github.com/zoffixznet,Make big Int stringification 1.58x as fast,2,[],https://github.com/MoarVM/MoarVM/pull/984,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/984#issuecomment-430401651,"For Ints larger than 2⁶⁰ and only in base-10.
We do it by reducing the value by largest 10**n number that
fits into a single mp_digit and doing so until our remaining
number fits into a single mp_digit, at which point we continue
using the traditional algo.
The reason we go for mp_digit-sized divisor is because we can use
mp_div_d routine with it. I also tried using mp_div with an even
larger divisor, but that made things a lot slower than original.
The only modification to libtommath routine is the code inside #if/#endif
unsure if this is a decent way to do this sort of thing.
Perf measurements with this commit:
Measured with say now - ENTER now using the mean of three samples for each measurement.



Number
Old (s)
New (s)
Speedup




10
1.4140471567
1.3842983
noise (optimized codepath doesn't run for this case)


10**10
1.16266601
1.1660879367
noise (optimized codepath doesn't run for this case)


2**64
5.0117614633
3.1652399633
1.58x as fast


10**1000
2.17431698
1.2189989967
1.78x as fast


10**100000
8.44483905
4.73683458
1.78x as fast


10**200000
34.10054
18.62298607
1.83x as fast (took only 1 sample of each measurement)","basically by dividing by a larger number at once,

Yes, if a number is more than one mp_digit in size, instead of doing seventeen mp_div_d divisions by 10, we now do a single mp_div_d division by 100_000_000_000_000_000, which is the largest 10ⁿ number that fits into mp_digit with our current configuration of libtommath (that's what DIGIT_BIT = 60 conditionals are for), so then we can repeat these divisions as long as we have more than one mp_digit in our number.

Do we have specific tests for the larger numbers?

Very likely, as many tests use is which stringifies. I also added an explicit one, to be sure: Raku/roast@5ef9b0c504",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,985,2018-10-19T14:56:52Z,2018-12-12T13:48:01Z,2018-12-12T13:48:24Z,MERGED,True,18,2,1,https://github.com/ugexe,Use larger buffer for gethostname when available,3,[],https://github.com/MoarVM/MoarVM/pull/985,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/985,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,985,2018-10-19T14:56:52Z,2018-12-12T13:48:01Z,2018-12-12T13:48:24Z,MERGED,True,18,2,1,https://github.com/ugexe,Use larger buffer for gethostname when available,3,[],https://github.com/MoarVM/MoarVM/pull/985,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/985#issuecomment-431391784,,"Fixes the following:
$ sudo hostname abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01234567
$ hostname
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01234567
$ perl6 -e 'say $*KERNEL.hostname()'
abcdefghijklmnopqrstuvwxyz0123456789abcdefghijklmnopqrstuvwxyz01",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,985,2018-10-19T14:56:52Z,2018-12-12T13:48:01Z,2018-12-12T13:48:24Z,MERGED,True,18,2,1,https://github.com/ugexe,Use larger buffer for gethostname when available,3,[],https://github.com/MoarVM/MoarVM/pull/985,https://github.com/timo,3,https://github.com/MoarVM/MoarVM/pull/985#issuecomment-431392364,,"i'm not sure if it was exactly that, but in the past i've had trouble with MSVC, uint8_t foo[123]; and sizeof(foo). we'll need to double-check if it works on appveyor and jnthn's machines, and perhaps use the constant again?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,985,2018-10-19T14:56:52Z,2018-12-12T13:48:01Z,2018-12-12T13:48:24Z,MERGED,True,18,2,1,https://github.com/ugexe,Use larger buffer for gethostname when available,3,[],https://github.com/MoarVM/MoarVM/pull/985,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/985#issuecomment-446593471,,"AppVeyor seems happy, so I figure it's good on Windows too. Thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,986,2018-10-19T18:58:36Z,2018-10-22T14:18:28Z,2018-10-22T14:18:43Z,CLOSED,False,1,1,1,https://github.com/zoffixznet,Comment out problematic case in speshing deconting of _n,1,[],https://github.com/MoarVM/MoarVM/pull/986,https://github.com/zoffixznet,1,https://github.com/MoarVM/MoarVM/pull/986,"This appears to fix R#2395 rakudo/rakudo#2395 but I've no idea why.
I've absolutely no idea about this area of the codebase or the impact of this change.
I'm making this PR for last-resort type of situation, if we have to fix up R#2395 for the release, but I hope someone who knows this part of the code will figure out what's going on.","This appears to fix R#2395 rakudo/rakudo#2395 but I've no idea why.
I've absolutely no idea about this area of the codebase or the impact of this change.
I'm making this PR for last-resort type of situation, if we have to fix up R#2395 for the release, but I hope someone who knows this part of the code will figure out what's going on.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,986,2018-10-19T18:58:36Z,2018-10-22T14:18:28Z,2018-10-22T14:18:43Z,CLOSED,False,1,1,1,https://github.com/zoffixznet,Comment out problematic case in speshing deconting of _n,1,[],https://github.com/MoarVM/MoarVM/pull/986,https://github.com/zoffixznet,2,https://github.com/MoarVM/MoarVM/pull/986#issuecomment-431848939,"This appears to fix R#2395 rakudo/rakudo#2395 but I've no idea why.
I've absolutely no idea about this area of the codebase or the impact of this change.
I'm making this PR for last-resort type of situation, if we have to fix up R#2395 for the release, but I hope someone who knows this part of the code will figure out what's going on.",I removed the blocker label from the ticket (for reasons) so I don't think this PR is needed anymore.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,988,2018-11-01T21:34:38Z,2018-11-21T10:20:55Z,2018-11-21T10:20:55Z,MERGED,True,1,1,1,https://github.com/jstuder-gh,Use arithmetic right shift in JIT of brshift_i,1,[],https://github.com/MoarVM/MoarVM/pull/988,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/988,"The arithmetic right shift will preserve the sign of the integer by
ensuring that new bits shifted in match the initial sign bit.","The arithmetic right shift will preserve the sign of the integer by
ensuring that new bits shifted in match the initial sign bit.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,989,2018-11-01T21:45:11Z,2018-11-21T10:22:11Z,2018-11-21T10:22:11Z,MERGED,True,16,1,7,https://github.com/jstuder-gh, Add exprjit integer multiplication op,2,[],https://github.com/MoarVM/MoarVM/pull/989,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/989,"+1 template
Only adding a tile that takes two registers for now, as that is the only
way the op is being used currently.","+1 template
Only adding a tile that takes two registers for now, as that is the only
way the op is being used currently.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,991,2018-11-04T21:47:36Z,2018-12-12T05:58:39Z,2018-12-12T05:58:39Z,MERGED,True,71,13,3,https://github.com/Kaiepi,Reimplement async socket introspection,1,[],https://github.com/MoarVM/MoarVM/pull/991,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/991,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,993,2018-11-05T07:41:00Z,2020-05-04T14:31:43Z,2020-05-04T14:31:44Z,CLOSED,False,759,124,21,https://github.com/Kaiepi,[IP6NS Grant] Implement getsockopt/setsockopt support,8,[],https://github.com/MoarVM/MoarVM/pull/993,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/993,"Done:

implementing a getsockopts op to fetch the available socket option types
implementing the getsockopt/setsockopt ops
refactoring and bug fixes

Todo:

nothing","Done:

implementing a getsockopts op to fetch the available socket option types
implementing the getsockopt/setsockopt ops
refactoring and bug fixes

Todo:

nothing",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,993,2018-11-05T07:41:00Z,2020-05-04T14:31:43Z,2020-05-04T14:31:44Z,CLOSED,False,759,124,21,https://github.com/Kaiepi,[IP6NS Grant] Implement getsockopt/setsockopt support,8,[],https://github.com/MoarVM/MoarVM/pull/993,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/993#issuecomment-481330325,"Done:

implementing a getsockopts op to fetch the available socket option types
implementing the getsockopt/setsockopt ops
refactoring and bug fixes

Todo:

nothing",Don't merge this until I add SO_SNDTIMEO/SO_RCVTIMEO support,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,993,2018-11-05T07:41:00Z,2020-05-04T14:31:43Z,2020-05-04T14:31:44Z,CLOSED,False,759,124,21,https://github.com/Kaiepi,[IP6NS Grant] Implement getsockopt/setsockopt support,8,[],https://github.com/MoarVM/MoarVM/pull/993,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/993#issuecomment-481726886,"Done:

implementing a getsockopts op to fetch the available socket option types
implementing the getsockopt/setsockopt ops
refactoring and bug fixes

Todo:

nothing","SO_SNDTIMEO/SO_RCVTIMEO ended up being largely useless since they don't work on non-blocking sockets, so I didn't add support for them. I'll have to find a way to set up connection timeouts some other time.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,993,2018-11-05T07:41:00Z,2020-05-04T14:31:43Z,2020-05-04T14:31:44Z,CLOSED,False,759,124,21,https://github.com/Kaiepi,[IP6NS Grant] Implement getsockopt/setsockopt support,8,[],https://github.com/MoarVM/MoarVM/pull/993,https://github.com/Kaiepi,4,https://github.com/MoarVM/MoarVM/pull/993#issuecomment-623499867,"Done:

implementing a getsockopts op to fetch the available socket option types
implementing the getsockopt/setsockopt ops
refactoring and bug fixes

Todo:

nothing","I think it's a bit early in the process of the work for the IP6NS grant to be implementing this, and how socket options should be handled probably needs more consideration anyway. Once sync UDP socket support exists this will be revisited.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,994,2018-11-09T17:51:15Z,2018-11-11T12:18:13Z,2018-11-11T12:18:13Z,CLOSED,False,22,10,1,https://github.com/pmurias,Make nqp::serializetobuffer return a buffer instead of string,1,[],https://github.com/MoarVM/MoarVM/pull/994,https://github.com/pmurias,1,https://github.com/MoarVM/MoarVM/pull/994,This fixes the case where the serialized data is not directly stashed into the bytecode,This fixes the case where the serialized data is not directly stashed into the bytecode,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,994,2018-11-09T17:51:15Z,2018-11-11T12:18:13Z,2018-11-11T12:18:13Z,CLOSED,False,22,10,1,https://github.com/pmurias,Make nqp::serializetobuffer return a buffer instead of string,1,[],https://github.com/MoarVM/MoarVM/pull/994,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/994#issuecomment-437662211,This fixes the case where the serialized data is not directly stashed into the bytecode,I just pushed commit 950011e inspired by your PR. Does that fix your problem?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,994,2018-11-09T17:51:15Z,2018-11-11T12:18:13Z,2018-11-11T12:18:13Z,CLOSED,False,22,10,1,https://github.com/pmurias,Make nqp::serializetobuffer return a buffer instead of string,1,[],https://github.com/MoarVM/MoarVM/pull/994,https://github.com/pmurias,3,https://github.com/MoarVM/MoarVM/pull/994#issuecomment-437665486,This fixes the case where the serialized data is not directly stashed into the bytecode,That should fix it,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1001,2018-11-26T01:20:54Z,2018-11-26T19:48:53Z,2018-11-26T19:48:53Z,MERGED,True,46,40,1,https://github.com/Kaiepi,Include system library paths in Configure.pl if configured to use them,1,[],https://github.com/MoarVM/MoarVM/pull/1001,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1001,Fixes #1000,Fixes #1000,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1001,2018-11-26T01:20:54Z,2018-11-26T19:48:53Z,2018-11-26T19:48:53Z,MERGED,True,46,40,1,https://github.com/Kaiepi,Include system library paths in Configure.pl if configured to use them,1,[],https://github.com/MoarVM/MoarVM/pull/1001,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1001#issuecomment-441638715,Fixes #1000,Updated,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1002,2018-11-27T11:47:14Z,2018-11-27T19:23:14Z,2022-02-09T21:05:07Z,MERGED,True,7,0,2,https://github.com/timo,free spesh log entries after consuming them,1,[],https://github.com/MoarVM/MoarVM/pull/1002,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/1002,"this prevents threads that do little to no
allocations but lots of spesh logging in an
otherwise idle program from growing to multiple
gigabytes of ram used solely for spesh log entries.
This happened with rakudo's ThreadPoolScheduler
supervisor thread when a program with multithreading
or async workloads was left idle, like for example
a Cro app.
This is one of three ways to solve this problem. A second way is to decrease the available size in the nursery to account for memory allocated for the spesh log entries buffer. The third way would be to re-use spesh logs completely, so that only a few buffers ever exist in total.
It's easier to argue that the second way is obviously correct, but it will also cause more GC load. Of course, if barely anything besides spesh logs are being created, that'd only be a millisecond of work each time.
The third way will definitely require some care so that re-use isn't susceptible to subtle problems like improper concurrent access, or stale data being accessed.
IMO the way implemented here is acceptable.","this prevents threads that do little to no
allocations but lots of spesh logging in an
otherwise idle program from growing to multiple
gigabytes of ram used solely for spesh log entries.
This happened with rakudo's ThreadPoolScheduler
supervisor thread when a program with multithreading
or async workloads was left idle, like for example
a Cro app.
This is one of three ways to solve this problem. A second way is to decrease the available size in the nursery to account for memory allocated for the spesh log entries buffer. The third way would be to re-use spesh logs completely, so that only a few buffers ever exist in total.
It's easier to argue that the second way is obviously correct, but it will also cause more GC load. Of course, if barely anything besides spesh logs are being created, that'd only be a millisecond of work each time.
The third way will definitely require some care so that re-use isn't susceptible to subtle problems like improper concurrent access, or stale data being accessed.
IMO the way implemented here is acceptable.",True,{'HEART': ['https://github.com/Demayl']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1004,2018-11-29T00:38:25Z,2018-11-30T07:53:13Z,2018-11-30T07:53:13Z,MERGED,True,46,4,5,https://github.com/samcv,Attempt to fix MoarVM build on AIX,4,[],https://github.com/MoarVM/MoarVM/pull/1004,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/1004,"Use sys/machine.h on AIX systems in csiphash.h
This is needed so there isn't a build error on AIX systems. It is also
needed for AIX systems that use big endian instead of little endian.
Reported by ItchyPlant.

Add missing libuv file to Makefile.in for AIX
Enable detection of 32 bit AIX systems in Configure.pl
If we detect a 32 bit AIX system, add -bmaxdata:0x80000000 to the
ldflags. This allows the compiled program to use a 'large' memory space.

https://www.ibm.com/support/knowledgecenter/ssw_aix_71/com.ibm.aix.genprogc/lrg_prg_support.htm

Reported by ItchyPlant at https://www.reddit.com/r/perl6/comments/9s2v1o/perl_6_201809_on_aix7/","Use sys/machine.h on AIX systems in csiphash.h
This is needed so there isn't a build error on AIX systems. It is also
needed for AIX systems that use big endian instead of little endian.
Reported by ItchyPlant.

Add missing libuv file to Makefile.in for AIX
Enable detection of 32 bit AIX systems in Configure.pl
If we detect a 32 bit AIX system, add -bmaxdata:0x80000000 to the
ldflags. This allows the compiled program to use a 'large' memory space.

https://www.ibm.com/support/knowledgecenter/ssw_aix_71/com.ibm.aix.genprogc/lrg_prg_support.htm

Reported by ItchyPlant at https://www.reddit.com/r/perl6/comments/9s2v1o/perl_6_201809_on_aix7/",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1006,2018-12-02T16:07:09Z,,2018-12-05T02:22:20Z,OPEN,False,10,5,1,https://github.com/jstuder-gh,Have Configure use pkg-config for system libtommath,1,[],https://github.com/MoarVM/MoarVM/pull/1006,https://github.com/jstuder-gh,1,https://github.com/MoarVM/MoarVM/pull/1006,"If pkg-config is available, use that to determine the lib and include paths/flags (with a fallback to a default if the .pc not found/available). This way, if platforms with irregular lib/header locations ship a .pc file, the system files can be found.
This doesn't totally fix the issue with building on ROSA linux seen here (as it seems it's libtommath-devel package does not include a .pc), but it does take a step to addressing platforms with irregular lib/header locations.
The libtommath source has a template for pkg-config (seen here) which can be bundled by package maintainers.","If pkg-config is available, use that to determine the lib and include paths/flags (with a fallback to a default if the .pc not found/available). This way, if platforms with irregular lib/header locations ship a .pc file, the system files can be found.
This doesn't totally fix the issue with building on ROSA linux seen here (as it seems it's libtommath-devel package does not include a .pc), but it does take a step to addressing platforms with irregular lib/header locations.
The libtommath source has a template for pkg-config (seen here) which can be bundled by package maintainers.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1007,2018-12-04T18:25:14Z,2018-12-04T18:39:18Z,2018-12-04T18:39:18Z,MERGED,True,3,3,2,https://github.com/Kaiepi,Fix some compiler warnings,1,[],https://github.com/MoarVM/MoarVM/pull/1007,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1007,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1008,2018-12-05T18:28:04Z,2018-12-06T07:18:44Z,2018-12-06T07:18:44Z,MERGED,True,3,2,1,https://github.com/Kaiepi,Fix double free in platform/sys.c,1,[],https://github.com/MoarVM/MoarVM/pull/1008,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1008,"libuv expects the info struct to have already been initialized.
See rakudo/rakudo#2520","libuv expects the info struct to have already been initialized.
See rakudo/rakudo#2520",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1008,2018-12-05T18:28:04Z,2018-12-06T07:18:44Z,2018-12-06T07:18:44Z,MERGED,True,3,2,1,https://github.com/Kaiepi,Fix double free in platform/sys.c,1,[],https://github.com/MoarVM/MoarVM/pull/1008,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1008#issuecomment-444602709,"libuv expects the info struct to have already been initialized.
See rakudo/rakudo#2520","I don't think your assessment is correct. libuv docs claim: ""int uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count) Gets information about the CPUs on the system. The cpu_infos array will have count elements and needs to be freed with uv_free_cpu_info().""
So we're actually not talking about an uv_cpu_info* but a whole array of those pointers. Which means that initializing with a single one is an odd solution already. And indeed the source shows that an array is allocated by uv_free_cpu_info():
https://github.com/libuv/libuv/blob/7ebb26225f2eaae6db22f4ef34ce76fa16ff89ec/src/unix/openbsd.c#L265
I think what happens is that the sysctl in line 262 fails and uv_cpu_info returns errno before actually allocating the array. That's why the uv_free_cpu_info() call explodes. I think a more correct fix is to check uv_cpu_info's return value and only call uv_free_cpu_info() if count > 0.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1008,2018-12-05T18:28:04Z,2018-12-06T07:18:44Z,2018-12-06T07:18:44Z,MERGED,True,3,2,1,https://github.com/Kaiepi,Fix double free in platform/sys.c,1,[],https://github.com/MoarVM/MoarVM/pull/1008,https://github.com/cygx,3,https://github.com/MoarVM/MoarVM/pull/1008#issuecomment-444604141,"libuv expects the info struct to have already been initialized.
See rakudo/rakudo#2520","From what I can gather, the correct solution would be to check the return value of uv_cpu_info() and only call uv_free_cpu_info() on success (ie return value 0). On failure, the former will clean up after itself.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1008,2018-12-05T18:28:04Z,2018-12-06T07:18:44Z,2018-12-06T07:18:44Z,MERGED,True,3,2,1,https://github.com/Kaiepi,Fix double free in platform/sys.c,1,[],https://github.com/MoarVM/MoarVM/pull/1008,https://github.com/cygx,4,https://github.com/MoarVM/MoarVM/pull/1008#issuecomment-444605702,"libuv expects the info struct to have already been initialized.
See rakudo/rakudo#2520",This of course poses a follow-up question: What value should MVM_platform_cpu_count() return if uv_cpu_info() fails?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1008,2018-12-05T18:28:04Z,2018-12-06T07:18:44Z,2018-12-06T07:18:44Z,MERGED,True,3,2,1,https://github.com/Kaiepi,Fix double free in platform/sys.c,1,[],https://github.com/MoarVM/MoarVM/pull/1008,https://github.com/Kaiepi,5,https://github.com/MoarVM/MoarVM/pull/1008#issuecomment-444608219,"libuv expects the info struct to have already been initialized.
See rakudo/rakudo#2520",Maybe an exception should be thrown if that happens?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1008,2018-12-05T18:28:04Z,2018-12-06T07:18:44Z,2018-12-06T07:18:44Z,MERGED,True,3,2,1,https://github.com/Kaiepi,Fix double free in platform/sys.c,1,[],https://github.com/MoarVM/MoarVM/pull/1008,https://github.com/niner,6,https://github.com/MoarVM/MoarVM/pull/1008#issuecomment-444623384,"libuv expects the info struct to have already been initialized.
See rakudo/rakudo#2520","Note that uv_cpu_info() can also return errors after it allocated the cpu_infos array but it will set count right after successfully allocating that array. So really, we must only call uv_free_cpu_info() if count is > 0",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1008,2018-12-05T18:28:04Z,2018-12-06T07:18:44Z,2018-12-06T07:18:44Z,MERGED,True,3,2,1,https://github.com/Kaiepi,Fix double free in platform/sys.c,1,[],https://github.com/MoarVM/MoarVM/pull/1008,https://github.com/cygx,7,https://github.com/MoarVM/MoarVM/pull/1008#issuecomment-444625593,"libuv expects the info struct to have already been initialized.
See rakudo/rakudo#2520","Cf eg line 274 or line 285: Here, the memory gets freed after count has already been set. So under certain conditions, using count as condition variable would result in a double free.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1008,2018-12-05T18:28:04Z,2018-12-06T07:18:44Z,2018-12-06T07:18:44Z,MERGED,True,3,2,1,https://github.com/Kaiepi,Fix double free in platform/sys.c,1,[],https://github.com/MoarVM/MoarVM/pull/1008,https://github.com/niner,8,https://github.com/MoarVM/MoarVM/pull/1008#issuecomment-444653649,"libuv expects the info struct to have already been initialized.
See rakudo/rakudo#2520","Oh, good catch!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1011,2018-12-08T03:00:01Z,2020-04-15T20:57:18Z,2020-04-15T20:57:19Z,CLOSED,False,38,43,1,https://github.com/ddlws,Fix #1010. Remove errant check in get_attribute.,2,[],https://github.com/MoarVM/MoarVM/pull/1011,https://github.com/ddlws,1,https://github.com/MoarVM/MoarVM/pull/1011,"Issue is here. I think there might have been some confusion because of the variable name. Here, get_ptr_at_offset is returning the value at the beginning of the native structure.
void *cobj = get_ptr_at_offset(body->cstruct, repr_data->struct_offsets[slot]);
if (cobj) {
...
else {obj = typeobj;","Issue is here. I think there might have been some confusion because of the variable name. Here, get_ptr_at_offset is returning the value at the beginning of the native structure.
void *cobj = get_ptr_at_offset(body->cstruct, repr_data->struct_offsets[slot]);
if (cobj) {
...
else {obj = typeobj;",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1013,2018-12-08T07:38:32Z,2020-04-15T20:57:19Z,2020-04-15T20:57:19Z,CLOSED,False,35,0,1,https://github.com/ddlws, Account for inlined CArrays when determining CUnion's size. Fixes #1012 ,2,[],https://github.com/MoarVM/MoarVM/pull/1013,https://github.com/ddlws,1,https://github.com/MoarVM/MoarVM/pull/1013,"This patch works on my machine, passes rakudo tests, and doesn't leak under valgrind (on my machine), but I'm not making any claims about correctness. I'm somewhat new to perl6 and very new to Moar internals.  I was struggling with writing some bindings because pointers pointed all over and nothing was in the right place. It was mostly my code at fault, but this popped up while I was losing my mind. I'm still unfamiliar with the GC and write barriers, so I'm not sure why those things appear in CStruct.c's compute_allocation_strategy but not here.   Still, it's a start. Shoves in the right direction greatly appreciated.","This patch works on my machine, passes rakudo tests, and doesn't leak under valgrind (on my machine), but I'm not making any claims about correctness. I'm somewhat new to perl6 and very new to Moar internals.  I was struggling with writing some bindings because pointers pointed all over and nothing was in the right place. It was mostly my code at fault, but this popped up while I was losing my mind. I'm still unfamiliar with the GC and write barriers, so I'm not sure why those things appear in CStruct.c's compute_allocation_strategy but not here.   Still, it's a start. Shoves in the right direction greatly appreciated.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1014,2018-12-08T22:11:06Z,2018-12-09T08:31:07Z,2018-12-09T08:31:08Z,MERGED,True,6,1,1,https://github.com/mornfall,Add a cancel handler for filewatch tasks,1,[],https://github.com/MoarVM/MoarVM/pull/1014,https://github.com/mornfall,1,https://github.com/MoarVM/MoarVM/pull/1014,"Without this, MVM_OP_watchfile is bound to leak a file descriptor and/or
other resources (depending on the platform). Stopping the libuv fs_event
in the cancel op allows rakudo to nqp::cancel the task and thus prevent
the leak.","Without this, MVM_OP_watchfile is bound to leak a file descriptor and/or
other resources (depending on the platform). Stopping the libuv fs_event
in the cancel op allows rakudo to nqp::cancel the task and thus prevent
the leak.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1018,2018-12-11T10:55:38Z,2018-12-18T16:39:25Z,2018-12-18T19:10:34Z,CLOSED,False,2,1,1,https://github.com/xlat,keep end of string bytes \x0000,2,[],https://github.com/MoarVM/MoarVM/pull/1018,https://github.com/xlat,1,https://github.com/MoarVM/MoarVM/pull/1018,"Fixes #1017
This is also related to https://stackoverflow.com/questions/53691576/perl6-nativecall-with-str-is-encodedutf16-got-randomly-corrupted-result
This fix add the missing space for the end of string char which is 2 bytes for utf16.","Fixes #1017
This is also related to https://stackoverflow.com/questions/53691576/perl6-nativecall-with-str-is-encodedutf16-got-randomly-corrupted-result
This fix add the missing space for the end of string char which is 2 bytes for utf16.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1018,2018-12-11T10:55:38Z,2018-12-18T16:39:25Z,2018-12-18T19:10:34Z,CLOSED,False,2,1,1,https://github.com/xlat,keep end of string bytes \x0000,2,[],https://github.com/MoarVM/MoarVM/pull/1018,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1018#issuecomment-448285477,"Fixes #1017
This is also related to https://stackoverflow.com/questions/53691576/perl6-nativecall-with-str-is-encodedutf16-got-randomly-corrupted-result
This fix add the missing space for the end of string char which is 2 bytes for utf16.",Cherry-picked the desired commit into master; thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1018,2018-12-11T10:55:38Z,2018-12-18T16:39:25Z,2018-12-18T19:10:34Z,CLOSED,False,2,1,1,https://github.com/xlat,keep end of string bytes \x0000,2,[],https://github.com/MoarVM/MoarVM/pull/1018,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/1018#issuecomment-448335032,"Fixes #1017
This is also related to https://stackoverflow.com/questions/53691576/perl6-nativecall-with-str-is-encodedutf16-got-randomly-corrupted-result
This fix add the missing space for the end of string char which is 2 bytes for utf16.",Do we need a test for this?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1026,2018-12-18T17:55:56Z,,2019-01-02T11:28:02Z,OPEN,False,1,1,1,https://github.com/ugexe,Fix long error messages on windows,3,[],https://github.com/MoarVM/MoarVM/pull/1026,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1026,"On windows vsnprintf returns -1 on overflow; in this scenario don't use the result of vsnprintf to determine string size
#1025","On windows vsnprintf returns -1 on overflow; in this scenario don't use the result of vsnprintf to determine string size
#1025",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1026,2018-12-18T17:55:56Z,,2019-01-02T11:28:02Z,OPEN,False,1,1,1,https://github.com/ugexe,Fix long error messages on windows,3,[],https://github.com/MoarVM/MoarVM/pull/1026,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1026#issuecomment-450841010,"On windows vsnprintf returns -1 on overflow; in this scenario don't use the result of vsnprintf to determine string size
#1025","We currently do this:
#ifdef _MSC_VER
#define snprintf _snprintf
#define vsnprintf _vsnprintf
#endif

And it turns out that the underscore versions do indeed return the -1 in such a case; the same doc claims there is also the vsnprintf available, but I suspect that's a recent thing that we can't rely on yet.
I'm a little concerned that:

-1 normally indicates an error, and so the buffer might contain junk, so the attempt to decode it will crash
The truncation may lead to malformed UTF-8, which would also crash the decode

I wonder if we should:

Bump the buffer size a bit so it's even less likely to run into this issue
If we get -1, just use the format string; it'll obviously look a bit wrong, but it's still a great deal more useful to the end user than a decode error.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1026,2018-12-18T17:55:56Z,,2019-01-02T11:28:02Z,OPEN,False,1,1,1,https://github.com/ugexe,Fix long error messages on windows,3,[],https://github.com/MoarVM/MoarVM/pull/1026,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1026#issuecomment-450841104,"On windows vsnprintf returns -1 on overflow; in this scenario don't use the result of vsnprintf to determine string size
#1025","Alternatively, we could decode it with UTF8-C8 instead, which will tolerate malformed trailing bytes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1031,2019-01-10T21:28:31Z,2019-01-12T02:01:09Z,2019-01-12T02:01:13Z,MERGED,True,2,1,1,https://github.com/MasterDuke17,"Add op name to jit ""bailed completely"" error",1,[],https://github.com/MoarVM/MoarVM/pull/1031,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1031,NQP passes make m-test and Rakudo passes make m-test m-spectest.,NQP passes make m-test and Rakudo passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1033,2019-01-12T10:32:50Z,,2019-01-21T13:36:57Z,OPEN,False,2,8,3,https://github.com/pmurias,Trim array returned by nqp::decodelocaltime,1,[],https://github.com/MoarVM/MoarVM/pull/1033,https://github.com/pmurias,1,https://github.com/MoarVM/MoarVM/pull/1033,"Remove elements that are unused by rakudo.
This makes it work the same as on other backends.","Remove elements that are unused by rakudo.
This makes it work the same as on other backends.",True,{'THUMBS_DOWN': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1033,2019-01-12T10:32:50Z,,2019-01-21T13:36:57Z,OPEN,False,2,8,3,https://github.com/pmurias,Trim array returned by nqp::decodelocaltime,1,[],https://github.com/MoarVM/MoarVM/pull/1033,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1033#issuecomment-453783258,"Remove elements that are unused by rakudo.
This makes it work the same as on other backends.","FWIW, I'd rather see the other fields documented and supported on other platforms.  Is that difficult for some reason?  Also, I would like to see a nqp::gmtime() function as well, but that's another issue I guess.  :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1033,2019-01-12T10:32:50Z,,2019-01-21T13:36:57Z,OPEN,False,2,8,3,https://github.com/pmurias,Trim array returned by nqp::decodelocaltime,1,[],https://github.com/MoarVM/MoarVM/pull/1033,https://github.com/pmurias,3,https://github.com/MoarVM/MoarVM/pull/1033#issuecomment-456028245,"Remove elements that are unused by rakudo.
This makes it work the same as on other backends.",Are there plans to use the other fields on other platforms? Rakudo doesn't currently access them at all.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1033,2019-01-12T10:32:50Z,,2019-01-21T13:36:57Z,OPEN,False,2,8,3,https://github.com/pmurias,Trim array returned by nqp::decodelocaltime,1,[],https://github.com/MoarVM/MoarVM/pull/1033,https://github.com/pmurias,4,https://github.com/MoarVM/MoarVM/pull/1033#issuecomment-456031263,"Remove elements that are unused by rakudo.
This makes it work the same as on other backends.","Determining if the daylight saving time is in effect won't be trivial to do correctly on the js backend (but I guess not impossible), the other two fields don't seem to be a problem.
If we actually will need them they can be added but if they won't I don't see a reason to keep useless and untested code lying around.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1034,2019-01-13T20:59:09Z,2019-01-15T16:52:52Z,2019-01-15T16:52:52Z,CLOSED,False,21,5,1,https://github.com/czurnieden,adapt bigint handling to new LibTomMath version,2,[],https://github.com/MoarVM/MoarVM/pull/1034,https://github.com/czurnieden,1,https://github.com/MoarVM/MoarVM/pull/1034,"The new LibTomMath version has a slightly altered API regarding the generation of random numbers to make it cryptographically secure. That conflicts with your program according to the Debian maintainer here libtom/libtommath#122
We added a small function mp_rand_digit to the API and I took the liberty to adapt your code to use it. This patch is meant more as a hint but should work as posted, too.
It is a bit of a catch-22 because  mp_rand_digit might not be included in the next RC when you receive this pull request. Please check libtom/libtommath#147 for the details regarding mp_rand_digit.","The new LibTomMath version has a slightly altered API regarding the generation of random numbers to make it cryptographically secure. That conflicts with your program according to the Debian maintainer here libtom/libtommath#122
We added a small function mp_rand_digit to the API and I took the liberty to adapt your code to use it. This patch is meant more as a hint but should work as posted, too.
It is a bit of a catch-22 because  mp_rand_digit might not be included in the next RC when you receive this pull request. Please check libtom/libtommath#147 for the details regarding mp_rand_digit.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1037,2019-01-20T22:32:24Z,2019-02-12T20:52:31Z,2019-02-12T20:52:31Z,CLOSED,False,148,96,10,https://github.com/ugexe,Add uname op,2,[],https://github.com/MoarVM/MoarVM/pull/1037,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1037,"Updates libuv to 1.25.0 for uv_os_uname.
Adds uname op.

This would allow rakudo to avoid calling out to bin/uname:
https://github.com/rakudo/rakudo/blob/a5b9fc2de5eac6734d700724fe46b2c3ab0d82fe/src/core/Kernel.pm6#L13
https://github.com/rakudo/rakudo/blob/e9351cbaa961c4d1e4ef8b4cb52418d55766a8d6/src/core/Distro.pm6#L61
Similar libuv functionality should find its way into nodejs in the near future. I'm not familiar with a JVM solution, but I can't imagine it would be too difficult. We can continue to use bin/uname as a fallback either way.","Updates libuv to 1.25.0 for uv_os_uname.
Adds uname op.

This would allow rakudo to avoid calling out to bin/uname:
https://github.com/rakudo/rakudo/blob/a5b9fc2de5eac6734d700724fe46b2c3ab0d82fe/src/core/Kernel.pm6#L13
https://github.com/rakudo/rakudo/blob/e9351cbaa961c4d1e4ef8b4cb52418d55766a8d6/src/core/Distro.pm6#L61
Similar libuv functionality should find its way into nodejs in the near future. I'm not familiar with a JVM solution, but I can't imagine it would be too difficult. We can continue to use bin/uname as a fallback either way.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1037,2019-01-20T22:32:24Z,2019-02-12T20:52:31Z,2019-02-12T20:52:31Z,CLOSED,False,148,96,10,https://github.com/ugexe,Add uname op,2,[],https://github.com/MoarVM/MoarVM/pull/1037,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1037#issuecomment-462929813,"Updates libuv to 1.25.0 for uv_os_uname.
Adds uname op.

This would allow rakudo to avoid calling out to bin/uname:
https://github.com/rakudo/rakudo/blob/a5b9fc2de5eac6734d700724fe46b2c3ab0d82fe/src/core/Kernel.pm6#L13
https://github.com/rakudo/rakudo/blob/e9351cbaa961c4d1e4ef8b4cb52418d55766a8d6/src/core/Distro.pm6#L61
Similar libuv functionality should find its way into nodejs in the near future. I'm not familiar with a JVM solution, but I can't imagine it would be too difficult. We can continue to use bin/uname as a fallback either way.",Closing in favor of #1049,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1038,2019-01-25T01:27:43Z,2019-03-08T01:21:27Z,2019-03-08T01:21:27Z,MERGED,True,186,97,10,https://github.com/MasterDuke17,Add smrt intify op,1,[],https://github.com/MoarVM/MoarVM/pull/1038,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1038,This will be needed for an about-to-land NQP PR that makes NQP default to using int instead of num behavior for variables and ops.,This will be needed for an about-to-land NQP PR that makes NQP default to using int instead of num behavior for variables and ops.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1038,2019-01-25T01:27:43Z,2019-03-08T01:21:27Z,2019-03-08T01:21:27Z,MERGED,True,186,97,10,https://github.com/MasterDuke17,Add smrt intify op,1,[],https://github.com/MoarVM/MoarVM/pull/1038,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1038#issuecomment-462572270,This will be needed for an about-to-land NQP PR that makes NQP default to using int instead of num behavior for variables and ops.,Rebased to HEAD on master.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1039,2019-01-26T12:43:23Z,2019-01-28T20:50:19Z,2019-01-28T20:50:20Z,CLOSED,False,139,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1039,https://github.com/scovit,1,https://github.com/MoarVM/MoarVM/pull/1039,"This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.","This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1039,2019-01-26T12:43:23Z,2019-01-28T20:50:19Z,2019-01-28T20:50:20Z,CLOSED,False,139,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1039,https://github.com/scovit,2,https://github.com/MoarVM/MoarVM/pull/1039#issuecomment-458212991,"This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.","Yes, this is libffi only since the alternative does not support passing struct by value",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1040,2019-01-27T02:32:04Z,2019-02-07T14:49:16Z,2019-02-07T22:54:58Z,MERGED,True,2,1,1,https://github.com/MasterDuke17,Add BOOTHash to spesh cheat list,1,[],https://github.com/MoarVM/MoarVM/pull/1040,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1040,"It's the only other BOOT* that shows up in the spesh logs of an NQP
build. timotimo++
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","It's the only other BOOT* that shows up in the spesh logs of an NQP
build. timotimo++
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/scovit,1,https://github.com/MoarVM/MoarVM/pull/1042,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.","Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/1042#issuecomment-462034273,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.",Hi @scovit  - why did you close this? I haven't had the opportunity to look at it yet 😄,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/scovit,3,https://github.com/MoarVM/MoarVM/pull/1042#issuecomment-462316861,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.","Hi @bdw ,
Thank you for the interest in my patch, I am working on MoarVM with that applied locally, so I am keeping it updated.
It is here: https://github.com/scovit/MoarVM/tree/cstruct-by-value
And here is the associated simple rakudo patch: https://github.com/scovit/rakudo/tree/cstruct-by-value
When I did a rebase, the pull-request was automatically closed. I can open another one, if it helps. By the way I didn’t understand if it is a big issue the fact that this feature will be libffi only?
I honestly do not understand why we keep both libffi and dyncall as slow-path backends, on top of the JIT integration?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1042#issuecomment-462319293,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.","@scovit NativeCall is an important part of Perl 6 and Rakudo and everything improving our coverage is very welcome!
I, too was confused by this PR being closed before I had a chance to do a review. Didn't know that Github will do that automatically.
I'm not sure if the ""is copy"" trait is the most appropriate here. For other types the ""rw"" trait expresses something getting passed as pointer and it's absence signifies passing by value. Of course, we are already a bit late since CStructs are passed as pointer by default and an ""rw"" trait doesn't mean anything. The same is actually true for arrays. That may be something to clean up in a NativeCall v2. The important bit is that MoarVM will have to support both variants.
As for libffi vs. dyncall I guess that's just because no one has asked that question before. I'm not even aware of the reasons for having two backends in the first place. In theory we could get rid of both if someone completes the JIT support. The biggest obstace for that is support for callbacks.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/scovit,5,https://github.com/MoarVM/MoarVM/pull/1042#issuecomment-462323813,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.","Hi @niner, thank you for reviewing my code, I think we can keep the discussion open here!
I am not sure about the ""rw"" reasoning part: if I understand correctly, in Perl6, objects are always references. For this reason, I think that defaulting to pass-by-value for CStruct is ambiguous and should be avoided, while that is totally fine for native types. Instead, adding another trait, such as ""is copy"", will match better the way Perl 6 treats objects in arguments passing for Perl 6 functions.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/scovit,6,https://github.com/MoarVM/MoarVM/pull/1042#issuecomment-462327380,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.","Regarding the point that ""objects are always references"", I honestly find very weird the uppercase HAS syntax for Array/CStruct inlining inside a CStruct. I think that a specific trait, such as ""is inlined"", could be more consistent with to the ""is rw"" trait specific to declaring accessorized attributes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/patrickbkr,7,https://github.com/MoarVM/MoarVM/pull/1042#issuecomment-462379788,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.",IIRC the reason for having both libffi and dyncall was that libffi doesn't support Windows without mingw/cygwin and dyncall misses many less used platforms. Thus support for both was added.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/scovit,8,https://github.com/MoarVM/MoarVM/pull/1042#issuecomment-462386215,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.","@patzim it is my understanding, from https://github.com/libffi/libffi , that libffi can compile with MSVC and requires mingw/cygwin only as part of the build process",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/jnthn,9,https://github.com/MoarVM/MoarVM/pull/1042#issuecomment-463645604,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.","In theory we could get rid of both if someone completes the JIT support.

Only if they do the JIT support for every platform that we might wish to support. :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1042,2019-01-28T20:52:24Z,2019-02-08T23:50:22Z,2019-02-14T15:17:05Z,CLOSED,False,137,14,7,https://github.com/scovit,Allow CStruct pass-by-value in Nativecall,1,[],https://github.com/MoarVM/MoarVM/pull/1042,https://github.com/bdw,10,https://github.com/MoarVM/MoarVM/pull/1042#issuecomment-463664872,"Second version of the patch, @bdw ++
This feature can be implemented only on libffi.
This is the initial implementation of the pass-by-value
functionality for nativecall, it recognizes the 'copy' key on
parameter/return hashes. Then it build up the libffi parameter
definition by analyzing the STables and REPRs of the members. It
currently works only on P6num P6int and CStruct member types but
will be extended upon review. This functionality can be implemented
only on the libffi nativecall backend, and might render dyncall
obsolete for MoarVM.",So much work though!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1043,2019-02-02T18:46:44Z,2019-02-07T14:48:00Z,2019-02-07T22:54:46Z,MERGED,True,40,0,1,https://github.com/MasterDuke17,Jit (open|read|close)_dir,2,[],https://github.com/MoarVM/MoarVM/pull/1043,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1043,"These were causing some JIT: bailed completely because of <...> in the code from gfldex++'s blog post.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","These were causing some JIT: bailed completely because of <...> in the code from gfldex++'s blog post.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1043,2019-02-02T18:46:44Z,2019-02-07T14:48:00Z,2019-02-07T22:54:46Z,MERGED,True,40,0,1,https://github.com/MasterDuke17,Jit (open|read|close)_dir,2,[],https://github.com/MoarVM/MoarVM/pull/1043,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1043#issuecomment-460005538,"These were causing some JIT: bailed completely because of <...> in the code from gfldex++'s blog post.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","@timo good catch, updated.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1045,2019-02-04T22:26:11Z,2019-02-07T14:56:21Z,2019-02-07T14:56:21Z,MERGED,True,14,10,1,https://github.com/ffontaine,Configure.pl: fix cross-compilation,1,[],https://github.com/MoarVM/MoarVM/pull/1045,https://github.com/ffontaine,1,https://github.com/MoarVM/MoarVM/pull/1045,"Do not add -I/usr/local/include or -L/usr/local/lib as this will break
cross-compilation.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Do not add -I/usr/local/include or -L/usr/local/lib as this will break
cross-compilation.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1045,2019-02-04T22:26:11Z,2019-02-07T14:56:21Z,2019-02-07T14:56:21Z,MERGED,True,14,10,1,https://github.com/ffontaine,Configure.pl: fix cross-compilation,1,[],https://github.com/MoarVM/MoarVM/pull/1045,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1045#issuecomment-460442367,"Do not add -I/usr/local/include or -L/usr/local/lib as this will break
cross-compilation.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",-I/usr/local/include and -L/usr/local/lib are added because ld fails to find the libraries on *BSD without them. Only adding those flags if it's known that we're not cross-compiling might work better,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1045,2019-02-04T22:26:11Z,2019-02-07T14:56:21Z,2019-02-07T14:56:21Z,MERGED,True,14,10,1,https://github.com/ffontaine,Configure.pl: fix cross-compilation,1,[],https://github.com/MoarVM/MoarVM/pull/1045,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/1045#issuecomment-460445957,"Do not add -I/usr/local/include or -L/usr/local/lib as this will break
cross-compilation.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",That or checking if the OS is a *BSD before adding them. I'm not sure if Solaris would also need this or not,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1045,2019-02-04T22:26:11Z,2019-02-07T14:56:21Z,2019-02-07T14:56:21Z,MERGED,True,14,10,1,https://github.com/ffontaine,Configure.pl: fix cross-compilation,1,[],https://github.com/MoarVM/MoarVM/pull/1045,https://github.com/ffontaine,4,https://github.com/MoarVM/MoarVM/pull/1045#issuecomment-460558408,"Do not add -I/usr/local/include or -L/usr/local/lib as this will break
cross-compilation.
Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",I updated the PR to disable these paths when cross-compiling,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1047,2019-02-11T21:03:35Z,2019-03-16T14:18:58Z,2019-03-16T14:18:58Z,MERGED,True,3,2,2,https://github.com/ugexe,Update libuv to 1.26,1,[],https://github.com/MoarVM/MoarVM/pull/1047,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1047,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1047,2019-02-11T21:03:35Z,2019-03-16T14:18:58Z,2019-03-16T14:18:58Z,MERGED,True,3,2,2,https://github.com/ugexe,Update libuv to 1.26,1,[],https://github.com/MoarVM/MoarVM/pull/1047,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1047#issuecomment-462493616,,"Notables:

src,include: define UV_MAXHOSTNAMESIZE
thread: allow specifying stack size for new thread
unix,win: add uv_os_uname()",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1047,2019-02-11T21:03:35Z,2019-03-16T14:18:58Z,2019-03-16T14:18:58Z,MERGED,True,3,2,2,https://github.com/ugexe,Update libuv to 1.26,1,[],https://github.com/MoarVM/MoarVM/pull/1047,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1047#issuecomment-463139711,,"Will do this after this month's release (or at least, after the release branch is made), so we get more testing time",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1047,2019-02-11T21:03:35Z,2019-03-16T14:18:58Z,2019-03-16T14:18:58Z,MERGED,True,3,2,2,https://github.com/ugexe,Update libuv to 1.26,1,[],https://github.com/MoarVM/MoarVM/pull/1047,https://github.com/ugexe,4,https://github.com/MoarVM/MoarVM/pull/1047#issuecomment-466612726,,Closing/opening to rebuild,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1047,2019-02-11T21:03:35Z,2019-03-16T14:18:58Z,2019-03-16T14:18:58Z,MERGED,True,3,2,2,https://github.com/ugexe,Update libuv to 1.26,1,[],https://github.com/MoarVM/MoarVM/pull/1047,https://github.com/atweiden,5,https://github.com/MoarVM/MoarVM/pull/1047#issuecomment-466620653,,"@ugexe in the future you can also do
git commit --amend --no-edit
git push -f
to force a rebuild without changing anything
i have it aliased to git touch",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1049,2019-02-12T20:51:55Z,2019-03-17T02:22:53Z,2019-03-17T02:22:53Z,MERGED,True,155,99,8,https://github.com/ugexe,Add uname op,1,[],https://github.com/MoarVM/MoarVM/pull/1049,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1049,"This would allow rakudo to avoid calling out to bin/uname:
https://github.com/rakudo/rakudo/blob/a5b9fc2de5eac6734d700724fe46b2c3ab0d82fe/src/core/Kernel.pm6#L13
https://github.com/rakudo/rakudo/blob/e9351cbaa961c4d1e4ef8b4cb52418d55766a8d6/src/core/Distro.pm6#L61
Similar libuv functionality should find its way into nodejs in the near future. I'm not familiar with a JVM solution, but I can't imagine it would be too difficult. We can continue to use bin/uname as a fallback either way.","This would allow rakudo to avoid calling out to bin/uname:
https://github.com/rakudo/rakudo/blob/a5b9fc2de5eac6734d700724fe46b2c3ab0d82fe/src/core/Kernel.pm6#L13
https://github.com/rakudo/rakudo/blob/e9351cbaa961c4d1e4ef8b4cb52418d55766a8d6/src/core/Distro.pm6#L61
Similar libuv functionality should find its way into nodejs in the near future. I'm not familiar with a JVM solution, but I can't imagine it would be too difficult. We can continue to use bin/uname as a fallback either way.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1049,2019-02-12T20:51:55Z,2019-03-17T02:22:53Z,2019-03-17T02:22:53Z,MERGED,True,155,99,8,https://github.com/ugexe,Add uname op,1,[],https://github.com/MoarVM/MoarVM/pull/1049,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1049#issuecomment-466612753,"This would allow rakudo to avoid calling out to bin/uname:
https://github.com/rakudo/rakudo/blob/a5b9fc2de5eac6734d700724fe46b2c3ab0d82fe/src/core/Kernel.pm6#L13
https://github.com/rakudo/rakudo/blob/e9351cbaa961c4d1e4ef8b4cb52418d55766a8d6/src/core/Distro.pm6#L61
Similar libuv functionality should find its way into nodejs in the near future. I'm not familiar with a JVM solution, but I can't imagine it would be too difficult. We can continue to use bin/uname as a fallback either way.",Closing/opening to rebuild,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1050,2019-02-12T21:01:35Z,2019-03-17T02:21:49Z,2019-03-17T02:21:49Z,MERGED,True,2,12,1,https://github.com/ugexe,Use UV_MAXHOSTNAMESIZE as cross platform MAXHOSTNAMELEN ,1,[],https://github.com/MoarVM/MoarVM/pull/1050,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1050,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1050,2019-02-12T21:01:35Z,2019-03-17T02:21:49Z,2019-03-17T02:21:49Z,MERGED,True,2,12,1,https://github.com/ugexe,Use UV_MAXHOSTNAMESIZE as cross platform MAXHOSTNAMELEN ,1,[],https://github.com/MoarVM/MoarVM/pull/1050,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1050#issuecomment-466612809,,Closing/opening to rebuild,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1052,2019-02-12T22:18:58Z,2019-02-13T10:06:51Z,2019-02-13T10:07:03Z,MERGED,True,5,5,1,https://github.com/ugexe,Fix broken macro expansion on windows,2,[],https://github.com/MoarVM/MoarVM/pull/1052,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1052,"Moves the MVM_LOG_DEOPTS macro outside of the MVMROOT macro, which fixes the build on windows.
Resolves: #1048","Moves the MVM_LOG_DEOPTS macro outside of the MVMROOT macro, which fixes the build on windows.
Resolves: #1048",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1052,2019-02-12T22:18:58Z,2019-02-13T10:06:51Z,2019-02-13T10:07:03Z,MERGED,True,5,5,1,https://github.com/ugexe,Fix broken macro expansion on windows,2,[],https://github.com/MoarVM/MoarVM/pull/1052,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1052#issuecomment-463138187,"Moves the MVM_LOG_DEOPTS macro outside of the MVMROOT macro, which fixes the build on windows.
Resolves: #1048",Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1053,2019-02-13T00:18:11Z,2019-03-20T19:36:08Z,2019-03-27T21:30:16Z,MERGED,True,76,37,6,https://github.com/patrickbkr,Relocatable MoarVM,8,[],https://github.com/MoarVM/MoarVM/pull/1053,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1053,"This PR makes moar search for libmoar relative to its location by default, essentially making MoarVM relocatable. A Configure option --no-relocatable switches back to the old behavior.
Also MVM_exepath() is added to the public API. That function is required by the new perl6 runners in rakudo.
AIX very likely still needs work.
This PR is mostly about getting feedback from other devs. I do not expect this PR (and the respective PRs in NQP and Rakudo) to be merged right away.
I tested this on Linux+GCC, Windows10+MinGW and Windows10+VC.","This PR makes moar search for libmoar relative to its location by default, essentially making MoarVM relocatable. A Configure option --no-relocatable switches back to the old behavior.
Also MVM_exepath() is added to the public API. That function is required by the new perl6 runners in rakudo.
AIX very likely still needs work.
This PR is mostly about getting feedback from other devs. I do not expect this PR (and the respective PRs in NQP and Rakudo) to be merged right away.
I tested this on Linux+GCC, Windows10+MinGW and Windows10+VC.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1053,2019-02-13T00:18:11Z,2019-03-20T19:36:08Z,2019-03-27T21:30:16Z,MERGED,True,76,37,6,https://github.com/patrickbkr,Relocatable MoarVM,8,[],https://github.com/MoarVM/MoarVM/pull/1053,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1053#issuecomment-467677868,"This PR makes moar search for libmoar relative to its location by default, essentially making MoarVM relocatable. A Configure option --no-relocatable switches back to the old behavior.
Also MVM_exepath() is added to the public API. That function is required by the new perl6 runners in rakudo.
AIX very likely still needs work.
This PR is mostly about getting feedback from other devs. I do not expect this PR (and the respective PRs in NQP and Rakudo) to be merged right away.
I tested this on Linux+GCC, Windows10+MinGW and Windows10+VC.","This branch is now confirmed to also work on OpenBSD and MacOS. I know of no other blockers so I'm fine with this PR (and the respectives in NQP and rakudo) to be merged post release.
I can do a rebase on head before the merge if that is in any way helpful.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1054,2019-02-13T22:52:07Z,,2019-02-23T03:47:06Z,OPEN,False,19,5,3,https://github.com/apapas,use _wopen on windows,1,[],https://github.com/MoarVM/MoarVM/pull/1054,https://github.com/apapas,1,https://github.com/MoarVM/MoarVM/pull/1054,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1054,2019-02-13T22:52:07Z,,2019-02-23T03:47:06Z,OPEN,False,19,5,3,https://github.com/apapas,use _wopen on windows,1,[],https://github.com/MoarVM/MoarVM/pull/1054,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1054#issuecomment-463687719,,Maybe just swap open(2) for uv_fs_open?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1054,2019-02-13T22:52:07Z,,2019-02-23T03:47:06Z,OPEN,False,19,5,3,https://github.com/apapas,use _wopen on windows,1,[],https://github.com/MoarVM/MoarVM/pull/1054,https://github.com/apapas,3,https://github.com/MoarVM/MoarVM/pull/1054#issuecomment-463709987,,"thanks, it seems like a better approach.

Στις Πέμ, 14 Φεβ 2019 στις 6:13 μ.μ., ο/η Nick Logan <
notifications@github.com> έγραψε:
…
 Maybe just swap open(2) for uv_fs_open
 <http://docs.libuv.org/en/v1.x/fs.html?highlight=open#c.uv_fs_open>?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#1054 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AEFDG5xl0-UHDuti5pQnKeRcmeyBQcMaks5vNYsggaJpZM4a6cRO>
 .",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1054,2019-02-13T22:52:07Z,,2019-02-23T03:47:06Z,OPEN,False,19,5,3,https://github.com/apapas,use _wopen on windows,1,[],https://github.com/MoarVM/MoarVM/pull/1054,https://github.com/ugexe,4,https://github.com/MoarVM/MoarVM/pull/1054#issuecomment-466613174,,I've opened a PR swapping open(2) for uv_fs_open,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1055,2019-02-17T02:22:04Z,2019-02-17T13:02:44Z,2019-02-17T13:02:44Z,MERGED,True,56,0,2,https://github.com/manchicken,Adding some safeties for macOS,1,[],https://github.com/MoarVM/MoarVM/pull/1055,https://github.com/manchicken,1,https://github.com/MoarVM/MoarVM/pull/1055,"After spending more than two days chasing down issues with MoarVM and rakudobrew, I found a simple problem with the Homebrew binutils package being incompatible with the Xcode toolchain.
I added a quick check to make sure that those on macOS know what they're getting themselves in to.","After spending more than two days chasing down issues with MoarVM and rakudobrew, I found a simple problem with the Homebrew binutils package being incompatible with the Xcode toolchain.
I added a quick check to make sure that those on macOS know what they're getting themselves in to.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1055,2019-02-17T02:22:04Z,2019-02-17T13:02:44Z,2019-02-17T13:02:44Z,MERGED,True,56,0,2,https://github.com/manchicken,Adding some safeties for macOS,1,[],https://github.com/MoarVM/MoarVM/pull/1055,https://github.com/manchicken,2,https://github.com/MoarVM/MoarVM/pull/1055#issuecomment-464409288,"After spending more than two days chasing down issues with MoarVM and rakudobrew, I found a simple problem with the Homebrew binutils package being incompatible with the Xcode toolchain.
I added a quick check to make sure that those on macOS know what they're getting themselves in to.","Much credit for help in troubleshooting to @timo, @jnthn, and this issue here: #334",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1055,2019-02-17T02:22:04Z,2019-02-17T13:02:44Z,2019-02-17T13:02:44Z,MERGED,True,56,0,2,https://github.com/manchicken,Adding some safeties for macOS,1,[],https://github.com/MoarVM/MoarVM/pull/1055,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1055#issuecomment-464454417,"After spending more than two days chasing down issues with MoarVM and rakudobrew, I found a simple problem with the Homebrew binutils package being incompatible with the Xcode toolchain.
I added a quick check to make sure that those on macOS know what they're getting themselves in to.",Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1057,2019-02-23T03:17:47Z,,2019-02-24T02:29:43Z,OPEN,False,11,20,1,https://github.com/ugexe,Use _wopen on windows via uv_fs_open,2,[],https://github.com/MoarVM/MoarVM/pull/1057,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1057,Inspired by #1054 this uses uv_fs_open instead of open(2) (which uses _wopen/CreateFileW on Windows),Inspired by #1054 this uses uv_fs_open instead of open(2) (which uses _wopen/CreateFileW on Windows),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1058,2019-02-24T04:13:03Z,2019-03-01T03:03:29Z,2019-03-01T03:09:54Z,CLOSED,False,3,1,1,https://github.com/ugexe,Use preadv(2) instead of read(2) via uv_fs_read,1,[],https://github.com/MoarVM/MoarVM/pull/1058,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1058,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1058,2019-02-24T04:13:03Z,2019-03-01T03:03:29Z,2019-03-01T03:09:54Z,CLOSED,False,3,1,1,https://github.com/ugexe,Use preadv(2) instead of read(2) via uv_fs_read,1,[],https://github.com/MoarVM/MoarVM/pull/1058,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1058#issuecomment-466732379,,Feel free to deny this PR since I cannot actually see the advantages of readv or pread being used here anytime soon. This was primarily done as part of using more libuv.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1058,2019-02-24T04:13:03Z,2019-03-01T03:03:29Z,2019-03-01T03:09:54Z,CLOSED,False,3,1,1,https://github.com/ugexe,Use preadv(2) instead of read(2) via uv_fs_read,1,[],https://github.com/MoarVM/MoarVM/pull/1058,https://github.com/ugexe,3,https://github.com/MoarVM/MoarVM/pull/1058#issuecomment-467708108,,"I suppose we'll have to wait to hear the reasoning for f17adad which removed a nearly identical implementation 😅
The Changlog says:

Eliminate use of libuv in synchronous file handles
Switch standard handles to use the new synchronous file handle code, which
means they can now be safely used from multiple threads also

I thought libuv was ok to use synchronously if a callback was not passed though.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1058,2019-02-24T04:13:03Z,2019-03-01T03:03:29Z,2019-03-01T03:09:54Z,CLOSED,False,3,1,1,https://github.com/ugexe,Use preadv(2) instead of read(2) via uv_fs_read,1,[],https://github.com/MoarVM/MoarVM/pull/1058,https://github.com/ugexe,4,https://github.com/MoarVM/MoarVM/pull/1058#issuecomment-468524818,,"It seems to be ok to replace everything with libuv equivalents except read/uv_fs_read due to tty/eof handling on windows. So I'm going to close this for now, although I intend to poke further to figure out why libuv isn't working as expected here.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1059,2019-02-27T04:18:12Z,2019-03-08T01:15:58Z,2019-03-08T01:16:02Z,MERGED,True,8,1,2,https://github.com/MasterDuke17,JIT sp_bind_i32,1,[],https://github.com/MoarVM/MoarVM/pull/1059,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1059,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This resolves some 'bailed completely' I saw in a spesh log of gzslurping a file using Compress::Zlib.
I would consider this a POC, somebody like @niner++ would probably be able to do a more complete job.","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This resolves some 'bailed completely' I saw in a spesh log of gzslurping a file using Compress::Zlib.
I would consider this a POC, somebody like @niner++ would probably be able to do a more complete job.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1064,2019-03-04T00:45:36Z,2019-03-05T09:48:46Z,2019-03-05T22:02:18Z,MERGED,True,44,0,1,https://github.com/MasterDuke17,Add prof_* exprjit templates,1,[],https://github.com/MoarVM/MoarVM/pull/1064,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1064,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1066,2019-03-08T02:15:28Z,2019-03-08T02:15:58Z,2019-03-08T02:15:58Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Right type for null in MVM_coerce_smart_intify,1,[],https://github.com/MoarVM/MoarVM/pull/1066,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1066,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1067,2019-03-08T02:37:13Z,2019-04-18T11:13:35Z,2019-04-18T13:33:47Z,MERGED,True,10,9,1,https://github.com/vrurg, Improve check for used toolchain on macOS ,5,[],https://github.com/MoarVM/MoarVM/pull/1067,https://github.com/vrurg,1,https://github.com/MoarVM/MoarVM/pull/1067,"Don't strictly test for make compliance because XCode is using GNU make
though earlier version of it. This shouldn't break the build process
unless a feature from later version of GNU make would make it into the
Makefile which won't work in XCode's version of make. But this would
draw the whole XCode build broken anyway.
Still, to be on the safe side, this commit makes Configure.pl forcingly
choose /usr/bin/make (which always belongs to XCode) unless GNU
toolchain is requested.","Don't strictly test for make compliance because XCode is using GNU make
though earlier version of it. This shouldn't break the build process
unless a feature from later version of GNU make would make it into the
Makefile which won't work in XCode's version of make. But this would
draw the whole XCode build broken anyway.
Still, to be on the safe side, this commit makes Configure.pl forcingly
choose /usr/bin/make (which always belongs to XCode) unless GNU
toolchain is requested.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1067,2019-03-08T02:37:13Z,2019-04-18T11:13:35Z,2019-04-18T13:33:47Z,MERGED,True,10,9,1,https://github.com/vrurg, Improve check for used toolchain on macOS ,5,[],https://github.com/MoarVM/MoarVM/pull/1067,https://github.com/vrurg,2,https://github.com/MoarVM/MoarVM/pull/1067#issuecomment-471027196,"Don't strictly test for make compliance because XCode is using GNU make
though earlier version of it. This shouldn't break the build process
unless a feature from later version of GNU make would make it into the
Makefile which won't work in XCode's version of make. But this would
draw the whole XCode build broken anyway.
Still, to be on the safe side, this commit makes Configure.pl forcingly
choose /usr/bin/make (which always belongs to XCode) unless GNU
toolchain is requested.","@bdw It does work for me. I'd be happy to see the author of the original commit to test it in his setup too though. Pinged him under the corresponding commit.
With regard to the hardcoded make, neither would I like to have it this way. But as long as it exclusively for macOS and only for XCode toolchain – that'd be ok.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1067,2019-03-08T02:37:13Z,2019-04-18T11:13:35Z,2019-04-18T13:33:47Z,MERGED,True,10,9,1,https://github.com/vrurg, Improve check for used toolchain on macOS ,5,[],https://github.com/MoarVM/MoarVM/pull/1067,https://github.com/manchicken,3,https://github.com/MoarVM/MoarVM/pull/1067#issuecomment-471040578,"Don't strictly test for make compliance because XCode is using GNU make
though earlier version of it. This shouldn't break the build process
unless a feature from later version of GNU make would make it into the
Makefile which won't work in XCode's version of make. But this would
draw the whole XCode build broken anyway.
Still, to be on the safe side, this commit makes Configure.pl forcingly
choose /usr/bin/make (which always belongs to XCode) unless GNU
toolchain is requested.",I can check that out tonight. I don’t see Xcode using GNU make. Are you sure?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1067,2019-03-08T02:37:13Z,2019-04-18T11:13:35Z,2019-04-18T13:33:47Z,MERGED,True,10,9,1,https://github.com/vrurg, Improve check for used toolchain on macOS ,5,[],https://github.com/MoarVM/MoarVM/pull/1067,https://github.com/manchicken,4,https://github.com/MoarVM/MoarVM/pull/1067#issuecomment-471040899,"Don't strictly test for make compliance because XCode is using GNU make
though earlier version of it. This shouldn't break the build process
unless a feature from later version of GNU make would make it into the
Makefile which won't work in XCode's version of make. But this would
draw the whole XCode build broken anyway.
Still, to be on the safe side, this commit makes Configure.pl forcingly
choose /usr/bin/make (which always belongs to XCode) unless GNU
toolchain is requested.","Oh, you can test this yourself by brew install binutils and then adding that into the beginning of your $PATH.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1067,2019-03-08T02:37:13Z,2019-04-18T11:13:35Z,2019-04-18T13:33:47Z,MERGED,True,10,9,1,https://github.com/vrurg, Improve check for used toolchain on macOS ,5,[],https://github.com/MoarVM/MoarVM/pull/1067,https://github.com/vrurg,5,https://github.com/MoarVM/MoarVM/pull/1067#issuecomment-471104851,"Don't strictly test for make compliance because XCode is using GNU make
though earlier version of it. This shouldn't break the build process
unless a feature from later version of GNU make would make it into the
Makefile which won't work in XCode's version of make. But this would
draw the whole XCode build broken anyway.
Still, to be on the safe side, this commit makes Configure.pl forcingly
choose /usr/bin/make (which always belongs to XCode) unless GNU
toolchain is requested.","@manchicken This is the point: I don't use homebrew but MacPorts. I can't brew install and wouldn't mix up the two.
With regard to what is being used, here is /usr/bin/make output of my XCode:
GNU Make 3.81
Copyright (C) 2006  Free Software Foundation, Inc.
This is free software; see the source for copying conditions.
There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

This program built for i386-apple-darwin11.3.0

It's old, partially re-branded, but still GNU make. This what MacPorts have installed for me:
GNU Make 4.2.1
Built for x86_64-apple-darwin18.0.0
Copyright (C) 1988-2016 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

So far, the Makefile generated is perfectly compatible with both. So, my hack for using the hardcoded path for XCode toolchain is merely a way to have everything taken from the same basket just for the sake of predictability. Even though I'm not sure if there is any real sense in doing so.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1067,2019-03-08T02:37:13Z,2019-04-18T11:13:35Z,2019-04-18T13:33:47Z,MERGED,True,10,9,1,https://github.com/vrurg, Improve check for used toolchain on macOS ,5,[],https://github.com/MoarVM/MoarVM/pull/1067,https://github.com/manchicken,6,https://github.com/MoarVM/MoarVM/pull/1067#issuecomment-471109015,"Don't strictly test for make compliance because XCode is using GNU make
though earlier version of it. This shouldn't break the build process
unless a feature from later version of GNU make would make it into the
Makefile which won't work in XCode's version of make. But this would
draw the whole XCode build broken anyway.
Still, to be on the safe side, this commit makes Configure.pl forcingly
choose /usr/bin/make (which always belongs to XCode) unless GNU
toolchain is requested.","I just tested it, this works for me. Thanks, @vrurg!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1067,2019-03-08T02:37:13Z,2019-04-18T11:13:35Z,2019-04-18T13:33:47Z,MERGED,True,10,9,1,https://github.com/vrurg, Improve check for used toolchain on macOS ,5,[],https://github.com/MoarVM/MoarVM/pull/1067,https://github.com/vrurg,7,https://github.com/MoarVM/MoarVM/pull/1067#issuecomment-471120152,"Don't strictly test for make compliance because XCode is using GNU make
though earlier version of it. This shouldn't break the build process
unless a feature from later version of GNU make would make it into the
Makefile which won't work in XCode's version of make. But this would
draw the whole XCode build broken anyway.
Still, to be on the safe side, this commit makes Configure.pl forcingly
choose /usr/bin/make (which always belongs to XCode) unless GNU
toolchain is requested.",Thanks @manchicken ! Then we're good to go.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1069,2019-03-16T21:47:56Z,,2020-04-18T12:40:33Z,OPEN,False,289,280,10,https://github.com/ugexe,Give MVM_thread_new a stack size parameter,1,[],https://github.com/MoarVM/MoarVM/pull/1069,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1069,"With the addition of uv_thread_create_ex in libuv 1.26 we can now
give use a custom stack size when creating a new thread. See
http://docs.libuv.org/en/v1.x/threading.html#c.uv_thread_create_ex
for more information on the libuv implementation.","With the addition of uv_thread_create_ex in libuv 1.26 we can now
give use a custom stack size when creating a new thread. See
http://docs.libuv.org/en/v1.x/threading.html#c.uv_thread_create_ex
for more information on the libuv implementation.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1069,2019-03-16T21:47:56Z,,2020-04-18T12:40:33Z,OPEN,False,289,280,10,https://github.com/ugexe,Give MVM_thread_new a stack size parameter,1,[],https://github.com/MoarVM/MoarVM/pull/1069,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1069#issuecomment-473598323,"With the addition of uv_thread_create_ex in libuv 1.26 we can now
give use a custom stack size when creating a new thread. See
http://docs.libuv.org/en/v1.x/threading.html#c.uv_thread_create_ex
for more information on the libuv implementation.",Note that this cannot pass CI tests since there are nqp changes that go with this.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1069,2019-03-16T21:47:56Z,,2020-04-18T12:40:33Z,OPEN,False,289,280,10,https://github.com/ugexe,Give MVM_thread_new a stack size parameter,1,[],https://github.com/MoarVM/MoarVM/pull/1069,https://github.com/AlexDaniel,3,https://github.com/MoarVM/MoarVM/pull/1069#issuecomment-615861707,"With the addition of uv_thread_create_ex in libuv 1.26 we can now
give use a custom stack size when creating a new thread. See
http://docs.libuv.org/en/v1.x/threading.html#c.uv_thread_create_ex
for more information on the libuv implementation.","Is this still relevant? Also, what's the justification for adding it?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/1072,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-475891327,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","So, is there any before↔after comparison?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/samcv,3,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-475894813,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","@AlexDaniel
I
go from 8.7-8.2 max to 6.3-7.2 with my script that cats a linux iso 5 times doing malloc_trim(128*1024);",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-475895037,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim",https://gist.github.com/samcv/fce3ecdb5e8927d6a13092ed7b33f255,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/AlexDaniel,5,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-475895875,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","OK, nice! But why 128KiB?

621   The `pad' argument to malloc_trim represents the amount of free
622   trailing space to leave untrimmed. If this argument is zero,
623   only the minimum amount of memory to maintain internal data
624   structures will be left (one page or less). Non-zero arguments
625   can be supplied to maintain enough trailing space to service
626   future expected allocations without having to re-obtain memory
627   from the system.

Given how memory-hungry rakudo is, wouldn't it be better to have that argument much larger (probably in megabytes)?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/AlexDaniel,6,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-475895976,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","Not sure how to benchmark it, maybe a loop that creates a lot of objects that are thrown away relatively quickly? I'm guessing it'd be a bit faster with higher pad sizes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/samcv,7,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-475989647,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim",@AlexDaniel the size used is the default. So no real reason why it should be that size. But the conditions that it releases memory to the kernel are not guaranteed to run with any regularity.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/AlexDaniel,8,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-476327776,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","A GNU extension, called malloc_trim(), exists for releasing memory from the top of the heap, but it can be painfully slow. It hurts real bad for a lot of small objects, so it should be used sparingly.

source
See also: https://dev.to/evilmartians/cables-vs-malloctrim-or-yet-another-ruby-memory-usage-benchmark-3emo (TL;DR in some cases there's a performance hit)
How often do we run gc? Do we actually need to run malloc_trim as often?
We really need a way to benchmark this…",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/Kaiepi,9,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-477437712,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","There is no malloc_trim on *BSD.
On OpenBSD, you could use freezero to explicitly ensure memory is freed.
FreeBSD and NetBSD use jemalloc. I'll take a look at how it works tomorrow and see if I can find any way to solve this for those OSes
Edit: OpenBSD frees memory pages when needed. I'll need to test freezero more to see if it actually fixes the problems with running out of memory or not.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/Kaiepi,10,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-477730259,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","freezero appears to fix the leak with the test code in the Rakudo issue when I build moar to use it in src/io/asyncsocket.c and src/strings/utf8.c:
bastille% perl6 test.p6
153.445313MiB maxrss – before doing anything!!
｢4b32fcab2192054b82312cde4c235adda0b8ac4d.zst｣
186.664063MiB maxrss 
｢eb3123e5e60fa1635ed1ee121cec1290c290044a.zst｣
203.773438MiB maxrss 
｢f66f8be09c6023b3b53e32f7571ea536ad87b87f.zst｣
212.054688MiB maxrss 
｢b2a3441749878e338b0861b14b3b9433cc902f42.zst｣
219.449219MiB maxrss 
｢78980ed447cceff82f5efef16dbe9ee437aae809.zst｣
232.742188MiB maxrss 
｢aa94ffc33712c6f3068c6472b79a74fa70aa7b2e.zst｣
232.742188MiB maxrss 
｢a0a28432f54d608130f17247f9202f4c4939dfff.zst｣
232.742188MiB maxrss 

A couple problems though:

It can't be used everywhere in MoarVM currently since it requires a size argument, making it impossible to use with void * variables unless you already know what type they were before they were cast
Where would it be appropriate to use free instead of freezero? Not zeroing out the memory with freezero is supposed to be useful in cases where the same memory gets allocated again.

This part of the fix might be better off in a separate pullreq.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/Kaiepi,11,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-478243550,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","Sorry, should've commented on the Rakudo issue, not here.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/samcv,12,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-492822850,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","@bdw regarding the status of this ticket. We will need to implement in Configure.{pl,pm} the ability to check if malloc_trim exists. This is the only reliable way to do this, due to various libC's/malloc implementations. This way the function will only do something in case the malloc_trim function exists. On my way to Bern I may have time to try looking at this. @jnthn we have existing code to check if a function exists or not?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/jnthn,13,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-492828497,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","@samcv I believe the stuff in build/probe.pm is doing that kind of check (invoking a C compiler, checking the result, etc.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1072,2019-03-20T17:08:05Z,2019-05-24T17:27:06Z,2019-05-24T17:27:06Z,MERGED,True,47,0,7,https://github.com/samcv,Ask malloc to free kernel pages on GC collection,3,[],https://github.com/MoarVM/MoarVM/pull/1072,https://github.com/samcv,14,https://github.com/MoarVM/MoarVM/pull/1072#issuecomment-493182062,"This reduces the max memory usage used by asking malloc to free memory
pages. We set it to 128KiB which is glibc's malloc default. This should
hopefully ensure it does get collected.
Credit to:
https://www.joyfulbikeshedding.com/blog/2019-03-14-what-causes-ruby-memory-bloat.html
PS: just want to say this isn't ready for merge yet, as not all libc's (though most) have malloc_trim","I have updated the code so it checks for the malloc_trim() function. It should now work properly on all libc's, using malloc_trim only if it exists.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1073,2019-03-22T03:59:56Z,2019-04-04T03:29:45Z,2019-04-04T03:29:49Z,MERGED,True,4,7,2,https://github.com/MasterDuke17,Simplify abs_n to just use fabs and also jit it,1,[],https://github.com/MoarVM/MoarVM/pull/1073,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1073,NQP passes make m-test and Rakudo passes make m-test m-spectest. With this patch a spesh log of my $a; $a = now for ^10_000; say $a no longer has any # JIT: bailed completely because of <abs_n>.,NQP passes make m-test and Rakudo passes make m-test m-spectest. With this patch a spesh log of my $a; $a = now for ^10_000; say $a no longer has any # JIT: bailed completely because of <abs_n>.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1074,2019-03-22T04:00:54Z,2020-06-29T18:53:46Z,2020-06-29T19:33:41Z,CLOSED,False,24,0,1,https://github.com/ugexe,Add return_s|i exprjit templates,1,[],https://github.com/MoarVM/MoarVM/pull/1074,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1074,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1074,2019-03-22T04:00:54Z,2020-06-29T18:53:46Z,2020-06-29T19:33:41Z,CLOSED,False,24,0,1,https://github.com/ugexe,Add return_s|i exprjit templates,1,[],https://github.com/MoarVM/MoarVM/pull/1074,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1074#issuecomment-651316635,,"Oops, didn’t see (or forgot) that this existed. My bad, would have just merged it instead.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1075,2019-03-23T05:53:41Z,2019-03-23T08:28:43Z,2019-03-23T08:28:43Z,MERGED,True,6,0,1,https://github.com/ugexe,Add clone exprjit template,1,[],https://github.com/MoarVM/MoarVM/pull/1075,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1075,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1076,2019-03-23T19:29:48Z,2019-03-26T02:28:41Z,2019-03-26T02:28:41Z,MERGED,True,9,0,1,https://github.com/ugexe,Add replace exprjit template,1,[],https://github.com/MoarVM/MoarVM/pull/1076,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1076,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1077,2019-03-23T19:39:10Z,2019-03-26T02:32:19Z,2019-03-26T02:32:19Z,MERGED,True,6,0,1,https://github.com/ugexe,Add resume exprjit template,1,[],https://github.com/MoarVM/MoarVM/pull/1077,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1077,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1078,2019-03-23T19:56:15Z,2019-03-26T04:19:03Z,2019-03-26T04:19:03Z,MERGED,True,6,0,1,https://github.com/ugexe,Add indexingoptimized exprjit template,2,[],https://github.com/MoarVM/MoarVM/pull/1078,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1078,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1079,2019-03-23T20:05:33Z,2019-03-26T02:34:59Z,2019-03-26T02:34:59Z,MERGED,True,6,0,1,https://github.com/ugexe,Add typeparameterized exprjit template,1,[],https://github.com/MoarVM/MoarVM/pull/1079,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1079,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1080,2019-03-23T20:10:55Z,2019-03-26T04:19:20Z,2019-03-26T04:19:20Z,MERGED,True,7,0,1,https://github.com/ugexe,Add typeparameterat exprjit template,2,[],https://github.com/MoarVM/MoarVM/pull/1080,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1080,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1081,2019-03-23T21:20:32Z,,2019-05-15T14:11:05Z,OPEN,False,6,0,1,https://github.com/ugexe,Add objectid exprjit template,3,[],https://github.com/MoarVM/MoarVM/pull/1081,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1081,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1081,2019-03-23T21:20:32Z,,2019-05-15T14:11:05Z,OPEN,False,6,0,1,https://github.com/ugexe,Add objectid exprjit template,3,[],https://github.com/MoarVM/MoarVM/pull/1081,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1081#issuecomment-476452620,,"Not sure about this. The interp.c implementation stores the MVMint64 casted result into a .i64. 
  
    
      MoarVM/src/core/interp.c
    
    
        Lines 4361 to 4364
      in
      6c7810c
    
  
  
    

        
          
           OP(objectid): 
        

        
          
               GET_REG(cur_op, 0).i64 = (MVMint64)MVM_gc_object_id(tc, GET_REG(cur_op, 2).o); 
        

        
          
               cur_op += 4; 
        

        
          
               goto NEXT;",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1082,2019-03-24T00:05:21Z,2019-03-26T02:36:42Z,2019-03-26T02:36:42Z,MERGED,True,15,0,2,https://github.com/ugexe,Add fileno_fh legojit and exprjit template,1,[],https://github.com/MoarVM/MoarVM/pull/1082,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1082,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1083,2019-03-24T01:40:10Z,2019-06-01T11:44:30Z,2019-06-01T11:44:30Z,MERGED,True,29,0,1,https://github.com/ugexe,Add decodeconf and decoderepconf legojit,3,[],https://github.com/MoarVM/MoarVM/pull/1083,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1083,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1084,2019-03-24T02:05:08Z,2019-03-26T04:20:06Z,2019-03-26T04:20:06Z,MERGED,True,9,0,1,https://github.com/ugexe,Add istty_fh legojit,2,[],https://github.com/MoarVM/MoarVM/pull/1084,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1084,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1085,2019-03-24T03:50:24Z,2019-03-26T04:25:06Z,2019-03-26T04:25:06Z,MERGED,True,24,0,2,https://github.com/ugexe,Add backtrace and backtracestrings lego and exprjit template,2,[],https://github.com/MoarVM/MoarVM/pull/1085,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1085,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1085,2019-03-24T03:50:24Z,2019-03-26T04:25:06Z,2019-03-26T04:25:06Z,MERGED,True,24,0,2,https://github.com/ugexe,Add backtrace and backtracestrings lego and exprjit template,2,[],https://github.com/MoarVM/MoarVM/pull/1085,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1085#issuecomment-476452114,,How come no template for backtracestrings?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1085,2019-03-24T03:50:24Z,2019-03-26T04:25:06Z,2019-03-26T04:25:06Z,MERGED,True,24,0,2,https://github.com/ugexe,Add backtrace and backtracestrings lego and exprjit template,2,[],https://github.com/MoarVM/MoarVM/pull/1085,https://github.com/ugexe,3,https://github.com/MoarVM/MoarVM/pull/1085#issuecomment-476452982,,"How come no template for backtracestrings?

It already exists. Its not next to this, but I guess thats a result of tools/sort-expr-templates-by-oplist-order.p6",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1085,2019-03-24T03:50:24Z,2019-03-26T04:25:06Z,2019-03-26T04:25:06Z,MERGED,True,24,0,2,https://github.com/ugexe,Add backtrace and backtracestrings lego and exprjit template,2,[],https://github.com/MoarVM/MoarVM/pull/1085,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1085#issuecomment-476454628,,"It already exists. Its not next to this, but I guess thats a result of tools/sort-expr-templates-by-oplist-order.p6

Ah, ok.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1086,2019-03-27T21:42:01Z,2019-04-08T07:27:14Z,2019-06-11T08:52:12Z,MERGED,True,3,2,1,https://github.com/patrickbkr,Fix default target on nmake,1,[],https://github.com/MoarVM/MoarVM/pull/1086,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1086,When nmake is called without any argument it tries to execute the first target. Because nmake knows nothing about .PHONY it sees it as a normal target and tries to execute that. So we have to put the all target before .PHONY.,When nmake is called without any argument it tries to execute the first target. Because nmake knows nothing about .PHONY it sees it as a normal target and tries to execute that. So we have to put the all target before .PHONY.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1088,2019-03-31T13:07:54Z,2019-04-18T11:12:31Z,2019-04-18T11:12:31Z,MERGED,True,1,2,1,https://github.com/Kaiepi,Remove unnecessary (void *) cast in MVM_free_null,1,[],https://github.com/MoarVM/MoarVM/pull/1088,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1088,Code noise etc. etc.,Code noise etc. etc.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1088,2019-03-31T13:07:54Z,2019-04-18T11:12:31Z,2019-04-18T11:12:31Z,MERGED,True,1,2,1,https://github.com/Kaiepi,Remove unnecessary (void *) cast in MVM_free_null,1,[],https://github.com/MoarVM/MoarVM/pull/1088,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1088#issuecomment-478373976,Code noise etc. etc.,Can't fix the commit title since I don't have access to git for a few more days,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1089,2019-04-06T21:26:58Z,2019-04-18T11:15:59Z,2019-04-18T11:24:26Z,MERGED,True,4,4,1,https://github.com/patrickbkr,Never build a relocatable moar on OpenBSD,1,[],https://github.com/MoarVM/MoarVM/pull/1089,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1089,"See rakudo/rakudo#2818
OpenBSDs implementation of $ORIGIN in rpath is unreliable. Also it misses
a mechanism to determine the executable path in general. So even at
runtime one has a hard time implementing something like this in a robust
manner.","See rakudo/rakudo#2818
OpenBSDs implementation of $ORIGIN in rpath is unreliable. Also it misses
a mechanism to determine the executable path in general. So even at
runtime one has a hard time implementing something like this in a robust
manner.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1090,2019-04-09T16:48:53Z,,2019-04-09T16:57:16Z,OPEN,False,1,1,1,https://github.com/Garland-g,Add flag for UV_UDP_REUSEADDR,1,[],https://github.com/MoarVM/MoarVM/pull/1090,https://github.com/Garland-g,1,https://github.com/MoarVM/MoarVM/pull/1090,This change allows the UV_UDP_REUSEADDR flag to be set on a udp socket.,This change allows the UV_UDP_REUSEADDR flag to be set on a udp socket.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1090,2019-04-09T16:48:53Z,,2019-04-09T16:57:16Z,OPEN,False,1,1,1,https://github.com/Garland-g,Add flag for UV_UDP_REUSEADDR,1,[],https://github.com/MoarVM/MoarVM/pull/1090,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1090#issuecomment-481333170,This change allows the UV_UDP_REUSEADDR flag to be set on a udp socket.,Feels to me some comments are missing.  As to what bit means what in ssi->flags?  Could be missing before already.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1090,2019-04-09T16:48:53Z,,2019-04-09T16:57:16Z,OPEN,False,1,1,1,https://github.com/Garland-g,Add flag for UV_UDP_REUSEADDR,1,[],https://github.com/MoarVM/MoarVM/pull/1090,https://github.com/Garland-g,3,https://github.com/MoarVM/MoarVM/pull/1090#issuecomment-481334900,This change allows the UV_UDP_REUSEADDR flag to be set on a udp socket.,"As far as I could tell, only 0x1 is used for setting broadcast on the socket.
I'd be happy to change/add relevant documentation, but I didn't see any comments relating to the flag(s), so I'm not sure where to put that.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1092,2019-04-11T22:42:28Z,2019-04-18T11:11:33Z,2019-04-18T11:11:33Z,MERGED,True,8,4,1,https://github.com/Kaiepi,Temporarily use -fno-ret-protector when building on OpenBSD,1,[],https://github.com/MoarVM/MoarVM/pull/1092,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1092,See #1091,See #1091,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1094,2019-04-14T12:41:02Z,,2019-04-16T20:16:51Z,OPEN,False,3,1,1,https://github.com/MattOates,Update README.markdown,1,[],https://github.com/MoarVM/MoarVM/pull/1094,https://github.com/MattOates,1,https://github.com/MoarVM/MoarVM/pull/1094,Additional hint at when you don't think you have GNU tools installed,Additional hint at when you don't think you have GNU tools installed,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1094,2019-04-14T12:41:02Z,,2019-04-16T20:16:51Z,OPEN,False,3,1,1,https://github.com/MattOates,Update README.markdown,1,[],https://github.com/MoarVM/MoarVM/pull/1094,https://github.com/coke,2,https://github.com/MoarVM/MoarVM/pull/1094#issuecomment-483826965,Additional hint at when you don't think you have GNU tools installed,also: s/arisses/arises/,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1097,2019-04-24T20:26:07Z,2019-04-24T21:05:00Z,2019-06-11T08:46:38Z,MERGED,True,1,1,1,https://github.com/patrickbkr,Deobfuscate debug port handling,1,[],https://github.com/MoarVM/MoarVM/pull/1097,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1097,"The option actually is written --debug-port=.
The diff speaks for itself I guess.","The option actually is written --debug-port=.
The diff speaks for itself I guess.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1098,2019-04-26T10:36:30Z,,2019-06-01T11:41:15Z,OPEN,False,47,1,1,https://github.com/ugexe,Add various uniprop legojit,2,[],https://github.com/MoarVM/MoarVM/pull/1098,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1098,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1099,2019-05-08T18:54:45Z,2019-05-09T06:36:38Z,2019-05-09T06:36:38Z,MERGED,True,3,3,1,https://github.com/Kaiepi,Fix inlining CStruct and CUnion in CPPStruct REPR instances,1,[],https://github.com/MoarVM/MoarVM/pull/1099,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1099,"Attempting to get any inlined CStruct/CUnion attribute would throw,
claiming that it expected the attribute to be a CPPStruct.","Attempting to get any inlined CStruct/CUnion attribute would throw,
claiming that it expected the attribute to be a CPPStruct.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1100,2019-05-11T19:33:25Z,2019-05-13T11:41:29Z,2019-05-13T11:41:32Z,MERGED,True,11,11,5,https://github.com/MasterDuke17,Silence -Wlogical-op-parentheses warnings in clang,1,[],https://github.com/MoarVM/MoarVM/pull/1100,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1100,"But adding parentheses around some expressions.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","But adding parentheses around some expressions.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1102,2019-05-13T14:16:40Z,2019-05-13T21:54:20Z,2019-05-13T21:54:20Z,MERGED,True,16,7,3,https://github.com/MasterDuke17,Silence clang dangling-else & return-type warnings,1,[],https://github.com/MoarVM/MoarVM/pull/1102,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1102,"With this, both clang 8.0.0-3 and gcc 8.3.0 don't show any warnings on my machine.","With this, both clang 8.0.0-3 and gcc 8.3.0 don't show any warnings on my machine.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1103,2019-05-21T21:27:20Z,2019-05-24T18:52:19Z,2019-05-24T18:52:19Z,MERGED,True,4,2,1,https://github.com/pamplemoussecache,Move freeing of event_loop_wakeup to after uv_loop_close,2,[],https://github.com/MoarVM/MoarVM/pull/1103,https://github.com/pamplemoussecache,1,https://github.com/MoarVM/MoarVM/pull/1103,"Addresses part of the issue in #1068 . uv_loop_close tries to use instance->event_loop_wakeup, resulting in an invalid access of recently freed memory.","Addresses part of the issue in #1068 . uv_loop_close tries to use instance->event_loop_wakeup, resulting in an invalid access of recently freed memory.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1103,2019-05-21T21:27:20Z,2019-05-24T18:52:19Z,2019-05-24T18:52:19Z,MERGED,True,4,2,1,https://github.com/pamplemoussecache,Move freeing of event_loop_wakeup to after uv_loop_close,2,[],https://github.com/MoarVM/MoarVM/pull/1103,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/1103#issuecomment-495299623,"Addresses part of the issue in #1068 . uv_loop_close tries to use instance->event_loop_wakeup, resulting in an invalid access of recently freed memory.","@jnthn - if no objection, I'll merge this now",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1103,2019-05-21T21:27:20Z,2019-05-24T18:52:19Z,2019-05-24T18:52:19Z,MERGED,True,4,2,1,https://github.com/pamplemoussecache,Move freeing of event_loop_wakeup to after uv_loop_close,2,[],https://github.com/MoarVM/MoarVM/pull/1103,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1103#issuecomment-495308778,"Addresses part of the issue in #1068 . uv_loop_close tries to use instance->event_loop_wakeup, resulting in an invalid access of recently freed memory.",@bdw None from me.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1106,2019-05-26T14:13:38Z,2019-06-01T11:39:12Z,2019-06-01T11:39:12Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update libuv to version 1.29.1,1,[],https://github.com/MoarVM/MoarVM/pull/1106,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1106,Spectested clean on Linux Mint 64 bit,Spectested clean on Linux Mint 64 bit,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1106,2019-05-26T14:13:38Z,2019-06-01T11:39:12Z,2019-06-01T11:39:12Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update libuv to version 1.29.1,1,[],https://github.com/MoarVM/MoarVM/pull/1106,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1106#issuecomment-497937481,Spectested clean on Linux Mint 64 bit,"Seems the next Rakudo release is still a couple of weeks off, so let's merge this.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1107,2019-05-28T13:45:03Z,2019-05-28T13:51:34Z,2019-05-28T13:51:34Z,MERGED,True,9,9,1,https://github.com/pamplemoussecache,Update bytecode docs to define SC acronym,1,[],https://github.com/MoarVM/MoarVM/pull/1107,https://github.com/pamplemoussecache,1,https://github.com/MoarVM/MoarVM/pull/1107,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1108,2019-05-31T19:03:21Z,2019-06-03T21:41:30Z,2019-06-11T08:44:11Z,MERGED,True,14,11,1,https://github.com/patrickbkr,Default to doing a non-relocatable build,2,[],https://github.com/MoarVM/MoarVM/pull/1108,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1108,"Non relocatability is the more common case with less caveats.
Remove the --no-relocatable config, add --relocatable instead.","Non relocatability is the more common case with less caveats.
Remove the --no-relocatable config, add --relocatable instead.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1109,2019-06-01T10:49:49Z,2019-06-01T11:36:25Z,2019-06-11T08:43:57Z,MERGED,True,1,1,1,https://github.com/patrickbkr,Clean up CMP object files on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1109,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1109,"On Windows the object files for CMP are named differently. Fix realclean
to also clean up those.","On Windows the object files for CMP are named differently. Fix realclean
to also clean up those.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1110,2019-06-01T17:05:08Z,2019-06-09T16:27:38Z,2019-06-09T16:27:41Z,MERGED,True,22,9,1,https://github.com/timo,attempt to have fast mp_set and not broken windows,1,[],https://github.com/MoarVM/MoarVM/pull/1110,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/1110,hopefully this is correct; CI will show us the way,hopefully this is correct; CI will show us the way,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1111,2019-06-04T03:47:30Z,2019-06-09T16:41:19Z,2019-06-09T16:44:09Z,MERGED,True,51,5,3,https://github.com/MasterDuke17,Remove profiling overhead from profiles,1,[],https://github.com/MoarVM/MoarVM/pull/1111,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1111,"By calculating the average cost of executing the profiling functions and
then subtracting that times the number of entries from the exclusive
cost of an HLL block.
This gist (https://gist.github.com/MasterDuke17/ab7108070054f92e4cab5313033ea3f8) has some data for what the values were when https://github.com/MasterDuke17/MoarVM/blob/remove_profiling_overhead_from_profile/src/profiler/instrument.c#L399 and https://github.com/MasterDuke17/MoarVM/blob/remove_profiling_overhead_from_profile/src/profiler/instrument.c#L418 branches were taken when profiling (^5_000).grep(*.is-prime).tail.say; my $a = (^100).pick(2).join; my $b; for ^100_000 { ++$b if $a ~~ / $_ / }; say $b.","By calculating the average cost of executing the profiling functions and
then subtracting that times the number of entries from the exclusive
cost of an HLL block.
This gist (https://gist.github.com/MasterDuke17/ab7108070054f92e4cab5313033ea3f8) has some data for what the values were when https://github.com/MasterDuke17/MoarVM/blob/remove_profiling_overhead_from_profile/src/profiler/instrument.c#L399 and https://github.com/MasterDuke17/MoarVM/blob/remove_profiling_overhead_from_profile/src/profiler/instrument.c#L418 branches were taken when profiling (^5_000).grep(*.is-prime).tail.say; my $a = (^100).pick(2).join; my $b; for ^100_000 { ++$b if $a ~~ / $_ / }; say $b.",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1111,2019-06-04T03:47:30Z,2019-06-09T16:41:19Z,2019-06-09T16:44:09Z,MERGED,True,51,5,3,https://github.com/MasterDuke17,Remove profiling overhead from profiles,1,[],https://github.com/MoarVM/MoarVM/pull/1111,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1111#issuecomment-500031181,"By calculating the average cost of executing the profiling functions and
then subtracting that times the number of entries from the exclusive
cost of an HLL block.
This gist (https://gist.github.com/MasterDuke17/ab7108070054f92e4cab5313033ea3f8) has some data for what the values were when https://github.com/MasterDuke17/MoarVM/blob/remove_profiling_overhead_from_profile/src/profiler/instrument.c#L399 and https://github.com/MasterDuke17/MoarVM/blob/remove_profiling_overhead_from_profile/src/profiler/instrument.c#L418 branches were taken when profiling (^5_000).grep(*.is-prime).tail.say; my $a = (^100).pick(2).join; my $b; for ^100_000 { ++$b if $a ~~ / $_ / }; say $b.","Just a scaling factor in case the measurement is a little high.
…
Sent from my iPhone
 On Jun 7, 2019, at 4:26 PM, Jonathan Worthington ***@***.***> wrote:

 @jnthn commented on this pull request.

 In src/profiler/profile.c:

 >              MVM_profile_instrumented_start(tc, config);
 +
 +            /* Call the profiling functions a bunch of times and record how long they took. */
 +            s = uv_hrtime();
 +            for (i = 0; i < 1000; i++) {
 +                MVM_profile_log_enter(tc, tc->cur_frame->static_info, MVM_PROFILE_ENTER_NORMAL);
 +                MVM_profile_log_exit(tc);
 +            }
 +            e = uv_hrtime();
 +            tc->instance->profiling_overhead = (MVMuint64) ((e - s) / 1000) * 0.9;
 What's the * 0.9 here?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or mute the thread.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1111,2019-06-04T03:47:30Z,2019-06-09T16:41:19Z,2019-06-09T16:44:09Z,MERGED,True,51,5,3,https://github.com/MasterDuke17,Remove profiling overhead from profiles,1,[],https://github.com/MoarVM/MoarVM/pull/1111,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1111#issuecomment-500227284,"By calculating the average cost of executing the profiling functions and
then subtracting that times the number of entries from the exclusive
cost of an HLL block.
This gist (https://gist.github.com/MasterDuke17/ab7108070054f92e4cab5313033ea3f8) has some data for what the values were when https://github.com/MasterDuke17/MoarVM/blob/remove_profiling_overhead_from_profile/src/profiler/instrument.c#L399 and https://github.com/MasterDuke17/MoarVM/blob/remove_profiling_overhead_from_profile/src/profiler/instrument.c#L418 branches were taken when profiling (^5_000).grep(*.is-prime).tail.say; my $a = (^100).pick(2).join; my $b; for ^100_000 { ++$b if $a ~~ / $_ / }; say $b.","Just a scaling factor in case the measurement is a little high.

Hm, from the loop overhead, perhaps? It's quite hard to reason about, since the C compiler may also do inlining and cancel the cost of the function call overhead.
I guess let's give this a try, though; I think even slightly off compensation is going to give better numbers than none at all.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1114,2019-06-07T10:39:13Z,2019-06-09T23:05:29Z,2019-06-09T23:05:29Z,MERGED,True,193,116,9,https://github.com/Kaiepi,Implement freemem and totalmem ops,2,[],https://github.com/MoarVM/MoarVM/pull/1114,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1114,,,True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1114,2019-06-07T10:39:13Z,2019-06-09T23:05:29Z,2019-06-09T23:05:29Z,MERGED,True,193,116,9,https://github.com/Kaiepi,Implement freemem and totalmem ops,2,[],https://github.com/MoarVM/MoarVM/pull/1114,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1114#issuecomment-499845458,,See rakudo/rakudo#2959,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1116,2019-06-08T00:49:54Z,2019-06-09T16:36:38Z,2019-06-09T16:36:38Z,MERGED,True,45,0,3,https://github.com/kazcw,fix rakudo/rakudo#2965,1,[],https://github.com/MoarVM/MoarVM/pull/1116,https://github.com/kazcw,1,https://github.com/MoarVM/MoarVM/pull/1116,Exception rather than segfault in response to an attempt to HAS a type before it's defined (rakudo/rakudo#2965),Exception rather than segfault in response to an attempt to HAS a type before it's defined (rakudo/rakudo#2965),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1116,2019-06-08T00:49:54Z,2019-06-09T16:36:38Z,2019-06-09T16:36:38Z,MERGED,True,45,0,3,https://github.com/kazcw,fix rakudo/rakudo#2965,1,[],https://github.com/MoarVM/MoarVM/pull/1116,https://github.com/kazcw,2,https://github.com/MoarVM/MoarVM/pull/1116#issuecomment-500080607,Exception rather than segfault in response to an attempt to HAS a type before it's defined (rakudo/rakudo#2965),"After this patch, the following throws 3 compile-time exceptions instead of segfaulting:
class OopsUnion is repr(｢CUnion｣) { HAS OopsUnion $.more; }
class OopsStruct is repr(｢CStruct｣) { HAS OopsStruct $.more; }
class OopsPPStruct is repr(｢CPPStruct｣) { HAS OopsPPStruct $.more; }

I'm trying to figure out how to write a test that passes when it throws an exception at compile time",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1116,2019-06-08T00:49:54Z,2019-06-09T16:36:38Z,2019-06-09T16:36:38Z,MERGED,True,45,0,3,https://github.com/kazcw,fix rakudo/rakudo#2965,1,[],https://github.com/MoarVM/MoarVM/pull/1116,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1116#issuecomment-500081787,Exception rather than segfault in response to an attempt to HAS a type before it's defined (rakudo/rakudo#2965),throws-like in an EVAL maybe?,True,{'THUMBS_UP': ['https://github.com/kazcw']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1116,2019-06-08T00:49:54Z,2019-06-09T16:36:38Z,2019-06-09T16:36:38Z,MERGED,True,45,0,3,https://github.com/kazcw,fix rakudo/rakudo#2965,1,[],https://github.com/MoarVM/MoarVM/pull/1116,https://github.com/kazcw,4,https://github.com/MoarVM/MoarVM/pull/1116#issuecomment-500101817,Exception rather than segfault in response to an attempt to HAS a type before it's defined (rakudo/rakudo#2965),"Hm, this causes the new exception to be thrown upon attempts to HAS objects of types that aren't CArray/CUnion/CP*STruct. I should move the check into all the appropriate switch branches so it fails right for the never-HASable cases...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1116,2019-06-08T00:49:54Z,2019-06-09T16:36:38Z,2019-06-09T16:36:38Z,MERGED,True,45,0,3,https://github.com/kazcw,fix rakudo/rakudo#2965,1,[],https://github.com/MoarVM/MoarVM/pull/1116,https://github.com/kazcw,5,https://github.com/MoarVM/MoarVM/pull/1116#issuecomment-500139638,Exception rather than segfault in response to an attempt to HAS a type before it's defined (rakudo/rakudo#2965),"Ok, I made the check more fine grained so the new error will never occur when a null-derived pointer dereference didn't before",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1117,2019-06-08T16:18:30Z,2019-06-11T12:17:58Z,2019-06-11T12:17:58Z,MERGED,True,1,1,1,https://github.com/kazcw,fix warning in Configure in non-relocatable builds,1,[],https://github.com/MoarVM/MoarVM/pull/1117,https://github.com/kazcw,1,https://github.com/MoarVM/MoarVM/pull/1117,"Use of uninitialized value $args{""relocatable""} in numeric eq (==) at ./Configure.pl line 98.","Use of uninitialized value $args{""relocatable""} in numeric eq (==) at ./Configure.pl line 98.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1117,2019-06-08T16:18:30Z,2019-06-11T12:17:58Z,2019-06-11T12:17:58Z,MERGED,True,1,1,1,https://github.com/kazcw,fix warning in Configure in non-relocatable builds,1,[],https://github.com/MoarVM/MoarVM/pull/1117,https://github.com/kazcw,2,https://github.com/MoarVM/MoarVM/pull/1117#issuecomment-500137125,"Use of uninitialized value $args{""relocatable""} in numeric eq (==) at ./Configure.pl line 98.","This also disables overriding the OpenBSB check with --relocatable=force, which I don't think was an intentional feature?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1117,2019-06-08T16:18:30Z,2019-06-11T12:17:58Z,2019-06-11T12:17:58Z,MERGED,True,1,1,1,https://github.com/kazcw,fix warning in Configure in non-relocatable builds,1,[],https://github.com/MoarVM/MoarVM/pull/1117,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1117#issuecomment-500226827,"Use of uninitialized value $args{""relocatable""} in numeric eq (==) at ./Configure.pl line 98.","This also disables overriding the OpenBSB check with --relocatable=force, which I don't think was an intentional feature?

Good question; @patzim ?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1117,2019-06-08T16:18:30Z,2019-06-11T12:17:58Z,2019-06-11T12:17:58Z,MERGED,True,1,1,1,https://github.com/kazcw,fix warning in Configure in non-relocatable builds,1,[],https://github.com/MoarVM/MoarVM/pull/1117,https://github.com/patrickbkr,4,https://github.com/MoarVM/MoarVM/pull/1117#issuecomment-500723109,"Use of uninitialized value $args{""relocatable""} in numeric eq (==) at ./Configure.pl line 98.","This also disables overriding the OpenBSB check with --relocatable=force, which I don't think was an intentional feature?

No this was not intentional. Good find, kazcw++! I aprove of this PR being merged.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1118,2019-06-08T17:16:58Z,2019-06-09T16:32:46Z,2019-06-09T16:32:46Z,MERGED,True,5,4,2,https://github.com/Kaiepi,Fix miscellaneous compiler flag passing on OpenBSD,1,[],https://github.com/MoarVM/MoarVM/pull/1118,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1118,"-fno-omit-frame-pointer and -fno-optimize-sibling-calls were getting
overwritten by -fno-ret-protector the way this was originally written.","-fno-omit-frame-pointer and -fno-optimize-sibling-calls were getting
overwritten by -fno-ret-protector the way this was originally written.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1119,2019-06-08T23:08:59Z,2019-06-09T14:06:29Z,2019-06-16T17:05:48Z,MERGED,True,3,3,3,https://github.com/kazcw,enforce wb in get_attribute of C reprs,1,[],https://github.com/MoarVM/MoarVM/pull/1119,https://github.com/kazcw,1,https://github.com/MoarVM/MoarVM/pull/1119,"Fixes non-deterministic crashes in anything that non-trivially uses
CStruct/CPPStruct/CUnion reprs.
The type of failure this fixes usually matches these 3 patterns, alternately:

｢Segmentation fault｣
｢MoarVM panic: Internal error: zeroed target thread ID in work pass｣
/'MoarVM panic: Internal error: invalid thread ID '\d+' in GC work pass'/

Also fixed a separate bug in CUnion: it wasn't caching child objects for
attributes that are inlined.
Tested to fix the issue in MoarVM #800, Skarsnik/perl6-gumbo#5 and perl6 RT 131003.
Probably also fixes MoarVM #751 and #1087","Fixes non-deterministic crashes in anything that non-trivially uses
CStruct/CPPStruct/CUnion reprs.
The type of failure this fixes usually matches these 3 patterns, alternately:

｢Segmentation fault｣
｢MoarVM panic: Internal error: zeroed target thread ID in work pass｣
/'MoarVM panic: Internal error: invalid thread ID '\d+' in GC work pass'/

Also fixed a separate bug in CUnion: it wasn't caching child objects for
attributes that are inlined.
Tested to fix the issue in MoarVM #800, Skarsnik/perl6-gumbo#5 and perl6 RT 131003.
Probably also fixes MoarVM #751 and #1087",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1119,2019-06-08T23:08:59Z,2019-06-09T14:06:29Z,2019-06-16T17:05:48Z,MERGED,True,3,3,3,https://github.com/kazcw,enforce wb in get_attribute of C reprs,1,[],https://github.com/MoarVM/MoarVM/pull/1119,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/1119#issuecomment-502469084,"Fixes non-deterministic crashes in anything that non-trivially uses
CStruct/CPPStruct/CUnion reprs.
The type of failure this fixes usually matches these 3 patterns, alternately:

｢Segmentation fault｣
｢MoarVM panic: Internal error: zeroed target thread ID in work pass｣
/'MoarVM panic: Internal error: invalid thread ID '\d+' in GC work pass'/

Also fixed a separate bug in CUnion: it wasn't caching child objects for
attributes that are inlined.
Tested to fix the issue in MoarVM #800, Skarsnik/perl6-gumbo#5 and perl6 RT 131003.
Probably also fixes MoarVM #751 and #1087","This is amazing!!!! I just tested it, and indeed gumbo no longer crashes.
@kazcw by any chance can you add tests? Also, how did you figure it out? I've been struggling with this issue for years and multiple people have looked at it, we never got a fix until you showed up.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1120,2019-06-09T14:23:05Z,2019-06-09T16:46:33Z,2019-06-09T16:46:33Z,MERGED,True,15,0,2,https://github.com/ugexe,jit strfromcodes,1,[],https://github.com/MoarVM/MoarVM/pull/1120,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1120,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1122,2019-06-16T14:29:05Z,,2019-06-17T02:39:38Z,OPEN,False,8,6,1,https://github.com/hankache,Fix MVM_file_isexecutable on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1122,https://github.com/hankache,1,https://github.com/MoarVM/MoarVM/pull/1122,Fix rakudo/rakudo#2610,Fix rakudo/rakudo#2610,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1122,2019-06-16T14:29:05Z,,2019-06-17T02:39:38Z,OPEN,False,8,6,1,https://github.com/hankache,Fix MVM_file_isexecutable on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1122,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1122#issuecomment-502515083,Fix rakudo/rakudo#2610,"Seems a bit weird to have done this at all. PATHEXT tells cmd.exe what extensions to try when launching some command/file without an extension, but CreateProcess only tries .exe. Neither of these relate to file permissions. Perhaps removal is a better option?
Here is the commit where it was added: 532f262",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1125,2019-06-20T20:11:52Z,2019-06-21T07:13:07Z,2019-06-21T07:13:07Z,MERGED,True,2,0,1,https://github.com/Kaiepi,Fix memory leak in socket_read_bytes,1,[],https://github.com/MoarVM/MoarVM/pull/1125,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1125,"Passes make test, make spectest","Passes make test, make spectest",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1126,2019-06-21T08:31:35Z,2019-08-07T18:06:14Z,2019-08-07T18:06:14Z,MERGED,True,262,232,11,https://github.com/Kaiepi,[IP6NS Grant] Make socket family handling portable,1,[],https://github.com/MoarVM/MoarVM/pull/1126,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1126,"MVM_io_resolve_host_name assumes a 64-bit system where the values of the
AF constants are the same as those on Linux. This breaks domain name
resolution on 32-bit systems and OSes where the values of AF constants
aren't the same as Linux's, such as FreeBSD.
This makes the socket family a separate parameter from the port and uses
platform-independent socket family constants, which are translated to
the correct AF constant by MVM_io_resolve_host_name to use with
getaddrinfo.
Related to rakudo/rakudo#3007","MVM_io_resolve_host_name assumes a 64-bit system where the values of the
AF constants are the same as those on Linux. This breaks domain name
resolution on 32-bit systems and OSes where the values of AF constants
aren't the same as Linux's, such as FreeBSD.
This makes the socket family a separate parameter from the port and uses
platform-independent socket family constants, which are translated to
the correct AF constant by MVM_io_resolve_host_name to use with
getaddrinfo.
Related to rakudo/rakudo#3007",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1126,2019-06-21T08:31:35Z,2019-08-07T18:06:14Z,2019-08-07T18:06:14Z,MERGED,True,262,232,11,https://github.com/Kaiepi,[IP6NS Grant] Make socket family handling portable,1,[],https://github.com/MoarVM/MoarVM/pull/1126,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1126#issuecomment-505664527,"MVM_io_resolve_host_name assumes a 64-bit system where the values of the
AF constants are the same as those on Linux. This breaks domain name
resolution on 32-bit systems and OSes where the values of AF constants
aren't the same as Linux's, such as FreeBSD.
This makes the socket family a separate parameter from the port and uses
platform-independent socket family constants, which are translated to
the correct AF constant by MVM_io_resolve_host_name to use with
getaddrinfo.
Related to rakudo/rakudo#3007","The original commit message for this is wrong. This doesn't break on 32 bit systems since int64_t is being used anyway. But what was also happening was Rakudo was never setting the family to the upper bits of the port passed to MVM_io_resolve_host_name, meaning that its value could've been anything depending on the compiler.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1127,2019-06-21T11:12:47Z,2019-06-21T11:32:39Z,2019-06-21T11:32:39Z,MERGED,True,1,0,1,https://github.com/dogbert17,Restore accidentally deleted call to mp_neg(),1,[],https://github.com/MoarVM/MoarVM/pull/1127,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1127,"It seems to have accidentally been forgotten during recent
refactoring/optimization. Only affected 32 bit. Fixes M#1104.","It seems to have accidentally been forgotten during recent
refactoring/optimization. Only affected 32 bit. Fixes M#1104.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1128,2019-06-24T21:33:41Z,2019-10-14T22:00:15Z,2019-10-14T22:00:24Z,MERGED,True,24,0,1,https://github.com/Kaiepi,Add missing concreteness checks to most array ops,1,[],https://github.com/MoarVM/MoarVM/pull/1128,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1128,"This fixes a ton of segfaults when type objects are passed to array ops,
along with one case in particular where splicing a type object on index
0, inserting 0 elements from another type object would cause moar to
attempt to allocate an 18 quintillion element array.","This fixes a ton of segfaults when type objects are passed to array ops,
along with one case in particular where splicing a type object on index
0, inserting 0 elements from another type object would cause moar to
attempt to allocate an 18 quintillion element array.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1128,2019-06-24T21:33:41Z,2019-10-14T22:00:15Z,2019-10-14T22:00:24Z,MERGED,True,24,0,1,https://github.com/Kaiepi,Add missing concreteness checks to most array ops,1,[],https://github.com/MoarVM/MoarVM/pull/1128,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1128#issuecomment-541947184,"This fixes a ton of segfaults when type objects are passed to array ops,
along with one case in particular where splicing a type object on index
0, inserting 0 elements from another type object would cause moar to
attempt to allocate an 18 quintillion element array.",Makes sense to me; thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1130,2019-07-02T20:35:24Z,2019-07-02T23:08:49Z,2019-08-31T16:22:29Z,MERGED,True,4,2,1,https://github.com/MasterDuke17,Throw if MVM_bigint_is_prime called with too many rounds,1,[],https://github.com/MoarVM/MoarVM/pull/1130,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1130,"Valid range is 0..PRIME_SIZE (defined in libtommath).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
Fixes Raku/nqp#560.","Valid range is 0..PRIME_SIZE (defined in libtommath).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
Fixes Raku/nqp#560.",True,{'THUMBS_UP': ['https://github.com/ajs']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1130,2019-07-02T20:35:24Z,2019-07-02T23:08:49Z,2019-08-31T16:22:29Z,MERGED,True,4,2,1,https://github.com/MasterDuke17,Throw if MVM_bigint_is_prime called with too many rounds,1,[],https://github.com/MoarVM/MoarVM/pull/1130,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/1130#issuecomment-507875642,"Valid range is 0..PRIME_SIZE (defined in libtommath).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
Fixes Raku/nqp#560.",The error message is oddly specific even though it checks for just MP_OKAY. What about using MP_ITER (or MP_VAL?) and having a more generic error message if something else happens (though I'm not sure if there's any other error possible)?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1130,2019-07-02T20:35:24Z,2019-07-02T23:08:49Z,2019-08-31T16:22:29Z,MERGED,True,4,2,1,https://github.com/MasterDuke17,Throw if MVM_bigint_is_prime called with too many rounds,1,[],https://github.com/MoarVM/MoarVM/pull/1130,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1130#issuecomment-507877363,"Valid range is 0..PRIME_SIZE (defined in libtommath).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
Fixes Raku/nqp#560.","@AlexDaniel That could be worth doing also; didn't see the comment until after hitting merge, but either way, this is an improvement on silent failure...",True,{'THUMBS_UP': ['https://github.com/ajs']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1130,2019-07-02T20:35:24Z,2019-07-02T23:08:49Z,2019-08-31T16:22:29Z,MERGED,True,4,2,1,https://github.com/MasterDuke17,Throw if MVM_bigint_is_prime called with too many rounds,1,[],https://github.com/MoarVM/MoarVM/pull/1130,https://github.com/AlexDaniel,4,https://github.com/MoarVM/MoarVM/pull/1130#issuecomment-526843829,"Valid range is 0..PRIME_SIZE (defined in libtommath).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
Fixes Raku/nqp#560.",Case in point: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-08-31#l45,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1131,2019-07-04T21:58:09Z,2019-07-18T22:38:28Z,2019-07-18T22:38:28Z,MERGED,True,31,31,1,https://github.com/patrickbkr,Build with spaces in path,1,[],https://github.com/MoarVM/MoarVM/pull/1131,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1131,"The only bit missing was some quoting to get the build install the include
files successfully.
This makes spaces in path work on Windows only. On Linux the build still fails because the dyncall build fails when path has spaces in it. I did notify the dyncall team about that.
See rakudo#3031.","The only bit missing was some quoting to get the build install the include
files successfully.
This makes spaces in path work on Windows only. On Linux the build still fails because the dyncall build fails when path has spaces in it. I did notify the dyncall team about that.
See rakudo#3031.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1131,2019-07-04T21:58:09Z,2019-07-18T22:38:28Z,2019-07-18T22:38:28Z,MERGED,True,31,31,1,https://github.com/patrickbkr,Build with spaces in path,1,[],https://github.com/MoarVM/MoarVM/pull/1131,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/1131#issuecomment-510525395,"The only bit missing was some quoting to get the build install the include
files successfully.
This makes spaces in path work on Windows only. On Linux the build still fails because the dyncall build fails when path has spaces in it. I did notify the dyncall team about that.
See rakudo#3031.","I'm curious, so this makes spaces work but "" characters in paths are now illegal, right? This is fine on Windows because "" is not allowed in filenames, but on linux that'd just sweep things under the rug. Last time I checked, Makefiles were really stupid when it came to proper handling of filenames. However, that is in Configure.pl, so can't we do some proper escaping there?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1131,2019-07-04T21:58:09Z,2019-07-18T22:38:28Z,2019-07-18T22:38:28Z,MERGED,True,31,31,1,https://github.com/patrickbkr,Build with spaces in path,1,[],https://github.com/MoarVM/MoarVM/pull/1131,https://github.com/patrickbkr,3,https://github.com/MoarVM/MoarVM/pull/1131#issuecomment-510779067,"The only bit missing was some quoting to get the build install the include
files successfully.
This makes spaces in path work on Windows only. On Linux the build still fails because the dyncall build fails when path has spaces in it. I did notify the dyncall team about that.
See rakudo#3031.","In Rakudo and NQP the quoting in Makefiles is abstracted in a few macros (thanks to the shiny templating system vrurg introduced), so there the quoting can change depending on the make flavour. Moar hasn't yet received that treatment. Thus the plain ""put stuff in quotes"" solution.
I estimate that having spaces in the path on Windows is more common than having quotes in the path on Linux. So I'd say let's just go with the quotes for now and once moar gets the same shiny template system as rakudo and nqp now have, we get the full solution.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1132,2019-07-05T12:38:25Z,2019-09-19T13:10:04Z,2019-09-19T13:10:04Z,MERGED,True,4,3,1,https://github.com/Kaiepi,Fix the CStr REPR's copy_to function,1,[],https://github.com/MoarVM/MoarVM/pull/1132,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1132,"Its code was copy-pasted from CPointer with no changes whatsoever. This
changes it so it actually does what it's supposed to be doing.","Its code was copy-pasted from CPointer with no changes whatsoever. This
changes it so it actually does what it's supposed to be doing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1133,2019-07-07T20:57:40Z,2019-07-11T17:36:13Z,2019-07-11T17:36:16Z,MERGED,True,28,12,3,https://github.com/MasterDuke17,Jit and spesh optimize smrt_intify,2,[],https://github.com/MoarVM/MoarVM/pull/1133,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1133,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1134,2019-07-08T21:32:13Z,2019-08-20T12:33:39Z,2019-08-20T12:33:59Z,MERGED,True,978,729,35,https://github.com/bdw,JIT - Floating Point Support for Expression JIT,29,['enhancement'],https://github.com/MoarVM/MoarVM/pull/1134,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/1134,"This PR adds basic floating point support for the expression JIT.
Some of the design decisions:

no different operators for arithmetic operations, store, copy etc. between integer and floating point operands. (Basically, every operator whose implementation and output types are determined completely by the input type, is treated as generic, because the tiler can sort out the difference perfectly). Types are checked by the expression template compiler and to a lesser extent by the JIT.
in the register allocator (and emitter), treat register sets consistently as bitmaps, register identifiers as numbers. In x86-64, we treat the register set as a 32-bit bitmap (16 GPR, 16 SSE registers, ignoring x87 and MMX registers for the moment!). Live ranges also get a set of permissible registers - this helps to handle register requirerements.
Register allocator now enforces 'two-operand' order - i.e, the output argument should be the same, as the first input argument, for binary operators.","This PR adds basic floating point support for the expression JIT.
Some of the design decisions:

no different operators for arithmetic operations, store, copy etc. between integer and floating point operands. (Basically, every operator whose implementation and output types are determined completely by the input type, is treated as generic, because the tiler can sort out the difference perfectly). Types are checked by the expression template compiler and to a lesser extent by the JIT.
in the register allocator (and emitter), treat register sets consistently as bitmaps, register identifiers as numbers. In x86-64, we treat the register set as a 32-bit bitmap (16 GPR, 16 SSE registers, ignoring x87 and MMX registers for the moment!). Live ranges also get a set of permissible registers - this helps to handle register requirerements.
Register allocator now enforces 'two-operand' order - i.e, the output argument should be the same, as the first input argument, for binary operators.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1134,2019-07-08T21:32:13Z,2019-08-20T12:33:39Z,2019-08-20T12:33:59Z,MERGED,True,978,729,35,https://github.com/bdw,JIT - Floating Point Support for Expression JIT,29,['enhancement'],https://github.com/MoarVM/MoarVM/pull/1134,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/1134#issuecomment-509400383,"This PR adds basic floating point support for the expression JIT.
Some of the design decisions:

no different operators for arithmetic operations, store, copy etc. between integer and floating point operands. (Basically, every operator whose implementation and output types are determined completely by the input type, is treated as generic, because the tiler can sort out the difference perfectly). Types are checked by the expression template compiler and to a lesser extent by the JIT.
in the register allocator (and emitter), treat register sets consistently as bitmaps, register identifiers as numbers. In x86-64, we treat the register set as a 32-bit bitmap (16 GPR, 16 SSE registers, ignoring x87 and MMX registers for the moment!). Live ranges also get a set of permissible registers - this helps to handle register requirerements.
Register allocator now enforces 'two-operand' order - i.e, the output argument should be the same, as the first input argument, for binary operators.","Oh, it also pulls in an instruction encoding fix for DynASM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1136,2019-07-10T21:07:00Z,2019-07-11T17:37:11Z,2019-07-11T17:37:15Z,MERGED,True,37,9,5,https://github.com/MasterDuke17,Jit captureposarg_n,1,[],https://github.com/MoarVM/MoarVM/pull/1136,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1136,"Also change MVM_args_get_pos_num into MVM_args_get_required_pos_num and
MVM_args_get_optional_pos_num to match the implementations for the other
types.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Also change MVM_args_get_pos_num into MVM_args_get_required_pos_num and
MVM_args_get_optional_pos_num to match the implementations for the other
types.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1137,2019-07-11T08:45:13Z,,2019-09-24T21:49:11Z,OPEN,False,1765,398,48,https://github.com/Kaiepi,Implement NativeCall wide string support,46,[],https://github.com/MoarVM/MoarVM/pull/1137,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1137,See the Rakudo pullreq for info on what this does,See the Rakudo pullreq for info on what this does,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1137,2019-07-11T08:45:13Z,,2019-09-24T21:49:11Z,OPEN,False,1765,398,48,https://github.com/Kaiepi,Implement NativeCall wide string support,46,[],https://github.com/MoarVM/MoarVM/pull/1137,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1137#issuecomment-510422379,See the Rakudo pullreq for info on what this does,"Looks like AppVeyor is unhappy with my use of stringapiset.h, which isn't available before Vista... I'll need to find some other way to transcode wide strings to UTF-8 since Windows didn't support it as a locale rather than just a code page until very recently. Since Windows wide strings are UTF-16, I'll probably have to make some changes to src/strings/utf16.c to support transcoding strings of types other than MVMString and char *.
Edit: I didn't need to lol",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1137,2019-07-11T08:45:13Z,,2019-09-24T21:49:11Z,OPEN,False,1765,398,48,https://github.com/Kaiepi,Implement NativeCall wide string support,46,[],https://github.com/MoarVM/MoarVM/pull/1137,https://github.com/patrickbkr,3,https://github.com/MoarVM/MoarVM/pull/1137#issuecomment-534762673,See the Rakudo pullreq for info on what this does,Is there a reason why this isn't merged yet? Do the core devs need a poke?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1138,2019-07-13T01:52:35Z,2019-07-19T21:43:58Z,2019-07-19T21:43:58Z,MERGED,True,6,6,1,https://github.com/Kaiepi,Fix pointer arithmetic in inlined CArrays in CStruct/CPPStruct REPRs,1,[],https://github.com/MoarVM/MoarVM/pull/1138,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1138,"Fixes rakudo/rakudo#3009
I ran 5000 iterations of the test from the issue on both Windows and OpenBSD to confirm this fixes the issue.","Fixes rakudo/rakudo#3009
I ran 5000 iterations of the test from the issue on both Windows and OpenBSD to confirm this fixes the issue.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1139,2019-07-13T12:46:28Z,2019-09-15T22:37:20Z,2019-09-15T22:37:26Z,MERGED,True,180,102,19,https://github.com/MasterDuke17,Add context to error messages,5,[],https://github.com/MoarVM/MoarVM/pull/1139,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1139,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1141,2019-07-13T16:49:16Z,2019-08-22T23:12:47Z,2019-08-22T23:12:52Z,MERGED,True,82,65,4,https://github.com/timo,NativeCall: output index of argument with repr mismatch,1,[],https://github.com/MoarVM/MoarVM/pull/1141,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/1141,"also properly says ""native cast"" or ""return type"" for those.
before:
Native call expected return type with CArray representation, but got a CPointer (NativeCall::Types::Pointer[int64])

after:
Native call expected argument 3 with CArray representation, but got a CPointer (NativeCall::Types::Pointer[int64])","also properly says ""native cast"" or ""return type"" for those.
before:
Native call expected return type with CArray representation, but got a CPointer (NativeCall::Types::Pointer[int64])

after:
Native call expected argument 3 with CArray representation, but got a CPointer (NativeCall::Types::Pointer[int64])",True,{'THUMBS_UP': ['https://github.com/Kaiepi']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1142,2019-07-13T20:22:25Z,2019-07-18T22:36:05Z,2019-07-18T22:36:48Z,MERGED,True,26,0,1,https://github.com/MasterDuke17,Jit getuniprop_(int|bool|str),1,[],https://github.com/MoarVM/MoarVM/pull/1142,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1142,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1145,2019-07-19T09:45:27Z,,2020-04-18T12:36:58Z,OPEN,False,9,7,6,https://github.com/DataKinds,Fixed some small bugs exposed by `-Wall`.,4,[],https://github.com/MoarVM/MoarVM/pull/1145,https://github.com/DataKinds,1,https://github.com/MoarVM/MoarVM/pull/1145,"Hello!
This pull request fixes a couple minor bugs that showed up when I enabled -Wall (and one that showed up without it). The bugs include an printf formatting issue, an improperly specified return value, and a couple values which could end up uninitialized or strange depending on the code path taken.
I also added explicit defaults on a couple switch statements to be more explicit about their intents.","Hello!
This pull request fixes a couple minor bugs that showed up when I enabled -Wall (and one that showed up without it). The bugs include an printf formatting issue, an improperly specified return value, and a couple values which could end up uninitialized or strange depending on the code path taken.
I also added explicit defaults on a couple switch statements to be more explicit about their intents.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1145,2019-07-19T09:45:27Z,,2020-04-18T12:36:58Z,OPEN,False,9,7,6,https://github.com/DataKinds,Fixed some small bugs exposed by `-Wall`.,4,[],https://github.com/MoarVM/MoarVM/pull/1145,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/1145#issuecomment-615860986,"Hello!
This pull request fixes a couple minor bugs that showed up when I enabled -Wall (and one that showed up without it). The bugs include an printf formatting issue, an improperly specified return value, and a couple values which could end up uninitialized or strange depending on the code path taken.
I also added explicit defaults on a couple switch statements to be more explicit about their intents.",@DataKinds any updates? :),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1146,2019-07-20T12:44:01Z,2019-07-22T20:03:27Z,2019-07-22T20:03:28Z,MERGED,True,2,2,1,https://github.com/Kaiepi,Only use -fno-ret-protector with Clang on OpenBSD if the JIT is enabled,1,[],https://github.com/MoarVM/MoarVM/pull/1146,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1146,"This flag is only needed to make the legojit work, every other part of
MoarVM works fine with RETGUARD enabled.","This flag is only needed to make the legojit work, every other part of
MoarVM works fine with RETGUARD enabled.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1147,2019-07-22T09:10:30Z,2019-07-22T20:03:12Z,2019-07-22T20:03:12Z,MERGED,True,3169,2,8,https://github.com/ZhongnianTao,"Add gb2312 encode, decode, and decodestream support",6,[],https://github.com/MoarVM/MoarVM/pull/1147,https://github.com/ZhongnianTao,1,https://github.com/MoarVM/MoarVM/pull/1147,"This pull request adds gb2312 encoding (simplified Chinese) to MoarVM.
It consists encode, decode, and decodestream support of gb2312.","This pull request adds gb2312 encoding (simplified Chinese) to MoarVM.
It consists encode, decode, and decodestream support of gb2312.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1148,2019-07-22T17:38:32Z,2019-07-22T20:02:37Z,2019-07-22T20:02:37Z,MERGED,True,13,0,1,https://github.com/Altai-man,Init debug socket for Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1148,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1148,"To avoid error during socket creation, we need to init it on Windows. I suspect we do it for user code, but debugserver does not have strong coverage and was not working on Windows until this fix.","To avoid error during socket creation, we need to init it on Windows. I suspect we do it for user code, but debugserver does not have strong coverage and was not working on Windows until this fix.",True,"{'HOORAY': ['https://github.com/timo'], 'HEART': ['https://github.com/jnthn']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1148,2019-07-22T17:38:32Z,2019-07-22T20:02:37Z,2019-07-22T20:02:37Z,MERGED,True,13,0,1,https://github.com/Altai-man,Init debug socket for Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1148,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1148#issuecomment-513896166,"To avoid error during socket creation, we need to init it on Windows. I suspect we do it for user code, but debugserver does not have strong coverage and was not working on Windows until this fix.",See libuv/libuv@af31d01 -- is something like this also needed?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1148,2019-07-22T17:38:32Z,2019-07-22T20:02:37Z,2019-07-22T20:02:37Z,MERGED,True,13,0,1,https://github.com/Altai-man,Init debug socket for Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1148,https://github.com/Altai-man,3,https://github.com/MoarVM/MoarVM/pull/1148#issuecomment-513930882,"To avoid error during socket creation, we need to init it on Windows. I suspect we do it for user code, but debugserver does not have strong coverage and was not working on Windows until this fix.","Looking there: I don't see why it should. As I understand it, related libuv commit refers to a fact that different parts of libuv will be aborted if WSAStartup fails, which is not desired in safe mode.
However, our debugserver must have a socket to talk with the client protocol, it is pointless to have a debugserver thread that can't speak with the process, hence the panic.
Of course, if in future we'll get support of something other than sockets to communicate, the situation will be different, but then the code must be different too.
On the other hand I am not really a C pro, so I expect for someone more experienced with libuv to look at this commit.
Also, I will build a full nqp/rakudo stack on Windows, not only moarvm, after getting some sleep and will see if this truly enables debugging features for us or just moves failure point forward.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1148,2019-07-22T17:38:32Z,2019-07-22T20:02:37Z,2019-07-22T20:02:37Z,MERGED,True,13,0,1,https://github.com/Altai-man,Init debug socket for Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1148,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/1148#issuecomment-513932756,"To avoid error during socket creation, we need to init it on Windows. I suspect we do it for user code, but debugserver does not have strong coverage and was not working on Windows until this fix.","However, our debugserver must have a socket to talk with the client protocol, it is pointless to have a debugserver thread that can't speak with the process, hence the panic.

Yes, agree with this. This code path is only followed if we're starting in debug mode. I can imagine it's important if people write applications that don't do networking stuff and should be able to work in safe mode, so it's good libuv does that, but I don't think it's applicable in our situation.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1150,2019-07-28T13:54:02Z,2019-07-31T16:55:17Z,2019-07-31T16:55:17Z,MERGED,True,210,1277,1,https://github.com/ZhongnianTao,Generate conversion table from a source file,3,[],https://github.com/MoarVM/MoarVM/pull/1150,https://github.com/ZhongnianTao,1,https://github.com/MoarVM/MoarVM/pull/1150,"This PR updates the conversion table of GB2312 with unicode.org-mappings/EASTASIA/GB/GB2312.TXT from https://haible.de/bruno/charsets/conversion-tables/GB2312.html, instead of using python libraries to generate the table.","This PR updates the conversion table of GB2312 with unicode.org-mappings/EASTASIA/GB/GB2312.TXT from https://haible.de/bruno/charsets/conversion-tables/GB2312.html, instead of using python libraries to generate the table.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1150,2019-07-28T13:54:02Z,2019-07-31T16:55:17Z,2019-07-31T16:55:17Z,MERGED,True,210,1277,1,https://github.com/ZhongnianTao,Generate conversion table from a source file,3,[],https://github.com/MoarVM/MoarVM/pull/1150,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/1150#issuecomment-515771976,"This PR updates the conversion table of GB2312 with unicode.org-mappings/EASTASIA/GB/GB2312.TXT from https://haible.de/bruno/charsets/conversion-tables/GB2312.html, instead of using python libraries to generate the table.","Two ideas:

Nothing in the source file indicates how this table was generated. I think it would be helpful to leave a few comments for the next person who has to work on this.
I see at least four relatively large sections of just zeros (I counted ≈3534, ≈1216, ≈3553, ≈12179 zeros). Given that these are int32, that's ≈82 kB of wasted memory for an encoding that most programs won't even use. Wouldn't it be better to remove large sections with zeros and instead shift the index accordingly on the fly?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1150,2019-07-28T13:54:02Z,2019-07-31T16:55:17Z,2019-07-31T16:55:17Z,MERGED,True,210,1277,1,https://github.com/ZhongnianTao,Generate conversion table from a source file,3,[],https://github.com/MoarVM/MoarVM/pull/1150,https://github.com/ZhongnianTao,3,https://github.com/MoarVM/MoarVM/pull/1150#issuecomment-516086445,"This PR updates the conversion table of GB2312 with unicode.org-mappings/EASTASIA/GB/GB2312.TXT from https://haible.de/bruno/charsets/conversion-tables/GB2312.html, instead of using python libraries to generate the table.","Comments about how the tables are generated have added.
The four largest sections of zeros are removed, and the function is adjusted, which saves memory for 41131 int32 (~161KB). The remaining sections are small (333, 316, 295, 246, and 234) so further saving memory might not compensate increased time coefficient (if-else branches) of the conversion function.",True,{'THUMBS_UP': ['https://github.com/AlexDaniel']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1150,2019-07-28T13:54:02Z,2019-07-31T16:55:17Z,2019-07-31T16:55:17Z,MERGED,True,210,1277,1,https://github.com/ZhongnianTao,Generate conversion table from a source file,3,[],https://github.com/MoarVM/MoarVM/pull/1150,https://github.com/AlexDaniel,4,https://github.com/MoarVM/MoarVM/pull/1150#issuecomment-516119307,"This PR updates the conversion table of GB2312 with unicode.org-mappings/EASTASIA/GB/GB2312.TXT from https://haible.de/bruno/charsets/conversion-tables/GB2312.html, instead of using python libraries to generate the table.",Awesome!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1150,2019-07-28T13:54:02Z,2019-07-31T16:55:17Z,2019-07-31T16:55:17Z,MERGED,True,210,1277,1,https://github.com/ZhongnianTao,Generate conversion table from a source file,3,[],https://github.com/MoarVM/MoarVM/pull/1150,https://github.com/samcv,5,https://github.com/MoarVM/MoarVM/pull/1150#issuecomment-516932404,"This PR updates the conversion table of GB2312 with unicode.org-mappings/EASTASIA/GB/GB2312.TXT from https://haible.de/bruno/charsets/conversion-tables/GB2312.html, instead of using python libraries to generate the table.",Looks good. Merging this. Rakudo and roast have also had their PR merged.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1151,2019-07-28T23:22:22Z,,2019-07-29T00:58:20Z,OPEN,False,405,254,10,https://github.com/Kaiepi,[WIP] Implement ops for manipulating file descriptors and HANDLEs,4,[],https://github.com/MoarVM/MoarVM/pull/1151,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1151,This is unfinished; several ops have yet to be implemented. This will need to be tested on Windows before it can be merged.,This is unfinished; several ops have yet to be implemented. This will need to be tested on Windows before it can be merged.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1152,2019-07-31T21:34:39Z,2019-08-23T06:24:09Z,2019-08-23T06:24:09Z,CLOSED,False,434,121,6,https://github.com/Kaiepi,[IP6NS Grant] Retry connecting over IPv4 when IPv6 connections fail in certain cases,1,[],https://github.com/MoarVM/MoarVM/pull/1152,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1152,"On systems where IPv6 is enabled, but misconfigured, hostnames can
resolve to IPv6 addresses when AF_UNSPEC is specified, but actually
trying to connect with them returns an error of some sort. Don't throw
when this happens; instead, keep track of whether or not IPv6 actually
works in the MoarVM instance, and when it doesn't, resolve the given
hostname to an IPv4 address before reattempting to connect, if
possible.
This comes with some minor refactors to make being able to check errors
like this possible in the future if needed when binding sockets. That I
currently have no way of testing since I don't own any domain names.
This alongside #1126 fixes rakudo/rakudo#3007 and rakudo/rakudo#2162, but the two cannot be merged at the same time as either one will need to be rebased after the other gets merged. The other pullreq should be merged first.
Passes nqp's make test and Rakudo's make test and make spectest.","On systems where IPv6 is enabled, but misconfigured, hostnames can
resolve to IPv6 addresses when AF_UNSPEC is specified, but actually
trying to connect with them returns an error of some sort. Don't throw
when this happens; instead, keep track of whether or not IPv6 actually
works in the MoarVM instance, and when it doesn't, resolve the given
hostname to an IPv4 address before reattempting to connect, if
possible.
This comes with some minor refactors to make being able to check errors
like this possible in the future if needed when binding sockets. That I
currently have no way of testing since I don't own any domain names.
This alongside #1126 fixes rakudo/rakudo#3007 and rakudo/rakudo#2162, but the two cannot be merged at the same time as either one will need to be rebased after the other gets merged. The other pullreq should be merged first.
Passes nqp's make test and Rakudo's make test and make spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1152,2019-07-31T21:34:39Z,2019-08-23T06:24:09Z,2019-08-23T06:24:09Z,CLOSED,False,434,121,6,https://github.com/Kaiepi,[IP6NS Grant] Retry connecting over IPv4 when IPv6 connections fail in certain cases,1,[],https://github.com/MoarVM/MoarVM/pull/1152,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1152#issuecomment-519687042,"On systems where IPv6 is enabled, but misconfigured, hostnames can
resolve to IPv6 addresses when AF_UNSPEC is specified, but actually
trying to connect with them returns an error of some sort. Don't throw
when this happens; instead, keep track of whether or not IPv6 actually
works in the MoarVM instance, and when it doesn't, resolve the given
hostname to an IPv4 address before reattempting to connect, if
possible.
This comes with some minor refactors to make being able to check errors
like this possible in the future if needed when binding sockets. That I
currently have no way of testing since I don't own any domain names.
This alongside #1126 fixes rakudo/rakudo#3007 and rakudo/rakudo#2162, but the two cannot be merged at the same time as either one will need to be rebased after the other gets merged. The other pullreq should be merged first.
Passes nqp's make test and Rakudo's make test and make spectest.","Rebased.
I tested various ways to break IPv6 over loopback, but none of them actually ended up making binding sockets return an error (I did find some new ways for connections to do so though). There's nothing left for me to do here before review.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1152,2019-07-31T21:34:39Z,2019-08-23T06:24:09Z,2019-08-23T06:24:09Z,CLOSED,False,434,121,6,https://github.com/Kaiepi,[IP6NS Grant] Retry connecting over IPv4 when IPv6 connections fail in certain cases,1,[],https://github.com/MoarVM/MoarVM/pull/1152,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/1152#issuecomment-524189030,"On systems where IPv6 is enabled, but misconfigured, hostnames can
resolve to IPv6 addresses when AF_UNSPEC is specified, but actually
trying to connect with them returns an error of some sort. Don't throw
when this happens; instead, keep track of whether or not IPv6 actually
works in the MoarVM instance, and when it doesn't, resolve the given
hostname to an IPv4 address before reattempting to connect, if
possible.
This comes with some minor refactors to make being able to check errors
like this possible in the future if needed when binding sockets. That I
currently have no way of testing since I don't own any domain names.
This alongside #1126 fixes rakudo/rakudo#3007 and rakudo/rakudo#2162, but the two cannot be merged at the same time as either one will need to be rebased after the other gets merged. The other pullreq should be merged first.
Passes nqp's make test and Rakudo's make test and make spectest.","This is the wrong approach to fixing the issues. There are multiple, more general problems with how sockets and host name resolution are being handled combined that are causing them, not just one specific to IPv6.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1153,2019-08-05T04:22:33Z,2019-08-19T03:39:34Z,2022-02-09T21:04:58Z,MERGED,True,16,2,3,https://github.com/niner,"Fix bogus ""Decoder may not be used concurrently"" after exceptions",1,[],https://github.com/MoarVM/MoarVM/pull/1153,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1153,"If stream decoding throws an exception (like on bad UTF-8) the deocder's
in_use flag would stay set, preventing any further use of the decoder.
This can lead to great action-at-a-distance effects.
Fix by extending the MVM_tc_(set|release)_ex_release_mutex mechanism to
support such flags in addition to fully blown mutexes. This way we can
keep the light weight in_use flag for the cost of a single bit test and
branch when throwing exceptions.","If stream decoding throws an exception (like on bad UTF-8) the deocder's
in_use flag would stay set, preventing any further use of the decoder.
This can lead to great action-at-a-distance effects.
Fix by extending the MVM_tc_(set|release)_ex_release_mutex mechanism to
support such flags in addition to fully blown mutexes. This way we can
keep the light weight in_use flag for the cost of a single bit test and
branch when throwing exceptions.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1153,2019-08-05T04:22:33Z,2019-08-19T03:39:34Z,2022-02-09T21:04:58Z,MERGED,True,16,2,3,https://github.com/niner,"Fix bogus ""Decoder may not be used concurrently"" after exceptions",1,[],https://github.com/MoarVM/MoarVM/pull/1153,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1153#issuecomment-522399807,"If stream decoding throws an exception (like on bad UTF-8) the deocder's
in_use flag would stay set, preventing any further use of the decoder.
This can lead to great action-at-a-distance effects.
Fix by extending the MVM_tc_(set|release)_ex_release_mutex mechanism to
support such flags in addition to fully blown mutexes. This way we can
keep the light weight in_use flag for the cost of a single bit test and
branch when throwing exceptions.",Added the suggested MVM_tc_set_ex_release_atomic and merged. Thanks for the review!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1157,2019-08-09T22:53:29Z,2019-08-25T13:55:16Z,2020-07-22T01:23:37Z,MERGED,True,1,1,1,https://github.com/deven,"Use updated dyncall library with ""execstack"" fix.",1,[],https://github.com/MoarVM/MoarVM/pull/1157,https://github.com/deven,1,https://github.com/MoarVM/MoarVM/pull/1157,"The following bugs relate to the ""execstack"" flag being set on MoarVM,
even though executable stacks weren't actually needed:
 https://github.com/MoarVM/MoarVM/issues/470
 https://github.com/MoarVM/MoarVM/issues/794

The following pull request was merged on 2018-06-14:
 https://github.com/MoarVM/dyncall/pull/5

The pull request above does indeed fix MoarVM's fork of the dyncall library
to avoid accidentally setting the ""execstack"" flag, and eliminates the
need for workarounds like ""execstack -c libmoar.so"".  (It also makes
MoarVM more secure by avoiding unnecessary use of executable stacks.)
The bugs above were believed to be fixed after the pull request above
was merged into the MoarVM/dyncall repository on 2018-06-14.  However,
the main MoarVM/MoarVM repository's git submodule for dyncall remained
pinned to revision 1dabd7c (2015-03-05), so MoarVM wasn't actually using
the updated dyncall library by default.
This commit pins MoarVM's git submodule to revision a4e512b (2018-06-14),
incorporating the ""execstack"" fixes into the default MoarVM build.","The following bugs relate to the ""execstack"" flag being set on MoarVM,
even though executable stacks weren't actually needed:
 https://github.com/MoarVM/MoarVM/issues/470
 https://github.com/MoarVM/MoarVM/issues/794

The following pull request was merged on 2018-06-14:
 https://github.com/MoarVM/dyncall/pull/5

The pull request above does indeed fix MoarVM's fork of the dyncall library
to avoid accidentally setting the ""execstack"" flag, and eliminates the
need for workarounds like ""execstack -c libmoar.so"".  (It also makes
MoarVM more secure by avoiding unnecessary use of executable stacks.)
The bugs above were believed to be fixed after the pull request above
was merged into the MoarVM/dyncall repository on 2018-06-14.  However,
the main MoarVM/MoarVM repository's git submodule for dyncall remained
pinned to revision 1dabd7c (2015-03-05), so MoarVM wasn't actually using
the updated dyncall library by default.
This commit pins MoarVM's git submodule to revision a4e512b (2018-06-14),
incorporating the ""execstack"" fixes into the default MoarVM build.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1158,2019-08-15T16:15:29Z,,2019-08-23T21:05:52Z,OPEN,False,2446,2502,17,https://github.com/cygx,Revamp DLL subsystem,4,[],https://github.com/MoarVM/MoarVM/pull/1158,https://github.com/cygx,1,https://github.com/MoarVM/MoarVM/pull/1158,"The DLL subsystem (namespace MVM_dll_*) was never integrated into NativeCall and only ever used to load extops.
This pull request kills off the obsolete DLLSym repr and re-purposes some ops that were never exposed to NQP, changing
freelib             r(str)
findsym             w(obj) r(str) r(str)
dropsym             r(obj)

into
droplib             r(obj)
getlib              w(obj) r(str) r(obj)
findsym             w(int64) r(obj) r(str)

As stated, these ops appear to have been unused, so I don't think we need to deprecate the former first?
A corresponding Perl6-level interface has been implemented (cf rakudo/rakudo#3123 and Raku/nqp#573).
Example usage:
my $lib = DLL.load('moar.dll');
LEAVE $lib.drop;

say $lib.findsym('MVM_vm_create_instance');

or
DLL::proc<puts>.cast(:(Str --> int32)).('hello world');

This seems to be a useful thing to have if we want to fatpack bytecode/resources into executables.","The DLL subsystem (namespace MVM_dll_*) was never integrated into NativeCall and only ever used to load extops.
This pull request kills off the obsolete DLLSym repr and re-purposes some ops that were never exposed to NQP, changing
freelib             r(str)
findsym             w(obj) r(str) r(str)
dropsym             r(obj)

into
droplib             r(obj)
getlib              w(obj) r(str) r(obj)
findsym             w(int64) r(obj) r(str)

As stated, these ops appear to have been unused, so I don't think we need to deprecate the former first?
A corresponding Perl6-level interface has been implemented (cf rakudo/rakudo#3123 and Raku/nqp#573).
Example usage:
my $lib = DLL.load('moar.dll');
LEAVE $lib.drop;

say $lib.findsym('MVM_vm_create_instance');

or
DLL::proc<puts>.cast(:(Str --> int32)).('hello world');

This seems to be a useful thing to have if we want to fatpack bytecode/resources into executables.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1158,2019-08-15T16:15:29Z,,2019-08-23T21:05:52Z,OPEN,False,2446,2502,17,https://github.com/cygx,Revamp DLL subsystem,4,[],https://github.com/MoarVM/MoarVM/pull/1158,https://github.com/cygx,2,https://github.com/MoarVM/MoarVM/pull/1158#issuecomment-524462239,"The DLL subsystem (namespace MVM_dll_*) was never integrated into NativeCall and only ever used to load extops.
This pull request kills off the obsolete DLLSym repr and re-purposes some ops that were never exposed to NQP, changing
freelib             r(str)
findsym             w(obj) r(str) r(str)
dropsym             r(obj)

into
droplib             r(obj)
getlib              w(obj) r(str) r(obj)
findsym             w(int64) r(obj) r(str)

As stated, these ops appear to have been unused, so I don't think we need to deprecate the former first?
A corresponding Perl6-level interface has been implemented (cf rakudo/rakudo#3123 and Raku/nqp#573).
Example usage:
my $lib = DLL.load('moar.dll');
LEAVE $lib.drop;

say $lib.findsym('MVM_vm_create_instance');

or
DLL::proc<puts>.cast(:(Str --> int32)).('hello world');

This seems to be a useful thing to have if we want to fatpack bytecode/resources into executables.","Turns out this probably should go through the whole deprecation thing - otherwise, trying to run new bytecode with old VM versions will give unhelpful validation errors...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1159,2019-08-17T21:27:55Z,2019-08-18T14:26:26Z,2019-08-18T14:26:26Z,MERGED,True,28,9,2,https://github.com/cygx,add MVM_vm_run_bytecode() as alternative to  MVM_vm_run_file(),2,[],https://github.com/MoarVM/MoarVM/pull/1159,https://github.com/cygx,1,https://github.com/MoarVM/MoarVM/pull/1159,Prerequisite to creating self-contained executables.,Prerequisite to creating self-contained executables.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1160,2019-08-22T15:47:52Z,2019-08-25T08:10:21Z,2019-08-25T08:10:21Z,MERGED,True,11276,2,8,https://github.com/ZhongnianTao,"Add GB18030 encode, decode, and decodestream support ",3,[],https://github.com/MoarVM/MoarVM/pull/1160,https://github.com/ZhongnianTao,1,https://github.com/MoarVM/MoarVM/pull/1160,"This pull request adds GB18030 encoding, the more recent extension to gb2312, to MoarVM.
It contains encode, decode, and decodestream support of GB18030.","This pull request adds GB18030 encoding, the more recent extension to gb2312, to MoarVM.
It contains encode, decode, and decodestream support of GB18030.",True,"{'THUMBS_UP': ['https://github.com/caasi', 'https://github.com/zhuomingliang']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1160,2019-08-22T15:47:52Z,2019-08-25T08:10:21Z,2019-08-25T08:10:21Z,MERGED,True,11276,2,8,https://github.com/ZhongnianTao,"Add GB18030 encode, decode, and decodestream support ",3,[],https://github.com/MoarVM/MoarVM/pull/1160,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/1160#issuecomment-524610364,"This pull request adds GB18030 encoding, the more recent extension to gb2312, to MoarVM.
It contains encode, decode, and decodestream support of GB18030.",Merging,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1161,2019-08-23T13:05:32Z,,2021-01-10T13:37:42Z,OPEN,False,48,12,5,https://github.com/cygx,Pull out top-level API into standalone header,2,[],https://github.com/MoarVM/MoarVM/pull/1161,https://github.com/cygx,1,https://github.com/MoarVM/MoarVM/pull/1161,"Our installed headers are broken: While one would expect something like
#include <moar/moar.h>

to work, it does not as we basically dump all our header files into the public include directory without any care for relative paths.
This will take some time to fix, but as a stopgap measure, this pull request adds api.h as a standalone header declaring the functions in the MVM_vm_* namespace.
The signature of the newly introduced MVM_vm_run_bytecode() function has been changed to no longer refer to any MVM* types (besides MVMInstance).","Our installed headers are broken: While one would expect something like
#include <moar/moar.h>

to work, it does not as we basically dump all our header files into the public include directory without any care for relative paths.
This will take some time to fix, but as a stopgap measure, this pull request adds api.h as a standalone header declaring the functions in the MVM_vm_* namespace.
The signature of the newly introduced MVM_vm_run_bytecode() function has been changed to no longer refer to any MVM* types (besides MVMInstance).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1161,2019-08-23T13:05:32Z,,2021-01-10T13:37:42Z,OPEN,False,48,12,5,https://github.com/cygx,Pull out top-level API into standalone header,2,[],https://github.com/MoarVM/MoarVM/pull/1161,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1161#issuecomment-757477692,"Our installed headers are broken: While one would expect something like
#include <moar/moar.h>

to work, it does not as we basically dump all our header files into the public include directory without any care for relative paths.
This will take some time to fix, but as a stopgap measure, this pull request adds api.h as a standalone header declaring the functions in the MVM_vm_* namespace.
The signature of the newly introduced MVM_vm_run_bytecode() function has been changed to no longer refer to any MVM* types (besides MVMInstance).",@cygx you still working on this?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1162,2019-08-24T22:19:23Z,2019-08-25T22:17:52Z,2019-08-25T22:17:52Z,MERGED,True,6,0,1,https://github.com/MasterDuke17,Jit some num ops,1,[],https://github.com/MoarVM/MoarVM/pull/1162,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1162,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1164,2019-08-26T16:49:24Z,2019-09-23T10:37:54Z,2019-09-23T10:37:55Z,MERGED,True,1,1,1,https://github.com/dogbert17,Fix incorrect return type in get_effective_size,1,[],https://github.com/MoarVM/MoarVM/pull/1164,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1164,"Probably a typo. The code makes certain the the return value can't
be negative.","Probably a typo. The code makes certain the the return value can't
be negative.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1165,2019-08-27T14:16:23Z,2019-08-27T14:29:11Z,2019-08-27T14:29:11Z,MERGED,True,1,0,1,https://github.com/dogbert17,Add missing break statement,1,[],https://github.com/MoarVM/MoarVM/pull/1165,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1165,"Discovered by Coverity and confirmed as legit by jnthn++
Spectested without errors","Discovered by Coverity and confirmed as legit by jnthn++
Spectested without errors",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1166,2019-08-27T19:30:04Z,2019-10-07T12:19:53Z,2019-10-07T12:19:53Z,MERGED,True,1001,675,4,https://github.com/Kaiepi,[IP6NS Grant] Improve hostname resolution,7,[],https://github.com/MoarVM/MoarVM/pull/1166,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1166,"This makes a few different changes to hostname resolution. First, it makes it so when resolving hostnames on systems where no IPv6 addresses actually exist on the interface used, an IPv6 address will never be returned by MVM_io_resolve_host_name, and likewise for IPv4. Second, rather than MVM_io_resolve_host_name only returning the first address returned by getaddrinfo, it returns all of them instead, and functions using its return value now attempt to use all of them before they actually throw. Finally, MVM_io_resolve_host_name now takes parameters for socket types, protocols, and passivity, which makes it so it doesn't return addresses that can't actually be used when those are specified.
This is currently broken, as the uv_udp_t handle bound when MVM_io_async_socket_udp gets called is zeroed out in write_setup. Interestingly, if I don't set handle->data to NULL, the SocketSetupInfo struct there ends up being the only struct member not to be zeroed out. Maybe the GC's involved getting involved here somehow?
Fixes rakudo/rakudo#3007
Fixes rakudo/rakudo#2162","This makes a few different changes to hostname resolution. First, it makes it so when resolving hostnames on systems where no IPv6 addresses actually exist on the interface used, an IPv6 address will never be returned by MVM_io_resolve_host_name, and likewise for IPv4. Second, rather than MVM_io_resolve_host_name only returning the first address returned by getaddrinfo, it returns all of them instead, and functions using its return value now attempt to use all of them before they actually throw. Finally, MVM_io_resolve_host_name now takes parameters for socket types, protocols, and passivity, which makes it so it doesn't return addresses that can't actually be used when those are specified.
This is currently broken, as the uv_udp_t handle bound when MVM_io_async_socket_udp gets called is zeroed out in write_setup. Interestingly, if I don't set handle->data to NULL, the SocketSetupInfo struct there ends up being the only struct member not to be zeroed out. Maybe the GC's involved getting involved here somehow?
Fixes rakudo/rakudo#3007
Fixes rakudo/rakudo#2162",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1166,2019-08-27T19:30:04Z,2019-10-07T12:19:53Z,2019-10-07T12:19:53Z,MERGED,True,1001,675,4,https://github.com/Kaiepi,[IP6NS Grant] Improve hostname resolution,7,[],https://github.com/MoarVM/MoarVM/pull/1166,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1166#issuecomment-526694388,"This makes a few different changes to hostname resolution. First, it makes it so when resolving hostnames on systems where no IPv6 addresses actually exist on the interface used, an IPv6 address will never be returned by MVM_io_resolve_host_name, and likewise for IPv4. Second, rather than MVM_io_resolve_host_name only returning the first address returned by getaddrinfo, it returns all of them instead, and functions using its return value now attempt to use all of them before they actually throw. Finally, MVM_io_resolve_host_name now takes parameters for socket types, protocols, and passivity, which makes it so it doesn't return addresses that can't actually be used when those are specified.
This is currently broken, as the uv_udp_t handle bound when MVM_io_async_socket_udp gets called is zeroed out in write_setup. Interestingly, if I don't set handle->data to NULL, the SocketSetupInfo struct there ends up being the only struct member not to be zeroed out. Maybe the GC's involved getting involved here somehow?
Fixes rakudo/rakudo#3007
Fixes rakudo/rakudo#2162","OK, this should be ready for review now",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1166,2019-08-27T19:30:04Z,2019-10-07T12:19:53Z,2019-10-07T12:19:53Z,MERGED,True,1001,675,4,https://github.com/Kaiepi,[IP6NS Grant] Improve hostname resolution,7,[],https://github.com/MoarVM/MoarVM/pull/1166,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/1166#issuecomment-528983466,"This makes a few different changes to hostname resolution. First, it makes it so when resolving hostnames on systems where no IPv6 addresses actually exist on the interface used, an IPv6 address will never be returned by MVM_io_resolve_host_name, and likewise for IPv4. Second, rather than MVM_io_resolve_host_name only returning the first address returned by getaddrinfo, it returns all of them instead, and functions using its return value now attempt to use all of them before they actually throw. Finally, MVM_io_resolve_host_name now takes parameters for socket types, protocols, and passivity, which makes it so it doesn't return addresses that can't actually be used when those are specified.
This is currently broken, as the uv_udp_t handle bound when MVM_io_async_socket_udp gets called is zeroed out in write_setup. Interestingly, if I don't set handle->data to NULL, the SocketSetupInfo struct there ends up being the only struct member not to be zeroed out. Maybe the GC's involved getting involved here somehow?
Fixes rakudo/rakudo#3007
Fixes rakudo/rakudo#2162","I can't find any memory leaks specific to async sockets with OpenBSD's malloc_gdump anymore with the last commit (Valgrind complains about a missing syscall wrapper and bails with sockets tests on the only box I can run it on).
The last commit also includes some fixes to MVMROOTs in the async sockets files, since they weren't always being given every pointer known by whatever function it's used from that the GC keeps track of (hopefully I'm not on the wrong track here).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1166,2019-08-27T19:30:04Z,2019-10-07T12:19:53Z,2019-10-07T12:19:53Z,MERGED,True,1001,675,4,https://github.com/Kaiepi,[IP6NS Grant] Improve hostname resolution,7,[],https://github.com/MoarVM/MoarVM/pull/1166,https://github.com/Kaiepi,4,https://github.com/MoarVM/MoarVM/pull/1166#issuecomment-531069194,"This makes a few different changes to hostname resolution. First, it makes it so when resolving hostnames on systems where no IPv6 addresses actually exist on the interface used, an IPv6 address will never be returned by MVM_io_resolve_host_name, and likewise for IPv4. Second, rather than MVM_io_resolve_host_name only returning the first address returned by getaddrinfo, it returns all of them instead, and functions using its return value now attempt to use all of them before they actually throw. Finally, MVM_io_resolve_host_name now takes parameters for socket types, protocols, and passivity, which makes it so it doesn't return addresses that can't actually be used when those are specified.
This is currently broken, as the uv_udp_t handle bound when MVM_io_async_socket_udp gets called is zeroed out in write_setup. Interestingly, if I don't set handle->data to NULL, the SocketSetupInfo struct there ends up being the only struct member not to be zeroed out. Maybe the GC's involved getting involved here somehow?
Fixes rakudo/rakudo#3007
Fixes rakudo/rakudo#2162",Fixed the GC issues I found with MVM_GC_DEBUG,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1167,2019-08-27T19:33:14Z,2021-09-29T02:09:20Z,2021-09-29T02:10:29Z,MERGED,True,6,6,1,https://github.com/rbnx,Improve MVM_bithacks_next_greater_pow2 function,1,[],https://github.com/MoarVM/MoarVM/pull/1167,https://github.com/rbnx,1,https://github.com/MoarVM/MoarVM/pull/1167,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1167,2019-08-27T19:33:14Z,2021-09-29T02:09:20Z,2021-09-29T02:10:29Z,MERGED,True,6,6,1,https://github.com/rbnx,Improve MVM_bithacks_next_greater_pow2 function,1,[],https://github.com/MoarVM/MoarVM/pull/1167,https://github.com/zhuomingliang,2,https://github.com/MoarVM/MoarVM/pull/1167#issuecomment-929763713,,"thanks, merged.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1168,2019-08-27T20:35:57Z,,2021-01-10T13:34:51Z,OPEN,False,2,2,1,https://github.com/rbnx,change MVM_VECTOR growth factor from 2 to 1.5,1,[],https://github.com/MoarVM/MoarVM/pull/1168,https://github.com/rbnx,1,https://github.com/MoarVM/MoarVM/pull/1168,1.5 is usually a better growth factor for dynamic arrays,1.5 is usually a better growth factor for dynamic arrays,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1168,2019-08-27T20:35:57Z,,2021-01-10T13:34:51Z,OPEN,False,2,2,1,https://github.com/rbnx,change MVM_VECTOR growth factor from 2 to 1.5,1,[],https://github.com/MoarVM/MoarVM/pull/1168,https://github.com/bdw,2,https://github.com/MoarVM/MoarVM/pull/1168#issuecomment-525602060,1.5 is usually a better growth factor for dynamic arrays,"@rbnx curious, why?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1168,2019-08-27T20:35:57Z,,2021-01-10T13:34:51Z,OPEN,False,2,2,1,https://github.com/rbnx,change MVM_VECTOR growth factor from 2 to 1.5,1,[],https://github.com/MoarVM/MoarVM/pull/1168,https://github.com/rbnx,3,https://github.com/MoarVM/MoarVM/pull/1168#issuecomment-525801720,1.5 is usually a better growth factor for dynamic arrays,"@bdw here is a nice explanation in the Memory Handling section:
https://github.com/facebook/folly/blob/master/folly/docs/FBVector.md",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1168,2019-08-27T20:35:57Z,,2021-01-10T13:34:51Z,OPEN,False,2,2,1,https://github.com/rbnx,change MVM_VECTOR growth factor from 2 to 1.5,1,[],https://github.com/MoarVM/MoarVM/pull/1168,https://github.com/bdw,4,https://github.com/MoarVM/MoarVM/pull/1168#issuecomment-526132407,1.5 is usually a better growth factor for dynamic arrays,"@rbnx thank you, I learn something new every day. Travis and AppVeyor seem to hate it, though, but that may have been because of the recent perl5.20 thing. So I'll run it locally to verify.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1168,2019-08-27T20:35:57Z,,2021-01-10T13:34:51Z,OPEN,False,2,2,1,https://github.com/rbnx,change MVM_VECTOR growth factor from 2 to 1.5,1,[],https://github.com/MoarVM/MoarVM/pull/1168,https://github.com/bdw,5,https://github.com/MoarVM/MoarVM/pull/1168#issuecomment-526135013,1.5 is usually a better growth factor for dynamic arrays,There seems to be an infinite loop bug here...,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1168,2019-08-27T20:35:57Z,,2021-01-10T13:34:51Z,OPEN,False,2,2,1,https://github.com/rbnx,change MVM_VECTOR growth factor from 2 to 1.5,1,[],https://github.com/MoarVM/MoarVM/pull/1168,https://github.com/rbnx,6,https://github.com/MoarVM/MoarVM/pull/1168#issuecomment-526793218,1.5 is usually a better growth factor for dynamic arrays,"Oops that was happening here: MVM_VECTOR_INIT(xx,0).
fixed it by making the default newsize 8 when x_alloc is 0",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1169,2019-08-27T22:48:35Z,2019-08-27T23:01:01Z,2019-08-27T23:01:01Z,MERGED,True,10,8,2,https://github.com/vrurg,Separate includes from submodules from system-wide includes,2,[],https://github.com/MoarVM/MoarVM/pull/1169,https://github.com/vrurg,1,https://github.com/MoarVM/MoarVM/pull/1169,"Currently configuration variable cincludes contains -I flags for both
includes from 3rdparty for for those found with pkg-config. This is
not correct as cincludes can be used by NQP and Rakudo for their
C compilations. An example of a situation when this is necessary is
rakudo/rakudo#3136 where ffi.h cannot be found even though moar is
being compiled with it.","Currently configuration variable cincludes contains -I flags for both
includes from 3rdparty for for those found with pkg-config. This is
not correct as cincludes can be used by NQP and Rakudo for their
C compilations. An example of a situation when this is necessary is
rakudo/rakudo#3136 where ffi.h cannot be found even though moar is
being compiled with it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1169,2019-08-27T22:48:35Z,2019-08-27T23:01:01Z,2019-08-27T23:01:01Z,MERGED,True,10,8,2,https://github.com/vrurg,Separate includes from submodules from system-wide includes,2,[],https://github.com/MoarVM/MoarVM/pull/1169,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/1169#issuecomment-525515792,"Currently configuration variable cincludes contains -I flags for both
includes from 3rdparty for for those found with pkg-config. This is
not correct as cincludes can be used by NQP and Rakudo for their
C compilations. An example of a situation when this is necessary is
rakudo/rakudo#3136 where ffi.h cannot be found even though moar is
being compiled with it.",Makes sense to me.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1173,2019-09-10T16:13:14Z,2019-10-17T22:20:35Z,2019-10-17T22:20:36Z,CLOSED,False,1,1,1,https://github.com/dogbert17,Update libuv to version 1.32.0,1,[],https://github.com/MoarVM/MoarVM/pull/1173,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1173,Clean spectest (under Linux),Clean spectest (under Linux),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1173,2019-09-10T16:13:14Z,2019-10-17T22:20:35Z,2019-10-17T22:20:36Z,CLOSED,False,1,1,1,https://github.com/dogbert17,Update libuv to version 1.32.0,1,[],https://github.com/MoarVM/MoarVM/pull/1173,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1173#issuecomment-543385486,Clean spectest (under Linux),Superseded by #1197,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1174,2019-09-10T18:55:15Z,2019-09-10T22:28:53Z,2019-09-10T22:29:19Z,MERGED,True,15,14,5,https://github.com/MasterDuke17,Silence some clang warnings,1,[],https://github.com/MoarVM/MoarVM/pull/1174,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1174,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1176,2019-09-13T16:19:06Z,2019-09-14T13:33:23Z,2019-09-14T17:28:55Z,MERGED,True,189,92,13,https://github.com/bdw,Deoptimization in the expression JIT compiler,5,[],https://github.com/MoarVM/MoarVM/pull/1176,https://github.com/bdw,1,https://github.com/MoarVM/MoarVM/pull/1176,"Adds deoptimization guard support in the expression JIT compiler.
To achieve this, I made the argument to deopt_one be the deopt_idx, using which we lookup the deopt_target, rather than using the deopt_target itself. This saves another search in the materialization logic. This makes the implementation of the sp_guard opcodes non-special as far as the template preprocessor is concerned, except that we do have to introduce a global sync.","Adds deoptimization guard support in the expression JIT compiler.
To achieve this, I made the argument to deopt_one be the deopt_idx, using which we lookup the deopt_target, rather than using the deopt_target itself. This saves another search in the materialization logic. This makes the implementation of the sp_guard opcodes non-special as far as the template preprocessor is concerned, except that we do have to introduce a global sync.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1176,2019-09-13T16:19:06Z,2019-09-14T13:33:23Z,2019-09-14T17:28:55Z,MERGED,True,189,92,13,https://github.com/bdw,Deoptimization in the expression JIT compiler,5,[],https://github.com/MoarVM/MoarVM/pull/1176,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1176#issuecomment-531498094,"Adds deoptimization guard support in the expression JIT compiler.
To achieve this, I made the argument to deopt_one be the deopt_idx, using which we lookup the deopt_target, rather than using the deopt_target itself. This saves another search in the materialization logic. This makes the implementation of the sp_guard opcodes non-special as far as the template preprocessor is concerned, except that we do have to introduce a global sync.",Really nice set of improvements! :-),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1180,2019-09-23T17:18:53Z,2019-09-23T17:43:19Z,2019-09-23T21:58:48Z,MERGED,True,1,1,1,https://github.com/dogbert17,Fix for M#1172,1,[],https://github.com/MoarVM/MoarVM/pull/1180,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1180,"Probably a copy paste error. The result of getegid() should of course be
compared to the statbuf.gid field and not its uid field. The fix is
spectest clean.
robertle++ for finding this bug","Probably a copy paste error. The result of getegid() should of course be
compared to the statbuf.gid field and not its uid field. The fix is
spectest clean.
robertle++ for finding this bug",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1181,2019-09-23T17:38:55Z,2019-09-25T12:47:54Z,2019-09-25T12:47:54Z,MERGED,True,3,3,1,https://github.com/dogbert17,Add a few missing static keywords before a few functions,1,[],https://github.com/MoarVM/MoarVM/pull/1181,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1181,Set the functions scope to the containing file (compilation unit). Spectest was clean.,Set the functions scope to the containing file (compilation unit). Spectest was clean.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1182,2019-09-24T21:16:53Z,2019-10-11T20:15:43Z,2019-10-11T20:16:14Z,MERGED,True,67,9,10,https://github.com/patrickbkr,Unicode path support on Windows,5,[],https://github.com/MoarVM/MoarVM/pull/1182,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1182,"This change set makes rakudo runnable in folders that contain unicode characters on Windows.
I'd really like another set of eyes on these changes, thus the draft PR.","This change set makes rakudo runnable in folders that contain unicode characters on Windows.
I'd really like another set of eyes on these changes, thus the draft PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1183,2019-09-27T19:26:10Z,2019-09-27T19:31:39Z,2019-09-27T19:31:39Z,MERGED,True,4,2,1,https://github.com/dogbert17,Fix possible SEGV in async_spawn_on_exit,1,[],https://github.com/MoarVM/MoarVM/pull/1183,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1183,"If a GC is triggered by the call to close_stdin, which can allocate,
the os_handle pointer will no longer point to to the mutex being
used a few lines above, leading to a SEGV. Fixed by saving the
pointer to the mutex in a local variable. This is ok since the mutex
itself will not move.","If a GC is triggered by the call to close_stdin, which can allocate,
the os_handle pointer will no longer point to to the mutex being
used a few lines above, leading to a SEGV. Fixed by saving the
pointer to the mutex in a local variable. This is ok since the mutex
itself will not move.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1184,2019-09-29T14:50:11Z,2020-04-18T16:45:55Z,2020-04-18T16:45:55Z,CLOSED,False,295,178,13,https://github.com/niner,Fix access to freed memory in resolve_using_guards,1,[],https://github.com/MoarVM/MoarVM/pull/1184,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1184,"Commit acb04a4 fixed outdated pointers in the
guard set, but it was still possible that the guard set was freed while still
in use by resolve_using_guards as the next GC safe point may occur in
evaluate_guards. Fix this by turning SpeshPluginState into a 6model object, so
we can let the GC figure out whether the state is still in use somewhere or not","Commit acb04a4 fixed outdated pointers in the
guard set, but it was still possible that the guard set was freed while still
in use by resolve_using_guards as the next GC safe point may occur in
evaluate_guards. Fix this by turning SpeshPluginState into a 6model object, so
we can let the GC figure out whether the state is still in use somewhere or not",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1184,2019-09-29T14:50:11Z,2020-04-18T16:45:55Z,2020-04-18T16:45:55Z,CLOSED,False,295,178,13,https://github.com/niner,Fix access to freed memory in resolve_using_guards,1,[],https://github.com/MoarVM/MoarVM/pull/1184,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1184#issuecomment-615901702,"Commit acb04a4 fixed outdated pointers in the
guard set, but it was still possible that the guard set was freed while still
in use by resolve_using_guards as the next GC safe point may occur in
evaluate_guards. Fix this by turning SpeshPluginState into a 6model object, so
we can let the GC figure out whether the state is still in use somewhere or not",Has been merged already,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1185,2019-09-30T19:27:20Z,2019-10-02T16:09:28Z,2019-10-02T16:09:33Z,MERGED,True,5,1,1,https://github.com/MasterDuke17,Check if subtracting a successor's exclusive...,1,[],https://github.com/MoarVM/MoarVM/pull/1185,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1185,"time would cause the total exclusive time to underflow. If so, just set
it to 0 instead.
This fixes profiles sometimes having an exclusive time for a routine of e.g., 36893488147419.13ms.","time would cause the total exclusive time to underflow. If so, just set
it to 0 instead.
This fixes profiles sometimes having an exclusive time for a routine of e.g., 36893488147419.13ms.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1186,2019-10-03T16:21:27Z,2019-10-03T16:25:34Z,2019-10-03T16:25:35Z,MERGED,True,1,0,1,https://github.com/dogbert17,Fix uninitialized field in MVM_profiler_log_gc_start(),1,[],https://github.com/MoarVM/MoarVM/pull/1186,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1186,"MVM_profiler_log_gc_start() must initialize gc->num_stolen_gen2roots
Problem detected by valgrind.","MVM_profiler_log_gc_start() must initialize gc->num_stolen_gen2roots
Problem detected by valgrind.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1190,2019-10-08T19:02:33Z,2020-05-04T14:27:59Z,2020-05-04T14:28:00Z,CLOSED,False,33,32,1,https://github.com/Kaiepi,[IP6NS Grant] Close synchronous sockets properly,1,[],https://github.com/MoarVM/MoarVM/pull/1190,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1190,"close should not be used to close sockets on Windows; that's meant for
file handles, not sockets.","close should not be used to close sockets on Windows; that's meant for
file handles, not sockets.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1190,2019-10-08T19:02:33Z,2020-05-04T14:27:59Z,2020-05-04T14:28:00Z,CLOSED,False,33,32,1,https://github.com/Kaiepi,[IP6NS Grant] Close synchronous sockets properly,1,[],https://github.com/MoarVM/MoarVM/pull/1190,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1190#issuecomment-623497703,"close should not be used to close sockets on Windows; that's meant for
file handles, not sockets.","This PR is a bit premature. I need to mull over how sync sockets get closed (or shutdown, eventually) more before making any changes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1191,2019-10-10T16:50:31Z,2019-10-10T18:19:16Z,2019-10-10T18:19:16Z,CLOSED,False,1,1,1,https://github.com/cognominal,"Returns ""0.0"" instead of ""0"" for a zero double",1,[],https://github.com/MoarVM/MoarVM/pull/1191,https://github.com/cognominal,1,https://github.com/MoarVM/MoarVM/pull/1191,"so that a roundtrip thru stringification is a noop.
That is the following prints 1
nqp -e 'my $i := 0.0; say(nqp::eqaddr($i.WHAT, (+~$i).WHAT))'
I was unable to test it because I was not able to build nqp with the modified
moar on catalina.
perl Configure.pl --prefix=/usr --backends=moar --with-moar=/Users/cog/git/MoarVM/moar
make: *** No rule to make target /Users/cog/git/MoarVM/../share/nqp/lib/MAST/Nodes.nqp', needed by gen/moar/stage1/MASTNodes.nqp'.  Stop.","so that a roundtrip thru stringification is a noop.
That is the following prints 1
nqp -e 'my $i := 0.0; say(nqp::eqaddr($i.WHAT, (+~$i).WHAT))'
I was unable to test it because I was not able to build nqp with the modified
moar on catalina.
perl Configure.pl --prefix=/usr --backends=moar --with-moar=/Users/cog/git/MoarVM/moar
make: *** No rule to make target /Users/cog/git/MoarVM/../share/nqp/lib/MAST/Nodes.nqp', needed by gen/moar/stage1/MASTNodes.nqp'.  Stop.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1191,2019-10-10T16:50:31Z,2019-10-10T18:19:16Z,2019-10-10T18:19:16Z,CLOSED,False,1,1,1,https://github.com/cognominal,"Returns ""0.0"" instead of ""0"" for a zero double",1,[],https://github.com/MoarVM/MoarVM/pull/1191,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1191#issuecomment-540686250,"so that a roundtrip thru stringification is a noop.
That is the following prints 1
nqp -e 'my $i := 0.0; say(nqp::eqaddr($i.WHAT, (+~$i).WHAT))'
I was unable to test it because I was not able to build nqp with the modified
moar on catalina.
perl Configure.pl --prefix=/usr --backends=moar --with-moar=/Users/cog/git/MoarVM/moar
make: *** No rule to make target /Users/cog/git/MoarVM/../share/nqp/lib/MAST/Nodes.nqp', needed by gen/moar/stage1/MASTNodes.nqp'.  Stop.","NQP
Test Summary Report
-------------------
t/nqp/109-coercions.t                (Wstat: 0 Tests: 28 Failed: 3)
  Failed tests:  14, 18-19
t/hll/06-sprintf.t                   (Wstat: 0 Tests: 287 Failed: 17)
  Failed tests:  98-108, 152, 206, 274-277
t/qast/01-qast.t                     (Wstat: 0 Tests: 178 Failed: 1)
  Failed test:  29
Files=145, Tests=13303,  5 wallclock secs ( 0.84 usr  0.15 sys + 25.73 cusr  1.98 csys = 28.70 CPU)

Rakudo
Test Summary Report
-------------------
t/spec/S03-operators/arith.t                                    (Wstat: 768 Tests: 158 Failed: 3)
  Failed tests:  100, 109, 112
  Non-zero exit status: 3
t/spec/S03-metaops/hyper.rakudo.moar                            (Wstat: 512 Tests: 410 Failed: 2)
  Failed tests:  404-405
  Non-zero exit status: 2
t/spec/S09-typed-arrays/native-num.rakudo.moar                  (Wstat: 2304 Tests: 457 Failed: 9)
  Failed tests:  136-138, 288-290, 440-442
  Non-zero exit status: 9
t/spec/S32-num/exp.t                                            (Wstat: 512 Tests: 72 Failed: 2)
  Failed tests:  18, 28
  Non-zero exit status: 2
t/spec/S32-num/complex.t                                        (Wstat: 256 Tests: 555 Failed: 1)
  Failed test:  511
  Non-zero exit status: 1
t/spec/S32-num/negative-zero.t                                  (Wstat: 512 Tests: 20 Failed: 2)
  Failed tests:  1, 11
  Non-zero exit status: 2
t/spec/S32-num/real-bridge.t                                    (Wstat: 1280 Tests: 201 Failed: 5)
  Failed tests:  141, 145-148
  Non-zero exit status: 5
t/spec/S32-num/stringify.rakudo.moar                            (Wstat: 3072 Tests: 62 Failed: 12)
  Failed tests:  25-28, 33-36, 41-44
  Non-zero exit status: 12
t/spec/S32-str/sprintf.t                                        (Wstat: 3072 Tests: 174 Failed: 12)
  Failed tests:  69-70, 79-80, 89-90, 99-100, 109-110, 173-174
  Non-zero exit status: 12
t/spec/S32-trig/cosech.t                                        (Wstat: 512 Tests: 146 Failed: 2)
  Failed tests:  61-62
  Non-zero exit status: 2
t/spec/S32-trig/sech.t                                          (Wstat: 512 Tests: 154 Failed: 2)
  Failed tests:  65-66
  Non-zero exit status: 2
t/spec/S32-str/sprintf-e.t                                      (Wstat: 65024 Tests: 2282 Failed: 2282)
  Failed tests:  1-2282
  Non-zero exit status: 254
t/spec/integration/advent2011-day15.t                           (Wstat: 256 Tests: 9 Failed: 1)
  Failed test:  2
  Non-zero exit status: 1
t/spec/integration/advent2013-day15.t                           (Wstat: 256 Tests: 30 Failed: 1)
  Failed test:  23
  Non-zero exit status: 1
Files=1274, Tests=109505, 142 wallclock secs (17.00 usr  2.31 sys + 1809.54 cusr 114.69 csys = 1943.54 CPU)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1191,2019-10-10T16:50:31Z,2019-10-10T18:19:16Z,2019-10-10T18:19:16Z,CLOSED,False,1,1,1,https://github.com/cognominal,"Returns ""0.0"" instead of ""0"" for a zero double",1,[],https://github.com/MoarVM/MoarVM/pull/1191,https://github.com/cognominal,3,https://github.com/MoarVM/MoarVM/pull/1191#issuecomment-540709598,"so that a roundtrip thru stringification is a noop.
That is the following prints 1
nqp -e 'my $i := 0.0; say(nqp::eqaddr($i.WHAT, (+~$i).WHAT))'
I was unable to test it because I was not able to build nqp with the modified
moar on catalina.
perl Configure.pl --prefix=/usr --backends=moar --with-moar=/Users/cog/git/MoarVM/moar
make: *** No rule to make target /Users/cog/git/MoarVM/../share/nqp/lib/MAST/Nodes.nqp', needed by gen/moar/stage1/MASTNodes.nqp'.  Stop.","The pull request was incomplete. Dealt only with the 0.0 case.
A lot of code relies on the current behaviour as shown by masterduke test dumps.
Lizmat notes the correct behaviour is obtained with .perl but that .gist current behaviour deserves opening an issue.
nqp only purpose is used to bootstrap Perl 6 so it is pointless to argue what is the correct behaviour here.
Thx for the feedback.
closing conclusion by lizmat
https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-10-10#l148",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1192,2019-10-11T06:44:05Z,2019-10-23T01:46:54Z,2019-10-23T01:46:54Z,CLOSED,False,3,1,1,https://github.com/Kaiepi,[IP6NS Grant] Prepare for upcoming sync UDP/UNIX/raw socket support,1,[],https://github.com/MoarVM/MoarVM/pull/1192,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1192,Some constants need tweaking.,Some constants need tweaking.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1193,2019-10-14T18:23:34Z,2019-10-17T22:17:59Z,2019-10-17T22:17:59Z,MERGED,True,31,1,1,https://github.com/patrickbkr,Make MVM_file_is_rwx honor root and groups,1,[],https://github.com/MoarVM/MoarVM/pull/1193,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1193,"Fixes #1179 and #1172
I tested this with the attached not pretty Raku script. Previous Moar results in:
foo 000 user1:lonely --          user1 CAN'T read.      Raku agrees
foo 400 user1:lonely --          user1 can read.        Raku agrees
foo 000 user2:user1 --           user1 CAN'T read.      Raku agrees
foo 040 user2:user1 --           user1 can read.        Raku DISAGREES.
foo 000 user2:user1supp --       user1 CAN'T read.      Raku agrees
foo 040 user2:user1supp --       user1 can read.        Raku DISAGREES.
foo 000 user2:lonely --          user1 CAN'T read.      Raku agrees
foo 004 user2:lonely --          user1 can read.        Raku agrees
foo 000 user2:lonely --          root can read.         Raku DISAGREES.

With this PR applied it returns:
foo 000 user1:lonely --          user1 CAN'T read.      Raku agrees
foo 400 user1:lonely --          user1 can read.        Raku agrees
foo 000 user2:user1 --           user1 CAN'T read.      Raku agrees
foo 040 user2:user1 --           user1 can read.        Raku agrees
foo 000 user2:user1supp --       user1 CAN'T read.      Raku agrees
foo 040 user2:user1supp --       user1 can read.        Raku agrees
foo 000 user2:lonely --          user1 CAN'T read.      Raku agrees
foo 004 user2:lonely --          user1 can read.        Raku agrees
foo 000 user2:lonely --          root can read.         Raku agrees

shell('sudo rm foo 2>/dev/null').so;
shell('sudo userdel -r user1 2>/dev/null').so;
shell('sudo groupdel user1supp 2>/dev/null').so;
shell('sudo userdel -r user2 2>/dev/null').so;
shell('sudo groupdel user2supp 2>/dev/null').so;
shell('sudo groupdel lonely 2>/dev/null').so;

shell 'sudo groupadd lonely';
shell 'sudo groupadd user1supp';
shell 'sudo useradd -U -M -G user1supp user1';
shell 'sudo groupadd user2supp';
shell 'sudo useradd -U -M -G user2supp user2';


sub check-access($user, $perms, $owners) {
    shell 'sudo touch foo';
    shell 'sudo sh -c ""echo word > foo""';
    shell ""sudo chown $owners foo"";
    shell ""sudo chmod $perms foo"";

    my $p1 = shell(""su $user -c 'cat foo' 2>/dev/null"", :out);
    my $ok = $p1.so && ($p1.out.get eq 'word');

    my $p2 = shell(""su $user -c '$*EXECUTABLE -e \""say «foo».IO.r\""'"", :out);
    my $ok2 = trim($p2.out.get) eq 'True';

    say ""foo $perms $owners --   \t $user "" ~ ($ok ?? 'can' !! 'CAN\'T') ~ "" read. \tRaku "" ~ ($ok2 == $ok ??     +'agrees' !! 'DISAGREES.');
    shell 'sudo rm foo';
}

check-access 'user1', '000', 'user1:lonely';    # nok
check-access 'user1', '400', 'user1:lonely';    # ok

check-access 'user1', '000', 'user2:user1';     # nok
check-access 'user1', '040', 'user2:user1';     # ok

check-access 'user1', '000', 'user2:user1supp'; # nok
check-access 'user1', '040', 'user2:user1supp'; # ok

check-access 'user1', '000', 'user2:lonely';    # nok
check-access 'user1', '004', 'user2:lonely';    # ok

check-access 'root',  '000', 'user2:lonely';    # ok

shell 'sudo userdel -r user1 2>/dev/null';
shell 'sudo groupdel user1supp';
shell 'sudo userdel -r user2 2>/dev/null';
shell 'sudo groupdel user2supp';
shell 'sudo groupdel lonely'","Fixes #1179 and #1172
I tested this with the attached not pretty Raku script. Previous Moar results in:
foo 000 user1:lonely --          user1 CAN'T read.      Raku agrees
foo 400 user1:lonely --          user1 can read.        Raku agrees
foo 000 user2:user1 --           user1 CAN'T read.      Raku agrees
foo 040 user2:user1 --           user1 can read.        Raku DISAGREES.
foo 000 user2:user1supp --       user1 CAN'T read.      Raku agrees
foo 040 user2:user1supp --       user1 can read.        Raku DISAGREES.
foo 000 user2:lonely --          user1 CAN'T read.      Raku agrees
foo 004 user2:lonely --          user1 can read.        Raku agrees
foo 000 user2:lonely --          root can read.         Raku DISAGREES.

With this PR applied it returns:
foo 000 user1:lonely --          user1 CAN'T read.      Raku agrees
foo 400 user1:lonely --          user1 can read.        Raku agrees
foo 000 user2:user1 --           user1 CAN'T read.      Raku agrees
foo 040 user2:user1 --           user1 can read.        Raku agrees
foo 000 user2:user1supp --       user1 CAN'T read.      Raku agrees
foo 040 user2:user1supp --       user1 can read.        Raku agrees
foo 000 user2:lonely --          user1 CAN'T read.      Raku agrees
foo 004 user2:lonely --          user1 can read.        Raku agrees
foo 000 user2:lonely --          root can read.         Raku agrees

shell('sudo rm foo 2>/dev/null').so;
shell('sudo userdel -r user1 2>/dev/null').so;
shell('sudo groupdel user1supp 2>/dev/null').so;
shell('sudo userdel -r user2 2>/dev/null').so;
shell('sudo groupdel user2supp 2>/dev/null').so;
shell('sudo groupdel lonely 2>/dev/null').so;

shell 'sudo groupadd lonely';
shell 'sudo groupadd user1supp';
shell 'sudo useradd -U -M -G user1supp user1';
shell 'sudo groupadd user2supp';
shell 'sudo useradd -U -M -G user2supp user2';


sub check-access($user, $perms, $owners) {
    shell 'sudo touch foo';
    shell 'sudo sh -c ""echo word > foo""';
    shell ""sudo chown $owners foo"";
    shell ""sudo chmod $perms foo"";

    my $p1 = shell(""su $user -c 'cat foo' 2>/dev/null"", :out);
    my $ok = $p1.so && ($p1.out.get eq 'word');

    my $p2 = shell(""su $user -c '$*EXECUTABLE -e \""say «foo».IO.r\""'"", :out);
    my $ok2 = trim($p2.out.get) eq 'True';

    say ""foo $perms $owners --   \t $user "" ~ ($ok ?? 'can' !! 'CAN\'T') ~ "" read. \tRaku "" ~ ($ok2 == $ok ??     +'agrees' !! 'DISAGREES.');
    shell 'sudo rm foo';
}

check-access 'user1', '000', 'user1:lonely';    # nok
check-access 'user1', '400', 'user1:lonely';    # ok

check-access 'user1', '000', 'user2:user1';     # nok
check-access 'user1', '040', 'user2:user1';     # ok

check-access 'user1', '000', 'user2:user1supp'; # nok
check-access 'user1', '040', 'user2:user1supp'; # ok

check-access 'user1', '000', 'user2:lonely';    # nok
check-access 'user1', '004', 'user2:lonely';    # ok

check-access 'root',  '000', 'user2:lonely';    # ok

shell 'sudo userdel -r user1 2>/dev/null';
shell 'sudo groupdel user1supp';
shell 'sudo userdel -r user2 2>/dev/null';
shell 'sudo groupdel user2supp';
shell 'sudo groupdel lonely'",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1195,2019-10-16T18:49:09Z,2019-10-16T19:22:32Z,2019-10-16T20:31:31Z,MERGED,True,7,1,1,https://github.com/dogbert17,Add missing gc_mark entry to setup_op_table,1,[],https://github.com/MoarVM/MoarVM/pull/1195,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1195,"Given that a gc might happen during the lifetime of the async
connect task we need to add a gc_mark function to its ops table.
This fixes an intermittent fromspace error which could otherwise
occur.
nine++ for helping out with this","Given that a gc might happen during the lifetime of the async
connect task we need to add a gc_mark function to its ops table.
This fixes an intermittent fromspace error which could otherwise
occur.
nine++ for helping out with this",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1196,2019-10-16T22:01:47Z,2019-10-22T15:44:31Z,2019-10-22T16:16:57Z,MERGED,True,43,50,1,https://github.com/MasterDuke17,Show correct values in encoding errors,4,[],https://github.com/MoarVM/MoarVM/pull/1196,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1196,"Fixes the valgrind errors @dogbert17++ found in t/spec/S17-procasync/encoding.t (https://gist.github.com/dogbert17/e4cb7b4d003f9f7177a70f73a49c7727). Also show chars near the bad bytes in another encoding error path.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Fixes the valgrind errors @dogbert17++ found in t/spec/S17-procasync/encoding.t (https://gist.github.com/dogbert17/e4cb7b4d003f9f7177a70f73a49c7727). Also show chars near the bad bytes in another encoding error path.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1196,2019-10-16T22:01:47Z,2019-10-22T15:44:31Z,2019-10-22T16:16:57Z,MERGED,True,43,50,1,https://github.com/MasterDuke17,Show correct values in encoding errors,4,[],https://github.com/MoarVM/MoarVM/pull/1196,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1196#issuecomment-543066832,"Fixes the valgrind errors @dogbert17++ found in t/spec/S17-procasync/encoding.t (https://gist.github.com/dogbert17/e4cb7b4d003f9f7177a70f73a49c7727). Also show chars near the bad bytes in another encoding error path.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Whoops, those MVMGrapheme32s are left-over from when I was extracting from
`buffer`, not `bytes`.

Should I change to `%02hhx` or just assign into `unsigned char` as I did in
the top-most code?
…
On Thu, Oct 17, 2019 at 7:52 AM niner ***@***.***> wrote:
 ***@***.**** requested changes on this pull request.
 ------------------------------

 In src/strings/utf8.c
 <#1196 (comment)>:

 > @@ -384,17 +384,18 @@ MVMuint32 MVM_string_utf8_decodestream(MVMThreadContext *tc, MVMDecodeStream *ds
                      break;
                  }
                  case UTF8_REJECT: {
 -                    char *waste[] = { (char *)buffer, NULL };
 -                    if (bufsize >= 3) {
 -                        MVMGrapheme32 a = buffer[pos - 2], b = buffer[pos - 1], c = buffer[pos];
 +                    MVMint32 error_pos = pos - 1;
 +                    char *waste[] = { (char *)bytes, NULL };
 +                    if (error_pos >= 3) {
 +                        MVMGrapheme32 a = bytes[error_pos - 2], b = bytes[error_pos - 1], c = bytes[error_pos];

 Why MVMGrapheme32? char and MVMGrapheme32 are both signed, so converting
 the value will sign extend, i.e. every char with the high bit set will be
 printed as e.g. ffffff80.
 ------------------------------

 In src/strings/utf8.c
 <#1196 (comment)>:

 > @@ -384,17 +384,18 @@ MVMuint32 MVM_string_utf8_decodestream(MVMThreadContext *tc, MVMDecodeStream *ds
                      break;
                  }
                  case UTF8_REJECT: {
 -                    char *waste[] = { (char *)buffer, NULL };
 -                    if (bufsize >= 3) {
 -                        MVMGrapheme32 a = buffer[pos - 2], b = buffer[pos - 1], c = buffer[pos];
 +                    MVMint32 error_pos = pos - 1;
 +                    char *waste[] = { (char *)bytes, NULL };
 +                    if (error_pos >= 3) {
 +                        MVMGrapheme32 a = bytes[error_pos - 2], b = bytes[error_pos - 1], c = bytes[error_pos];
                          MVM_exception_throw_adhoc_free(tc, waste, ""Malformed UTF-8 near bytes %02x %02x %02x"", a, b, c);

 To avoid the mentioned sign extension, the format specifier should be
 %02hhx:

 hh      Specifies that a following d, i, o, u, x, or X conversion specifier applies to a signed char or unsigned char argument  (the  argument
                will  have  been promoted according to the integer promotions, but its value shall be converted to signed char or unsigned char before
                printing);

 ------------------------------

 In src/strings/utf8.c
 <#1196 (comment)>:

 > @@ -384,17 +384,18 @@ MVMuint32 MVM_string_utf8_decodestream(MVMThreadContext *tc, MVMDecodeStream *ds
                      break;
                  }
                  case UTF8_REJECT: {
 -                    char *waste[] = { (char *)buffer, NULL };
 -                    if (bufsize >= 3) {
 -                        MVMGrapheme32 a = buffer[pos - 2], b = buffer[pos - 1], c = buffer[pos];
 +                    MVMint32 error_pos = pos - 1;
 +                    char *waste[] = { (char *)bytes, NULL };

 bytes is already declared as char*, no need to type cast it here.
 ------------------------------

 In src/strings/utf8.c
 <#1196 (comment)>:

 > @@ -448,17 +449,18 @@ MVMuint32 MVM_string_utf8_decodestream(MVMThreadContext *tc, MVMDecodeStream *ds
                      break;
                  }
                  case UTF8_REJECT: {
 -                    char *waste[] = { (char *)buffer, NULL };
 -                    if (bufsize >= 3) {
 -                        MVMGrapheme32 a = buffer[pos - 2], b = buffer[pos - 1], c = buffer[pos];
 +                    MVMint32 error_pos = pos - 1;

 This is the exact same code as above, so please move it to its own
 function. As this is an error path anyway, the call overhead will not
 matter and the whole decodestream function is already quite long.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#1196?email_source=notifications&email_token=ACOHYUOLJDLF3IMGYXKCG3LQPADSFA5CNFSM4JBRSMF2YY3PNVWWK3TUL52HS4DFWFIHK3DMKJSXC5LFON2FEZLWNFSXPKTDN5WW2ZLOORPWSZGOCIH5QSY#pullrequestreview-303028299>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ACOHYUIBE2ZKRQR7URSFMIDQPADSFANCNFSM4JBRSMFQ>
 .",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1196,2019-10-16T22:01:47Z,2019-10-22T15:44:31Z,2019-10-22T16:16:57Z,MERGED,True,43,50,1,https://github.com/MasterDuke17,Show correct values in encoding errors,4,[],https://github.com/MoarVM/MoarVM/pull/1196,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1196#issuecomment-543072164,"Fixes the valgrind errors @dogbert17++ found in t/spec/S17-procasync/encoding.t (https://gist.github.com/dogbert17/e4cb7b4d003f9f7177a70f73a49c7727). Also show chars near the bad bytes in another encoding error path.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Should I change to `%02hhx` or just assign into `unsigned char` as I did in
 the top-most code?
I think both are needed to make it really correct (and not just work) and to
unambiguously communicate what's supposed to happen to the reader of the code.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1196,2019-10-16T22:01:47Z,2019-10-22T15:44:31Z,2019-10-22T16:16:57Z,MERGED,True,43,50,1,https://github.com/MasterDuke17,Show correct values in encoding errors,4,[],https://github.com/MoarVM/MoarVM/pull/1196,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1196#issuecomment-543387709,"Fixes the valgrind errors @dogbert17++ found in t/spec/S17-procasync/encoding.t (https://gist.github.com/dogbert17/e4cb7b4d003f9f7177a70f73a49c7727). Also show chars near the bad bytes in another encoding error path.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",@niner how's that look?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1197,2019-10-17T16:42:10Z,2019-10-17T22:16:14Z,2019-10-17T22:16:27Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update to libuv version 1.33.0,1,[],https://github.com/MoarVM/MoarVM/pull/1197,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1197,"Clean spectest on Linux. According to tests by vrurg++ it also fixes
M#1178 a Mac specific problem wrt file change notifications.","Clean spectest on Linux. According to tests by vrurg++ it also fixes
M#1178 a Mac specific problem wrt file change notifications.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1197,2019-10-17T16:42:10Z,2019-10-17T22:16:14Z,2019-10-17T22:16:27Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update to libuv version 1.33.0,1,[],https://github.com/MoarVM/MoarVM/pull/1197,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1197#issuecomment-543384378,"Clean spectest on Linux. According to tests by vrurg++ it also fixes
M#1178 a Mac specific problem wrt file change notifications.",Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1198,2019-10-18T11:14:27Z,2020-06-10T21:45:55Z,2020-06-10T21:45:58Z,CLOSED,False,3,0,1,https://github.com/MasterDuke17,Add libzstd-dev to travis...,2,[],https://github.com/MoarVM/MoarVM/pull/1198,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1198,so new heap snapshot code is tested.,so new heap snapshot code is tested.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1198,2019-10-18T11:14:27Z,2020-06-10T21:45:55Z,2020-06-10T21:45:58Z,CLOSED,False,3,0,1,https://github.com/MasterDuke17,Add libzstd-dev to travis...,2,[],https://github.com/MoarVM/MoarVM/pull/1198,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1198#issuecomment-543689192,so new heap snapshot code is tested.,"Huh, it looks like it has zstd, but maybe its version is too old? @timo",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1199,2019-10-19T17:14:15Z,2020-04-18T13:15:49Z,2020-04-18T13:15:49Z,MERGED,True,16,16,2,https://github.com/Kaiepi,Fix builds on OpenBSD,1,[],https://github.com/MoarVM/MoarVM/pull/1199,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1199,"This fixes some compiler warnings and orders header includes so headers in system paths don't override MoarVM's third party headers when both happen to exist, which was causing builds to break on OpenBSD if libuv was already installed on the system after the recent libuv update.","This fixes some compiler warnings and orders header includes so headers in system paths don't override MoarVM's third party headers when both happen to exist, which was causing builds to break on OpenBSD if libuv was already installed on the system after the recent libuv update.",True,{'HEART': ['https://github.com/AlexDaniel']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1201,2019-10-20T16:10:54Z,2019-10-20T19:09:08Z,2019-10-20T19:09:08Z,CLOSED,False,23,22,1,https://github.com/ugexe,Avoid using preprocessor inside MVMROOT,1,[],https://github.com/MoarVM/MoarVM/pull/1201,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1201,"MSVC appears to have a problem with macro expansion when using a preprocessor inside a MVMROOT.
Resolves #1200","MSVC appears to have a problem with macro expansion when using a preprocessor inside a MVMROOT.
Resolves #1200",True,{'HEART': ['https://github.com/AlexDaniel']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1201,2019-10-20T16:10:54Z,2019-10-20T19:09:08Z,2019-10-20T19:09:08Z,CLOSED,False,23,22,1,https://github.com/ugexe,Avoid using preprocessor inside MVMROOT,1,[],https://github.com/MoarVM/MoarVM/pull/1201,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1201#issuecomment-544282076,"MSVC appears to have a problem with macro expansion when using a preprocessor inside a MVMROOT.
Resolves #1200",This PR would have put the MVMROOT in the wrong place. I've pushed 0f0e6d3 which should fix the issue,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1202,2019-10-20T21:05:48Z,2019-10-20T21:11:15Z,2019-10-20T21:11:15Z,MERGED,True,2,4,1,https://github.com/ugexe,Fix obscure deadlock,1,[],https://github.com/MoarVM/MoarVM/pull/1202,https://github.com/ugexe,1,https://github.com/MoarVM/MoarVM/pull/1202,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1202,2019-10-20T21:05:48Z,2019-10-20T21:11:15Z,2019-10-20T21:11:15Z,MERGED,True,2,4,1,https://github.com/ugexe,Fix obscure deadlock,1,[],https://github.com/MoarVM/MoarVM/pull/1202,https://github.com/ugexe,2,https://github.com/MoarVM/MoarVM/pull/1202#issuecomment-544292698,,I have no idea why this fixes rakudo/rakudo#3157 -- I discovered using end_time was causing the deadlock and ended up with this workaround/solution.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1203,2019-10-23T03:12:28Z,2019-10-23T23:11:05Z,2019-10-23T23:11:06Z,CLOSED,False,194,1,8,https://github.com/vrurg,[WIP] Sample code for stringification and printing of internal structures,1,[],https://github.com/MoarVM/MoarVM/pull/1203,https://github.com/vrurg,1,https://github.com/MoarVM/MoarVM/pull/1203,"While trying to resolve rakudo/rakudo#2897 I stumbled upon the necessity of tracing context serialization. Unfortunately, it is virtually impossible to distinguish one frame from another while debugging based on their objects in memory. MVMString complexity contributes to the problems of finding frame name when it exists and checking what lexicals frame contains.
What I'm trying to implement is support for stringification of objects from inside of MoarVM itself. The code is currently in 'skeleton' state, unstructured and doesn't even compile. It is purely for demoing of what approximately I'm trying to achieve.
NOTE There is some garbage left from very early experiments. It's too late to clean it up, so I leave it for a while. It includes dump_ctx_info function and declarations of two *_string_table functions.
Debugging
More or less centralized support for debug prints. Debug would be compiled in with MVM_DEBUG defined. Debug prints are activated if either of three is true:

global debug is turned on
thread-level debug is turned on
a dedicated environment variable is set.

For the first two it could be useful to provide NQP ops to turn debugging on/off for the purpose of tracing specific areas of NQP code from MoarVM point of view.
Output

support for printf variants which produce MVMString
support for printing into a file handle
MVM_string_note – similar for MVM_string_say

Stringification
Perhaps it should be part of REPR.","While trying to resolve rakudo/rakudo#2897 I stumbled upon the necessity of tracing context serialization. Unfortunately, it is virtually impossible to distinguish one frame from another while debugging based on their objects in memory. MVMString complexity contributes to the problems of finding frame name when it exists and checking what lexicals frame contains.
What I'm trying to implement is support for stringification of objects from inside of MoarVM itself. The code is currently in 'skeleton' state, unstructured and doesn't even compile. It is purely for demoing of what approximately I'm trying to achieve.
NOTE There is some garbage left from very early experiments. It's too late to clean it up, so I leave it for a while. It includes dump_ctx_info function and declarations of two *_string_table functions.
Debugging
More or less centralized support for debug prints. Debug would be compiled in with MVM_DEBUG defined. Debug prints are activated if either of three is true:

global debug is turned on
thread-level debug is turned on
a dedicated environment variable is set.

For the first two it could be useful to provide NQP ops to turn debugging on/off for the purpose of tracing specific areas of NQP code from MoarVM point of view.
Output

support for printf variants which produce MVMString
support for printing into a file handle
MVM_string_note – similar for MVM_string_say

Stringification
Perhaps it should be part of REPR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1203,2019-10-23T03:12:28Z,2019-10-23T23:11:05Z,2019-10-23T23:11:06Z,CLOSED,False,194,1,8,https://github.com/vrurg,[WIP] Sample code for stringification and printing of internal structures,1,[],https://github.com/MoarVM/MoarVM/pull/1203,https://github.com/vrurg,2,https://github.com/MoarVM/MoarVM/pull/1203#issuecomment-545673656,"While trying to resolve rakudo/rakudo#2897 I stumbled upon the necessity of tracing context serialization. Unfortunately, it is virtually impossible to distinguish one frame from another while debugging based on their objects in memory. MVMString complexity contributes to the problems of finding frame name when it exists and checking what lexicals frame contains.
What I'm trying to implement is support for stringification of objects from inside of MoarVM itself. The code is currently in 'skeleton' state, unstructured and doesn't even compile. It is purely for demoing of what approximately I'm trying to achieve.
NOTE There is some garbage left from very early experiments. It's too late to clean it up, so I leave it for a while. It includes dump_ctx_info function and declarations of two *_string_table functions.
Debugging
More or less centralized support for debug prints. Debug would be compiled in with MVM_DEBUG defined. Debug prints are activated if either of three is true:

global debug is turned on
thread-level debug is turned on
a dedicated environment variable is set.

For the first two it could be useful to provide NQP ops to turn debugging on/off for the purpose of tracing specific areas of NQP code from MoarVM point of view.
Output

support for printf variants which produce MVMString
support for printing into a file handle
MVM_string_note – similar for MVM_string_say

Stringification
Perhaps it should be part of REPR.",Closing by after some IRC discussion.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1204,2019-10-24T01:38:43Z,2019-10-24T08:36:42Z,2019-10-24T08:36:42Z,MERGED,True,1,1,1,https://github.com/vrurg,Use `make` exit status as own,1,[],https://github.com/MoarVM/MoarVM/pull/1204,https://github.com/vrurg,1,https://github.com/MoarVM/MoarVM/pull/1204,"Propagade make install exit code for upstream NQP Configure.pl.
Otherwise NQP continues to build as if nothing happened and would
confuse a user with bizzare 'too old moar' error message if older moar
is already instaleld.
Resolves rakudo/rakudo#3266","Propagade make install exit code for upstream NQP Configure.pl.
Otherwise NQP continues to build as if nothing happened and would
confuse a user with bizzare 'too old moar' error message if older moar
is already instaleld.
Resolves rakudo/rakudo#3266",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1205,2019-10-24T18:01:14Z,2019-10-24T19:34:36Z,2019-10-24T19:34:36Z,CLOSED,False,253,278,3,https://github.com/Kaiepi,Revert to only using the first address received from a DNS resolution,1,[],https://github.com/MoarVM/MoarVM/pull/1205,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1205,"Using all addresses received aims to handle when IPv6 is enabled, but
misconfigured on the machine used, but how this scenario should be dealt
with is standardized by RFC 8305 and the way it's implemented isn't
compliant with it at all. Dealing with it properly will be revisited
after completing the IP6NS grant.","Using all addresses received aims to handle when IPv6 is enabled, but
misconfigured on the machine used, but how this scenario should be dealt
with is standardized by RFC 8305 and the way it's implemented isn't
compliant with it at all. Dealing with it properly will be revisited
after completing the IP6NS grant.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1207,2019-10-24T19:34:18Z,2019-10-26T16:41:00Z,2019-10-26T16:41:00Z,MERGED,True,676,1008,4,https://github.com/Kaiepi,"Revert ""Merge pull request #1166 from Kaiepi/ipv6-unsupported""",2,[],https://github.com/MoarVM/MoarVM/pull/1207,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1207,"While only the change to make all addresses get used when connecting or
binding sockets needs to be reverted from this, not every commit had
only one change included with it, making it impossible to tell if it had
truly been reverted or not. They will be remade later.
This reverts commit 39f5774, reversing
changes made to 01f85c8.","While only the change to make all addresses get used when connecting or
binding sockets needs to be reverted from this, not every commit had
only one change included with it, making it impossible to tell if it had
truly been reverted or not. They will be remade later.
This reverts commit 39f5774, reversing
changes made to 01f85c8.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1207,2019-10-24T19:34:18Z,2019-10-26T16:41:00Z,2019-10-26T16:41:00Z,MERGED,True,676,1008,4,https://github.com/Kaiepi,"Revert ""Merge pull request #1166 from Kaiepi/ipv6-unsupported""",2,[],https://github.com/MoarVM/MoarVM/pull/1207,https://github.com/AlexDaniel,2,https://github.com/MoarVM/MoarVM/pull/1207#issuecomment-546465556,"While only the change to make all addresses get used when connecting or
binding sockets needs to be reverted from this, not every commit had
only one change included with it, making it impossible to tell if it had
truly been reverted or not. They will be remade later.
This reverts commit 39f5774, reversing
changes made to 01f85c8.","Currently it doesn't pass CI tests.
src\io\asyncsocketudp.c(557) : error C2039: 'async_task' : is not a member of 'SocketSetupInfo'
src\io\asyncsocketudp.c(487) : see declaration of 'SocketSetupInfo'",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1207,2019-10-24T19:34:18Z,2019-10-26T16:41:00Z,2019-10-26T16:41:00Z,MERGED,True,676,1008,4,https://github.com/Kaiepi,"Revert ""Merge pull request #1166 from Kaiepi/ipv6-unsupported""",2,[],https://github.com/MoarVM/MoarVM/pull/1207,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/1207#issuecomment-546513704,"While only the change to make all addresses get used when connecting or
binding sockets needs to be reverted from this, not every commit had
only one change included with it, making it impossible to tell if it had
truly been reverted or not. They will be remade later.
This reverts commit 39f5774, reversing
changes made to 01f85c8.",This now passes make spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1207,2019-10-24T19:34:18Z,2019-10-26T16:41:00Z,2019-10-26T16:41:00Z,MERGED,True,676,1008,4,https://github.com/Kaiepi,"Revert ""Merge pull request #1166 from Kaiepi/ipv6-unsupported""",2,[],https://github.com/MoarVM/MoarVM/pull/1207,https://github.com/AlexDaniel,4,https://github.com/MoarVM/MoarVM/pull/1207#issuecomment-546619106,"While only the change to make all addresses get used when connecting or
binding sockets needs to be reverted from this, not every commit had
only one change included with it, making it impossible to tell if it had
truly been reverted or not. They will be remade later.
This reverts commit 39f5774, reversing
changes made to 01f85c8.","Should be good now, I think!
Thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1209,2019-10-25T20:05:05Z,2019-10-26T21:55:13Z,2019-10-29T17:15:28Z,MERGED,True,4,0,1,https://github.com/vrurg,Fix run-away CORE context on closures,3,[],https://github.com/MoarVM/MoarVM/pull/1209,https://github.com/vrurg,1,https://github.com/MoarVM/MoarVM/pull/1209,"The problem was caused by the fact that serialization strips off
contexts without static code effectively serializing only those
belonging to the closure's compunit. Upon deserialization only those
serialized contexts are restores and bound to the closure being
deserialized resulting in closures loosing their CORE outers.
To fix the problem I used the fact that new contexts are created as
clones of static code which actually has all its outers stacked up
properly. Therefore, if a context without deserialized outer is
encountered, I check if it's source static code has one and if it does
then use that outer for the new context.
Fixes rakudo/rakudo#2897 and a number of similar issues.","The problem was caused by the fact that serialization strips off
contexts without static code effectively serializing only those
belonging to the closure's compunit. Upon deserialization only those
serialized contexts are restores and bound to the closure being
deserialized resulting in closures loosing their CORE outers.
To fix the problem I used the fact that new contexts are created as
clones of static code which actually has all its outers stacked up
properly. Therefore, if a context without deserialized outer is
encountered, I check if it's source static code has one and if it does
then use that outer for the new context.
Fixes rakudo/rakudo#2897 and a number of similar issues.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1209,2019-10-25T20:05:05Z,2019-10-26T21:55:13Z,2019-10-29T17:15:28Z,MERGED,True,4,0,1,https://github.com/vrurg,Fix run-away CORE context on closures,3,[],https://github.com/MoarVM/MoarVM/pull/1209,https://github.com/vrurg,2,https://github.com/MoarVM/MoarVM/pull/1209#issuecomment-546494515,"The problem was caused by the fact that serialization strips off
contexts without static code effectively serializing only those
belonging to the closure's compunit. Upon deserialization only those
serialized contexts are restores and bound to the closure being
deserialized resulting in closures loosing their CORE outers.
To fix the problem I used the fact that new contexts are created as
clones of static code which actually has all its outers stacked up
properly. Therefore, if a context without deserialized outer is
encountered, I check if it's source static code has one and if it does
then use that outer for the new context.
Fixes rakudo/rakudo#2897 and a number of similar issues.",The most time-expensive fix in my life. Three weeks per three lines...,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1209,2019-10-25T20:05:05Z,2019-10-26T21:55:13Z,2019-10-29T17:15:28Z,MERGED,True,4,0,1,https://github.com/vrurg,Fix run-away CORE context on closures,3,[],https://github.com/MoarVM/MoarVM/pull/1209,https://github.com/diakopter,3,https://github.com/MoarVM/MoarVM/pull/1209#issuecomment-547521022,"The problem was caused by the fact that serialization strips off
contexts without static code effectively serializing only those
belonging to the closure's compunit. Upon deserialization only those
serialized contexts are restores and bound to the closure being
deserialized resulting in closures loosing their CORE outers.
To fix the problem I used the fact that new contexts are created as
clones of static code which actually has all its outers stacked up
properly. Therefore, if a context without deserialized outer is
encountered, I check if it's source static code has one and if it does
then use that outer for the new context.
Fixes rakudo/rakudo#2897 and a number of similar issues.",impressive,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1209,2019-10-25T20:05:05Z,2019-10-26T21:55:13Z,2019-10-29T17:15:28Z,MERGED,True,4,0,1,https://github.com/vrurg,Fix run-away CORE context on closures,3,[],https://github.com/MoarVM/MoarVM/pull/1209,https://github.com/vrurg,4,https://github.com/MoarVM/MoarVM/pull/1209#issuecomment-547533651,"The problem was caused by the fact that serialization strips off
contexts without static code effectively serializing only those
belonging to the closure's compunit. Upon deserialization only those
serialized contexts are restores and bound to the closure being
deserialized resulting in closures loosing their CORE outers.
To fix the problem I used the fact that new contexts are created as
clones of static code which actually has all its outers stacked up
properly. Therefore, if a context without deserialized outer is
encountered, I check if it's source static code has one and if it does
then use that outer for the new context.
Fixes rakudo/rakudo#2897 and a number of similar issues.","Yep. I knew about a couple, but the search came up with the above list. Not sure if all are found.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1210,2019-10-28T15:40:02Z,2019-10-28T15:57:27Z,2019-10-28T15:57:27Z,MERGED,True,1,0,1,https://github.com/dogbert17,Reset utf8 pointer to point at original string before using,1,[],https://github.com/MoarVM/MoarVM/pull/1210,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1210,"When an invalid utf8 sequence is found the original string
is parsed again in order to figure out where in the string
the problem occurs so that it will be possible to print
out the bytes surrounding the error in the exception msg.
The problem is that when trying to print out the bytes
around the parse error the 'utf8' pointer is used. This
pointer no longer points to the start of the erroneous
string since it has just been used in a loop where each
iteration increments it. Fixed by restoring it so that it
points to the start of the string once again.
This fixes #1208","When an invalid utf8 sequence is found the original string
is parsed again in order to figure out where in the string
the problem occurs so that it will be possible to print
out the bytes surrounding the error in the exception msg.
The problem is that when trying to print out the bytes
around the parse error the 'utf8' pointer is used. This
pointer no longer points to the start of the erroneous
string since it has just been used in a loop where each
iteration increments it. Fixed by restoring it so that it
points to the start of the string once again.
This fixes #1208",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1211,2019-10-28T20:24:51Z,2019-10-29T20:07:12Z,2019-10-29T20:07:12Z,MERGED,True,1,1,1,https://github.com/Kaiepi,Use more appropriate flags with getaddrinfo,1,[],https://github.com/MoarVM/MoarVM/pull/1211,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1211,"This makes it so getaddrinfo doesn't try to use the port passed to
MVM_io_resolve_host_name like a service name, and only returns IPv4
or IPv6 addresses if any exist on the interface used.","This makes it so getaddrinfo doesn't try to use the port passed to
MVM_io_resolve_host_name like a service name, and only returns IPv4
or IPv6 addresses if any exist on the interface used.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1212,2019-11-02T17:13:32Z,2019-11-04T08:06:07Z,2019-11-04T20:25:40Z,MERGED,True,8,2,2,https://github.com/MasterDuke17,Jit ordbaseat,1,[],https://github.com/MoarVM/MoarVM/pull/1212,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1212,"There was already a template, but no lego jit implementation.
NQP builds ok and passes make m-test and Rakudo build ok and passes make m-test m-spectest.","There was already a template, but no lego jit implementation.
NQP builds ok and passes make m-test and Rakudo build ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1213,2019-11-19T14:56:34Z,2019-11-22T16:50:53Z,2019-11-22T16:50:53Z,MERGED,True,245,0,1,https://github.com/dogbert17,Update ChangeLog for release,1,[],https://github.com/MoarVM/MoarVM/pull/1213,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1213,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1214,2019-11-25T16:33:30Z,2019-12-02T21:03:24Z,2019-12-02T21:03:24Z,MERGED,True,55,64,1,https://github.com/Kaiepi,[IP6NS Grant] Clean up and make MVM_io_resolve_host_name more portable,2,[],https://github.com/MoarVM/MoarVM/pull/1214,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1214,"How MVM_io_resolve_host_name handles creating addresses for UNIX sockets would only work properly on Linux. Make how it does this portable, and while we're at it, make it use less code to do the same work.
Part of this was part of the changes to DNS resolution that were reverted.","How MVM_io_resolve_host_name handles creating addresses for UNIX sockets would only work properly on Linux. Make how it does this portable, and while we're at it, make it use less code to do the same work.
Part of this was part of the changes to DNS resolution that were reverted.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1216,2019-11-28T14:30:23Z,2019-11-28T14:31:51Z,2019-11-28T14:37:12Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Fix 'may be used uninitialized' warning,1,[],https://github.com/MoarVM/MoarVM/pull/1216,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1216,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1217,2019-11-30T15:28:06Z,2019-11-30T15:55:09Z,2019-11-30T15:55:22Z,MERGED,True,1,2,1,https://github.com/MasterDuke17,Remove unused variable declaration,1,[],https://github.com/MoarVM/MoarVM/pull/1217,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1217,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1218,2019-11-30T15:34:20Z,2020-05-29T15:22:22Z,2020-05-29T15:22:30Z,CLOSED,False,1,1,1,https://github.com/MasterDuke17,Fix sometimes uninitialized warning,1,[],https://github.com/MoarVM/MoarVM/pull/1218,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1218,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1218,2019-11-30T15:34:20Z,2020-05-29T15:22:22Z,2020-05-29T15:22:30Z,CLOSED,False,1,1,1,https://github.com/MasterDuke17,Fix sometimes uninitialized warning,1,[],https://github.com/MoarVM/MoarVM/pull/1218,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1218#issuecomment-559987098,,"While this silences the compiler, do we actually know that we never end up with graph left at its default value? If yes, it would be nice to have a comment explaining why.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1218,2019-11-30T15:34:20Z,2020-05-29T15:22:22Z,2020-05-29T15:22:30Z,CLOSED,False,1,1,1,https://github.com/MasterDuke17,Fix sometimes uninitialized warning,1,[],https://github.com/MoarVM/MoarVM/pull/1218,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1218#issuecomment-559987750,,@ZhongnianTao ping,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1218,2019-11-30T15:34:20Z,2020-05-29T15:22:22Z,2020-05-29T15:22:30Z,CLOSED,False,1,1,1,https://github.com/MasterDuke17,Fix sometimes uninitialized warning,1,[],https://github.com/MoarVM/MoarVM/pull/1218,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1218#issuecomment-636032960,,"I no longer get warnings about this, from either gcc 10.1.0 or clang 10.0.0.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1219,2019-12-01T13:18:15Z,2019-12-01T13:21:06Z,2019-12-01T13:21:06Z,MERGED,True,1,1,1,https://github.com/dogbert17,Move incorrectly placed variable declaration which causes a lot of wa…,1,[],https://github.com/MoarVM/MoarVM/pull/1219,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1219,"…rnings on ARM
MVM_CAN_UNALIGNED_NUM64 is not used by ARM, it is on x86 though, which in
turn leads to gcc outputting a bucketload of unused-variable warnings on
ARM based systems like e.g. the RPi.","…rnings on ARM
MVM_CAN_UNALIGNED_NUM64 is not used by ARM, it is on x86 though, which in
turn leads to gcc outputting a bucketload of unused-variable warnings on
ARM based systems like e.g. the RPi.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1220,2019-12-03T15:02:14Z,2019-12-03T15:22:21Z,2019-12-03T15:22:26Z,CLOSED,False,1,1,1,https://github.com/MasterDuke17,Upgrade libtommath to v1.2.0,1,[],https://github.com/MoarVM/MoarVM/pull/1220,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1220,"Their new release incorporates or removes the need for all the commits
we added to our fork, so the intent of this commit is to switch to
using just their release tag.
Assuming I did everything correctly, NQP built ok and passed make m-test and Rakudo built ok and passes make m-test m-spectest.","Their new release incorporates or removes the need for all the commits
we added to our fork, so the intent of this commit is to switch to
using just their release tag.
Assuming I did everything correctly, NQP built ok and passed make m-test and Rakudo built ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1221,2019-12-03T15:18:30Z,2020-01-29T20:17:44Z,2020-01-29T20:17:46Z,MERGED,True,381,195,7,https://github.com/MasterDuke17,Switch our libtommath to upstream's 1.2.0 tag,21,[],https://github.com/MoarVM/MoarVM/pull/1221,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1221,"Their new release incorporates or removes the need for all the commits
we added to our fork, so the intent of this commit is to switch to
using just their release tag.
Assuming I did everything correctly, NQP built ok and passed make m-test and Rakudo built ok and passes make m-test m-spectest.","Their new release incorporates or removes the need for all the commits
we added to our fork, so the intent of this commit is to switch to
using just their release tag.
Assuming I did everything correctly, NQP built ok and passed make m-test and Rakudo built ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1222,2019-12-16T15:04:32Z,2020-01-28T09:49:04Z,2020-01-28T09:49:05Z,MERGED,True,93,25,4,https://github.com/Kaiepi,"[IP6NS Grant] Resolve hostnames given a socket type, protocol, and passivity",1,[],https://github.com/MoarVM/MoarVM/pull/1222,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1222,"This was part of the changes to hostname resolution that were reverted,
and will be necessary for upcoming support for UDP/UNIX/raw sockets.
Passes make test and make spectest.","This was part of the changes to hostname resolution that were reverted,
and will be necessary for upcoming support for UDP/UNIX/raw sockets.
Passes make test and make spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1224,2019-12-25T01:31:51Z,2020-01-07T23:27:24Z,2020-01-07T23:27:36Z,MERGED,True,14,18,11,https://github.com/MasterDuke17,Fix compiler warnings,9,[],https://github.com/MoarVM/MoarVM/pull/1224,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1224,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1226,2020-01-01T18:45:06Z,2020-01-04T11:52:20Z,2020-01-04T11:52:20Z,MERGED,True,2,2,1,https://github.com/scovit,Detect files that cannot be synched also on MacOS,1,[],https://github.com/MoarVM/MoarVM/pull/1226,https://github.com/scovit,1,https://github.com/MoarVM/MoarVM/pull/1226,"MacOS reports ENOTSUP as error code when trying to fsync a pipe.
After this commit, MoarVM detects this condition and ignores the error.
Fixes #1225","MacOS reports ENOTSUP as error code when trying to fsync a pipe.
After this commit, MoarVM detects this condition and ignores the error.
Fixes #1225",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1227,2020-01-07T15:35:55Z,2020-01-07T16:03:19Z,2020-01-07T16:03:19Z,MERGED,True,3,3,1,https://github.com/ZhongnianTao,Fix that variable `graph` in gb18030.c can be used uninitialized,3,[],https://github.com/MoarVM/MoarVM/pull/1227,https://github.com/ZhongnianTao,1,https://github.com/MoarVM/MoarVM/pull/1227,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1228,2020-01-13T20:44:18Z,2020-02-11T19:04:55Z,2020-02-11T19:04:55Z,MERGED,True,116,14,2,https://github.com/patrickbkr,Implement `--git-reference` Configure.pl option,1,[],https://github.com/MoarVM/MoarVM/pull/1228,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1228,"This option makes the configure process create / update git repositories for all of its submodules in the given folders and use those as reference repos.
This is similar, but not exactly the same as what the rakudo --git-reference option has been. The rakudo option did not create or update the referenced repository, but just used it. The implementation of this PR creates and updates the reference repository if it's not found. So as a user one doesn't need to know how the submodules are called or what their urls are.
I plan to create corresponding PRs for nqp and rakudo shortly.
Draft PR to see what CI will do.","This option makes the configure process create / update git repositories for all of its submodules in the given folders and use those as reference repos.
This is similar, but not exactly the same as what the rakudo --git-reference option has been. The rakudo option did not create or update the referenced repository, but just used it. The implementation of this PR creates and updates the reference repository if it's not found. So as a user one doesn't need to know how the submodules are called or what their urls are.
I plan to create corresponding PRs for nqp and rakudo shortly.
Draft PR to see what CI will do.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1228,2020-01-13T20:44:18Z,2020-02-11T19:04:55Z,2020-02-11T19:04:55Z,MERGED,True,116,14,2,https://github.com/patrickbkr,Implement `--git-reference` Configure.pl option,1,[],https://github.com/MoarVM/MoarVM/pull/1228,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1228#issuecomment-575321234,"This option makes the configure process create / update git repositories for all of its submodules in the given folders and use those as reference repos.
This is similar, but not exactly the same as what the rakudo --git-reference option has been. The rakudo option did not create or update the referenced repository, but just used it. The implementation of this PR creates and updates the reference repository if it's not found. So as a user one doesn't need to know how the submodules are called or what their urls are.
I plan to create corresponding PRs for nqp and rakudo shortly.
Draft PR to see what CI will do.",CI is happy. I tested this on Linux and Windows.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1228,2020-01-13T20:44:18Z,2020-02-11T19:04:55Z,2020-02-11T19:04:55Z,MERGED,True,116,14,2,https://github.com/patrickbkr,Implement `--git-reference` Configure.pl option,1,[],https://github.com/MoarVM/MoarVM/pull/1228,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1228#issuecomment-578485053,"This option makes the configure process create / update git repositories for all of its submodules in the given folders and use those as reference repos.
This is similar, but not exactly the same as what the rakudo --git-reference option has been. The rakudo option did not create or update the referenced repository, but just used it. The implementation of this PR creates and updates the reference repository if it's not found. So as a user one doesn't need to know how the submodules are called or what their urls are.
I plan to create corresponding PRs for nqp and rakudo shortly.
Draft PR to see what CI will do.",What's the use case for this?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1228,2020-01-13T20:44:18Z,2020-02-11T19:04:55Z,2020-02-11T19:04:55Z,MERGED,True,116,14,2,https://github.com/patrickbkr,Implement `--git-reference` Configure.pl option,1,[],https://github.com/MoarVM/MoarVM/pull/1228,https://github.com/patrickbkr,4,https://github.com/MoarVM/MoarVM/pull/1228#issuecomment-578545165,"This option makes the configure process create / update git repositories for all of its submodules in the given folders and use those as reference repos.
This is similar, but not exactly the same as what the rakudo --git-reference option has been. The rakudo option did not create or update the referenced repository, but just used it. The implementation of this PR creates and updates the reference repository if it's not found. So as a user one doesn't need to know how the submodules are called or what their urls are.
I plan to create corresponding PRs for nqp and rakudo shortly.
Draft PR to see what CI will do.","The --git-reference option is used by rakudobrew to speed up redownloading the repos. I'm not sure if there have ever been other users.
The way it worked before (it broke during the big build system refactor) only saved on the loading time of the rakudo, nqp and moar repositories, not all the submodules. Rakudobrew cloned Moar, NQP and Rakudo into a reference directory and then passed that folder to the rakudo build, the option was passed down to NQP (which then cloned Moar with the --reference git option). But sumodules were never sped up. Downloading moars submodules is currently >50MB (maybe even >100MB, I don't remember). So this (together with the other PRs for nqp and rakudo) makes all git repository checkouts (including submodules) use a reference directory and thus save a lot of time / energy.
Also usage of the --git-reference option is a lot simpler now. It's not necessary to clone the reference repository manually beforehand anymore. One can just point --git-reference to an empty directory and everything will work out automatically. I'm currently even thinking about making this controllable by a environment variable. Then one wouldn't even have to think about passing this option. All checkouts (of nqp, moarvm and their submodules) would automatically speed up dramatically.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1228,2020-01-13T20:44:18Z,2020-02-11T19:04:55Z,2020-02-11T19:04:55Z,MERGED,True,116,14,2,https://github.com/patrickbkr,Implement `--git-reference` Configure.pl option,1,[],https://github.com/MoarVM/MoarVM/pull/1228,https://github.com/niner,5,https://github.com/MoarVM/MoarVM/pull/1228#issuecomment-578657099,"This option makes the configure process create / update git repositories for all of its submodules in the given folders and use those as reference repos.
This is similar, but not exactly the same as what the rakudo --git-reference option has been. The rakudo option did not create or update the referenced repository, but just used it. The implementation of this PR creates and updates the reference repository if it's not found. So as a user one doesn't need to know how the submodules are called or what their urls are.
I plan to create corresponding PRs for nqp and rakudo shortly.
Draft PR to see what CI will do.","Ok, that makes a lot of sense and could indeed be useful in other cases as well. I'm not sure I'm comfortable with the writing aspect though. A reference is something you use for looking up information. It's not something I'd expect to get changed by the use. A use for the reference can e.g. be to avoid network access. OTOH help with setting up the reference can be useful. Can you split these two operations?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1228,2020-01-13T20:44:18Z,2020-02-11T19:04:55Z,2020-02-11T19:04:55Z,MERGED,True,116,14,2,https://github.com/patrickbkr,Implement `--git-reference` Configure.pl option,1,[],https://github.com/MoarVM/MoarVM/pull/1228,https://github.com/patrickbkr,6,https://github.com/MoarVM/MoarVM/pull/1228#issuecomment-578689880,"This option makes the configure process create / update git repositories for all of its submodules in the given folders and use those as reference repos.
This is similar, but not exactly the same as what the rakudo --git-reference option has been. The rakudo option did not create or update the referenced repository, but just used it. The implementation of this PR creates and updates the reference repository if it's not found. So as a user one doesn't need to know how the submodules are called or what their urls are.
I plan to create corresponding PRs for nqp and rakudo shortly.
Draft PR to see what CI will do.","I think it's important that each project is responsible for its own reference repos (so the Configure.pl of rakudo should not try to set up the reference repos for the submodules of moarvm or nqp). The way the PR currently works is that setup happens on first use. The only information flowing from one project to the other is the --git-reference parameter which is passed to the subprojects Configure.pl during the configuration step each project sets up its own references repos.
Using a reference can not avoid network access entirely. It will always access the remote repository to query what needs to be updated, but then avoids downloading parts that can be found in the reference repository. So it usually makes sense to not only initially set up a reference repository and then only reference it, but update (fetch) the reference repository before each use, so the objects that are downloaded also end up in the reference. So when splitting the functionality up, we'd need three operations:

Setup
Update
Use

The update and use operations are easy to do. But having a separate setup functionality is tricky.
If such a functionality sets up all reference repos that are needed (so that calling Configure.pl --setup-references=/path/to/ref/dir/ in a rakudo repository will also automatically set up the reference repos for nqp and moarvm) means the setup functionality would need to clone the nqp and moarvm repos to call their setup functionality. Questions

Where should the moarvm and nqp repos be cloned to?
Should they be deleted after having setup the reference repos?
Should we use those clones as reference directly and just accept that we have non-bare reference repos for nqp and moar?
What if one doesn't want to build for moarvm, but JVM, how do we prevent setting up moarvm in that case?

Alternatively one could just not try to have a setup functionality that sets up references for all involved repos, but only the ones for the own project. So one would need to manually clone rakudo, nqp and moarvm and call Configure.pl --setup-references=/path/to/ref/dir/ in each of them separately and probably delete the nqp and moarvm repositories again afterwards.
None of the above ideas for a separate setup step seem attractive to me. I'm open for suggestions!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1228,2020-01-13T20:44:18Z,2020-02-11T19:04:55Z,2020-02-11T19:04:55Z,MERGED,True,116,14,2,https://github.com/patrickbkr,Implement `--git-reference` Configure.pl option,1,[],https://github.com/MoarVM/MoarVM/pull/1228,https://github.com/patrickbkr,7,https://github.com/MoarVM/MoarVM/pull/1228#issuecomment-579674184,"This option makes the configure process create / update git repositories for all of its submodules in the given folders and use those as reference repos.
This is similar, but not exactly the same as what the rakudo --git-reference option has been. The rakudo option did not create or update the referenced repository, but just used it. The implementation of this PR creates and updates the reference repository if it's not found. So as a user one doesn't need to know how the submodules are called or what their urls are.
I plan to create corresponding PRs for nqp and rakudo shortly.
Draft PR to see what CI will do.",@niner: What about renaming the option to --git-cache-dir? That would be a bit more telling of how the option works. Also that would differentiate the option from the previously existing --git-reference option.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1231,2020-01-30T00:17:40Z,2020-08-01T02:11:13Z,2020-08-01T02:11:13Z,CLOSED,False,608,545,10,https://github.com/Kaiepi,[IP6NS Grant] Implement support for bind before connect with sync sockets,3,[],https://github.com/MoarVM/MoarVM/pull/1231,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1231,"Needed for upcoming support for bind before connect and UDP sockets with IO::Socket::INET.
Passes make test and make spectest.","Needed for upcoming support for bind before connect and UDP sockets with IO::Socket::INET.
Passes make test and make spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1232,2020-02-01T22:45:00Z,2020-04-18T12:28:50Z,2020-04-18T12:28:50Z,MERGED,True,4,2,1,https://github.com/Kaiepi,Revert to treating all addresses like those meant for passive sockets,1,[],https://github.com/MoarVM/MoarVM/pull/1232,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1232,Related to rakudo/rakudo#3457,Related to rakudo/rakudo#3457,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1233,2020-02-02T14:31:20Z,2020-02-09T17:03:43Z,2020-02-09T17:07:26Z,MERGED,True,108,165,4,https://github.com/MasterDuke17,Use new functions introduced in ltm v1.2.0...,3,[],https://github.com/MoarVM/MoarVM/pull/1233,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1233,"to instead of our own implementations written before they were available
upstream.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","to instead of our own implementations written before they were available
upstream.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1233,2020-02-02T14:31:20Z,2020-02-09T17:03:43Z,2020-02-09T17:07:26Z,MERGED,True,108,165,4,https://github.com/MasterDuke17,Use new functions introduced in ltm v1.2.0...,3,[],https://github.com/MoarVM/MoarVM/pull/1233,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1233#issuecomment-583867095,"to instead of our own implementations written before they were available
upstream.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","So what's the reason for adding all those:
     mp_clear(ic); \
     MVM_free(ic); \

??  Will that affect performance?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1233,2020-02-02T14:31:20Z,2020-02-09T17:03:43Z,2020-02-09T17:07:26Z,MERGED,True,108,165,4,https://github.com/MasterDuke17,Use new functions introduced in ltm v1.2.0...,3,[],https://github.com/MoarVM/MoarVM/pull/1233,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1233#issuecomment-583868003,"to instead of our own implementations written before they were available
upstream.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Those are to clean/free up allocated resources before throwing an exception. In the switch to libtommath v1.2.0 I added a lot of error checking and throwing of exceptions, but they would leak.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1233,2020-02-02T14:31:20Z,2020-02-09T17:03:43Z,2020-02-09T17:07:26Z,MERGED,True,108,165,4,https://github.com/MasterDuke17,Use new functions introduced in ltm v1.2.0...,3,[],https://github.com/MoarVM/MoarVM/pull/1233,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1233#issuecomment-583868382,"to instead of our own implementations written before they were available
upstream.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","And yes, there will be a slight performance loss, but most of those are in failure paths anyway, and the cost of not doing them is leaking memory.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1233,2020-02-02T14:31:20Z,2020-02-09T17:03:43Z,2020-02-09T17:07:26Z,MERGED,True,108,165,4,https://github.com/MasterDuke17,Use new functions introduced in ltm v1.2.0...,3,[],https://github.com/MoarVM/MoarVM/pull/1233,https://github.com/lizmat,5,https://github.com/MoarVM/MoarVM/pull/1233#issuecomment-583868471,"to instead of our own implementations written before they were available
upstream.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Ok, as long as they're in failure paths  :-)  And not leaking memory is also good.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1233,2020-02-02T14:31:20Z,2020-02-09T17:03:43Z,2020-02-09T17:07:26Z,MERGED,True,108,165,4,https://github.com/MasterDuke17,Use new functions introduced in ltm v1.2.0...,3,[],https://github.com/MoarVM/MoarVM/pull/1233,https://github.com/lizmat,6,https://github.com/MoarVM/MoarVM/pull/1233#issuecomment-583868559,"to instead of our own implementations written before they were available
upstream.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",Merged because we're relatively early in the release cycle.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1235,2020-02-07T19:06:20Z,2020-02-07T20:23:31Z,2020-02-07T21:07:29Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update libuv to version 1.34.2,1,[],https://github.com/MoarVM/MoarVM/pull/1235,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1235,Spec- and stresstest clean (on Linux),Spec- and stresstest clean (on Linux),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1236,2020-02-08T01:14:02Z,2020-02-08T01:42:23Z,2020-02-08T20:40:29Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Negative numbers should not be prime,1,[],https://github.com/MoarVM/MoarVM/pull/1236,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1236,"but mp_prime_is_prime() doesn't check for that.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Now say is-prime(-2) returns False.","but mp_prime_is_prime() doesn't check for that.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Now say is-prime(-2) returns False.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1238,2020-02-12T23:45:25Z,2020-02-13T07:59:36Z,2020-02-13T08:50:44Z,MERGED,True,40,10,2,https://github.com/MasterDuke17,Make nqp::rand_I respect nqp::srand again,1,[],https://github.com/MoarVM/MoarVM/pull/1238,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1238,"The upgrade to libtommath v1.2.0 brought along a new version of mp_rand
that uses sources of randomness that aren't seeded with srand. So copy
their mp_rand, but modify to use tinymt64 as the source of randomness.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Fixes rakudo/rakudo#3469, should also fix rakudo/rakudo#3470.","The upgrade to libtommath v1.2.0 brought along a new version of mp_rand
that uses sources of randomness that aren't seeded with srand. So copy
their mp_rand, but modify to use tinymt64 as the source of randomness.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Fixes rakudo/rakudo#3469, should also fix rakudo/rakudo#3470.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1238,2020-02-12T23:45:25Z,2020-02-13T07:59:36Z,2020-02-13T08:50:44Z,MERGED,True,40,10,2,https://github.com/MasterDuke17,Make nqp::rand_I respect nqp::srand again,1,[],https://github.com/MoarVM/MoarVM/pull/1238,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1238#issuecomment-585599634,"The upgrade to libtommath v1.2.0 brought along a new version of mp_rand
that uses sources of randomness that aren't seeded with srand. So copy
their mp_rand, but modify to use tinymt64 as the source of randomness.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Fixes rakudo/rakudo#3469, should also fix rakudo/rakudo#3470.",Thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1239,2020-02-15T23:16:04Z,2020-03-12T17:53:39Z,2020-03-12T17:53:40Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,"Revert ""Update libuv to version 1.34.2""",1,[],https://github.com/MoarVM/MoarVM/pull/1239,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1239,"This version bump breaks Kernel.cpu-cores on OpenBSD. See
libuv/libuv#2685
This reverts commit f47f531.","This version bump breaks Kernel.cpu-cores on OpenBSD. See
libuv/libuv#2685
This reverts commit f47f531.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1239,2020-02-15T23:16:04Z,2020-03-12T17:53:39Z,2020-03-12T17:53:40Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,"Revert ""Update libuv to version 1.34.2""",1,[],https://github.com/MoarVM/MoarVM/pull/1239,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1239#issuecomment-586652536,"This version bump breaks Kernel.cpu-cores on OpenBSD. See
libuv/libuv#2685
This reverts commit f47f531.","Is that the only thing it breaks?  Of so, maybe we can special case nqp::cpucores on that OS?  I thought this was a pretty important libuv  update?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1239,2020-02-15T23:16:04Z,2020-03-12T17:53:39Z,2020-03-12T17:53:40Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,"Revert ""Update libuv to version 1.34.2""",1,[],https://github.com/MoarVM/MoarVM/pull/1239,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/1239#issuecomment-586657207,"This version bump breaks Kernel.cpu-cores on OpenBSD. See
libuv/libuv#2685
This reverts commit f47f531.","nqp::cpucores seems to be the only thing this bump breaks, but ThreadPoolScheduler depends on it as well, which is a bigger issue because that always returns 0 with this. Making a special case for OpenBSD wouldn't be too big a big deal to write, but I'm wary about making a change like that that people might forget about before the next libuv bump.
I don't know if this version in particular is special for MoarVM compared to the ones before it, but I bisected the problem to libuv/libuv@2ab3dc1, which is a change from v1.34.1. v1.34.0 works OK for me and includes a good chunk of the changes this bump brought. Would using that over this be a good compromise?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1239,2020-02-15T23:16:04Z,2020-03-12T17:53:39Z,2020-03-12T17:53:40Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,"Revert ""Update libuv to version 1.34.2""",1,[],https://github.com/MoarVM/MoarVM/pull/1239,https://github.com/lizmat,4,https://github.com/MoarVM/MoarVM/pull/1239#issuecomment-586701465,"This version bump breaks Kernel.cpu-cores on OpenBSD. See
libuv/libuv#2685
This reverts commit f47f531.","rakudo/rakudo@1a7f16bc42 will make sure that the ThreadPoolScheduler will not break on nqp::cpucores returning garbage.  This feels like a sensible thing to do anyway, regardless of this issue.  But it should make this PR unnecessary.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1239,2020-02-15T23:16:04Z,2020-03-12T17:53:39Z,2020-03-12T17:53:40Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,"Revert ""Update libuv to version 1.34.2""",1,[],https://github.com/MoarVM/MoarVM/pull/1239,https://github.com/Kaiepi,5,https://github.com/MoarVM/MoarVM/pull/1239#issuecomment-586723533,"This version bump breaks Kernel.cpu-cores on OpenBSD. See
libuv/libuv#2685
This reverts commit f47f531.","I tested out your changes and... unfortunately they don't; promise and supply tests in roast are still flapping with them. This doesn't appear to happen with v1.34.0.
If it's important to have the changes from v1.34.1 and v1.34.2, I think it'd be alright to have the special case for OpenBSD in MVM_platform_cpu_count if an issue were opened about it as a reminder to remove it the next time someone bumps libuv.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1239,2020-02-15T23:16:04Z,2020-03-12T17:53:39Z,2020-03-12T17:53:40Z,CLOSED,False,1,1,1,https://github.com/Kaiepi,"Revert ""Update libuv to version 1.34.2""",1,[],https://github.com/MoarVM/MoarVM/pull/1239,https://github.com/Kaiepi,6,https://github.com/MoarVM/MoarVM/pull/1239#issuecomment-598334970,"This version bump breaks Kernel.cpu-cores on OpenBSD. See
libuv/libuv#2685
This reverts commit f47f531.",This is no longer necessary with 0743c5d.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1240,2020-02-17T17:28:39Z,2020-04-09T13:12:50Z,2020-04-09T13:12:50Z,MERGED,True,2,2,1,https://github.com/Kaiepi,Include system headers after headers local to MoarVM in the Makefile,1,[],https://github.com/MoarVM/MoarVM/pull/1240,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1240,"This prevents headers for older versions of libraries installed on the
system from overriding those local to MoarVM.","This prevents headers for older versions of libraries installed on the
system from overriding those local to MoarVM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1241,2020-02-17T21:35:40Z,2020-02-19T17:37:10Z,2020-02-19T17:37:10Z,MERGED,True,0,22,2,https://github.com/patrickbkr,"Revert ""Dynamic library loading works with unicody paths on Windows""",1,[],https://github.com/MoarVM/MoarVM/pull/1241,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1241,"This reverts commit efeec45.
It's not needed anymore, because the fix has been pushed upstream and been
released with Dyncall 1.1 which we just bumped to.","This reverts commit efeec45.
It's not needed anymore, because the fix has been pushed upstream and been
released with Dyncall 1.1 which we just bumped to.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1243,2020-02-22T22:07:30Z,2020-02-23T14:55:49Z,2020-02-23T14:55:51Z,MERGED,True,18,24,3,https://github.com/MasterDuke17,Doing an mp_clear after a failed mp_init is UB,1,[],https://github.com/MoarVM/MoarVM/pull/1243,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1243,"I checked with jaeckel on #libtom and we shouldn't mp_clear() a variable if its mp_init*() failed.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I checked with jaeckel on #libtom and we shouldn't mp_clear() a variable if its mp_init*() failed.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1243,2020-02-22T22:07:30Z,2020-02-23T14:55:49Z,2020-02-23T14:55:51Z,MERGED,True,18,24,3,https://github.com/MasterDuke17,Doing an mp_clear after a failed mp_init is UB,1,[],https://github.com/MoarVM/MoarVM/pull/1243,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1243#issuecomment-590004306,"I checked with jaeckel on #libtom and we shouldn't mp_clear() a variable if its mp_init*() failed.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",Is this important enough to cherry pick into a 2020.02 release?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1243,2020-02-22T22:07:30Z,2020-02-23T14:55:49Z,2020-02-23T14:55:51Z,MERGED,True,18,24,3,https://github.com/MasterDuke17,Doing an mp_clear after a failed mp_init is UB,1,[],https://github.com/MoarVM/MoarVM/pull/1243,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1243#issuecomment-590005651,"I checked with jaeckel on #libtom and we shouldn't mp_clear() a variable if its mp_init*() failed.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Not sure. They're pretty much all in error branches, and ones unlikely to be hit. mp_init is pretty simple, about the only thing that it contains that could go wrong is a calloc. And if a calloc fails, I doubt the rest of MoavVM is going to be very happy.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1243,2020-02-22T22:07:30Z,2020-02-23T14:55:49Z,2020-02-23T14:55:51Z,MERGED,True,18,24,3,https://github.com/MasterDuke17,Doing an mp_clear after a failed mp_init is UB,1,[],https://github.com/MoarVM/MoarVM/pull/1243,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/1243#issuecomment-590007761,"I checked with jaeckel on #libtom and we shouldn't mp_clear() a variable if its mp_init*() failed.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",I'd say not worth the cherry-pick in my opinion.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1248,2020-02-28T18:50:26Z,2020-03-07T22:02:30Z,2020-03-07T22:02:30Z,MERGED,True,23,34,1,https://github.com/patrickbkr,Fix buiding when git reference dir has spaces in its path,1,[],https://github.com/MoarVM/MoarVM/pull/1248,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1248,And fix two typos.,And fix two typos.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1250,2020-02-29T15:15:09Z,2020-02-29T17:45:06Z,2020-02-29T19:20:51Z,MERGED,True,17,4,1,https://github.com/dogbert17,Add support for Thread Sanitizer in Configure.pl,1,[],https://github.com/MoarVM/MoarVM/pull/1250,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1250,"Thread Sanitizer is a tool used to detect data races at
runtime. Enable with --tsan, e.g.
perl Configure.pl --debug --tsan --prefix=
for more info run
perl Configure.pl --help","Thread Sanitizer is a tool used to detect data races at
runtime. Enable with --tsan, e.g.
perl Configure.pl --debug --tsan --prefix=
for more info run
perl Configure.pl --help",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1251,2020-02-29T17:54:39Z,2020-02-29T18:14:21Z,2020-02-29T18:14:21Z,MERGED,True,1,1,1,https://github.com/patrickbkr,Update dyncall to rev 357,1,[],https://github.com/MoarVM/MoarVM/pull/1251,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1251,Should fix #1246,Should fix #1246,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1252,2020-03-01T04:21:07Z,2020-03-02T19:46:46Z,2020-03-02T20:41:17Z,MERGED,True,239,105,10,https://github.com/vrurg,Add nextdispatcherfor/takenextdispatcher ops,2,[],https://github.com/MoarVM/MoarVM/pull/1252,https://github.com/vrurg,1,https://github.com/MoarVM/MoarVM/pull/1252,"Provide support for Raku chained dispatchers. Their purpose is to pass
information to the downstream dispatcher about what upstream dispatcher
must take over the control next when downstream exhausts.
For example, when one wraps a candidate in a multi, the WrapDispatcher
must know about the instance of MultiDispatcher to switch back to it
when all wrappers are done and the candidate calls one of
{next|call}{same|with}.
Technically, both ops are clones for setdispatcherfor/takedispatcher except that they operate with next_dispatcher and next_dispatcher_for members of ThreadContext; and their purpose differs too.","Provide support for Raku chained dispatchers. Their purpose is to pass
information to the downstream dispatcher about what upstream dispatcher
must take over the control next when downstream exhausts.
For example, when one wraps a candidate in a multi, the WrapDispatcher
must know about the instance of MultiDispatcher to switch back to it
when all wrappers are done and the candidate calls one of
{next|call}{same|with}.
Technically, both ops are clones for setdispatcherfor/takedispatcher except that they operate with next_dispatcher and next_dispatcher_for members of ThreadContext; and their purpose differs too.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1252,2020-03-01T04:21:07Z,2020-03-02T19:46:46Z,2020-03-02T20:41:17Z,MERGED,True,239,105,10,https://github.com/vrurg,Add nextdispatcherfor/takenextdispatcher ops,2,[],https://github.com/MoarVM/MoarVM/pull/1252,https://github.com/vrurg,2,https://github.com/MoarVM/MoarVM/pull/1252#issuecomment-593448756,"Provide support for Raku chained dispatchers. Their purpose is to pass
information to the downstream dispatcher about what upstream dispatcher
must take over the control next when downstream exhausts.
For example, when one wraps a candidate in a multi, the WrapDispatcher
must know about the instance of MultiDispatcher to switch back to it
when all wrappers are done and the candidate calls one of
{next|call}{same|with}.
Technically, both ops are clones for setdispatcherfor/takedispatcher except that they operate with next_dispatcher and next_dispatcher_for members of ThreadContext; and their purpose differs too.","For whom will review this: my biggest worry are JIT-related pieces. Though they also cloned from the originals and only stricture member names are changed.
In either case, tested localy with a rather big project of mine. Runs smoothly.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1252,2020-03-01T04:21:07Z,2020-03-02T19:46:46Z,2020-03-02T20:41:17Z,MERGED,True,239,105,10,https://github.com/vrurg,Add nextdispatcherfor/takenextdispatcher ops,2,[],https://github.com/MoarVM/MoarVM/pull/1252,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1252#issuecomment-593598754,"Provide support for Raku chained dispatchers. Their purpose is to pass
information to the downstream dispatcher about what upstream dispatcher
must take over the control next when downstream exhausts.
For example, when one wraps a candidate in a multi, the WrapDispatcher
must know about the instance of MultiDispatcher to switch back to it
when all wrappers are done and the candidate calls one of
{next|call}{same|with}.
Technically, both ops are clones for setdispatcherfor/takedispatcher except that they operate with next_dispatcher and next_dispatcher_for members of ThreadContext; and their purpose differs too.","For whom will review this: my biggest worry are JIT-related pieces. Though they also cloned from the originals and only stricture member names are changed.

FYI, I believe you also need to add an entry in src/jit/graph.c for it to be fully jitted.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1252,2020-03-01T04:21:07Z,2020-03-02T19:46:46Z,2020-03-02T20:41:17Z,MERGED,True,239,105,10,https://github.com/vrurg,Add nextdispatcherfor/takenextdispatcher ops,2,[],https://github.com/MoarVM/MoarVM/pull/1252,https://github.com/vrurg,4,https://github.com/MoarVM/MoarVM/pull/1252#issuecomment-593610866,"Provide support for Raku chained dispatchers. Their purpose is to pass
information to the downstream dispatcher about what upstream dispatcher
must take over the control next when downstream exhausts.
For example, when one wraps a candidate in a multi, the WrapDispatcher
must know about the instance of MultiDispatcher to switch back to it
when all wrappers are done and the candidate calls one of
{next|call}{same|with}.
Technically, both ops are clones for setdispatcherfor/takedispatcher except that they operate with next_dispatcher and next_dispatcher_for members of ThreadContext; and their purpose differs too.","@MasterDuke17 I found takedispatcher there but not setdispatcherfor. Anyway, I think somebody with better understanding of JIT than mine should have a look at it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1253,2020-03-01T12:31:05Z,2020-03-01T12:31:26Z,2020-05-04T18:15:54Z,MERGED,True,6,2,3,https://github.com/Altai-man,2020.02.1 release,3,[],https://github.com/MoarVM/MoarVM/pull/1253,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1253,A point release with a fix for compiling with musl.,A point release with a fix for compiling with musl.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1254,2020-03-03T09:28:49Z,,2021-01-10T16:45:22Z,OPEN,False,14,0,1,https://github.com/JJ,Adds a GitHub action that uses an Alpine container to test-compile,17,[],https://github.com/MoarVM/MoarVM/pull/1254,https://github.com/JJ,1,https://github.com/MoarVM/MoarVM/pull/1254,This is destined to avoid #1246 in the future by test-compiling in an Alpine container every single push to master.,This is destined to avoid #1246 in the future by test-compiling in an Alpine container every single push to master.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1254,2020-03-03T09:28:49Z,,2021-01-10T16:45:22Z,OPEN,False,14,0,1,https://github.com/JJ,Adds a GitHub action that uses an Alpine container to test-compile,17,[],https://github.com/MoarVM/MoarVM/pull/1254,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1254#issuecomment-622141344,This is destined to avoid #1246 in the future by test-compiling in an Alpine container every single push to master.,@JJ Does anything have to be done to enable this other than merging it? Is it normal that I don't see any result of it in Checks in the PR (like would happen if adding or changing a .travis.yml in a branch)?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1254,2020-03-03T09:28:49Z,,2021-01-10T16:45:22Z,OPEN,False,14,0,1,https://github.com/JJ,Adds a GitHub action that uses an Alpine container to test-compile,17,[],https://github.com/MoarVM/MoarVM/pull/1254,https://github.com/JJ,3,https://github.com/MoarVM/MoarVM/pull/1254#issuecomment-622283263,This is destined to avoid #1246 in the future by test-compiling in an Alpine container every single push to master.,"No
Well, you'll see the results in the ""Actions"" menu once you merge it. It can't be checked really.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1254,2020-03-03T09:28:49Z,,2021-01-10T16:45:22Z,OPEN,False,14,0,1,https://github.com/JJ,Adds a GitHub action that uses an Alpine container to test-compile,17,[],https://github.com/MoarVM/MoarVM/pull/1254,https://github.com/JJ,4,https://github.com/MoarVM/MoarVM/pull/1254#issuecomment-757505928,This is destined to avoid #1246 in the future by test-compiling in an Alpine container every single push to master.,"No problem in doing that, but there's also a pull-down menu in the merge button where you can do that yourself, it says ""Squash and merge"". It's fairly recent, but does the job.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1255,2020-03-04T03:35:56Z,2020-03-10T18:11:39Z,2020-03-10T18:11:39Z,MERGED,True,12,0,3,https://github.com/vrurg,Add support for takenextdispatcher in inlining,1,[],https://github.com/MoarVM/MoarVM/pull/1255,https://github.com/vrurg,1,https://github.com/MoarVM/MoarVM/pull/1255,Just copied over from takedispatcher.,Just copied over from takedispatcher.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1256,2020-03-07T22:40:46Z,2020-03-08T08:12:24Z,2020-03-08T08:12:24Z,MERGED,True,2,2,1,https://github.com/patrickbkr,Fix submodule updating,1,[],https://github.com/MoarVM/MoarVM/pull/1256,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1256,The previous commit broke it completely.,The previous commit broke it completely.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1257,2020-03-09T20:18:06Z,2020-03-09T21:03:59Z,2020-03-09T21:03:59Z,CLOSED,False,14,7,1,https://github.com/patrickbkr,Fix submodule-update.pl on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1257,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1257,Don't merge. Want so see what this does on Windows first.,Don't merge. Want so see what this does on Windows first.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1257,2020-03-09T20:18:06Z,2020-03-09T21:03:59Z,2020-03-09T21:03:59Z,CLOSED,False,14,7,1,https://github.com/patrickbkr,Fix submodule-update.pl on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1257,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1257#issuecomment-596759589,Don't merge. Want so see what this does on Windows first.,AppVeyor seems happy. Can merge now.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1257,2020-03-09T20:18:06Z,2020-03-09T21:03:59Z,2020-03-09T21:03:59Z,CLOSED,False,14,7,1,https://github.com/patrickbkr,Fix submodule-update.pl on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1257,https://github.com/patrickbkr,3,https://github.com/MoarVM/MoarVM/pull/1257#issuecomment-596778212,Don't merge. Want so see what this does on Windows first.,"We went a different path: a2782ad27b
Closing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1258,2020-03-12T15:44:01Z,2020-03-12T16:19:12Z,2020-03-12T16:30:58Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update to libuv 1.35.0,1,[],https://github.com/MoarVM/MoarVM/pull/1258,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1258,Stresstest was clean on Linux (Mint),Stresstest was clean on Linux (Mint),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1259,2020-03-15T11:40:22Z,2020-03-16T19:34:09Z,2020-03-16T19:34:11Z,MERGED,True,23,0,2,https://github.com/MasterDuke17,JIT nextdispatcherfor,1,[],https://github.com/MoarVM/MoarVM/pull/1259,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1259,"This was just cobbled together based on looking at its interpreter
implementation and the assembly for other ops.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
The numbers are too variable to tell if there's much of an improvement in the test-t benchmark, but it does get rid of two 'JIT: bailed completely because of ' in a spesh log of running it.","This was just cobbled together based on looking at its interpreter
implementation and the assembly for other ops.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
The numbers are too variable to tell if there's much of an improvement in the test-t benchmark, but it does get rid of two 'JIT: bailed completely because of ' in a spesh log of running it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1260,2020-03-27T09:39:46Z,2020-03-27T13:45:19Z,2020-03-27T13:47:23Z,MERGED,True,1,0,1,https://github.com/MasterDuke17,Free compunits loaded from bytecode upon dealloc,1,[],https://github.com/MoarVM/MoarVM/pull/1260,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1260,"Before this, MVM_SPESH_DISABLE=1 valgrind --leak-check=full raku --full-cleanup -e '' would report 'definitely lost: 1,560 bytes in 2 blocks', after it reports 'definitely lost: 32 bytes in 1 blocks'.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Before this, MVM_SPESH_DISABLE=1 valgrind --leak-check=full raku --full-cleanup -e '' would report 'definitely lost: 1,560 bytes in 2 blocks', after it reports 'definitely lost: 32 bytes in 1 blocks'.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1261,2020-03-27T16:15:49Z,2020-03-27T16:27:51Z,2020-03-27T16:28:00Z,MERGED,True,3,0,1,https://github.com/MasterDuke17,Free some memory calloc'ed when making spesh plans,1,[],https://github.com/MoarVM/MoarVM/pull/1261,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1261,"Before this, MVM_JIT_DISABLE=1 MVM_SPESH_BLOCKING=1 MVM_SPESH_NOELAY=1 valgrind --leak-check=full raku --full-cleanup -e '' would report definitely lost: 1,665 bytes in 50 blocks, after it reports definitely lost: 1,320 bytes in 30 blocks.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Before this, MVM_JIT_DISABLE=1 MVM_SPESH_BLOCKING=1 MVM_SPESH_NOELAY=1 valgrind --leak-check=full raku --full-cleanup -e '' would report definitely lost: 1,665 bytes in 50 blocks, after it reports definitely lost: 1,320 bytes in 30 blocks.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1262,2020-03-27T17:03:45Z,2020-03-27T18:18:18Z,2020-03-27T18:49:20Z,MERGED,True,2,0,1,https://github.com/MasterDuke17,Destroy vectors that were previously init'ed,1,[],https://github.com/MoarVM/MoarVM/pull/1262,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1262,"Before this, MVM_JIT_DISABLE=1 MVM_SPESH_BLOCKING=1 MVM_SPESH_NOELAY=1 valgrind --leak-check=full raku --full-cleanup -e '' would report definitely lost: 1,320 bytes in 30 blocks, after it reports definitely lost: 904 bytes in 2 blocks.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Before this, MVM_JIT_DISABLE=1 MVM_SPESH_BLOCKING=1 MVM_SPESH_NOELAY=1 valgrind --leak-check=full raku --full-cleanup -e '' would report definitely lost: 1,320 bytes in 30 blocks, after it reports definitely lost: 904 bytes in 2 blocks.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1263,2020-03-27T22:04:16Z,2020-04-01T16:46:00Z,2020-04-01T16:46:00Z,MERGED,True,1,1,1,https://github.com/niner,Fix interned callsites getting leaked when fixing up inlines,1,[],https://github.com/MoarVM/MoarVM/pull/1263,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1263,"Interned callsites are no longer owned by the comp unit but by the instance.
This means that we also do not free them when the comp unit gets garbage
collected. It also means that it should be safe to reuse the existing pointer
when adding an interned callsite to a comp unit (e.g. when inlining across
comp unit boundaries).","Interned callsites are no longer owned by the comp unit but by the instance.
This means that we also do not free them when the comp unit gets garbage
collected. It also means that it should be safe to reuse the existing pointer
when adding an interned callsite to a comp unit (e.g. when inlining across
comp unit boundaries).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1264,2020-03-28T00:06:35Z,2020-03-28T08:55:03Z,2020-03-28T08:57:34Z,MERGED,True,5,1,1,https://github.com/MasterDuke17,Free malloced data before leaving the function,1,[],https://github.com/MoarVM/MoarVM/pull/1264,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1264,"Before this, running valgrind when building Rakudo's CORE.c would report possibly lost: 6,038,832 bytes in 1 blocks, after it reports possibly lost: 0 bytes in 0 blocks.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Before this, running valgrind when building Rakudo's CORE.c would report possibly lost: 6,038,832 bytes in 1 blocks, after it reports possibly lost: 0 bytes in 0 blocks.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1265,2020-03-28T00:47:28Z,2020-06-05T09:23:44Z,2020-06-05T09:23:44Z,MERGED,True,1,1,1,https://github.com/patrickbkr,Always handle proc exec arguments verbatim on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1265,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1265,"Together with a change in Rakudo this fixes Raku/problem-solving#20.
This change is not backwards compatible. To work correctly it's necessary to use a Rakudo which has been respectively adapted.","Together with a change in Rakudo this fixes Raku/problem-solving#20.
This change is not backwards compatible. To work correctly it's necessary to use a Rakudo which has been respectively adapted.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1266,2020-03-29T17:59:43Z,2020-03-29T18:27:22Z,2020-03-29T18:27:22Z,MERGED,True,1,0,1,https://github.com/dogbert17,Add missing break statement,1,[],https://github.com/MoarVM/MoarVM/pull/1266,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1266,"For some reason the compiler didn't catch this. Change is spectest
clean. By adding this a dormant opt made by jnthn++ is enabled.","For some reason the compiler didn't catch this. Change is spectest
clean. By adding this a dormant opt made by jnthn++ is enabled.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1267,2020-04-05T13:41:27Z,2020-04-17T12:52:43Z,2020-04-17T12:56:37Z,MERGED,True,14,8,2,https://github.com/MasterDuke17,Let encode take a preallocated buffer,2,[],https://github.com/MoarVM/MoarVM/pull/1267,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1267,Can be used so NQP/Rakudo don't have to create so many temporary buffers when creating one large string out of many encoded parts.,Can be used so NQP/Rakudo don't have to create so many temporary buffers when creating one large string out of many encoded parts.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1268,2020-04-06T06:17:52Z,2020-04-06T06:42:14Z,2020-04-06T17:30:56Z,MERGED,True,2,1,1,https://github.com/usev6,Avoid null pointer in backtrace and avoid segfault,1,[],https://github.com/MoarVM/MoarVM/pull/1268,https://github.com/usev6,1,https://github.com/MoarVM/MoarVM/pull/1268,Fixes rakudo/rakudo#3605.,Fixes rakudo/rakudo#3605.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1269,2020-04-11T18:21:56Z,2020-04-11T19:03:42Z,2020-04-11T19:03:49Z,MERGED,True,1,1,1,https://github.com/dogbert17,Add missing parentheses,1,[],https://github.com/MoarVM/MoarVM/pull/1269,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1269,"The original test used a boolean result in a bitwise operation
which is clearly incorrect.","The original test used a boolean result in a bitwise operation
which is clearly incorrect.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1269,2020-04-11T18:21:56Z,2020-04-11T19:03:42Z,2020-04-11T19:03:49Z,MERGED,True,1,1,1,https://github.com/dogbert17,Add missing parentheses,1,[],https://github.com/MoarVM/MoarVM/pull/1269,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1269#issuecomment-612491815,"The original test used a boolean result in a bitwise operation
which is clearly incorrect.",Good catch!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1270,2020-04-13T14:16:20Z,2020-04-17T17:02:17Z,2020-04-17T17:02:19Z,MERGED,True,117,0,1,https://github.com/MasterDuke17,Add more ops for allocation profiling,4,[],https://github.com/MoarVM/MoarVM/pull/1270,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1270,"Checked by profiling(and profile-compiling): a script that creates several new multi infixes, install-core-dist.raku, and compiling CORE.e. In every case the number of allocations logged was significantly higher.","Checked by profiling(and profile-compiling): a script that creates several new multi infixes, install-core-dist.raku, and compiling CORE.e. In every case the number of allocations logged was significantly higher.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1271,2020-04-16T02:24:20Z,2020-04-26T07:26:12Z,2020-04-26T07:26:12Z,MERGED,True,6,9,1,https://github.com/ddlws,Fix utf8-c8 memory usage,3,[],https://github.com/MoarVM/MoarVM/pull/1271,https://github.com/ddlws,1,https://github.com/MoarVM/MoarVM/pull/1271,"MVM_string_utf8_c8_decodestream allocates 4x the size of it's input buffer for every string it spits out and never releases the excess. This means the size of every MVMString produced is directly tied to the size of the input file (for files up to 1MB). With a large input file, this results in each MVMString consuming 4MB of memory (on my machine).
Consider something like this:
for 'bigFileWithManyLines.txt'.IO.lines(:enc('utf8-c8')) {...}
The GC can keep up if a single thread is consuming the decoder's output, though the memory usage is a bit high. However, multiple workers overwhelm it, and the OOM killer comes out.
This change reallocs the result buffer if it's larger than required. Since it can only request a smaller chunk, the call to realloc is cheap.
This script demonstrates the issue.
#!/bin/env raku
my $words-done = 0;
class statm {
    has Int $.Vmsize;
    has Int $.VmRSS;
    has Int $.shared;
    has Int $.text;
    has Int $.lib;
    has Int $.data;
    has Int $.dt;
    method new($Vmsize,$VmRSS,$shared,$text,$lib,$data,$dt) {
        self.bless(:$Vmsize,:$VmRSS,:$shared,:$text,:$lib,:$data,:$dt);
    }
}
sub memstats() { return statm.new(|('/proc/self/statm'.IO.slurp.split(' ')>>.Int)); }

sub MAIN($wordlist) {
    signal(SIGINT).tap({ say 'words-done: '~ $words-done; exit 1;});
    say ""lines\tVirt(GB)\tResident(GB)"";
    my $s = memstats;
    for $wordlist.IO.lines(:enc('utf8-c8')) {
        $words-done++;
        if ($words-done % 1000 == 0) {
            $s = memstats;
            say $words-done~""\t""~
                Rat.new($s.Vmsize*4096,2**30).fmt('%.1f') ~ 
                ""\t\t""~ Rat.new($s.VmRSS*4096,2**30).fmt('%.1f') ;
        }
        if $_ ~~ 'adsfjalks;dhjasdlfh;dsalfjkdlsajf' { say 'what are the odds' }
    }
}

Here are before and after runs using a readily available source file.
Before patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines   Virt(GB)    Resident(GB)
1000    3.5         0.2
2000    6.6         0.4
3000    7.9         0.4
4000    7.9         0.9
5000    8.4         1.0
6000    11.5        1.1
7000    14.6        1.3
8000    17.7        1.4
9000    20.8        1.5
10000   23.9        1.7

After patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines    Virt(GB)    Resident(GB)
10000    .4          0.1
20000    .4          0.1
30000    .4          0.1
40000    .4          0.1
50000    .4          0.1
60000    .4          0.1
70000    .4          0.1
80000    .4          0.1
90000    .4          0.1
100000   .4          0.1","MVM_string_utf8_c8_decodestream allocates 4x the size of it's input buffer for every string it spits out and never releases the excess. This means the size of every MVMString produced is directly tied to the size of the input file (for files up to 1MB). With a large input file, this results in each MVMString consuming 4MB of memory (on my machine).
Consider something like this:
for 'bigFileWithManyLines.txt'.IO.lines(:enc('utf8-c8')) {...}
The GC can keep up if a single thread is consuming the decoder's output, though the memory usage is a bit high. However, multiple workers overwhelm it, and the OOM killer comes out.
This change reallocs the result buffer if it's larger than required. Since it can only request a smaller chunk, the call to realloc is cheap.
This script demonstrates the issue.
#!/bin/env raku
my $words-done = 0;
class statm {
    has Int $.Vmsize;
    has Int $.VmRSS;
    has Int $.shared;
    has Int $.text;
    has Int $.lib;
    has Int $.data;
    has Int $.dt;
    method new($Vmsize,$VmRSS,$shared,$text,$lib,$data,$dt) {
        self.bless(:$Vmsize,:$VmRSS,:$shared,:$text,:$lib,:$data,:$dt);
    }
}
sub memstats() { return statm.new(|('/proc/self/statm'.IO.slurp.split(' ')>>.Int)); }

sub MAIN($wordlist) {
    signal(SIGINT).tap({ say 'words-done: '~ $words-done; exit 1;});
    say ""lines\tVirt(GB)\tResident(GB)"";
    my $s = memstats;
    for $wordlist.IO.lines(:enc('utf8-c8')) {
        $words-done++;
        if ($words-done % 1000 == 0) {
            $s = memstats;
            say $words-done~""\t""~
                Rat.new($s.Vmsize*4096,2**30).fmt('%.1f') ~ 
                ""\t\t""~ Rat.new($s.VmRSS*4096,2**30).fmt('%.1f') ;
        }
        if $_ ~~ 'adsfjalks;dhjasdlfh;dsalfjkdlsajf' { say 'what are the odds' }
    }
}

Here are before and after runs using a readily available source file.
Before patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines   Virt(GB)    Resident(GB)
1000    3.5         0.2
2000    6.6         0.4
3000    7.9         0.4
4000    7.9         0.9
5000    8.4         1.0
6000    11.5        1.1
7000    14.6        1.3
8000    17.7        1.4
9000    20.8        1.5
10000   23.9        1.7

After patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines    Virt(GB)    Resident(GB)
10000    .4          0.1
20000    .4          0.1
30000    .4          0.1
40000    .4          0.1
50000    .4          0.1
60000    .4          0.1
70000    .4          0.1
80000    .4          0.1
90000    .4          0.1
100000   .4          0.1",True,"{'THUMBS_UP': ['https://github.com/lizmat'], 'HEART': ['https://github.com/AlexDaniel', 'https://github.com/Altai-man']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1271,2020-04-16T02:24:20Z,2020-04-26T07:26:12Z,2020-04-26T07:26:12Z,MERGED,True,6,9,1,https://github.com/ddlws,Fix utf8-c8 memory usage,3,[],https://github.com/MoarVM/MoarVM/pull/1271,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1271#issuecomment-614466282,"MVM_string_utf8_c8_decodestream allocates 4x the size of it's input buffer for every string it spits out and never releases the excess. This means the size of every MVMString produced is directly tied to the size of the input file (for files up to 1MB). With a large input file, this results in each MVMString consuming 4MB of memory (on my machine).
Consider something like this:
for 'bigFileWithManyLines.txt'.IO.lines(:enc('utf8-c8')) {...}
The GC can keep up if a single thread is consuming the decoder's output, though the memory usage is a bit high. However, multiple workers overwhelm it, and the OOM killer comes out.
This change reallocs the result buffer if it's larger than required. Since it can only request a smaller chunk, the call to realloc is cheap.
This script demonstrates the issue.
#!/bin/env raku
my $words-done = 0;
class statm {
    has Int $.Vmsize;
    has Int $.VmRSS;
    has Int $.shared;
    has Int $.text;
    has Int $.lib;
    has Int $.data;
    has Int $.dt;
    method new($Vmsize,$VmRSS,$shared,$text,$lib,$data,$dt) {
        self.bless(:$Vmsize,:$VmRSS,:$shared,:$text,:$lib,:$data,:$dt);
    }
}
sub memstats() { return statm.new(|('/proc/self/statm'.IO.slurp.split(' ')>>.Int)); }

sub MAIN($wordlist) {
    signal(SIGINT).tap({ say 'words-done: '~ $words-done; exit 1;});
    say ""lines\tVirt(GB)\tResident(GB)"";
    my $s = memstats;
    for $wordlist.IO.lines(:enc('utf8-c8')) {
        $words-done++;
        if ($words-done % 1000 == 0) {
            $s = memstats;
            say $words-done~""\t""~
                Rat.new($s.Vmsize*4096,2**30).fmt('%.1f') ~ 
                ""\t\t""~ Rat.new($s.VmRSS*4096,2**30).fmt('%.1f') ;
        }
        if $_ ~~ 'adsfjalks;dhjasdlfh;dsalfjkdlsajf' { say 'what are the odds' }
    }
}

Here are before and after runs using a readily available source file.
Before patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines   Virt(GB)    Resident(GB)
1000    3.5         0.2
2000    6.6         0.4
3000    7.9         0.4
4000    7.9         0.9
5000    8.4         1.0
6000    11.5        1.1
7000    14.6        1.3
8000    17.7        1.4
9000    20.8        1.5
10000   23.9        1.7

After patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines    Virt(GB)    Resident(GB)
10000    .4          0.1
20000    .4          0.1
30000    .4          0.1
40000    .4          0.1
50000    .4          0.1
60000    .4          0.1
70000    .4          0.1
80000    .4          0.1
90000    .4          0.1
100000   .4          0.1","Commits look sensible to me. What I don't understand is: we allocate a large enough buffer to hold one grapheme for every input byte. To my understanding, we would actually use the whole buffer if the input stream actually consists solely of ASCII characters as those would give us one grapheme for every input byte. The absolute worst case would be an input buffer full of graphemes from the extended plane as those could get to 4 bytes per grapheme and in that case we'd allocate 4 times as large a buffer as we actually needed.
This makes me wonder, what your input file looks like? If it does not look like this worst case, there may be some other reason for why your patch helps so much. A reason that could lead us to an even better solution (like not allocating too much in the first place).",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1271,2020-04-16T02:24:20Z,2020-04-26T07:26:12Z,2020-04-26T07:26:12Z,MERGED,True,6,9,1,https://github.com/ddlws,Fix utf8-c8 memory usage,3,[],https://github.com/MoarVM/MoarVM/pull/1271,https://github.com/ddlws,3,https://github.com/MoarVM/MoarVM/pull/1271#issuecomment-614839710,"MVM_string_utf8_c8_decodestream allocates 4x the size of it's input buffer for every string it spits out and never releases the excess. This means the size of every MVMString produced is directly tied to the size of the input file (for files up to 1MB). With a large input file, this results in each MVMString consuming 4MB of memory (on my machine).
Consider something like this:
for 'bigFileWithManyLines.txt'.IO.lines(:enc('utf8-c8')) {...}
The GC can keep up if a single thread is consuming the decoder's output, though the memory usage is a bit high. However, multiple workers overwhelm it, and the OOM killer comes out.
This change reallocs the result buffer if it's larger than required. Since it can only request a smaller chunk, the call to realloc is cheap.
This script demonstrates the issue.
#!/bin/env raku
my $words-done = 0;
class statm {
    has Int $.Vmsize;
    has Int $.VmRSS;
    has Int $.shared;
    has Int $.text;
    has Int $.lib;
    has Int $.data;
    has Int $.dt;
    method new($Vmsize,$VmRSS,$shared,$text,$lib,$data,$dt) {
        self.bless(:$Vmsize,:$VmRSS,:$shared,:$text,:$lib,:$data,:$dt);
    }
}
sub memstats() { return statm.new(|('/proc/self/statm'.IO.slurp.split(' ')>>.Int)); }

sub MAIN($wordlist) {
    signal(SIGINT).tap({ say 'words-done: '~ $words-done; exit 1;});
    say ""lines\tVirt(GB)\tResident(GB)"";
    my $s = memstats;
    for $wordlist.IO.lines(:enc('utf8-c8')) {
        $words-done++;
        if ($words-done % 1000 == 0) {
            $s = memstats;
            say $words-done~""\t""~
                Rat.new($s.Vmsize*4096,2**30).fmt('%.1f') ~ 
                ""\t\t""~ Rat.new($s.VmRSS*4096,2**30).fmt('%.1f') ;
        }
        if $_ ~~ 'adsfjalks;dhjasdlfh;dsalfjkdlsajf' { say 'what are the odds' }
    }
}

Here are before and after runs using a readily available source file.
Before patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines   Virt(GB)    Resident(GB)
1000    3.5         0.2
2000    6.6         0.4
3000    7.9         0.4
4000    7.9         0.9
5000    8.4         1.0
6000    11.5        1.1
7000    14.6        1.3
8000    17.7        1.4
9000    20.8        1.5
10000   23.9        1.7

After patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines    Virt(GB)    Resident(GB)
10000    .4          0.1
20000    .4          0.1
30000    .4          0.1
40000    .4          0.1
50000    .4          0.1
60000    .4          0.1
70000    .4          0.1
80000    .4          0.1
90000    .4          0.1
100000   .4          0.1","I've tested it on 100% ascii files and files of random bytes with newlines thrown in. The file size is the only thing that has an affect, since it controls the size of the read buffer and therefore the size of the output strings.
There really isn't a worst case like you're asking about, since the resulting strings are 4 bytes/grapheme no matter what. To actually use the whole buffer, you just need a line that's longer than the input buffer. In all my fuzzing, I don't think I ever tested that, though...
Rakudo might share some blame. While the default read length is 65535 bytes if you call read() on an IO::Handle, it reads 0x100000 for things like .lines and probably .slurp, too. That's why the file size has an affect on the resulting string for files up to 1MB. If rakudo was reading 65K instead of 1MB, I might never have noticed the issue.
If you want a smaller initial allocation per line, a change in rakudo to read smaller chunks for calls to .lines should do the trick. I'm not very familiar with nqp and rakudo, but it looks like this might be the place: src/core.c/IO/Handle.pm6",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1271,2020-04-16T02:24:20Z,2020-04-26T07:26:12Z,2020-04-26T07:26:12Z,MERGED,True,6,9,1,https://github.com/ddlws,Fix utf8-c8 memory usage,3,[],https://github.com/MoarVM/MoarVM/pull/1271,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1271#issuecomment-615247871,"MVM_string_utf8_c8_decodestream allocates 4x the size of it's input buffer for every string it spits out and never releases the excess. This means the size of every MVMString produced is directly tied to the size of the input file (for files up to 1MB). With a large input file, this results in each MVMString consuming 4MB of memory (on my machine).
Consider something like this:
for 'bigFileWithManyLines.txt'.IO.lines(:enc('utf8-c8')) {...}
The GC can keep up if a single thread is consuming the decoder's output, though the memory usage is a bit high. However, multiple workers overwhelm it, and the OOM killer comes out.
This change reallocs the result buffer if it's larger than required. Since it can only request a smaller chunk, the call to realloc is cheap.
This script demonstrates the issue.
#!/bin/env raku
my $words-done = 0;
class statm {
    has Int $.Vmsize;
    has Int $.VmRSS;
    has Int $.shared;
    has Int $.text;
    has Int $.lib;
    has Int $.data;
    has Int $.dt;
    method new($Vmsize,$VmRSS,$shared,$text,$lib,$data,$dt) {
        self.bless(:$Vmsize,:$VmRSS,:$shared,:$text,:$lib,:$data,:$dt);
    }
}
sub memstats() { return statm.new(|('/proc/self/statm'.IO.slurp.split(' ')>>.Int)); }

sub MAIN($wordlist) {
    signal(SIGINT).tap({ say 'words-done: '~ $words-done; exit 1;});
    say ""lines\tVirt(GB)\tResident(GB)"";
    my $s = memstats;
    for $wordlist.IO.lines(:enc('utf8-c8')) {
        $words-done++;
        if ($words-done % 1000 == 0) {
            $s = memstats;
            say $words-done~""\t""~
                Rat.new($s.Vmsize*4096,2**30).fmt('%.1f') ~ 
                ""\t\t""~ Rat.new($s.VmRSS*4096,2**30).fmt('%.1f') ;
        }
        if $_ ~~ 'adsfjalks;dhjasdlfh;dsalfjkdlsajf' { say 'what are the odds' }
    }
}

Here are before and after runs using a readily available source file.
Before patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines   Virt(GB)    Resident(GB)
1000    3.5         0.2
2000    6.6         0.4
3000    7.9         0.4
4000    7.9         0.9
5000    8.4         1.0
6000    11.5        1.1
7000    14.6        1.3
8000    17.7        1.4
9000    20.8        1.5
10000   23.9        1.7

After patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines    Virt(GB)    Resident(GB)
10000    .4          0.1
20000    .4          0.1
30000    .4          0.1
40000    .4          0.1
50000    .4          0.1
60000    .4          0.1
70000    .4          0.1
80000    .4          0.1
90000    .4          0.1
100000   .4          0.1","Apparently MVM_string_utf8_decodestream uses ds->result_size_guess to size the buffer and uses MVM_string_decodestream_add_chars in case that buffer might be too small after all. I wonder if a similar strategy could be employed for utf8_c8?
If you've got some further time to dig this, I'd very much appreciate that. Otherwise I'm fine with merging the PR as-is, as it's clearly an improvement already.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1271,2020-04-16T02:24:20Z,2020-04-26T07:26:12Z,2020-04-26T07:26:12Z,MERGED,True,6,9,1,https://github.com/ddlws,Fix utf8-c8 memory usage,3,[],https://github.com/MoarVM/MoarVM/pull/1271,https://github.com/ddlws,5,https://github.com/MoarVM/MoarVM/pull/1271#issuecomment-618018699,"MVM_string_utf8_c8_decodestream allocates 4x the size of it's input buffer for every string it spits out and never releases the excess. This means the size of every MVMString produced is directly tied to the size of the input file (for files up to 1MB). With a large input file, this results in each MVMString consuming 4MB of memory (on my machine).
Consider something like this:
for 'bigFileWithManyLines.txt'.IO.lines(:enc('utf8-c8')) {...}
The GC can keep up if a single thread is consuming the decoder's output, though the memory usage is a bit high. However, multiple workers overwhelm it, and the OOM killer comes out.
This change reallocs the result buffer if it's larger than required. Since it can only request a smaller chunk, the call to realloc is cheap.
This script demonstrates the issue.
#!/bin/env raku
my $words-done = 0;
class statm {
    has Int $.Vmsize;
    has Int $.VmRSS;
    has Int $.shared;
    has Int $.text;
    has Int $.lib;
    has Int $.data;
    has Int $.dt;
    method new($Vmsize,$VmRSS,$shared,$text,$lib,$data,$dt) {
        self.bless(:$Vmsize,:$VmRSS,:$shared,:$text,:$lib,:$data,:$dt);
    }
}
sub memstats() { return statm.new(|('/proc/self/statm'.IO.slurp.split(' ')>>.Int)); }

sub MAIN($wordlist) {
    signal(SIGINT).tap({ say 'words-done: '~ $words-done; exit 1;});
    say ""lines\tVirt(GB)\tResident(GB)"";
    my $s = memstats;
    for $wordlist.IO.lines(:enc('utf8-c8')) {
        $words-done++;
        if ($words-done % 1000 == 0) {
            $s = memstats;
            say $words-done~""\t""~
                Rat.new($s.Vmsize*4096,2**30).fmt('%.1f') ~ 
                ""\t\t""~ Rat.new($s.VmRSS*4096,2**30).fmt('%.1f') ;
        }
        if $_ ~~ 'adsfjalks;dhjasdlfh;dsalfjkdlsajf' { say 'what are the odds' }
    }
}

Here are before and after runs using a readily available source file.
Before patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines   Virt(GB)    Resident(GB)
1000    3.5         0.2
2000    6.6         0.4
3000    7.9         0.4
4000    7.9         0.9
5000    8.4         1.0
6000    11.5        1.1
7000    14.6        1.3
8000    17.7        1.4
9000    20.8        1.5
10000   23.9        1.7

After patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines    Virt(GB)    Resident(GB)
10000    .4          0.1
20000    .4          0.1
30000    .4          0.1
40000    .4          0.1
50000    .4          0.1
60000    .4          0.1
70000    .4          0.1
80000    .4          0.1
90000    .4          0.1
100000   .4          0.1",I'll look into it.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1271,2020-04-16T02:24:20Z,2020-04-26T07:26:12Z,2020-04-26T07:26:12Z,MERGED,True,6,9,1,https://github.com/ddlws,Fix utf8-c8 memory usage,3,[],https://github.com/MoarVM/MoarVM/pull/1271,https://github.com/ddlws,6,https://github.com/MoarVM/MoarVM/pull/1271#issuecomment-619464727,"MVM_string_utf8_c8_decodestream allocates 4x the size of it's input buffer for every string it spits out and never releases the excess. This means the size of every MVMString produced is directly tied to the size of the input file (for files up to 1MB). With a large input file, this results in each MVMString consuming 4MB of memory (on my machine).
Consider something like this:
for 'bigFileWithManyLines.txt'.IO.lines(:enc('utf8-c8')) {...}
The GC can keep up if a single thread is consuming the decoder's output, though the memory usage is a bit high. However, multiple workers overwhelm it, and the OOM killer comes out.
This change reallocs the result buffer if it's larger than required. Since it can only request a smaller chunk, the call to realloc is cheap.
This script demonstrates the issue.
#!/bin/env raku
my $words-done = 0;
class statm {
    has Int $.Vmsize;
    has Int $.VmRSS;
    has Int $.shared;
    has Int $.text;
    has Int $.lib;
    has Int $.data;
    has Int $.dt;
    method new($Vmsize,$VmRSS,$shared,$text,$lib,$data,$dt) {
        self.bless(:$Vmsize,:$VmRSS,:$shared,:$text,:$lib,:$data,:$dt);
    }
}
sub memstats() { return statm.new(|('/proc/self/statm'.IO.slurp.split(' ')>>.Int)); }

sub MAIN($wordlist) {
    signal(SIGINT).tap({ say 'words-done: '~ $words-done; exit 1;});
    say ""lines\tVirt(GB)\tResident(GB)"";
    my $s = memstats;
    for $wordlist.IO.lines(:enc('utf8-c8')) {
        $words-done++;
        if ($words-done % 1000 == 0) {
            $s = memstats;
            say $words-done~""\t""~
                Rat.new($s.Vmsize*4096,2**30).fmt('%.1f') ~ 
                ""\t\t""~ Rat.new($s.VmRSS*4096,2**30).fmt('%.1f') ;
        }
        if $_ ~~ 'adsfjalks;dhjasdlfh;dsalfjkdlsajf' { say 'what are the odds' }
    }
}

Here are before and after runs using a readily available source file.
Before patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines   Virt(GB)    Resident(GB)
1000    3.5         0.2
2000    6.6         0.4
3000    7.9         0.4
4000    7.9         0.9
5000    8.4         1.0
6000    11.5        1.1
7000    14.6        1.3
8000    17.7        1.4
9000    20.8        1.5
10000   23.9        1.7

After patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines    Virt(GB)    Resident(GB)
10000    .4          0.1
20000    .4          0.1
30000    .4          0.1
40000    .4          0.1
50000    .4          0.1
60000    .4          0.1
70000    .4          0.1
80000    .4          0.1
90000    .4          0.1
100000   .4          0.1","There's no reason utf8-c8 can't use result_size_guess, but I think it's a bad idea at the moment.


The utf8 stream decoder only adds a single grapheme to the result at a time, and it only does it in two places, making it easy to track the size and reallocate when needed.


utf8c8 adds to the result buffer in append_grapheme, which is called from process_bad_bytes and process_ok_codepoint. MVM_string_utf8_c8_decodestream calls those two functions in six different places. append_grapheme can also add multiple graphemes to the buffer per call.


In short, safely tracking the bufsize would require some refactoring.


With so many <pick-a-format>-decoding vulnerabilities in the historical record, I'm afraid to make this function any more complex. It's completely untouched by the nqp tests (not sure about rakudo's), and generating sufficient test cases is nontrivial.
However, thanks to China's generous donation of free time, I just might get around to testing it properly. I'd be afraid to make more than minor changes until then, though.
I plan on giving all the decoders a thorough kicking once I get some more tooling in place. I think it would make sense for me to open a new issue regarding refactoring once I'm done fuzzing, but feel free to leave this open if you'd like.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1271,2020-04-16T02:24:20Z,2020-04-26T07:26:12Z,2020-04-26T07:26:12Z,MERGED,True,6,9,1,https://github.com/ddlws,Fix utf8-c8 memory usage,3,[],https://github.com/MoarVM/MoarVM/pull/1271,https://github.com/niner,7,https://github.com/MoarVM/MoarVM/pull/1271#issuecomment-619500891,"MVM_string_utf8_c8_decodestream allocates 4x the size of it's input buffer for every string it spits out and never releases the excess. This means the size of every MVMString produced is directly tied to the size of the input file (for files up to 1MB). With a large input file, this results in each MVMString consuming 4MB of memory (on my machine).
Consider something like this:
for 'bigFileWithManyLines.txt'.IO.lines(:enc('utf8-c8')) {...}
The GC can keep up if a single thread is consuming the decoder's output, though the memory usage is a bit high. However, multiple workers overwhelm it, and the OOM killer comes out.
This change reallocs the result buffer if it's larger than required. Since it can only request a smaller chunk, the call to realloc is cheap.
This script demonstrates the issue.
#!/bin/env raku
my $words-done = 0;
class statm {
    has Int $.Vmsize;
    has Int $.VmRSS;
    has Int $.shared;
    has Int $.text;
    has Int $.lib;
    has Int $.data;
    has Int $.dt;
    method new($Vmsize,$VmRSS,$shared,$text,$lib,$data,$dt) {
        self.bless(:$Vmsize,:$VmRSS,:$shared,:$text,:$lib,:$data,:$dt);
    }
}
sub memstats() { return statm.new(|('/proc/self/statm'.IO.slurp.split(' ')>>.Int)); }

sub MAIN($wordlist) {
    signal(SIGINT).tap({ say 'words-done: '~ $words-done; exit 1;});
    say ""lines\tVirt(GB)\tResident(GB)"";
    my $s = memstats;
    for $wordlist.IO.lines(:enc('utf8-c8')) {
        $words-done++;
        if ($words-done % 1000 == 0) {
            $s = memstats;
            say $words-done~""\t""~
                Rat.new($s.Vmsize*4096,2**30).fmt('%.1f') ~ 
                ""\t\t""~ Rat.new($s.VmRSS*4096,2**30).fmt('%.1f') ;
        }
        if $_ ~~ 'adsfjalks;dhjasdlfh;dsalfjkdlsajf' { say 'what are the odds' }
    }
}

Here are before and after runs using a readily available source file.
Before patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines   Virt(GB)    Resident(GB)
1000    3.5         0.2
2000    6.6         0.4
3000    7.9         0.4
4000    7.9         0.9
5000    8.4         1.0
6000    11.5        1.1
7000    14.6        1.3
8000    17.7        1.4
9000    20.8        1.5
10000   23.9        1.7

After patch:
perl6 bughunt.pl6 MoarVM/src/strings/gb18030_codeindex.h
lines    Virt(GB)    Resident(GB)
10000    .4          0.1
20000    .4          0.1
30000    .4          0.1
40000    .4          0.1
50000    .4          0.1
60000    .4          0.1
70000    .4          0.1
80000    .4          0.1
90000    .4          0.1
100000   .4          0.1","Ok, many thanks for the excellent analysis! Will merge the PR as-is and am looking forward to your future contributions. Welcome to the team :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1272,2020-04-17T11:45:06Z,2020-04-17T15:33:57Z,2020-04-17T15:34:53Z,MERGED,True,2,3,1,https://github.com/MasterDuke17,Use smaller buffer for native int to str coercion,2,[],https://github.com/MoarVM/MoarVM/pull/1272,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1272,"There can only be up to 20 chars, and the actual worker functions only
use 20 char arrays also.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","There can only be up to 20 chars, and the actual worker functions only
use 20 char arrays also.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1272,2020-04-17T11:45:06Z,2020-04-17T15:33:57Z,2020-04-17T15:34:53Z,MERGED,True,2,3,1,https://github.com/MasterDuke17,Use smaller buffer for native int to str coercion,2,[],https://github.com/MoarVM/MoarVM/pull/1272,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1272#issuecomment-615203683,"There can only be up to 20 chars, and the actual worker functions only
use 20 char arrays also.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",I think there's an off-by-one here as the buffer gets ended with a null byte: *buffer = '\0'; which I think is actually unnecessary.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1272,2020-04-17T11:45:06Z,2020-04-17T15:33:57Z,2020-04-17T15:34:53Z,MERGED,True,2,3,1,https://github.com/MasterDuke17,Use smaller buffer for native int to str coercion,2,[],https://github.com/MoarVM/MoarVM/pull/1272,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1272#issuecomment-615207330,"There can only be up to 20 chars, and the actual worker functions only
use 20 char arrays also.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I think there's an off-by-one here as the buffer gets ended with a null byte: *buffer = '\0'; which I think is actually unnecessary.

That obviously pre-exists my change, but I'm seeing what happens if it's removed right now.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1272,2020-04-17T11:45:06Z,2020-04-17T15:33:57Z,2020-04-17T15:34:53Z,MERGED,True,2,3,1,https://github.com/MasterDuke17,Use smaller buffer for native int to str coercion,2,[],https://github.com/MoarVM/MoarVM/pull/1272,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1272#issuecomment-615211648,"There can only be up to 20 chars, and the actual worker functions only
use 20 char arrays also.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",NQP and Rakudo and all tests are ok with removing it. Should I add that to this PR or create a new one?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1272,2020-04-17T11:45:06Z,2020-04-17T15:33:57Z,2020-04-17T15:34:53Z,MERGED,True,2,3,1,https://github.com/MasterDuke17,Use smaller buffer for native int to str coercion,2,[],https://github.com/MoarVM/MoarVM/pull/1272,https://github.com/niner,5,https://github.com/MoarVM/MoarVM/pull/1272#issuecomment-615241317,"There can only be up to 20 chars, and the actual worker functions only
use 20 char arrays also.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",Just add it please,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1272,2020-04-17T11:45:06Z,2020-04-17T15:33:57Z,2020-04-17T15:34:53Z,MERGED,True,2,3,1,https://github.com/MasterDuke17,Use smaller buffer for native int to str coercion,2,[],https://github.com/MoarVM/MoarVM/pull/1272,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1272#issuecomment-615244552,"There can only be up to 20 chars, and the actual worker functions only
use 20 char arrays also.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Just add it please

Done.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1273,2020-04-17T15:25:28Z,2020-04-17T23:31:25Z,2020-04-17T23:31:46Z,CLOSED,False,2,1,1,https://github.com/dogbert17,Fix SEGV in MVM_spesh_plugin_guard_list_mark,3,[],https://github.com/MoarVM/MoarVM/pull/1273,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1273,"MVM_spesh_plugin_guard_list_mark contains several tests checking that
the worklist parameter is not NULL. Unfortunately one call, to
MVM_spesh_plugin_guard_list_mark, had slipped through the cracks.
This could lead to a SEGV when running the heap profiler since it
can call MVM_gc_root_add_tc_roots_to_worklist with a NULL worklist
which in turn was used when calling MVM_spesh_plugin_guard_list_mark.
Fixed by adding a check which ensures that worklist is not NULL
before calling MVM_spesh_plugin_guard_list_mark.","MVM_spesh_plugin_guard_list_mark contains several tests checking that
the worklist parameter is not NULL. Unfortunately one call, to
MVM_spesh_plugin_guard_list_mark, had slipped through the cracks.
This could lead to a SEGV when running the heap profiler since it
can call MVM_gc_root_add_tc_roots_to_worklist with a NULL worklist
which in turn was used when calling MVM_spesh_plugin_guard_list_mark.
Fixed by adding a check which ensures that worklist is not NULL
before calling MVM_spesh_plugin_guard_list_mark.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1273,2020-04-17T15:25:28Z,2020-04-17T23:31:25Z,2020-04-17T23:31:46Z,CLOSED,False,2,1,1,https://github.com/dogbert17,Fix SEGV in MVM_spesh_plugin_guard_list_mark,3,[],https://github.com/MoarVM/MoarVM/pull/1273,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1273#issuecomment-615312679,"MVM_spesh_plugin_guard_list_mark contains several tests checking that
the worklist parameter is not NULL. Unfortunately one call, to
MVM_spesh_plugin_guard_list_mark, had slipped through the cracks.
This could lead to a SEGV when running the heap profiler since it
can call MVM_gc_root_add_tc_roots_to_worklist with a NULL worklist
which in turn was used when calling MVM_spesh_plugin_guard_list_mark.
Fixed by adding a check which ensures that worklist is not NULL
before calling MVM_spesh_plugin_guard_list_mark.",The first sentence of the commit message is wrong. You meant MVM_gc_root_add_tc_roots_to_worklist not MVM_spesh_plugin_guard_list_mark.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1274,2020-04-17T16:18:00Z,2020-04-17T16:23:34Z,2020-04-17T16:44:45Z,MERGED,True,2,1,1,https://github.com/dogbert17,Fix SEGV in MVM_spesh_plugin_guard_list_mark,1,[],https://github.com/MoarVM/MoarVM/pull/1274,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1274,"MVM_gc_root_add_tc_roots_to_worklist contains several tests checking
that the worklist parameter is not NULL. Unfortunately one call, to
MVM_spesh_plugin_guard_list_mark, had slipped through the cracks.
This could lead to a SEGV when running the heap profiler since it
can call MVM_gc_root_add_tc_roots_to_worklist with a NULL worklist
which in turn was used when calling MVM_spesh_plugin_guard_list_mark.
Fixed by adding a check which ensures that worklist is not NULL
before calling MVM_spesh_plugin_guard_list_mark.","MVM_gc_root_add_tc_roots_to_worklist contains several tests checking
that the worklist parameter is not NULL. Unfortunately one call, to
MVM_spesh_plugin_guard_list_mark, had slipped through the cracks.
This could lead to a SEGV when running the heap profiler since it
can call MVM_gc_root_add_tc_roots_to_worklist with a NULL worklist
which in turn was used when calling MVM_spesh_plugin_guard_list_mark.
Fixed by adding a check which ensures that worklist is not NULL
before calling MVM_spesh_plugin_guard_list_mark.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1277,2020-04-27T19:35:08Z,,2020-05-09T20:12:03Z,OPEN,False,28,0,1,https://github.com/MasterDuke17,Make the first page for some FSA bins bigger,1,[],https://github.com/MoarVM/MoarVM/pull/1277,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1277,"This means fewer calls to the slow FSA alloc path (which calls
add_page() and then mallocs). These specific numbers were based on just
calling raku -e '' and seeing how many add_page() calls there were for
each bin. Any modifications to the number or type of FSA allocations
could mean these defaults might need to be changed. Additionally, we
might decide to increase them assuming that most programs will actually
do more allocations than done by the empty program.
I did some testing with callgrind and time. I ran MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind raku -e '' 100 times and stored the instruction count for both master and this branch. Master averaged 702,547,960 instructions and this branch averaged 702,285,088. I also ran each version 100 times with /usr/bin/time (but without using MVM_SPESH_BLOCKING=1), master averaged 0.945s elapsed and this branch averaged 0.947s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","This means fewer calls to the slow FSA alloc path (which calls
add_page() and then mallocs). These specific numbers were based on just
calling raku -e '' and seeing how many add_page() calls there were for
each bin. Any modifications to the number or type of FSA allocations
could mean these defaults might need to be changed. Additionally, we
might decide to increase them assuming that most programs will actually
do more allocations than done by the empty program.
I did some testing with callgrind and time. I ran MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind raku -e '' 100 times and stored the instruction count for both master and this branch. Master averaged 702,547,960 instructions and this branch averaged 702,285,088. I also ran each version 100 times with /usr/bin/time (but without using MVM_SPESH_BLOCKING=1), master averaged 0.945s elapsed and this branch averaged 0.947s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1277,2020-04-27T19:35:08Z,,2020-05-09T20:12:03Z,OPEN,False,28,0,1,https://github.com/MasterDuke17,Make the first page for some FSA bins bigger,1,[],https://github.com/MoarVM/MoarVM/pull/1277,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1277#issuecomment-626138883,"This means fewer calls to the slow FSA alloc path (which calls
add_page() and then mallocs). These specific numbers were based on just
calling raku -e '' and seeing how many add_page() calls there were for
each bin. Any modifications to the number or type of FSA allocations
could mean these defaults might need to be changed. Additionally, we
might decide to increase them assuming that most programs will actually
do more allocations than done by the empty program.
I did some testing with callgrind and time. I ran MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind raku -e '' 100 times and stored the instruction count for both master and this branch. Master averaged 702,547,960 instructions and this branch averaged 702,285,088. I also ran each version 100 times with /usr/bin/time (but without using MVM_SPESH_BLOCKING=1), master averaged 0.945s elapsed and this branch averaged 0.947s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","To be honest, I'm not convinced by this PR. It adds a couple of magic numbers tuned for the current state of one of MoarVM's users (rakudo). While MoarVM's goal is specifically to be the best runtime for Raku, it already has another user with NQP. While that alone wouldn't be enough of an argument for preventing a merge, there doesn't seem to be much argument for. There's no measurable performance benefit other than 0.04 % fewer instructions. That just feels like not worth the added maintenance cost.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1277,2020-04-27T19:35:08Z,,2020-05-09T20:12:03Z,OPEN,False,28,0,1,https://github.com/MasterDuke17,Make the first page for some FSA bins bigger,1,[],https://github.com/MoarVM/MoarVM/pull/1277,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1277#issuecomment-626176465,"This means fewer calls to the slow FSA alloc path (which calls
add_page() and then mallocs). These specific numbers were based on just
calling raku -e '' and seeing how many add_page() calls there were for
each bin. Any modifications to the number or type of FSA allocations
could mean these defaults might need to be changed. Additionally, we
might decide to increase them assuming that most programs will actually
do more allocations than done by the empty program.
I did some testing with callgrind and time. I ran MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind raku -e '' 100 times and stored the instruction count for both master and this branch. Master averaged 702,547,960 instructions and this branch averaged 702,285,088. I also ran each version 100 times with /usr/bin/time (but without using MVM_SPESH_BLOCKING=1), master averaged 0.945s elapsed and this branch averaged 0.947s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I think I'd really argue for a larger change. These numbers are just tuned to the empty program, but why should we optimize for that? If we know that any program at all is going to use more memory than we initially allocate, why not allocate more up front? Then we get bigger chunks of contiguous memory. Or should we just make all pages bigger? I.e., increase the multiplier here https://github.com/MoarVM/MoarVM/pull/1277/files#diff-c20c5286479c59cae5058b9716286f1bL88? Should I see if there are scenarios with a larger measurable impact?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1277,2020-04-27T19:35:08Z,,2020-05-09T20:12:03Z,OPEN,False,28,0,1,https://github.com/MasterDuke17,Make the first page for some FSA bins bigger,1,[],https://github.com/MoarVM/MoarVM/pull/1277,https://github.com/lizmat,4,https://github.com/MoarVM/MoarVM/pull/1277#issuecomment-626179008,"This means fewer calls to the slow FSA alloc path (which calls
add_page() and then mallocs). These specific numbers were based on just
calling raku -e '' and seeing how many add_page() calls there were for
each bin. Any modifications to the number or type of FSA allocations
could mean these defaults might need to be changed. Additionally, we
might decide to increase them assuming that most programs will actually
do more allocations than done by the empty program.
I did some testing with callgrind and time. I ran MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind raku -e '' 100 times and stored the instruction count for both master and this branch. Master averaged 702,547,960 instructions and this branch averaged 702,285,088. I also ran each version 100 times with /usr/bin/time (but without using MVM_SPESH_BLOCKING=1), master averaged 0.945s elapsed and this branch averaged 0.947s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",Perhaps a benchmark reading a file line by line and saying it?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1277,2020-04-27T19:35:08Z,,2020-05-09T20:12:03Z,OPEN,False,28,0,1,https://github.com/MasterDuke17,Make the first page for some FSA bins bigger,1,[],https://github.com/MoarVM/MoarVM/pull/1277,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1277#issuecomment-626228388,"This means fewer calls to the slow FSA alloc path (which calls
add_page() and then mallocs). These specific numbers were based on just
calling raku -e '' and seeing how many add_page() calls there were for
each bin. Any modifications to the number or type of FSA allocations
could mean these defaults might need to be changed. Additionally, we
might decide to increase them assuming that most programs will actually
do more allocations than done by the empty program.
I did some testing with callgrind and time. I ran MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind raku -e '' 100 times and stored the instruction count for both master and this branch. Master averaged 702,547,960 instructions and this branch averaged 702,285,088. I also ran each version 100 times with /usr/bin/time (but without using MVM_SPESH_BLOCKING=1), master averaged 0.945s elapsed and this branch averaged 0.947s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I just benchmarked with a more dramatic change. I changed MVM_FSA_PAGE_ITEMS from 128 to 1024 (but that's it, I didn't include the change to first page sizes made in this PR). The code I tested was my $c = Channel.new; for ^1_000_000 { $c.send: $_; }, run with 100 times with callgrind and 100 times with /usr/bin/time. At HEAD of master, it took an average of 3,556,038,563 instructions and 0.4776s. With only the change to MVM_FSA_PAGE_ITEMS applied, it took an average of 3,532,358,600 instructions and 0.4654s.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1277,2020-04-27T19:35:08Z,,2020-05-09T20:12:03Z,OPEN,False,28,0,1,https://github.com/MasterDuke17,Make the first page for some FSA bins bigger,1,[],https://github.com/MoarVM/MoarVM/pull/1277,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1277#issuecomment-626229397,"This means fewer calls to the slow FSA alloc path (which calls
add_page() and then mallocs). These specific numbers were based on just
calling raku -e '' and seeing how many add_page() calls there were for
each bin. Any modifications to the number or type of FSA allocations
could mean these defaults might need to be changed. Additionally, we
might decide to increase them assuming that most programs will actually
do more allocations than done by the empty program.
I did some testing with callgrind and time. I ran MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind raku -e '' 100 times and stored the instruction count for both master and this branch. Master averaged 702,547,960 instructions and this branch averaged 702,285,088. I also ran each version 100 times with /usr/bin/time (but without using MVM_SPESH_BLOCKING=1), master averaged 0.945s elapsed and this branch averaged 0.947s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","FWIW, adding a print in add_page gives these results for the above example:
master
      1 adding a page of size 15360 for bin 14
      1 adding a page of size 18432 for bin 17
      1 adding a page of size 21504 for bin 20
      1 adding a page of size 46080 for bin 44
      2 adding a page of size 1024 for bin 0
      3 adding a page of size 24576 for bin 23
      3 adding a page of size 49152 for bin 47
      4 adding a page of size 12288 for bin 11
      4 adding a page of size 8192 for bin 7
      5 adding a page of size 5120 for bin 4
      6 adding a page of size 4096 for bin 3
     38 adding a page of size 16384 for bin 15
     40 adding a page of size 7168 for bin 6
     41 adding a page of size 9216 for bin 8
    259 adding a page of size 3072 for bin 2
    390 adding a page of size 6144 for bin 5
   7815 adding a page of size 2048 for bin 1

MVM_FSA_PAGE_ITEMS == 1024
      4 adding a page of size 131072 for bin 15
      5 adding a page of size 57344 for bin 6
      5 adding a page of size 73728 for bin 8
     32 adding a page of size 24576 for bin 2
     48 adding a page of size 49152 for bin 5
    976 adding a page of size 16384 for bin 1",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1278,2020-04-27T22:59:31Z,2020-04-30T07:47:27Z,2020-04-30T07:47:31Z,MERGED,True,28,27,8,https://github.com/MasterDuke17,Fix some compiler warnings,4,[],https://github.com/MoarVM/MoarVM/pull/1278,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1278,By adding some casts and using correct sized format string directives.,By adding some casts and using correct sized format string directives.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1280,2020-04-30T18:21:45Z,2020-04-30T22:04:08Z,2020-04-30T22:04:08Z,MERGED,True,9,9,1,https://github.com/MasterDuke17,Use the FSA for ConcBlockingQueue,1,[],https://github.com/MoarVM/MoarVM/pull/1280,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1280,"This makes sending things into a Channel much quicker.
This is the patch referenced in rakudo/rakudo#3648 (comment).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","This makes sending things into a Channel much quicker.
This is the patch referenced in rakudo/rakudo#3648 (comment).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1281,2020-05-03T14:09:30Z,2020-06-06T20:09:36Z,2020-06-06T20:09:38Z,MERGED,True,103,19,9,https://github.com/MasterDuke17,Spesh and JIT get(cur)?hllsym,1,[],https://github.com/MoarVM/MoarVM/pull/1281,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1281,"Because one of the arguments to the MVM_hll_sym_get() call is not an
argument of the op, it can't be JITted normally. So instead re-write it
in spesh to a new op that can, and then JIT the new op. An unsafe template
for getcurhllsym already existed, but wasn't being called because there
was no lego JIT implementation. So instead I just adapted that template
to the new op.
Speeds up the benchmark in rakudo/rakudo#3648 by ~0.3s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Because one of the arguments to the MVM_hll_sym_get() call is not an
argument of the op, it can't be JITted normally. So instead re-write it
in spesh to a new op that can, and then JIT the new op. An unsafe template
for getcurhllsym already existed, but wasn't being called because there
was no lego JIT implementation. So instead I just adapted that template
to the new op.
Speeds up the benchmark in rakudo/rakudo#3648 by ~0.3s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1281,2020-05-03T14:09:30Z,2020-06-06T20:09:36Z,2020-06-06T20:09:38Z,MERGED,True,103,19,9,https://github.com/MasterDuke17,Spesh and JIT get(cur)?hllsym,1,[],https://github.com/MoarVM/MoarVM/pull/1281,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1281#issuecomment-626137192,"Because one of the arguments to the MVM_hll_sym_get() call is not an
argument of the op, it can't be JITted normally. So instead re-write it
in spesh to a new op that can, and then JIT the new op. An unsafe template
for getcurhllsym already existed, but wasn't being called because there
was no lego JIT implementation. So instead I just adapted that template
to the new op.
Speeds up the benchmark in rakudo/rakudo#3648 by ~0.3s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","The implementation looks perfectly fine to me and is certainly merge-worthy as-is.
However, I sense an opportunity for further optimization. Looking at the implementation of MVM_hll_sym_get, that's a pretty heavy weight operation but it actually just a glorified hash access. Actually it's 2 hashes: first it gets the symbol hash for the given hll, then it gets the requested symbol from this symbol hash. If the HLL doesn't have a symbol hash yet it creates one and returns VMNull for the value. Once the symbol hash is created, it never changes again. Worst case it gets moved into gen2 by the GC.
This check is necessary only for the very first call to MVM_hll_sym_get or bindhllsym or bindcurhllsym for a given HLL. When we spesh code, we do so because it has run often enough and in anticipation of the code running often again in the future. So we'll want to optimize away a check that will always succeed anyway. While optimizing away a branch is good, there's much more to be gained here: we may be able to get rid of the lock that is taken on every call.
Under perfect circumstances we can not only put the HLL name into a spesh slot, and not even just the symbol hash, but the HLL symbol's hash entry itself. These entries are not GC-allocated, so their address doesn't change. Binding to an existing key will just overwrite the existing hash entry's value pointer. Overwriting that pointer is an atomic operation by itself. The possible road block is that writing to that entry will also do a write barrier, i.e. if the hash is in gen2 (which it will be in most cases) and the value is not, the hash must be put onto the GC's gen2 root list if it's not already there. And this operation is not thread safe. But AFAICT this could still be ok, as I think worst case, the hash will land in multiple thread's root lists and I haven't seen protection against such a situation anywhere else.
Anyway, all of this is moot if getcurhllsym isn't actually used all that much. Which may well be, since I don't find it in anything I'd presume hot code. Makes me wonder where that speedup is coming from?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1281,2020-05-03T14:09:30Z,2020-06-06T20:09:36Z,2020-06-06T20:09:38Z,MERGED,True,103,19,9,https://github.com/MasterDuke17,Spesh and JIT get(cur)?hllsym,1,[],https://github.com/MoarVM/MoarVM/pull/1281,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1281#issuecomment-626141225,"Because one of the arguments to the MVM_hll_sym_get() call is not an
argument of the op, it can't be JITted normally. So instead re-write it
in spesh to a new op that can, and then JIT the new op. An unsafe template
for getcurhllsym already existed, but wasn't being called because there
was no lego JIT implementation. So instead I just adapted that template
to the new op.
Speeds up the benchmark in rakudo/rakudo#3648 by ~0.3s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","getcurhllsym is called by DYNAMIC, so running say() in a loop will have a call every iteration for $*OUT. At least, IIRC that’s what I was testing with.
…
Sent from my iPhone
 On May 9, 2020, at 10:33 AM, niner ***@***.***> wrote:

 ﻿
 The implementation looks perfectly fine to me and is certainly merge-worthy as-is.

 However, I sense an opportunity for further optimization. Looking at the implementation of MVM_hll_sym_get, that's a pretty heavy weight operation but it actually just a glorified hash access. Actually it's 2 hashes: first it gets the symbol hash for the given hll, then it gets the requested symbol from this symbol hash. If the HLL doesn't have a symbol hash yet it creates one and returns VMNull for the value. Once the symbol hash is created, it never changes again. Worst case it gets moved into gen2 by the GC.

 This check is necessary only for the very first call to MVM_hll_sym_get or bindhllsym or bindcurhllsym for a given HLL. When we spesh code, we do so because it has run often enough and in anticipation of the code running often again in the future. So we'll want to optimize away a check that will always succeed anyway. While optimizing away a branch is good, there's much more to be gained here: we may be able to get rid of the lock that is taken on every call.

 Under perfect circumstances we can not only put the HLL name into a spesh slot, and not even just the symbol hash, but the HLL symbol's hash entry itself. These entries are not GC-allocated, so their address doesn't change. Binding to an existing key will just overwrite the existing hash entry's value pointer. Overwriting that pointer is an atomic operation by itself. The possible road block is that writing to that entry will also do a write barrier, i.e. if the hash is in gen2 (which it will be in most cases) and the value is not, the hash must be put onto the GC's gen2 root list if it's not already there. And this operation is not thread safe. But AFAICT this could still be ok, as I think worst case, the hash will land in multiple thread's root lists and I haven't seen protection against such a situation anywhere else.

 Anyway, all of this is moot if getcurhllsym isn't actually used all that much. Which may well be, since I don't find it in anything I'd presume hot code. Makes me wonder where that speedup is coming from?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1281,2020-05-03T14:09:30Z,2020-06-06T20:09:36Z,2020-06-06T20:09:38Z,MERGED,True,103,19,9,https://github.com/MasterDuke17,Spesh and JIT get(cur)?hllsym,1,[],https://github.com/MoarVM/MoarVM/pull/1281,https://github.com/lizmat,4,https://github.com/MoarVM/MoarVM/pull/1281#issuecomment-626147031,"Because one of the arguments to the MVM_hll_sym_get() call is not an
argument of the op, it can't be JITted normally. So instead re-write it
in spesh to a new op that can, and then JIT the new op. An unsafe template
for getcurhllsym already existed, but wasn't being called because there
was no lego JIT implementation. So instead I just adapted that template
to the new op.
Speeds up the benchmark in rakudo/rakudo#3648 by ~0.3s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Not directly, which nqp::op does it then internally?
…
 On 9 May 2020, at 12:02, MasterDuke17 ***@***.***> wrote:


 getcurhllsym is called by DYNAMIC, so running say() in a loop will have a call every iteration for $*OUT. At least, IIRC that’s what I was testing with.

 Sent from my iPhone

 > On May 9, 2020, at 10:33 AM, niner ***@***.***> wrote:
 >
 > ﻿
 > The implementation looks perfectly fine to me and is certainly merge-worthy as-is.
 >
 > However, I sense an opportunity for further optimization. Looking at the implementation of MVM_hll_sym_get, that's a pretty heavy weight operation but it actually just a glorified hash access. Actually it's 2 hashes: first it gets the symbol hash for the given hll, then it gets the requested symbol from this symbol hash. If the HLL doesn't have a symbol hash yet it creates one and returns VMNull for the value. Once the symbol hash is created, it never changes again. Worst case it gets moved into gen2 by the GC.
 >
 > This check is necessary only for the very first call to MVM_hll_sym_get or bindhllsym or bindcurhllsym for a given HLL. When we spesh code, we do so because it has run often enough and in anticipation of the code running often again in the future. So we'll want to optimize away a check that will always succeed anyway. While optimizing away a branch is good, there's much more to be gained here: we may be able to get rid of the lock that is taken on every call.
 >
 > Under perfect circumstances we can not only put the HLL name into a spesh slot, and not even just the symbol hash, but the HLL symbol's hash entry itself. These entries are not GC-allocated, so their address doesn't change. Binding to an existing key will just overwrite the existing hash entry's value pointer. Overwriting that pointer is an atomic operation by itself. The possible road block is that writing to that entry will also do a write barrier, i.e. if the hash is in gen2 (which it will be in most cases) and the value is not, the hash must be put onto the GC's gen2 root list if it's not already there. And this operation is not thread safe. But AFAICT this could still be ok, as I think worst case, the hash will land in multiple thread's root lists and I haven't seen protection against such a situation anywhere else.
 >
 > Anyway, all of this is moot if getcurhllsym isn't actually used all that much. Which may well be, since I don't find it in anything I'd presume hot code. Makes me wonder where that speedup is coming from?
 >
 > —
 > You are receiving this because you authored the thread.
 > Reply to this email directly, view it on GitHub, or unsubscribe.
 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1281,2020-05-03T14:09:30Z,2020-06-06T20:09:36Z,2020-06-06T20:09:38Z,MERGED,True,103,19,9,https://github.com/MasterDuke17,Spesh and JIT get(cur)?hllsym,1,[],https://github.com/MoarVM/MoarVM/pull/1281,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1281#issuecomment-626165941,"Because one of the arguments to the MVM_hll_sym_get() call is not an
argument of the op, it can't be JITted normally. So instead re-write it
in spesh to a new op that can, and then JIT the new op. An unsafe template
for getcurhllsym already existed, but wasn't being called because there
was no lego JIT implementation. So instead I just adapted that template
to the new op.
Speeds up the benchmark in rakudo/rakudo#3648 by ~0.3s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Not directly, which nqp::op does it then internally?

https://github.com/rakudo/rakudo/blob/master/src/core.c/io_operators.pm6#L12-L18",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1281,2020-05-03T14:09:30Z,2020-06-06T20:09:36Z,2020-06-06T20:09:38Z,MERGED,True,103,19,9,https://github.com/MasterDuke17,Spesh and JIT get(cur)?hllsym,1,[],https://github.com/MoarVM/MoarVM/pull/1281,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1281#issuecomment-626700059,"Because one of the arguments to the MVM_hll_sym_get() call is not an
argument of the op, it can't be JITted normally. So instead re-write it
in spesh to a new op that can, and then JIT the new op. An unsafe template
for getcurhllsym already existed, but wasn't being called because there
was no lego JIT implementation. So instead I just adapted that template
to the new op.
Speeds up the benchmark in rakudo/rakudo#3648 by ~0.3s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Just force-pushed a new implementation that also does gethllsym. For some rough numbers, my $o; $o := $*OUT for ^1_000_000; say $o goes from ~1.1s to ~0.95s and 10.16b instructions to 9.13b instructions. I looked at a couple spesh logs and saw both gethllsym and getcurhllsym being specialized into sp_gethashentryvalue.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1281,2020-05-03T14:09:30Z,2020-06-06T20:09:36Z,2020-06-06T20:09:38Z,MERGED,True,103,19,9,https://github.com/MasterDuke17,Spesh and JIT get(cur)?hllsym,1,[],https://github.com/MoarVM/MoarVM/pull/1281,https://github.com/niner,7,https://github.com/MoarVM/MoarVM/pull/1281#issuecomment-626720379,"Because one of the arguments to the MVM_hll_sym_get() call is not an
argument of the op, it can't be JITted normally. So instead re-write it
in spesh to a new op that can, and then JIT the new op. An unsafe template
for getcurhllsym already existed, but wasn't being called because there
was no lego JIT implementation. So instead I just adapted that template
to the new op.
Speeds up the benchmark in rakudo/rakudo#3648 by ~0.3s.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","The commit message and/or the comment in the code should clearly state the assumptions that the code makes:

that MVMHashEntrys are not GC allocated and therefore never move
that the MVMHashEntry pointers stay constant even when the hash grows
that there cannot be concurrency issues wrt an existing hash key (i.e. updating a hash entry keeps the MVMHashEntry struct and just overwrites the value pointer atomically)
that an HLL's symbol hash will never be replaced once it's created
that the code with the baked in pointer cannot have a shorter life time than the HLL, i.e. it can't happen that the MVMHashEntry gets freed while the code is still being used.

I believe all of these assumptions to be sound, but they really need to be stated explicitly.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1282,2020-05-04T20:14:56Z,2020-05-04T20:34:37Z,2020-05-05T17:21:17Z,MERGED,True,54,1,2,https://github.com/Altai-man,2020.05 release,3,[],https://github.com/MoarVM/MoarVM/pull/1282,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1282,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1282,2020-05-04T20:14:56Z,2020-05-04T20:34:37Z,2020-05-05T17:21:17Z,MERGED,True,54,1,2,https://github.com/Altai-man,2020.05 release,3,[],https://github.com/MoarVM/MoarVM/pull/1282,https://github.com/Altai-man,2,https://github.com/MoarVM/MoarVM/pull/1282#issuecomment-623690784,,"A release is cut and available at moarvm.org website, merging.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1283,2020-05-06T19:57:52Z,2020-05-06T23:58:57Z,2020-05-06T23:58:57Z,MERGED,True,4,4,3,https://github.com/MasterDuke17,Fix the order of some MVM_calloc arguments,1,[],https://github.com/MoarVM/MoarVM/pull/1283,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1283,It's number of elements then size.,It's number of elements then size.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1284,2020-05-06T22:52:41Z,2020-05-09T20:10:58Z,2020-05-09T20:10:58Z,MERGED,True,0,7,1,https://github.com/MasterDuke17,Remove JIT template for prof_enter,1,[],https://github.com/MoarVM/MoarVM/pull/1284,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1284,"The JIT probably won't (should never?) see prof_enter, but if it does,
mark the call to MVM_profile_log_enter as coming from the JIT.","The JIT probably won't (should never?) see prof_enter, but if it does,
mark the call to MVM_profile_log_enter as coming from the JIT.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1284,2020-05-06T22:52:41Z,2020-05-09T20:10:58Z,2020-05-09T20:10:58Z,MERGED,True,0,7,1,https://github.com/MasterDuke17,Remove JIT template for prof_enter,1,[],https://github.com/MoarVM/MoarVM/pull/1284,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1284#issuecomment-624945125,"The JIT probably won't (should never?) see prof_enter, but if it does,
mark the call to MVM_profile_log_enter as coming from the JIT.","Hm, it's a bug if the JIT ever sees this op?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1284,2020-05-06T22:52:41Z,2020-05-09T20:10:58Z,2020-05-09T20:10:58Z,MERGED,True,0,7,1,https://github.com/MasterDuke17,Remove JIT template for prof_enter,1,[],https://github.com/MoarVM/MoarVM/pull/1284,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1284#issuecomment-625083394,"The JIT probably won't (should never?) see prof_enter, but if it does,
mark the call to MVM_profile_log_enter as coming from the JIT.","Hm, it's a bug if the JIT ever sees this op?

Should I change to call MVM_panic instead? Or just remove the template entirely?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1284,2020-05-06T22:52:41Z,2020-05-09T20:10:58Z,2020-05-09T20:10:58Z,MERGED,True,0,7,1,https://github.com/MasterDuke17,Remove JIT template for prof_enter,1,[],https://github.com/MoarVM/MoarVM/pull/1284,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1284#issuecomment-626123923,"The JIT probably won't (should never?) see prof_enter, but if it does,
mark the call to MVM_profile_log_enter as coming from the JIT.","I'd say remove the template. While there's some bug that lets the JIT see this op, it's will only cause the JIT to bail, which arguably is preferable to the program crashing. Someone interested in fixing this can easily search a spesh log for a bail on prof_enter to find a case.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1284,2020-05-06T22:52:41Z,2020-05-09T20:10:58Z,2020-05-09T20:10:58Z,MERGED,True,0,7,1,https://github.com/MasterDuke17,Remove JIT template for prof_enter,1,[],https://github.com/MoarVM/MoarVM/pull/1284,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1284#issuecomment-626172536,"The JIT probably won't (should never?) see prof_enter, but if it does,
mark the call to MVM_profile_log_enter as coming from the JIT.",Changed the commit to remove the template (and updated the PR title accordingly).,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1285,2020-05-12T22:48:36Z,2020-05-13T10:18:33Z,2020-05-13T10:18:34Z,MERGED,True,9,1,1,https://github.com/scovit,Setup inlined CStruct bound during construction,1,[],https://github.com/MoarVM/MoarVM/pull/1285,https://github.com/scovit,1,https://github.com/MoarVM/MoarVM/pull/1285,Fixes rakudo/rakudo#3687,Fixes rakudo/rakudo#3687,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1286,2020-05-14T17:22:38Z,2021-09-15T22:49:45Z,2021-09-15T22:49:45Z,CLOSED,False,0,0,0,https://github.com/MasterDuke17,Lego JIT implementation of sp_getlexstatic_o,0,[],https://github.com/MoarVM/MoarVM/pull/1286,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1286,"Manually inline MVM_disp_inline_cache_get_spesh because it's small.
NQP and Rakudo both build ok, and a spesh log now only shows template bails for sp_getlexstatic_o. There are some failing tests, but the same ones fail without this also.","Manually inline MVM_disp_inline_cache_get_spesh because it's small.
NQP and Rakudo both build ok, and a spesh log now only shows template bails for sp_getlexstatic_o. There are some failing tests, but the same ones fail without this also.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1287,2020-05-17T14:57:48Z,2020-05-17T15:02:56Z,2020-05-17T15:04:55Z,MERGED,True,0,45,1,https://github.com/MasterDuke17,Remove commented out profiler code,1,[],https://github.com/MoarVM/MoarVM/pull/1287,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1287,"No longer used/needed after
269d307
and
a487900.","No longer used/needed after
269d307
and
a487900.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1290,2020-05-20T18:00:29Z,2020-05-20T21:26:56Z,2020-05-20T21:27:02Z,MERGED,True,1,1,1,https://github.com/patrickbkr,Backport a change in libtommath to fix build on x86 Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1290,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1290,"There has not been a libtommath release including this fix yet, so we just
pull in this one change.","There has not been a libtommath release including this fix yet, so we just
pull in this one change.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1291,2020-05-21T13:19:22Z,2020-06-12T10:25:57Z,2020-06-12T10:25:57Z,MERGED,True,455,97,41,https://github.com/MasterDuke17,Add gcc plugin to check for missing free before throw,13,[],https://github.com/MoarVM/MoarVM/pull/1291,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1291,"And fix the things it found.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","And fix the things it found.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1292,2020-05-22T08:58:18Z,2020-06-03T23:04:10Z,2020-06-03T23:04:53Z,MERGED,True,28,57,16,https://github.com/MasterDuke17,Convert MVM_free+setting to NULL to MVM_free_null,1,[],https://github.com/MoarVM/MoarVM/pull/1292,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1292,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1293,2020-05-24T20:47:42Z,2020-05-24T20:59:43Z,2020-05-24T21:38:56Z,CLOSED,False,109,49,4,https://github.com/ddlws,Fixarrays,2,[],https://github.com/MoarVM/MoarVM/pull/1293,https://github.com/ddlws,1,https://github.com/MoarVM/MoarVM/pull/1293,"This is not a real pr and you shouldn't commit it.
This script should show what I'm talking about.
use NativeCall;
my $offset = 0;
my $buf = 'putsomethinghere'.IO.slurp(:bin);
use BUILDPLAN;
class Elf64_Ehdr is repr('CStruct') {
    HAS uint8  @.e_ident[16] is CArray;
    has uint16 $.e_type;
    has uint16 $.e_machine;
    has uint32 $.e_version;
    has uint64 $.e_entry;
    has uint64 $.e_phoff;
    has uint64 $.e_shoff;
    has uint32 $.e_flags;
    has uint16 $.e_ehsize;
    has uint16 $.e_phentsize;
    has uint16 $.e_phnum;
    has uint16 $.e_shentsize;
    has uint16 $.e_shnum;
    has uint16 $.e_shstrndx;
    submethod TWEAK() {
        for ^16 { @!e_ident[$_] = $buf.read-uint8($offset); $offset += 1;}
        $!e_type = $buf.read-uint16($offset); $offset += 2;
        $!e_machine = $buf.read-uint16($offset); $offset += 2;
        $!e_version = $buf.read-uint32($offset); $offset += 4;
        $!e_entry = $buf.read-uint32($offset); $offset += 4;
        $!e_phoff = $buf.read-uint32($offset); $offset += 4;
        $!e_shoff = $buf.read-uint32($offset); $offset += 4;
        $!e_flags = $buf.read-uint32($offset); $offset += 4;
        $!e_ehsize = $buf.read-uint16($offset); $offset += 2;
        $!e_phentsize = $buf.read-uint16($offset); $offset += 2;
        $!e_phnum = $buf.read-uint16($offset); $offset += 2;
        $!e_shentsize = $buf.read-uint16($offset); $offset += 2;
        $!e_shnum = $buf.read-uint16($offset); $offset += 2;
        $!e_shstrndx = $buf.read-uint16($offset); $offset += 2;
    }
}

use BUILDPLAN Elf64_Ehdr;
for ^100 {
    my $t = Elf64_Ehdr.new();
    say $t.e_ident.perl;
    say $t.e_ident.elems;
    say $_~': '~$t.e_version;
}
say 'done';","This is not a real pr and you shouldn't commit it.
This script should show what I'm talking about.
use NativeCall;
my $offset = 0;
my $buf = 'putsomethinghere'.IO.slurp(:bin);
use BUILDPLAN;
class Elf64_Ehdr is repr('CStruct') {
    HAS uint8  @.e_ident[16] is CArray;
    has uint16 $.e_type;
    has uint16 $.e_machine;
    has uint32 $.e_version;
    has uint64 $.e_entry;
    has uint64 $.e_phoff;
    has uint64 $.e_shoff;
    has uint32 $.e_flags;
    has uint16 $.e_ehsize;
    has uint16 $.e_phentsize;
    has uint16 $.e_phnum;
    has uint16 $.e_shentsize;
    has uint16 $.e_shnum;
    has uint16 $.e_shstrndx;
    submethod TWEAK() {
        for ^16 { @!e_ident[$_] = $buf.read-uint8($offset); $offset += 1;}
        $!e_type = $buf.read-uint16($offset); $offset += 2;
        $!e_machine = $buf.read-uint16($offset); $offset += 2;
        $!e_version = $buf.read-uint32($offset); $offset += 4;
        $!e_entry = $buf.read-uint32($offset); $offset += 4;
        $!e_phoff = $buf.read-uint32($offset); $offset += 4;
        $!e_shoff = $buf.read-uint32($offset); $offset += 4;
        $!e_flags = $buf.read-uint32($offset); $offset += 4;
        $!e_ehsize = $buf.read-uint16($offset); $offset += 2;
        $!e_phentsize = $buf.read-uint16($offset); $offset += 2;
        $!e_phnum = $buf.read-uint16($offset); $offset += 2;
        $!e_shentsize = $buf.read-uint16($offset); $offset += 2;
        $!e_shnum = $buf.read-uint16($offset); $offset += 2;
        $!e_shstrndx = $buf.read-uint16($offset); $offset += 2;
    }
}

use BUILDPLAN Elf64_Ehdr;
for ^100 {
    my $t = Elf64_Ehdr.new();
    say $t.e_ident.perl;
    say $t.e_ident.elems;
    say $_~': '~$t.e_version;
}
say 'done';",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1294,2020-05-24T22:52:34Z,,2020-05-24T22:52:34Z,OPEN,False,51,4,4,https://github.com/ddlws,Inlined CArray issues,1,[],https://github.com/MoarVM/MoarVM/pull/1294,https://github.com/ddlws,1,https://github.com/MoarVM/MoarVM/pull/1294,"Apologies to niner for my poor git hygeine.
This is my partial attempt at fixing an issue with inlined CArrays and CArray autoexpansion. The script below will crash. I recommend running it under asan as it clearly shows the root cause.
When initialized in this fashion, the CArray knows nothing of it's shape and allocates space for 4 elements by default. It's also unaware that it's inlined. When you assign the third element, it auto expands. CArray:expand() calls realloc, and this eventually kills the process.
CStruct:Compose() is the only place we have access to the shape of the inlined array, so my solution is to save that information in MVMCStructREPRData. When the outer CStruct is initialized, it initializes any inlined CArrays as if they were returned from C.
I've also added a member 'fixed_cnt' to MVMCArrayBody for storing the fixed number of elements for inlined arrays. It serves as a flag for changing behavior in initialize(), expand(), and elems().
This all seems to work pretty well on its own, but it doesn't work well with rakudo. The buildplan generated by rakudo/src/Perl6/Metamodel/BUILDPLAN.nqp initializes the array for a second time, undoing all my hard work :(
I'm out of my element with rakudo,nqp, etc., so I humbly submit this pr in hopes that someone who knows about such things can help fix it.
In the meantime, if inlined arrays are bringing you down, I've had good results replacing them with CStructs that do Positional and hardcoding the number of elements.
use NativeCall;
my $offset = 0;
my $buf = 'putsomethinghere'.IO.slurp(:bin);
class Elf64_Ehdr is repr('CStruct') {
    HAS uint8  @.e_ident[16] is CArray;
    has uint16 $.e_type;
    has uint16 $.e_machine;
    has uint32 $.e_version;
    has uint64 $.e_entry;
    has uint64 $.e_phoff;
    has uint64 $.e_shoff;
    has uint32 $.e_flags;
    has uint16 $.e_ehsize;
    has uint16 $.e_phentsize;
    has uint16 $.e_phnum;
    has uint16 $.e_shentsize;
    has uint16 $.e_shnum;
    has uint16 $.e_shstrndx;
    submethod TWEAK() {
        for ^16 { @!e_ident[$_] = $buf.read-uint8($offset); $offset += 1;}
        $!e_type = $buf.read-uint16($offset); $offset += 2;
        $!e_machine = $buf.read-uint16($offset); $offset += 2;
        $!e_version = $buf.read-uint32($offset); $offset += 4;
        $!e_entry = $buf.read-uint32($offset); $offset += 4;
        $!e_phoff = $buf.read-uint32($offset); $offset += 4;
        $!e_shoff = $buf.read-uint32($offset); $offset += 4;
        $!e_flags = $buf.read-uint32($offset); $offset += 4;
        $!e_ehsize = $buf.read-uint16($offset); $offset += 2;
        $!e_phentsize = $buf.read-uint16($offset); $offset += 2;
        $!e_phnum = $buf.read-uint16($offset); $offset += 2;
        $!e_shentsize = $buf.read-uint16($offset); $offset += 2;
        $!e_shnum = $buf.read-uint16($offset); $offset += 2;
        $!e_shstrndx = $buf.read-uint16($offset); $offset += 2;
    }
}

use BUILDPLAN Elf64_Ehdr;
for ^100 {
    my $t = Elf64_Ehdr.new();
    #say $t.e_ident.perl;
    #say $t.e_ident.elems;
    say $_~': '~$t.e_version;
}
say 'done';","Apologies to niner for my poor git hygeine.
This is my partial attempt at fixing an issue with inlined CArrays and CArray autoexpansion. The script below will crash. I recommend running it under asan as it clearly shows the root cause.
When initialized in this fashion, the CArray knows nothing of it's shape and allocates space for 4 elements by default. It's also unaware that it's inlined. When you assign the third element, it auto expands. CArray:expand() calls realloc, and this eventually kills the process.
CStruct:Compose() is the only place we have access to the shape of the inlined array, so my solution is to save that information in MVMCStructREPRData. When the outer CStruct is initialized, it initializes any inlined CArrays as if they were returned from C.
I've also added a member 'fixed_cnt' to MVMCArrayBody for storing the fixed number of elements for inlined arrays. It serves as a flag for changing behavior in initialize(), expand(), and elems().
This all seems to work pretty well on its own, but it doesn't work well with rakudo. The buildplan generated by rakudo/src/Perl6/Metamodel/BUILDPLAN.nqp initializes the array for a second time, undoing all my hard work :(
I'm out of my element with rakudo,nqp, etc., so I humbly submit this pr in hopes that someone who knows about such things can help fix it.
In the meantime, if inlined arrays are bringing you down, I've had good results replacing them with CStructs that do Positional and hardcoding the number of elements.
use NativeCall;
my $offset = 0;
my $buf = 'putsomethinghere'.IO.slurp(:bin);
class Elf64_Ehdr is repr('CStruct') {
    HAS uint8  @.e_ident[16] is CArray;
    has uint16 $.e_type;
    has uint16 $.e_machine;
    has uint32 $.e_version;
    has uint64 $.e_entry;
    has uint64 $.e_phoff;
    has uint64 $.e_shoff;
    has uint32 $.e_flags;
    has uint16 $.e_ehsize;
    has uint16 $.e_phentsize;
    has uint16 $.e_phnum;
    has uint16 $.e_shentsize;
    has uint16 $.e_shnum;
    has uint16 $.e_shstrndx;
    submethod TWEAK() {
        for ^16 { @!e_ident[$_] = $buf.read-uint8($offset); $offset += 1;}
        $!e_type = $buf.read-uint16($offset); $offset += 2;
        $!e_machine = $buf.read-uint16($offset); $offset += 2;
        $!e_version = $buf.read-uint32($offset); $offset += 4;
        $!e_entry = $buf.read-uint32($offset); $offset += 4;
        $!e_phoff = $buf.read-uint32($offset); $offset += 4;
        $!e_shoff = $buf.read-uint32($offset); $offset += 4;
        $!e_flags = $buf.read-uint32($offset); $offset += 4;
        $!e_ehsize = $buf.read-uint16($offset); $offset += 2;
        $!e_phentsize = $buf.read-uint16($offset); $offset += 2;
        $!e_phnum = $buf.read-uint16($offset); $offset += 2;
        $!e_shentsize = $buf.read-uint16($offset); $offset += 2;
        $!e_shnum = $buf.read-uint16($offset); $offset += 2;
        $!e_shstrndx = $buf.read-uint16($offset); $offset += 2;
    }
}

use BUILDPLAN Elf64_Ehdr;
for ^100 {
    my $t = Elf64_Ehdr.new();
    #say $t.e_ident.perl;
    #say $t.e_ident.elems;
    say $_~': '~$t.e_version;
}
say 'done';",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1295,2020-05-26T22:28:11Z,2020-06-03T23:03:10Z,2020-06-03T23:03:10Z,MERGED,True,46,40,1,https://github.com/ddlws,Fix CStruct handling of inlined attributes,1,[],https://github.com/MoarVM/MoarVM/pull/1295,https://github.com/ddlws,1,https://github.com/MoarVM/MoarVM/pull/1295,"When calling CStruct.c:get_attribute, inlined attributes are mishandled and treated as pointers. This causes bizarre behavior like like returning type objects for defined attributes, returning incorrect integer values that are clearly pointers, etc. Cunions had an identical issue that was fixed some time ago. This change just adds the fix to CStructs, so there isn't really any ""new"" code here.
It passes rakudo and nqp test suites. Running them under asan doesn't add new issues. This change resolves at least the following open issues.
rakudo/rakudo#3633
rakudo/rakudo#3192
A summary:
In MVMCStructBody, child_objs is an array of pointers to MVMObjects (the struct's attributes). From the comments: /* GC-marked objects that our C structure points into. */
When CStruct.c:get_attribute is called, the relevant pointer in child_objs is checked, and the object is built if it's null. Inlined attributes should be handled differently, but they are not. The only difference in handling inlined vs non-inlined attributes is in the last argument passed to MVM_nativecall_make_c*. The last arg is a pointer to the actual content of whatever it's making. For inlined attributes, this should point somewhere inside the cstruct, and it should point somewhere else for non-inlined attributes. ""Somewhere else"" is void *cobj = get_ptr_at_offset(body->cstruct, repr_data->struct_offsets[slot]);.
Currently, that last argument always points somewhere else, which causes the issues mentioned in the first paragraph.
From looking at the source, CPPStruct.c has the same issue, though I've never experienced it as I've never used them. If this gets committed, I can test it and fix it there in another pr.","When calling CStruct.c:get_attribute, inlined attributes are mishandled and treated as pointers. This causes bizarre behavior like like returning type objects for defined attributes, returning incorrect integer values that are clearly pointers, etc. Cunions had an identical issue that was fixed some time ago. This change just adds the fix to CStructs, so there isn't really any ""new"" code here.
It passes rakudo and nqp test suites. Running them under asan doesn't add new issues. This change resolves at least the following open issues.
rakudo/rakudo#3633
rakudo/rakudo#3192
A summary:
In MVMCStructBody, child_objs is an array of pointers to MVMObjects (the struct's attributes). From the comments: /* GC-marked objects that our C structure points into. */
When CStruct.c:get_attribute is called, the relevant pointer in child_objs is checked, and the object is built if it's null. Inlined attributes should be handled differently, but they are not. The only difference in handling inlined vs non-inlined attributes is in the last argument passed to MVM_nativecall_make_c*. The last arg is a pointer to the actual content of whatever it's making. For inlined attributes, this should point somewhere inside the cstruct, and it should point somewhere else for non-inlined attributes. ""Somewhere else"" is void *cobj = get_ptr_at_offset(body->cstruct, repr_data->struct_offsets[slot]);.
Currently, that last argument always points somewhere else, which causes the issues mentioned in the first paragraph.
From looking at the source, CPPStruct.c has the same issue, though I've never experienced it as I've never used them. If this gets committed, I can test it and fix it there in another pr.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1296,2020-05-29T08:39:31Z,2020-05-29T09:00:24Z,2020-05-29T10:40:23Z,MERGED,True,1,3,1,https://github.com/MasterDuke17,Remove redundant if when reading bytecode,1,[],https://github.com/MoarVM/MoarVM/pull/1296,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1296,"We're already inside the body of an if that checked the exact same
variable.","We're already inside the body of an if that checked the exact same
variable.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1297,2020-05-29T16:11:35Z,2020-06-10T20:55:09Z,2020-06-10T20:55:14Z,CLOSED,False,0,2,1,https://github.com/MasterDuke17,Remove Perl 5.10 directive from Travi config,1,[],https://github.com/MoarVM/MoarVM/pull/1297,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1297,"The download and subsequent using of it with perlbrew fails and Travis
just uses the system Perl 5.(22 with 16.04, or 26 with 18.04).","The download and subsequent using of it with perlbrew fails and Travis
just uses the system Perl 5.(22 with 16.04, or 26 with 18.04).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1297,2020-05-29T16:11:35Z,2020-06-10T20:55:09Z,2020-06-10T20:55:14Z,CLOSED,False,0,2,1,https://github.com/MasterDuke17,Remove Perl 5.10 directive from Travi config,1,[],https://github.com/MoarVM/MoarVM/pull/1297,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1297#issuecomment-636059053,"The download and subsequent using of it with perlbrew fails and Travis
just uses the system Perl 5.(22 with 16.04, or 26 with 18.04).","Huh, for some reason it (successfully at least) downloads and installs Perl 5.14.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1297,2020-05-29T16:11:35Z,2020-06-10T20:55:09Z,2020-06-10T20:55:14Z,CLOSED,False,0,2,1,https://github.com/MasterDuke17,Remove Perl 5.10 directive from Travi config,1,[],https://github.com/MoarVM/MoarVM/pull/1297,https://github.com/patrickbkr,3,https://github.com/MoarVM/MoarVM/pull/1297#issuecomment-636093764,"The download and subsequent using of it with perlbrew fails and Travis
just uses the system Perl 5.(22 with 16.04, or 26 with 18.04).",I plan to replace travis with AzureCI soon. So don't put too much time into this.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1297,2020-05-29T16:11:35Z,2020-06-10T20:55:09Z,2020-06-10T20:55:14Z,CLOSED,False,0,2,1,https://github.com/MasterDuke17,Remove Perl 5.10 directive from Travi config,1,[],https://github.com/MoarVM/MoarVM/pull/1297,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1297#issuecomment-636107795,"The download and subsequent using of it with perlbrew fails and Travis
just uses the system Perl 5.(22 with 16.04, or 26 with 18.04).","I plan to replace travis with AzureCI soon. So don't put too much time into this.

Great, I wasn't sure if you were going to do it for MoarVM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1298,2020-05-30T21:47:06Z,2020-05-30T22:24:20Z,2020-05-30T22:24:26Z,MERGED,True,4,1,1,https://github.com/patrickbkr,Fix reading closed dir handles on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1298,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1298,"We need to throw an exception when the handle is closed and not pass null
to FindFirstFileW() which resulted in a silent death of Moar. This makes
an NQP test pass that previously silently killed NQP during the test.","We need to throw an exception when the handle is closed and not pass null
to FindFirstFileW() which resulted in a silent death of Moar. This makes
an NQP test pass that previously silently killed NQP during the test.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1299,2020-05-31T09:10:23Z,2020-05-31T14:12:09Z,2020-05-31T14:12:14Z,MERGED,True,445,0,2,https://github.com/patrickbkr,Add an AzureCI test setup,1,[],https://github.com/MoarVM/MoarVM/pull/1299,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1299,"This setup is identically part of the rakudo and nqp repositories. The only change are the four
variables at the top of azure-pipelines.yml:
RAKUDO_CHECKOUT_TYPE
NQP_CHECKOUT_TYPE
MOAR_CHECKOUT_TYPE
TRIGGERING_REPO","This setup is identically part of the rakudo and nqp repositories. The only change are the four
variables at the top of azure-pipelines.yml:
RAKUDO_CHECKOUT_TYPE
NQP_CHECKOUT_TYPE
MOAR_CHECKOUT_TYPE
TRIGGERING_REPO",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1300,2020-06-01T16:25:53Z,2021-04-21T14:47:32Z,2021-04-21T14:47:32Z,CLOSED,False,35,42,21,https://github.com/sumanstats,fix appveyor.yml,2,[],https://github.com/MoarVM/MoarVM/pull/1300,https://github.com/sumanstats,1,https://github.com/MoarVM/MoarVM/pull/1300,"update worker image 2019
no need to have separate install for strawberry perl
install zstd https://github.com/facebook/zstd, while building
fix the correct nqp link https://github.com/Raku/nqp","update worker image 2019
no need to have separate install for strawberry perl
install zstd https://github.com/facebook/zstd, while building
fix the correct nqp link https://github.com/Raku/nqp",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1300,2020-06-01T16:25:53Z,2021-04-21T14:47:32Z,2021-04-21T14:47:32Z,CLOSED,False,35,42,21,https://github.com/sumanstats,fix appveyor.yml,2,[],https://github.com/MoarVM/MoarVM/pull/1300,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1300#issuecomment-639768431,"update worker image 2019
no need to have separate install for strawberry perl
install zstd https://github.com/facebook/zstd, while building
fix the correct nqp link https://github.com/Raku/nqp",@sumanstats I'm currently in the process of creating a AzureCI configuration that is meant to replace Travis and AppVeyor. I hope to get the configuration into a workable state soonish. May I ask you to rework these changes on the AzureCI configuration once I'm done with the porting?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1300,2020-06-01T16:25:53Z,2021-04-21T14:47:32Z,2021-04-21T14:47:32Z,CLOSED,False,35,42,21,https://github.com/sumanstats,fix appveyor.yml,2,[],https://github.com/MoarVM/MoarVM/pull/1300,https://github.com/sumanstats,3,https://github.com/MoarVM/MoarVM/pull/1300#issuecomment-640049097,"update worker image 2019
no need to have separate install for strawberry perl
install zstd https://github.com/facebook/zstd, while building
fix the correct nqp link https://github.com/Raku/nqp","@patrickbkr Building in single CI provider AzureCI is good. If possible, it would be better to put three badges in README.md each for separate platform Linux, Windows, and MacOS. So that one would know easily in which OS testing is failing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1300,2020-06-01T16:25:53Z,2021-04-21T14:47:32Z,2021-04-21T14:47:32Z,CLOSED,False,35,42,21,https://github.com/sumanstats,fix appveyor.yml,2,[],https://github.com/MoarVM/MoarVM/pull/1300,https://github.com/patrickbkr,4,https://github.com/MoarVM/MoarVM/pull/1300#issuecomment-642252497,"update worker image 2019
no need to have separate install for strawberry perl
install zstd https://github.com/facebook/zstd, while building
fix the correct nqp link https://github.com/Raku/nqp",@sumanstats I like the idea of more specific status badges. A quick search didn't reveal any simple methods to add multiple build badges for matrix builds in AzureCI. Maybe this will be supported in the future. We'll see.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1300,2020-06-01T16:25:53Z,2021-04-21T14:47:32Z,2021-04-21T14:47:32Z,CLOSED,False,35,42,21,https://github.com/sumanstats,fix appveyor.yml,2,[],https://github.com/MoarVM/MoarVM/pull/1300,https://github.com/patrickbkr,5,https://github.com/MoarVM/MoarVM/pull/1300#issuecomment-642272710,"update worker image 2019
no need to have separate install for strawberry perl
install zstd https://github.com/facebook/zstd, while building
fix the correct nqp link https://github.com/Raku/nqp",It seems it is actually possible to have job specific status badges. See this azure configuration. Thing I'm unsure about: Do we really want to have 9 separate badges for each of the build jobs?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1300,2020-06-01T16:25:53Z,2021-04-21T14:47:32Z,2021-04-21T14:47:32Z,CLOSED,False,35,42,21,https://github.com/sumanstats,fix appveyor.yml,2,[],https://github.com/MoarVM/MoarVM/pull/1300,https://github.com/sumanstats,6,https://github.com/MoarVM/MoarVM/pull/1300#issuecomment-642862014,"update worker image 2019
no need to have separate install for strawberry perl
install zstd https://github.com/facebook/zstd, while building
fix the correct nqp link https://github.com/Raku/nqp","A glimpse of badges helps to know in which OS the test is failing.
Its better to have three badges but we can adjust 9 badges. Some repos have such badges (just an example):",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1300,2020-06-01T16:25:53Z,2021-04-21T14:47:32Z,2021-04-21T14:47:32Z,CLOSED,False,35,42,21,https://github.com/sumanstats,fix appveyor.yml,2,[],https://github.com/MoarVM/MoarVM/pull/1300,https://github.com/patrickbkr,7,https://github.com/MoarVM/MoarVM/pull/1300#issuecomment-643607813,"update worker image 2019
no need to have separate install for strawberry perl
install zstd https://github.com/facebook/zstd, while building
fix the correct nqp link https://github.com/Raku/nqp","It seems Microsoft just broke their status badge links. This makes it difficult to test. Hope they fix this soon.
Also I didn't manage to retrieve a status badge for a matrix job. I only managed to retrieve the status of the meta job: https://dev.azure.com/Rakudo/rakudo/_apis/build/status/rakudo.rakudo?branchName=master&stageName=Test&jobName=T
This MSDN page gives some hints on how to put such URLs together.",True,{'THUMBS_UP': ['https://github.com/sumanstats']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1300,2020-06-01T16:25:53Z,2021-04-21T14:47:32Z,2021-04-21T14:47:32Z,CLOSED,False,35,42,21,https://github.com/sumanstats,fix appveyor.yml,2,[],https://github.com/MoarVM/MoarVM/pull/1300,https://github.com/patrickbkr,8,https://github.com/MoarVM/MoarVM/pull/1300#issuecomment-824121011,"update worker image 2019
no need to have separate install for strawberry perl
install zstd https://github.com/facebook/zstd, while building
fix the correct nqp link https://github.com/Raku/nqp","As announced in the first comment, all CI toolchains apart from Azure have been disabled. I'll thus close this PR. Thanks for initially looking into this!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1301,2020-06-02T09:40:28Z,2020-06-04T12:17:37Z,2020-06-04T12:56:16Z,MERGED,True,9,6,3,https://github.com/MasterDuke17,Some staticframe fixups,2,[],https://github.com/MoarVM/MoarVM/pull/1301,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1301,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1302,2020-06-03T14:25:01Z,2020-06-12T10:26:21Z,2020-06-12T10:26:35Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update libuv to version 1.38.0,1,[],https://github.com/MoarVM/MoarVM/pull/1302,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1302,Clean stresstest under Linux (Mint),Clean stresstest under Linux (Mint),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1302,2020-06-03T14:25:01Z,2020-06-12T10:26:21Z,2020-06-12T10:26:35Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update libuv to version 1.38.0,1,[],https://github.com/MoarVM/MoarVM/pull/1302,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1302#issuecomment-643198814,Clean stresstest under Linux (Mint),May as well get this in ahead of the next Blin run.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1303,2020-06-04T11:35:01Z,2020-06-05T09:35:28Z,2020-06-05T09:37:41Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Use correct encoding for deserializing strings,1,[],https://github.com/MoarVM/MoarVM/pull/1303,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1303,"A string could be a filename, which are the classic example of something
that could have non-ASCII and/or non-UTF8 bytes, so use utf8-c8 to
encode them.
Also, every other use of an SC's body->description is via
MVM_string_utf8_encode_C_string, make that change also.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","A string could be a filename, which are the classic example of something
that could have non-ASCII and/or non-UTF8 bytes, so use utf8-c8 to
encode them.
Also, every other use of an SC's body->description is via
MVM_string_utf8_encode_C_string, make that change also.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1304,2020-06-04T21:38:06Z,2020-06-05T06:45:30Z,2020-06-05T06:59:50Z,MERGED,True,3,3,1,https://github.com/softmoth,nativecall: Don't obliterate lib_name in exception text,1,[],https://github.com/MoarVM/MoarVM/pull/1304,https://github.com/softmoth,1,https://github.com/MoarVM/MoarVM/pull/1304,Fix calling sprintf with NULL (Cannot locate native library '(null)') in exception message.,Fix calling sprintf with NULL (Cannot locate native library '(null)') in exception message.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1304,2020-06-04T21:38:06Z,2020-06-05T06:45:30Z,2020-06-05T06:59:50Z,MERGED,True,3,3,1,https://github.com/softmoth,nativecall: Don't obliterate lib_name in exception text,1,[],https://github.com/MoarVM/MoarVM/pull/1304,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1304#issuecomment-639291784,Fix calling sprintf with NULL (Cannot locate native library '(null)') in exception message.,Wow....that one's so obvious once you pointed it out. Many thanks for fixing my bugs!,True,{'THUMBS_UP': ['https://github.com/softmoth']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1305,2020-06-05T09:57:32Z,2020-06-05T15:46:06Z,2020-06-05T22:57:11Z,MERGED,True,4,4,3,https://github.com/MasterDuke17,Simplify some MVM_string_ascii_encode calls,1,[],https://github.com/MoarVM/MoarVM/pull/1305,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1305,"MVM_string_ascii_encode_any just calls MVM_string_ascii_encode with NULL
and 0 for the last two arguments, so use it.
Passes NQP and Rakudo tests.","MVM_string_ascii_encode_any just calls MVM_string_ascii_encode with NULL
and 0 for the last two arguments, so use it.
Passes NQP and Rakudo tests.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1306,2020-06-05T20:19:13Z,2020-06-05T21:03:39Z,2020-06-05T21:03:39Z,MERGED,True,125,66,1,https://github.com/patrickbkr,More azure builds,6,[],https://github.com/MoarVM/MoarVM/pull/1306,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1306,"This PR does multiple things:

Port remaining build combinations from Travis over to Azure. The broken llvm-coverage build is ported, but the upload of the results is not implemented.
Fix testing of PRs
Shorten the job names for easier readability in the web UI
Don't run JVM builds when triggered by a MoarVM change","This PR does multiple things:

Port remaining build combinations from Travis over to Azure. The broken llvm-coverage build is ported, but the upload of the results is not implemented.
Fix testing of PRs
Shorten the job names for easier readability in the web UI
Don't run JVM builds when triggered by a MoarVM change",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1307,2020-06-08T06:53:16Z,2020-06-15T12:56:38Z,2020-06-15T12:56:41Z,MERGED,True,187,159,9,https://github.com/nwc10,Prefer lexical names list,3,[],https://github.com/MoarVM/MoarVM/pull/1307,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1307,"The three patches are related, but they all need a little different review.
The first eliminates 5 hash iterations, replacing them with array traversal. It would be a no-brainer, but it affects the debug server, and I don't know how to test that.
I believe that wrapping access to lexical_names makes sense, even if the next patch isn't wanted, but it makes more sense with it
The third patch, eliminating the lookup hash for small lists, should help performance slightly, but

I don't have a good way to benchmark this (it doesn't seem to noticeably change setting compilation in any direction)
I don't have any feel for what a good threshold is. Are there typically many small frames with just 3 named lexicals? How often do we even do named lexical lookup?","The three patches are related, but they all need a little different review.
The first eliminates 5 hash iterations, replacing them with array traversal. It would be a no-brainer, but it affects the debug server, and I don't know how to test that.
I believe that wrapping access to lexical_names makes sense, even if the next patch isn't wanted, but it makes more sense with it
The third patch, eliminating the lookup hash for small lists, should help performance slightly, but

I don't have a good way to benchmark this (it doesn't seem to noticeably change setting compilation in any direction)
I don't have any feel for what a good threshold is. Are there typically many small frames with just 3 named lexicals? How often do we even do named lexical lookup?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1307,2020-06-08T06:53:16Z,2020-06-15T12:56:38Z,2020-06-15T12:56:41Z,MERGED,True,187,159,9,https://github.com/nwc10,Prefer lexical names list,3,[],https://github.com/MoarVM/MoarVM/pull/1307,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1307#issuecomment-640438450,"The three patches are related, but they all need a little different review.
The first eliminates 5 hash iterations, replacing them with array traversal. It would be a no-brainer, but it affects the debug server, and I don't know how to test that.
I believe that wrapping access to lexical_names makes sense, even if the next patch isn't wanted, but it makes more sense with it
The third patch, eliminating the lookup hash for small lists, should help performance slightly, but

I don't have a good way to benchmark this (it doesn't seem to noticeably change setting compilation in any direction)
I don't have any feel for what a good threshold is. Are there typically many small frames with just 3 named lexicals? How often do we even do named lexical lookup?","I don't have any feel for what a good threshold is. Are there typically many small frames with just 3 named lexicals? How often do we even do named lexical lookup?

Shouldn't that be decided by the threshold of the number of elements at which a linear lookup becomes slower than a hash lookup?  Regardless of the number of small frames?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1308,2020-06-08T16:42:59Z,2020-06-09T12:41:31Z,2020-06-09T12:41:33Z,MERGED,True,5,11,1,https://github.com/MasterDuke17,Maybe fix MVM_panic from entering GC during spesh,2,[],https://github.com/MoarVM/MoarVM/pull/1308,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1308,"The MVM_gc_mark_thread_(un)blocked(tc) calls were incorrect and caused
MoarVM panic: Must not GC when in the specializer/JIT at random times.
However, just removing them changed to causing MoarVM panic: Invalid owner in item added to GC worklist. Setting MVM_GC_DEBUG to 3 would
reliably trigger the panic when building NQP. Removing overwriting the
spesh facts fixed this, but I'm not 100% that the rest of the code is
100% correct.
NQP builds correctly and passes make m-test and Rakudo builds correcty and passes make m-test m-spectest.","The MVM_gc_mark_thread_(un)blocked(tc) calls were incorrect and caused
MoarVM panic: Must not GC when in the specializer/JIT at random times.
However, just removing them changed to causing MoarVM panic: Invalid owner in item added to GC worklist. Setting MVM_GC_DEBUG to 3 would
reliably trigger the panic when building NQP. Removing overwriting the
spesh facts fixed this, but I'm not 100% that the rest of the code is
100% correct.
NQP builds correctly and passes make m-test and Rakudo builds correcty and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1311,2020-06-12T13:52:00Z,2020-06-13T14:43:41Z,2020-06-13T14:43:41Z,MERGED,True,1,1,1,https://github.com/dogbert17,Add missing concreteness check,2,[],https://github.com/MoarVM/MoarVM/pull/1311,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1311,"The missing check led to a noticable performance regression.
[Tux]++ for spotting.","The missing check led to a noticable performance regression.
[Tux]++ for spotting.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1311,2020-06-12T13:52:00Z,2020-06-13T14:43:41Z,2020-06-13T14:43:41Z,MERGED,True,1,1,1,https://github.com/dogbert17,Add missing concreteness check,2,[],https://github.com/MoarVM/MoarVM/pull/1311,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1311#issuecomment-643623266,"The missing check led to a noticable performance regression.
[Tux]++ for spotting.","@timo pointed out this should probably be if (is->invocation_handler && IS_CONCRETE(is->invocation_handler)) or if (!MVM_is_null(tc, is->invocation_handler) && IS_CONCRETE(is->invocation_handler))",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1312,2020-06-13T07:42:43Z,2020-06-13T20:00:28Z,2020-06-13T20:03:00Z,MERGED,True,67,58,9,https://github.com/MasterDuke17,Fix some possible double frees,1,[],https://github.com/MoarVM/MoarVM/pull/1312,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1312,"These were introduced by #1291 in
an attempt to not leak data that had been alloced before a throw.
However, in some cases the alloced storage had already been attached to
GC-managed objects, so if the throw was caught and GC cleaned up the
parent object, the storage was freed twice. Fix by only attaching the
alloced storage to the parent object after the throw might have
happened, so it can be safely freed before the throw.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","These were introduced by #1291 in
an attempt to not leak data that had been alloced before a throw.
However, in some cases the alloced storage had already been attached to
GC-managed objects, so if the throw was caught and GC cleaned up the
parent object, the storage was freed twice. Fix by only attaching the
alloced storage to the parent object after the throw might have
happened, so it can be safely freed before the throw.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1313,2020-06-13T18:05:50Z,2020-06-13T19:31:16Z,2020-06-14T08:56:57Z,MERGED,True,8,9,1,https://github.com/usev6,Fix build on FreeBSD,2,[],https://github.com/MoarVM/MoarVM/pull/1313,https://github.com/usev6,1,https://github.com/MoarVM/MoarVM/pull/1313,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1314,2020-06-14T09:41:51Z,2020-06-15T12:47:04Z,2020-06-15T12:47:04Z,MERGED,True,7,1,2,https://github.com/Kaiepi,Ensure MoarVM includes the correct 3rdparty libuv objects on *BSD,1,[],https://github.com/MoarVM/MoarVM/pull/1314,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1314,"3rdparty builds of libuv didn't include the same objects that libuv
itself does. This shouldn't affect MoarVM as it currently stands, but
may cause problems in the future should uv_random or
uv_interface_addresses ever be used.","3rdparty builds of libuv didn't include the same objects that libuv
itself does. This shouldn't affect MoarVM as it currently stands, but
may cause problems in the future should uv_random or
uv_interface_addresses ever be used.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1315,2020-06-15T13:10:30Z,2020-06-17T11:49:29Z,2020-06-17T11:49:39Z,MERGED,True,2,1,1,https://github.com/0racle,Declare loop var before loop,1,[],https://github.com/MoarVM/MoarVM/pull/1315,https://github.com/0racle,1,https://github.com/MoarVM/MoarVM/pull/1315,"Fixes broken builds on older versions of GCC, resolves #1309.","Fixes broken builds on older versions of GCC, resolves #1309.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1315,2020-06-15T13:10:30Z,2020-06-17T11:49:29Z,2020-06-17T11:49:39Z,MERGED,True,2,1,1,https://github.com/0racle,Declare loop var before loop,1,[],https://github.com/MoarVM/MoarVM/pull/1315,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1315#issuecomment-645326390,"Fixes broken builds on older versions of GCC, resolves #1309.",Thank you!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1316,2020-06-20T12:07:42Z,2020-06-20T12:07:55Z,2020-06-20T12:08:24Z,MERGED,True,1,1,1,https://github.com/Altai-man,Bump VERSION for release,1,[],https://github.com/MoarVM/MoarVM/pull/1316,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1316,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1317,2020-06-21T12:27:11Z,2020-06-24T11:49:52Z,2020-06-24T11:49:52Z,CLOSED,False,10,5,2,https://github.com/0racle,Pre-declare loop vars.,1,[],https://github.com/MoarVM/MoarVM/pull/1317,https://github.com/0racle,1,https://github.com/MoarVM/MoarVM/pull/1317,Fixes builds on older versions of gcc.,Fixes builds on older versions of gcc.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1317,2020-06-21T12:27:11Z,2020-06-24T11:49:52Z,2020-06-24T11:49:52Z,CLOSED,False,10,5,2,https://github.com/0racle,Pre-declare loop vars.,1,[],https://github.com/MoarVM/MoarVM/pull/1317,https://github.com/0racle,2,https://github.com/MoarVM/MoarVM/pull/1317#issuecomment-647121824,Fixes builds on older versions of gcc.,"This is similar to commit fc09255. Just prior to that commit being merged, another commit was merged which added more of these loops var declarations.
Can we have these detected in the CI pipeline to prevent breaking builds on older systems?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1317,2020-06-21T12:27:11Z,2020-06-24T11:49:52Z,2020-06-24T11:49:52Z,CLOSED,False,10,5,2,https://github.com/0racle,Pre-declare loop vars.,1,[],https://github.com/MoarVM/MoarVM/pull/1317,https://github.com/ugexe,3,https://github.com/MoarVM/MoarVM/pull/1317#issuecomment-647122929,Fixes builds on older versions of gcc.,fwiw the Rakudo Circle CI has been complaining/failing over this for awhile,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1317,2020-06-21T12:27:11Z,2020-06-24T11:49:52Z,2020-06-24T11:49:52Z,CLOSED,False,10,5,2,https://github.com/0racle,Pre-declare loop vars.,1,[],https://github.com/MoarVM/MoarVM/pull/1317,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1317#issuecomment-647123158,Fixes builds on older versions of gcc.,Is there really no other way to convince gcc that this is correct code? We've just got rid of the restrictions imposed on us by MSVC. It would be a shame if we now needed to code like it's 1995 because of gcc versions that really fully support C99 and even parts of C11.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1317,2020-06-21T12:27:11Z,2020-06-24T11:49:52Z,2020-06-24T11:49:52Z,CLOSED,False,10,5,2,https://github.com/0racle,Pre-declare loop vars.,1,[],https://github.com/MoarVM/MoarVM/pull/1317,https://github.com/patrickbkr,5,https://github.com/MoarVM/MoarVM/pull/1317#issuecomment-647165322,Fixes builds on older versions of gcc.,I have a PR for a different approach here: #1318,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1317,2020-06-21T12:27:11Z,2020-06-24T11:49:52Z,2020-06-24T11:49:52Z,CLOSED,False,10,5,2,https://github.com/0racle,Pre-declare loop vars.,1,[],https://github.com/MoarVM/MoarVM/pull/1317,https://github.com/0racle,6,https://github.com/MoarVM/MoarVM/pull/1317#issuecomment-647200343,Fixes builds on older versions of gcc.,"I have confirmed that Moar also builds successfully for me if I manually specify CFLAGS='-std=gnu99', so I'm happy for #1318 to be merged in lieu of in this one. It also means we could revert fc09255",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1317,2020-06-21T12:27:11Z,2020-06-24T11:49:52Z,2020-06-24T11:49:52Z,CLOSED,False,10,5,2,https://github.com/0racle,Pre-declare loop vars.,1,[],https://github.com/MoarVM/MoarVM/pull/1317,https://github.com/patrickbkr,7,https://github.com/MoarVM/MoarVM/pull/1317#issuecomment-648772489,Fixes builds on older versions of gcc.,"#1318 has been merged. So I'll close this one.
@0racle Thanks for the report and work you put into this!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1318,2020-06-21T17:27:52Z,2020-06-24T11:09:23Z,2020-06-24T11:09:28Z,MERGED,True,1,1,1,https://github.com/patrickbkr,Explicitly state we use gnu99 on GCC,1,[],https://github.com/MoarVM/MoarVM/pull/1318,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1318,"This fixes building on older versions of GCC (< 5.0) that default to gnu89.
Using -std=c99 instead of -std=gnu99 breaks the build of libuv because
some pthread declarations are then left out. So it seems sensible to go
with the GCC default of using the gnu99 variant instead of the c99
variant.
Explicitly stating the version of C we want to use is a sensible thing to
do irrespective of the above mentioned backwards compatibility reason. This
way we are not relying on the GCC default that changes from version to
version.
Fixes #1309","This fixes building on older versions of GCC (< 5.0) that default to gnu89.
Using -std=c99 instead of -std=gnu99 breaks the build of libuv because
some pthread declarations are then left out. So it seems sensible to go
with the GCC default of using the gnu99 variant instead of the c99
variant.
Explicitly stating the version of C we want to use is a sensible thing to
do irrespective of the above mentioned backwards compatibility reason. This
way we are not relying on the GCC default that changes from version to
version.
Fixes #1309",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1318,2020-06-21T17:27:52Z,2020-06-24T11:09:23Z,2020-06-24T11:09:28Z,MERGED,True,1,1,1,https://github.com/patrickbkr,Explicitly state we use gnu99 on GCC,1,[],https://github.com/MoarVM/MoarVM/pull/1318,https://github.com/Altai-man,2,https://github.com/MoarVM/MoarVM/pull/1318#issuecomment-648749271,"This fixes building on older versions of GCC (< 5.0) that default to gnu89.
Using -std=c99 instead of -std=gnu99 breaks the build of libuv because
some pthread declarations are then left out. So it seems sensible to go
with the GCC default of using the gnu99 variant instead of the c99
variant.
Explicitly stating the version of C we want to use is a sensible thing to
do irrespective of the above mentioned backwards compatibility reason. This
way we are not relying on the GCC default that changes from version to
version.
Fixes #1309",Hi. Can you please restart the build to see if the segfault in MVM_gcc target persistent?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1318,2020-06-21T17:27:52Z,2020-06-24T11:09:23Z,2020-06-24T11:09:28Z,MERGED,True,1,1,1,https://github.com/patrickbkr,Explicitly state we use gnu99 on GCC,1,[],https://github.com/MoarVM/MoarVM/pull/1318,https://github.com/patrickbkr,3,https://github.com/MoarVM/MoarVM/pull/1318#issuecomment-648755488,"This fixes building on older versions of GCC (< 5.0) that default to gnu89.
Using -std=c99 instead of -std=gnu99 breaks the build of libuv because
some pthread declarations are then left out. So it seems sensible to go
with the GCC default of using the gnu99 variant instead of the c99
variant.
Explicitly stating the version of C we want to use is a sensible thing to
do irrespective of the above mentioned backwards compatibility reason. This
way we are not relying on the GCC default that changes from version to
version.
Fixes #1309",Done. Build went through. I'll just merge this now.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1320,2020-06-23T19:34:15Z,2020-06-29T18:08:58Z,2020-06-29T18:09:00Z,MERGED,True,36,0,1,https://github.com/MasterDuke17,Add JIT templates for return_(i|n|s),1,[],https://github.com/MoarVM/MoarVM/pull/1320,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1320,"Based off of the pre-existing one for return_o.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Removes some expr bail: Cannot get template for: return_(i|n|s) seen in some spesh logs.","Based off of the pre-existing one for return_o.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Removes some expr bail: Cannot get template for: return_(i|n|s) seen in some spesh logs.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1321,2020-06-27T14:05:07Z,2020-06-28T16:14:22Z,2020-06-28T16:14:39Z,MERGED,True,52467,20080,3,https://github.com/nwc10,"Don't add placeholders such as ""<control>"" to the Unicode names lookup hash.",4,[],https://github.com/MoarVM/MoarVM/pull/1321,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1321,"@samcv , @jnthn  or *, could you check that I'm not doing anything stupid here?
I don't want to just push it, in case there was something I missed.
Woah I think I've done something stupid in the ""fix"" here (it's not in the right place). But is the reasoning sound? That we don't want these duplicates in the hash.
Rest of the commit message is the reasoning:
Including these make no sense - the hash is for a 1->1 mapping of name to
codepoint, but for each of these names we have multiple values.

The way our hashes are currently implemented (with ""bind""), these duplicate
keys are not ignored - we add hundreds of duplicate entries to the same`
bucket chain (which will never successfully split to shorter chains).
This will cause performance degradation for other name lookups on the same
bucket chain - algorithmic pain, not merely memory bloat.

We *are* effectively executing a DOS attack against ourselves. Oops. :-)

For completeness, I should note that there are some duplicates in unicode_property_value_keypairs, such as {""18-number"",1258291201},{""18-number"",1258291201} but

there don't seem to be more than 2 entries with the same key duplicated
the values are indentical
I wasn't sure if it's safe to de-duplicate them in ucd2.pl, or if the array index they are at also matters.

so I don't think that it's a performance hit, or much memory bloat.
And I didn't want to try to experiment, as the way UCD-download.p6 is written, it's awkward to do anything other than the most recent release of Unicode. LATEST is now on 13. We're on 12.1","@samcv , @jnthn  or *, could you check that I'm not doing anything stupid here?
I don't want to just push it, in case there was something I missed.
Woah I think I've done something stupid in the ""fix"" here (it's not in the right place). But is the reasoning sound? That we don't want these duplicates in the hash.
Rest of the commit message is the reasoning:
Including these make no sense - the hash is for a 1->1 mapping of name to
codepoint, but for each of these names we have multiple values.

The way our hashes are currently implemented (with ""bind""), these duplicate
keys are not ignored - we add hundreds of duplicate entries to the same`
bucket chain (which will never successfully split to shorter chains).
This will cause performance degradation for other name lookups on the same
bucket chain - algorithmic pain, not merely memory bloat.

We *are* effectively executing a DOS attack against ourselves. Oops. :-)

For completeness, I should note that there are some duplicates in unicode_property_value_keypairs, such as {""18-number"",1258291201},{""18-number"",1258291201} but

there don't seem to be more than 2 entries with the same key duplicated
the values are indentical
I wasn't sure if it's safe to de-duplicate them in ucd2.pl, or if the array index they are at also matters.

so I don't think that it's a performance hit, or much memory bloat.
And I didn't want to try to experiment, as the way UCD-download.p6 is written, it's awkward to do anything other than the most recent release of Unicode. LATEST is now on 13. We're on 12.1",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1321,2020-06-27T14:05:07Z,2020-06-28T16:14:22Z,2020-06-28T16:14:39Z,MERGED,True,52467,20080,3,https://github.com/nwc10,"Don't add placeholders such as ""<control>"" to the Unicode names lookup hash.",4,[],https://github.com/MoarVM/MoarVM/pull/1321,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1321#issuecomment-650584010,"@samcv , @jnthn  or *, could you check that I'm not doing anything stupid here?
I don't want to just push it, in case there was something I missed.
Woah I think I've done something stupid in the ""fix"" here (it's not in the right place). But is the reasoning sound? That we don't want these duplicates in the hash.
Rest of the commit message is the reasoning:
Including these make no sense - the hash is for a 1->1 mapping of name to
codepoint, but for each of these names we have multiple values.

The way our hashes are currently implemented (with ""bind""), these duplicate
keys are not ignored - we add hundreds of duplicate entries to the same`
bucket chain (which will never successfully split to shorter chains).
This will cause performance degradation for other name lookups on the same
bucket chain - algorithmic pain, not merely memory bloat.

We *are* effectively executing a DOS attack against ourselves. Oops. :-)

For completeness, I should note that there are some duplicates in unicode_property_value_keypairs, such as {""18-number"",1258291201},{""18-number"",1258291201} but

there don't seem to be more than 2 entries with the same key duplicated
the values are indentical
I wasn't sure if it's safe to de-duplicate them in ucd2.pl, or if the array index they are at also matters.

so I don't think that it's a performance hit, or much memory bloat.
And I didn't want to try to experiment, as the way UCD-download.p6 is written, it's awkward to do anything other than the most recent release of Unicode. LATEST is now on 13. We're on 12.1","OK, so having completely goofed and put the new code in the wrong place, here it is in the ""right"" place.
Except
I think that this still isn't the correct place. If I follow the logic correctly (the size of the file does not make my editor happy), the only use of the array  codepoint_names is in generate_codepoints_by_name. In which case, really we shouldn't even put the names into the C file if they start with <
And (oh my, is it complicated) - the lack of names might mean that ucd2c.pl could actually turn more of these sections into spans, if these sections have no properties. (I suspect that they do, but that code is really hard to follow.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1321,2020-06-27T14:05:07Z,2020-06-28T16:14:22Z,2020-06-28T16:14:39Z,MERGED,True,52467,20080,3,https://github.com/nwc10,"Don't add placeholders such as ""<control>"" to the Unicode names lookup hash.",4,[],https://github.com/MoarVM/MoarVM/pull/1321,https://github.com/lizmat,3,https://github.com/MoarVM/MoarVM/pull/1321#issuecomment-650624870,"@samcv , @jnthn  or *, could you check that I'm not doing anything stupid here?
I don't want to just push it, in case there was something I missed.
Woah I think I've done something stupid in the ""fix"" here (it's not in the right place). But is the reasoning sound? That we don't want these duplicates in the hash.
Rest of the commit message is the reasoning:
Including these make no sense - the hash is for a 1->1 mapping of name to
codepoint, but for each of these names we have multiple values.

The way our hashes are currently implemented (with ""bind""), these duplicate
keys are not ignored - we add hundreds of duplicate entries to the same`
bucket chain (which will never successfully split to shorter chains).
This will cause performance degradation for other name lookups on the same
bucket chain - algorithmic pain, not merely memory bloat.

We *are* effectively executing a DOS attack against ourselves. Oops. :-)

For completeness, I should note that there are some duplicates in unicode_property_value_keypairs, such as {""18-number"",1258291201},{""18-number"",1258291201} but

there don't seem to be more than 2 entries with the same key duplicated
the values are indentical
I wasn't sure if it's safe to de-duplicate them in ucd2.pl, or if the array index they are at also matters.

so I don't think that it's a performance hit, or much memory bloat.
And I didn't want to try to experiment, as the way UCD-download.p6 is written, it's awkward to do anything other than the most recent release of Unicode. LATEST is now on 13. We're on 12.1","Question: does ucd2c.pl need to be run during the MoarVM build process?  If not, I would suggest making it a Raku script  :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1321,2020-06-27T14:05:07Z,2020-06-28T16:14:22Z,2020-06-28T16:14:39Z,MERGED,True,52467,20080,3,https://github.com/nwc10,"Don't add placeholders such as ""<control>"" to the Unicode names lookup hash.",4,[],https://github.com/MoarVM/MoarVM/pull/1321,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1321#issuecomment-650699125,"@samcv , @jnthn  or *, could you check that I'm not doing anything stupid here?
I don't want to just push it, in case there was something I missed.
Woah I think I've done something stupid in the ""fix"" here (it's not in the right place). But is the reasoning sound? That we don't want these duplicates in the hash.
Rest of the commit message is the reasoning:
Including these make no sense - the hash is for a 1->1 mapping of name to
codepoint, but for each of these names we have multiple values.

The way our hashes are currently implemented (with ""bind""), these duplicate
keys are not ignored - we add hundreds of duplicate entries to the same`
bucket chain (which will never successfully split to shorter chains).
This will cause performance degradation for other name lookups on the same
bucket chain - algorithmic pain, not merely memory bloat.

We *are* effectively executing a DOS attack against ourselves. Oops. :-)

For completeness, I should note that there are some duplicates in unicode_property_value_keypairs, such as {""18-number"",1258291201},{""18-number"",1258291201} but

there don't seem to be more than 2 entries with the same key duplicated
the values are indentical
I wasn't sure if it's safe to de-duplicate them in ucd2.pl, or if the array index they are at also matters.

so I don't think that it's a performance hit, or much memory bloat.
And I didn't want to try to experiment, as the way UCD-download.p6 is written, it's awkward to do anything other than the most recent release of Unicode. LATEST is now on 13. We're on 12.1","OK, I conclude that it's quite sane to remove the various placeholders such as <control> from the lookup, given the current behaviour:
$ for i in `seq 0 9`; do ./nqp -e 'nqp::say(nqp::codepointfromname(""<control>""))'; done
31
158
31
31
159
5
159
31
159
31

No way can anyone be relying on that behaviour.
(I think that the unpredictable value you get is a side effect of bucket insertion order randomisation)
I would also suggest that ucd2c.pl would benefit from being rewritten to something sane, but as it is about as sane as one of Damian's regexs, it's not a SMOP. (The whole thing, it and the C code it generates/interfaces with, is 6 to 7 years old, and rather too clever for my liking)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1324,2020-07-03T02:28:26Z,2020-07-03T06:36:00Z,2020-07-03T06:36:00Z,MERGED,True,1,2,1,https://github.com/0racle,"Revert ""Declare loop var before loop""",1,[],https://github.com/MoarVM/MoarVM/pull/1324,https://github.com/0racle,1,https://github.com/MoarVM/MoarVM/pull/1324,"This reverts commit fc09255.
Now that we are enforcing -std=gnu99 (23dfde9) this is no longer
required.","This reverts commit fc09255.
Now that we are enforcing -std=gnu99 (23dfde9) this is no longer
required.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1325,2020-07-07T18:50:28Z,2020-07-16T14:35:35Z,2020-07-16T14:35:35Z,CLOSED,False,0,0,0,https://github.com/timo,Give threads names,0,[],https://github.com/MoarVM/MoarVM/pull/1325,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/1325,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1326,2020-07-14T10:10:52Z,2020-07-14T10:24:31Z,2020-07-14T10:24:32Z,CLOSED,False,10,5,2,https://github.com/ffontaine,Fix build with gcc 4.8,1,[],https://github.com/MoarVM/MoarVM/pull/1326,https://github.com/ffontaine,1,https://github.com/MoarVM/MoarVM/pull/1326,"Build with gcc 4.8 is broken since version 2020.06 and commit c705875:
src/debug/debugserver.c: In function 'request_context_lexicals':
src/debug/debugserver.c:1456:9: error: 'for' loop initial declarations are only allowed in C99 mode
         for (MVMuint32 j = 0; j < num_lexicals; j++) {
         ^

Fixes:

http://autobuild.buildroot.org/results/179/1799769c531f9f26ff191b1adcd5e5b17dc3b244/build-end.log

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Build with gcc 4.8 is broken since version 2020.06 and commit c705875:
src/debug/debugserver.c: In function 'request_context_lexicals':
src/debug/debugserver.c:1456:9: error: 'for' loop initial declarations are only allowed in C99 mode
         for (MVMuint32 j = 0; j < num_lexicals; j++) {
         ^

Fixes:

http://autobuild.buildroot.org/results/179/1799769c531f9f26ff191b1adcd5e5b17dc3b244/build-end.log

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1326,2020-07-14T10:10:52Z,2020-07-14T10:24:31Z,2020-07-14T10:24:32Z,CLOSED,False,10,5,2,https://github.com/ffontaine,Fix build with gcc 4.8,1,[],https://github.com/MoarVM/MoarVM/pull/1326,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1326#issuecomment-658097195,"Build with gcc 4.8 is broken since version 2020.06 and commit c705875:
src/debug/debugserver.c: In function 'request_context_lexicals':
src/debug/debugserver.c:1456:9: error: 'for' loop initial declarations are only allowed in C99 mode
         for (MVMuint32 j = 0; j < num_lexicals; j++) {
         ^

Fixes:

http://autobuild.buildroot.org/results/179/1799769c531f9f26ff191b1adcd5e5b17dc3b244/build-end.log

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Thanks for your work on this. But I think this has already been fixed with 23dfde978ce327.
Have you tried this only with the 2020.06 release (which I think did not include the above commit) or also with latest master?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1326,2020-07-14T10:10:52Z,2020-07-14T10:24:31Z,2020-07-14T10:24:32Z,CLOSED,False,10,5,2,https://github.com/ffontaine,Fix build with gcc 4.8,1,[],https://github.com/MoarVM/MoarVM/pull/1326,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1326#issuecomment-658097486,"Build with gcc 4.8 is broken since version 2020.06 and commit c705875:
src/debug/debugserver.c: In function 'request_context_lexicals':
src/debug/debugserver.c:1456:9: error: 'for' loop initial declarations are only allowed in C99 mode
         for (MVMuint32 j = 0; j < num_lexicals; j++) {
         ^

Fixes:

http://autobuild.buildroot.org/results/179/1799769c531f9f26ff191b1adcd5e5b17dc3b244/build-end.log

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","This should actually have been fixed with 23dfde9
Can you confirm that the compiler is run with -std=gnu99? Can you please investigation why that isn't enough?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1326,2020-07-14T10:10:52Z,2020-07-14T10:24:31Z,2020-07-14T10:24:32Z,CLOSED,False,10,5,2,https://github.com/ffontaine,Fix build with gcc 4.8,1,[],https://github.com/MoarVM/MoarVM/pull/1326,https://github.com/ffontaine,4,https://github.com/MoarVM/MoarVM/pull/1326#issuecomment-658101464,"Build with gcc 4.8 is broken since version 2020.06 and commit c705875:
src/debug/debugserver.c: In function 'request_context_lexicals':
src/debug/debugserver.c:1456:9: error: 'for' loop initial declarations are only allowed in C99 mode
         for (MVMuint32 j = 0; j < num_lexicals; j++) {
         ^

Fixes:

http://autobuild.buildroot.org/results/179/1799769c531f9f26ff191b1adcd5e5b17dc3b244/build-end.log

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Yes, commit 23dfde9 fixes the issue, thanks for your help, I'll close this PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1327,2020-07-16T11:23:54Z,2021-03-07T13:29:01Z,2021-03-08T09:39:50Z,MERGED,True,65,35,3,https://github.com/Kaiepi,Improve serialization of C types,7,[],https://github.com/MoarVM/MoarVM/pull/1327,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1327,This adds support for serializing C arrays and fixes a potential integer overflow in C string deserialization. The purpose of this is to make it possible for abstract UNIX socket addresses to be serialized in my solution for Raku/problem-solving#111.,This adds support for serializing C arrays and fixes a potential integer overflow in C string deserialization. The purpose of this is to make it possible for abstract UNIX socket addresses to be serialized in my solution for Raku/problem-solving#111.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1327,2020-07-16T11:23:54Z,2021-03-07T13:29:01Z,2021-03-08T09:39:50Z,MERGED,True,65,35,3,https://github.com/Kaiepi,Improve serialization of C types,7,[],https://github.com/MoarVM/MoarVM/pull/1327,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1327#issuecomment-757359810,This adds support for serializing C arrays and fixes a potential integer overflow in C string deserialization. The purpose of this is to make it possible for abstract UNIX socket addresses to be serialized in my solution for Raku/problem-solving#111.,Updated.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1327,2020-07-16T11:23:54Z,2021-03-07T13:29:01Z,2021-03-08T09:39:50Z,MERGED,True,65,35,3,https://github.com/Kaiepi,Improve serialization of C types,7,[],https://github.com/MoarVM/MoarVM/pull/1327,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/1327#issuecomment-792279207,This adds support for serializing C arrays and fixes a potential integer overflow in C string deserialization. The purpose of this is to make it possible for abstract UNIX socket addresses to be serialized in my solution for Raku/problem-solving#111.,Can this be merged?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1328,2020-07-20T18:21:37Z,2020-07-20T18:22:28Z,2020-07-20T18:22:36Z,MERGED,True,37,1,2,https://github.com/Altai-man,2020.07 release,3,[],https://github.com/MoarVM/MoarVM/pull/1328,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1328,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1329,2020-07-22T12:31:36Z,2020-08-07T15:40:10Z,2020-08-14T13:49:15Z,MERGED,True,3,3,1,https://github.com/patrickbkr,Fix case insensitive string matching with an empty string,1,[],https://github.com/MoarVM/MoarVM/pull/1329,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1329,"Fixes '' ~~ m:i/''/ in Rakudo. I did a spectest run with this.
This PR is related to respective tests in roast: Raku/roast#655 Does it matter which of these PRs is merged first?
Fixes rakudo/rakudo#3815.","Fixes '' ~~ m:i/''/ in Rakudo. I did a spectest run with this.
This PR is related to respective tests in roast: Raku/roast#655 Does it matter which of these PRs is merged first?
Fixes rakudo/rakudo#3815.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1329,2020-07-22T12:31:36Z,2020-08-07T15:40:10Z,2020-08-14T13:49:15Z,MERGED,True,3,3,1,https://github.com/patrickbkr,Fix case insensitive string matching with an empty string,1,[],https://github.com/MoarVM/MoarVM/pull/1329,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1329#issuecomment-665312472,"Fixes '' ~~ m:i/''/ in Rakudo. I did a spectest run with this.
This PR is related to respective tests in roast: Raku/roast#655 Does it matter which of these PRs is merged first?
Fixes rakudo/rakudo#3815.",I think this is ready for merge. I'm just unsure if the roast PR should be merged first.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1329,2020-07-22T12:31:36Z,2020-08-07T15:40:10Z,2020-08-14T13:49:15Z,MERGED,True,3,3,1,https://github.com/patrickbkr,Fix case insensitive string matching with an empty string,1,[],https://github.com/MoarVM/MoarVM/pull/1329,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1329#issuecomment-670579121,"Fixes '' ~~ m:i/''/ in Rakudo. I did a spectest run with this.
This PR is related to respective tests in roast: Raku/roast#655 Does it matter which of these PRs is merged first?
Fixes rakudo/rakudo#3815.","@patrickbkr I'd get a MoarVM/NQP version bump done and then merge the roast tests, that way folks won't see them failing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1330,2020-07-24T10:58:13Z,2020-07-24T11:49:07Z,2020-07-24T11:49:07Z,MERGED,True,0,0,1,https://github.com/Kaiepi,Make Configure.pl executable again,1,[],https://github.com/MoarVM/MoarVM/pull/1330,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1330,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1331,2020-07-24T11:52:42Z,2020-11-24T21:30:16Z,2020-11-24T21:30:16Z,MERGED,True,27,25,1,https://github.com/Kaiepi,Add word and byte-sized return value macros to the lego JIT,1,[],https://github.com/MoarVM/MoarVM/pull/1331,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1331,This makes it so shorthand exists for any size of return value.,This makes it so shorthand exists for any size of return value.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1332,2020-07-31T08:50:51Z,2020-07-31T11:00:22Z,2020-07-31T12:41:42Z,MERGED,True,2,5,2,https://github.com/MasterDuke17,Fix some new compiler warnings,1,[],https://github.com/MoarVM/MoarVM/pull/1332,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1332,"Remove an unused variable.
Use right size in format string.
Make variable const.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Remove an unused variable.
Use right size in format string.
Make variable const.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1334,2020-08-06T09:01:02Z,2020-08-13T09:36:03Z,2020-08-13T09:45:39Z,CLOSED,False,3396,1901,80,https://github.com/nwc10,YYY a better hash,53,['WIP'],https://github.com/MoarVM/MoarVM/pull/1334,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1334,"Not for merging. A pull request to track the known issues.
And not yet even a well formatted pull request

data race between setting the flag bit MVM_CF_HAS_OBJECT_ID (in one thread) and the write barriers setting flag bits (in a different thread). This is not new, but this branch exposes it. It can be replicated on master: https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-08-04
strict aliasing bug introduced in MVMHash.c: https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-07-30#l124
commit XXX has XXXes to remove. Please could @jnthn check my assumptions? needs those XXXs checking
all the other commits should be reviewed too (for code style, actual errors typos, unclear comments, anything)
test failures reported by coke: https://gist.github.com/coke/cc744eade897aaf23c3d4114b93495ec

Attempting to solve the data race by simply eliminating MVM_CF_HAS_OBJECT_ID seems to be a 10% performance regression (HEAD on this branch).
Data race can be provoked on master with:
--- a/src/gc/objectid.c
+++ b/src/gc/objectid.c
@@ -5,6 +5,9 @@
 MVMuint64 MVM_gc_object_id(MVMThreadContext *tc, MVMObject *obj) {
     MVMuint64 id;

+    assert(!(obj->header.flags & MVM_CF_STABLE));
+    assert(!(obj->header.flags & MVM_CF_FRAME));
+
     /* If it's already in the old generation, just use memory address, as
      * gen2 objects never move. */
     if (obj->header.flags & MVM_CF_SECOND_GEN) {
@@ -15,12 +18,20 @@ MVMuint64 MVM_gc_object_id(MVMThreadContext *tc, MVMObject *obj) {
     else {
         MVMObjectId *entry;
         uv_mutex_lock(&tc->instance->mutex_object_ids);
+        HASH_FIND(hash_handle, tc->instance->object_ids, (void *)&obj,
+                  sizeof(MVMObject *), entry);
         if (obj->header.flags & MVM_CF_HAS_OBJECT_ID) {
             /* Has one, so just look up by address in the hash ID hash. */
-            HASH_FIND(hash_handle, tc->instance->object_ids, (void *)&obj,
-                sizeof(MVMObject *), entry);
+            if (!entry) {
+                MVM_oops(tc, ""object_id lookup fail for %p"", obj);
+            }
         }
         else {
+            if (entry) {
+                MVM_oops(tc, ""object_id insert dup, %p is already %p"",
+                         obj, entry->gen2_addr);
+            }
+
             /* Hasn't got one; allocate it a place in gen2 and make an entry
              * in the persistent object ID hash. */
             entry            = MVM_calloc(1, sizeof(MVMObjectId));


(it will hit the oops for ""insert dup"", not the asserts)
I fear that to address the data race we're going to need to use more atomic ops, and to do that we're going to need to merge flags size and maybe owner in struct MVMCollectable into one integer sized appropriately for what libatomic can offer us.
I think also that the data race means that sometimes MVM_CF_REF_FROM_GEN2 is not set (when MVM_gc_object_id wins and MVM_gc_write_barrier_hit_by loses), so it's a real and dangerous bug. But this paragraph has not yet had code review.","Not for merging. A pull request to track the known issues.
And not yet even a well formatted pull request

data race between setting the flag bit MVM_CF_HAS_OBJECT_ID (in one thread) and the write barriers setting flag bits (in a different thread). This is not new, but this branch exposes it. It can be replicated on master: https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-08-04
strict aliasing bug introduced in MVMHash.c: https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-07-30#l124
commit XXX has XXXes to remove. Please could @jnthn check my assumptions? needs those XXXs checking
all the other commits should be reviewed too (for code style, actual errors typos, unclear comments, anything)
test failures reported by coke: https://gist.github.com/coke/cc744eade897aaf23c3d4114b93495ec

Attempting to solve the data race by simply eliminating MVM_CF_HAS_OBJECT_ID seems to be a 10% performance regression (HEAD on this branch).
Data race can be provoked on master with:
--- a/src/gc/objectid.c
+++ b/src/gc/objectid.c
@@ -5,6 +5,9 @@
 MVMuint64 MVM_gc_object_id(MVMThreadContext *tc, MVMObject *obj) {
     MVMuint64 id;

+    assert(!(obj->header.flags & MVM_CF_STABLE));
+    assert(!(obj->header.flags & MVM_CF_FRAME));
+
     /* If it's already in the old generation, just use memory address, as
      * gen2 objects never move. */
     if (obj->header.flags & MVM_CF_SECOND_GEN) {
@@ -15,12 +18,20 @@ MVMuint64 MVM_gc_object_id(MVMThreadContext *tc, MVMObject *obj) {
     else {
         MVMObjectId *entry;
         uv_mutex_lock(&tc->instance->mutex_object_ids);
+        HASH_FIND(hash_handle, tc->instance->object_ids, (void *)&obj,
+                  sizeof(MVMObject *), entry);
         if (obj->header.flags & MVM_CF_HAS_OBJECT_ID) {
             /* Has one, so just look up by address in the hash ID hash. */
-            HASH_FIND(hash_handle, tc->instance->object_ids, (void *)&obj,
-                sizeof(MVMObject *), entry);
+            if (!entry) {
+                MVM_oops(tc, ""object_id lookup fail for %p"", obj);
+            }
         }
         else {
+            if (entry) {
+                MVM_oops(tc, ""object_id insert dup, %p is already %p"",
+                         obj, entry->gen2_addr);
+            }
+
             /* Hasn't got one; allocate it a place in gen2 and make an entry
              * in the persistent object ID hash. */
             entry            = MVM_calloc(1, sizeof(MVMObjectId));


(it will hit the oops for ""insert dup"", not the asserts)
I fear that to address the data race we're going to need to use more atomic ops, and to do that we're going to need to merge flags size and maybe owner in struct MVMCollectable into one integer sized appropriately for what libatomic can offer us.
I think also that the data race means that sometimes MVM_CF_REF_FROM_GEN2 is not set (when MVM_gc_object_id wins and MVM_gc_write_barrier_hit_by loses), so it's a real and dangerous bug. But this paragraph has not yet had code review.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1334,2020-08-06T09:01:02Z,2020-08-13T09:36:03Z,2020-08-13T09:45:39Z,CLOSED,False,3396,1901,80,https://github.com/nwc10,YYY a better hash,53,['WIP'],https://github.com/MoarVM/MoarVM/pull/1334,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1334#issuecomment-673374014,"Not for merging. A pull request to track the known issues.
And not yet even a well formatted pull request

data race between setting the flag bit MVM_CF_HAS_OBJECT_ID (in one thread) and the write barriers setting flag bits (in a different thread). This is not new, but this branch exposes it. It can be replicated on master: https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-08-04
strict aliasing bug introduced in MVMHash.c: https://colabti.org/irclogger/irclogger_log/moarvm?date=2020-07-30#l124
commit XXX has XXXes to remove. Please could @jnthn check my assumptions? needs those XXXs checking
all the other commits should be reviewed too (for code style, actual errors typos, unclear comments, anything)
test failures reported by coke: https://gist.github.com/coke/cc744eade897aaf23c3d4114b93495ec

Attempting to solve the data race by simply eliminating MVM_CF_HAS_OBJECT_ID seems to be a 10% performance regression (HEAD on this branch).
Data race can be provoked on master with:
--- a/src/gc/objectid.c
+++ b/src/gc/objectid.c
@@ -5,6 +5,9 @@
 MVMuint64 MVM_gc_object_id(MVMThreadContext *tc, MVMObject *obj) {
     MVMuint64 id;

+    assert(!(obj->header.flags & MVM_CF_STABLE));
+    assert(!(obj->header.flags & MVM_CF_FRAME));
+
     /* If it's already in the old generation, just use memory address, as
      * gen2 objects never move. */
     if (obj->header.flags & MVM_CF_SECOND_GEN) {
@@ -15,12 +18,20 @@ MVMuint64 MVM_gc_object_id(MVMThreadContext *tc, MVMObject *obj) {
     else {
         MVMObjectId *entry;
         uv_mutex_lock(&tc->instance->mutex_object_ids);
+        HASH_FIND(hash_handle, tc->instance->object_ids, (void *)&obj,
+                  sizeof(MVMObject *), entry);
         if (obj->header.flags & MVM_CF_HAS_OBJECT_ID) {
             /* Has one, so just look up by address in the hash ID hash. */
-            HASH_FIND(hash_handle, tc->instance->object_ids, (void *)&obj,
-                sizeof(MVMObject *), entry);
+            if (!entry) {
+                MVM_oops(tc, ""object_id lookup fail for %p"", obj);
+            }
         }
         else {
+            if (entry) {
+                MVM_oops(tc, ""object_id insert dup, %p is already %p"",
+                         obj, entry->gen2_addr);
+            }
+
             /* Hasn't got one; allocate it a place in gen2 and make an entry
              * in the persistent object ID hash. */
             entry            = MVM_calloc(1, sizeof(MVMObjectId));


(it will hit the oops for ""insert dup"", not the asserts)
I fear that to address the data race we're going to need to use more atomic ops, and to do that we're going to need to merge flags size and maybe owner in struct MVMCollectable into one integer sized appropriately for what libatomic can offer us.
I think also that the data race means that sometimes MVM_CF_REF_FROM_GEN2 is not set (when MVM_gc_object_id wins and MVM_gc_write_barrier_hit_by loses), so it's a real and dangerous bug. But this paragraph has not yet had code review.",Superseded by #1337,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1335,2020-08-10T10:08:50Z,2020-08-10T11:19:11Z,2020-08-10T11:19:15Z,MERGED,True,3,3,1,https://github.com/nwc10,MVM_malloc_trim would be better after MVM_gc_collect_free_gen2_unmarked,1,[],https://github.com/MoarVM/MoarVM/pull/1335,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1335,"MVM_gc_collect_free_gen2_unmarked can free memory (particularly ""overflow""
allocations for large objects), so the greatest chance of free memory at
the top of the address space will be here.","MVM_gc_collect_free_gen2_unmarked can free memory (particularly ""overflow""
allocations for large objects), so the greatest chance of free memory at
the top of the address space will be here.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1336,2020-08-11T12:27:51Z,2020-08-13T09:24:14Z,2020-08-13T09:24:18Z,MERGED,True,163,147,23,https://github.com/nwc10,Split `flags` in struct MVMCollectable to avoid data races when setting `MVM_CF_HAS_OBJECT_ID` and `MVM_CF_REF_FROM_GEN2`,2,[],https://github.com/MoarVM/MoarVM/pull/1336,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1336,"""paranoia"" checks added as part of work on the new hash tables reveal that there is a nasty data race when setting flag bits in MVMCollectable
Specifically, if one thread calls MVM_gc_object_id for an object that does not yet have an ID, and another thread calls MVM_gc_write_barrier_hit_by for the same object, then each function needs to perform a read, modify, write on the object's flags. If the data race is hit, then the setting of one of the flags bits is lost. If MVM_CF_HAS_OBJECT_ID fails to be set, then we simply leak a little memory in the gen2 pools. If MVM_CF_REF_FROM_GEN2 fails to be set, then the GC doesn't function properly.
A solution to this is to split the flags from a single MVMuint16 into two MVMuint8s and partition the flags bits across the two, so that these two hot flags are not in the same byte. This way, each can be updated without causing a data race with the other. The proposed split turns out to be quite easily memorable - other than MVM_CF_HAS_OBJECT_ID, all ""gen2"", ""nursery"" and GC related flags go into flags2, all others into flags1.
Unfortunately rakudo's extension ops have an unhealthy amount of tight coupling with MoarVM, including (ab)using a free bit in the flags for FIRST handling. Hence rakudo needs to be changed before it can build with these changes. The proposed patch to rakudo makes it build with both MoarVM master and this branch
Suggested actions

review this branch for sanity. test with NQP
review the necessary rakudo changes at https://github.com/nwc10/rakudo/tree/flags-split
push the rakudo changes to master
push the MoarVM changes to master

(intersperse with testing as necessary)(as expected, the automatic tests here fail currently, because Rakudo has not been patched)
Problem found by @dogbert17, cause diagnosed by @niner","""paranoia"" checks added as part of work on the new hash tables reveal that there is a nasty data race when setting flag bits in MVMCollectable
Specifically, if one thread calls MVM_gc_object_id for an object that does not yet have an ID, and another thread calls MVM_gc_write_barrier_hit_by for the same object, then each function needs to perform a read, modify, write on the object's flags. If the data race is hit, then the setting of one of the flags bits is lost. If MVM_CF_HAS_OBJECT_ID fails to be set, then we simply leak a little memory in the gen2 pools. If MVM_CF_REF_FROM_GEN2 fails to be set, then the GC doesn't function properly.
A solution to this is to split the flags from a single MVMuint16 into two MVMuint8s and partition the flags bits across the two, so that these two hot flags are not in the same byte. This way, each can be updated without causing a data race with the other. The proposed split turns out to be quite easily memorable - other than MVM_CF_HAS_OBJECT_ID, all ""gen2"", ""nursery"" and GC related flags go into flags2, all others into flags1.
Unfortunately rakudo's extension ops have an unhealthy amount of tight coupling with MoarVM, including (ab)using a free bit in the flags for FIRST handling. Hence rakudo needs to be changed before it can build with these changes. The proposed patch to rakudo makes it build with both MoarVM master and this branch
Suggested actions

review this branch for sanity. test with NQP
review the necessary rakudo changes at https://github.com/nwc10/rakudo/tree/flags-split
push the rakudo changes to master
push the MoarVM changes to master

(intersperse with testing as necessary)(as expected, the automatic tests here fail currently, because Rakudo has not been patched)
Problem found by @dogbert17, cause diagnosed by @niner",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1337,2020-08-13T09:34:01Z,2020-08-31T12:23:01Z,2020-09-01T16:53:46Z,CLOSED,False,3439,2216,80,https://github.com/nwc10,A better hash,65,[],https://github.com/MoarVM/MoarVM/pull/1337,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1337,"This fixes all the known bugs detailed in #1334
There is still this specific commit that needs checking and then editing
commit 90eb6992c03755f533b331abe810b67974068dfc
Author: Nicholas Clark <nick@ccl4.org>
Date:   Wed Jun 3 18:09:32 2020 +0000

    XXX has XXXes to remove. Please could @jnthn check my assumptions?

    Convert MVMHash and HashAttrStoreHashAttrStore to MVMStrHashTable.

    The MVMStrHashTable struct can be stored directly in the object body - we
    no longer need another layer of indirection.

    Add MVM_str_hash_count to return the count of items in the hash.
    Add MVM_str_hash_end to return an iterator for which MVM_str_hash_at_end
    is immediately true.

    For debugging iterators, given that the hashtable structure is now public,
    and can be embedded in other structures, we can't use it as the debugging
    ID. [The GC likes to move things! :-)]

    Hence use a 64 bit random number as the debugging ID. This necessitates moving
    the headers with the relevant function prototypes earlier.

Apart from that, I think that it is good to merge, but previous review by me, @dogbert17 and @coke found subtle bugs, so there might still be some hiding.
Edit:
The branch A-better-hash is byte-for-byte identical to AAAA-A-better-hash.
It has

One commit pushed after @jnthn's last commit, which adds two oopses (that would otherwise be panics)
The commit with XXX rewritten to remove the XXX
One other commit message edited to fix some text
Three of the code review commits re-ordered to be immediately after the commit that they referred to.

Specifically, the section from my git log --oneline file that I used to plan the re-order; the moved commits are indented:
480f09cf1 Eliminate uthash. It served us well, and earned a happy retirement.
f8b7defb7 Hash randomisation for MVMStrHashTable.
33edf845d MVM_str_hash_fsck.
    24c86e6ff Fix a typo. In five places.
7c65ae56b Hash iterators now run in ""reverse"", from the largest index down to 0.
e954e6f76 Re-implement MVMStrHashTable as a Robin Hood Hash.
7bb6a9276 The JIT template for MVM_OP_sp_boolify_iter_hash will no longer work.
889d61d04 Revert ""Spesh and JIT get(cur)?hllsym""
4a1c16fe1 Re-implement MVMFixKeyHashTable as a Robin Hood Hash.
ba629fa60 Re-implement MVMPtrHashTable as a Robin Hood Hash.
fd12897b7 Re-implement MVMIndexHashTable as a Robin Hood Hash.
542847255 Refactor MVM_uni_hash_insert in terms of MVM_uni_hash_lvalue_fetch.
53e1fe9c6 Re-implement MVMUniHashTable as a Robin Hood Hash.
9507a098f Convert loaded_compunits from a MVMStrHashTable to a MVMFixKeyHashTable.
778eb8762 Add MVM_string_hash_code, which encapsulates access to the string's hash code.
232260ace Add container_registry's keys in MVM_gc_root_add_instance_roots_to_worklist.
3c8dae717 Remove all of the UT hash functional macros (and most of uthash.h)
c5c67562a Migrate the other internal Unicode hashes to MVMUniHashTable.
3a53f7466 Add MVMUniHashTable, and use it to re-implement codepoints_by_name.
4ff5785a1 Delete more now-unused MVM_HASH macros and inline functions.
a5d58f8a0 Convert `seen` in MVMHeapSnapshotState to MVMPtrHashTable.
141779cb5 Add MVMPtrHashTable, for hashes mapping a pointer to a pointer-sized integer.
5de3c4ddb Eliminate the last two uses of the macro MVM_HASH_KEY
    db62b91e1 Printing the pointer address of the MVMString isn't adding anything.
f287d8927 Convert repr_hash to MVMIndexHashTable, repr_list to repr_names & repr_vtables
3f8a8e5c0 Add MVMIndexHashTable, for hash lookups into an array of MVMString*.
b7665665a Re-order the representations registry into ID order.
c38beb9e8 Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
17a8a99d3 Replace MVM_str_hash_unbind with MVM_str_hash_delete
263ea58d3 Use MVM_str_hash_lvalue_fetch instead of a fetch/bind pair.
    bafd06faf Comments clarifying why each oops call added makes valid assumptions.
90eb6992c XXX has XXXes to remove. Please could @jnthn check my assumptions?
cff7a0cda Converge the implementations of MVMHash and HashAttrStore
2bf3a4e2b Move code from interp.c to MVMiter.h to avoid breaking encapsulation.

I have not rebased it. Commits are only reordered, or have their commit message changed. No commit contents have changed.
@jnthn - I believe that A-better-hash is ready to merge.","This fixes all the known bugs detailed in #1334
There is still this specific commit that needs checking and then editing
commit 90eb6992c03755f533b331abe810b67974068dfc
Author: Nicholas Clark <nick@ccl4.org>
Date:   Wed Jun 3 18:09:32 2020 +0000

    XXX has XXXes to remove. Please could @jnthn check my assumptions?

    Convert MVMHash and HashAttrStoreHashAttrStore to MVMStrHashTable.

    The MVMStrHashTable struct can be stored directly in the object body - we
    no longer need another layer of indirection.

    Add MVM_str_hash_count to return the count of items in the hash.
    Add MVM_str_hash_end to return an iterator for which MVM_str_hash_at_end
    is immediately true.

    For debugging iterators, given that the hashtable structure is now public,
    and can be embedded in other structures, we can't use it as the debugging
    ID. [The GC likes to move things! :-)]

    Hence use a 64 bit random number as the debugging ID. This necessitates moving
    the headers with the relevant function prototypes earlier.

Apart from that, I think that it is good to merge, but previous review by me, @dogbert17 and @coke found subtle bugs, so there might still be some hiding.
Edit:
The branch A-better-hash is byte-for-byte identical to AAAA-A-better-hash.
It has

One commit pushed after @jnthn's last commit, which adds two oopses (that would otherwise be panics)
The commit with XXX rewritten to remove the XXX
One other commit message edited to fix some text
Three of the code review commits re-ordered to be immediately after the commit that they referred to.

Specifically, the section from my git log --oneline file that I used to plan the re-order; the moved commits are indented:
480f09cf1 Eliminate uthash. It served us well, and earned a happy retirement.
f8b7defb7 Hash randomisation for MVMStrHashTable.
33edf845d MVM_str_hash_fsck.
    24c86e6ff Fix a typo. In five places.
7c65ae56b Hash iterators now run in ""reverse"", from the largest index down to 0.
e954e6f76 Re-implement MVMStrHashTable as a Robin Hood Hash.
7bb6a9276 The JIT template for MVM_OP_sp_boolify_iter_hash will no longer work.
889d61d04 Revert ""Spesh and JIT get(cur)?hllsym""
4a1c16fe1 Re-implement MVMFixKeyHashTable as a Robin Hood Hash.
ba629fa60 Re-implement MVMPtrHashTable as a Robin Hood Hash.
fd12897b7 Re-implement MVMIndexHashTable as a Robin Hood Hash.
542847255 Refactor MVM_uni_hash_insert in terms of MVM_uni_hash_lvalue_fetch.
53e1fe9c6 Re-implement MVMUniHashTable as a Robin Hood Hash.
9507a098f Convert loaded_compunits from a MVMStrHashTable to a MVMFixKeyHashTable.
778eb8762 Add MVM_string_hash_code, which encapsulates access to the string's hash code.
232260ace Add container_registry's keys in MVM_gc_root_add_instance_roots_to_worklist.
3c8dae717 Remove all of the UT hash functional macros (and most of uthash.h)
c5c67562a Migrate the other internal Unicode hashes to MVMUniHashTable.
3a53f7466 Add MVMUniHashTable, and use it to re-implement codepoints_by_name.
4ff5785a1 Delete more now-unused MVM_HASH macros and inline functions.
a5d58f8a0 Convert `seen` in MVMHeapSnapshotState to MVMPtrHashTable.
141779cb5 Add MVMPtrHashTable, for hashes mapping a pointer to a pointer-sized integer.
5de3c4ddb Eliminate the last two uses of the macro MVM_HASH_KEY
    db62b91e1 Printing the pointer address of the MVMString isn't adding anything.
f287d8927 Convert repr_hash to MVMIndexHashTable, repr_list to repr_names & repr_vtables
3f8a8e5c0 Add MVMIndexHashTable, for hash lookups into an array of MVMString*.
b7665665a Re-order the representations registry into ID order.
c38beb9e8 Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
17a8a99d3 Replace MVM_str_hash_unbind with MVM_str_hash_delete
263ea58d3 Use MVM_str_hash_lvalue_fetch instead of a fetch/bind pair.
    bafd06faf Comments clarifying why each oops call added makes valid assumptions.
90eb6992c XXX has XXXes to remove. Please could @jnthn check my assumptions?
cff7a0cda Converge the implementations of MVMHash and HashAttrStore
2bf3a4e2b Move code from interp.c to MVMiter.h to avoid breaking encapsulation.

I have not rebased it. Commits are only reordered, or have their commit message changed. No commit contents have changed.
@jnthn - I believe that A-better-hash is ready to merge.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1337,2020-08-13T09:34:01Z,2020-08-31T12:23:01Z,2020-09-01T16:53:46Z,CLOSED,False,3439,2216,80,https://github.com/nwc10,A better hash,65,[],https://github.com/MoarVM/MoarVM/pull/1337,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1337#issuecomment-673381144,"This fixes all the known bugs detailed in #1334
There is still this specific commit that needs checking and then editing
commit 90eb6992c03755f533b331abe810b67974068dfc
Author: Nicholas Clark <nick@ccl4.org>
Date:   Wed Jun 3 18:09:32 2020 +0000

    XXX has XXXes to remove. Please could @jnthn check my assumptions?

    Convert MVMHash and HashAttrStoreHashAttrStore to MVMStrHashTable.

    The MVMStrHashTable struct can be stored directly in the object body - we
    no longer need another layer of indirection.

    Add MVM_str_hash_count to return the count of items in the hash.
    Add MVM_str_hash_end to return an iterator for which MVM_str_hash_at_end
    is immediately true.

    For debugging iterators, given that the hashtable structure is now public,
    and can be embedded in other structures, we can't use it as the debugging
    ID. [The GC likes to move things! :-)]

    Hence use a 64 bit random number as the debugging ID. This necessitates moving
    the headers with the relevant function prototypes earlier.

Apart from that, I think that it is good to merge, but previous review by me, @dogbert17 and @coke found subtle bugs, so there might still be some hiding.
Edit:
The branch A-better-hash is byte-for-byte identical to AAAA-A-better-hash.
It has

One commit pushed after @jnthn's last commit, which adds two oopses (that would otherwise be panics)
The commit with XXX rewritten to remove the XXX
One other commit message edited to fix some text
Three of the code review commits re-ordered to be immediately after the commit that they referred to.

Specifically, the section from my git log --oneline file that I used to plan the re-order; the moved commits are indented:
480f09cf1 Eliminate uthash. It served us well, and earned a happy retirement.
f8b7defb7 Hash randomisation for MVMStrHashTable.
33edf845d MVM_str_hash_fsck.
    24c86e6ff Fix a typo. In five places.
7c65ae56b Hash iterators now run in ""reverse"", from the largest index down to 0.
e954e6f76 Re-implement MVMStrHashTable as a Robin Hood Hash.
7bb6a9276 The JIT template for MVM_OP_sp_boolify_iter_hash will no longer work.
889d61d04 Revert ""Spesh and JIT get(cur)?hllsym""
4a1c16fe1 Re-implement MVMFixKeyHashTable as a Robin Hood Hash.
ba629fa60 Re-implement MVMPtrHashTable as a Robin Hood Hash.
fd12897b7 Re-implement MVMIndexHashTable as a Robin Hood Hash.
542847255 Refactor MVM_uni_hash_insert in terms of MVM_uni_hash_lvalue_fetch.
53e1fe9c6 Re-implement MVMUniHashTable as a Robin Hood Hash.
9507a098f Convert loaded_compunits from a MVMStrHashTable to a MVMFixKeyHashTable.
778eb8762 Add MVM_string_hash_code, which encapsulates access to the string's hash code.
232260ace Add container_registry's keys in MVM_gc_root_add_instance_roots_to_worklist.
3c8dae717 Remove all of the UT hash functional macros (and most of uthash.h)
c5c67562a Migrate the other internal Unicode hashes to MVMUniHashTable.
3a53f7466 Add MVMUniHashTable, and use it to re-implement codepoints_by_name.
4ff5785a1 Delete more now-unused MVM_HASH macros and inline functions.
a5d58f8a0 Convert `seen` in MVMHeapSnapshotState to MVMPtrHashTable.
141779cb5 Add MVMPtrHashTable, for hashes mapping a pointer to a pointer-sized integer.
5de3c4ddb Eliminate the last two uses of the macro MVM_HASH_KEY
    db62b91e1 Printing the pointer address of the MVMString isn't adding anything.
f287d8927 Convert repr_hash to MVMIndexHashTable, repr_list to repr_names & repr_vtables
3f8a8e5c0 Add MVMIndexHashTable, for hash lookups into an array of MVMString*.
b7665665a Re-order the representations registry into ID order.
c38beb9e8 Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
17a8a99d3 Replace MVM_str_hash_unbind with MVM_str_hash_delete
263ea58d3 Use MVM_str_hash_lvalue_fetch instead of a fetch/bind pair.
    bafd06faf Comments clarifying why each oops call added makes valid assumptions.
90eb6992c XXX has XXXes to remove. Please could @jnthn check my assumptions?
cff7a0cda Converge the implementations of MVMHash and HashAttrStore
2bf3a4e2b Move code from interp.c to MVMiter.h to avoid breaking encapsulation.

I have not rebased it. Commits are only reordered, or have their commit message changed. No commit contents have changed.
@jnthn - I believe that A-better-hash is ready to merge.","as long as a zeroed body is sufficient

I'm not sure if I understand all the details implied by this question (I'm not confident enough of all the context), so I might be answering the wrong question, or answering badly.
If one zeros out the struct MVMStrHashTable, then it is safe to call MVM_str_hash_build on that memory again.
As implemented, zeroing out the memory (or starting with zeroed memory) and then calling other hash functions (without/before) calling MVM_str_hash_build first will, um, go horribly wrong, because there does not seem to be a sanity test on hashtable->entry_size in hash_allocate_common. It will call MVM_malloc with a zero size, which will panic if the C library returns NULL, but won't if it returns a pointer. (I think that which happens is implementation dependent)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1337,2020-08-13T09:34:01Z,2020-08-31T12:23:01Z,2020-09-01T16:53:46Z,CLOSED,False,3439,2216,80,https://github.com/nwc10,A better hash,65,[],https://github.com/MoarVM/MoarVM/pull/1337,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1337#issuecomment-673382014,"This fixes all the known bugs detailed in #1334
There is still this specific commit that needs checking and then editing
commit 90eb6992c03755f533b331abe810b67974068dfc
Author: Nicholas Clark <nick@ccl4.org>
Date:   Wed Jun 3 18:09:32 2020 +0000

    XXX has XXXes to remove. Please could @jnthn check my assumptions?

    Convert MVMHash and HashAttrStoreHashAttrStore to MVMStrHashTable.

    The MVMStrHashTable struct can be stored directly in the object body - we
    no longer need another layer of indirection.

    Add MVM_str_hash_count to return the count of items in the hash.
    Add MVM_str_hash_end to return an iterator for which MVM_str_hash_at_end
    is immediately true.

    For debugging iterators, given that the hashtable structure is now public,
    and can be embedded in other structures, we can't use it as the debugging
    ID. [The GC likes to move things! :-)]

    Hence use a 64 bit random number as the debugging ID. This necessitates moving
    the headers with the relevant function prototypes earlier.

Apart from that, I think that it is good to merge, but previous review by me, @dogbert17 and @coke found subtle bugs, so there might still be some hiding.
Edit:
The branch A-better-hash is byte-for-byte identical to AAAA-A-better-hash.
It has

One commit pushed after @jnthn's last commit, which adds two oopses (that would otherwise be panics)
The commit with XXX rewritten to remove the XXX
One other commit message edited to fix some text
Three of the code review commits re-ordered to be immediately after the commit that they referred to.

Specifically, the section from my git log --oneline file that I used to plan the re-order; the moved commits are indented:
480f09cf1 Eliminate uthash. It served us well, and earned a happy retirement.
f8b7defb7 Hash randomisation for MVMStrHashTable.
33edf845d MVM_str_hash_fsck.
    24c86e6ff Fix a typo. In five places.
7c65ae56b Hash iterators now run in ""reverse"", from the largest index down to 0.
e954e6f76 Re-implement MVMStrHashTable as a Robin Hood Hash.
7bb6a9276 The JIT template for MVM_OP_sp_boolify_iter_hash will no longer work.
889d61d04 Revert ""Spesh and JIT get(cur)?hllsym""
4a1c16fe1 Re-implement MVMFixKeyHashTable as a Robin Hood Hash.
ba629fa60 Re-implement MVMPtrHashTable as a Robin Hood Hash.
fd12897b7 Re-implement MVMIndexHashTable as a Robin Hood Hash.
542847255 Refactor MVM_uni_hash_insert in terms of MVM_uni_hash_lvalue_fetch.
53e1fe9c6 Re-implement MVMUniHashTable as a Robin Hood Hash.
9507a098f Convert loaded_compunits from a MVMStrHashTable to a MVMFixKeyHashTable.
778eb8762 Add MVM_string_hash_code, which encapsulates access to the string's hash code.
232260ace Add container_registry's keys in MVM_gc_root_add_instance_roots_to_worklist.
3c8dae717 Remove all of the UT hash functional macros (and most of uthash.h)
c5c67562a Migrate the other internal Unicode hashes to MVMUniHashTable.
3a53f7466 Add MVMUniHashTable, and use it to re-implement codepoints_by_name.
4ff5785a1 Delete more now-unused MVM_HASH macros and inline functions.
a5d58f8a0 Convert `seen` in MVMHeapSnapshotState to MVMPtrHashTable.
141779cb5 Add MVMPtrHashTable, for hashes mapping a pointer to a pointer-sized integer.
5de3c4ddb Eliminate the last two uses of the macro MVM_HASH_KEY
    db62b91e1 Printing the pointer address of the MVMString isn't adding anything.
f287d8927 Convert repr_hash to MVMIndexHashTable, repr_list to repr_names & repr_vtables
3f8a8e5c0 Add MVMIndexHashTable, for hash lookups into an array of MVMString*.
b7665665a Re-order the representations registry into ID order.
c38beb9e8 Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
17a8a99d3 Replace MVM_str_hash_unbind with MVM_str_hash_delete
263ea58d3 Use MVM_str_hash_lvalue_fetch instead of a fetch/bind pair.
    bafd06faf Comments clarifying why each oops call added makes valid assumptions.
90eb6992c XXX has XXXes to remove. Please could @jnthn check my assumptions?
cff7a0cda Converge the implementations of MVMHash and HashAttrStore
2bf3a4e2b Move code from interp.c to MVMiter.h to avoid breaking encapsulation.

I have not rebased it. Commits are only reordered, or have their commit message changed. No commit contents have changed.
@jnthn - I believe that A-better-hash is ready to merge.","A paranoid assert just in case MVM_str_hash_end doesn't do its job right?

Yes.
But on reflection I don't think that this add value any more. It did during development (when things were messy) so I should remove this one.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1337,2020-08-13T09:34:01Z,2020-08-31T12:23:01Z,2020-09-01T16:53:46Z,CLOSED,False,3439,2216,80,https://github.com/nwc10,A better hash,65,[],https://github.com/MoarVM/MoarVM/pull/1337,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/1337#issuecomment-673387542,"This fixes all the known bugs detailed in #1334
There is still this specific commit that needs checking and then editing
commit 90eb6992c03755f533b331abe810b67974068dfc
Author: Nicholas Clark <nick@ccl4.org>
Date:   Wed Jun 3 18:09:32 2020 +0000

    XXX has XXXes to remove. Please could @jnthn check my assumptions?

    Convert MVMHash and HashAttrStoreHashAttrStore to MVMStrHashTable.

    The MVMStrHashTable struct can be stored directly in the object body - we
    no longer need another layer of indirection.

    Add MVM_str_hash_count to return the count of items in the hash.
    Add MVM_str_hash_end to return an iterator for which MVM_str_hash_at_end
    is immediately true.

    For debugging iterators, given that the hashtable structure is now public,
    and can be embedded in other structures, we can't use it as the debugging
    ID. [The GC likes to move things! :-)]

    Hence use a 64 bit random number as the debugging ID. This necessitates moving
    the headers with the relevant function prototypes earlier.

Apart from that, I think that it is good to merge, but previous review by me, @dogbert17 and @coke found subtle bugs, so there might still be some hiding.
Edit:
The branch A-better-hash is byte-for-byte identical to AAAA-A-better-hash.
It has

One commit pushed after @jnthn's last commit, which adds two oopses (that would otherwise be panics)
The commit with XXX rewritten to remove the XXX
One other commit message edited to fix some text
Three of the code review commits re-ordered to be immediately after the commit that they referred to.

Specifically, the section from my git log --oneline file that I used to plan the re-order; the moved commits are indented:
480f09cf1 Eliminate uthash. It served us well, and earned a happy retirement.
f8b7defb7 Hash randomisation for MVMStrHashTable.
33edf845d MVM_str_hash_fsck.
    24c86e6ff Fix a typo. In five places.
7c65ae56b Hash iterators now run in ""reverse"", from the largest index down to 0.
e954e6f76 Re-implement MVMStrHashTable as a Robin Hood Hash.
7bb6a9276 The JIT template for MVM_OP_sp_boolify_iter_hash will no longer work.
889d61d04 Revert ""Spesh and JIT get(cur)?hllsym""
4a1c16fe1 Re-implement MVMFixKeyHashTable as a Robin Hood Hash.
ba629fa60 Re-implement MVMPtrHashTable as a Robin Hood Hash.
fd12897b7 Re-implement MVMIndexHashTable as a Robin Hood Hash.
542847255 Refactor MVM_uni_hash_insert in terms of MVM_uni_hash_lvalue_fetch.
53e1fe9c6 Re-implement MVMUniHashTable as a Robin Hood Hash.
9507a098f Convert loaded_compunits from a MVMStrHashTable to a MVMFixKeyHashTable.
778eb8762 Add MVM_string_hash_code, which encapsulates access to the string's hash code.
232260ace Add container_registry's keys in MVM_gc_root_add_instance_roots_to_worklist.
3c8dae717 Remove all of the UT hash functional macros (and most of uthash.h)
c5c67562a Migrate the other internal Unicode hashes to MVMUniHashTable.
3a53f7466 Add MVMUniHashTable, and use it to re-implement codepoints_by_name.
4ff5785a1 Delete more now-unused MVM_HASH macros and inline functions.
a5d58f8a0 Convert `seen` in MVMHeapSnapshotState to MVMPtrHashTable.
141779cb5 Add MVMPtrHashTable, for hashes mapping a pointer to a pointer-sized integer.
5de3c4ddb Eliminate the last two uses of the macro MVM_HASH_KEY
    db62b91e1 Printing the pointer address of the MVMString isn't adding anything.
f287d8927 Convert repr_hash to MVMIndexHashTable, repr_list to repr_names & repr_vtables
3f8a8e5c0 Add MVMIndexHashTable, for hash lookups into an array of MVMString*.
b7665665a Re-order the representations registry into ID order.
c38beb9e8 Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
17a8a99d3 Replace MVM_str_hash_unbind with MVM_str_hash_delete
263ea58d3 Use MVM_str_hash_lvalue_fetch instead of a fetch/bind pair.
    bafd06faf Comments clarifying why each oops call added makes valid assumptions.
90eb6992c XXX has XXXes to remove. Please could @jnthn check my assumptions?
cff7a0cda Converge the implementations of MVMHash and HashAttrStore
2bf3a4e2b Move code from interp.c to MVMiter.h to avoid breaking encapsulation.

I have not rebased it. Commits are only reordered, or have their commit message changed. No commit contents have changed.
@jnthn - I believe that A-better-hash is ready to merge.","As implemented, zeroing out the memory (or starting with zeroed memory) and then calling other hash functions (without/before) calling MVM_str_hash_build first will, um, go horribly wrong

Presumably MVM_str_hash_entry_size an exception to this statement, given you're calling it immediately before MVM_str_hash_build?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1337,2020-08-13T09:34:01Z,2020-08-31T12:23:01Z,2020-09-01T16:53:46Z,CLOSED,False,3439,2216,80,https://github.com/nwc10,A better hash,65,[],https://github.com/MoarVM/MoarVM/pull/1337,https://github.com/jnthn,5,https://github.com/MoarVM/MoarVM/pull/1337#issuecomment-673393557,"This fixes all the known bugs detailed in #1334
There is still this specific commit that needs checking and then editing
commit 90eb6992c03755f533b331abe810b67974068dfc
Author: Nicholas Clark <nick@ccl4.org>
Date:   Wed Jun 3 18:09:32 2020 +0000

    XXX has XXXes to remove. Please could @jnthn check my assumptions?

    Convert MVMHash and HashAttrStoreHashAttrStore to MVMStrHashTable.

    The MVMStrHashTable struct can be stored directly in the object body - we
    no longer need another layer of indirection.

    Add MVM_str_hash_count to return the count of items in the hash.
    Add MVM_str_hash_end to return an iterator for which MVM_str_hash_at_end
    is immediately true.

    For debugging iterators, given that the hashtable structure is now public,
    and can be embedded in other structures, we can't use it as the debugging
    ID. [The GC likes to move things! :-)]

    Hence use a 64 bit random number as the debugging ID. This necessitates moving
    the headers with the relevant function prototypes earlier.

Apart from that, I think that it is good to merge, but previous review by me, @dogbert17 and @coke found subtle bugs, so there might still be some hiding.
Edit:
The branch A-better-hash is byte-for-byte identical to AAAA-A-better-hash.
It has

One commit pushed after @jnthn's last commit, which adds two oopses (that would otherwise be panics)
The commit with XXX rewritten to remove the XXX
One other commit message edited to fix some text
Three of the code review commits re-ordered to be immediately after the commit that they referred to.

Specifically, the section from my git log --oneline file that I used to plan the re-order; the moved commits are indented:
480f09cf1 Eliminate uthash. It served us well, and earned a happy retirement.
f8b7defb7 Hash randomisation for MVMStrHashTable.
33edf845d MVM_str_hash_fsck.
    24c86e6ff Fix a typo. In five places.
7c65ae56b Hash iterators now run in ""reverse"", from the largest index down to 0.
e954e6f76 Re-implement MVMStrHashTable as a Robin Hood Hash.
7bb6a9276 The JIT template for MVM_OP_sp_boolify_iter_hash will no longer work.
889d61d04 Revert ""Spesh and JIT get(cur)?hllsym""
4a1c16fe1 Re-implement MVMFixKeyHashTable as a Robin Hood Hash.
ba629fa60 Re-implement MVMPtrHashTable as a Robin Hood Hash.
fd12897b7 Re-implement MVMIndexHashTable as a Robin Hood Hash.
542847255 Refactor MVM_uni_hash_insert in terms of MVM_uni_hash_lvalue_fetch.
53e1fe9c6 Re-implement MVMUniHashTable as a Robin Hood Hash.
9507a098f Convert loaded_compunits from a MVMStrHashTable to a MVMFixKeyHashTable.
778eb8762 Add MVM_string_hash_code, which encapsulates access to the string's hash code.
232260ace Add container_registry's keys in MVM_gc_root_add_instance_roots_to_worklist.
3c8dae717 Remove all of the UT hash functional macros (and most of uthash.h)
c5c67562a Migrate the other internal Unicode hashes to MVMUniHashTable.
3a53f7466 Add MVMUniHashTable, and use it to re-implement codepoints_by_name.
4ff5785a1 Delete more now-unused MVM_HASH macros and inline functions.
a5d58f8a0 Convert `seen` in MVMHeapSnapshotState to MVMPtrHashTable.
141779cb5 Add MVMPtrHashTable, for hashes mapping a pointer to a pointer-sized integer.
5de3c4ddb Eliminate the last two uses of the macro MVM_HASH_KEY
    db62b91e1 Printing the pointer address of the MVMString isn't adding anything.
f287d8927 Convert repr_hash to MVMIndexHashTable, repr_list to repr_names & repr_vtables
3f8a8e5c0 Add MVMIndexHashTable, for hash lookups into an array of MVMString*.
b7665665a Re-order the representations registry into ID order.
c38beb9e8 Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
17a8a99d3 Replace MVM_str_hash_unbind with MVM_str_hash_delete
263ea58d3 Use MVM_str_hash_lvalue_fetch instead of a fetch/bind pair.
    bafd06faf Comments clarifying why each oops call added makes valid assumptions.
90eb6992c XXX has XXXes to remove. Please could @jnthn check my assumptions?
cff7a0cda Converge the implementations of MVMHash and HashAttrStore
2bf3a4e2b Move code from interp.c to MVMiter.h to avoid breaking encapsulation.

I have not rebased it. Commits are only reordered, or have their commit message changed. No commit contents have changed.
@jnthn - I believe that A-better-hash is ready to merge.","These two mentions of uthash (found with git grep could be cleaned up:
LICENSE:- uthash.h   MIT
src/strings/ops.c: * implementation in uthash.h. */",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1337,2020-08-13T09:34:01Z,2020-08-31T12:23:01Z,2020-09-01T16:53:46Z,CLOSED,False,3439,2216,80,https://github.com/nwc10,A better hash,65,[],https://github.com/MoarVM/MoarVM/pull/1337,https://github.com/nwc10,6,https://github.com/MoarVM/MoarVM/pull/1337#issuecomment-673403117,"This fixes all the known bugs detailed in #1334
There is still this specific commit that needs checking and then editing
commit 90eb6992c03755f533b331abe810b67974068dfc
Author: Nicholas Clark <nick@ccl4.org>
Date:   Wed Jun 3 18:09:32 2020 +0000

    XXX has XXXes to remove. Please could @jnthn check my assumptions?

    Convert MVMHash and HashAttrStoreHashAttrStore to MVMStrHashTable.

    The MVMStrHashTable struct can be stored directly in the object body - we
    no longer need another layer of indirection.

    Add MVM_str_hash_count to return the count of items in the hash.
    Add MVM_str_hash_end to return an iterator for which MVM_str_hash_at_end
    is immediately true.

    For debugging iterators, given that the hashtable structure is now public,
    and can be embedded in other structures, we can't use it as the debugging
    ID. [The GC likes to move things! :-)]

    Hence use a 64 bit random number as the debugging ID. This necessitates moving
    the headers with the relevant function prototypes earlier.

Apart from that, I think that it is good to merge, but previous review by me, @dogbert17 and @coke found subtle bugs, so there might still be some hiding.
Edit:
The branch A-better-hash is byte-for-byte identical to AAAA-A-better-hash.
It has

One commit pushed after @jnthn's last commit, which adds two oopses (that would otherwise be panics)
The commit with XXX rewritten to remove the XXX
One other commit message edited to fix some text
Three of the code review commits re-ordered to be immediately after the commit that they referred to.

Specifically, the section from my git log --oneline file that I used to plan the re-order; the moved commits are indented:
480f09cf1 Eliminate uthash. It served us well, and earned a happy retirement.
f8b7defb7 Hash randomisation for MVMStrHashTable.
33edf845d MVM_str_hash_fsck.
    24c86e6ff Fix a typo. In five places.
7c65ae56b Hash iterators now run in ""reverse"", from the largest index down to 0.
e954e6f76 Re-implement MVMStrHashTable as a Robin Hood Hash.
7bb6a9276 The JIT template for MVM_OP_sp_boolify_iter_hash will no longer work.
889d61d04 Revert ""Spesh and JIT get(cur)?hllsym""
4a1c16fe1 Re-implement MVMFixKeyHashTable as a Robin Hood Hash.
ba629fa60 Re-implement MVMPtrHashTable as a Robin Hood Hash.
fd12897b7 Re-implement MVMIndexHashTable as a Robin Hood Hash.
542847255 Refactor MVM_uni_hash_insert in terms of MVM_uni_hash_lvalue_fetch.
53e1fe9c6 Re-implement MVMUniHashTable as a Robin Hood Hash.
9507a098f Convert loaded_compunits from a MVMStrHashTable to a MVMFixKeyHashTable.
778eb8762 Add MVM_string_hash_code, which encapsulates access to the string's hash code.
232260ace Add container_registry's keys in MVM_gc_root_add_instance_roots_to_worklist.
3c8dae717 Remove all of the UT hash functional macros (and most of uthash.h)
c5c67562a Migrate the other internal Unicode hashes to MVMUniHashTable.
3a53f7466 Add MVMUniHashTable, and use it to re-implement codepoints_by_name.
4ff5785a1 Delete more now-unused MVM_HASH macros and inline functions.
a5d58f8a0 Convert `seen` in MVMHeapSnapshotState to MVMPtrHashTable.
141779cb5 Add MVMPtrHashTable, for hashes mapping a pointer to a pointer-sized integer.
5de3c4ddb Eliminate the last two uses of the macro MVM_HASH_KEY
    db62b91e1 Printing the pointer address of the MVMString isn't adding anything.
f287d8927 Convert repr_hash to MVMIndexHashTable, repr_list to repr_names & repr_vtables
3f8a8e5c0 Add MVMIndexHashTable, for hash lookups into an array of MVMString*.
b7665665a Re-order the representations registry into ID order.
c38beb9e8 Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
17a8a99d3 Replace MVM_str_hash_unbind with MVM_str_hash_delete
263ea58d3 Use MVM_str_hash_lvalue_fetch instead of a fetch/bind pair.
    bafd06faf Comments clarifying why each oops call added makes valid assumptions.
90eb6992c XXX has XXXes to remove. Please could @jnthn check my assumptions?
cff7a0cda Converge the implementations of MVMHash and HashAttrStore
2bf3a4e2b Move code from interp.c to MVMiter.h to avoid breaking encapsulation.

I have not rebased it. Commits are only reordered, or have their commit message changed. No commit contents have changed.
@jnthn - I believe that A-better-hash is ready to merge.","As implemented, zeroing out the memory (or starting with zeroed memory) and then calling other hash functions (without/before) calling MVM_str_hash_build first will, um, go horribly wrong

Presumably MVM_str_hash_entry_size an exception to this statement, given you're calling it immediately before MVM_str_hash_build?

Yes. Missed that. It's even documented that it's safe:
/* If this returns 0, then you have not yet called MVM_str_hash_build */
But I think that I should add an oops to the initial_alloc code so that if size isn't set, it goes oops instead of multiplying by zero, attempting to allocate zero, and then likely panicing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1337,2020-08-13T09:34:01Z,2020-08-31T12:23:01Z,2020-09-01T16:53:46Z,CLOSED,False,3439,2216,80,https://github.com/nwc10,A better hash,65,[],https://github.com/MoarVM/MoarVM/pull/1337,https://github.com/jnthn,7,https://github.com/MoarVM/MoarVM/pull/1337#issuecomment-683745681,"This fixes all the known bugs detailed in #1334
There is still this specific commit that needs checking and then editing
commit 90eb6992c03755f533b331abe810b67974068dfc
Author: Nicholas Clark <nick@ccl4.org>
Date:   Wed Jun 3 18:09:32 2020 +0000

    XXX has XXXes to remove. Please could @jnthn check my assumptions?

    Convert MVMHash and HashAttrStoreHashAttrStore to MVMStrHashTable.

    The MVMStrHashTable struct can be stored directly in the object body - we
    no longer need another layer of indirection.

    Add MVM_str_hash_count to return the count of items in the hash.
    Add MVM_str_hash_end to return an iterator for which MVM_str_hash_at_end
    is immediately true.

    For debugging iterators, given that the hashtable structure is now public,
    and can be embedded in other structures, we can't use it as the debugging
    ID. [The GC likes to move things! :-)]

    Hence use a 64 bit random number as the debugging ID. This necessitates moving
    the headers with the relevant function prototypes earlier.

Apart from that, I think that it is good to merge, but previous review by me, @dogbert17 and @coke found subtle bugs, so there might still be some hiding.
Edit:
The branch A-better-hash is byte-for-byte identical to AAAA-A-better-hash.
It has

One commit pushed after @jnthn's last commit, which adds two oopses (that would otherwise be panics)
The commit with XXX rewritten to remove the XXX
One other commit message edited to fix some text
Three of the code review commits re-ordered to be immediately after the commit that they referred to.

Specifically, the section from my git log --oneline file that I used to plan the re-order; the moved commits are indented:
480f09cf1 Eliminate uthash. It served us well, and earned a happy retirement.
f8b7defb7 Hash randomisation for MVMStrHashTable.
33edf845d MVM_str_hash_fsck.
    24c86e6ff Fix a typo. In five places.
7c65ae56b Hash iterators now run in ""reverse"", from the largest index down to 0.
e954e6f76 Re-implement MVMStrHashTable as a Robin Hood Hash.
7bb6a9276 The JIT template for MVM_OP_sp_boolify_iter_hash will no longer work.
889d61d04 Revert ""Spesh and JIT get(cur)?hllsym""
4a1c16fe1 Re-implement MVMFixKeyHashTable as a Robin Hood Hash.
ba629fa60 Re-implement MVMPtrHashTable as a Robin Hood Hash.
fd12897b7 Re-implement MVMIndexHashTable as a Robin Hood Hash.
542847255 Refactor MVM_uni_hash_insert in terms of MVM_uni_hash_lvalue_fetch.
53e1fe9c6 Re-implement MVMUniHashTable as a Robin Hood Hash.
9507a098f Convert loaded_compunits from a MVMStrHashTable to a MVMFixKeyHashTable.
778eb8762 Add MVM_string_hash_code, which encapsulates access to the string's hash code.
232260ace Add container_registry's keys in MVM_gc_root_add_instance_roots_to_worklist.
3c8dae717 Remove all of the UT hash functional macros (and most of uthash.h)
c5c67562a Migrate the other internal Unicode hashes to MVMUniHashTable.
3a53f7466 Add MVMUniHashTable, and use it to re-implement codepoints_by_name.
4ff5785a1 Delete more now-unused MVM_HASH macros and inline functions.
a5d58f8a0 Convert `seen` in MVMHeapSnapshotState to MVMPtrHashTable.
141779cb5 Add MVMPtrHashTable, for hashes mapping a pointer to a pointer-sized integer.
5de3c4ddb Eliminate the last two uses of the macro MVM_HASH_KEY
    db62b91e1 Printing the pointer address of the MVMString isn't adding anything.
f287d8927 Convert repr_hash to MVMIndexHashTable, repr_list to repr_names & repr_vtables
3f8a8e5c0 Add MVMIndexHashTable, for hash lookups into an array of MVMString*.
b7665665a Re-order the representations registry into ID order.
c38beb9e8 Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
17a8a99d3 Replace MVM_str_hash_unbind with MVM_str_hash_delete
263ea58d3 Use MVM_str_hash_lvalue_fetch instead of a fetch/bind pair.
    bafd06faf Comments clarifying why each oops call added makes valid assumptions.
90eb6992c XXX has XXXes to remove. Please could @jnthn check my assumptions?
cff7a0cda Converge the implementations of MVMHash and HashAttrStore
2bf3a4e2b Move code from interp.c to MVMiter.h to avoid breaking encapsulation.

I have not rebased it. Commits are only reordered, or have their commit message changed. No commit contents have changed.
@jnthn - I believe that A-better-hash is ready to merge.","Merged branch A-better-hash as 51d399c, effectively merging this PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1338,2020-08-22T14:18:44Z,2020-08-22T14:22:47Z,2020-08-22T14:22:52Z,MERGED,True,21,1,2,https://github.com/Altai-man,2020.08,2,[],https://github.com/MoarVM/MoarVM/pull/1338,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1338,"2020.08 release, from 393ae57 to 03d3e43","2020.08 release, from 393ae57 to 03d3e43",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1339,2020-08-25T14:22:19Z,2020-08-25T21:10:09Z,2020-08-25T21:10:09Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update libuv to v1.39.0,1,[],https://github.com/MoarVM/MoarVM/pull/1339,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1339,Spectest clean under Linux Mint (Ulyana) 64-bit,Spectest clean under Linux Mint (Ulyana) 64-bit,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1340,2020-08-27T20:34:13Z,2020-08-30T09:22:15Z,2020-08-30T10:10:58Z,MERGED,True,47,5,4,https://github.com/timo,"make moar --dump use memmem to find ""MOARVM\r\n"" string",4,[],https://github.com/MoarVM/MoarVM/pull/1340,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/1340,"this is the magic marker that starts a moarvm bytecode file.
precomp folders have a bit of information prepended to the
moar bytecode files, and having to manually cut it off can
be tedious. Since moar --dump is a user-facing and debugging
feature, it should be fine to have it do a skipping or
searching step first.
making this a pull request because i want an opinion on whether it's fine to turn the MVM_memmem function into a define.","this is the magic marker that starts a moarvm bytecode file.
precomp folders have a bit of information prepended to the
moar bytecode files, and having to manually cut it off can
be tedious. Since moar --dump is a user-facing and debugging
feature, it should be fine to have it do a skipping or
searching step first.
making this a pull request because i want an opinion on whether it's fine to turn the MVM_memmem function into a define.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1340,2020-08-27T20:34:13Z,2020-08-30T09:22:15Z,2020-08-30T10:10:58Z,MERGED,True,47,5,4,https://github.com/timo,"make moar --dump use memmem to find ""MOARVM\r\n"" string",4,[],https://github.com/MoarVM/MoarVM/pull/1340,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1340#issuecomment-682190784,"this is the magic marker that starts a moarvm bytecode file.
precomp folders have a bit of information prepended to the
moar bytecode files, and having to manually cut it off can
be tedious. Since moar --dump is a user-facing and debugging
feature, it should be fine to have it do a skipping or
searching step first.
making this a pull request because i want an opinion on whether it's fine to turn the MVM_memmem function into a define.",This is very useful. 👍,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1341,2020-08-28T08:39:31Z,2020-09-22T12:24:44Z,2020-09-22T12:25:43Z,MERGED,True,54,31,1,https://github.com/patrickbkr,Fix MVM_file_isexecutable() when being root,2,[],https://github.com/MoarVM/MoarVM/pull/1341,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1341,"Different from the readability and writeability tests, executability is not
affected by the user being root. As long as the x flag isn't set, not
even root can execute a file.
Fixes Raku/nqp#652
I'm unsure how one could write a test for this fix. It requires root access to test the behaviour. Any ideas?","Different from the readability and writeability tests, executability is not
affected by the user being root. As long as the x flag isn't set, not
even root can execute a file.
Fixes Raku/nqp#652
I'm unsure how one could write a test for this fix. It requires root access to test the behaviour. Any ideas?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1341,2020-08-28T08:39:31Z,2020-09-22T12:24:44Z,2020-09-22T12:25:43Z,MERGED,True,54,31,1,https://github.com/patrickbkr,Fix MVM_file_isexecutable() when being root,2,[],https://github.com/MoarVM/MoarVM/pull/1341,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1341#issuecomment-692672141,"Different from the readability and writeability tests, executability is not
affected by the user being root. As long as the x flag isn't set, not
even root can execute a file.
Fixes Raku/nqp#652
I'm unsure how one could write a test for this fix. It requires root access to test the behaviour. Any ideas?","I have written a small test script that tests the following scenarios against the expected results:

Raku via  .IO.r/w/x
Raku by actually trying via .slurp, .spurt, run
Python via os.access()
Python by actually trying via .read(), .write(), subprocess.call()

All four giving consistent results in all of the 36 permission combinations I was able to come up with (user/group/other, user/root, can/can't access, read/write/execute).
The exception being: If the program we are trying to execute is a script (in contrast to a native executable), the r permission is needed in addition to the x permission to execute it. Neither Raku, nor Python (basically POSIX access()) catch that.
I'm not sure if and where these tests could be integrated into a test suite. They do rely on being able to become the root user.
Any opinions?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1341,2020-08-28T08:39:31Z,2020-09-22T12:24:44Z,2020-09-22T12:25:43Z,MERGED,True,54,31,1,https://github.com/patrickbkr,Fix MVM_file_isexecutable() when being root,2,[],https://github.com/MoarVM/MoarVM/pull/1341,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1341#issuecomment-696686837,"Different from the readability and writeability tests, executability is not
affected by the user being root. As long as the x flag isn't set, not
even root can execute a file.
Fixes Raku/nqp#652
I'm unsure how one could write a test for this fix. It requires root access to test the behaviour. Any ideas?","I'm not sure if and where these tests could be integrated into a test suite. They do rely on being able to become the root user.

Tricky; do any of our CI environments allow for that?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1341,2020-08-28T08:39:31Z,2020-09-22T12:24:44Z,2020-09-22T12:25:43Z,MERGED,True,54,31,1,https://github.com/patrickbkr,Fix MVM_file_isexecutable() when being root,2,[],https://github.com/MoarVM/MoarVM/pull/1341,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/1341#issuecomment-696687313,"Different from the readability and writeability tests, executability is not
affected by the user being root. As long as the x flag isn't set, not
even root can execute a file.
Fixes Raku/nqp#652
I'm unsure how one could write a test for this fix. It requires root access to test the behaviour. Any ideas?","Thanks for the improvements; merged. If wanting to do the minor perf improvement, feel free to submit it as a follow-up PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1342,2020-09-03T13:16:43Z,2020-09-03T16:04:18Z,2020-09-03T16:04:28Z,MERGED,True,118,78,9,https://github.com/nwc10,Hash start,4,[],https://github.com/MoarVM/MoarVM/pull/1342,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1342,Refactoring the iteration code to be tighter,Refactoring the iteration code to be tighter,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1343,2020-09-07T14:42:19Z,2020-09-22T12:39:34Z,2020-09-22T12:39:51Z,MERGED,True,46,13,6,https://github.com/nwc10,sparc64 support,2,[],https://github.com/MoarVM/MoarVM/pull/1343,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1343,"With this MoarVM, NQP and Rakudo build on sparc64.
Rakudo fails t/04-nativecall/06-struct with a SIGBUS, and t/04-nativecall/02-simple-args.t with the same failure as PowerPC (have not yet investigated whether this is a big endian ""issue"", bad assumptions about char being signed always, or something else)
Some spectests fail:
t/spec/S02-types/native.rakudo.moar                             (Wstat: 768 Tests: 95 Failed: 3)
  Failed tests:  75, 79, 83
  Non-zero exit status: 3
t/spec/S02-types/int-uint.rakudo.moar                           (Wstat: 3072 Tests: 103 Failed: 12)
  Failed tests:  45, 48, 54, 56, 59, 65, 67, 70, 76, 89
                92, 98
  Non-zero exit status: 12
t/spec/S12-construction/BUILD.rakudo.moar                       (Wstat: 256 Tests: 7 Failed: 0)
  Non-zero exit status: 1
  Parse errors: Bad plan.  You planned 12 tests but ran 7.
t/spec/S09-typed-arrays/native-int.rakudo.moar                  (Wstat: 768 Tests: 1363 Failed: 3)
  Failed tests:  907, 1076, 1245
  Non-zero exit status: 3
t/spec/S32-io/utf16.t                                           (Wstat: 1536 Tests: 39 Failed: 6)
  Failed tests:  2, 13-15, 28, 32
  Non-zero exit status: 6
t/spec/integration/weird-errors.rakudo.moar                     (Wstat: 256 Tests: 35 Failed: 1)
  Failed test:  15
  Non-zero exit status: 1

These are the same as the tests that fail on pp64, other than t/spec/integration/weird-errors.rakudo.moar
Test 15 is sorting method list does not segfault
It doesn't SEGV, but it produces a lot of unexpected output:
not ok 15 - sorting method list does not segfault
# Failed test 'sorting method list does not segfault'
# at /home/nick/Perl/rakudo/t/spec/packages/Test-Helpers/lib/Test/Util.pm6 (Test::Util) line 163
#      got err: ""Method object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\n

etc etc
I have not yet investigated this.
sparc32 passes but not out of the box. If I build with -m32 then both nativecall and libtomath assume that it's still a 64 bit sparc platform (v9), and screw up. If I hack them to take their sparc v8 code choices then everything works. If I force things with -mcpu=v8 then they both work, but the gcc builtins for atomic operations break - libgcc_s is missing some support functions. I'm not sure where the blame is here. clang is even worse - if told to build -m32 then it immediately reports itself as __sparc_v8 but also tries to build with 8-byte long doubles (they should be 16), fails to link, and fails to even compile if I turn the optimiser on. (header file errors - WTF‽). There will be some bug reports once I figure out how many bugs there really are here. I can't be the first person to have hit any of these.
But I think that this branch (all 2 commits of it) is good, and might even buy us some more platforms if they are exacting about memory alignment.","With this MoarVM, NQP and Rakudo build on sparc64.
Rakudo fails t/04-nativecall/06-struct with a SIGBUS, and t/04-nativecall/02-simple-args.t with the same failure as PowerPC (have not yet investigated whether this is a big endian ""issue"", bad assumptions about char being signed always, or something else)
Some spectests fail:
t/spec/S02-types/native.rakudo.moar                             (Wstat: 768 Tests: 95 Failed: 3)
  Failed tests:  75, 79, 83
  Non-zero exit status: 3
t/spec/S02-types/int-uint.rakudo.moar                           (Wstat: 3072 Tests: 103 Failed: 12)
  Failed tests:  45, 48, 54, 56, 59, 65, 67, 70, 76, 89
                92, 98
  Non-zero exit status: 12
t/spec/S12-construction/BUILD.rakudo.moar                       (Wstat: 256 Tests: 7 Failed: 0)
  Non-zero exit status: 1
  Parse errors: Bad plan.  You planned 12 tests but ran 7.
t/spec/S09-typed-arrays/native-int.rakudo.moar                  (Wstat: 768 Tests: 1363 Failed: 3)
  Failed tests:  907, 1076, 1245
  Non-zero exit status: 3
t/spec/S32-io/utf16.t                                           (Wstat: 1536 Tests: 39 Failed: 6)
  Failed tests:  2, 13-15, 28, 32
  Non-zero exit status: 6
t/spec/integration/weird-errors.rakudo.moar                     (Wstat: 256 Tests: 35 Failed: 1)
  Failed test:  15
  Non-zero exit status: 1

These are the same as the tests that fail on pp64, other than t/spec/integration/weird-errors.rakudo.moar
Test 15 is sorting method list does not segfault
It doesn't SEGV, but it produces a lot of unexpected output:
not ok 15 - sorting method list does not segfault
# Failed test 'sorting method list does not segfault'
# at /home/nick/Perl/rakudo/t/spec/packages/Test-Helpers/lib/Test/Util.pm6 (Test::Util) line 163
#      got err: ""Method object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\n

etc etc
I have not yet investigated this.
sparc32 passes but not out of the box. If I build with -m32 then both nativecall and libtomath assume that it's still a 64 bit sparc platform (v9), and screw up. If I hack them to take their sparc v8 code choices then everything works. If I force things with -mcpu=v8 then they both work, but the gcc builtins for atomic operations break - libgcc_s is missing some support functions. I'm not sure where the blame is here. clang is even worse - if told to build -m32 then it immediately reports itself as __sparc_v8 but also tries to build with 8-byte long doubles (they should be 16), fails to link, and fails to even compile if I turn the optimiser on. (header file errors - WTF‽). There will be some bug reports once I figure out how many bugs there really are here. I can't be the first person to have hit any of these.
But I think that this branch (all 2 commits of it) is good, and might even buy us some more platforms if they are exacting about memory alignment.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1343,2020-09-07T14:42:19Z,2020-09-22T12:39:34Z,2020-09-22T12:39:51Z,MERGED,True,46,13,6,https://github.com/nwc10,sparc64 support,2,[],https://github.com/MoarVM/MoarVM/pull/1343,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1343#issuecomment-688469623,"With this MoarVM, NQP and Rakudo build on sparc64.
Rakudo fails t/04-nativecall/06-struct with a SIGBUS, and t/04-nativecall/02-simple-args.t with the same failure as PowerPC (have not yet investigated whether this is a big endian ""issue"", bad assumptions about char being signed always, or something else)
Some spectests fail:
t/spec/S02-types/native.rakudo.moar                             (Wstat: 768 Tests: 95 Failed: 3)
  Failed tests:  75, 79, 83
  Non-zero exit status: 3
t/spec/S02-types/int-uint.rakudo.moar                           (Wstat: 3072 Tests: 103 Failed: 12)
  Failed tests:  45, 48, 54, 56, 59, 65, 67, 70, 76, 89
                92, 98
  Non-zero exit status: 12
t/spec/S12-construction/BUILD.rakudo.moar                       (Wstat: 256 Tests: 7 Failed: 0)
  Non-zero exit status: 1
  Parse errors: Bad plan.  You planned 12 tests but ran 7.
t/spec/S09-typed-arrays/native-int.rakudo.moar                  (Wstat: 768 Tests: 1363 Failed: 3)
  Failed tests:  907, 1076, 1245
  Non-zero exit status: 3
t/spec/S32-io/utf16.t                                           (Wstat: 1536 Tests: 39 Failed: 6)
  Failed tests:  2, 13-15, 28, 32
  Non-zero exit status: 6
t/spec/integration/weird-errors.rakudo.moar                     (Wstat: 256 Tests: 35 Failed: 1)
  Failed test:  15
  Non-zero exit status: 1

These are the same as the tests that fail on pp64, other than t/spec/integration/weird-errors.rakudo.moar
Test 15 is sorting method list does not segfault
It doesn't SEGV, but it produces a lot of unexpected output:
not ok 15 - sorting method list does not segfault
# Failed test 'sorting method list does not segfault'
# at /home/nick/Perl/rakudo/t/spec/packages/Test-Helpers/lib/Test/Util.pm6 (Test::Util) line 163
#      got err: ""Method object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\n

etc etc
I have not yet investigated this.
sparc32 passes but not out of the box. If I build with -m32 then both nativecall and libtomath assume that it's still a 64 bit sparc platform (v9), and screw up. If I hack them to take their sparc v8 code choices then everything works. If I force things with -mcpu=v8 then they both work, but the gcc builtins for atomic operations break - libgcc_s is missing some support functions. I'm not sure where the blame is here. clang is even worse - if told to build -m32 then it immediately reports itself as __sparc_v8 but also tries to build with 8-byte long doubles (they should be 16), fails to link, and fails to even compile if I turn the optimiser on. (header file errors - WTF‽). There will be some bug reports once I figure out how many bugs there really are here. I can't be the first person to have hit any of these.
But I think that this branch (all 2 commits of it) is good, and might even buy us some more platforms if they are exacting about memory alignment.","@nwc10 re ""not ok 15 - sorting method list does not segfault""  This test has recently been adapted to match new behaviour of Code cmp Code.  Seeing that stray output probably means your rakudo is not up-to-date.  Could that be the case?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1343,2020-09-07T14:42:19Z,2020-09-22T12:39:34Z,2020-09-22T12:39:51Z,MERGED,True,46,13,6,https://github.com/nwc10,sparc64 support,2,[],https://github.com/MoarVM/MoarVM/pull/1343,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1343#issuecomment-688491143,"With this MoarVM, NQP and Rakudo build on sparc64.
Rakudo fails t/04-nativecall/06-struct with a SIGBUS, and t/04-nativecall/02-simple-args.t with the same failure as PowerPC (have not yet investigated whether this is a big endian ""issue"", bad assumptions about char being signed always, or something else)
Some spectests fail:
t/spec/S02-types/native.rakudo.moar                             (Wstat: 768 Tests: 95 Failed: 3)
  Failed tests:  75, 79, 83
  Non-zero exit status: 3
t/spec/S02-types/int-uint.rakudo.moar                           (Wstat: 3072 Tests: 103 Failed: 12)
  Failed tests:  45, 48, 54, 56, 59, 65, 67, 70, 76, 89
                92, 98
  Non-zero exit status: 12
t/spec/S12-construction/BUILD.rakudo.moar                       (Wstat: 256 Tests: 7 Failed: 0)
  Non-zero exit status: 1
  Parse errors: Bad plan.  You planned 12 tests but ran 7.
t/spec/S09-typed-arrays/native-int.rakudo.moar                  (Wstat: 768 Tests: 1363 Failed: 3)
  Failed tests:  907, 1076, 1245
  Non-zero exit status: 3
t/spec/S32-io/utf16.t                                           (Wstat: 1536 Tests: 39 Failed: 6)
  Failed tests:  2, 13-15, 28, 32
  Non-zero exit status: 6
t/spec/integration/weird-errors.rakudo.moar                     (Wstat: 256 Tests: 35 Failed: 1)
  Failed test:  15
  Non-zero exit status: 1

These are the same as the tests that fail on pp64, other than t/spec/integration/weird-errors.rakudo.moar
Test 15 is sorting method list does not segfault
It doesn't SEGV, but it produces a lot of unexpected output:
not ok 15 - sorting method list does not segfault
# Failed test 'sorting method list does not segfault'
# at /home/nick/Perl/rakudo/t/spec/packages/Test-Helpers/lib/Test/Util.pm6 (Test::Util) line 163
#      got err: ""Method object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\nMethod object coerced to string (please use .gist or .raku to do that)\n  in block <unit> at /tmp/getout-3348851-415020.code line 1\n

etc etc
I have not yet investigated this.
sparc32 passes but not out of the box. If I build with -m32 then both nativecall and libtomath assume that it's still a 64 bit sparc platform (v9), and screw up. If I hack them to take their sparc v8 code choices then everything works. If I force things with -mcpu=v8 then they both work, but the gcc builtins for atomic operations break - libgcc_s is missing some support functions. I'm not sure where the blame is here. clang is even worse - if told to build -m32 then it immediately reports itself as __sparc_v8 but also tries to build with 8-byte long doubles (they should be 16), fails to link, and fails to even compile if I turn the optimiser on. (header file errors - WTF‽). There will be some bug reports once I figure out how many bugs there really are here. I can't be the first person to have hit any of these.
But I think that this branch (all 2 commits of it) is good, and might even buy us some more platforms if they are exacting about memory alignment.","@nwc10 re ""not ok 15 - sorting method list does not segfault"" This test has recently been adapted to match new behaviour of Code cmp Code. Seeing that stray output probably means your rakudo is not up-to-date. Could that be the case?

Oops, yes. That checkout wasn't up-to-date. The others were. There are quite a lot. (in this case, sparc32, sparc64, ppc32 and ppc64). Now I'm up-to-date that test doesn't fail. Sorry for the noise - thanks for the correct diagnosis.",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1344,2020-09-07T22:50:40Z,2021-02-01T19:58:08Z,2021-02-01T19:58:09Z,MERGED,True,608,511,31,https://github.com/MasterDuke17,Convert MVMSpeshCandidate to a REPR,1,[],https://github.com/MoarVM/MoarVM/pull/1344,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1344,"This will allow them to be safely removed if desired (e.g., there were too many deopts for a candidate).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","This will allow them to be safely removed if desired (e.g., there were too many deopts for a candidate).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1344,2020-09-07T22:50:40Z,2021-02-01T19:58:08Z,2021-02-01T19:58:09Z,MERGED,True,608,511,31,https://github.com/MasterDuke17,Convert MVMSpeshCandidate to a REPR,1,[],https://github.com/MoarVM/MoarVM/pull/1344,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1344#issuecomment-770363383,"This will allow them to be safely removed if desired (e.g., there were too many deopts for a candidate).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",@jnthn what are your thoughts re squashing all/some of the commits before merging vs leaving them in?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1344,2020-09-07T22:50:40Z,2021-02-01T19:58:08Z,2021-02-01T19:58:09Z,MERGED,True,608,511,31,https://github.com/MasterDuke17,Convert MVMSpeshCandidate to a REPR,1,[],https://github.com/MoarVM/MoarVM/pull/1344,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1344#issuecomment-770364306,"This will allow them to be safely removed if desired (e.g., there were too many deopts for a candidate).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I'd be all for squashing commits. Even for the review I quickly switched to the consolidated diff, as there's no point reading code and (in best case) spotting bugs, just to see that the bugs were fixed in a later commit anyway. In general the commit history should reflect the shortest way from the previous to the new code in atomic steps. I.e. each commit should have merit on its own,  be as small as possible, be buildable and - except for extreme cases - also runnable (to facilitate bisection).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1344,2020-09-07T22:50:40Z,2021-02-01T19:58:08Z,2021-02-01T19:58:09Z,MERGED,True,608,511,31,https://github.com/MasterDuke17,Convert MVMSpeshCandidate to a REPR,1,[],https://github.com/MoarVM/MoarVM/pull/1344,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1344#issuecomment-770372900,"This will allow them to be safely removed if desired (e.g., there were too many deopts for a candidate).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","In general the commit history should reflect the shortest way from the previous to the new code in atomic steps. I.e. each commit should have merit on its own, be as small as possible, be buildable and - except for extreme cases - also runnable (to facilitate bisection).

In theory all my commits are exactly like this...In practice...
Yes, I'm in favor of squashing the commits in this PR. It is a little annoying to lose some of the messages associated with some of the individual changes. They don't make as much sense as comments in the code, and it's harder to point out exactly which smaller, non-atomic change is being referred to in a large commit message. It would be nice if there was some way to attach a message to parts of the diff of a commit.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1346,2020-09-16T13:52:45Z,2020-09-21T13:39:43Z,2020-09-21T13:39:52Z,MERGED,True,75,28,8,https://github.com/jnthn,Better specialize boolification of boxed Num,1,[],https://github.com/MoarVM/MoarVM/pull/1346,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1346,"Previously this wasn't specialized at all, and so fell back on the
late-bound istrue instruction. Now it optimizes into an unbox and a
truth test on the unboxed float, which in turn can be JIT-compiled into
a relatively short sequence of instructions.","Previously this wasn't specialized at all, and so fell back on the
late-bound istrue instruction. Now it optimizes into an unbox and a
truth test on the unboxed float, which in turn can be JIT-compiled into
a relatively short sequence of instructions.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1347,2020-09-17T20:47:31Z,2020-09-22T12:34:52Z,2020-09-22T12:35:02Z,MERGED,True,2,2,2,https://github.com/nwc10,copy_to should call MVM_gc_write_barrier with the *new* key's address.,1,[],https://github.com/MoarVM/MoarVM/pull/1347,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1347,"This is a regression introduced since the last release by commit 9d0f1b3:
Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
(I think. Please can someone double check this)","This is a regression introduced since the last release by commit 9d0f1b3:
Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
(I think. Please can someone double check this)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1347,2020-09-17T20:47:31Z,2020-09-22T12:34:52Z,2020-09-22T12:35:02Z,MERGED,True,2,2,2,https://github.com/nwc10,copy_to should call MVM_gc_write_barrier with the *new* key's address.,1,[],https://github.com/MoarVM/MoarVM/pull/1347,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1347#issuecomment-694665624,"This is a regression introduced since the last release by commit 9d0f1b3:
Replace MVM_str_hash_bind_nt with MVM_str_hash_insert_nt.
(I think. Please can someone double check this)","After some sleep, I realise that this isn't as bad as I thought it is.
Specifically, I'm confusing values with addresses. The GC's *root macros take the address of the C variable, and manipulate that. Whereas the write barrier code is using the value from the C variable and ""taking action"" based on that. It becomes clearer when you look at what it is doing - inspecting and maybe updating the flags on the MVMCollectable that the value points to. And the hash code here is copying a pointer from source hash to destination hash - the same value - the address of the same MVMCollectable. So it can't matter.
(This week)
It's a style issue.
(Until/unless someone changes the hash code to copy keys. Which seems unlikely)
Still, please could someone else check.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1349,2020-09-21T16:00:14Z,2020-09-29T13:56:55Z,2020-09-29T13:56:56Z,CLOSED,False,6,0,1,https://github.com/nwc10,oops if MVM_fixed_size_alloc() is called for a size of 0 bytes.,1,[],https://github.com/MoarVM/MoarVM/pull/1349,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1349,"Previously this wasn't trapped. With FSA_SIZE_DEBUG enabled (not the default)
everything works (it can allocate ""0"" bytes, as it adds its debugging record
keeping to the size requested). With default settings, we corrupt the malloc
heap, which doesn't get reported at the time, and may or may not get reported
in any useful way later.","Previously this wasn't trapped. With FSA_SIZE_DEBUG enabled (not the default)
everything works (it can allocate ""0"" bytes, as it adds its debugging record
keeping to the size requested). With default settings, we corrupt the malloc
heap, which doesn't get reported at the time, and may or may not get reported
in any useful way later.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1349,2020-09-21T16:00:14Z,2020-09-29T13:56:55Z,2020-09-29T13:56:56Z,CLOSED,False,6,0,1,https://github.com/nwc10,oops if MVM_fixed_size_alloc() is called for a size of 0 bytes.,1,[],https://github.com/MoarVM/MoarVM/pull/1349,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1349#issuecomment-696253527,"Previously this wasn't trapped. With FSA_SIZE_DEBUG enabled (not the default)
everything works (it can allocate ""0"" bytes, as it adds its debugging record
keeping to the size requested). With default settings, we corrupt the malloc
heap, which doesn't get reported at the time, and may or may not get reported
in any useful way later.",rebased.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1350,2020-09-21T18:29:13Z,2020-11-28T14:07:15Z,2020-11-28T14:07:16Z,CLOSED,False,1014,673,29,https://github.com/nwc10,Hash allocation as a single memory block,18,[],https://github.com/MoarVM/MoarVM/pull/1350,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1350,"shallow_copy is malloc memcpy and fix up GC invariants (if needed)
eliminates the need for ""pointer to a hash table"" in 3 cases, because an empty hash table is now just a pointer
I can't actually spot this to be faster in benchmarks

We could change this single allocation to be from the FSA instead of malloc. I've not investigated this. I think that for the first 2 sizes of hashes it would fit into the FSA buckets.
Also, I've not looked at ""free at safepoint"", because I'm not sure how problems with 2+ VM threads doing ""naughty things"" pans out, or whether making this change would really help that much. But with this branch we would be in a position where that sort of things is much easier.
Rebased onto master, some whitespace cleanup, and added commit e7375da at a logical place in the sequence of refactorings.
I think that this is ready for review, and if good, master.","shallow_copy is malloc memcpy and fix up GC invariants (if needed)
eliminates the need for ""pointer to a hash table"" in 3 cases, because an empty hash table is now just a pointer
I can't actually spot this to be faster in benchmarks

We could change this single allocation to be from the FSA instead of malloc. I've not investigated this. I think that for the first 2 sizes of hashes it would fit into the FSA buckets.
Also, I've not looked at ""free at safepoint"", because I'm not sure how problems with 2+ VM threads doing ""naughty things"" pans out, or whether making this change would really help that much. But with this branch we would be in a position where that sort of things is much easier.
Rebased onto master, some whitespace cleanup, and added commit e7375da at a logical place in the sequence of refactorings.
I think that this is ready for review, and if good, master.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1352,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.",True,"{'THUMBS_UP': ['https://github.com/zhuomingliang', 'https://github.com/AlexDaniel', 'https://github.com/lizmat']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-697490690,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","Maybe we can plan a switch to GMP for the future?

I'm not aware of any technical or licensing impossibility, but it would likely be a lot of grunt work.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-697537966,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","15:02 | jnthn | MasterDuke:  We ended up with libtommath partly out of license concerns (although  LGPL is probably OK; I always forget exactly what it enforces), but in a  bigger part because of libtommath being far easier to build across  platforms.
15:03 | jnthn | MasterDuke: Of note, stock gmp doesn't build on the MSVC compiler.
15:03 | jnthn | There is these days a fork that does: http://mpir.org/",True,{'LAUGH': ['https://github.com/AlexDaniel']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/AlexDaniel,4,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-698062973,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","In other words there wasn't any strong justification, more like an arranged marriage and we just ended up with libtommath.
Just to get a feel of both, I wrote these two programs:
#include <gmp.h>
#include <stdio.h>

mpz_t number1;
mpz_t number2;

int main() {
    mpz_init_set_ui(number1, 0);
    mpz_init_set_ui(number2, 1);

    for (size_t i = 0; i < 10000000; i++) {
        mpz_add(number1, number1, number2);
    }

    printf(""heh %lu\n"", mpz_get_ui(number1));
    printf(""heh %lu\n"", mpz_get_ui(number2));

    return 0;
}
#include <tommath.h>
#include <stdio.h>

mp_int number1;
mp_int number2;

int main() {
    if (mp_init_ul(&number1, 0) != MP_OKAY)
        printf(""whoopsie!"");

    if (mp_init_ul(&number2, 1) != MP_OKAY)
        printf(""whoopsie!"");

    for (size_t i = 0; i < 10000000; i++) {
        if (mp_add(&number1, &number2, &number1) != MP_OKAY)
            printf(""whoopsie!"");
    }

    printf(""heh %u\n"", mp_get_u32(&number1));
    printf(""heh %u\n"", mp_get_u32(&number2));

    return 0;
}
Basically, just init two bigints to 0 and 1, and then keep adding the second one to the first one 10_000_000 times. Nothing exciting, but here are the timings:
GMP
heh 100000000
heh 1

real	0m0.984s
user	0m0.981s
sys	0m0.001s

LibTomMath
heh 100000000
heh 1

real	0m1.331s
user	0m1.330s
sys	0m0.001s

The error checking with libtommath is required with -Werror, but I also tried without it and saw no difference in timings.
I do not know what to think of this, microbenchmarks are kinda nasty. I also know neither of these libraries well enough, maybe the code is wrong. But if basic bigint arithmetic is 1.35x as fast with GMP, then the grunt work may as well be justified.
Also, I think GMP supports rational numbers? Mmmm.",True,{'THUMBS_DOWN': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/lizmat,5,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-698218793,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","In other words there wasn't any strong justification

Again, this remark is not needed and unnecessarily abrasive (again).  If you read the conversation a bit further on IRC, you'd see that @jnthn was working on Windows at the time, using the MSVC compiler.  Not being supported on the compiler that you're using, would be an excellent reason for not selecting that library.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/jnthn,6,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-698410467,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","In other words there wasn't any strong justification, more like an arranged marriage and we just ended up with libtommath.

@AlexDaniel Not building on a major platform / toolchain - especially when it was, at the time, the primary development toolchain of the MoarVM founders - seems strong enough as a reason to pick an alternative that did satisfy that constraint. It's not like it committed MoarVM to always use it, if the situation changed (as it seems to now have done so).
As @lizmat points out, your remark was also unnecessarily abrasive and unconstructive. I've had quite enough of behaviors like:

Painting anybody who made a decision differently than you imagine you would have under the same constraints as doing things without thought
Using terms like ""naysayer"" to describe people who present valid concerns about something you'd like to see happen
Using loaded or offensive language, both on IRC and in issues
Disrespectfully dismissing points put forward by others with responses like ""this is not about having great debating skills""

Which have sucked much of the joy out of contributing to Raku for a number of people by this point. For now, you continue to get away with this behavior in a Raku context, and ultimately it shall be for the Raku Steering Council to decide if it wishes to continue to entertain it.
So far as MoarVM goes, it's my call to make. Please refrain from such behavior; a further instance in the context of MoarVM development shall be grounds for banning you from this project.",True,"{'THUMBS_UP': ['https://github.com/lizmat', 'https://github.com/JJ']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/AlexDaniel,7,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-698467467,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","@jnthn I am for honest and direct language that doesn't mislead readers and in fact calls for action to change the situation. The idea of picking a specific library for the project just because you used MSVC at the time isn't a good justification, and there is no need to double down. Raku project is riddled with decisions that were seemingly random at the time but are now extremely hard to undo/redo, here we are just scratching the surface. How about starting with “yeah, maybe it would've been better if we did X, we can perhaps still do it” instead of providing a long description with multiple reasons that have no relevance today. Especially if you want to insist that everything should be your call, except that you're making an extremely small amount of said calls.
Granted, in full log you did say that maybe it should be done, but you still seem to be implying that MSVC is a hard requirement (as if… better performance is less important?):

jnthn | Given that exists, we maybe can think about a move to gmp, though of course it needs a vict^Wvolunteer...

Meanwhile, MSVC support doesn't even seem to be planned in Julia.

Which have sucked much of the joy out of contributing to Raku for a number of people by this point.

Raku project had 20 years of happy mindless progress in no particular direction. Unsurprisingly, it didn't get anywhere we all want it to be. Accepting the current situation is not a pleasant act. We can't always be happy, it is life. IMO the biggest question for the council right now is what exactly Raku should be and how can we get there, but you can of course spend the energy on trying to exclude me because you don't like the things I say and how I say them directly and openly. By the way, I clearly expressed my frustration with the current state of things in my nomination.",True,{'THUMBS_DOWN': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/lizmat,8,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-698496288,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","@AlexDaniel

I am for honest and direct language that doesn't mislead readers

Here you are implying that @jnthn is misleading readers.  Is that what you intended to convey?

calls for action to change the situation

This is OPEN SOURCE.  If you have an itch, you scratch it YOURSELF.  And that is NOT telling other people how things should be.

The idea of picking a specific library for the project just because you used MSVC at the time isn't a good justification

Within the given constraints at the time, it was a PERFECTLY VALID decision to make.  And as such justified.  This is independent of the fact that there may be better solutions available now.

Raku project is riddled with decisions that were seemingly random at the time

The reasons for some decisions may have been lost in time.  But just stating that ""random decisions"" were made at the time, is doing a disservice to ALL of the people who have put in a significant amount of work to get a system going.  Possibly, some of these decisions in the past, would have been made different today.  But to say that they have been random, again, is showing that you do NOT know what you're talking about.

How about starting with “yeah, maybe it would've been better if we did X, we can perhaps still do it” instead of providing a long description with multiple reasons that have no relevance today.

How about you start not being abrasive and start being constructive for a change?  How about you start actually providing PR's, instead of just opening issues.  How about you taking @taboege's example?  Now THAT is being constructive.

Especially if you want to insist that everything should be your call, except that you're making an extremely small amount of said calls.

I'm pretty sure that @jnthn WILL make a call after this.

Meanwhile, MSVC support doesn't even seem to be planned in Julia.

So what does that have to do with anything?

Raku project had 20 years of happy mindless progress in no particular direction

OH BOY.  Thank you for smearing the professional standing of all the people involved in the Raku project over the past 20 years.

Unsurprisingly, it didn't get anywhere we all want it to be.

And who is the ""we"" you speak of?  Is that your ""majestic plural""?

Accepting the current situation is not a pleasant act

And WHO is saying that nothing should change?  Or that nothing is changing?  Have you looked at the work in the RakuAST and newdisp branches?  How, e.g. the former should allow us to get rid of string EVAL in the core for things like sprintf (already done), assuming (planned), regex interpolation (planned) and module selection (planned).

The biggest question for the council right now is what exactly Raku should be and how can we get there

An interesting question.  Perhaps a recent /r/rakulang thread shows that different people find different things important.

you can of course spend the energy on trying to exclude me because you don't like the things I say and how I say them directly and openly

Saying things directly and openly is NOT a guarantee to being constructive.  If anything, in the Raku community, as hopefully in any community, people discussing issues are expected to do so in a constructive way.  Generally, you are NOT being constructive, you're just busy shouting FIRE!!

By the way, I clearly expressed my frustration with the current state of things in my nomination.

I think the result of the election shows that only 1/3 of the voters actually wants you on the Steering Council.  As opposed to @jnthn (about 90%) and me (about 75%).  Doesn't that tell you something?
Since you were against the Raku Steering Council from the beginning, always claiming that the problems solving repo would be the place to raise issues and have discussions, I would suggest you consider not accepting the Raku Steering council seat, and thereby making it possible for @vrurg to take a seat on the Steering Council.  I think that would allow the Raku Steering Council to function in a way that would be productive, while not taking away your voice from discussions prior to being handled by the Raku Steering Council.",True,{'THUMBS_UP': ['https://github.com/jnthn']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/AlexDaniel,9,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-698508546,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","Relax. I just made a comment saying the decision wasn't justified. Big deal. Now that there's a PR moving things in that direction I don't see a lot of need to discuss this more (honestly, I wouldn't've left the previous comment if I knew there was a PR, I missed it).",True,{'THUMBS_DOWN': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/lizmat,10,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-698514213,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","I just made a comment saying the decision wasn't justified

Which clearly indicates that you do not consider what such a comment means.

Big deal

Yes, this IS a big deal.  You've become noise.  Do you want to be considered ""noise""?   I would hope that you want to be taken seriously.  If so, then please, do not just say things that just come up in your mind.  Think about what they would mean in a wider world.  How people might interpret it.

I don't see a lot of need to discuss this more

Indeed.  The original subject is now well underway of becoming an improvement to Rakudo on MoarVM.  But things might still go sideways: there is no full implementation yet, nor do we have a certainty that it will build on all of the architectures Rakudo supports.

(honestly, I wouldn't've left the previous comment if I knew there was a PR, I missed it).

But you DID miss it.  And you DID assume nothing was happening.  And you DID just shout FIRE!!.  Even managed to meme a GIF for it and include it.  And you're not apologizing for this.  You're just saying that YOU are not interested in pursuing the discussion.
This is yet another reason why you, in your current state of just being able to shout FIRE!!, are NOT a constructive member of the Raku Community, let alone of the Raku Steering Council.
Clean up your act!  It is clear that you are an intelligent person.  Use that intelligence in a constructive manner.  It will help you in life.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/jnthn,11,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-698906031,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","@AlexDaniel Yesterday I asked that you stop attacking other contributors in your interactions here. You immediately responded by doing more of the same. The reply from @lizmat points out the many problems with your response, however this:

Raku project is riddled with decisions that were seemingly random

And this:

Raku project had 20 years of happy mindless progress in no particular direction.

Are a clear continuation of an explicit behavior I called out as unacceptable, namely:

Painting anybody who made a decision differently than you imagine you would have under the same constraints as doing things without thought

The development of the Raku language took place very much in public - more so than many other languages - and the history of that process remains accessible to this day. It shows the progression from initial ideas and design principles, through numerous changes based on feedback from implementation and early adopters, to reach the language as it exists today. You state that:

I am for honest and direct language that doesn't mislead readers

However, it's hard for me to see how ""random"" and ""mindless"" can be considered honest conclusions to draw based on the readily available project history.
Further, it feels to me that ""direct language"" really means not being concerned about the impact of ones words on other people.  However, people are at the heart of a volunteer run open source project. MoarVM has seen commits from ~120 individuals, and there are surely others who have not produced a commit, but have provided valuable input in other ways. I'm grateful to all of them.
From the start of MoarVM, I've aimed for a professional and friendly community around it. I'm quite sure I've made my own missteps in trying to achieve that, but generally I'd say that those working on MoarVM have done pretty well at providing feedback on each others work without anyone feeling put down or attacked as a result. I will strive for that to continue to be the case.
Which brings me to a sad first in this project: the first time in its 7 year history where I believe the best way forward is to exclude somebody from further participation. On at least one thing I do agree with @AlexDaniel: we can't always be happy. Without happiness, the ban on participation proposed yesterday is thus implemented.",True,"{'THUMBS_UP': ['https://github.com/lizmat', 'https://github.com/JJ', 'https://github.com/japhb']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1352,2020-09-23T13:18:25Z,2020-09-26T14:07:19Z,2020-09-26T14:07:21Z,MERGED,True,377,344,8,https://github.com/MasterDuke17,Simplify and optimize isprime_I,1,[],https://github.com/MoarVM/MoarVM/pull/1352,https://github.com/MasterDuke17,12,https://github.com/MoarVM/MoarVM/pull/1352#issuecomment-698953547,"Remove the rounds option. Rakudo only ever used a single (too large)
value and the op does not appear to be used in the ecosystem. Instead,
hardcode the value passed to the libtommath function to 40, chosen based
on https://security.stackexchange.com/questions/4544/how-many-iterations-of-rabin-miller-should-be-used-to-generate-cryptographic-saf
Also, libtommath now returns false for 1, so remove that check in our
code.
Additionally, add a branch for !MVM_BIGINT_IS_BIG, and handle that case
with the FJ32_256 algorithm from Forišek and Jančina, ""Fast Primality
Testing for Integers That Fit into a Machine Word"", 2015.
After making the single necessary modification to Rakudo,
say (^100_000).grep(*.is-prime).tail; say now - INIT now goes from
~12.8s to ~0.036s. The speedup isn't as dramatic for big integers,
say (10_000_000_000..10_000_100_000).grep(*.is-prime).tail; say now - INIT now
goes from ~26s to ~11s.","Guess it needs NQP and Rakudo patches that match, along with version bumps. Wonder if the NQP one needs to account for other backends too...

Ok, I'll make PRs for NQP and Rakudo, and then update them with a version bump once this is merged.
Yeah, I've looked at the other backends and I think the changes are trivial.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1353,2020-09-24T08:58:51Z,,2020-09-25T10:32:39Z,OPEN,False,57,5,6,https://github.com/taboege,Use GMP instead of libtommath,3,[],https://github.com/MoarVM/MoarVM/pull/1353,https://github.com/taboege,1,https://github.com/MoarVM/MoarVM/pull/1353,"Bundle, build and use GMP instead of libtommath for speed.","Bundle, build and use GMP instead of libtommath for speed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1353,2020-09-24T08:58:51Z,,2020-09-25T10:32:39Z,OPEN,False,57,5,6,https://github.com/taboege,Use GMP instead of libtommath,3,[],https://github.com/MoarVM/MoarVM/pull/1353,https://github.com/Altai-man,2,https://github.com/MoarVM/MoarVM/pull/1353#issuecomment-698214690,"Bundle, build and use GMP instead of libtommath for speed.","Please, don't merge until next week.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1353,2020-09-24T08:58:51Z,,2020-09-25T10:32:39Z,OPEN,False,57,5,6,https://github.com/taboege,Use GMP instead of libtommath,3,[],https://github.com/MoarVM/MoarVM/pull/1353,https://github.com/taboege,3,https://github.com/MoarVM/MoarVM/pull/1353#issuecomment-698217129,"Bundle, build and use GMP instead of libtommath for speed.","This is still at the beginning. At the moment it pulls in and builds GMP successfully on my computer. I use the repository at ShiftMediaProject/gmp linked by @MasterDuke17 but don't do anything MSVC-specific yet.
The first thing I want to ask at this point is: looking at #321, I build and link a static library version of GMP to moarvm and throw it away afterwards. No headers or shared library of GMP are installed, making moar supposedly fatter. Is that the right direction or should a shared library be installed in location that makes it clear that this is MoarVM's GMP library?
Also @MasterDuke17 : do you have a small patch that partially replaces libtommath with GMP so that I can try out my changes as I go?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1353,2020-09-24T08:58:51Z,,2020-09-25T10:32:39Z,OPEN,False,57,5,6,https://github.com/taboege,Use GMP instead of libtommath,3,[],https://github.com/MoarVM/MoarVM/pull/1353,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1353#issuecomment-698224732,"Bundle, build and use GMP instead of libtommath for speed.","Also @MasterDuke17 : do you have a small patch that partially replaces libtommath with GMP so that I can try out my changes as I go?

Not yet, I was waiting for a way to build it to test (bit of a chicken-and-egg problem here). But I can check out your branch and give it a whirl. Probably won't be until later today, but I can try to get you something to test with.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1353,2020-09-24T08:58:51Z,,2020-09-25T10:32:39Z,OPEN,False,57,5,6,https://github.com/taboege,Use GMP instead of libtommath,3,[],https://github.com/MoarVM/MoarVM/pull/1353,https://github.com/nwc10,5,https://github.com/MoarVM/MoarVM/pull/1353#issuecomment-698751248,"Bundle, build and use GMP instead of libtommath for speed.","I tried to build this branch on the sparc64 system gcc202. It fails like this:
 ccache gcc -c -DHAVE_CONFIG_H -I. -I.. -D__GMP_WITHIN_GMP -I.. -DOPERATION_add_n -std=gnu99 -Wextra -Wall -Wno-unused-parameter -Wno-unused-function -Wno-missing-braces -Werror=pointer-arith -Og -DNDEBUG -g3 -D_REENTRANT -D_FILE_OFFSET_BITS=64 -fPIC -DDEBUG_HELPERS -DWORDS_BIGENDIAN -DMVM_HEAPSNAPSHOT_FORMAT=2 -DMVM_TRACING=0 -DMVM_CGOTO=1 -DMVM_RDTSCP=0 -Wa,--noexecstack tmp-add_n.s -fPIC -DPIC -o .libs/add_n.o
tmp-add_n.s: Assembler messages:
tmp-add_n.s:106: Error: Architecture mismatch on ""addxccc %o4,%o5,%l7"".
tmp-add_n.s:106: (Requires v9d|v9e|v9v|v9m|m8; requested architecture is v9.)
tmp-add_n.s:115: Error: Architecture mismatch on ""addxccc %g1,%g5,%l7"".
tmp-add_n.s:115: (Requires v9d|v9e|v9v|v9m|m8; requested architecture is v9.)
tmp-add_n.s:125: Error: Architecture mismatch on ""addxccc %o4,%o5,%g3"".
tmp-add_n.s:125: (Requires v9d|v9e|v9v|v9m|m8; requested architecture is v9.)
tmp-add_n.s:128: Error: Architecture mismatch on ""addxccc %g1,%g5,%g5"".
tmp-add_n.s:128: (Requires v9d|v9e|v9v|v9m|m8; requested architecture is v9.)
tmp-add_n.s:138: Error: Architecture mismatch on ""addxccc %o4,%o5,%g3"".
tmp-add_n.s:138: (Requires v9d|v9e|v9v|v9m|m8; requested architecture is v9.)
tmp-add_n.s:142: Error: Architecture mismatch on ""addxc %g0,%g0,%i0"".
tmp-add_n.s:142: (Requires v9d|v9e|v9v|v9m|m8; requested architecture is v9.)
make[3]: *** [Makefile:772: add_n.lo] Error 1
make[3]: Leaving directory '/home/nick/Perl/MoarVM/3rdparty/gmp/mpn'
make[2]: *** [Makefile:996: all-recursive] Error 1
make[2]: Leaving directory '/home/nick/Perl/MoarVM/3rdparty/gmp'
make[1]: *** [Makefile:786: all] Error 2
make[1]: Leaving directory '/home/nick/Perl/MoarVM/3rdparty/gmp'
make: *** [Makefile:743: 3rdparty/gmp/libgmp.a] Error 2

Looking carefully at what it is complaining about, it seems to be saying that you can't use this assembler instruction on the current CPU, which appears to be ""sparc v9 whatever"", but it is on every specific sparc v9. Oh, and v8 too. So, sigh, it seems to be a sort of assembler bug-ish.
But then
About two steps later I realised that gmp is a dependency of gcc and I'm building this with gcc, right? So it has to have worked at some point.
To cut to the chase
I cloned https://github.com/ShiftMediaProject/gmp directly and built it with defaults. It builds. There I see these compiler lines like this (sorry, different targets. Lots of scrollback):
libtool: compile:  gcc -DHAVE_CONFIG_H -I. -I.. -D__GMP_WITHIN_GMP -I.. -O2 -pedantic -m64 -mptr64 -mcpu=niagara4 -Wa,-Av9d -c obprintf.c -o obprintf.o >/dev/null 2>&1

Note there it has a bunch of -m flags to specify exactly the CPU.
So I think what is going wrong here is that, as-is, we're overriding the CPU flags for its make stage. Instead, adding might seem better, except that - we're building a static library here, right? (with Position Independent Code). So we never expose it? In which case, I think that the best answer is simply not to override its CFLAGS",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1353,2020-09-24T08:58:51Z,,2020-09-25T10:32:39Z,OPEN,False,57,5,6,https://github.com/taboege,Use GMP instead of libtommath,3,[],https://github.com/MoarVM/MoarVM/pull/1353,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1353#issuecomment-698855375,"Bundle, build and use GMP instead of libtommath for speed.",Looks like you're missing a -$(CMD)@gmpclean@ $(NOOUT) $(NOERR) in build/Makefile.in,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1354,2020-09-26T09:43:34Z,2020-09-26T09:54:35Z,2020-10-24T17:17:20Z,MERGED,True,55,1,2,https://github.com/Altai-man,2020.09 release,2,[],https://github.com/MoarVM/MoarVM/pull/1354,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1354,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1354,2020-09-26T09:43:34Z,2020-09-26T09:54:35Z,2020-10-24T17:17:20Z,MERGED,True,55,1,2,https://github.com/Altai-man,2020.09 release,2,[],https://github.com/MoarVM/MoarVM/pull/1354,https://github.com/Altai-man,2,https://github.com/MoarVM/MoarVM/pull/1354#issuecomment-699472567,,"The release is uploaded, merging.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1356,2020-09-28T14:51:41Z,2020-09-28T15:31:06Z,2020-09-28T15:31:18Z,MERGED,True,70,60,6,https://github.com/nwc10,Hash fix fix,2,[],https://github.com/MoarVM/MoarVM/pull/1356,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1356,Let there be tests!,Let there be tests!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1357,2020-09-28T19:20:51Z,2020-09-29T11:47:35Z,2020-09-29T11:47:54Z,MERGED,True,35,10,5,https://github.com/nwc10,Hash debug,2,[],https://github.com/MoarVM/MoarVM/pull/1357,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1357,Make with the testing,Make with the testing,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1358,2020-09-30T17:09:43Z,2020-10-13T18:07:12Z,2020-10-13T18:07:16Z,MERGED,True,16,17,3,https://github.com/patrickbkr,Minor optimization of MVM_file_isexecutable on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1358,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1358,"By moving a static ""."" string to the string cache.
Suggested here.","By moving a static ""."" string to the string cache.
Suggested here.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1358,2020-09-30T17:09:43Z,2020-10-13T18:07:12Z,2020-10-13T18:07:16Z,MERGED,True,16,17,3,https://github.com/patrickbkr,Minor optimization of MVM_file_isexecutable on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1358,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1358#issuecomment-707562282,"By moving a static ""."" string to the string cache.
Suggested here.",If noone objects I'm going to merge this in the evening.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1359,2020-10-01T23:53:23Z,2020-11-02T00:16:38Z,2020-11-02T00:16:38Z,MERGED,True,58612,55455,5,https://github.com/thundergnat,"Update MoarVM to Unicode 13.0, 13.1",6,[],https://github.com/MoarVM/MoarVM/pull/1359,https://github.com/thundergnat,1,https://github.com/MoarVM/MoarVM/pull/1359,"Modified generating script to handle new Unicode data and automatically regenerate Unicode database
Pull request pending for Rakudo and roast. With all three applied, compiles, passes tests and spec tests.
Rakudo rakudo/rakudo#3942 and Roast Raku/roast#676 go along with this","Modified generating script to handle new Unicode data and automatically regenerate Unicode database
Pull request pending for Rakudo and roast. With all three applied, compiles, passes tests and spec tests.
Rakudo rakudo/rakudo#3942 and Roast Raku/roast#676 go along with this",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1359,2020-10-01T23:53:23Z,2020-11-02T00:16:38Z,2020-11-02T00:16:38Z,MERGED,True,58612,55455,5,https://github.com/thundergnat,"Update MoarVM to Unicode 13.0, 13.1",6,[],https://github.com/MoarVM/MoarVM/pull/1359,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/1359#issuecomment-718992890,"Modified generating script to handle new Unicode data and automatically regenerate Unicode database
Pull request pending for Rakudo and roast. With all three applied, compiles, passes tests and spec tests.
Rakudo rakudo/rakudo#3942 and Roast Raku/roast#676 go along with this","<thundergnat> It is almost certainly going to need a closer look at the grapheme break rules.
I looked at the changelog for unicode 13 and didn't see anything mentioning changes to the grapheme break rules. Looks like they just added new emoji sequences, but didn't change the rules. Is that your impression as well?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1359,2020-10-01T23:53:23Z,2020-11-02T00:16:38Z,2020-11-02T00:16:38Z,MERGED,True,58612,55455,5,https://github.com/thundergnat,"Update MoarVM to Unicode 13.0, 13.1",6,[],https://github.com/MoarVM/MoarVM/pull/1359,https://github.com/thundergnat,3,https://github.com/MoarVM/MoarVM/pull/1359#issuecomment-719028969,"Modified generating script to handle new Unicode data and automatically regenerate Unicode database
Pull request pending for Rakudo and roast. With all three applied, compiles, passes tests and spec tests.
Rakudo rakudo/rakudo#3942 and Roast Raku/roast#676 go along with this","<thundergnat> It is almost certainly going to need a closer look at the grapheme break rules.
I looked at the changelog for unicode 13 and didn't see anything mentioning changes to the grapheme break rules. Looks like they just added new emoji sequences, but didn't change the rules. Is that your impression as well?

I wasn't sure of the implication of some of the modifications mentioned in Annex#29, https://www.unicode.org/reports/tr29/tr29-37.html#Modifications, So I hedged a bit. I can't point to anything specific and say ""That's an issue"", I just also didn't want to confidently claim ""It's all good"" when I'm not sure.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1359,2020-10-01T23:53:23Z,2020-11-02T00:16:38Z,2020-11-02T00:16:38Z,MERGED,True,58612,55455,5,https://github.com/thundergnat,"Update MoarVM to Unicode 13.0, 13.1",6,[],https://github.com/MoarVM/MoarVM/pull/1359,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/1359#issuecomment-720078259,"Modified generating script to handle new Unicode data and automatically regenerate Unicode database
Pull request pending for Rakudo and roast. With all three applied, compiles, passes tests and spec tests.
Rakudo rakudo/rakudo#3942 and Roast Raku/roast#676 go along with this","Now that the roast pull request has been fully reviewed and checked, I'm approving this PR officially.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1360,2020-10-13T14:51:56Z,2020-12-07T12:35:54Z,2020-12-07T12:36:06Z,MERGED,True,1810,643,19,https://github.com/nwc10,Hash bits in metadata,24,[],https://github.com/MoarVM/MoarVM/pull/1360,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1360,"Store some hash bits in the low bits of the hashtable metadata byte, with the probe distance in the high bits, and the split between the two updated dynamically.
This works (where tested, with ASAN and with assertions)
Currently it's not much faster. I had to resort to cachegrind to see any difference - it seems to dispatch more instructions, but result in about 0.1% fewer writes misses, and 0.1% fewer last-level cache misses.
This is disappointing. I hope that the numbers can be improved with some tuning. There is a lot that can be tuned

initial choice for the split probe distance:hash bits
how many times to move the split (to increase the probe distance) before growing the hash
for each hash grow, whether to ""reset"" the probe distance fully, ""back off"" (go somewhat smaller) or just keep it the same
whether to pick different values if the hash is given an expected size when first built
load factor (this of course could also be used to tune the code on master)

and all these can be varied as a function of hash size (eg it might work best to start with a notional ""8"" entry hash with a high load factor, then reduce the load factor for medium sized hashes, and then raise it again for large hashes, on the assumption that they really stress the CPU cache)
Update - it is a win for last-level cache lookups. The trade is more CPU work for less data misses.
I've subsequently added a few more optimisations (again CPU work for fewer data misses) that I believe help further.

test on ""awkward"" platforms (eg sparc64 - I think that index hashes might currently bust alignment assumptions there) - they did. Fixed in the rebase
a ""total memory used"" API function as requested by @timo - done. cachegrind thinks that this causes fractionally more last level cache lookup fails
test out using the FSA instead of regular malloc - at least the first two sizes allocated fit into the normal buckets -- done. cachegrind likes this
allocate just a control structure to start - thanks @lizmat done. cachegrind likes this too
architecture comment explaining how the heck this works done. feedback wanted

What the github UI doesn't seem to make obvious is that commit d53a4a1 on this branch is origin/hash-single-allocation and that branch is ready for review and merging - #1350
I think that this branch is ready for review, but I'd prefer not to merge it until after the next release.","Store some hash bits in the low bits of the hashtable metadata byte, with the probe distance in the high bits, and the split between the two updated dynamically.
This works (where tested, with ASAN and with assertions)
Currently it's not much faster. I had to resort to cachegrind to see any difference - it seems to dispatch more instructions, but result in about 0.1% fewer writes misses, and 0.1% fewer last-level cache misses.
This is disappointing. I hope that the numbers can be improved with some tuning. There is a lot that can be tuned

initial choice for the split probe distance:hash bits
how many times to move the split (to increase the probe distance) before growing the hash
for each hash grow, whether to ""reset"" the probe distance fully, ""back off"" (go somewhat smaller) or just keep it the same
whether to pick different values if the hash is given an expected size when first built
load factor (this of course could also be used to tune the code on master)

and all these can be varied as a function of hash size (eg it might work best to start with a notional ""8"" entry hash with a high load factor, then reduce the load factor for medium sized hashes, and then raise it again for large hashes, on the assumption that they really stress the CPU cache)
Update - it is a win for last-level cache lookups. The trade is more CPU work for less data misses.
I've subsequently added a few more optimisations (again CPU work for fewer data misses) that I believe help further.

test on ""awkward"" platforms (eg sparc64 - I think that index hashes might currently bust alignment assumptions there) - they did. Fixed in the rebase
a ""total memory used"" API function as requested by @timo - done. cachegrind thinks that this causes fractionally more last level cache lookup fails
test out using the FSA instead of regular malloc - at least the first two sizes allocated fit into the normal buckets -- done. cachegrind likes this
allocate just a control structure to start - thanks @lizmat done. cachegrind likes this too
architecture comment explaining how the heck this works done. feedback wanted

What the github UI doesn't seem to make obvious is that commit d53a4a1 on this branch is origin/hash-single-allocation and that branch is ready for review and merging - #1350
I think that this branch is ready for review, but I'd prefer not to merge it until after the next release.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1360,2020-10-13T14:51:56Z,2020-12-07T12:35:54Z,2020-12-07T12:36:06Z,MERGED,True,1810,643,19,https://github.com/nwc10,Hash bits in metadata,24,[],https://github.com/MoarVM/MoarVM/pull/1360,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1360#issuecomment-707831421,"Store some hash bits in the low bits of the hashtable metadata byte, with the probe distance in the high bits, and the split between the two updated dynamically.
This works (where tested, with ASAN and with assertions)
Currently it's not much faster. I had to resort to cachegrind to see any difference - it seems to dispatch more instructions, but result in about 0.1% fewer writes misses, and 0.1% fewer last-level cache misses.
This is disappointing. I hope that the numbers can be improved with some tuning. There is a lot that can be tuned

initial choice for the split probe distance:hash bits
how many times to move the split (to increase the probe distance) before growing the hash
for each hash grow, whether to ""reset"" the probe distance fully, ""back off"" (go somewhat smaller) or just keep it the same
whether to pick different values if the hash is given an expected size when first built
load factor (this of course could also be used to tune the code on master)

and all these can be varied as a function of hash size (eg it might work best to start with a notional ""8"" entry hash with a high load factor, then reduce the load factor for medium sized hashes, and then raise it again for large hashes, on the assumption that they really stress the CPU cache)
Update - it is a win for last-level cache lookups. The trade is more CPU work for less data misses.
I've subsequently added a few more optimisations (again CPU work for fewer data misses) that I believe help further.

test on ""awkward"" platforms (eg sparc64 - I think that index hashes might currently bust alignment assumptions there) - they did. Fixed in the rebase
a ""total memory used"" API function as requested by @timo - done. cachegrind thinks that this causes fractionally more last level cache lookup fails
test out using the FSA instead of regular malloc - at least the first two sizes allocated fit into the normal buckets -- done. cachegrind likes this
allocate just a control structure to start - thanks @lizmat done. cachegrind likes this too
architecture comment explaining how the heck this works done. feedback wanted

What the github UI doesn't seem to make obvious is that commit d53a4a1 on this branch is origin/hash-single-allocation and that branch is ready for review and merging - #1350
I think that this branch is ready for review, but I'd prefer not to merge it until after the next release.","Cool work!
I think it's important to have a very well performing empty hash (as that is the most common created hash in method calls to keep *%_ in, and small (like 8 keys) hash, as that sub / method calls usually do not have more than 8 named parameters.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1360,2020-10-13T14:51:56Z,2020-12-07T12:35:54Z,2020-12-07T12:36:06Z,MERGED,True,1810,643,19,https://github.com/nwc10,Hash bits in metadata,24,[],https://github.com/MoarVM/MoarVM/pull/1360,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1360#issuecomment-707944848,"Store some hash bits in the low bits of the hashtable metadata byte, with the probe distance in the high bits, and the split between the two updated dynamically.
This works (where tested, with ASAN and with assertions)
Currently it's not much faster. I had to resort to cachegrind to see any difference - it seems to dispatch more instructions, but result in about 0.1% fewer writes misses, and 0.1% fewer last-level cache misses.
This is disappointing. I hope that the numbers can be improved with some tuning. There is a lot that can be tuned

initial choice for the split probe distance:hash bits
how many times to move the split (to increase the probe distance) before growing the hash
for each hash grow, whether to ""reset"" the probe distance fully, ""back off"" (go somewhat smaller) or just keep it the same
whether to pick different values if the hash is given an expected size when first built
load factor (this of course could also be used to tune the code on master)

and all these can be varied as a function of hash size (eg it might work best to start with a notional ""8"" entry hash with a high load factor, then reduce the load factor for medium sized hashes, and then raise it again for large hashes, on the assumption that they really stress the CPU cache)
Update - it is a win for last-level cache lookups. The trade is more CPU work for less data misses.
I've subsequently added a few more optimisations (again CPU work for fewer data misses) that I believe help further.

test on ""awkward"" platforms (eg sparc64 - I think that index hashes might currently bust alignment assumptions there) - they did. Fixed in the rebase
a ""total memory used"" API function as requested by @timo - done. cachegrind thinks that this causes fractionally more last level cache lookup fails
test out using the FSA instead of regular malloc - at least the first two sizes allocated fit into the normal buckets -- done. cachegrind likes this
allocate just a control structure to start - thanks @lizmat done. cachegrind likes this too
architecture comment explaining how the heck this works done. feedback wanted

What the github UI doesn't seem to make obvious is that commit d53a4a1 on this branch is origin/hash-single-allocation and that branch is ready for review and merging - #1350
I think that this branch is ready for review, but I'd prefer not to merge it until after the next release.","Cool work!
I think it's important to have a very well performing empty hash (as that is the most common created hash in method calls to keep *%_ in, and small (like 8 keys) hash, as that sub / method calls usually do not have more than 8 named parameters.

Good point. I had thought ""it's OK - small initial alloc is... "" and then realised that it's the control structure, actually 15 pointers and 16 bytes of metadata. Which is OK - only the control structure is actually going to be hot in the CPU cache.
But I think that it's relatively easy to start an empty hash as just being a control structure. ""flag"" this as both cur_items 0 and max_items 0, and not worry that official_size_log2 can't actually represent 0 entries (or, heck, that there isn't even the bonus metadata byte for the sentinel, which would round up to a pointers-worth of memory)
This should work fairly cleanly because

cur_items tested for 0 is (or is supposed to be) a fast-path return ""nope"" test for all the RVALUE API functions
max_items set to 0 is a the trigger value for ""must call maybe_grow_hash"" for all the LVALUE API functions

meaning that the special casing for this needs only to be in the allocation and free functions.
(And inevitably no plan survives contact with the enemy - there will turn out to be code paths that don't yet have these checks, which will need to be found with asserts and then rectified)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1360,2020-10-13T14:51:56Z,2020-12-07T12:35:54Z,2020-12-07T12:36:06Z,MERGED,True,1810,643,19,https://github.com/nwc10,Hash bits in metadata,24,[],https://github.com/MoarVM/MoarVM/pull/1360,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/1360#issuecomment-737549269,"Store some hash bits in the low bits of the hashtable metadata byte, with the probe distance in the high bits, and the split between the two updated dynamically.
This works (where tested, with ASAN and with assertions)
Currently it's not much faster. I had to resort to cachegrind to see any difference - it seems to dispatch more instructions, but result in about 0.1% fewer writes misses, and 0.1% fewer last-level cache misses.
This is disappointing. I hope that the numbers can be improved with some tuning. There is a lot that can be tuned

initial choice for the split probe distance:hash bits
how many times to move the split (to increase the probe distance) before growing the hash
for each hash grow, whether to ""reset"" the probe distance fully, ""back off"" (go somewhat smaller) or just keep it the same
whether to pick different values if the hash is given an expected size when first built
load factor (this of course could also be used to tune the code on master)

and all these can be varied as a function of hash size (eg it might work best to start with a notional ""8"" entry hash with a high load factor, then reduce the load factor for medium sized hashes, and then raise it again for large hashes, on the assumption that they really stress the CPU cache)
Update - it is a win for last-level cache lookups. The trade is more CPU work for less data misses.
I've subsequently added a few more optimisations (again CPU work for fewer data misses) that I believe help further.

test on ""awkward"" platforms (eg sparc64 - I think that index hashes might currently bust alignment assumptions there) - they did. Fixed in the rebase
a ""total memory used"" API function as requested by @timo - done. cachegrind thinks that this causes fractionally more last level cache lookup fails
test out using the FSA instead of regular malloc - at least the first two sizes allocated fit into the normal buckets -- done. cachegrind likes this
allocate just a control structure to start - thanks @lizmat done. cachegrind likes this too
architecture comment explaining how the heck this works done. feedback wanted

What the github UI doesn't seem to make obvious is that commit d53a4a1 on this branch is origin/hash-single-allocation and that branch is ready for review and merging - #1350
I think that this branch is ready for review, but I'd prefer not to merge it until after the next release.",Thanks for documenting and explaining the various trade-offs; this was an interesting read.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1361,2020-10-19T13:36:23Z,2020-10-20T20:40:16Z,2020-10-20T20:56:48Z,MERGED,True,60,0,4,https://github.com/patrickbkr,Add a function to fix up the STD IO handles,1,[],https://github.com/MoarVM/MoarVM/pull/1361,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1361,"This is in preparation for a Rakudo fix that will make sure Rakudo won't silently die if the STD handles are used on Windows in ""windows""-subsystem executables. (rakudow.exe, rakuw.exe and perl6w.exe)","This is in preparation for a Rakudo fix that will make sure Rakudo won't silently die if the STD handles are used on Windows in ""windows""-subsystem executables. (rakudow.exe, rakuw.exe and perl6w.exe)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1362,2020-10-21T11:22:11Z,2020-10-21T12:45:54Z,2020-10-21T12:46:02Z,MERGED,True,5,5,3,https://github.com/nwc10,Create a unicode.c with #include directives instead of generating it …,1,[],https://github.com/MoarVM/MoarVM/pull/1362,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1362,"…with cat.
This way we avoid generating a large temporary file, avoid needing to delete
it at cleanup, avoid needing an entry in .gitignore, and get decent line
numbers in warnings and errors from the C compiler.","…with cat.
This way we avoid generating a large temporary file, avoid needing to delete
it at cleanup, avoid needing an entry in .gitignore, and get decent line
numbers in warnings and errors from the C compiler.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1363,2020-10-22T13:02:03Z,2020-10-22T18:41:59Z,2020-10-22T18:49:19Z,CLOSED,False,3,1,1,https://github.com/nwc10,"`char` can be unsigned. Rewrite the ""is it ASCII?"" test to handle thi…",1,[],https://github.com/MoarVM/MoarVM/pull/1363,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1363,"…s too.
Without this gcc correctly warns that the ""comparison is always false"" on
platforms where plain char is unsigned, and the code (as was) was buggy.
On x86_64 (where plain char is signed) this commit makes no difference to
the generated code.","…s too.
Without this gcc correctly warns that the ""comparison is always false"" on
platforms where plain char is unsigned, and the code (as was) was buggy.
On x86_64 (where plain char is signed) this commit makes no difference to
the generated code.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1363,2020-10-22T13:02:03Z,2020-10-22T18:41:59Z,2020-10-22T18:49:19Z,CLOSED,False,3,1,1,https://github.com/nwc10,"`char` can be unsigned. Rewrite the ""is it ASCII?"" test to handle thi…",1,[],https://github.com/MoarVM/MoarVM/pull/1363,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1363#issuecomment-714690762,"…s too.
Without this gcc correctly warns that the ""comparison is always false"" on
platforms where plain char is unsigned, and the code (as was) was buggy.
On x86_64 (where plain char is signed) this commit makes no difference to
the generated code.",For later: appears to be directly committed with a989f7b553,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1364,2020-10-23T19:57:10Z,2020-10-24T08:57:02Z,2020-10-24T08:57:23Z,MERGED,True,13,6,2,https://github.com/nwc10,Fix two *printf size warnings reported on ILP32 platforms.,1,[],https://github.com/MoarVM/MoarVM/pull/1364,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1364,"In debugserver.c, handle_id is 64 bit, so use PRId64.
In the profiler, we print out the difference between two pointers. This has
the type ptrdiff_t. It seems that on most platforms that ptrdiff_t is a
typedef for long. However, on (at least) arm32 and sparc32 it is a typedef
for int (despite int and long being the same size on these platforms).
Hence *printf format checking warns about a mismatch between types.
Oh so helpful.
C11 provides a size modifier t for ptrdiff_t, but we're still stuck in
the century of the fruitbat, so we can't use that. So just cast to long.","In debugserver.c, handle_id is 64 bit, so use PRId64.
In the profiler, we print out the difference between two pointers. This has
the type ptrdiff_t. It seems that on most platforms that ptrdiff_t is a
typedef for long. However, on (at least) arm32 and sparc32 it is a typedef
for int (despite int and long being the same size on these platforms).
Hence *printf format checking warns about a mismatch between types.
Oh so helpful.
C11 provides a size modifier t for ptrdiff_t, but we're still stuck in
the century of the fruitbat, so we can't use that. So just cast to long.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1365,2020-10-24T16:49:29Z,2020-10-26T10:23:38Z,2020-10-26T10:23:45Z,MERGED,True,33,18,1,https://github.com/nwc10,Big endian deserialisation,3,[],https://github.com/MoarVM/MoarVM/pull/1365,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1365,"Eliminate pointer mismatch warnings on big endian systems.
Avoid a call to memcpy everywhere, not just little endian systems that support unaligned reads.","Eliminate pointer mismatch warnings on big endian systems.
Avoid a call to memcpy everywhere, not just little endian systems that support unaligned reads.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1366,2020-10-24T17:18:34Z,2020-10-25T09:44:19Z,2020-10-25T09:44:19Z,MERGED,True,6,3,1,https://github.com/Kaiepi,Fix zeroing of reallocated memory in MVM_recalloc,1,[],https://github.com/MoarVM/MoarVM/pull/1366,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1366,"This function assumes that the new size of memory to be reallocated is
greater than or equal to its old size. Should it be lesser instead, this
will attempt to zero memory that is out of bounds, leading to a
segfault.  Only attempt to zero reallocated memory if its size has
grown.","This function assumes that the new size of memory to be reallocated is
greater than or equal to its old size. Should it be lesser instead, this
will attempt to zero memory that is out of bounds, leading to a
segfault.  Only attempt to zero reallocated memory if its size has
grown.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1367,2020-10-24T18:12:11Z,2020-10-24T18:20:41Z,2020-10-24T18:21:03Z,MERGED,True,29,1,2,https://github.com/Altai-man,2020.10 release,2,[],https://github.com/MoarVM/MoarVM/pull/1367,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1367,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1367,2020-10-24T18:12:11Z,2020-10-24T18:20:41Z,2020-10-24T18:21:03Z,MERGED,True,29,1,2,https://github.com/Altai-man,2020.10 release,2,[],https://github.com/MoarVM/MoarVM/pull/1367,https://github.com/Altai-man,2,https://github.com/MoarVM/MoarVM/pull/1367#issuecomment-716034625,,"Uploaded, merging.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1368,2020-10-25T09:46:57Z,2020-10-26T11:34:29Z,2020-10-26T11:34:40Z,CLOSED,False,4,4,4,https://github.com/nwc10,"Use MVM_{malloc,realloc,calloc,free} consistency.",1,[],https://github.com/MoarVM/MoarVM/pull/1368,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1368,"All these calls changed to the MVM_* wrappers are on memory blocks where the
other calls are MVM_* wrappers.
There are still a few ""bare"" mallocs/frees, but these seem to be
self-contained, or related to memory allocated by strdup/strndup, which
is using the platform malloc internally.","All these calls changed to the MVM_* wrappers are on memory blocks where the
other calls are MVM_* wrappers.
There are still a few ""bare"" mallocs/frees, but these seem to be
self-contained, or related to memory allocated by strdup/strndup, which
is using the platform malloc internally.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1368,2020-10-25T09:46:57Z,2020-10-26T11:34:29Z,2020-10-26T11:34:40Z,CLOSED,False,4,4,4,https://github.com/nwc10,"Use MVM_{malloc,realloc,calloc,free} consistency.",1,[],https://github.com/MoarVM/MoarVM/pull/1368,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1368#issuecomment-716490513,"All these calls changed to the MVM_* wrappers are on memory blocks where the
other calls are MVM_* wrappers.
There are still a few ""bare"" mallocs/frees, but these seem to be
self-contained, or related to memory allocated by strdup/strndup, which
is using the platform malloc internally.",Rebased to master and pushed live.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1369,2020-10-26T10:21:12Z,,2020-10-28T20:10:44Z,OPEN,False,5,3,1,https://github.com/nwc10,CStruct bind_attribute can write beyond malloc'd buffer.,1,['bug'],https://github.com/MoarVM/MoarVM/pull/1369,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1369,"Please review this commit with the assumption that my proposed fix is incorrect.
bind_attribute had been calling set_ptr_at_offset for all CArrays, whether inlined or not. That writes a pointer at the slot offset.
For the corner case of the inlined array being both the last member in the structure and smaller than the size of a pointer
(eg HAS int32 @.b[1] is CArray; on a 64 bit system), this causes a pointer write beyond the end of the allocated storage.
More generally, on a system which faults unaligned pointer writes, this write faults in the more realistic case where the previous structure member(s) don't add up to pointer-sized alignment.
This is clearly a bug.
Minimum test case I can find is
use v6;

use NativeCall;

class InlinedArrayInStruct is repr('CStruct') {
    has int32 $.a is rw;
    HAS int32 @.b[1] is CArray;
}

my $iais = InlinedArrayInStruct.new();

with this result:
==31060== Invalid write of size 8
==31060==    at 0x51126B6: set_ptr_at_offset (CStruct.c:362)
==31060==    by 0x5113814: bind_attribute (CStruct.c:651)
==31060==    by 0x503B798: MVM_interp_run (interp.c:2018)
==31060==    by 0x51D646D: MVM_vm_run_file (moar.c:486)
==31060==    by 0x109784: main (main.c:305)
==31060==  Address 0xe1ef4b4 is 4 bytes inside a block of size 8 alloc'd
==31060==    at 0x4C2DBC5: calloc (vg_replace_malloc.c:711)
==31060==    by 0x51105AA: MVM_calloc (alloc.h:11)
==31060==    by 0x51129CA: initialize (CStruct.c:413)
==31060==    by 0x503A4AA: MVM_interp_run (interp.c:1880)
==31060==    by 0x51D646D: MVM_vm_run_file (moar.c:486)
==31060==    by 0x109784: main (main.c:305)

ASAN doesn't seem to spot this.
Run this on sparc64 and it will SIGBUS, because that write is not properly aligned. This is how I found the problem.
It seems that the write to the slot is not needed in this case. The next case statement down was changed by commit e4ff694 to breaking out of the switch statement for the inlined case.
I am assuming that this is the correct fix here. Please could someone who actually understands this code double check this.
Looking further through the code, it seems to me that the logic of commit e4ff694 for the type == MVM_CSTRUCT_ATTR_CSTRUCT case really ought to be duplicated further down for the MVM_CSTRUCT_ATTR_CPPSTRUCT and MVM_CSTRUCT_ATTR_CUNION cases. If I take the test case from rakudo/rakudo#3687 and change repr('CStruct') to repr('CPPStruct') then it no longer works. And then the layout of CPPstruct.c suggests that it too needs all of this...
There seems to be a lot of repetition here. It's unclear to me how much is unavoidable.","Please review this commit with the assumption that my proposed fix is incorrect.
bind_attribute had been calling set_ptr_at_offset for all CArrays, whether inlined or not. That writes a pointer at the slot offset.
For the corner case of the inlined array being both the last member in the structure and smaller than the size of a pointer
(eg HAS int32 @.b[1] is CArray; on a 64 bit system), this causes a pointer write beyond the end of the allocated storage.
More generally, on a system which faults unaligned pointer writes, this write faults in the more realistic case where the previous structure member(s) don't add up to pointer-sized alignment.
This is clearly a bug.
Minimum test case I can find is
use v6;

use NativeCall;

class InlinedArrayInStruct is repr('CStruct') {
    has int32 $.a is rw;
    HAS int32 @.b[1] is CArray;
}

my $iais = InlinedArrayInStruct.new();

with this result:
==31060== Invalid write of size 8
==31060==    at 0x51126B6: set_ptr_at_offset (CStruct.c:362)
==31060==    by 0x5113814: bind_attribute (CStruct.c:651)
==31060==    by 0x503B798: MVM_interp_run (interp.c:2018)
==31060==    by 0x51D646D: MVM_vm_run_file (moar.c:486)
==31060==    by 0x109784: main (main.c:305)
==31060==  Address 0xe1ef4b4 is 4 bytes inside a block of size 8 alloc'd
==31060==    at 0x4C2DBC5: calloc (vg_replace_malloc.c:711)
==31060==    by 0x51105AA: MVM_calloc (alloc.h:11)
==31060==    by 0x51129CA: initialize (CStruct.c:413)
==31060==    by 0x503A4AA: MVM_interp_run (interp.c:1880)
==31060==    by 0x51D646D: MVM_vm_run_file (moar.c:486)
==31060==    by 0x109784: main (main.c:305)

ASAN doesn't seem to spot this.
Run this on sparc64 and it will SIGBUS, because that write is not properly aligned. This is how I found the problem.
It seems that the write to the slot is not needed in this case. The next case statement down was changed by commit e4ff694 to breaking out of the switch statement for the inlined case.
I am assuming that this is the correct fix here. Please could someone who actually understands this code double check this.
Looking further through the code, it seems to me that the logic of commit e4ff694 for the type == MVM_CSTRUCT_ATTR_CSTRUCT case really ought to be duplicated further down for the MVM_CSTRUCT_ATTR_CPPSTRUCT and MVM_CSTRUCT_ATTR_CUNION cases. If I take the test case from rakudo/rakudo#3687 and change repr('CStruct') to repr('CPPStruct') then it no longer works. And then the layout of CPPstruct.c suggests that it too needs all of this...
There seems to be a lot of repetition here. It's unclear to me how much is unavoidable.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1371,2020-10-26T16:27:01Z,2020-10-27T07:16:49Z,2020-10-27T07:17:26Z,MERGED,True,1,2,1,https://github.com/nwc10,`swap_bytes` in utf16.c needs to also swap bytes on big endian platforms,1,[],https://github.com/MoarVM/MoarVM/pull/1371,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1371,"The way it had been written worked perfectly on little endian platforms, and
was actually a no-op on big endian platforms, because it read from memory
in fixed (little endian) order, but wrote back using bitwise operations,
meaning that the read acted as a second byte swap on big endian platforms.
This was somewhat LTA.","The way it had been written worked perfectly on little endian platforms, and
was actually a no-op on big endian platforms, because it read from memory
in fixed (little endian) order, but wrote back using bitwise operations,
meaning that the read acted as a second byte swap on big endian platforms.
This was somewhat LTA.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1371,2020-10-26T16:27:01Z,2020-10-27T07:16:49Z,2020-10-27T07:17:26Z,MERGED,True,1,2,1,https://github.com/nwc10,`swap_bytes` in utf16.c needs to also swap bytes on big endian platforms,1,[],https://github.com/MoarVM/MoarVM/pull/1371,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1371#issuecomment-717040912,"The way it had been written worked perfectly on little endian platforms, and
was actually a no-op on big endian platforms, because it read from memory
in fixed (little endian) order, but wrote back using bitwise operations,
meaning that the read acted as a second byte swap on big endian platforms.
This was somewhat LTA.",Pushed as fast-forward.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1372,2020-10-26T20:02:02Z,2020-10-27T08:29:17Z,2020-10-27T08:29:56Z,CLOSED,False,20,0,1,https://github.com/nwc10,"MVM_nativeref_{read,write}_lex_i should handle uint8, uint16, uint32",1,[],https://github.com/MoarVM/MoarVM/pull/1372,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1372,"Previously these three (and uint64) all took the default: path through
the case statement, which meant that they were read/written as 64 bits, eg:
    default:
        return var->i64;

This works fine on little endian systems, where the least significant byte
of the 64 bit value is at the the same memory address as the 8 bit value,
but on big endian systems it all goes wrong.
The two routines already had cases for the various sized signed types.
We need case statements to cover the 3 smaller unsigned types.
For clarity, I think it better to cover all 4 unsigned types explicitly,
and use the corresponding members in the union. Likely the compiler will
fold the signed and unsigned cases together in the final code, but I'd
prefer it to be doing that, rather than us making assumptions about
equivalence.
With this change (and the fix to swap_bytes in utf16.c) I am down to 3 failing tests on sparc64:
Test Summary Report
-------------------
t/spec/S32-io/utf16.t                                           (Wstat: 768 Tests: 39 Failed: 3)
  Failed tests:  13-15
  Non-zero exit status: 3
Files=1336, Tests=113360, 1721 wallclock secs (64.14 usr 13.46 sys + 12939.13 cusr 474.14 csys = 13490.87 CPU)

(cause known for those 3. Correct solution not yet obvious)","Previously these three (and uint64) all took the default: path through
the case statement, which meant that they were read/written as 64 bits, eg:
    default:
        return var->i64;

This works fine on little endian systems, where the least significant byte
of the 64 bit value is at the the same memory address as the 8 bit value,
but on big endian systems it all goes wrong.
The two routines already had cases for the various sized signed types.
We need case statements to cover the 3 smaller unsigned types.
For clarity, I think it better to cover all 4 unsigned types explicitly,
and use the corresponding members in the union. Likely the compiler will
fold the signed and unsigned cases together in the final code, but I'd
prefer it to be doing that, rather than us making assumptions about
equivalence.
With this change (and the fix to swap_bytes in utf16.c) I am down to 3 failing tests on sparc64:
Test Summary Report
-------------------
t/spec/S32-io/utf16.t                                           (Wstat: 768 Tests: 39 Failed: 3)
  Failed tests:  13-15
  Non-zero exit status: 3
Files=1336, Tests=113360, 1721 wallclock secs (64.14 usr 13.46 sys + 12939.13 cusr 474.14 csys = 13490.87 CPU)

(cause known for those 3. Correct solution not yet obvious)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1372,2020-10-26T20:02:02Z,2020-10-27T08:29:17Z,2020-10-27T08:29:56Z,CLOSED,False,20,0,1,https://github.com/nwc10,"MVM_nativeref_{read,write}_lex_i should handle uint8, uint16, uint32",1,[],https://github.com/MoarVM/MoarVM/pull/1372,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1372#issuecomment-717075547,"Previously these three (and uint64) all took the default: path through
the case statement, which meant that they were read/written as 64 bits, eg:
    default:
        return var->i64;

This works fine on little endian systems, where the least significant byte
of the 64 bit value is at the the same memory address as the 8 bit value,
but on big endian systems it all goes wrong.
The two routines already had cases for the various sized signed types.
We need case statements to cover the 3 smaller unsigned types.
For clarity, I think it better to cover all 4 unsigned types explicitly,
and use the corresponding members in the union. Likely the compiler will
fold the signed and unsigned cases together in the final code, but I'd
prefer it to be doing that, rather than us making assumptions about
equivalence.
With this change (and the fix to swap_bytes in utf16.c) I am down to 3 failing tests on sparc64:
Test Summary Report
-------------------
t/spec/S32-io/utf16.t                                           (Wstat: 768 Tests: 39 Failed: 3)
  Failed tests:  13-15
  Non-zero exit status: 3
Files=1336, Tests=113360, 1721 wallclock secs (64.14 usr 13.46 sys + 12939.13 cusr 474.14 csys = 13490.87 CPU)

(cause known for those 3. Correct solution not yet obvious)",Rebased and pushed,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1373,2020-10-30T11:15:38Z,2020-11-06T11:54:52Z,2020-11-06T12:19:43Z,MERGED,True,152,48,4,https://github.com/niner,Fix interning of parametrics,5,[],https://github.com/MoarVM/MoarVM/pull/1373,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1373,Interning of parametric types was only implemented for the most simple cases. This ought to make it work reliably in all cases.,Interning of parametric types was only implemented for the most simple cases. This ought to make it work reliably in all cases.,True,"{'HOORAY': ['https://github.com/lizmat', 'https://github.com/coke']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1373,2020-10-30T11:15:38Z,2020-11-06T11:54:52Z,2020-11-06T12:19:43Z,MERGED,True,152,48,4,https://github.com/niner,Fix interning of parametrics,5,[],https://github.com/MoarVM/MoarVM/pull/1373,https://github.com/dogbert17,2,https://github.com/MoarVM/MoarVM/pull/1373#issuecomment-719593291,Interning of parametric types was only implemented for the most simple cases. This ought to make it work reliably in all cases.,"FWIW, passes
make stresstest

running under ASAN and with the following changes:
dogbert@dogbert-VirtualBox:~/repos/rakudo/nqp/MoarVM$ git diff
diff --git a/src/core/fixedsizealloc.c b/src/core/fixedsizealloc.c
index 504e5ed0e..ce1aeb194 100644
--- a/src/core/fixedsizealloc.c
+++ b/src/core/fixedsizealloc.c
@@ -10,7 +10,7 @@
  * behavior. */
 
 /* Turn this on to switch to a mode where we debug by size. */
-#define FSA_SIZE_DEBUG 0
+#define FSA_SIZE_DEBUG 1
 #if FSA_SIZE_DEBUG
 typedef struct {
     MVMuint64 alloc_size;
diff --git a/src/gc/collect.h b/src/gc/collect.h
index 153805096..2a1644638 100644
--- a/src/gc/collect.h
+++ b/src/gc/collect.h
@@ -1,6 +1,6 @@
 /* The maximum size of the nursery area. Note that since it's semi-space
  * copying, we could actually have double this amount allocated per thread. */
-#define MVM_NURSERY_SIZE 4194304
+#define MVM_NURSERY_SIZE 8192
 
 /* The nursery size threads other than the main thread start out with. If
  * they fill it and trigger a GC run, then it is doubled. If they are
diff --git a/src/gc/debug.h b/src/gc/debug.h
index 91d833abd..20735652d 100644
--- a/src/gc/debug.h
+++ b/src/gc/debug.h
@@ -4,7 +4,7 @@
  * 2 = Checks on every object register access (slow)
  * 3 = Collects garbage on every allocation
  */
-#define MVM_GC_DEBUG 0
+#define MVM_GC_DEBUG 1
 
 #if MVM_GC_DEBUG
 #define MVM_ASSERT_NOT_FROMSPACE(tc, c) do { \",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1374,2020-10-31T13:26:48Z,2020-11-22T19:56:28Z,2020-11-24T12:25:08Z,MERGED,True,185,3,7,https://github.com/nwc10,Eliminate static race condition,3,[],https://github.com/MoarVM/MoarVM/pull/1374,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1374,"The code in master:src/6model/serialization.c uses a C static variable to pass the running thread's MVMThreadContext pointer into the C callback function passed to qsort. This is a subtle race condition - if two threads are serialising (ie compiling) at the same time, they might see the wrong value.
We should instead use some form of thread local storage to pass this value into the callback. C11 and later provide a _Thread_local attribute which makes all of this (almost) transparent. Before this gcc (and its impersonators) provided __thread which works in the same way. It seems also that all Win32 compilers that UV supports provide an attribute which we can use. If there is nothing better (likely vendor compilers on OSes we don't yet reach) we fall back to UV's API, which seems to be a thin wrapper around pthreads.
I had hoped that the _Thread_local approach would be significantly faster than the classic pthreads approach, and about as fast as the static global, but it seems that this is only true when compiling regular unshared code. MoarVM is set up to build a shared library by default, and the implication of this is that there still needs to be a call through the shared library redirection tables to get the correct thread locals for this thread for this process (to something like __tls_get_addr(PLT)). It looks like TLS is slightly faster - for ARM, with it the callback compiles to 11 instructions, with UV (wrapping pthreads) its 12. The called function might also be simpler (I haven't checked), and there is no need to call uv_key_create to create a key each runtime - the setup is now done at C compilation time.
(And it ought to be 10 instructions, because the compiler seems to miss the opportunity to exploit the tailcall. We left it an open goal and still it missed :-()","The code in master:src/6model/serialization.c uses a C static variable to pass the running thread's MVMThreadContext pointer into the C callback function passed to qsort. This is a subtle race condition - if two threads are serialising (ie compiling) at the same time, they might see the wrong value.
We should instead use some form of thread local storage to pass this value into the callback. C11 and later provide a _Thread_local attribute which makes all of this (almost) transparent. Before this gcc (and its impersonators) provided __thread which works in the same way. It seems also that all Win32 compilers that UV supports provide an attribute which we can use. If there is nothing better (likely vendor compilers on OSes we don't yet reach) we fall back to UV's API, which seems to be a thin wrapper around pthreads.
I had hoped that the _Thread_local approach would be significantly faster than the classic pthreads approach, and about as fast as the static global, but it seems that this is only true when compiling regular unshared code. MoarVM is set up to build a shared library by default, and the implication of this is that there still needs to be a call through the shared library redirection tables to get the correct thread locals for this thread for this process (to something like __tls_get_addr(PLT)). It looks like TLS is slightly faster - for ARM, with it the callback compiles to 11 instructions, with UV (wrapping pthreads) its 12. The called function might also be simpler (I haven't checked), and there is no need to call uv_key_create to create a key each runtime - the setup is now done at C compilation time.
(And it ought to be 10 instructions, because the compiler seems to miss the opportunity to exploit the tailcall. We left it an open goal and still it missed :-()",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1374,2020-10-31T13:26:48Z,2020-11-22T19:56:28Z,2020-11-24T12:25:08Z,MERGED,True,185,3,7,https://github.com/nwc10,Eliminate static race condition,3,[],https://github.com/MoarVM/MoarVM/pull/1374,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1374#issuecomment-719963753,"The code in master:src/6model/serialization.c uses a C static variable to pass the running thread's MVMThreadContext pointer into the C callback function passed to qsort. This is a subtle race condition - if two threads are serialising (ie compiling) at the same time, they might see the wrong value.
We should instead use some form of thread local storage to pass this value into the callback. C11 and later provide a _Thread_local attribute which makes all of this (almost) transparent. Before this gcc (and its impersonators) provided __thread which works in the same way. It seems also that all Win32 compilers that UV supports provide an attribute which we can use. If there is nothing better (likely vendor compilers on OSes we don't yet reach) we fall back to UV's API, which seems to be a thin wrapper around pthreads.
I had hoped that the _Thread_local approach would be significantly faster than the classic pthreads approach, and about as fast as the static global, but it seems that this is only true when compiling regular unshared code. MoarVM is set up to build a shared library by default, and the implication of this is that there still needs to be a call through the shared library redirection tables to get the correct thread locals for this thread for this process (to something like __tls_get_addr(PLT)). It looks like TLS is slightly faster - for ARM, with it the callback compiles to 11 instructions, with UV (wrapping pthreads) its 12. The called function might also be simpler (I haven't checked), and there is no need to call uv_key_create to create a key each runtime - the setup is now done at C compilation time.
(And it ought to be 10 instructions, because the compiler seems to miss the opportunity to exploit the tailcall. We left it an open goal and still it missed :-()","Oh great. :-(
Thanks - I thought I'd found and fixed that. Must have managed to end up with the version where it was wrong.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1374,2020-10-31T13:26:48Z,2020-11-22T19:56:28Z,2020-11-24T12:25:08Z,MERGED,True,185,3,7,https://github.com/nwc10,Eliminate static race condition,3,[],https://github.com/MoarVM/MoarVM/pull/1374,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1374#issuecomment-719964216,"The code in master:src/6model/serialization.c uses a C static variable to pass the running thread's MVMThreadContext pointer into the C callback function passed to qsort. This is a subtle race condition - if two threads are serialising (ie compiling) at the same time, they might see the wrong value.
We should instead use some form of thread local storage to pass this value into the callback. C11 and later provide a _Thread_local attribute which makes all of this (almost) transparent. Before this gcc (and its impersonators) provided __thread which works in the same way. It seems also that all Win32 compilers that UV supports provide an attribute which we can use. If there is nothing better (likely vendor compilers on OSes we don't yet reach) we fall back to UV's API, which seems to be a thin wrapper around pthreads.
I had hoped that the _Thread_local approach would be significantly faster than the classic pthreads approach, and about as fast as the static global, but it seems that this is only true when compiling regular unshared code. MoarVM is set up to build a shared library by default, and the implication of this is that there still needs to be a call through the shared library redirection tables to get the correct thread locals for this thread for this process (to something like __tls_get_addr(PLT)). It looks like TLS is slightly faster - for ARM, with it the callback compiles to 11 instructions, with UV (wrapping pthreads) its 12. The called function might also be simpler (I haven't checked), and there is no need to call uv_key_create to create a key each runtime - the setup is now done at C compilation time.
(And it ought to be 10 instructions, because the compiler seems to miss the opportunity to exploit the tailcall. We left it an open goal and still it missed :-()",That's interesting. That implies that the fallback code works on Win32 too. That wasn't the plan.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1374,2020-10-31T13:26:48Z,2020-11-22T19:56:28Z,2020-11-24T12:25:08Z,MERGED,True,185,3,7,https://github.com/nwc10,Eliminate static race condition,3,[],https://github.com/MoarVM/MoarVM/pull/1374,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1374#issuecomment-732941870,"The code in master:src/6model/serialization.c uses a C static variable to pass the running thread's MVMThreadContext pointer into the C callback function passed to qsort. This is a subtle race condition - if two threads are serialising (ie compiling) at the same time, they might see the wrong value.
We should instead use some form of thread local storage to pass this value into the callback. C11 and later provide a _Thread_local attribute which makes all of this (almost) transparent. Before this gcc (and its impersonators) provided __thread which works in the same way. It seems also that all Win32 compilers that UV supports provide an attribute which we can use. If there is nothing better (likely vendor compilers on OSes we don't yet reach) we fall back to UV's API, which seems to be a thin wrapper around pthreads.
I had hoped that the _Thread_local approach would be significantly faster than the classic pthreads approach, and about as fast as the static global, but it seems that this is only true when compiling regular unshared code. MoarVM is set up to build a shared library by default, and the implication of this is that there still needs to be a call through the shared library redirection tables to get the correct thread locals for this thread for this process (to something like __tls_get_addr(PLT)). It looks like TLS is slightly faster - for ARM, with it the callback compiles to 11 instructions, with UV (wrapping pthreads) its 12. The called function might also be simpler (I haven't checked), and there is no need to call uv_key_create to create a key each runtime - the setup is now done at C compilation time.
(And it ought to be 10 instructions, because the compiler seems to miss the opportunity to exploit the tailcall. We left it an open goal and still it missed :-()","There is some code here that could go away in favor of this mechanism also, I think, which might make native callbacks rather faster.

See #1391
I don't know how to benchmark this. But it's obviously simpler.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1375,2020-10-31T19:40:08Z,2020-10-31T21:09:09Z,2020-10-31T21:09:21Z,MERGED,True,5,5,5,https://github.com/nwc10,Use `foo(void)` instead of just `foo()` for functions that take no arguments,1,[],https://github.com/MoarVM/MoarVM/pull/1375,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1375,"Whilst the two are equivalent in C++, in C the latter is just a declaration
not a prototype - it specifies the return type but not the parameters,
meaning that the compiler can't actually check the parameters passed and
report errors. An explicit void makes it a prototype, declaring that the
function takes no arguments.
(More wonderfully, it seems that even on some fairly recent versions of gcc,
is seems a function definition static int foo() { ... } doesn't act as a
prototype, meaning that even incorrect calls made to it later in the same
source file aren't faulted. clang does not stay silent on these.)
Found with a combination of -Werror=strict-prototypes and git grep.
We can't actually build with that compiler flag, because some of our
dependencies have header files that contain the problematic constructions,
and trying to work around these to turn the flag on by default probably
only creates fragile ""solutions"" and likely is more cost than benefit.","Whilst the two are equivalent in C++, in C the latter is just a declaration
not a prototype - it specifies the return type but not the parameters,
meaning that the compiler can't actually check the parameters passed and
report errors. An explicit void makes it a prototype, declaring that the
function takes no arguments.
(More wonderfully, it seems that even on some fairly recent versions of gcc,
is seems a function definition static int foo() { ... } doesn't act as a
prototype, meaning that even incorrect calls made to it later in the same
source file aren't faulted. clang does not stay silent on these.)
Found with a combination of -Werror=strict-prototypes and git grep.
We can't actually build with that compiler flag, because some of our
dependencies have header files that contain the problematic constructions,
and trying to work around these to turn the flag on by default probably
only creates fragile ""solutions"" and likely is more cost than benefit.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1376,2020-11-01T20:16:47Z,2020-11-05T15:22:06Z,2020-11-05T15:22:08Z,MERGED,True,30,13,1,https://github.com/MasterDuke17,Report the lines that caused coverage,2,[],https://github.com/MoarVM/MoarVM/pull/1376,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1376,"SETTING__src_core_c_Instant_pm6.coverage.html.txt
SETTING__src_core_c_Enumeration_pm6.coverage.html.txt
SETTING__src_core_c_Enumeration_pm6.coverage-v2.html.txt
This makes the program even more specific to parsing a coverage report
of a Rakudo spectest. But the benefit is you can see what lines in the
tests cover lines in Rakudo. It would probably be better to create a
table, or hoverover/popup (maybe on the line number?), but I don't know
HTML/CSS/JS/etc, so just sticking them at the end of the line.
This also dramatically reduces the memory used by not pushing identical
things into an array and then de-duplicating them by turning them into
a Set, but just putting them into another level of the hash.
A sample is attached, but renamed to .txt to pass GitHub's allowed file
type filter.","SETTING__src_core_c_Instant_pm6.coverage.html.txt
SETTING__src_core_c_Enumeration_pm6.coverage.html.txt
SETTING__src_core_c_Enumeration_pm6.coverage-v2.html.txt
This makes the program even more specific to parsing a coverage report
of a Rakudo spectest. But the benefit is you can see what lines in the
tests cover lines in Rakudo. It would probably be better to create a
table, or hoverover/popup (maybe on the line number?), but I don't know
HTML/CSS/JS/etc, so just sticking them at the end of the line.
This also dramatically reduces the memory used by not pushing identical
things into an array and then de-duplicating them by turning them into
a Set, but just putting them into another level of the hash.
A sample is attached, but renamed to .txt to pass GitHub's allowed file
type filter.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1377,2020-11-05T18:40:08Z,2020-11-06T09:18:30Z,2020-11-06T09:18:34Z,MERGED,True,3,0,1,https://github.com/timo,we need to import pthread on windows to get a type,1,[],https://github.com/MoarVM/MoarVM/pull/1377,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/1377,"we have an #include <pthread.h> in the setname_np probe already, so if we want to use it, we should also include it there.
this blew up moarvm build on MinGW","we have an #include <pthread.h> in the setname_np probe already, so if we want to use it, we should also include it there.
this blew up moarvm build on MinGW",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1377,2020-11-05T18:40:08Z,2020-11-06T09:18:30Z,2020-11-06T09:18:34Z,MERGED,True,3,0,1,https://github.com/timo,we need to import pthread on windows to get a type,1,[],https://github.com/MoarVM/MoarVM/pull/1377,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1377#issuecomment-722938274,"we have an #include <pthread.h> in the setname_np probe already, so if we want to use it, we should also include it there.
this blew up moarvm build on MinGW","Can this be merged? We are a good way away from the next release, so it's a good moment to get this in.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1378,2020-11-07T17:02:38Z,2020-11-22T19:46:30Z,2020-11-22T19:47:05Z,MERGED,True,38,98,7,https://github.com/nwc10,"MVM_box_{int,num,str,uint} and MVM_unbox_str duplicate functionality in reprconv.c",8,[],https://github.com/MoarVM/MoarVM/pull/1378,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1378,"MVM_box_{int,num,str,uint} and MVM_unbox_str duplicate functionality in reprconv.c and can be replaced with calls to MVM_repr_box_{int,num,str,uint} and MVM_repr_get_str.","MVM_box_{int,num,str,uint} and MVM_unbox_str duplicate functionality in reprconv.c and can be replaced with calls to MVM_repr_box_{int,num,str,uint} and MVM_repr_get_str.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1379,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378","With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-724051313,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378","$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

Really it's the Raku spec that wants refining, in order to to provide a means to refuse mixing in to an immutable Int in the first place. It's already a DIHWIDT today; one should really be using but in this situation. I don't think losing the small integer cache is the right trade-off for a behavior that we should probably find a way to forbid.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/lizmat,3,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-724053449,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378",Basically forbid does on objects that have a .WHICH that is a ValueObjAt?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-724054335,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378","@jnthn the int cache is also a blocker for in-process precompilation.
Though I may have an idea that could maybe with luck get around this and an issue with parametrics (which share the singleton behaviour though are far less prevalent).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/jnthn,5,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-724056549,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378","the int cache is also a blocker for in-process precompilation.

Hm, ideally they'd be owned by the core VM serialization context (same as the various BOOT type objects).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/jnthn,6,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-724057143,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378","Basically forbid does on objects that have a .WHICH that is a ValueObjAt?

Perhaps those two should always happen together, but that might be the tail wagging the dog...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/MasterDuke17,7,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-724060848,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378","I don't think losing the small integer cache is the right trade-off for a behavior that we should probably find a way to forbid.

Aside from the behavior change/bugfix, ""I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops."", if it turns out the slowdown is small enough (for whatever value of enough we decide), is it worth it to simplify the code overall?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/jnthn,8,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-724068853,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378","I think that the total slowdown is about 1%, but it would be useful it someone else double checks this

I'm curious what benchmark was used (and can't find it in the commit messages or the PR message; did I miss it?) A microbenchmark would need writing very carefully (and the specializer output analyzing), because it'd be very easy to write something like for ^1_000_000 { my int $i = 10; my $box = $i; }, and then find that the specializer turns it into an empty loop, and thus only the pre-specialization impact is measured.
Even a benchmark that doesn't fall into that trap could still potentially give quite an under-estimate, however, because a GC run in a single-threaded benchmark with a small heap is going to be rather cheaper than one in a larger application with a bigger heap and potentially threads to sync up during the stop the world phase.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/MasterDuke17,9,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-724070904,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378","I'm curious what benchmark was used (and can't find it in the commit messages or the PR message; did I miss it?)

FYI, I did some non-rigorous testing (by looking at the timing of a couple runs for stage parse of compiling CORE.c) of @niner's patch to just disable the int cache. I saw ~0.5s slowdown (out of ~35s) and ~20mb increase in maxrss according to /usr/bin/time.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/nwc10,10,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-724077931,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378","On the assumption that the desired language behaviour was to have the does construction work without sideways leakage, I was working on the assumption that the intcache is incompatible with correctness. Hence I really wanted just a ballpark for ""how bad?"". It's the user + system CPU times for the entire regression test suite (on the same machine, with only this branch as the change)
Whilst your points about carefully benchmarking loops is totally valid (and I'd not considered given the reasoning in the previous paragraph), the branch also changes pretty much everything else that boxes ints, meaning that all values outside of (-1, 15) should be slightly faster, and it also removes a small amount of code in other places (adds up to about 200 lines). So I was equally interested in the macro benchmark.
Whatever the language level decision is (to ensure correctness of $b in the examples) I think that most of the refactoring here still makes sense, as there was a lot of copy-paste repetition in the code that used the intcache - it is all a lot cleaner if it's inside MVM_repr_box_int. ie it's not wasted.
We don't have a good macro benchmark do we - ""the how much does everything else change"" question?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1379,2020-11-09T12:44:11Z,2021-03-22T10:09:03Z,2021-03-22T10:09:04Z,CLOSED,False,211,442,28,https://github.com/nwc10,"Eliminate the intcache; add ""fastcreate"" style logic to MVM_repr_box_int",15,[],https://github.com/MoarVM/MoarVM/pull/1379,https://github.com/nwc10,11,https://github.com/MoarVM/MoarVM/pull/1379#issuecomment-803940827,"With this branch this code now works:
$ ./rakudo-m -e 'my int $a = 1; my int $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
1

It eliminates the intcache, which returned singleton MVMObjects when boxing ints in the range (-1, 15), which caused the above code to output foo.
To mitigate some of the slowdown this causes, it adds fast-path object allocation and initialisation for P6int and P6opaque in MVM_repr_box_int, similar to how various spesh ops and the JIT implement it. I think that the total slowdown is about 1%, but it would be useful it someone else double checks this. On the upside, there's less code, and two fewer spesh ops.
It doesn't fix this bug, which is somewhere in NQP or Rakudo, given that rakudo-j gives the same result:
$ ./rakudo-m -e 'my $a = 1; my $b = 1; $a does role { method Str() { ""foo"" } }; $b.Str.say'
foo

This follows on from the branch MVMROOT-in-box-foo in #1378",obsoleted by #1448,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1380,2020-11-13T11:52:23Z,2020-11-20T23:19:27Z,2020-11-20T23:19:30Z,MERGED,True,13,2,1,https://github.com/jnthn,Implement serialize/deserialize of CStr REPR,1,[],https://github.com/MoarVM/MoarVM/pull/1380,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1380,"As reported in rakudo/rakudo#2209 the lack
of this can sometimes end up blocking precompilation.","As reported in rakudo/rakudo#2209 the lack
of this can sometimes end up blocking precompilation.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1384,2020-11-18T13:33:21Z,2020-12-11T17:36:53Z,2020-12-11T17:36:56Z,MERGED,True,285,77,1,https://github.com/nwc10,"Minimally exact bigint/bigint => num conversion, including rounding.",1,[],https://github.com/MoarVM/MoarVM/pull/1384,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1384,"Given that Rakudo parses decimal constants such as 0.01 as Rats (ie represents them internally as (1 / 100), and persists with this exact representation as long as possible), this effectively makes the operator that converts Rats to Nums Rakudo's decimal => binary floating point conversion.
Decimal to binary floating point conversion is messy, inherently lossy (in the general case), subject to errors if not done carefully and correctly (subtle errors such as drift - failure to round trip), and potentially slow, and can require considering a lot more digits than seems intuitive for correct rounding in the extreme corner cases.
(It's something approaching 750 decimal digits for the absolute worst case value, to determine the correct rounding direction where the true value is very close to the boundary between the nearest two values representable in IEEE binary64, but I can no longer find the citation with the guilty numbers.)
The previous code in MVM_bigint_div_num calculated the integer division with 64 extra bits of precision, then implicitly truncated when converting to a double. This handled most cases correctly, but one of the spectests failed on 32 bit systems. (arm, ppc32, x86 - so not a compiler or CPU bug).
As described in the revised commit message, there is no right answer. Going beyond 64 bits doesn't improve the situation.
Hence this commit calculates the exact extra precision needed to ensure that the integer division generates the needed mantissa directly, and then performs the necessary rounding before directly writing out a complete floating point representation.
For decimal conversions, it is bit-for-bit consistent with David M. Gay's strtod (which seems to be taken as the gold standard in conversions), not just for ""normal"" numbers, but also values that overflow, underflow (into subnormals, zero or negative zero), and handles all the rounding correctly for every test value I throw at it. (ie the last bit of the mantissa is ""correct"", where ""correct"" is consistent with strtod).
Worst case this code will increase the inputs to the integer division by 2**54 (ie 17 decimal digits), whereas the previous code would always use 2**64 (ie 20 decimal digits, but always). The rest of the operations are logical operations and bitshifts on integers. It should be slightly faster, but more importantly I believe it to be canonically correct.","Given that Rakudo parses decimal constants such as 0.01 as Rats (ie represents them internally as (1 / 100), and persists with this exact representation as long as possible), this effectively makes the operator that converts Rats to Nums Rakudo's decimal => binary floating point conversion.
Decimal to binary floating point conversion is messy, inherently lossy (in the general case), subject to errors if not done carefully and correctly (subtle errors such as drift - failure to round trip), and potentially slow, and can require considering a lot more digits than seems intuitive for correct rounding in the extreme corner cases.
(It's something approaching 750 decimal digits for the absolute worst case value, to determine the correct rounding direction where the true value is very close to the boundary between the nearest two values representable in IEEE binary64, but I can no longer find the citation with the guilty numbers.)
The previous code in MVM_bigint_div_num calculated the integer division with 64 extra bits of precision, then implicitly truncated when converting to a double. This handled most cases correctly, but one of the spectests failed on 32 bit systems. (arm, ppc32, x86 - so not a compiler or CPU bug).
As described in the revised commit message, there is no right answer. Going beyond 64 bits doesn't improve the situation.
Hence this commit calculates the exact extra precision needed to ensure that the integer division generates the needed mantissa directly, and then performs the necessary rounding before directly writing out a complete floating point representation.
For decimal conversions, it is bit-for-bit consistent with David M. Gay's strtod (which seems to be taken as the gold standard in conversions), not just for ""normal"" numbers, but also values that overflow, underflow (into subnormals, zero or negative zero), and handles all the rounding correctly for every test value I throw at it. (ie the last bit of the mantissa is ""correct"", where ""correct"" is consistent with strtod).
Worst case this code will increase the inputs to the integer division by 2**54 (ie 17 decimal digits), whereas the previous code would always use 2**64 (ie 20 decimal digits, but always). The rest of the operations are logical operations and bitshifts on integers. It should be slightly faster, but more importantly I believe it to be canonically correct.",True,{'HEART': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1384,2020-11-18T13:33:21Z,2020-12-11T17:36:53Z,2020-12-11T17:36:56Z,MERGED,True,285,77,1,https://github.com/nwc10,"Minimally exact bigint/bigint => num conversion, including rounding.",1,[],https://github.com/MoarVM/MoarVM/pull/1384,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1384#issuecomment-730593813,"Given that Rakudo parses decimal constants such as 0.01 as Rats (ie represents them internally as (1 / 100), and persists with this exact representation as long as possible), this effectively makes the operator that converts Rats to Nums Rakudo's decimal => binary floating point conversion.
Decimal to binary floating point conversion is messy, inherently lossy (in the general case), subject to errors if not done carefully and correctly (subtle errors such as drift - failure to round trip), and potentially slow, and can require considering a lot more digits than seems intuitive for correct rounding in the extreme corner cases.
(It's something approaching 750 decimal digits for the absolute worst case value, to determine the correct rounding direction where the true value is very close to the boundary between the nearest two values representable in IEEE binary64, but I can no longer find the citation with the guilty numbers.)
The previous code in MVM_bigint_div_num calculated the integer division with 64 extra bits of precision, then implicitly truncated when converting to a double. This handled most cases correctly, but one of the spectests failed on 32 bit systems. (arm, ppc32, x86 - so not a compiler or CPU bug).
As described in the revised commit message, there is no right answer. Going beyond 64 bits doesn't improve the situation.
Hence this commit calculates the exact extra precision needed to ensure that the integer division generates the needed mantissa directly, and then performs the necessary rounding before directly writing out a complete floating point representation.
For decimal conversions, it is bit-for-bit consistent with David M. Gay's strtod (which seems to be taken as the gold standard in conversions), not just for ""normal"" numbers, but also values that overflow, underflow (into subnormals, zero or negative zero), and handles all the rounding correctly for every test value I throw at it. (ie the last bit of the mantissa is ""correct"", where ""correct"" is consistent with strtod).
Worst case this code will increase the inputs to the integer division by 2**54 (ie 17 decimal digits), whereas the previous code would always use 2**64 (ie 20 decimal digits, but always). The rest of the operations are logical operations and bitshifts on integers. It should be slightly faster, but more importantly I believe it to be canonically correct.","I think that this means that mp_get_double in libtomath is inherently buggy for some corner cases, and really 2 of our 3 other calls to it should use this approach. As the 3rd is the value passed to pow for the exponent, we can probably leave it as is. $x ** $y for $y > 9007199254740992 is going to overflow for $x > 1.00000000000008, and  values between 1.00000000000008 and 1 aren't really something we can represent very well anyway, so a little bit of error in $y isn't going to change anything.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1384,2020-11-18T13:33:21Z,2020-12-11T17:36:53Z,2020-12-11T17:36:56Z,MERGED,True,285,77,1,https://github.com/nwc10,"Minimally exact bigint/bigint => num conversion, including rounding.",1,[],https://github.com/MoarVM/MoarVM/pull/1384,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1384#issuecomment-730605093,"Given that Rakudo parses decimal constants such as 0.01 as Rats (ie represents them internally as (1 / 100), and persists with this exact representation as long as possible), this effectively makes the operator that converts Rats to Nums Rakudo's decimal => binary floating point conversion.
Decimal to binary floating point conversion is messy, inherently lossy (in the general case), subject to errors if not done carefully and correctly (subtle errors such as drift - failure to round trip), and potentially slow, and can require considering a lot more digits than seems intuitive for correct rounding in the extreme corner cases.
(It's something approaching 750 decimal digits for the absolute worst case value, to determine the correct rounding direction where the true value is very close to the boundary between the nearest two values representable in IEEE binary64, but I can no longer find the citation with the guilty numbers.)
The previous code in MVM_bigint_div_num calculated the integer division with 64 extra bits of precision, then implicitly truncated when converting to a double. This handled most cases correctly, but one of the spectests failed on 32 bit systems. (arm, ppc32, x86 - so not a compiler or CPU bug).
As described in the revised commit message, there is no right answer. Going beyond 64 bits doesn't improve the situation.
Hence this commit calculates the exact extra precision needed to ensure that the integer division generates the needed mantissa directly, and then performs the necessary rounding before directly writing out a complete floating point representation.
For decimal conversions, it is bit-for-bit consistent with David M. Gay's strtod (which seems to be taken as the gold standard in conversions), not just for ""normal"" numbers, but also values that overflow, underflow (into subnormals, zero or negative zero), and handles all the rounding correctly for every test value I throw at it. (ie the last bit of the mantissa is ""correct"", where ""correct"" is consistent with strtod).
Worst case this code will increase the inputs to the integer division by 2**54 (ie 17 decimal digits), whereas the previous code would always use 2**64 (ie 20 decimal digits, but always). The rest of the operations are logical operations and bitshifts on integers. It should be slightly faster, but more importantly I believe it to be canonically correct.","I think that this means that mp_get_double in libtomath is inherently buggy for some corner cases, and really 2 of our 3 other calls to it should use this approach.

In my convert-to-gmp branch (master...MasterDuke17:taboege-configure-gmp) I just s/mp_get_double/mpz_get_d/g. From the gmp docs:
""Convert op to a double, truncating if necessary (i.e. rounding towards zero).
If the exponent from the conversion is too big, the result is system dependent. An infinity is returned where available. A hardware overflow trap may or may not occur.""
Is this going to be any better?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1384,2020-11-18T13:33:21Z,2020-12-11T17:36:53Z,2020-12-11T17:36:56Z,MERGED,True,285,77,1,https://github.com/nwc10,"Minimally exact bigint/bigint => num conversion, including rounding.",1,[],https://github.com/MoarVM/MoarVM/pull/1384,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1384#issuecomment-730613409,"Given that Rakudo parses decimal constants such as 0.01 as Rats (ie represents them internally as (1 / 100), and persists with this exact representation as long as possible), this effectively makes the operator that converts Rats to Nums Rakudo's decimal => binary floating point conversion.
Decimal to binary floating point conversion is messy, inherently lossy (in the general case), subject to errors if not done carefully and correctly (subtle errors such as drift - failure to round trip), and potentially slow, and can require considering a lot more digits than seems intuitive for correct rounding in the extreme corner cases.
(It's something approaching 750 decimal digits for the absolute worst case value, to determine the correct rounding direction where the true value is very close to the boundary between the nearest two values representable in IEEE binary64, but I can no longer find the citation with the guilty numbers.)
The previous code in MVM_bigint_div_num calculated the integer division with 64 extra bits of precision, then implicitly truncated when converting to a double. This handled most cases correctly, but one of the spectests failed on 32 bit systems. (arm, ppc32, x86 - so not a compiler or CPU bug).
As described in the revised commit message, there is no right answer. Going beyond 64 bits doesn't improve the situation.
Hence this commit calculates the exact extra precision needed to ensure that the integer division generates the needed mantissa directly, and then performs the necessary rounding before directly writing out a complete floating point representation.
For decimal conversions, it is bit-for-bit consistent with David M. Gay's strtod (which seems to be taken as the gold standard in conversions), not just for ""normal"" numbers, but also values that overflow, underflow (into subnormals, zero or negative zero), and handles all the rounding correctly for every test value I throw at it. (ie the last bit of the mantissa is ""correct"", where ""correct"" is consistent with strtod).
Worst case this code will increase the inputs to the integer division by 2**54 (ie 17 decimal digits), whereas the previous code would always use 2**64 (ie 20 decimal digits, but always). The rest of the operations are logical operations and bitshifts on integers. It should be slightly faster, but more importantly I believe it to be canonically correct.","It consistently returns with return negative ? -MVM_NUM_NEGINF : MVM_NUM_POSINF; in these cases, and i think that MoarVM always defines that as a constant, not a calculation.
So, I guess that this is ""better"" because it's consistent. I assume that gmp has to be portable to platforms which aren't using IEEE arithmetic, whereas MoarVM is somewhat self-selecting here - we can't actually bootstrap on any platform which isn't IEEE because our stage 0 files are assume it. (And slightly more so - we are assuming that the IEEE bit and byte endiannesss etc is exactly the same as the platform's integer endianness, which is probably true these days. And I only know this because i cut my teeth on a platform where this was not true.)
I'm not certain about the ""hardware overflow trap"" - I didn't check how MVM_NUM_NEGINF and MVM_NUM_POSINF are actually defined, but we don't seem to hit it currently. Even if we did, as the code is building IEEE doubles from raw bits, we could just return 0xFFF00000000000000000 : 0x7FF00000000000000000 and be done :-)
(I didn't use to know how to figure those out.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1385,This uses the MinGW that is provided by the AzureCI windows-2019 image.,This uses the MinGW that is provided by the AzureCI windows-2019 image.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-730222698,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"There are three failing tests in NQP.
Test Summary Report
-------------------
t\hll/06-sprintf.t                   (Wstat: 0 Tests: 294 Failed: 3)
  Failed tests:  40, 119-120
Files=145, Tests=13408, 34 wallclock secs ( 1.05 usr +  0.20 sys =  1.25 CPU)
Result: FAIL

Since rakudo#4009 is marked as a blocker and depends on this, this is a blocker as well, I guess.
My gut feeling tells me this is probably a problem in MoarVM and not in NQP.
@Altai-man: I'm unsure who is best to ping. Any idea?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/Altai-man,3,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-730533646,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"My opinion is:

Given we know it actually builds, the issue is no longer a blocker for this release. We can delay merging this until tests are fixed.
Fixing those tests is a blocker for next release respectively.",True,{'THUMBS_UP': ['https://github.com/patrickbkr']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-735704699,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"There are three failing tests in NQP.
Test Summary Report
-------------------
t\hll/06-sprintf.t                   (Wstat: 0 Tests: 294 Failed: 3)
  Failed tests:  40, 119-120
Files=145, Tests=13408, 34 wallclock secs ( 1.05 usr +  0.20 sys =  1.25 CPU)
Result: FAIL


Do we get any more diagnostics than that? (If there's a link to longer output, I failed to spot it).
I don't have any access to MinGW (or even Windows) but it's easier to help remote debug when it (the test) gives some more clues.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/Altai-man,5,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-735711743,This uses the MinGW that is provided by the AzureCI windows-2019 image.,ping @patrickbkr ?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/patrickbkr,6,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-735726167,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"The above snippet was copied from the failed Azure build of this PR. The logs seem to be gone already. There wasn't any more info in them though.
@nwc10 I do have access to a windows system. I can try to run it later.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/patrickbkr,7,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-735807339,This uses the MinGW that is provided by the AzureCI windows-2019 image.,@nwc10 https://gist.github.com/patrickbkr/e36b87dd4522f74856ea9eb8c6d43046,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/patrickbkr,8,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-737058099,This uses the MinGW that is provided by the AzureCI windows-2019 image.,For the record: the failures are caused by slight deviations in very big and very small numbers.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/nwc10,9,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-748591561,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"I'm aware that this is too late for yesterday's release, but I have now had a little bit of time to look (but not enough to write any patch)
This failure:
not ok 40 - %d on negative bigint
#   Actual value: <-13190017482579450>

is this code:
is(nqp::sprintf('<%d>', [$large-negative-int]), '<-13190017482579452>', '%d on negative bigint');
where we have
my $large-negative-int := nqp::fromnum_I(nqp::neg_n(nqp::pow_n(2.42, 42.0)), $knowhow);
and that simply is not a good way to set up an integer constant. The example of Irix dates this, but I know that it would evaluate 2.0**31.0 as 2147483647.0. One cannot rely on total accuracy on floating point operations outside of (IIRC) +, -, *, / modulo and sqrt. (I don't mean rounding here - i mean that you might not get the numerically correct 53rd bit in the mantissa, before rounding even comes into play)
One can't rely on floating point exponentiation to set up integers correctly. So the test needs rewriting to express the integer in integer operations. I'm not sure what the test is trying to test, versus what it needs to avoid, so I don't know if the test should simply write a literal 13190017482579450 and then negate that, or if it should get to that value with some integer (or even floating point) arithmetic on smaller values. I believe that even a loop of 42 multiplies should technically work, but it wouldn't be clear as to why it was being done that way.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/nwc10,10,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-748594958,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"The other two failures:
not ok 119 - %e handles small numbers
#   Actual value: <3.141e-20>
# Expected value: <3.142e-20>
not ok 120 - %e handles small negative numbers
#   Actual value: <-3.141e-20>
# Expected value: <-3.142e-20>

are going to have the same cause, given:
is(nqp::sprintf('<%7.3e>', [3.1415e-20]), '<3.142e-20>', '%e handles small numbers');
is(nqp::sprintf('<%7.3e>', [-3.1415e-20]), '<-3.142e-20>', '%e handles small negative numbers');

I think that the code that implements this is in src/HLL/sprintf.nqp
I am completely unfamiliar with this, but at a guess, it might be stringify-to-precision2 which is the problem here, as I can see that it uses nqp::pow_n(10.0, nqp::sub_n($precision, nqp::add_n($exp, 1.0)) and it already looks like nqp::pow_n is generating different results on this platform.
I'm not comfortable with that code, but I'm also not competent to replace it. I still think that we should be implementing sprintf as NQP, but I'm now far more aware of all the pitfalls of implementing floating point conversions in any language. Likely that code should not be using nqp::pow_n to calculate integer multiples of 10, but I'm not sure if it's good enough to just make that change, or if the whole approach should be done differently. (eg convert the value to a decimal string at maximal precision, and then round the decimal digits in the string. I'm not familiar with how competent C sprintf implementations do this, but taking their approach and transcribing C to NQP might be the way to go)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/patrickbkr,11,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-759562312,This uses the MinGW that is provided by the AzureCI windows-2019 image.,Might this be a case where a colaboration of @nwc10 (guts expert) and @lizmat (our expert in sprintf and nqp) will prove fruitful to solve this or provide a workaround?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/patrickbkr,12,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-782059178,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"By following nwc10s advice I fixed the first failure (%d on negative bigint).
The second error I'm in the process of debugging.
sprintf is called with ""3.1415e-20"".
stringify-to-precision2 is not actually involved in the failing test (verified with a say). It's only using stringify-to-precision.
Some prints show, that stringify-to-precision is called with the following float: ""3.1414999999999935"". I think it is legitimate for stringify-to-precision to turn that into ""3.141e-20"".
The actual function where that number is calculated is scientific.
src/HLL/sprintf.nqp:L369
$float := nqp::div_n($float, nqp::pow_n(10.0, $exp));

turns 3.1415e-20 into  3.1414999999999935. But that might also  be legitimate.
So I'm unsure whether the observed behavior is even wrong.
@nwc10 Help!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/nwc10,13,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-819008004,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"So, what we figured out yesterday was that nqp::pow_n(10, 20) returns 1.0000000000000022e-20 on MinGW - https://colabti.org/irclogger/irclogger_log/moarvm?date=2021-04-12#l168
I'm not sure if IEEE actually makes any guarantees about how wrong pow is allowed to be, but I think that this result is off in the 5 least significant bits, which is a lot less than awesome.
The bad news is that I think that this means that the only viable solution is to rewrite the relevant code in sprintf.nqp to avoid using the C library pow. There doesn't seem to be a quick workaround.
The good news is that as MoarVM's coerce_ns (the OP beneath the ~ operator) effectively already returns a number formatted as %17g (and the JVM as %17G - sigh) this might be easier than it first sounds - mostly string parsing and limted decimal maths using strings.
It won't be before the next release.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/lizmat,14,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-819009065,This uses the MinGW that is provided by the AzureCI windows-2019 image.,Are you aware that there is a Raku based sprintf implementation in the RakuAST branch?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/nwc10,15,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-819010899,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"I am now. Thanks for the timely ""heads up"".
My plans so far are about 14 lines written on a single A4 sheet, so it's no loss if that turns out be more useful. Investigations already show that (current) Rakudo builds on nqp's sprintf, but nqp itself doesn't use sprintf much, so if Rakudo stops needing nqp's, then a ""downsizing"" might be possible. (The best code is no code.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/lizmat,16,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-819013530,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"Yup, that would be my plan.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/nwc10,17,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-821880054,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"@patrickbkr - does #1472 build on MinGW?
It fixes this problem, which is getting in the way of fixing the problem on this ticket:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22)
0",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/patrickbkr,18,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-821961411,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"@nwc10 The branch does build and run on MinGW. The three test failures are unchanged.
edit:
PS C:\data\repos\nqp> ..\install\bin\nqp.exe -e 'nqp::say(1e23)'
1e+23
PS C:\data\repos\nqp> ..\install\bin\nqp.exe -e 'nqp::say(1e23 - 9.9999999999999992e+22)'
0",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1385,2020-11-19T07:58:23Z,2021-04-29T08:15:08Z,2021-04-29T08:15:08Z,MERGED,True,30,11,1,https://github.com/patrickbkr,Add a test configuration for MinGW on Windows,1,[],https://github.com/MoarVM/MoarVM/pull/1385,https://github.com/nwc10,19,https://github.com/MoarVM/MoarVM/pull/1385#issuecomment-822213886,This uses the MinGW that is provided by the AzureCI windows-2019 image.,"The three test failures are unchanged.

Thanks for testing. I didn't expect it to fix the existing MinGW bugs, but it's very good to know that it didn't introduce new regressions, and does fix 1e23 everywhere.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1386,2020-11-20T20:21:33Z,2020-11-22T19:42:44Z,2020-11-24T12:13:39Z,MERGED,True,38,4,1,https://github.com/nwc10,"P6opaque's `spesh` must handle P6bigint values inline, as some are too big",1,[],https://github.com/MoarVM/MoarVM/pull/1386,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1386,"I think that there might actually be two PRs in one here.
The first is what this branch actually fixes.
With MVM_SPESH_NODELAY=1 t/spec/S02-types/declare.rakudo.moar and t/spec/S02-types/int-uint.rakudo.moar fail with an exception Unhandled exception: Cannot unbox 64 bit wide bigint into native integer
Minimum test case I can golf it down to is
use v6;

use Test;
use lib $?FILE.IO.parent.add: 'rakudo/t/spec/packages/Test-Helpers';
use Test::Util;

# L<S09/Sized types/Sized low-level types are named most generally by appending the number of bits to a generic low-level type name>

my $type = 'int64';

my ($minval,$maxval) = ::($type).Range.int-bounds;

try { EVAL ""my $type \$var = {$minval-1}"" };

use nqp;
nqp::say(""Here"");

EVAL(""my $type \$var = 0; \$var++; \$var"");
EVAL(""my $type \$var = 1; \$var--; \$var"");

(yes, really, all the modules are needed too except the nqp)
Under gdb that looks like this:
(gdb) r
Starting program: /home/nick/Sandpit/moar-g/bin/moar --libpath=/home/nick/Perl/rakudo --libpath=/home/nick/Perl/rakudo/blib --libpath=/home/nick/Sandpit/moar-g/share/nqp/lib /home/nick/Perl/rakudo/rakudo.moarvm -Ilib ../boom.pl
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
[New Thread 0x7ffff6e69700 (LWP 1068854)]
Here
Unhandled exception: Cannot unbox 64 bit wide bigint into native integer
[Thread 0x7ffff6e69700 (LWP 1068854) exited]
[Inferior 1 (process 1068850) exited with code 01]
(gdb) b MVM_exception_throw_adhoc
Breakpoint 1 at 0x7ffff7817c7e: file src/core/exceptions.c, line 878.
(gdb) r
Starting program: /home/nick/Sandpit/moar-g/bin/moar --libpath=/home/nick/Perl/rakudo --libpath=/home/nick/Perl/rakudo/blib --libpath=/home/nick/Sandpit/moar-g/share/nqp/lib /home/nick/Perl/rakudo/rakudo.moarvm -Ilib ../boom.pl
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
[New Thread 0x7ffff6e69700 (LWP 1068856)]

Thread 1 ""moar"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x55555555aee0,
    messageFormat=0x7ffff7a35da8 ""Cannot stringify this object of type %s (%s)"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) c
Continuing.

Thread 1 ""moar"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x55555555aee0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) up
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x55555555aee0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
31              MVM_exception_throw_adhoc(tc, ""Cannot unbox %d bit wide bigint into native integer"", bits);
(gdb) p *a
$1 = {used = 2, alloc = 32, sign = 1, dp = 0x55555820e170}
(gdb) p a->dp[0]
$2 = 1
(gdb) p a->dp[1]
$3 = 8
(gdb) where
#0  MVM_exception_throw_adhoc (tc=0x55555555aee0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x55555555aee0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
#2  0x00007ffff78efa10 in get_int (tc=0x55555555aee0, st=0x5555572409c8,
    root=0x7ffff70f85e0, data=0x7ffff70f8600)
    at src/6model/reprs/P6bigint.c:117
#3  0x00007ffff78d3e4c in get_int (tc=0x55555555aee0, st=0x555557241008,
    root=0x7ffff70f85e0, data=0x7ffff70f85f8)
    at src/6model/reprs/P6opaque.c:521
#4  0x00007ffff78bdd58 in MVM_repr_get_int (tc=0x55555555aee0,
    obj=0x7ffff70f85e0) at src/6model/reprconv.c:617
#5  0x00007ffff78c388d in MVM_6model_container_decont_i (tc=0x55555555aee0,
    cont=0x7ffff70f85e0, res=0x55555820e108) at src/6model/containers.c:815
#6  0x00007ffff783ca93 in MVM_interp_run (tc=0x55555555aee0,
    initial_invoke=0x7ffff79c2160 <toplevel_initial_invoke>,
    invoke_data=0x5555555c0128, outer_runloop=0x0) at src/core/interp.c:4569
#7  0x00007ffff79c22da in MVM_vm_run_file (instance=0x55555555a2a0,
    filename=0x7fffffffe6af ""/home/nick/Perl/rakudo/rakudo.moarvm"")
    at src/moar.c:486
#8  0x0000555555555a44 in main (argc=7, argv=0x7fffffffe378) at src/main.c:305
(gdb) c
Continuing.
Here
[Switching to Thread 0x7ffff6e69700 (LWP 1068856)]

Thread 2 ""spesh optimizer"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x5555555ad5c0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) up
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x5555555ad5c0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
31              MVM_exception_throw_adhoc(tc, ""Cannot unbox %d bit wide bigint into native integer"", bits);
(gdb) p *a
$4 = {used = 2, alloc = 32, sign = 1, dp = 0x55555820e170}
(gdb) p a->dp[0]
$5 = 1
(gdb) p a->dp[1]
$6 = 8
(gdb) where
#0  MVM_exception_throw_adhoc (tc=0x5555555ad5c0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x5555555ad5c0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
#2  0x00007ffff78efa10 in get_int (tc=0x5555555ad5c0, st=0x5555572409c8,
    root=0x7ffff70f85e0, data=0x7ffff70f8600)
    at src/6model/reprs/P6bigint.c:117
#3  0x00007ffff78d3e4c in get_int (tc=0x5555555ad5c0, st=0x555557241008,
    root=0x7ffff70f85e0, data=0x7ffff70f85f8)
    at src/6model/reprs/P6opaque.c:521
#4  0x00007ffff78bdd58 in MVM_repr_get_int (tc=0x5555555ad5c0,
    obj=0x7ffff70f85e0) at src/6model/reprconv.c:617
#5  0x00007ffff78dad0a in spesh (tc=0x5555555ad5c0, st=0x555557241008,
    g=0x7fffefb70610, bb=0x7fffeef49228, ins=0x7fffeef48e60)
    at src/6model/reprs/P6opaque.c:1900
#6  0x00007ffff795234f in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef49228, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3273
#7  0x00007ffff795247c in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f88, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3307
#8  0x00007ffff795247c in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f00, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3307
#9  0x00007ffff79524ff in post_inline_pass (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f00) at src/spesh/optimize.c:3315
#10 0x00007ffff7952cb4 in MVM_spesh_optimize (tc=0x5555555ad5c0,
    g=0x7fffefb70610, p=0x7fffefbadde0) at src/spesh/optimize.c:3459
#11 0x00007ffff793cc60 in MVM_spesh_candidate_add (tc=0x5555555ad5c0,
    p=0x7fffefbadde0) at src/spesh/candidate.c:85
#12 0x00007ffff795e19d in worker (tc=0x5555555ad5c0,
    callsite=0x7ffff7fc8760 <null_args_callsite>, args=0x0)
    at src/spesh/worker.c:24
#13 0x00007ffff78ce1d5 in invoke_handler (tc=0x5555555ad5c0,
    invokee=0x5555555a9270, callsite=0x7ffff7fc8760 <null_args_callsite>,
    args=0x0) at src/6model/reprs/MVMCFunction.c:9
#14 0x00007ffff7865a57 in thread_initial_invoke (tc=0x5555555ad5c0,
    data=0x5555555aea60) at src/core/threads.c:59
#15 0x00007ffff78198cb in MVM_interp_run (tc=0x5555555ad5c0,
    initial_invoke=0x7ffff78659cc <thread_initial_invoke>,
    invoke_data=0x5555555aea60, outer_runloop=0x0) at src/core/interp.c:159
#16 0x00007ffff7865b1b in start_thread (data=0x5555555aea60)
    at src/core/threads.c:87
#17 0x00007ffff72deea7 in start_thread (arg=<optimized out>)
    at pthread_create.c:477
#18 0x00007ffff7539d4f in clone ()
    at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
(gdb)

Note that

The first bigint exception is the value -0x8000000000000001
It is in the try block
The here is then printed
The second exception is also for the value -0x8000000000000001
But that is in the code EVAL(""my $type \$var = 0; \$var++; \$var"");

So somehow spesh is mighty confused
Attached patch fixes the specific bug. Please check that I've not doe anything daft - I am not at all familiar with either the code or the architecture
Second bug - the bigger picture

why is spesh getting confused?
why isn't it handling exceptions gracefully (or alternatively catching them and panicking?)","I think that there might actually be two PRs in one here.
The first is what this branch actually fixes.
With MVM_SPESH_NODELAY=1 t/spec/S02-types/declare.rakudo.moar and t/spec/S02-types/int-uint.rakudo.moar fail with an exception Unhandled exception: Cannot unbox 64 bit wide bigint into native integer
Minimum test case I can golf it down to is
use v6;

use Test;
use lib $?FILE.IO.parent.add: 'rakudo/t/spec/packages/Test-Helpers';
use Test::Util;

# L<S09/Sized types/Sized low-level types are named most generally by appending the number of bits to a generic low-level type name>

my $type = 'int64';

my ($minval,$maxval) = ::($type).Range.int-bounds;

try { EVAL ""my $type \$var = {$minval-1}"" };

use nqp;
nqp::say(""Here"");

EVAL(""my $type \$var = 0; \$var++; \$var"");
EVAL(""my $type \$var = 1; \$var--; \$var"");

(yes, really, all the modules are needed too except the nqp)
Under gdb that looks like this:
(gdb) r
Starting program: /home/nick/Sandpit/moar-g/bin/moar --libpath=/home/nick/Perl/rakudo --libpath=/home/nick/Perl/rakudo/blib --libpath=/home/nick/Sandpit/moar-g/share/nqp/lib /home/nick/Perl/rakudo/rakudo.moarvm -Ilib ../boom.pl
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
[New Thread 0x7ffff6e69700 (LWP 1068854)]
Here
Unhandled exception: Cannot unbox 64 bit wide bigint into native integer
[Thread 0x7ffff6e69700 (LWP 1068854) exited]
[Inferior 1 (process 1068850) exited with code 01]
(gdb) b MVM_exception_throw_adhoc
Breakpoint 1 at 0x7ffff7817c7e: file src/core/exceptions.c, line 878.
(gdb) r
Starting program: /home/nick/Sandpit/moar-g/bin/moar --libpath=/home/nick/Perl/rakudo --libpath=/home/nick/Perl/rakudo/blib --libpath=/home/nick/Sandpit/moar-g/share/nqp/lib /home/nick/Perl/rakudo/rakudo.moarvm -Ilib ../boom.pl
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
[New Thread 0x7ffff6e69700 (LWP 1068856)]

Thread 1 ""moar"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x55555555aee0,
    messageFormat=0x7ffff7a35da8 ""Cannot stringify this object of type %s (%s)"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) c
Continuing.

Thread 1 ""moar"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x55555555aee0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) up
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x55555555aee0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
31              MVM_exception_throw_adhoc(tc, ""Cannot unbox %d bit wide bigint into native integer"", bits);
(gdb) p *a
$1 = {used = 2, alloc = 32, sign = 1, dp = 0x55555820e170}
(gdb) p a->dp[0]
$2 = 1
(gdb) p a->dp[1]
$3 = 8
(gdb) where
#0  MVM_exception_throw_adhoc (tc=0x55555555aee0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x55555555aee0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
#2  0x00007ffff78efa10 in get_int (tc=0x55555555aee0, st=0x5555572409c8,
    root=0x7ffff70f85e0, data=0x7ffff70f8600)
    at src/6model/reprs/P6bigint.c:117
#3  0x00007ffff78d3e4c in get_int (tc=0x55555555aee0, st=0x555557241008,
    root=0x7ffff70f85e0, data=0x7ffff70f85f8)
    at src/6model/reprs/P6opaque.c:521
#4  0x00007ffff78bdd58 in MVM_repr_get_int (tc=0x55555555aee0,
    obj=0x7ffff70f85e0) at src/6model/reprconv.c:617
#5  0x00007ffff78c388d in MVM_6model_container_decont_i (tc=0x55555555aee0,
    cont=0x7ffff70f85e0, res=0x55555820e108) at src/6model/containers.c:815
#6  0x00007ffff783ca93 in MVM_interp_run (tc=0x55555555aee0,
    initial_invoke=0x7ffff79c2160 <toplevel_initial_invoke>,
    invoke_data=0x5555555c0128, outer_runloop=0x0) at src/core/interp.c:4569
#7  0x00007ffff79c22da in MVM_vm_run_file (instance=0x55555555a2a0,
    filename=0x7fffffffe6af ""/home/nick/Perl/rakudo/rakudo.moarvm"")
    at src/moar.c:486
#8  0x0000555555555a44 in main (argc=7, argv=0x7fffffffe378) at src/main.c:305
(gdb) c
Continuing.
Here
[Switching to Thread 0x7ffff6e69700 (LWP 1068856)]

Thread 2 ""spesh optimizer"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x5555555ad5c0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) up
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x5555555ad5c0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
31              MVM_exception_throw_adhoc(tc, ""Cannot unbox %d bit wide bigint into native integer"", bits);
(gdb) p *a
$4 = {used = 2, alloc = 32, sign = 1, dp = 0x55555820e170}
(gdb) p a->dp[0]
$5 = 1
(gdb) p a->dp[1]
$6 = 8
(gdb) where
#0  MVM_exception_throw_adhoc (tc=0x5555555ad5c0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x5555555ad5c0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
#2  0x00007ffff78efa10 in get_int (tc=0x5555555ad5c0, st=0x5555572409c8,
    root=0x7ffff70f85e0, data=0x7ffff70f8600)
    at src/6model/reprs/P6bigint.c:117
#3  0x00007ffff78d3e4c in get_int (tc=0x5555555ad5c0, st=0x555557241008,
    root=0x7ffff70f85e0, data=0x7ffff70f85f8)
    at src/6model/reprs/P6opaque.c:521
#4  0x00007ffff78bdd58 in MVM_repr_get_int (tc=0x5555555ad5c0,
    obj=0x7ffff70f85e0) at src/6model/reprconv.c:617
#5  0x00007ffff78dad0a in spesh (tc=0x5555555ad5c0, st=0x555557241008,
    g=0x7fffefb70610, bb=0x7fffeef49228, ins=0x7fffeef48e60)
    at src/6model/reprs/P6opaque.c:1900
#6  0x00007ffff795234f in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef49228, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3273
#7  0x00007ffff795247c in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f88, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3307
#8  0x00007ffff795247c in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f00, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3307
#9  0x00007ffff79524ff in post_inline_pass (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f00) at src/spesh/optimize.c:3315
#10 0x00007ffff7952cb4 in MVM_spesh_optimize (tc=0x5555555ad5c0,
    g=0x7fffefb70610, p=0x7fffefbadde0) at src/spesh/optimize.c:3459
#11 0x00007ffff793cc60 in MVM_spesh_candidate_add (tc=0x5555555ad5c0,
    p=0x7fffefbadde0) at src/spesh/candidate.c:85
#12 0x00007ffff795e19d in worker (tc=0x5555555ad5c0,
    callsite=0x7ffff7fc8760 <null_args_callsite>, args=0x0)
    at src/spesh/worker.c:24
#13 0x00007ffff78ce1d5 in invoke_handler (tc=0x5555555ad5c0,
    invokee=0x5555555a9270, callsite=0x7ffff7fc8760 <null_args_callsite>,
    args=0x0) at src/6model/reprs/MVMCFunction.c:9
#14 0x00007ffff7865a57 in thread_initial_invoke (tc=0x5555555ad5c0,
    data=0x5555555aea60) at src/core/threads.c:59
#15 0x00007ffff78198cb in MVM_interp_run (tc=0x5555555ad5c0,
    initial_invoke=0x7ffff78659cc <thread_initial_invoke>,
    invoke_data=0x5555555aea60, outer_runloop=0x0) at src/core/interp.c:159
#16 0x00007ffff7865b1b in start_thread (data=0x5555555aea60)
    at src/core/threads.c:87
#17 0x00007ffff72deea7 in start_thread (arg=<optimized out>)
    at pthread_create.c:477
#18 0x00007ffff7539d4f in clone ()
    at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
(gdb)

Note that

The first bigint exception is the value -0x8000000000000001
It is in the try block
The here is then printed
The second exception is also for the value -0x8000000000000001
But that is in the code EVAL(""my $type \$var = 0; \$var++; \$var"");

So somehow spesh is mighty confused
Attached patch fixes the specific bug. Please check that I've not doe anything daft - I am not at all familiar with either the code or the architecture
Second bug - the bigger picture

why is spesh getting confused?
why isn't it handling exceptions gracefully (or alternatively catching them and panicking?)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1386,2020-11-20T20:21:33Z,2020-11-22T19:42:44Z,2020-11-24T12:13:39Z,MERGED,True,38,4,1,https://github.com/nwc10,"P6opaque's `spesh` must handle P6bigint values inline, as some are too big",1,[],https://github.com/MoarVM/MoarVM/pull/1386,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1386#issuecomment-731832866,"I think that there might actually be two PRs in one here.
The first is what this branch actually fixes.
With MVM_SPESH_NODELAY=1 t/spec/S02-types/declare.rakudo.moar and t/spec/S02-types/int-uint.rakudo.moar fail with an exception Unhandled exception: Cannot unbox 64 bit wide bigint into native integer
Minimum test case I can golf it down to is
use v6;

use Test;
use lib $?FILE.IO.parent.add: 'rakudo/t/spec/packages/Test-Helpers';
use Test::Util;

# L<S09/Sized types/Sized low-level types are named most generally by appending the number of bits to a generic low-level type name>

my $type = 'int64';

my ($minval,$maxval) = ::($type).Range.int-bounds;

try { EVAL ""my $type \$var = {$minval-1}"" };

use nqp;
nqp::say(""Here"");

EVAL(""my $type \$var = 0; \$var++; \$var"");
EVAL(""my $type \$var = 1; \$var--; \$var"");

(yes, really, all the modules are needed too except the nqp)
Under gdb that looks like this:
(gdb) r
Starting program: /home/nick/Sandpit/moar-g/bin/moar --libpath=/home/nick/Perl/rakudo --libpath=/home/nick/Perl/rakudo/blib --libpath=/home/nick/Sandpit/moar-g/share/nqp/lib /home/nick/Perl/rakudo/rakudo.moarvm -Ilib ../boom.pl
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
[New Thread 0x7ffff6e69700 (LWP 1068854)]
Here
Unhandled exception: Cannot unbox 64 bit wide bigint into native integer
[Thread 0x7ffff6e69700 (LWP 1068854) exited]
[Inferior 1 (process 1068850) exited with code 01]
(gdb) b MVM_exception_throw_adhoc
Breakpoint 1 at 0x7ffff7817c7e: file src/core/exceptions.c, line 878.
(gdb) r
Starting program: /home/nick/Sandpit/moar-g/bin/moar --libpath=/home/nick/Perl/rakudo --libpath=/home/nick/Perl/rakudo/blib --libpath=/home/nick/Sandpit/moar-g/share/nqp/lib /home/nick/Perl/rakudo/rakudo.moarvm -Ilib ../boom.pl
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
[New Thread 0x7ffff6e69700 (LWP 1068856)]

Thread 1 ""moar"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x55555555aee0,
    messageFormat=0x7ffff7a35da8 ""Cannot stringify this object of type %s (%s)"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) c
Continuing.

Thread 1 ""moar"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x55555555aee0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) up
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x55555555aee0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
31              MVM_exception_throw_adhoc(tc, ""Cannot unbox %d bit wide bigint into native integer"", bits);
(gdb) p *a
$1 = {used = 2, alloc = 32, sign = 1, dp = 0x55555820e170}
(gdb) p a->dp[0]
$2 = 1
(gdb) p a->dp[1]
$3 = 8
(gdb) where
#0  MVM_exception_throw_adhoc (tc=0x55555555aee0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x55555555aee0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
#2  0x00007ffff78efa10 in get_int (tc=0x55555555aee0, st=0x5555572409c8,
    root=0x7ffff70f85e0, data=0x7ffff70f8600)
    at src/6model/reprs/P6bigint.c:117
#3  0x00007ffff78d3e4c in get_int (tc=0x55555555aee0, st=0x555557241008,
    root=0x7ffff70f85e0, data=0x7ffff70f85f8)
    at src/6model/reprs/P6opaque.c:521
#4  0x00007ffff78bdd58 in MVM_repr_get_int (tc=0x55555555aee0,
    obj=0x7ffff70f85e0) at src/6model/reprconv.c:617
#5  0x00007ffff78c388d in MVM_6model_container_decont_i (tc=0x55555555aee0,
    cont=0x7ffff70f85e0, res=0x55555820e108) at src/6model/containers.c:815
#6  0x00007ffff783ca93 in MVM_interp_run (tc=0x55555555aee0,
    initial_invoke=0x7ffff79c2160 <toplevel_initial_invoke>,
    invoke_data=0x5555555c0128, outer_runloop=0x0) at src/core/interp.c:4569
#7  0x00007ffff79c22da in MVM_vm_run_file (instance=0x55555555a2a0,
    filename=0x7fffffffe6af ""/home/nick/Perl/rakudo/rakudo.moarvm"")
    at src/moar.c:486
#8  0x0000555555555a44 in main (argc=7, argv=0x7fffffffe378) at src/main.c:305
(gdb) c
Continuing.
Here
[Switching to Thread 0x7ffff6e69700 (LWP 1068856)]

Thread 2 ""spesh optimizer"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x5555555ad5c0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) up
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x5555555ad5c0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
31              MVM_exception_throw_adhoc(tc, ""Cannot unbox %d bit wide bigint into native integer"", bits);
(gdb) p *a
$4 = {used = 2, alloc = 32, sign = 1, dp = 0x55555820e170}
(gdb) p a->dp[0]
$5 = 1
(gdb) p a->dp[1]
$6 = 8
(gdb) where
#0  MVM_exception_throw_adhoc (tc=0x5555555ad5c0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x5555555ad5c0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
#2  0x00007ffff78efa10 in get_int (tc=0x5555555ad5c0, st=0x5555572409c8,
    root=0x7ffff70f85e0, data=0x7ffff70f8600)
    at src/6model/reprs/P6bigint.c:117
#3  0x00007ffff78d3e4c in get_int (tc=0x5555555ad5c0, st=0x555557241008,
    root=0x7ffff70f85e0, data=0x7ffff70f85f8)
    at src/6model/reprs/P6opaque.c:521
#4  0x00007ffff78bdd58 in MVM_repr_get_int (tc=0x5555555ad5c0,
    obj=0x7ffff70f85e0) at src/6model/reprconv.c:617
#5  0x00007ffff78dad0a in spesh (tc=0x5555555ad5c0, st=0x555557241008,
    g=0x7fffefb70610, bb=0x7fffeef49228, ins=0x7fffeef48e60)
    at src/6model/reprs/P6opaque.c:1900
#6  0x00007ffff795234f in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef49228, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3273
#7  0x00007ffff795247c in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f88, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3307
#8  0x00007ffff795247c in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f00, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3307
#9  0x00007ffff79524ff in post_inline_pass (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f00) at src/spesh/optimize.c:3315
#10 0x00007ffff7952cb4 in MVM_spesh_optimize (tc=0x5555555ad5c0,
    g=0x7fffefb70610, p=0x7fffefbadde0) at src/spesh/optimize.c:3459
#11 0x00007ffff793cc60 in MVM_spesh_candidate_add (tc=0x5555555ad5c0,
    p=0x7fffefbadde0) at src/spesh/candidate.c:85
#12 0x00007ffff795e19d in worker (tc=0x5555555ad5c0,
    callsite=0x7ffff7fc8760 <null_args_callsite>, args=0x0)
    at src/spesh/worker.c:24
#13 0x00007ffff78ce1d5 in invoke_handler (tc=0x5555555ad5c0,
    invokee=0x5555555a9270, callsite=0x7ffff7fc8760 <null_args_callsite>,
    args=0x0) at src/6model/reprs/MVMCFunction.c:9
#14 0x00007ffff7865a57 in thread_initial_invoke (tc=0x5555555ad5c0,
    data=0x5555555aea60) at src/core/threads.c:59
#15 0x00007ffff78198cb in MVM_interp_run (tc=0x5555555ad5c0,
    initial_invoke=0x7ffff78659cc <thread_initial_invoke>,
    invoke_data=0x5555555aea60, outer_runloop=0x0) at src/core/interp.c:159
#16 0x00007ffff7865b1b in start_thread (data=0x5555555aea60)
    at src/core/threads.c:87
#17 0x00007ffff72deea7 in start_thread (arg=<optimized out>)
    at pthread_create.c:477
#18 0x00007ffff7539d4f in clone ()
    at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
(gdb)

Note that

The first bigint exception is the value -0x8000000000000001
It is in the try block
The here is then printed
The second exception is also for the value -0x8000000000000001
But that is in the code EVAL(""my $type \$var = 0; \$var++; \$var"");

So somehow spesh is mighty confused
Attached patch fixes the specific bug. Please check that I've not doe anything daft - I am not at all familiar with either the code or the architecture
Second bug - the bigger picture

why is spesh getting confused?
why isn't it handling exceptions gracefully (or alternatively catching them and panicking?)","why isn't it handling exceptions gracefully (or alternatively catching them and panicking?)

It may be worth patching the code that prints an exception and exits, to check if we're running on the specializer or event loop thread, and if so mention that as part of the reporting (and probably promote it to a panic). It should never happen, and if it does then it means we've got an internal mistake. I don't know that it's recoverable.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1386,2020-11-20T20:21:33Z,2020-11-22T19:42:44Z,2020-11-24T12:13:39Z,MERGED,True,38,4,1,https://github.com/nwc10,"P6opaque's `spesh` must handle P6bigint values inline, as some are too big",1,[],https://github.com/MoarVM/MoarVM/pull/1386,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1386#issuecomment-732936296,"I think that there might actually be two PRs in one here.
The first is what this branch actually fixes.
With MVM_SPESH_NODELAY=1 t/spec/S02-types/declare.rakudo.moar and t/spec/S02-types/int-uint.rakudo.moar fail with an exception Unhandled exception: Cannot unbox 64 bit wide bigint into native integer
Minimum test case I can golf it down to is
use v6;

use Test;
use lib $?FILE.IO.parent.add: 'rakudo/t/spec/packages/Test-Helpers';
use Test::Util;

# L<S09/Sized types/Sized low-level types are named most generally by appending the number of bits to a generic low-level type name>

my $type = 'int64';

my ($minval,$maxval) = ::($type).Range.int-bounds;

try { EVAL ""my $type \$var = {$minval-1}"" };

use nqp;
nqp::say(""Here"");

EVAL(""my $type \$var = 0; \$var++; \$var"");
EVAL(""my $type \$var = 1; \$var--; \$var"");

(yes, really, all the modules are needed too except the nqp)
Under gdb that looks like this:
(gdb) r
Starting program: /home/nick/Sandpit/moar-g/bin/moar --libpath=/home/nick/Perl/rakudo --libpath=/home/nick/Perl/rakudo/blib --libpath=/home/nick/Sandpit/moar-g/share/nqp/lib /home/nick/Perl/rakudo/rakudo.moarvm -Ilib ../boom.pl
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
[New Thread 0x7ffff6e69700 (LWP 1068854)]
Here
Unhandled exception: Cannot unbox 64 bit wide bigint into native integer
[Thread 0x7ffff6e69700 (LWP 1068854) exited]
[Inferior 1 (process 1068850) exited with code 01]
(gdb) b MVM_exception_throw_adhoc
Breakpoint 1 at 0x7ffff7817c7e: file src/core/exceptions.c, line 878.
(gdb) r
Starting program: /home/nick/Sandpit/moar-g/bin/moar --libpath=/home/nick/Perl/rakudo --libpath=/home/nick/Perl/rakudo/blib --libpath=/home/nick/Sandpit/moar-g/share/nqp/lib /home/nick/Perl/rakudo/rakudo.moarvm -Ilib ../boom.pl
[Thread debugging using libthread_db enabled]
Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".
[New Thread 0x7ffff6e69700 (LWP 1068856)]

Thread 1 ""moar"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x55555555aee0,
    messageFormat=0x7ffff7a35da8 ""Cannot stringify this object of type %s (%s)"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) c
Continuing.

Thread 1 ""moar"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x55555555aee0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) up
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x55555555aee0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
31              MVM_exception_throw_adhoc(tc, ""Cannot unbox %d bit wide bigint into native integer"", bits);
(gdb) p *a
$1 = {used = 2, alloc = 32, sign = 1, dp = 0x55555820e170}
(gdb) p a->dp[0]
$2 = 1
(gdb) p a->dp[1]
$3 = 8
(gdb) where
#0  MVM_exception_throw_adhoc (tc=0x55555555aee0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x55555555aee0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
#2  0x00007ffff78efa10 in get_int (tc=0x55555555aee0, st=0x5555572409c8,
    root=0x7ffff70f85e0, data=0x7ffff70f8600)
    at src/6model/reprs/P6bigint.c:117
#3  0x00007ffff78d3e4c in get_int (tc=0x55555555aee0, st=0x555557241008,
    root=0x7ffff70f85e0, data=0x7ffff70f85f8)
    at src/6model/reprs/P6opaque.c:521
#4  0x00007ffff78bdd58 in MVM_repr_get_int (tc=0x55555555aee0,
    obj=0x7ffff70f85e0) at src/6model/reprconv.c:617
#5  0x00007ffff78c388d in MVM_6model_container_decont_i (tc=0x55555555aee0,
    cont=0x7ffff70f85e0, res=0x55555820e108) at src/6model/containers.c:815
#6  0x00007ffff783ca93 in MVM_interp_run (tc=0x55555555aee0,
    initial_invoke=0x7ffff79c2160 <toplevel_initial_invoke>,
    invoke_data=0x5555555c0128, outer_runloop=0x0) at src/core/interp.c:4569
#7  0x00007ffff79c22da in MVM_vm_run_file (instance=0x55555555a2a0,
    filename=0x7fffffffe6af ""/home/nick/Perl/rakudo/rakudo.moarvm"")
    at src/moar.c:486
#8  0x0000555555555a44 in main (argc=7, argv=0x7fffffffe378) at src/main.c:305
(gdb) c
Continuing.
Here
[Switching to Thread 0x7ffff6e69700 (LWP 1068856)]

Thread 2 ""spesh optimizer"" hit Breakpoint 1, MVM_exception_throw_adhoc (
    tc=0x5555555ad5c0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
878         va_start(args, messageFormat);
(gdb) up
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x5555555ad5c0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
31              MVM_exception_throw_adhoc(tc, ""Cannot unbox %d bit wide bigint into native integer"", bits);
(gdb) p *a
$4 = {used = 2, alloc = 32, sign = 1, dp = 0x55555820e170}
(gdb) p a->dp[0]
$5 = 1
(gdb) p a->dp[1]
$6 = 8
(gdb) where
#0  MVM_exception_throw_adhoc (tc=0x5555555ad5c0,
    messageFormat=0x7ffff7a4a680 ""Cannot unbox %d bit wide bigint into native integer"") at src/core/exceptions.c:878
#1  0x00007ffff78ef5ce in mp_get_int64 (tc=0x5555555ad5c0, a=0x55555820e150)
    at src/6model/reprs/P6bigint.c:31
#2  0x00007ffff78efa10 in get_int (tc=0x5555555ad5c0, st=0x5555572409c8,
    root=0x7ffff70f85e0, data=0x7ffff70f8600)
    at src/6model/reprs/P6bigint.c:117
#3  0x00007ffff78d3e4c in get_int (tc=0x5555555ad5c0, st=0x555557241008,
    root=0x7ffff70f85e0, data=0x7ffff70f85f8)
    at src/6model/reprs/P6opaque.c:521
#4  0x00007ffff78bdd58 in MVM_repr_get_int (tc=0x5555555ad5c0,
    obj=0x7ffff70f85e0) at src/6model/reprconv.c:617
#5  0x00007ffff78dad0a in spesh (tc=0x5555555ad5c0, st=0x555557241008,
    g=0x7fffefb70610, bb=0x7fffeef49228, ins=0x7fffeef48e60)
    at src/6model/reprs/P6opaque.c:1900
#6  0x00007ffff795234f in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef49228, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3273
#7  0x00007ffff795247c in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f88, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3307
#8  0x00007ffff795247c in post_inline_visit_bb (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f00, pips=0x7ffff6e671a0)
    at src/spesh/optimize.c:3307
#9  0x00007ffff79524ff in post_inline_pass (tc=0x5555555ad5c0,
    g=0x7fffefb70610, bb=0x7fffeef48f00) at src/spesh/optimize.c:3315
#10 0x00007ffff7952cb4 in MVM_spesh_optimize (tc=0x5555555ad5c0,
    g=0x7fffefb70610, p=0x7fffefbadde0) at src/spesh/optimize.c:3459
#11 0x00007ffff793cc60 in MVM_spesh_candidate_add (tc=0x5555555ad5c0,
    p=0x7fffefbadde0) at src/spesh/candidate.c:85
#12 0x00007ffff795e19d in worker (tc=0x5555555ad5c0,
    callsite=0x7ffff7fc8760 <null_args_callsite>, args=0x0)
    at src/spesh/worker.c:24
#13 0x00007ffff78ce1d5 in invoke_handler (tc=0x5555555ad5c0,
    invokee=0x5555555a9270, callsite=0x7ffff7fc8760 <null_args_callsite>,
    args=0x0) at src/6model/reprs/MVMCFunction.c:9
#14 0x00007ffff7865a57 in thread_initial_invoke (tc=0x5555555ad5c0,
    data=0x5555555aea60) at src/core/threads.c:59
#15 0x00007ffff78198cb in MVM_interp_run (tc=0x5555555ad5c0,
    initial_invoke=0x7ffff78659cc <thread_initial_invoke>,
    invoke_data=0x5555555aea60, outer_runloop=0x0) at src/core/interp.c:159
#16 0x00007ffff7865b1b in start_thread (data=0x5555555aea60)
    at src/core/threads.c:87
#17 0x00007ffff72deea7 in start_thread (arg=<optimized out>)
    at pthread_create.c:477
#18 0x00007ffff7539d4f in clone ()
    at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
(gdb)

Note that

The first bigint exception is the value -0x8000000000000001
It is in the try block
The here is then printed
The second exception is also for the value -0x8000000000000001
But that is in the code EVAL(""my $type \$var = 0; \$var++; \$var"");

So somehow spesh is mighty confused
Attached patch fixes the specific bug. Please check that I've not doe anything daft - I am not at all familiar with either the code or the architecture
Second bug - the bigger picture

why is spesh getting confused?
why isn't it handling exceptions gracefully (or alternatively catching them and panicking?)","why isn't it handling exceptions gracefully (or alternatively catching them and panicking?)

It may be worth patching the code that prints an exception and exits, to check if we're running on the specializer or event loop thread, and if so mention that as part of the reporting (and probably promote it to a panic). It should never happen, and if it does then it means we've got an internal mistake. I don't know that it's recoverable.

Something like #1390?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1388,2020-11-21T11:47:49Z,2020-11-21T12:12:43Z,2020-11-21T12:12:48Z,MERGED,True,29,1,2,https://github.com/Altai-man,2020.11,2,[],https://github.com/MoarVM/MoarVM/pull/1388,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1388,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1389,2020-11-24T11:37:49Z,2020-11-24T14:17:41Z,2020-11-24T14:17:52Z,MERGED,True,10,3,3,https://github.com/nwc10,D'oh! We need to set MVM_running_threads_context.,1,[],https://github.com/MoarVM/MoarVM/pull/1389,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1389,"Add MVM_set_running_threads_context which sets the value to be returned
from MVM_get_running_threads_context. This fixes a bug that I introduced
in commits 4cfde6e and ac941c0. It was not spotted because
the only place that currently calls MVM_get_running_threads_context doesn't
ever actually need the value.","Add MVM_set_running_threads_context which sets the value to be returned
from MVM_get_running_threads_context. This fixes a bug that I introduced
in commits 4cfde6e and ac941c0. It was not spotted because
the only place that currently calls MVM_get_running_threads_context doesn't
ever actually need the value.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1390,2020-11-24T12:12:51Z,2020-11-27T13:47:44Z,2020-11-27T13:47:47Z,MERGED,True,37,10,1,https://github.com/nwc10,Exceptions in spesh should oops,2,[],https://github.com/MoarVM/MoarVM/pull/1390,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1390,"Calls to MVM_exception_throw_adhoc and MVM_oops now report if they are in the spesh worker thread or the event loop thread, and exceptions thrown in these threads are treated as oopses, and exit the process immediately.
As suggested in #1386 (comment),
Additionally oops with a NULL tc is treated reported and then triggers a coredump (instead of causing a SEGV and causing a coredump anyway)","Calls to MVM_exception_throw_adhoc and MVM_oops now report if they are in the spesh worker thread or the event loop thread, and exceptions thrown in these threads are treated as oopses, and exit the process immediately.
As suggested in #1386 (comment),
Additionally oops with a NULL tc is treated reported and then triggers a coredump (instead of causing a SEGV and causing a coredump anyway)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1391,2020-11-24T12:23:42Z,2020-11-24T21:23:43Z,2020-11-24T21:23:48Z,MERGED,True,51,71,9,https://github.com/nwc10,Implement MVM_nativecall_find_thread_context using MVM_get_running_threads_context,3,[],https://github.com/MoarVM/MoarVM/pull/1391,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1391,"O(1) is better than O(n) :-)
And no need for a mutex is infinitely more efficient.","O(1) is better than O(n) :-)
And no need for a mutex is infinitely more efficient.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1392,2020-11-27T17:56:02Z,2020-11-30T21:01:27Z,2020-11-30T21:01:30Z,MERGED,True,9,3,1,https://github.com/jnthn,Improve performance of repeated `unshift`ing,2,[],https://github.com/MoarVM/MoarVM/pull/1392,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1392,"Prior to this, we always created a fixed amount of extra space (8
elements) at the start of the array, regardless of array size. With
this change we start accounting for the number of elements in the
array. This will make no difference for steady state unshift/pop,
but for situations where we repeatedly unshift will bring the
performance in line with that of push. Fixes #1382.","Prior to this, we always created a fixed amount of extra space (8
elements) at the start of the array, regardless of array size. With
this change we start accounting for the number of elements in the
array. This will make no difference for steady state unshift/pop,
but for situations where we repeatedly unshift will bring the
performance in line with that of push. Fixes #1382.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1392,2020-11-27T17:56:02Z,2020-11-30T21:01:27Z,2020-11-30T21:01:30Z,MERGED,True,9,3,1,https://github.com/jnthn,Improve performance of repeated `unshift`ing,2,[],https://github.com/MoarVM/MoarVM/pull/1392,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1392#issuecomment-734939463,"Prior to this, we always created a fixed amount of extra space (8
elements) at the start of the array, regardless of array size. With
this change we start accounting for the number of elements in the
array. This will make no difference for steady state unshift/pop,
but for situations where we repeatedly unshift will bring the
performance in line with that of push. Fixes #1382.","While unshift still isn't quite as fast as push, it's at least in the ballpark:
jnthn@lviv:~/dev/MoarVM$ cat push.raku 
my int @a = ();
for (1..1_000_000) -> int $item {
    @a.push($item);
}
jnthn@lviv:~/dev/MoarVM$ cat unshift.raku 
my int @a = ();
for (1..1_000_000) -> int $item {
    @a.unshift($item);
}
jnthn@lviv:~/dev/MoarVM$ time raku push.raku 

real	0m0.247s
user	0m0.228s
sys	0m0.060s
jnthn@lviv:~/dev/MoarVM$ time raku unshift.raku

real	0m0.288s
user	0m0.252s
sys	0m0.068s",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1393,2020-11-29T21:28:21Z,2020-11-29T22:26:55Z,2020-11-29T22:26:56Z,MERGED,True,12,1,2,https://github.com/MasterDuke17,Early exit gc_mark for VMArray+MVMHash if able,1,[],https://github.com/MoarVM/MoarVM/pull/1393,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1393,"Don't need to go through the setup work to try and mark the held
elements if there aren't in fact any elements.
I wasn't sure how to best benchmark any actual time saved, but the
early exit triggered ~4m times for VMArray and ~500k times for MVMHash
when compiling just Rakudo's CORE.c setting.","Don't need to go through the setup work to try and mark the held
elements if there aren't in fact any elements.
I wasn't sure how to best benchmark any actual time saved, but the
early exit triggered ~4m times for VMArray and ~500k times for MVMHash
when compiling just Rakudo's CORE.c setting.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1394,2020-12-01T11:55:12Z,2020-12-01T21:46:48Z,2020-12-01T21:46:52Z,MERGED,True,13,13,8,https://github.com/lizmat,Update some docs to Raku era,1,[],https://github.com/MoarVM/MoarVM/pull/1394,https://github.com/lizmat,1,https://github.com/MoarVM/MoarVM/pull/1394,Unless they're specifically historically inclined.,Unless they're specifically historically inclined.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1398,2020-12-05T11:09:09Z,2020-12-05T23:44:28Z,2020-12-05T23:44:28Z,MERGED,True,21,2,1,https://github.com/cognominal,"fix #1395 : On Apple Silicon with arch arm64, does not attempt to JIT",2,[],https://github.com/MoarVM/MoarVM/pull/1398,https://github.com/cognominal,1,https://github.com/MoarVM/MoarVM/pull/1398,,,True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1399,2020-12-07T19:57:52Z,2020-12-20T19:32:45Z,2020-12-20T19:32:46Z,MERGED,True,27,26,10,https://github.com/MasterDuke17,Fix some simple things the clang static analyzer found,5,[],https://github.com/MoarVM/MoarVM/pull/1399,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1399,"It was easy to run make clean; scan-build make install and it produces an html report. There are 112 more things it found, but verifying them is a bit trickier.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","It was easy to run make clean; scan-build make install and it produces an html report. There are 112 more things it found, but verifying them is a bit trickier.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1401,2020-12-13T21:10:20Z,2021-01-10T13:45:31Z,2021-01-10T13:45:34Z,MERGED,True,30,30,21,https://github.com/lizmat,Modern raku script extensions,17,[],https://github.com/MoarVM/MoarVM/pull/1401,https://github.com/lizmat,1,https://github.com/MoarVM/MoarVM/pull/1401,Change the extensions of helper scripts from .p6 to .raku and adjust comments and pod accordingly.,Change the extensions of helper scripts from .p6 to .raku and adjust comments and pod accordingly.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1401,2020-12-13T21:10:20Z,2021-01-10T13:45:31Z,2021-01-10T13:45:34Z,MERGED,True,30,30,21,https://github.com/lizmat,Modern raku script extensions,17,[],https://github.com/MoarVM/MoarVM/pull/1401,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1401#issuecomment-744285602,Change the extensions of helper scripts from .p6 to .raku and adjust comments and pod accordingly.,Missing at least a change in https://github.com/MoarVM/MoarVM/blob/modern-raku-script-extensions/src/core/oplist#L4 as well,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1402,2020-12-15T12:47:01Z,,2022-02-22T11:15:27Z,OPEN,False,624,1116,27,https://github.com/MasterDuke17,Switch from tommath to gmp,44,[],https://github.com/MoarVM/MoarVM/pull/1402,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1402,This makes all the build and code changes necessary to use GMP for our big integer library instead of LibTomMath. Uses the ShiftMediaProject fork of GMP because it adds support for building with MSVC (though this PR does not (yet) do anything to configure it for our CI or vice versa).,This makes all the build and code changes necessary to use GMP for our big integer library instead of LibTomMath. Uses the ShiftMediaProject fork of GMP because it adds support for building with MSVC (though this PR does not (yet) do anything to configure it for our CI or vice versa).,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1402,2020-12-15T12:47:01Z,,2022-02-22T11:15:27Z,OPEN,False,624,1116,27,https://github.com/MasterDuke17,Switch from tommath to gmp,44,[],https://github.com/MoarVM/MoarVM/pull/1402,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1402#issuecomment-745270833,This makes all the build and code changes necessary to use GMP for our big integer library instead of LibTomMath. Uses the ShiftMediaProject fork of GMP because it adds support for building with MSVC (though this PR does not (yet) do anything to configure it for our CI or vice versa).,Could you re-iterate the advantages of this change?  Would be nice copy for the RWN when this is merged :-),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1402,2020-12-15T12:47:01Z,,2022-02-22T11:15:27Z,OPEN,False,624,1116,27,https://github.com/MasterDuke17,Switch from tommath to gmp,44,[],https://github.com/MoarVM/MoarVM/pull/1402,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1402#issuecomment-745280690,This makes all the build and code changes necessary to use GMP for our big integer library instead of LibTomMath. Uses the ShiftMediaProject fork of GMP because it adds support for building with MSVC (though this PR does not (yet) do anything to configure it for our CI or vice versa).,"Could you re-iterate the advantages of this change? Would be nice copy for the RWN when this is merged :-)

Yeah, I'll add some more explanation and benchmarks before this is to be merged. Just getting into a PR now to see what CI has to say.",True,{'HEART': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1402,2020-12-15T12:47:01Z,,2022-02-22T11:15:27Z,OPEN,False,624,1116,27,https://github.com/MasterDuke17,Switch from tommath to gmp,44,[],https://github.com/MoarVM/MoarVM/pull/1402,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/1402#issuecomment-745285548,This makes all the build and code changes necessary to use GMP for our big integer library instead of LibTomMath. Uses the ShiftMediaProject fork of GMP because it adds support for building with MSVC (though this PR does not (yet) do anything to configure it for our CI or vice versa).,"Does this include the option of using a system gmp as well as building one? (Both matter, the former is probably a requirement for packaging.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1402,2020-12-15T12:47:01Z,,2022-02-22T11:15:27Z,OPEN,False,624,1116,27,https://github.com/MasterDuke17,Switch from tommath to gmp,44,[],https://github.com/MoarVM/MoarVM/pull/1402,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1402#issuecomment-745288814,This makes all the build and code changes necessary to use GMP for our big integer library instead of LibTomMath. Uses the ShiftMediaProject fork of GMP because it adds support for building with MSVC (though this PR does not (yet) do anything to configure it for our CI or vice versa).,"Does this include the option of using a system gmp as well as building one? (Both matter, the former is probably a requirement for packaging.)

Theoretically yes, but I haven't officially tested it yet (I unofficially did when at first I couldn't get it to use the .a we built). I'll give that a try now.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1402,2020-12-15T12:47:01Z,,2022-02-22T11:15:27Z,OPEN,False,624,1116,27,https://github.com/MasterDuke17,Switch from tommath to gmp,44,[],https://github.com/MoarVM/MoarVM/pull/1402,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1402#issuecomment-745298521,This makes all the build and code changes necessary to use GMP for our big integer library instead of LibTomMath. Uses the ShiftMediaProject fork of GMP because it adds support for building with MSVC (though this PR does not (yet) do anything to configure it for our CI or vice versa).,"Theoretically yes, but I haven't officially tested it yet (I unofficially did when at first I couldn't get it to use the .a we built). I'll give that a try now.

$ make realclean
<...>
$ perl Configure.pl --prefix=/home/dan/Source/perl6/install/ --has-gmp --debug=3 --telemeh --dtrace && make -j12 install
<...>
$ find . -name 'libgmp.a'
$ ldd libmoar.so 
        linux-vdso.so.1 (0x00007ffd07f3f000)
        libgmp.so.10 => /usr/lib/libgmp.so.10 (0x00007fdcde3a9000)
        libm.so.6 => /usr/lib/libm.so.6 (0x00007fdcde263000)
        libpthread.so.0 => /usr/lib/libpthread.so.0 (0x00007fdcde241000)
        librt.so.1 => /usr/lib/librt.so.1 (0x00007fdcde236000)
        libdl.so.2 => /usr/lib/libdl.so.2 (0x00007fdcde230000)
        libzstd.so.1 => /usr/lib/libzstd.so.1 (0x00007fdcde15e000)
        libc.so.6 => /usr/lib/libc.so.6 (0x00007fdcddf93000)
        /usr/lib64/ld-linux-x86-64.so.2 (0x00007fdcdedbd000)

MoarMV builds ok, NQP builds ok and passes make m-test, Rakudo builds ok and passes make m-test. I'm now getting two tests fail in a make m-spectest, but that happens with --has-gmp and without (I think it's something with a correction to MVM_bigint_div_num for the rebase to master I recently force pushed).
not ok 105 - FatRat + FatRat works (-0.25, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000864)
# Failed test 'FatRat + FatRat works (-0.25, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000864)'
# at t/spec/S32-num/fatrat.t line 124
#     expected approximately: -0.25
#                        got: -0.24999999999999999999999999999999999999999999999999999999999999999999999999999136
# maximum relative tolerance: 1e-06
# actual relative difference: 3
not ok 106 - FatRat + FatRat works (-0.25, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000864)
# Failed test 'FatRat + FatRat works (-0.25, 0.00000000000000000000000000000000000000000000000000000000000000000000000000000864)'
# at t/spec/S32-num/fatrat.t line 125
#     expected approximately: -0.25
#                        got: -0.24999999999999999999999999999999999999999999999999999999999999999999999999999136
# maximum relative tolerance: 1e-06
# actual relative difference: 3",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1402,2020-12-15T12:47:01Z,,2022-02-22T11:15:27Z,OPEN,False,624,1116,27,https://github.com/MasterDuke17,Switch from tommath to gmp,44,[],https://github.com/MoarVM/MoarVM/pull/1402,https://github.com/MasterDuke17,7,https://github.com/MoarVM/MoarVM/pull/1402#issuecomment-745563782,This makes all the build and code changes necessary to use GMP for our big integer library instead of LibTomMath. Uses the ShiftMediaProject fork of GMP because it adds support for building with MSVC (though this PR does not (yet) do anything to configure it for our CI or vice versa).,"I'm now getting two tests fail in a make m-spectest, but that happens with --has-gmp and without (I think it's something with a correction to MVM_bigint_div_num for the rebase to master I recently force pushed).

Now fixed with a force push.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1402,2020-12-15T12:47:01Z,,2022-02-22T11:15:27Z,OPEN,False,624,1116,27,https://github.com/MasterDuke17,Switch from tommath to gmp,44,[],https://github.com/MoarVM/MoarVM/pull/1402,https://github.com/patrickbkr,8,https://github.com/MoarVM/MoarVM/pull/1402#issuecomment-822784500,This makes all the build and code changes necessary to use GMP for our big integer library instead of LibTomMath. Uses the ShiftMediaProject fork of GMP because it adds support for building with MSVC (though this PR does not (yet) do anything to configure it for our CI or vice versa).,"ShiftMediaProjects GMP uses Visual Studio Project files for the build, they don't provide Makefiles. So we need to handle building GMP on the MSVC toolchain differently.
There is the MSBuild command line tool, which can build Visual Studio projects. I'm pretty sure it is already included in the Build Tools for Visual Studio (that's basically an installer that install all sorts of MS tools) which we already rely on, so it's fair to just depend on it.

https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line
https://docs.microsoft.com/en-us/cpp/build/msbuild-visual-cpp",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1403,2020-12-15T15:11:52Z,2021-01-10T21:41:34Z,2021-01-22T13:35:53Z,MERGED,True,38,20,2,https://github.com/niner,"Fix ""Corrupt multi dispatch cache"" panic in concurrent code",3,[],https://github.com/MoarVM/MoarVM/pull/1403,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1403,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1405,2020-12-16T15:08:10Z,2020-12-16T16:37:16Z,2022-02-09T21:04:43Z,MERGED,True,16,2,3,https://github.com/niner,Make curcode OP inlinable,1,[],https://github.com/MoarVM/MoarVM/pull/1405,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1405,"curcode was marked :noinline as tc->cur_frame->code_ref would point at the
inliner, not at the inlinee, thus giving the wrong result. As jnthn++ noticed
though, we have the right code_ref easily available in a register, since we
need it for several ops already. So just turn the curcode into a set, reading
from the register holding the inlinee's code_ref.","curcode was marked :noinline as tc->cur_frame->code_ref would point at the
inliner, not at the inlinee, thus giving the wrong result. As jnthn++ noticed
though, we have the right code_ref easily available in a register, since we
need it for several ops already. So just turn the curcode into a set, reading
from the register holding the inlinee's code_ref.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1406,2020-12-17T10:27:05Z,2020-12-17T10:27:37Z,2020-12-17T10:27:43Z,MERGED,True,2,2,1,https://github.com/timgates42,"docs: fix simple typo, instruciton -> instruction",1,[],https://github.com/MoarVM/MoarVM/pull/1406,https://github.com/timgates42,1,https://github.com/MoarVM/MoarVM/pull/1406,"There is a small typo in src/spesh/args.c.
Should read instruction rather than instruciton.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in src/spesh/args.c.
Should read instruction rather than instruciton.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1406,2020-12-17T10:27:05Z,2020-12-17T10:27:37Z,2020-12-17T10:27:43Z,MERGED,True,2,2,1,https://github.com/timgates42,"docs: fix simple typo, instruciton -> instruction",1,[],https://github.com/MoarVM/MoarVM/pull/1406,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1406#issuecomment-747352335,"There is a small typo in src/spesh/args.c.
Should read instruction rather than instruciton.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",Thanks!,True,"{'THUMBS_UP': ['https://github.com/timgates42', 'https://github.com/patrickbkr']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1407,2020-12-19T13:03:51Z,2020-12-19T13:10:45Z,2020-12-19T13:11:55Z,MERGED,True,44,1,2,https://github.com/Altai-man,2020.12 release,2,[],https://github.com/MoarVM/MoarVM/pull/1407,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1407,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1407,2020-12-19T13:03:51Z,2020-12-19T13:10:45Z,2020-12-19T13:11:55Z,MERGED,True,44,1,2,https://github.com/Altai-man,2020.12 release,2,[],https://github.com/MoarVM/MoarVM/pull/1407,https://github.com/Altai-man,2,https://github.com/MoarVM/MoarVM/pull/1407#issuecomment-748473020,,"The website is updated, merging~",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1408,2020-12-23T16:37:22Z,2020-12-30T21:50:41Z,2020-12-30T21:50:45Z,MERGED,True,11,6,1,https://github.com/patrickbkr,Change `procspawnasync` to explicitly take the program name,1,[],https://github.com/MoarVM/MoarVM/pull/1408,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1408,"As the value passed as program name and arg0 need to be different in some
cases (e.g. a space in the program name on Windows) we need to retrieve
both separately. Rakudo can then dictate what each value should be.
Part of a fix for rakudo/rakudo#4117
Needs to be merged together with a respective Rakudo PR.","As the value passed as program name and arg0 need to be different in some
cases (e.g. a space in the program name on Windows) we need to retrieve
both separately. Rakudo can then dictate what each value should be.
Part of a fix for rakudo/rakudo#4117
Needs to be merged together with a respective Rakudo PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1408,2020-12-23T16:37:22Z,2020-12-30T21:50:41Z,2020-12-30T21:50:45Z,MERGED,True,11,6,1,https://github.com/patrickbkr,Change `procspawnasync` to explicitly take the program name,1,[],https://github.com/MoarVM/MoarVM/pull/1408,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1408#issuecomment-752673458,"As the value passed as program name and arg0 need to be different in some
cases (e.g. a space in the program name on Windows) we need to retrieve
both separately. Rakudo can then dictate what each value should be.
Part of a fix for rakudo/rakudo#4117
Needs to be merged together with a respective Rakudo PR.","I tried to be as explicit as possible: arg_size - program name + null
 marker.
Sounds like a good place for a comment explaining this :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1410,2020-12-26T10:23:27Z,2020-12-27T09:37:14Z,2020-12-27T09:37:24Z,MERGED,True,86,0,2,https://github.com/nwc10,Fix a potential bug when all elements are individually deleted from a hash,1,[],https://github.com/MoarVM/MoarVM/pull/1410,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1410,"Two optimisations were coming together in an unforeseen way, which could
cause an assertion failure on a debugging build.
There's a space optimisation for empty hashes which only allocates the
control structure, and flags this with both cur_items and max_items
set to 0.
To avoid repeated checks in the insert code for probe distance overflows,
if an insert detects that it has caused any probe distance to hit the limit,
it signals that the next insert will need to reallocate by setting
max_items to 0.
What I'd not realised was that if a hash has a series of inserts that chance
to end with that state of ""next insert needs to reallocate"", but there are
no more inserts, then max_items remains set to 0 to flag this, and is
never ""cleared"". This usually doesn't matter, but in the specific unusual
case that the code then systematically deletes all entries in the hash
(without ever making any more inserts) that the count cur_items will
return to 0, and hence the special case ""empty hash"" optimisation flag
state is set, but with a regular allocation.
This doesn't happen reliably (it depends on hash randomisation), but could
sometimes be hit by t/spec/integration/advent2012-day14.t
To trip the assertion, both assertions and HASH_DEBUG_ITER need to be
enabled. If these aren't hit (and abort the process), I think that the
upshot of hitting this bug would be that part of a larger section of memory
would be returned to the FSA pool for a smaller bin size. Given that the
larger section of memory was still deemed allocated from its bin, and the
FSA never returns blocks of bins to free() (until global shutdown), I don't
think that this could cause any memory corruption.","Two optimisations were coming together in an unforeseen way, which could
cause an assertion failure on a debugging build.
There's a space optimisation for empty hashes which only allocates the
control structure, and flags this with both cur_items and max_items
set to 0.
To avoid repeated checks in the insert code for probe distance overflows,
if an insert detects that it has caused any probe distance to hit the limit,
it signals that the next insert will need to reallocate by setting
max_items to 0.
What I'd not realised was that if a hash has a series of inserts that chance
to end with that state of ""next insert needs to reallocate"", but there are
no more inserts, then max_items remains set to 0 to flag this, and is
never ""cleared"". This usually doesn't matter, but in the specific unusual
case that the code then systematically deletes all entries in the hash
(without ever making any more inserts) that the count cur_items will
return to 0, and hence the special case ""empty hash"" optimisation flag
state is set, but with a regular allocation.
This doesn't happen reliably (it depends on hash randomisation), but could
sometimes be hit by t/spec/integration/advent2012-day14.t
To trip the assertion, both assertions and HASH_DEBUG_ITER need to be
enabled. If these aren't hit (and abort the process), I think that the
upshot of hitting this bug would be that part of a larger section of memory
would be returned to the FSA pool for a smaller bin size. Given that the
larger section of memory was still deemed allocated from its bin, and the
FSA never returns blocks of bins to free() (until global shutdown), I don't
think that this could cause any memory corruption.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1412,2020-12-28T12:03:13Z,2020-12-29T10:36:53Z,2020-12-29T10:37:03Z,MERGED,True,140,3,8,https://github.com/nwc10,Get MoarVM building on Solaris,4,[],https://github.com/MoarVM/MoarVM/pull/1412,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1412,Currently only tested as 32 bit with gcc and gmake on Solaris 11.,Currently only tested as 32 bit with gcc and gmake on Solaris 11.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1413,2020-12-29T21:01:41Z,2021-05-06T05:56:10Z,2021-05-06T05:56:17Z,MERGED,True,475,197,9,https://github.com/nwc10,"Refactor the C compiler probe code, and add a probe for log() for negative values.",12,[],https://github.com/MoarVM/MoarVM/pull/1413,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1413,Solaris log() (and log10()) aren't POSIX conformant for the same circumstances as pow(),Solaris log() (and log10()) aren't POSIX conformant for the same circumstances as pow(),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1413,2020-12-29T21:01:41Z,2021-05-06T05:56:10Z,2021-05-06T05:56:17Z,MERGED,True,475,197,9,https://github.com/nwc10,"Refactor the C compiler probe code, and add a probe for log() for negative values.",12,[],https://github.com/MoarVM/MoarVM/pull/1413,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1413#issuecomment-832671308,Solaris log() (and log10()) aren't POSIX conformant for the same circumstances as pow(),"First commit and last 2 commits are new:

Inline build::auto::detect_native into its only caller.
Add MVM_num_isnegzero(tc, n), which tests whether n is -0.0.
More pow() corner cases that we spectest for, but Solaris gets wrong.

The others are functionally identical to the previous versions of this branch, but some have been rearranged now that Configure.pl no longer calls foo_native or foo_cross.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1414,2020-12-31T19:43:20Z,,2021-01-10T13:14:47Z,OPEN,False,38,2,1,https://github.com/nwc10,"On Solaris, get the ru_maxrss rusage with uv_resident_set_memory().",1,[],https://github.com/MoarVM/MoarVM/pull/1414,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1414,"Solaris getrusage() doesn't actually set ru_maxrss*
and despite providing an API that can get this value, UV doesn't attempt to
""fake it"" in uv_getrusage(). So we have to.
* despite first documenting that the value is in units of page size, and
explaining how to determine the page size.","Solaris getrusage() doesn't actually set ru_maxrss*
and despite providing an API that can get this value, UV doesn't attempt to
""fake it"" in uv_getrusage(). So we have to.
* despite first documenting that the value is in units of page size, and
explaining how to determine the page size.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1415,2021-01-01T11:08:57Z,2021-01-01T14:14:36Z,2021-01-01T14:14:36Z,MERGED,True,4,2,1,https://github.com/JJ,Helps build from scratch,1,[],https://github.com/MoarVM/MoarVM/pull/1415,https://github.com/JJ,1,https://github.com/MoarVM/MoarVM/pull/1415,"After trying to build it, I realized that make does not copy to prefix/bin, so that's included. Also, this might be unnecessary, but it would be good to clarify that it's not a prefix for the executable, but for everything.","After trying to build it, I realized that make does not copy to prefix/bin, so that's included. Also, this might be unnecessary, but it would be good to clarify that it's not a prefix for the executable, but for everything.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1416,2021-01-01T23:29:50Z,2021-01-15T08:32:40Z,2021-01-15T08:32:50Z,MERGED,True,217,216,6,https://github.com/patrickbkr,Switch spawnprocasync to use a separate arg for the program name,1,[],https://github.com/MoarVM/MoarVM/pull/1416,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1416,"That's a lot more obvious than putting the program name at the start of the
args list.
Prerequisite for rakudo/rakudo#4154","That's a lot more obvious than putting the program name at the start of the
args list.
Prerequisite for rakudo/rakudo#4154",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1416,2021-01-01T23:29:50Z,2021-01-15T08:32:40Z,2021-01-15T08:32:50Z,MERGED,True,217,216,6,https://github.com/patrickbkr,Switch spawnprocasync to use a separate arg for the program name,1,[],https://github.com/MoarVM/MoarVM/pull/1416,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1416#issuecomment-757478017,"That's a lot more obvious than putting the program name at the start of the
args list.
Prerequisite for rakudo/rakudo#4154","@niner Thanks for the memory leak fix and review!
Yes the change is not backwards compatible. When only merging this PR and not the other two PRs in the set (see the link in the PR description), then neither Rakudo nor NQP will build. So the three PRs will need to be merged together and the MOAR_REVISION and NQP_REVISION files bumped respectively. (That's what I did in the past in such cases.) Is there anything else I need to look out for when merging?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1417,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.","Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.",True,{'THUMBS_UP': ['https://github.com/patrickbkr']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1417#issuecomment-755168899,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.","@coke / @manchicken / (anyone else with a Mac setup) - would you be able to check that this branch doesn't break rakubrew? I don't think that it will, but I'm wary of ""unknown unknowns"".",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/coke,3,https://github.com/MoarVM/MoarVM/pull/1417#issuecomment-770262241,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.","rakubrew is problematic on OS X, but I tried a manual build of this branch:
Configure.pl  with just a prefix option completed, but:
$ make
compiling src/main.o
In file included from src/main.c:4:
src/moar.h:31:10: fatal error: 'atomic_ops.h' file not found
#include <atomic_ops.h>
         ^~~~~~~~~~~~~~
1 error generated.
make: *** [src/main.o] Error 1
$ git status
On branch probe-toolchain-cleanup
Your branch is up to date with 'origin/probe-toolchain-cleanup'.

Changes not staged for commit:
  (use ""git add <file>..."" to update what will be committed)
  (use ""git restore <file>..."" to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
        modified:   3rdparty/dyncall (modified content)
        modified:   3rdparty/libatomicops (modified content)

no changes added to commit (use ""git add"" and/or ""git commit -a"")

El_Che on IRC suggested #1425 might be related",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1417#issuecomment-770268658,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.","Er, erk, thanks.
What isn't clear to me - does rakubrew on MoarVM master with the same prefix build just fine?
in that, this error isn't one I'd expect to see caused by the changes on this branch, if the underlying cause is related to #1425.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/coke,5,https://github.com/MoarVM/MoarVM/pull/1417#issuecomment-770272327,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.",rakubrew doesn't work as is on OS X - it's an unsigned binary,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/coke,6,https://github.com/MoarVM/MoarVM/pull/1417#issuecomment-770283854,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.","Whoops - tried a clean checkout, mostly OK - was able to build moarvm & nqp, install, run a mostly successful make test.
t/nqp/113-run-command.t ................ Failed 3/8 subtests
t/nqp/111-spawnprocasync.t ............. Failed 1/4 subtests
t/nqp/114-pod-panic.t ..................

2 failures, one hang. These do NOT happen against nqp-master or nqp-2020.12 using the expected moarvms",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/nwc10,7,https://github.com/MoarVM/MoarVM/pull/1417#issuecomment-831754811,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.","Rebased onto master, with two commit messages updated (The one @niner spotted, and the other updated to state that we now have MinGW in our CI)
And so now we also get to see how this branch behaves with MinGW CI :-)
Also i now have access to MacOS sufficient to test more there, and have verified that this does not make the situation described in rakudo/rakudo#4234 worse.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/nwc10,8,https://github.com/MoarVM/MoarVM/pull/1417#issuecomment-832219518,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.","The branch doesn't (now?) hang for me on the Mac I have access to, or on the CI, so I have no idea what might have been going wrong.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/MasterDuke17,9,https://github.com/MoarVM/MoarVM/pull/1417#issuecomment-832224711,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.","The branch doesn't (now?) hang for me on the Mac I have access to, or on the CI, so I have no idea what might have been going wrong.

It was one of the unrelated-to-the-PR random fails because of an error renaming a file during precomp on Windows, so I just re-ran the failed job.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1417,2021-01-03T20:41:50Z,2021-05-05T08:53:31Z,2021-05-05T08:53:46Z,MERGED,True,157,156,3,https://github.com/nwc10,Cleanup the build system probes,10,[],https://github.com/MoarVM/MoarVM/pull/1417,https://github.com/nwc10,10,https://github.com/MoarVM/MoarVM/pull/1417#issuecomment-832478720,"Currently MoarVM doesn't build on AIX, and doesn't build well on Solaris. Fixing this requires changing some of the structure of how the build system does probes. Hence...
As a first step, these changes attempt to tidy up how we split the overrides between OS, toolchain and compiler such that any override is consistently used at exactly one level. By locally editing the code to disable some sanity checks I can ""run"" Configure.pl for any OS and confirm whether the generated files have any (unintended) changes. I believe on this branch

./Configure without parameters will generate the same Makefile etc as on master
./Configure with sensible --toolchain or --compiler options will still work (ie as we permit all combinations, nonsense like ""MSVC on AIX"" still won't work, but will likely break with a different error message)

CI will check (default) macOS and WIn32. I can check most *nix. Nothing seems to check Mingw32, but I don't think that that is at risk of being broken by these changes.
I see that @manchicken fixed the rakubrew build recently. I don't want to break this. Am I right in thinking that the configurations that need to work for it are

./Configure.pl
./Configure.pl --toolchain=gnu

(with --os=darwin set automatically)? I can't find this documented anywhere, but I might have missed something.","Spotted another goof in a commit message.
So fixed, and rebased to master.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1419,2021-01-10T12:31:54Z,2021-01-11T09:11:26Z,2022-02-09T21:04:37Z,MERGED,True,270,43,25,https://github.com/niner,Fix a bunch of memory leaks,26,[],https://github.com/MoarVM/MoarVM/pull/1419,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1419,"This PR contains fixes to assortment of memory leaks uncovered by ASAN. This covers all individual leaks that occur during a make test or make spectest but not those that need architectural changes like the whole NativeCall memory management situation, cleanup of background threads or cleanup when exceptions occur deep in the call stack.
The commits starting with ""Fix ..."" fix leaks that occur during a normal run of programs, i.e. these leaks make programs grow over time. The additional commits improve cleanup for runs with --full-cleanup, i.e. reduce ""false"" positives reported by ASAN. Proper cleanup may also help for embedding situations, so those are not purely theoretical either.
Note that this branch by itself is not enough to be able to simply run make test or make spectest and find new memory leaks. For that one needs additional patches to the build system to enable --full-cleanup everywhere and patches for proper thread cleanup. The latter are not ready yet for review and may need complete re-thinking before committing to them. If desired, I can make available these local patches. After all they have been good enough to facilitate developing these 19 memory leak fixes.","This PR contains fixes to assortment of memory leaks uncovered by ASAN. This covers all individual leaks that occur during a make test or make spectest but not those that need architectural changes like the whole NativeCall memory management situation, cleanup of background threads or cleanup when exceptions occur deep in the call stack.
The commits starting with ""Fix ..."" fix leaks that occur during a normal run of programs, i.e. these leaks make programs grow over time. The additional commits improve cleanup for runs with --full-cleanup, i.e. reduce ""false"" positives reported by ASAN. Proper cleanup may also help for embedding situations, so those are not purely theoretical either.
Note that this branch by itself is not enough to be able to simply run make test or make spectest and find new memory leaks. For that one needs additional patches to the build system to enable --full-cleanup everywhere and patches for proper thread cleanup. The latter are not ready yet for review and may need complete re-thinking before committing to them. If desired, I can make available these local patches. After all they have been good enough to facilitate developing these 19 memory leak fixes.",True,"{'HEART': ['https://github.com/Demayl'], 'THUMBS_UP': ['https://github.com/jubilatious1']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1419,2021-01-10T12:31:54Z,2021-01-11T09:11:26Z,2022-02-09T21:04:37Z,MERGED,True,270,43,25,https://github.com/niner,Fix a bunch of memory leaks,26,[],https://github.com/MoarVM/MoarVM/pull/1419,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1419#issuecomment-757545354,"This PR contains fixes to assortment of memory leaks uncovered by ASAN. This covers all individual leaks that occur during a make test or make spectest but not those that need architectural changes like the whole NativeCall memory management situation, cleanup of background threads or cleanup when exceptions occur deep in the call stack.
The commits starting with ""Fix ..."" fix leaks that occur during a normal run of programs, i.e. these leaks make programs grow over time. The additional commits improve cleanup for runs with --full-cleanup, i.e. reduce ""false"" positives reported by ASAN. Proper cleanup may also help for embedding situations, so those are not purely theoretical either.
Note that this branch by itself is not enough to be able to simply run make test or make spectest and find new memory leaks. For that one needs additional patches to the build system to enable --full-cleanup everywhere and patches for proper thread cleanup. The latter are not ready yet for review and may need complete re-thinking before committing to them. If desired, I can make available these local patches. After all they have been good enough to facilitate developing these 19 memory leak fixes.","+    MVM_free(free_sr_data);
 src/core/alloc.h:43:5: warning: attempt to free a non-heap object
And the compiler is completely right! That sould read `MVM_free(sr_data)`.
Otherwise I'd try to free the function itself.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1419,2021-01-10T12:31:54Z,2021-01-11T09:11:26Z,2022-02-09T21:04:37Z,MERGED,True,270,43,25,https://github.com/niner,Fix a bunch of memory leaks,26,[],https://github.com/MoarVM/MoarVM/pull/1419,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1419#issuecomment-757545658,"This PR contains fixes to assortment of memory leaks uncovered by ASAN. This covers all individual leaks that occur during a make test or make spectest but not those that need architectural changes like the whole NativeCall memory management situation, cleanup of background threads or cleanup when exceptions occur deep in the call stack.
The commits starting with ""Fix ..."" fix leaks that occur during a normal run of programs, i.e. these leaks make programs grow over time. The additional commits improve cleanup for runs with --full-cleanup, i.e. reduce ""false"" positives reported by ASAN. Proper cleanup may also help for embedding situations, so those are not purely theoretical either.
Note that this branch by itself is not enough to be able to simply run make test or make spectest and find new memory leaks. For that one needs additional patches to the build system to enable --full-cleanup everywhere and patches for proper thread cleanup. The latter are not ready yet for review and may need complete re-thinking before committing to them. If desired, I can make available these local patches. After all they have been good enough to facilitate developing these 19 memory leak fixes.",pushed a fixed commit,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1420,2021-01-19T14:29:07Z,2021-03-07T09:10:36Z,2021-03-07T09:10:36Z,MERGED,True,63,56,4,https://github.com/Kaiepi,Introduce platform/socket.h,3,[],https://github.com/MoarVM/MoarVM/pull/1420,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1420,"There are a couple spots in MoarVM that carry similar platform-dependent socket behaviour, and more are to come. This can be unified.","There are a couple spots in MoarVM that carry similar platform-dependent socket behaviour, and more are to come. This can be unified.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1420,2021-01-19T14:29:07Z,2021-03-07T09:10:36Z,2021-03-07T09:10:36Z,MERGED,True,63,56,4,https://github.com/Kaiepi,Introduce platform/socket.h,3,[],https://github.com/MoarVM/MoarVM/pull/1420,https://github.com/Kaiepi,2,https://github.com/MoarVM/MoarVM/pull/1420#issuecomment-791970282,"There are a couple spots in MoarVM that carry similar platform-dependent socket behaviour, and more are to come. This can be unified.",Can someone review this? This is needed so struct sockaddr and friends can be available for a REPR I introduce for Raku/problem-solving#111.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1420,2021-01-19T14:29:07Z,2021-03-07T09:10:36Z,2021-03-07T09:10:36Z,MERGED,True,63,56,4,https://github.com/Kaiepi,Introduce platform/socket.h,3,[],https://github.com/MoarVM/MoarVM/pull/1420,https://github.com/lizmat,3,https://github.com/MoarVM/MoarVM/pull/1420#issuecomment-791975408,"There are a couple spots in MoarVM that carry similar platform-dependent socket behaviour, and more are to come. This can be unified.","Looks good to me, but I should really disqualify myself in these matters.  Pinged jnthn and niner",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1422,2021-01-21T23:31:57Z,2021-01-22T08:59:21Z,2021-01-22T17:49:42Z,MERGED,True,6,6,6,https://github.com/cognominal,remove p6 fossils,1,[],https://github.com/MoarVM/MoarVM/pull/1422,https://github.com/cognominal,1,https://github.com/MoarVM/MoarVM/pull/1422,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1423,2021-01-22T14:27:23Z,2021-01-25T13:07:04Z,2021-02-20T22:10:24Z,CLOSED,False,46,0,1,https://github.com/Altai-man,Update ChangeLog for 2021.01 release,1,[],https://github.com/MoarVM/MoarVM/pull/1423,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1423,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1423,2021-01-22T14:27:23Z,2021-01-25T13:07:04Z,2021-02-20T22:10:24Z,CLOSED,False,46,0,1,https://github.com/Altai-man,Update ChangeLog for 2021.01 release,1,[],https://github.com/MoarVM/MoarVM/pull/1423,https://github.com/Altai-man,2,https://github.com/MoarVM/MoarVM/pull/1423#issuecomment-766803218,,It becomes a part of the 2021.02 changelog.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1426,2021-02-01T20:27:18Z,,2021-04-26T08:15:56Z,OPEN,False,393,163,30,https://github.com/MasterDuke17,Remove a spesh optimization if it has too many deopts,12,[],https://github.com/MoarVM/MoarVM/pull/1426,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1426,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1428,2021-02-03T20:46:00Z,2021-02-04T09:07:42Z,2021-02-04T09:07:46Z,MERGED,True,15,15,3,https://github.com/MasterDuke17,Fix compile warnings,3,[],https://github.com/MoarVM/MoarVM/pull/1428,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1428,"You only see the warnings the first commit fixes if FSA_DEBUG is enabled, but the second commit fixes ones always seen.","You only see the warnings the first commit fixes if FSA_DEBUG is enabled, but the second commit fixes ones always seen.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1429,2021-02-04T06:19:54Z,2021-02-04T09:53:23Z,2022-02-09T21:04:34Z,MERGED,True,6,4,2,https://github.com/niner,Fix segfault caused by mis-spesh of unbox of Num type objects,1,[],https://github.com/MoarVM/MoarVM/pull/1429,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1429,"We missed a check for concreteness in optimize_istrue_isfalse causing us to
""optimize"" an unbox of a Num type object to MVM_OP_sp_p6oget_n which doesn't
cope with type objects for sub t($num) { $num ?? 1 !! 0 }; loop { t(Num) }
Fix by making the optimization depend on guaranteed_concrete, same as we
already do for integers. For added saftey require MVM_SPESH_FACT_CONCRETE when
speshing unbox operations of any kind on P6opaque.","We missed a check for concreteness in optimize_istrue_isfalse causing us to
""optimize"" an unbox of a Num type object to MVM_OP_sp_p6oget_n which doesn't
cope with type objects for sub t($num) { $num ?? 1 !! 0 }; loop { t(Num) }
Fix by making the optimization depend on guaranteed_concrete, same as we
already do for integers. For added saftey require MVM_SPESH_FACT_CONCRETE when
speshing unbox operations of any kind on P6opaque.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1430,2021-02-04T06:25:04Z,2021-02-04T10:06:40Z,2022-02-09T21:04:32Z,MERGED,True,7,0,2,https://github.com/niner,Avoid segfaults caused by repossessed native call sites,1,[],https://github.com/MoarVM/MoarVM/pull/1430,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1430,"We deserialize a native call site. Then we call the function which triggers the
actual setup, i.e. resolving the library name, loading the library, generating
caller code. We run the function often enough that spesh decides its worth its
time. While spesh is working however, we deserialize the module again and as
part of the repossession process clear the native call site's body. I.e.
body->entry_point becomes NULL. This causes us to compile a jump to 0.
The real fix for this is to avoid repossession of the native call site in the
first place. In case the HLL layer neglects to to the appropriate steps, do
what we can to detect the situation and downgrade the segfault to just a missed
optimization opportunity.","We deserialize a native call site. Then we call the function which triggers the
actual setup, i.e. resolving the library name, loading the library, generating
caller code. We run the function often enough that spesh decides its worth its
time. While spesh is working however, we deserialize the module again and as
part of the repossession process clear the native call site's body. I.e.
body->entry_point becomes NULL. This causes us to compile a jump to 0.
The real fix for this is to avoid repossession of the native call site in the
first place. In case the HLL layer neglects to to the appropriate steps, do
what we can to detect the situation and downgrade the segfault to just a missed
optimization opportunity.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1433,2021-02-13T23:43:12Z,2021-02-15T11:55:06Z,2021-02-15T11:55:06Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update libuv to version 1.41.0,1,[],https://github.com/MoarVM/MoarVM/pull/1433,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1433,Clean spectest under Linux Mint 20 (Uluyana) 64-bit,Clean spectest under Linux Mint 20 (Uluyana) 64-bit,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1436,2021-02-20T21:37:32Z,2021-03-24T11:34:40Z,2021-04-24T14:52:37Z,MERGED,True,31,17,1,https://github.com/niner,Fix possible GC upset caused by half-deserialized STables,1,[],https://github.com/MoarVM/MoarVM/pull/1436,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1436,"While deserializing STables, we may have to deserialize several objects. Doing
so can trigger a garbage collection run. At this point the STable will not be
fully set up yet. E.g. its type_check_cache_length was set but not actually
filled with appropriate objects. This could lead to the GC following invalid
pointers.
Fix by being more careful about setting up data structures hanging off STables
first and only attaching them to the STable once they are fully ready.","While deserializing STables, we may have to deserialize several objects. Doing
so can trigger a garbage collection run. At this point the STable will not be
fully set up yet. E.g. its type_check_cache_length was set but not actually
filled with appropriate objects. This could lead to the GC following invalid
pointers.
Fix by being more careful about setting up data structures hanging off STables
first and only attaching them to the STable once they are fully ready.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1436,2021-02-20T21:37:32Z,2021-03-24T11:34:40Z,2021-04-24T14:52:37Z,MERGED,True,31,17,1,https://github.com/niner,Fix possible GC upset caused by half-deserialized STables,1,[],https://github.com/MoarVM/MoarVM/pull/1436,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1436#issuecomment-782753534,"While deserializing STables, we may have to deserialize several objects. Doing
so can trigger a garbage collection run. At this point the STable will not be
fully set up yet. E.g. its type_check_cache_length was set but not actually
filled with appropriate objects. This could lead to the GC following invalid
pointers.
Fix by being more careful about setting up data structures hanging off STables
first and only attaching them to the STable once they are fully ready.","I'm not 100 % sure about invocation_spec. What happens, when some of the objects are already deserialized and the pointers written to invocation_spec and a GC gets triggered? Since the invocation_spec itself is not yet attached to the STable, it won't get processed and may then contain outdated pointers. Except that we deserialize into gen2 by default anyway. So deserialized objects won't move. But then I wonder why we need to use MVM_ASSIGN_REF if both the STable and the assigned objects are actually guaranteed to be in gen2.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1437,2021-02-20T21:57:22Z,2021-02-20T22:03:02Z,2021-02-20T22:06:27Z,MERGED,True,59,1,2,https://github.com/Altai-man,2021.02 release,2,[],https://github.com/MoarVM/MoarVM/pull/1437,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1437,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1438,2021-02-20T22:29:01Z,2021-04-08T09:38:02Z,2021-04-08T09:38:04Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Always log the type coming out of an nqp::decont,1,[],https://github.com/MoarVM/MoarVM/pull/1438,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1438,"Before, it would only log if a decont was actually perfomed. That was
usually fine because most of the time there always was or wasn't a
container. If there was a container we logged the type, and if there
wasn't we usually could throw out the decont op altogether. However, in
the cases where there was a mix, the stats could be misleading. Given
that we will soon have the ability to remove an optimized spesh candidate
if it gets too many deopts (and then clear the stats), we'll still end up
creating a new candidate just like the previous bad one because its new
stats will be just as misleading as the old ones. With this change we
collect good stats in any case.
The && r-o in the if shouldn't be needed because there should never
be an actuall NULL in a register, but it currently can happen when
profiling (somewhere in this block
https://github.com/Raku/nqp/blob/master/src/vm/moar/HLL/Backend.nqp#L251-L257).
After nqp::(getobjsc|scgetdesc) are audited (and fixed), it should be
able to be removed.
Before, my $r := ""a"" .. ""za""; my @a = $r[^$r.elems]; used to have ~688k deops and take ~2.6s, after it's only ~660 deopts and ~2.5s.","Before, it would only log if a decont was actually perfomed. That was
usually fine because most of the time there always was or wasn't a
container. If there was a container we logged the type, and if there
wasn't we usually could throw out the decont op altogether. However, in
the cases where there was a mix, the stats could be misleading. Given
that we will soon have the ability to remove an optimized spesh candidate
if it gets too many deopts (and then clear the stats), we'll still end up
creating a new candidate just like the previous bad one because its new
stats will be just as misleading as the old ones. With this change we
collect good stats in any case.
The && r-o in the if shouldn't be needed because there should never
be an actuall NULL in a register, but it currently can happen when
profiling (somewhere in this block
https://github.com/Raku/nqp/blob/master/src/vm/moar/HLL/Backend.nqp#L251-L257).
After nqp::(getobjsc|scgetdesc) are audited (and fixed), it should be
able to be removed.
Before, my $r := ""a"" .. ""za""; my @a = $r[^$r.elems]; used to have ~688k deops and take ~2.6s, after it's only ~660 deopts and ~2.5s.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1438,2021-02-20T22:29:01Z,2021-04-08T09:38:02Z,2021-04-08T09:38:04Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Always log the type coming out of an nqp::decont,1,[],https://github.com/MoarVM/MoarVM/pull/1438,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1438#issuecomment-815531582,"Before, it would only log if a decont was actually perfomed. That was
usually fine because most of the time there always was or wasn't a
container. If there was a container we logged the type, and if there
wasn't we usually could throw out the decont op altogether. However, in
the cases where there was a mix, the stats could be misleading. Given
that we will soon have the ability to remove an optimized spesh candidate
if it gets too many deopts (and then clear the stats), we'll still end up
creating a new candidate just like the previous bad one because its new
stats will be just as misleading as the old ones. With this change we
collect good stats in any case.
The && r-o in the if shouldn't be needed because there should never
be an actuall NULL in a register, but it currently can happen when
profiling (somewhere in this block
https://github.com/Raku/nqp/blob/master/src/vm/moar/HLL/Backend.nqp#L251-L257).
After nqp::(getobjsc|scgetdesc) are audited (and fixed), it should be
able to be removed.
Before, my $r := ""a"" .. ""za""; my @a = $r[^$r.elems]; used to have ~688k deops and take ~2.6s, after it's only ~660 deopts and ~2.5s.",Should I remove the && r->o or leave it in?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1438,2021-02-20T22:29:01Z,2021-04-08T09:38:02Z,2021-04-08T09:38:04Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Always log the type coming out of an nqp::decont,1,[],https://github.com/MoarVM/MoarVM/pull/1438,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1438#issuecomment-815571806,"Before, it would only log if a decont was actually perfomed. That was
usually fine because most of the time there always was or wasn't a
container. If there was a container we logged the type, and if there
wasn't we usually could throw out the decont op altogether. However, in
the cases where there was a mix, the stats could be misleading. Given
that we will soon have the ability to remove an optimized spesh candidate
if it gets too many deopts (and then clear the stats), we'll still end up
creating a new candidate just like the previous bad one because its new
stats will be just as misleading as the old ones. With this change we
collect good stats in any case.
The && r-o in the if shouldn't be needed because there should never
be an actuall NULL in a register, but it currently can happen when
profiling (somewhere in this block
https://github.com/Raku/nqp/blob/master/src/vm/moar/HLL/Backend.nqp#L251-L257).
After nqp::(getobjsc|scgetdesc) are audited (and fixed), it should be
able to be removed.
Before, my $r := ""a"" .. ""za""; my @a = $r[^$r.elems]; used to have ~688k deops and take ~2.6s, after it's only ~660 deopts and ~2.5s.","Should I remove the `&& r->o` or leave it in?
Remove it. There are no known cases where this is needed and finding any
remaining cases will only be possible if this blows up.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1439,2021-02-22T19:42:44Z,2021-04-08T07:43:00Z,2021-04-09T00:56:35Z,MERGED,True,5,10,1,https://github.com/salortiz,VMArray: Use dest for select 'kind' in copy_elements,3,[],https://github.com/MoarVM/MoarVM/pull/1439,https://github.com/salortiz,1,https://github.com/MoarVM/MoarVM/pull/1439,"dest argument is always VMArray so its REPR_data can't be NULL.
This fixes #1432","dest argument is always VMArray so its REPR_data can't be NULL.
This fixes #1432",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1440,2021-02-23T04:23:59Z,2021-04-08T07:43:25Z,2021-04-09T00:59:27Z,MERGED,True,9,0,1,https://github.com/salortiz,VMArray: Check slot type for read_buf and write_buf,1,[],https://github.com/MoarVM/MoarVM/pull/1440,https://github.com/salortiz,1,https://github.com/MoarVM/MoarVM/pull/1440,"Those operations are only valid when the array_type is of some integer kind.
Should closes #1310","Those operations are only valid when the array_type is of some integer kind.
Should closes #1310",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1441,2021-02-23T21:47:58Z,2021-02-24T08:21:09Z,2022-02-09T21:04:28Z,MERGED,True,1,1,1,https://github.com/jnthn,Fix confused profiler output in multi-threaded app,1,[],https://github.com/MoarVM/MoarVM/pull/1441,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1441,"At some point we started to assign indexes to static frames and then
look them up, so as to cheapen GC of the profiler data. Unfortunately,
this introduced a bug when we recorded profiles in multi-threaded
programs: the wrong thread context was used to resolve those indices
when dumping the profile results, which in turn led to the indices
resolving to the wrong static frame. Thus the output of profiles
involving multiple threads would often end up garbled.","At some point we started to assign indexes to static frames and then
look them up, so as to cheapen GC of the profiler data. Unfortunately,
this introduced a bug when we recorded profiles in multi-threaded
programs: the wrong thread context was used to resolve those indices
when dumping the profile results, which in turn led to the indices
resolving to the wrong static frame. Thus the output of profiles
involving multiple threads would often end up garbled.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1442,2021-02-27T17:31:18Z,2021-02-27T19:12:40Z,2021-02-27T19:12:45Z,MERGED,True,19,19,1,https://github.com/patrickbkr,Azure CI: Fix rebuild failures,1,[],https://github.com/MoarVM/MoarVM/pull/1442,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1442,"In general it makes sense to abort the build if a step fails. Do so.
Otherwise if the tests fail the build artifacts will still be published.
Then a rebuild will be impossible to succeed, as the re-build won't be able
to upload its artifacts, as they are already there from the first build.","In general it makes sense to abort the build if a step fails. Do so.
Otherwise if the tests fail the build artifacts will still be published.
Then a rebuild will be impossible to succeed, as the re-build won't be able
to upload its artifacts, as they are already there from the first build.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1444,2021-03-10T10:17:51Z,2021-03-24T11:18:07Z,2021-03-24T11:18:07Z,MERGED,True,25,17,1,https://github.com/Kaiepi,Constrain C pointer serialization to sizes <= INT32_MAX,2,[],https://github.com/MoarVM/MoarVM/pull/1444,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1444,"The size of C pointers are passed directly to assert_can_read upon deserialization, which takes an MVMint32. Constraining serialized C pointer sizes to INT32_MAX both prevents overflows and eliminates a couple compiler warnings produced by a comparison of an MVMint64 to SIZE_MAX on some systems, which is unsigned.
Despite this, in theory, C pointer serialization is still flawed; the size of a pointer can overflow the read offset depending on the size of pointer serialized and where it resides in a script. Something more akin to how Raku strings are serialized would be necessary in order to avoid this problem, but we've made it this far without encountering it, so deal with that at another point in time.
CC @MasterDuke17","The size of C pointers are passed directly to assert_can_read upon deserialization, which takes an MVMint32. Constraining serialized C pointer sizes to INT32_MAX both prevents overflows and eliminates a couple compiler warnings produced by a comparison of an MVMint64 to SIZE_MAX on some systems, which is unsigned.
Despite this, in theory, C pointer serialization is still flawed; the size of a pointer can overflow the read offset depending on the size of pointer serialized and where it resides in a script. Something more akin to how Raku strings are serialized would be necessary in order to avoid this problem, but we've made it this far without encountering it, so deal with that at another point in time.
CC @MasterDuke17",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1444,2021-03-10T10:17:51Z,2021-03-24T11:18:07Z,2021-03-24T11:18:07Z,MERGED,True,25,17,1,https://github.com/Kaiepi,Constrain C pointer serialization to sizes <= INT32_MAX,2,[],https://github.com/MoarVM/MoarVM/pull/1444,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1444#issuecomment-805721964,"The size of C pointers are passed directly to assert_can_read upon deserialization, which takes an MVMint32. Constraining serialized C pointer sizes to INT32_MAX both prevents overflows and eliminates a couple compiler warnings produced by a comparison of an MVMint64 to SIZE_MAX on some systems, which is unsigned.
Despite this, in theory, C pointer serialization is still flawed; the size of a pointer can overflow the read offset depending on the size of pointer serialized and where it resides in a script. Something more akin to how Raku strings are serialized would be necessary in order to avoid this problem, but we've made it this far without encountering it, so deal with that at another point in time.
CC @MasterDuke17","So, is this ok to merge?  @jnthn @niner",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1445,2021-03-20T09:53:52Z,2021-03-27T21:39:34Z,2021-04-24T14:53:04Z,MERGED,True,177,145,6,https://github.com/niner,Add a setup_notify handler and queue to nqp::signal,1,[],https://github.com/MoarVM/MoarVM/pull/1445,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1445,"Setting up a signal handler happens on the IO eventloop thread. Thus when
nqp::signal is done, one must not assume that the handler is already in place.
Add setup_notify_queue and setup_notify_schedulee arguments, so we can notify
the caller when the handler is setup to avoid race conditions.","Setting up a signal handler happens on the IO eventloop thread. Thus when
nqp::signal is done, one must not assume that the handler is already in place.
Add setup_notify_queue and setup_notify_schedulee arguments, so we can notify
the caller when the handler is setup to avoid race conditions.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1445,2021-03-20T09:53:52Z,2021-03-27T21:39:34Z,2021-04-24T14:53:04Z,MERGED,True,177,145,6,https://github.com/niner,Add a setup_notify handler and queue to nqp::signal,1,[],https://github.com/MoarVM/MoarVM/pull/1445,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1445#issuecomment-805723644,"Setting up a signal handler happens on the IO eventloop thread. Thus when
nqp::signal is done, one must not assume that the handler is already in place.
Add setup_notify_queue and setup_notify_schedulee arguments, so we can notify
the caller when the handler is setup to avoid race conditions.","Now that we have a 2021.03 release, is this ok to merge?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1446,2021-03-20T10:41:29Z,2021-03-20T10:41:34Z,2021-03-20T10:41:40Z,MERGED,True,16,1,2,https://github.com/Altai-man,Release 2021.03,2,[],https://github.com/MoarVM/MoarVM/pull/1446,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1446,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1447,2021-03-21T12:34:49Z,2021-03-21T14:30:06Z,2021-03-21T14:30:09Z,MERGED,True,30,36,6,https://github.com/nwc10,"Eliminate the ops sec_n, asec_n and sech_h, which are no longer used.",1,[],https://github.com/MoarVM/MoarVM/pull/1447,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1447,"These hyperbolic functions are not provided directly by libc, so have to be
implemented in terms of functions which are. There's no mathematical
difference in expressing the same identities in the Rakudo setting (it's
going to dispatched as the same IEEE operations) but doing it there instead
of here means that the code is easier for spesh and the JIT to optimise.
Rakudo stopped using these ops in the 2021.02 release, NQP in 2021.03.
Now now remove them from MoarVM.","These hyperbolic functions are not provided directly by libc, so have to be
implemented in terms of functions which are. There's no mathematical
difference in expressing the same identities in the Rakudo setting (it's
going to dispatched as the same IEEE operations) but doing it there instead
of here means that the code is easier for spesh and the JIT to optimise.
Rakudo stopped using these ops in the 2021.02 release, NQP in 2021.03.
Now now remove them from MoarVM.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1448,2021-03-22T10:08:30Z,,2021-06-28T19:50:27Z,OPEN,False,393,239,15,https://github.com/nwc10,`fastcreate` Int and BigInt objects from IntConstCache metadata,7,[],https://github.com/MoarVM/MoarVM/pull/1448,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1448,"The IntConstCache stores singleton boxed objects for the values -1 .. 14 for ints and bigints. It's used in most places that box integers (but not all). It has space to store four possible types, but we only ever use two. Some of the spesh opcodes (and the JIT) that use the cached singletons can also ""fastcreate"" boxed integer objects with values outside the cache range.
This branch changes the cache to store just two types, and at fixed array indexes, which makes some lookups simpler. It also extends the cache to store the relevant metadata used to ""fastcreate"" objects, and then provides ""fastcreate"" functionality in MVM_repr_box_int. Because the ""fastcreate"" metadata is now in the IntConstCache, it no longer needs to be stored in the spesh opcode stream, so that is now gone. It should be a memory size win after 3 inlined spesh ops.
I struggled to find any benchmark that shows any real difference (neither slowdown nor speedup). On reflection, I think that this is because

The JIT generated assembly is almost unchanged
We don't actually generate that many relevant arithmetic ops

So this somewhat is cherry-picking benchmarks, but with this Pascal's triangle code based on http://rosettacode.org/wiki/Pascal%27s_triangle#Raku:
sub pascal ($n where $n >= 1) {
   my @last = 1;
   for 1 .. $n - 1 -> $row {
       @last = 1, |map({ @last[$_] + @last[$_ + 1] }, 0 .. $row - 2), 1;
   }
}

pascal 100 for 1..100;

on master, dumbbench says:
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3727e+00 +/- 3.1e-03 (0.1%)

whereas on this branch
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3433e+00 +/- 2.9e-03 (0.1%)

This PR obsoletes #1379. The bug described there with does is still present - Rakudo has not been changed to flag that code as a compile-time error.","The IntConstCache stores singleton boxed objects for the values -1 .. 14 for ints and bigints. It's used in most places that box integers (but not all). It has space to store four possible types, but we only ever use two. Some of the spesh opcodes (and the JIT) that use the cached singletons can also ""fastcreate"" boxed integer objects with values outside the cache range.
This branch changes the cache to store just two types, and at fixed array indexes, which makes some lookups simpler. It also extends the cache to store the relevant metadata used to ""fastcreate"" objects, and then provides ""fastcreate"" functionality in MVM_repr_box_int. Because the ""fastcreate"" metadata is now in the IntConstCache, it no longer needs to be stored in the spesh opcode stream, so that is now gone. It should be a memory size win after 3 inlined spesh ops.
I struggled to find any benchmark that shows any real difference (neither slowdown nor speedup). On reflection, I think that this is because

The JIT generated assembly is almost unchanged
We don't actually generate that many relevant arithmetic ops

So this somewhat is cherry-picking benchmarks, but with this Pascal's triangle code based on http://rosettacode.org/wiki/Pascal%27s_triangle#Raku:
sub pascal ($n where $n >= 1) {
   my @last = 1;
   for 1 .. $n - 1 -> $row {
       @last = 1, |map({ @last[$_] + @last[$_ + 1] }, 0 .. $row - 2), 1;
   }
}

pascal 100 for 1..100;

on master, dumbbench says:
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3727e+00 +/- 3.1e-03 (0.1%)

whereas on this branch
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3433e+00 +/- 2.9e-03 (0.1%)

This PR obsoletes #1379. The bug described there with does is still present - Rakudo has not been changed to flag that code as a compile-time error.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1448,2021-03-22T10:08:30Z,,2021-06-28T19:50:27Z,OPEN,False,393,239,15,https://github.com/nwc10,`fastcreate` Int and BigInt objects from IntConstCache metadata,7,[],https://github.com/MoarVM/MoarVM/pull/1448,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1448#issuecomment-803970823,"The IntConstCache stores singleton boxed objects for the values -1 .. 14 for ints and bigints. It's used in most places that box integers (but not all). It has space to store four possible types, but we only ever use two. Some of the spesh opcodes (and the JIT) that use the cached singletons can also ""fastcreate"" boxed integer objects with values outside the cache range.
This branch changes the cache to store just two types, and at fixed array indexes, which makes some lookups simpler. It also extends the cache to store the relevant metadata used to ""fastcreate"" objects, and then provides ""fastcreate"" functionality in MVM_repr_box_int. Because the ""fastcreate"" metadata is now in the IntConstCache, it no longer needs to be stored in the spesh opcode stream, so that is now gone. It should be a memory size win after 3 inlined spesh ops.
I struggled to find any benchmark that shows any real difference (neither slowdown nor speedup). On reflection, I think that this is because

The JIT generated assembly is almost unchanged
We don't actually generate that many relevant arithmetic ops

So this somewhat is cherry-picking benchmarks, but with this Pascal's triangle code based on http://rosettacode.org/wiki/Pascal%27s_triangle#Raku:
sub pascal ($n where $n >= 1) {
   my @last = 1;
   for 1 .. $n - 1 -> $row {
       @last = 1, |map({ @last[$_] + @last[$_ + 1] }, 0 .. $row - 2), 1;
   }
}

pascal 100 for 1..100;

on master, dumbbench says:
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3727e+00 +/- 3.1e-03 (0.1%)

whereas on this branch
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3433e+00 +/- 2.9e-03 (0.1%)

This PR obsoletes #1379. The bug described there with does is still present - Rakudo has not been changed to flag that code as a compile-time error.","I have a hacked up version of https://github.com/japhb/perl6-bench running locally. I'm not an expert user of it, but once I figure out how to use MoarVM branches I can try comparing Rakudo with MoarVM on master vs Rakudo with MoarVM on fastcreate_from_intcache.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1448,2021-03-22T10:08:30Z,,2021-06-28T19:50:27Z,OPEN,False,393,239,15,https://github.com/nwc10,`fastcreate` Int and BigInt objects from IntConstCache metadata,7,[],https://github.com/MoarVM/MoarVM/pull/1448,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1448#issuecomment-805015477,"The IntConstCache stores singleton boxed objects for the values -1 .. 14 for ints and bigints. It's used in most places that box integers (but not all). It has space to store four possible types, but we only ever use two. Some of the spesh opcodes (and the JIT) that use the cached singletons can also ""fastcreate"" boxed integer objects with values outside the cache range.
This branch changes the cache to store just two types, and at fixed array indexes, which makes some lookups simpler. It also extends the cache to store the relevant metadata used to ""fastcreate"" objects, and then provides ""fastcreate"" functionality in MVM_repr_box_int. Because the ""fastcreate"" metadata is now in the IntConstCache, it no longer needs to be stored in the spesh opcode stream, so that is now gone. It should be a memory size win after 3 inlined spesh ops.
I struggled to find any benchmark that shows any real difference (neither slowdown nor speedup). On reflection, I think that this is because

The JIT generated assembly is almost unchanged
We don't actually generate that many relevant arithmetic ops

So this somewhat is cherry-picking benchmarks, but with this Pascal's triangle code based on http://rosettacode.org/wiki/Pascal%27s_triangle#Raku:
sub pascal ($n where $n >= 1) {
   my @last = 1;
   for 1 .. $n - 1 -> $row {
       @last = 1, |map({ @last[$_] + @last[$_ + 1] }, 0 .. $row - 2), 1;
   }
}

pascal 100 for 1..100;

on master, dumbbench says:
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3727e+00 +/- 3.1e-03 (0.1%)

whereas on this branch
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3433e+00 +/- 2.9e-03 (0.1%)

This PR obsoletes #1379. The bug described there with does is still present - Rakudo has not been changed to flag that code as a compile-time error.","The build failure is one of the Unbuntu builds (Perl: 5.10 AMD64 MVM_OPTIONS=""--has-libffi"" CC='gcc')
Test Summary Report
-------------------
t/nqp/113-run-command.t              (Wstat: 134 Tests: 8 Failed: 0)
Non-zero wait status: 134

where that was
t/nqp/113-run-command.t ................ 
All 8 subtests passed

so it must have called abort after passing the tests. Assertion failure?
Strange.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1448,2021-03-22T10:08:30Z,,2021-06-28T19:50:27Z,OPEN,False,393,239,15,https://github.com/nwc10,`fastcreate` Int and BigInt objects from IntConstCache metadata,7,[],https://github.com/MoarVM/MoarVM/pull/1448,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1448#issuecomment-869962955,"The IntConstCache stores singleton boxed objects for the values -1 .. 14 for ints and bigints. It's used in most places that box integers (but not all). It has space to store four possible types, but we only ever use two. Some of the spesh opcodes (and the JIT) that use the cached singletons can also ""fastcreate"" boxed integer objects with values outside the cache range.
This branch changes the cache to store just two types, and at fixed array indexes, which makes some lookups simpler. It also extends the cache to store the relevant metadata used to ""fastcreate"" objects, and then provides ""fastcreate"" functionality in MVM_repr_box_int. Because the ""fastcreate"" metadata is now in the IntConstCache, it no longer needs to be stored in the spesh opcode stream, so that is now gone. It should be a memory size win after 3 inlined spesh ops.
I struggled to find any benchmark that shows any real difference (neither slowdown nor speedup). On reflection, I think that this is because

The JIT generated assembly is almost unchanged
We don't actually generate that many relevant arithmetic ops

So this somewhat is cherry-picking benchmarks, but with this Pascal's triangle code based on http://rosettacode.org/wiki/Pascal%27s_triangle#Raku:
sub pascal ($n where $n >= 1) {
   my @last = 1;
   for 1 .. $n - 1 -> $row {
       @last = 1, |map({ @last[$_] + @last[$_ + 1] }, 0 .. $row - 2), 1;
   }
}

pascal 100 for 1..100;

on master, dumbbench says:
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3727e+00 +/- 3.1e-03 (0.1%)

whereas on this branch
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3433e+00 +/- 2.9e-03 (0.1%)

This PR obsoletes #1379. The bug described there with does is still present - Rakudo has not been changed to flag that code as a compile-time error.","I recently was profiling rakudo startup by exec()ing moarvm multiple times in a loop in the runner program (diff here https://gist.github.com/MasterDuke17/1cc0dc0a6d78409a549e49b8570661f4). A perf report of ./rakudo-m -e '' showed the top 10 functions were:
   5.53%  moar             libmoar.so            [.] MVM_serialization_read_ref
   4.75%  moar             libmoar.so            [.] MVM_serialization_read_int
   4.40%  moar             [kernel.kallsyms]     [k] clear_page_rep
   4.00%  moar             libmoar.so            [.] MVM_interp_run
   3.64%  spesh optimizer  libmoar.so            [.] process_bb_for_deopt_usage
   3.57%  moar             libmoar.so            [.] MVM_validate_static_frame
   2.80%  moar             libc-2.33.so          [.] _int_malloc
   2.19%  moar             libmoar.so            [.] MVM_gc_allocate_object
   2.03%  moar             libmoar.so            [.] MVM_reentrantmutex_unlock
   2.01%  moar             libmoar.so            [.] MVM_reentrantmutex_lock

However, after rebasing this branch up to HEAD of master (6977d05) and getting a new perf record, these are the top 10 functions:
  41.14%  moar             [kernel.kallsyms]   [k] mutex_spin_on_owner
   4.09%  moar             [kernel.kallsyms]   [k] memcpy
   3.39%  moar             libmoar.so          [.] MVM_interp_run
   2.78%  moar             libmoar.so          [.] MVM_validate_static_frame
   2.36%  moar             libmoar.so          [.] MVM_cu_obtain_string
   2.10%  moar             [kernel.kallsyms]   [k] clear_page_rep
   1.74%  moar             libc-2.33.so        [.] _int_malloc
   1.68%  moar             libmoar.so          [.] validate_operands
   1.17%  moar             [kernel.kallsyms]   [k] pipe_write
   1.16%  moar             libmoar.so          [.] MVM_string_latin1_decode",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1448,2021-03-22T10:08:30Z,,2021-06-28T19:50:27Z,OPEN,False,393,239,15,https://github.com/nwc10,`fastcreate` Int and BigInt objects from IntConstCache metadata,7,[],https://github.com/MoarVM/MoarVM/pull/1448,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1448#issuecomment-869979587,"The IntConstCache stores singleton boxed objects for the values -1 .. 14 for ints and bigints. It's used in most places that box integers (but not all). It has space to store four possible types, but we only ever use two. Some of the spesh opcodes (and the JIT) that use the cached singletons can also ""fastcreate"" boxed integer objects with values outside the cache range.
This branch changes the cache to store just two types, and at fixed array indexes, which makes some lookups simpler. It also extends the cache to store the relevant metadata used to ""fastcreate"" objects, and then provides ""fastcreate"" functionality in MVM_repr_box_int. Because the ""fastcreate"" metadata is now in the IntConstCache, it no longer needs to be stored in the spesh opcode stream, so that is now gone. It should be a memory size win after 3 inlined spesh ops.
I struggled to find any benchmark that shows any real difference (neither slowdown nor speedup). On reflection, I think that this is because

The JIT generated assembly is almost unchanged
We don't actually generate that many relevant arithmetic ops

So this somewhat is cherry-picking benchmarks, but with this Pascal's triangle code based on http://rosettacode.org/wiki/Pascal%27s_triangle#Raku:
sub pascal ($n where $n >= 1) {
   my @last = 1;
   for 1 .. $n - 1 -> $row {
       @last = 1, |map({ @last[$_] + @last[$_ + 1] }, 0 .. $row - 2), 1;
   }
}

pascal 100 for 1..100;

on master, dumbbench says:
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3727e+00 +/- 3.1e-03 (0.1%)

whereas on this branch
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3433e+00 +/- 2.9e-03 (0.1%)

This PR obsoletes #1379. The bug described there with does is still present - Rakudo has not been changed to flag that code as a compile-time error.","Hm, now I believe the above comment may not be correct. I thought my MoarVM re-build went smoothly, but another test showed some problems, and when I redid it I can't repro the above results. Instead I'm now getting these as the top 10 functions:
   4.65%  moar             libmoar.so            [.] MVM_serialization_read_ref
   4.49%  moar             libmoar.so            [.] MVM_serialization_read_int
   3.94%  moar             [kernel.kallsyms]     [k] clear_page_rep
   3.89%  spesh optimizer  libmoar.so            [.] process_bb_for_deopt_usage
   3.78%  moar             libmoar.so            [.] MVM_interp_run
   2.97%  moar             libmoar.so            [.] MVM_validate_static_frame
   2.80%  moar             libc-2.33.so          [.] _int_malloc
   2.53%  moar             libmoar.so            [.] MVM_gc_allocate_object
   2.07%  moar             libmoar.so            [.] MVM_reentrantmutex_unlock
   1.83%  moar             libmoar.so            [.] MVM_cu_obtain_string",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1448,2021-03-22T10:08:30Z,,2021-06-28T19:50:27Z,OPEN,False,393,239,15,https://github.com/nwc10,`fastcreate` Int and BigInt objects from IntConstCache metadata,7,[],https://github.com/MoarVM/MoarVM/pull/1448,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1448#issuecomment-869983783,"The IntConstCache stores singleton boxed objects for the values -1 .. 14 for ints and bigints. It's used in most places that box integers (but not all). It has space to store four possible types, but we only ever use two. Some of the spesh opcodes (and the JIT) that use the cached singletons can also ""fastcreate"" boxed integer objects with values outside the cache range.
This branch changes the cache to store just two types, and at fixed array indexes, which makes some lookups simpler. It also extends the cache to store the relevant metadata used to ""fastcreate"" objects, and then provides ""fastcreate"" functionality in MVM_repr_box_int. Because the ""fastcreate"" metadata is now in the IntConstCache, it no longer needs to be stored in the spesh opcode stream, so that is now gone. It should be a memory size win after 3 inlined spesh ops.
I struggled to find any benchmark that shows any real difference (neither slowdown nor speedup). On reflection, I think that this is because

The JIT generated assembly is almost unchanged
We don't actually generate that many relevant arithmetic ops

So this somewhat is cherry-picking benchmarks, but with this Pascal's triangle code based on http://rosettacode.org/wiki/Pascal%27s_triangle#Raku:
sub pascal ($n where $n >= 1) {
   my @last = 1;
   for 1 .. $n - 1 -> $row {
       @last = 1, |map({ @last[$_] + @last[$_ + 1] }, 0 .. $row - 2), 1;
   }
}

pascal 100 for 1..100;

on master, dumbbench says:
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3727e+00 +/- 3.1e-03 (0.1%)

whereas on this branch
MVM_JIT_DISABLE=1 ~/bin/dumbbench --initial=100 -- ./rakudo-m ../pascal
cmd: Ran 105 iterations (1 outliers).
cmd: Rounded run time per iteration: 2.3433e+00 +/- 2.9e-03 (0.1%)

This PR obsoletes #1379. The bug described there with does is still present - Rakudo has not been changed to flag that code as a compile-time error.","But FWIW, time ./rakudo-m -e '' consistently was ~0.2s slower (7.0s vs 6.8s) on this branch.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1449,2021-03-22T14:04:46Z,2021-03-22T15:21:56Z,2021-03-22T15:21:59Z,MERGED,True,10,0,2,https://github.com/nwc10,"Set ""allocate in gen2"" in 2 locations that create permarooted objects.",1,[],https://github.com/MoarVM/MoarVM/pull/1449,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1449,"These are the last two locations in the MoarVM source tree that directly
create objects that are passed to MVM_gc_root_add_permanent_desc.
Given that these objects will persist for the lifetime of the interpreter,
it makes sense to create them directly in gen2.","These are the last two locations in the MoarVM source tree that directly
create objects that are passed to MVM_gc_root_add_permanent_desc.
Given that these objects will persist for the lifetime of the interpreter,
it makes sense to create them directly in gen2.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1450,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-807491073,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"Why remove the old nqp::ops in the same commit?   This would force people into a flag day with regards to their use of nqp::time_n and nqp::time_i.
I would prefer to see the removal of the old nqp::time_n|i ops to be some time in the future, possibly years from now.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-807527441,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"This would force people into a flag day with regards to their use of nqp::time_n and nqp::time_i.

It's not a supported API, along with all the other nqp::ops. Those using it can already migrate to now or similar today.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/lizmat,4,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-807549944,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"It's not a supported API, along with all the other nqp::ops. Those using it can already migrate to now or similar today.

It is documented: https://github.com/Raku/nqp/blob/master/docs/ops.markdown#time
I just don't see why we would drop this unannounced: let the old ops at least survive one release, so that we can put it in the ChangeLog with a special note and special attention (e.g. what to change).  It's a little bit of extra effort, but not breaking people's code out there, I think is very important.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-807688119,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"I don't have strong feelings either way. Sure nqp:: ops are documented in the NQP repo, but not in docs.raku.org. Also, there are only two uses of any nqp:: ops in the entire roast. If we did decide to make the change for the next release I would create PRs for the ecosystem (greppable is a bit out of date, but it doesn't show too many https://gist.github.com/Whateverable/6738789120beeaedfe9d5b4873cc4d04).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/jnthn,6,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-807732006,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"It is documented: https://github.com/Raku/nqp/blob/master/docs/ops.markdown#time

That is internal developer documentation, not Raku language user documentation. Please don't get me an incentive to actively avoid documenting internals; I'm bad enough at doing so already. :-)

I just don't see why we would drop this unannounced

Because it's an internals change, and setting precedents matters. Use of the nqp::ops is even behind a pragma to make it impossible to do by accident. Given the magnitude of changes in the pipeline (new-disp could drop easily a dozen ops, likely including nqp::findmethod), we're in for a world of pain if we decide we want to avoid a flag day on these as policy.
In this particular case, if we do want a comparability shim, it can be done in NQP (e.g. nqp::time_n would get mapped to something in terms of the new nqp:;time), which is far cheaper than retaining the ops in MoarVM for longer. I don't mind if somebody does that, but so far as the messaging around use of nqp::ops in ecosystem modules goes, I'm not sure it's what serves us best in the long run.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/lizmat,7,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-808109229,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"Ok, @jnthn's arguments are clear.

In this particular case, if we do want a comparability shim, it can be done in NQP (e.g. nqp::time_n would get mapped to something in terms of the new nqp:;time), which is far cheaper than retaining the ops in MoarVM for longer. I don't mind if somebody does that, but so far as the messaging around use of nqp::ops in ecosystem modules goes, I'm not sure it's what serves us best in the long run.

I would agree generally, but in the case of nqp::time_n, people may have used that in time critical application exactly because of the overhead we're now removing.  If we remove them now, their code won't even compile anymore.
BTW, wouldn't a shim in Rakudo not even be better?  Like some of the nqp::p6 ops ?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/MasterDuke17,8,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-808120136,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"overhead we're now removing

FYI, the PRs as they are currently don't remove significant overhead. All the logic is the same, essentially all I've done is moved the conversion from integer nanoseconds to floating point seconds up to NQP/Rakudo. What's needed is to look where that's happening and see if there's a more efficient way (e.g., maybe some places could now store/operate on integer nanoseconds and only convert to fractional seconds when displayed).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/jnthn,9,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-808120426,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"I would agree generally, but in the case of nqp::time_n, people may have used that in time critical application exactly because of the overhead we're now removing. If we remove them now, their code won't even compile anymore.

In this case there's a way to do it without creating much of a maintenance burden, and you're right that the pragmatic thing to do here is to shim it. I guess my fear is that the ""generally"" will never happen, and for every such change somebody will make an ""in this case"" argument. It's already a huge amount of work for those doing significant changes to maintain things up to bug compatibility in the things that aren't considered internals. Given I'm on the hook for two such changes (new-disp, rakuast), I've got a rather large interest in the precedent being ""if you depended on nqp::ops or compiler internals, you get to keep all the pieces"".

BTW, wouldn't a shim in Rakudo not even be better? Like some of the nqp::p6 ops ?

Hm, sort of. Most of the nqp::p6foo are custom compilations, but there is also a desugar mechanism. Those are registered in the actions, and are the best solution for this, because those work over all backends.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/MasterDuke17,10,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-808125969,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"Hm, sort of. Most of the nqp::p6foo are custom compilations, but there is also a desugar mechanism. Those are registered in the actions, and are the best solution for this, because those work over all backends.

Something like?:
register_op_desugar('time_i', -> {
    QAST::Op.new( :op('div_i'), QAST::Op.new( :op('time' ) ), 1000000000 )
});
register_op_desugar('time_n', -> {
    QAST::Op.new( :op('div_n'), QAST::Op.new( :op('time' ) ), 1000000000e0 )
});",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/jnthn,11,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-808126617,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"What's needed is to look where that's happening and see if there's a more efficient way (e.g., maybe some places could now store/operate on integer nanoseconds and only convert to fractional seconds when displayed).

Glancing this:
my class Instant is Cool does Real {
    has Rat $.tai;

I guess it'd be possible to change that to an int attribute, and avoid the Rat (which is 3 further GC allocations) unless it is requested. Probably even the Str method can stick in num land.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/jnthn,12,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-808127085,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"QAST::Op.new( :op('div_i'), QAST::Op.new( :op('time' ) ), 1000000000 )

Needs to be QAST::IVal.new( :value(1000000000) ) (and an NVal for the other case). Otherwise looks about right.",True,{'THUMBS_UP': ['https://github.com/MasterDuke17']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1450,2021-03-25T20:56:56Z,2021-03-30T12:58:01Z,2021-03-30T12:58:03Z,MERGED,True,169,148,12,https://github.com/MasterDuke17,Remove nqp::time_(i|n) in favor of nqp::time...,1,[],https://github.com/MoarVM/MoarVM/pull/1450,https://github.com/MasterDuke17,13,https://github.com/MoarVM/MoarVM/pull/1450#issuecomment-808129332,which just return integer nanoseconds since the epoch. Before we were just throwing away the extra precision possible from using nanoseconds.,"I guess it'd be possible to change that to an int attribute, and avoid the Rat (which is 3 further GC allocations) unless it is requested. Probably even the Str method can stick in num land.

Yep, I started to try something like that right away, but then didn't get it quite right and decided to do the straight port first, then follow up with optimizations.",True,{'THUMBS_UP': ['https://github.com/jnthn']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1451,2021-03-28T11:15:04Z,2021-04-03T13:58:24Z,2022-02-09T21:04:25Z,MERGED,True,64,52,3,https://github.com/niner,Fixes for NULL bugs / spesh bugs / wrong backtraces,5,[],https://github.com/MoarVM/MoarVM/pull/1451,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1451,"MasterDuke's try to log undefined results of decont ops uncovered a deep rabbit hole of NULL bugs, spesh bugs and wrong backtraces. This PR takes care of them, unblocking his work.","MasterDuke's try to log undefined results of decont ops uncovered a deep rabbit hole of NULL bugs, spesh bugs and wrong backtraces. This PR takes care of them, unblocking his work.",True,"{'HOORAY': ['https://github.com/MasterDuke17', 'https://github.com/Altai-man'], 'HEART': ['https://github.com/raiph']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1451,2021-03-28T11:15:04Z,2021-04-03T13:58:24Z,2022-02-09T21:04:25Z,MERGED,True,64,52,3,https://github.com/niner,Fixes for NULL bugs / spesh bugs / wrong backtraces,5,[],https://github.com/MoarVM/MoarVM/pull/1451,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1451#issuecomment-812836392,"MasterDuke's try to log undefined results of decont ops uncovered a deep rabbit hole of NULL bugs, spesh bugs and wrong backtraces. This PR takes care of them, unblocking his work.","The commit 298298a fixes a SEGV in t/spec/S12-attributes/undeclared.t when running with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1. However, somehow it exposes two more bugs:
$ ./rakudo-m -Ilib t/spec/S09-multidim/assign.t
ok 36 - Cannot assign to many lists at first dimension (native)
not ok 37 - Cannot assign to many items at first dimension (native)
# Failed test 'Cannot assign to many items at first dimension (native)'
# at t/spec/S09-multidim/assign.t line 79

(for that one valgrind says nothing, the failure is unchanged and it is not a JIT bug)
$ ./rakudo-m -Ilib t/spec/S22-package-format/local.t
1..19
ok 1 - Could we create '/home/nick/Perl/rakudo/t/spec/S22-package-format/local-file-src'
ok 2 - Could we create '/home/nick/Perl/rakudo/t/spec/S22-package-format/local-file-src/NanooNanoo.pm6'
ok 3 - Could we create /home/nick/Perl/rakudo/t/spec/S22-package-format/local-file-cmp
ok 4 - install Ctrl-C handler for cleanup in END
ok 5 - The object is-a 'CompUnit::Repository::FileSystem'
ok 6 - The object is-a 'IO::Path'
ok 7 - is . looking at the right directory
ok 8 - is the short-id right
ok 9 - Cannot install on CUR::FileSystem
ok 10 - The object is-a 'CompUnit::Repository::FileSystem'
ok 11 - are they the same
ok 12 - The object is-a 'CompUnit::Repository::FileSystem'
ok 13 - are they different
ok 14 - The object is-a 'IO::Path'
ok 15 - is '/home/nick/Perl/rakudo/t/spec/S22-package-format/local-file-src' looking at the right dir
===SORRY!===
Type check failed in binding to parameter '$bytes'; expected Blob but got Supplier::Preserving (Supplier::Preserving...)
# You planned 19 tests, but ran 15

Oooh, this one is a JIT bug. It goes away with valgrind, and with MVM_JIT_EXPR_DISABLE=1
Random guess (based on my only experience of this) is that it's something to do with memory layout - I think that valgrind ends up with malloc returning addresses that have the top 32 bits 0, meaning that they don't get corrupted if truncated and expanded again, whereas ""regular"" runtimes generate heap addresses that do. For my single experience of these symptoms, the problem was caused by trying to write a JIT template that loaded an address with other-than mov64. But the fallout was a SEGV when the truncated address didn't work. Which isn't what we see here. But a pointer comparison failing?
Or maybe not -- I can't even replicate it now. Maybe I had a run of hash randomisation going a particular way. Or the OS directory order is now reported differently.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1451,2021-03-28T11:15:04Z,2021-04-03T13:58:24Z,2022-02-09T21:04:25Z,MERGED,True,64,52,3,https://github.com/niner,Fixes for NULL bugs / spesh bugs / wrong backtraces,5,[],https://github.com/MoarVM/MoarVM/pull/1451,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1451#issuecomment-812866357,"MasterDuke's try to log undefined results of decont ops uncovered a deep rabbit hole of NULL bugs, spesh bugs and wrong backtraces. This PR takes care of them, unblocking his work.","Might be nice to add the `cu->body.hll_name` to the error message.
I noticed myself but the cost of having to do the whole dance with
MVM_exception_throw_adhoc_va_free did not seem worth the slight improvement
for the very improbable case. After all it occured only a single time in all
of rakudo and can only happen when using nqp ops directly and only in NQP
code.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1451,2021-03-28T11:15:04Z,2021-04-03T13:58:24Z,2022-02-09T21:04:25Z,MERGED,True,64,52,3,https://github.com/niner,Fixes for NULL bugs / spesh bugs / wrong backtraces,5,[],https://github.com/MoarVM/MoarVM/pull/1451,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1451#issuecomment-812866430,"MasterDuke's try to log undefined results of decont ops uncovered a deep rabbit hole of NULL bugs, spesh bugs and wrong backtraces. This PR takes care of them, unblocking his work.","Just curious, why not a static char array for `line_number`?
I don't know. That part is unchanged from before. Only the indentation
changed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1452,2021-03-30T16:51:12Z,2021-03-31T23:17:23Z,2021-04-01T06:38:08Z,MERGED,True,0,182,3,https://github.com/patrickbkr,Disable Travis and AppVeyor,1,[],https://github.com/MoarVM/MoarVM/pull/1452,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1452,"They have been superseded by AzureCI. People have been talking about the removal for quite a while now, but no one dared to do it yet. Now I do.
If anyone objects, please speak up!
This PR should only be merged once the hooks of Travis and AppVeyor have been disabled.
Ping @jnthn (I'm unsure, whether anyone else has admin permissions in the MoarVM project, so I'm pinging you.)","They have been superseded by AzureCI. People have been talking about the removal for quite a while now, but no one dared to do it yet. Now I do.
If anyone objects, please speak up!
This PR should only be merged once the hooks of Travis and AppVeyor have been disabled.
Ping @jnthn (I'm unsure, whether anyone else has admin permissions in the MoarVM project, so I'm pinging you.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1452,2021-03-30T16:51:12Z,2021-03-31T23:17:23Z,2021-04-01T06:38:08Z,MERGED,True,0,182,3,https://github.com/patrickbkr,Disable Travis and AppVeyor,1,[],https://github.com/MoarVM/MoarVM/pull/1452,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1452#issuecomment-811526000,"They have been superseded by AzureCI. People have been talking about the removal for quite a while now, but no one dared to do it yet. Now I do.
If anyone objects, please speak up!
This PR should only be merged once the hooks of Travis and AppVeyor have been disabled.
Ping @jnthn (I'm unsure, whether anyone else has admin permissions in the MoarVM project, so I'm pinging you.)",@patrickbkr Webhooks are disabled.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1454,2021-04-01T10:51:12Z,2021-04-07T19:36:11Z,2021-04-07T19:36:15Z,CLOSED,False,9,0,3,https://github.com/MasterDuke17,Free Uni property codes hashes with --full-cleanup,1,[],https://github.com/MoarVM/MoarVM/pull/1454,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1454,"Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'.
Fixes #1453","Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'.
Fixes #1453",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1454,2021-04-01T10:51:12Z,2021-04-07T19:36:11Z,2021-04-07T19:36:15Z,CLOSED,False,9,0,3,https://github.com/MasterDuke17,Free Uni property codes hashes with --full-cleanup,1,[],https://github.com/MoarVM/MoarVM/pull/1454,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1454#issuecomment-812934429,"Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'.
Fixes #1453",Just these two? Or also https://github.com/MoarVM/MoarVM/blob/master/src/strings/unicode_ops.c#L997-L999?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1454,2021-04-01T10:51:12Z,2021-04-07T19:36:11Z,2021-04-07T19:36:15Z,CLOSED,False,9,0,3,https://github.com/MasterDuke17,Free Uni property codes hashes with --full-cleanup,1,[],https://github.com/MoarVM/MoarVM/pull/1454,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1454#issuecomment-813274276,"Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'.
Fixes #1453","These other variables will become an issue once there is cleanup code for them. Right now they are ok.
The situation I worry about is having multiple MoarVMs running in the same process. That's something our architecture allows for (that's the reason for having an MVMInstance struct instead of a bunch of global variables) and that we already pay the price of. So even if no one seems to have tried doing this so far it'd be a shame to have a few static variables in the way. When you shut down one of these instances it would clean up data that's still in use by the other instance.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1454,2021-04-01T10:51:12Z,2021-04-07T19:36:11Z,2021-04-07T19:36:15Z,CLOSED,False,9,0,3,https://github.com/MasterDuke17,Free Uni property codes hashes with --full-cleanup,1,[],https://github.com/MoarVM/MoarVM/pull/1454,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1454#issuecomment-813344492,"Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'.
Fixes #1453","These other variables will become an issue once there is cleanup code for them. Right now they are ok.

They do participate in cleanup code (https://github.com/MoarVM/MoarVM/blob/master/src/strings/unicode_ops.c#L1018-L1034), but you mean that e.g., property_hash_count_mutex isn't currently ever uv_mutex_destroyed?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1454,2021-04-01T10:51:12Z,2021-04-07T19:36:11Z,2021-04-07T19:36:15Z,CLOSED,False,9,0,3,https://github.com/MasterDuke17,Free Uni property codes hashes with --full-cleanup,1,[],https://github.com/MoarVM/MoarVM/pull/1454,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1454#issuecomment-814217463,"Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'.
Fixes #1453",I'll close this if/when #1461 is merged.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1455,2021-04-02T20:03:17Z,2021-04-08T20:31:18Z,2021-04-08T20:31:18Z,MERGED,True,5,7,1,https://github.com/coke,Minor README updates,1,[],https://github.com/MoarVM/MoarVM/pull/1455,https://github.com/coke,1,https://github.com/MoarVM/MoarVM/pull/1455,"Remove note about other backends (no longer true). Remove ""not planned"" wording about location of repo.","Remove note about other backends (no longer true). Remove ""not planned"" wording about location of repo.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1455,2021-04-02T20:03:17Z,2021-04-08T20:31:18Z,2021-04-08T20:31:18Z,MERGED,True,5,7,1,https://github.com/coke,Minor README updates,1,[],https://github.com/MoarVM/MoarVM/pull/1455,https://github.com/coke,2,https://github.com/MoarVM/MoarVM/pull/1455#issuecomment-812754678,"Remove note about other backends (no longer true). Remove ""not planned"" wording about location of repo.","New push, including the note about JS and removing the suggestion to email jnthn directly.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1456,2021-04-03T21:41:51Z,2021-04-04T20:59:53Z,2021-04-04T20:59:53Z,CLOSED,False,2,3,1,https://github.com/MasterDuke17,Save malloc+free per frame when creating backtrace,1,[],https://github.com/MoarVM/MoarVM/pull/1456,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1456,"By using a fixed size char array. The number of instructions reported by
callgrind do vary a bit, even with MVM_SPESH_BLOCKING=1, but it seems
to save ~1m instructions for my $a; $a = do given ""hi"" { when 3 { ""three"" }; when 5 { ""five"" }; when ""hi"" { ""hello"" }; when * > 40 { ""> 40"" }; default { ""default"" } } for ^1_000; say $a.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","By using a fixed size char array. The number of instructions reported by
callgrind do vary a bit, even with MVM_SPESH_BLOCKING=1, but it seems
to save ~1m instructions for my $a; $a = do given ""hi"" { when 3 { ""three"" }; when 5 { ""five"" }; when ""hi"" { ""hello"" }; when * > 40 { ""> 40"" }; default { ""default"" } } for ^1_000; say $a.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1456,2021-04-03T21:41:51Z,2021-04-04T20:59:53Z,2021-04-04T20:59:53Z,CLOSED,False,2,3,1,https://github.com/MasterDuke17,Save malloc+free per frame when creating backtrace,1,[],https://github.com/MoarVM/MoarVM/pull/1456,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1456#issuecomment-813098368,"By using a fixed size char array. The number of instructions reported by
callgrind do vary a bit, even with MVM_SPESH_BLOCKING=1, but it seems
to save ~1m instructions for my $a; $a = do given ""hi"" { when 3 { ""three"" }; when 5 { ""five"" }; when ""hi"" { ""hello"" }; when * > 40 { ""> 40"" }; default { ""default"" } } for ^1_000; say $a.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",Going to rename and add another commit.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1457,2021-04-04T21:04:11Z,2021-04-05T09:57:11Z,2021-04-05T09:57:12Z,MERGED,True,8,9,3,https://github.com/MasterDuke17,Some minor optimizations when creating backtraces,2,[],https://github.com/MoarVM/MoarVM/pull/1457,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1457,"By using a fixed size char array in one place and the FSA in another. The number of instructions reported by callgrind do vary a bit, even with MVM_SPESH_BLOCKING=1, but it seems to save ~17m instructions for:
my $a;
$a = do given ""hi"" {
	when 0      { ""zero""    };
	when 1      { ""one""     };
	when 2      { ""two""     };
	when 3      { ""three""   };
	when 4      { ""four""    };
	when 5      { ""five""    };
	when ""hi""   { ""hello""   };
	when * > 40 { ""> 40""    };
	default     { ""default"" }
} for ^1_000;
say $a","By using a fixed size char array in one place and the FSA in another. The number of instructions reported by callgrind do vary a bit, even with MVM_SPESH_BLOCKING=1, but it seems to save ~17m instructions for:
my $a;
$a = do given ""hi"" {
	when 0      { ""zero""    };
	when 1      { ""one""     };
	when 2      { ""two""     };
	when 3      { ""three""   };
	when 4      { ""four""    };
	when 5      { ""five""    };
	when ""hi""   { ""hello""   };
	when * > 40 { ""> 40""    };
	default     { ""default"" }
} for ^1_000;
say $a",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1458,2021-04-05T20:22:11Z,2021-04-08T08:40:01Z,2022-02-09T21:04:22Z,MERGED,True,6,1,1,https://github.com/niner,Fix possible segfault on exit when using spesh log,1,[],https://github.com/MoarVM/MoarVM/pull/1458,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1458,"A normal exit without --full-cleanup did not stop the spesh thread. So spesh
may actually still be active and try to print things to the spesh log when
MVM_vm_exit closes the spesh log file handle. This would lead to a segfault in
vfprintf. Fix by stoping and joining the spesh thread even in MVM_vm_exit if
spesh logging is active.","A normal exit without --full-cleanup did not stop the spesh thread. So spesh
may actually still be active and try to print things to the spesh log when
MVM_vm_exit closes the spesh log file handle. This would lead to a segfault in
vfprintf. Fix by stoping and joining the spesh thread even in MVM_vm_exit if
spesh logging is active.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1458,2021-04-05T20:22:11Z,2021-04-08T08:40:01Z,2022-02-09T21:04:22Z,MERGED,True,6,1,1,https://github.com/niner,Fix possible segfault on exit when using spesh log,1,[],https://github.com/MoarVM/MoarVM/pull/1458,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1458#issuecomment-813628148,"A normal exit without --full-cleanup did not stop the spesh thread. So spesh
may actually still be active and try to print things to the spesh log when
MVM_vm_exit closes the spesh log file handle. This would lead to a segfault in
vfprintf. Fix by stoping and joining the spesh thread even in MVM_vm_exit if
spesh logging is active.",Should fix #1434,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1458,2021-04-05T20:22:11Z,2021-04-08T08:40:01Z,2022-02-09T21:04:22Z,MERGED,True,6,1,1,https://github.com/niner,Fix possible segfault on exit when using spesh log,1,[],https://github.com/MoarVM/MoarVM/pull/1458,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1458#issuecomment-813854186,"A normal exit without --full-cleanup did not stop the spesh thread. So spesh
may actually still be active and try to print things to the spesh log when
MVM_vm_exit closes the spesh log file handle. This would lead to a segfault in
vfprintf. Fix by stoping and joining the spesh thread even in MVM_vm_exit if
spesh logging is active.","""we it""
Thanks, fixed it in the updated commit. Funny, there's actually another place
with the exact same error in our code base :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,1,https://github.com/MoarVM/MoarVM/pull/1460,Resolves #1459,Resolves #1459,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,2,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814069014,Resolves #1459,"My code editor defaulted to using tabs instead of spaces and wasn't showing the difference, should I make a new commit replacing tabs with spaces?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/lizmat,3,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814071683,Resolves #1459,"Possibly.  If you do, maybe also fix the other stray TAB that's in there :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814072562,Resolves #1459,"My code editor defaulted to using tabs instead of spaces and wasn't showing the difference, should I make a new commit replacing tabs with spaces?

I'd just rebase -i and merge the commits, then force push.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,5,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814125331,Resolves #1459,Did I do it right?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/lizmat,6,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814144732,Resolves #1459,Looks ok to me :),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/MasterDuke17,7,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814171644,Resolves #1459,"Did I do it right?

There's no real problem with it, but what I meant was to do a git rebase -i HEAD~3, then change the 'pick' for the second (and third, etc) commit (the ""remove tabs"" one) to 'fixup'. That will combine all the changes back down into one commit. Then you'd need to git push --force because you actually changed the commit SHAs. So at the end the PR would have just one commit with all the changes. But it's not required.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,8,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814203807,Resolves #1459,Is this better?,True,{'THUMBS_UP': ['https://github.com/MasterDuke17']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/patrickbkr,9,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814330330,Resolves #1459,"IMHO this is a bit too specific, as it special-cases a single replacement with a custom separator. Could you switch the quoting to be a default '...' quoting and then escape the ' and / instead? Then we could reuse that functionality should other replacements need the same treatment.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,10,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814380790,Resolves #1459,Is this better?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,11,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814403294,Resolves #1459,"Don't merge, I messed up somewhere...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,12,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814425670,Resolves #1459,"^
src/gen/config.c's backslashes to escape "" were being escaped by the lines I added, which caused syntax errors.
It was also escaping backslashes at the end of lines.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,13,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814426537,Resolves #1459,What are those errors Azure is getting?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/MasterDuke17,14,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814429434,Resolves #1459,https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=416&view=logs&j=1f3a7134-3b80-549a-eaff-49041f6b71c8&t=cebb2378-2f87-5e8d-fe8c-4dbf4bfaf11c&l=311 some problem building 3rdparty/libatomicops/src/libatomic_ops.a,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,15,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814431084,Resolves #1459,Escaping + was much easier... Why is it even failing?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,16,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814659032,Resolves #1459,"It's best to only escape + sign in the specific line. Escaping ' and \ might introduce errors (e.g /bin/sh: line 1: -Wextra: command not found) as some files use "" (unlike src/mk-moar-pc.in where the problem first came from).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/patrickbkr,17,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814801867,Resolves #1459,"Ah, now I see. You removed the condition and unconditionally escaped replacements. As you discovered that is bound to fail, as several other places also take this code path but need a different or no escaping.
To fix that one would need to review all uses of the function to make sure it's called uniformly. I wouldn't do that now.
But can you instead just re-add the condition so the escaping is only done in this specific case? Then, should the need for the same escaping arise in a different place, one can then just extend the condition. (That's what I originally intended to propose, but obviously didn't make clear enough.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,18,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-814866508,Resolves #1459,"It compiles fine on my machine, I'm not getting the error Azure gets.
Can anyone else test it?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/patrickbkr,19,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-815187127,Resolves #1459,"The azure error shows up for relocatable builds, those have ' characters in the ldflags.
I think I don't understand the regex you wrote. Also, why do you do the replacement for the prefix variable instead of the ldflags variable? In short, why not just:
if ($key eq 'ldflags') {
    $config{$key} =~ s/\\/\\\\/g;
    $config{$key} =~ s/\'/\\\'/g;",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,20,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-815275894,Resolves #1459,"I did it this way because @ldflags@ equals to the flags, which include (literally!) @libdir@, a config variable comprised of (again, literally) @prefix@, a string which might have a quote in it, plus /bin. Thus, trying to escape quotes in @ldflags@ won't escape the ones in @prefix@.
As the configure subroutine is called multiple times on lines with the same variables, s///ing $config{$key} might do it many times (~10 for ldflags), and escaping ' ~10 times (which is what your code does).
That's why my regex checks for any previous escaping ((?<!\\)\\(?![\\\']) instead of \\).
I hope my explanation is understandable.
Maybe the best would be to fix those issues instead of writing complex regexes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,21,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-816029678,Resolves #1459,It doesn't,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,22,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-816036236,Resolves #1459,Let's hope this time is the right,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/patrickbkr,23,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-816193026,Resolves #1459,"I now noticed a detail in your solution I missed before. It changes the configuration values themselves. That's a no-go. There is a recommendation to only ever quote / escape at the actual point of use. I think that makes a lot of sense as it makes sure one never runs into the trouble of double quoting.
What do you think about the following?
    my $val = $config{$key};
    # escape \, ' and ""
    if ($template =~ /'[^']*@\Q$key\E@[^']*'/) {
        $val =~ s/\\/\\\\/g;
        $val =~ s/'/\\'/g;
    }
    elsif ($template =~ /""[^""]*@\Q$key\E@[^""]*""/) {
        $val =~ s/\\/\\\\/g;
        $val =~ s/""/\\""/g;
    }

    $template =~ s/@\Q$key\E@/$val/;

That's still not completely fool proof, but catches the common failures.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,24,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-816251341,Resolves #1459,"That's for sure a better solution than mine, I have no objections about it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/patrickbkr,25,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-816455682,Resolves #1459,@demostanis Can you make the change?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/patrickbkr,26,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-816557765,Resolves #1459,There is some whitespace mess. Can you clean that up?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/patrickbkr,27,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-816592059,Resolves #1459,There are still tabs in there :-(,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/demostanis,28,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-816613021,Resolves #1459,Where do you see them? awk '/\t/' Configure.pl  yields nothing.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1460,2021-04-06T11:47:22Z,2021-04-09T11:37:13Z,2021-04-09T11:37:13Z,MERGED,True,14,3,2,https://github.com/demostanis,Fix when building to a directory which includes a '+' in its file name,2,[],https://github.com/MoarVM/MoarVM/pull/1460,https://github.com/patrickbkr,29,https://github.com/MoarVM/MoarVM/pull/1460#issuecomment-816621047,Resolves #1459,"Probably a stale browser cache, looking good now. Thank you for pushing through with this!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1461,2021-04-06T15:33:44Z,2021-04-07T19:35:39Z,2021-04-07T20:32:28Z,MERGED,True,35,82,6,https://github.com/MasterDuke17,Cleanup of a bunch of Unicode hashes,1,[],https://github.com/MoarVM/MoarVM/pull/1461,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1461,"Move static variables to be members of MVMInstance instead. This is
safer if there are multiple MoarVMs running in the same process. Instead
of needing to coordinate initializing/destroying these global variables,
each instance can be responsible for its own hashes.
Additionally, free on shutdown some of the generated-on-demand hashes
that weren't being freed before.
Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'; say ""\c[LATIN CAPITAL LETTER A]"".
Fixes #1453","Move static variables to be members of MVMInstance instead. This is
safer if there are multiple MoarVMs running in the same process. Instead
of needing to coordinate initializing/destroying these global variables,
each instance can be responsible for its own hashes.
Additionally, free on shutdown some of the generated-on-demand hashes
that weren't being freed before.
Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'; say ""\c[LATIN CAPITAL LETTER A]"".
Fixes #1453",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1461,2021-04-06T15:33:44Z,2021-04-07T19:35:39Z,2021-04-07T20:32:28Z,MERGED,True,35,82,6,https://github.com/MasterDuke17,Cleanup of a bunch of Unicode hashes,1,[],https://github.com/MoarVM/MoarVM/pull/1461,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1461#issuecomment-815172758,"Move static variables to be members of MVMInstance instead. This is
safer if there are multiple MoarVMs running in the same process. Instead
of needing to coordinate initializing/destroying these global variables,
each instance can be responsible for its own hashes.
Additionally, free on shutdown some of the generated-on-demand hashes
that weren't being freed before.
Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'; say ""\c[LATIN CAPITAL LETTER A]"".
Fixes #1453","I love that doing the right thing is actually less code than it was before :)

Yep, though it definitely took a while to convince myself all the locking and uv_once, etc. was safe to remove.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1461,2021-04-06T15:33:44Z,2021-04-07T19:35:39Z,2021-04-07T20:32:28Z,MERGED,True,35,82,6,https://github.com/MasterDuke17,Cleanup of a bunch of Unicode hashes,1,[],https://github.com/MoarVM/MoarVM/pull/1461,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1461#issuecomment-815210002,"Move static variables to be members of MVMInstance instead. This is
safer if there are multiple MoarVMs running in the same process. Instead
of needing to coordinate initializing/destroying these global variables,
each instance can be responsible for its own hashes.
Additionally, free on shutdown some of the generated-on-demand hashes
that weren't being freed before.
Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'; say ""\c[LATIN CAPITAL LETTER A]"".
Fixes #1453","I love that doing the right thing is actually less code than it was before :)

Well, except that now if we did have multiple instances, they'd all have to build these hashes, rather than sharing a single copy, which is safe due to the data being immutable. Nobody really uses the ability to have multiple instances today, though, so far as I know.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1461,2021-04-06T15:33:44Z,2021-04-07T19:35:39Z,2021-04-07T20:32:28Z,MERGED,True,35,82,6,https://github.com/MasterDuke17,Cleanup of a bunch of Unicode hashes,1,[],https://github.com/MoarVM/MoarVM/pull/1461,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1461#issuecomment-815224591,"Move static variables to be members of MVMInstance instead. This is
safer if there are multiple MoarVMs running in the same process. Instead
of needing to coordinate initializing/destroying these global variables,
each instance can be responsible for its own hashes.
Additionally, free on shutdown some of the generated-on-demand hashes
that weren't being freed before.
Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'; say ""\c[LATIN CAPITAL LETTER A]"".
Fixes #1453","I love that doing the right thing is actually less code than it was before :)

Well, except that now if we did have multiple instances, they'd all have to build these hashes, rather than sharing a single copy, which is safe due to the data being immutable. Nobody really uses the ability to have multiple instances today, though, so far as I know.

True, but it does seem to be the case that these might never end up being generated in a bunch of use cases. I'd never seen these show up in a valgrind/heaptrack leak report before trying the example code mentioned in the commit message.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1461,2021-04-06T15:33:44Z,2021-04-07T19:35:39Z,2021-04-07T20:32:28Z,MERGED,True,35,82,6,https://github.com/MasterDuke17,Cleanup of a bunch of Unicode hashes,1,[],https://github.com/MoarVM/MoarVM/pull/1461,https://github.com/niner,5,https://github.com/MoarVM/MoarVM/pull/1461#issuecomment-815232926,"Move static variables to be members of MVMInstance instead. This is
safer if there are multiple MoarVMs running in the same process. Instead
of needing to coordinate initializing/destroying these global variables,
each instance can be responsible for its own hashes.
Additionally, free on shutdown some of the generated-on-demand hashes
that weren't being freed before.
Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'; say ""\c[LATIN CAPITAL LETTER A]"".
Fixes #1453","Well, except that now if we did have multiple instances, they'd all have to
 build these hashes, rather than sharing a single copy, which is safe due to
 the data being immutable.
One the one hand yes, on the other hand these hashes were allocated with a
specific instance's fixed size allocator. So when that instance goes away, the
hashes would have gone anyway (or worse, left with dangling pointers).
 Nobody really uses the ability to have multiple
 instances today, though, so far as I know.
Yes, I figure that's purely theoretic. So we trade off a purely theoretic
memory management issue against a purely theoretic performance issue :D",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1461,2021-04-06T15:33:44Z,2021-04-07T19:35:39Z,2021-04-07T20:32:28Z,MERGED,True,35,82,6,https://github.com/MasterDuke17,Cleanup of a bunch of Unicode hashes,1,[],https://github.com/MoarVM/MoarVM/pull/1461,https://github.com/jnthn,6,https://github.com/MoarVM/MoarVM/pull/1461#issuecomment-815242602,"Move static variables to be members of MVMInstance instead. This is
safer if there are multiple MoarVMs running in the same process. Instead
of needing to coordinate initializing/destroying these global variables,
each instance can be responsible for its own hashes.
Additionally, free on shutdown some of the generated-on-demand hashes
that weren't being freed before.
Now valgrind and heaptrack don't report any leaks for
raku --full-cleanup -e 'my %expressions = D => ""got D"", M => ""got M"", l => ""got l""; my $a; $a := ""%D %M %l"".subst(/""%""$<specifier>=<{ %expressions.keys.join(""|"") }>/, -> ( :$specifier ) { %expressions{$specifier} }, :g) for ^10'; say ""\c[LATIN CAPITAL LETTER A]"".
Fixes #1453","One the one hand yes, on the other hand these hashes were allocated with a
specific instance's fixed size allocator

Argh, that's indeed not good (and a change from when this was originally written and used uthash, which was malloc all the way...)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1462,2021-04-07T16:59:40Z,2021-05-08T07:47:45Z,2021-05-22T14:56:43Z,MERGED,True,11,10,2,https://github.com/niner,Fix corruption of fixkey hash entries,1,[],https://github.com/MoarVM/MoarVM/pull/1462,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1462,"Several places in the fixkey hash implementation assumed that entries will be
pointers to strings. However the hash can store arbitrary structs. So when
those structs contained more than just a pointer, often they overwrote other
entries. Fix by replacing all occurences of sizeof(MVMString ***) with
control->entry_size","Several places in the fixkey hash implementation assumed that entries will be
pointers to strings. However the hash can store arbitrary structs. So when
those structs contained more than just a pointer, often they overwrote other
entries. Fix by replacing all occurences of sizeof(MVMString ***) with
control->entry_size",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1464,2021-04-08T12:19:25Z,2021-04-12T08:35:02Z,2021-04-12T08:35:04Z,MERGED,True,2,2,2,https://github.com/MasterDuke17,Make smrt_intify specializable like other smrt_* ops,1,[],https://github.com/MoarVM/MoarVM/pull/1464,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1464,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1465,2021-04-08T21:02:29Z,2021-04-10T07:05:32Z,2021-04-11T10:56:13Z,MERGED,True,13,10,2,https://github.com/niner,Fix JITed ordfirst/ordat/ordbaseat returning 4294967295 instead of -1,1,[],https://github.com/MoarVM/MoarVM/pull/1465,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1465,"MVM_string_ord_at returns a MVMGrapheme32 which is a 32 bit signed integer.
However we treated it as a 64 bit integer without proper sign extension, which
turned a -1 into 4294967295. Fix by sign extend the result to a full 64 bit
signed integer.","MVM_string_ord_at returns a MVMGrapheme32 which is a 32 bit signed integer.
However we treated it as a 64 bit integer without proper sign extension, which
turned a -1 into 4294967295. Fix by sign extend the result to a full 64 bit
signed integer.",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1465,2021-04-08T21:02:29Z,2021-04-10T07:05:32Z,2021-04-11T10:56:13Z,MERGED,True,13,10,2,https://github.com/niner,Fix JITed ordfirst/ordat/ordbaseat returning 4294967295 instead of -1,1,[],https://github.com/MoarVM/MoarVM/pull/1465,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1465#issuecomment-816211716,"MVM_string_ord_at returns a MVMGrapheme32 which is a 32 bit signed integer.
However we treated it as a 64 bit integer without proper sign extension, which
turned a -1 into 4294967295. Fix by sign extend the result to a full 64 bit
signed integer.","Nice. But this seems like the kind of thing that could be happening elsewhere, know of any (easy) way to check?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1465,2021-04-08T21:02:29Z,2021-04-10T07:05:32Z,2021-04-11T10:56:13Z,MERGED,True,13,10,2,https://github.com/niner,Fix JITed ordfirst/ordat/ordbaseat returning 4294967295 instead of -1,1,[],https://github.com/MoarVM/MoarVM/pull/1465,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1465#issuecomment-817095282,"MVM_string_ord_at returns a MVMGrapheme32 which is a 32 bit signed integer.
However we treated it as a 64 bit integer without proper sign extension, which
turned a -1 into 4294967295. Fix by sign extend the result to a full 64 bit
signed integer.","Nice. But this seems like the kind of thing that could be happening
 elsewhere, know of any (easy) way to check?
Well, for a certain definition of ""easy"" it is. I wrote a tiny gcc plugin that
prints all functions with a signed integer return value smaller than 64 bits:

```
import gcc
from gccutils import get_src_for_loc, pformat, cfg_to_dot, invoke_dot

outfile = open('ints', 'at')

class FindInts(gcc.GimplePass):
    def execute(self, fun):
        if fun and fun.cfg:
            if isinstance(fun.decl.result.type, gcc.IntegerType) \
                and fun.decl.result.type.sizeof < 8 \
                and not fun.decl.result.type.unsigned:
                outfile.write(str(fun.decl) + ""\n"")

ps = FindInts(name='find-ints')
ps.register_after('cfg')
```

Then acked for the printed function names in the expr JIT templates:
`for F in $(<ints) ; do ack $F src/jit/core_templates.expr ; done`

Which gives me candidates worth looking at:
```
  (call (^func &MVM_get_exception_category)
  (call (^func &MVM_nativecall_build)
  (call (^func &MVM_string_get_grapheme_at)
    (callv (^func &MVM_6model_find_method_spesh)
    (call (^func &MVM_string_ord_at)
    (call (^func &MVM_string_ord_at)
  (call (^func &MVM_string_ord_basechar_at)
  (call (^func &MVM_unicode_lookup_by_name)
```",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1465,2021-04-08T21:02:29Z,2021-04-10T07:05:32Z,2021-04-11T10:56:13Z,MERGED,True,13,10,2,https://github.com/niner,Fix JITed ordfirst/ordat/ordbaseat returning 4294967295 instead of -1,1,[],https://github.com/MoarVM/MoarVM/pull/1465,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1465#issuecomment-817095909,"MVM_string_ord_at returns a MVMGrapheme32 which is a 32 bit signed integer.
However we treated it as a 64 bit integer without proper sign extension, which
turned a -1 into 4294967295. Fix by sign extend the result to a full 64 bit
signed integer.","And if you got time to check them. These are for the lego jit:
```
 for F in $(<ints) ; do ack ""return $F"" src/jit/graph.c ; done
case MVM_OP_getexcategory: return MVM_get_exception_category;
    case MVM_OP_breakpoint: return MVM_debugserver_breakpoint_check;
        return consume_jumplist(tc, jg, iter, ins);
        return consume_invoke(tc, jg, iter, ins);
    case MVM_OP_getexcategory: return MVM_get_exception_category;
    case MVM_OP_breakpoint: return MVM_debugserver_breakpoint_check;
        return consume_jumplist(tc, jg, iter, ins);
        return consume_invoke(tc, jg, iter, ins);
```

and

```
 for F in $(<ints) ; do ack ""$F"" src/jit/x64/emit.dasc ; done
| callp &MVM_6model_find_method_spesh;
            | callp &MVM_string_ord_at;
            | callp &MVM_string_ord_basechar_at;
```",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1465,2021-04-08T21:02:29Z,2021-04-10T07:05:32Z,2021-04-11T10:56:13Z,MERGED,True,13,10,2,https://github.com/niner,Fix JITed ordfirst/ordat/ordbaseat returning 4294967295 instead of -1,1,[],https://github.com/MoarVM/MoarVM/pull/1465,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1465#issuecomment-817117985,"MVM_string_ord_at returns a MVMGrapheme32 which is a 32 bit signed integer.
However we treated it as a 64 bit integer without proper sign extension, which
turned a -1 into 4294967295. Fix by sign extend the result to a full 64 bit
signed integer.","That's not too many, I can probably take a look.
…
On Sat, Apr 10, 2021 at 8:51 AM niner ***@***.***> wrote:
 And if you got time to check them. These are for the lego jit:
 ```
 > for F in $(<ints) ; do ack ""return $F"" src/jit/graph.c ; done
 case MVM_OP_getexcategory: return MVM_get_exception_category;
 case MVM_OP_breakpoint: return MVM_debugserver_breakpoint_check;
 return consume_jumplist(tc, jg, iter, ins);
 return consume_invoke(tc, jg, iter, ins);
 case MVM_OP_getexcategory: return MVM_get_exception_category;
 case MVM_OP_breakpoint: return MVM_debugserver_breakpoint_check;
 return consume_jumplist(tc, jg, iter, ins);
 return consume_invoke(tc, jg, iter, ins);
 ```

 and

 ```
 > for F in $(<ints) ; do ack ""$F"" src/jit/x64/emit.dasc ; done
 | callp &MVM_6model_find_method_spesh;
 | callp &MVM_string_ord_at;
 | callp &MVM_string_ord_basechar_at;
 ```


 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 <#1465 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ACOHYUND4AEET4X3EJ35QIDTH77ORANCNFSM42TVYDQQ>
 .",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1465,2021-04-08T21:02:29Z,2021-04-10T07:05:32Z,2021-04-11T10:56:13Z,MERGED,True,13,10,2,https://github.com/niner,Fix JITed ordfirst/ordat/ordbaseat returning 4294967295 instead of -1,1,[],https://github.com/MoarVM/MoarVM/pull/1465,https://github.com/niner,6,https://github.com/MoarVM/MoarVM/pull/1465#issuecomment-817287806,"MVM_string_ord_at returns a MVMGrapheme32 which is a 32 bit signed integer.
However we treated it as a 64 bit integer without proper sign extension, which
turned a -1 into 4294967295. Fix by sign extend the result to a full 64 bit
signed integer.","I got curious and had an hour to work on it and indeed, getcpbyname suffered from the same issue and I missed the expr JIT version of ordbaseat. Both fixed by commit dba4b52
@MasterDuke17 thanks for asking the right question!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1467,2021-04-11T14:39:05Z,2021-04-22T09:55:31Z,2021-04-22T09:55:32Z,MERGED,True,11,22,8,https://github.com/MasterDuke17,Deprecate now unused graphs_s op,1,[],https://github.com/MoarVM/MoarVM/pull/1467,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1467,"It was removed from NQP in
Raku/nqp@a161dbd","It was removed from NQP in
Raku/nqp@a161dbd",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1468,2021-04-13T14:22:52Z,2021-04-17T20:01:23Z,2021-04-17T20:01:23Z,CLOSED,False,13,22,2,https://github.com/nwc10,Two small tweaks to MVM_coerce_n_s,2,[],https://github.com/MoarVM/MoarVM/pull/1468,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1468,"Remove duplication between MVM_coerce_n_s and dtoa_grisu3, a call to strlen and hence some memory writes.","Remove duplication between MVM_coerce_n_s and dtoa_grisu3, a call to strlen and hence some memory writes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1468,2021-04-13T14:22:52Z,2021-04-17T20:01:23Z,2021-04-17T20:01:23Z,CLOSED,False,13,22,2,https://github.com/nwc10,Two small tweaks to MVM_coerce_n_s,2,[],https://github.com/MoarVM/MoarVM/pull/1468,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1468#issuecomment-818950915,"Remove duplication between MVM_coerce_n_s and dtoa_grisu3, a call to strlen and hence some memory writes.",So why did Lin_MVM_reloc SEGV on Azure for commit 3b8386c? I'm struggling to replicate this.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1468,2021-04-13T14:22:52Z,2021-04-17T20:01:23Z,2021-04-17T20:01:23Z,CLOSED,False,13,22,2,https://github.com/nwc10,Two small tweaks to MVM_coerce_n_s,2,[],https://github.com/MoarVM/MoarVM/pull/1468,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1468#issuecomment-818962796,"Remove duplication between MVM_coerce_n_s and dtoa_grisu3, a call to strlen and hence some memory writes.","So why did Lin_MVM_reloc SEGV on Azure for commit 3b8386c? I'm struggling to replicate this.

I saw some random fails on my PRs today also, I don't think it's at all related to/caused by your commits.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1468,2021-04-13T14:22:52Z,2021-04-17T20:01:23Z,2021-04-17T20:01:23Z,CLOSED,False,13,22,2,https://github.com/nwc10,Two small tweaks to MVM_coerce_n_s,2,[],https://github.com/MoarVM/MoarVM/pull/1468,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1468#issuecomment-821507164,"Remove duplication between MVM_coerce_n_s and dtoa_grisu3, a call to strlen and hence some memory writes.",Hold off merging this - there might be a better plan.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1468,2021-04-13T14:22:52Z,2021-04-17T20:01:23Z,2021-04-17T20:01:23Z,CLOSED,False,13,22,2,https://github.com/nwc10,Two small tweaks to MVM_coerce_n_s,2,[],https://github.com/MoarVM/MoarVM/pull/1468,https://github.com/nwc10,5,https://github.com/MoarVM/MoarVM/pull/1468#issuecomment-821879408,"Remove duplication between MVM_coerce_n_s and dtoa_grisu3, a call to strlen and hence some memory writes.",Superceded by #1472,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1470,2021-04-15T09:30:40Z,,2021-04-17T08:23:08Z,OPEN,False,221,107,10,https://github.com/MasterDuke17,Simplify pow_I and change to never return Nums,2,[],https://github.com/MoarVM/MoarVM/pull/1470,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1470,"To make testing easier, right now I just add a pow2_I op, but if this approach is approved I'll do the bootstrapping dance in NQP to just replace pow_I.
Compared to pow_I:

I removed one special case (https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L624-L626) on the assumption that it's not that likely to happen repeatedly in hot paths, so I'd rather remove a branch for the common case
Throw on negative exponents and remove the code that dealt with them (which would return a Num)
Return an Int type object instead of Inf for too big exponents","To make testing easier, right now I just add a pow2_I op, but if this approach is approved I'll do the bootstrapping dance in NQP to just replace pow_I.
Compared to pow_I:

I removed one special case (https://github.com/MoarVM/MoarVM/blob/master/src/math/bigintops.c#L624-L626) on the assumption that it's not that likely to happen repeatedly in hot paths, so I'd rather remove a branch for the common case
Throw on negative exponents and remove the code that dealt with them (which would return a Num)
Return an Int type object instead of Inf for too big exponents",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1471,2021-04-17T13:04:06Z,2021-05-08T09:02:27Z,2021-05-22T15:05:55Z,MERGED,True,14,10,1,https://github.com/niner,Propagate spesh facts after guard elimination,3,[],https://github.com/MoarVM/MoarVM/pull/1471,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1471,This branch fixes 3 places where we turned ops into simple sets without taking the opportunity to copy the spesh facts. This manifested as not even attempting to inline a callee for lack of facts.,This branch fixes 3 places where we turned ops into simple sets without taking the opportunity to copy the spesh facts. This manifested as not even attempting to inline a callee for lack of facts.,True,{'THUMBS_UP': ['https://github.com/MasterDuke17']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1471,2021-04-17T13:04:06Z,2021-05-08T09:02:27Z,2021-05-22T15:05:55Z,MERGED,True,14,10,1,https://github.com/niner,Propagate spesh facts after guard elimination,3,[],https://github.com/MoarVM/MoarVM/pull/1471,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1471#issuecomment-821825188,This branch fixes 3 places where we turned ops into simple sets without taking the opportunity to copy the spesh facts. This manifested as not even attempting to inline a callee for lack of facts.,"`MVM_` could be removed, if it is `static` function.
I originally named it turn_into_set but that clashed with a variable of the
same name. I also wanted to move it into spesh/manipulate.c but copy_facts
isn't available there. So I settled on a static MVM_spesh_turn_into_set
figuring the prefix while being unusual wouldn't hurt...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1471,2021-04-17T13:04:06Z,2021-05-08T09:02:27Z,2021-05-22T15:05:55Z,MERGED,True,14,10,1,https://github.com/niner,Propagate spesh facts after guard elimination,3,[],https://github.com/MoarVM/MoarVM/pull/1471,https://github.com/zhuomingliang,3,https://github.com/MoarVM/MoarVM/pull/1471#issuecomment-821830701,This branch fixes 3 places where we turned ops into simple sets without taking the opportunity to copy the spesh facts. This manifested as not even attempting to inline a callee for lack of facts.,"MVM_ could be removed, if it is static function.
I originally named it turn_into_set but that clashed with a variable of the same name. I also wanted to move it into spesh/manipulate.c but copy_facts isn't available there. So I settled on a static MVM_spesh_turn_into_set figuring the prefix while being unusual wouldn't hurt...

maybe name it turn_into_set_op? :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1472,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.",True,{'THUMBS_UP': ['https://github.com/MasterDuke17']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-821879123,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","@jnthn Is it OK to add this repository as a 3rdparty repository? The code we need is under an Apache2 license.
Also, did I do it correctly? The don't see to actually have proper tags or releases, so to ensure reproducable I guess we need to go for a particular commit, rather than master, as we don't want what we get to move underneath us.
Draft PR for now so we get to see what the CI makes of it...
So

CI passes
@patrickbkr reports that it builds and does not regress on MinGW
It builds for me on arm32, ppc64 and sparc64. (All 3 Debian, but that's 32 bit and 64 bit big endian, abnd sparc64 is strict about alignment)

So it seems to be sufficiently portable, and it fixes subtle issues we have.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-825594032,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","Pushed an update (that I failed to do earlier) - fixes one significant comment goof (should be exponent not mantissa) and one thinko in a commit message (missed an I) but I'm sure that I spotted a second commit message goof, and I can't find it now.
Also I don't get some of what codefactor is complaining about - it's reporting new issues in MVM_radix and MVM_coerce_istrue and I didn't change those. I think it's fair to be annoyed with MVM_coerce_n_s but I don't think that there is any way to make that actually simpler, compared with ""shuffled around a bit to appease the tool, but now not as linear for the human to read"".",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-825597224,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","representation where two or more to the same binary value.
found the other missing word again - map",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,5,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-825877372,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.",Fixed that commit message. I believe that there are no more to find.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/patrickbkr,6,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-828537922,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.",We are now shortly after the release. Best time to merge of the month!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/jnthn,7,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-828577966,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","@jnthn Is it OK to add this repository as a 3rdparty repository? The code we need is under an Apache2 license.

Yes

Also, did I do it correctly? The don't see to actually have proper tags or releases, so to ensure reproducable I guess we need to go for a particular commit, rather than master, as we don't want what we get to move underneath us.

We've tended to fork such things under the MoarVM organization and use that.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,8,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-828961679,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","We've tended to fork such things under the MoarVM organization and use that.

That would also solve the problem of ""tagging"" the version we need, as it would be our branch we pull from, and we can update that from upstream when needed. However, I don't have permission to fork to MoarVM (just Raku!) so I can't do this.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/jnthn,9,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-829110423,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.",@nwc10 Forked as https://github.com/MoarVM/ryu (and added @MoarVM/team-moarvm so you have access).,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,10,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-829855762,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","Rebased onto master (else every CI would fail because the tag is so last month)
Added 1 commit to change the submodule to https://github.com/MoarVM/ryu
Other than CodeFactor, this should all work...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,11,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-829863219,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","https://dev.azure.com/MoarVM/6b7ef196-3f6c-40c1-93b8-6350dcf162b2/_apis/build/builds/508/logs/160
2021-04-30T05:55:53.6386853Z ==============================================================================
2021-04-30T05:55:53.6387769Z Task         : Command line
2021-04-30T05:55:53.6388580Z Description  : Run a command line script using Bash on Linux and macOS and cmd.exe on Windows
2021-04-30T05:55:53.6388929Z Version      : 2.182.0
2021-04-30T05:55:53.6389449Z Author       : Microsoft Corporation
2021-04-30T05:55:53.6390716Z Help         : https://docs.microsoft.com/azure/devops/pipelines/tasks/utility/command-line
2021-04-30T05:55:53.6391117Z ==============================================================================
2021-04-30T05:55:54.2014528Z Generating script.
2021-04-30T05:55:54.2016329Z Script contents:
2021-04-30T05:55:54.2016922Z sudo apt-get install libzstd-dev valgrind
2021-04-30T05:55:54.2017532Z ========================== Starting Command Output ===========================
2021-04-30T05:55:54.2024964Z [command]/bin/bash --noprofile --norc /home/vsts/work/_temp/1fc57368-e8fb-434f-88bb-cb4ecd432c1f.sh
2021-04-30T05:55:57.7010975Z Reading package lists...
2021-04-30T05:55:57.9548403Z Building dependency tree...
2021-04-30T05:55:57.9595593Z Reading state information...
2021-04-30T05:55:58.1264289Z The following additional packages will be installed:
2021-04-30T05:55:58.1265375Z   gdb gdbserver libbabeltrace1 libc6-dbg libipt1 libzstd1
2021-04-30T05:55:58.1265759Z Suggested packages:
2021-04-30T05:55:58.1272710Z   gdb-doc valgrind-dbg valgrind-mpi kcachegrind alleyoop valkyrie
2021-04-30T05:55:58.1743836Z The following NEW packages will be installed:
2021-04-30T05:55:58.1746677Z   gdb gdbserver libbabeltrace1 libc6-dbg libipt1 libzstd-dev valgrind
2021-04-30T05:55:58.1752446Z The following packages will be upgraded:
2021-04-30T05:55:58.1754080Z   libzstd1
2021-04-30T05:55:58.2101012Z 1 upgraded, 7 newly installed, 0 to remove and 13 not upgraded.
2021-04-30T05:55:58.2101609Z Need to get 23.7 MB of archives.
2021-04-30T05:55:58.2102766Z After this operation, 127 MB of additional disk space will be used.
2021-04-30T05:55:58.2104201Z Get:1 http://azure.archive.ubuntu.com/ubuntu bionic/main amd64 libbabeltrace1 amd64 1.5.5-1 [154 kB]
2021-04-30T05:55:58.2212897Z Get:2 http://azure.archive.ubuntu.com/ubuntu bionic/universe amd64 libipt1 amd64 1.5-1ubuntu1 [28.6 kB]
2021-04-30T05:55:58.2219463Z Get:3 http://azure.archive.ubuntu.com/ubuntu bionic-updates/main amd64 libc6-dbg amd64 2.27-3ubuntu1.4 [5163 kB]
2021-04-30T05:55:58.2277766Z Get:4 http://ppa.launchpad.net/ondrej/php/ubuntu bionic/main amd64 libzstd1 amd64 1.4.8+dfsg-2+ubuntu18.04.1+deb.sury.org+4 [330 kB]
2021-04-30T05:55:58.2886377Z Err:5 http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu bionic/main amd64 gdb amd64 8.2-0ubuntu1~18.04
2021-04-30T05:55:58.2888953Z   404  Not Found [IP: 91.189.95.85 80]
2021-04-30T05:55:58.3108780Z Err:6 http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu bionic/main amd64 gdbserver amd64 8.2-0ubuntu1~18.04
2021-04-30T05:55:58.3112194Z   404  Not Found [IP: 91.189.95.85 80]
2021-04-30T05:55:58.3344135Z Get:7 http://ppa.launchpad.net/ondrej/php/ubuntu bionic/main amd64 libzstd-dev amd64 1.4.8+dfsg-2+ubuntu18.04.1+deb.sury.org+4 [411 kB]
2021-04-30T05:55:58.3363984Z Get:8 http://azure.archive.ubuntu.com/ubuntu bionic-updates/main amd64 valgrind amd64 1:3.13.0-2ubuntu2.3 [14.3 MB]
2021-04-30T05:55:58.6672678Z Fetched 20.3 MB in 0s (45.1 MB/s)
2021-04-30T05:55:58.6701728Z E: Failed to fetch http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu/pool/main/g/gdb/gdb_8.2-0ubuntu1~18.04_amd64.deb  404  Not Found [IP: 91.189.95.85 80]
2021-04-30T05:55:58.6704884Z E: Failed to fetch http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu/pool/main/g/gdb/gdbserver_8.2-0ubuntu1~18.04_amd64.deb  404  Not Found [IP: 91.189.95.85 80]
2021-04-30T05:55:58.6706982Z E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?
2021-04-30T05:55:58.6775588Z ##[error]Bash exited with code '100'.
2021-04-30T05:55:58.6886643Z ##[section]Finishing: Install libzstd-dev and valgrind

Clearly it hates me. This is what failed. (Twice.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,12,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-829912343,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.",And rebased again so that it runs with the fixes from #1484,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/nwc10,13,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-832570927,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","Rebased onto master, which removes the commit Convert MVM_num_isnanorinf and MVM_num_{posinf,neginf,nan} to static inline, which is already on master.
It turns out that I wrote that commit twice, on two different branches, 3 months apart. I figured therefore that it's a good idea to put it into master before I attempt to write it a third time.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1472,2021-04-17T19:56:22Z,2021-08-10T19:37:49Z,2021-09-29T13:35:48Z,MERGED,True,192,436,6,https://github.com/nwc10,Switch MVM_coerce_n_s to Ryū from Grisu3 with a sprintf fallback,5,['After a release'],https://github.com/MoarVM/MoarVM/pull/1472,https://github.com/MasterDuke17,14,https://github.com/MoarVM/MoarVM/pull/1472#issuecomment-896264429,"As Zoffix notes in commit 067c059 which switched to Grisu3, as Grisu3 can only handle ~99.5% of cases, it needs to be paired with a fallback algorithm for the other 0.5%. To save adding a second external library, we had been using sprintf with the format %17g for this. Using %17g instead of the default width of 15 produced correct results, in that the output would always round trip correctly, but for some values it was not producing the optimal result - ie the shortest decimal representation where two or more to the same binary value.
Unfortunately for some obvious cases, what we had exposed this. For example:
nqp -e 'nqp::say(1e23)'
9.9999999999999992e+22
nqp -e 'nqp::say(1e23 - 9.9999999999999992e+22
0

As noted in that commit, Dragon4 would have been a better fallback, and at the time ""Grisu3+Dragon4 [was] the current state of the art.""
Since then Ryū has been published. The author states that it is faster, but I haven't verified these benchmarks. As it is a complete algorithm - it handles 100% of inputs - we can use it without needing any fallback, thus simplifying our code and fixing the buggy sub-optimal results.  Hence am not concerned if it isn't always faster than Grisu3, as correctness trumps ""getting the wrong answer as fast as possible"".
Current state of the art might actually be Dragonbox, but the reference implementation is in C++, and it is not clear whether that algorithm has had sufficient peer review yet to find any subtle problems. If someone else authors a suitably licensed implementation in portable C, we should consider switching to it, but it is not worth doing that ourselves.","I just did a local checkout, rebase onto master, rebuilt NQP+Rakudo, and all tests pass, so merging now.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1473,2021-04-18T17:20:58Z,2021-04-22T10:11:43Z,2021-04-22T10:11:45Z,MERGED,True,42,3,6,https://github.com/niner,Fix inlines missing synthetic deopt points,1,[],https://github.com/MoarVM/MoarVM/pull/1473,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1473,"Since commit 3345ec3 we have synthetic deopt
points on inserted guards. These deopt points take their index from an existing
deopt point they are linked with. This is important as otherwise we might miss
registers we need to restore when deoptimizing.
However these synth deopt points were not retained on spesh graphs created from
existing candidates for the purpose of inlining. So with these exactly what the
synth deopt points should protect us from was happening. We missed out on some
register usage and did not materialize objects optimized away by PEA.
Fix by collecting information about these synth deopt points when writing byte
code, retaining it in the spesh candidate and restoring it when creating a
control flow graph for inlining.","Since commit 3345ec3 we have synthetic deopt
points on inserted guards. These deopt points take their index from an existing
deopt point they are linked with. This is important as otherwise we might miss
registers we need to restore when deoptimizing.
However these synth deopt points were not retained on spesh graphs created from
existing candidates for the purpose of inlining. So with these exactly what the
synth deopt points should protect us from was happening. We missed out on some
register usage and did not materialize objects optimized away by PEA.
Fix by collecting information about these synth deopt points when writing byte
code, retaining it in the spesh candidate and restoring it when creating a
control flow graph for inlining.",True,"{'THUMBS_UP': ['https://github.com/MasterDuke17', 'https://github.com/lizmat', 'https://github.com/Altai-man', 'https://github.com/jnthn']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1474,2021-04-19T22:27:49Z,2021-04-27T06:37:32Z,2021-04-27T07:11:59Z,MERGED,True,4,4,2,https://github.com/MasterDuke17,Use correct size for size argument to send()/write(),1,[],https://github.com/MoarVM/MoarVM/pull/1474,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1474,"In 3734a1d it was changed to cast to
int, but that can go negative for large values, which causes a 'Bad
address' error. raku -e 'say ""H"" x 2147483647' | wc now correctly
reports 2147483648 characters written. Fixes the second error reported
in rakudo/rakudo#2197 (comment),
but not the original error of that issue.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","In 3734a1d it was changed to cast to
int, but that can go negative for large values, which causes a 'Bad
address' error. raku -e 'say ""H"" x 2147483647' | wc now correctly
reports 2147483648 characters written. Fixes the second error reported
in rakudo/rakudo#2197 (comment),
but not the original error of that issue.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1474,2021-04-19T22:27:49Z,2021-04-27T06:37:32Z,2021-04-27T07:11:59Z,MERGED,True,4,4,2,https://github.com/MasterDuke17,Use correct size for size argument to send()/write(),1,[],https://github.com/MoarVM/MoarVM/pull/1474,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1474#issuecomment-823009900,"In 3734a1d it was changed to cast to
int, but that can go negative for large values, which causes a 'Bad
address' error. raku -e 'say ""H"" x 2147483647' | wc now correctly
reports 2147483648 characters written. Fixes the second error reported
in rakudo/rakudo#2197 (comment),
but not the original error of that issue.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",The cast to int was certainly wrong on a 64 bit machine. But what would now happen on a 32 bit machine?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1474,2021-04-19T22:27:49Z,2021-04-27T06:37:32Z,2021-04-27T07:11:59Z,MERGED,True,4,4,2,https://github.com/MasterDuke17,Use correct size for size argument to send()/write(),1,[],https://github.com/MoarVM/MoarVM/pull/1474,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1474#issuecomment-823132893,"In 3734a1d it was changed to cast to
int, but that can go negative for large values, which causes a 'Bad
address' error. raku -e 'say ""H"" x 2147483647' | wc now correctly
reports 2147483648 characters written. Fixes the second error reported
in rakudo/rakudo#2197 (comment),
but not the original error of that issue.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","But what would now happen on a 32 bit machine?

Wouldn't it give some error about trying to fit a too-big number instead of silently truncating?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1474,2021-04-19T22:27:49Z,2021-04-27T06:37:32Z,2021-04-27T07:11:59Z,MERGED,True,4,4,2,https://github.com/MasterDuke17,Use correct size for size argument to send()/write(),1,[],https://github.com/MoarVM/MoarVM/pull/1474,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1474#issuecomment-823139126,"In 3734a1d it was changed to cast to
int, but that can go negative for large values, which causes a 'Bad
address' error. raku -e 'say ""H"" x 2147483647' | wc now correctly
reports 2147483648 characters written. Fixes the second error reported
in rakudo/rakudo#2197 (comment),
but not the original error of that issue.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Wouldn't it give some error about trying to fit a too-big number instead of
 silently truncating?
Best case is a compile time error as we pass a 64 bit number to a function
only taking a 32 bit number.
Worst case is that the number is silently truncated.

None of these cases seem to be desirable :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1474,2021-04-19T22:27:49Z,2021-04-27T06:37:32Z,2021-04-27T07:11:59Z,MERGED,True,4,4,2,https://github.com/MasterDuke17,Use correct size for size argument to send()/write(),1,[],https://github.com/MoarVM/MoarVM/pull/1474,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1474#issuecomment-823152116,"In 3734a1d it was changed to cast to
int, but that can go negative for large values, which causes a 'Bad
address' error. raku -e 'say ""H"" x 2147483647' | wc now correctly
reports 2147483648 characters written. Fixes the second error reported
in rakudo/rakudo#2197 (comment),
but not the original error of that issue.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Well, I guess we could propagate the size_t farther back/up the call chain (e.g., into MVM_io_write_bytes), or instead check at the call to write()/send() that whatever we're passed fits into a size_t (since that's what's in their signatures)?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1474,2021-04-19T22:27:49Z,2021-04-27T06:37:32Z,2021-04-27T07:11:59Z,MERGED,True,4,4,2,https://github.com/MasterDuke17,Use correct size for size argument to send()/write(),1,[],https://github.com/MoarVM/MoarVM/pull/1474,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1474#issuecomment-823174081,"In 3734a1d it was changed to cast to
int, but that can go negative for large values, which causes a 'Bad
address' error. raku -e 'say ""H"" x 2147483647' | wc now correctly
reports 2147483648 characters written. Fixes the second error reported
in rakudo/rakudo#2197 (comment),
but not the original error of that issue.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Hm, bytes_written and MVMIOFileData.byte_position should be size_t, r should be ssize_t...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1474,2021-04-19T22:27:49Z,2021-04-27T06:37:32Z,2021-04-27T07:11:59Z,MERGED,True,4,4,2,https://github.com/MasterDuke17,Use correct size for size argument to send()/write(),1,[],https://github.com/MoarVM/MoarVM/pull/1474,https://github.com/MasterDuke17,7,https://github.com/MoarVM/MoarVM/pull/1474#issuecomment-825475369,"In 3734a1d it was changed to cast to
int, but that can go negative for large values, which causes a 'Bad
address' error. raku -e 'say ""H"" x 2147483647' | wc now correctly
reports 2147483648 characters written. Fixes the second error reported
in rakudo/rakudo#2197 (comment),
but not the original error of that issue.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","OK, I'll give that a test. Somewhat unexpectedly, explicitly using
SO_SNDBUF caused problems because it was so small (7 iirc) and threw a
bunch of exceptions in some of the networking related spectests.

Re UDP packets, I don't think they go through this code, since all the
calls to socket() (
https://github.com/MoarVM/MoarVM/blob/d209337c258729ae9e601acbd80a32a36028793b/src/io/syncsocket.c#L397
and
https://github.com/MoarVM/MoarVM/blob/d209337c258729ae9e601acbd80a32a36028793b/src/io/syncsocket.c#L429)
use SOCK_STREAM.

It's been a very long time since I've done any C network programming, I
even opened up my physical copy of Stevens' UNIX Network Programming, but
couldn't find anything which gave a definitive answer to what the best size
should be.
…
On Fri, Apr 23, 2021 at 8:06 AM Nicholas Clark ***@***.***> wrote:
 ***@***.**** commented on this pull request.
 ------------------------------

 In src/io/syncsocket.c
 <#1474 (comment)>:

 > @@ -190,7 +190,7 @@ MVMint64 socket_write_bytes(MVMThreadContext *tc, MVMOSHandle *h, char *buf, MVM
      while (bytes > 0) {
          int r;
          do {
 -            r = send(data->handle, buf, (int)bytes, 0);
 +            r = send(data->handle, buf, bytes > 32767 ? 32767 : bytes, 0);

 I think that this should be 1073741824 too. The send call should fail if
 it what is passed is too large.

 In that, the IBM document mentions TCP, UDP and RAW sockets. For UDP and
 RAW sockets, it matters whether the bytes are transmitted atomically (ie
 one packet, possibly fragmented at the IP level). The remote end is going
 to be reading in messages, not streams. Hence what is being sent is too
 big, it's better for the sender to get the error EMSGSIZE (and know this)
 than send a partial packet (pretend nothing happened), (which the receiver
 might not realise is truncated) and then send a second (or third) packet
 which starts midway through the intended message, and might confuse the
 receiver.

 Thinking further, this code is actually incorrect (assuming you can reach
 it with a UDP socket), as it prevents you sending a UDP packet sized
 between 32767 and 65527 bytes, which is a legitimate use.

 So I think that this should be 1073741824 too. (And it might be better to
 express that as 0x40000000 in all places - sorry, didn't think of that
 earlier). Trying to send large over-large payloads with UDP and RAW will
 fail successfully, whilst large transfers with TCP potentially will use
 much larger packets. (I think that it's possible for TCP to use packets >
 65536ish bytes if the underlying link supports them)(yes there are buffers,
 but network cards can be really fast, so they might have sent your first
 32767 bytes before you manage to enqueue another 32767 in the buffer)

 Disclaimer - as best I can remember I've never actually written code to
 deal with UDP or RAW sockets. I remember playing with ""ping of death""
 <https://en.wikipedia.org/wiki/Ping_of_death> at the time, but IIRC there
 was other peoples' source code, and heck, Irix ping was trusting enough
 to send such malformed packets if you simply gave it daft comand line flags
 - the ""feature"" was standard on the OS.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#1474 (review)>,
 or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ACOHYUP3M2AS65SZX5WFJHDTKEL6BANCNFSM43G2WDEA>
 .",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1474,2021-04-19T22:27:49Z,2021-04-27T06:37:32Z,2021-04-27T07:11:59Z,MERGED,True,4,4,2,https://github.com/MasterDuke17,Use correct size for size argument to send()/write(),1,[],https://github.com/MoarVM/MoarVM/pull/1474,https://github.com/nwc10,8,https://github.com/MoarVM/MoarVM/pull/1474#issuecomment-827353744,"In 3734a1d it was changed to cast to
int, but that can go negative for large values, which causes a 'Bad
address' error. raku -e 'say ""H"" x 2147483647' | wc now correctly
reports 2147483648 characters written. Fixes the second error reported
in rakudo/rakudo#2197 (comment),
but not the original error of that issue.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I think that it's good. I guess the only thing we can do now is try it in the real world, as I don't think that CI systems are going to find any possible remaining problems.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1475,2021-04-20T13:14:57Z,2021-04-22T09:47:46Z,2021-04-22T09:47:47Z,MERGED,True,57,31,1,https://github.com/MasterDuke17,Some updates and tweaks to Azure CI pipelines,5,[],https://github.com/MoarVM/MoarVM/pull/1475,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1475,"The main pipelines now use Ubuntu 20.04 (the latest available) and I added
single 18.04 and 16.04 pipelines for GCC and Clang (so four new in total)
so we still get some minimal testing on older versions.","The main pipelines now use Ubuntu 20.04 (the latest available) and I added
single 18.04 and 16.04 pipelines for GCC and Clang (so four new in total)
so we still get some minimal testing on older versions.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1475,2021-04-20T13:14:57Z,2021-04-22T09:47:46Z,2021-04-22T09:47:47Z,MERGED,True,57,31,1,https://github.com/MasterDuke17,Some updates and tweaks to Azure CI pipelines,5,[],https://github.com/MoarVM/MoarVM/pull/1475,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1475#issuecomment-824649797,"The main pipelines now use Ubuntu 20.04 (the latest available) and I added
single 18.04 and 16.04 pipelines for GCC and Clang (so four new in total)
so we still get some minimal testing on older versions.","Did we decide to just accept the occasional test failures on Windows caused by the -j2 for now? (This is not meant as a suggestive question. I really am unsure if I've maybe missed a bit of discussion about this.)

I don't think there was any definite yeas or nays. @ugexe said he prefers to only use a single job in his CI pipelines for reproducibility, but I don't believe he actually voted against this. I prefer using multiple jobs as that is more likely to uncover potential problems, even though it may make reproducing them harder. Since there are a couple approves for this PR I'll leave it as is (adding the -j2), but if there's a subsequent consensus against that's fine, we can revert.
In the multiple runs since that first one, I haven't seen that problem re-appear.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1475,2021-04-20T13:14:57Z,2021-04-22T09:47:46Z,2021-04-22T09:47:47Z,MERGED,True,57,31,1,https://github.com/MasterDuke17,Some updates and tweaks to Azure CI pipelines,5,[],https://github.com/MoarVM/MoarVM/pull/1475,https://github.com/patrickbkr,3,https://github.com/MoarVM/MoarVM/pull/1475#issuecomment-824664737,"The main pipelines now use Ubuntu 20.04 (the latest available) and I added
single 18.04 and 16.04 pipelines for GCC and Clang (so four new in total)
so we still get some minimal testing on older versions.",Looking good. 👍🏽,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1476,2021-04-22T16:37:04Z,2021-05-08T09:00:46Z,2021-05-22T14:59:08Z,MERGED,True,0,6,1,https://github.com/niner,Fix spesh missing writes to containers,1,[],https://github.com/MoarVM/MoarVM/pull/1476,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1476,"When containers get passed as arguments (i.e. read/write arguments), we collect
statistics on these containers' contents and create facts from them. These
facts are guarded by the arg guard tree which is used for selecting spesh
candidates, so a candidate relying on these facts will only be run, when the
facts hold.
However we also propagated these facts futher and used them for optimizations.
The problem is that containers are mutable so while the facts are guaranteed
to be correct at the invocation of a frame, they may change during the frame's
runtime when for example a new value gets assigned to the container.
This led to spesh optimizing away a method lookup and replacing it with a
spesh slot holding the wrong class' method.
Fix by just not propagating facts about deconted values into the frame's
registers. We do collect statistics from the decont ops within the frames
and can still optimizing based on those and we add proper guards on them.","When containers get passed as arguments (i.e. read/write arguments), we collect
statistics on these containers' contents and create facts from them. These
facts are guarded by the arg guard tree which is used for selecting spesh
candidates, so a candidate relying on these facts will only be run, when the
facts hold.
However we also propagated these facts futher and used them for optimizations.
The problem is that containers are mutable so while the facts are guaranteed
to be correct at the invocation of a frame, they may change during the frame's
runtime when for example a new value gets assigned to the container.
This led to spesh optimizing away a method lookup and replacing it with a
spesh slot holding the wrong class' method.
Fix by just not propagating facts about deconted values into the frame's
registers. We do collect statistics from the decont ops within the frames
and can still optimizing based on those and we add proper guards on them.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1478,2021-04-24T14:03:51Z,2021-05-08T09:01:19Z,2021-05-22T15:00:54Z,MERGED,True,12,1,1,https://github.com/niner,Fix missing gc_mark of simstackframe's arg_types,1,[],https://github.com/MoarVM/MoarVM/pull/1478,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1478,"Found through: AddressSanitizer: heap-buffer-overflow src/spesh/stats.c:40 in
incomplete_type_tuple x62f000000040 is located 960 bytes to the left of 51200-
byte region [0x62f000000400,0x62f00000cc00) allocated by thread 0 in setup_bin
src/gc/gen2.c:27","Found through: AddressSanitizer: heap-buffer-overflow src/spesh/stats.c:40 in
incomplete_type_tuple x62f000000040 is located 960 bytes to the left of 51200-
byte region [0x62f000000400,0x62f00000cc00) allocated by thread 0 in setup_bin
src/gc/gen2.c:27",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1478,2021-04-24T14:03:51Z,2021-05-08T09:01:19Z,2021-05-22T15:00:54Z,MERGED,True,12,1,1,https://github.com/niner,Fix missing gc_mark of simstackframe's arg_types,1,[],https://github.com/MoarVM/MoarVM/pull/1478,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1478#issuecomment-826098267,"Found through: AddressSanitizer: heap-buffer-overflow src/spesh/stats.c:40 in
incomplete_type_tuple x62f000000040 is located 960 bytes to the left of 51200-
byte region [0x62f000000400,0x62f00000cc00) allocated by thread 0 in setup_bin
src/gc/gen2.c:27","@jnthn I wonder how something so obvious could have hidden for so long in plain sight. Am I missing something that makes this implicitly OK, or is the bug really as straight forward as this?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1479,2021-04-24T15:21:29Z,2021-04-24T15:43:09Z,2021-04-24T15:43:12Z,MERGED,True,44,0,1,https://github.com/Altai-man,Update ChangeLog for 2021.04 release,1,[],https://github.com/MoarVM/MoarVM/pull/1479,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1479,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1480,2021-04-24T15:51:37Z,2021-04-24T15:52:34Z,2021-04-24T15:52:41Z,MERGED,True,1,1,1,https://github.com/Altai-man,2021.04 release,1,[],https://github.com/MoarVM/MoarVM/pull/1480,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1480,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1481,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.","Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1481#issuecomment-827691109,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.","While I rarely look deep into a submodule's history, I have looked a couple commits back (i.e., we've added a commit or two on top and I want to find the last upstream commit). Maybe make the depth 3 or 5 instead of 1? Does that still have most of the space saving?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1481#issuecomment-827848316,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.","Playing with --depth 5 I realise that this invocation of git submodule is very chatty (even the original --depth )
For some reason the --quiet is getting lost. (I've seen this before with something - I think it was --quiet from git fetch doesn't get passed onwards to the git gc --auto that it invokes)
So I need to figure out how to shut this up.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1481#issuecomment-827855675,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.","Oh my, this is bonkers. If you have this diff:
index 566a9450d..1737c2c7c 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -1,18 +1,27 @@
 [submodule ""3rdparty/libuv""]
        path = 3rdparty/libuv
        url = https://github.com/libuv/libuv.git
+       shallow = true
 [submodule ""3rdparty/dyncall""]
        path = 3rdparty/dyncall
        url = https://github.com/MoarVM/dyncall.git
+       shallow = true
 [submodule ""3rdparty/dynasm""]
        path = 3rdparty/dynasm
        url = https://github.com/MoarVM/dynasm.git
+       shallow = true
 [submodule ""3rdparty/libtommath""]
        path = 3rdparty/libtommath
        url = https://github.com/MoarVM/libtommath
+       shallow = true
 [submodule ""3rdparty/cmp""]
        path = 3rdparty/cmp
        url = https://github.com/MoarVM/cmp.git
+       shallow = true
 [submodule ""3rdparty/libatomicops""]
        path = 3rdparty/libatomicops
        url = https://github.com/MoarVM/libatomic_ops
+       shallow = true
+
+# shallow = true saves about 12M on a git clone --recursive
+# If you need the history, run `git submodule foreach git fetch --unshallow`
then now your git submodule --quiet update isn't because it gets all chatty (seemingly to stderr if its a tty)
Or if you don't have shallow = true in your .gitmodules but pass --depth to git submodule update.
(And note that whatever .gitmodules says about shallow, git submodule update doesn't heed it. But clearly is reading that file as the contents are causing --quiet to get forgotten.)
I don't see a good work around here.",True,{'EYES': ['https://github.com/patrickbkr']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/nwc10,5,https://github.com/MoarVM/MoarVM/pull/1481#issuecomment-828204260,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.","It's a bug in git. The fix is:
index eb90f18229..4678378424 100755
--- a/git-submodule.sh
+++ b/git-submodule.sh
@@ -420,9 +420,9 @@ fetch_in_submodule () (
        cd ""$1"" &&
        if test $# -eq 3
        then
-               echo ""$3"" | git fetch --stdin ${2:+""$2""}
+               echo ""$3"" | git fetch ${GIT_QUIET:+--quiet} --stdin ${2:+""$2""}
        else
-               git fetch ${2:+""$2""}
+               git fetch ${GIT_QUIET:+--quiet} ${2:+""$2""}
        fi
 )

Now I just have to figure out how to submit this.
(This makes it look easy. I've spent a couple of hours with full-on strace output to work out what happens where in the maze of forks and threads. That git fetch command is only called for shallow checkouts, and in turn it is passing a progress true flag down to the git-remote-https process which in turn is being chatty to its fd 1 which I infer is going down a pipe to another process that then relays it to stderr, or is being duped to stderr by its invoker. I'm still not sure why the depth isn't being done correctly for just git submodule update despite it clearly reading .gitmodules, or why git --clone recursive pulls tags for the submodules with shallow = true but git submodule update --depth 1 does not. But I don't need to fix those to save 38M by default.)",True,{'ROCKET': ['https://github.com/patrickbkr']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1481#issuecomment-831804282,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.",Is https://git.kernel.org/pub/scm/git/git.git/commit/?id=a819e2b3ef7c27d04befa0a345c9e6e3c7a7965e related?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/nwc10,7,https://github.com/MoarVM/MoarVM/pull/1481#issuecomment-842080360,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.","It's git/git@62af4bd and it turns out that it's made it into Git v2.32.0-rc
(If I read it right, it will also be backported to git maint releases, so we might be able to use it before Debian Bookworm)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/MasterDuke17,8,https://github.com/MoarVM/MoarVM/pull/1481#issuecomment-896135034,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.","Git v2.32.0 has been released (I have it now on my Arch desktop). I don't know if the fix was backported, or where it needs to land for this to be mergeable?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/nwc10,9,https://github.com/MoarVM/MoarVM/pull/1481#issuecomment-909024526,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.","I don't know what git policy on backporting is. (I assume that it's documented somewhere, but I don't know where that is).
I can see from the tags that maintenance releases are made, but also that none have been made in the past 5 months, so I'm guessing that it's unlikely that it will appear in a backport: https://git.kernel.org/pub/scm/git/git.git/refs
I don't have access to any machine that has had git v2.32.0 or v2.33.0 installed, so I can't test it against a ""packaged"" git. (I didn't really want to test it just on something I built from source - I wanted to confirm that I didn't do anything ""special"" in my build that hid real errors). So I'm reluctant to take this further personally until I can test like this.
As in - I think that it's good, and if you're happy to take it over and merge it, that's fine, but I'm not comfortable doing that yet. (And part of this is that I can't actually benefit from this change yet, as it's supposed to save disk space on test machines, and hence if I need my own git build to ""save"" space, I'm not saving anything.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1481,2021-04-27T10:53:03Z,2022-01-11T19:40:38Z,2022-01-11T19:40:39Z,CLOSED,False,33,2,2,https://github.com/nwc10,Submodule default shallow clone,1,[],https://github.com/MoarVM/MoarVM/pull/1481,https://github.com/nwc10,10,https://github.com/MoarVM/MoarVM/pull/1481#issuecomment-1009712309,"Using shallow clones for the submodules saves about 38M of disk space.
If you need the history, it can easily be restored locally by running git submodule foreach git fetch --unshallow.
Most of us rarely look at the submodule history, so this seems like a worthwhile trade off.","(Finally) I got back to this. Mostly because I

now have access to a machine with extremely slow external network connection...
and git with the bugfixed version

(and actually it turns out that at least one more system I have access to has a recent enough git)
Turns out I hadn't found and fixed all the ""issues"" in this yet (ie worked within the limitations of the git bug that is now fixed)
Basically

you can't put shallow = true in .gitmodules because this causes the git invocations from tools/update-submodules.pl to ignore --quiet and hence generate a lot of chatty progress output (despite not actually doing a shallow checkout or update)
I needed to change the version number in tools/update-submodules.pl from 1.8.4 to 2.32.0

I believe that this branch (well, single commit) is now correct, and about as good as we can get. git clone --recursive won't default to shallow submodules, but any ""regular"" build from a ""regular"" checkout will be shallow on new enough systems (so progressively more systems)
I'm not sure if I spent more time figuring this stuff out than I will ever spend on waiting for network traffic...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1482,2021-04-27T22:34:14Z,,2021-10-21T10:35:15Z,OPEN,False,58,3,6,https://github.com/MasterDuke17,Add tracy as a submodule and build option,3,[],https://github.com/MoarVM/MoarVM/pull/1482,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1482,perl Configure.pl --tracy will build with tracy (https://github.com/wolfpld/tracy) support.,perl Configure.pl --tracy will build with tracy (https://github.com/wolfpld/tracy) support.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1483,2021-04-29T08:45:30Z,2021-05-04T06:24:49Z,2021-05-04T06:24:50Z,MERGED,True,33,70,1,https://github.com/MasterDuke17,Remove unnecessary Windows specific tasks from CI,1,[],https://github.com/MoarVM/MoarVM/pull/1483,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1483,"We can use Powershell on all OSes, so do that, but then only set the few
Windows-specific options needed to get the special dev Powershell at runtime.
Also stick the install destination in a variable, so for relocatable
builds we can change that after moving the installation and subsequent
jobs can be simplified.","We can use Powershell on all OSes, so do that, but then only set the few
Windows-specific options needed to get the special dev Powershell at runtime.
Also stick the install destination in a variable, so for relocatable
builds we can change that after moving the installation and subsequent
jobs can be simplified.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1484,2021-04-30T07:03:45Z,2021-04-30T07:36:23Z,2021-04-30T07:36:26Z,MERGED,True,3,1,1,https://github.com/patrickbkr,CI: Update package index before installing packages,1,[],https://github.com/MoarVM/MoarVM/pull/1484,https://github.com/patrickbkr,1,https://github.com/MoarVM/MoarVM/pull/1484,This should fix missing package errors.,This should fix missing package errors.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1485,2021-05-01T18:17:50Z,2021-05-26T20:56:22Z,2021-05-26T20:56:22Z,MERGED,True,1,1,1,https://github.com/dogbert17,Fix heap-use-after-free in t/spec/S17-promise/nonblocking-await.t,1,[],https://github.com/MoarVM/MoarVM/pull/1485,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1485,"What happens is that we start a task on a worker thread. This
task then looks up a dynamic variable up the call chain and in
the lexical context. It can happen that we exit the caller frame
precisely in the moment that the task's frame walker is processing
this frame. When exiting we also clean up the frame extras which
among onther things holds the dynvar cache.
Using the _at_safepoint version defers freeing that structure, so
it won't happen that the thing gets freed while the frame walker
is still using it.
nine++ for finding out what caused the bug and explaining it","What happens is that we start a task on a worker thread. This
task then looks up a dynamic variable up the call chain and in
the lexical context. It can happen that we exit the caller frame
precisely in the moment that the task's frame walker is processing
this frame. When exiting we also clean up the frame extras which
among onther things holds the dynvar cache.
Using the _at_safepoint version defers freeing that structure, so
it won't happen that the thing gets freed while the frame walker
is still using it.
nine++ for finding out what caused the bug and explaining it",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1486,2021-05-04T20:19:09Z,2021-05-05T06:10:48Z,2021-05-05T06:11:07Z,MERGED,True,22,30,9,https://github.com/nwc10,"Convert MVM_num_{isnanorinf,posinf,neginf,nan} to inline functions.",1,[],https://github.com/MoarVM/MoarVM/pull/1486,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1486,"They are all one-liners - likely the size of the inlined code is smaller
than the calling convention setup.
(Unless one is building with Link Time Optimisation, in which case that
will do the transformation, but even then, why make more work for ourselves?)
This has the side effect of moving #include <math.h> to a header file,
meaning that various C files no longer need to include it.","They are all one-liners - likely the size of the inlined code is smaller
than the calling convention setup.
(Unless one is building with Link Time Optimisation, in which case that
will do the transformation, but even then, why make more work for ourselves?)
This has the side effect of moving #include <math.h> to a header file,
meaning that various C files no longer need to include it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1488,2021-05-07T16:01:01Z,2021-05-16T08:47:05Z,2021-05-16T08:47:11Z,MERGED,True,176,113,4,https://github.com/nwc10,Fpclassify - Implement MVM_num_isnanorinf using isinf and isnan,5,[],https://github.com/MoarVM/MoarVM/pull/1488,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1488,Implement MVM_num_isnanorinf using isinf and isnan if we find them.,Implement MVM_num_isnanorinf using isinf and isnan if we find them.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1490,2021-05-08T07:42:06Z,2021-05-08T13:30:01Z,2021-05-08T13:30:08Z,MERGED,True,7,8,1,https://github.com/nwc10,"We need at least version 1.0.0 of libzstd, to expose the API we need.",1,[],https://github.com/MoarVM/MoarVM/pull/1490,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1490,"Ubuntu 16.04 packages version 0.5.1, so an ""exists"" check alone for the
library is not sufficient - if we jsut do that, we think we can enable our
code, but then it fails to compile.","Ubuntu 16.04 packages version 0.5.1, so an ""exists"" check alone for the
library is not sufficient - if we jsut do that, we think we can enable our
code, but then it fails to compile.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1491,2021-05-11T12:39:19Z,2021-05-11T13:17:06Z,2021-05-11T13:17:19Z,MERGED,True,8,0,1,https://github.com/nwc10,Fix valgrind warnings report when HASH_DEBUG_ITER was defined.,1,[],https://github.com/MoarVM/MoarVM/pull/1491,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1491,"control->serial and control->last_delete_at were never initialised when we
initially allocate just a control structure, but then expand the hash to
allocate space for the first entry.
This should have been part of commit 7d6107e from Oct 2020:
For empty MVMStrHashTable, store only the control structure.","control->serial and control->last_delete_at were never initialised when we
initially allocate just a control structure, but then expand the hash to
allocate space for the first entry.
This should have been part of commit 7d6107e from Oct 2020:
For empty MVMStrHashTable, store only the control structure.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1492,2021-05-16T10:18:51Z,2021-05-26T20:55:11Z,2021-05-26T20:55:15Z,MERGED,True,123,10,4,https://github.com/nwc10, Try to trap concurrent hash accesses.,4,[],https://github.com/MoarVM/MoarVM/pull/1492,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1492,"Previously MoarVM could well SEGV if two user threads access the same hash without locking. Now if it detects concurrent access it will oops instead with a diagnostic. It's not clear to me that we can really recover if we detect this, as concurrent write accesses might have already corrupted the hash structures too far for us to resolve problems.","Previously MoarVM could well SEGV if two user threads access the same hash without locking. Now if it detects concurrent access it will oops instead with a diagnostic. It's not clear to me that we can really recover if we detect this, as concurrent write accesses might have already corrupted the hash structures too far for us to resolve problems.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1492,2021-05-16T10:18:51Z,2021-05-26T20:55:11Z,2021-05-26T20:55:15Z,MERGED,True,123,10,4,https://github.com/nwc10, Try to trap concurrent hash accesses.,4,[],https://github.com/MoarVM/MoarVM/pull/1492,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1492#issuecomment-841796898,"Previously MoarVM could well SEGV if two user threads access the same hash without locking. Now if it detects concurrent access it will oops instead with a diagnostic. It's not clear to me that we can really recover if we detect this, as concurrent write accesses might have already corrupted the hash structures too far for us to resolve problems.","@jnthn: Your example does this:
   at -e:1  (<ephemeral file>:)
 from -e:1  (<ephemeral file>:)
 from SETTING::src/core.c/Promise.pm6:263  (/home/nick/Perl/rakudo/blib/CORE.c.setting.moarvm:)
 from SETTING::src/core.c/ThreadPoolScheduler.pm6:882  (/home/nick/Perl/rakudo/blib/CORE.c.setting.moarvm:)
 from SETTING::src/core.c/ThreadPoolScheduler.pm6:251  (/home/nick/Perl/rakudo/blib/CORE.c.setting.moarvm:)
 from SETTING::src/core.c/ThreadPoolScheduler.pm6:245  (/home/nick/Perl/rakudo/blib/CORE.c.setting.moarvm:)
 from SETTING::src/core.c/ThreadPoolScheduler.pm6:242  (/home/nick/Perl/rakudo/blib/CORE.c.setting.moarvm:run-one)
 from SETTING::src/core.c/ThreadPoolScheduler.pm6:284  (/home/nick/Perl/rakudo/blib/CORE.c.setting.moarvm:)
 from SETTING::src/core.c/Thread.pm6:54  (/home/nick/Perl/rakudo/blib/CORE.c.setting.moarvm:THREAD-ENTRY)

Previously it went SEGV, or occasionally malloc aborted after detecting a double free.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1492,2021-05-16T10:18:51Z,2021-05-26T20:55:11Z,2021-05-26T20:55:15Z,MERGED,True,123,10,4,https://github.com/nwc10, Try to trap concurrent hash accesses.,4,[],https://github.com/MoarVM/MoarVM/pull/1492,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1492#issuecomment-841812746,"Previously MoarVM could well SEGV if two user threads access the same hash without locking. Now if it detects concurrent access it will oops instead with a diagnostic. It's not clear to me that we can really recover if we detect this, as concurrent write accesses might have already corrupted the hash structures too far for us to resolve problems.","Now if it detects concurrent access it will oops instead with a diagnostic.

Certainly an improvement, if nothing else because the stack trace points at where to start looking in order to fix the problem, whereas a SEGV gives no such clue.

It's not clear to me that we can really recover if we detect this, as concurrent write accesses might have already corrupted the hash structures too far for us to resolve problems.

Certainly not something for this PR, but it'd be interesting to consider if it's possible to make this situation recoverable. So far as I understand, this only really detects cases where we have a conflict that leads to that hash growing in size, and the control structure is replaced at these grow points, thus why we can mark the old one state?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1492,2021-05-16T10:18:51Z,2021-05-26T20:55:11Z,2021-05-26T20:55:15Z,MERGED,True,123,10,4,https://github.com/nwc10, Try to trap concurrent hash accesses.,4,[],https://github.com/MoarVM/MoarVM/pull/1492,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1492#issuecomment-841865910,"Previously MoarVM could well SEGV if two user threads access the same hash without locking. Now if it detects concurrent access it will oops instead with a diagnostic. It's not clear to me that we can really recover if we detect this, as concurrent write accesses might have already corrupted the hash structures too far for us to resolve problems.",Rebasing onto #1493,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1492,2021-05-16T10:18:51Z,2021-05-26T20:55:11Z,2021-05-26T20:55:15Z,MERGED,True,123,10,4,https://github.com/nwc10, Try to trap concurrent hash accesses.,4,[],https://github.com/MoarVM/MoarVM/pull/1492,https://github.com/nwc10,5,https://github.com/MoarVM/MoarVM/pull/1492#issuecomment-841869519,"Previously MoarVM could well SEGV if two user threads access the same hash without locking. Now if it detects concurrent access it will oops instead with a diagnostic. It's not clear to me that we can really recover if we detect this, as concurrent write accesses might have already corrupted the hash structures too far for us to resolve problems.","Certainly not something for this PR, but it'd be interesting to consider if it's possible to make this situation recoverable. So far as I understand, this only really detects cases where we have a conflict that leads to that hash growing in size, and the control structure is replaced at these grow points, thus why we can mark the old one state?

Yes, correct in your understanding. For what it is doing, it can only detect a subset of data races. if two threads concurrently add then delete keys but never increase the size, this won't get spotted (and oopsed), but MoarVM likely could go wrong in all sorts of strange ways (possibly up to SEGV). But I realised that the approach would add very little overhead, and probably catch most naughtiness eventually.
I'm not sure that it's possible to detect and recover in the general case (ie try to do anything more sophisticated than this) without actual locking (on every write). In that, the worst case that I can think of is already pretty bad - you have two threads both intending to insert a fresh key. Both keys hash into the middle of a run of occupied slots. So both threads need to walk along from the ideal position, find where their key belongs (based on the Robin Hood offset invariants), and then potentially move some of the later keys ""to the right"". If one thread has already decided to move a block of memory at the same time that the second thread is reading in the middle of it, then all bets are off as to what the second thread actually reads.
Hence I can't see how you can recover from that. So you'd have to lock before every write. (And unlike a hash based on chained buckets, you'd have to hold a global lock for the hash, instead of being able to have a finer grained lock for each chain. Or some CAS approach to inserting into the chains)
Even the ""less bad"" failure cases (I suspect) can end up breaking some invariants, such as trying to add two keys at the same time in two threads might exceed the maximum probe distance.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1493,2021-05-16T19:32:35Z,2021-05-17T05:28:51Z,2021-05-17T05:29:17Z,MERGED,True,7,0,1,https://github.com/nwc10,`MVM_fixed_size_destroy` needs to free the safepoint overflow list.,1,[],https://github.com/MoarVM/MoarVM/pull/1493,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1493,"Otherwise anything oversize that has been queued to free at a safepoint
can leak on --full-cleanup.","Otherwise anything oversize that has been queued to free at a safepoint
can leak on --full-cleanup.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1494,2021-05-17T09:08:02Z,2021-05-17T14:02:34Z,2021-05-17T14:02:36Z,MERGED,True,37,2,4,https://github.com/nwc10,Free loaded libs during full cleanup,3,[],https://github.com/MoarVM/MoarVM/pull/1494,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1494,"In MVM_vm_destroy_instance call MVM_nativecall_free_lib` for each DLL.
As diagnosed by @MasterDuke17, doing this gets us to a completely clean report from valgrind when running rakudo --full-cleanup  -e ''","In MVM_vm_destroy_instance call MVM_nativecall_free_lib` for each DLL.
As diagnosed by @MasterDuke17, doing this gets us to a completely clean report from valgrind when running rakudo --full-cleanup  -e ''",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1495,2021-05-18T09:23:43Z,2021-05-18T10:29:10Z,2021-05-18T10:29:19Z,MERGED,True,33,36,2,https://github.com/nwc10,Make `MVM_fixkey_hash_foreach` static inline.,1,[],https://github.com/MoarVM/MoarVM/pull/1495,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1495,"This permits the C compiler optimiser to inline the callback into it, and
hence remove the indirect function call.
Moving MVM_fixkey_hash_foreach to fixkey_hash_table_funcs.h means that
calc_entries_in_use also has to move to that file. Hence (re)name that
function to MVM_fixkey_hash_kompromat to be consistent with StrHashTable,
and re-order the functions in fixkey_hash_table_funcs.h to be consistent
with the order in str_hash_table_funcs.h.","This permits the C compiler optimiser to inline the callback into it, and
hence remove the indirect function call.
Moving MVM_fixkey_hash_foreach to fixkey_hash_table_funcs.h means that
calc_entries_in_use also has to move to that file. Hence (re)name that
function to MVM_fixkey_hash_kompromat to be consistent with StrHashTable,
and re-order the functions in fixkey_hash_table_funcs.h to be consistent
with the order in str_hash_table_funcs.h.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1496,2021-05-18T11:55:41Z,2021-05-18T13:26:20Z,2021-05-18T13:26:22Z,MERGED,True,42,18,1,https://github.com/MasterDuke17,Run NQP/Rakudo under catchsegv in Linux CI jobs,1,[],https://github.com/MoarVM/MoarVM/pull/1496,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1496,"This will give use more useful information if there's a random error. To
help, also build MoarVM with debugging symbols.","This will give use more useful information if there's a random error. To
help, also build MoarVM with debugging symbols.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1497,2021-05-21T16:52:06Z,2021-05-24T08:03:59Z,2021-05-24T17:19:13Z,MERGED,True,11,2,4,https://github.com/tbrowder,Define _GNU_SOURCE for GNU builds,2,[],https://github.com/MoarVM/MoarVM/pull/1497,https://github.com/tbrowder,1,https://github.com/MoarVM/MoarVM/pull/1497,"The definition results in quelling the compile warnings for libuv on Debian Buster with gcc
The changed MoarVM source files have #ifndef/#endif guards added to prevent redefinition warnings","The definition results in quelling the compile warnings for libuv on Debian Buster with gcc
The changed MoarVM source files have #ifndef/#endif guards added to prevent redefinition warnings",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1497,2021-05-21T16:52:06Z,2021-05-24T08:03:59Z,2021-05-24T17:19:13Z,MERGED,True,11,2,4,https://github.com/tbrowder,Define _GNU_SOURCE for GNU builds,2,[],https://github.com/MoarVM/MoarVM/pull/1497,https://github.com/tbrowder,2,https://github.com/MoarVM/MoarVM/pull/1497#issuecomment-846413328,"The definition results in quelling the compile warnings for libuv on Debian Buster with gcc
The changed MoarVM source files have #ifndef/#endif guards added to prevent redefinition warnings","the commit message does not explain why the change is needed

I made a more complete explanatory comment in the last commit.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1498,2021-05-21T19:59:21Z,,2021-09-06T12:02:57Z,OPEN,False,36,2,3,https://github.com/tbrowder,Quell compiler warnings on Linux with gcc,5,[],https://github.com/MoarVM/MoarVM/pull/1498,https://github.com/tbrowder,1,https://github.com/MoarVM/MoarVM/pull/1498,Ensure two reference variables are initialized before use,Ensure two reference variables are initialized before use,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1498,2021-05-21T19:59:21Z,,2021-09-06T12:02:57Z,OPEN,False,36,2,3,https://github.com/tbrowder,Quell compiler warnings on Linux with gcc,5,[],https://github.com/MoarVM/MoarVM/pull/1498,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1498#issuecomment-846576909,Ensure two reference variables are initialized before use,"What about moving the var up a level and initializing to NULL?
That would mean that in the error case it would contain the value of the
previous iteration. Whether this would work or not would depend fully on how
this algorithm and the Shift-JIS encoding work. I know too little about both
to say anything with certainty.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1498,2021-05-21T19:59:21Z,,2021-09-06T12:02:57Z,OPEN,False,36,2,3,https://github.com/tbrowder,Quell compiler warnings on Linux with gcc,5,[],https://github.com/MoarVM/MoarVM/pull/1498,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1498#issuecomment-899052006,Ensure two reference variables are initialized before use,@samcv ping. AIUM (As I understand myself) in #1498 (comment) I'm not sure the proposed fix was correct. Are you able to take a look at this again?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1498,2021-05-21T19:59:21Z,,2021-09-06T12:02:57Z,OPEN,False,36,2,3,https://github.com/tbrowder,Quell compiler warnings on Linux with gcc,5,[],https://github.com/MoarVM/MoarVM/pull/1498,https://github.com/samcv,4,https://github.com/MoarVM/MoarVM/pull/1498#issuecomment-899869979,Ensure two reference variables are initialized before use,"@MasterDuke17 please ping me again in 7 days if I haven't replied to this message yet. Sorry for the delay in answering the question. Will try to get to it, otherwise please ping me (after 7 days). Thanks.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1498,2021-05-21T19:59:21Z,,2021-09-06T12:02:57Z,OPEN,False,36,2,3,https://github.com/tbrowder,Quell compiler warnings on Linux with gcc,5,[],https://github.com/MoarVM/MoarVM/pull/1498,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1498#issuecomment-906702809,Ensure two reference variables are initialized before use,"@MasterDuke17 please ping me again in 7 days if I haven't replied to this message yet. Sorry for the delay in answering the question. Will try to get to it, otherwise please ping me (after 7 days). Thanks.

@samcv ping",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1498,2021-05-21T19:59:21Z,,2021-09-06T12:02:57Z,OPEN,False,36,2,3,https://github.com/tbrowder,Quell compiler warnings on Linux with gcc,5,[],https://github.com/MoarVM/MoarVM/pull/1498,https://github.com/samcv,6,https://github.com/MoarVM/MoarVM/pull/1498#issuecomment-907622461,Ensure two reference variables are initialized before use,"Thanks for the ping @MasterDuke17. After thinking about this further. I think we should continue with the merge request as it is. So we set the compiler to not tell us this warning, and keeping my suggestion about handler_rtrn == DECODE_CODEPOINT. I am going to approve the MR now.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1498,2021-05-21T19:59:21Z,,2021-09-06T12:02:57Z,OPEN,False,36,2,3,https://github.com/tbrowder,Quell compiler warnings on Linux with gcc,5,[],https://github.com/MoarVM/MoarVM/pull/1498,https://github.com/MasterDuke17,7,https://github.com/MoarVM/MoarVM/pull/1498#issuecomment-907850390,Ensure two reference variables are initialized before use,"The changes in src/strings/decode_stream.h don't seem to be necessary anymore. At HEAD of master, neither gcc 10.3.0 nor clang 12.0.0 show a warning there. There aren't any warnings in src/strings/shiftjs.c at HEAD of master either, but since @samcv has said that's a good change, @tbrowder can you drop the first, fourth, and fifth commits from this and just keep the second and third?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1498,2021-05-21T19:59:21Z,,2021-09-06T12:02:57Z,OPEN,False,36,2,3,https://github.com/tbrowder,Quell compiler warnings on Linux with gcc,5,[],https://github.com/MoarVM/MoarVM/pull/1498,https://github.com/tbrowder,8,https://github.com/MoarVM/MoarVM/pull/1498#issuecomment-908193523,Ensure two reference variables are initialized before use,"I think so, but I am in the middle of selling my house so it might be a few day before I can get to it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1498,2021-05-21T19:59:21Z,,2021-09-06T12:02:57Z,OPEN,False,36,2,3,https://github.com/tbrowder,Quell compiler warnings on Linux with gcc,5,[],https://github.com/MoarVM/MoarVM/pull/1498,https://github.com/tbrowder,9,https://github.com/MoarVM/MoarVM/pull/1498#issuecomment-913244801,Ensure two reference variables are initialized before use,"I have not forgotten, working on it now...
Dropping the first, fourth, and fifth and retaining the second and third commits doesn't work with the master as it was at the time of this PR. I will try another PR with only those changes in the two desired commits on an up-to-date master branch.
UPDATE
No progress, same kinds of problems. IMHO, either merge this as @samcv suggests, or abandon it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1499,2021-05-22T17:14:25Z,2021-05-22T17:15:33Z,2021-06-19T14:34:20Z,MERGED,True,38,1,2,https://github.com/Altai-man,Release 2021.05,2,[],https://github.com/MoarVM/MoarVM/pull/1499,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1499,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1501,2021-05-24T19:36:03Z,2021-05-24T21:57:57Z,2021-05-24T21:57:59Z,MERGED,True,14,0,4,https://github.com/MasterDuke17,Disable GCC pragmas when using MSVC,1,[],https://github.com/MoarVM/MoarVM/pull/1501,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1501,Otherwise they cause warnings when building on Windows.,Otherwise they cause warnings when building on Windows.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1502,2021-05-26T20:44:10Z,2021-07-06T10:22:43Z,2021-07-06T10:22:44Z,MERGED,True,68,38,1,https://github.com/samcv,Fix ShiftJIS decoder bug: \r + error + replacement,1,[],https://github.com/MoarVM/MoarVM/pull/1502,https://github.com/samcv,1,https://github.com/MoarVM/MoarVM/pull/1502,"If the following are true decoding when ShiftJIS:

The previous character \r
We encounter a decoding error
We are using a replacement

Then we encounter a case where things are wrong
Input: ""\r"" + ERROR + ""abc""; with replacement=""hello""
Expected: ""\rhelloabc""
Actual: ""\rellohelloabc""","If the following are true decoding when ShiftJIS:

The previous character \r
We encounter a decoding error
We are using a replacement

Then we encounter a case where things are wrong
Input: ""\r"" + ERROR + ""abc""; with replacement=""hello""
Expected: ""\rhelloabc""
Actual: ""\rellohelloabc""",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1503,2021-05-31T00:47:30Z,2021-07-06T06:19:20Z,2021-07-06T06:19:20Z,MERGED,True,7,13,1,https://github.com/tbrowder,Simplify pre-processor code,2,[],https://github.com/MoarVM/MoarVM/pull/1503,https://github.com/tbrowder,1,https://github.com/MoarVM/MoarVM/pull/1503,"The warning is only for gcc, not clang, so this code can be simplified to target only the gcc compiler.","The warning is only for gcc, not clang, so this code can be simplified to target only the gcc compiler.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1504,2021-06-03T18:06:03Z,2021-11-27T13:13:05Z,2021-11-27T13:13:32Z,MERGED,True,2,0,1,https://github.com/Kaiepi,Close socket on async error during an async connection,1,[],https://github.com/MoarVM/MoarVM/pull/1504,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1504,Related to rakudo/rakudo#4370.,Related to rakudo/rakudo#4370.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1504,2021-06-03T18:06:03Z,2021-11-27T13:13:05Z,2021-11-27T13:13:32Z,MERGED,True,2,0,1,https://github.com/Kaiepi,Close socket on async error during an async connection,1,[],https://github.com/MoarVM/MoarVM/pull/1504,https://github.com/Zer0-Tolerance,2,https://github.com/MoarVM/MoarVM/pull/1504#issuecomment-877754131,Related to rakudo/rakudo#4370.,"Hi , any idea when this will be merged ?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1504,2021-06-03T18:06:03Z,2021-11-27T13:13:05Z,2021-11-27T13:13:32Z,MERGED,True,2,0,1,https://github.com/Kaiepi,Close socket on async error during an async connection,1,[],https://github.com/MoarVM/MoarVM/pull/1504,https://github.com/Zer0-Tolerance,3,https://github.com/MoarVM/MoarVM/pull/1504#issuecomment-894701392,Related to rakudo/rakudo#4370.,"Hi ,
Raku is still having issue when closing connection after timeout on OSX in version 2021.07, @jnthn any idea how this can be fixed ?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1504,2021-06-03T18:06:03Z,2021-11-27T13:13:05Z,2021-11-27T13:13:32Z,MERGED,True,2,0,1,https://github.com/Kaiepi,Close socket on async error during an async connection,1,[],https://github.com/MoarVM/MoarVM/pull/1504,https://github.com/Kaiepi,4,https://github.com/MoarVM/MoarVM/pull/1504#issuecomment-894791717,Related to rakudo/rakudo#4370.,"@Zer0-Tolerance Asynchronous connections don't close on timeout on master, but do with these changes, but again, I'm testing on OpenBSD, and don't have an OS X system to test with offhand.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1504,2021-06-03T18:06:03Z,2021-11-27T13:13:05Z,2021-11-27T13:13:32Z,MERGED,True,2,0,1,https://github.com/Kaiepi,Close socket on async error during an async connection,1,[],https://github.com/MoarVM/MoarVM/pull/1504,https://github.com/Kaiepi,5,https://github.com/MoarVM/MoarVM/pull/1504#issuecomment-898860435,Related to rakudo/rakudo#4370.,"The golf for this is similar to before:
use v6;
shell ""ktrace dump ktrace.out -p $*PID"";
say try { await IO::Socket::Async.connect: '127.0.0.1', 12345 } // $!;
sleep;
But the process for producing a dump and viewing it with the more BSD-ish flavour of ktrace:
$ ktrace -p $PID
$ kdump | less
Looks to be equivalent to this on newer versions of OS X:
$ ktrace dump ktrace.out -p $PID
$ ktrace trace -R ktrace.out | less",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1504,2021-06-03T18:06:03Z,2021-11-27T13:13:05Z,2021-11-27T13:13:32Z,MERGED,True,2,0,1,https://github.com/Kaiepi,Close socket on async error during an async connection,1,[],https://github.com/MoarVM/MoarVM/pull/1504,https://github.com/niner,6,https://github.com/MoarVM/MoarVM/pull/1504#issuecomment-980604903,Related to rakudo/rakudo#4370.,Thanks for the fix! And sorry for the long delay.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1505,2021-06-03T18:06:42Z,2021-07-15T18:16:22Z,2021-07-15T18:17:30Z,MERGED,True,2,6,1,https://github.com/Kaiepi,Assign the result of a socket(2) call immediately,1,[],https://github.com/MoarVM/MoarVM/pull/1505,https://github.com/Kaiepi,1,https://github.com/MoarVM/MoarVM/pull/1505,"This allows the socket to be closed should bind(2) or connect(2)
fail. See rakudo/rakudo#4391","This allows the socket to be closed should bind(2) or connect(2)
fail. See rakudo/rakudo#4391",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1505,2021-06-03T18:06:42Z,2021-07-15T18:16:22Z,2021-07-15T18:17:30Z,MERGED,True,2,6,1,https://github.com/Kaiepi,Assign the result of a socket(2) call immediately,1,[],https://github.com/MoarVM/MoarVM/pull/1505,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1505#issuecomment-874824361,"This allows the socket to be closed should bind(2) or connect(2)
fail. See rakudo/rakudo#4391",Is this ready to be merge now?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1505,2021-06-03T18:06:42Z,2021-07-15T18:16:22Z,2021-07-15T18:17:30Z,MERGED,True,2,6,1,https://github.com/Kaiepi,Assign the result of a socket(2) call immediately,1,[],https://github.com/MoarVM/MoarVM/pull/1505,https://github.com/Kaiepi,3,https://github.com/MoarVM/MoarVM/pull/1505#issuecomment-880018855,"This allows the socket to be closed should bind(2) or connect(2)
fail. See rakudo/rakudo#4391",rakudo/rakudo#4391 needs this.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1505,2021-06-03T18:06:42Z,2021-07-15T18:16:22Z,2021-07-15T18:17:30Z,MERGED,True,2,6,1,https://github.com/Kaiepi,Assign the result of a socket(2) call immediately,1,[],https://github.com/MoarVM/MoarVM/pull/1505,https://github.com/patrickbkr,4,https://github.com/MoarVM/MoarVM/pull/1505#issuecomment-880453206,"This allows the socket to be closed should bind(2) or connect(2)
fail. See rakudo/rakudo#4391",@Kaiepi I don't understand. rakudo/rakudo#4391 is already merged.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1505,2021-06-03T18:06:42Z,2021-07-15T18:16:22Z,2021-07-15T18:17:30Z,MERGED,True,2,6,1,https://github.com/Kaiepi,Assign the result of a socket(2) call immediately,1,[],https://github.com/MoarVM/MoarVM/pull/1505,https://github.com/Kaiepi,5,https://github.com/MoarVM/MoarVM/pull/1505#issuecomment-880862095,"This allows the socket to be closed should bind(2) or connect(2)
fail. See rakudo/rakudo#4391","Without this, there's no socket exposed for the changes in the other PR to close. I thought this would get merged at the same time.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1505,2021-06-03T18:06:42Z,2021-07-15T18:16:22Z,2021-07-15T18:17:30Z,MERGED,True,2,6,1,https://github.com/Kaiepi,Assign the result of a socket(2) call immediately,1,[],https://github.com/MoarVM/MoarVM/pull/1505,https://github.com/patrickbkr,6,https://github.com/MoarVM/MoarVM/pull/1505#issuecomment-880912056,"This allows the socket to be closed should bind(2) or connect(2)
fail. See rakudo/rakudo#4391",@Kaiepi You have no merge permissions?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1505,2021-06-03T18:06:42Z,2021-07-15T18:16:22Z,2021-07-15T18:17:30Z,MERGED,True,2,6,1,https://github.com/Kaiepi,Assign the result of a socket(2) call immediately,1,[],https://github.com/MoarVM/MoarVM/pull/1505,https://github.com/Kaiepi,7,https://github.com/MoarVM/MoarVM/pull/1505#issuecomment-880913212,"This allows the socket to be closed should bind(2) or connect(2)
fail. See rakudo/rakudo#4391",@patrickbkr Nope.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1506,2021-06-07T06:41:53Z,2021-06-10T18:05:37Z,2021-07-24T09:52:02Z,MERGED,True,2,0,1,https://github.com/niner,Set sc.idx during deserialization to avoid costly lookup later,1,[],https://github.com/MoarVM/MoarVM/pull/1506,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1506,"When we deserialize a collectable, we actually already know which SC it
belongs to and the index in this SC. So far we've already told the the
collectable about the SC, but not about the index. So the first call to
MVM_sc_find_object_idx had to do a linear search of the SC to find the index.
Fix by setting the idx field in the collectable header on deserialization.
This brings installation of rakudo core modules down from 7.89s to 7.21s
and reduces CPU time of rakudo make test from 138.98s to 134.27s.","When we deserialize a collectable, we actually already know which SC it
belongs to and the index in this SC. So far we've already told the the
collectable about the SC, but not about the index. So the first call to
MVM_sc_find_object_idx had to do a linear search of the SC to find the index.
Fix by setting the idx field in the collectable header on deserialization.
This brings installation of rakudo core modules down from 7.89s to 7.21s
and reduces CPU time of rakudo make test from 138.98s to 134.27s.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1506,2021-06-07T06:41:53Z,2021-06-10T18:05:37Z,2021-07-24T09:52:02Z,MERGED,True,2,0,1,https://github.com/niner,Set sc.idx during deserialization to avoid costly lookup later,1,[],https://github.com/MoarVM/MoarVM/pull/1506,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1506#issuecomment-855661029,"When we deserialize a collectable, we actually already know which SC it
belongs to and the index in this SC. So far we've already told the the
collectable about the SC, but not about the index. So the first call to
MVM_sc_find_object_idx had to do a linear search of the SC to find the index.
Fix by setting the idx field in the collectable header on deserialization.
This brings installation of rakudo core modules down from 7.89s to 7.21s
and reduces CPU time of rakudo make test from 138.98s to 134.27s.","I'm confident that I don't know enough to review the correctness of the commit itself (ie are there any subtle corner cases possible that testing doesn't cover) but I am wondering what planet CodeFactor is on.
Specifically, CodeFactor seems to have found ""new"" problems in 3 unchanged functions, and one issue fixed in a fourth unchanged function. I assume that code factor is generally useful, but its failure modes seem very strange. (i've seen similar ""changed"" reports on unchanged code before.)
Oh, thinking aloud - do they have different versions installed? ie do our reports come from different variants of their freemium product, but as github's state is common, running the report against a different variant produces this sort of noise?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/McSinyx,1,https://github.com/MoarVM/MoarVM/pull/1507,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861252260,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","src/io/dirops.c: In function ‘mkdir_p’:
src/io/dirops.c:48:33: error: ‘uv_fs_t’ {aka ‘struct uv_fs_s’} has no member named ‘statbug’; did you mean ‘statbuf’?
   48 |                 && !S_ISDIR(req.statbug.st_mode)
      |                                 ^~~~~~~",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/McSinyx,3,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861265595,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","I'm so sorry for my carelessness 😅  It's built successfully locally now, is there anyway to perform integration testing?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861272842,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.",https://dev.azure.com/MoarVM/MoarVM/_build/results?buildId=605&view=logs&j=1f3a7134-3b80-549a-eaff-49041f6b71c8&t=428659df-f0a2-5fc4-7f6c-dcc94dfc92b7&l=96 looks like rakudo's make install is failing.,True,{'THUMBS_UP': ['https://github.com/McSinyx']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/McSinyx,5,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861512960,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","My logic was flawed.  It should be correct now, however I'm wondering what should be done with the permission when the directory already exists.  I think we should chmod the final pathname, but I'm not sure if the same should be done to its ancestors.
Edit: this was added, however CodeFactor is complaining, could I ignore that?  Plus is there a reason to use libuv without loop for file system operations or those exist purely due to historical reasons?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/zhuomingliang,6,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861550251,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","After a calm thinking, It may be not a bug.  You could fix it with a try:
try mkdir '/usr/bin/env';
try mkdir '/tmp/' ~ 'universe' x 42;",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/McSinyx,7,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861551959,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.",What I meant was that both of those should fail (well for the latter it should fail on ext4 with the filename limit of 255 at least) instead of silencing the errors.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/McSinyx,8,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861554819,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","Regarding the CI failure, is rakudo/t/04-nativecall/21-callback-other-thread.t flaky?  It doesn't seem to be related.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/MasterDuke17,9,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861558089,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","Regarding the CI failure, is rakudo/t/04-nativecall/21-callback-other-thread.t flaky? It doesn't seem to be related.

Yeah, there's a known problem/race-condition with renaming files on Windows that random jobs run into. I restarted the job.",True,{'THUMBS_UP': ['https://github.com/McSinyx']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/zhuomingliang,10,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861942016,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","I think this patch is not good enough. Could you try this one？
if (uv_fs_stat(NULL, &req, pathname, NULL) <= 0) {
                if (mkdir(pathname, mode) != -1) {
                    created = 1;
                } else {
                    created = 0;
                    break;
                }
} else {
     created = 0;
     break;
}",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/McSinyx,11,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-861997766,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","uv_fs_stat(NULL, &req, pathname, NULL) <= 0 will always yield 1 because stat returns either 0 or -1.  We also need to take into account if the current path exists and is a directory.  Me adding chmod earlier was a mistake though, in neither NetBSD nor GNU coreutils mkdir -p would try to change the mode of a directory it didn't create.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/zhuomingliang,12,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-862003758,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","Good, it could be nice to have a test in https://github.com/raku/roast before someone merge it.",True,{'THUMBS_UP': ['https://github.com/McSinyx']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1507,2021-06-15T04:45:09Z,2021-06-20T01:43:17Z,2021-06-20T04:48:43Z,MERGED,True,5,9,1,https://github.com/McSinyx,Fix mkdir error handling,1,[],https://github.com/MoarVM/MoarVM/pull/1507,https://github.com/McSinyx,13,https://github.com/MoarVM/MoarVM/pull/1507#issuecomment-864499039,"Before this, if a file is in place of the target path (not on Windows)
or a parent directory is successfully created but the children,
mkdir_p still reports success.  On *nix, this can be tested in Raku via:
mkdir '/usr/bin/env';
mkdir '/tmp/' ~ 'universe' x 42;
Related: GH-433.","Thanks!  This means Rakudo 2021.06 was out, and repl looks like fun!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1508,2021-06-15T21:39:30Z,2021-06-18T09:44:24Z,2021-06-18T09:44:25Z,MERGED,True,11,0,1,https://github.com/MasterDuke17,Put include paths needed for HLL builds in config,1,[],https://github.com/MoarVM/MoarVM/pull/1508,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1508,"Currently the NQP and Rakudo builds use a hard-coded list, but this is
prep work for getting their builds to actually use data taken from the
MoarVM build they're using.","Currently the NQP and Rakudo builds use a hard-coded list, but this is
prep work for getting their builds to actually use data taken from the
MoarVM build they're using.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1509,2021-06-19T14:52:05Z,2021-06-19T14:53:01Z,2021-06-19T14:53:04Z,MERGED,True,16,1,2,https://github.com/Altai-man,2021.06 release,2,[],https://github.com/MoarVM/MoarVM/pull/1509,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1509,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1510,2021-06-21T10:23:43Z,2021-06-21T11:02:32Z,2021-06-21T11:02:33Z,MERGED,True,0,7,1,https://github.com/MasterDuke17,msinttypes no longer needed in $PREFIX\include,1,[],https://github.com/MoarVM/MoarVM/pull/1510,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1510,"It isn't actually being put in the include paths for NQP/Rakudo, and if
you do add it, it causes problems with the libuv include.","It isn't actually being put in the include paths for NQP/Rakudo, and if
you do add it, it causes problems with the libuv include.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1511,2021-06-28T16:40:21Z,2021-07-06T06:16:00Z,2021-07-24T09:45:03Z,MERGED,True,52,19,1,https://github.com/niner,Fix memory corruption by accessing freed spesh stats.,1,[],https://github.com/MoarVM/MoarVM/pull/1511,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1511,"When cleaning up spesh stats that didn't get updated for a while, we free the
MVMSpeshStats structure and remove the reference from the MVMStaticFrameSpesh
object holding it. It may still be referenced from a MVMSpeshSimStackFrame
however and when we continue processing this sim stack, we access some random
memory.
Look through all tc's spesh_sim_stacks for frames still referencing the
MVMSpeshStats and just not free it if we find one.","When cleaning up spesh stats that didn't get updated for a while, we free the
MVMSpeshStats structure and remove the reference from the MVMStaticFrameSpesh
object holding it. It may still be referenced from a MVMSpeshSimStackFrame
however and when we continue processing this sim stack, we access some random
memory.
Look through all tc's spesh_sim_stacks for frames still referencing the
MVMSpeshStats and just not free it if we find one.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1512,2021-06-28T16:40:42Z,2021-07-06T06:16:58Z,2021-07-24T09:45:08Z,MERGED,True,25,17,1,https://github.com/niner,Fix serialization gc issues,2,[],https://github.com/MoarVM/MoarVM/pull/1512,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1512,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1513,2021-07-14T14:09:37Z,2021-07-14T14:41:25Z,2021-07-14T14:41:33Z,MERGED,True,3,7,3,https://github.com/nwc10,Fix some bugs in the various hash_fsck functions.,1,[],https://github.com/MoarVM/MoarVM/pull/1513,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1513,"They were still assuming that the metadata sentinel byte needed to be 1,
and reporting an error if it was not. This should have been changed as
part of commit b432533 in Oct 2020:
The hash metadata sentinel byte can be 0 - it does not need to be 1.
Also, no need to increment errors when wrong_order is set, as there is
code to increment it later. This bug is not as serious because it only
causes fsck to return the wrong count of errors found for a hash that has
errors. It was introduced in Oct 2020 as part of commit 99aab70:
MVM_str_hash_fsck now checks (and faults) max_prove_distance violations.","They were still assuming that the metadata sentinel byte needed to be 1,
and reporting an error if it was not. This should have been changed as
part of commit b432533 in Oct 2020:
The hash metadata sentinel byte can be 0 - it does not need to be 1.
Also, no need to increment errors when wrong_order is set, as there is
code to increment it later. This bug is not as serious because it only
causes fsck to return the wrong count of errors found for a hash that has
errors. It was introduced in Oct 2020 as part of commit 99aab70:
MVM_str_hash_fsck now checks (and faults) max_prove_distance violations.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1514,2021-07-16T10:53:45Z,2021-08-05T12:28:06Z,2021-08-05T12:28:06Z,CLOSED,False,3,2,1,https://github.com/nwc10,Fix another bug in MVM_str_hash_fsck().,1,['After a release'],https://github.com/MoarVM/MoarVM/pull/1514,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1514,"Calling MVM_str_hash_entries when just the control structure was allocated
(the empty hash optimisation) would trigger an assertion failure.
We need to check control->cur_items and control->max_items explicitly.
It also makes sense to check for control being NULL and handling that case
(instead of segfaulting).","Calling MVM_str_hash_entries when just the control structure was allocated
(the empty hash optimisation) would trigger an assertion failure.
We need to check control->cur_items and control->max_items explicitly.
It also makes sense to check for control being NULL and handling that case
(instead of segfaulting).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1515,2021-07-18T17:14:37Z,2021-07-18T17:48:24Z,2021-07-18T17:48:24Z,MERGED,True,4,7,4,https://github.com/coke,Switch from freenode to libera,1,[],https://github.com/MoarVM/MoarVM/pull/1515,https://github.com/coke,1,https://github.com/MoarVM/MoarVM/pull/1515,"remove unhelpful comment
yes, macports is also moved to libera","remove unhelpful comment
yes, macports is also moved to libera",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1516,2021-07-21T09:56:25Z,2021-07-21T12:56:48Z,2021-07-21T12:56:49Z,MERGED,True,5,11,4,https://github.com/MasterDuke17,Convert more realloc+memset(0) to recalloc,1,[],https://github.com/MoarVM/MoarVM/pull/1516,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1516,"I did this once back in 2017, but I guess a few new ones snuck in since
then.","I did this once back in 2017, but I guess a few new ones snuck in since
then.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1518,2021-07-21T14:26:49Z,2021-07-23T10:32:56Z,2021-07-23T10:32:58Z,MERGED,True,2,1,1,https://github.com/MasterDuke17,Don't gen subs for deprecated ops,1,[],https://github.com/MoarVM/MoarVM/pull/1518,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1518,"Introduced in the original commit
03304a3.","Introduced in the original commit
03304a3.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/dyknon,1,https://github.com/MoarVM/MoarVM/pull/1519,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821","Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-885183064,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821",Should the return value of the run_decode() call be checked also (or instead)?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/dyknon,3,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-885541957,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821","I don't think return values of the run_decode() are useful to detect this error.
The return value depends on the number of decoded characters, not the bytes left in the input buffer.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-896134908,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821","I'm inclined to merge this, but hopefully a final question. Would it make sense to put the remaining bytes in the error message, similarly to https://github.com/MoarVM/MoarVM/blob/master/src/strings/utf8.c#L238-L259 ?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-907862725,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821",@dyknon ping,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/dyknon,6,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-913104909,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821","That's a good idea.
But why does it uses conversion specifications ""%02hhx"" for dumped bytes.
Because of the default argument promotion, ""%02x"" is enough, and it is a more compatible way, I think.
Sorry for my slow response.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/MasterDuke17,7,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-913113281,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821","But why does it uses conversion specifications ""%02hhx"" for dumped bytes.
Because of the default argument promotion, ""%02x"" is enough, and it is a more compatible way, I think.

Apparently I originally had ""%02x"", but changed it in ff007f2. However, that was long enough ago that I don't remember what was wrong about ""%02x"", probably some warning from one of the three compilers we use in our CI pipelines (gcc, clang, MSVC). Feel free to give it a try, but we'll need to make sure it's warning free.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/dyknon,8,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-915177819,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821","OK. I use %02hhx.
Change error message to include remaining bytes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/patrickbkr,9,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-920641977,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821","So, is this ready for merging?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/MasterDuke17,10,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-924467322,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821","So, is this ready for merging?

I think so.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1519,2021-07-22T15:30:44Z,2021-09-25T08:57:31Z,2021-09-25T08:57:31Z,MERGED,True,30,0,1,https://github.com/dyknon,Stream Decoder: Disallow incomplete code at EOF,2,[],https://github.com/MoarVM/MoarVM/pull/1519,https://github.com/dyknon,11,https://github.com/MoarVM/MoarVM/pull/1519#issuecomment-925107861,"Break unwanted infinite loop caused by
$ echo 0: c2 | xxd -r | rakudo -ne ''
Related to: #821",I'm ready.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1520,2021-07-23T20:59:27Z,,2021-12-08T22:06:36Z,OPEN,False,30,28,1,https://github.com/MasterDuke17,Zero-pad the shorter string for bitwise string ops,2,[],https://github.com/MoarVM/MoarVM/pull/1520,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1520,To see what the fallout is in response to rakudo/rakudo#4454,To see what the fallout is in response to rakudo/rakudo#4454,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1520,2021-07-23T20:59:27Z,,2021-12-08T22:06:36Z,OPEN,False,30,28,1,https://github.com/MasterDuke17,Zero-pad the shorter string for bitwise string ops,2,[],https://github.com/MoarVM/MoarVM/pull/1520,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1520#issuecomment-885915093,To see what the fallout is in response to rakudo/rakudo#4454,"There are also 9 fails in t/spec/S03-operators/bit.t
not ok 19 - long string bitwise ~&, truncates
# Failed test 'long string bitwise ~&, truncates'
# at t/spec/S03-operators/bit.t line 58
# expected: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
#      got: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
not ok 20 - long string bitwise ~|, no truncation
# Failed test 'long string bitwise ~|, no truncation'
# at t/spec/S03-operators/bit.t line 59
# expected: '{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
#      got: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{'
not ok 21 - long string bitwise ~^, no truncation
# Failed test 'long string bitwise ~^, no truncation'
# at t/spec/S03-operators/bit.t line 60
# expected: ';;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
#      got: 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;'
ok 22 - stringwise ~&, arbitrary string
ok 23 - stringwise ~|, arbitrary string
not ok 24 - '🇺🇸' ~& '🇨🇦;' works properly with combining characters
# Failed test ''🇺🇸' ~& '🇨🇦;' works properly with combining characters'
# at t/spec/S03-operators/bit.t line 95
# expected: $[127464, 127456]
#      got: $[0, 127458, 56]
not ok 25 - '🇺🇸' ~| '🇨🇦;' works properly with combining characters
# Failed test ''🇺🇸' ~| '🇨🇦;' works properly with combining characters'
# at t/spec/S03-operators/bit.t line 95
# expected: $[127482, 127486, 59]
#      got: $[127464, 127486, 127483]
not ok 26 - '🇺🇸' ~^ '🇨🇦;' works properly with combining characters
# Failed test ''🇺🇸' ~^ '🇨🇦;' works properly with combining characters'
# at t/spec/S03-operators/bit.t line 95
# expected: $[18, 30, 59]
#      got: $[127464, 28, 127427]
not ok 27 - 'P𑀿𑀿' ~& 'zzzzzzz' works properly with combining characters
# Failed test ''P𑀿𑀿' ~& 'zzzzzzz' works properly with combining characters'
# at t/spec/S03-operators/bit.t line 96
# expected: $[80, 58, 58, 58, 58, 58]
#      got: $[0, 0, 0, 0, 0, 0, 80]
not ok 28 - 'P𑀿𑀿' ~| 'zzzzzzz' works properly with combining characters
# Failed test ''P𑀿𑀿' ~| 'zzzzzzz' works properly with combining characters'
# at t/spec/S03-operators/bit.t line 96
# expected: $[122, 69759, 69759, 69759, 69759, 69759, 122]
#      got: $[122, 122, 122, 122, 122, 122, 122]
not ok 29 - 'P𑀿𑀿' ~^ 'zzzzzzz' works properly with combining characters
# Failed test ''P𑀿𑀿' ~^ 'zzzzzzz' works properly with combining characters'
# at t/spec/S03-operators/bit.t line 96
# expected: $[42, 69701, 69701, 69701, 69701, 69701, 122]
#      got: $[122, 122, 122, 122, 122, 122, 42]",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1520,2021-07-23T20:59:27Z,,2021-12-08T22:06:36Z,OPEN,False,30,28,1,https://github.com/MasterDuke17,Zero-pad the shorter string for bitwise string ops,2,[],https://github.com/MoarVM/MoarVM/pull/1520,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1520#issuecomment-980613688,To see what the fallout is in response to rakudo/rakudo#4454,This seems to left-pad the shorter string. Docs and design docs just say to pad the string. But somehow I'd have expected it to right-pad. How do we know which one's correct?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1520,2021-07-23T20:59:27Z,,2021-12-08T22:06:36Z,OPEN,False,30,28,1,https://github.com/MasterDuke17,Zero-pad the shorter string for bitwise string ops,2,[],https://github.com/MoarVM/MoarVM/pull/1520,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1520#issuecomment-980644283,To see what the fallout is in response to rakudo/rakudo#4454,"Upon a reread of “This operator is distinguished from numeric bitwise AND in order to provide bit vectors that extend on the right rather than the left (and always do unsigned extension).”, maybe it should be right-padded. Probably won’t be able to do it for a couple days, but guess I can try a version that does that.
…
Sent from my iPhone
 On Nov 27, 2021, at 8:23 AM, niner ***@***.***> wrote:

 ﻿
 This seems to left-pad the shorter string. Docs and design docs just say to pad the string. But somehow I'd have expected it to right-pad. How do we know which one's correct?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.
 Triage notifications on the go with GitHub Mobile for iOS or Android.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1520,2021-07-23T20:59:27Z,,2021-12-08T22:06:36Z,OPEN,False,30,28,1,https://github.com/MasterDuke17,Zero-pad the shorter string for bitwise string ops,2,[],https://github.com/MoarVM/MoarVM/pull/1520,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1520#issuecomment-982231346,To see what the fallout is in response to rakudo/rakudo#4454,"After switching to padding on the right, in addition to the single fail in t/nqp/059-nqpop.t, there are three fails in t/spec/S03-operators/bit.t:
not ok 19 - long string bitwise ~&, truncates
# Failed test 'long string bitwise ~&, truncates'
# at t/spec/S03-operators/bit.t line 58
# expected: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
#      got: '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
not ok 24 - '🇺🇸' ~& '🇨🇦;' works properly with combining characters
# Failed test ''🇺🇸' ~& '🇨🇦;' works properly with combining characters'
# at t/spec/S03-operators/bit.t line 95
# expected: $[127464, 127456]
#      got: $[127464, 127456, 0]
not ok 27 - 'P𑀿𑀿' ~& 'zzzzzzz' works properly with combining characters
# Failed test ''P𑀿𑀿' ~& 'zzzzzzz' works properly with combining characters'
# at t/spec/S03-operators/bit.t line 96
# expected: $[80, 58, 58, 58, 58, 58]
#      got: $[80, 58, 58, 58, 58, 58, 0]",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1520,2021-07-23T20:59:27Z,,2021-12-08T22:06:36Z,OPEN,False,30,28,1,https://github.com/MasterDuke17,Zero-pad the shorter string for bitwise string ops,2,[],https://github.com/MoarVM/MoarVM/pull/1520,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1520#issuecomment-987269020,To see what the fallout is in response to rakudo/rakudo#4454,The failing NQP test was added in Raku/nqp@0bc35f4 and the failing roast tests were added in Raku/roast@0a7bd6f. @samcv do you have any opinion on this?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1520,2021-07-23T20:59:27Z,,2021-12-08T22:06:36Z,OPEN,False,30,28,1,https://github.com/MasterDuke17,Zero-pad the shorter string for bitwise string ops,2,[],https://github.com/MoarVM/MoarVM/pull/1520,https://github.com/samcv,7,https://github.com/MoarVM/MoarVM/pull/1520#issuecomment-988389204,To see what the fallout is in response to rakudo/rakudo#4454,"@MasterDuke17 I will look into this in the next few days, or at longest during the weekend. I think my tests added in Raku/roast@0a7bd6f shouldn't rely on any functionality with padding, but I would like to look into it a bit more than my cursory glance. Thanks for the clear links to the commits which added these changes, much appreciated.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1520,2021-07-23T20:59:27Z,,2021-12-08T22:06:36Z,OPEN,False,30,28,1,https://github.com/MasterDuke17,Zero-pad the shorter string for bitwise string ops,2,[],https://github.com/MoarVM/MoarVM/pull/1520,https://github.com/MasterDuke17,8,https://github.com/MoarVM/MoarVM/pull/1520#issuecomment-989265404,To see what the fallout is in response to rakudo/rakudo#4454,"I think my tests added in Raku/roast@0a7bd6f shouldn't rely on any functionality with padding

Ah, but they do. At Raku/roast@0a7bd6f#diff-b233fcf9e1bc5b933625f6adb84948504ec0e26ec56086da955390d3754a65d5R76-R82 the bitwise ops are only done up to the length of the shorter string, and then at Raku/roast@0a7bd6f#diff-b233fcf9e1bc5b933625f6adb84948504ec0e26ec56086da955390d3754a65d5R83-R90 they just copy the remainder of the longer string to the result. I do just notice that https://design.raku.org/S03.html#line_898 says AND should only go up to the length of the shorter string, so maybe I need to adjust my PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1521,2021-07-24T10:31:09Z,2021-07-24T11:04:11Z,2021-07-24T11:05:00Z,MERGED,True,31,1,2,https://github.com/Altai-man,2021.07 release,2,[],https://github.com/MoarVM/MoarVM/pull/1521,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1521,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1522,2021-07-25T19:52:07Z,2021-07-29T10:01:12Z,2021-07-29T10:01:15Z,MERGED,True,11,1,2,https://github.com/niner,Fix spesh optimizing away still needed label register,1,[],https://github.com/MoarVM/MoarVM/pull/1522,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1522,"Objects representing loop labels are kept in a register and may be used by loop
handlers (like next LABEL). Spesh did not take this relationship into account,
just saw a register that was written to, but not otherwise used and optimized
the writers of this register away. Fix by giving a handler's label_reg the same
treatment as block_reg.
Fixes Rakudo issue #4456","Objects representing loop labels are kept in a register and may be used by loop
handlers (like next LABEL). Spesh did not take this relationship into account,
just saw a register that was written to, but not otherwise used and optimized
the writers of this register away. Fix by giving a handler's label_reg the same
treatment as block_reg.
Fixes Rakudo issue #4456",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1523,2021-07-27T15:33:48Z,2021-07-27T20:23:12Z,2021-07-27T20:23:13Z,MERGED,True,160,0,1,https://github.com/MasterDuke17,Templates for (bind|get)attr(s)?_*,1,[],https://github.com/MoarVM/MoarVM/pull/1523,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1523,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Looking at a couple random spesh logs I don't see the expr bail: Cannot get template for:  messages for these ops anymore.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Looking at a couple random spesh logs I don't see the expr bail: Cannot get template for:  messages for these ops anymore.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1524,2021-07-30T16:07:46Z,2021-08-01T07:17:51Z,2021-08-01T07:17:52Z,MERGED,True,20,11,1,https://github.com/MasterDuke17,Handle sp_runbytecode_s in rewrite_obj_return,1,[],https://github.com/MoarVM/MoarVM/pull/1524,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1524,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1525,2021-07-31T16:06:56Z,2021-07-31T22:24:11Z,2021-08-01T07:11:15Z,MERGED,True,4,6,3,https://github.com/MasterDuke17,Silence new warnings introduced in new-disp,1,[],https://github.com/MoarVM/MoarVM/pull/1525,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1525,Seen with gcc 11.1.0.,Seen with gcc 11.1.0.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1526,2021-08-01T14:36:40Z,2021-08-02T12:24:36Z,2021-08-02T12:24:39Z,MERGED,True,2,0,1,https://github.com/niner,Fix deadlock by untimely GC in multi-threaded programs,1,[],https://github.com/MoarVM/MoarVM/pull/1526,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1526,"In send_log we're marking the thread blocked while holding the
sl->body.block_mutex. In the spesh worker we're trying to lock the
sl->body.block_mutex without the thread being marked blocked for GC.
Now if some other thread at that point has decided that a GC run is in order,
send_log will wait for the GC run. But the GC run cannot start until the spesh
thread joins in. Which will never happen, since that's still waiting for
the sl->body.block_mutex.
Fix by marking the spesh worker thread blocked while waiting for block_mutex.
This way, the GC can proceed and send_log can unlock the mutex afterwards.","In send_log we're marking the thread blocked while holding the
sl->body.block_mutex. In the spesh worker we're trying to lock the
sl->body.block_mutex without the thread being marked blocked for GC.
Now if some other thread at that point has decided that a GC run is in order,
send_log will wait for the GC run. But the GC run cannot start until the spesh
thread joins in. Which will never happen, since that's still waiting for
the sl->body.block_mutex.
Fix by marking the spesh worker thread blocked while waiting for block_mutex.
This way, the GC can proceed and send_log can unlock the mutex afterwards.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1528,2021-08-11T20:38:59Z,2021-08-12T18:40:42Z,2021-08-12T18:40:43Z,MERGED,True,10,9,4,https://github.com/MasterDuke17,Free filename if exception when loading bytecode,1,[],https://github.com/MoarVM/MoarVM/pull/1528,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1528,"Because sometimes the given filename is malloced and sometimes it's from
argv, we also have to add a flag for whether it should be freed.","Because sometimes the given filename is malloced and sometimes it's from
argv, we also have to add a flag for whether it should be freed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1530,2021-08-21T12:44:04Z,2021-08-21T12:54:07Z,2021-08-21T12:54:09Z,MERGED,True,16,2,3,https://github.com/Altai-man,2021.08 release,3,[],https://github.com/MoarVM/MoarVM/pull/1530,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1530,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1531,2021-08-27T09:35:51Z,2021-08-27T11:41:42Z,2021-08-28T09:55:02Z,MERGED,True,99,43,10,https://github.com/nwc10,Convert the systems calls hash to MVMFixKeyHashTable,3,[],https://github.com/MoarVM/MoarVM/pull/1531,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1531,"The new-disp systems call hash had had to be implemented as MVMStrHashTable with a second helper struct to indirect, because

MVMFixKeyHashTable would always allocate storage for the hash entry from the FSA
The systems call hash entries needed to be static storage in the C code

This branch

Adds a new mode to MVMFixKeyHashTable so that it can also use static storage
Converts the systems call hash to use this
Marks the hash keys with MVM_gc_root_add_permanent_desc and hence eliminates a loop from MVM_gc_root_add_instance_roots_to_worklist

The code does now assign to the static storage used for the MVMDispSysCall structs, meaning that they can't be marked as const in the C code, and hence more efficiently initialised at process start up and shared between running processes. (*nix system, at least, can mark constant data as read only and shared). However, the trade off seems worth it, as we eliminate a loop at every GC run, and likely some level of CPU cache pressure.
The same approach could be extended to convert container_registry from MVMFixKeyHashTable to MVMStrHashTable
suggesting that this approach is suitable generic. However, I've not done that yet becase

It requires changing MVM_6model_add_container_config to take a non-const MVMContainerConfigurer *
That function is marked MVM_PUBLIC

However it seems that nothing outside of containers.c uses that function, so possible it could

Be dropped from the public API
Even made static

This would enable us to remove another iteration loop from MVM_gc_root_add_instance_roots_to_worklist","The new-disp systems call hash had had to be implemented as MVMStrHashTable with a second helper struct to indirect, because

MVMFixKeyHashTable would always allocate storage for the hash entry from the FSA
The systems call hash entries needed to be static storage in the C code

This branch

Adds a new mode to MVMFixKeyHashTable so that it can also use static storage
Converts the systems call hash to use this
Marks the hash keys with MVM_gc_root_add_permanent_desc and hence eliminates a loop from MVM_gc_root_add_instance_roots_to_worklist

The code does now assign to the static storage used for the MVMDispSysCall structs, meaning that they can't be marked as const in the C code, and hence more efficiently initialised at process start up and shared between running processes. (*nix system, at least, can mark constant data as read only and shared). However, the trade off seems worth it, as we eliminate a loop at every GC run, and likely some level of CPU cache pressure.
The same approach could be extended to convert container_registry from MVMFixKeyHashTable to MVMStrHashTable
suggesting that this approach is suitable generic. However, I've not done that yet becase

It requires changing MVM_6model_add_container_config to take a non-const MVMContainerConfigurer *
That function is marked MVM_PUBLIC

However it seems that nothing outside of containers.c uses that function, so possible it could

Be dropped from the public API
Even made static

This would enable us to remove another iteration loop from MVM_gc_root_add_instance_roots_to_worklist",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1531,2021-08-27T09:35:51Z,2021-08-27T11:41:42Z,2021-08-28T09:55:02Z,MERGED,True,99,43,10,https://github.com/nwc10,Convert the systems calls hash to MVMFixKeyHashTable,3,[],https://github.com/MoarVM/MoarVM/pull/1531,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1531#issuecomment-907114389,"The new-disp systems call hash had had to be implemented as MVMStrHashTable with a second helper struct to indirect, because

MVMFixKeyHashTable would always allocate storage for the hash entry from the FSA
The systems call hash entries needed to be static storage in the C code

This branch

Adds a new mode to MVMFixKeyHashTable so that it can also use static storage
Converts the systems call hash to use this
Marks the hash keys with MVM_gc_root_add_permanent_desc and hence eliminates a loop from MVM_gc_root_add_instance_roots_to_worklist

The code does now assign to the static storage used for the MVMDispSysCall structs, meaning that they can't be marked as const in the C code, and hence more efficiently initialised at process start up and shared between running processes. (*nix system, at least, can mark constant data as read only and shared). However, the trade off seems worth it, as we eliminate a loop at every GC run, and likely some level of CPU cache pressure.
The same approach could be extended to convert container_registry from MVMFixKeyHashTable to MVMStrHashTable
suggesting that this approach is suitable generic. However, I've not done that yet becase

It requires changing MVM_6model_add_container_config to take a non-const MVMContainerConfigurer *
That function is marked MVM_PUBLIC

However it seems that nothing outside of containers.c uses that function, so possible it could

Be dropped from the public API
Even made static

This would enable us to remove another iteration loop from MVM_gc_root_add_instance_roots_to_worklist","The code does now assign to the static storage used for the MVMDispSysCall structs, meaning that they can't be marked as const in the C code, and hence more efficiently initialised at process start up and shared between running processes. (*nix system, at least, can mark constant data as read only and shared). However, the trade off seems worth it, as we eliminate a loop at every GC run, and likely some level of CPU cache pressure.

If we some day have a real use-case for multiple in-process MVMInstances this will cause some extra work to make it possible, although I suspect it's not the only place that would need it.

However it seems that nothing outside of containers.c uses that function, so possible it could

Be dropped from the public API


It can be. It was public because Rakudo used to have an implementation of its Scalar container implemented alongside its extops. However, a generalized version of that already moved into MoarVM, and we're on the path to eliminate extops entirely.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1531,2021-08-27T09:35:51Z,2021-08-27T11:41:42Z,2021-08-28T09:55:02Z,MERGED,True,99,43,10,https://github.com/nwc10,Convert the systems calls hash to MVMFixKeyHashTable,3,[],https://github.com/MoarVM/MoarVM/pull/1531,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1531#issuecomment-907141268,"The new-disp systems call hash had had to be implemented as MVMStrHashTable with a second helper struct to indirect, because

MVMFixKeyHashTable would always allocate storage for the hash entry from the FSA
The systems call hash entries needed to be static storage in the C code

This branch

Adds a new mode to MVMFixKeyHashTable so that it can also use static storage
Converts the systems call hash to use this
Marks the hash keys with MVM_gc_root_add_permanent_desc and hence eliminates a loop from MVM_gc_root_add_instance_roots_to_worklist

The code does now assign to the static storage used for the MVMDispSysCall structs, meaning that they can't be marked as const in the C code, and hence more efficiently initialised at process start up and shared between running processes. (*nix system, at least, can mark constant data as read only and shared). However, the trade off seems worth it, as we eliminate a loop at every GC run, and likely some level of CPU cache pressure.
The same approach could be extended to convert container_registry from MVMFixKeyHashTable to MVMStrHashTable
suggesting that this approach is suitable generic. However, I've not done that yet becase

It requires changing MVM_6model_add_container_config to take a non-const MVMContainerConfigurer *
That function is marked MVM_PUBLIC

However it seems that nothing outside of containers.c uses that function, so possible it could

Be dropped from the public API
Even made static

This would enable us to remove another iteration loop from MVM_gc_root_add_instance_roots_to_worklist","extra work to make it possible, although I suspect it's not the only place that would need it.

I suspect this too. We'd need to audit the code for every place that has (or builds) a data structure, where some parts of the code assume that it's ""global"" (and immutable) and other parts don't. I guess, basically try to change everything that is static to static const and then see what needs fixing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1531,2021-08-27T09:35:51Z,2021-08-27T11:41:42Z,2021-08-28T09:55:02Z,MERGED,True,99,43,10,https://github.com/nwc10,Convert the systems calls hash to MVMFixKeyHashTable,3,[],https://github.com/MoarVM/MoarVM/pull/1531,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1531#issuecomment-907603033,"The new-disp systems call hash had had to be implemented as MVMStrHashTable with a second helper struct to indirect, because

MVMFixKeyHashTable would always allocate storage for the hash entry from the FSA
The systems call hash entries needed to be static storage in the C code

This branch

Adds a new mode to MVMFixKeyHashTable so that it can also use static storage
Converts the systems call hash to use this
Marks the hash keys with MVM_gc_root_add_permanent_desc and hence eliminates a loop from MVM_gc_root_add_instance_roots_to_worklist

The code does now assign to the static storage used for the MVMDispSysCall structs, meaning that they can't be marked as const in the C code, and hence more efficiently initialised at process start up and shared between running processes. (*nix system, at least, can mark constant data as read only and shared). However, the trade off seems worth it, as we eliminate a loop at every GC run, and likely some level of CPU cache pressure.
The same approach could be extended to convert container_registry from MVMFixKeyHashTable to MVMStrHashTable
suggesting that this approach is suitable generic. However, I've not done that yet becase

It requires changing MVM_6model_add_container_config to take a non-const MVMContainerConfigurer *
That function is marked MVM_PUBLIC

However it seems that nothing outside of containers.c uses that function, so possible it could

Be dropped from the public API
Even made static

This would enable us to remove another iteration loop from MVM_gc_root_add_instance_roots_to_worklist","It can be. It was public because Rakudo used to have an implementation of its Scalar container implemented alongside its extops. However, a generalized version of that already moved into MoarVM, and we're on the path to eliminate extops entirely.

OK, #1533 removes it from the API, when then permits some further simplifications.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1532,2021-08-27T21:49:14Z,2021-08-29T13:31:54Z,2021-08-29T13:32:00Z,MERGED,True,11,1,3,https://github.com/MasterDuke17,Respect --full-cleanup in nqp::exit,1,[],https://github.com/MoarVM/MoarVM/pull/1532,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1532,"If --full-cleanup was passed, but we are exiting via an nqp::exit call,
still do the cleanup. To do this we need to know in the interpreter if
--full-cleanup was in fact passed, so add a flag to MVMInstance for it.
The change in src/main.c needs to be replicated in the NQP and Rakudo runners for it to actually work for them, but that will only be done after this PR is merged and a bump is done so they see the new field in MVMInstance.","If --full-cleanup was passed, but we are exiting via an nqp::exit call,
still do the cleanup. To do this we need to know in the interpreter if
--full-cleanup was in fact passed, so add a flag to MVMInstance for it.
The change in src/main.c needs to be replicated in the NQP and Rakudo runners for it to actually work for them, but that will only be done after this PR is merged and a bump is done so they see the new field in MVMInstance.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1533,2021-08-28T09:52:07Z,2021-08-28T12:04:29Z,2021-08-28T12:04:52Z,MERGED,True,23,56,6,https://github.com/nwc10,Container registry to MVMFixKeyHashTable,3,[],https://github.com/MoarVM/MoarVM/pull/1533,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1533,"Remove MVM_6model_add_container_config from MoarVM's public API.
Rakudo eliminated its Scalar container descriptor in April 2020, which was the only remaining external user for this ( rakudo/rakudo@4221f8225fea).
Simplify add_container_config and remove mutex_container_registry.
Modification of container_registry only happens during VM instance setup, which is single threaded - after this it is immutable. Hence it no longer needs a mutex to protect access, so remove mutex_container_registry and all the code that supports it.
Convert container_registry to an MVMFixKeyHashTable
As the hash keys can now be permarooted, this eliminates an iterator loop from MVM_gc_root_add_instance_roots_to_worklist.","Remove MVM_6model_add_container_config from MoarVM's public API.
Rakudo eliminated its Scalar container descriptor in April 2020, which was the only remaining external user for this ( rakudo/rakudo@4221f8225fea).
Simplify add_container_config and remove mutex_container_registry.
Modification of container_registry only happens during VM instance setup, which is single threaded - after this it is immutable. Hence it no longer needs a mutex to protect access, so remove mutex_container_registry and all the code that supports it.
Convert container_registry to an MVMFixKeyHashTable
As the hash keys can now be permarooted, this eliminates an iterator loop from MVM_gc_root_add_instance_roots_to_worklist.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1534,2021-08-29T08:21:26Z,2021-08-29T12:41:32Z,2021-08-29T12:41:34Z,MERGED,True,39,50,10,https://github.com/nwc10,Store `key_right_shift - metadata_hash_bits` in the hashtable,2,[],https://github.com/MoarVM/MoarVM/pull/1534,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1534,Instead of storing key_right_shift (the shift for just the hash bucket) and computing the subtraction each time in create_loop_state. This saves one arithmetic operation in a fairly hot function.,Instead of storing key_right_shift (the shift for just the hash bucket) and computing the subtraction each time in create_loop_state. This saves one arithmetic operation in a fairly hot function.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1536,2021-09-04T17:32:39Z,2021-09-04T18:13:11Z,2021-09-04T18:13:12Z,MERGED,True,2,0,1,https://github.com/dogbert17,Fix another potential deadlock when starting to profile,1,[],https://github.com/MoarVM/MoarVM/pull/1536,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1536,"Very much like commit 9429bdc. The difference here was that
MVM_profile_start waited for tc->instance->cond_spesh_sync
without marking the thread blocked. A deadlock can occur if
the spesh thread is at this point waiting for the other
thread to join the GC run.
Fix by marking the thread blocked while waiting for the mutex and cond var.","Very much like commit 9429bdc. The difference here was that
MVM_profile_start waited for tc->instance->cond_spesh_sync
without marking the thread blocked. A deadlock can occur if
the spesh thread is at this point waiting for the other
thread to join the GC run.
Fix by marking the thread blocked while waiting for the mutex and cond var.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1538,2021-09-15T22:50:42Z,2021-09-15T23:10:16Z,2021-09-17T00:20:10Z,MERGED,True,1,0,1,https://github.com/MasterDuke17,Fix invalid free when cleaning interned callsites,1,[],https://github.com/MoarVM/MoarVM/pull/1538,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1538,"A new ""common"" callsite was added in 494cb75,
but accidentally left out of the list to check for in is_common().
This fixes the abort and free(): invalid pointer seen when running
raku --full-cleanup -e ''.","A new ""common"" callsite was added in 494cb75,
but accidentally left out of the list to check for in is_common().
This fixes the abort and free(): invalid pointer seen when running
raku --full-cleanup -e ''.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1539,2021-09-16T01:48:13Z,2021-09-17T20:52:15Z,2021-09-17T20:52:15Z,MERGED,True,2,2,1,https://github.com/coke,Turn VLA usage into a compiler error,1,[],https://github.com/MoarVM/MoarVM/pull/1539,https://github.com/coke,1,https://github.com/MoarVM/MoarVM/pull/1539,"VLA fails on windows, this allows us to catch it on other platforms first.
Resolves #1537","VLA fails on windows, this allows us to catch it on other platforms first.
Resolves #1537",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1540,2021-09-16T09:57:55Z,2021-09-16T12:06:46Z,2021-09-16T12:06:49Z,MERGED,True,3,1,1,https://github.com/nwc10,Comment that `MVM_callsite_intern` and `is_common` are coupled.,1,[],https://github.com/MoarVM/MoarVM/pull/1540,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1540,If you change one you need to change the other.,If you change one you need to change the other.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1542,2021-09-17T10:38:55Z,2021-09-17T12:21:15Z,2021-09-17T14:10:24Z,CLOSED,False,19,3,2,https://github.com/nwc10,Convert the use of a Variable Length Array to a regular allocation,3,[],https://github.com/MoarVM/MoarVM/pull/1542,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1542,This should restore the build on MSVC.,This should restore the build on MSVC.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1542,2021-09-17T10:38:55Z,2021-09-17T12:21:15Z,2021-09-17T14:10:24Z,CLOSED,False,19,3,2,https://github.com/nwc10,Convert the use of a Variable Length Array to a regular allocation,3,[],https://github.com/MoarVM/MoarVM/pull/1542,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1542#issuecomment-921695188,This should restore the build on MSVC.,"@jnthn are my assumptions about the FSA being a better fit reasonable?
I haven't actually benchmarked them :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1542,2021-09-17T10:38:55Z,2021-09-17T12:21:15Z,2021-09-17T14:10:24Z,CLOSED,False,19,3,2,https://github.com/nwc10,Convert the use of a Variable Length Array to a regular allocation,3,[],https://github.com/MoarVM/MoarVM/pull/1542,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1542#issuecomment-921696093,This should restore the build on MSVC.,@coke I thought it clearer (for history) to merge my changes to your original commit into one change. It's not clearer for attribution - this is still fine with you?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1542,2021-09-17T10:38:55Z,2021-09-17T12:21:15Z,2021-09-17T14:10:24Z,CLOSED,False,19,3,2,https://github.com/nwc10,Convert the use of a Variable Length Array to a regular allocation,3,[],https://github.com/MoarVM/MoarVM/pull/1542,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1542#issuecomment-921753898,This should restore the build on MSVC.,alloca would better.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1542,2021-09-17T10:38:55Z,2021-09-17T12:21:15Z,2021-09-17T14:10:24Z,CLOSED,False,19,3,2,https://github.com/nwc10,Convert the use of a Variable Length Array to a regular allocation,3,[],https://github.com/MoarVM/MoarVM/pull/1542,https://github.com/coke,5,https://github.com/MoarVM/MoarVM/pull/1542#issuecomment-921758177,This should restore the build on MSVC.,"@nwc10 - sure. The config change was ok, but my code change was a WIP that needed fixing anyway, thanks!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1542,2021-09-17T10:38:55Z,2021-09-17T12:21:15Z,2021-09-17T14:10:24Z,CLOSED,False,19,3,2,https://github.com/nwc10,Convert the use of a Variable Length Array to a regular allocation,3,[],https://github.com/MoarVM/MoarVM/pull/1542,https://github.com/nwc10,6,https://github.com/MoarVM/MoarVM/pull/1542#issuecomment-921828254,This should restore the build on MSVC.,celo_duro suggested alloca. It seems the simplest approach - see #1543,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1543,2021-09-17T14:09:02Z,2021-09-17T20:52:13Z,2021-09-17T20:52:20Z,MERGED,True,4,3,2,https://github.com/nwc10,Convert the use of a Variable Length Array to alloca,2,[],https://github.com/MoarVM/MoarVM/pull/1543,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1543,This should restore the build on MSVC.,This should restore the build on MSVC.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1543,2021-09-17T14:09:02Z,2021-09-17T20:52:13Z,2021-09-17T20:52:20Z,MERGED,True,4,3,2,https://github.com/nwc10,Convert the use of a Variable Length Array to alloca,2,[],https://github.com/MoarVM/MoarVM/pull/1543,https://github.com/coke,2,https://github.com/MoarVM/MoarVM/pull/1543#issuecomment-921911413,This should restore the build on MSVC.,"Looks good on windows, builds ok, no (new) rakudo ""make test"" failures on windows new-disp; Also looks fine on os x 10.15.7",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1544,2021-09-18T14:05:54Z,2021-09-18T14:50:15Z,2021-09-18T14:50:20Z,MERGED,True,12,2,2,https://github.com/Altai-man,2021.09 release,2,[],https://github.com/MoarVM/MoarVM/pull/1544,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1544,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1545,2021-09-20T16:44:08Z,2021-09-20T17:10:51Z,2021-09-20T17:12:26Z,MERGED,True,12,3,1,https://github.com/MasterDuke17,Add _n cases to jitting some of the new ops,1,[],https://github.com/MoarVM/MoarVM/pull/1545,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1545,NQP build ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. These ops are no longer seen in a spesh log of compiling CORE.c.setting as not being jitted.,NQP build ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. These ops are no longer seen in a spesh log of compiling CORE.c.setting as not being jitted.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1546,2021-09-20T21:35:29Z,2021-09-20T22:10:49Z,2021-09-20T23:12:03Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Correctly clean up disp programs in cleanup_entry,1,[],https://github.com/MoarVM/MoarVM/pull/1546,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1546,"Destroying the dispatch programs in inline cache entries when destroying
static frames was introduced in 6b50be1,
but there was a typo in the case of polymorphic entries.
valgrind --leak-check=full ./install/bin/raku --full-cleanup -e '' now just reports definitely lost: 2,024 bytes in 1 blocks.","Destroying the dispatch programs in inline cache entries when destroying
static frames was introduced in 6b50be1,
but there was a typo in the case of polymorphic entries.
valgrind --leak-check=full ./install/bin/raku --full-cleanup -e '' now just reports definitely lost: 2,024 bytes in 1 blocks.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1547,2021-09-20T21:45:01Z,2021-09-20T22:11:49Z,2021-09-20T23:12:08Z,MERGED,True,3,0,1,https://github.com/MasterDuke17,Clean the hash of syscalls during vm cleanup,1,[],https://github.com/MoarVM/MoarVM/pull/1547,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1547,Otherwise valgrind will report a leak for raku --full-cleanup -e ''.,Otherwise valgrind will report a leak for raku --full-cleanup -e ''.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1548,2021-09-22T10:07:15Z,2021-09-22T15:31:33Z,2021-09-22T15:31:52Z,MERGED,True,258,180,2,https://github.com/zhuomingliang,Add GCC computed goto for dispatcher.New disp cgoto,1,[],https://github.com/MoarVM/MoarVM/pull/1548,https://github.com/zhuomingliang,1,https://github.com/MoarVM/MoarVM/pull/1548,"Works locally, though the code is a bit ugly.","Works locally, though the code is a bit ugly.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1549,2021-09-22T21:39:04Z,2021-09-23T12:11:28Z,2021-09-23T12:11:31Z,CLOSED,False,81,27,7,https://github.com/timo,add dispatcher-drop-n-args to optimize allocations,1,[],https://github.com/MoarVM/MoarVM/pull/1549,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/1549,"Instead of creating a MVMCapture and MVMCallsite for each step of
removing arguments, we now offer a syscall that drops multiple arguments
that live at the same index in one go.
The result is that the transformations tree can now contain null entries
for the capture entry, which we have to interpret and deal with.","Instead of creating a MVMCapture and MVMCallsite for each step of
removing arguments, we now offer a syscall that drops multiple arguments
that live at the same index in one go.
The result is that the transformations tree can now contain null entries
for the capture entry, which we have to interpret and deal with.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1549,2021-09-22T21:39:04Z,2021-09-23T12:11:28Z,2021-09-23T12:11:31Z,CLOSED,False,81,27,7,https://github.com/timo,add dispatcher-drop-n-args to optimize allocations,1,[],https://github.com/MoarVM/MoarVM/pull/1549,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1549#issuecomment-925752450,"Instead of creating a MVMCapture and MVMCallsite for each step of
removing arguments, we now offer a syscall that drops multiple arguments
that live at the same index in one go.
The result is that the transformations tree can now contain null entries
for the capture entry, which we have to interpret and deal with.",Manually merged a slight tweaked version; thanks!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1550,2021-09-23T15:09:53Z,2021-09-25T08:55:52Z,2021-09-25T08:55:53Z,MERGED,True,26,26,2,https://github.com/MasterDuke17,Add '.new()' suggestion to type object errors,1,[],https://github.com/MoarVM/MoarVM/pull/1550,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1550,"Just for attribute binding and lookup though, since I believe those are
more likely arise from something like
class A {
    has $.b = 4;
}

say A.b;

compared to the similar errors when e.g., unboxing.
Passes NQP's make m-test and Rakudo's make m-test m-spectest.","Just for attribute binding and lookup though, since I believe those are
more likely arise from something like
class A {
    has $.b = 4;
}

say A.b;

compared to the similar errors when e.g., unboxing.
Passes NQP's make m-test and Rakudo's make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1551,2021-09-24T10:02:39Z,2021-09-24T10:55:26Z,2021-09-24T10:55:29Z,MERGED,True,7,0,1,https://github.com/nwc10,All bits in the union returned by `make_temp_reg` should be initialised,1,[],https://github.com/MoarVM/MoarVM/pull/1551,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1551,"make_temp_reg returns MVMSpeshOperand, which is a union between various
types and structs, all of which are 64 bits or smaller.
Code in optimize_bb_switch evaluates lit_i64 != -1 before calling
MVM_spesh_manipulate_release_temp_reg. The struct within the union returned
from make_temp_reg is only 48 bits, so take care to ensure that the other
16 bits are initialised, else valgrind (correctly) complains that
""Conditional jump or move depends on uninitialised value(s)"".
(To be fair, technically the subsequent code shouldn't be reading the union
using a different member than it was written with. If compilers are going to
get exacting about this - ie infer that writing the lit_i64 member can be
completely eliminated - then we will need to change the struct within the
union to be exactly 64 bits in total.)","make_temp_reg returns MVMSpeshOperand, which is a union between various
types and structs, all of which are 64 bits or smaller.
Code in optimize_bb_switch evaluates lit_i64 != -1 before calling
MVM_spesh_manipulate_release_temp_reg. The struct within the union returned
from make_temp_reg is only 48 bits, so take care to ensure that the other
16 bits are initialised, else valgrind (correctly) complains that
""Conditional jump or move depends on uninitialised value(s)"".
(To be fair, technically the subsequent code shouldn't be reading the union
using a different member than it was written with. If compilers are going to
get exacting about this - ie infer that writing the lit_i64 member can be
completely eliminated - then we will need to change the struct within the
union to be exactly 64 bits in total.)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1551,2021-09-24T10:02:39Z,2021-09-24T10:55:26Z,2021-09-24T10:55:29Z,MERGED,True,7,0,1,https://github.com/nwc10,All bits in the union returned by `make_temp_reg` should be initialised,1,[],https://github.com/MoarVM/MoarVM/pull/1551,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1551#issuecomment-926509234,"make_temp_reg returns MVMSpeshOperand, which is a union between various
types and structs, all of which are 64 bits or smaller.
Code in optimize_bb_switch evaluates lit_i64 != -1 before calling
MVM_spesh_manipulate_release_temp_reg. The struct within the union returned
from make_temp_reg is only 48 bits, so take care to ensure that the other
16 bits are initialised, else valgrind (correctly) complains that
""Conditional jump or move depends on uninitialised value(s)"".
(To be fair, technically the subsequent code shouldn't be reading the union
using a different member than it was written with. If compilers are going to
get exacting about this - ie infer that writing the lit_i64 member can be
completely eliminated - then we will need to change the struct within the
union to be exactly 64 bits in total.)","@jnthn - in looking at this code
    /* Allocate temporary and set up result. */
    g->temps[g->num_temps].orig   = result.reg.orig = g->num_locals;
    g->temps[g->num_temps].i      = result.reg.i    = 0;
    g->temps[g->num_temps].used_i = 0;
    g->temps[g->num_temps].kind   = kind;
    g->temps[g->num_temps].in_use = 1;

The struct being assigned to is this?
/* A temporary register, added to support transformations. */
struct MVMSpeshTemporary {
    /* The number of the local along with the current SSA index. */
    MVMuint16 orig;
    MVMuint16 i;

    /* The SSA index currently loaned out. */
    MVMuint16 used_i;

    /* What kind of register is it? */
    MVMuint16 kind;

    /* Is it currently in use? */
    MVMuint16 in_use;
};

In which case, I was a bit troubled that its i is MVMuint16, whereas that of union MVMSpeshOperand is MVMint32. Here both are getting set to 0, which won't overflow :-) But really shouldn't the codebase be consistent on what size the type should be?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1551,2021-09-24T10:02:39Z,2021-09-24T10:55:26Z,2021-09-24T10:55:29Z,MERGED,True,7,0,1,https://github.com/nwc10,All bits in the union returned by `make_temp_reg` should be initialised,1,[],https://github.com/MoarVM/MoarVM/pull/1551,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1551#issuecomment-926533740,"make_temp_reg returns MVMSpeshOperand, which is a union between various
types and structs, all of which are 64 bits or smaller.
Code in optimize_bb_switch evaluates lit_i64 != -1 before calling
MVM_spesh_manipulate_release_temp_reg. The struct within the union returned
from make_temp_reg is only 48 bits, so take care to ensure that the other
16 bits are initialised, else valgrind (correctly) complains that
""Conditional jump or move depends on uninitialised value(s)"".
(To be fair, technically the subsequent code shouldn't be reading the union
using a different member than it was written with. If compilers are going to
get exacting about this - ie infer that writing the lit_i64 member can be
completely eliminated - then we will need to change the struct within the
union to be exactly 64 bits in total.)","@nwc10 If you'd asked me what the type of i in MVMSpeshOperand was without looking, I'd have said MVMuint16! Yes, consistency is good.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1551,2021-09-24T10:02:39Z,2021-09-24T10:55:26Z,2021-09-24T10:55:29Z,MERGED,True,7,0,1,https://github.com/nwc10,All bits in the union returned by `make_temp_reg` should be initialised,1,[],https://github.com/MoarVM/MoarVM/pull/1551,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/1551#issuecomment-926534287,"make_temp_reg returns MVMSpeshOperand, which is a union between various
types and structs, all of which are 64 bits or smaller.
Code in optimize_bb_switch evaluates lit_i64 != -1 before calling
MVM_spesh_manipulate_release_temp_reg. The struct within the union returned
from make_temp_reg is only 48 bits, so take care to ensure that the other
16 bits are initialised, else valgrind (correctly) complains that
""Conditional jump or move depends on uninitialised value(s)"".
(To be fair, technically the subsequent code shouldn't be reading the union
using a different member than it was written with. If compilers are going to
get exacting about this - ie infer that writing the lit_i64 member can be
completely eliminated - then we will need to change the struct within the
union to be exactly 64 bits in total.)","Ah, and on overflow risk: the upper limit on bytecode size to specialize is 65536 bytes. You can't create code in that space that will have more than 65536 versions!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1552,2021-09-30T11:29:56Z,,2021-10-02T08:21:52Z,OPEN,False,547,133,7,https://github.com/MasterDuke17,"Jit some ops that aren't terribly hot, but do cause bails in a spesh log",22,[],https://github.com/MoarVM/MoarVM/pull/1552,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1552,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This also includes a fix for scobjcount, which was incorrectly jitted (but had never been a problem before because other not-jitted-at-the-time ops were preventing the jitted version of scobjcount from being used).","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
This also includes a fix for scobjcount, which was incorrectly jitted (but had never been a problem before because other not-jitted-at-the-time ops were preventing the jitted version of scobjcount from being used).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1553,2021-09-30T13:08:04Z,2021-09-30T14:18:57Z,2021-09-30T14:18:58Z,MERGED,True,2,0,1,https://github.com/MasterDuke17,Fix leak of resume init registers,1,[],https://github.com/MoarVM/MoarVM/pull/1553,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1553,"When freeing a spesh candidates resumption inits, also free their init
registers.","When freeing a spesh candidates resumption inits, also free their init
registers.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1555,2021-10-02T08:42:13Z,2021-10-07T10:09:19Z,2021-10-07T10:09:20Z,MERGED,True,362,19,6,https://github.com/MasterDuke17,Jit some not so common ops,15,[],https://github.com/MoarVM/MoarVM/pull/1555,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1555,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1555,2021-10-02T08:42:13Z,2021-10-07T10:09:19Z,2021-10-07T10:09:20Z,MERGED,True,362,19,6,https://github.com/MasterDuke17,Jit some not so common ops,15,[],https://github.com/MoarVM/MoarVM/pull/1555,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1555#issuecomment-934131706,,"Ok, so we know that jitting setdebugtypename b8e230e (#1555) has a problem. I'm going to remove that commit for now and test the rest from #1552.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1556,2021-10-02T11:08:56Z,2021-10-02T13:13:17Z,2021-10-02T13:13:18Z,MERGED,True,1,3,1,https://github.com/MasterDuke17,Simplify cloning NQP and Rakudo repos in CI jobs,1,[],https://github.com/MoarVM/MoarVM/pull/1556,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1556,"Since we build them at HEAD we don't need the full history. Also do the
clone and checkout of 'master' in a single command.","Since we build them at HEAD we don't need the full history. Also do the
clone and checkout of 'master' in a single command.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1557,2021-10-04T19:48:51Z,2021-10-04T21:15:10Z,2021-10-05T05:14:46Z,MERGED,True,3,3,1,https://github.com/nwc10,Correct the cur_op increment in sp_assertparamcheck and sp_bindcomplete,1,[],https://github.com/MoarVM/MoarVM/pull/1557,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1557,"These two spesh ops had been leaving cur_op 2 bytes before the start of
the next op. However, this wasn't noticed (yet) on little endian systems
because the last part of each op was a uint32 literal which (for all code
compile during the build and spectest) was less than 65536. Hence on
little endian systems the last two bytes were always zero, which the
runloop (mis)interpreted as a no_op, and hence resynchronised itself.
However, on big endian systems the last two bytes are the low order bytes
of the value, and hence the runloop would treat the data value as an op and
attempt to execute it, with completely undefined results. Fortunately one
chanced-upon behaviour was to hit ""Not Yet Implemented"" or deprecated ops,
which throw exceptions, which caused the build to fail and the bug to be
discovered.","These two spesh ops had been leaving cur_op 2 bytes before the start of
the next op. However, this wasn't noticed (yet) on little endian systems
because the last part of each op was a uint32 literal which (for all code
compile during the build and spectest) was less than 65536. Hence on
little endian systems the last two bytes were always zero, which the
runloop (mis)interpreted as a no_op, and hence resynchronised itself.
However, on big endian systems the last two bytes are the low order bytes
of the value, and hence the runloop would treat the data value as an op and
attempt to execute it, with completely undefined results. Fortunately one
chanced-upon behaviour was to hit ""Not Yet Implemented"" or deprecated ops,
which throw exceptions, which caused the build to fail and the bug to be
discovered.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1558,2021-10-05T14:28:54Z,2021-10-05T14:34:42Z,2021-10-05T14:34:46Z,CLOSED,False,1,1,1,https://github.com/MasterDuke17,Change CI job strategy from matrix to parallel,1,[],https://github.com/MoarVM/MoarVM/pull/1558,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1558,"We aren't passing multiple options to the matrix strategy for it to do
all combinations of, so this might give us more control about how the
jobs start (e.g., start the Windows jobs first since they're slower).","We aren't passing multiple options to the matrix strategy for it to do
all combinations of, so this might give us more control about how the
jobs start (e.g., start the Windows jobs first since they're slower).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1558,2021-10-05T14:28:54Z,2021-10-05T14:34:42Z,2021-10-05T14:34:46Z,CLOSED,False,1,1,1,https://github.com/MasterDuke17,Change CI job strategy from matrix to parallel,1,[],https://github.com/MoarVM/MoarVM/pull/1558,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1558#issuecomment-934469943,"We aren't passing multiple options to the matrix strategy for it to do
all combinations of, so this might give us more control about how the
jobs start (e.g., start the Windows jobs first since they're slower).","Whoops, found some new documentation that explains matrix vs parallel better, this isn't right (obviously, because no jobs ran (but it just silently doesn't do anything, thanks Azure for making it so easy to debug)).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1559,2021-10-06T14:33:25Z,2021-10-08T10:45:44Z,2021-10-08T10:45:47Z,MERGED,True,58,19,3,https://github.com/jnthn,Assorted debug server fixes,7,[],https://github.com/MoarVM/MoarVM/pull/1559,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1559,"Fix missed breakpoints on Windows due to inconsistent application of path normalization
Avoid breakpoints being hit many times for the same line
Avoid failures to resume that were liable to occur in multi-threaded programs
Make sure all debugger debug output is guarded","Fix missed breakpoints on Windows due to inconsistent application of path normalization
Avoid breakpoints being hit many times for the same line
Avoid failures to resume that were liable to occur in multi-threaded programs
Make sure all debugger debug output is guarded",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1560,2021-10-08T06:34:44Z,2021-10-08T17:30:50Z,2021-10-08T17:30:50Z,MERGED,True,471,0,2,https://github.com/japhb,Doc research on scoping for an AArch64 JIT port,1,[],https://github.com/MoarVM/MoarVM/pull/1560,https://github.com/japhb,1,https://github.com/MoarVM/MoarVM/pull/1560,"Reasons to work on AArch64 as our second JIT platform
Currently known JIT porting risks
Required knowledge for porters
Potential development environments
Porting roadmap sketch
Alternate roadmap paths to consider
Example of expected x64 versus AArch64 tile differences
Resource links discovered during research","Reasons to work on AArch64 as our second JIT platform
Currently known JIT porting risks
Required knowledge for porters
Potential development environments
Porting roadmap sketch
Alternate roadmap paths to consider
Example of expected x64 versus AArch64 tile differences
Resource links discovered during research",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1561,2021-10-09T16:41:34Z,,2022-02-10T19:46:00Z,OPEN,False,405,168,35,https://github.com/MasterDuke17,Remove a spesh optimization if it has too many deopts (rebased after new-disp),12,[],https://github.com/MoarVM/MoarVM/pull/1561,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1561,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1562,2021-10-12T22:09:21Z,2021-10-12T23:19:32Z,2021-10-13T07:23:15Z,MERGED,True,5,0,2,https://github.com/MasterDuke17,Fix two leaks missed by --full-cleanup,1,[],https://github.com/MoarVM/MoarVM/pull/1562,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1562,"With them valgrind reports that both NQP test t/moar/53-dispatch.t and compiling Rakudo's CORE.c setting with --full-cleanup has no leaks.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","With them valgrind reports that both NQP test t/moar/53-dispatch.t and compiling Rakudo's CORE.c setting with --full-cleanup has no leaks.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1564,2021-10-14T20:06:29Z,2021-10-15T13:48:55Z,2021-10-15T13:49:33Z,MERGED,True,31,23,1,https://github.com/niner,Fix memory corruption caused by repossessed mixins losing their repla…,2,[],https://github.com/MoarVM/MoarVM/pull/1564,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1564,"…ced body
When a mixin got repossessed during deserialization, the replaced body pointer
would get NULLed. If the mixin needed more storage than the original type
provided we could then end up overwriting adjacent objects when deserializing
the mixin's attributes.
Fix by checking for this situation in P6opaque's deserialize function and
allocating a new replaced body if neccessary as indicated by the difference
in sizes.
Fixes rakudo issue 4570","…ced body
When a mixin got repossessed during deserialization, the replaced body pointer
would get NULLed. If the mixin needed more storage than the original type
provided we could then end up overwriting adjacent objects when deserializing
the mixin's attributes.
Fix by checking for this situation in P6opaque's deserialize function and
allocating a new replaced body if neccessary as indicated by the difference
in sizes.
Fixes rakudo issue 4570",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1564,2021-10-14T20:06:29Z,2021-10-15T13:48:55Z,2021-10-15T13:49:33Z,MERGED,True,31,23,1,https://github.com/niner,Fix memory corruption caused by repossessed mixins losing their repla…,2,[],https://github.com/MoarVM/MoarVM/pull/1564,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1564#issuecomment-944304495,"…ced body
When a mixin got repossessed during deserialization, the replaced body pointer
would get NULLed. If the mixin needed more storage than the original type
provided we could then end up overwriting adjacent objects when deserializing
the mixin's attributes.
Fix by checking for this situation in P6opaque's deserialize function and
allocating a new replaced body if neccessary as indicated by the difference
in sizes.
Fixes rakudo issue 4570",Adressed both comments in c7be428,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1566,2021-10-16T12:44:54Z,2021-10-19T12:31:45Z,2021-10-19T12:31:47Z,MERGED,True,15,15,1,https://github.com/MasterDuke17,Add some context to capture arg exceptions,1,[],https://github.com/MoarVM/MoarVM/pull/1566,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1566,"Say what op they were thrown from (if any) and include both the given
and allowed values.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Say what op they were thrown from (if any) and include both the given
and allowed values.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1567,2021-10-16T12:57:20Z,2021-10-17T19:01:18Z,2021-10-17T19:01:19Z,MERGED,True,82,2,2,https://github.com/MasterDuke17,Add JIT templates causing bails in a spesh log of a megamorphic multi dispatch example,6,[],https://github.com/MoarVM/MoarVM/pull/1567,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1567,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1568,2021-10-17T12:47:19Z,2021-10-18T10:25:16Z,2021-10-18T10:25:19Z,MERGED,True,27,19,5,https://github.com/niner,Fix segfault finding dynamics after deopt,2,[],https://github.com/MoarVM/MoarVM/pull/1568,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1568,"This PR fixes the issues uncovered in #1565 involving the frame walker, threading and deopts.","This PR fixes the issues uncovered in #1565 involving the frame walker, threading and deopts.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1569,2021-10-18T15:14:00Z,2021-10-20T09:34:46Z,2021-10-20T09:34:49Z,MERGED,True,69,16,5,https://github.com/niner,New disp nativecall part1,3,[],https://github.com/MoarVM/MoarVM/pull/1569,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1569,First part of having NativeCall embrace new-disp. These are just fixes for issues that came up during development and may want to get into the upcoming release.,First part of having NativeCall embrace new-disp. These are just fixes for issues that came up during development and may want to get into the upcoming release.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1570,2021-10-18T21:57:57Z,2021-10-19T12:31:58Z,2021-10-20T20:12:23Z,MERGED,True,31,16,2,https://github.com/MasterDuke17,Fixing warnings seen when compiling with GCC using -O2 (instead of the -O3 that the build defaults to),2,[],https://github.com/MoarVM/MoarVM/pull/1570,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1570,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest (with both GCC and Clang, and -O2 and -O3).","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest (with both GCC and Clang, and -O2 and -O3).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1570,2021-10-18T21:57:57Z,2021-10-19T12:31:58Z,2021-10-20T20:12:23Z,MERGED,True,31,16,2,https://github.com/MasterDuke17,Fixing warnings seen when compiling with GCC using -O2 (instead of the -O3 that the build defaults to),2,[],https://github.com/MoarVM/MoarVM/pull/1570,https://github.com/samcv,2,https://github.com/MoarVM/MoarVM/pull/1570#issuecomment-948000776,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest (with both GCC and Clang, and -O2 and -O3).",Looks good. Thanks @MasterDuke17,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1571,2021-10-19T11:59:03Z,2021-10-19T12:36:44Z,2021-10-19T12:36:46Z,MERGED,True,6,13,4,https://github.com/MasterDuke17,Fix some of the things found by the clang static analyzer,3,[],https://github.com/MoarVM/MoarVM/pull/1571,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1571,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. I confirmed that the clang static analyzer no longer reports these particular problems after these changes.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. I confirmed that the clang static analyzer no longer reports these particular problems after these changes.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1572,2021-10-19T20:52:56Z,2021-10-20T09:35:47Z,2021-10-20T17:19:29Z,MERGED,True,11,0,2,https://github.com/MasterDuke17,Lego jit implementation of nqp::abs_i,1,[],https://github.com/MoarVM/MoarVM/pull/1572,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1572,"This was seen to cause bails in a profile/spesh log of a simple
Text::Diff::Sift4 benchmark.
NQP builds ok and passes make m-test and Rakudo build ok and passes make m-test m-spectest.","This was seen to cause bails in a profile/spesh log of a simple
Text::Diff::Sift4 benchmark.
NQP builds ok and passes make m-test and Rakudo build ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1573,2021-10-20T19:31:55Z,2021-10-22T09:37:25Z,2021-10-22T09:37:27Z,MERGED,True,6,0,1,https://github.com/niner,Fix uninitialized registers after deopt from dispatch guards,1,[],https://github.com/MoarVM/MoarVM/pull/1573,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1573,"A dispatch gets translated to a sequence of operations culminating in the
runbytecode instruction. The pre-deopt index of the original instruction will
be found on the runbytecode itself or any of the guards stacked up before it.
When looking for the pre-deopt index, we didn't take into account, that the
instruction holding a suitable deopt pre ins annotation may also itself have
a deopt synth annotation, i.e. that the proper deopt idx is found elsewhere.
This is important because while all of these deopt indexes will point at the
same deopt target (bytecode position), only the original one will be registered
for materializations. Thus by using the wrong deopt index, we didn't find the
materializations when deopting, leading to uninitialized registers which lead
to segfaults.
Fix by looking for deopt synth annotations first and giving preference to their
deopt indexes.","A dispatch gets translated to a sequence of operations culminating in the
runbytecode instruction. The pre-deopt index of the original instruction will
be found on the runbytecode itself or any of the guards stacked up before it.
When looking for the pre-deopt index, we didn't take into account, that the
instruction holding a suitable deopt pre ins annotation may also itself have
a deopt synth annotation, i.e. that the proper deopt idx is found elsewhere.
This is important because while all of these deopt indexes will point at the
same deopt target (bytecode position), only the original one will be registered
for materializations. Thus by using the wrong deopt index, we didn't find the
materializations when deopting, leading to uninitialized registers which lead
to segfaults.
Fix by looking for deopt synth annotations first and giving preference to their
deopt indexes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1574,2021-10-21T09:17:29Z,2021-10-24T21:01:48Z,2021-10-24T21:01:49Z,MERGED,True,1,2,1,https://github.com/MasterDuke17,Improve the jit implementation of nqp::abs_i,1,[],https://github.com/MoarVM/MoarVM/pull/1574,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1574,"We don't need to copy the source twice, it's faster just to refer back
to it in the cmovl.
My test case was (so doing nqp::abs_i of a negative number and a positive one in the loop):
MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind nqp-m -e 'my int $a := nqp::time; my int $i := -100_000_000; my int $b; my int $c; while $i++ < 0 { $b := nqp::abs_i($i); $c := nqp::abs_i($a); }; say(nqp::div_n(nqp::time - $a, 1e9)); say($a); say($b); say($c);'
master reported ~3,083,800,000 instructions, with this patch it was ~2,883,800,000.","We don't need to copy the source twice, it's faster just to refer back
to it in the cmovl.
My test case was (so doing nqp::abs_i of a negative number and a positive one in the loop):
MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind nqp-m -e 'my int $a := nqp::time; my int $i := -100_000_000; my int $b; my int $c; while $i++ < 0 { $b := nqp::abs_i($i); $c := nqp::abs_i($a); }; say(nqp::div_n(nqp::time - $a, 1e9)); say($a); say($b); say($c);'
master reported ~3,083,800,000 instructions, with this patch it was ~2,883,800,000.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1574,2021-10-21T09:17:29Z,2021-10-24T21:01:48Z,2021-10-24T21:01:49Z,MERGED,True,1,2,1,https://github.com/MasterDuke17,Improve the jit implementation of nqp::abs_i,1,[],https://github.com/MoarVM/MoarVM/pull/1574,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1574#issuecomment-949522733,"We don't need to copy the source twice, it's faster just to refer back
to it in the cmovl.
My test case was (so doing nqp::abs_i of a negative number and a positive one in the loop):
MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind nqp-m -e 'my int $a := nqp::time; my int $i := -100_000_000; my int $b; my int $c; while $i++ < 0 { $b := nqp::abs_i($i); $c := nqp::abs_i($a); }; say(nqp::div_n(nqp::time - $a, 1e9)); say($a); say($b); say($c);'
master reported ~3,083,800,000 instructions, with this patch it was ~2,883,800,000.","Is this also faster if you're testing only positive numbers, i.e. those where the cmovl has to read from memory? If yes, this means that a read from cache is actually faster than a write+read to/from a register, which at least to me is a bit surprising.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1574,2021-10-21T09:17:29Z,2021-10-24T21:01:48Z,2021-10-24T21:01:49Z,MERGED,True,1,2,1,https://github.com/MasterDuke17,Improve the jit implementation of nqp::abs_i,1,[],https://github.com/MoarVM/MoarVM/pull/1574,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1574#issuecomment-949967916,"We don't need to copy the source twice, it's faster just to refer back
to it in the cmovl.
My test case was (so doing nqp::abs_i of a negative number and a positive one in the loop):
MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind nqp-m -e 'my int $a := nqp::time; my int $i := -100_000_000; my int $b; my int $c; while $i++ < 0 { $b := nqp::abs_i($i); $c := nqp::abs_i($a); }; say(nqp::div_n(nqp::time - $a, 1e9)); say($a); say($b); say($c);'
master reported ~3,083,800,000 instructions, with this patch it was ~2,883,800,000.","Changing the benchmark to this:
MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind ~/p6/install/bin/nqp-m -e 'my int $a := nqp::time; my int $i := 0; my int $b; my int $c; while $i++ < 100_000_000 { $b := nqp::abs_i($i); $c := nqp::abs_i($a); }; say(nqp::div_n(nqp::time - $a, 1e9)); say($a); say($b); say($c);'
on master gives ~3,283,500,00 instructions, with this patch it was ~3,083,500,00 instructions.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1574,2021-10-21T09:17:29Z,2021-10-24T21:01:48Z,2021-10-24T21:01:49Z,MERGED,True,1,2,1,https://github.com/MasterDuke17,Improve the jit implementation of nqp::abs_i,1,[],https://github.com/MoarVM/MoarVM/pull/1574,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1574#issuecomment-950095967,"We don't need to copy the source twice, it's faster just to refer back
to it in the cmovl.
My test case was (so doing nqp::abs_i of a negative number and a positive one in the loop):
MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind nqp-m -e 'my int $a := nqp::time; my int $i := -100_000_000; my int $b; my int $c; while $i++ < 0 { $b := nqp::abs_i($i); $c := nqp::abs_i($a); }; say(nqp::div_n(nqp::time - $a, 1e9)); say($a); say($b); say($c);'
master reported ~3,083,800,000 instructions, with this patch it was ~2,883,800,000.","Oh, of course! You are counting instructions. And it's precicely 2 fewer instructions per iteration.
Do you also see a difference in wallclock time? Because while it's fewer instructions, the one you changed from reading a register to reading from memory might be much slower now.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1574,2021-10-21T09:17:29Z,2021-10-24T21:01:48Z,2021-10-24T21:01:49Z,MERGED,True,1,2,1,https://github.com/MasterDuke17,Improve the jit implementation of nqp::abs_i,1,[],https://github.com/MoarVM/MoarVM/pull/1574,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1574#issuecomment-950111086,"We don't need to copy the source twice, it's faster just to refer back
to it in the cmovl.
My test case was (so doing nqp::abs_i of a negative number and a positive one in the loop):
MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind nqp-m -e 'my int $a := nqp::time; my int $i := -100_000_000; my int $b; my int $c; while $i++ < 0 { $b := nqp::abs_i($i); $c := nqp::abs_i($a); }; say(nqp::div_n(nqp::time - $a, 1e9)); say($a); say($b); say($c);'
master reported ~3,083,800,000 instructions, with this patch it was ~2,883,800,000.","Mildly changing the benchmark to this (no valgrind, only positive numbers):
MVM_SPESH_BLOCKING=1 ~/p6/install/bin/nqp-m -e 'my int $a := nqp::time; my int $i := 0; my int $b; my int $c; while $i++ < 1_000_000_000 { $b := nqp::abs_i($i); $c := nqp::abs_i($a); }; say(nqp::div_n(nqp::time - $a, 1e9)); say($a); say($b); say($c);'
on master reports ~1.64s, with this patch it was ~1.44s.
The version that counts up and does one abs of a positive number and one of a negative number is almost the same between master and this branch.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1576,2021-10-23T12:14:43Z,2021-10-23T12:14:56Z,2021-10-23T12:15:38Z,MERGED,True,57,1,2,https://github.com/Altai-man,2021.10 release,2,[],https://github.com/MoarVM/MoarVM/pull/1576,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1576,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1577,2021-10-24T08:29:26Z,2021-10-24T21:01:07Z,2021-10-24T21:01:08Z,MERGED,True,12,2,2,https://github.com/MasterDuke17,Silence wrong GCC warning about unused variable,2,[],https://github.com/MoarVM/MoarVM/pull/1577,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1577,Silences the two warnings we see with GCC on linux.,Silences the two warnings we see with GCC on linux.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1578,2021-10-25T10:17:52Z,2021-10-26T22:17:21Z,2021-10-26T22:17:24Z,MERGED,True,245,167,6,https://github.com/jnthn,"Allocate frame work and, when possible, environment registers on the callstack",4,[],https://github.com/MoarVM/MoarVM/pull/1578,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1578,"Changes carried out as part of new-disp give us the flexibility to allocate the ->work and ->env of a frame on the callstack, meaning that the FSA allocations go away. For ->work we can always do this; its lifetime is the dynamic scope of the frame. For ->env it's more interesting: we can do it only for frames that are not heap-promoted. For frames that start life on the heap (due to us detecting that they will end up there typically anyway) we use the FSA right off; for those that get promoted, we have to move ->env to the heap.
On a recursive fib benchmark (chosen because at present we can never inline recursive calls), we see a significant improvement, although curiously the level of improvement seems to vary significantly between the machines I've tried it on: a factor of 1.2x on my Ryzen box, but a more meaty 1.5x on my Xeon box.","Changes carried out as part of new-disp give us the flexibility to allocate the ->work and ->env of a frame on the callstack, meaning that the FSA allocations go away. For ->work we can always do this; its lifetime is the dynamic scope of the frame. For ->env it's more interesting: we can do it only for frames that are not heap-promoted. For frames that start life on the heap (due to us detecting that they will end up there typically anyway) we use the FSA right off; for those that get promoted, we have to move ->env to the heap.
On a recursive fib benchmark (chosen because at present we can never inline recursive calls), we see a significant improvement, although curiously the level of improvement seems to vary significantly between the machines I've tried it on: a factor of 1.2x on my Ryzen box, but a more meaty 1.5x on my Xeon box.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1581,2021-10-27T14:54:33Z,2021-11-12T12:54:22Z,2021-11-12T12:54:28Z,MERGED,True,294,331,19,https://github.com/jnthn,Migrate special return to callstack and simplify return handling,18,[],https://github.com/MoarVM/MoarVM/pull/1581,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1581,"Work on new-disp introduced new callstack unwind logic, but conservatively tried not to touch the overall workflow of frame unwinding too much. However, once we more fully embrace the new callstack model, simplifications ore on offer.
A prerequisite for that is changing the special return mechanism to use callstack unwinding rather than a check in remove_one_frame. There is a further benefit to this: we also can allocate space for any data associated with special return handlers on the callstack rather than using the FSA or malloc.
One usage of the special return mechanism was for running finalizers. This was the only use that did not install the special return handler on the currently executing frame, and thus was not possible to port use the new mechanism, which installs the special return record on the callstack. After playing with a few ideas, the simplest one - with relatively low cost - turned out to be just checking if anything needs finalizing, and trying to run a handler if so. This is probably more robust than what it replaces, since we don't go trying to find a frame to put the handler on down the call chain.
With the special return handling migrated, it then became possible to greatly simplify remove_one_frame, it could now rely on the unwinding process to leave the interpreter in the correct state. The ""thunked"" flag could also go away thanks to this. Interpreter boundary checks went away thanks to having a callstack record type to mark such boundaries. Some work was also eliminated for callstack frames. Finally, an inlining and check elimination the compiler failed to do decreases the cost of returning from JIT-compiled frames.
This seems to be worth ~5% off a recursive Fibonacci benchmark.","Work on new-disp introduced new callstack unwind logic, but conservatively tried not to touch the overall workflow of frame unwinding too much. However, once we more fully embrace the new callstack model, simplifications ore on offer.
A prerequisite for that is changing the special return mechanism to use callstack unwinding rather than a check in remove_one_frame. There is a further benefit to this: we also can allocate space for any data associated with special return handlers on the callstack rather than using the FSA or malloc.
One usage of the special return mechanism was for running finalizers. This was the only use that did not install the special return handler on the currently executing frame, and thus was not possible to port use the new mechanism, which installs the special return record on the callstack. After playing with a few ideas, the simplest one - with relatively low cost - turned out to be just checking if anything needs finalizing, and trying to run a handler if so. This is probably more robust than what it replaces, since we don't go trying to find a frame to put the handler on down the call chain.
With the special return handling migrated, it then became possible to greatly simplify remove_one_frame, it could now rely on the unwinding process to leave the interpreter in the correct state. The ""thunked"" flag could also go away thanks to this. Interpreter boundary checks went away thanks to having a callstack record type to mark such boundaries. Some work was also eliminated for callstack frames. Finally, an inlining and check elimination the compiler failed to do decreases the cost of returning from JIT-compiled frames.
This seems to be worth ~5% off a recursive Fibonacci benchmark.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1581,2021-10-27T14:54:33Z,2021-11-12T12:54:22Z,2021-11-12T12:54:28Z,MERGED,True,294,331,19,https://github.com/jnthn,Migrate special return to callstack and simplify return handling,18,[],https://github.com/MoarVM/MoarVM/pull/1581,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1581#issuecomment-955196971,"Work on new-disp introduced new callstack unwind logic, but conservatively tried not to touch the overall workflow of frame unwinding too much. However, once we more fully embrace the new callstack model, simplifications ore on offer.
A prerequisite for that is changing the special return mechanism to use callstack unwinding rather than a check in remove_one_frame. There is a further benefit to this: we also can allocate space for any data associated with special return handlers on the callstack rather than using the FSA or malloc.
One usage of the special return mechanism was for running finalizers. This was the only use that did not install the special return handler on the currently executing frame, and thus was not possible to port use the new mechanism, which installs the special return record on the callstack. After playing with a few ideas, the simplest one - with relatively low cost - turned out to be just checking if anything needs finalizing, and trying to run a handler if so. This is probably more robust than what it replaces, since we don't go trying to find a frame to put the handler on down the call chain.
With the special return handling migrated, it then became possible to greatly simplify remove_one_frame, it could now rely on the unwinding process to leave the interpreter in the correct state. The ""thunked"" flag could also go away thanks to this. Interpreter boundary checks went away thanks to having a callstack record type to mark such boundaries. Some work was also eliminated for callstack frames. Finally, an inlining and check elimination the compiler failed to do decreases the cost of returning from JIT-compiled frames.
This seems to be worth ~5% off a recursive Fibonacci benchmark.","Just got this segfault during core.c build:
Program terminated with signal SIGSEGV, Segmentation fault.

warning: Section `.reg-xstate/12159' in core file too small.
#0  0x00007f90aef01b57 in MVM_hll_current (tc=tc@entry=0xe08e30) at src/core/hll.c:185
185         return tc->cur_frame->static_info->body.cu->body.hll_config;
[Current thread is 1 (Thread 0x7f90ae8b8b80 (LWP 12159))]
(gdb) bt
#0  0x00007f90aef01b57 in MVM_hll_current (tc=tc@entry=0xe08e30) at src/core/hll.c:185
#1  0x00007f90aef2122e in MVM_gc_finalize_run_handler (tc=tc@entry=0xe08e30) at src/gc/finalize.c:87
#2  0x00007f90aeefafc8 in MVM_callstack_unwind_frame (tc=tc@entry=0xe08e30, exceptional=exceptional@entry=0 '\000') at src/core/callstack.c:737
#3  0x00007f90aeef475b in remove_one_frame (tc=0xe08e30, unwind=<optimized out>) at src/core/frame.c:882
#4  0x00007f90aeef6c8a in MVM_frame_try_return (tc=0xe08e30) at src/core/frame.c:950
#5  0x00007f90aeedf1d4 in MVM_interp_run (tc=0xe08e30, initial_invoke=0x0, initial_invoke@entry=0x7f90aeff58b0 <toplevel_initial_invoke>, invoke_data=0x0, invoke_data@entry=0x7f90aeff58b0 <toplevel_initial_invoke>, outer_runloop=outer_runloop@entry=0x0) at src/core/interp.c:570
#6  0x00007f90aeff6985 in MVM_vm_run_file (instance=<optimized out>, filename=<optimized out>) at src/moar.c:505
#7  0x000000000040160d in main (argc=11, argv=0x7ffcdcc55db8) at src/main.c:307
(gdb) p tc->cur_frame
$1 = (MVMFrame *) 0x0",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1581,2021-10-27T14:54:33Z,2021-11-12T12:54:22Z,2021-11-12T12:54:28Z,MERGED,True,294,331,19,https://github.com/jnthn,Migrate special return to callstack and simplify return handling,18,[],https://github.com/MoarVM/MoarVM/pull/1581,https://github.com/jnthn,3,https://github.com/MoarVM/MoarVM/pull/1581#issuecomment-957321921,"Work on new-disp introduced new callstack unwind logic, but conservatively tried not to touch the overall workflow of frame unwinding too much. However, once we more fully embrace the new callstack model, simplifications ore on offer.
A prerequisite for that is changing the special return mechanism to use callstack unwinding rather than a check in remove_one_frame. There is a further benefit to this: we also can allocate space for any data associated with special return handlers on the callstack rather than using the FSA or malloc.
One usage of the special return mechanism was for running finalizers. This was the only use that did not install the special return handler on the currently executing frame, and thus was not possible to port use the new mechanism, which installs the special return record on the callstack. After playing with a few ideas, the simplest one - with relatively low cost - turned out to be just checking if anything needs finalizing, and trying to run a handler if so. This is probably more robust than what it replaces, since we don't go trying to find a frame to put the handler on down the call chain.
With the special return handling migrated, it then became possible to greatly simplify remove_one_frame, it could now rely on the unwinding process to leave the interpreter in the correct state. The ""thunked"" flag could also go away thanks to this. Interpreter boundary checks went away thanks to having a callstack record type to mark such boundaries. Some work was also eliminated for callstack frames. Finally, an inlining and check elimination the compiler failed to do decreases the cost of returning from JIT-compiled frames.
This seems to be worth ~5% off a recursive Fibonacci benchmark.",Rebased to fix a conflict and also fixed the NULL dereference observed.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1582,2021-10-27T20:35:20Z,2021-10-28T13:51:39Z,2021-10-28T13:51:41Z,MERGED,True,12,0,1,https://github.com/MasterDuke17,Lego JIT of getcurhllsym,1,[],https://github.com/MoarVM/MoarVM/pull/1582,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1582,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
use nqp; my $a; $a := nqp::getcurhllsym(""GLOBAL"") for ^10_000_000; say now - INIT now; say $a decreases from ~0.67s to ~0.54s and a spesh log of some random code doesn't show any lego jit bails for getcurhllsym after. Oddly, a profile of the above code shows more frames after (but they're all jitted and runtime is less).
Before: In total, 8555 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 9995362 call frames (that's 99.91%).
After: In total, 10400 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 9993505 call frames (that's 99.9%).","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
use nqp; my $a; $a := nqp::getcurhllsym(""GLOBAL"") for ^10_000_000; say now - INIT now; say $a decreases from ~0.67s to ~0.54s and a spesh log of some random code doesn't show any lego jit bails for getcurhllsym after. Oddly, a profile of the above code shows more frames after (but they're all jitted and runtime is less).
Before: In total, 8555 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 9995362 call frames (that's 99.91%).
After: In total, 10400 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 9993505 call frames (that's 99.9%).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1582,2021-10-27T20:35:20Z,2021-10-28T13:51:39Z,2021-10-28T13:51:41Z,MERGED,True,12,0,1,https://github.com/MasterDuke17,Lego JIT of getcurhllsym,1,[],https://github.com/MoarVM/MoarVM/pull/1582,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1582#issuecomment-953698943,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
use nqp; my $a; $a := nqp::getcurhllsym(""GLOBAL"") for ^10_000_000; say now - INIT now; say $a decreases from ~0.67s to ~0.54s and a spesh log of some random code doesn't show any lego jit bails for getcurhllsym after. Oddly, a profile of the above code shows more frames after (but they're all jitted and runtime is less).
Before: In total, 8555 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 9995362 call frames (that's 99.91%).
After: In total, 10400 call frames were entered and exited by the profiled code. Inlining eliminated the need to create 9993505 call frames (that's 99.9%).","Oddly, a profile of the above code shows more frames after (but they're all jitted and runtime is less).

Not so odd; the JIT bail probably meant that less time was spent before the specialized version was available. The gamble we're always making is that the wait is worth it because the machine code version will earn it back.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1583,2021-10-28T12:58:07Z,2021-10-28T13:30:19Z,2021-10-28T13:30:20Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Use callp instead of call in jit of new(mixin)type,1,[],https://github.com/MoarVM/MoarVM/pull/1583,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1583,"Callp should be used with function pointers, but we've just been lucky
so far (probably because these aren't very hot ops).","Callp should be used with function pointers, but we've just been lucky
so far (probably because these aren't very hot ops).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1584,2021-10-28T13:00:40Z,2021-11-10T19:19:05Z,2021-11-10T19:43:38Z,MERGED,True,133,24,6,https://github.com/MasterDuke17,Another attempt at jitting some not so common ops that are still seen bailing in a spesh log,4,[],https://github.com/MoarVM/MoarVM/pull/1584,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1584,Now with callps instead of calls.,Now with callps instead of calls.,True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1585,2021-10-28T20:57:36Z,2021-11-08T11:08:23Z,2021-11-08T11:08:26Z,MERGED,True,222,3,7,https://github.com/timo,Dispatcher replace arg syscall,4,[],https://github.com/MoarVM/MoarVM/pull/1585,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/1585,"Lets us replace a single argument with a tracked value or a literal object value.
This saves the creation of one BOOTCapture when you used to drop and then insert with the same index.
The replace-arg syscall when inserted into the nqp dispatchers saves just 20 captures in rakudo -e '' but the replace-arg-literal-obj syscall saves about 1.5k.","Lets us replace a single argument with a tracked value or a literal object value.
This saves the creation of one BOOTCapture when you used to drop and then insert with the same index.
The replace-arg syscall when inserted into the nqp dispatchers saves just 20 captures in rakudo -e '' but the replace-arg-literal-obj syscall saves about 1.5k.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1586,2021-10-29T16:56:43Z,2021-11-05T11:45:19Z,2021-11-05T11:45:23Z,MERGED,True,58,3,3,https://github.com/niner,Eliminate hllbool/boot-boolify-boxed-int pairs in spesh,1,[],https://github.com/MoarVM/MoarVM/pull/1586,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1586,"No need to turn an int into an HLL bool just to turn it back to an int when
using it as a condition for jumps. Eliminate those pairs same as we do with
box/unbox.","No need to turn an int into an HLL bool just to turn it back to an int when
using it as a condition for jumps. Eliminate those pairs same as we do with
box/unbox.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1586,2021-10-29T16:56:43Z,2021-11-05T11:45:19Z,2021-11-05T11:45:23Z,MERGED,True,58,3,3,https://github.com/niner,Eliminate hllbool/boot-boolify-boxed-int pairs in spesh,1,[],https://github.com/MoarVM/MoarVM/pull/1586,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1586#issuecomment-961452420,"No need to turn an int into an HLL bool just to turn it back to an int when
using it as a condition for jumps. Eliminate those pairs same as we do with
box/unbox.",I addressed all comments by amending the commit. Please have another look.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1587,2021-10-29T19:54:16Z,2021-10-29T20:24:08Z,2021-10-29T20:24:10Z,MERGED,True,2,2,1,https://github.com/MasterDuke17,Negative numbers should not be prime,1,[],https://github.com/MoarVM/MoarVM/pull/1587,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1587,"The code from the paper just worked with unsigned values and I didn't
notice.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest (which means some tests are needed).
And now say (-99).is-prime reports False, not True.","The code from the paper just worked with unsigned values and I didn't
notice.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest (which means some tests are needed).
And now say (-99).is-prime reports False, not True.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1588,2021-10-30T11:32:57Z,2021-10-30T13:25:45Z,2022-02-09T21:07:20Z,MERGED,True,21,21,4,https://github.com/niner,Fix segfaults when a frame has more than 8192 locals,1,[],https://github.com/MoarVM/MoarVM/pull/1588,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1588,"The bytecode format supports 2^16 locals in a frame. However the allocator used
16 bit numbers for sizes, i.e. bytes. Since a register is 8 bytes large, we
could only allocate enough space for 2^13 registers. Fix by using 32 bit
numbers for size calculations.
Fixes GH #1223","The bytecode format supports 2^16 locals in a frame. However the allocator used
16 bit numbers for sizes, i.e. bytes. Since a register is 8 bytes large, we
could only allocate enough space for 2^13 registers. Fix by using 32 bit
numbers for size calculations.
Fixes GH #1223",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1589,2021-11-02T11:20:17Z,2021-11-04T15:58:04Z,2021-11-04T15:58:07Z,MERGED,True,97,62,1,https://github.com/jnthn,Some small optimizations for frame allocation,2,[],https://github.com/MoarVM/MoarVM/pull/1589,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1589,"Frame allocation remains relatively costly. This shaves a little bit off the cost by splitting the specialized frame vs. unspecialized frame paths. This also is a code clarity win, because allocate_frame was chock full of tests for spesh_cand, which - even if a compiler could lift them out - still wasn't terribly good for the reader. In the reworked code, we also get to replace two memset calls with a single one in the case of specialized code.
This seems to be worth ~4% less CPU cycles on the recursive fibonaci benchmark (measured using callgrind), and a ~3% off wallclock time of the same. Most programs are not so intensively creating callframes (indeed, many microbenchmarks barely shift, because they end up with full inlining, so the only win is in the short period before the optimized version of the code is ready).","Frame allocation remains relatively costly. This shaves a little bit off the cost by splitting the specialized frame vs. unspecialized frame paths. This also is a code clarity win, because allocate_frame was chock full of tests for spesh_cand, which - even if a compiler could lift them out - still wasn't terribly good for the reader. In the reworked code, we also get to replace two memset calls with a single one in the case of specialized code.
This seems to be worth ~4% less CPU cycles on the recursive fibonaci benchmark (measured using callgrind), and a ~3% off wallclock time of the same. Most programs are not so intensively creating callframes (indeed, many microbenchmarks barely shift, because they end up with full inlining, so the only win is in the short period before the optimized version of the code is ready).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1590,2021-11-02T11:53:04Z,2021-11-04T15:51:10Z,2021-11-04T15:51:18Z,CLOSED,False,273,302,19,https://github.com/jnthn,Migrate special return to callstack,22,[],https://github.com/MoarVM/MoarVM/pull/1590,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1590,"This is one part of #1581, to see if it also trips up the CI.","This is one part of #1581, to see if it also trips up the CI.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1590,2021-11-02T11:53:04Z,2021-11-04T15:51:10Z,2021-11-04T15:51:18Z,CLOSED,False,273,302,19,https://github.com/jnthn,Migrate special return to callstack,22,[],https://github.com/MoarVM/MoarVM/pull/1590,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1590#issuecomment-961175962,"This is one part of #1581, to see if it also trips up the CI.",Closing as debugging is complete; #1581 has been updated with the fixed implementation.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1591,2021-11-05T11:29:28Z,2021-11-07T15:17:03Z,2022-02-09T21:07:18Z,MERGED,True,6,3,1,https://github.com/jnthn,Avoid thread safety issues in intern lookups,1,[],https://github.com/MoarVM/MoarVM/pull/1591,https://github.com/jnthn,1,https://github.com/MoarVM/MoarVM/pull/1591,"The number of callsites and the pointer to the callsites memory may
change. We carefully update these with a write barrier when doing the
change, however the reading code also needs to take care to do that.","The number of callsites and the pointer to the callsites memory may
change. We carefully update these with a write barrier when doing the
change, however the reading code also needs to take care to do that.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1592,2021-11-05T18:38:52Z,2021-11-06T10:59:00Z,2021-11-06T10:59:12Z,MERGED,True,11,0,1,https://github.com/nwc10,libffi nativecall fixes,2,[],https://github.com/MoarVM/MoarVM/pull/1592,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1592,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1593,2021-11-07T15:58:15Z,2021-11-08T10:11:27Z,2021-11-08T10:11:30Z,MERGED,True,2,7,3,https://github.com/niner,Remove counter productive NULL checks in decont ops,1,[],https://github.com/MoarVM/MoarVM/pull/1593,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1593,"Object registers must never contain NULL values, so there should be no reason
to check for NULL values when deconting. Historically bugs in other parts of
the code have caused NULL values to appear in registers and these checks have
worked around these bugs. But in truth they just hide them and make it more
difficult to debug, so better to remove them. This might cost some stability in
the short term, but should enable us to fix the underlying bugs for good.","Object registers must never contain NULL values, so there should be no reason
to check for NULL values when deconting. Historically bugs in other parts of
the code have caused NULL values to appear in registers and these checks have
worked around these bugs. But in truth they just hide them and make it more
difficult to debug, so better to remove them. This might cost some stability in
the short term, but should enable us to fix the underlying bugs for good.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1594,2021-11-07T16:06:26Z,,2021-11-07T17:39:03Z,OPEN,False,37,44,5,https://github.com/MasterDuke17,Jit ctx(outer|caller)(skipthunks)?,2,[],https://github.com/MoarVM/MoarVM/pull/1594,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1594,"Currently this causes the rakudo installation to die with Frame has no lexical with name '::?PACKAGE' and a ton of fails in make m-test. However, everything passes with MVM_JIT_EXPR_DISABLE=1. Since there aren't any templates for these ops, there likely is some weird interaction with other templates. Isolating this change into its own branch for ease of testing.","Currently this causes the rakudo installation to die with Frame has no lexical with name '::?PACKAGE' and a ton of fails in make m-test. However, everything passes with MVM_JIT_EXPR_DISABLE=1. Since there aren't any templates for these ops, there likely is some weird interaction with other templates. Isolating this change into its own branch for ease of testing.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1595,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).",True,"{'HOORAY': ['https://github.com/lizmat', 'https://github.com/jnthn']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-964473834,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).",All the CI tests fail because they attempt to use MoarVM from this branch with nqp and rakudo master. What would be needed are nqp and rakudo on their respective new-disp-nativecall branches.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-964531292,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","Builds on the M1 Mac on the gcc compiler farm. (t/04-nativecall/02-simple-args.t fails not ok 12 - passed uint8 0xFE both on this branch and master due to dyncall making buggy assumptions about ABI requirements for unsigned types smaller than int and sign extension which don't matter on x86 or x86_64)
Builds on x86_64 and ppc64 with both libffi and dyncall, and arm32 (I only tested 32 bit with dyncall). Not exhaustive, but looks like it's good on 32 and 64 bit linux, big and little endian.
Probably hasn't been tested by anyone on win32, and CI won't help us.
I created #1597 to cause a CI run with the correct branches. Whilst there are failures in some configurations, including configurations that I believe we've tested manually without problems, the basic Win32 build passed everything.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-968691333,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","> +    MVMRegister attr_value;

 +    attr_value.s = MVM_repr_get_str(tc, read_from);
 +
 +    /* Ensure that we have this value read in the values table, and make
 +     * a tracked object if not. */
 +    MVMuint32 result_value_index = value_index_unbox_str(tc,
 &(record->rec), value_index); +    if
 (!record->rec.values[result_value_index].tracked)
 +        record->rec.values[result_value_index].tracked =
 MVM_tracked_create(tc, +                attr_value, MVM_CALLSITE_ARG_STR);

 Missing `MVMROOT` of `attr_value.s` (`MVM_tracked_create` allocates).
Are you sure about needing MVMROOT? attr_value.s is not used anymore after the
call to MVM_tracked_create and none of the other callers of MVM_tracked_create
in the file MVMROOT their register values, so apparently MVMROOT is not needed
to keep the object alive either.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/niner,5,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-968701513,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","MVM_exception_throw_adhoc(tc, ""Internal error: unhandled dyncall argument
 type"");

 Wonder if including the type in the error could help if we ever hit this
Yes, it would. However, omitting such detail is pretty much par for the course
in MoarVM. Often the first thing I do when investigating a new bug is adding
something like ""got %s instead"" to the error output. I rarely commit those
howerver as the errors usually only appear due to MoarVM or rakudo bugs and
once they are fixed, the added detail is essentially dead code that makes
refactoring more tedious and is easy to miss.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/jnthn,6,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-968787489,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","Are you sure about needing MVMROOT? attr_value.s is not used anymore after the
call to MVM_tracked_create and none of the other callers of MVM_tracked_create
in the file MVMROOT their register values, so apparently MVMROOT is not needed
to keep the object alive either.

Checked again, and it appears I somehow misread. I agree no MVMROOT is needed here.

Yes, it would. However, omitting such detail is pretty much par for the course
in MoarVM.

It has been; I guess the argument for doing so is more clues in the event we have to debug things we can't reproduce, although how far it helps is another question.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/MasterDuke17,7,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-968795381,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","MVM_exception_throw_adhoc(tc, ""Internal error: unhandled dyncall argument type""); Wonder if including the type in the error could help if we ever hit this
Yes, it would. However, omitting such detail is pretty much par for the course in MoarVM. Often the first thing I do when investigating a new bug is adding something like ""got %s instead"" to the error output. I rarely commit those howerver as the errors usually only appear due to MoarVM or rakudo bugs and once they are fixed, the added detail is essentially dead code that makes refactoring more tedious and is easy to miss.

Fwiw, I’ve made a couple commits in the past that just went through adding context and debugging information where it looked like it was missing, and I usually make such changes part of any other PR if needed.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/nwc10,8,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-968866951,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","Historically I have tended to think of it more like this;

It has been; I guess the argument for doing so is more clues in the event we have to debug things we can't reproduce, although how far it helps is another question.

than this:

... as the errors usually only appear due to MoarVM or rakudo bugs and once they are fixed, the added detail is essentially dead code that makes refactoring more tedious and is easy to miss.

I found it immensely frustrating to get Perl 5 bug reports where the reporter accurately pasted the ""panic"" message, and then you go look into the source code and realise that you can't tell why the panic was reached. Unless it's obvious how to replicate the test case, you're immediately into a round trip delay with the bug reporter, before you can get more information to progress. it's very much like ""assertion failed"", where the first thing you want to do is re-run the code in the debugger, and then go look to see what the actual value was, because all you know so far is something that it's not.
So I tended to do the following

make sure each ""panic"" message was unique - if there are 2+ in the same C function, make sure that the text is different enough that it's clear which was hit
try to put in as much data into the format string so that one had a reasonable idea why the panic was hit, on the assumption that worst-case the bug isn't repeatable (at least not locally), and maybe the only report you get is the panic message

However, I rarely hit the case where there was enough refactoring going on such that the panic messages got in the way of it. I guess this reflects age and stability of code bases, and so I can't really comment on the different trade offs to make when this starts to matter.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/niner,9,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-969036858,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","1. make sure each ""panic"" message was **unique** - if there are 2+ in the
 same C function, make sure that the text is different enough that it's
 clear which was hit 2. try to put in as much data into the format string so
 that one had a reasonable idea **why** the panic was hit, on the assumption
 that worst-case the bug isn't repeatable (at least not locally), and maybe
 the only report you get is the panic message
Ok, truth is, I was just too lazy to amend those commits. But I just did so
anyway, because yes, I wish we had error messages like you describe
everywhere. So I may as well be part of the solution instead of part of the
problem. Adjusted all error messages to be unique and to contain the failing
value.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/jnthn,10,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-969039312,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","make sure each ""panic"" message was unique - if there are 2+ in the same C function, make sure that the text is different enough that it's clear which was hit

I've certainly been trying to do this one, at least...

So I may as well be part of the solution instead of part of the problem.

...yup, I'll keep it in mind too. :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/niner,11,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-969089377,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","> -                MVM_exception_throw_adhoc(tc, ""Dispatch callback failed
 > to delegate to a dispatcher"");
 +                MVM_oops(tc, ""Dispatch callback failed to delegate to a
 dispatcher"");

 Why? This is a mistake in the dispatcher implementation, not an internal VM
 error.
Just an accidental commit. Changed it to oops locally because that's easier to
set a break point on.
 > +    case MVM_OP_sp_runnativecall_v:
 +    case MVM_OP_sp_runnativecall_i: {

 We're not JIT-compiling native calls that return floating point, string, or
 pointer types yet, iiuc?
Floats and strings, no. Pointer types are ints though and spesh turns
dispatch_o into sp_runnativecall_i when the result is a pointer type and adds
appropriate boxing ops (which PEA may optimize away). Keeps the JIT
implementation as simple as possible _and_ gives spesh some more
opportunities.
 > +                    : op == MVM_OP_sp_runnativecall_s

 +                        ? MVM_RETURN_STR
 +                        : op == MVM_OP_sp_runnativecall_n
 +                            ? MVM_RETURN_NUM

 I believe these are unreachable.
As of now, yes. But since we'll want to JIT compile those in the future as
well, I figure, we may as well keep it rather than remove it now just to add
it again later.
 > +        /* Check the entry_point after we've used it to generate the code
 > to avoid a race
 +         * condition where the check turned out fine, but entry_point got
 overwritten before we +         * got to use it for generating the code. */
 +        if (!body->entry_point) {

 Yowser...this can happen? Reposession?
Yes, exactly.
 > -        MVMSpeshBB *ptr = linear_next;

 +        MVMSpeshBB *ptr = g->entry;
          while (ptr != NULL) {
 -            ptr->idx += 1;
 +            if (ptr != new_bb && ptr->idx > bb->idx)
 +                ptr->idx += 1;
              ptr = ptr->linear_next;

 Why was this wrong originally? I don't see it.
It assumes that the linear order of BBs is numbered monotonically and
increasingly. But inlining may give us BBs 1, 2, 5, 6, 3, 4.
 > +                        bb->linear_next->children[1] = target_bb;

 +                        bb->linear_next->succ[1] = target_bb;

 Hm, wondering if `MVM_spesh_manipulate_add_successor` wouldn't be useful
 here?
Unfortunately not as MVM_spesh_manipulate_add_successor allocates the new BB
but here we get the BB from MVM_spesh_manipulate_split_BB_at.

I addressed all other comments, mostly by amending the commits. Thanks a lot
for the thorough review. Certainly improved the result a lot!",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/niner,12,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-970078347,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","I think this should check `v->unbox.kind == MVM_CALLSITE_ARG_INT` too; we do
 have allomorphs and a dispatch program that unboxes the same thing two ways
 is possible.
Good point! I amended the three commits.
 Comment is out of date after this code change.
dito",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/lizmat,13,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-970133080,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","But we'll leave this until after the 2021.11 release, right?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/jnthn,14,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-970136175,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","But we'll leave this until after the 2021.11 release, right?

I thought we were still looking for a release manager, in which case a 2021.11 this weekend looks hugely doubtful?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/lizmat,15,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-970138397,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","We are indeed still looking...
Do I read correctly that you'd rather have this merged asap if we don't have a release manager?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/jnthn,16,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-970140873,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","Do I read correctly that you'd rather have this merged asap if we don't have a release manager?

Well, only if that's what @niner prefers too. :-)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/niner,17,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-970262754,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","Well, only if that's what @niner prefers too. :-)
Honestly, I can't upgrade to a current rakudo release until NativeCall has at
least comparable performance to before new-disp. Remember that 2021.10 is just
about half as fast as 2021.09.

A 50 % performance loss on test-t would have been a definite release blocker.
Actually it was even a merge blocker. new-disp wasn't even merged to the
*development* master until test-t performance was on par with the previous
implementation. Somehow csv-ip5xs has never gotten a similar treatment despite
it measuring performance of rakudo's NativeCall subsystem which is e.g. at the
heart of every Cro web application. Indeed, the 50 % performance loss was not
even mentioned by anyone on the channel, much less considered for release
planning.

So yes, I see good reason for merging before the next release.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/lizmat,18,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-970269666,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","Then I will squash merge and bump, unless someone beats me to it in the next 30 minutes.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/jnthn,19,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-970322220,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","Somehow csv-ip5xs has never gotten a similar treatment despite
it measuring performance of rakudo's NativeCall subsystem which is e.g. at the
heart of every Cro web application.

I'm curious about that assertion; Cro is mostly pure Raku code. It was also one of the things that I measured ahead of the new-disp, and found a 10% improvement in request throughput. That test was for a non-TLS connection, and NativeCall is of course more involved if TLS is at play. If your Cro webapps are doing a lot of Inline::Perl5 usage I can appreciate it's rather more important, but that isn't ""every Cro web application"".",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1595,2021-11-09T18:52:25Z,2021-11-16T14:07:33Z,2021-11-18T19:42:02Z,MERGED,True,2105,1108,44,https://github.com/niner,New disp nativecall,35,[],https://github.com/MoarVM/MoarVM/pull/1595,https://github.com/niner,20,https://github.com/MoarVM/MoarVM/pull/1595#issuecomment-973199543,"This is a dispatcher based rework of how native routines are called. As much work as possible like unboxing arguments is pushed into the HLL dispatcher code where it can be speshed away. JIT compilation of native calls is completely re-done to be more in line with other ops. We no longer JIT compile calls when building the native call site, but let spesh handle this via the new sp_runnativecall family of ops. With the old native call JIT code gone, we can now remove the last remainder of the old invocation protocol (including the args buffer).","@jnthn I mean OpenSSL for TLS support in Cro web applications, since TLS is ubiquitous nowadays.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1596,2021-11-09T23:50:03Z,2021-11-10T19:44:52Z,2021-11-10T19:44:53Z,MERGED,True,29,12,1,https://github.com/MasterDuke17,Use alloca in MVM_string_memmem_grapheme32str...,1,[],https://github.com/MoarVM/MoarVM/pull/1596,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1596,"based on how it's done in knuth_morris_pratt_string_index().
I tested this with a one-liner that just does some .contains() and
.starts-with() over a spesh log that's ~200k lines long. Timing it
(with MVM_SPESH_BLOCKING=1) reported ~2.36s before this change and
~2.26 after. Additionally, heaptrack reported ~4.7M calls to allocation
functions and ~1.8M temporary allocations before, and ~3.0M calls to
allocation functions and ~110k temporary allocations after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","based on how it's done in knuth_morris_pratt_string_index().
I tested this with a one-liner that just does some .contains() and
.starts-with() over a spesh log that's ~200k lines long. Timing it
(with MVM_SPESH_BLOCKING=1) reported ~2.36s before this change and
~2.26 after. Additionally, heaptrack reported ~4.7M calls to allocation
functions and ~1.8M temporary allocations before, and ~3.0M calls to
allocation functions and ~110k temporary allocations after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1596,2021-11-09T23:50:03Z,2021-11-10T19:44:52Z,2021-11-10T19:44:53Z,MERGED,True,29,12,1,https://github.com/MasterDuke17,Use alloca in MVM_string_memmem_grapheme32str...,1,[],https://github.com/MoarVM/MoarVM/pull/1596,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1596#issuecomment-964674744,"based on how it's done in knuth_morris_pratt_string_index().
I tested this with a one-liner that just does some .contains() and
.starts-with() over a spesh log that's ~200k lines long. Timing it
(with MVM_SPESH_BLOCKING=1) reported ~2.36s before this change and
~2.26 after. Additionally, heaptrack reported ~4.7M calls to allocation
functions and ~1.8M temporary allocations before, and ~3.0M calls to
allocation functions and ~110k temporary allocations after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Callgrind reports ~21,050,000,000 instructions before and ~20,408,000,000 instructions after.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1597,2021-11-10T10:06:38Z,2021-11-27T13:07:08Z,2021-11-27T13:07:08Z,CLOSED,False,2070,1085,44,https://github.com/nwc10,New disp nativecall libffi azure hack,33,[],https://github.com/MoarVM/MoarVM/pull/1597,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1597,Make with the CI!,Make with the CI!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1597,2021-11-10T10:06:38Z,2021-11-27T13:07:08Z,2021-11-27T13:07:08Z,CLOSED,False,2070,1085,44,https://github.com/nwc10,New disp nativecall libffi azure hack,33,[],https://github.com/MoarVM/MoarVM/pull/1597,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1597#issuecomment-980599780,Make with the CI!,I'm pretty sure this is not needed any more,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1598,2021-11-10T19:02:31Z,2021-11-10T19:28:14Z,2021-11-10T19:43:15Z,MERGED,True,2,2,2,https://github.com/MasterDuke17,getlexperinvtype_o is now inlinable,1,[],https://github.com/MoarVM/MoarVM/pull/1598,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1598,"""getlexperinvtype_o basically just calls MVM_frame_find_lexical_by_name
which in e2e63d0
was converted to using the frame walker which correctly handles inlining. So
the reason for marking this op :noinline might actually be gone.""
- nine, #moarvm, 2021/11/10 18:39:19
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","""getlexperinvtype_o basically just calls MVM_frame_find_lexical_by_name
which in e2e63d0
was converted to using the frame walker which correctly handles inlining. So
the reason for marking this op :noinline might actually be gone.""
- nine, #moarvm, 2021/11/10 18:39:19
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1598,2021-11-10T19:02:31Z,2021-11-10T19:28:14Z,2021-11-10T19:43:15Z,MERGED,True,2,2,2,https://github.com/MasterDuke17,getlexperinvtype_o is now inlinable,1,[],https://github.com/MoarVM/MoarVM/pull/1598,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1598#issuecomment-965661215,"""getlexperinvtype_o basically just calls MVM_frame_find_lexical_by_name
which in e2e63d0
was converted to using the frame walker which correctly handles inlining. So
the reason for marking this op :noinline might actually be gone.""
- nine, #moarvm, 2021/11/10 18:39:19
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","If it tests clean, I'm inclined to merge this with the other two by @MasterDuke17 and bump MoarVM",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1599,2021-11-11T21:38:01Z,2021-11-17T12:10:00Z,2021-11-17T12:10:13Z,MERGED,True,50,28,1,https://github.com/Altai-man,Update MoarVM release guide according to the actual release process,1,[],https://github.com/MoarVM/MoarVM/pull/1599,https://github.com/Altai-man,1,https://github.com/MoarVM/MoarVM/pull/1599,"This updated the release guide to:

Unify example release version to some more actual one
Clarifies or just adds some parts of the process (how to write a changelog, create a github release)

Rakudo release guide is more involved and needs more rewriting, so it'll come afterwards.","This updated the release guide to:

Unify example release version to some more actual one
Clarifies or just adds some parts of the process (how to write a changelog, create a github release)

Rakudo release guide is more involved and needs more rewriting, so it'll come afterwards.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1600,2021-11-13T22:24:21Z,,2022-01-20T14:38:23Z,OPEN,False,25,3,1,https://github.com/MasterDuke17,Fix MVM_string_ascii_encode_substr to use given offset value,2,[],https://github.com/MoarVM/MoarVM/pull/1600,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1600,"Since 6eaf6aa, any value passed in
start is not used to offset into the string.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Since 6eaf6aa, any value passed in
start is not used to offset into the string.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1600,2021-11-13T22:24:21Z,,2022-01-20T14:38:23Z,OPEN,False,25,3,1,https://github.com/MasterDuke17,Fix MVM_string_ascii_encode_substr to use given offset value,2,[],https://github.com/MoarVM/MoarVM/pull/1600,https://github.com/jnthn,2,https://github.com/MoarVM/MoarVM/pull/1600#issuecomment-968295525,"Since 6eaf6aa, any value passed in
start is not used to offset into the string.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Hm, is it me or does only the fast path care about lengthu and the one with the codepoint iterator ignores it?",True,{'EYES': ['https://github.com/timo']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1600,2021-11-13T22:24:21Z,,2022-01-20T14:38:23Z,OPEN,False,25,3,1,https://github.com/MasterDuke17,Fix MVM_string_ascii_encode_substr to use given offset value,2,[],https://github.com/MoarVM/MoarVM/pull/1600,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1600#issuecomment-968392294,"Since 6eaf6aa, any value passed in
start is not used to offset into the string.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Hm, is it me or does only the fast path care about lengthu and the one with the codepoint iterator ignores it?

I just tested with this further change:
diff --git a/src/strings/ascii.c b/src/strings/ascii.c
index a2a39326a..4fe1fa071 100644
--- a/src/strings/ascii.c
+++ b/src/strings/ascii.c
@@ -174,8 +174,9 @@ char * MVM_string_ascii_encode_substr(MVMThreadContext *tc, MVMString *str, MVMu
             MVM_string_ci_get_codepoint(tc, &ci);
             start--;
         }
-        while (MVM_string_ci_has_more(tc, &ci)) {
+        while (MVM_string_ci_has_more(tc, &ci) && lengthu > 0) {
             MVMCodepoint ord = MVM_string_ci_get_codepoint(tc, &ci);
+            lengthu--;
             if (i == result_alloc) {
                 result_alloc += 8;
                 result = MVM_realloc(result, result_alloc + 1);
and get six fails in t/spec/S15-nfg/crlf-encoding.t.
not ok 9 - CRLF encodes to 2 bytes (ascii)
# Failed test 'CRLF encodes to 2 bytes (ascii)'
# at t/spec/S15-nfg/crlf-encoding.t line 10
# expected: '2'
#      got: '1'

not ok 11 - second byte is correct (ascii)
# Failed test 'second byte is correct (ascii)'
# at t/spec/S15-nfg/crlf-encoding.t line 12
# expected: '10'
#      got: (Failure)

not ok 13 - decoding it gives back the correct grapheme (ascii)
# Failed test 'decoding it gives back the correct grapheme (ascii)'
# at t/spec/S15-nfg/crlf-encoding.t line 16
# expected: ""\r\n""
#      got: ""\r""
not ok 14 - Wrote file of correct length (ascii)
# Failed test 'Wrote file of correct length (ascii)'
# at t/spec/S15-nfg/crlf-encoding.t line 22
# expected: '12'
#      got: '10'
not ok 15 - Read file and got expected number of chars (ascii)
# Failed test 'Read file and got expected number of chars (ascii)'
# at t/spec/S15-nfg/crlf-encoding.t line 27
# expected: '10'
#      got: '9'
not ok 16 - Chars read from file were correct (ascii)
# Failed test 'Chars read from file were correct (ascii)'
# at t/spec/S15-nfg/crlf-encoding.t line 28
# expected: ""goat\r\nboat\r\n""
#      got: ""goat\r\nboat""",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1600,2021-11-13T22:24:21Z,,2022-01-20T14:38:23Z,OPEN,False,25,3,1,https://github.com/MasterDuke17,Fix MVM_string_ascii_encode_substr to use given offset value,2,[],https://github.com/MoarVM/MoarVM/pull/1600,https://github.com/jnthn,4,https://github.com/MoarVM/MoarVM/pull/1600#issuecomment-968799621,"Since 6eaf6aa, any value passed in
start is not used to offset into the string.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","@MasterDuke17 Indeed, because the units of lengthu are graphemes, but we iterate codepoints. It seems that actually none of the other encoders really pay attention to length either, though, which makes me wonder why we have it...",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1600,2021-11-13T22:24:21Z,,2022-01-20T14:38:23Z,OPEN,False,25,3,1,https://github.com/MasterDuke17,Fix MVM_string_ascii_encode_substr to use given offset value,2,[],https://github.com/MoarVM/MoarVM/pull/1600,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1600#issuecomment-969377785,"Since 6eaf6aa, any value passed in
start is not used to offset into the string.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","@MasterDuke17 Indeed, because the units of lengthu are graphemes, but we iterate codepoints. It seems that actually none of the other encoders really pay attention to length either, though, which makes me wonder why we have it...

Yeah, not sure how far down this rabbit hole I want to go, but just pushed a potential fix for the grapheme vs codepoint issue (t/spec/S15-nfg/crlf-encoding.t passes, couldn't do a full spectest because I am on battery).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1600,2021-11-13T22:24:21Z,,2022-01-20T14:38:23Z,OPEN,False,25,3,1,https://github.com/MasterDuke17,Fix MVM_string_ascii_encode_substr to use given offset value,2,[],https://github.com/MoarVM/MoarVM/pull/1600,https://github.com/nwc10,6,https://github.com/MoarVM/MoarVM/pull/1600#issuecomment-1017575666,"Since 6eaf6aa, any value passed in
start is not used to offset into the string.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","MVM_string_utf8_encode_substr also fails to implement start and length - it validates that they are in range, but otherwise ignores them.
It's been this way for 7 years, which makes me think that we should simplify the APIs we offer, instead of fixing them. @jnthn - if we want to do that, how do we go about it? What actually depends on the C level APIs marked MVM_PUBLIC?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1601,2021-11-14T20:42:52Z,2021-11-15T11:12:51Z,2022-02-09T21:07:15Z,MERGED,True,1,1,1,https://github.com/niner,Fix JITed return from nested runloops,1,[],https://github.com/MoarVM/MoarVM/pull/1601,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1601,"When a callback frame is completely JIT compiled, including a return_o, we did
not notice that it's time to exit the runloop. MVM_callstack_unwind_frame will
already have set tc->cur_frame to the frame that called the native routine that
in turn ran the callback and returned 0 to signal that the runloop should end.
This 0 got forwarded by MVM_frame_try_return but JIT compiled code does not
look at this return value. Instead the sp_jit_enter op looked at tc->cur_frame
to determine whether to continue the runloop.
Fix by checking the stack top for a nested runloop entry in addition to
checking tc->cur_frame. Ideally JIT compiled code would just look at
MVM_frame_try_return's return value, just like the interpreter, but that will
require some more refactoring. So go with the easy solution for now to fix
the regression.","When a callback frame is completely JIT compiled, including a return_o, we did
not notice that it's time to exit the runloop. MVM_callstack_unwind_frame will
already have set tc->cur_frame to the frame that called the native routine that
in turn ran the callback and returned 0 to signal that the runloop should end.
This 0 got forwarded by MVM_frame_try_return but JIT compiled code does not
look at this return value. Instead the sp_jit_enter op looked at tc->cur_frame
to determine whether to continue the runloop.
Fix by checking the stack top for a nested runloop entry in addition to
checking tc->cur_frame. Ideally JIT compiled code would just look at
MVM_frame_try_return's return value, just like the interpreter, but that will
require some more refactoring. So go with the easy solution for now to fix
the regression.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1604,2021-11-16T02:01:29Z,,2022-01-13T21:13:11Z,OPEN,False,31,1,1,https://github.com/timo,Optimize passing CPointer to nativecall ever so slightly,1,[],https://github.com/MoarVM/MoarVM/pull/1604,https://github.com/timo,1,https://github.com/MoarVM/MoarVM/pull/1604,"We emit an unbox_i operation in a compiled nativecall body in order to
get the pointer value to pass to the native function. Without a spesh
method on the CPointer repr, this would interpret as, and jit into, a
call to CPointer's get_int.
Instead of a call, we just emit a spesh op to do the memory offset and
read for us, which the JIT also likes very much.","We emit an unbox_i operation in a compiled nativecall body in order to
get the pointer value to pass to the native function. Without a spesh
method on the CPointer repr, this would interpret as, and jit into, a
call to CPointer's get_int.
Instead of a call, we just emit a spesh op to do the memory offset and
read for us, which the JIT also likes very much.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1605,2021-11-16T16:51:38Z,2021-11-16T18:21:18Z,2021-11-16T18:21:44Z,MERGED,True,2,2,2,https://github.com/MasterDuke17,Mark nqp::radix as :pure,1,[],https://github.com/MoarVM/MoarVM/pull/1605,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1605,"I suspect this was just overlooked in
ed9db72 (where nqp::radix_I was marked
:pure).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I suspect this was just overlooked in
ed9db72 (where nqp::radix_I was marked
:pure).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1605,2021-11-16T16:51:38Z,2021-11-16T18:21:18Z,2021-11-16T18:21:44Z,MERGED,True,2,2,2,https://github.com/MasterDuke17,Mark nqp::radix as :pure,1,[],https://github.com/MoarVM/MoarVM/pull/1605,https://github.com/lizmat,2,https://github.com/MoarVM/MoarVM/pull/1605#issuecomment-970478759,"I suspect this was just overlooked in
ed9db72 (where nqp::radix_I was marked
:pure).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Apart from correctness, would this make a performance difference somehow?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1605,2021-11-16T16:51:38Z,2021-11-16T18:21:18Z,2021-11-16T18:21:44Z,MERGED,True,2,2,2,https://github.com/MasterDuke17,Mark nqp::radix as :pure,1,[],https://github.com/MoarVM/MoarVM/pull/1605,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1605#issuecomment-970484893,"I suspect this was just overlooked in
ed9db72 (where nqp::radix_I was marked
:pure).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Apart from correctness, would this make a performance difference somehow?

It could, though this is the only one obvious from a quick grep.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1608,2021-11-18T10:50:19Z,,2021-12-07T11:16:55Z,OPEN,False,99,52,17,https://github.com/MasterDuke17,Convert temp allocations into alloca or use FSA,2,[],https://github.com/MoarVM/MoarVM/pull/1608,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1608,"These were all pointed out by heaptrack as sources of temporary
allocations during a Rakudo compile of CORE.c.setting.
Before heaptrack reported 29,995,046 calls to allocation functions and
2,600,772 temporary allocations. After it reports 29,526,794 calls to
allocation functions and 2,442,004 temporary allocations.
Most of these probably don't impact performance all that much, but the
change to parse_int_frac_exp does make a small-but-noticeably-positive
difference when coercing a native str to a native num. my str $a = 100000.rand.Str; my num $b; $b = $a for ^10_000_000; say now - INIT now; say $b reports ~2.17s before and ~2s after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","These were all pointed out by heaptrack as sources of temporary
allocations during a Rakudo compile of CORE.c.setting.
Before heaptrack reported 29,995,046 calls to allocation functions and
2,600,772 temporary allocations. After it reports 29,526,794 calls to
allocation functions and 2,442,004 temporary allocations.
Most of these probably don't impact performance all that much, but the
change to parse_int_frac_exp does make a small-but-noticeably-positive
difference when coercing a native str to a native num. my str $a = 100000.rand.Str; my num $b; $b = $a for ^10_000_000; say now - INIT now; say $b reports ~2.17s before and ~2s after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1609,2021-11-18T19:43:41Z,2021-11-18T19:47:50Z,2022-02-09T21:07:12Z,MERGED,True,2105,1108,44,https://github.com/lizmat,New disp nativecall libffi,35,[],https://github.com/MoarVM/MoarVM/pull/1609,https://github.com/lizmat,1,https://github.com/MoarVM/MoarVM/pull/1609,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1610,2021-11-23T08:55:15Z,2021-12-01T21:01:12Z,2021-12-01T21:01:36Z,MERGED,True,12,6,2,https://github.com/niner,Fix out of bounds read of PHI facts in spesh,1,[],https://github.com/MoarVM/MoarVM/pull/1610,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1610,"During spesh optimization, we remove reads of registers with dead writers from
PHI nodes. It could happen that the PHI node ended up with no registers to read
at all. However the following analysis code assumed that we'd always have at
least 1 register to read from, resulting in an array read out of bounds error
and a variety of failure modes.
Fix by removing a PHI instruction completely after removing the last read
operand. Note that since deleting an instruction also cleans up the usage chain,
we still have to generate a new instruction info with the correct number of
operands before being able to delete the PHI instruction.","During spesh optimization, we remove reads of registers with dead writers from
PHI nodes. It could happen that the PHI node ended up with no registers to read
at all. However the following analysis code assumed that we'd always have at
least 1 register to read from, resulting in an array read out of bounds error
and a variety of failure modes.
Fix by removing a PHI instruction completely after removing the last read
operand. Note that since deleting an instruction also cleans up the usage chain,
we still have to generate a new instruction info with the correct number of
operands before being able to delete the PHI instruction.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1611,2021-11-25T11:01:28Z,2021-12-04T09:20:29Z,2022-02-09T21:07:09Z,MERGED,True,196,91,5,https://github.com/niner,Fix various callstack region record related failures,4,[],https://github.com/MoarVM/MoarVM/pull/1611,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1611,"In several places we could encounter a callstack region record while expecting something else like a frame record.
These issues were uncovered by setting MVM_CALLSTACK_DEFAULT_REGION_SIZE to 72 (the lowest legal value without breaking valid code).
With these fixes, not even forcing allocation of a new region on every record allocation unearths any new failures (besides excessive memory usage).","In several places we could encounter a callstack region record while expecting something else like a frame record.
These issues were uncovered by setting MVM_CALLSTACK_DEFAULT_REGION_SIZE to 72 (the lowest legal value without breaking valid code).
With these fixes, not even forcing allocation of a new region on every record allocation unearths any new failures (besides excessive memory usage).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1611,2021-11-25T11:01:28Z,2021-12-04T09:20:29Z,2022-02-09T21:07:09Z,MERGED,True,196,91,5,https://github.com/niner,Fix various callstack region record related failures,4,[],https://github.com/MoarVM/MoarVM/pull/1611,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1611#issuecomment-980593029,"In several places we could encounter a callstack region record while expecting something else like a frame record.
These issues were uncovered by setting MVM_CALLSTACK_DEFAULT_REGION_SIZE to 72 (the lowest legal value without breaking valid code).
With these fixes, not even forcing allocation of a new region on every record allocation unearths any new failures (besides excessive memory usage).",That one CI failure seems unrelated. It's 15-gh_1202.t again.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1612,2021-11-27T13:05:37Z,2021-12-04T09:01:19Z,2021-12-04T09:01:19Z,CLOSED,False,14,0,1,https://github.com/niner,Fix uninitialized register after PEA and inlining,1,[],https://github.com/MoarVM/MoarVM/pull/1612,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1612,"The register in question should have been written to by a PHI node and carried
the appropriate deopt usage markers. The other side of the PHI (just one
version) didn't. So PEA optimized away the writer.
Fix by copying the dopt_users from the PHIs target to the PHI's sources when
rewriting returns. This way PEA knows that it has to keep the writer alive.
I don't know if this is an appropriate fix for this issue. An alternative could be to
teach PEA to look through PHI nodes. But PEA is a lot more complicated and I'm
not sure enough that it's worth the time spent in the learning curve to fix it there.","The register in question should have been written to by a PHI node and carried
the appropriate deopt usage markers. The other side of the PHI (just one
version) didn't. So PEA optimized away the writer.
Fix by copying the dopt_users from the PHIs target to the PHI's sources when
rewriting returns. This way PEA knows that it has to keep the writer alive.
I don't know if this is an appropriate fix for this issue. An alternative could be to
teach PEA to look through PHI nodes. But PEA is a lot more complicated and I'm
not sure enough that it's worth the time spent in the learning curve to fix it there.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1612,2021-11-27T13:05:37Z,2021-12-04T09:01:19Z,2021-12-04T09:01:19Z,CLOSED,False,14,0,1,https://github.com/niner,Fix uninitialized register after PEA and inlining,1,[],https://github.com/MoarVM/MoarVM/pull/1612,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1612#issuecomment-985994653,"The register in question should have been written to by a PHI node and carried
the appropriate deopt usage markers. The other side of the PHI (just one
version) didn't. So PEA optimized away the writer.
Fix by copying the dopt_users from the PHIs target to the PHI's sources when
rewriting returns. This way PEA knows that it has to keep the writer alive.
I don't know if this is an appropriate fix for this issue. An alternative could be to
teach PEA to look through PHI nodes. But PEA is a lot more complicated and I'm
not sure enough that it's worth the time spent in the learning curve to fix it there.",I extracted a function like suggested and pushed the fix to master. Unfortunately I only re-read your comment after pushing and missed that the function should live in usages.c :/,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1617,2021-12-04T21:25:51Z,2021-12-07T10:05:31Z,2021-12-07T10:06:04Z,MERGED,True,32,40,2,https://github.com/MasterDuke17,Alloca the nativecall args that we can,1,[],https://github.com/MoarVM/MoarVM/pull/1617,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1617,"The memory for CPPStructs is passed on, so it has to be malloced.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","The memory for CPPStructs is passed on, so it has to be malloced.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1618,2021-12-09T14:25:12Z,2021-12-24T19:27:02Z,2022-01-12T17:38:47Z,MERGED,True,58,36,1,https://github.com/MasterDuke17,Use faster itoa implementation,1,[],https://github.com/MoarVM/MoarVM/pull/1618,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1618,"On my system this version consistently was faster than the existing one
when running the benchmark from https://github.com/miloyip/itoa-benchmark
This was also still the case in a trivial benchmark of NQP and Raku
code. For example,
MVM_SPESH_BLOCKING=1 ./nqp-m -e 'my str $s; my int $i := 0; my $n := nqp::time; while $i++ < 10_000_000 { $s := $i }; say(nqp::div_n(nqp::time - $n, 1000000000e0)); say($s)'
reports ~0.56 before and ~0.43 after. Using callgrind (though just up
to 1_000_000) I see ~958,400,000 instructions before and ~873,700,000
instructions after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","On my system this version consistently was faster than the existing one
when running the benchmark from https://github.com/miloyip/itoa-benchmark
This was also still the case in a trivial benchmark of NQP and Raku
code. For example,
MVM_SPESH_BLOCKING=1 ./nqp-m -e 'my str $s; my int $i := 0; my $n := nqp::time; while $i++ < 10_000_000 { $s := $i }; say(nqp::div_n(nqp::time - $n, 1000000000e0)); say($s)'
reports ~0.56 before and ~0.43 after. Using callgrind (though just up
to 1_000_000) I see ~958,400,000 instructions before and ~873,700,000
instructions after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,"{'THUMBS_UP': ['https://github.com/zhuomingliang'], 'ROCKET': ['https://github.com/zhuomingliang']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1618,2021-12-09T14:25:12Z,2021-12-24T19:27:02Z,2022-01-12T17:38:47Z,MERGED,True,58,36,1,https://github.com/MasterDuke17,Use faster itoa implementation,1,[],https://github.com/MoarVM/MoarVM/pull/1618,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1618#issuecomment-991583589,"On my system this version consistently was faster than the existing one
when running the benchmark from https://github.com/miloyip/itoa-benchmark
This was also still the case in a trivial benchmark of NQP and Raku
code. For example,
MVM_SPESH_BLOCKING=1 ./nqp-m -e 'my str $s; my int $i := 0; my $n := nqp::time; while $i++ < 10_000_000 { $s := $i }; say(nqp::div_n(nqp::time - $n, 1000000000e0)); say($s)'
reports ~0.56 before and ~0.43 after. Using callgrind (though just up
to 1_000_000) I see ~958,400,000 instructions before and ~873,700,000
instructions after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I built it on ppc64 (so big endian) and arm (ie 32 bit CPU) and everything still works. So there weren't any bad assumptions about x86_64 hidden in that code. (There might be bad assumptions about Debian in the code - I've heard rumours that other OSes exist, but I didn't investigate further :-))
I've looked at the C code. I can't say that I understand it - either exactly how it works, or why it should be faster. But it seems to be well tested upstream, so I'm assuming that it's good and doesn't have any strange corner case bugs - at least not more than anyone else's clever approach.
I did wonder whether even with static functions whether the C compiler can spot all possible optimisations. Are you in a position to easily benchmark whether changing the functions to const char * changes anything?
(But if that's not easy, don't worry about it. If it is, then I think it probably should be a distinct commit, as it's not strictly something needed to convert the original author's C++ code to C)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1618,2021-12-09T14:25:12Z,2021-12-24T19:27:02Z,2022-01-12T17:38:47Z,MERGED,True,58,36,1,https://github.com/MasterDuke17,Use faster itoa implementation,1,[],https://github.com/MoarVM/MoarVM/pull/1618,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1618#issuecomment-991764709,"On my system this version consistently was faster than the existing one
when running the benchmark from https://github.com/miloyip/itoa-benchmark
This was also still the case in a trivial benchmark of NQP and Raku
code. For example,
MVM_SPESH_BLOCKING=1 ./nqp-m -e 'my str $s; my int $i := 0; my $n := nqp::time; while $i++ < 10_000_000 { $s := $i }; say(nqp::div_n(nqp::time - $n, 1000000000e0)); say($s)'
reports ~0.56 before and ~0.43 after. Using callgrind (though just up
to 1_000_000) I see ~958,400,000 instructions before and ~873,700,000
instructions after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I've looked at the C code. I can't say that I understand it - either exactly how it works, or why it should be faster.

The version here https://github.com/jeaiii/itoa/blob/main/itoa/to_text_from_integer.h has some more comments and explanation. The version I copied https://github.com/jeaiii/itoa/blob/main/itoa/itoa_jeaiii.cpp (because it was closer to what was in the benchmark repo) does also, I just didn't copy them for some reason. I only tried the 1-char-at-a-time version, because there was a comment somewhere that the 2-char-at-a-time version didn't work on 32-bit and/or big endian systems. However, I don't see that comment now, maybe it was in the older version used in the benchmark repo? I don't have access to big endian (or easy access to 32-bit), if you're curious you could try these https://github.com/jeaiii/itoa/blob/main/itoa/itoa_jeaiii.cpp#L60-L83 defines instead.

Are you in a position to easily benchmark whether changing the functions to const char * changes anything?

Assuming you mean the function return values, I just made that change and tried my above example with callgrind, but didn't notice any difference.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1618,2021-12-09T14:25:12Z,2021-12-24T19:27:02Z,2022-01-12T17:38:47Z,MERGED,True,58,36,1,https://github.com/MasterDuke17,Use faster itoa implementation,1,[],https://github.com/MoarVM/MoarVM/pull/1618,https://github.com/jeaiii,4,https://github.com/MoarVM/MoarVM/pull/1618#issuecomment-1011293365,"On my system this version consistently was faster than the existing one
when running the benchmark from https://github.com/miloyip/itoa-benchmark
This was also still the case in a trivial benchmark of NQP and Raku
code. For example,
MVM_SPESH_BLOCKING=1 ./nqp-m -e 'my str $s; my int $i := 0; my $n := nqp::time; while $i++ < 10_000_000 { $s := $i }; say(nqp::div_n(nqp::time - $n, 1000000000e0)); say($s)'
reports ~0.56 before and ~0.43 after. Using callgrind (though just up
to 1_000_000) I see ~958,400,000 instructions before and ~873,700,000
instructions after.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","2 chars at a time should work as far as a know. If there is a system where it doesn't work, I'll help make it work.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1619,2021-12-14T20:56:07Z,2022-01-03T21:01:10Z,2022-01-03T21:01:12Z,MERGED,True,23,35,2,https://github.com/MasterDuke17,Change nqp::radix(_I)? to return # chars converted,1,[],https://github.com/MoarVM/MoarVM/pull/1619,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1619,"Instead of radix ** # chars converted. Most uses of the radix ops don't
need that value, so this saves the multiplications in the common case
and the uses that do need it can to the exponentiation themselves.
NQP and Rakudo PRs to adapt to this change are forthcoming.","Instead of radix ** # chars converted. Most uses of the radix ops don't
need that value, so this saves the multiplications in the common case
and the uses that do need it can to the exponentiation themselves.
NQP and Rakudo PRs to adapt to this change are forthcoming.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1620,2021-12-16T19:19:23Z,2021-12-18T08:56:19Z,2022-02-09T21:07:07Z,MERGED,True,35,24,3,https://github.com/nwc10,Deserialize empty hashes robustly,3,['BLOCKER'],https://github.com/MoarVM/MoarVM/pull/1620,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1620,"Fixes a bug whereby we wrongly hit an assertion failure if attempting to iterate an empty hash that had been serialized/deserialized. This was recently discovered because it broke the build of LibXML. However, the bug has been present for months, so it is totally unclear how it was only just encountered. (Other than ""assertions default to disabled"", and the code path beyond the assertion would still give correct results)
Also optimise the hash memory allocation when deserializing an empty hash, and the code executed when serializing it.","Fixes a bug whereby we wrongly hit an assertion failure if attempting to iterate an empty hash that had been serialized/deserialized. This was recently discovered because it broke the build of LibXML. However, the bug has been present for months, so it is totally unclear how it was only just encountered. (Other than ""assertions default to disabled"", and the code path beyond the assertion would still give correct results)
Also optimise the hash memory allocation when deserializing an empty hash, and the code executed when serializing it.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1622,2021-12-19T15:48:06Z,2021-12-22T17:46:18Z,2022-02-09T21:07:03Z,MERGED,True,11,1,3,https://github.com/niner,Fix segfault with void native calls,2,[],https://github.com/MoarVM/MoarVM/pull/1622,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1622,This PR fixes two situations where calls to native functions without return values could lead to uninitialized registers getting read.,This PR fixes two situations where calls to native functions without return values could lead to uninitialized registers getting read.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1624,2021-12-20T20:14:30Z,2021-12-22T17:46:24Z,2022-02-09T21:07:00Z,MERGED,True,27,12,1,https://github.com/niner,Fix possible access to fromspace when autoboxing return values,1,[],https://github.com/MoarVM/MoarVM/pull/1624,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1624,"If the target frame (e.g. tc->cur_frame) is a heap frame that lives in the
nursery, the return value is a native value (e.g. return_i or a native call),
the caller expects an object and boxing happens to trigger a GC run, the
target frame could be moved before we dereference the target pointer to get
the return_value register. This would lead to a segfault with GC_DEBUG 3.
Fix by dereferencing target first instead of having the autobox(_int) macros
doing it after boxing.
Fixes GH #1621","If the target frame (e.g. tc->cur_frame) is a heap frame that lives in the
nursery, the return value is a native value (e.g. return_i or a native call),
the caller expects an object and boxing happens to trigger a GC run, the
target frame could be moved before we dereference the target pointer to get
the return_value register. This would lead to a segfault with GC_DEBUG 3.
Fix by dereferencing target first instead of having the autobox(_int) macros
doing it after boxing.
Fixes GH #1621",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1625,2021-12-23T16:56:24Z,2021-12-23T18:02:21Z,2021-12-23T18:02:21Z,MERGED,True,67,1,2,https://github.com/jdv,2021.12 release,2,[],https://github.com/MoarVM/MoarVM/pull/1625,https://github.com/jdv,1,https://github.com/MoarVM/MoarVM/pull/1625,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1627,2021-12-25T11:34:20Z,2022-01-11T15:01:15Z,2022-02-09T21:06:56Z,MERGED,True,20,4,1,https://github.com/niner,Fix speshed native calls with rw args assigning into wrong target,1,[],https://github.com/MoarVM/MoarVM/pull/1627,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1627,"For rw args of native calls we emit appropriate assign_i instructions
after the call to write back the native values from the argument
registers to the NativeRef. However the register holding the NativeRef
will already have been released at the callsite (as for non-speshed
calls writing back is handled by MVM_nativecall_dispatch). If one of the
argument registers was also used for the native routine's return value,
the assign_i will try to assign into the return value object instead of
the arg NativeRef.
Fix by saving the NativeRef object into a temporary register before the
call and using this register for the assign_i instruction.
Fixes rakudo issue #4685 ""Cannot assign to an immutable value"" in
raku -MCurlie -e 'my $c = Curlie.new; $c.get: ""https://httpbin.org/get"" for ^400'","For rw args of native calls we emit appropriate assign_i instructions
after the call to write back the native values from the argument
registers to the NativeRef. However the register holding the NativeRef
will already have been released at the callsite (as for non-speshed
calls writing back is handled by MVM_nativecall_dispatch). If one of the
argument registers was also used for the native routine's return value,
the assign_i will try to assign into the return value object instead of
the arg NativeRef.
Fix by saving the NativeRef object into a temporary register before the
call and using this register for the assign_i instruction.
Fixes rakudo issue #4685 ""Cannot assign to an immutable value"" in
raku -MCurlie -e 'my $c = Curlie.new; $c.get: ""https://httpbin.org/get"" for ^400'",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1629,2022-01-01T09:18:43Z,2022-01-07T17:02:15Z,2022-01-07T17:02:15Z,CLOSED,False,164,159,6,https://github.com/niner,Remove callsite flat named flag,2,[],https://github.com/MoarVM/MoarVM/pull/1629,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1629,"The flag is superseeded by the combination of MVM_CALLSITE_ARG_FLAT and
MVM_CALLSITE_ARG_NAMED. Freeing it up, so we have a flag available for
unsigned integers.","The flag is superseeded by the combination of MVM_CALLSITE_ARG_FLAT and
MVM_CALLSITE_ARG_NAMED. Freeing it up, so we have a flag available for
unsigned integers.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1629,2022-01-01T09:18:43Z,2022-01-07T17:02:15Z,2022-01-07T17:02:15Z,CLOSED,False,164,159,6,https://github.com/niner,Remove callsite flat named flag,2,[],https://github.com/MoarVM/MoarVM/pull/1629,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1629#issuecomment-1003744838,"The flag is superseeded by the combination of MVM_CALLSITE_ARG_FLAT and
MVM_CALLSITE_ARG_NAMED. Freeing it up, so we have a flag available for
unsigned integers.","CI failures are to be expected as the branch requires appropriate changes in NQP. Since these changes include a rebootstrap, I'd like to merge #1631 before this PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1629,2022-01-01T09:18:43Z,2022-01-07T17:02:15Z,2022-01-07T17:02:15Z,CLOSED,False,164,159,6,https://github.com/niner,Remove callsite flat named flag,2,[],https://github.com/MoarVM/MoarVM/pull/1629,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1629#issuecomment-1007572794,"The flag is superseeded by the combination of MVM_CALLSITE_ARG_FLAT and
MVM_CALLSITE_ARG_NAMED. Freeing it up, so we have a flag available for
unsigned integers.","Manually rebased, rebootstrapped and merged. Therefore closing the PR.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1630,2022-01-02T14:23:20Z,2022-01-10T13:26:23Z,2022-02-09T21:06:54Z,MERGED,True,17,7,1,https://github.com/niner,Fix possible access to fromspace after deopt materialization,1,[],https://github.com/MoarVM/MoarVM/pull/1630,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1630,"We stored the newly allocated objects we create during materialization in an
array, for future reference so we could store the same objects into multiple
target registers if required. Allocating these objects however could trigger
a GC run which then missed the pointers in the materialized array. This would
then lead to such outdated pointers getting written to frame registers.
Fix by not storing object pointers in the materialized array. Instead store
the index of the register that already holds a pointer to the desired object.
Since frame registers are always updated by the GC, it's safe to read from
them.
Fixes GH #1628","We stored the newly allocated objects we create during materialization in an
array, for future reference so we could store the same objects into multiple
target registers if required. Allocating these objects however could trigger
a GC run which then missed the pointers in the materialized array. This would
then lead to such outdated pointers getting written to frame registers.
Fix by not storing object pointers in the materialized array. Instead store
the index of the register that already holds a pointer to the desired object.
Since frame registers are always updated by the GC, it's safe to read from
them.
Fixes GH #1628",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1631,2022-01-02T16:44:25Z,2022-01-06T14:56:05Z,2022-01-06T14:56:05Z,CLOSED,False,624,171,20,https://github.com/niner,New unsigned ops,13,[],https://github.com/MoarVM/MoarVM/pull/1631,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1631,"This lays the foundation of properly supporting unsigned native integers. These are all the changes of the broader work that can be merged without requiring any adjustments in NQP or Rakudo. They are split off the main branch so they will already be in place when the inevitable rebootstrap will happen. This should reduce the number of required rebootstraps.
This is mostly new unsigned variants of existing integer ops, but also the introduction of a uint_box_type and a syscall for late setting of HLL config keys (currently only supporting the uint_box_type. The syscall helps avoiding bootstrapping issues in Rakudo.","This lays the foundation of properly supporting unsigned native integers. These are all the changes of the broader work that can be merged without requiring any adjustments in NQP or Rakudo. They are split off the main branch so they will already be in place when the inevitable rebootstrap will happen. This should reduce the number of required rebootstraps.
This is mostly new unsigned variants of existing integer ops, but also the introduction of a uint_box_type and a syscall for late setting of HLL config keys (currently only supporting the uint_box_type. The syscall helps avoiding bootstrapping issues in Rakudo.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1631,2022-01-02T16:44:25Z,2022-01-06T14:56:05Z,2022-01-06T14:56:05Z,CLOSED,False,624,171,20,https://github.com/niner,New unsigned ops,13,[],https://github.com/MoarVM/MoarVM/pull/1631,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1631#issuecomment-1004281959,"This lays the foundation of properly supporting unsigned native integers. These are all the changes of the broader work that can be merged without requiring any adjustments in NQP or Rakudo. They are split off the main branch so they will already be in place when the inevitable rebootstrap will happen. This should reduce the number of required rebootstraps.
This is mostly new unsigned variants of existing integer ops, but also the introduction of a uint_box_type and a syscall for late setting of HLL config keys (currently only supporting the uint_box_type. The syscall helps avoiding bootstrapping issues in Rakudo.","Thanks for the great suggestions! I squashed some commits (introducing and using some new internal API), fixed the issues pointed out and added FIXME comments for where we're still missing some _u functions. I've split the explanation for why between comments and commit messages.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1631,2022-01-02T16:44:25Z,2022-01-06T14:56:05Z,2022-01-06T14:56:05Z,CLOSED,False,624,171,20,https://github.com/niner,New unsigned ops,13,[],https://github.com/MoarVM/MoarVM/pull/1631,https://github.com/niner,3,https://github.com/MoarVM/MoarVM/pull/1631#issuecomment-1006654814,"This lays the foundation of properly supporting unsigned native integers. These are all the changes of the broader work that can be merged without requiring any adjustments in NQP or Rakudo. They are split off the main branch so they will already be in place when the inevitable rebootstrap will happen. This should reduce the number of required rebootstraps.
This is mostly new unsigned variants of existing integer ops, but also the introduction of a uint_box_type and a syscall for late setting of HLL config keys (currently only supporting the uint_box_type. The syscall helps avoiding bootstrapping issues in Rakudo.",Rebased the commits and merged manually. Thanks for the reviews!,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1632,2022-01-03T14:59:14Z,2022-01-04T09:35:40Z,2022-01-04T09:35:41Z,MERGED,True,1,0,1,https://github.com/MasterDuke17,Ignore untracked changes in the ryu submodule,1,[],https://github.com/MoarVM/MoarVM/pull/1632,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1632,"This stops the modified:   3rdparty/ryu (untracked content) message
from showing up in a git status in the MoarVM repo after it's built.
An alternative would be to add ryu/ds2.o to 3rdparty/ryu/.gitignore,
but that would require adding a commit to the submodule instead.","This stops the modified:   3rdparty/ryu (untracked content) message
from showing up in a git status in the MoarVM repo after it's built.
An alternative would be to add ryu/ds2.o to 3rdparty/ryu/.gitignore,
but that would require adding a commit to the submodule instead.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1633,2022-01-04T08:19:07Z,2022-01-04T09:20:00Z,2022-01-04T09:20:02Z,MERGED,True,3,6,1,https://github.com/MasterDuke17,Simplify MVM_string_utf8_encode_C_string,1,[],https://github.com/MoarVM/MoarVM/pull/1633,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1633,"By just reallocing the result of MVM_string_utf8_encode and sticking a
NULL on the end of it instead of mallocing a new larger string and
memcpying into it.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","By just reallocing the result of MVM_string_utf8_encode and sticking a
NULL on the end of it instead of mallocing a new larger string and
memcpying into it.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1634,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1005596900,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","(So far)
MoarVM build fails on a Raspberry Pi with
gcc -o moar -O2 -DNDEBUG -g3 -Wl,-rpath,""//home/nick/Sandpit/moar-O2/lib""  src/main.o -L. -lmoar
/usr/bin/ld: ./libmoar.so: undefined reference to `__atomic_store_8'
/usr/bin/ld: ./libmoar.so: undefined reference to `__atomic_load_8'
/usr/bin/ld: ./libmoar.so: undefined reference to `__atomic_compare_exchange_8'
/usr/bin/ld: ./libmoar.so: undefined reference to `__atomic_fetch_add_8'
collect2: error: ld returned 1 exit status
make: *** [Makefile:652: moar] Error 1

(have not investigated this yes, but as that's gcc (Raspbian 8.3.0-6+rpi1) 8.3.0 so relatively current gcc on what I thought was a sane Debian derivative Linux, I'm a bit troubled that more esoteric systems are going to be pain. Annoyingly, 2 of the best machines in the gcc compile farm are offline as of 3 days ago)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1005601738,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Huh, there are people commenting on issues (e.g., microsoft/mimalloc#495) saying they've successfully built on Raspberry Pi, but with some build flags added. I'll see if I can figure out how to add them.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1005602019,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","The (newish) big ending PPC system is one that is down. An older PPC system running CentOS:
In file included from 3rdparty/mimalloc/include/mimalloc-types.h:13:0,
                 from 3rdparty/mimalloc/include/mimalloc-internal.h:11,
                 from 3rdparty/mimalloc/src/static.c:17:
3rdparty/mimalloc/include/mimalloc-atomic.h:34:23: fatal error: stdatomic.h: No such file or directory
 #include <stdatomic.h>
                       ^

This is gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)
(Meanwhile Sparc linux is somewhere in NQP)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/MasterDuke17,5,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1005605687,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","An older PPC system running CentOS:
In file included from 3rdparty/mimalloc/include/mimalloc-types.h:13:0,
                 from 3rdparty/mimalloc/include/mimalloc-internal.h:11,
                 from 3rdparty/mimalloc/src/static.c:17:
3rdparty/mimalloc/include/mimalloc-atomic.h:34:23: fatal error: stdatomic.h: No such file or directory
 #include <stdatomic.h>
                       ^

This is gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)

Does the suggestion in cockroachdb/c-jemalloc#8 (comment) work?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/nwc10,6,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1005613216,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Does the suggestion in cockroachdb/c-jemalloc#8 (comment) work?

I am not root. I can't install a newer gcc (at least not without building from source, and any dependencies from source)
(The very slow MIPS systems also fails due to lack of stdatomic.h - it has gcc (Debian 4.6.3-14) 4.6.3)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/nwc10,7,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1006085797,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Also I learn

<stdatomic.h> is an optional C11 feature - we can't strictly rely on it ever being present. Although unlike Variable Length Arrays, I'm not aware of a compiler that has refused to ever implement it
mimalloc relies on a correction to the C11 spec.

With a version of clang which I infer is strictly conformant with the original C11 spec:
In file included from 3rdparty/mimalloc/src/static.c:32:
3rdparty/mimalloc/src/alloc.c:488:24: error: address argument to atomic operation must be a pointer to non-const _Atomic type ('const _Atomic(mi_threadid_t) *' invalid)
  if (mi_likely(tid == mi_atomic_load_relaxed(&segment->thread_id) && page->flags.full_aligned == 0)) {  // the thread id matches and it is not a full page, nor has aligned blocks
                       ^                      ~~~~~~~~~~~~~~~~~~~
3rdparty/mimalloc/include/mimalloc-atomic.h:47:50: note: expanded from macro 'mi_atomic_load_relaxed'
#define mi_atomic_load_relaxed(p)                mi_atomic(load_explicit)(p,mi_memory_order(relaxed))
                                                 ^                        ~
3rdparty/mimalloc/include/mimalloc-atomic.h:35:33: note: expanded from macro 'mi_atomic'
#define  mi_atomic(name)        atomic_##name
                                ^
<scratch space>:43:1: note: expanded from here
atomic_load_explicit
^
/usr/lib/llvm-7/lib/clang/7.0.1/include/stdatomic.h:135:30: note: expanded from macro 'atomic_load_explicit'
#define atomic_load_explicit __c11_atomic_load
                             ^
3rdparty/mimalloc/include/mimalloc-internal.h:161:46: note: expanded from macro 'mi_likely'
#define mi_likely(x)       __builtin_expect((x),1)
                                             ^
1 error generated.

Given

how small the code change from (regular) malloc to mimalloc is
how many ways there are for this to break that we've already found

I feel we have to instead do this conditionally (on good enough C11 atomics support). (I've run out of time to do this tonight. Tomorrow is another day)
However, if (also) we figure out that mimalloc is faster than the FSA, then I think that the correct speed/complexity trade off is to remove the code for the FSA, so that we effectively have

has good enough C11 atomics support -- fast and clean
doesn't have C11 atomics support -- slower and clean

and not prioritise eeking out extra speed on ""Less Than Awesome"" platforms, on the assumption that most of our userbase is currentish x86_64 or aarch64.
ie optimise for platforms that support mimalloc.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/MasterDuke17,8,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1006161981,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Many thanks for the testing and additional work on the probing, this is an area far outside my expertise, so any help is very much appreciated.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/nwc10,9,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1007318094,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I've created #1638 which makes mimalloc optional (and the default)
It's >90% your hard work. I didn't fiddle with git (or github extensions) to try to attribute commits to multiple people - I left things with what CLI git default to. I think that commit 672750e is mostly your code, but an edited commit message. Commit c496e88 is half things you hit and fixed, and half similar things I found by inspection, inspired by what you'd done.
I (obviously) think that we should go with the #1638 approach instead of this PR. Hence - we can close this PR?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/MasterDuke17,10,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1007327879,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Awesome! Nice catches in c496e88
<c496e88>,
however I'm not 100% sure that the
c496e88#diff-a3fdef47716adb53ef443f57bb5c40a93088821f0bf8da1e191d39925a32d738R264
change is correct. Since that is only ever populated with string literals
(e.g., via `MVM_telemetry_interval_start(tc, ""spesh worker consuming a
log"");`), and we're not dynamically overriding the allocator, I think it
needs to stay as plain `free()`.

Definitely let's close this and go with #1638
<#1638>.
…
On Fri, Jan 7, 2022 at 10:57 AM Nicholas Clark ***@***.***> wrote:
 I've created #1638 <#1638> which
 makes mimalloc optional (and the default)

 It's >90% your hard work. I didn't fiddle with git (or github extensions)
 to try to attribute commits to multiple people - I left things with what
 CLI git default to. I think that commit 672750e
 <672750e>
 is mostly your code, but an edited commit message. Commit c496e88
 <c496e88>
 is half things you hit and fixed, and half similar things I found by
 inspection, inspired by what you'd done.

 I (obviously) think that we should go with the #1638
 <#1638> approach instead of this PR.
 Hence - we can close this PR?

 —
 Reply to this email directly, view it on GitHub
 <#1634 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ACOHYULS2JQCWBBQ4DE55QDUU3BJ7ANCNFSM5LHWHJUA>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.

 You are receiving this because you authored the thread.Message ID:
 ***@***.***>",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/MasterDuke17,11,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1007334210,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","My question about the free in the telemeh code makes me think that the
strndup in the same code (
https://github.com/MoarVM/MoarVM/pull/1638/files#diff-a3fdef47716adb53ef443f57bb5c40a93088821f0bf8da1e191d39925a32d738R206)
should also be unchanged. The other uses of strdup were on MVM_* allocated
strings, but I think the telemeh stuff will still use the system allocator.
…
On Fri, Jan 7, 2022 at 11:13 AM Daniel Green ***@***.***> wrote:
 Awesome! Nice catches in c496e88
 <c496e88>,
 however I'm not 100% sure that the
 c496e88#diff-a3fdef47716adb53ef443f57bb5c40a93088821f0bf8da1e191d39925a32d738R264
 change is correct. Since that is only ever populated with string literals
 (e.g., via `MVM_telemetry_interval_start(tc, ""spesh worker consuming a
 log"");`), and we're not dynamically overriding the allocator, I think it
 needs to stay as plain `free()`.

 Definitely let's close this and go with #1638
 <#1638>.

 On Fri, Jan 7, 2022 at 10:57 AM Nicholas Clark ***@***.***>
 wrote:

> I've created #1638 <#1638> which
> makes mimalloc optional (and the default)
>
> It's >90% your hard work. I didn't fiddle with git (or github extensions)
> to try to attribute commits to multiple people - I left things with what
> CLI git default to. I think that commit 672750e
> <672750e>
> is mostly your code, but an edited commit message. Commit c496e88
> <c496e88>
> is half things you hit and fixed, and half similar things I found by
> inspection, inspired by what you'd done.
>
> I (obviously) think that we should go with the #1638
> <#1638> approach instead of this
> PR. Hence - we can close this PR?
>
> —
> Reply to this email directly, view it on GitHub
> <#1634 (comment)>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/ACOHYULS2JQCWBBQ4DE55QDUU3BJ7ANCNFSM5LHWHJUA>
> .
> Triage notifications on the go with GitHub Mobile for iOS
> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
> or Android
> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.
>
> You are receiving this because you authored the thread.Message ID:
> ***@***.***>
>",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/nwc10,12,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1007692874,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","My question about the free in the telemeh code makes me think that the strndup in the same code ( https://github.com/MoarVM/MoarVM/pull/1638/files#diff-a3fdef47716adb53ef443f57bb5c40a93088821f0bf8da1e191d39925a32d738R206) should also be unchanged. The other uses of strdup were on MVM_* allocated strings, but I think the telemeh stuff will still use the system allocator.

From looking at the code again I come to the same conclusion (hopefully correct) that the memory in question is only ever allocated in telemeh.c by strndup and only ever released by the corresponding free.
So at first I thought that the better choice was to leave these two unchanged.
But subsequently I think instead that, if the above is correct and the allocation/release pair is exclusively the strndup/free only, then it is actually better to change (both) to be MVM_*, even though it looks like code churn, because if we make this change, we eliminate the only remaining call to free in ""our"" codebase. (ie not 3rdparty). And I think that this is good, because it makes it easier to audit that we are consistent in our memory allocation/release.
If we don't change strndup/free then I think we ought to annotate at least one with a comment, mentioning the other. And doing that makes the code less readable than just changing it to MVM_* and being done with it.
I think. It's all a bit subjective.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/MasterDuke17,13,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1007696233,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","From looking at the code again I come to the same conclusion (hopefully correct) that the memory in question is only ever allocated in telemeh.c by strndup and only ever released by the corresponding free.

Ah! I missed that all the frees were for memory that came from the strndup. So yes, I 100% agree with you that we should change both and your PR is correct as-is.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/MasterDuke17,14,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1007696597,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",Closing in favor of #1638,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/niner,15,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1007724975,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","On Freitag, 7. Jänner 2022 20:52:49 CET Nicholas Clark wrote:
 because if we make this change, we eliminate the only
 remaining call to `free` in ""our"" codebase. (ie not `3rdparty`).
I don't see how we will ever be able to do that. NativeCall will always have
cases where we need to malloc and/or free. E.g. when we take ownership over
memory that a library allocated. Even if that's currently not implemented, it
will have to be at some point.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1634,2022-01-04T15:22:39Z,2022-01-07T19:58:13Z,2022-01-08T11:28:38Z,CLOSED,False,36,14,13,https://github.com/MasterDuke17,Add mimalloc submodule,4,[],https://github.com/MoarVM/MoarVM/pull/1634,https://github.com/nwc10,16,https://github.com/MoarVM/MoarVM/pull/1634#issuecomment-1007964220,"See #1623 for the motivation.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","I don't see how we will ever be able to do that. NativeCall will always have cases where we need to malloc and/or free. E.g. when we take ownership over memory that a library allocated. Even if that's currently not implemented, it will have to be at some point.

Whoops yes, good point.
Having slept on this, I still think on balance it would be slightly better to change the code in telemeh.c so that we minimise the number of ""places where it's correct to use bare malloc/free. Mostly because everywhere outside of 3rdparty ""ought"" to be commenting about why this memory is malloc/free and not our wrappers.",True,{'THUMBS_UP': ['https://github.com/MasterDuke17']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1635,2022-01-06T09:30:46Z,2022-01-06T10:08:08Z,2022-01-06T10:08:09Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Correctly free memory allocated by libuv,1,[],https://github.com/MoarVM/MoarVM/pull/1635,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1635,"Use the correct libuv function to do it. According to
http://docs.libuv.org/en/v1.x/fs.html#c.uv_fs_req_cleanup ""Cleanup request.
Must be called after a request is finished to deallocate any memory libuv
might have allocated.""","Use the correct libuv function to do it. According to
http://docs.libuv.org/en/v1.x/fs.html#c.uv_fs_req_cleanup ""Cleanup request.
Must be called after a request is finished to deallocate any memory libuv
might have allocated.""",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1635,2022-01-06T09:30:46Z,2022-01-06T10:08:08Z,2022-01-06T10:08:09Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Correctly free memory allocated by libuv,1,[],https://github.com/MoarVM/MoarVM/pull/1635,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1635#issuecomment-1006416284,"Use the correct libuv function to do it. According to
http://docs.libuv.org/en/v1.x/fs.html#c.uv_fs_req_cleanup ""Cleanup request.
Must be called after a request is finished to deallocate any memory libuv
might have allocated.""","Forgot to mention it in the commit message, but I checked the documentation and of the functions that need uv_fs_req_cleanup to be called after them, uv_fs_readlink is the only one we use.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1636,2022-01-06T10:17:20Z,2022-02-15T19:44:22Z,2022-02-15T19:44:22Z,MERGED,True,2,1,2,https://github.com/dogbert17,Update libuv to version 1.43.0,1,[],https://github.com/MoarVM/MoarVM/pull/1636,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1636,Spectest clean under Linux Mint (Ulyana),Spectest clean under Linux Mint (Ulyana),True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1637,2022-01-06T10:21:13Z,2022-01-06T11:17:19Z,2022-01-06T11:17:20Z,MERGED,True,1,3,1,https://github.com/MasterDuke17,Include stdbool.h instead of using our own defines,1,[],https://github.com/MoarVM/MoarVM/pull/1637,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1637,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1638,2022-01-07T10:50:49Z,2022-01-12T09:15:17Z,2022-01-12T09:18:20Z,CLOSED,False,172,16,17,https://github.com/nwc10,"Add mimalloc submodule, and default to mimalloc where possible",8,[],https://github.com/MoarVM/MoarVM/pull/1638,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1638,"Permit building with mimalloc instead of libc malloc
Implement this by statically include mimalloc as a single source. Default to using mimalloc if Configure.pl's probe detects that the compiler provides C11 atomics, otherwise continue to use the C library's malloc as before. Add --no-mimalloc and --mimalloc options to override the automatic behaviour.
Add CI tests for --no-mimalloc. The CI systems have compilers that support atomics, so they now default to mimalloc.
See #1623 for motivation and #1634 for the previous iteration","Permit building with mimalloc instead of libc malloc
Implement this by statically include mimalloc as a single source. Default to using mimalloc if Configure.pl's probe detects that the compiler provides C11 atomics, otherwise continue to use the C library's malloc as before. Add --no-mimalloc and --mimalloc options to override the automatic behaviour.
Add CI tests for --no-mimalloc. The CI systems have compilers that support atomics, so they now default to mimalloc.
See #1623 for motivation and #1634 for the previous iteration",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1638,2022-01-07T10:50:49Z,2022-01-12T09:15:17Z,2022-01-12T09:18:20Z,CLOSED,False,172,16,17,https://github.com/nwc10,"Add mimalloc submodule, and default to mimalloc where possible",8,[],https://github.com/MoarVM/MoarVM/pull/1638,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1638#issuecomment-1007330458,"Permit building with mimalloc instead of libc malloc
Implement this by statically include mimalloc as a single source. Default to using mimalloc if Configure.pl's probe detects that the compiler provides C11 atomics, otherwise continue to use the C library's malloc as before. Add --no-mimalloc and --mimalloc options to override the automatic behaviour.
Add CI tests for --no-mimalloc. The CI systems have compilers that support atomics, so they now default to mimalloc.
See #1623 for motivation and #1634 for the previous iteration","Huh, looks like the probe doesn't find stdatomic.h on Windows?
…
On Fri, Jan 7, 2022 at 10:51 AM Nicholas Clark ***@***.***> wrote:
 Permit building with mimalloc instead of libc malloc

 Implement this by statically include mimalloc as a single source. Default
 to using mimalloc if Configure.pl's probe detects that the compiler
 provides C11 atomics, otherwise continue to use the C library's malloc as
 before. Add --no-mimalloc and --mimalloc options to override the
 automatic behaviour.

 Add CI tests for --no-mimalloc. The CI systems have compilers that
 support atomics, so they now default to mimalloc.

 See #1623 <#1623> for motivation
 and #1634 <#1634> for the previous
 iteration
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #1638
 Commit Summary

    - c496e88
    <c496e88>
    Convert remaining direct calls to `malloc`/`free`/ to the MVM_* wrappers
    - 5d46f54
    <5d46f54>
    Abstract `strdup` and `strndup` as `MVM_strdup`/`MVM_strndup`
    - c20ed26
    <c20ed26>
    Link with BCrypt for mingw
    - 894787c
    <894787c>
    In Configure.pl use a '!' flag to --telemeh to implement --no-telemeh
    - 765ce7e
    <765ce7e>
    Add a Configure.pl probe for working #include <stdatomic.h>
    - c477267
    <c477267>
    Add mimalloc submodule
    - 672750e
    <672750e>
    Permit building with mimalloc instead of libc malloc

 File Changes

 (17 files <https://github.com/MoarVM/MoarVM/pull/1638/files>)

    - *M* .gitmodules
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-fe7afb5c9c916e521401d3fcfb4277d5071798c3baf83baf11d6071742823584>
    (3)
    - *A* 3rdparty/mimalloc
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-12a1f285dfd6eb8c98386c783f44c625dfc06db8fdb6f63fba703b1563f824ef>
    (1)
    - *M* Configure.pl
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-86fb5002d50fced74864782aa7e5bbba8088d56e997ae0db75cc746644896af4>
    (44)
    - *M* LICENSE
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-c693279643b8cd5d248172d9c22cb7cf4ed163a3c98c8a3f69c2717edd3eacb7>
    (1)
    - *M* azure-pipelines.yml
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-7915b9b726a397ae7ba6af7b9703633d21c031ebf21682f3ee7e6a4ec52837a5>
    (12)
    - *M* build/Makefile.in
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-032892f2b40899c7dd66577777bc7d6c0383ec93c6182321453ed306fdfe393d>
    (2)
    - *M* build/config.h.in
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-1b46ce6126d0486e52013da87bf9fb3ab23f89dbeaa93b5269e64a7e3fd719e9>
    (4)
    - *M* build/probe.pm
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-de203bc323b50681208f340eb8ae81a96be027c181ac1e1063b029757e4cd758>
    (63)
    - *M* build/setup.pm
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-ba6609baf53b3f3d02c18be173bbe1fa52739b47523ae83049e43527df92f95c>
    (4)
    - *M* src/6model/bootstrap.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-9efa55509f715a5af15ef7a1d95f8599622ea31328540ec25dca380ba8c36a99>
    (2)
    - *M* src/core/alloc.h
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-960047475d146c94a3474e4ba39b05d94f69c998440582df4886a19750cde011>
    (20)
    - *M* src/disp/program.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-13d89c271f2c8d9f58e5d5043c2d91e98b963c1a5ecfda2a3c783587cf179806>
    (4)
    - *M* src/moar.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-2f58429081863e7f7a6e5fd7c31cc6e40f7717606e45769f3709b9acf75eda03>
    (4)
    - *M* src/moar.h
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-7c458c7a4a4f9096d1e38f454cb00ba0748e97a84370e58d56fd087c7f753763>
    (11)
    - *M* src/profiler/heapsnapshot.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-2c8220ad172a8f7f7357010edc179c3e22529af49d6703c443ed47d4d1bd567f>
    (2)
    - *M* src/profiler/telemeh.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-a3fdef47716adb53ef443f57bb5c40a93088821f0bf8da1e191d39925a32d738>
    (4)
    - *M* tools/release.sh
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-5c05dc4c302e9347cb2e91efd67fe5bf69ab7f93cffe21e8bdf9f99badeb9e4f>
    (2)

 Patch Links:

    - https://github.com/MoarVM/MoarVM/pull/1638.patch
    - https://github.com/MoarVM/MoarVM/pull/1638.diff

 —
 Reply to this email directly, view it on GitHub
 <#1638>, or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ACOHYUNZP55G2R2BDYUTI6DUU3ARRANCNFSM5LOQTLPQ>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.

 You are receiving this because you are subscribed to this thread.Message
 ID: ***@***.***>",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1638,2022-01-07T10:50:49Z,2022-01-12T09:15:17Z,2022-01-12T09:18:20Z,CLOSED,False,172,16,17,https://github.com/nwc10,"Add mimalloc submodule, and default to mimalloc where possible",8,[],https://github.com/MoarVM/MoarVM/pull/1638,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1638#issuecomment-1007336256,"Permit building with mimalloc instead of libc malloc
Implement this by statically include mimalloc as a single source. Default to using mimalloc if Configure.pl's probe detects that the compiler provides C11 atomics, otherwise continue to use the C library's malloc as before. Add --no-mimalloc and --mimalloc options to override the automatic behaviour.
Add CI tests for --no-mimalloc. The CI systems have compilers that support atomics, so they now default to mimalloc.
See #1623 for motivation and #1634 for the previous iteration","Noticed two typos in the description of the new args in Configure.pl.

""we default is to"" -> ""we default to""

""Specify C<--no-mimalloc> to force use of mimalloc"" -> ""Specify
C<--mimalloc> to force use of mimalloc""
…
On Fri, Jan 7, 2022 at 10:51 AM Nicholas Clark ***@***.***> wrote:
 Permit building with mimalloc instead of libc malloc

 Implement this by statically include mimalloc as a single source. Default
 to using mimalloc if Configure.pl's probe detects that the compiler
 provides C11 atomics, otherwise continue to use the C library's malloc as
 before. Add --no-mimalloc and --mimalloc options to override the
 automatic behaviour.

 Add CI tests for --no-mimalloc. The CI systems have compilers that
 support atomics, so they now default to mimalloc.

 See #1623 <#1623> for motivation
 and #1634 <#1634> for the previous
 iteration
 ------------------------------
 You can view, comment on, or merge this pull request online at:

   #1638
 Commit Summary

    - c496e88
    <c496e88>
    Convert remaining direct calls to `malloc`/`free`/ to the MVM_* wrappers
    - 5d46f54
    <5d46f54>
    Abstract `strdup` and `strndup` as `MVM_strdup`/`MVM_strndup`
    - c20ed26
    <c20ed26>
    Link with BCrypt for mingw
    - 894787c
    <894787c>
    In Configure.pl use a '!' flag to --telemeh to implement --no-telemeh
    - 765ce7e
    <765ce7e>
    Add a Configure.pl probe for working #include <stdatomic.h>
    - c477267
    <c477267>
    Add mimalloc submodule
    - 672750e
    <672750e>
    Permit building with mimalloc instead of libc malloc

 File Changes

 (17 files <https://github.com/MoarVM/MoarVM/pull/1638/files>)

    - *M* .gitmodules
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-fe7afb5c9c916e521401d3fcfb4277d5071798c3baf83baf11d6071742823584>
    (3)
    - *A* 3rdparty/mimalloc
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-12a1f285dfd6eb8c98386c783f44c625dfc06db8fdb6f63fba703b1563f824ef>
    (1)
    - *M* Configure.pl
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-86fb5002d50fced74864782aa7e5bbba8088d56e997ae0db75cc746644896af4>
    (44)
    - *M* LICENSE
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-c693279643b8cd5d248172d9c22cb7cf4ed163a3c98c8a3f69c2717edd3eacb7>
    (1)
    - *M* azure-pipelines.yml
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-7915b9b726a397ae7ba6af7b9703633d21c031ebf21682f3ee7e6a4ec52837a5>
    (12)
    - *M* build/Makefile.in
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-032892f2b40899c7dd66577777bc7d6c0383ec93c6182321453ed306fdfe393d>
    (2)
    - *M* build/config.h.in
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-1b46ce6126d0486e52013da87bf9fb3ab23f89dbeaa93b5269e64a7e3fd719e9>
    (4)
    - *M* build/probe.pm
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-de203bc323b50681208f340eb8ae81a96be027c181ac1e1063b029757e4cd758>
    (63)
    - *M* build/setup.pm
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-ba6609baf53b3f3d02c18be173bbe1fa52739b47523ae83049e43527df92f95c>
    (4)
    - *M* src/6model/bootstrap.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-9efa55509f715a5af15ef7a1d95f8599622ea31328540ec25dca380ba8c36a99>
    (2)
    - *M* src/core/alloc.h
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-960047475d146c94a3474e4ba39b05d94f69c998440582df4886a19750cde011>
    (20)
    - *M* src/disp/program.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-13d89c271f2c8d9f58e5d5043c2d91e98b963c1a5ecfda2a3c783587cf179806>
    (4)
    - *M* src/moar.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-2f58429081863e7f7a6e5fd7c31cc6e40f7717606e45769f3709b9acf75eda03>
    (4)
    - *M* src/moar.h
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-7c458c7a4a4f9096d1e38f454cb00ba0748e97a84370e58d56fd087c7f753763>
    (11)
    - *M* src/profiler/heapsnapshot.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-2c8220ad172a8f7f7357010edc179c3e22529af49d6703c443ed47d4d1bd567f>
    (2)
    - *M* src/profiler/telemeh.c
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-a3fdef47716adb53ef443f57bb5c40a93088821f0bf8da1e191d39925a32d738>
    (4)
    - *M* tools/release.sh
    <https://github.com/MoarVM/MoarVM/pull/1638/files#diff-5c05dc4c302e9347cb2e91efd67fe5bf69ab7f93cffe21e8bdf9f99badeb9e4f>
    (2)

 Patch Links:

    - https://github.com/MoarVM/MoarVM/pull/1638.patch
    - https://github.com/MoarVM/MoarVM/pull/1638.diff

 —
 Reply to this email directly, view it on GitHub
 <#1638>, or unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ACOHYUNZP55G2R2BDYUTI6DUU3ARRANCNFSM5LOQTLPQ>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.

 You are receiving this because you are subscribed to this thread.Message
 ID: ***@***.***>",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1638,2022-01-07T10:50:49Z,2022-01-12T09:15:17Z,2022-01-12T09:18:20Z,CLOSED,False,172,16,17,https://github.com/nwc10,"Add mimalloc submodule, and default to mimalloc where possible",8,[],https://github.com/MoarVM/MoarVM/pull/1638,https://github.com/nwc10,4,https://github.com/MoarVM/MoarVM/pull/1638#issuecomment-1007343035,"Permit building with mimalloc instead of libc malloc
Implement this by statically include mimalloc as a single source. Default to using mimalloc if Configure.pl's probe detects that the compiler provides C11 atomics, otherwise continue to use the C library's malloc as before. Add --no-mimalloc and --mimalloc options to override the automatic behaviour.
Add CI tests for --no-mimalloc. The CI systems have compilers that support atomics, so they now default to mimalloc.
See #1623 for motivation and #1634 for the previous iteration","Huh, looks like the probe doesn't find stdatomic.h on Windows?

I don't have access to Win32, so the CI run is the first time this code has encountered it. You spotted a problem faster than I did.
So, .../include/mimalloc-atomic.h
#if defined(__cplusplus)
// Use C++ atomics
#include <atomic>
#define  _Atomic(tp)            std::atomic<tp>
#define  mi_atomic(name)        std::atomic_##name
#define  mi_memory_order(name)  std::memory_order_##name
#elif defined(_MSC_VER)
// Use MSVC C wrapper for C11 atomics
#define  _Atomic(tp)            tp
#define  ATOMIC_VAR_INIT(x)     x
#define  mi_atomic(name)        mi_atomic_##name
#define  mi_memory_order(name)  mi_memory_order_##name
#else
// Use C11 atomics
#include <stdatomic.h>
#define  mi_atomic(name)        atomic_##name
#define  mi_memory_order(name)  memory_order_##name
#endif

Yet again, looks like ""there are standards, and there's what MSVC provides"". So I guess I need to ignore the probe if the compiler is MSVC, and just ""go for it"" with mimalloc.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1638,2022-01-07T10:50:49Z,2022-01-12T09:15:17Z,2022-01-12T09:18:20Z,CLOSED,False,172,16,17,https://github.com/nwc10,"Add mimalloc submodule, and default to mimalloc where possible",8,[],https://github.com/MoarVM/MoarVM/pull/1638,https://github.com/nwc10,5,https://github.com/MoarVM/MoarVM/pull/1638#issuecomment-1007965244,"Permit building with mimalloc instead of libc malloc
Implement this by statically include mimalloc as a single source. Default to using mimalloc if Configure.pl's probe detects that the compiler provides C11 atomics, otherwise continue to use the C library's malloc as before. Add --no-mimalloc and --mimalloc options to override the automatic behaviour.
Add CI tests for --no-mimalloc. The CI systems have compilers that support atomics, so they now default to mimalloc.
See #1623 for motivation and #1634 for the previous iteration","I rebased this, and changed the key in %Config from mimalloc to use_mimalloc
I thought that this key is clearer (long term), and I thought it cleaner to have a revisionist history where it was ""correct"" from the first commit, rather than an extra commit to have to read and think about.
I haven't dug into the CI tests - need to go AFK.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1638,2022-01-07T10:50:49Z,2022-01-12T09:15:17Z,2022-01-12T09:18:20Z,CLOSED,False,172,16,17,https://github.com/nwc10,"Add mimalloc submodule, and default to mimalloc where possible",8,[],https://github.com/MoarVM/MoarVM/pull/1638,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1638#issuecomment-1007987858,"Permit building with mimalloc instead of libc malloc
Implement this by statically include mimalloc as a single source. Default to using mimalloc if Configure.pl's probe detects that the compiler provides C11 atomics, otherwise continue to use the C library's malloc as before. Add --no-mimalloc and --mimalloc options to override the automatic behaviour.
Add CI tests for --no-mimalloc. The CI systems have compilers that support atomics, so they now default to mimalloc.
See #1623 for motivation and #1634 for the previous iteration","I rebased this, and changed the key in %Config from mimalloc to use_mimalloc

I don't care strongly either way, but to play devil's advocate, we have existing dtrace and telemeh flags (i.e., not use_dtrace and use_telemeh).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1638,2022-01-07T10:50:49Z,2022-01-12T09:15:17Z,2022-01-12T09:18:20Z,CLOSED,False,172,16,17,https://github.com/nwc10,"Add mimalloc submodule, and default to mimalloc where possible",8,[],https://github.com/MoarVM/MoarVM/pull/1638,https://github.com/nwc10,7,https://github.com/MoarVM/MoarVM/pull/1638#issuecomment-1009701434,"Permit building with mimalloc instead of libc malloc
Implement this by statically include mimalloc as a single source. Default to using mimalloc if Configure.pl's probe detects that the compiler provides C11 atomics, otherwise continue to use the C library's malloc as before. Add --no-mimalloc and --mimalloc options to override the automatic behaviour.
Add CI tests for --no-mimalloc. The CI systems have compilers that support atomics, so they now default to mimalloc.
See #1623 for motivation and #1634 for the previous iteration","I don't care strongly either way, but to play devil's advocate, we have existing dtrace and telemeh flags (i.e., not use_dtrace and use_telemeh).

Or --use-dtrace ...
The context was that I was working further on what became #1640 and realised that in build/config.h.in (nearly) everything was consistent verb_noun, where verb was pretty descriptive - basically can or has. So ""mimalloc"" is ""yes, right, what about it?"" We have it? (always true - we ship it) We can use it? (no, not necessarily true if we could but chose to disable it) So this configuration variable was ""we have enabled it"" hence ""use"". Readability seemed important here.
I didn't change the comand-line flag - which (somewhat) then increases inconsistency. Except that it would want to be --use-mimalloc not --use_mimalloc and I don't think that our configuration keys or (C macros) can use - in place of _. But I somewhat feel that the command line flags are already a lost cause.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1638,2022-01-07T10:50:49Z,2022-01-12T09:15:17Z,2022-01-12T09:18:20Z,CLOSED,False,172,16,17,https://github.com/nwc10,"Add mimalloc submodule, and default to mimalloc where possible",8,[],https://github.com/MoarVM/MoarVM/pull/1638,https://github.com/MasterDuke17,8,https://github.com/MoarVM/MoarVM/pull/1638#issuecomment-1010822153,"Permit building with mimalloc instead of libc malloc
Implement this by statically include mimalloc as a single source. Default to using mimalloc if Configure.pl's probe detects that the compiler provides C11 atomics, otherwise continue to use the C library's malloc as before. Add --no-mimalloc and --mimalloc options to override the automatic behaviour.
Add CI tests for --no-mimalloc. The CI systems have compilers that support atomics, so they now default to mimalloc.
See #1623 for motivation and #1634 for the previous iteration","I didn't change the comand-line flag - which (somewhat) then increases inconsistency. Except that it would want to be --use-mimalloc not --use_mimalloc and I don't think that our configuration keys or (C macros) can use - in place of _. But I somewhat feel that the command line flags are already a lost cause.

I wouldn't object to changing --dtrace, --telemeh, and --mimalloc to --use-*.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1639,2022-01-09T12:37:18Z,2022-01-11T08:05:08Z,2022-01-11T08:05:09Z,MERGED,True,166,76,19,https://github.com/niner,More preparations for fixing unsigned handling,6,[],https://github.com/MoarVM/MoarVM/pull/1639,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1639,"This PR includes the final round of fixes for unsigned handling that can be split off from the main branch. These commits are independent of changes in the other layers, i.e. they are still compatible with the master branches of the other repositories.
The fixes are mostly about using unsigned data types when handling unsigned data in MAST code, a bit of spesh and preparation for giving unsigneds their own objprimspec (10).","This PR includes the final round of fixes for unsigned handling that can be split off from the main branch. These commits are independent of changes in the other layers, i.e. they are still compatible with the master branches of the other repositories.
The fixes are mostly about using unsigned data types when handling unsigned data in MAST code, a bit of spesh and preparation for giving unsigneds their own objprimspec (10).",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1639,2022-01-09T12:37:18Z,2022-01-11T08:05:08Z,2022-01-11T08:05:09Z,MERGED,True,166,76,19,https://github.com/niner,More preparations for fixing unsigned handling,6,[],https://github.com/MoarVM/MoarVM/pull/1639,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1639#issuecomment-1008812723,"This PR includes the final round of fixes for unsigned handling that can be split off from the main branch. These commits are independent of changes in the other layers, i.e. they are still compatible with the master branches of the other repositories.
The fixes are mostly about using unsigned data types when handling unsigned data in MAST code, a bit of spesh and preparation for giving unsigneds their own objprimspec (10).","Works on ""my"" machine.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1640,2022-01-09T19:49:11Z,2022-01-18T11:38:41Z,2022-01-18T11:38:42Z,CLOSED,False,152,28,13,https://github.com/nwc10,Support using C11 atomics as an alternative libatomic_ops,5,[],https://github.com/MoarVM/MoarVM/pull/1640,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1640,"Add a new Configure.pl flag --c11-atomics that uses C11's <stdatomic.h> for MoarVM's atomic operations instead of the bundled library libatomic_ops.
If using C11 atomics then completely disable building libatomic_ops.
This permits MoarVM to build on architectures which libatomic_ops does not support, as long as they have a current C compiler which implements this optional C11 feature.
With this I can build MoarVM, NQP and Rakudo on the Loongson-3A5000 hardware on the GCC compiler farm. This is a new architecture not supported by libatomic_ops, but with a C compiler supporting C11 atomics.
I think that I have this correct, but I'm ""translating"" from the libatomic_ops APIs and descriptions to what I think are the appropriate C11 APIs and options. I can also (still) build on x86_64, and aarch64. The former is extremely forgiving, but I believe the latter's memory model provides a bit sterner test of correctness. Sadly I don't have access to a DEC Alpha.
Specifically, please check that

My choice of atomic_uintptr_t is appropriate to replace AO_t
I have correctly translated the APIs, particularly MVM_cas
C11 memory_order_seq_cst (generally) and memory_order_relaxed (in src/jit/compile.c) are the correct ""translations"" of libatomic_ops _full and ""nothing"".

This branch is based on mimalloc-optional, not master","Add a new Configure.pl flag --c11-atomics that uses C11's <stdatomic.h> for MoarVM's atomic operations instead of the bundled library libatomic_ops.
If using C11 atomics then completely disable building libatomic_ops.
This permits MoarVM to build on architectures which libatomic_ops does not support, as long as they have a current C compiler which implements this optional C11 feature.
With this I can build MoarVM, NQP and Rakudo on the Loongson-3A5000 hardware on the GCC compiler farm. This is a new architecture not supported by libatomic_ops, but with a C compiler supporting C11 atomics.
I think that I have this correct, but I'm ""translating"" from the libatomic_ops APIs and descriptions to what I think are the appropriate C11 APIs and options. I can also (still) build on x86_64, and aarch64. The former is extremely forgiving, but I believe the latter's memory model provides a bit sterner test of correctness. Sadly I don't have access to a DEC Alpha.
Specifically, please check that

My choice of atomic_uintptr_t is appropriate to replace AO_t
I have correctly translated the APIs, particularly MVM_cas
C11 memory_order_seq_cst (generally) and memory_order_relaxed (in src/jit/compile.c) are the correct ""translations"" of libatomic_ops _full and ""nothing"".

This branch is based on mimalloc-optional, not master",True,{'THUMBS_UP': ['https://github.com/zhuomingliang']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1640,2022-01-09T19:49:11Z,2022-01-18T11:38:41Z,2022-01-18T11:38:42Z,CLOSED,False,152,28,13,https://github.com/nwc10,Support using C11 atomics as an alternative libatomic_ops,5,[],https://github.com/MoarVM/MoarVM/pull/1640,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1640#issuecomment-1008423396,"Add a new Configure.pl flag --c11-atomics that uses C11's <stdatomic.h> for MoarVM's atomic operations instead of the bundled library libatomic_ops.
If using C11 atomics then completely disable building libatomic_ops.
This permits MoarVM to build on architectures which libatomic_ops does not support, as long as they have a current C compiler which implements this optional C11 feature.
With this I can build MoarVM, NQP and Rakudo on the Loongson-3A5000 hardware on the GCC compiler farm. This is a new architecture not supported by libatomic_ops, but with a C compiler supporting C11 atomics.
I think that I have this correct, but I'm ""translating"" from the libatomic_ops APIs and descriptions to what I think are the appropriate C11 APIs and options. I can also (still) build on x86_64, and aarch64. The former is extremely forgiving, but I believe the latter's memory model provides a bit sterner test of correctness. Sadly I don't have access to a DEC Alpha.
Specifically, please check that

My choice of atomic_uintptr_t is appropriate to replace AO_t
I have correctly translated the APIs, particularly MVM_cas
C11 memory_order_seq_cst (generally) and memory_order_relaxed (in src/jit/compile.c) are the correct ""translations"" of libatomic_ops _full and ""nothing"".

This branch is based on mimalloc-optional, not master","Ho ho ho. clang doesn't like this. gcc is happy.
So, it seems that clang and gcc have different ideas about C11. gcc is fine with using _Atomic qualified types as their (regular) rvalues in expressions, whereas clang refuses. The only ""documentation"" could find about this is https://support.huaweicloud.com/intl/en-us/ug-bisheng-kunpengdevps/kunpengbisheng_06_0037.html
(again I am missing <dl>s in markdown)
the linked-to page is roughly summarised as:
Problem
""Doctor, doctor, it hurts when I do this""
Solution
""Well, don't do that then""

Better solution seems to be doing this on clang:
#define AO_READ(v) atomic_load_explicit(&(v), memory_order_relaxed)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1640,2022-01-09T19:49:11Z,2022-01-18T11:38:41Z,2022-01-18T11:38:42Z,CLOSED,False,152,28,13,https://github.com/nwc10,Support using C11 atomics as an alternative libatomic_ops,5,[],https://github.com/MoarVM/MoarVM/pull/1640,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1640#issuecomment-1011040781,"Add a new Configure.pl flag --c11-atomics that uses C11's <stdatomic.h> for MoarVM's atomic operations instead of the bundled library libatomic_ops.
If using C11 atomics then completely disable building libatomic_ops.
This permits MoarVM to build on architectures which libatomic_ops does not support, as long as they have a current C compiler which implements this optional C11 feature.
With this I can build MoarVM, NQP and Rakudo on the Loongson-3A5000 hardware on the GCC compiler farm. This is a new architecture not supported by libatomic_ops, but with a C compiler supporting C11 atomics.
I think that I have this correct, but I'm ""translating"" from the libatomic_ops APIs and descriptions to what I think are the appropriate C11 APIs and options. I can also (still) build on x86_64, and aarch64. The former is extremely forgiving, but I believe the latter's memory model provides a bit sterner test of correctness. Sadly I don't have access to a DEC Alpha.
Specifically, please check that

My choice of atomic_uintptr_t is appropriate to replace AO_t
I have correctly translated the APIs, particularly MVM_cas
C11 memory_order_seq_cst (generally) and memory_order_relaxed (in src/jit/compile.c) are the correct ""translations"" of libatomic_ops _full and ""nothing"".

This branch is based on mimalloc-optional, not master","I am stuck on why Test T MacMVM is failing. The build log seems to be this:
2022-01-12T11:44:24.0093850Z The spawned command '/Users/runner/work/1/rakudo/../install/bin/rakudo' exited unsuccessfully (exit code: 1, signal: 0)
2022-01-12T11:44:24.0162130Z   in sub is-run-repl at /Users/runner/work/1/rakudo/t/packages/Test/Helpers.pm6 (Test::Helpers) line 62
2022-01-12T11:44:24.0267400Z   in block <unit> at t/02-rakudo/repl.t line 276
2022-01-12T11:44:24.0369320Z 
2022-01-12T11:44:24.0472550Z # You planned 47 tests, but ran 38
2022-01-12T11:44:24.0575900Z t/02-rakudo/repl.t .............................................. 
2022-01-12T11:44:24.0677490Z 1..47

but why this now chooses to fail, I don't know. It makes no sense. And I can't replicate this failure on the Mac i have access to. (which is M1 and I think a newer version of macOS. So this might matter)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1640,2022-01-09T19:49:11Z,2022-01-18T11:38:41Z,2022-01-18T11:38:42Z,CLOSED,False,152,28,13,https://github.com/nwc10,Support using C11 atomics as an alternative libatomic_ops,5,[],https://github.com/MoarVM/MoarVM/pull/1640,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1640#issuecomment-1011042857,"Add a new Configure.pl flag --c11-atomics that uses C11's <stdatomic.h> for MoarVM's atomic operations instead of the bundled library libatomic_ops.
If using C11 atomics then completely disable building libatomic_ops.
This permits MoarVM to build on architectures which libatomic_ops does not support, as long as they have a current C compiler which implements this optional C11 feature.
With this I can build MoarVM, NQP and Rakudo on the Loongson-3A5000 hardware on the GCC compiler farm. This is a new architecture not supported by libatomic_ops, but with a C compiler supporting C11 atomics.
I think that I have this correct, but I'm ""translating"" from the libatomic_ops APIs and descriptions to what I think are the appropriate C11 APIs and options. I can also (still) build on x86_64, and aarch64. The former is extremely forgiving, but I believe the latter's memory model provides a bit sterner test of correctness. Sadly I don't have access to a DEC Alpha.
Specifically, please check that

My choice of atomic_uintptr_t is appropriate to replace AO_t
I have correctly translated the APIs, particularly MVM_cas
C11 memory_order_seq_cst (generally) and memory_order_relaxed (in src/jit/compile.c) are the correct ""translations"" of libatomic_ops _full and ""nothing"".

This branch is based on mimalloc-optional, not master","And I can't replicate this failure on the Mac i have access to. (which is M1 and I think a newer version of macOS. So this might matter)

t/02-rakudo/repl.t is a known flapper, so everything might in fact be fine.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1640,2022-01-09T19:49:11Z,2022-01-18T11:38:41Z,2022-01-18T11:38:42Z,CLOSED,False,152,28,13,https://github.com/nwc10,Support using C11 atomics as an alternative libatomic_ops,5,[],https://github.com/MoarVM/MoarVM/pull/1640,https://github.com/nwc10,5,https://github.com/MoarVM/MoarVM/pull/1640#issuecomment-1011406214,"Add a new Configure.pl flag --c11-atomics that uses C11's <stdatomic.h> for MoarVM's atomic operations instead of the bundled library libatomic_ops.
If using C11 atomics then completely disable building libatomic_ops.
This permits MoarVM to build on architectures which libatomic_ops does not support, as long as they have a current C compiler which implements this optional C11 feature.
With this I can build MoarVM, NQP and Rakudo on the Loongson-3A5000 hardware on the GCC compiler farm. This is a new architecture not supported by libatomic_ops, but with a C compiler supporting C11 atomics.
I think that I have this correct, but I'm ""translating"" from the libatomic_ops APIs and descriptions to what I think are the appropriate C11 APIs and options. I can also (still) build on x86_64, and aarch64. The former is extremely forgiving, but I believe the latter's memory model provides a bit sterner test of correctness. Sadly I don't have access to a DEC Alpha.
Specifically, please check that

My choice of atomic_uintptr_t is appropriate to replace AO_t
I have correctly translated the APIs, particularly MVM_cas
C11 memory_order_seq_cst (generally) and memory_order_relaxed (in src/jit/compile.c) are the correct ""translations"" of libatomic_ops _full and ""nothing"".

This branch is based on mimalloc-optional, not master","This builds on

ppc64
ppc32
sparc64

and passes all expected tests. (Forcing the compiler as gcc -m32 causes the C++ nativecall tests to fail)
(I think I've also tested x86_64, arm32 and aarch64. I think ""I"" have at least one machine with -m32 working to test x86, but I didn't try as the memory coherency is just as forgiving as x86_64, so it won't reveal any new bugs)
On Debian. (Also macOS arm64 as Apple calls it, and the the non-standard Linux distribution on the Loongson-3A5000 hardware.)
Unlike libatomic_ops, it also builds on sparc32, so that's progress.
So the new problem is:
Thread 1 ""moar"" received signal SIGBUS, Bus error.
0xf7a403a8 in MVM_disp_program_run (tc=0x700168b0, dp=0x7014a5c8,
    record=0x70017ee8, spesh_cid=0, bytecode_offset=338, dp_index=0)
    at src/disp/program.c:3430
3430                    record->temps[op.load.temp] = args->source[args->map[op.load.idx]];
(gdb) p record->temps[op.load.temp]
$1 = {o = 0x0, s = 0x0, i8 = 0 '\000', u8 = 0 '\000', i16 = 0, u16 = 0,
  i32 = 0, u32 = 0, i64 = 0, u64 = 0, n32 = 0, n64 = 0}
(gdb) p sizeof(record->temps[op.load.temp])
$2 = 8
(gdb) p &record->temps[op.load.temp]
$3 = (MVMRegister *) 0x70017f34

gdb doesn't offer me alignof() but I'm going to guess that the answer is 8 not 4. So, how to fix that cleanly...
(but that is not a blocker for this branch)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1640,2022-01-09T19:49:11Z,2022-01-18T11:38:41Z,2022-01-18T11:38:42Z,CLOSED,False,152,28,13,https://github.com/nwc10,Support using C11 atomics as an alternative libatomic_ops,5,[],https://github.com/MoarVM/MoarVM/pull/1640,https://github.com/MasterDuke17,6,https://github.com/MoarVM/MoarVM/pull/1640#issuecomment-1013025015,"Add a new Configure.pl flag --c11-atomics that uses C11's <stdatomic.h> for MoarVM's atomic operations instead of the bundled library libatomic_ops.
If using C11 atomics then completely disable building libatomic_ops.
This permits MoarVM to build on architectures which libatomic_ops does not support, as long as they have a current C compiler which implements this optional C11 feature.
With this I can build MoarVM, NQP and Rakudo on the Loongson-3A5000 hardware on the GCC compiler farm. This is a new architecture not supported by libatomic_ops, but with a C compiler supporting C11 atomics.
I think that I have this correct, but I'm ""translating"" from the libatomic_ops APIs and descriptions to what I think are the appropriate C11 APIs and options. I can also (still) build on x86_64, and aarch64. The former is extremely forgiving, but I believe the latter's memory model provides a bit sterner test of correctness. Sadly I don't have access to a DEC Alpha.
Specifically, please check that

My choice of atomic_uintptr_t is appropriate to replace AO_t
I have correctly translated the APIs, particularly MVM_cas
C11 memory_order_seq_cst (generally) and memory_order_relaxed (in src/jit/compile.c) are the correct ""translations"" of libatomic_ops _full and ""nothing"".

This branch is based on mimalloc-optional, not master","https://github.com/ivmai/libatomic_ops says at the very top of the readme, ""IN NEW CODE, PLEASE USE C11 OR C++14 STANDARD ATOMICS INSTEAD OF THE CORE LIBRARY IN THIS PACKAGE."". While moarvm isn't exactly new code, if this PR is correct, should we switch to making C11 atomics the default?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1640,2022-01-09T19:49:11Z,2022-01-18T11:38:41Z,2022-01-18T11:38:42Z,CLOSED,False,152,28,13,https://github.com/nwc10,Support using C11 atomics as an alternative libatomic_ops,5,[],https://github.com/MoarVM/MoarVM/pull/1640,https://github.com/nwc10,7,https://github.com/MoarVM/MoarVM/pull/1640#issuecomment-1013062486,"Add a new Configure.pl flag --c11-atomics that uses C11's <stdatomic.h> for MoarVM's atomic operations instead of the bundled library libatomic_ops.
If using C11 atomics then completely disable building libatomic_ops.
This permits MoarVM to build on architectures which libatomic_ops does not support, as long as they have a current C compiler which implements this optional C11 feature.
With this I can build MoarVM, NQP and Rakudo on the Loongson-3A5000 hardware on the GCC compiler farm. This is a new architecture not supported by libatomic_ops, but with a C compiler supporting C11 atomics.
I think that I have this correct, but I'm ""translating"" from the libatomic_ops APIs and descriptions to what I think are the appropriate C11 APIs and options. I can also (still) build on x86_64, and aarch64. The former is extremely forgiving, but I believe the latter's memory model provides a bit sterner test of correctness. Sadly I don't have access to a DEC Alpha.
Specifically, please check that

My choice of atomic_uintptr_t is appropriate to replace AO_t
I have correctly translated the APIs, particularly MVM_cas
C11 memory_order_seq_cst (generally) and memory_order_relaxed (in src/jit/compile.c) are the correct ""translations"" of libatomic_ops _full and ""nothing"".

This branch is based on mimalloc-optional, not master","if this PR is correct, should we switch to making C11 atomics the default?

I hadn't had cause to say it yet, but I was thinking that we should, at some point in the future. But not ""this week"".
Roughly I thought maybe wait for at least one monthly release, so that folks in the wild can test it. I'm most curious whether it makes life easier for building Debian (and other) packages.
Also, implementing it as a default is a bit fiddly - currently the order of Configure.pl has these sort of setup questions earlier than the run-some-code compiler probes. So right now we don't know whether the compiler actually supports C11 atomics before we process the logic to set up what we need in 3rdparty. Untangling that probably makes sense, so that we can default based on what the compiler does, but it felt like a task to tackle separately, not as part of this.",True,{'THUMBS_UP': ['https://github.com/MasterDuke17']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1641,2022-01-12T09:59:07Z,2022-01-12T10:00:43Z,2022-01-12T10:00:44Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Make value_desc_cont_atomic_store() static,1,[],https://github.com/MoarVM/MoarVM/pull/1641,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1641,"Looks like it was just an accidental omission when it was added.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Looks like it was just an accidental omission when it was added.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1642,2022-01-12T12:55:23Z,,2022-01-12T12:55:23Z,OPEN,False,42,26,2,https://github.com/nwc10,update-submodules.pl should handle linked worktrees created by git-worktree,3,[],https://github.com/MoarVM/MoarVM/pull/1642,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1642,"git worktree allows multiple working trees attached to the same repository, which is useful if one wants to have multiple development projects checked out in parallel on the same machine. A side effect of its implementation is that in a ""linked working tree"" .git is a file, not a directory. git commands handle this just fine, but tools that assume that they can test for a git checkout by simply looking for a directory .git will fail.
Teach tools/update-submodules.pl that .git can be a file too.","git worktree allows multiple working trees attached to the same repository, which is useful if one wants to have multiple development projects checked out in parallel on the same machine. A side effect of its implementation is that in a ""linked working tree"" .git is a file, not a directory. git commands handle this just fine, but tools that assume that they can test for a git checkout by simply looking for a directory .git will fail.
Teach tools/update-submodules.pl that .git can be a file too.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1643,2022-01-13T16:17:47Z,2022-01-13T18:53:21Z,2022-01-13T18:59:56Z,MERGED,True,7,5,1,https://github.com/nwc10,Allocations for blocks of MVM registers needs to be 8 byte aligned,1,[],https://github.com/MoarVM/MoarVM/pull/1643,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1643,"Various MVM_callstack_allocate_* functions allocate a single block of memory, where the last section is used as an array of MVMRegister structs.  This section needs to be 8 byte aligned, as on some platforms the (real) CPU's 64 bit loads from it need to be 8 byte aligned.
Most of these were correct already, but building on sparc32 reveals a few that were not.
Also in MVM_callstack_allocate_dispatch_record, the allocation only needs to be sizeof(MVMCallStackDispatchRun), as this is what is used, not sizeof(MVMCallStackDispatchRecord). This hasn't been noticed previously, because the latter struct is twice the size, so the bug simply resulting in a bit of extra memory being allocated.
These changes, along with the C11 atomics and a bug fix to tommath.h are sufficient to get Rakudo building and passing tests on sparc32 (apart from nativecall, for which dynlib ""crashes and burns"" without a valid stack trace), and libffi wasn't available locally). Hopefully (also) this means that with this our code is sufficiently precise on endianness and alignment that it will build on any CPU architecture, meaning that the only porting blockers are our third party libraries.","Various MVM_callstack_allocate_* functions allocate a single block of memory, where the last section is used as an array of MVMRegister structs.  This section needs to be 8 byte aligned, as on some platforms the (real) CPU's 64 bit loads from it need to be 8 byte aligned.
Most of these were correct already, but building on sparc32 reveals a few that were not.
Also in MVM_callstack_allocate_dispatch_record, the allocation only needs to be sizeof(MVMCallStackDispatchRun), as this is what is used, not sizeof(MVMCallStackDispatchRecord). This hasn't been noticed previously, because the latter struct is twice the size, so the bug simply resulting in a bit of extra memory being allocated.
These changes, along with the C11 atomics and a bug fix to tommath.h are sufficient to get Rakudo building and passing tests on sparc32 (apart from nativecall, for which dynlib ""crashes and burns"" without a valid stack trace), and libffi wasn't available locally). Hopefully (also) this means that with this our code is sufficiently precise on endianness and alignment that it will build on any CPU architecture, meaning that the only porting blockers are our third party libraries.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1644,2022-01-14T12:45:31Z,2022-01-14T15:28:50Z,2022-01-14T15:59:57Z,MERGED,True,151,151,39,https://github.com/nwc10,Add missing `static` qualifiers to various private functions,10,[],https://github.com/MoarVM/MoarVM/pull/1644,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1644,"I noticed that record_size was a missing static in src/core/callstack.c, and then wondered if there were any other similar oversights.
Hence I ran this to detect functions that aren't static but have names that suggest that they should be:
for file in find src -name *.o; do nm $file | grep ' T '  | grep -v ' T MVM' && echo ${file%.o}.c; done | tac
and it found quite a few.
Size of libmoar.so on x86_64 drops by about 12K (ie from 9.4M to 9.4M), and I think that just under 7K of that is due to a reduction in size of the code segment. The code segment likely should get a bit smaller - the compiler optimser might decide to inline some of the smaller functions, and that can even be a size win where the function's preamble and postable or the calling convention's setup and return have larger code than the function body itself.","I noticed that record_size was a missing static in src/core/callstack.c, and then wondered if there were any other similar oversights.
Hence I ran this to detect functions that aren't static but have names that suggest that they should be:
for file in find src -name *.o; do nm $file | grep ' T '  | grep -v ' T MVM' && echo ${file%.o}.c; done | tac
and it found quite a few.
Size of libmoar.so on x86_64 drops by about 12K (ie from 9.4M to 9.4M), and I think that just under 7K of that is due to a reduction in size of the code segment. The code segment likely should get a bit smaller - the compiler optimser might decide to inline some of the smaller functions, and that can even be a size win where the function's preamble and postable or the calling convention's setup and return have larger code than the function body itself.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1645,2022-01-14T15:29:27Z,,2022-03-21T13:06:13Z,OPEN,False,260,945,54,https://github.com/MasterDuke17,Remove the fixed size allocator (FSA),1,[],https://github.com/MoarVM/MoarVM/pull/1645,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1645,"With the recent change to make using the mimalloc allocator the default,
it was discovered that it does such a good job that the FSA doesn't
provide any extra benefit. Therefore we're removing it to simplify
things in general. While this will be a performance regression for the
few systems that can't use mimalloc, but those are very uncommon anyway.
Because the FSA had two jobs (fast allocations/frees for small amounts
of memory + an ""at safepoint"" mechanism to allow concurrent
modifications of things are aren't supposed to modifed concurrently to
be detected and an error thrown instead of just segfaulting) and
mimalloc only replaces the first, the *_at_safepoint() functions of
the FSA had to be implemented in terms of the normal alloc/free
capabilities. That code was essentially copied from the FSA's
implementations.","With the recent change to make using the mimalloc allocator the default,
it was discovered that it does such a good job that the FSA doesn't
provide any extra benefit. Therefore we're removing it to simplify
things in general. While this will be a performance regression for the
few systems that can't use mimalloc, but those are very uncommon anyway.
Because the FSA had two jobs (fast allocations/frees for small amounts
of memory + an ""at safepoint"" mechanism to allow concurrent
modifications of things are aren't supposed to modifed concurrently to
be detected and an error thrown instead of just segfaulting) and
mimalloc only replaces the first, the *_at_safepoint() functions of
the FSA had to be implemented in terms of the normal alloc/free
capabilities. That code was essentially copied from the FSA's
implementations.",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1647,2022-01-16T08:40:54Z,2022-01-22T08:12:07Z,2022-01-22T08:12:07Z,CLOSED,False,260,91,22,https://github.com/niner,Fix handling of native unsigned integers,7,[],https://github.com/MoarVM/MoarVM/pull/1647,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1647,This is the final round of unsigned fixes that gets us into a stable situation again. It switches over to treating unsigneds as such by giving them their own objprimspec (10). This requires appropriate changes in NQP and Rakudo contained in similarily named branches in their respective repos.,This is the final round of unsigned fixes that gets us into a stable situation again. It switches over to treating unsigneds as such by giving them their own objprimspec (10). This requires appropriate changes in NQP and Rakudo contained in similarily named branches in their respective repos.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1647,2022-01-16T08:40:54Z,2022-01-22T08:12:07Z,2022-01-22T08:12:07Z,CLOSED,False,260,91,22,https://github.com/niner,Fix handling of native unsigned integers,7,[],https://github.com/MoarVM/MoarVM/pull/1647,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1647#issuecomment-1019094708,This is the final round of unsigned fixes that gets us into a stable situation again. It switches over to treating unsigneds as such by giving them their own objprimspec (10). This requires appropriate changes in NQP and Rakudo contained in similarily named branches in their respective repos.,Merged it manually,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1649,2022-01-19T08:20:47Z,,2022-01-19T10:27:28Z,OPEN,False,181,134,8,https://github.com/nwc10,Convert free_at_safepoint from a vector to a linked list and eliminate its associated mutex,5,[],https://github.com/MoarVM/MoarVM/pull/1649,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1649,"move our atomic operations macros to a new header src/atomics.h
convert free_at_safepoint from a vector to a linked list
eliminate the mutex mutex_free_at_safepoint by using MVM_casptr
If we have C11 atomics use atomic_exchange_explicit instead of MVM_casptr

The commit that converts free_at_safepoint to a linked list is code @MasterDuke17 was working on as part of investigating eliminating the FSA
My subsequent changes assume that the pointer generated by the expression STABLE(type) can't change (outside of the GC) - is it correct that st is never reassigned?","move our atomic operations macros to a new header src/atomics.h
convert free_at_safepoint from a vector to a linked list
eliminate the mutex mutex_free_at_safepoint by using MVM_casptr
If we have C11 atomics use atomic_exchange_explicit instead of MVM_casptr

The commit that converts free_at_safepoint to a linked list is code @MasterDuke17 was working on as part of investigating eliminating the FSA
My subsequent changes assume that the pointer generated by the expression STABLE(type) can't change (outside of the GC) - is it correct that st is never reassigned?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1649,2022-01-19T08:20:47Z,,2022-01-19T10:27:28Z,OPEN,False,181,134,8,https://github.com/nwc10,Convert free_at_safepoint from a vector to a linked list and eliminate its associated mutex,5,[],https://github.com/MoarVM/MoarVM/pull/1649,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1649#issuecomment-1016198233,"move our atomic operations macros to a new header src/atomics.h
convert free_at_safepoint from a vector to a linked list
eliminate the mutex mutex_free_at_safepoint by using MVM_casptr
If we have C11 atomics use atomic_exchange_explicit instead of MVM_casptr

The commit that converts free_at_safepoint to a linked list is code @MasterDuke17 was working on as part of investigating eliminating the FSA
My subsequent changes assume that the pointer generated by the expression STABLE(type) can't change (outside of the GC) - is it correct that st is never reassigned?","My subsequent changes assume that the pointer generated by the expression
 `STABLE(type)` can&#39;t change (outside of the GC) - is it correct that
 `st` is never reassigned? You can view, comment on, or merge this pull
Unfortunately it isn't. Rebless changes the STABLE:
https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L1358",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1649,2022-01-19T08:20:47Z,,2022-01-19T10:27:28Z,OPEN,False,181,134,8,https://github.com/nwc10,Convert free_at_safepoint from a vector to a linked list and eliminate its associated mutex,5,[],https://github.com/MoarVM/MoarVM/pull/1649,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1649#issuecomment-1016205050,"move our atomic operations macros to a new header src/atomics.h
convert free_at_safepoint from a vector to a linked list
eliminate the mutex mutex_free_at_safepoint by using MVM_casptr
If we have C11 atomics use atomic_exchange_explicit instead of MVM_casptr

The commit that converts free_at_safepoint to a linked list is code @MasterDuke17 was working on as part of investigating eliminating the FSA
My subsequent changes assume that the pointer generated by the expression STABLE(type) can't change (outside of the GC) - is it correct that st is never reassigned?","My subsequent changes assume that the pointer generated by the expression STABLE(type) can't change (outside of the GC) - is it correct that st is never reassigned? You can view, comment on, or merge this pull
Unfortunately it isn't. Rebless changes the STABLE: https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L1358

Hmm, interesting.
I think (stress think) that actually that means that the existing code in MVM_6model_set_debug_name is buggy, because it does this:
/* Set the debug name on a type. */
void MVM_6model_set_debug_name(MVMThreadContext *tc, MVMObject *type, MVMString *name) {
    char *orig_debug_name;
    uv_mutex_lock(&(tc->instance->mutex_free_at_safepoint));
    orig_debug_name = STABLE(type)->debug_name;
    if (orig_debug_name)
        MVM_free_at_safepoint(tc, orig_debug_name);
    STABLE(type)->debug_name = name && MVM_string_graphs(tc, name)
        ? MVM_string_utf8_encode_C_string(tc, name)
        : NULL;
    uv_mutex_unlock(&(tc->instance->mutex_free_at_safepoint));
}

and sure, it is holding the mutex mutex_free_at_safepoint while it does this, but that code in P6opaque is not, meaning that if both are executing in different threads, then the LVALUE expression STABLE(type)->debug_name might change.
Whereas my final version with this:
    void *old_debug_name
        = (void *) atomic_exchange_explicit(&STABLE(type)->debug_name, new_debug_name, memory_order_relaxed);

I think can't. Sure, it can't know which STABLE is is altering (the one before P6opaque's rebless or the one after it) but whichever it changes will remain self consistent (and no memory will leak or get double freed)
@jnthn  - have we uncovered a race condition here?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1649,2022-01-19T08:20:47Z,,2022-01-19T10:27:28Z,OPEN,False,181,134,8,https://github.com/nwc10,Convert free_at_safepoint from a vector to a linked list and eliminate its associated mutex,5,[],https://github.com/MoarVM/MoarVM/pull/1649,https://github.com/niner,4,https://github.com/MoarVM/MoarVM/pull/1649#issuecomment-1016211946,"move our atomic operations macros to a new header src/atomics.h
convert free_at_safepoint from a vector to a linked list
eliminate the mutex mutex_free_at_safepoint by using MVM_casptr
If we have C11 atomics use atomic_exchange_explicit instead of MVM_casptr

The commit that converts free_at_safepoint to a linked list is code @MasterDuke17 was working on as part of investigating eliminating the FSA
My subsequent changes assume that the pointer generated by the expression STABLE(type) can't change (outside of the GC) - is it correct that st is never reassigned?","At least, whatever stable we read at this point, it will still point at
allocated memory and writing to debug_name is safe.

Considering how rebless and setdebugtypename are used, I'd be highly surprised
if we ever ran into an issue there. setdebugtypename is usually done right
after allocating a type object, i.e. no other thread will have seen it at this
point.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1650,2022-01-19T23:46:00Z,2022-01-27T08:36:07Z,2022-01-29T20:05:37Z,MERGED,True,122,17,12,https://github.com/MasterDuke17,Use libc allocator functions for NativeCall,6,[],https://github.com/MoarVM/MoarVM/pull/1650,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1650,"Because the memory could be passed to a module and freed there, we can't
use the MVM_* functions because those could be using a different
allocator (e.g., mimalloc as is the new default build configuration). In
cases where we can't specifiy the function to use, we instead explicitly
allocate another chunk of memory with libc functions, copy what we
originally got into it, then free the original version.","Because the memory could be passed to a module and freed there, we can't
use the MVM_* functions because those could be using a different
allocator (e.g., mimalloc as is the new default build configuration). In
cases where we can't specifiy the function to use, we instead explicitly
allocate another chunk of memory with libc functions, copy what we
originally got into it, then free the original version.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1650,2022-01-19T23:46:00Z,2022-01-27T08:36:07Z,2022-01-29T20:05:37Z,MERGED,True,122,17,12,https://github.com/MasterDuke17,Use libc allocator functions for NativeCall,6,[],https://github.com/MoarVM/MoarVM/pull/1650,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1650#issuecomment-1016974316,"Because the memory could be passed to a module and freed there, we can't
use the MVM_* functions because those could be using a different
allocator (e.g., mimalloc as is the new default build configuration). In
cases where we can't specifiy the function to use, we instead explicitly
allocate another chunk of memory with libc functions, copy what we
originally got into it, then free the original version.","This passes NQP's and Rakudo's make m-test, but there are still invalid frees, etc in
NativeHelpers-iovec.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1650,2022-01-19T23:46:00Z,2022-01-27T08:36:07Z,2022-01-29T20:05:37Z,MERGED,True,122,17,12,https://github.com/MasterDuke17,Use libc allocator functions for NativeCall,6,[],https://github.com/MoarVM/MoarVM/pull/1650,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1650#issuecomment-1022925116,"Because the memory could be passed to a module and freed there, we can't
use the MVM_* functions because those could be using a different
allocator (e.g., mimalloc as is the new default build configuration). In
cases where we can't specifiy the function to use, we instead explicitly
allocate another chunk of memory with libc functions, copy what we
originally got into it, then free the original version.",Looks good to me. The flappy failure of  t/02-rakudo/reproducible-builds.t makes no sense to me.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1651,2022-01-20T11:56:37Z,2022-01-25T19:54:35Z,2022-01-25T19:54:36Z,MERGED,True,11,0,1,https://github.com/MasterDuke17,Add an lgtm config file,1,[],https://github.com/MoarVM/MoarVM/pull/1651,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1651,"So https://lgtm.com/projects/g/MoarVM/MoarVM/ can build and provide
alerts for the C source.","So https://lgtm.com/projects/g/MoarVM/MoarVM/ can build and provide
alerts for the C source.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1652,2022-01-25T11:19:38Z,2022-01-25T11:58:54Z,2022-01-25T11:58:56Z,MERGED,True,7,0,2,https://github.com/MasterDuke17,"Jit iscont_u, missed in the recent uint work",1,[],https://github.com/MoarVM/MoarVM/pull/1652,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1652,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. No longer causing bails in a random spesh log I was looking at.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. No longer causing bails in a random spesh log I was looking at.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1653,2022-01-25T23:36:15Z,2022-01-26T08:21:36Z,2022-01-26T08:21:37Z,MERGED,True,20,6,1,https://github.com/MasterDuke17,Jit some more missing `*_u` versions of ops,1,[],https://github.com/MoarVM/MoarVM/pull/1653,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1653,"Missed in the recent unsigned work.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Missed in the recent unsigned work.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1654,2022-01-27T09:59:27Z,2022-01-27T21:05:44Z,2022-01-27T21:05:46Z,MERGED,True,9,3,1,https://github.com/MasterDuke17,Fix segfault in nqp::hllboolfor,1,[],https://github.com/MoarVM/MoarVM/pull/1654,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1654,"It currently doesn't check whether the fields it needs are present in
the HLLConfig returned from MVM_hll_get_config_for, which is fine because
all the names it's usually called with have existing and populated
HLLConfigs. But MVM_hll_get_config_for will create and return a mostly empty
HLLConfig if it didn't already exist for the given HLL name. So check and
throw an exception if the fields we need aren't populated.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Fixes Raku/nqp#619, the given example now throws with Trying to hllboolfor a value, but 'tcl' doesn't have HLL bools.","It currently doesn't check whether the fields it needs are present in
the HLLConfig returned from MVM_hll_get_config_for, which is fine because
all the names it's usually called with have existing and populated
HLLConfigs. But MVM_hll_get_config_for will create and return a mostly empty
HLLConfig if it didn't already exist for the given HLL name. So check and
throw an exception if the fields we need aren't populated.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. Fixes Raku/nqp#619, the given example now throws with Trying to hllboolfor a value, but 'tcl' doesn't have HLL bools.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1655,2022-01-27T13:32:16Z,2022-01-27T20:41:46Z,2022-01-27T20:41:47Z,MERGED,True,128,5,1,https://github.com/MasterDuke17,Manually implement simplified strtoll for coerce_si,1,[],https://github.com/MoarVM/MoarVM/pull/1655,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1655,"This way we don't have to allocate a new C string just to call strtoll
on it. Additionally, because we're always converting to base 10, we can
remove some of the checks that strtoll does.
There are two code paths, both use the same algorithm, but when the
MVMString is just storing ascii characters we can use its storage
directly, otherwise we have to go through a codepoint iterator.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest
This example my str $s = (100_000_000..1_000_000_000).pick.Str; my int $i; my $n = now; $i = $s for ^10_000_000; say now - $n; say $i; say $s took ~0.46s before and made 10_000_000 temporary allocations. With this PR it takes ~0.22s and doesn't make any temporary allocations.","This way we don't have to allocate a new C string just to call strtoll
on it. Additionally, because we're always converting to base 10, we can
remove some of the checks that strtoll does.
There are two code paths, both use the same algorithm, but when the
MVMString is just storing ascii characters we can use its storage
directly, otherwise we have to go through a codepoint iterator.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest
This example my str $s = (100_000_000..1_000_000_000).pick.Str; my int $i; my $n = now; $i = $s for ^10_000_000; say now - $n; say $i; say $s took ~0.46s before and made 10_000_000 temporary allocations. With this PR it takes ~0.22s and doesn't make any temporary allocations.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1657,2022-01-29T13:46:58Z,2022-01-30T10:21:24Z,2022-01-30T10:21:42Z,MERGED,True,40,12,1,https://github.com/nwc10,Inline ascii ctype,2,[],https://github.com/MoarVM/MoarVM/pull/1657,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1657,"The first commit eliminates some new regressions for corner cases. For example, currently on master we have:
$ ./nqp-m -e 'nqp::say(nqp::coerce_si(""-""));'
Iteration past end of grapheme iterator
   at -e:1  (<ephemeral file>:<mainline>)
 from gen/moar/stage2/NQPHLL.nqp:1949  (/home/nick/Perl/nqp/NQPHLL.moarvm:eval)
 from gen/moar/stage2/NQPHLL.nqp:2059  (/home/nick/Perl/nqp/NQPHLL.moarvm:)
 from gen/moar/stage2/NQPHLL.nqp:2114  (/home/nick/Perl/nqp/NQPHLL.moarvm:command_eval)
 from gen/moar/stage2/NQPHLL.nqp:2039  (/home/nick/Perl/nqp/NQPHLL.moarvm:command_line)
 from gen/moar/stage2/NQP.nqp:4111  (nqp.moarvm:MAIN)
 from gen/moar/stage2/NQP.nqp:1  (nqp.moarvm:<mainline>)
 from <unknown>:1  (nqp.moarvm:<main>)
 from <unknown>:1  (nqp.moarvm:<entry>)

whereas for all releases we have:
$ ./nqp-m -e 'nqp::say(nqp::coerce_si(""-""));'
0

I doubt that anything is depending on this exact behaviour, but I think that there were some other (harder to test) corner cases which might have become off-the-end reads in the ASCII specific code in commit b80996f
The second commit eliminates the dependency on <ctype.h> and instead directly codes the ASCII locale implementation of isspace and isdigit.
With these changes nqp-m passes all the tests proposed in Raku/nqp#759","The first commit eliminates some new regressions for corner cases. For example, currently on master we have:
$ ./nqp-m -e 'nqp::say(nqp::coerce_si(""-""));'
Iteration past end of grapheme iterator
   at -e:1  (<ephemeral file>:<mainline>)
 from gen/moar/stage2/NQPHLL.nqp:1949  (/home/nick/Perl/nqp/NQPHLL.moarvm:eval)
 from gen/moar/stage2/NQPHLL.nqp:2059  (/home/nick/Perl/nqp/NQPHLL.moarvm:)
 from gen/moar/stage2/NQPHLL.nqp:2114  (/home/nick/Perl/nqp/NQPHLL.moarvm:command_eval)
 from gen/moar/stage2/NQPHLL.nqp:2039  (/home/nick/Perl/nqp/NQPHLL.moarvm:command_line)
 from gen/moar/stage2/NQP.nqp:4111  (nqp.moarvm:MAIN)
 from gen/moar/stage2/NQP.nqp:1  (nqp.moarvm:<mainline>)
 from <unknown>:1  (nqp.moarvm:<main>)
 from <unknown>:1  (nqp.moarvm:<entry>)

whereas for all releases we have:
$ ./nqp-m -e 'nqp::say(nqp::coerce_si(""-""));'
0

I doubt that anything is depending on this exact behaviour, but I think that there were some other (harder to test) corner cases which might have become off-the-end reads in the ASCII specific code in commit b80996f
The second commit eliminates the dependency on <ctype.h> and instead directly codes the ASCII locale implementation of isspace and isdigit.
With these changes nqp-m passes all the tests proposed in Raku/nqp#759",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1658,2022-01-30T16:21:01Z,2022-02-01T15:49:30Z,2022-02-09T21:06:51Z,MERGED,True,4,1,1,https://github.com/niner,Fix segfault after capture-replace-literal-arg with different kind,1,[],https://github.com/MoarVM/MoarVM/pull/1658,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1658,"A comment above MVM_capture_replace_arg already said: ""The callsite argument
type is expected to be the same"". Sadly comments are easy to miss and when
arguments are replaced with values of different kinds, we can end up with e.g.
a literal number for a callsite argument with kind obj and may try to
dereference what we wrongly believe to be a pointer.
Fix by actually enforcing this rule. Fixes the segfault reported in GH #1656","A comment above MVM_capture_replace_arg already said: ""The callsite argument
type is expected to be the same"". Sadly comments are easy to miss and when
arguments are replaced with values of different kinds, we can end up with e.g.
a literal number for a callsite argument with kind obj and may try to
dereference what we wrongly believe to be a pointer.
Fix by actually enforcing this rule. Fixes the segfault reported in GH #1656",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1659,2022-01-31T17:40:41Z,2022-02-01T08:18:39Z,2022-02-01T08:21:28Z,MERGED,True,24,44,1,https://github.com/nwc10,Fix a bug in error reporting code in deserialize_callsites,2,[],https://github.com/MoarVM/MoarVM/pull/1659,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1659,"Fix a bug in deserialize_callsites
This bug originates from when the code was first added as part of commit c1c25e3.
Unfortunately it can cause a SEGV, which obscures the actual error message that we are trying to report.","Fix a bug in deserialize_callsites
This bug originates from when the code was first added as part of commit c1c25e3.
Unfortunately it can cause a SEGV, which obscures the actual error message that we are trying to report.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1659,2022-01-31T17:40:41Z,2022-02-01T08:18:39Z,2022-02-01T08:21:28Z,MERGED,True,24,44,1,https://github.com/nwc10,Fix a bug in error reporting code in deserialize_callsites,2,[],https://github.com/MoarVM/MoarVM/pull/1659,https://github.com/nwc10,2,https://github.com/MoarVM/MoarVM/pull/1659#issuecomment-1026107692,"Fix a bug in deserialize_callsites
This bug originates from when the code was first added as part of commit c1c25e3.
Unfortunately it can cause a SEGV, which obscures the actual error message that we are trying to report.","t/02-rakudo/reproducible-builds.t again. :-(
This bug is rather unfortunate. We have:
$ ../MoarVM/moar --version
This is MoarVM version 2021.12-100-g596be5246 built with JIT support
$ ../MoarVM2/moar --version
This is MoarVM version 2021.12 built with JIT support
$ ../MoarVM3/moar --version
This is MoarVM version 2021.10 built with JIT support

So, current master nqp:
$ ../MoarVM/moar ./nqp.moarvm -e 'my $config := HLL::SysConfig.new().nqp-build-config(); nqp::say($config<version>); nqp::say(HLL::Backend::MoarVM.new().version_string())'
2021.12-32-gacdd48ba6
MoarVM version 2021.12-100-g596be5246
$ ../MoarVM2/moar ./nqp.moarvm -e 'my $config := HLL::SysConfig.new().nqp-build-config(); nqp::say($config<version>); nqp::say(HLL::Backend::MoarVM.new().version_string())'
Segmentation fault
$ ../MoarVM3/moar ./nqp.moarvm -e 'my $config := HLL::SysConfig.new().nqp-build-config(); nqp::say($config<version>); nqp::say(HLL::Backend::MoarVM.new().version_string())'
Segmentation fault

For 2021.12 nqp the Moar2 is the corresponding version:
$ ../MoarVM/moar ./nqp.moarvm -e 'my $config := HLL::SysConfig.new().nqp-build-config(); nqp::say($config<version>); nqp::say(HLL::Backend::MoarVM.new().version_string())'
Unhandled exception: All positional args must appear before named args, violated by arg 6 in callsite 88
$ ../MoarVM2/moar ./nqp.moarvm -e 'my $config := HLL::SysConfig.new().nqp-build-config(); nqp::say($config<version>); nqp::say(HLL::Backend::MoarVM.new().version_string())'
2021.12
MoarVM version 2021.12
$ ../MoarVM3/moar ./nqp.moarvm -e 'my $config := HLL::SysConfig.new().nqp-build-config(); nqp::say($config<version>); nqp::say(HLL::Backend::MoarVM.new().version_string())'
Unhandled exception: No MoarVM syscall with name 'dispatcher-replace-arg-literal-obj'
   at gen/moar/stage2/NQPCORE.setting:832  (NQPCORE.setting.moarvm:)
 from gen/moar/stage2/NQPCORE.setting:1  (NQPCORE.setting.moarvm:<mainline>)
 from <unknown>:1  (NQPCORE.setting.moarvm:<load>)
 from src/vm/moar/ModuleLoader.nqp:347  (ModuleLoader.moarvm:)
 from src/vm/moar/ModuleLoader.nqp:336  (ModuleLoader.moarvm:)
 from src/vm/moar/ModuleLoader.nqp:328  (ModuleLoader.moarvm:load_setting)
 from <unknown>:1  (./nqp.moarvm:<dependencies+deserialize>)

For 2021:10 nqp:
$ ../MoarVM/moar ./nqp.moarvm -e 'my $config := HLL::SysConfig.new().nqp-build-config(); nqp::say($config<version>); nqp::say(HLL::Backend::MoarVM.new().version_string())'
Unhandled exception: All positional args must appear before named args, violated by arg 6 in callsite 88
$ ../MoarVM2/moar ./nqp.moarvm -e 'my $config := HLL::SysConfig.new().nqp-build-config(); nqp::say($config<version>); nqp::say(HLL::Backend::MoarVM.new().version_string())'
2021.10
MoarVM version 2021.12
$ ../MoarVM3/moar ./nqp.moarvm -e 'my $config := HLL::SysConfig.new().nqp-build-config(); nqp::say($config<version>); nqp::say(HLL::Backend::MoarVM.new().version_string())'
2021.10
MoarVM version 2021.10

The SEGV was attempting to dereference callsites[88] in:
            MVMuint32 k;
            for (k = 0; k <= i; k++) {
                if (!callsites[i]->is_interned) {
                    MVM_free(callsites[i]->arg_flags);
                    MVM_free_null(callsites[i]);
                }
            }
            MVM_fixed_size_free(tc, tc->instance->fsa,
                sizeof(MVMCallsite *) * rs->expected_callsites,
                    callsites);
            MVM_exception_throw_adhoc(tc, ""All positional args must appear before named args, violated by arg %d in callsite %d"", j, i);

where i is 88 and k is 1 (or similar). And hence callsites[88] is out of bounds (and happened to be zeroed memory)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1659,2022-01-31T17:40:41Z,2022-02-01T08:18:39Z,2022-02-01T08:21:28Z,MERGED,True,24,44,1,https://github.com/nwc10,Fix a bug in error reporting code in deserialize_callsites,2,[],https://github.com/MoarVM/MoarVM/pull/1659,https://github.com/nwc10,3,https://github.com/MoarVM/MoarVM/pull/1659#issuecomment-1026146458,"Fix a bug in deserialize_callsites
This bug originates from when the code was first added as part of commit c1c25e3.
Unfortunately it can cause a SEGV, which obscures the actual error message that we are trying to report.",We all missed it the first time. I'd feel happier if I had found it back then.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1659,2022-01-31T17:40:41Z,2022-02-01T08:18:39Z,2022-02-01T08:21:28Z,MERGED,True,24,44,1,https://github.com/nwc10,Fix a bug in error reporting code in deserialize_callsites,2,[],https://github.com/MoarVM/MoarVM/pull/1659,https://github.com/MasterDuke17,4,https://github.com/MoarVM/MoarVM/pull/1659#issuecomment-1026149632,"Fix a bug in deserialize_callsites
This bug originates from when the code was first added as part of commit c1c25e3.
Unfortunately it can cause a SEGV, which obscures the actual error message that we are trying to report.",That's the sort of thing I'm kind of surprised none of the static analyzers found.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1660,2022-01-31T17:51:16Z,2022-02-01T09:30:15Z,2022-02-01T09:30:15Z,CLOSED,False,57,134,8,https://github.com/nwc10,Bump the mimiumum support serialization format to 23.,2,[],https://github.com/MoarVM/MoarVM/pull/1660,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1660,"Remove all code for serialization versions earlier than 23, and bytecode versions earlier than 7
Code compiled with earlier versions assumes ""old"" dispatch, meaning that the ops it needs will now throw exceptions.","Remove all code for serialization versions earlier than 23, and bytecode versions earlier than 7
Code compiled with earlier versions assumes ""old"" dispatch, meaning that the ops it needs will now throw exceptions.",True,{'THUMBS_UP': ['https://github.com/zhuomingliang']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1661,2022-02-01T10:18:24Z,2022-02-03T08:36:49Z,2022-02-03T08:36:51Z,MERGED,True,128,129,22,https://github.com/MasterDuke17,Fix things found by lgtm.com,5,[],https://github.com/MoarVM/MoarVM/pull/1661,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1661,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1662,2022-02-02T14:04:44Z,,2022-02-02T14:04:44Z,OPEN,False,104,19,2,https://github.com/nwc10,"Serialize bigints in base 32, not base 10",3,[],https://github.com/MoarVM/MoarVM/pull/1662,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1662,"A work in progress, but posted as I'd like to avoid duplication of effort
Todo

thorough tests
benchmarks
the Java version (in the nqp repository)
remove that assertion","A work in progress, but posted as I'd like to avoid duplication of effort
Todo

thorough tests
benchmarks
the Java version (in the nqp repository)
remove that assertion",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1663,2022-02-03T11:36:28Z,2022-02-04T21:09:47Z,2022-02-04T21:09:49Z,MERGED,True,67,68,3,https://github.com/MasterDuke17,Fix problems in GCC/GDB plugins found by lgtm.com,5,[],https://github.com/MoarVM/MoarVM/pull/1663,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1663,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1664,2022-02-03T22:30:45Z,2022-02-04T21:09:56Z,2022-02-04T21:09:57Z,MERGED,True,2,2,2,https://github.com/MasterDuke17,Fix more things found by lgtm.com,2,[],https://github.com/MoarVM/MoarVM/pull/1664,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1664,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1665,2022-02-03T22:55:30Z,2022-02-04T21:27:44Z,2022-02-04T21:27:44Z,MERGED,True,10,6,1,https://github.com/vrurg,Make it possible turn dispatcher debugger with compiler options,1,[],https://github.com/MoarVM/MoarVM/pull/1665,https://github.com/vrurg,1,https://github.com/MoarVM/MoarVM/pull/1665,Sometimes it is better than editing the source.,Sometimes it is better than editing the source.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1665,2022-02-03T22:55:30Z,2022-02-04T21:27:44Z,2022-02-04T21:27:44Z,MERGED,True,10,6,1,https://github.com/vrurg,Make it possible turn dispatcher debugger with compiler options,1,[],https://github.com/MoarVM/MoarVM/pull/1665,https://github.com/vrurg,2,https://github.com/MoarVM/MoarVM/pull/1665#issuecomment-1029479505,Sometimes it is better than editing the source.,"And sometimes I wish there be a way to turn debugging on/off at run-time for different subsystems. Like, say, nqp::mvmdebug(MVM_DISP_RECORDINGS) in NQP/Raku. And then in MoarVM code:
if MVM_debug_on(tc, MVM_DISP_RECORDINGS) {
    /* produce some output */
}",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1666,2022-02-04T09:47:12Z,2022-03-06T20:24:05Z,2022-03-06T20:24:05Z,MERGED,True,8,4,3,https://github.com/scovit,Make rakudo available on the GNU Hurd,3,[],https://github.com/MoarVM/MoarVM/pull/1666,https://github.com/scovit,1,https://github.com/MoarVM/MoarVM/pull/1666,"It currently needs a libuv patch available at
libuv/libuv#3450
It works:
# raku
Welcome to Rakudo™ v2021.12.
Implementing the Raku® Programming Language v6.d.
Built on MoarVM version 2021.12.

You may want to `zef install Readline`, `zef install Linenoise`, or `zef install Terminal::LineEditor` or use rlwrap for a line editor

To exit type 'exit' or '^D'
> $*KERNEL
gnu
>","It currently needs a libuv patch available at
libuv/libuv#3450
It works:
# raku
Welcome to Rakudo™ v2021.12.
Implementing the Raku® Programming Language v6.d.
Built on MoarVM version 2021.12.

You may want to `zef install Readline`, `zef install Linenoise`, or `zef install Terminal::LineEditor` or use rlwrap for a line editor

To exit type 'exit' or '^D'
> $*KERNEL
gnu
>",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1668,2022-02-05T23:34:25Z,2022-02-06T15:48:20Z,2022-02-06T15:48:22Z,MERGED,True,6,5,4,https://github.com/MasterDuke17,Fix format strings for Win32 + set C99 for MinGW,1,[],https://github.com/MoarVM/MoarVM/pull/1668,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1668,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1669,2022-02-06T15:59:34Z,,2022-02-15T10:37:25Z,OPEN,False,1,1,1,https://github.com/MasterDuke17,Define -D__USE_MINGW_ANSI_STDIO=1 for MinGW,1,[],https://github.com/MoarVM/MoarVM/pull/1669,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1669,"This will fix it complaining about %h and %z being invalid sprintf
directives.","This will fix it complaining about %h and %z being invalid sprintf
directives.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1669,2022-02-06T15:59:34Z,,2022-02-15T10:37:25Z,OPEN,False,1,1,1,https://github.com/MasterDuke17,Define -D__USE_MINGW_ANSI_STDIO=1 for MinGW,1,[],https://github.com/MoarVM/MoarVM/pull/1669,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1669#issuecomment-1030869863,"This will fix it complaining about %h and %z being invalid sprintf
directives.","This is not better. Now there are tons of
src/core/nativecall.h: In function 'MVM_nativecall_find_thread_context':
src/core/nativecall.h:145:22: warning: unknown conversion type character 'l' in format [-Wformat=]
         MVM_panic(1, ""native callback ran on thread (%""PRId64"") unknown to MoarVM"",",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1670,2022-02-11T13:21:52Z,2022-02-11T13:42:36Z,2022-02-11T13:42:36Z,MERGED,True,100,2,3,https://github.com/jdv,2022.020 release,3,[],https://github.com/MoarVM/MoarVM/pull/1670,https://github.com/jdv,1,https://github.com/MoarVM/MoarVM/pull/1670,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1671,2022-02-12T10:07:23Z,,2022-03-06T20:22:43Z,OPEN,False,0,3,1,https://github.com/nwc10,Remove temporary define for migrating Rakudo extops,1,[],https://github.com/MoarVM/MoarVM/pull/1671,https://github.com/nwc10,1,https://github.com/MoarVM/MoarVM/pull/1671,"This reverts commit 776a1e3 which is no longer needed, as the C code in Rakudo was updated as part of commit rakudo/rakudo@969ae326d9bca4e4","This reverts commit 776a1e3 which is no longer needed, as the C code in Rakudo was updated as part of commit rakudo/rakudo@969ae326d9bca4e4",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1672,2022-02-15T09:52:34Z,2022-02-22T09:56:18Z,2022-02-22T09:56:20Z,MERGED,True,1,1,1,https://github.com/MasterDuke17,Bump mimalloc to v2.0.5,1,[],https://github.com/MoarVM/MoarVM/pull/1672,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1672,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
microsoft/mimalloc@v2.0.3...v2.0.5","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
microsoft/mimalloc@v2.0.3...v2.0.5",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1673,2022-02-22T11:38:41Z,2022-03-06T20:31:33Z,2022-03-06T20:31:34Z,MERGED,True,54,64,4,https://github.com/MasterDuke17,Fix potential invalid free in nativecall,2,[],https://github.com/MoarVM/MoarVM/pull/1673,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1673,"When using mimalloc this particular memory comes from libc's malloc(), so
we have to use libc's free().","When using mimalloc this particular memory comes from libc's malloc(), so
we have to use libc's free().",True,{'THUMBS_UP': ['https://github.com/zhuomingliang']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1674,2022-02-22T21:09:03Z,2022-02-23T21:57:48Z,2022-02-23T21:57:50Z,MERGED,True,0,1,1,https://github.com/MasterDuke17,The result of a getenv() call should not be freed,1,[],https://github.com/MoarVM/MoarVM/pull/1674,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1674,"""The string pointed to by the return value of getenv() may be statically
allocated, and can be modified by a subsequent call to getenv(), putenv(3),
setenv(3), or unsetenv(3)."" - man 3 getenv","""The string pointed to by the return value of getenv() may be statically
allocated, and can be modified by a subsequent call to getenv(), putenv(3),
setenv(3), or unsetenv(3)."" - man 3 getenv",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1674,2022-02-22T21:09:03Z,2022-02-23T21:57:48Z,2022-02-23T21:57:50Z,MERGED,True,0,1,1,https://github.com/MasterDuke17,The result of a getenv() call should not be freed,1,[],https://github.com/MoarVM/MoarVM/pull/1674,https://github.com/patrickbkr,2,https://github.com/MoarVM/MoarVM/pull/1674#issuecomment-1048540803,"""The string pointed to by the return value of getenv() may be statically
allocated, and can be modified by a subsequent call to getenv(), putenv(3),
setenv(3), or unsetenv(3)."" - man 3 getenv",Out of interest: Was there a misbehavior that led to this finding or did you just happpen to notice?,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1674,2022-02-22T21:09:03Z,2022-02-23T21:57:48Z,2022-02-23T21:57:50Z,MERGED,True,0,1,1,https://github.com/MasterDuke17,The result of a getenv() call should not be freed,1,[],https://github.com/MoarVM/MoarVM/pull/1674,https://github.com/MasterDuke17,3,https://github.com/MoarVM/MoarVM/pull/1674#issuecomment-1048581087,"""The string pointed to by the return value of getenv() may be statically
allocated, and can be modified by a subsequent call to getenv(), putenv(3),
setenv(3), or unsetenv(3)."" - man 3 getenv","@coke has been experiencing some invalid frees on windows that go away
when MoarVM is compiled with `--no-mimalloc`, so I was investigating
anywhere we free stuff inside `#ifdef WIN32`s.
…
On Wed, Feb 23, 2022 at 8:23 AM Patrick Böker ***@***.***> wrote:
 Out of interest: Was there a misbehavior that led to this finding or did
 you just happpen to notice?

 —
 Reply to this email directly, view it on GitHub
 <#1674 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ACOHYUODMMBJXSEEXPJIUITU4SKOZANCNFSM5PCQ57VA>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.

 You are receiving this because you authored the thread.Message ID:
 ***@***.***>",True,"{'THUMBS_UP': ['https://github.com/patrickbkr', 'https://github.com/coke']}"
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1676,2022-03-03T10:15:58Z,2022-03-04T18:31:15Z,2022-03-04T22:42:16Z,MERGED,True,118,4,5,https://github.com/MasterDuke17,Jit even more *_u versions of ops,1,[],https://github.com/MoarVM/MoarVM/pull/1676,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1676,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
Gets rid of some bails I randomly saw.","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
Gets rid of some bails I randomly saw.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1677,2022-03-03T11:00:05Z,2022-03-03T11:37:19Z,2022-03-03T11:37:20Z,MERGED,True,4,2,1,https://github.com/MasterDuke17,Root orig since MVM_frame_capturelex can allocate,1,[],https://github.com/MoarVM/MoarVM/pull/1677,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1677,Found by the check-roots gcc plugin.,Found by the check-roots gcc plugin.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1678,2022-03-03T14:40:16Z,2022-03-05T07:43:06Z,2022-03-05T20:24:53Z,MERGED,True,41,16,4,https://github.com/MasterDuke17,Some nativeref optimizations and fixes,5,[],https://github.com/MoarVM/MoarVM/pull/1678,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1678,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
I struggled to find a benchmark, but my uint $a = 0; my uint $b; my uint $c; my uint $d; while $a++ < 10_000_000 { $b = $a; $c = $b; $d = $c; }; say now - INIT now; say($a); say($b); say($c); say($d) before was ~1.25s and after was ~1.19s and callgrind reported ~10m fewer instructions. A spesh log confirmed that decont_u was being devirtualized before and double-devirtualized after.","NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
I struggled to find a benchmark, but my uint $a = 0; my uint $b; my uint $c; my uint $d; while $a++ < 10_000_000 { $b = $a; $c = $b; $d = $c; }; say now - INIT now; say($a); say($b); say($c); say($d) before was ~1.25s and after was ~1.19s and callgrind reported ~10m fewer instructions. A spesh log confirmed that decont_u was being devirtualized before and double-devirtualized after.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1678,2022-03-03T14:40:16Z,2022-03-05T07:43:06Z,2022-03-05T20:24:53Z,MERGED,True,41,16,4,https://github.com/MasterDuke17,Some nativeref optimizations and fixes,5,[],https://github.com/MoarVM/MoarVM/pull/1678,https://github.com/niner,2,https://github.com/MoarVM/MoarVM/pull/1678#issuecomment-1059446189,"NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
I struggled to find a benchmark, but my uint $a = 0; my uint $b; my uint $c; my uint $d; while $a++ < 10_000_000 { $b = $a; $c = $b; $d = $c; }; say now - INIT now; say($a); say($b); say($c); say($d) before was ~1.25s and after was ~1.19s and callgrind reported ~10m fewer instructions. A spesh log confirmed that decont_u was being devirtualized before and double-devirtualized after.","My change request isn't super important, but if you have the time, it'd be nice. Otherwise I'm glad those FIXMEs slowly disappear :)",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1679,2022-03-03T15:22:59Z,2022-03-04T18:28:24Z,2022-03-04T22:17:20Z,MERGED,True,5,0,1,https://github.com/MasterDuke17,Restore jitting of sp_getarg_[inso],1,[],https://github.com/MoarVM/MoarVM/pull/1679,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1679,"These appear to have been accidentally removed in
3f6ffa1 (which didn't remove their
implementation in emic.dasc).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. A random spesh log now no longer shows a JIT: bailed completely in find_method because of sp_getarg_i","These appear to have been accidentally removed in
3f6ffa1 (which didn't remove their
implementation in emic.dasc).
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest. A random spesh log now no longer shows a JIT: bailed completely in find_method because of sp_getarg_i",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1680,2022-03-04T18:23:07Z,2022-03-05T17:49:51Z,2022-03-05T17:49:51Z,MERGED,True,960,441,21,https://github.com/niner,Fix all returned native integers getting treated as signed,3,[],https://github.com/MoarVM/MoarVM/pull/1680,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1680,,,True,{'HEART': ['https://github.com/JJ']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1681,2022-03-06T22:47:06Z,2022-03-07T07:24:52Z,2022-03-07T20:12:42Z,MERGED,True,88,3,1,https://github.com/MasterDuke17,Fix spesh of named uint parameters,1,[],https://github.com/MoarVM/MoarVM/pull/1681,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1681,"Handle the newly added *_u versions of named parameters ops. Now
something like sub a(uint :$a!) { $a ?? $a + 1 !! 0 }; my uint $a = 1; for ^1_000_000 { $a = a(:$a); }; say $a; no longer dies with Unexpected named argument 'a' passed, even though it finishes fine with a smaller
number of iterations in the loop.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
I had a version of this that added hllboxtype_u and sp_getargs_u ops, but those caused sigkills in the NQP build and I'm not sure why. This does fix the problematic example given above, but I'm not sure if hllboxtype_u and sp_getargs_u really should be added and used.","Handle the newly added *_u versions of named parameters ops. Now
something like sub a(uint :$a!) { $a ?? $a + 1 !! 0 }; my uint $a = 1; for ^1_000_000 { $a = a(:$a); }; say $a; no longer dies with Unexpected named argument 'a' passed, even though it finishes fine with a smaller
number of iterations in the loop.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.
I had a version of this that added hllboxtype_u and sp_getargs_u ops, but those caused sigkills in the NQP build and I'm not sure why. This does fix the problematic example given above, but I'm not sure if hllboxtype_u and sp_getargs_u really should be added and used.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1682,2022-03-08T00:12:51Z,2022-03-08T07:47:29Z,2022-03-08T08:59:02Z,MERGED,True,3,0,1,https://github.com/MasterDuke17,Add missing _u cases to disp program callsite code,1,[],https://github.com/MoarVM/MoarVM/pull/1682,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1682,"Fixes the MoarVM panic: Unknown dispatch op when resolving callsite in
HTTP::HPACK.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Fixes the MoarVM panic: Unknown dispatch op when resolving callsite in
HTTP::HPACK.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1683,2022-03-08T20:58:42Z,2022-03-08T23:12:09Z,2022-03-08T23:12:11Z,MERGED,True,2,6,1,https://github.com/MasterDuke17,Fix speshing of param_on_o when we can coerce the arg,1,[],https://github.com/MoarVM/MoarVM/pull/1683,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1683,"Before, spesh wasn't turning it into an sp_* op, and then since it can't
be jitted either it was causing a bail.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest (even with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1). This example sub a(:$a) { $a ?? $a + 1 !! 0 }; my int $a = 1; for ^10_000_000 { $a = a(:$a); }; say now - INIT now; say $a; drops from ~1.66s to ~1.55s with MVM_SPESH_BLOCKING=1.","Before, spesh wasn't turning it into an sp_* op, and then since it can't
be jitted either it was causing a bail.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest (even with MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1). This example sub a(:$a) { $a ?? $a + 1 !! 0 }; my int $a = 1; for ^10_000_000 { $a = a(:$a); }; say now - INIT now; say $a; drops from ~1.66s to ~1.55s with MVM_SPESH_BLOCKING=1.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1684,2022-03-13T16:06:48Z,2022-03-13T16:15:08Z,2022-03-13T16:21:07Z,MERGED,True,1,1,1,https://github.com/usev6,Fix typo in comment,1,[],https://github.com/MoarVM/MoarVM/pull/1684,https://github.com/usev6,1,https://github.com/MoarVM/MoarVM/pull/1684,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1685,2022-03-13T23:11:36Z,,2022-03-17T11:49:08Z,OPEN,False,46,203,11,https://github.com/MasterDuke17,Use JFS64 instead of TinyMT64 as our PRNG,2,[],https://github.com/MoarVM/MoarVM/pull/1685,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1685,"The Mersenne Twister is now a bit outdated and there are alternatives
that are both faster and have better statistical properties.
my num $r; my int $i := 0; my int $s := nqp::time; $r := nqp::rand_n(1e8) while $i++ < 100_000_000; say(nqp::div_n(nqp::time - $s, 1000000000e0)); say($r) drops from ~0.58s to ~0.48s (with MVM_SPESH_BLOCKING=1).","The Mersenne Twister is now a bit outdated and there are alternatives
that are both faster and have better statistical properties.
my num $r; my int $i := 0; my int $s := nqp::time; $r := nqp::rand_n(1e8) while $i++ < 100_000_000; say(nqp::div_n(nqp::time - $s, 1000000000e0)); say($r) drops from ~0.58s to ~0.48s (with MVM_SPESH_BLOCKING=1).",True,{'THUMBS_UP': ['https://github.com/lizmat']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1685,2022-03-13T23:11:36Z,,2022-03-17T11:49:08Z,OPEN,False,46,203,11,https://github.com/MasterDuke17,Use JFS64 instead of TinyMT64 as our PRNG,2,[],https://github.com/MoarVM/MoarVM/pull/1685,https://github.com/MasterDuke17,2,https://github.com/MoarVM/MoarVM/pull/1685#issuecomment-1067854363,"The Mersenne Twister is now a bit outdated and there are alternatives
that are both faster and have better statistical properties.
my num $r; my int $i := 0; my int $s := nqp::time; $r := nqp::rand_n(1e8) while $i++ < 100_000_000; say(nqp::div_n(nqp::time - $s, 1000000000e0)); say($r) drops from ~0.58s to ~0.48s (with MVM_SPESH_BLOCKING=1).","@nwc10 it looks like the fails are all on Windows (MSVC + MinGW). I think the only Windows-specific bit is https://github.com/MoarVM/MoarVM/pull/1685/files#diff-e4b5afce4611608fd85a5a5579c1a585e34a2b43573725201841976980f84f6dR9-R17, any idea why we'd have a problem with it?",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1686,2022-03-17T16:11:10Z,2022-03-17T21:05:50Z,2022-03-17T21:05:51Z,MERGED,True,10,9,1,https://github.com/MasterDuke17,Correctly allocate/free CStrs when using mimalloc,1,[],https://github.com/MoarVM/MoarVM/pull/1686,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1686,,,True,{'THUMBS_UP': ['https://github.com/coke']}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1686,2022-03-17T16:11:10Z,2022-03-17T21:05:50Z,2022-03-17T21:05:51Z,MERGED,True,10,9,1,https://github.com/MasterDuke17,Correctly allocate/free CStrs when using mimalloc,1,[],https://github.com/MoarVM/MoarVM/pull/1686,https://github.com/coke,2,https://github.com/MoarVM/MoarVM/pull/1686#issuecomment-1071251103,,This fixes the difficult to golf issue I had on windows that occurred using mimalloc.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1687,2022-03-20T17:07:24Z,2022-03-20T17:22:23Z,2022-03-20T17:22:23Z,MERGED,True,31,1,2,https://github.com/jdv,2022.03 release,1,[],https://github.com/MoarVM/MoarVM/pull/1687,https://github.com/jdv,1,https://github.com/MoarVM/MoarVM/pull/1687,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1689,2022-03-21T11:55:40Z,2022-03-26T11:59:08Z,2022-03-26T11:59:08Z,MERGED,True,1,1,1,https://github.com/dogbert17,Update libuv to version 1.44.1,1,[],https://github.com/MoarVM/MoarVM/pull/1689,https://github.com/dogbert17,1,https://github.com/MoarVM/MoarVM/pull/1689,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1690,2022-03-22T22:00:41Z,2022-04-01T20:27:04Z,2022-04-01T20:27:49Z,MERGED,True,8,0,2,https://github.com/MasterDuke17,Mimalloc should only release memory to the OS at exit if --full-cleanup was used,1,[],https://github.com/MoarVM/MoarVM/pull/1690,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1690,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1694,2022-03-25T22:19:07Z,2022-03-26T19:49:54Z,2022-03-26T19:49:55Z,MERGED,True,7,7,1,https://github.com/MasterDuke17,Fix sign comparison warnings in coerce_su implementation,1,[],https://github.com/MoarVM/MoarVM/pull/1694,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1694,"The implementation had been copied from coerce_si, which was based on
gcc's strtoll, so adjust it to be based on strtoull instead. GCC no longer gives these warnings:
src/core/coerce.c: In function ‘MVM_coerce_s_u’:
src/core/coerce.c:582:35: warning: comparison of integer expressions of different signedness: ‘MVMuint64’ {aka ‘long unsigned int’} and ‘long long int’ [-Wsign-compare]
  582 |             if (any < 0 || result > cutoff || (result == cutoff && c > cutlim))
      |                                   ^
src/core/coerce.c:582:55: warning: comparison of integer expressions of different signedness: ‘MVMuint64’ {aka ‘long unsigned int’} and ‘long long int’ [-Wsign-compare]
  582 |             if (any < 0 || result > cutoff || (result == cutoff && c > cutlim))
      |                                                       ^~
src/core/coerce.c:630:35: warning: comparison of integer expressions of different signedness: ‘MVMuint64’ {aka ‘long unsigned int’} and ‘long long int’ [-Wsign-compare]
  630 |             if (any < 0 || result > cutoff || (result == cutoff && ord > cutlim))
      |                                   ^
src/core/coerce.c:630:55: warning: comparison of integer expressions of different signedness: ‘MVMuint64’ {aka ‘long unsigned int’} and ‘long long int’ [-Wsign-compare]
  630 |             if (any < 0 || result > cutoff || (result == cutoff && ord > cutlim))
      |                                                       ^~","The implementation had been copied from coerce_si, which was based on
gcc's strtoll, so adjust it to be based on strtoull instead. GCC no longer gives these warnings:
src/core/coerce.c: In function ‘MVM_coerce_s_u’:
src/core/coerce.c:582:35: warning: comparison of integer expressions of different signedness: ‘MVMuint64’ {aka ‘long unsigned int’} and ‘long long int’ [-Wsign-compare]
  582 |             if (any < 0 || result > cutoff || (result == cutoff && c > cutlim))
      |                                   ^
src/core/coerce.c:582:55: warning: comparison of integer expressions of different signedness: ‘MVMuint64’ {aka ‘long unsigned int’} and ‘long long int’ [-Wsign-compare]
  582 |             if (any < 0 || result > cutoff || (result == cutoff && c > cutlim))
      |                                                       ^~
src/core/coerce.c:630:35: warning: comparison of integer expressions of different signedness: ‘MVMuint64’ {aka ‘long unsigned int’} and ‘long long int’ [-Wsign-compare]
  630 |             if (any < 0 || result > cutoff || (result == cutoff && ord > cutlim))
      |                                   ^
src/core/coerce.c:630:55: warning: comparison of integer expressions of different signedness: ‘MVMuint64’ {aka ‘long unsigned int’} and ‘long long int’ [-Wsign-compare]
  630 |             if (any < 0 || result > cutoff || (result == cutoff && ord > cutlim))
      |                                                       ^~",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1695,2022-03-29T16:57:30Z,2022-04-03T08:43:33Z,2022-04-03T08:43:33Z,MERGED,True,34,3,1,https://github.com/niner,Fix misspesh of native calls,3,[],https://github.com/MoarVM/MoarVM/pull/1695,https://github.com/niner,1,https://github.com/MoarVM/MoarVM/pull/1695,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1696,2022-04-01T11:58:35Z,2022-04-01T12:53:17Z,2022-04-01T12:53:19Z,MERGED,True,3,0,1,https://github.com/MasterDuke17,JIT atposref_u + getattrref_u,1,[],https://github.com/MoarVM/MoarVM/pull/1696,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1696,"Fixes some bails seen in a spesh log.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.","Fixes some bails seen in a spesh log.
NQP builds ok and passes make m-test and Rakudo builds ok and passes make m-test m-spectest.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1697,2022-04-06T11:44:43Z,2022-04-06T11:52:48Z,2022-04-06T11:52:50Z,MERGED,True,3,0,1,https://github.com/MasterDuke17,Add write_uint16_at method to MAST::Bytecode,1,[],https://github.com/MoarVM/MoarVM/pull/1697,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1697,Needed for Raku/nqp#768.,Needed for Raku/nqp#768.,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1699,2022-04-10T20:25:10Z,2022-04-10T21:57:14Z,2022-04-10T21:57:18Z,MERGED,True,12,3,1,https://github.com/MasterDuke17,Take stdatomic.h probe into account in decision whether or not to use c11 atomics ,1,[],https://github.com/MoarVM/MoarVM/pull/1699,https://github.com/MasterDuke17,1,https://github.com/MoarVM/MoarVM/pull/1699,"Had to move the probe earlier, and then also some of the ldlib setup code.","Had to move the probe earlier, and then also some of the ldlib setup code.",True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1701,2022-04-24T14:57:33Z,2022-04-24T15:08:22Z,2022-04-24T15:08:22Z,MERGED,True,22,1,2,https://github.com/jdv,2022.04 release,1,[],https://github.com/MoarVM/MoarVM/pull/1701,https://github.com/jdv,1,https://github.com/MoarVM/MoarVM/pull/1701,,,True,{}
MoarVM/MoarVM,https://github.com/MoarVM/MoarVM,1705,2022-05-24T03:44:45Z,,2022-05-30T10:07:01Z,OPEN,False,4,0,1,https://github.com/barracuda156,"Add definition of AI_NUMERICSERV, fixes build on MacOS 10.6 for ppc",1,[],https://github.com/MoarVM/MoarVM/pull/1705,https://github.com/barracuda156,1,https://github.com/MoarVM/MoarVM/pull/1705,"This fixes a build on 10.6 for ppc and closes my own ticket: #1704
The fix is borrowed from graphviz code: https://gitlab.com/graphviz/graphviz/-/blob/main/cmd/lefty/os/unix/io.c
See also: https://trac.macports.org/ticket/41916","This fixes a build on 10.6 for ppc and closes my own ticket: #1704
The fix is borrowed from graphviz code: https://gitlab.com/graphviz/graphviz/-/blob/main/cmd/lefty/os/unix/io.c
See also: https://trac.macports.org/ticket/41916",True,{}
