pocl/pocl,https://github.com/pocl/pocl,303,2016-03-01T11:40:34Z,2016-03-03T22:25:08Z,2016-04-19T11:33:47Z,MERGED,True,2230,1036,56,https://github.com/franz,Rjodin master,85,[],https://github.com/pocl/pocl/pull/303,https://github.com/franz,1,https://github.com/pocl/pocl/pull/303,"This includes everything from rjodin's pull request
Pocl proper binary format : poclcc #299
plus my work on top of it.
Notable changes:

should work with any device, not just pthread
compilation happens in clBuildProgram (note this slows it down quite a bit)
LLVM IR binaries and machine code binaries may be freely mixed in clCreateProgramWithBinary() calls
the pocl binary format now contains a ""tar"" of every pocl cache kernel directory of the program, plus program.bc
fixes a bug where local_size{x,y,z} were int32_t not size_t variables
workarounds a bug in LLVM where global AS is dropped from opencl.imageX_t
fixes SPIR","This includes everything from rjodin's pull request
Pocl proper binary format : poclcc #299
plus my work on top of it.
Notable changes:

should work with any device, not just pthread
compilation happens in clBuildProgram (note this slows it down quite a bit)
LLVM IR binaries and machine code binaries may be freely mixed in clCreateProgramWithBinary() calls
the pocl binary format now contains a ""tar"" of every pocl cache kernel directory of the program, plus program.bc
fixes a bug where local_size{x,y,z} were int32_t not size_t variables
workarounds a bug in LLVM where global AS is dropped from opencl.imageX_t
fixes SPIR",True,{}
pocl/pocl,https://github.com/pocl/pocl,303,2016-03-01T11:40:34Z,2016-03-03T22:25:08Z,2016-04-19T11:33:47Z,MERGED,True,2230,1036,56,https://github.com/franz,Rjodin master,85,[],https://github.com/pocl/pocl/pull/303,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/303#issuecomment-190759341,"This includes everything from rjodin's pull request
Pocl proper binary format : poclcc #299
plus my work on top of it.
Notable changes:

should work with any device, not just pthread
compilation happens in clBuildProgram (note this slows it down quite a bit)
LLVM IR binaries and machine code binaries may be freely mixed in clCreateProgramWithBinary() calls
the pocl binary format now contains a ""tar"" of every pocl cache kernel directory of the program, plus program.bc
fixes a bug where local_size{x,y,z} were int32_t not size_t variables
workarounds a bug in LLVM where global AS is dropped from opencl.imageX_t
fixes SPIR","Good job @franz and @rjodin . Getting close to a mergeable form.   @franz can you please check the style issues, the use of 'tar' in the names (it's not in tar format it seems, but our own like planned) and other smaller issues. I'll test here.",True,{}
pocl/pocl,https://github.com/pocl/pocl,303,2016-03-01T11:40:34Z,2016-03-03T22:25:08Z,2016-04-19T11:33:47Z,MERGED,True,2230,1036,56,https://github.com/franz,Rjodin master,85,[],https://github.com/pocl/pocl/pull/303,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/303#issuecomment-190765757,"This includes everything from rjodin's pull request
Pocl proper binary format : poclcc #299
plus my work on top of it.
Notable changes:

should work with any device, not just pthread
compilation happens in clBuildProgram (note this slows it down quite a bit)
LLVM IR binaries and machine code binaries may be freely mixed in clCreateProgramWithBinary() calls
the pocl binary format now contains a ""tar"" of every pocl cache kernel directory of the program, plus program.bc
fixes a bug where local_size{x,y,z} were int32_t not size_t variables
workarounds a bug in LLVM where global AS is dropped from opencl.imageX_t
fixes SPIR","Oh, CHANGES needs a new entry too.",True,{}
pocl/pocl,https://github.com/pocl/pocl,303,2016-03-01T11:40:34Z,2016-03-03T22:25:08Z,2016-04-19T11:33:47Z,MERGED,True,2230,1036,56,https://github.com/franz,Rjodin master,85,[],https://github.com/pocl/pocl/pull/303,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/303#issuecomment-190776351,"This includes everything from rjodin's pull request
Pocl proper binary format : poclcc #299
plus my work on top of it.
Notable changes:

should work with any device, not just pthread
compilation happens in clBuildProgram (note this slows it down quite a bit)
LLVM IR binaries and machine code binaries may be freely mixed in clCreateProgramWithBinary() calls
the pocl binary format now contains a ""tar"" of every pocl cache kernel directory of the program, plus program.bc
fixes a bug where local_size{x,y,z} were int32_t not size_t variables
workarounds a bug in LLVM where global AS is dropped from opencl.imageX_t
fixes SPIR","autotools-based build fails:
poclcc.o: In function `main':
poclcc.c:(.text.startup+0x242): undefined reference to `CHECK_CL_ERROR'
poclcc.c:(.text.startup+0x26a): undefined reference to `CHECK_CL_ERROR'
poclcc.c:(.text.startup+0x2ca): undefined reference to `CHECK_CL_ERROR2'
poclcc.c:(.text.startup+0x2f6): undefined reference to `CHECK_CL_ERROR2'
poclcc.c:(.text.startup+0x318): undefined reference to `CHECK_CL_ERROR'
poclcc.c:(.text.startup+0x33b): undefined reference to `CHECK_CL_ERROR'
poclcc.c:(.text.startup+0x376): undefined reference to `CHECK_CL_ERROR'
poclcc.c:(.text.startup+0x387): undefined reference to `CHECK_CL_ERROR'
poclcc.c:(.text.startup+0x398): undefined reference to `CHECK_CL_ERROR'
poclcc.c:(.text.startup+0x4aa): undefined reference to `CHECK_CL_ERROR2'
poclcc.c:(.text.startup+0x4fe): undefined reference to `CHECK_CL_ERROR'
poclcc.c:(.text.startup+0x547): undefined reference to `CHECK_CL_ERROR'",True,{}
pocl/pocl,https://github.com/pocl/pocl,303,2016-03-01T11:40:34Z,2016-03-03T22:25:08Z,2016-04-19T11:33:47Z,MERGED,True,2230,1036,56,https://github.com/franz,Rjodin master,85,[],https://github.com/pocl/pocl/pull/303,https://github.com/rjodin,5,https://github.com/pocl/pocl/pull/303#issuecomment-191678101,"This includes everything from rjodin's pull request
Pocl proper binary format : poclcc #299
plus my work on top of it.
Notable changes:

should work with any device, not just pthread
compilation happens in clBuildProgram (note this slows it down quite a bit)
LLVM IR binaries and machine code binaries may be freely mixed in clCreateProgramWithBinary() calls
the pocl binary format now contains a ""tar"" of every pocl cache kernel directory of the program, plus program.bc
fixes a bug where local_size{x,y,z} were int32_t not size_t variables
workarounds a bug in LLVM where global AS is dropped from opencl.imageX_t
fixes SPIR","local_size variable of pocl_context needs to be setup (before running a program create from binary) to have it working on any devices.
At the moment it is done only for basic and pthread.",True,{}
pocl/pocl,https://github.com/pocl/pocl,303,2016-03-01T11:40:34Z,2016-03-03T22:25:08Z,2016-04-19T11:33:47Z,MERGED,True,2230,1036,56,https://github.com/franz,Rjodin master,85,[],https://github.com/pocl/pocl/pull/303,https://github.com/rjodin,6,https://github.com/pocl/pocl/pull/303#issuecomment-191679650,"This includes everything from rjodin's pull request
Pocl proper binary format : poclcc #299
plus my work on top of it.
Notable changes:

should work with any device, not just pthread
compilation happens in clBuildProgram (note this slows it down quite a bit)
LLVM IR binaries and machine code binaries may be freely mixed in clCreateProgramWithBinary() calls
the pocl binary format now contains a ""tar"" of every pocl cache kernel directory of the program, plus program.bc
fixes a bug where local_size{x,y,z} were int32_t not size_t variables
workarounds a bug in LLVM where global AS is dropped from opencl.imageX_t
fixes SPIR","Why are we generating the binary with dynamic local size everytime?
I don't understand what is the gain of moving the generation from ""clGetProgramInfo"" to ""clBuildProgram"".",True,{}
pocl/pocl,https://github.com/pocl/pocl,303,2016-03-01T11:40:34Z,2016-03-03T22:25:08Z,2016-04-19T11:33:47Z,MERGED,True,2230,1036,56,https://github.com/franz,Rjodin master,85,[],https://github.com/pocl/pocl/pull/303,https://github.com/franz,7,https://github.com/pocl/pocl/pull/303#issuecomment-191710412,"This includes everything from rjodin's pull request
Pocl proper binary format : poclcc #299
plus my work on top of it.
Notable changes:

should work with any device, not just pthread
compilation happens in clBuildProgram (note this slows it down quite a bit)
LLVM IR binaries and machine code binaries may be freely mixed in clCreateProgramWithBinary() calls
the pocl binary format now contains a ""tar"" of every pocl cache kernel directory of the program, plus program.bc
fixes a bug where local_size{x,y,z} were int32_t not size_t variables
workarounds a bug in LLVM where global AS is dropped from opencl.imageX_t
fixes SPIR","local_size variable of pocl_context needs to be setup

Not quite true; this applies to pthread & basic devices, but may not apply for others. For example HSA device does not use almost anything from pocl_context.",True,{}
pocl/pocl,https://github.com/pocl/pocl,303,2016-03-01T11:40:34Z,2016-03-03T22:25:08Z,2016-04-19T11:33:47Z,MERGED,True,2230,1036,56,https://github.com/franz,Rjodin master,85,[],https://github.com/pocl/pocl/pull/303,https://github.com/franz,8,https://github.com/pocl/pocl/pull/303#issuecomment-191750660,"This includes everything from rjodin's pull request
Pocl proper binary format : poclcc #299
plus my work on top of it.
Notable changes:

should work with any device, not just pthread
compilation happens in clBuildProgram (note this slows it down quite a bit)
LLVM IR binaries and machine code binaries may be freely mixed in clCreateProgramWithBinary() calls
the pocl binary format now contains a ""tar"" of every pocl cache kernel directory of the program, plus program.bc
fixes a bug where local_size{x,y,z} were int32_t not size_t variables
workarounds a bug in LLVM where global AS is dropped from opencl.imageX_t
fixes SPIR","Why are we generating the binary with dynamic local size everytime?

Good point. Working on a fix",True,{}
pocl/pocl,https://github.com/pocl/pocl,304,2016-03-10T13:52:54Z,2016-03-16T21:18:38Z,2016-03-16T21:18:38Z,MERGED,True,4294,1737,92,https://github.com/vkorhonen,OoO-framework to publish,33,[],https://github.com/pocl/pocl/pull/304,https://github.com/vkorhonen,1,https://github.com/pocl/pocl/pull/304,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,304,2016-03-10T13:52:54Z,2016-03-16T21:18:38Z,2016-03-16T21:18:38Z,MERGED,True,4294,1737,92,https://github.com/vkorhonen,OoO-framework to publish,33,[],https://github.com/pocl/pocl/pull/304,https://github.com/rjodin,2,https://github.com/pocl/pocl/pull/304#issuecomment-196722427,,All good to me,True,{}
pocl/pocl,https://github.com/pocl/pocl,305,2016-03-11T08:57:27Z,2016-03-11T10:11:32Z,2016-03-11T10:11:32Z,MERGED,True,1,0,1,https://github.com/clementleger,Add missing header file for tracing,1,[],https://github.com/pocl/pocl/pull/305,https://github.com/clementleger,1,https://github.com/pocl/pocl/pull/305,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,309,2016-03-14T09:59:06Z,2016-03-31T16:44:38Z,2017-02-02T08:57:43Z,MERGED,True,1053,563,18,https://github.com/rjodin,POCL without llvm,26,[],https://github.com/pocl/pocl/pull/309,https://github.com/rjodin,1,https://github.com/pocl/pocl/pull/309,"Works for both build configuration (autogen + configure / cmake)
Every changes are under the macro OCS_AVAILABLE (online compiler support)
The offline compiler support version of POCL works only on Linux as I'm not using LLVMFileUtils.cc.","Works for both build configuration (autogen + configure / cmake)
Every changes are under the macro OCS_AVAILABLE (online compiler support)
The offline compiler support version of POCL works only on Linux as I'm not using LLVMFileUtils.cc.",True,{}
pocl/pocl,https://github.com/pocl/pocl,309,2016-03-14T09:59:06Z,2016-03-31T16:44:38Z,2017-02-02T08:57:43Z,MERGED,True,1053,563,18,https://github.com/rjodin,POCL without llvm,26,[],https://github.com/pocl/pocl/pull/309,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/309#issuecomment-196356123,"Works for both build configuration (autogen + configure / cmake)
Every changes are under the macro OCS_AVAILABLE (online compiler support)
The offline compiler support version of POCL works only on Linux as I'm not using LLVMFileUtils.cc.","make
Makefile:1050: *** missing separator.  Stop.

This is from

if OCS_AVAILABLE
  if !POCL_ANDROID
    SUBDIRS += bin examples tests
  endif
endif

It generates to
...
    tags tags-am uninstall uninstall-am uninstall-icdDATA \
    uninstall-pkgconfigDATA


  if !POCL_ANDROID
  endif

pocl.icd:
...

I don't believe you can have multiple levels of ifs inside Makefile.ams. Did you test this locally?",True,{}
pocl/pocl,https://github.com/pocl/pocl,309,2016-03-14T09:59:06Z,2016-03-31T16:44:38Z,2017-02-02T08:57:43Z,MERGED,True,1053,563,18,https://github.com/rjodin,POCL without llvm,26,[],https://github.com/pocl/pocl/pull/309,https://github.com/franz,3,https://github.com/pocl/pocl/pull/309#issuecomment-197249722,"Works for both build configuration (autogen + configure / cmake)
Every changes are under the macro OCS_AVAILABLE (online compiler support)
The offline compiler support version of POCL works only on Linux as I'm not using LLVMFileUtils.cc.","I reviewed most code, except the autotools parts.
Here are the commits:
https://github.com/franz/pocl/tree/pocl_without_llvm
Mostly fixes are just moving #ifdef  OCS_AVAILABLE to outside of functions which we don't need anyway for OCS-less builds, and some better error handling.
Still TODO:

autotools
cl_device_id->llvm_cpu and triplet - I see that you changed pocl_binary to use device->long_name instead of llvm_cpu/triplet for the device_hash field. I haven't checked whether all long names (HSA, TCE) are sane so this needs some consideration; @visit0r what do you think is device->long_name suitable for device_hash ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,309,2016-03-14T09:59:06Z,2016-03-31T16:44:38Z,2017-02-02T08:57:43Z,MERGED,True,1053,563,18,https://github.com/rjodin,POCL without llvm,26,[],https://github.com/pocl/pocl/pull/309,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/309#issuecomment-197258878,"Works for both build configuration (autogen + configure / cmake)
Every changes are under the macro OCS_AVAILABLE (online compiler support)
The offline compiler support version of POCL works only on Linux as I'm not using LLVMFileUtils.cc.","at do you think is device->long_name suitable for device_hash ?

It's not enough in TCE. TCE needs to add the contents of the ADF to identify an architecture. That's what the pocl_tce_build_hash() does.",True,{}
pocl/pocl,https://github.com/pocl/pocl,309,2016-03-14T09:59:06Z,2016-03-31T16:44:38Z,2017-02-02T08:57:43Z,MERGED,True,1053,563,18,https://github.com/rjodin,POCL without llvm,26,[],https://github.com/pocl/pocl/pull/309,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/309#issuecomment-197260983,"Works for both build configuration (autogen + configure / cmake)
Every changes are under the macro OCS_AVAILABLE (online compiler support)
The offline compiler support version of POCL works only on Linux as I'm not using LLVMFileUtils.cc.",...but it seems it's currently broken in master too. It probably now breaks if one tries to load a poclbin produced for an ADF A to ADF B?,True,{}
pocl/pocl,https://github.com/pocl/pocl,309,2016-03-14T09:59:06Z,2016-03-31T16:44:38Z,2017-02-02T08:57:43Z,MERGED,True,1053,563,18,https://github.com/rjodin,POCL without llvm,26,[],https://github.com/pocl/pocl/pull/309,https://github.com/franz,6,https://github.com/pocl/pocl/pull/309#issuecomment-197305503,"Works for both build configuration (autogen + configure / cmake)
Every changes are under the macro OCS_AVAILABLE (online compiler support)
The offline compiler support version of POCL works only on Linux as I'm not using LLVMFileUtils.cc.","I've attempted to fix it in my branch.
For host CPU, LLVM-less builds require manually specifying one additional build-time variable.
For TCE, device hash equals pocl_tce_build_hash() (== ADF file content hashed + extra options env var).
HSA has hardcoded device hashes for the 2 devices we recognize.",True,{}
pocl/pocl,https://github.com/pocl/pocl,311,2016-03-22T15:09:40Z,2016-03-31T16:44:38Z,2016-04-19T11:33:37Z,MERGED,True,1255,720,38,https://github.com/franz,Pocl without llvm,60,[],https://github.com/pocl/pocl/pull/311,https://github.com/franz,1,https://github.com/pocl/pocl/pull/311,Includes rjodin's stuff (PR 309),Includes rjodin's stuff (PR 309),True,{}
pocl/pocl,https://github.com/pocl/pocl,313,2016-03-24T12:47:18Z,2016-03-24T14:02:15Z,2016-03-24T14:02:15Z,MERGED,True,1,1,1,https://github.com/clementleger,Tracing: fix wrong tracer name,1,[],https://github.com/pocl/pocl/pull/313,https://github.com/clementleger,1,https://github.com/pocl/pocl/pull/313,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,319,2016-04-05T12:22:39Z,2016-04-06T09:22:00Z,2016-04-06T09:22:00Z,MERGED,True,234,42,4,https://github.com/vkorhonen,Dynamic localsize WG fix,3,[],https://github.com/pocl/pocl/pull/319,https://github.com/vkorhonen,1,https://github.com/pocl/pocl/pull/319,"Ditched the 3D array for context data, replaced with dynamic allocation.
Added xyz index transformation to linear index when accessing context data.","Ditched the 3D array for context data, replaced with dynamic allocation.
Added xyz index transformation to linear index when accessing context data.",True,{}
pocl/pocl,https://github.com/pocl/pocl,320,2016-04-05T15:31:37Z,2016-04-06T09:30:20Z,2016-04-06T09:30:20Z,MERGED,True,463,144,49,https://github.com/franz,Fixes,16,[],https://github.com/pocl/pocl/pull/320,https://github.com/franz,1,https://github.com/pocl/pocl/pull/320,"Various upcoming work on master, some of it is already backported to rel 0.13","Various upcoming work on master, some of it is already backported to rel 0.13",True,{}
pocl/pocl,https://github.com/pocl/pocl,326,2016-04-08T13:39:52Z,2016-04-11T11:55:47Z,2016-04-14T08:43:20Z,MERGED,True,7,0,1,https://github.com/dsandersllvm,"[mips] Avoid getHostCPUName(), 'generic' is not a valid -target-cpu value.",1,[],https://github.com/pocl/pocl/pull/326,https://github.com/dsandersllvm,1,https://github.com/pocl/pocl/pull/326,"The MIPS LLVM backend is not able to detect the host and returns 'generic'
this hasn't been a problem upstream but POCL feeds this value into the
-target-cpu option which rejects it. This causes almost all tests to fail.","The MIPS LLVM backend is not able to detect the host and returns 'generic'
this hasn't been a problem upstream but POCL feeds this value into the
-target-cpu option which rejects it. This causes almost all tests to fail.",True,{}
pocl/pocl,https://github.com/pocl/pocl,327,2016-04-14T09:00:28Z,2016-04-14T16:01:08Z,2016-04-14T16:01:08Z,MERGED,True,3,2,1,https://github.com/dsandersllvm,[buildbot] Allow buildslave-specific timeouts for 'make check',1,[],https://github.com/pocl/pocl/pull/327,https://github.com/dsandersllvm,1,https://github.com/pocl/pocl/pull/327,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,329,2016-04-23T08:46:58Z,2016-04-25T15:46:36Z,2016-04-25T15:46:36Z,MERGED,True,6,13,4,https://github.com/Oblomov,Device image info,2,[],https://github.com/pocl/pocl/pull/329,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/329,A couple of minor fixes for device properties about images.,A couple of minor fixes for device properties about images.,True,{}
pocl/pocl,https://github.com/pocl/pocl,329,2016-04-23T08:46:58Z,2016-04-25T15:46:36Z,2016-04-25T15:46:36Z,MERGED,True,6,13,4,https://github.com/Oblomov,Device image info,2,[],https://github.com/pocl/pocl/pull/329,https://github.com/franz,2,https://github.com/pocl/pocl/pull/329#issuecomment-214403767,A couple of minor fixes for device properties about images.,LGTM,True,{}
pocl/pocl,https://github.com/pocl/pocl,331,2016-04-28T11:19:04Z,2016-04-28T15:29:47Z,2016-04-28T15:29:47Z,MERGED,True,23,21,3,https://github.com/franz,make ttasim compatible with ALMAIF binaries,3,[],https://github.com/pocl/pocl/pull/331,https://github.com/franz,1,https://github.com/pocl/pocl/pull/331,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,334,2016-05-04T13:54:52Z,2016-05-06T14:59:50Z,2016-05-13T09:43:43Z,MERGED,True,1,1,1,https://github.com/jrprice,Use correct index for initialising device pointer structures,1,[],https://github.com/pocl/pocl/pull/334,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/334,This was causing crashes when multiple devices were being used.,This was causing crashes when multiple devices were being used.,True,{}
pocl/pocl,https://github.com/pocl/pocl,335,2016-05-04T14:06:18Z,2016-05-06T14:59:50Z,2016-05-13T09:43:38Z,MERGED,True,12,1,1,https://github.com/jrprice,Use alternative endian.h functions on OS X,1,[],https://github.com/pocl/pocl/pull/335,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/335,Fails to build for me on OS X otherwise.,Fails to build for me on OS X otherwise.,True,{}
pocl/pocl,https://github.com/pocl/pocl,337,2016-05-12T16:55:33Z,2016-05-17T15:35:08Z,2016-05-23T16:16:48Z,MERGED,True,5,1,1,https://github.com/jrprice,Use device triple instead of module triple for address space remapping,1,[],https://github.com/pocl/pocl/pull/337,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/337,"This should address issue #336 that I recently raised. The fix is to use the external currentPoclDevice handle that is also used by the Workgroup pass, and get the device target triple from this, instead of using the module's target triple.
This fixes SPIR consumption for a private backend that I'm working on and still works for x86, but I haven't been able to test any of the other non-flat address space targets such as TCE/HSA, so maybe worth a check on those platforms before merging.","This should address issue #336 that I recently raised. The fix is to use the external currentPoclDevice handle that is also used by the Workgroup pass, and get the device target triple from this, instead of using the module's target triple.
This fixes SPIR consumption for a private backend that I'm working on and still works for x86, but I haven't been able to test any of the other non-flat address space targets such as TCE/HSA, so maybe worth a check on those platforms before merging.",True,{}
pocl/pocl,https://github.com/pocl/pocl,339,2016-05-12T21:51:54Z,2016-05-13T06:57:17Z,2016-05-13T09:43:23Z,MERGED,True,1,1,1,https://github.com/jrprice,Fix typo preventing generation of vstore double in private memory,1,[],https://github.com/pocl/pocl/pull/339,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/339,This extra 't' caused me a surprisingly large amount of debugging time...,This extra 't' caused me a surprisingly large amount of debugging time...,True,{}
pocl/pocl,https://github.com/pocl/pocl,341,2016-05-13T19:28:29Z,2016-05-17T17:35:00Z,2016-05-17T17:35:00Z,MERGED,True,96,11,6,https://github.com/Oblomov,User event fixes,6,[],https://github.com/pocl/pocl/pull/341,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/341,"A collection of fixes for user event handling, including tests.","A collection of fixes for user event handling, including tests.",True,{}
pocl/pocl,https://github.com/pocl/pocl,344,2016-05-19T12:06:13Z,2016-05-19T13:42:05Z,2016-05-19T14:05:07Z,MERGED,True,2,0,1,https://github.com/jrprice,Update for LLVM trunk,1,[],https://github.com/pocl/pocl/pull/344,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/344,"This brings pocl up-to-date with LLVM trunk.
Most of the changes are relatively minor. The only two that I was a little unsure of are aa7534c and 8ef244b.
I tested with LLVM 3.8 on Linux and there were no regressions in the internal test-suite.
There was one test failure with LLVM trunk, which is test_clGetKernelArgInfo. The issue is that the definitions for write_imagef in _kernel_c.h don't include the write_only flag. I'm not sure how to resolve this - can the image function declarations be moved out of this C compatible header so that we can add the appropriate qualifiers?","This brings pocl up-to-date with LLVM trunk.
Most of the changes are relatively minor. The only two that I was a little unsure of are aa7534c and 8ef244b.
I tested with LLVM 3.8 on Linux and there were no regressions in the internal test-suite.
There was one test failure with LLVM trunk, which is test_clGetKernelArgInfo. The issue is that the definitions for write_imagef in _kernel_c.h don't include the write_only flag. I'm not sure how to resolve this - can the image function declarations be moved out of this C compatible header so that we can add the appropriate qualifiers?",True,{}
pocl/pocl,https://github.com/pocl/pocl,344,2016-05-19T12:06:13Z,2016-05-19T13:42:05Z,2016-05-19T14:05:07Z,MERGED,True,2,0,1,https://github.com/jrprice,Update for LLVM trunk,1,[],https://github.com/pocl/pocl/pull/344,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/344#issuecomment-220306706,"This brings pocl up-to-date with LLVM trunk.
Most of the changes are relatively minor. The only two that I was a little unsure of are aa7534c and 8ef244b.
I tested with LLVM 3.8 on Linux and there were no regressions in the internal test-suite.
There was one test failure with LLVM trunk, which is test_clGetKernelArgInfo. The issue is that the definitions for write_imagef in _kernel_c.h don't include the write_only flag. I'm not sure how to resolve this - can the image function declarations be moved out of this C compatible header so that we can add the appropriate qualifiers?","Looks fine. Can you add the LLVM/Clang revision it was tested with to the INSTALL file or somewhere? It used to be listed Somewhere, but cannot find. It helps to know a tested revision to start with when someone again ports to the latest revision some day.",True,{}
pocl/pocl,https://github.com/pocl/pocl,344,2016-05-19T12:06:13Z,2016-05-19T13:42:05Z,2016-05-19T14:05:07Z,MERGED,True,2,0,1,https://github.com/jrprice,Update for LLVM trunk,1,[],https://github.com/pocl/pocl/pull/344,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/344#issuecomment-220307185,"This brings pocl up-to-date with LLVM trunk.
Most of the changes are relatively minor. The only two that I was a little unsure of are aa7534c and 8ef244b.
I tested with LLVM 3.8 on Linux and there were no regressions in the internal test-suite.
There was one test failure with LLVM trunk, which is test_clGetKernelArgInfo. The issue is that the definitions for write_imagef in _kernel_c.h don't include the write_only flag. I'm not sure how to resolve this - can the image function declarations be moved out of this C compatible header so that we can add the appropriate qualifiers?","Quickly looking, yes, the image func declarations could be moved to a .cl header as long as the definitions are in C so they can use the actual pocl-specific default image struct in implementation.",True,{}
pocl/pocl,https://github.com/pocl/pocl,345,2016-05-21T16:20:35Z,2016-05-23T17:01:05Z,2016-05-23T17:02:18Z,MERGED,True,92,3,7,https://github.com/jrprice,Implement clSetMemObjectDestructorCallback,5,[],https://github.com/pocl/pocl/pull/345,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/345,"This just adds a simple linked-list of callbacks to the cl_mem struct, which are then fired in clReleaseMemObject when the ref count reaches zero.
Test case included.","This just adds a simple linked-list of callbacks to the cl_mem struct, which are then fired in clReleaseMemObject when the ref count reaches zero.
Test case included.",True,{}
pocl/pocl,https://github.com/pocl/pocl,345,2016-05-21T16:20:35Z,2016-05-23T17:01:05Z,2016-05-23T17:02:18Z,MERGED,True,92,3,7,https://github.com/jrprice,Implement clSetMemObjectDestructorCallback,5,[],https://github.com/pocl/pocl/pull/345,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/345#issuecomment-220901226,"This just adds a simple linked-list of callbacks to the cl_mem struct, which are then fired in clReleaseMemObject when the ref count reaches zero.
Test case included.","Apart from the couple of C coding style issues, looks good to me.",True,{}
pocl/pocl,https://github.com/pocl/pocl,345,2016-05-21T16:20:35Z,2016-05-23T17:01:05Z,2016-05-23T17:02:18Z,MERGED,True,92,3,7,https://github.com/jrprice,Implement clSetMemObjectDestructorCallback,5,[],https://github.com/pocl/pocl/pull/345,https://github.com/jrprice,3,https://github.com/pocl/pocl/pull/345#issuecomment-220916427,"This just adds a simple linked-list of callbacks to the cl_mem struct, which are then fired in clReleaseMemObject when the ref count reaches zero.
Test case included.","Pushed an update that should address the GNU C coding style issues, let me know if I missed anything.",True,{}
pocl/pocl,https://github.com/pocl/pocl,345,2016-05-21T16:20:35Z,2016-05-23T17:01:05Z,2016-05-23T17:02:18Z,MERGED,True,92,3,7,https://github.com/jrprice,Implement clSetMemObjectDestructorCallback,5,[],https://github.com/pocl/pocl/pull/345,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/345#issuecomment-220923891,"This just adds a simple linked-list of callbacks to the cl_mem struct, which are then fired in clReleaseMemObject when the ref count reaches zero.
Test case included.",A few more.,True,{}
pocl/pocl,https://github.com/pocl/pocl,345,2016-05-21T16:20:35Z,2016-05-23T17:01:05Z,2016-05-23T17:02:18Z,MERGED,True,92,3,7,https://github.com/jrprice,Implement clSetMemObjectDestructorCallback,5,[],https://github.com/pocl/pocl/pull/345,https://github.com/jrprice,5,https://github.com/pocl/pocl/pull/345#issuecomment-220926773,"This just adds a simple linked-list of callbacks to the cl_mem struct, which are then fired in clReleaseMemObject when the ref count reaches zero.
Test case included.",Done.,True,{}
pocl/pocl,https://github.com/pocl/pocl,346,2016-05-23T16:15:37Z,2016-05-23T18:25:51Z,2016-05-23T18:29:45Z,MERGED,True,82,0,3,https://github.com/jrprice,Implement prefetch builtin as no-op,2,[],https://github.com/pocl/pocl/pull/346,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/346,If a specific device wants to implement real software prefetch they can override this implementation.,If a specific device wants to implement real software prefetch they can override this implementation.,True,{}
pocl/pocl,https://github.com/pocl/pocl,346,2016-05-23T16:15:37Z,2016-05-23T18:25:51Z,2016-05-23T18:29:45Z,MERGED,True,82,0,3,https://github.com/jrprice,Implement prefetch builtin as no-op,2,[],https://github.com/pocl/pocl/pull/346,https://github.com/jrprice,2,https://github.com/pocl/pocl/pull/346#issuecomment-221031936,If a specific device wants to implement real software prefetch they can override this implementation.,Updated copyright message as requested.,True,{}
pocl/pocl,https://github.com/pocl/pocl,347,2016-05-23T16:23:39Z,2016-05-23T18:25:51Z,2016-05-23T18:29:39Z,MERGED,True,6,6,4,https://github.com/jrprice,Pass offset to driver unmapping routines,1,[],https://github.com/pocl/pocl/pull/347,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/347,This is required for any devices that don't have unified memory with the host CPU and therefore need to manually update device memory during an unmap operation.,This is required for any devices that don't have unified memory with the host CPU and therefore need to manually update device memory during an unmap operation.,True,{}
pocl/pocl,https://github.com/pocl/pocl,347,2016-05-23T16:23:39Z,2016-05-23T18:25:51Z,2016-05-23T18:29:39Z,MERGED,True,6,6,4,https://github.com/jrprice,Pass offset to driver unmapping routines,1,[],https://github.com/pocl/pocl/pull/347,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/347#issuecomment-221029164,This is required for any devices that don't have unified memory with the host CPU and therefore need to manually update device memory during an unmap operation.,Please update the other drivers also to include this parameter in their implementations.,True,{}
pocl/pocl,https://github.com/pocl/pocl,347,2016-05-23T16:23:39Z,2016-05-23T18:25:51Z,2016-05-23T18:29:39Z,MERGED,True,6,6,4,https://github.com/jrprice,Pass offset to driver unmapping routines,1,[],https://github.com/pocl/pocl/pull/347,https://github.com/jrprice,3,https://github.com/pocl/pocl/pull/347#issuecomment-221030012,This is required for any devices that don't have unified memory with the host CPU and therefore need to manually update device memory during an unmap operation.,"As far as I can tell the other drivers just use the basic implementation for unmapping, is this not the case?",True,{}
pocl/pocl,https://github.com/pocl/pocl,347,2016-05-23T16:23:39Z,2016-05-23T18:25:51Z,2016-05-23T18:29:39Z,MERGED,True,6,6,4,https://github.com/jrprice,Pass offset to driver unmapping routines,1,[],https://github.com/pocl/pocl/pull/347,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/347#issuecomment-221037980,This is required for any devices that don't have unified memory with the host CPU and therefore need to manually update device memory during an unmap operation.,"True. Except for TCE, which simply doesn't implement it ATM, I think.",True,{}
pocl/pocl,https://github.com/pocl/pocl,348,2016-05-23T21:49:41Z,2016-05-24T05:59:56Z,2017-04-24T12:12:28Z,MERGED,True,1,0,1,https://github.com/jrprice,Ensure destructor callback list initialized to NULL for sub-buffers,1,[],https://github.com/pocl/pocl/pull/348,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/348,"Missed this from my recent addition of clSetMemObjectDestructorCallback, otherwise any use of clCreateSubBuffer is likely to cause crashes.
Sorry!","Missed this from my recent addition of clSetMemObjectDestructorCallback, otherwise any use of clCreateSubBuffer is likely to cause crashes.
Sorry!",True,{}
pocl/pocl,https://github.com/pocl/pocl,350,2016-05-31T19:42:40Z,2016-06-01T12:10:18Z,2016-06-01T12:10:18Z,MERGED,True,89,36,7,https://github.com/Oblomov,Rect fixes,2,[],https://github.com/pocl/pocl/pull/350,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/350,This should fix #349 and bring the buffer rect and image copies in line with the rest of the enqueued ops.,This should fix #349 and bring the buffer rect and image copies in line with the rest of the enqueued ops.,True,{}
pocl/pocl,https://github.com/pocl/pocl,351,2016-06-01T12:28:32Z,2016-06-01T12:29:29Z,2016-06-01T12:29:29Z,MERGED,True,3,0,1,https://github.com/Oblomov,Email fixes,2,[],https://github.com/pocl/pocl/pull/351,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/351,Just two minor fixes to the mailmap.,Just two minor fixes to the mailmap.,True,{}
pocl/pocl,https://github.com/pocl/pocl,352,2016-06-02T10:01:39Z,2016-06-02T19:57:09Z,2016-06-02T19:57:09Z,MERGED,True,243,76,8,https://github.com/Oblomov,Buffer image copy,3,[],https://github.com/pocl/pocl/pull/352,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/352,"(Re)implement buffer <-> image copies via the existing 2D (and 3D) copy mechanism. This completes the missing parts of the implementation and brings everything in line with the new command/event mechanism.
The last commit fixes a buffer fill bug which was also exposed by the buffer image copy test.","(Re)implement buffer <-> image copies via the existing 2D (and 3D) copy mechanism. This completes the missing parts of the implementation and brings everything in line with the new command/event mechanism.
The last commit fixes a buffer fill bug which was also exposed by the buffer image copy test.",True,{}
pocl/pocl,https://github.com/pocl/pocl,355,2016-06-07T15:49:14Z,2016-06-08T18:02:57Z,2016-06-08T18:02:57Z,MERGED,True,6,2,2,https://github.com/clementleger,OCS: fix error codes to match spec when disabling online compiler support,1,[],https://github.com/pocl/pocl/pull/355,https://github.com/clementleger,1,https://github.com/pocl/pocl/pull/355,Fix some details according to the spec.,Fix some details according to the spec.,True,{}
pocl/pocl,https://github.com/pocl/pocl,362,2016-07-07T13:22:43Z,2016-07-07T15:36:10Z,2016-07-07T16:09:08Z,MERGED,True,25,5,5,https://github.com/rcrowder,release_0_13 branch updates,1,[],https://github.com/pocl/pocl/pull/362,https://github.com/rcrowder,1,https://github.com/pocl/pocl/pull/362,"Hi there. We have been using PoCL (branch 0.13, LLVM 3.7) on the Raspberry Pi3 (Raspbian Jessie) to run our OpenCL kernel code. It has worked perfectly for that. Thank you.
Our kernel code mainly uses one (CL_R) and two (CL_RG) channel 2D and 3D float images, so the following changes were required to the release 0.13 code. Changes include;

Addition of two read_imagef and one write_imagef functions
clCreateImage update to take into account image depth when calculating memory size
channels_out update for two byte CL_RG, CL_RGx, and CL_RA image formats

The build instructions we used can be found in this Gist - https://gist.github.com/rcrowder/f1acf9da5f632b289dc5393f5ad578a1
make check passes almost all tests. The final EinsteinToolkit test is the only one that fails, due to a missing install of that toolkit.
We're not sure whether you're accepting changes to a previously released branch, or whether it's possible to have a new branch created for these 0.13 updates?","Hi there. We have been using PoCL (branch 0.13, LLVM 3.7) on the Raspberry Pi3 (Raspbian Jessie) to run our OpenCL kernel code. It has worked perfectly for that. Thank you.
Our kernel code mainly uses one (CL_R) and two (CL_RG) channel 2D and 3D float images, so the following changes were required to the release 0.13 code. Changes include;

Addition of two read_imagef and one write_imagef functions
clCreateImage update to take into account image depth when calculating memory size
channels_out update for two byte CL_RG, CL_RGx, and CL_RA image formats

The build instructions we used can be found in this Gist - https://gist.github.com/rcrowder/f1acf9da5f632b289dc5393f5ad578a1
make check passes almost all tests. The final EinsteinToolkit test is the only one that fails, due to a missing install of that toolkit.
We're not sure whether you're accepting changes to a previously released branch, or whether it's possible to have a new branch created for these 0.13 updates?",True,{}
pocl/pocl,https://github.com/pocl/pocl,362,2016-07-07T13:22:43Z,2016-07-07T15:36:10Z,2016-07-07T16:09:08Z,MERGED,True,25,5,5,https://github.com/rcrowder,release_0_13 branch updates,1,[],https://github.com/pocl/pocl/pull/362,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/362#issuecomment-231087758,"Hi there. We have been using PoCL (branch 0.13, LLVM 3.7) on the Raspberry Pi3 (Raspbian Jessie) to run our OpenCL kernel code. It has worked perfectly for that. Thank you.
Our kernel code mainly uses one (CL_R) and two (CL_RG) channel 2D and 3D float images, so the following changes were required to the release 0.13 code. Changes include;

Addition of two read_imagef and one write_imagef functions
clCreateImage update to take into account image depth when calculating memory size
channels_out update for two byte CL_RG, CL_RGx, and CL_RA image formats

The build instructions we used can be found in this Gist - https://gist.github.com/rcrowder/f1acf9da5f632b289dc5393f5ad578a1
make check passes almost all tests. The final EinsteinToolkit test is the only one that fails, due to a missing install of that toolkit.
We're not sure whether you're accepting changes to a previously released branch, or whether it's possible to have a new branch created for these 0.13 updates?","Thanks for the PR. So far we haven't maintained the release branches because we aim to keep the master stable, but I don't see why we couldn't pull fixes into it. Is there a reason you are not simply using 'master'? Due to a need to stick to LLVM 3.7?",True,{}
pocl/pocl,https://github.com/pocl/pocl,362,2016-07-07T13:22:43Z,2016-07-07T15:36:10Z,2016-07-07T16:09:08Z,MERGED,True,25,5,5,https://github.com/rcrowder,release_0_13 branch updates,1,[],https://github.com/pocl/pocl/pull/362,https://github.com/rcrowder,3,https://github.com/pocl/pocl/pull/362#issuecomment-231123179,"Hi there. We have been using PoCL (branch 0.13, LLVM 3.7) on the Raspberry Pi3 (Raspbian Jessie) to run our OpenCL kernel code. It has worked perfectly for that. Thank you.
Our kernel code mainly uses one (CL_R) and two (CL_RG) channel 2D and 3D float images, so the following changes were required to the release 0.13 code. Changes include;

Addition of two read_imagef and one write_imagef functions
clCreateImage update to take into account image depth when calculating memory size
channels_out update for two byte CL_RG, CL_RGx, and CL_RA image formats

The build instructions we used can be found in this Gist - https://gist.github.com/rcrowder/f1acf9da5f632b289dc5393f5ad578a1
make check passes almost all tests. The final EinsteinToolkit test is the only one that fails, due to a missing install of that toolkit.
We're not sure whether you're accepting changes to a previously released branch, or whether it's possible to have a new branch created for these 0.13 updates?","When we started a few weeks ago with PoCL on the RPi3, I did initially try from a clone of master. At the time LLVM APT repositories had turned off 3.9 installs, so required a build of LLVM+CLang 3.9 from source. I don't recall the exact problems, but it didn't work with the PoCL master at that time on the RPi3 (maybe OpenCL 2.0 atomics?). Whereas LLVM 3.7 plus PoCL 0.13 worked first time.
We currently only require OpenCL 1.2 functionality, so are not in a rush to move towards PoCL master (0.14+) and can stick with PoCL 0.13 for the moment.",True,{}
pocl/pocl,https://github.com/pocl/pocl,362,2016-07-07T13:22:43Z,2016-07-07T15:36:10Z,2016-07-07T16:09:08Z,MERGED,True,25,5,5,https://github.com/rcrowder,release_0_13 branch updates,1,[],https://github.com/pocl/pocl/pull/362,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/362#issuecomment-231127477,"Hi there. We have been using PoCL (branch 0.13, LLVM 3.7) on the Raspberry Pi3 (Raspbian Jessie) to run our OpenCL kernel code. It has worked perfectly for that. Thank you.
Our kernel code mainly uses one (CL_R) and two (CL_RG) channel 2D and 3D float images, so the following changes were required to the release 0.13 code. Changes include;

Addition of two read_imagef and one write_imagef functions
clCreateImage update to take into account image depth when calculating memory size
channels_out update for two byte CL_RG, CL_RGx, and CL_RA image formats

The build instructions we used can be found in this Gist - https://gist.github.com/rcrowder/f1acf9da5f632b289dc5393f5ad578a1
make check passes almost all tests. The final EinsteinToolkit test is the only one that fails, due to a missing install of that toolkit.
We're not sure whether you're accepting changes to a previously released branch, or whether it's possible to have a new branch created for these 0.13 updates?",Master should support LLVM 3.8. The latest trunk might not work before getting closing to a new pocl release.  BTW is the pocl use case of yours secret? Might be interesting one to write about in portablecl.org?,True,{}
pocl/pocl,https://github.com/pocl/pocl,366,2016-08-16T15:37:26Z,2016-08-18T09:29:35Z,2016-08-18T09:29:35Z,MERGED,True,7,1,2,https://github.com/noma,Fixed lib/CL/pocl_timing.c,2,[],https://github.com/pocl/pocl/pull/366,https://github.com/noma,1,https://github.com/pocl/pocl/pull/366,"Falls back to CLOCK_MONOTONIC for Linux distributions that come without CLOCK_MONOTONIC_RAW, e.g. SLES (used in Cray's software environment).

Including ""linux/time.h"" instead of ""time.h"" would also solve the issue, but conflicts with other ""time.h"" includes across the project, which would lead to a much larger patch, so keeping it simple.
The generic fall back to CLOCK_REALTIME would also work, but CLOCK_MONOTONIC is closer to CLOCK_MONOTONIC_RAW, see http://man7.org/linux/man-pages/man2/clock_gettime.2.html
Also changed the ""#warn"" to ""#warning"", as gcc 5.3.0 wouldn't accept ""#warn"" and yield an error","Falls back to CLOCK_MONOTONIC for Linux distributions that come without CLOCK_MONOTONIC_RAW, e.g. SLES (used in Cray's software environment).

Including ""linux/time.h"" instead of ""time.h"" would also solve the issue, but conflicts with other ""time.h"" includes across the project, which would lead to a much larger patch, so keeping it simple.
The generic fall back to CLOCK_REALTIME would also work, but CLOCK_MONOTONIC is closer to CLOCK_MONOTONIC_RAW, see http://man7.org/linux/man-pages/man2/clock_gettime.2.html
Also changed the ""#warn"" to ""#warning"", as gcc 5.3.0 wouldn't accept ""#warn"" and yield an error",True,{}
pocl/pocl,https://github.com/pocl/pocl,366,2016-08-16T15:37:26Z,2016-08-18T09:29:35Z,2016-08-18T09:29:35Z,MERGED,True,7,1,2,https://github.com/noma,Fixed lib/CL/pocl_timing.c,2,[],https://github.com/pocl/pocl/pull/366,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/366#issuecomment-240154506,"Falls back to CLOCK_MONOTONIC for Linux distributions that come without CLOCK_MONOTONIC_RAW, e.g. SLES (used in Cray's software environment).

Including ""linux/time.h"" instead of ""time.h"" would also solve the issue, but conflicts with other ""time.h"" includes across the project, which would lead to a much larger patch, so keeping it simple.
The generic fall back to CLOCK_REALTIME would also work, but CLOCK_MONOTONIC is closer to CLOCK_MONOTONIC_RAW, see http://man7.org/linux/man-pages/man2/clock_gettime.2.html
Also changed the ""#warn"" to ""#warning"", as gcc 5.3.0 wouldn't accept ""#warn"" and yield an error",Can you add your real name to the end of CREDITS if not already there? Thanks.,True,{}
pocl/pocl,https://github.com/pocl/pocl,366,2016-08-16T15:37:26Z,2016-08-18T09:29:35Z,2016-08-18T09:29:35Z,MERGED,True,7,1,2,https://github.com/noma,Fixed lib/CL/pocl_timing.c,2,[],https://github.com/pocl/pocl/pull/366,https://github.com/noma,3,https://github.com/pocl/pocl/pull/366#issuecomment-240404716,"Falls back to CLOCK_MONOTONIC for Linux distributions that come without CLOCK_MONOTONIC_RAW, e.g. SLES (used in Cray's software environment).

Including ""linux/time.h"" instead of ""time.h"" would also solve the issue, but conflicts with other ""time.h"" includes across the project, which would lead to a much larger patch, so keeping it simple.
The generic fall back to CLOCK_REALTIME would also work, but CLOCK_MONOTONIC is closer to CLOCK_MONOTONIC_RAW, see http://man7.org/linux/man-pages/man2/clock_gettime.2.html
Also changed the ""#warn"" to ""#warning"", as gcc 5.3.0 wouldn't accept ""#warn"" and yield an error",Done.,True,{}
pocl/pocl,https://github.com/pocl/pocl,373,2016-08-24T17:16:34Z,2016-08-26T09:13:17Z,2016-08-26T09:13:17Z,MERGED,True,1,1,1,https://github.com/eschnett,Use cl_uint instead of uint as type name,1,[],https://github.com/pocl/pocl/pull/373,https://github.com/eschnett,1,https://github.com/pocl/pocl/pull/373,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,375,2016-08-29T10:24:39Z,2016-09-08T13:28:41Z,2016-09-19T13:48:35Z,MERGED,True,109,8,7,https://github.com/franz,Crosscompilation support,8,[],https://github.com/pocl/pocl/pull/375,https://github.com/franz,1,https://github.com/pocl/pocl/pull/375,"Note this is only for LLVM-less builds.
Toolchain.example has the required steps to use it.","Note this is only for LLVM-less builds.
Toolchain.example has the required steps to use it.",True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/franz,1,https://github.com/pocl/pocl/pull/376,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues","fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues",True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/franz,2,https://github.com/pocl/pocl/pull/376#issuecomment-245573088,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues","OK, fixed style",True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/376#issuecomment-245590198,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues",Some style issues found still.,True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/376#issuecomment-246276622,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues","After pulling your branch, I'm unable to build pocl:
[ 97%] Building LL to LLVM bitcode /home/visit0r/src/pocl-public/test-pr-cmake-llvm-3.9-build/lib/kernel/host/bdver3/svm_atomics_x86_64_llvm3_9.ll.bc
[ 98%] Linking & optimizing Kernel bitcode /home/visit0r/src/pocl-public/test-pr-cmake-llvm-3.9-build/lib/kernel/host/kernel-x86_64-unknown-linux-gnu-bdver3.bc
WARNING: Linking two modules of different data layouts: '/home/visit0r/src/pocl-public/test-pr-cmake-llvm-3.9-build/lib/kernel/host/bdver3/barrier.ll.bc' is '' whereas 'llvm-link' is 'e-m:e-i64:64-f80:128-n8:16:32:64-S128'

[ 98%] Built target kernel_host_bdver3
Scanning dependencies of target kernellib_hash
[ 98%] Generating SHA1 of all kernel libs...
-- Renaming /home/visit0r/src/pocl-public/test-pr-cmake-llvm-3.9-build/kernellib_hash.h.new to /home/visit0r/src/pocl-public/test-pr-cmake-llvm-3.9-build/kernellib_hash.h
[ 98%] Built target kernellib_hash
Scanning dependencies of target pocl_cache
[100%] Building C object lib/CL/CMakeFiles/pocl_cache.dir/pocl_cache.c.o
[100%] Built target pocl_cache
Scanning dependencies of target pocl
[100%] Linking CXX shared library libpocl.so
/usr/bin/ld: CMakeFiles/libpocl_unlinked_objs.dir/clEnqueueNDRangeKernel.c.o: unrecognized relocation (0x2a) in section `.text'
/usr/bin/ld: final link failed: Bad value",True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/franz,5,https://github.com/pocl/pocl/pull/376#issuecomment-246604405,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues",@pjaaskel  is that with a clean build tree ? i've never seen that error..,True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/376#issuecomment-246608092,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues",Yeah. At least LLVM 3.9 build complains about that even after rm -fr buildtree.,True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/pjaaskel,7,https://github.com/pocl/pocl/pull/376#issuecomment-246697512,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues",Probably something local as it now keeps failing all the time randomly with a similar issue. Even with clean master.,True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/376#issuecomment-247070521,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues",Can you please check the conflicts?,True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/franz,9,https://github.com/pocl/pocl/pull/376#issuecomment-247374786,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues",Rebased on top of master,True,{}
pocl/pocl,https://github.com/pocl/pocl,376,2016-08-29T11:15:53Z,2016-09-20T08:31:12Z,2016-09-20T08:31:12Z,MERGED,True,65,80,10,https://github.com/franz,Random fixes,4,[],https://github.com/pocl/pocl/pull/376,https://github.com/franz,10,https://github.com/pocl/pocl/pull/376#issuecomment-247995669,"fix some random annoying warnings from CMake,


remove a redundant (for HSA at least) mkdir in clEnqueueNDRangeKernel() - improves performance of small kernel enqueues",fixed & rebased,True,{}
pocl/pocl,https://github.com/pocl/pocl,377,2016-08-30T12:10:24Z,2016-09-09T17:48:48Z,2016-09-19T13:49:11Z,CLOSED,False,349,90,10,https://github.com/franz,ROCm HSA runtime support,5,[],https://github.com/pocl/pocl/pull/377,https://github.com/franz,1,https://github.com/pocl/pocl/pull/377,"This adds support for the new HSA runtime from AMD (called ROCm). Old HSA runtime is still supported.
To test, install ROCm and run cmake with -DHSA_RUNTIME_IS_ROCM=1 (no autodetection currently).
Note that it uses libclc from AMD for kernel library.
Also, requires some separate patches for clang 3.9/4.0 (which is what ROCm is using)","This adds support for the new HSA runtime from AMD (called ROCm). Old HSA runtime is still supported.
To test, install ROCm and run cmake with -DHSA_RUNTIME_IS_ROCM=1 (no autodetection currently).
Note that it uses libclc from AMD for kernel library.
Also, requires some separate patches for clang 3.9/4.0 (which is what ROCm is using)",True,{}
pocl/pocl,https://github.com/pocl/pocl,377,2016-08-30T12:10:24Z,2016-09-09T17:48:48Z,2016-09-19T13:49:11Z,CLOSED,False,349,90,10,https://github.com/franz,ROCm HSA runtime support,5,[],https://github.com/pocl/pocl/pull/377,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/377#issuecomment-243422204,"This adds support for the new HSA runtime from AMD (called ROCm). Old HSA runtime is still supported.
To test, install ROCm and run cmake with -DHSA_RUNTIME_IS_ROCM=1 (no autodetection currently).
Note that it uses libclc from AMD for kernel library.
Also, requires some separate patches for clang 3.9/4.0 (which is what ROCm is using)","Nice! Does it work with dGPUs too? Probably not as those require the coarse grained coherent AMD extensions for HSA, I think.",True,{}
pocl/pocl,https://github.com/pocl/pocl,377,2016-08-30T12:10:24Z,2016-09-09T17:48:48Z,2016-09-19T13:49:11Z,CLOSED,False,349,90,10,https://github.com/franz,ROCm HSA runtime support,5,[],https://github.com/pocl/pocl/pull/377,https://github.com/franz,3,https://github.com/pocl/pocl/pull/377#issuecomment-243453640,"This adds support for the new HSA runtime from AMD (called ROCm). Old HSA runtime is still supported.
To test, install ROCm and run cmake with -DHSA_RUNTIME_IS_ROCM=1 (no autodetection currently).
Note that it uses libclc from AMD for kernel library.
Also, requires some separate patches for clang 3.9/4.0 (which is what ROCm is using)","@pjaaskel no dGPUs don't work. It could be ROCm's fault or pocl's fault,  i haven't investigated further (yet).",True,{}
pocl/pocl,https://github.com/pocl/pocl,377,2016-08-30T12:10:24Z,2016-09-09T17:48:48Z,2016-09-19T13:49:11Z,CLOSED,False,349,90,10,https://github.com/franz,ROCm HSA runtime support,5,[],https://github.com/pocl/pocl/pull/377,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/377#issuecomment-243474844,"This adds support for the new HSA runtime from AMD (called ROCm). Old HSA runtime is still supported.
To test, install ROCm and run cmake with -DHSA_RUNTIME_IS_ROCM=1 (no autodetection currently).
Note that it uses libclc from AMD for kernel library.
Also, requires some separate patches for clang 3.9/4.0 (which is what ROCm is using)",It's likely because it requires the coarse grained / mem pool extension. Scan for 'hsa_amd*' in https://github.com/RadeonOpenCompute/hcc/blob/master/lib/hsa/mcwamp_hsa.cpp,True,{}
pocl/pocl,https://github.com/pocl/pocl,377,2016-08-30T12:10:24Z,2016-09-09T17:48:48Z,2016-09-19T13:49:11Z,CLOSED,False,349,90,10,https://github.com/franz,ROCm HSA runtime support,5,[],https://github.com/pocl/pocl/pull/377,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/377#issuecomment-243508155,"This adds support for the new HSA runtime from AMD (called ROCm). Old HSA runtime is still supported.
To test, install ROCm and run cmake with -DHSA_RUNTIME_IS_ROCM=1 (no autodetection currently).
Note that it uses libclc from AMD for kernel library.
Also, requires some separate patches for clang 3.9/4.0 (which is what ROCm is using)",Can you update CHANGES to reflect this improvement?,True,{}
pocl/pocl,https://github.com/pocl/pocl,377,2016-08-30T12:10:24Z,2016-09-09T17:48:48Z,2016-09-19T13:49:11Z,CLOSED,False,349,90,10,https://github.com/franz,ROCm HSA runtime support,5,[],https://github.com/pocl/pocl/pull/377,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/377#issuecomment-245593322,"This adds support for the new HSA runtime from AMD (called ROCm). Old HSA runtime is still supported.
To test, install ROCm and run cmake with -DHSA_RUNTIME_IS_ROCM=1 (no autodetection currently).
Note that it uses libclc from AMD for kernel library.
Also, requires some separate patches for clang 3.9/4.0 (which is what ROCm is using)",Some of the modularity boundaries are broken which should be fixed with device hooks. Otherwise LGTM.,True,{}
pocl/pocl,https://github.com/pocl/pocl,377,2016-08-30T12:10:24Z,2016-09-09T17:48:48Z,2016-09-19T13:49:11Z,CLOSED,False,349,90,10,https://github.com/franz,ROCm HSA runtime support,5,[],https://github.com/pocl/pocl/pull/377,https://github.com/franz,7,https://github.com/pocl/pocl/pull/377#issuecomment-245987664,"This adds support for the new HSA runtime from AMD (called ROCm). Old HSA runtime is still supported.
To test, install ROCm and run cmake with -DHSA_RUNTIME_IS_ROCM=1 (no autodetection currently).
Note that it uses libclc from AMD for kernel library.
Also, requires some separate patches for clang 3.9/4.0 (which is what ROCm is using)",Closing after previous discussion (needs significant rewrite).,True,{}
pocl/pocl,https://github.com/pocl/pocl,378,2016-09-01T09:26:43Z,2016-09-08T13:32:37Z,2016-09-08T13:32:37Z,CLOSED,False,8434,94,19,https://github.com/vkorhonen,LLVM 3.9 fixes,3,[],https://github.com/pocl/pocl/pull/378,https://github.com/vkorhonen,1,https://github.com/pocl/pocl/pull/378,"LLVM 3.9 support fixes.
Highlights:

opencl.kernels meta is gone. Now kernels have ""kernel_arg_*"" function meta.
Something changed in clang mangling, thus new svm_atomics_x86_64 file
Nice __builtin_astype() function for type casting opaque types (images and samplers)","LLVM 3.9 support fixes.
Highlights:

opencl.kernels meta is gone. Now kernels have ""kernel_arg_*"" function meta.
Something changed in clang mangling, thus new svm_atomics_x86_64 file
Nice __builtin_astype() function for type casting opaque types (images and samplers)",True,{}
pocl/pocl,https://github.com/pocl/pocl,378,2016-09-01T09:26:43Z,2016-09-08T13:32:37Z,2016-09-08T13:32:37Z,CLOSED,False,8434,94,19,https://github.com/vkorhonen,LLVM 3.9 fixes,3,[],https://github.com/pocl/pocl/pull/378,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/378#issuecomment-244863566,"LLVM 3.9 support fixes.
Highlights:

opencl.kernels meta is gone. Now kernels have ""kernel_arg_*"" function meta.
Something changed in clang mangling, thus new svm_atomics_x86_64 file
Nice __builtin_astype() function for type casting opaque types (images and samplers)","Now my local tests all pass (including AMD 3.0 SDK for LLVM 3.9) except AMD_30_CalcPie for LLVM 3.7 and LLVM 3.8 (Release+Assertions mode in both).
CalcPie: .. llvm-3.7/lib/Bitcode/Writer/ValueEnumerator.h:131: unsigned int llvm::ValueEnumerator::getTypeID(llvm::Type*) const: Assertion `I != TypeMap.end() && ""Type not in ValueEnumerator!""' failed.",True,{}
pocl/pocl,https://github.com/pocl/pocl,382,2016-09-06T14:47:46Z,2016-09-06T15:40:10Z,2016-09-06T15:40:10Z,MERGED,True,8441,94,19,https://github.com/vkorhonen,LLVM 3.9 fixes,1,[],https://github.com/pocl/pocl/pull/382,https://github.com/vkorhonen,1,https://github.com/pocl/pocl/pull/382,"Clang now uses function metadata istead of module metadata for presenting OpenCL kernel info

Now there are two versions of ""pocl_llvm_get_kernel_arg_metadata()"" for llvm 3.9 and <3.9
SPIR examples still use module meta


Something changed in function mangling

Volatile is has changed place in the mangled name
New svm_atomics_x86_64_llvm3_9.ll to address this issue


Clang likes to put string literals to the constant AS

a bit questionable fix in kernel/printf.c


Nice ""__builtin_astype()"" function for casting opaque built in types to actual implementation types","Clang now uses function metadata istead of module metadata for presenting OpenCL kernel info

Now there are two versions of ""pocl_llvm_get_kernel_arg_metadata()"" for llvm 3.9 and <3.9
SPIR examples still use module meta


Something changed in function mangling

Volatile is has changed place in the mangled name
New svm_atomics_x86_64_llvm3_9.ll to address this issue


Clang likes to put string literals to the constant AS

a bit questionable fix in kernel/printf.c


Nice ""__builtin_astype()"" function for casting opaque built in types to actual implementation types",True,{}
pocl/pocl,https://github.com/pocl/pocl,383,2016-09-07T05:57:07Z,2016-09-07T07:10:59Z,2016-09-07T07:10:59Z,MERGED,True,2,1,1,https://github.com/vkorhonen,Added #ifndef for pocl_get_kernel_arg_function_metadata(),1,[],https://github.com/pocl/pocl/pull/383,https://github.com/vkorhonen,1,https://github.com/pocl/pocl/pull/383,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,387,2016-09-15T12:25:26Z,2016-09-15T14:27:09Z,2016-09-15T15:25:52Z,MERGED,True,9,8,1,https://github.com/kattervo,Fix tce buffer r/w operations,2,[],https://github.com/pocl/pocl/pull/387,https://github.com/kattervo,1,https://github.com/pocl/pocl/pull/387,Fix for tce devices ignoring offset parameter in buffer writes and reads.,Fix for tce devices ignoring offset parameter in buffer writes and reads.,True,{}
pocl/pocl,https://github.com/pocl/pocl,395,2016-11-01T13:36:33Z,2016-11-03T15:08:12Z,2016-11-03T15:08:12Z,MERGED,True,45,25,2,https://github.com/vkorhonen,Fix to issue #343 (corrupted .so files),3,[],https://github.com/pocl/pocl/pull/395,https://github.com/vkorhonen,1,https://github.com/pocl/pocl/pull/395,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,400,2016-11-10T00:17:26Z,2016-11-17T11:58:02Z,2016-11-17T11:58:02Z,MERGED,True,2,2,1,https://github.com/sammck,Fix compile break on 32-bit platforms introduced in 02ebd93002ee9c79a…,1,[],https://github.com/pocl/pocl/pull/400,https://github.com/sammck,1,https://github.com/pocl/pocl/pull/400,…0f5899b4f78203d54f31333,…0f5899b4f78203d54f31333,True,{}
pocl/pocl,https://github.com/pocl/pocl,402,2016-11-28T22:38:29Z,2016-11-30T20:56:11Z,2017-04-24T12:12:22Z,MERGED,True,34,2,3,https://github.com/jrprice,Add support for SPIR build flags,2,[],https://github.com/pocl/pocl/pull/402,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/402,The cl_khr_spir extension requires any application that makes use of SPIR to pass the -x spir and -spir-std=* flags to clBuildProgram. This patch adds support for these flags so that pocl can work with a SPIR-based application (for context I'm currently working with the ComputeCpp implementation of SYCL from Codeplay).,The cl_khr_spir extension requires any application that makes use of SPIR to pass the -x spir and -spir-std=* flags to clBuildProgram. This patch adds support for these flags so that pocl can work with a SPIR-based application (for context I'm currently working with the ComputeCpp implementation of SYCL from Codeplay).,True,{}
pocl/pocl,https://github.com/pocl/pocl,404,2016-12-08T14:51:22Z,2016-12-09T14:35:50Z,2016-12-09T14:35:50Z,MERGED,True,34,1,3,https://github.com/tom-gall,Add a trivial (non functional) implementation for clUnloadPlatformCom…,1,[],https://github.com/pocl/pocl/pull/404,https://github.com/tom-gall,1,https://github.com/pocl/pocl/pull/404,"Add a trivial (non functional) implementation for clUnloadPlatformCompiler
which pyOpenCL wants, and is also needed for general standards
compliance.
The spec allows this quoting ""or that the compiler will actually be unloaded by the implementation""","Add a trivial (non functional) implementation for clUnloadPlatformCompiler
which pyOpenCL wants, and is also needed for general standards
compliance.
The spec allows this quoting ""or that the compiler will actually be unloaded by the implementation""",True,{}
pocl/pocl,https://github.com/pocl/pocl,406,2016-12-13T13:40:45Z,2016-12-14T10:15:34Z,2016-12-14T10:15:34Z,MERGED,True,1,3,2,https://github.com/vkorhonen,It is ok to Fill read only buffer + fixed offset calculation,1,[],https://github.com/pocl/pocl/pull/406,https://github.com/vkorhonen,1,https://github.com/pocl/pocl/pull/406,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,408,2016-12-29T10:57:22Z,2017-01-11T05:44:42Z,2017-01-11T05:44:42Z,MERGED,True,12,1,3,https://github.com/kraiskil,two build fixes,3,[],https://github.com/pocl/pocl/pull/408,https://github.com/kraiskil,1,https://github.com/pocl/pocl/pull/408,Make pocl build on my computer again :),Make pocl build on my computer again :),True,{}
pocl/pocl,https://github.com/pocl/pocl,408,2016-12-29T10:57:22Z,2017-01-11T05:44:42Z,2017-01-11T05:44:42Z,MERGED,True,12,1,3,https://github.com/kraiskil,two build fixes,3,[],https://github.com/pocl/pocl/pull/408,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/408#issuecomment-271345998,Make pocl build on my computer again :),There was some discussion in IRC regarding this. Was the conclusion that this PR is a valid fix?,True,{}
pocl/pocl,https://github.com/pocl/pocl,408,2016-12-29T10:57:22Z,2017-01-11T05:44:42Z,2017-01-11T05:44:42Z,MERGED,True,12,1,3,https://github.com/kraiskil,two build fixes,3,[],https://github.com/pocl/pocl/pull/408,https://github.com/kraiskil,3,https://github.com/pocl/pocl/pull/408#issuecomment-271599338,Make pocl build on my computer again :),"6c12095 did not cause discussion that I know of
9d12b74 is a work-around the case where we compile pocl with some other compiler than was used to compile LLVM (e.g. the case of binaries from LLVM.org). @franz felt this was inviting trouble down the line, I disagreed :)
46a71e2 is an ugly hack. We need better target detection in CMake on ARM to know which FPU is used. This is a feeble start, i.e. enable vfpu4 by default. With no FPU specified, pocl would not compile with LLVM 3.9 (cortex-a7, ubuntu14)",True,{}
pocl/pocl,https://github.com/pocl/pocl,414,2017-01-11T07:35:13Z,2017-01-12T09:23:10Z,2017-01-12T09:23:10Z,CLOSED,False,7,0,1,https://github.com/inducer,Work around Skylake codegen issue in LLVM 3.8 (0.13 branch),2,[],https://github.com/pocl/pocl/pull/414,https://github.com/inducer,1,https://github.com/pocl/pocl/pull/414,See #413.,See #413.,True,{}
pocl/pocl,https://github.com/pocl/pocl,414,2017-01-11T07:35:13Z,2017-01-12T09:23:10Z,2017-01-12T09:23:10Z,CLOSED,False,7,0,1,https://github.com/inducer,Work around Skylake codegen issue in LLVM 3.8 (0.13 branch),2,[],https://github.com/pocl/pocl/pull/414,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/414#issuecomment-271811035,See #413.,"If the issue is only with LLVM 3.8, please use the LLVM_3_8 macro instead, and also please add a brief comment why the workaround is there.",True,{}
pocl/pocl,https://github.com/pocl/pocl,414,2017-01-11T07:35:13Z,2017-01-12T09:23:10Z,2017-01-12T09:23:10Z,CLOSED,False,7,0,1,https://github.com/inducer,Work around Skylake codegen issue in LLVM 3.8 (0.13 branch),2,[],https://github.com/pocl/pocl/pull/414,https://github.com/inducer,3,https://github.com/pocl/pocl/pull/414#issuecomment-271817342,See #413.,Done (on both PRs).,True,{}
pocl/pocl,https://github.com/pocl/pocl,414,2017-01-11T07:35:13Z,2017-01-12T09:23:10Z,2017-01-12T09:23:10Z,CLOSED,False,7,0,1,https://github.com/inducer,Work around Skylake codegen issue in LLVM 3.8 (0.13 branch),2,[],https://github.com/pocl/pocl/pull/414,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/414#issuecomment-272114136,See #413.,"I pushed to master, but rather not start maintaining the previous release branches. I do understand that you prefer 0.13 until the regressions affecting pytoolkit are solved, but let's hope we can tackle them soon enough.",True,{}
pocl/pocl,https://github.com/pocl/pocl,415,2017-01-11T07:35:45Z,2017-01-12T09:21:56Z,2017-01-12T09:21:56Z,MERGED,True,9,0,1,https://github.com/inducer,Work around Skylake codegen issue in LLVM 3.8 (master),2,[],https://github.com/pocl/pocl/pull/415,https://github.com/inducer,1,https://github.com/pocl/pocl/pull/415,See #413.,See #413.,True,{}
pocl/pocl,https://github.com/pocl/pocl,416,2017-01-15T03:01:12Z,2017-01-16T16:10:49Z,2017-01-17T00:47:21Z,MERGED,True,2,1,1,https://github.com/ardacoskunses,Pattern field of memfill command allocated as aligned. Matching free added as aligned free.,2,[],https://github.com/pocl/pocl/pull/416,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/416,Memfill commands pattern argument allocated as aligned. Matching aligned free added.,Memfill commands pattern argument allocated as aligned. Matching aligned free added.,True,{}
pocl/pocl,https://github.com/pocl/pocl,417,2017-01-15T12:14:41Z,2017-01-16T17:07:41Z,2017-01-16T17:07:41Z,MERGED,True,31,22,5,https://github.com/kraiskil,Add dependency checks for example-tests,5,[],https://github.com/pocl/pocl/pull/417,https://github.com/kraiskil,1,https://github.com/pocl/pocl/pull/417,"For the most part, just add a check that a ICD loader is available.
This should make the ARM buildbot pass again.","For the most part, just add a check that a ICD loader is available.
This should make the ARM buildbot pass again.",True,{}
pocl/pocl,https://github.com/pocl/pocl,418,2017-01-15T20:12:31Z,2017-01-16T16:10:50Z,2017-01-17T00:47:19Z,MERGED,True,1,1,1,https://github.com/ardacoskunses,Corrected Parboil link in README,1,[],https://github.com/pocl/pocl/pull/418,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/418,Parboil link in the README file updated,Parboil link in the README file updated,True,{}
pocl/pocl,https://github.com/pocl/pocl,420,2017-01-18T03:54:50Z,2017-01-19T14:24:23Z,2017-01-19T15:40:51Z,MERGED,True,269,77,2,https://github.com/ardacoskunses,clBuildProgram compile options added,3,[],https://github.com/pocl/pocl/pull/420,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/420,"clBuildProgram compile options which supported by LLVM 3.9 added.
Also telated test cases for new and existing compile options added.","clBuildProgram compile options which supported by LLVM 3.9 added.
Also telated test cases for new and existing compile options added.",True,{}
pocl/pocl,https://github.com/pocl/pocl,421,2017-01-20T03:39:42Z,2017-01-25T10:21:15Z,2017-01-25T20:44:03Z,MERGED,True,99,10,7,https://github.com/ardacoskunses,"pfn_notify callback added for clBuildPorgram, related test added and -Werror test revised",2,[],https://github.com/pocl/pocl/pull/421,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/421,"pfn_notify callback added for clBuildProgram, and related test added to clBuildProgram tests.
OCL1.2 spec says:
""If pfn_notify is not NULL, clBuildProgram does not need to wait for the build to complete and can return immediately once the build operation can begin.""
This feature still missing.
Also -Werror test revised to test full functionality: warning in the kernel build turned to error and checked in the test.","pfn_notify callback added for clBuildProgram, and related test added to clBuildProgram tests.
OCL1.2 spec says:
""If pfn_notify is not NULL, clBuildProgram does not need to wait for the build to complete and can return immediately once the build operation can begin.""
This feature still missing.
Also -Werror test revised to test full functionality: warning in the kernel build turned to error and checked in the test.",True,{}
pocl/pocl,https://github.com/pocl/pocl,421,2017-01-20T03:39:42Z,2017-01-25T10:21:15Z,2017-01-25T20:44:03Z,MERGED,True,99,10,7,https://github.com/ardacoskunses,"pfn_notify callback added for clBuildPorgram, related test added and -Werror test revised",2,[],https://github.com/pocl/pocl/pull/421,https://github.com/ardacoskunses,2,https://github.com/pocl/pocl/pull/421#issuecomment-274234532,"pfn_notify callback added for clBuildProgram, and related test added to clBuildProgram tests.
OCL1.2 spec says:
""If pfn_notify is not NULL, clBuildProgram does not need to wait for the build to complete and can return immediately once the build operation can begin.""
This feature still missing.
Also -Werror test revised to test full functionality: warning in the kernel build turned to error and checked in the test.","Agreed all the comments and updated the PR accordingly.
Linked list implementation is not necessary for clBuildProgram pfn_notify so I changed to single callback.
Note on this: all implemented callback functions in pocl are linkedlist (clSetMemObjectDestructorCallback, and clEventCallback) OCL1.1 spec explains their usage scenarios as multiple callbacks, so it makes sense using linked list for them.
My understanding from spec clBuildProgram callback does not have to be linked list.
Please let me know if otherwise.",True,{}
pocl/pocl,https://github.com/pocl/pocl,422,2017-01-20T07:10:14Z,2017-01-20T10:28:39Z,2017-01-22T01:56:15Z,MERGED,True,1,0,1,https://github.com/ardacoskunses,Fixed leak in clCreateImage,1,[],https://github.com/pocl/pocl/pull/422,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/422,Free added for the resource allocated for checking supported image formats.,Free added for the resource allocated for checking supported image formats.,True,{}
pocl/pocl,https://github.com/pocl/pocl,423,2017-01-20T23:18:22Z,2017-01-23T07:26:26Z,2017-01-23T14:34:55Z,MERGED,True,1,0,1,https://github.com/ardacoskunses,clCreateImage add free into error condition,1,[],https://github.com/pocl/pocl/pull/423,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/423,Added Supported image format free into error condition as well,Added Supported image format free into error condition as well,True,{}
pocl/pocl,https://github.com/pocl/pocl,424,2017-01-21T16:45:08Z,2017-01-23T07:26:26Z,2017-01-23T14:34:51Z,MERGED,True,5,0,1,https://github.com/ardacoskunses,Error case frees added to clEnqueueNDRangeKernel,1,[],https://github.com/pocl/pocl/pull/424,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/424,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,425,2017-01-26T06:34:15Z,2017-01-30T10:36:36Z,2017-01-30T15:33:13Z,MERGED,True,66,3,8,https://github.com/ardacoskunses,clGetProgramBuildInfo binary_type information added,3,[],https://github.com/pocl/pocl/pull/425,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/425,"Based on OCL1.2 spec
if program will be compiled using clCompileProgram its binary_type will be set to CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT.
clCompileProgram is currently missing in pocl!
if program was created by clLinkProgram which is called with the –createlibrary link option its binary_type will be set to CL_PROGRAM_BINARY_TYPE_LIBRARY.
clLinkProgram is currently missing in pocl!
clCreateProgramWithBinary
sets CL_PROGRAM_BINARY_TYPE_EXECUTABLE
clCreateProgramWithSource
sets CL_PROGRAM_BINARY_TYPE_NONE","Based on OCL1.2 spec
if program will be compiled using clCompileProgram its binary_type will be set to CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT.
clCompileProgram is currently missing in pocl!
if program was created by clLinkProgram which is called with the –createlibrary link option its binary_type will be set to CL_PROGRAM_BINARY_TYPE_LIBRARY.
clLinkProgram is currently missing in pocl!
clCreateProgramWithBinary
sets CL_PROGRAM_BINARY_TYPE_EXECUTABLE
clCreateProgramWithSource
sets CL_PROGRAM_BINARY_TYPE_NONE",True,{}
pocl/pocl,https://github.com/pocl/pocl,426,2017-02-02T09:02:11Z,2017-02-03T06:57:53Z,2017-02-03T06:57:53Z,MERGED,True,10,5,1,https://github.com/rjodin,use memcpy to avoid unaligned access in pocl_binary,2,[],https://github.com/pocl/pocl/pull/426,https://github.com/rjodin,1,https://github.com/pocl/pocl/pull/426,"When a processor does not support unaligned access, reading a pocl binary file creates an unauthorized memory access.
""memcpy"" function is normaly implemented so that it does no unaligned access if the architecture does not support it.","When a processor does not support unaligned access, reading a pocl binary file creates an unauthorized memory access.
""memcpy"" function is normaly implemented so that it does no unaligned access if the architecture does not support it.",True,{}
pocl/pocl,https://github.com/pocl/pocl,427,2017-02-06T01:46:50Z,2017-02-06T08:18:18Z,2017-02-07T03:16:57Z,MERGED,True,18,18,1,https://github.com/ardacoskunses,read_imagef clamp bug fix,1,[],https://github.com/pocl/pocl/pull/427,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/427,"out_of_bound check during read_imagef also does clamping.
However as coords passed by value it was effectless.
Coords passed by reference so clamped values updated.","out_of_bound check during read_imagef also does clamping.
However as coords passed by value it was effectless.
Coords passed by reference so clamped values updated.",True,{}
pocl/pocl,https://github.com/pocl/pocl,428,2017-02-06T05:46:30Z,2017-02-06T14:59:24Z,2017-02-07T03:16:55Z,MERGED,True,69,11,2,https://github.com/ardacoskunses,adding read_imagef missing functions,2,[],https://github.com/pocl/pocl/pull/428,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/428,"added missing read_imagef functions with image2d_array_t and
no sampler versions.
Pocl currently does not support float coords so read_imagef
with float coord arguments commented out.","added missing read_imagef functions with image2d_array_t and
no sampler versions.
Pocl currently does not support float coords so read_imagef
with float coord arguments commented out.",True,{}
pocl/pocl,https://github.com/pocl/pocl,428,2017-02-06T05:46:30Z,2017-02-06T14:59:24Z,2017-02-07T03:16:55Z,MERGED,True,69,11,2,https://github.com/ardacoskunses,adding read_imagef missing functions,2,[],https://github.com/pocl/pocl/pull/428,https://github.com/ardacoskunses,2,https://github.com/pocl/pocl/pull/428#issuecomment-277596331,"added missing read_imagef functions with image2d_array_t and
no sampler versions.
Pocl currently does not support float coords so read_imagef
with float coord arguments commented out.",Agreed and updated requested changes,True,{}
pocl/pocl,https://github.com/pocl/pocl,429,2017-02-06T06:10:57Z,2017-02-06T16:46:11Z,2017-02-07T03:16:54Z,MERGED,True,26,19,1,https://github.com/ardacoskunses,Applying read_image optimizations to write_image as well,1,[],https://github.com/pocl/pocl/pull/429,https://github.com/ardacoskunses,1,https://github.com/pocl/pocl/pull/429,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,429,2017-02-06T06:10:57Z,2017-02-06T16:46:11Z,2017-02-07T03:16:54Z,MERGED,True,26,19,1,https://github.com/ardacoskunses,Applying read_image optimizations to write_image as well,1,[],https://github.com/pocl/pocl/pull/429,https://github.com/ardacoskunses,2,https://github.com/pocl/pocl/pull/429#issuecomment-277719631,,Requested changes applied and pushed.,True,{}
pocl/pocl,https://github.com/pocl/pocl,435,2017-02-07T15:04:49Z,2017-02-07T16:10:34Z,2017-02-07T16:19:03Z,MERGED,True,3,1,1,https://github.com/jrprice,Fix piglit examples,2,[],https://github.com/pocl/pocl/pull/435,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/435,"The piglet tests require ocd-icd, otherwise they just use whatever OpenCL platform is first on the host system.
Also use an empty string for the INSTALL_COMMAND instead of /bin/true, since the latter isn't available on all *nix systems.","The piglet tests require ocd-icd, otherwise they just use whatever OpenCL platform is first on the host system.
Also use an empty string for the INSTALL_COMMAND instead of /bin/true, since the latter isn't available on all *nix systems.",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/inducer,1,https://github.com/pocl/pocl/pull/441,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/441#issuecomment-279384913,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.",On it. I'll fix the testsuite also.,True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/inducer,3,https://github.com/pocl/pocl/pull/441#issuecomment-279417426,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.",Thx!,True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/inducer,4,https://github.com/pocl/pocl/pull/441#issuecomment-280206941,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","@pjaaskel Looks like you removed the version marker that allows me to tell whether the patch is applied from client code. Are you opposed to that, or was that an accident?
My point is that I want to be able to tell from PyOpenCL what type of POCL I am talking to without having to build a kernel and count the arguments...",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/441#issuecomment-280245600,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","Oh, I see. But that patch is for LLVM, it doesn't affect anything inside pocl per se, thus the version string should be patched to llvm-config --version? We have done similar in TCE. https://github.com/cpc/tce/blob/master/tce/tools/patches/llvm-4.0-custom-vector-extension.patch#L564",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/inducer,6,https://github.com/pocl/pocl/pull/441#issuecomment-280249000,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","But, but, it does. :) To be able to successfully pass complex numbers to kernels (which previously would explode into two arguments), PyOpenCL carefully psychonanalyzes Pocl 0.13 and the x86-64 ABI and feeds it just the arguments required to make it go, OpenCL spec be damned. (Crazy: feeding it two reals instead of one complex does seem to work.)
Now, heaven forbid, if pocl suddenly starts following the CL spec (such as with this patch), PyOpenCL will currently feed it the wrong data, and all sorts of entertainment will ensue.
What I'd like is for PyOpenCL to be able to tell whether it needs to feed pocl exploded-complex crazytalk, or civilized, spec-conforming complex structures. To do so, I need to be able to tell from the other side of the ICD loader whether pocl has this patch applied.",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/pjaaskel,7,https://github.com/pocl/pocl/pull/441#issuecomment-280250870,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","Yes, I understand your need, but my point holds. This patch changes Clang, not pocl. Meaning that you could dynamically link to a non-patched LLVM/Clang and it might just report it wrongly. And also you can use the same patched Clang elsewhere with the modified behavior. It just happens that the issue pocl suffers from is in Clang and this makes it go away. Thus, your check for if the workaround is needed should ask llvm-config --pyopencl-patches or similar as pocl code base and behavior (!) is exactly the same with and without this patch.",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/441#issuecomment-280251013,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.",Or is there a problem asking it from the Clang pocl uses here?,True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/pjaaskel,9,https://github.com/pocl/pocl/pull/441#issuecomment-280254181,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.",Hmm. There might be a problem in case Clang is linked statically to libpocl.so and llvm-config cannot be trusted to point to the same one? I suppose you are right that pocl needs to report this. I wonder if there's a more suitable platform string though?,True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/inducer,10,https://github.com/pocl/pocl/pull/441#issuecomment-280361530,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","Some comments:

llvm-config is a non-starter, because the LLVM development bits aren't guaranteed to be around. (Debian for example packages them separately in a -dev package)
I'd argue that it almost has to show up in the driver version (i.e. that's the right platform string to use), because what PyOpenCL does (and what I imagine quite a few other CL-using pieces of software do) is cache binaries based on that version. And I'd argue we would want the ""patch there: yes/no"" bit to be part of the cache key--pocl does build a different a substantially different binary with the patch after all.",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/pjaaskel,11,https://github.com/pocl/pocl/pull/441#issuecomment-280365149,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","Yes, I added it as a separate salt in pocl's kernel cache key. I'd argue the whole PyOpenCL's kernel caching is redundant AFAIU. But, sure, let's add it back to the version string until accepted to the LLVM upstream. Not a big deal to keep arguing about for days ;)",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/inducer,12,https://github.com/pocl/pocl/pull/441#issuecomment-280372430,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","I'd argue the whole PyOpenCL's kernel caching is redundant AFAIU.

For POCL it is. I'll make a widget to turn it off for ICDs that are known to be caching.

let's add it back to the version string until accepted to the LLVM

OK, how about adding it with inverse semantics (i.e. -nospirccpatch)?
Also, you patch or me patch?",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/pjaaskel,13,https://github.com/pocl/pocl/pull/441#issuecomment-280376960,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","Yep, in your case you can just turn off your cache if you see 'pocl'. But of course you have a point there.
If you want to make it happen sooner, please send a PR. I'm travelling for some time so don't know when I can focus on pocl again, but I can test and push it for sure.",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/pjaaskel,14,https://github.com/pocl/pocl/pull/441#issuecomment-280428953,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","OK, how about adding it with inverse semantics (i.e. -nospirccpatch)?

The inverse won't work as there might be already pocls built against non-patched LLVMs which should use your trickery for the ABI issues. So I guess we need to have a tag there until it's upstreamed after which the LLVM version itself should imply the patch inclusion.",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/inducer,15,https://github.com/pocl/pocl/pull/441#issuecomment-280515079,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","OIC. I hadn't noticed the LLVM version in the platform version previously.
From PyOpenCL's perspective, I think I'll actually be able to do without this--I'll do the test kernel compilation after all. That'll give me a reasonably quick and definite answer without needing complex version heuristics.
And I'll turn off the cache for Pocl, so that concern disappears for me as well.
So what remains is exhibiting the right platform/driver version so that any other pieces of software that might be caching are OK.",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/inducer,16,https://github.com/pocl/pocl/pull/441#issuecomment-281262443,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.","And I'll turn off the cache for Pocl, so that concern disappears for me as well.

FYI: On pocl 0.13, PyOpenCL's test suite takes about 83 s with pyopencl's binary cache and about 140 s with pocl's built-in cache. Both cases are run with a warm cache. (0.14: 140 s for both) As a result, I'm keeping my cache for now.",True,{}
pocl/pocl,https://github.com/pocl/pocl,441,2017-02-13T07:12:34Z,2017-02-13T14:11:49Z,2017-02-21T19:47:40Z,MERGED,True,37,0,2,https://github.com/inducer,"Detect presence of SPIR CC patch, make visible in version number",1,[],https://github.com/pocl/pocl/pull/441,https://github.com/pjaaskel,17,https://github.com/pocl/pocl/pull/441#issuecomment-281458846,"Here's a snippet of CMake that makes the patch from #1 detectable both for other CMake code and for user code through the device version number.
Full disclosure: I learned what little CMake I needed for this roughly a half hour ago. If there is a better way to do this, let me know.",OK. Would be interesting to profile the binary program implementation (and the cache) at some point. Weird that it takes so long.,True,{}
pocl/pocl,https://github.com/pocl/pocl,448,2017-02-21T17:53:49Z,2017-03-18T14:01:48Z,2017-04-24T12:12:20Z,MERGED,True,2,0,1,https://github.com/jrprice,Fix race condition when unmapping memory objects,1,[],https://github.com/pocl/pocl/pull/448,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/448,"Looks like this was just missing a mutex around the deletion of the mapping.
Fixes issue #447.
Candidate for cherry-picking to 0.14? Without this I don't always get a full suite of passes.","Looks like this was just missing a mutex around the deletion of the mapping.
Fixes issue #447.
Candidate for cherry-picking to 0.14? Without this I don't always get a full suite of passes.",True,{}
pocl/pocl,https://github.com/pocl/pocl,455,2017-03-15T13:33:02Z,2017-03-16T16:39:42Z,2017-03-16T16:39:42Z,MERGED,True,388,96,15,https://github.com/vkorhonen,0.14 fixes,4,[],https://github.com/pocl/pocl/pull/455,https://github.com/vkorhonen,1,https://github.com/pocl/pocl/pull/455,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,456,2017-03-18T09:39:47Z,2017-03-18T14:01:48Z,2017-03-18T14:01:48Z,MERGED,True,6,7,1,https://github.com/rtobar,Correctly create command queue,1,[],https://github.com/pocl/pocl/pull/456,https://github.com/rtobar,1,https://github.com/pocl/pocl/pull/456,"This fixes the creation of command queues with OpenCL >= 2.0, so long as the CL_QUEUE_PROPERTIES property is set.
Please let me know if you'd prefer to have this pull request created against the release_0_14 branch.","This fixes the creation of command queues with OpenCL >= 2.0, so long as the CL_QUEUE_PROPERTIES property is set.
Please let me know if you'd prefer to have this pull request created against the release_0_14 branch.",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/457,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/franz,2,https://github.com/pocl/pocl/pull/457#issuecomment-291149981,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","Looks OK-ish to me, but i only stared at it for a while :)
It could be beneficial to move some of the guessing logic to a device driver hook, so each device can decide itself (e.g. HSA device + kernel with image arguments might be better of with ""square"" local sizes), but that's low on the TODO list.
I'm going to run this through some of pocl testsuites, if nothing breaks it's an ACK from me.",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/jrprice,3,https://github.com/pocl/pocl/pull/457#issuecomment-291156522,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","One concern I have with this patch is that (if I'm reading it correctly) it will greedily pick the largest work-group size it can when local_size==NULL. For example, if I enqueue an NDRange with global size (4096,1,1), this will pick a work-group size of (4096,1,1). This means you only have a single work-group, which means you will not be able to take advantage of any parallelism over multiple CPU cores.
Maybe this should also take the number of compute units into account?",True,{'THUMBS_UP': ['https://github.com/pjaaskel']}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/Oblomov,4,https://github.com/pocl/pocl/pull/457#issuecomment-291303831,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","@jrprice I agree that the greedy algorithm might not always be the optimal one, and as @franz suggested there's plenty of room even for device-specific optimizations. Even on CPU, for example, there's no guarantee that splitting a 4096 global work size across multiple compute units would be better than on a single one, depending on amount of work, nature of memory accesses, potential effects of NUMA, etc.
But that's not the aim of this patchset. Here I focused on fixing what was definitely broken in the previous logic, rather than aiming at specific improvements. I actually strove to keep as close as possible to the original logic, both outside and inside the reduction loop. Further improvements are obviously possible, but a more careful analysis of the impact of the local size on execution is needed for those.",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/457#issuecomment-291401231,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","Nice to see someone working on this! @Oblomov can you first point out what was broken in the original logic?
You are right that small grid sizes are problematic. We'd need to check how large kernel it is in terms of LLVM IR instructions (and if it has outer loops) for example to decide the number of cores to utilize with multiple WGs, but I think always resorting to a single core brings a too major regression on performance with multicores.
Another aspect is that the original code (IIRC) tries to make the preferred width to multiple dimensions and now that I think about it, there's at least this logic behind: The vectorizer might be able to vectorize across some other dimension than X when/if it can utilize loop interchange if X is not suitable (e.g. due to memory access patterns not being sequential). I haven't checked how well loop interchange works in LLVM at the moment, but I've relied on it eventually taking care this case and also ""outer loop vectorization"".",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/Oblomov,6,https://github.com/pocl/pocl/pull/457#issuecomment-291428030,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","@pjaaskel The main problem of the original logic is that it did not take into account the two hard constraints (local work size must divide global work size, and local work size in each direction must not be larger than the maximum allowed size in that direction): instead, it started from a local size as large as the global work size and then halved (or clipped) directions until the overall local size fit within the hard third constraint (being no larger than the maximum overall local size).
This meant that the logic might produce invalid local sizes, e.g. by having a local size larger than the maximum allowed in that direction or a local size that did not divide the global size. This would be caught in the subsequent checks, but guessing an invalid local size is IMO wrong in principles.
So the main difference in my logic is that local size guessing now starts from the hard constraints (divisibility, and maximum size per direction). The logic used for the reduction until we fit in the third constraint is actually mostly the same.
BTW, I feel this whole explanation should go in the commit message itself. Let me do just that.",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/pjaaskel,7,https://github.com/pocl/pocl/pull/457#issuecomment-291440256,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","OK, I see. Still I think there should be multiple WGs generated by default. I have a feeling the performance regression resulting from your patch will be more noticeable than the original issue has been.",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/Oblomov,8,https://github.com/pocl/pocl/pull/457#issuecomment-291442588,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","I don't think the new logic would introduce performance regressions, since for cases where the old logic produced valid work-group sizes, the new logic would produce workgroups with the same overall size: the main difference in the reduction is that we now prefer to halve Z first, then Y, then X instead of X first, then Y, then Z.
So, for example, assuming local size limits of (4096, 4096, 4096) with total limit of 4096, a global size of (4096, 2) would produce a local size of (2048, 2) with the old logic, and local size of (4096, 1) with the new logic. In terms of CU usage, there should be no difference.",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/Oblomov,9,https://github.com/pocl/pocl/pull/457#issuecomment-291446337,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","I've force-pushed an update for the message of the last commit, with a more detailed explanation of the differences between the old and new logic and highlighting some of the aspects discussed in the comments (particularly regarding the aim of the patch and the possibility of performance regression).",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/Oblomov,10,https://github.com/pocl/pocl/pull/457#issuecomment-292213420,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","Updated. Hopefully I addressed all comments. I've also included a preliminary “try to fill all CUs” algorithm after the greedy one. (It's intentionally separate, since the logic for the two is quite distinct.)",True,{}
pocl/pocl,https://github.com/pocl/pocl,457,2017-04-02T06:37:52Z,2017-04-07T14:46:26Z,2017-04-07T14:46:26Z,MERGED,True,331,105,3,https://github.com/Oblomov,NDRange fixes,11,[],https://github.com/pocl/pocl/pull/457,https://github.com/pjaaskel,11,https://github.com/pocl/pocl/pull/457#issuecomment-292497350,"This is a set of cleanups and fixes for clEnqueueNDRangeKernel. The main highlights are checks that for kernels with a required work-group size the user submitted that work-group size (which should fix #450), and a rewrite of the logic used to determine the work-group size in the NULL case, designed around the hard sizing constrains of dividing the global size, being less than the maximum allowed local size in each dimension while still trying to take the preferred work-group size multiple of the device into account.","Oh, and please describe the update in CHANGES.",True,{}
pocl/pocl,https://github.com/pocl/pocl,459,2017-04-05T10:30:33Z,2017-04-12T05:27:33Z,2017-04-12T05:27:33Z,CLOSED,False,568,455,29,https://github.com/franz,Fixes + conformance work part1,23,[],https://github.com/pocl/pocl/pull/459,https://github.com/franz,1,https://github.com/pocl/pocl/pull/459,"removes a few autotools leftovers
lib/kernel: add image function prototypes for RO / WO / RW images
fix write_image{ui,i,f} and read_image{ui,i,f} to pass basic conf test
remove img formats we're unlikely to implement in basic/pthread devices
limit const / local memory to 1/4 of global mem (required to pass conf test)

Tests ran on LLVM 3.8/3.9/4.0 + TCE/3.8","removes a few autotools leftovers
lib/kernel: add image function prototypes for RO / WO / RW images
fix write_image{ui,i,f} and read_image{ui,i,f} to pass basic conf test
remove img formats we're unlikely to implement in basic/pthread devices
limit const / local memory to 1/4 of global mem (required to pass conf test)

Tests ran on LLVM 3.8/3.9/4.0 + TCE/3.8",True,{}
pocl/pocl,https://github.com/pocl/pocl,459,2017-04-05T10:30:33Z,2017-04-12T05:27:33Z,2017-04-12T05:27:33Z,CLOSED,False,568,455,29,https://github.com/franz,Fixes + conformance work part1,23,[],https://github.com/pocl/pocl/pull/459,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/459#issuecomment-292186168,"removes a few autotools leftovers
lib/kernel: add image function prototypes for RO / WO / RW images
fix write_image{ui,i,f} and read_image{ui,i,f} to pass basic conf test
remove img formats we're unlikely to implement in basic/pthread devices
limit const / local memory to 1/4 of global mem (required to pass conf test)

Tests ran on LLVM 3.8/3.9/4.0 + TCE/3.8","The build fails (at least with Clang 4.0):
[  2%] Building C object lib/CL/CMakeFiles/libpocl_unlinked_objs.dir/clSetKernelArg.c.o
In file included from <built-in>:1:
/home/visit0r/src/pocl-public/include/_kernel.h:2433:38: error: access qualifier '__read_write' can not be used for '__read_write image2d_t' prior to OpenCL version 2.0
float4 _CL_OVERLOADABLE read_imagef (IMG_RW_AQ image2d_t image, sampler_t sampler,
                                     ^",True,{}
pocl/pocl,https://github.com/pocl/pocl,459,2017-04-05T10:30:33Z,2017-04-12T05:27:33Z,2017-04-12T05:27:33Z,CLOSED,False,568,455,29,https://github.com/franz,Fixes + conformance work part1,23,[],https://github.com/pocl/pocl/pull/459,https://github.com/franz,3,https://github.com/pocl/pocl/pull/459#issuecomment-293477505,"removes a few autotools leftovers
lib/kernel: add image function prototypes for RO / WO / RW images
fix write_image{ui,i,f} and read_image{ui,i,f} to pass basic conf test
remove img formats we're unlikely to implement in basic/pthread devices
limit const / local memory to 1/4 of global mem (required to pass conf test)

Tests ran on LLVM 3.8/3.9/4.0 + TCE/3.8",Dropping,True,{}
pocl/pocl,https://github.com/pocl/pocl,460,2017-04-05T10:41:49Z,2017-04-05T13:47:13Z,2019-08-05T10:03:40Z,MERGED,True,4,4,1,https://github.com/franz,Fix #449: Miscounts arguments upon loading kernel from binary,1,[],https://github.com/pocl/pocl/pull/460,https://github.com/franz,1,https://github.com/pocl/pocl/pull/460,cherrypicked a single fix for 0.14,cherrypicked a single fix for 0.14,True,{}
pocl/pocl,https://github.com/pocl/pocl,461,2017-04-10T09:39:31Z,2017-04-11T05:54:07Z,2017-04-11T05:54:07Z,MERGED,True,175,11,3,https://github.com/rjodin,fix issue #458,2,[],https://github.com/pocl/pocl/pull/461,https://github.com/rjodin,1,https://github.com/pocl/pocl/pull/461,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,461,2017-04-10T09:39:31Z,2017-04-11T05:54:07Z,2017-04-11T05:54:07Z,MERGED,True,175,11,3,https://github.com/rjodin,fix issue #458,2,[],https://github.com/pocl/pocl/pull/461,https://github.com/rjodin,2,https://github.com/pocl/pocl/pull/461#issuecomment-292920896,,"I'm working on adding a regression test.
What should I do about the coding style? I try to respect the actual coding style of the file. If I understand correctly, you're saying that the actual coding style of the file is not the expected one. Should I modify my patch so that it matches the C++ style, even if it will mix coding style in this file?",True,{}
pocl/pocl,https://github.com/pocl/pocl,461,2017-04-10T09:39:31Z,2017-04-11T05:54:07Z,2017-04-11T05:54:07Z,MERGED,True,175,11,3,https://github.com/rjodin,fix issue #458,2,[],https://github.com/pocl/pocl/pull/461,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/461#issuecomment-292925255,,"Yes please modify your patch for the correct formatting. I know the existing code has style issues still, but my idea is that every commit brings the style towards the correct one, not further.",True,{}
pocl/pocl,https://github.com/pocl/pocl,461,2017-04-10T09:39:31Z,2017-04-11T05:54:07Z,2017-04-11T05:54:07Z,MERGED,True,175,11,3,https://github.com/rjodin,fix issue #458,2,[],https://github.com/pocl/pocl/pull/461,https://github.com/rjodin,4,https://github.com/pocl/pocl/pull/461#issuecomment-292980235,,"Changes made, tell me if you see something else.",True,{}
pocl/pocl,https://github.com/pocl/pocl,463,2017-04-13T12:56:18Z,2017-04-13T13:38:44Z,2017-04-13T14:21:16Z,CLOSED,False,907,545,55,https://github.com/franz,More work on conformance / bugfixes,33,[],https://github.com/pocl/pocl/pull/463,https://github.com/franz,1,https://github.com/pocl/pocl/pull/463,"memleaks caused by refcount bugs
images
external testsuites
clEnqueue* / clCreate* additional checks

almost everything in test_conformance/basic now passes, exception being some a few  out-of-memory tests and 2 or so which crash in LLVM.","memleaks caused by refcount bugs
images
external testsuites
clEnqueue* / clCreate* additional checks

almost everything in test_conformance/basic now passes, exception being some a few  out-of-memory tests and 2 or so which crash in LLVM.",True,{}
pocl/pocl,https://github.com/pocl/pocl,463,2017-04-13T12:56:18Z,2017-04-13T13:38:44Z,2017-04-13T14:21:16Z,CLOSED,False,907,545,55,https://github.com/franz,More work on conformance / bugfixes,33,[],https://github.com/pocl/pocl/pull/463,https://github.com/franz,2,https://github.com/pocl/pocl/pull/463#issuecomment-293897828,"memleaks caused by refcount bugs
images
external testsuites
clEnqueue* / clCreate* additional checks

almost everything in test_conformance/basic now passes, exception being some a few  out-of-memory tests and 2 or so which crash in LLVM.","closing, needs more work",True,{}
pocl/pocl,https://github.com/pocl/pocl,464,2017-04-14T08:51:43Z,2017-04-19T17:57:43Z,2017-04-19T17:57:43Z,MERGED,True,1092,654,57,https://github.com/franz,Bugfixes + implement a few missing features,27,[],https://github.com/pocl/pocl/pull/464,https://github.com/franz,1,https://github.com/pocl/pocl/pull/464,"memleaks caused by refcount bugs
read/write_image{i,ui,f}
Fix a bunch of external testsuites to build again
clEnqueue* / clCreate* additional sanity checks

about 15 more tests pass from external testsuites.","memleaks caused by refcount bugs
read/write_image{i,ui,f}
Fix a bunch of external testsuites to build again
clEnqueue* / clCreate* additional sanity checks

about 15 more tests pass from external testsuites.",True,{}
pocl/pocl,https://github.com/pocl/pocl,464,2017-04-14T08:51:43Z,2017-04-19T17:57:43Z,2017-04-19T17:57:43Z,MERGED,True,1092,654,57,https://github.com/franz,Bugfixes + implement a few missing features,27,[],https://github.com/pocl/pocl/pull/464,https://github.com/franz,2,https://github.com/pocl/pocl/pull/464#issuecomment-294941364,"memleaks caused by refcount bugs
read/write_image{i,ui,f}
Fix a bunch of external testsuites to build again
clEnqueue* / clCreate* additional sanity checks

about 15 more tests pass from external testsuites.",Everything except upstreaming the patches should be fixed now,True,{}
pocl/pocl,https://github.com/pocl/pocl,465,2017-04-21T15:46:43Z,2017-04-25T08:50:45Z,2017-04-25T15:14:14Z,MERGED,True,2333,11,44,https://github.com/jrprice,Add NVIDIA GPU support,135,[],https://github.com/pocl/pocl/pull/465,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/465,"This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!","This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!",True,{}
pocl/pocl,https://github.com/pocl/pocl,465,2017-04-21T15:46:43Z,2017-04-25T08:50:45Z,2017-04-25T15:14:14Z,MERGED,True,2333,11,44,https://github.com/jrprice,Add NVIDIA GPU support,135,[],https://github.com/pocl/pocl/pull/465,https://github.com/franz,2,https://github.com/pocl/pocl/pull/465#issuecomment-296374289,"This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!","A little bit of CMake work required (i can help here, it's quite easy).
 *** INFO ***  loading libdevice from '/nvvm/libdevice/libdevice.compute_30.10.bc'
[CUDA] failed to open libdevice library file

  const char *cuda_path = pocl_get_string_option(""POCL_CUDA_TOOLKIT_PATH"", """");
  const char *libdevice_fmt = ""%s/nvvm/libdevice/libdevice.compute_%d.10.bc"";

Is it possible / usual to have multiple installations of CUDA on a single linux machine ? if not, then i think we can CMake-discover and compile in the cuda path, no need to snprintf() it. The ""ldsm"" parameter still need to be snprintf()-ed, ofc.",True,{}
pocl/pocl,https://github.com/pocl/pocl,465,2017-04-21T15:46:43Z,2017-04-25T08:50:45Z,2017-04-25T15:14:14Z,MERGED,True,2333,11,44,https://github.com/jrprice,Add NVIDIA GPU support,135,[],https://github.com/pocl/pocl/pull/465,https://github.com/jrprice,3,https://github.com/pocl/pocl/pull/465#issuecomment-296390665,"This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!","Thanks for all the feedback. I've pushed a few updates, and I'll try and address the remaining items over the next few days.

Is it possible / usual to have multiple installations of CUDA on a single linux machine ? if not, then i think we can CMake-discover and compile in the cuda path, no need to snprintf() it.

It's definitely possible to have more than one CUDA toolkit installed on a machine. I have 2-3 on all of my machines, and on many HPC clusters there will also be several versions available. Also, if pocl is distributed as a binary (e.g. a Linux package), the location of the CUDA toolkit at compile-time might be different to where it is installed on the end-user machine. Longer term I want to remove this runtime dependency completely as per the comment in the code.
I think detecting the CUDA location at compile-time and using this as the default path is a good idea though (instead of just using an empty string!), it definitely would make things easier for users in most situations. I'll try and sort something out soon.",True,{}
pocl/pocl,https://github.com/pocl/pocl,465,2017-04-21T15:46:43Z,2017-04-25T08:50:45Z,2017-04-25T15:14:14Z,MERGED,True,2333,11,44,https://github.com/jrprice,Add NVIDIA GPU support,135,[],https://github.com/pocl/pocl/pull/465,https://github.com/jrprice,4,https://github.com/pocl/pocl/pull/465#issuecomment-296639324,"This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!","OK, I think I've addressed all of the feedback now. I've added some CMake stuff for auto-detecting the CUDA toolkit path as @franz suggested.
Let me know if there is anything else.",True,{}
pocl/pocl,https://github.com/pocl/pocl,465,2017-04-21T15:46:43Z,2017-04-25T08:50:45Z,2017-04-25T15:14:14Z,MERGED,True,2333,11,44,https://github.com/jrprice,Add NVIDIA GPU support,135,[],https://github.com/pocl/pocl/pull/465,https://github.com/jrprice,5,https://github.com/pocl/pocl/pull/465#issuecomment-296841256,"This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!","OK, these comments should be addressed now too.
I've added an initial draft of the web posting too. Let me know if it's the kind of thing you're after - if it's too long I can take stuff out.",True,{}
pocl/pocl,https://github.com/pocl/pocl,465,2017-04-21T15:46:43Z,2017-04-25T08:50:45Z,2017-04-25T15:14:14Z,MERGED,True,2333,11,44,https://github.com/jrprice,Add NVIDIA GPU support,135,[],https://github.com/pocl/pocl/pull/465,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/465#issuecomment-296950744,"This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!",Looks great. Final local test here (without cuda though) and then I'll push & announce.,True,{}
pocl/pocl,https://github.com/pocl/pocl,465,2017-04-21T15:46:43Z,2017-04-25T08:50:45Z,2017-04-25T15:14:14Z,MERGED,True,2333,11,44,https://github.com/jrprice,Add NVIDIA GPU support,135,[],https://github.com/pocl/pocl/pull/465,https://github.com/Oblomov,7,https://github.com/pocl/pocl/pull/465#issuecomment-296954253,"This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!","I can do some local testing on actual CUDA, but I'll need some time for that.",True,{}
pocl/pocl,https://github.com/pocl/pocl,465,2017-04-21T15:46:43Z,2017-04-25T08:50:45Z,2017-04-25T15:14:14Z,MERGED,True,2333,11,44,https://github.com/jrprice,Add NVIDIA GPU support,135,[],https://github.com/pocl/pocl/pull/465,https://github.com/jrprice,8,https://github.com/pocl/pocl/pull/465#issuecomment-296966405,"This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!","@Oblomov Further testing on other platforms would definitely be very welcome. Do let us know how you get on.
@pjaaskel Thanks for merging!",True,{}
pocl/pocl,https://github.com/pocl/pocl,465,2017-04-21T15:46:43Z,2017-04-25T08:50:45Z,2017-04-25T15:14:14Z,MERGED,True,2333,11,44,https://github.com/jrprice,Add NVIDIA GPU support,135,[],https://github.com/pocl/pocl/pull/465,https://github.com/Oblomov,9,https://github.com/pocl/pocl/pull/465#issuecomment-297062925,"This is a bit of a monolithic patch, but for the most part the changes are self-contained.
Essentially, this is a PTX/CUDA backend for pocl. We use the NVPTX backend in LLVM to generate PTX, which requires a handful of LLVM IR transformations (all in lib/CL/devices/cuda/pocl-ptx-gen.cc). We then use the CUDA driver API to implement the runtime functionality.
This is far from finished, but at this stage it's passing 74 tests from the internal test suite, and can run some real programs (including things that NVIDIA's own OpenCL implementation cannot, such as SPIR-based codes).
I've added a doc page describing how to build it and run it, along with the current status.
Any and all feedback/questions welcome!","Ok, managed to build and got an abort() after a failure to open libdevice library file while running my clinfo. Not impressed ;-) Joking aside, I'll look into this further, and then either open tickets here or propose pull requests, depending on time and detail availability.",True,{}
pocl/pocl,https://github.com/pocl/pocl,466,2017-04-25T10:36:59Z,2017-05-02T07:58:31Z,2017-05-08T09:11:36Z,MERGED,True,797,897,56,https://github.com/franz,more bugfixes,16,[],https://github.com/pocl/pocl/pull/466,https://github.com/franz,1,https://github.com/pocl/pocl/pull/466,"POCL_DEBUG messages now have categories
cache locking should be somewhat more reliable (issue #430)
pocl_write_file() now uses new pocl_rename()
enable clEnqueueMigrateMemObjects(), clEnqueueBarrierWithWaitlist()
fix memory problems in llvm_codegen by using vfork()+exec() instead of system()
add proper refcounting to samplers
fix buffer fill for >8byte patterns","POCL_DEBUG messages now have categories
cache locking should be somewhat more reliable (issue #430)
pocl_write_file() now uses new pocl_rename()
enable clEnqueueMigrateMemObjects(), clEnqueueBarrierWithWaitlist()
fix memory problems in llvm_codegen by using vfork()+exec() instead of system()
add proper refcounting to samplers
fix buffer fill for >8byte patterns",True,{}
pocl/pocl,https://github.com/pocl/pocl,468,2017-04-28T07:41:04Z,2017-05-02T07:04:17Z,2017-05-02T11:56:44Z,MERGED,True,153,53,15,https://github.com/jrprice,Add support for LLVM 5.0 (trunk),2,[],https://github.com/pocl/pocl/pull/468,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/468,"Other than the usual minor API changes, the main change here is that the various *->dump() methods are no longer available in release builds, so I had to guard a bunch of uses of this throughout the LLVM passes.
There are only two regressions for me on Linux at present:

test_clGetKernelArgInfo fails
EinsteinToolkit hangs during program build","Other than the usual minor API changes, the main change here is that the various *->dump() methods are no longer available in release builds, so I had to guard a bunch of uses of this throughout the LLVM passes.
There are only two regressions for me on Linux at present:

test_clGetKernelArgInfo fails
EinsteinToolkit hangs during program build",True,{}
pocl/pocl,https://github.com/pocl/pocl,468,2017-04-28T07:41:04Z,2017-05-02T07:04:17Z,2017-05-02T11:56:44Z,MERGED,True,153,53,15,https://github.com/jrprice,Add support for LLVM 5.0 (trunk),2,[],https://github.com/pocl/pocl/pull/468,https://github.com/jrprice,2,https://github.com/pocl/pocl/pull/468#issuecomment-298315170,"Other than the usual minor API changes, the main change here is that the various *->dump() methods are no longer available in release builds, so I had to guard a bunch of uses of this throughout the LLVM passes.
There are only two regressions for me on Linux at present:

test_clGetKernelArgInfo fails
EinsteinToolkit hangs during program build",Updated to address your comments.,True,{}
pocl/pocl,https://github.com/pocl/pocl,469,2017-04-28T21:42:32Z,2017-05-02T08:38:01Z,2017-05-02T11:56:32Z,MERGED,True,143,2,4,https://github.com/jrprice,Fix AutomaticLocals breaking constant expressions,3,[],https://github.com/pocl/pocl/pull/469,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/469,"Replacing an automatic local with an argument doesn't work if one of the
users is a constant expressions, since function arguments aren't
constants. Instead, we first replace any constant expression users with
their equivalent instructions.
Fixes #467.","Replacing an automatic local with an argument doesn't work if one of the
users is a constant expressions, since function arguments aren't
constants. Instead, we first replace any constant expression users with
their equivalent instructions.
Fixes #467.",True,{}
pocl/pocl,https://github.com/pocl/pocl,469,2017-04-28T21:42:32Z,2017-05-02T08:38:01Z,2017-05-02T11:56:32Z,MERGED,True,143,2,4,https://github.com/jrprice,Fix AutomaticLocals breaking constant expressions,3,[],https://github.com/pocl/pocl/pull/469,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/469#issuecomment-298297311,"Replacing an automatic local with an argument doesn't work if one of the
users is a constant expressions, since function arguments aren't
constants. Instead, we first replace any constant expression users with
their equivalent instructions.
Fixes #467.",BreakConstantGEPs was previously used for this. Could it be expanded instead of adding the fix inside AutomaticLocals?,True,{}
pocl/pocl,https://github.com/pocl/pocl,469,2017-04-28T21:42:32Z,2017-05-02T08:38:01Z,2017-05-02T11:56:32Z,MERGED,True,143,2,4,https://github.com/jrprice,Fix AutomaticLocals breaking constant expressions,3,[],https://github.com/pocl/pocl/pull/469,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/469#issuecomment-298298860,"Replacing an automatic local with an argument doesn't work if one of the
users is a constant expressions, since function arguments aren't
constants. Instead, we first replace any constant expression users with
their equivalent instructions.
Fixes #467.","Hmm. Looking at BreakConstantGEPs, its code probably could be now simplified if there's an LLVM API call to get the equivalent normal instruction now.",True,{}
pocl/pocl,https://github.com/pocl/pocl,469,2017-04-28T21:42:32Z,2017-05-02T08:38:01Z,2017-05-02T11:56:32Z,MERGED,True,143,2,4,https://github.com/jrprice,Fix AutomaticLocals breaking constant expressions,3,[],https://github.com/pocl/pocl/pull/469,https://github.com/jrprice,4,https://github.com/pocl/pocl/pull/469#issuecomment-298303104,"Replacing an automatic local with an argument doesn't work if one of the
users is a constant expressions, since function arguments aren't
constants. Instead, we first replace any constant expression users with
their equivalent instructions.
Fixes #467.","Is this automatic locals problem the only reason the BreakConstantGEPs pass exists? If so, wouldn't it be better to just handle this issue inside the AutomaticLocals pass and get rid of the BreakConstantGEPs pass completely? We don't need to convert all constant expressions to instructions, just the ones that use automatic locals. Also, we only want to do this if we are running the AutomaticLocals pass at all; if we're not then this is just wasted work.",True,{}
pocl/pocl,https://github.com/pocl/pocl,469,2017-04-28T21:42:32Z,2017-05-02T08:38:01Z,2017-05-02T11:56:32Z,MERGED,True,143,2,4,https://github.com/jrprice,Fix AutomaticLocals breaking constant expressions,3,[],https://github.com/pocl/pocl/pull/469,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/469#issuecomment-298311344,"Replacing an automatic local with an argument doesn't work if one of the
users is a constant expressions, since function arguments aren't
constants. Instead, we first replace any constant expression users with
their equivalent instructions.
Fixes #467.","I believe it's the only reason it exists. At least I cannot remember of another reason. In that case, yes, you are right it makes more sense to do it there and only for the autolocals that are affected by it. Perhaps a good patch is to disable BreakConstantGEPs for now (but not yet remove it) and replace it with your code, and we can see if any of the bots encounter problems.",True,{}
pocl/pocl,https://github.com/pocl/pocl,469,2017-04-28T21:42:32Z,2017-05-02T08:38:01Z,2017-05-02T11:56:32Z,MERGED,True,143,2,4,https://github.com/jrprice,Fix AutomaticLocals breaking constant expressions,3,[],https://github.com/pocl/pocl/pull/469,https://github.com/jrprice,6,https://github.com/pocl/pocl/pull/469#issuecomment-298323530,"Replacing an automatic local with an argument doesn't work if one of the
users is a constant expressions, since function arguments aren't
constants. Instead, we first replace any constant expression users with
their equivalent instructions.
Fixes #467.","OK, I've now done this. No regressions on my machines so far.",True,{}
pocl/pocl,https://github.com/pocl/pocl,470,2017-05-02T11:46:43Z,2017-05-03T06:34:32Z,2017-05-03T06:34:32Z,MERGED,True,1144,132,24,https://github.com/jrprice,Various CUDA backend improvements,21,[],https://github.com/pocl/pocl/pull/470,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/470,"With these changes, the CUDA backend now passes the full basic conformance test suite on sm_35 and sm_52 devices (skipping images, which are currently unsupported).
Significant changes are support for global offsets and atomic functions, a transformation to allow pointer arguments in the constant address space, and better auto-detection of the CUDA libdevice library path courtesy of @Oblomov.","With these changes, the CUDA backend now passes the full basic conformance test suite on sm_35 and sm_52 devices (skipping images, which are currently unsupported).
Significant changes are support for global offsets and atomic functions, a transformation to allow pointer arguments in the constant address space, and better auto-detection of the CUDA libdevice library path courtesy of @Oblomov.",True,{}
pocl/pocl,https://github.com/pocl/pocl,471,2017-05-08T09:16:26Z,2017-05-09T12:48:42Z,2017-05-29T10:51:07Z,MERGED,True,12112,354,66,https://github.com/franz,Next,22,[],https://github.com/pocl/pocl/pull/471,https://github.com/franz,1,https://github.com/pocl/pocl/pull/471,"fix missing native_* / half_* kernel lib functions
optnone on get_global_id
change host device to 1.2
images/samplers: implement nearest / linear filters
bunch of bugfixes","fix missing native_* / half_* kernel lib functions
optnone on get_global_id
change host device to 1.2
images/samplers: implement nearest / linear filters
bunch of bugfixes",True,{}
pocl/pocl,https://github.com/pocl/pocl,473,2017-05-08T10:33:55Z,2017-05-12T05:47:10Z,2017-09-27T20:51:35Z,MERGED,True,30,10,2,https://github.com/Oblomov,Probe for CUDA devices,3,[],https://github.com/pocl/pocl/pull/473,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/473,This fixes #472 and additionally introduces the possibility to use (or at least access) all available devices.,This fixes #472 and additionally introduces the possibility to use (or at least access) all available devices.,True,{}
pocl/pocl,https://github.com/pocl/pocl,473,2017-05-08T10:33:55Z,2017-05-12T05:47:10Z,2017-09-27T20:51:35Z,MERGED,True,30,10,2,https://github.com/Oblomov,Probe for CUDA devices,3,[],https://github.com/pocl/pocl/pull/473,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/473#issuecomment-299880026,This fixes #472 and additionally introduces the possibility to use (or at least access) all available devices.,@jrprice pls review,True,{}
pocl/pocl,https://github.com/pocl/pocl,473,2017-05-08T10:33:55Z,2017-05-12T05:47:10Z,2017-09-27T20:51:35Z,MERGED,True,30,10,2,https://github.com/Oblomov,Probe for CUDA devices,3,[],https://github.com/pocl/pocl/pull/473,https://github.com/Oblomov,3,https://github.com/pocl/pocl/pull/473#issuecomment-300546554,This fixes #472 and additionally introduces the possibility to use (or at least access) all available devices.,"Rebased on current master, and removed a spurious comment that crept in during my tests.
BTW, the first two commits are not really CUDA-specific, so you may want to cherry pick them regardless.",True,{}
pocl/pocl,https://github.com/pocl/pocl,473,2017-05-08T10:33:55Z,2017-05-12T05:47:10Z,2017-09-27T20:51:35Z,MERGED,True,30,10,2,https://github.com/Oblomov,Probe for CUDA devices,3,[],https://github.com/pocl/pocl/pull/473,https://github.com/Oblomov,4,https://github.com/pocl/pocl/pull/473#issuecomment-300721017,This fixes #472 and additionally introduces the possibility to use (or at least access) all available devices.,"I notice that if we only have one device and run with POCL_DEVICES=""CUDA CUDA"" it will abort.

Arguably, erroring out is not a bad choice, since the user requested devices which are not available.
Other approaches possible:

expose min(requested, available) CUDA devices;
if there are less available devices than requested, propose the same devices again (e.g. if there are two devices, and the user has POCL_DEVICES=""CUDA CUDA CUDA CUDA"", then expose devices 0, 1, 0, 1).

Which one should I go with?",True,{}
pocl/pocl,https://github.com/pocl/pocl,473,2017-05-08T10:33:55Z,2017-05-12T05:47:10Z,2017-09-27T20:51:35Z,MERGED,True,30,10,2,https://github.com/Oblomov,Probe for CUDA devices,3,[],https://github.com/pocl/pocl/pull/473,https://github.com/jrprice,5,https://github.com/pocl/pocl/pull/473#issuecomment-300723203,This fixes #472 and additionally introduces the possibility to use (or at least access) all available devices.,"The pthread backend does the latter (expose the CPU multiple times), but I think in this case erroring out is fine. It might be good to make the error more user-friendly though (and possible not abort?), currently we just get CUDA_ERROR_INVALID_DEVICE: invalid device ordinal.",True,{}
pocl/pocl,https://github.com/pocl/pocl,473,2017-05-08T10:33:55Z,2017-05-12T05:47:10Z,2017-09-27T20:51:35Z,MERGED,True,30,10,2,https://github.com/Oblomov,Probe for CUDA devices,3,[],https://github.com/pocl/pocl/pull/473,https://github.com/Oblomov,6,https://github.com/pocl/pocl/pull/473#issuecomment-300737629,This fixes #472 and additionally introduces the possibility to use (or at least access) all available devices.,"OK, pushed. Now we abort with a more sensible error message.",True,{}
pocl/pocl,https://github.com/pocl/pocl,475,2017-05-14T21:26:39Z,2017-05-16T09:37:14Z,2017-05-16T09:37:14Z,MERGED,True,234,123,15,https://github.com/Oblomov,[RFC] Cleanup init devices,7,[],https://github.com/pocl/pocl/pull/475,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/475,"I dislike it when platforms abort() on error, since this prevents the invoking application from properly handling error conditions. This is particularly damning on initialization, which is actually one of the easiest situations to handle (for example by changing platform).
This patch series proposes a method to handle error condition during initialization (essentially, marking problematic devices as unavailable instead of simply killing everything). It is not complete, since I'm not particularly familiar with the TCE and HSA code and I'm not in the condition to test things.","I dislike it when platforms abort() on error, since this prevents the invoking application from properly handling error conditions. This is particularly damning on initialization, which is actually one of the easiest situations to handle (for example by changing platform).
This patch series proposes a method to handle error condition during initialization (essentially, marking problematic devices as unavailable instead of simply killing everything). It is not complete, since I'm not particularly familiar with the TCE and HSA code and I'm not in the condition to test things.",True,{}
pocl/pocl,https://github.com/pocl/pocl,475,2017-05-14T21:26:39Z,2017-05-16T09:37:14Z,2017-05-16T09:37:14Z,MERGED,True,234,123,15,https://github.com/Oblomov,[RFC] Cleanup init devices,7,[],https://github.com/pocl/pocl/pull/475,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/475#issuecomment-301386780,"I dislike it when platforms abort() on error, since this prevents the invoking application from properly handling error conditions. This is particularly damning on initialization, which is actually one of the easiest situations to handle (for example by changing platform).
This patch series proposes a method to handle error condition during initialization (essentially, marking problematic devices as unavailable instead of simply killing everything). It is not complete, since I'm not particularly familiar with the TCE and HSA code and I'm not in the condition to test things.","HSA fails to build. Please fix:
/home/visit0r/src/pocl-public/lib/CL/devices/hsa/pocl-hsa.c: In function ‘pocl_hsa_init_device_infos’:
/home/visit0r/src/pocl-public/lib/CL/devices/hsa/pocl-hsa.c:462:5: error: ‘j’ undeclared (first use in this function)
   assert (j < found_hsa_agents);
     ^
/home/visit0r/src/pocl-public/lib/CL/devices/hsa/pocl-hsa.c:462:5: note: each undeclared identifier is reported only once for each function it appears in
/home/visit0r/src/pocl-public/lib/CL/devices/hsa/pocl-hsa.c: At top level:
/home/visit0r/src/pocl-public/lib/CL/devices/hsa/pocl-hsa.c:603:1: error: conflicting types for ‘pocl_hsa_init’
 pocl_hsa_init (unsigned j, cl_device_id device, const char* parameters)
 ^
In file included from /home/visit0r/src/pocl-public/lib/CL/devices/hsa/pocl-hsa.c:71:0:
/home/visit0r/src/pocl-public/lib/CL/devices/hsa/pocl-hsa.h:32:663: note: previous declaration of ‘pocl_hsa_init’ was here
 GEN_PROTOTYPES (hsa)",True,{}
pocl/pocl,https://github.com/pocl/pocl,475,2017-05-14T21:26:39Z,2017-05-16T09:37:14Z,2017-05-16T09:37:14Z,MERGED,True,234,123,15,https://github.com/Oblomov,[RFC] Cleanup init devices,7,[],https://github.com/pocl/pocl/pull/475,https://github.com/Oblomov,3,https://github.com/pocl/pocl/pull/475#issuecomment-301551170,"I dislike it when platforms abort() on error, since this prevents the invoking application from properly handling error conditions. This is particularly damning on initialization, which is actually one of the easiest situations to handle (for example by changing platform).
This patch series proposes a method to handle error condition during initialization (essentially, marking problematic devices as unavailable instead of simply killing everything). It is not complete, since I'm not particularly familiar with the TCE and HSA code and I'm not in the condition to test things.","Ah, fixing the HSA build I think requires a change also to init_device_infos. Not a problem, I guess.",True,{}
pocl/pocl,https://github.com/pocl/pocl,476,2017-05-25T22:20:31Z,2017-05-26T06:56:48Z,2017-05-26T06:56:48Z,MERGED,True,6,1,1,https://github.com/tstellar,Use generic cpu when LLVM can't detect the host processor,1,[],https://github.com/pocl/pocl/pull/476,https://github.com/tstellar,1,https://github.com/pocl/pocl/pull/476,"LLVM's CPU detection is very basic, it parses /proc/cpuinfo and uses
information from their to look up CPUs in its own internal tables.
These tables are incomplete, so it's not uncommon for LLVM to not
be able to detect the CPU.
Ideally pocl would use something better than llc --version for CPU
detection, but for now we can at least fallback to the generic
cpu when LLVM can't detect the host.","LLVM's CPU detection is very basic, it parses /proc/cpuinfo and uses
information from their to look up CPUs in its own internal tables.
These tables are incomplete, so it's not uncommon for LLVM to not
be able to detect the CPU.
Ideally pocl would use something better than llc --version for CPU
detection, but for now we can at least fallback to the generic
cpu when LLVM can't detect the host.",True,{}
pocl/pocl,https://github.com/pocl/pocl,477,2017-05-29T11:04:08Z,2017-05-31T16:18:29Z,2017-05-31T16:18:29Z,MERGED,True,1096,518,29,https://github.com/franz,Next,20,[],https://github.com/pocl/pocl/pull/477,https://github.com/franz,1,https://github.com/pocl/pocl/pull/477,"2D / 3D image reads / writes should be working
some work on 1D / 2D arrays
atomics - implement 64bit atomic min/max using atomic_cmpxchg; all atomics now pass tests
fix NaN in printf - printf now passes all tests
Flatten reverted to old behavior (AlwaysInline only the users of global vars + barrier(), let LLVM inline anything else)

.. plus bugfixes all over.","2D / 3D image reads / writes should be working
some work on 1D / 2D arrays
atomics - implement 64bit atomic min/max using atomic_cmpxchg; all atomics now pass tests
fix NaN in printf - printf now passes all tests
Flatten reverted to old behavior (AlwaysInline only the users of global vars + barrier(), let LLVM inline anything else)

.. plus bugfixes all over.",True,{}
pocl/pocl,https://github.com/pocl/pocl,479,2017-06-02T13:37:21Z,2017-06-05T07:46:37Z,2017-07-27T09:45:26Z,MERGED,True,860,184,15,https://github.com/jrprice,[CUDA] Asynchronous command submission,27,[],https://github.com/pocl/pocl/pull/479,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/479,"This patch makes the CUDA backend deal with command submission asynchronously. This enables commands to be overlapped when using multiple devices, or with multiple command queues targeting the same device (e.g. overlapping compute with data transfers). Event dependencies are now handled using CUDA events instead of blocking on the host.
The events category of the Khronos OpenCL conformance test suite now passes for the CUDA backend. I've also added a small section to the CUDA docs that list all the conformance test categories that pass.
There's a small handful of changes and bug fixes outside of the CUDA backend, but I don't think there's anything controversial.","This patch makes the CUDA backend deal with command submission asynchronously. This enables commands to be overlapped when using multiple devices, or with multiple command queues targeting the same device (e.g. overlapping compute with data transfers). Event dependencies are now handled using CUDA events instead of blocking on the host.
The events category of the Khronos OpenCL conformance test suite now passes for the CUDA backend. I've also added a small section to the CUDA docs that list all the conformance test categories that pass.
There's a small handful of changes and bug fixes outside of the CUDA backend, but I don't think there's anything controversial.",True,{}
pocl/pocl,https://github.com/pocl/pocl,479,2017-06-02T13:37:21Z,2017-06-05T07:46:37Z,2017-07-27T09:45:26Z,MERGED,True,860,184,15,https://github.com/jrprice,[CUDA] Asynchronous command submission,27,[],https://github.com/pocl/pocl/pull/479,https://github.com/jrprice,2,https://github.com/pocl/pocl/pull/479#issuecomment-305827173,"This patch makes the CUDA backend deal with command submission asynchronously. This enables commands to be overlapped when using multiple devices, or with multiple command queues targeting the same device (e.g. overlapping compute with data transfers). Event dependencies are now handled using CUDA events instead of blocking on the host.
The events category of the Khronos OpenCL conformance test suite now passes for the CUDA backend. I've also added a small section to the CUDA docs that list all the conformance test categories that pass.
There's a small handful of changes and bug fixes outside of the CUDA backend, but I don't think there's anything controversial.","Fixed comments - all C-style now in that file.
Also snuck in one more low-hanging conformance test fix.",True,{}
pocl/pocl,https://github.com/pocl/pocl,479,2017-06-02T13:37:21Z,2017-06-05T07:46:37Z,2017-07-27T09:45:26Z,MERGED,True,860,184,15,https://github.com/jrprice,[CUDA] Asynchronous command submission,27,[],https://github.com/pocl/pocl/pull/479,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/479#issuecomment-305967793,"This patch makes the CUDA backend deal with command submission asynchronously. This enables commands to be overlapped when using multiple devices, or with multiple command queues targeting the same device (e.g. overlapping compute with data transfers). Event dependencies are now handled using CUDA events instead of blocking on the host.
The events category of the Khronos OpenCL conformance test suite now passes for the CUDA backend. I've also added a small section to the CUDA docs that list all the conformance test categories that pass.
There's a small handful of changes and bug fixes outside of the CUDA backend, but I don't think there's anything controversial.","There are some failing pthread tests (at least with llvm-trunk):
83:runtime/clCreateSubDevices
86:runtime/test_user_event
115:AMD_30_AdvancedConvolution
117:AMD_30_BinomialOption
118:AMD_30_BinomialOptionMultiGPU
119:AMD_30_BitonicSort
120:AMD_30_BlackScholes
121:AMD_30_BlackScholesDP
122:AMD_30_BoxFilter
124:AMD_30_ConcurrentKernel
125:AMD_30_DCT
128:AMD_30_DwtHaar1D
129:AMD_30_FastWalshTransform
130:AMD_30_FloydWarshall
139:AMD_30_LUDecomposition
140:AMD_30_MatrixMulImage
141:AMD_30_MatrixMultiplication
142:AMD_30_MatrixTranspose
144:AMD_30_MonteCarloAsian
145:AMD_30_MonteCarloAsianMultiGPU
147:AMD_30_PrefixSum
149:AMD_30_RadixSort
150:AMD_30_RecursiveGaussian
151:AMD_30_Reduction
153:AMD_30_SimpleConvolution
156:AMD_30_SobelFilter
157:AMD_30_StringSearch
158:AMD_30_Template
160:AMD_30_URNG",True,{}
pocl/pocl,https://github.com/pocl/pocl,479,2017-06-02T13:37:21Z,2017-06-05T07:46:37Z,2017-07-27T09:45:26Z,MERGED,True,860,184,15,https://github.com/jrprice,[CUDA] Asynchronous command submission,27,[],https://github.com/pocl/pocl/pull/479,https://github.com/jrprice,4,https://github.com/pocl/pocl/pull/479#issuecomment-305986026,"This patch makes the CUDA backend deal with command submission asynchronously. This enables commands to be overlapped when using multiple devices, or with multiple command queues targeting the same device (e.g. overlapping compute with data transfers). Event dependencies are now handled using CUDA events instead of blocking on the host.
The events category of the Khronos OpenCL conformance test suite now passes for the CUDA backend. I've also added a small section to the CUDA docs that list all the conformance test categories that pass.
There's a small handful of changes and bug fixes outside of the CUDA backend, but I don't think there's anything controversial.","Should be fixed now.
I've also addressed the issues we were talking about #478 by adding a second background thread to handle command completion. This also greatly simplifies a lot of the code, and we no longer need to explicitly check the event wait list. The CUDA backend now behaves a lot more like the other device drivers, relying on the broadcast/notify approach to signal event completion.",True,{}
pocl/pocl,https://github.com/pocl/pocl,479,2017-06-02T13:37:21Z,2017-06-05T07:46:37Z,2017-07-27T09:45:26Z,MERGED,True,860,184,15,https://github.com/jrprice,[CUDA] Asynchronous command submission,27,[],https://github.com/pocl/pocl/pull/479,https://github.com/vkorhonen,5,https://github.com/pocl/pocl/pull/479#issuecomment-307071963,"This patch makes the CUDA backend deal with command submission asynchronously. This enables commands to be overlapped when using multiple devices, or with multiple command queues targeting the same device (e.g. overlapping compute with data transfers). Event dependencies are now handled using CUDA events instead of blocking on the host.
The events category of the Khronos OpenCL conformance test suite now passes for the CUDA backend. I've also added a small section to the CUDA docs that list all the conformance test categories that pass.
There's a small handful of changes and bug fixes outside of the CUDA backend, but I don't think there's anything controversial.","It seems that notifications and broadcasting are doing what they supposed to. Except for notify seems to assume that notifier event is not from this particular cuda device (assert (event_data->num_ext_events > 0);). The original idea is that all events are notified, so the device may notify itself. I do not see any events being removed from the wait lists. I might have misunderstood something, because you should have hit that assert in many cases already, assuming my assumption is correct.
In function pocl_cuda_submit_node you might want to lock the dep event before checking its status and unlocking it after event_data->num_ext_events++; to ensure that increment happens before dep broadcast. That num_ext_events should probably be volatile since it is possibly updated by another driver thread.
Submit/finalize-threads are continuously running full speed. pthread_cond_wait could be used there to suspend the threads when there is nothing to do. Also wait_event could use condition variable (see pthread implementation).
I am not sure if mem migration works. I assume that cuMemcpyDtoDAsync copies data around inside a device and the purpose of the migrate is to transfer mem object from another device/host to this device. So you might want to use pocl_migrate_mem_objects which uses this device drivers copy function if src and the dst are in the same global memory or else it uses appropriate drivers APIs to read from src device to host memory and then write to dst device.
Actually the same applies to all copy commands, it may be that src dev != dst dev. This is quite important to do correctly if someone needs to implement for example cpu<->gpu pipelined application.",True,{}
pocl/pocl,https://github.com/pocl/pocl,479,2017-06-02T13:37:21Z,2017-06-05T07:46:37Z,2017-07-27T09:45:26Z,MERGED,True,860,184,15,https://github.com/jrprice,[CUDA] Asynchronous command submission,27,[],https://github.com/pocl/pocl/pull/479,https://github.com/jrprice,6,https://github.com/pocl/pocl/pull/479#issuecomment-311038936,"This patch makes the CUDA backend deal with command submission asynchronously. This enables commands to be overlapped when using multiple devices, or with multiple command queues targeting the same device (e.g. overlapping compute with data transfers). Event dependencies are now handled using CUDA events instead of blocking on the host.
The events category of the Khronos OpenCL conformance test suite now passes for the CUDA backend. I've also added a small section to the CUDA docs that list all the conformance test categories that pass.
There's a small handful of changes and bug fixes outside of the CUDA backend, but I don't think there's anything controversial.","Thanks for the feedback @vkorhonen.
I've fixed the issue regarding notifications from CUDA devices to themselves in PR #485. That PR also deals with the memory migration issue you raised, although it still won't work if one of the devices is using non-host memory.

In function pocl_cuda_submit_node you might want to lock the dep event before checking its status and unlocking it after event_data->num_ext_events++; to ensure that increment happens before dep broadcast. That num_ext_events should probably be volatile since it is possibly updated by another driver thread.

IIRC this introduces a deadlock, but actually shouldn't be necessary. The dep event won't be able to broadcast to this node while we're in the process of incrementing num_ext_events because it would have to lock this event first. This was really awkward to reason about but I think it works.

Submit/finalize-threads are continuously running full speed. pthread_cond_wait could be used there to suspend the threads when there is nothing to do. Also wait_event could use condition variable (see pthread implementation).

I've made a note of this and will give it a go when I've regained access to some systems where I can test this properly in a multi-device set-up.",True,{}
pocl/pocl,https://github.com/pocl/pocl,481,2017-06-14T09:13:22Z,2017-06-14T14:16:43Z,2017-07-08T11:51:01Z,MERGED,True,3204,443,25,https://github.com/franz,Next,19,[],https://github.com/pocl/pocl/pull/481,https://github.com/franz,1,https://github.com/pocl/pocl/pull/481,"images almost finished (everything except 1D image buffer should work)
POCL_MEMORY_LIMIT env var (integer, gigabytes) to limit reported memory
clEnqueueFillImage pattern handling fixed
conformance suite in examples/conformance
SIGFPE handler (for division-by-zero / division-overflow errors).","images almost finished (everything except 1D image buffer should work)
POCL_MEMORY_LIMIT env var (integer, gigabytes) to limit reported memory
clEnqueueFillImage pattern handling fixed
conformance suite in examples/conformance
SIGFPE handler (for division-by-zero / division-overflow errors).",True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/hominhquan,1,https://github.com/pocl/pocl/pull/483,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.","program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.",True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/franz,2,https://github.com/pocl/pocl/pull/483#issuecomment-311622302,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.","No need for the if condition, free() can take NULL pointers.
man 3 free If ptr is NULL, no operation is performed.
otherwise LGTM.",True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/hominhquan,3,https://github.com/pocl/pocl/pull/483#issuecomment-311627781,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.","I removed the if-condition. However, somewhere in my head still tell me that there may be a system where free(NULL) is not totally safe. Some offensive programming guides recommend adding the if-condition to be safe.",True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/483#issuecomment-312860980,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.","Thanks for the PR,but it causes a double free with test_clBuildProgram. Please check.",True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/483#issuecomment-312861490,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.",Here's how to run the tests: http://portablecl.org/docs/html/development.html#testsuite,True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/hominhquan,6,https://github.com/pocl/pocl/pull/483#issuecomment-312880505,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.","Hi @pjaaskel, the double free come from the test with the failing build.
In case of build fails, the label ERROR_CLEAN_OPTIONS in clBuildProgram.c frees up the modded_options without resetting program->compiler_options to NULL, which will obviously cause double-free in clReleaseProgram in the next test.
Resetting compiler_options to NULL:
POCL_MEM_FREE(modded_options);
program->compiler_options = NULL;
fixes the double-free.
However, I'm confusing about free-ing the modded_options in case of building fails, because user can later query on this by clGetProgramBuildInfo (CL_PROGRAM_BUILD_OPTIONS) (his own options) and he will find program->compiler_options non-NULL pointed to something already free-ed => segfault.
We have two choices :


In case of fails (ERROR_CLEAN_OPTIONS in clBuildProgram.c) : do not POCL_MEM_FREE(modded_options), but POCL_MEM_FREE(program->compiler_options) in clReleaseProgram.c


Or keeping POCL_MEM_FREE(modded_options) + resetting compiler_options to NULL, but user wil lose trace to his build-options.


What's your opinion ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/pjaaskel,7,https://github.com/pocl/pocl/pull/483#issuecomment-312894595,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.","I'm not sure if it's allowed to query the build info on a program of which build has failed, thus is this undefined by the specs?",True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/hominhquan,8,https://github.com/pocl/pocl/pull/483#issuecomment-312897674,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.","I think its is allowed, since, in spec, clGetProgramBuildInfo can return CL_BUILD_ERROR on the program when we query for CL_PROGRAM_BUILD_STATUS.",True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/pjaaskel,9,https://github.com/pocl/pocl/pull/483#issuecomment-312998337,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.","OK. Then your 1. sounds the more sensible option, right?",True,{}
pocl/pocl,https://github.com/pocl/pocl,483,2017-06-26T09:36:04Z,2017-07-06T06:33:35Z,2017-07-06T06:33:35Z,MERGED,True,1,1,2,https://github.com/hominhquan,Field program->compiler_options is not free-ed in clReleaseProgram,3,[],https://github.com/pocl/pocl/pull/483,https://github.com/hominhquan,10,https://github.com/pocl/pocl/pull/483#issuecomment-313024455,"program->compiler_options is set to modded_options in clBuildProgram, when modded_options is result of a sequence of calloc and realloc in the APPEND_TOKEN macro.","Yes, unless we have any specific reason for free-ing modded_options in clBuildProgram, I think 1. is the most appropriate.",True,{}
pocl/pocl,https://github.com/pocl/pocl,485,2017-06-26T11:51:42Z,2017-07-04T13:01:24Z,2017-07-04T13:01:24Z,MERGED,True,72,30,1,https://github.com/jrprice,[CUDA] Address some issues in async handling,3,[],https://github.com/pocl/pocl/pull/485,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/485,This addresses a couple of @vkorhonen's comments in PR #479.,This addresses a couple of @vkorhonen's comments in PR #479.,True,{}
pocl/pocl,https://github.com/pocl/pocl,489,2017-07-08T11:56:45Z,2017-07-10T07:14:35Z,2017-07-15T07:12:00Z,MERGED,True,1657,1107,41,https://github.com/franz,Next,18,[],https://github.com/pocl/pocl/pull/489,https://github.com/franz,1,https://github.com/pocl/pocl/pull/489,TBD,TBD,True,{}
pocl/pocl,https://github.com/pocl/pocl,490,2017-07-09T23:10:28Z,2017-07-10T08:09:14Z,2017-07-10T08:09:14Z,MERGED,True,6,0,1,https://github.com/mattwala,clReleaseProgram: Also free pocl_binaries,2,[],https://github.com/pocl/pocl/pull/490,https://github.com/mattwala,1,https://github.com/pocl/pocl/pull/490,"This fixes a memory leak of binaries allocated in clCreateProgramWithBinary.
cc: @inducer","This fixes a memory leak of binaries allocated in clCreateProgramWithBinary.
cc: @inducer",True,{}
pocl/pocl,https://github.com/pocl/pocl,492,2017-07-15T07:16:56Z,2017-07-25T16:03:46Z,2017-07-26T07:49:30Z,MERGED,True,2321,2206,40,https://github.com/franz,Next,23,[],https://github.com/pocl/pocl/pull/492,https://github.com/franz,1,https://github.com/pocl/pocl/pull/492,"fixes some bugs from previous PRs
some memleak fixes
flush-to-zero handling for x86-64
fix convert_sat_()
LLVM 5.0 fix
add some stubs for OpenGL calls","fixes some bugs from previous PRs
some memleak fixes
flush-to-zero handling for x86-64
fix convert_sat_()
LLVM 5.0 fix
add some stubs for OpenGL calls",True,{}
pocl/pocl,https://github.com/pocl/pocl,492,2017-07-15T07:16:56Z,2017-07-25T16:03:46Z,2017-07-26T07:49:30Z,MERGED,True,2321,2206,40,https://github.com/franz,Next,23,[],https://github.com/pocl/pocl/pull/492,https://github.com/franz,2,https://github.com/pocl/pocl/pull/492#issuecomment-317740866,"fixes some bugs from previous PRs
some memleak fixes
flush-to-zero handling for x86-64
fix convert_sat_()
LLVM 5.0 fix
add some stubs for OpenGL calls","OK, hopefully everything in conversions is now fixed (i'll run the full tests overnight). Also pocl's conversion tests should be fixed now (tested with 3.8 to 4.0). Let me know if there's anything else.",True,{}
pocl/pocl,https://github.com/pocl/pocl,493,2017-07-26T16:21:01Z,2017-08-04T11:19:50Z,2017-08-05T11:35:38Z,MERGED,True,905,467,41,https://github.com/franz,Next,28,[],https://github.com/pocl/pocl/pull/493,https://github.com/franz,1,https://github.com/pocl/pocl/pull/493,"properly handle -cl-ext for LLVM 4+
implement get_image_array_size
cmake: disable tests that take too long on CPU, enable some kernel tests (convert_type) that should be enabled
subdevices now pass conformance tests
partially revert the flatten-only-globals pass since it was causing significant performance regressions. We still need the globals-only for images, so detect image reads/writes and don't flatten programs with those.
refactor pocl llvm codegen / gen wg function. The way they were written, they were holding a write lock during entire gen_wg()+codegen(), which was causing some heavily threaded tests to timeout on acquire-lock. I've changed the code to build everything in memory, and write out all files just before linking.
some performance tuning (focused on better scaling for multicore machines).

Some benchmarks on AMD SDK 3.0, relative to pocl 0.14 ceteris partybus (8C/16T cpu, llvm 4.0, kernel 4.11) (+improvement, -regression):
BitonicSort +116%
FastWalshTransform -2%
FloydWarshall +350% kernel, +136% total
MatrixTranspose +1%
MatrixMultiplication +11%
NBody +42%
RadixSort +140%
SimpleConvolution Separable Filter +44%
CPU power management is too clever these days, even with performance governor, so results might be few % off. Worst regression seems to be FastWalshTransform (-2%) so far, but i haven't run the full AMD SDK tests yet.","properly handle -cl-ext for LLVM 4+
implement get_image_array_size
cmake: disable tests that take too long on CPU, enable some kernel tests (convert_type) that should be enabled
subdevices now pass conformance tests
partially revert the flatten-only-globals pass since it was causing significant performance regressions. We still need the globals-only for images, so detect image reads/writes and don't flatten programs with those.
refactor pocl llvm codegen / gen wg function. The way they were written, they were holding a write lock during entire gen_wg()+codegen(), which was causing some heavily threaded tests to timeout on acquire-lock. I've changed the code to build everything in memory, and write out all files just before linking.
some performance tuning (focused on better scaling for multicore machines).

Some benchmarks on AMD SDK 3.0, relative to pocl 0.14 ceteris partybus (8C/16T cpu, llvm 4.0, kernel 4.11) (+improvement, -regression):
BitonicSort +116%
FastWalshTransform -2%
FloydWarshall +350% kernel, +136% total
MatrixTranspose +1%
MatrixMultiplication +11%
NBody +42%
RadixSort +140%
SimpleConvolution Separable Filter +44%
CPU power management is too clever these days, even with performance governor, so results might be few % off. Worst regression seems to be FastWalshTransform (-2%) so far, but i haven't run the full AMD SDK tests yet.",True,{}
pocl/pocl,https://github.com/pocl/pocl,493,2017-07-26T16:21:01Z,2017-08-04T11:19:50Z,2017-08-05T11:35:38Z,MERGED,True,905,467,41,https://github.com/franz,Next,28,[],https://github.com/pocl/pocl/pull/493,https://github.com/franz,2,https://github.com/pocl/pocl/pull/493#issuecomment-319146231,"properly handle -cl-ext for LLVM 4+
implement get_image_array_size
cmake: disable tests that take too long on CPU, enable some kernel tests (convert_type) that should be enabled
subdevices now pass conformance tests
partially revert the flatten-only-globals pass since it was causing significant performance regressions. We still need the globals-only for images, so detect image reads/writes and don't flatten programs with those.
refactor pocl llvm codegen / gen wg function. The way they were written, they were holding a write lock during entire gen_wg()+codegen(), which was causing some heavily threaded tests to timeout on acquire-lock. I've changed the code to build everything in memory, and write out all files just before linking.
some performance tuning (focused on better scaling for multicore machines).

Some benchmarks on AMD SDK 3.0, relative to pocl 0.14 ceteris partybus (8C/16T cpu, llvm 4.0, kernel 4.11) (+improvement, -regression):
BitonicSort +116%
FastWalshTransform -2%
FloydWarshall +350% kernel, +136% total
MatrixTranspose +1%
MatrixMultiplication +11%
NBody +42%
RadixSort +140%
SimpleConvolution Separable Filter +44%
CPU power management is too clever these days, even with performance governor, so results might be few % off. Worst regression seems to be FastWalshTransform (-2%) so far, but i haven't run the full AMD SDK tests yet.","OK i think everything should be handled now, all tests pass on my buildbots.",True,{}
pocl/pocl,https://github.com/pocl/pocl,498,2017-07-27T08:23:26Z,2017-07-27T09:34:34Z,2017-07-27T09:34:34Z,MERGED,True,0,2,1,https://github.com/rjodin,fix issue #486 (Release MemObject on multi-devices platform),1,[],https://github.com/pocl/pocl/pull/498,https://github.com/rjodin,1,https://github.com/pocl/pocl/pull/498,"When we create a buffer on a multi-devices platform, we do not want
any clRetainMemObject on it so that only one clReleaseMemObject is
needed to free the buffer.","When we create a buffer on a multi-devices platform, we do not want
any clRetainMemObject on it so that only one clReleaseMemObject is
needed to free the buffer.",True,{}
pocl/pocl,https://github.com/pocl/pocl,499,2017-08-03T20:35:39Z,2017-08-04T08:42:12Z,2017-08-06T15:57:05Z,MERGED,True,9,0,1,https://github.com/jrprice,[CUDA] Handle free_ptr for clSVMFree,1,[],https://github.com/pocl/pocl/pull/499,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/499,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,499,2017-08-03T20:35:39Z,2017-08-04T08:42:12Z,2017-08-06T15:57:05Z,MERGED,True,9,0,1,https://github.com/jrprice,[CUDA] Handle free_ptr for clSVMFree,1,[],https://github.com/pocl/pocl/pull/499,https://github.com/hahnjo,2,https://github.com/pocl/pocl/pull/499#issuecomment-320163774,,I can confirm that this fixes the crash we have been dicussing offline 👍,True,{}
pocl/pocl,https://github.com/pocl/pocl,503,2017-08-09T06:57:59Z,2017-08-15T16:08:54Z,2017-08-16T07:49:57Z,MERGED,True,2436,1117,73,https://github.com/franz,Next,38,[],https://github.com/pocl/pocl/pull/503,https://github.com/franz,1,https://github.com/pocl/pocl/pull/503,"bunch of minor fixes (for errors reported by piglit & stuff)
ARM now at least builds (bunch of tests fail)
pocl_llvm_api.cc cleanup (move most of one-time initialization to InitializeLLVM() instead of having it all over )
fp16 vload/vstore implementation using F16C instruction set with fallback to software. ATM vload & vstore pass tests for float <-> half but not yet double <-> half.
move linking of kernel library from generate_wg_func (=parallel.bc) to pocl_llvm_{build,link}_program (=program.bc). Should save some time when building multiple kernels from 1 program, also allows pocl to check undefined symbols at clBuild/LinkProgram time. Bump pocl_binary version (b/c old binaries expect to be linked to kernel lib after loading).
fix issue #488 by checking undefined symbols when linking program.bc with kernel library. Impact on build/link times should be minimal.","bunch of minor fixes (for errors reported by piglit & stuff)
ARM now at least builds (bunch of tests fail)
pocl_llvm_api.cc cleanup (move most of one-time initialization to InitializeLLVM() instead of having it all over )
fp16 vload/vstore implementation using F16C instruction set with fallback to software. ATM vload & vstore pass tests for float <-> half but not yet double <-> half.
move linking of kernel library from generate_wg_func (=parallel.bc) to pocl_llvm_{build,link}_program (=program.bc). Should save some time when building multiple kernels from 1 program, also allows pocl to check undefined symbols at clBuild/LinkProgram time. Bump pocl_binary version (b/c old binaries expect to be linked to kernel lib after loading).
fix issue #488 by checking undefined symbols when linking program.bc with kernel library. Impact on build/link times should be minimal.",True,{}
pocl/pocl,https://github.com/pocl/pocl,503,2017-08-09T06:57:59Z,2017-08-15T16:08:54Z,2017-08-16T07:49:57Z,MERGED,True,2436,1117,73,https://github.com/franz,Next,38,[],https://github.com/pocl/pocl/pull/503,https://github.com/franz,2,https://github.com/pocl/pocl/pull/503#issuecomment-322175898,"bunch of minor fixes (for errors reported by piglit & stuff)
ARM now at least builds (bunch of tests fail)
pocl_llvm_api.cc cleanup (move most of one-time initialization to InitializeLLVM() instead of having it all over )
fp16 vload/vstore implementation using F16C instruction set with fallback to software. ATM vload & vstore pass tests for float <-> half but not yet double <-> half.
move linking of kernel library from generate_wg_func (=parallel.bc) to pocl_llvm_{build,link}_program (=program.bc). Should save some time when building multiple kernels from 1 program, also allows pocl to check undefined symbols at clBuild/LinkProgram time. Bump pocl_binary version (b/c old binaries expect to be linked to kernel lib after loading).
fix issue #488 by checking undefined symbols when linking program.bc with kernel library. Impact on build/link times should be minimal.","Rebased to master.
The FP16 library had problems compiling for both TCE and HSA, so i've decided to reimplement their code in OpenCL and drop the original code, wasn't worth the trouble.
TCE tests / examples now use printf() instead of putchar().
SPIR binaries are now expected to be fully linked.",True,{}
pocl/pocl,https://github.com/pocl/pocl,503,2017-08-09T06:57:59Z,2017-08-15T16:08:54Z,2017-08-16T07:49:57Z,MERGED,True,2436,1117,73,https://github.com/franz,Next,38,[],https://github.com/pocl/pocl/pull/503,https://github.com/franz,3,https://github.com/pocl/pocl/pull/503#issuecomment-322497319,"bunch of minor fixes (for errors reported by piglit & stuff)
ARM now at least builds (bunch of tests fail)
pocl_llvm_api.cc cleanup (move most of one-time initialization to InitializeLLVM() instead of having it all over )
fp16 vload/vstore implementation using F16C instruction set with fallback to software. ATM vload & vstore pass tests for float <-> half but not yet double <-> half.
move linking of kernel library from generate_wg_func (=parallel.bc) to pocl_llvm_{build,link}_program (=program.bc). Should save some time when building multiple kernels from 1 program, also allows pocl to check undefined symbols at clBuild/LinkProgram time. Bump pocl_binary version (b/c old binaries expect to be linked to kernel lib after loading).
fix issue #488 by checking undefined symbols when linking program.bc with kernel library. Impact on build/link times should be minimal.",Had to shuffle around some CMake code to workaround the WILL_FAIL fail :) The two other commits are fixing some regressions caused by kernel lib linking.,True,{}
pocl/pocl,https://github.com/pocl/pocl,508,2017-08-11T09:34:25Z,2017-08-11T12:45:46Z,2017-08-12T09:42:18Z,MERGED,True,17,1,1,https://github.com/jrprice,[CUDA] Use pthread_cond_wait in background threads,1,[],https://github.com/pocl/pocl/pull/508,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/508,"Previously suggested by @vkorhonen.
This change provides a noticeable improvement for a benchmark that uses multiple command queues, and still has some heavy lifting to do on the CPU side.","Previously suggested by @vkorhonen.
This change provides a noticeable improvement for a benchmark that uses multiple command queues, and still has some heavy lifting to do on the CPU side.",True,{}
pocl/pocl,https://github.com/pocl/pocl,510,2017-08-11T11:06:32Z,2017-08-11T11:44:06Z,2017-08-11T11:44:06Z,MERGED,True,1,1,1,https://github.com/hahnjo,[CMake] Use LLVM_LIBDIR to construct CLANG_RESOURCE_DIR,1,[],https://github.com/pocl/pocl/pull/510,https://github.com/hahnjo,1,https://github.com/pocl/pocl/pull/510,"CLANG_RESOURCE_DIR did not account for LLVM_LIBDIR_SUFFIX.
LLVM_LIBDIR is derived from llvm-config which takes care of this.","CLANG_RESOURCE_DIR did not account for LLVM_LIBDIR_SUFFIX.
LLVM_LIBDIR is derived from llvm-config which takes care of this.",True,{}
pocl/pocl,https://github.com/pocl/pocl,513,2017-08-13T18:24:21Z,2017-08-14T07:08:06Z,2017-08-14T08:46:25Z,MERGED,True,53,33,2,https://github.com/jrprice,[CUDA] Retain function attributes when cloning functions,2,[],https://github.com/pocl/pocl/pull/513,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/513,"Use llvm::CloneFunctionInto() to retain function attributes when cloning functions.
Also contains a fix for an occasional deadlock on queue destruction that was introduced in my previous commit.","Use llvm::CloneFunctionInto() to retain function attributes when cloning functions.
Also contains a fix for an occasional deadlock on queue destruction that was introduced in my previous commit.",True,{}
pocl/pocl,https://github.com/pocl/pocl,514,2017-08-16T12:00:06Z,2017-08-16T14:04:56Z,2017-08-16T17:33:25Z,MERGED,True,299,86,11,https://github.com/franz,Next,6,[],https://github.com/pocl/pocl/pull/514,https://github.com/franz,1,https://github.com/pocl/pocl/pull/514,Fixes a bunch of issues for 1.0/1.2 milestones,Fixes a bunch of issues for 1.0/1.2 milestones,True,{}
pocl/pocl,https://github.com/pocl/pocl,519,2017-09-01T12:53:18Z,2017-09-05T17:47:44Z,2017-10-18T12:00:20Z,MERGED,True,8658,8489,29,https://github.com/franz,Next,11,[],https://github.com/pocl/pocl/pull/519,https://github.com/franz,1,https://github.com/pocl/pocl/pull/519,"splits pocl_llvm_api.cc
fixes some issues for milestone 1.0

With this PR the entire integer_ops from conformance testsuite should pass, all image tests should pass again, also basic passes again (was broken by vload3 issue #516).","splits pocl_llvm_api.cc
fixes some issues for milestone 1.0

With this PR the entire integer_ops from conformance testsuite should pass, all image tests should pass again, also basic passes again (was broken by vload3 issue #516).",True,{}
pocl/pocl,https://github.com/pocl/pocl,526,2017-09-04T08:52:11Z,2017-09-05T17:47:45Z,2017-09-05T17:47:45Z,MERGED,True,26,12,1,https://github.com/jrprice,[CUDA] Fix libdevice filename for CUDA 9+,1,[],https://github.com/pocl/pocl/pull/526,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/526,Fixes #524.,Fixes #524.,True,{}
pocl/pocl,https://github.com/pocl/pocl,529,2017-09-14T15:28:41Z,2017-09-14T17:17:03Z,2017-09-14T17:17:04Z,MERGED,True,31,13,1,https://github.com/keryell,Add minimal support for pseudo SPIR 2.0 input generated by Clang 3.9+,1,[],https://github.com/pocl/pocl/pull/529,https://github.com/keryell,1,https://github.com/pocl/pocl/pull/529,"This SPIR ""de-facto"", which is basically some SPIR 2.0 encoded in more
modern LLVM IR than 3.4, is non-conforming SPIR 2.0 but is easier to
generate by some projects with post-3.4 Clang and/or LLVM and it is
nice to be able to consume it with PoCL.
This was tested with https://github.com/triSYCL/triSYCL","This SPIR ""de-facto"", which is basically some SPIR 2.0 encoded in more
modern LLVM IR than 3.4, is non-conforming SPIR 2.0 but is easier to
generate by some projects with post-3.4 Clang and/or LLVM and it is
nice to be able to consume it with PoCL.
This was tested with https://github.com/triSYCL/triSYCL",True,{}
pocl/pocl,https://github.com/pocl/pocl,533,2017-09-27T20:54:51Z,2017-10-06T11:18:41Z,2017-10-06T11:18:41Z,MERGED,True,31,26,1,https://github.com/Oblomov,CUDA attribute retrieval clean up and fixes,4,[],https://github.com/pocl/pocl/pull/533,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/533,"This series cleans up CUDA attribute retrieval, and fixes a couple of minor issues.","This series cleans up CUDA attribute retrieval, and fixes a couple of minor issues.",True,{}
pocl/pocl,https://github.com/pocl/pocl,535,2017-10-10T04:12:03Z,2017-10-10T06:32:37Z,2017-10-10T06:32:37Z,MERGED,True,1,0,1,https://github.com/rtobar,Added myself to CREDITS,1,[],https://github.com/pocl/pocl/pull/535,https://github.com/rtobar,1,https://github.com/pocl/pocl/pull/535,This is for commit 3e20fc5,This is for commit 3e20fc5,True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/rjodin,1,https://github.com/pocl/pocl/pull/538,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.","We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.",True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/538#issuecomment-336163750,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.","Please replace C++ style comments with C style /* */.  Overall, can we always assume there's a program.bc in the binary and that the files are stored in that exact order? It seems a bit fragile to me. E.g. if it was built from a SPIRV (when it's supported), there might not be a program.bc.
There was a plan to store also temp files (e.g. .cl) to the binaries (for transferring ""debug data""), that is, when the ""leave compiler temp files"" env was set it would collect also those files to the binary from the cache dir. I cannot remember (and am too busy to check right now) if this is the case now or does it pick only certain files such as the program.bc to the container?",True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/rjodin,3,https://github.com/pocl/pocl/pull/538#issuecomment-336376985,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.","I agree, assuming there's a program.bc in that exact order is a bit fragile. We would need to have something more structured to avoid issue like that.
At the moment, ""program.bc"" is always serialize. I don't what's happening if it is not present in the directory, I suppose that the serialization fails...
From what I see, temp files are not present in the final binary.",True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/franz,4,https://github.com/pocl/pocl/pull/538#issuecomment-337588238,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.","@pjaaskel WRT

if it was built from a SPIRV (when it's supported), there might not be a program.bc.

.. there would be, because we need to translate SPIR to normal LLVM bitcode before linking it to kernel library (and program.bc is written after the kernel lib linking). At least that's how SPIR would work if it was implemented properly :)
WRT

Overall, can we always assume there's a program.bc in the binary

.. i think yes, there is always a program.bc, i don't remember pocl code ever to delete it (parallel.bc and .so.o were deleted with LEAVE_TEMP_FILES unset).
If there's some good reason for having pocl binaries without program.bc, we could do it, but it will need a bit more work; a binary without program.bc would crash/fail on compiler conformance test, so there's some code that needs to be ifdef-ed out.
I'm not sure what order are we talking about, there's always only one program.bc per pocl binary, and always stored right after header, IIRC... so even a program with no kernels should be properly (de)serialized. In fact i'm about 90% sure this is tested by compiler conformance test.
WRT temp files, IIRC the code recursively serializes the kernel directories (but not the program directory). So everything that's in kernel dirs get serialized, but program.bc is serialized by an extra call b/c it's in program dir (outside kernel dirs).",True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/franz,5,https://github.com/pocl/pocl/pull/538#issuecomment-337589497,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.","Looking at the PR from 10000 feet, it looks OK. Also thanks for the fix :)
I'll run the PR through the compiler test and if it passes i'm good.",True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/538#issuecomment-337710541,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.","If there's some good reason for having pocl binaries without program.bc, we could do it, but it will need a bit more work; a binary without program.bc would crash/fail on compiler conformance test, so there's some code that needs to be ifdef-ed out.

Obfuscation. Space saving. I'm not saying they are important needs now (at least for us here), but I think we should not add code that blindly trusts the file is there.",True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/franz,7,https://github.com/pocl/pocl/pull/538#issuecomment-337824102,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.","Well, the code that assumes it exists is the shortest possible conformant code, and that's what we have now. It's the special cases like possibly-not-having program.bc that need adding extra code.",True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/538#issuecomment-337827975,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.",That's true.,True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/pjaaskel,9,https://github.com/pocl/pocl/pull/538#issuecomment-338678617,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.","@franz did it pass, OK to merge?",True,{}
pocl/pocl,https://github.com/pocl/pocl,538,2017-10-12T13:36:49Z,2017-10-24T08:42:14Z,2017-10-24T08:42:14Z,MERGED,True,29,5,2,https://github.com/rjodin,fix issue #537 (pocl_binaries are not functionnal),2,[],https://github.com/pocl/pocl/pull/538,https://github.com/franz,10,https://github.com/pocl/pocl/pull/538#issuecomment-338775403,"We need to skip program.bc in a pocl_binaries when we want to have
information on kernels from the start of a pocl_binaries.
When running POCL offline, we do not need to take care of
program->binaries (even if they are present) as we do not have a
compiler available.","PASSED 55 of 55 tests.
LGTM.",True,{}
pocl/pocl,https://github.com/pocl/pocl,539,2017-10-18T12:05:04Z,2017-11-07T10:27:31Z,2017-11-07T12:07:51Z,MERGED,True,35943,270,108,https://github.com/franz,use SLEEF for (a part of) kernel library,36,[],https://github.com/pocl/pocl/pull/539,https://github.com/franz,1,https://github.com/pocl/pocl/pull/539,"implement some kernel library via SLEEF, plus a few fixes in generic kernel lib / vecmathlib.","implement some kernel library via SLEEF, plus a few fixes in generic kernel lib / vecmathlib.",True,{}
pocl/pocl,https://github.com/pocl/pocl,539,2017-10-18T12:05:04Z,2017-11-07T10:27:31Z,2017-11-07T12:07:51Z,MERGED,True,35943,270,108,https://github.com/franz,use SLEEF for (a part of) kernel library,36,[],https://github.com/pocl/pocl/pull/539,https://github.com/jrprice,2,https://github.com/pocl/pocl/pull/539#issuecomment-337659628,"implement some kernel library via SLEEF, plus a few fixes in generic kernel lib / vecmathlib.","Pastebins for AVX-512 compilation failure below.
CMake: https://pastebin.com/shBFVL7p
Make: https://pastebin.com/uncZFGyq
In file included from /nfs/home/james/pocl-avx512/lib/kernel/sleef/libm/sleefsimddp.c:19:
In file included from /nfs/home/james/pocl-avx512/lib/kernel/sleef/arch/helpers.h:92:
/nfs/home/james/pocl-avx512/lib/kernel/sleef/arch/helperavx512f.h:200:3: error: expected expression
  return _mm512_cmp_epi64_mask(_mm512_cvtepi32_epi64(x), _mm512_cvtepi32_epi64(y), _MM_CMPINT_EQ);
  ^",True,{}
pocl/pocl,https://github.com/pocl/pocl,539,2017-10-18T12:05:04Z,2017-11-07T10:27:31Z,2017-11-07T12:07:51Z,MERGED,True,35943,270,108,https://github.com/franz,use SLEEF for (a part of) kernel library,36,[],https://github.com/pocl/pocl/pull/539,https://github.com/franz,3,https://github.com/pocl/pocl/pull/539#issuecomment-337664574,"implement some kernel library via SLEEF, plus a few fixes in generic kernel lib / vecmathlib.","Doh, that was a dumb typo. Retry please :)",True,{}
pocl/pocl,https://github.com/pocl/pocl,539,2017-10-18T12:05:04Z,2017-11-07T10:27:31Z,2017-11-07T12:07:51Z,MERGED,True,35943,270,108,https://github.com/franz,use SLEEF for (a part of) kernel library,36,[],https://github.com/pocl/pocl/pull/539,https://github.com/jrprice,4,https://github.com/pocl/pocl/pull/539#issuecomment-337671020,"implement some kernel library via SLEEF, plus a few fixes in generic kernel lib / vecmathlib.","Builds now, and passes all the core tests apart from kernel/test_convert_type_16 (which doesn't fail with master). Here's the LLVM errors: https://pastebin.com/z4G5Ph63",True,{}
pocl/pocl,https://github.com/pocl/pocl,539,2017-10-18T12:05:04Z,2017-11-07T10:27:31Z,2017-11-07T12:07:51Z,MERGED,True,35943,270,108,https://github.com/franz,use SLEEF for (a part of) kernel library,36,[],https://github.com/pocl/pocl/pull/539,https://github.com/franz,5,https://github.com/pocl/pocl/pull/539#issuecomment-340895580,"implement some kernel library via SLEEF, plus a few fixes in generic kernel lib / vecmathlib.","Rebased & updated with upstream patches. @pjaaskel the AVX512 issue is fixed by the use-LLVM-inline commit, but currently i have it in the PR for upcoming release. Do you want it in this PR ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,539,2017-10-18T12:05:04Z,2017-11-07T10:27:31Z,2017-11-07T12:07:51Z,MERGED,True,35943,270,108,https://github.com/franz,use SLEEF for (a part of) kernel library,36,[],https://github.com/pocl/pocl/pull/539,https://github.com/franz,6,https://github.com/pocl/pocl/pull/539#issuecomment-342399334,"implement some kernel library via SLEEF, plus a few fixes in generic kernel lib / vecmathlib.","Rebased, fixed build on ARM and i386, added a missing function (lgamma_r).
Created a bug for tracking the AVX512 issue #555 (which is sadly not fixed by use-LLVM-inline as i thought).",True,{}
pocl/pocl,https://github.com/pocl/pocl,541,2017-10-23T22:16:59Z,2017-10-25T06:32:23Z,2017-10-25T15:38:47Z,MERGED,True,110,4,1,https://github.com/blu,Set content of CL_DEVICE_NAME and CL_DEVICE_VENDOR to meaningful valu…,1,[],https://github.com/pocl/pocl/pull/541,https://github.com/blu,1,https://github.com/pocl/pocl/pull/541,…es for arm and aarch64 host targets,…es for arm and aarch64 host targets,True,{}
pocl/pocl,https://github.com/pocl/pocl,541,2017-10-23T22:16:59Z,2017-10-25T06:32:23Z,2017-10-25T15:38:47Z,MERGED,True,110,4,1,https://github.com/blu,Set content of CL_DEVICE_NAME and CL_DEVICE_VENDOR to meaningful valu…,1,[],https://github.com/pocl/pocl/pull/541,https://github.com/blu,2,https://github.com/pocl/pocl/pull/541#issuecomment-339157687,…es for arm and aarch64 host targets,"@pjaaskel, updated as per your review, and also coupled vendors and part lists (so far just for ARM and APM).",True,{}
pocl/pocl,https://github.com/pocl/pocl,542,2017-10-24T23:07:04Z,2017-10-25T06:32:24Z,2017-10-25T06:32:24Z,MERGED,True,18,20,1,https://github.com/tstellar,Use the clang builtin names for intrinsics in vload_store_half_f16c.c,1,[],https://github.com/pocl/pocl/pull/542,https://github.com/tstellar,1,https://github.com/pocl/pocl/pull/542,"This way we don't need to include x86intrin.h which redefines the size_t
typedef which is also defined in pocl_types.h
This fixes the build on i686:
In file included from /builddir/build/BUILD/pocl-53ef5e89aa99b5e85ad512ff46aa8f38b36acf4f/lib/kernel/vload_store_half_f16c.c:50:
In file included from /usr/lib/clang/5.0.0/include/x86intrin.h:29:
In file included from /usr/lib/clang/5.0.0/include/immintrin.h:32:
In file included from /usr/lib/clang/5.0.0/include/xmmintrin.h:39:
In file included from /usr/lib/clang/5.0.0/include/mm_malloc.h:27:
In file included from /usr/include/stdlib.h:31:
/usr/lib/clang/5.0.0/include/stddef.h:62:23: error: typedef redefinition with different types ('unsigned int' vs 'ulong' (aka 'unsigned long'))
typedef SIZE_TYPE size_t;
^
/builddir/build/BUILD/pocl-53ef5e89aa99b5e85ad512ff46aa8f38b36acf4f/include/pocl_types.h:23:15: note: previous definition is here
typedef ulong size_t;
^","This way we don't need to include x86intrin.h which redefines the size_t
typedef which is also defined in pocl_types.h
This fixes the build on i686:
In file included from /builddir/build/BUILD/pocl-53ef5e89aa99b5e85ad512ff46aa8f38b36acf4f/lib/kernel/vload_store_half_f16c.c:50:
In file included from /usr/lib/clang/5.0.0/include/x86intrin.h:29:
In file included from /usr/lib/clang/5.0.0/include/immintrin.h:32:
In file included from /usr/lib/clang/5.0.0/include/xmmintrin.h:39:
In file included from /usr/lib/clang/5.0.0/include/mm_malloc.h:27:
In file included from /usr/include/stdlib.h:31:
/usr/lib/clang/5.0.0/include/stddef.h:62:23: error: typedef redefinition with different types ('unsigned int' vs 'ulong' (aka 'unsigned long'))
typedef SIZE_TYPE size_t;
^
/builddir/build/BUILD/pocl-53ef5e89aa99b5e85ad512ff46aa8f38b36acf4f/include/pocl_types.h:23:15: note: previous definition is here
typedef ulong size_t;
^",True,{}
pocl/pocl,https://github.com/pocl/pocl,547,2017-10-30T14:33:27Z,2017-10-30T18:00:29Z,2017-10-30T18:00:29Z,MERGED,True,34,2,1,https://github.com/rjodin,pocl_binary: add reqd_wg_size informations into pocl_binary_kernel structure,1,[],https://github.com/pocl/pocl/pull/547,https://github.com/rjodin,1,https://github.com/pocl/pocl/pull/547,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,547,2017-10-30T14:33:27Z,2017-10-30T18:00:29Z,2017-10-30T18:00:29Z,MERGED,True,34,2,1,https://github.com/rjodin,pocl_binary: add reqd_wg_size informations into pocl_binary_kernel structure,1,[],https://github.com/pocl/pocl/pull/547,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/547#issuecomment-340480682,,"This LGTM, but doesn't pass the test suite for me. These fail:
46:regression/test_program_from_binary_with_local_1_1_1_REPL
60:regression/test_program_from_binary_with_local_1_1_1_LOOPS
71:runtime/clCreateProgramWithBinary
85:runtime/test_enqueue_kernel_from_binary",True,{}
pocl/pocl,https://github.com/pocl/pocl,547,2017-10-30T14:33:27Z,2017-10-30T18:00:29Z,2017-10-30T18:00:29Z,MERGED,True,34,2,1,https://github.com/rjodin,pocl_binary: add reqd_wg_size informations into pocl_binary_kernel structure,1,[],https://github.com/pocl/pocl/pull/547,https://github.com/rjodin,3,https://github.com/pocl/pocl/pull/547#issuecomment-340503553,,"My mistake.
I tried the feature with some printf, and I broke my code while removing them.
It should be functional now.
(This issue was with the macros and the ""for"" loops, missing paranthesis)",True,{}
pocl/pocl,https://github.com/pocl/pocl,556,2017-11-07T12:12:59Z,2017-11-07T13:29:41Z,2017-11-07T13:35:16Z,MERGED,True,34739,60,165,https://github.com/franz,Libclc,43,[],https://github.com/pocl/pocl/pull/556,https://github.com/franz,1,https://github.com/pocl/pocl/pull/556,"Implements the remaining part of kernel library required for conformance. Most of the code is from libclc library, a few functions are from OCML (part of AMD's ROCm).
@pjaaskel  the last commit is not strictly necessary, i can remove it if you think it's not worth it.","Implements the remaining part of kernel library required for conformance. Most of the code is from libclc library, a few functions are from OCML (part of AMD's ROCm).
@pjaaskel  the last commit is not strictly necessary, i can remove it if you think it's not worth it.",True,{}
pocl/pocl,https://github.com/pocl/pocl,557,2017-11-07T13:48:16Z,2017-11-08T12:28:43Z,2017-11-08T13:27:28Z,MERGED,True,216,103,12,https://github.com/franz,User events handling,9,[],https://github.com/pocl/pocl/pull/557,https://github.com/franz,1,https://github.com/pocl/pocl/pull/557,"Already described at pocl-devel, so only shortly:
This PR attempts to fix the remaining issues with user events.
In particular, pocl_broadcast() now calls notify on events also in
CL_QUEUED state, and also calls notify on events which depend on failed
user events. Some problems remain:


i've updated all drivers except CUDA which seems to have its own way
of handling events.


after any event fails, the state is ""implementation defined"". Code in this PR just sets all dependent events to failed.","Already described at pocl-devel, so only shortly:
This PR attempts to fix the remaining issues with user events.
In particular, pocl_broadcast() now calls notify on events also in
CL_QUEUED state, and also calls notify on events which depend on failed
user events. Some problems remain:


i've updated all drivers except CUDA which seems to have its own way
of handling events.


after any event fails, the state is ""implementation defined"". Code in this PR just sets all dependent events to failed.",True,{}
pocl/pocl,https://github.com/pocl/pocl,557,2017-11-07T13:48:16Z,2017-11-08T12:28:43Z,2017-11-08T13:27:28Z,MERGED,True,216,103,12,https://github.com/franz,User events handling,9,[],https://github.com/pocl/pocl/pull/557,https://github.com/franz,2,https://github.com/pocl/pocl/pull/557#issuecomment-342494718,"Already described at pocl-devel, so only shortly:
This PR attempts to fix the remaining issues with user events.
In particular, pocl_broadcast() now calls notify on events also in
CL_QUEUED state, and also calls notify on events which depend on failed
user events. Some problems remain:


i've updated all drivers except CUDA which seems to have its own way
of handling events.


after any event fails, the state is ""implementation defined"". Code in this PR just sets all dependent events to failed.",@jrprice any ideas what needs to be done for the CUDA driver ?,True,{}
pocl/pocl,https://github.com/pocl/pocl,557,2017-11-07T13:48:16Z,2017-11-08T12:28:43Z,2017-11-08T13:27:28Z,MERGED,True,216,103,12,https://github.com/franz,User events handling,9,[],https://github.com/pocl/pocl/pull/557,https://github.com/jrprice,3,https://github.com/pocl/pocl/pull/557#issuecomment-342568513,"Already described at pocl-devel, so only shortly:
This PR attempts to fix the remaining issues with user events.
In particular, pocl_broadcast() now calls notify on events also in
CL_QUEUED state, and also calls notify on events which depend on failed
user events. Some problems remain:


i've updated all drivers except CUDA which seems to have its own way
of handling events.


after any event fails, the state is ""implementation defined"". Code in this PR just sets all dependent events to failed.","There's just one tweak needed to get the events conformance tests passing with CUDA again:
jrprice@f7b3a16
Longer term, I should probably rework the handling of events to be more like the other drivers for dependencies that come from user events and commands submitted to other drivers, but I don't have time to look into this right now.",True,{}
pocl/pocl,https://github.com/pocl/pocl,557,2017-11-07T13:48:16Z,2017-11-08T12:28:43Z,2017-11-08T13:27:28Z,MERGED,True,216,103,12,https://github.com/franz,User events handling,9,[],https://github.com/pocl/pocl/pull/557,https://github.com/franz,4,https://github.com/pocl/pocl/pull/557#issuecomment-342738459,"Already described at pocl-devel, so only shortly:
This PR attempts to fix the remaining issues with user events.
In particular, pocl_broadcast() now calls notify on events also in
CL_QUEUED state, and also calls notify on events which depend on failed
user events. Some problems remain:


i've updated all drivers except CUDA which seems to have its own way
of handling events.


after any event fails, the state is ""implementation defined"". Code in this PR just sets all dependent events to failed.","@jrprice Thanks, i've added your patch. Perhaps the entire event handling could use a little cleanup, but definitely not for this release.",True,{}
pocl/pocl,https://github.com/pocl/pocl,559,2017-11-09T11:18:12Z,2017-11-09T15:19:59Z,2017-11-09T15:24:08Z,MERGED,True,967,170,25,https://github.com/franz,Various stuff for upcoming release,22,[],https://github.com/pocl/pocl/pull/559,https://github.com/franz,1,https://github.com/pocl/pocl/pull/559,"Updated documentation, fixed a few bugs, etc.","Updated documentation, fixed a few bugs, etc.",True,{}
pocl/pocl,https://github.com/pocl/pocl,560,2017-11-13T10:45:52Z,2017-11-14T10:43:01Z,2017-11-14T10:43:01Z,MERGED,True,652,260,67,https://github.com/franz,various small fixes,20,[],https://github.com/pocl/pocl/pull/560,https://github.com/franz,1,https://github.com/pocl/pocl/pull/560,"docker files
sanitizer builds are usable again
fix memleaks found by leak sanitizer
fix a few issues","docker files
sanitizer builds are usable again
fix memleaks found by leak sanitizer
fix a few issues",True,{}
pocl/pocl,https://github.com/pocl/pocl,562,2017-11-15T14:20:56Z,2017-11-20T12:17:28Z,2017-11-20T12:17:28Z,MERGED,True,842,756,38,https://github.com/franz,various pre-release fixes,23,[],https://github.com/pocl/pocl/pull/562,https://github.com/franz,1,https://github.com/pocl/pocl/pull/562,"mostly CMake, some pthread driver, some documentation updates","mostly CMake, some pthread driver, some documentation updates",True,{}
pocl/pocl,https://github.com/pocl/pocl,564,2017-11-17T23:37:46Z,2017-11-20T17:45:21Z,2017-11-20T17:45:21Z,MERGED,True,42,0,3,https://github.com/blu,"* make SLEEF xfmaxf(), xfminf(), xfmax() and xfmin() aware of platfor…",1,[],https://github.com/pocl/pocl/pull/564,https://github.com/blu,1,https://github.com/pocl/pocl/pull/564,"…ms with minmax-number-only capabilities via macro SLEEF_*_MINMAXNUM_AVAILABLE

add minmax-number-only capabilities to SLEEF arch AArch64","…ms with minmax-number-only capabilities via macro SLEEF_*_MINMAXNUM_AVAILABLE

add minmax-number-only capabilities to SLEEF arch AArch64",True,{}
pocl/pocl,https://github.com/pocl/pocl,564,2017-11-17T23:37:46Z,2017-11-20T17:45:21Z,2017-11-20T17:45:21Z,MERGED,True,42,0,3,https://github.com/blu,"* make SLEEF xfmaxf(), xfminf(), xfmax() and xfmin() aware of platfor…",1,[],https://github.com/pocl/pocl/pull/564,https://github.com/franz,2,https://github.com/pocl/pocl/pull/564#issuecomment-345758755,"…ms with minmax-number-only capabilities via macro SLEEF_*_MINMAXNUM_AVAILABLE

add minmax-number-only capabilities to SLEEF arch AArch64",LGTM. Tested on A53,True,{}
pocl/pocl,https://github.com/pocl/pocl,568,2017-11-21T19:17:18Z,2017-11-21T23:12:36Z,2017-11-24T17:20:06Z,CLOSED,False,38,12,4,https://github.com/arghdos,Fix pthread fission (fixes #554),2,[],https://github.com/pocl/pocl/pull/568,https://github.com/arghdos,1,https://github.com/pocl/pocl/pull/568,"Based on @franz's commit in #554, this actually fixes pthread fission such that only the specified number of cores are used:

platform: pocl  num cores: 1    elapsed time: 9.107037e+04
platform: pocl  num cores: 2    elapsed time: 8.403694e+03
platform: pocl  num cores: 4    elapsed time: 3.124852e+03
platform: pocl  num cores: 8    elapsed time: 2.900043e+03
platform: pocl  num cores: 16   elapsed time: 2.692863e+03
platform: Intel num cores: 1    elapsed time: 2.157060e+03
platform: Intel num cores: 2    elapsed time: 2.378027e+03
platform: Intel num cores: 4    elapsed time: 9.416270e+02
platform: Intel num cores: 8    elapsed time: 6.949500e+02
platform: Intel num cores: 16   elapsed time: 6.701760e+02

I'm not convinced this is the best solution -- on my system I still see very high CPU usage -- presumably due to many threads being stuck in the spin-lock (potentially accounting for the large performance jump between 1 -> 2 threads)?  I'm not entirely sure what the structure of the scheduler is, but I think it would be better to only wake up the required number of threads in pocl_pthread_notify ?","Based on @franz's commit in #554, this actually fixes pthread fission such that only the specified number of cores are used:

platform: pocl  num cores: 1    elapsed time: 9.107037e+04
platform: pocl  num cores: 2    elapsed time: 8.403694e+03
platform: pocl  num cores: 4    elapsed time: 3.124852e+03
platform: pocl  num cores: 8    elapsed time: 2.900043e+03
platform: pocl  num cores: 16   elapsed time: 2.692863e+03
platform: Intel num cores: 1    elapsed time: 2.157060e+03
platform: Intel num cores: 2    elapsed time: 2.378027e+03
platform: Intel num cores: 4    elapsed time: 9.416270e+02
platform: Intel num cores: 8    elapsed time: 6.949500e+02
platform: Intel num cores: 16   elapsed time: 6.701760e+02

I'm not convinced this is the best solution -- on my system I still see very high CPU usage -- presumably due to many threads being stuck in the spin-lock (potentially accounting for the large performance jump between 1 -> 2 threads)?  I'm not entirely sure what the structure of the scheduler is, but I think it would be better to only wake up the required number of threads in pocl_pthread_notify ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,568,2017-11-21T19:17:18Z,2017-11-21T23:12:36Z,2017-11-24T17:20:06Z,CLOSED,False,38,12,4,https://github.com/arghdos,Fix pthread fission (fixes #554),2,[],https://github.com/pocl/pocl/pull/568,https://github.com/franz,2,https://github.com/pocl/pocl/pull/568#issuecomment-346191840,"Based on @franz's commit in #554, this actually fixes pthread fission such that only the specified number of cores are used:

platform: pocl  num cores: 1    elapsed time: 9.107037e+04
platform: pocl  num cores: 2    elapsed time: 8.403694e+03
platform: pocl  num cores: 4    elapsed time: 3.124852e+03
platform: pocl  num cores: 8    elapsed time: 2.900043e+03
platform: pocl  num cores: 16   elapsed time: 2.692863e+03
platform: Intel num cores: 1    elapsed time: 2.157060e+03
platform: Intel num cores: 2    elapsed time: 2.378027e+03
platform: Intel num cores: 4    elapsed time: 9.416270e+02
platform: Intel num cores: 8    elapsed time: 6.949500e+02
platform: Intel num cores: 16   elapsed time: 6.701760e+02

I'm not convinced this is the best solution -- on my system I still see very high CPU usage -- presumably due to many threads being stuck in the spin-lock (potentially accounting for the large performance jump between 1 -> 2 threads)?  I'm not entirely sure what the structure of the scheduler is, but I think it would be better to only wake up the required number of threads in pocl_pthread_notify ?","Hello. Umm... i have assigned issue #554 to myself (= i intended to work on it myself), and actually i already have a fix that seems to work properly, i just wanted to test it a little more (the scheduler is a bit tricky), that's why the delay. You're seeing high CPU usage because my commit that's referenced in the issue, is broken - it was WIP, i pushed a WIP topic branch on my own github account and github's automagic picked it up as a ""solution"" (i forgot about it, quite annoying sometimes..)
My upcoming PR (this week) will include the fix, if you're willing to help it'd be great if you could test that PR. Closing this PR for now; let's continue any discussion in issue #554
@arghdos apologies your time on this was wasted",True,{}
pocl/pocl,https://github.com/pocl/pocl,568,2017-11-21T19:17:18Z,2017-11-21T23:12:36Z,2017-11-24T17:20:06Z,CLOSED,False,38,12,4,https://github.com/arghdos,Fix pthread fission (fixes #554),2,[],https://github.com/pocl/pocl/pull/568,https://github.com/arghdos,3,https://github.com/pocl/pocl/pull/568#issuecomment-346192313,"Based on @franz's commit in #554, this actually fixes pthread fission such that only the specified number of cores are used:

platform: pocl  num cores: 1    elapsed time: 9.107037e+04
platform: pocl  num cores: 2    elapsed time: 8.403694e+03
platform: pocl  num cores: 4    elapsed time: 3.124852e+03
platform: pocl  num cores: 8    elapsed time: 2.900043e+03
platform: pocl  num cores: 16   elapsed time: 2.692863e+03
platform: Intel num cores: 1    elapsed time: 2.157060e+03
platform: Intel num cores: 2    elapsed time: 2.378027e+03
platform: Intel num cores: 4    elapsed time: 9.416270e+02
platform: Intel num cores: 8    elapsed time: 6.949500e+02
platform: Intel num cores: 16   elapsed time: 6.701760e+02

I'm not convinced this is the best solution -- on my system I still see very high CPU usage -- presumably due to many threads being stuck in the spin-lock (potentially accounting for the large performance jump between 1 -> 2 threads)?  I'm not entirely sure what the structure of the scheduler is, but I think it would be better to only wake up the required number of threads in pocl_pthread_notify ?","You're seeing high CPU usage because my commit that's referenced in the issue, is broken - it was WIP, i pushed a WIP topic branch on my own github account and github's automagic picked it up as a ""solution"" (i forgot about it, quite annoying sometimes..)

Fair enough!

My upcoming PR (this week) will include the fix, if you're willing to help it'd be great if you could test that PR. Closing this PR for now; let's continue any discussion in issue #554

Sounds good, I'll be happy to test",True,{}
pocl/pocl,https://github.com/pocl/pocl,571,2017-11-23T16:35:09Z,2017-11-24T08:55:34Z,2017-11-24T14:50:34Z,MERGED,True,822,261,24,https://github.com/franz,Various stuff,12,[],https://github.com/pocl/pocl/pull/571,https://github.com/franz,1,https://github.com/pocl/pocl/pull/571,"pthread driver now respects subdevices
conformance_suite_micro - yet smaller version of CTS, runs ~20 minutes on slow hardware
some small fixes","pthread driver now respects subdevices
conformance_suite_micro - yet smaller version of CTS, runs ~20 minutes on slow hardware
some small fixes",True,{}
pocl/pocl,https://github.com/pocl/pocl,572,2017-11-24T10:34:11Z,2017-11-24T14:41:20Z,2017-11-24T14:41:20Z,MERGED,True,14,6,2,https://github.com/jrprice,[CUDA] Add POCL_CUDA_VERIFY_MODULE environment variable,3,[],https://github.com/pocl/pocl/pull/572,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/572,"Make module verifiation opt-in, since the pocl linker currently
generates invalid metadata.
This is a workaround for #525, to make the CUDA backend work with LLVM 5+.","Make module verifiation opt-in, since the pocl linker currently
generates invalid metadata.
This is a workaround for #525, to make the CUDA backend work with LLVM 5+.",True,{}
pocl/pocl,https://github.com/pocl/pocl,576,2017-11-24T21:18:42Z,2017-11-30T09:17:24Z,2017-12-01T17:43:13Z,MERGED,True,3,3,2,https://github.com/arghdos,Fix num devices check,2,[],https://github.com/pocl/pocl/pull/576,https://github.com/arghdos,1,https://github.com/pocl/pocl/pull/576,"Migrated from #554 -- note, the segfault went away after a clean rebuild.  Instead I just had a failing test.

The relevant part of the spec is:

CL_INVALID_VALUE if out_devices is not NULL and num_devices is less than the number of sub-devices created by the partition scheme.

instead, it was checking for exact equality (clCreateSubDevices.c::126).
On my 40 core server, this manifested as an error in the EinsteinToolkit_subDev test, as it would split 40 / 2 -> 20 != 2 passed in clCreateSubDevices (main_device_id, props, 2, subdevs, &retval);
Instead that should be the size of the full sub device array (128).","Migrated from #554 -- note, the segfault went away after a clean rebuild.  Instead I just had a failing test.

The relevant part of the spec is:

CL_INVALID_VALUE if out_devices is not NULL and num_devices is less than the number of sub-devices created by the partition scheme.

instead, it was checking for exact equality (clCreateSubDevices.c::126).
On my 40 core server, this manifested as an error in the EinsteinToolkit_subDev test, as it would split 40 / 2 -> 20 != 2 passed in clCreateSubDevices (main_device_id, props, 2, subdevs, &retval);
Instead that should be the size of the full sub device array (128).",True,{}
pocl/pocl,https://github.com/pocl/pocl,576,2017-11-24T21:18:42Z,2017-11-30T09:17:24Z,2017-12-01T17:43:13Z,MERGED,True,3,3,2,https://github.com/arghdos,Fix num devices check,2,[],https://github.com/pocl/pocl/pull/576,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/576#issuecomment-347600906,"Migrated from #554 -- note, the segfault went away after a clean rebuild.  Instead I just had a failing test.

The relevant part of the spec is:

CL_INVALID_VALUE if out_devices is not NULL and num_devices is less than the number of sub-devices created by the partition scheme.

instead, it was checking for exact equality (clCreateSubDevices.c::126).
On my 40 core server, this manifested as an error in the EinsteinToolkit_subDev test, as it would split 40 / 2 -> 20 != 2 passed in clCreateSubDevices (main_device_id, props, 2, subdevs, &retval);
Instead that should be the size of the full sub device array (128).",Looks OK. What's your real name and email which I can add to the CREDITS?,True,{}
pocl/pocl,https://github.com/pocl/pocl,579,2017-11-29T11:44:21Z,2017-11-30T09:50:36Z,2017-11-30T09:50:36Z,MERGED,True,1,0,1,https://github.com/kostik-b,#578 - CHECK_FUNCTION_EXISTS fails with own ICD library,2,[],https://github.com/pocl/pocl/pull/579,https://github.com/kostik-b,1,https://github.com/pocl/pocl/pull/579,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,580,2017-11-29T14:31:22Z,2017-12-05T22:13:04Z,2017-12-05T22:13:04Z,MERGED,True,745,382,48,https://github.com/franz,stuff,23,[],https://github.com/pocl/pocl/pull/580,https://github.com/franz,1,https://github.com/pocl/pocl/pull/580,"fixes a bunch of milestone 1.0 bugs
makes SPIR handling more consistent (by not pretending to accept SPIR when cl_khr_spir is not in extension list)
update documentation (i suspect this will need more work)","fixes a bunch of milestone 1.0 bugs
makes SPIR handling more consistent (by not pretending to accept SPIR when cl_khr_spir is not in extension list)
update documentation (i suspect this will need more work)",True,{}
pocl/pocl,https://github.com/pocl/pocl,595,2017-12-22T23:21:49Z,2017-12-23T14:53:25Z,2017-12-23T14:53:25Z,MERGED,True,1,1,1,https://github.com/mattwala,Documentation: Fix a typo in an environment variable name.,1,[],https://github.com/pocl/pocl/pull/595,https://github.com/mattwala,1,https://github.com/pocl/pocl/pull/595,"Should be XDG_CACHE_HOME, not XDG_CACHE_DIR.","Should be XDG_CACHE_HOME, not XDG_CACHE_DIR.",True,{}
pocl/pocl,https://github.com/pocl/pocl,601,2018-01-11T12:36:50Z,2018-01-11T13:50:22Z,2018-01-11T13:50:22Z,MERGED,True,341,158,25,https://github.com/franz,Minor bugfixes,14,[],https://github.com/pocl/pocl/pull/601,https://github.com/franz,1,https://github.com/pocl/pocl/pull/601,Bunch of various small issues fixed,Bunch of various small issues fixed,True,{}
pocl/pocl,https://github.com/pocl/pocl,606,2018-01-18T12:40:26Z,2018-01-18T18:02:39Z,2018-01-18T18:02:39Z,MERGED,True,937,617,50,https://github.com/franz,pre 1.1 fixes,14,[],https://github.com/pocl/pocl/pull/606,https://github.com/franz,1,https://github.com/pocl/pocl/pull/606,"few fixes for LLVM 6.0 + random stuff
... with recent LLVM 6 pull, all tests now pass.","few fixes for LLVM 6.0 + random stuff
... with recent LLVM 6 pull, all tests now pass.",True,{}
pocl/pocl,https://github.com/pocl/pocl,606,2018-01-18T12:40:26Z,2018-01-18T18:02:39Z,2018-01-18T18:02:39Z,MERGED,True,937,617,50,https://github.com/franz,pre 1.1 fixes,14,[],https://github.com/pocl/pocl/pull/606,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/606#issuecomment-358681692,"few fixes for LLVM 6.0 + random stuff
... with recent LLVM 6 pull, all tests now pass.",474 - conformance_printf (Failed) with LLVM 5.0 after pulling this in.,True,{}
pocl/pocl,https://github.com/pocl/pocl,606,2018-01-18T12:40:26Z,2018-01-18T18:02:39Z,2018-01-18T18:02:39Z,MERGED,True,937,617,50,https://github.com/franz,pre 1.1 fixes,14,[],https://github.com/pocl/pocl/pull/606,https://github.com/franz,3,https://github.com/pocl/pocl/pull/606#issuecomment-358711674,"few fixes for LLVM 6.0 + random stuff
... with recent LLVM 6 pull, all tests now pass.","OK, rebased. Fixed printf by dropping the offending commit, added a comit to fix dlhandle_cache.",True,{}
pocl/pocl,https://github.com/pocl/pocl,611,2018-02-07T07:41:05Z,2018-02-13T17:53:15Z,2018-02-13T17:53:15Z,MERGED,True,0,10,1,https://github.com/punitagrawal,tests/kernel: test_shuffle_* pass on arm64,1,[],https://github.com/pocl/pocl/pull/611,https://github.com/punitagrawal,1,https://github.com/pocl/pocl/pull/611,"The test shuffle_* tests pass on arm64 but fail the build as they are
expected to fail. Fix this by dropping the hunk marking the tests as
failing.
Fixes #610","The test shuffle_* tests pass on arm64 but fail the build as they are
expected to fail. Fix this by dropping the hunk marking the tests as
failing.
Fixes #610",True,{}
pocl/pocl,https://github.com/pocl/pocl,611,2018-02-07T07:41:05Z,2018-02-13T17:53:15Z,2018-02-13T17:53:15Z,MERGED,True,0,10,1,https://github.com/punitagrawal,tests/kernel: test_shuffle_* pass on arm64,1,[],https://github.com/pocl/pocl/pull/611,https://github.com/franz,2,https://github.com/pocl/pocl/pull/611#issuecomment-364280610,"The test shuffle_* tests pass on arm64 but fail the build as they are
expected to fail. Fix this by dropping the hunk marking the tests as
failing.
Fixes #610",LGTM,True,{}
pocl/pocl,https://github.com/pocl/pocl,616,2018-02-09T19:29:12Z,2018-02-15T16:24:17Z,2018-02-15T16:24:17Z,CLOSED,False,7,1,2,https://github.com/yu810226,Add -DHOST_DEVICE_EXTENSION_SPIR_SUPPORT for SPIR support,1,[],https://github.com/pocl/pocl/pull/616,https://github.com/yu810226,1,https://github.com/pocl/pocl/pull/616,"Basically, if user sets HOST_DEVICE_EXTENSION_SPIR_SUPPORT=ON, the
SPIR support is enabled. Defaults to OFF.
This is useful for developers to have the control to test their projects in SPIR flow in PoCL.
The discussion related to this PR is in #615","Basically, if user sets HOST_DEVICE_EXTENSION_SPIR_SUPPORT=ON, the
SPIR support is enabled. Defaults to OFF.
This is useful for developers to have the control to test their projects in SPIR flow in PoCL.
The discussion related to this PR is in #615",True,{}
pocl/pocl,https://github.com/pocl/pocl,616,2018-02-09T19:29:12Z,2018-02-15T16:24:17Z,2018-02-15T16:24:17Z,CLOSED,False,7,1,2,https://github.com/yu810226,Add -DHOST_DEVICE_EXTENSION_SPIR_SUPPORT for SPIR support,1,[],https://github.com/pocl/pocl/pull/616,https://github.com/franz,2,https://github.com/pocl/pocl/pull/616#issuecomment-365980410,"Basically, if user sets HOST_DEVICE_EXTENSION_SPIR_SUPPORT=ON, the
SPIR support is enabled. Defaults to OFF.
This is useful for developers to have the control to test their projects in SPIR flow in PoCL.
The discussion related to this PR is in #615","Unfortunately all this does is put cl_khr_spir into device extensions. Since it doesn't resolve any of the problems i mentioned in my first comment on #615, you won't be able to clBuildProgram() any SPIR binary with this PR. If adding SPIR support was this easy, i would have done it ages ago..",True,{}
pocl/pocl,https://github.com/pocl/pocl,618,2018-02-16T12:50:20Z,2018-02-20T15:02:40Z,2018-03-01T12:36:07Z,MERGED,True,638,355,76,https://github.com/franz,probably last feature PR before 1.1,29,[],https://github.com/pocl/pocl/pull/618,https://github.com/franz,1,https://github.com/pocl/pocl/pull/618,small fixes + SPIR support,small fixes + SPIR support,True,{}
pocl/pocl,https://github.com/pocl/pocl,618,2018-02-16T12:50:20Z,2018-02-20T15:02:40Z,2018-03-01T12:36:07Z,MERGED,True,638,355,76,https://github.com/franz,probably last feature PR before 1.1,29,[],https://github.com/pocl/pocl/pull/618,https://github.com/oscarbg,2,https://github.com/pocl/pocl/pull/618#issuecomment-366423137,small fixes + SPIR support,"@franz
Hi,
I see you say some very exp. SPIR-V support but this depends on functional llvm-spirv converter. The Khronos official llvm-spirv is currently unusable for pocl..
can detail how to obtain or build a llvm-spirv converter suitable for pocl then?",True,{}
pocl/pocl,https://github.com/pocl/pocl,618,2018-02-16T12:50:20Z,2018-02-20T15:02:40Z,2018-03-01T12:36:07Z,MERGED,True,638,355,76,https://github.com/franz,probably last feature PR before 1.1,29,[],https://github.com/pocl/pocl/pull/618,https://github.com/franz,3,https://github.com/pocl/pocl/pull/618#issuecomment-366437649,small fixes + SPIR support,"@oscarbg the only one i found is this one: https://gitlab.collabora.com/tomeu/llvm-spirv.git (ignore the README there, it's outdated) but even that has some problems with llvm bitcode <-> spir-v conversion. Requires LLVM 5+ to build.",True,{}
pocl/pocl,https://github.com/pocl/pocl,618,2018-02-16T12:50:20Z,2018-02-20T15:02:40Z,2018-03-01T12:36:07Z,MERGED,True,638,355,76,https://github.com/franz,probably last feature PR before 1.1,29,[],https://github.com/pocl/pocl/pull/618,https://github.com/oscarbg,4,https://github.com/pocl/pocl/pull/618#issuecomment-366492074,small fixes + SPIR support,@franz thanks good to know..,True,{}
pocl/pocl,https://github.com/pocl/pocl,618,2018-02-16T12:50:20Z,2018-02-20T15:02:40Z,2018-03-01T12:36:07Z,MERGED,True,638,355,76,https://github.com/franz,probably last feature PR before 1.1,29,[],https://github.com/pocl/pocl/pull/618,https://github.com/franz,5,https://github.com/pocl/pocl/pull/618#issuecomment-366972783,small fixes + SPIR support,"Updated PR, fixed the cache sync (it's now without env var) and added a few more workarounds:

conformance_micro_compiler test was failing because cl_khr_spir is not in approved extension list (disabled the test for now)
TCE + LLVM 6 one test fails (disabled for now)
disabled metadata-less SPIR test (it seems Clang now always generates metadata)",True,{}
pocl/pocl,https://github.com/pocl/pocl,618,2018-02-16T12:50:20Z,2018-02-20T15:02:40Z,2018-03-01T12:36:07Z,MERGED,True,638,355,76,https://github.com/franz,probably last feature PR before 1.1,29,[],https://github.com/pocl/pocl/pull/618,https://github.com/oscarbg,6,https://github.com/pocl/pocl/pull/618#issuecomment-367863955,small fixes + SPIR support,"@franz seems https://github.com/pierremoreau/llvm-spirv/ ""branch integrate_with_mesa"" is a newer branch with than  https://gitlab.collabora.com/tomeu/llvm-spirv.git
seen here:
""Introducing SPIR-V support to clover"":
https://lists.freedesktop.org/archives/mesa-dev/2018-February/186333.html
""llvm-spirv can be currently grabbed from
https://github.com/pierremoreau/llvm-spirv, on the branch integrate_with_mesa.""
maybe more stable than other branch now than CLOVER devs are using it to support SPIR-V..
could mention in release notes of final 1.1 if you give a try under some EXPERIMENTAL warning..",True,{}
pocl/pocl,https://github.com/pocl/pocl,618,2018-02-16T12:50:20Z,2018-02-20T15:02:40Z,2018-03-01T12:36:07Z,MERGED,True,638,355,76,https://github.com/franz,probably last feature PR before 1.1,29,[],https://github.com/pocl/pocl/pull/618,https://github.com/franz,7,https://github.com/pocl/pocl/pull/618#issuecomment-367938509,small fixes + SPIR support,"@oscarbg thanks, i've also found it. Yes I could mention in release notes, but i need at least one SPIR-V bitcode that the tool can convert (currently it fails even with very simple ones).",True,{}
pocl/pocl,https://github.com/pocl/pocl,618,2018-02-16T12:50:20Z,2018-02-20T15:02:40Z,2018-03-01T12:36:07Z,MERGED,True,638,355,76,https://github.com/franz,probably last feature PR before 1.1,29,[],https://github.com/pocl/pocl/pull/618,https://github.com/oscarbg,8,https://github.com/pocl/pocl/pull/618#issuecomment-369215915,small fixes + SPIR support,"Hi @franz,
Have you noticed new branch https://github.com/KhronosGroup/SPIRV-LLVM/tree/khronos/spirv-6.0 so seems “official” and seems worked by Intel devs who are pushing hard for OpenCL 2.2 support this year on Intel GPUs.. can you give a shot for POCL Spir-v support?
Thanks..",True,{'THUMBS_UP': ['https://github.com/pjaaskel']}
pocl/pocl,https://github.com/pocl/pocl,618,2018-02-16T12:50:20Z,2018-02-20T15:02:40Z,2018-03-01T12:36:07Z,MERGED,True,638,355,76,https://github.com/franz,probably last feature PR before 1.1,29,[],https://github.com/pocl/pocl/pull/618,https://github.com/franz,9,https://github.com/pocl/pocl/pull/618#issuecomment-369578385,small fixes + SPIR support,"Hello @oscarbg
Thanks, i didn't know about that branch. I have built it, a quick test shows that its llvm-spirv seems to be working. I will update the documentation to mention experimental SPIR-V support.",True,{}
pocl/pocl,https://github.com/pocl/pocl,619,2018-02-21T10:17:19Z,2018-02-22T10:09:32Z,2018-02-22T10:09:33Z,MERGED,True,314,153,21,https://github.com/franz,last feature PR before 1.1,10,[],https://github.com/pocl/pocl/pull/619,https://github.com/franz,1,https://github.com/pocl/pocl/pull/619,kernel compilation speedup + various fixes,kernel compilation speedup + various fixes,True,{}
pocl/pocl,https://github.com/pocl/pocl,619,2018-02-21T10:17:19Z,2018-02-22T10:09:32Z,2018-02-22T10:09:33Z,MERGED,True,314,153,21,https://github.com/franz,last feature PR before 1.1,10,[],https://github.com/pocl/pocl/pull/619,https://github.com/jrprice,2,https://github.com/pocl/pocl/pull/619#issuecomment-367290285,kernel compilation speedup + various fixes,FYI this PR crashes with a multi-device CG benchmark that I use to test the async stuff in the CUDA backend - will try and investigate.,True,{}
pocl/pocl,https://github.com/pocl/pocl,619,2018-02-21T10:17:19Z,2018-02-22T10:09:32Z,2018-02-22T10:09:33Z,MERGED,True,314,153,21,https://github.com/franz,last feature PR before 1.1,10,[],https://github.com/pocl/pocl/pull/619,https://github.com/franz,3,https://github.com/pocl/pocl/pull/619#issuecomment-367291288,kernel compilation speedup + various fixes,@jrprice FWIW the only changes directly related to CUDA are the module verification (i enabled it by default) or the event-wait. Wildly guessing it's the module verification,True,{}
pocl/pocl,https://github.com/pocl/pocl,619,2018-02-21T10:17:19Z,2018-02-22T10:09:32Z,2018-02-22T10:09:33Z,MERGED,True,314,153,21,https://github.com/franz,last feature PR before 1.1,10,[],https://github.com/pocl/pocl/pull/619,https://github.com/franz,4,https://github.com/pocl/pocl/pull/619#issuecomment-367373568,kernel compilation speedup + various fixes,"dropped the patch causing problems for CUDA, plus slightly tuned the portability check macros",True,{}
pocl/pocl,https://github.com/pocl/pocl,619,2018-02-21T10:17:19Z,2018-02-22T10:09:32Z,2018-02-22T10:09:33Z,MERGED,True,314,153,21,https://github.com/franz,last feature PR before 1.1,10,[],https://github.com/pocl/pocl/pull/619,https://github.com/franz,5,https://github.com/pocl/pocl/pull/619#issuecomment-367584443,kernel compilation speedup + various fixes,"After spending some time with ThreadSanitizer + CUDA, i've decided to postpone all CUDA patches (except module verification) until after pocl 1.1 release. It'll require more work than makes sense to do before release.",True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/jeffhammond,1,https://github.com/pocl/pocl/pull/626,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.",True,{'THUMBS_UP': ['https://github.com/Atry']}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/franz,2,https://github.com/pocl/pocl/pull/626#issuecomment-370834328,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","WRT libstd++: IIRC there's some CMake code in pocl to detect if libc++ from Clang should be used instead of glibc's libstdc++, perhaps it's broken.
WRT Manual install of hwloc 1.x can be added << if your other PR works with hwloc 2.x and will pass tests on all my buildbots, i think this isn't necessary, we will just pull the PR.
BTW do you regularly build / use pocl on Mac OS X ? in case the builds run into trouble, will you be able to help ? i'm not too keen on adding yet another build configuration, if there's very little users and people willing to help maintain it..
I just noticed Travis can do docker builds, that might actually be quite useful for pocl.",True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/jeffhammond,3,https://github.com/pocl/pocl/pull/626#issuecomment-370846623,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","@franz (responses scheduled LIFO)
I use POCL on MacOS because it lets me introspect things more than the Apple implementation.  I usually build the latest version when I use it, which is approximately once a month.  In any case, I do not mind trying to help with MacOS issues, but I don't have a lot of free time right now.
My hwloc2 patches only led me to other problems, which I have yet to solve.  I'll try to sort things out later in the week.
I don't have the libstdc++ issue locally and it is tedious to debug Travis-specific issues.  I'm sure it is a trivial problem, but given that GCC and Linux tend to go together, I think it's fine to deprioritize Clang on Linux, since anybody running that is not using the system compiler and thus has assumed some responsibility for getting things right.",True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/franz,4,https://github.com/pocl/pocl/pull/626#issuecomment-373357373,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","@jeffhammond thanks for the travis config file. I've made some fixes and modifications, and also rebased it on top of #629 and #628.
Here is the branch and the build result.",True,{'THUMBS_UP': ['https://github.com/jeffhammond']}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/isuruf,5,https://github.com/pocl/pocl/pull/626#issuecomment-373439604,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","@franz, that's great. Having CI is an important step to make sure OSX support isn't broken. @inducer gave me access to a Mac to figure out #628, so I can help out if you run into any issues in the future. Please feel free to cc me and I'll have a look.
Btw, if you'd like to test different versions of LLVM on travis, let me know. We can use conda package manager to install different LLVM versions for different jobs.",True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/keryell,6,https://github.com/pocl/pocl/pull/626#issuecomment-374672900,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.",Yes it would be nice to have a CI system running.,True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/franz,7,https://github.com/pocl/pocl/pull/626#issuecomment-374702861,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","@jeffhammond @isuruf @keryell hello, any of you know if it's possible to have docker + Mac OS X in a single travis.yml file ? AFAICT it is not, and Travis native environment (ubuntu 14.04) is really old (and has a few bugs which cause pocl test fails).",True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/jeffhammond,8,https://github.com/pocl/pocl/pull/626#issuecomment-374706337,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.",@franz I know virtually nothing about Docker.  Sorry.,True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/Atry,9,https://github.com/pocl/pocl/pull/626#issuecomment-374816528,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","@jeffhammond I created a docker image based on the conda package of pocl
FYI",True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/kraiskil,10,https://github.com/pocl/pocl/pull/626#issuecomment-374844358,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","Looks like the buildbot is still churning out builds, though only for x86 and tce currently. And with a bit outdated LLVM:s.
But adding a slave to that could be an easy way of adding platforms of interest. There used to be ARM, PPC and OSX slaves at one point in time, and the scripts (in doc/buildbot) are probably still current.
Just a thought...",True,{'THUMBS_UP': ['https://github.com/pjaaskel']}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/franz,11,https://github.com/pocl/pocl/pull/626#issuecomment-374847304,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","@kraiskil i have my own buildbots with CUDA, HSA, TCE, ARM/ARM64 and multiple LLVMs up to 6.0, based on your code in doc/buildbot (thanks 😉). I couldn't keep pocl reasonably unbroken without those.
I don't have a Mac OS X buildbot so Travis would definitely help here, but i was wondering, if i can't use Docker in the same Travis file, is there any point in using their old Ubuntu..",True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/pjaaskel,12,https://github.com/pocl/pocl/pull/626#issuecomment-374853433,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.",@franz shall we register them as slaves so we see the stats in the pocl buildbot panel? http://tce.cs.tut.fi:8010/builders,True,{}
pocl/pocl,https://github.com/pocl/pocl,626,2018-03-05T15:28:17Z,2018-03-21T15:52:32Z,2019-12-03T16:57:13Z,CLOSED,False,49,0,1,https://github.com/jeffhammond,add basic Travis CI support,1,[],https://github.com/pocl/pocl/pull/626,https://github.com/franz,13,https://github.com/pocl/pocl/pull/626#issuecomment-374989141,"I don't know if this is of interest, but my recent Mac issue (#623) made me think it would be useful to test in Travis CI.
Limitations

Clang host compiler on Linux was disabled because of C++ stdlib issues in the toolchain (i.e. unrelated to POCL).
Mac builds are set to xfail because Homebrew provides hwloc 2.0, which isn't supported yet (#358).
Manual install of hwloc 1.x can be added if desired.

See https://travis-ci.org/jeffhammond/pocl/builds/349322556 for details.","@pjaaskel probably a lot less work would be to add authentication to my builbot web interface. The code i use to setup builbots is quite different from kraiskil's original scripts in doc/buildbot...
I've added a travis.yml (Mac OS X only, for now) to my latest PR #633 so i'm closing this one. Thanks Jeff!",True,{}
pocl/pocl,https://github.com/pocl/pocl,627,2018-03-05T15:46:43Z,2018-03-15T10:31:10Z,2018-03-15T10:31:10Z,CLOSED,False,15,0,1,https://github.com/jeffhammond,support hwloc 2,1,[],https://github.com/pocl/pocl/pull/627,https://github.com/jeffhammond,1,https://github.com/pocl/pocl/pull/627,"This is an attempt to address issue #358.  It is likely not ready to be merged.

Source changes are simple substitution based upon https://www.open-mpi.org/projects/hwloc/doc/v2.0.0/a00327.php
API version is detected from hwloc.h in-place, rather than using CMake.
There is no test for header-library incompatibility.  This is demonstrated on https://www.open-mpi.org/projects/hwloc/doc/v2.0.0/a00326.php#faq_upgrade and can be implemented.","This is an attempt to address issue #358.  It is likely not ready to be merged.

Source changes are simple substitution based upon https://www.open-mpi.org/projects/hwloc/doc/v2.0.0/a00327.php
API version is detected from hwloc.h in-place, rather than using CMake.
There is no test for header-library incompatibility.  This is demonstrated on https://www.open-mpi.org/projects/hwloc/doc/v2.0.0/a00326.php#faq_upgrade and can be implemented.",True,{}
pocl/pocl,https://github.com/pocl/pocl,627,2018-03-05T15:46:43Z,2018-03-15T10:31:10Z,2018-03-15T10:31:10Z,CLOSED,False,15,0,1,https://github.com/jeffhammond,support hwloc 2,1,[],https://github.com/pocl/pocl/pull/627,https://github.com/franz,2,https://github.com/pocl/pocl/pull/627#issuecomment-373330763,"This is an attempt to address issue #358.  It is likely not ready to be merged.

Source changes are simple substitution based upon https://www.open-mpi.org/projects/hwloc/doc/v2.0.0/a00327.php
API version is detected from hwloc.h in-place, rather than using CMake.
There is no test for header-library incompatibility.  This is demonstrated on https://www.open-mpi.org/projects/hwloc/doc/v2.0.0/a00326.php#faq_upgrade and can be implemented.","WRT ""API version is detected from hwloc.h in-place, rather than using CMake."" - i think that's fine.
I have created a new PR #629 which has your commit + the test for header-library incompatibility, let's continue there.",True,{'THUMBS_UP': ['https://github.com/jeffhammond']}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/628,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer",True,"{'THUMBS_UP': ['https://github.com/Atry'], 'HOORAY': ['https://github.com/Atry']}"
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/franz,2,https://github.com/pocl/pocl/pull/628#issuecomment-372454506,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","POclFinish (command_queue);

Yep that's a bug, it should be POname(clFinish) (command_queue);
I have one small nitpick at the PR, otherwise LGTM.",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/franz,3,https://github.com/pocl/pocl/pull/628#issuecomment-372455479,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","I see you fixed HAVE_CLOCK_GETTIME, thanks. FYI i've already rewritten the HAVE_FORK/VFORK tests to use CHECK_C_SOURCE_COMPILES so you don't need to fix those.",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/isuruf,4,https://github.com/pocl/pocl/pull/628#issuecomment-372905590,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","@franz, running the test suite revealed a few more bugs. Now all tests pass on macosx.",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/franz,5,https://github.com/pocl/pocl/pull/628#issuecomment-372982577,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","/home/buildslave/basedir/quick_noLLVM_noDEBUG/source/lib/CL/devices/common.c:1031:1: warning: 
missing initializer for field ‘max_ever_allocated’ of ‘pocl_global_mem_t {aka struct pocl_global_mem_t}’ [-Wmissing-field-initializers]
 static pocl_global_mem_t system_memory = POCL_LOCK_INITIALIZER;

pocl_global_mem_t is a struct, not a lock. Out of curiosity, is the pthread lock initializer on Mac OS X something else than zeroes ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/isuruf,6,https://github.com/pocl/pocl/pull/628#issuecomment-373017840,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","How should I initialize system_memory object's pocl_lock field? In OSX, PTHREAD_MUTEX_INITIALIZER is defined as below.
#define _PTHREAD_MUTEX_SIG_init          0x32AAABA7
#define PTHREAD_MUTEX_INITIALIZER {_PTHREAD_MUTEX_SIG_init, {0}}",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/franz,7,https://github.com/pocl/pocl/pull/628#issuecomment-373026953,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","system_memory =  { POCL_LOCK_INITIALIZER, 0, 0, 0 } should work, or you could initialize just the lock about 10 lines below, in the if (system_memory.total_alloc_limit == 0) block, since that block is only run once.",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/oscarbg,8,https://github.com/pocl/pocl/pull/628#issuecomment-373763329,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","Hi @franz @isuruf,
just comment that seeing this pull I tested by myself also building it..
my findings are without reading the docs:
used precompiled llvm 6.0 from http://releases.llvm.org/6.0.0/clang+llvm-6.0.0-x86_64-apple-darwin.tar.xz and put in PATH although I remember now I also had Xcode 9.3 beta command line tools installed although I saw from CMake output used llvm-config and LLVM components from precompiled 6.0 folder ..
1)needs -DENABLE_ICD=0 setting in cmake if not complains about no OSX support..
2)strangely had to include some #define HAVE_VFORK or similar as
#define HAVE_VFORK 1
just before
int pocl_run_command (char *const *args)
if not got #error Must have fork() or vfork() system calls for HSA
strange as I have ENABLE_HSA=0 ..
3)then applied patches as needed from here and compiled.. strangely didn't need to apply rt,-Werror=implicit-function-declaration and Improve HAVE_CLOCK_GETTIME test patches..
then builds..
( I also see WARNING: Linking two modules of different data layouts: '/Users/oscar/Downloads/pocl/build/lib/kernel/host/skylake/barrier.ll.bc' is '' whereas 'llvm-link' is 'e-m:o-i64:64-f80:128-n8:16:32:64-S128')
but running example1:
I get:
Assertion failed: (r == 0), function void *pocl_memalign_alloc_global_mem(cl_device_id, size_t, size_t), file /Users/oscarbarenysgarcia/Downloads/pocl/lib/CL/devices/common.c, line 1170.
Abort trap: 6
as quick hack I comment  //POCL_LOCK (mem->pocl_lock);
and // POCL_UNLOCK (mem->pocl_lock);
in pocl_memalign_alloc_global_mem and pocl_free_global_mem
but still get errors..
done late last night.. sorry in advance if results are my own errors as perhaps I did some step bad..",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/franz,9,https://github.com/pocl/pocl/pull/628#issuecomment-373775043,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","@oscarbg


i recommend to NOT use precompiled LLVM from llvm.org, unless you're absolutely sure it's was compiled on the same Mac OS X version as you're running. I have experience with random and mysterious linking errors when using precompiled LLVM from llvm.org. LLVM uses C++ heavily and compiled C++ is NOT portable across OS versions.


there's only -DENABLE_ICD=0 not -DENABLE_POCL_ICD=0


""strange as I have ENABLE_HSA=0"" - i have no idea how you got that


you really want those patches, especially the Werror=implicit-function-declaration patch


""WARNING: Linking two modules of different data layouts"" is harmless


""Assertion failed: (r == 0)"" <<< this means one of the pthread functions returned non-zero result, which is  a serious problem. Commenting out POCL_LOCK/UNLOCK will really not fix anything, you'll have to find out what error it returns (print errno) and why.


In short: don't waste time with patching and dowloading LLVM. Clone this branch: https://github.com/franz/pocl/tree/travis-ci and take a look at last commit.",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/isuruf,10,https://github.com/pocl/pocl/pull/628#issuecomment-373785855,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","@oscarbg, I fixed the assertion failed error in the last commit. Please use all the patches from here.",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/oscarbg,11,https://github.com/pocl/pocl/pull/628#issuecomment-373797171,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","yes the assertion is now fixed @isuruf ,thanks!
example1 is now working correctly (prints some numbers &OK)
thanks @franz! ,
for all responses yeah was a -DENABLE_ICD=0 sorry I was speaking from memory..
seeing comments I will build LLVM by myself then and guess the only strange thing is the missing VFORK or FORK undefined but hope that will go away also..
just two questions:

this seems obvious: also now example1-spir is not working but it's because the LLVM used has to be built with SPIR target support ,right?
as using the prebuilt one I see:
./llvm-config --targets-built
AArch64 AMDGPU ARM BPF Hexagon Lanai Mips MSP430 NVPTX PowerPC Sparc SystemZ X86 XCore
missing SPIR..
all AVX512 support added recently is portable and should work out of the box on MacOS right?

will be nice of someone test vs Apple OpenCL driver now that they are shipping AVX512 enabled HW on Mac Pros to see if their OpenCL stack is making use of it..",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/isuruf,12,https://github.com/pocl/pocl/pull/628#issuecomment-373798373,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","I also had the fork and vfork issue  and I fixed it, but I can't remember which patch fixed it. Did you use all the patches from this PR? Can you post the cmake output and CMakeFiles/*.log files somewhere and post  a link here?",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/franz,13,https://github.com/pocl/pocl/pull/628#issuecomment-373806433,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","@oscarbg  AVX512 should be portable, but remember 1) use LLVM 6 because earlier have buggy AVX512, and 2) the vectorizer in LLVM is far from ideal, so you'll likely have to write hand-vectorized code using float16 or double8 vectors to see any AVX512.",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/franz,14,https://github.com/pocl/pocl/pull/628#issuecomment-373807000,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","also, SPIR is not listed in the LLVM targets, because it's not a target. Pocl uses a test to find out SPIR support, you should see it somewhere in the CMake output.",True,{}
pocl/pocl,https://github.com/pocl/pocl,628,2018-03-12T20:07:33Z,2018-03-20T14:40:45Z,2018-03-20T14:40:46Z,MERGED,True,45,11,8,https://github.com/isuruf,MacOS fixes,12,[],https://github.com/pocl/pocl/pull/628,https://github.com/oscarbg,15,https://github.com/pocl/pocl/pull/628#issuecomment-374019969,"With these changes I could get 1.1 to compile, but fails at the link stage.
[ 97%] Linking CXX shared library libOpenCL.dylib
Undefined symbols for architecture x86_64:
  ""_POclFinish"", referenced from:
      _pocl_command_enqueue in pocl_util.c.o
ld: symbol(s) not found for architecture x86_64

There's a warning that it's undefined. Full log here
/Users/travis/miniconda3/conda-bld/pocl_1520884248289/work/pocl-1.1/lib/CL/pocl_util.c:533:5: warning: implicit declaration of function 'POclFinish' is invalid in C99 [-Wimplicit-function-declaration]
    POclFinish (command_queue);
    ^

Brief explanations are in commit messages.
cc @inducer","thanks @franz..
@isuruf is the ""Don't link to rt on macos"" which solves the fork vfork issue.. thanks..
patches for me seem good enough to perhaps be merged after some cleanup..",True,{}
pocl/pocl,https://github.com/pocl/pocl,629,2018-03-15T10:27:16Z,2018-03-15T16:15:44Z,2018-03-22T11:29:19Z,MERGED,True,32,0,2,https://github.com/franz,Hwloc 2 support,3,[],https://github.com/pocl/pocl/pull/629,https://github.com/franz,1,https://github.com/pocl/pocl/pull/629,This is the same as PR #627 with added check for header-library incompatibility.,This is the same as PR #627 with added check for header-library incompatibility.,True,{'THUMBS_UP': ['https://github.com/jeffhammond']}
pocl/pocl,https://github.com/pocl/pocl,630,2018-03-15T11:18:10Z,2018-03-20T16:10:03Z,2018-03-20T16:10:04Z,MERGED,True,9,4,1,https://github.com/Oblomov,Extension-pased device info check,2,[],https://github.com/pocl/pocl/pull/630,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/630,"Introduce a variant of POCL_RETURN_DEVICE_INFO_WITH_IMPL_CHECK that
only complains for null values if support for a specific extension is
claimed, and use it when returning the default and native vector widths
for the half type when cl_khr_fp16 is not supported.
Signed-off-by: Giuseppe Bilotta giuseppe.bilotta@gmail.com","Introduce a variant of POCL_RETURN_DEVICE_INFO_WITH_IMPL_CHECK that
only complains for null values if support for a specific extension is
claimed, and use it when returning the default and native vector widths
for the half type when cl_khr_fp16 is not supported.
Signed-off-by: Giuseppe Bilotta giuseppe.bilotta@gmail.com",True,{}
pocl/pocl,https://github.com/pocl/pocl,631,2018-03-16T08:10:14Z,2018-03-16T08:12:40Z,2018-03-16T08:12:55Z,CLOSED,False,1,1,1,https://github.com/Atry,Remove librt for macOS,1,[],https://github.com/pocl/pocl/pull/631,https://github.com/Atry,1,https://github.com/pocl/pocl/pull/631,macOS does not have librt,macOS does not have librt,True,{}
pocl/pocl,https://github.com/pocl/pocl,631,2018-03-16T08:10:14Z,2018-03-16T08:12:40Z,2018-03-16T08:12:55Z,CLOSED,False,1,1,1,https://github.com/Atry,Remove librt for macOS,1,[],https://github.com/pocl/pocl/pull/631,https://github.com/Atry,2,https://github.com/pocl/pocl/pull/631#issuecomment-373636292,macOS does not have librt,Duplicated with #628,True,{}
pocl/pocl,https://github.com/pocl/pocl,632,2018-03-20T16:43:15Z,2018-03-21T17:30:51Z,2018-03-21T17:30:51Z,MERGED,True,40,2,8,https://github.com/keryell,[WIP] Clang/LLVM 7.0 ToT,4,[],https://github.com/pocl/pocl/pull/632,https://github.com/keryell,1,https://github.com/pocl/pocl/pull/632,"This is a development branch to have PoCL working with ToT Clang/LLVM.
It is not intended to be merged for now but mostly to have an llvm-7.0 branch Khronos and others can work with and contribute, towards the great unification around ToT OpenCL/SPIR/SPIR-V/SYCL...
On my laptop the ctest -j1seems good:
99% tests passed, 1 tests failed out of 121

Label Time Summary:
EinsteinToolkit    =   5.42 sec (2 tests)
cuda               =   3.94 sec (49 tests)
hsa                =   0.22 sec (3 tests)
internal           =  15.46 sec (107 tests)
kernel             =   2.65 sec (29 tests)
regression         =   2.42 sec (35 tests)
runtime            =   8.71 sec (21 tests)
spir               =   0.48 sec (1 test)
tce                =   0.56 sec (8 tests)
workgroup          =   1.45 sec (19 tests)

Total Test time (real) =  22.35 sec

The following tests FAILED:
	121 - EinsteinToolkit_SubDev (OTHER_FAULT)
Errors while running CTest","This is a development branch to have PoCL working with ToT Clang/LLVM.
It is not intended to be merged for now but mostly to have an llvm-7.0 branch Khronos and others can work with and contribute, towards the great unification around ToT OpenCL/SPIR/SPIR-V/SYCL...
On my laptop the ctest -j1seems good:
99% tests passed, 1 tests failed out of 121

Label Time Summary:
EinsteinToolkit    =   5.42 sec (2 tests)
cuda               =   3.94 sec (49 tests)
hsa                =   0.22 sec (3 tests)
internal           =  15.46 sec (107 tests)
kernel             =   2.65 sec (29 tests)
regression         =   2.42 sec (35 tests)
runtime            =   8.71 sec (21 tests)
spir               =   0.48 sec (1 test)
tce                =   0.56 sec (8 tests)
workgroup          =   1.45 sec (19 tests)

Total Test time (real) =  22.35 sec

The following tests FAILED:
	121 - EinsteinToolkit_SubDev (OTHER_FAULT)
Errors while running CTest",True,"{'THUMBS_UP': ['https://github.com/pjaaskel', 'https://github.com/franz']}"
pocl/pocl,https://github.com/pocl/pocl,633,2018-03-21T15:21:39Z,2018-03-21T17:30:51Z,2018-03-22T11:29:49Z,MERGED,True,439,298,24,https://github.com/franz,small fixes,16,[],https://github.com/pocl/pocl/pull/633,https://github.com/franz,1,https://github.com/pocl/pocl/pull/633,"Travis CI file, plus various random stuff","Travis CI file, plus various random stuff",True,{}
pocl/pocl,https://github.com/pocl/pocl,634,2018-03-22T02:22:03Z,2018-05-20T03:25:05Z,2018-05-20T03:25:05Z,CLOSED,False,97,20,3,https://github.com/isuruf,More travis-ci testing,17,[],https://github.com/pocl/pocl/pull/634,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/634,"@franz, here are some improvements to travis-ci that I thought you would be interested in. It uses Docker images (Ubuntu 16.04 32-bit or 64-bit) or conda (conda packages are 64-bit only). LLVM_VERSION is an env variable and new jobs can be added to test different LLVM versions. HWLOC_VERSION env variable is supported only through conda. I didn't add all possible configurations to avoid a combinatorial explosion of jobs","@franz, here are some improvements to travis-ci that I thought you would be interested in. It uses Docker images (Ubuntu 16.04 32-bit or 64-bit) or conda (conda packages are 64-bit only). LLVM_VERSION is an env variable and new jobs can be added to test different LLVM versions. HWLOC_VERSION env variable is supported only through conda. I didn't add all possible configurations to avoid a combinatorial explosion of jobs",True,{}
pocl/pocl,https://github.com/pocl/pocl,634,2018-03-22T02:22:03Z,2018-05-20T03:25:05Z,2018-05-20T03:25:05Z,CLOSED,False,97,20,3,https://github.com/isuruf,More travis-ci testing,17,[],https://github.com/pocl/pocl/pull/634,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/634#issuecomment-375160415,"@franz, here are some improvements to travis-ci that I thought you would be interested in. It uses Docker images (Ubuntu 16.04 32-bit or 64-bit) or conda (conda packages are 64-bit only). LLVM_VERSION is an env variable and new jobs can be added to test different LLVM versions. HWLOC_VERSION env variable is supported only through conda. I didn't add all possible configurations to avoid a combinatorial explosion of jobs","@franz, can you enable travis-ci for pocl organization?",True,{}
pocl/pocl,https://github.com/pocl/pocl,634,2018-03-22T02:22:03Z,2018-05-20T03:25:05Z,2018-05-20T03:25:05Z,CLOSED,False,97,20,3,https://github.com/isuruf,More travis-ci testing,17,[],https://github.com/pocl/pocl/pull/634,https://github.com/franz,3,https://github.com/pocl/pocl/pull/634#issuecomment-375220034,"@franz, here are some improvements to travis-ci that I thought you would be interested in. It uses Docker images (Ubuntu 16.04 32-bit or 64-bit) or conda (conda packages are 64-bit only). LLVM_VERSION is an env variable and new jobs can be added to test different LLVM versions. HWLOC_VERSION env variable is supported only through conda. I didn't add all possible configurations to avoid a combinatorial explosion of jobs","Hi @isuruf,
Thanks, this is (almost) exactly what i was looking for.

can you enable travis-ci for pocl organization?

Probably, if not me then @pjaaskel

I didn't add all possible configurations to avoid a combinatorial explosion of jobs

Right. TBH i wanted to enable just 1-2 docker builds in Travis. I have my own buildbot setup with a lot of build configs, so the only really useful Travis build config for me is Mac OS X. @pjaaskel also has his buildbots. I think in Travis we could enable a few configs that other people use (like Conda).
So 1) can you please rebase the PR and squash commits like ""Fix dockerfile again"", and 2) fix the matrix to just include 1 most common setup (ubuntu 16.04 64bit + LLVM 6) and then configs you and @inducer really need. We can add others later as needed.",True,{}
pocl/pocl,https://github.com/pocl/pocl,634,2018-03-22T02:22:03Z,2018-05-20T03:25:05Z,2018-05-20T03:25:05Z,CLOSED,False,97,20,3,https://github.com/isuruf,More travis-ci testing,17,[],https://github.com/pocl/pocl/pull/634,https://github.com/isuruf,4,https://github.com/pocl/pocl/pull/634#issuecomment-390454841,"@franz, here are some improvements to travis-ci that I thought you would be interested in. It uses Docker images (Ubuntu 16.04 32-bit or 64-bit) or conda (conda packages are 64-bit only). LLVM_VERSION is an env variable and new jobs can be added to test different LLVM versions. HWLOC_VERSION env variable is supported only through conda. I didn't add all possible configurations to avoid a combinatorial explosion of jobs",Repalced by #642,True,{}
pocl/pocl,https://github.com/pocl/pocl,635,2018-03-23T12:06:37Z,2018-03-26T14:25:33Z,2018-05-25T06:21:38Z,MERGED,True,3998,3348,35,https://github.com/franz,SLEEF update,11,[],https://github.com/pocl/pocl/pull/635,https://github.com/franz,1,https://github.com/pocl/pocl/pull/635,"two big changes:

refactors _kernel.h
updates SLEEF to latest upstream version (3.2)","two big changes:

refactors _kernel.h
updates SLEEF to latest upstream version (3.2)",True,{}
pocl/pocl,https://github.com/pocl/pocl,636,2018-04-01T07:12:13Z,2018-04-02T11:12:51Z,2018-04-02T11:12:52Z,MERGED,True,1,0,1,https://github.com/Atry,Add Compute.scala as a POCL application,1,[],https://github.com/pocl/pocl/pull/636,https://github.com/Atry,1,https://github.com/pocl/pocl/pull/636,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,637,2018-04-11T12:03:47Z,2018-05-08T16:12:53Z,2018-05-08T16:12:54Z,CLOSED,False,2,0,1,https://github.com/PeterTh,Allow SPIR -> PTX conversion in llvm_build,1,[],https://github.com/pocl/pocl/pull/637,https://github.com/PeterTh,1,https://github.com/pocl/pocl/pull/637,"The scenario here is that we are using POCL to provide a OpenCL device that supports SPIR on Nvidia hardware that only natively supports PTX.
This is useful for higher-level libraries/APIs building on top of OpenCL that emit SPIR.
Without this change, this use case fails with ""Invalid SPIR binary triple"". With it, we have successfully run several ComputeCPP tests on Nvidia hardware using the POCL CUDA backend.","The scenario here is that we are using POCL to provide a OpenCL device that supports SPIR on Nvidia hardware that only natively supports PTX.
This is useful for higher-level libraries/APIs building on top of OpenCL that emit SPIR.
Without this change, this use case fails with ""Invalid SPIR binary triple"". With it, we have successfully run several ComputeCPP tests on Nvidia hardware using the POCL CUDA backend.",True,{}
pocl/pocl,https://github.com/pocl/pocl,637,2018-04-11T12:03:47Z,2018-05-08T16:12:53Z,2018-05-08T16:12:54Z,CLOSED,False,2,0,1,https://github.com/PeterTh,Allow SPIR -> PTX conversion in llvm_build,1,[],https://github.com/pocl/pocl/pull/637,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/637#issuecomment-385433781,"The scenario here is that we are using POCL to provide a OpenCL device that supports SPIR on Nvidia hardware that only natively supports PTX.
This is useful for higher-level libraries/APIs building on top of OpenCL that emit SPIR.
Without this change, this use case fails with ""Invalid SPIR binary triple"". With it, we have successfully run several ComputeCPP tests on Nvidia hardware using the POCL CUDA backend.","Sorry for the slow response. Why don't you add nvptx to the same branch as x86 is? That is, force set the datalayout to silence LLVM error due to different datalayouts? @franz do you recall if that incompatible datalayout error was an assertion or just spurious error printout? If an assert then your nvptx special case likely works only if LLVM is compiled without assertions.",True,{}
pocl/pocl,https://github.com/pocl/pocl,637,2018-04-11T12:03:47Z,2018-05-08T16:12:53Z,2018-05-08T16:12:54Z,CLOSED,False,2,0,1,https://github.com/PeterTh,Allow SPIR -> PTX conversion in llvm_build,1,[],https://github.com/pocl/pocl/pull/637,https://github.com/franz,3,https://github.com/pocl/pocl/pull/637#issuecomment-385601980,"The scenario here is that we are using POCL to provide a OpenCL device that supports SPIR on Nvidia hardware that only natively supports PTX.
This is useful for higher-level libraries/APIs building on top of OpenCL that emit SPIR.
Without this change, this use case fails with ""Invalid SPIR binary triple"". With it, we have successfully run several ComputeCPP tests on Nvidia hardware using the POCL CUDA backend.","@pjaaskel i don't remember if it's an assertion or a normal error check, but it's not a ""spurious error printout""; LLVM does check datalayout compatibility.
Also, the code should at least check that ABI bitness is correct, i.e. linking ""spir64-unknown-unknown"" to ""nvptx64"" library is OK, but linking it to ""nvptx"" library is unlikely to work (""nvptx"" must be linked to ""spir-unknown-unknown"").",True,{'THUMBS_UP': ['https://github.com/pjaaskel']}
pocl/pocl,https://github.com/pocl/pocl,637,2018-04-11T12:03:47Z,2018-05-08T16:12:53Z,2018-05-08T16:12:54Z,CLOSED,False,2,0,1,https://github.com/PeterTh,Allow SPIR -> PTX conversion in llvm_build,1,[],https://github.com/pocl/pocl/pull/637,https://github.com/franz,4,https://github.com/pocl/pocl/pull/637#issuecomment-387457158,"The scenario here is that we are using POCL to provide a OpenCL device that supports SPIR on Nvidia hardware that only natively supports PTX.
This is useful for higher-level libraries/APIs building on top of OpenCL that emit SPIR.
Without this change, this use case fails with ""Invalid SPIR binary triple"". With it, we have successfully run several ComputeCPP tests on Nvidia hardware using the POCL CUDA backend.","Since our group now needs SPIR working with TCE backend, i've started working on better SPIR support. Good news is that CUDA and the rest will get a free ride.
Turns out that one big missing piece of SPIR support is address space number translation. Simple CUDA SPIR examples work by accident because the global and private AS have the same numbers in SPIR bitcode. I plan to get all CL1.2 address spaces working with SPIR in my next PR.
@PeterTh hate to do this to first-time contributors, but i'll be closing this PR. Hopefully the good news makes up for it",True,{}
pocl/pocl,https://github.com/pocl/pocl,640,2018-04-30T18:43:09Z,2018-05-03T17:58:52Z,2018-05-25T06:21:34Z,MERGED,True,6524,1229,33,https://github.com/franz,Device-side printf(),6,[],https://github.com/pocl/pocl/pull/640,https://github.com/franz,1,https://github.com/pocl/pocl/pull/640,"implements device-side printf.
I added an external project (MIT license) for %e / %f / %g conversions, but by default use libc via snprintf.","implements device-side printf.
I added an external project (MIT license) for %e / %f / %g conversions, but by default use libc via snprintf.",True,{}
pocl/pocl,https://github.com/pocl/pocl,640,2018-04-30T18:43:09Z,2018-05-03T17:58:52Z,2018-05-25T06:21:34Z,MERGED,True,6524,1229,33,https://github.com/franz,Device-side printf(),6,[],https://github.com/pocl/pocl/pull/640,https://github.com/franz,2,https://github.com/pocl/pocl/pull/640#issuecomment-386242985,"implements device-side printf.
I added an external project (MIT license) for %e / %f / %g conversions, but by default use libc via snprintf.",updated,True,{}
pocl/pocl,https://github.com/pocl/pocl,641,2018-05-15T15:08:54Z,2018-05-24T12:50:14Z,2018-05-24T12:50:14Z,MERGED,True,4790,4871,92,https://github.com/franz,Improved SPIR support for TCE + CUDA,15,[],https://github.com/pocl/pocl/pull/641,https://github.com/franz,1,https://github.com/pocl/pocl/pull/641,a bunch of small fixes. There are a few bugs left in the SPIR support but AFAIK no regressions.,a bunch of small fixes. There are a few bugs left in the SPIR support but AFAIK no regressions.,True,{}
pocl/pocl,https://github.com/pocl/pocl,641,2018-05-15T15:08:54Z,2018-05-24T12:50:14Z,2018-05-24T12:50:14Z,MERGED,True,4790,4871,92,https://github.com/franz,Improved SPIR support for TCE + CUDA,15,[],https://github.com/pocl/pocl/pull/641,https://github.com/franz,2,https://github.com/pocl/pocl/pull/641#issuecomment-390216601,a bunch of small fixes. There are a few bugs left in the SPIR support but AFAIK no regressions.,"OK, updated with requested changes. POCL_TCELE is gone, DataLayout is from the kernel bitcode library,  TCE address space numbers have been changed to match SPIR, and removed the AS translation for TCE. TCE+SPIR works but requires a patched Clang.",True,{}
pocl/pocl,https://github.com/pocl/pocl,641,2018-05-15T15:08:54Z,2018-05-24T12:50:14Z,2018-05-24T12:50:14Z,MERGED,True,4790,4871,92,https://github.com/franz,Improved SPIR support for TCE + CUDA,15,[],https://github.com/pocl/pocl/pull/641,https://github.com/franz,3,https://github.com/pocl/pocl/pull/641#issuecomment-391233193,a bunch of small fixes. There are a few bugs left in the SPIR support but AFAIK no regressions.,"WRT ""does this test spirv input somehow somewhere?"" - nope currently it does not.",True,{}
pocl/pocl,https://github.com/pocl/pocl,642,2018-05-20T03:24:43Z,2018-05-30T05:10:48Z,2018-05-30T05:11:22Z,MERGED,True,81,22,3,https://github.com/isuruf,More travis-ci testing,6,[],https://github.com/pocl/pocl/pull/642,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/642,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,642,2018-05-20T03:24:43Z,2018-05-30T05:10:48Z,2018-05-30T05:11:22Z,MERGED,True,81,22,3,https://github.com/isuruf,More travis-ci testing,6,[],https://github.com/pocl/pocl/pull/642,https://github.com/franz,2,https://github.com/pocl/pocl/pull/642#issuecomment-390994112,,"Thanks, i'll try it with my Travis account.",True,{}
pocl/pocl,https://github.com/pocl/pocl,642,2018-05-20T03:24:43Z,2018-05-30T05:10:48Z,2018-05-30T05:11:22Z,MERGED,True,81,22,3,https://github.com/isuruf,More travis-ci testing,6,[],https://github.com/pocl/pocl/pull/642,https://github.com/isuruf,3,https://github.com/pocl/pocl/pull/642#issuecomment-391221947,,"Here's a job in my account, https://travis-ci.org/isuruf/pocl/builds/381242588",True,{}
pocl/pocl,https://github.com/pocl/pocl,642,2018-05-20T03:24:43Z,2018-05-30T05:10:48Z,2018-05-30T05:11:22Z,MERGED,True,81,22,3,https://github.com/isuruf,More travis-ci testing,6,[],https://github.com/pocl/pocl/pull/642,https://github.com/franz,4,https://github.com/pocl/pocl/pull/642#issuecomment-391222614,,"OK, found a few issues (sort of).


the Docker builds do not run the tests (they only call docker build not docker run) and they don't install pocl before running tests (which is my fault, missing ninja install in some Dockerfiles)


Just FYI, the Conda builds are using Ubuntu 14.04 which has known issues with pocl - see #590. This problem pops up somewhat randomly, and seems to be a bug in GCC - https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/1228201 ...so you may or may not run into this.",True,{}
pocl/pocl,https://github.com/pocl/pocl,642,2018-05-20T03:24:43Z,2018-05-30T05:10:48Z,2018-05-30T05:11:22Z,MERGED,True,81,22,3,https://github.com/isuruf,More travis-ci testing,6,[],https://github.com/pocl/pocl/pull/642,https://github.com/franz,5,https://github.com/pocl/pocl/pull/642#issuecomment-391233086,,"OK, looks good. Running in Travis now.",True,{}
pocl/pocl,https://github.com/pocl/pocl,642,2018-05-20T03:24:43Z,2018-05-30T05:10:48Z,2018-05-30T05:11:22Z,MERGED,True,81,22,3,https://github.com/isuruf,More travis-ci testing,6,[],https://github.com/pocl/pocl/pull/642,https://github.com/franz,6,https://github.com/pocl/pocl/pull/642#issuecomment-391238708,,"https://travis-ci.org/franz/pocl/builds/382514677 one of the Docker jobs seems to be stuck in apt-get for some reason, but i'm guessing it's a build environment problem, not a pocl problem. But the other Docker job runs the tests now, so LGTM.",True,{}
pocl/pocl,https://github.com/pocl/pocl,642,2018-05-20T03:24:43Z,2018-05-30T05:10:48Z,2018-05-30T05:11:22Z,MERGED,True,81,22,3,https://github.com/isuruf,More travis-ci testing,6,[],https://github.com/pocl/pocl/pull/642,https://github.com/isuruf,7,https://github.com/pocl/pocl/pull/642#issuecomment-391935163,,"Looks like that issue was resolved, but there are test failures in ppc64le. Shall I mark the job as ""allowed failure"" ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,642,2018-05-20T03:24:43Z,2018-05-30T05:10:48Z,2018-05-30T05:11:22Z,MERGED,True,81,22,3,https://github.com/isuruf,More travis-ci testing,6,[],https://github.com/pocl/pocl/pull/642,https://github.com/franz,8,https://github.com/pocl/pocl/pull/642#issuecomment-391947223,,"@isuruf  well, how much do you care about ppc64 ? the two tests failing are not really suprising, since the whole passing-struct-as-kernel-args is not well defined in OpenCL. We can if-not-ppc them in CMake.",True,{}
pocl/pocl,https://github.com/pocl/pocl,642,2018-05-20T03:24:43Z,2018-05-30T05:10:48Z,2018-05-30T05:11:22Z,MERGED,True,81,22,3,https://github.com/isuruf,More travis-ci testing,6,[],https://github.com/pocl/pocl/pull/642,https://github.com/isuruf,9,https://github.com/pocl/pocl/pull/642#issuecomment-392573759,,"how much do you care about ppc64 ?

I don't. I reverted that commit.",True,{}
pocl/pocl,https://github.com/pocl/pocl,643,2018-06-13T05:39:17Z,2018-06-15T07:09:15Z,2019-08-05T10:03:56Z,MERGED,True,235,393,38,https://github.com/franz,stuff,9,[],https://github.com/pocl/pocl/pull/643,https://github.com/franz,1,https://github.com/pocl/pocl/pull/643,various small fixes,various small fixes,True,{}
pocl/pocl,https://github.com/pocl/pocl,646,2018-07-25T11:02:32Z,2018-07-26T06:10:29Z,2018-07-26T06:10:29Z,MERGED,True,2228,1510,58,https://github.com/franz,internal API changes,15,[],https://github.com/pocl/pocl/pull/646,https://github.com/franz,1,https://github.com/pocl/pocl/pull/646,"Small changes:

remove some old unused code
few LLVM 7 fixes

Big(ger) changes:

merges device->init_device_infos() with device->init()
completely separates image handling from buffer handling in the driver API. Ofc image support is entirely optional. The API should be suitable to implement image support for HSA, CUDA and whatever else (though that is not done in this PR)
changed the driver API to use pocl_mem_identifiers instead of device memory pointers directly. This is required for the next PR.","Small changes:

remove some old unused code
few LLVM 7 fixes

Big(ger) changes:

merges device->init_device_infos() with device->init()
completely separates image handling from buffer handling in the driver API. Ofc image support is entirely optional. The API should be suitable to implement image support for HSA, CUDA and whatever else (though that is not done in this PR)
changed the driver API to use pocl_mem_identifiers instead of device memory pointers directly. This is required for the next PR.",True,{}
pocl/pocl,https://github.com/pocl/pocl,649,2018-08-06T20:59:04Z,2018-08-09T08:41:43Z,2018-08-09T08:41:43Z,CLOSED,False,3,0,1,https://github.com/jrprice,[CUDA] Fix build for LLVM 7.0,1,[],https://github.com/pocl/pocl/pull/649,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/649,"The addPassesToEmitFile function has an additional argument.
Recommend cherry picking to the 1.2 release.","The addPassesToEmitFile function has an additional argument.
Recommend cherry picking to the 1.2 release.",True,{}
pocl/pocl,https://github.com/pocl/pocl,649,2018-08-06T20:59:04Z,2018-08-09T08:41:43Z,2018-08-09T08:41:43Z,CLOSED,False,3,0,1,https://github.com/jrprice,[CUDA] Fix build for LLVM 7.0,1,[],https://github.com/pocl/pocl/pull/649,https://github.com/franz,2,https://github.com/pocl/pocl/pull/649#issuecomment-411683159,"The addPassesToEmitFile function has an additional argument.
Recommend cherry picking to the 1.2 release.",applied in both branches,True,{}
pocl/pocl,https://github.com/pocl/pocl,650,2018-08-07T02:00:42Z,2018-08-09T08:40:33Z,2018-08-09T08:40:33Z,CLOSED,False,2,2,1,https://github.com/isuruf,Fix _POSIX_C_SOURCE value so that strdup declaration is visible,1,[],https://github.com/pocl/pocl/pull/650,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/650,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,650,2018-08-07T02:00:42Z,2018-08-09T08:40:33Z,2018-08-09T08:40:33Z,CLOSED,False,2,2,1,https://github.com/isuruf,Fix _POSIX_C_SOURCE value so that strdup declaration is visible,1,[],https://github.com/pocl/pocl/pull/650,https://github.com/inducer,2,https://github.com/pocl/pocl/pull/650#issuecomment-411072353,,"@isuruf you were totally ahead of me when I filed #654. I had no idea. At any rate, thanks for PRing this in!",True,{}
pocl/pocl,https://github.com/pocl/pocl,650,2018-08-07T02:00:42Z,2018-08-09T08:40:33Z,2018-08-09T08:40:33Z,CLOSED,False,2,2,1,https://github.com/isuruf,Fix _POSIX_C_SOURCE value so that strdup declaration is visible,1,[],https://github.com/pocl/pocl/pull/650,https://github.com/franz,3,https://github.com/pocl/pocl/pull/650#issuecomment-411682784,,Fixed (applied it on release branch first),True,{'THUMBS_UP': ['https://github.com/isuruf']}
pocl/pocl,https://github.com/pocl/pocl,653,2018-08-07T12:57:15Z,2018-08-09T10:07:49Z,2018-08-09T10:07:50Z,CLOSED,False,4,2,1,https://github.com/jrprice,[CUDA] Map LLVM math intrinsics to libdevice calls,1,[],https://github.com/pocl/pocl/pull/653,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/653,"Just adds additional entries for the llvm.*.f{32,64} intrinsics to the libdevice function map.
Recommend cherry picking to the 1.2 release.","Just adds additional entries for the llvm.*.f{32,64} intrinsics to the libdevice function map.
Recommend cherry picking to the 1.2 release.",True,{}
pocl/pocl,https://github.com/pocl/pocl,653,2018-08-07T12:57:15Z,2018-08-09T10:07:49Z,2018-08-09T10:07:50Z,CLOSED,False,4,2,1,https://github.com/jrprice,[CUDA] Map LLVM math intrinsics to libdevice calls,1,[],https://github.com/pocl/pocl/pull/653,https://github.com/jrprice,2,https://github.com/pocl/pocl/pull/653#issuecomment-411707328,"Just adds additional entries for the llvm.*.f{32,64} intrinsics to the libdevice function map.
Recommend cherry picking to the 1.2 release.",Merged in a4f1f4b.,True,{}
pocl/pocl,https://github.com/pocl/pocl,657,2018-08-09T10:09:16Z,2018-08-15T12:08:43Z,2018-08-15T12:08:43Z,CLOSED,False,181,0,4,https://github.com/jrprice,[CUDA] Implement proper async work-group copies,1,[],https://github.com/pocl/pocl/pull/657,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/657,"Use a blocked copy, with a barrier in wait_group_events().
This gets the basic conformance test suite passing with CUDA again.","Use a blocked copy, with a barrier in wait_group_events().
This gets the basic conformance test suite passing with CUDA again.",True,{}
pocl/pocl,https://github.com/pocl/pocl,657,2018-08-09T10:09:16Z,2018-08-15T12:08:43Z,2018-08-15T12:08:43Z,CLOSED,False,181,0,4,https://github.com/jrprice,[CUDA] Implement proper async work-group copies,1,[],https://github.com/pocl/pocl/pull/657,https://github.com/franz,2,https://github.com/pocl/pocl/pull/657#issuecomment-411724582,"Use a blocked copy, with a barrier in wait_group_events().
This gets the basic conformance test suite passing with CUDA again.","Hi James,


by ""basic conformance test suite passing"" you mean the ""basic"" test from OpenCL CTS right ?


if these are not CUDA specific and better than already existing implementation, maybe we could put it into lib/kernel and let other devices use them too.",True,{}
pocl/pocl,https://github.com/pocl/pocl,657,2018-08-09T10:09:16Z,2018-08-15T12:08:43Z,2018-08-15T12:08:43Z,CLOSED,False,181,0,4,https://github.com/jrprice,[CUDA] Implement proper async work-group copies,1,[],https://github.com/pocl/pocl/pull/657,https://github.com/jrprice,3,https://github.com/pocl/pocl/pull/657#issuecomment-411725880,"Use a blocked copy, with a barrier in wait_group_events().
This gets the basic conformance test suite passing with CUDA again.","Yes, I meant the basic test category from the OpenCL CTS.
They're not particularly CUDA specific, but I don't know if they're best for all devices. Is the default serial copy better for the pthread backend for example? Also, the default implementation of wait_group_events used to have a barrier like this implementation, but it was removed in 3ce08a5, apparently because it caused some issues for CFG analysis (I guess for the pthread backend).",True,{}
pocl/pocl,https://github.com/pocl/pocl,657,2018-08-09T10:09:16Z,2018-08-15T12:08:43Z,2018-08-15T12:08:43Z,CLOSED,False,181,0,4,https://github.com/jrprice,[CUDA] Implement proper async work-group copies,1,[],https://github.com/pocl/pocl/pull/657,https://github.com/franz,4,https://github.com/pocl/pocl/pull/657#issuecomment-412492039,"Use a blocked copy, with a barrier in wait_group_events().
This gets the basic conformance test suite passing with CUDA again.","Is the default serial copy better for the pthread backend for example?

Good question. It could be better for the HSA backend though.
Shall i also apply this to release branch?",True,{}
pocl/pocl,https://github.com/pocl/pocl,657,2018-08-09T10:09:16Z,2018-08-15T12:08:43Z,2018-08-15T12:08:43Z,CLOSED,False,181,0,4,https://github.com/jrprice,[CUDA] Implement proper async work-group copies,1,[],https://github.com/pocl/pocl/pull/657,https://github.com/jrprice,5,https://github.com/pocl/pocl/pull/657#issuecomment-412493833,"Use a blocked copy, with a barrier in wait_group_events().
This gets the basic conformance test suite passing with CUDA again.","Shall i also apply this to release branch?

Sure, I'm fine with that. Shouldn't cause any regressions since this was just broken for CUDA before this patch.",True,{}
pocl/pocl,https://github.com/pocl/pocl,657,2018-08-09T10:09:16Z,2018-08-15T12:08:43Z,2018-08-15T12:08:43Z,CLOSED,False,181,0,4,https://github.com/jrprice,[CUDA] Implement proper async work-group copies,1,[],https://github.com/pocl/pocl/pull/657,https://github.com/franz,6,https://github.com/pocl/pocl/pull/657#issuecomment-413178631,"Use a blocked copy, with a barrier in wait_group_events().
This gets the basic conformance test suite passing with CUDA again.","Applied in both branches, will be in RC2",True,{}
pocl/pocl,https://github.com/pocl/pocl,658,2018-08-24T13:18:36Z,2018-09-11T08:42:27Z,2018-09-11T08:42:27Z,MERGED,True,1386,449,41,https://github.com/pjaaskel,Native ISA compilation on top of HSA etc,16,[],https://github.com/pocl/pocl/pull/658,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/658,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,658,2018-08-24T13:18:36Z,2018-09-11T08:42:27Z,2018-09-11T08:42:27Z,MERGED,True,1386,449,41,https://github.com/pjaaskel,Native ISA compilation on top of HSA etc,16,[],https://github.com/pocl/pocl/pull/658,https://github.com/franz,2,https://github.com/pocl/pocl/pull/658#issuecomment-420188502,,"@pjaaskel the CTS results seems OK, so i believe everything should be fixed",True,{}
pocl/pocl,https://github.com/pocl/pocl,659,2018-09-06T13:49:53Z,2018-09-06T13:52:24Z,2018-09-06T13:52:24Z,MERGED,True,40,40,8,https://github.com/pjaaskel,Misc. fixes and cleanups,4,[],https://github.com/pocl/pocl/pull/659,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/659,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,660,2018-09-13T07:02:09Z,2018-09-14T07:41:38Z,2018-09-14T07:41:38Z,MERGED,True,147,57,10,https://github.com/pjaaskel,Misc. HSA driver fixes and cleanups,5,[],https://github.com/pocl/pocl/pull/660,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/660,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,664,2018-10-04T14:48:05Z,2018-10-15T08:30:45Z,2018-10-15T08:30:45Z,MERGED,True,1069,1070,43,https://github.com/franz,remove default kernels + binary update,17,[],https://github.com/pocl/pocl/pull/664,https://github.com/franz,1,https://github.com/pocl/pocl/pull/664,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,665,2018-10-04T15:19:07Z,2018-10-05T13:40:59Z,2018-10-05T13:40:59Z,MERGED,True,35,26,6,https://github.com/pjaaskel,Fix kernel debug data emission,1,[],https://github.com/pocl/pocl/pull/665,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/665,"It is now (again) generated with the OpenCL standard build option -g.
Also adds a new env which forcibly adds '-g' to all clBuildProgram()
command lines (POCL_FORCE_KERNEL_DEBUG=1).
Running my local tests before pushing. @franz please test on yours (esp. for the PIC case) and review.","It is now (again) generated with the OpenCL standard build option -g.
Also adds a new env which forcibly adds '-g' to all clBuildProgram()
command lines (POCL_FORCE_KERNEL_DEBUG=1).
Running my local tests before pushing. @franz please test on yours (esp. for the PIC case) and review.",True,{}
pocl/pocl,https://github.com/pocl/pocl,665,2018-10-04T15:19:07Z,2018-10-05T13:40:59Z,2018-10-05T13:40:59Z,MERGED,True,35,26,6,https://github.com/pjaaskel,Fix kernel debug data emission,1,[],https://github.com/pocl/pocl/pull/665,https://github.com/franz,2,https://github.com/pocl/pocl/pull/665#issuecomment-427283538,"It is now (again) generated with the OpenCL standard build option -g.
Also adds a new env which forcibly adds '-g' to all clBuildProgram()
command lines (POCL_FORCE_KERNEL_DEBUG=1).
Running my local tests before pushing. @franz please test on yours (esp. for the PIC case) and review.","ASAN buildbot is failing:
  Direct leak of 37 byte(s) in 1 object(s) allocated from:

      #0 0x7f1857dbff01 in __interceptor_strdup /build/gcc/src/gcc/libsanitizer/asan/asan_interceptors.cc:405
      #1 0x7f1857be5aac in process_options /home/buildslave/basedir/quick_50_asan/source/lib/CL/pocl_build.c:224
      #2 0x7f1857be5aac in compile_and_link_program /home/buildslave/basedir/quick_50_asan/source/lib/CL/pocl_build.c:534
      #3 0x7f1857be432f in POclBuildProgram /home/buildslave/basedir/quick_50_asan/source/lib/CL/clBuildProgram.c:37
      #4 0x55f075aca9be in main /home/buildslave/basedir/quick_50_asan/source/tests/runtime/test_clBuildProgram.c:106
      #5 0x7f184a74f222 in __libc_start_main (/usr/lib64/libc.so.6+0x24222)

probably this is the issue:
  strcat (temp_options, strdup (options));
no need for strdup there since it's source (const char*)",True,{}
pocl/pocl,https://github.com/pocl/pocl,666,2018-10-05T20:41:20Z,2018-10-15T09:45:02Z,2018-10-16T01:13:42Z,CLOSED,False,6,2,2,https://github.com/isuruf,OSX Fixes,3,[],https://github.com/pocl/pocl/pull/666,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/666,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,666,2018-10-05T20:41:20Z,2018-10-15T09:45:02Z,2018-10-16T01:13:42Z,CLOSED,False,6,2,2,https://github.com/isuruf,OSX Fixes,3,[],https://github.com/pocl/pocl/pull/666,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/666#issuecomment-427498592,,"Hmm, gcc on osx doesn't like -dynamiclib",True,{}
pocl/pocl,https://github.com/pocl/pocl,666,2018-10-05T20:41:20Z,2018-10-15T09:45:02Z,2018-10-16T01:13:42Z,CLOSED,False,6,2,2,https://github.com/isuruf,OSX Fixes,3,[],https://github.com/pocl/pocl/pull/666,https://github.com/franz,3,https://github.com/pocl/pocl/pull/666#issuecomment-428164108,,"Thanks. Tested in Travis and the Clang build now works, but the GCC is still failing for some reason.",True,{}
pocl/pocl,https://github.com/pocl/pocl,666,2018-10-05T20:41:20Z,2018-10-15T09:45:02Z,2018-10-16T01:13:42Z,CLOSED,False,6,2,2,https://github.com/isuruf,OSX Fixes,3,[],https://github.com/pocl/pocl/pull/666,https://github.com/franz,4,https://github.com/pocl/pocl/pull/666#issuecomment-429777862,,LD vs Clang should now be fixed in master.,True,{'THUMBS_UP': ['https://github.com/isuruf']}
pocl/pocl,https://github.com/pocl/pocl,667,2018-10-08T15:37:15Z,2018-10-15T13:01:58Z,2019-03-24T19:46:36Z,CLOSED,False,2,3,1,https://github.com/bmwiedemann,Ensure to not use CPU autodetection,1,[],https://github.com/pocl/pocl/pull/667,https://github.com/bmwiedemann,1,https://github.com/pocl/pocl/pull/667,"Ensure to not use CPU autodetection
when building distro packages.
Without this patch, config.h's OCL_KERNEL_TARGET_CPU got this value and
lib/CL/devices/basic/basic.c
lib/CL/pocl_llvm_utils.cc
lib/CL/pocl_llvm_build.cc
used the value, creating variations in build results.
Note: I tested that it builds reproducibly on different CPUs, but not that it works.","Ensure to not use CPU autodetection
when building distro packages.
Without this patch, config.h's OCL_KERNEL_TARGET_CPU got this value and
lib/CL/devices/basic/basic.c
lib/CL/pocl_llvm_utils.cc
lib/CL/pocl_llvm_build.cc
used the value, creating variations in build results.
Note: I tested that it builds reproducibly on different CPUs, but not that it works.",True,{}
pocl/pocl,https://github.com/pocl/pocl,667,2018-10-08T15:37:15Z,2018-10-15T13:01:58Z,2019-03-24T19:46:36Z,CLOSED,False,2,3,1,https://github.com/bmwiedemann,Ensure to not use CPU autodetection,1,[],https://github.com/pocl/pocl/pull/667,https://github.com/franz,2,https://github.com/pocl/pocl/pull/667#issuecomment-429779083,"Ensure to not use CPU autodetection
when building distro packages.
Without this patch, config.h's OCL_KERNEL_TARGET_CPU got this value and
lib/CL/devices/basic/basic.c
lib/CL/pocl_llvm_utils.cc
lib/CL/pocl_llvm_build.cc
used the value, creating variations in build results.
Note: I tested that it builds reproducibly on different CPUs, but not that it works.","Hello, are you trying to get reproducible builds ? Your patch kind-of works, but i've tried to fix it properly in git master. Please test and let me know if it works.",True,{}
pocl/pocl,https://github.com/pocl/pocl,667,2018-10-08T15:37:15Z,2018-10-15T13:01:58Z,2019-03-24T19:46:36Z,CLOSED,False,2,3,1,https://github.com/bmwiedemann,Ensure to not use CPU autodetection,1,[],https://github.com/pocl/pocl/pull/667,https://github.com/bmwiedemann,3,https://github.com/pocl/pocl/pull/667#issuecomment-429780936,"Ensure to not use CPU autodetection
when building distro packages.
Without this patch, config.h's OCL_KERNEL_TARGET_CPU got this value and
lib/CL/devices/basic/basic.c
lib/CL/pocl_llvm_utils.cc
lib/CL/pocl_llvm_build.cc
used the value, creating variations in build results.
Note: I tested that it builds reproducibly on different CPUs, but not that it works.","Hi, yes, I'm working on reproducible builds for openSUSE, but even without that, we want to have distribution packages that do not depend on the build CPU type.
Found the relevant commit e99f4ca",True,{}
pocl/pocl,https://github.com/pocl/pocl,667,2018-10-08T15:37:15Z,2018-10-15T13:01:58Z,2019-03-24T19:46:36Z,CLOSED,False,2,3,1,https://github.com/bmwiedemann,Ensure to not use CPU autodetection,1,[],https://github.com/pocl/pocl/pull/667,https://github.com/bmwiedemann,4,https://github.com/pocl/pocl/pull/667#issuecomment-429801088,"Ensure to not use CPU autodetection
when building distro packages.
Without this patch, config.h's OCL_KERNEL_TARGET_CPU got this value and
lib/CL/devices/basic/basic.c
lib/CL/pocl_llvm_utils.cc
lib/CL/pocl_llvm_build.cc
used the value, creating variations in build results.
Note: I tested that it builds reproducibly on different CPUs, but not that it works.",Tested successfully. So this PR can be closed.,True,{}
pocl/pocl,https://github.com/pocl/pocl,670,2018-11-02T16:45:25Z,2018-11-07T08:27:33Z,2018-11-07T08:27:33Z,MERGED,True,1876,107303,248,https://github.com/franz,Remove pocl from pocl,15,[],https://github.com/pocl/pocl/pull/670,https://github.com/franz,1,https://github.com/pocl/pocl/pull/670,"OK, just kidding. It's friday. And this PR only removes half of pocl anyway.","OK, just kidding. It's friday. And this PR only removes half of pocl anyway.",True,{}
pocl/pocl,https://github.com/pocl/pocl,674,2018-11-06T16:44:02Z,2018-11-07T08:47:10Z,2018-11-07T08:47:10Z,MERGED,True,1,1,1,https://github.com/Oblomov,CUDA device code is not hosted,1,[],https://github.com/pocl/pocl/pull/674,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/674,"When building the cuda driver with LLVM 7, compilation of the device
functions may fail with the error:
/usr/include/stdint.h:26:10: fatal error: 'bits/libc-header-start.h' file not found
Adding -ffreestanding to the compilation flags for the cuda driver
avoids attempts to access the host include files.
Fixes #671.","When building the cuda driver with LLVM 7, compilation of the device
functions may fail with the error:
/usr/include/stdint.h:26:10: fatal error: 'bits/libc-header-start.h' file not found
Adding -ffreestanding to the compilation flags for the cuda driver
avoids attempts to access the host include files.
Fixes #671.",True,{}
pocl/pocl,https://github.com/pocl/pocl,674,2018-11-06T16:44:02Z,2018-11-07T08:47:10Z,2018-11-07T08:47:10Z,MERGED,True,1,1,1,https://github.com/Oblomov,CUDA device code is not hosted,1,[],https://github.com/pocl/pocl/pull/674,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/674#issuecomment-436330621,"When building the cuda driver with LLVM 7, compilation of the device
functions may fail with the error:
/usr/include/stdint.h:26:10: fatal error: 'bits/libc-header-start.h' file not found
Adding -ffreestanding to the compilation flags for the cuda driver
avoids attempts to access the host include files.
Fixes #671.",@jrprice ok to merge?,True,{}
pocl/pocl,https://github.com/pocl/pocl,675,2018-11-07T17:51:55Z,2018-11-12T15:08:33Z,2018-11-12T15:08:33Z,MERGED,True,745,476,62,https://github.com/franz,Fix a few more things for multiple device use case,18,[],https://github.com/pocl/pocl/pull/675,https://github.com/franz,1,https://github.com/pocl/pocl/pull/675,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,681,2018-12-26T15:23:11Z,2019-01-30T16:37:27Z,2019-01-30T16:37:27Z,CLOSED,False,1980,918,58,https://github.com/pjaaskel,"Fixes, cleanups (refactorings) and updates",26,[],https://github.com/pocl/pocl/pull/681,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/681,"Due to the Workgroup.cc and the header major refactoring patches, let's stall the merge of this to the beginning of the 1.4 release cycle.","Due to the Workgroup.cc and the header major refactoring patches, let's stall the merge of this to the beginning of the 1.4 release cycle.",True,{}
pocl/pocl,https://github.com/pocl/pocl,686,2019-01-20T16:43:52Z,2019-01-22T06:52:48Z,2019-01-22T06:52:48Z,MERGED,True,2,2,1,https://github.com/sdh4,pthread: broadcast event updates with pthread_cond_broadcast(),1,[],https://github.com/pocl/pocl/pull/686,https://github.com/sdh4,1,https://github.com/pocl/pocl/pull/686,pocl_pthread_update_event() notifies event waiters about changes of status. It should use pthread_cond_broadcast() rather than pthread_cond_signal() so all waiters get notified in case multiple threads are waiting on the event.,pocl_pthread_update_event() notifies event waiters about changes of status. It should use pthread_cond_broadcast() rather than pthread_cond_signal() so all waiters get notified in case multiple threads are waiting on the event.,True,{}
pocl/pocl,https://github.com/pocl/pocl,686,2019-01-20T16:43:52Z,2019-01-22T06:52:48Z,2019-01-22T06:52:48Z,MERGED,True,2,2,1,https://github.com/sdh4,pthread: broadcast event updates with pthread_cond_broadcast(),1,[],https://github.com/pocl/pocl/pull/686,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/686#issuecomment-456126046,pocl_pthread_update_event() notifies event waiters about changes of status. It should use pthread_cond_broadcast() rather than pthread_cond_signal() so all waiters get notified in case multiple threads are waiting on the event.,Can you tell me your real name and email so I can add it to CREDITS? We like to list all contributors there (even minor ones).,True,{}
pocl/pocl,https://github.com/pocl/pocl,686,2019-01-20T16:43:52Z,2019-01-22T06:52:48Z,2019-01-22T06:52:48Z,MERGED,True,2,2,1,https://github.com/sdh4,pthread: broadcast event updates with pthread_cond_broadcast(),1,[],https://github.com/pocl/pocl/pull/686,https://github.com/sdh4,3,https://github.com/pocl/pocl/pull/686#issuecomment-456131927,pocl_pthread_update_event() notifies event waiters about changes of status. It should use pthread_cond_broadcast() rather than pthread_cond_signal() so all waiters get notified in case multiple threads are waiting on the event.,"Don't think this really qualifies as much of a contribution, but in any case:
Steve Holland... sdh4@iastate.edu",True,{}
pocl/pocl,https://github.com/pocl/pocl,686,2019-01-20T16:43:52Z,2019-01-22T06:52:48Z,2019-01-22T06:52:48Z,MERGED,True,2,2,1,https://github.com/sdh4,pthread: broadcast event updates with pthread_cond_broadcast(),1,[],https://github.com/pocl/pocl/pull/686,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/686#issuecomment-456286031,pocl_pthread_update_event() notifies event waiters about changes of status. It should use pthread_cond_broadcast() rather than pthread_cond_signal() so all waiters get notified in case multiple threads are waiting on the event.,Well it is a huge contribution compared to the average pocl user 😅,True,{}
pocl/pocl,https://github.com/pocl/pocl,688,2019-01-22T18:43:58Z,2019-02-12T07:16:07Z,2019-02-12T13:53:58Z,MERGED,True,113,116,2,https://github.com/isuruf,Support ICD on OSX,1,[],https://github.com/pocl/pocl/pull/688,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/688,Fixes #687,Fixes #687,True,{}
pocl/pocl,https://github.com/pocl/pocl,688,2019-01-22T18:43:58Z,2019-02-12T07:16:07Z,2019-02-12T13:53:58Z,MERGED,True,113,116,2,https://github.com/isuruf,Support ICD on OSX,1,[],https://github.com/pocl/pocl/pull/688,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/688#issuecomment-462767601,Fixes #687,Thanks,True,{}
pocl/pocl,https://github.com/pocl/pocl,693,2019-01-30T16:37:08Z,2019-02-12T06:59:17Z,2019-02-12T06:59:17Z,CLOSED,False,2228,1048,74,https://github.com/pjaaskel,LLVM 8 port on top of the cleanups branch,28,[],https://github.com/pocl/pocl/pull/693,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/693,"tier1 tests are still running locally for LLVM 7 and LLVM 8, but likely OK.","tier1 tests are still running locally for LLVM 7 and LLVM 8, but likely OK.",True,{}
pocl/pocl,https://github.com/pocl/pocl,695,2019-02-19T18:27:28Z,2019-03-11T12:40:31Z,2019-03-11T12:40:31Z,MERGED,True,26,1,3,https://github.com/isuruf,Support older GLIBC,1,[],https://github.com/pocl/pocl/pull/695,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/695,"With this change I can build on a CentOS 5 machine (Needed to build a wheel for pyopencl).
Fixes #678","With this change I can build on a CentOS 5 machine (Needed to build a wheel for pyopencl).
Fixes #678",True,{}
pocl/pocl,https://github.com/pocl/pocl,695,2019-02-19T18:27:28Z,2019-03-11T12:40:31Z,2019-03-11T12:40:31Z,MERGED,True,26,1,3,https://github.com/isuruf,Support older GLIBC,1,[],https://github.com/pocl/pocl/pull/695,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/695#issuecomment-471209807,"With this change I can build on a CentOS 5 machine (Needed to build a wheel for pyopencl).
Fixes #678","Btw, we've gone ahead using this patch and now pip install pyopencl[pocl] comes with a fully functioning pocl binary on Linux x86_64.",True,{}
pocl/pocl,https://github.com/pocl/pocl,699,2019-03-08T18:58:27Z,2019-03-13T13:38:17Z,2019-03-13T13:38:17Z,MERGED,True,3,1,1,https://github.com/justxi,Add option to disable installing of OpenCL headers,2,[],https://github.com/pocl/pocl/pull/699,https://github.com/justxi,1,https://github.com/pocl/pocl/pull/699,"Currently only installing or auto detection of OpenCL headers is possible.
With this patch it is possible to install (cmake -DINSTALL_OPENCL_HEADERS=1/YES), not install (cmake -DINSTALL_OPENCL_HEADERS=0/NO) or auto detect (cmake).
With no option set, it behaves like before.","Currently only installing or auto detection of OpenCL headers is possible.
With this patch it is possible to install (cmake -DINSTALL_OPENCL_HEADERS=1/YES), not install (cmake -DINSTALL_OPENCL_HEADERS=0/NO) or auto detect (cmake).
With no option set, it behaves like before.",True,{}
pocl/pocl,https://github.com/pocl/pocl,699,2019-03-08T18:58:27Z,2019-03-13T13:38:17Z,2019-03-13T13:38:17Z,MERGED,True,3,1,1,https://github.com/justxi,Add option to disable installing of OpenCL headers,2,[],https://github.com/pocl/pocl/pull/699,https://github.com/keryell,2,https://github.com/pocl/pocl/pull/699#issuecomment-471047576,"Currently only installing or auto detection of OpenCL headers is possible.
With this patch it is possible to install (cmake -DINSTALL_OPENCL_HEADERS=1/YES), not install (cmake -DINSTALL_OPENCL_HEADERS=0/NO) or auto detect (cmake).
With no option set, it behaves like before.",That seems like a useful feature.,True,{}
pocl/pocl,https://github.com/pocl/pocl,699,2019-03-08T18:58:27Z,2019-03-13T13:38:17Z,2019-03-13T13:38:17Z,MERGED,True,3,1,1,https://github.com/justxi,Add option to disable installing of OpenCL headers,2,[],https://github.com/pocl/pocl/pull/699,https://github.com/justxi,3,https://github.com/pocl/pocl/pull/699#issuecomment-471057015,"Currently only installing or auto detection of OpenCL headers is possible.
With this patch it is possible to install (cmake -DINSTALL_OPENCL_HEADERS=1/YES), not install (cmake -DINSTALL_OPENCL_HEADERS=0/NO) or auto detect (cmake).
With no option set, it behaves like before.","It would be very useful when writing an ebuild to install pocl on Gentoo Linux, because the OpenCL headers are installed by other packages.",True,{}
pocl/pocl,https://github.com/pocl/pocl,700,2019-03-13T16:13:09Z,2019-03-13T17:03:57Z,2019-03-13T17:03:57Z,MERGED,True,265,138,26,https://github.com/franz,pre-release fixes,8,[],https://github.com/pocl/pocl/pull/700,https://github.com/franz,1,https://github.com/pocl/pocl/pull/700,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,704,2019-03-26T08:02:01Z,2019-03-26T09:00:26Z,2019-03-26T09:00:26Z,MERGED,True,481,194,22,https://github.com/franz,pre-release fixes,10,[],https://github.com/pocl/pocl/pull/704,https://github.com/franz,1,https://github.com/pocl/pocl/pull/704,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,705,2019-03-28T08:01:58Z,2019-03-28T08:04:41Z,2019-03-28T08:04:41Z,MERGED,True,59,8,7,https://github.com/franz,start 1.3 release,3,[],https://github.com/pocl/pocl/pull/705,https://github.com/franz,1,https://github.com/pocl/pocl/pull/705,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,707,2019-04-02T13:06:02Z,2019-04-03T11:55:11Z,2019-06-13T02:19:05Z,CLOSED,False,20,6,2,https://github.com/jrprice,[CUDA] Improve printf handling,3,[],https://github.com/pocl/pocl/pull/707,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/707,"This fixes a bug that was causing kernels to crash when printing strings using %s (as seen in #702), and adds a couple of other improvements that helps when printing errors from pocl's internal tests.
NOTE: #702 is still an issue, it just now actually tells you the test failed rather than crashing","This fixes a bug that was causing kernels to crash when printing strings using %s (as seen in #702), and adds a couple of other improvements that helps when printing errors from pocl's internal tests.
NOTE: #702 is still an issue, it just now actually tells you the test failed rather than crashing",True,{}
pocl/pocl,https://github.com/pocl/pocl,707,2019-04-02T13:06:02Z,2019-04-03T11:55:11Z,2019-06-13T02:19:05Z,CLOSED,False,20,6,2,https://github.com/jrprice,[CUDA] Improve printf handling,3,[],https://github.com/pocl/pocl/pull/707,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/707#issuecomment-479394369,"This fixes a bug that was causing kernels to crash when printing strings using %s (as seen in #702), and adds a couple of other improvements that helps when printing errors from pocl's internal tests.
NOTE: #702 is still an issue, it just now actually tells you the test failed rather than crashing","Is this a regression fix, that is, should we apply it to the release branch also?",True,{}
pocl/pocl,https://github.com/pocl/pocl,707,2019-04-02T13:06:02Z,2019-04-03T11:55:11Z,2019-06-13T02:19:05Z,CLOSED,False,20,6,2,https://github.com/jrprice,[CUDA] Improve printf handling,3,[],https://github.com/pocl/pocl/pull/707,https://github.com/jrprice,3,https://github.com/pocl/pocl/pull/707#issuecomment-479415288,"This fixes a bug that was causing kernels to crash when printing strings using %s (as seen in #702), and adds a couple of other improvements that helps when printing errors from pocl's internal tests.
NOTE: #702 is still an issue, it just now actually tells you the test failed rather than crashing","It's not a regression, this issue is present in the previous releases but we were just never hitting %s formats until the LLVM regression in #702.",True,{}
pocl/pocl,https://github.com/pocl/pocl,707,2019-04-02T13:06:02Z,2019-04-03T11:55:11Z,2019-06-13T02:19:05Z,CLOSED,False,20,6,2,https://github.com/jrprice,[CUDA] Improve printf handling,3,[],https://github.com/pocl/pocl/pull/707,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/707#issuecomment-479457488,"This fixes a bug that was causing kernels to crash when printing strings using %s (as seen in #702), and adds a couple of other improvements that helps when printing errors from pocl's internal tests.
NOTE: #702 is still an issue, it just now actually tells you the test failed rather than crashing","Since we need RC2 anyways due to a regression fix, I pulled this in. Please try to test the upcoming RC2 with CUDA. We might release before the weekend.",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/708,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/708#issuecomment-479803128,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.",Is there a reason this could not be enabled by default and unconditionally?,True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/franz,3,https://github.com/pocl/pocl/pull/708#issuecomment-479851877,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.",Is it copying the Clang opencl-c.h header to pocl's installation because you're also relocating Clang ?,True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/isuruf,4,https://github.com/pocl/pocl/pull/708#issuecomment-479978015,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","Is there a reason this could not be enabled by default and unconditionally?

There was an extra dependency on dl, but I guess that's fine since pocl requires ltdl. (Btw, what was the reason to use ltdl instead of simply dl? I don't want to statically link in ltdl as it's LGPL)

Is it copying the Clang opencl-c.h header to pocl's installation because you're also relocating Clang ?

I'm building clang and llvm statically, so there's no need to have a clang when relocating. Only the clang opencl-c.h is needed.
Right now if I relocate pocl with hwloc and ltdl alongside, I only need ld and libm.so (a symlink to libm.so.6) in the user system except for glibc and other system libraries.
We can avoid the need for libm.so by removing -lm from HOST_LD_FLAGS as pocl is linked to libm.so.6 and there's no need for the shared libraries created by pocl to explicitly link to libm.so. What do you think?
I can also remove the need for ld by linking in lld as a library with a few lines. (Maybe with a LINK_WITH_LLD_LIBRARY option). What do you think?",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/franz,5,https://github.com/pocl/pocl/pull/708#issuecomment-480241119,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","Btw, what was the reason to use ltdl

The reason (i'm guessing here) probably was because pocl originally used GNU autotools. But also see last paragraph..

We can avoid the need for libm.so by removing -lm from HOST_LD_FLAGS as pocl is linked to libm.so.6

i think we can do that, as long as we ensure libpocl.so itself is linked to libm.

I can also remove the need for ld by linking in lld as a library with a few lines

I think introducing lld will not be necessary. One of the things we've agreed on with Pekka is to remove support for LLVM <= 5.0 (Ubuntu 18.04 LTS has 6.0 so we want to keep that), so the entire code that uses ""ld"" with LLVM < 5.0 will be gone, and we will simply link using Clang (unless there's good reason to do otherwise).
BTW @isuruf i have a fair amount of patches to make the pocl runtime (not the drivers) more flexible and portable, but i haven't finished cleaning them up yet. If you have some bigger PR incoming then maybe we should talk in private and/or pocl-devel to avoid duplicating work.",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/708#issuecomment-480244056,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","ltdl was chosen by @csanchezdll who started the pocl code base originally. The reason was likely, in addition to using autotools, also because of hopes of improved portability to his MacOS laptop which he liked to use back then, but cannot remember for sure.",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/isuruf,7,https://github.com/pocl/pocl/pull/708#issuecomment-480269431,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","I think introducing lld will not be necessary. One of the things we've agreed on with Pekka is to remove support for LLVM <= 5.0 (Ubuntu 18.04 LTS has 6.0 so we want to keep that), so the entire code that uses ""ld"" with LLVM < 5.0 will be gone, and we will simply link using Clang (unless there's good reason to do otherwise).

Even if the linking was done using clang, a linker is needed as clang would call a linker. My need was to avoid requiring a linker on a user's system.
For example, unpacking https://github.com/isuruf/isuruf.github.io/releases/download/v1.0/pocl-1.3-x86_64-linux-gnu.tar.gz and adding a .icd to point to it would work on any glibc based linux system newer than centos5. Only dependencies will be the following libraries which should be available.
        linux-vdso.so.1 =>  (0x00007ffe79dd9000)
        librt.so.1 => /lib64/librt.so.1 (0x00007f888c86f000)
        libdl.so.2 => /lib64/libdl.so.2 (0x00007f888c66b000)
        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f888c44f000)
        libm.so.6 => /lib64/libm.so.6 (0x00007f888c1cc000)
        libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007f888becc000)
        libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007f888bcbe000)
        libc.so.6 => /lib64/libc.so.6 (0x00007f888b965000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f88904d3000)


If you have some bigger PR incoming then maybe we should talk in private and/or pocl-devel to avoid duplicating work.

I might send a PR to avoid ltdl, but that's it.",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/isuruf,8,https://github.com/pocl/pocl/pull/708#issuecomment-482646552,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","@pjaaskel, @franz, let me know what you think about this and I'll be happy to make any changes.",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/franz,9,https://github.com/pocl/pocl/pull/708#issuecomment-482802808,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","Even if the linking was done using clang, a linker is needed as clang would call a linker

Hmm ok, i haven't looked at pocl_invoke_clang() for a while. But it seems to me that instead of having two ways to invoke the linker, we should aim for a single one. @pjaaskel what do you think

I might send a PR to avoid ltdl, but that's it.

There's no need for that. But it'd be useful if you could add a Travis-CI config for this feature.",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/pjaaskel,10,https://github.com/pocl/pocl/pull/708#issuecomment-482847325,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","But it seems to me that instead of having two ways to invoke the linker, we should aim for a single one.

Yes, I think the clang Driver/Toolchain API could be delegated to when invoking the linker. The toolchain information is there, why not use it?
Only thing that I have to ask/figure about this PR is that is it necessary to make this feature optional? Does it break a use case if it was always on?",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/isuruf,11,https://github.com/pocl/pocl/pull/708#issuecomment-483939153,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","Yes, I think the clang Driver/Toolchain API could be delegated to when invoking the linker. The toolchain information is there, why not use it?

There might not be a linker in a user's system. In that case, I'd like to build pocl with lld linked in, so that the user doesn't need to install a linker.

Only thing that I have to ask/figure about this PR is that is it necessary to make this feature optional? Does it break a use case if it was always on?

No, I'll remove the cmake option.",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/pjaaskel,12,https://github.com/pocl/pocl/pull/708#issuecomment-487849663,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.",Please add an entry to CHANGES that briefly describes this useful feature.,True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/pjaaskel,13,https://github.com/pocl/pocl/pull/708#issuecomment-488024206,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","This now looks good to me.
BTW, it seems you got OSX working. Could you update README.OSX, or even better, add the updated information to the user manual?",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/isuruf,14,https://github.com/pocl/pocl/pull/708#issuecomment-488029203,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","add the updated information to the user manual?

Which file should they go into?
Btw, I've got a docker file that builds pocl and dependencies on CentOS 5 x86_64. If you are interested I can put it in this repo so that when you release a new version, you can provide a binary archive that any user (with a GLIBC 2.5 or newer) can use just by unpacking and creating a icd file to point to it.",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/pjaaskel,15,https://github.com/pocl/pocl/pull/708#issuecomment-488221303,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.","Which file should they go into?

I think next to the android usage in using.rst is a good spot.

Btw, I've got a docker file that builds pocl and dependencies on CentOS 5 x86_64. If you are interested I can put it in this repo so that when you release a new version, you can provide a binary archive that any user (with a GLIBC 2.5 or newer) can use just by unpacking and creating a icd file to point to it.

This should be useful to the community. Also please add documentation for that then.
Thanks for your contributions so far!",True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/isuruf,16,https://github.com/pocl/pocl/pull/708#issuecomment-488446167,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.",I'll send separate PRs for the two items mentioned above.,True,{}
pocl/pocl,https://github.com/pocl/pocl,708,2019-04-04T02:13:35Z,2019-05-15T14:15:18Z,2019-05-15T14:15:18Z,CLOSED,False,50,9,8,https://github.com/isuruf,Enable pocl relocation,10,[],https://github.com/pocl/pocl/pull/708,https://github.com/franz,17,https://github.com/pocl/pocl/pull/708#issuecomment-492673145,"With ENABLE_POCL_RELOCATION option, no hard coded paths are used in libpocl.so
making it possible to relocate pocl.",I've added a few fixes on top of this PR in #732.,True,{'THUMBS_UP': ['https://github.com/isuruf']}
pocl/pocl,https://github.com/pocl/pocl,710,2019-04-10T07:35:51Z,2019-05-08T13:16:15Z,2019-05-08T13:16:16Z,MERGED,True,35,35,7,https://github.com/moeryomenko,fix name of Khronos,1,[],https://github.com/pocl/pocl/pull/710,https://github.com/moeryomenko,1,https://github.com/pocl/pocl/pull/710,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,710,2019-04-10T07:35:51Z,2019-05-08T13:16:15Z,2019-05-08T13:16:16Z,MERGED,True,35,35,7,https://github.com/moeryomenko,fix name of Khronos,1,[],https://github.com/pocl/pocl/pull/710,https://github.com/moeryomenko,2,https://github.com/pocl/pocl/pull/710#issuecomment-481983845,,"@keryell
Changed ""Khronos"" to ""Khronos Group""",True,{}
pocl/pocl,https://github.com/pocl/pocl,710,2019-04-10T07:35:51Z,2019-05-08T13:16:15Z,2019-05-08T13:16:16Z,MERGED,True,35,35,7,https://github.com/moeryomenko,fix name of Khronos,1,[],https://github.com/pocl/pocl/pull/710,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/710#issuecomment-488015332,,"Thanks. Can you limit the changes to the mentioned fix? Now it includes also random white space fixes, which we prefer to commit gradually only while editing the code around the spots.",True,{}
pocl/pocl,https://github.com/pocl/pocl,713,2019-04-11T09:30:15Z,2019-05-16T07:17:28Z,2019-05-16T07:17:28Z,MERGED,True,5,5,1,None,fixes RETURN_ERROR_ON ((pocl_binary_deserialize_kernel_from_buffer an…,1,[],https://github.com/pocl/pocl/pull/713,None,1,https://github.com/pocl/pocl/pull/713,…d j index being reused in pocl_binary_get_kernels_metadata,…d j index being reused in pocl_binary_get_kernels_metadata,True,{}
pocl/pocl,https://github.com/pocl/pocl,713,2019-04-11T09:30:15Z,2019-05-16T07:17:28Z,2019-05-16T07:17:28Z,MERGED,True,5,5,1,None,fixes RETURN_ERROR_ON ((pocl_binary_deserialize_kernel_from_buffer an…,1,[],https://github.com/pocl/pocl/pull/713,None,2,https://github.com/pocl/pocl/pull/713#issuecomment-482041133,…d j index being reused in pocl_binary_get_kernels_metadata,fixes #712,True,{}
pocl/pocl,https://github.com/pocl/pocl,713,2019-04-11T09:30:15Z,2019-05-16T07:17:28Z,2019-05-16T07:17:28Z,MERGED,True,5,5,1,None,fixes RETURN_ERROR_ON ((pocl_binary_deserialize_kernel_from_buffer an…,1,[],https://github.com/pocl/pocl/pull/713,https://github.com/franz,3,https://github.com/pocl/pocl/pull/713#issuecomment-491591705,…d j index being reused in pocl_binary_get_kernels_metadata,LGTM,True,{}
pocl/pocl,https://github.com/pocl/pocl,717,2019-05-01T10:07:40Z,2019-05-15T11:40:24Z,2019-05-15T11:40:24Z,CLOSED,False,283,139,20,https://github.com/pjaaskel,Create global offset 0 specialized WG functions.,5,[],https://github.com/pocl/pocl/pull/717,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/717,"It seems to be rare to use the global offset in kernel commands, which means useless address computation which complicates AA and even incures a little runtime overhead.
This creates a special version of the WG which assumes the global offset is 0 and uses that in case that's the case.
This needs to be pulled in before the following PRs which will be done on top of it.","It seems to be rare to use the global offset in kernel commands, which means useless address computation which complicates AA and even incures a little runtime overhead.
This creates a special version of the WG which assumes the global offset is 0 and uses that in case that's the case.
This needs to be pulled in before the following PRs which will be done on top of it.",True,{}
pocl/pocl,https://github.com/pocl/pocl,718,2019-05-01T11:35:23Z,2019-05-16T07:42:00Z,2019-05-16T07:42:00Z,MERGED,True,296,271,8,https://github.com/pjaaskel,HSA (native ISA) updates,7,[],https://github.com/pocl/pocl/pull/718,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/718,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,719,2019-05-01T12:13:47Z,2019-05-16T10:15:32Z,2019-05-16T10:15:32Z,MERGED,True,322,244,23,https://github.com/pjaaskel,Misc. updates,14,[],https://github.com/pocl/pocl/pull/719,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/719,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,720,2019-05-01T22:00:37Z,2019-09-05T15:03:21Z,2020-05-24T04:48:29Z,CLOSED,False,42,42,11,https://github.com/isuruf,Use libdl directly,4,[],https://github.com/pocl/pocl/pull/720,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/720,Makes pocl have only MIT/BSD/UIUC licensed dependencies. (ltdl is LGPL),Makes pocl have only MIT/BSD/UIUC licensed dependencies. (ltdl is LGPL),True,{}
pocl/pocl,https://github.com/pocl/pocl,720,2019-05-01T22:00:37Z,2019-09-05T15:03:21Z,2020-05-24T04:48:29Z,CLOSED,False,42,42,11,https://github.com/isuruf,Use libdl directly,4,[],https://github.com/pocl/pocl/pull/720,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/720#issuecomment-488573560,Makes pocl have only MIT/BSD/UIUC licensed dependencies. (ltdl is LGPL),"Looks good, but can you again add an Internal Changes entry to CHANGES?",True,{}
pocl/pocl,https://github.com/pocl/pocl,720,2019-05-01T22:00:37Z,2019-09-05T15:03:21Z,2020-05-24T04:48:29Z,CLOSED,False,42,42,11,https://github.com/isuruf,Use libdl directly,4,[],https://github.com/pocl/pocl/pull/720,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/720#issuecomment-492990413,Makes pocl have only MIT/BSD/UIUC licensed dependencies. (ltdl is LGPL),@franz is going to merge this in with his other stuff.,True,{}
pocl/pocl,https://github.com/pocl/pocl,720,2019-05-01T22:00:37Z,2019-09-05T15:03:21Z,2020-05-24T04:48:29Z,CLOSED,False,42,42,11,https://github.com/isuruf,Use libdl directly,4,[],https://github.com/pocl/pocl/pull/720,https://github.com/franz,4,https://github.com/pocl/pocl/pull/720#issuecomment-528413934,Makes pocl have only MIT/BSD/UIUC licensed dependencies. (ltdl is LGPL),Merged into master,True,{}
pocl/pocl,https://github.com/pocl/pocl,721,2019-05-03T02:07:57Z,2019-05-08T13:56:11Z,2019-05-08T13:56:11Z,MERGED,True,7,80,2,https://github.com/isuruf,Add a note about pocl on OSX,2,[],https://github.com/pocl/pocl/pull/721,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/721,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,721,2019-05-03T02:07:57Z,2019-05-08T13:56:11Z,2019-05-08T13:56:11Z,MERGED,True,7,80,2,https://github.com/isuruf,Add a note about pocl on OSX,2,[],https://github.com/pocl/pocl/pull/721,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/721#issuecomment-489135410,,"Thanks. If MacOSX now ""just works"" as simply as you write, can you also remove the obsolete README.OSX?",True,{}
pocl/pocl,https://github.com/pocl/pocl,721,2019-05-03T02:07:57Z,2019-05-08T13:56:11Z,2019-05-08T13:56:11Z,MERGED,True,7,80,2,https://github.com/isuruf,Add a note about pocl on OSX,2,[],https://github.com/pocl/pocl/pull/721,https://github.com/isuruf,3,https://github.com/pocl/pocl/pull/721#issuecomment-489137298,,"Yes, it just works. You have to install the dependencies using a package manager like HomeBrew or Conda, but instructions are exactly the same as Linux.",True,{}
pocl/pocl,https://github.com/pocl/pocl,723,2019-05-07T08:44:52Z,2019-05-16T09:36:46Z,2019-05-16T09:36:46Z,MERGED,True,17168,12,395,https://github.com/pjaaskel,Bring in ROCm-Device-Libs' ocml as an option to implement kernel builtins,6,[],https://github.com/pocl/pocl/pull/723,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/723,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,723,2019-05-07T08:44:52Z,2019-05-16T09:36:46Z,2019-05-16T09:36:46Z,MERGED,True,17168,12,395,https://github.com/pjaaskel,Bring in ROCm-Device-Libs' ocml as an option to implement kernel builtins,6,[],https://github.com/pocl/pocl/pull/723,https://github.com/franz,2,https://github.com/pocl/pocl/pull/723#issuecomment-491830293,,"At a quick look, LGTM but the github link added into CHANGES is broken.",True,{}
pocl/pocl,https://github.com/pocl/pocl,724,2019-05-09T13:18:31Z,2019-05-16T09:02:41Z,2019-05-16T09:02:41Z,CLOSED,False,14,14,6,https://github.com/franz,Test PR,9,[],https://github.com/pocl/pocl/pull/724,https://github.com/franz,1,https://github.com/pocl/pocl/pull/724,Do not pull,Do not pull,True,{}
pocl/pocl,https://github.com/pocl/pocl,726,2019-05-11T19:33:51Z,2019-05-16T10:49:54Z,2019-05-16T10:49:54Z,MERGED,True,3,1,1,https://github.com/jrprice,[CUDA] Map llvm.powi.* to __nv_powi*,1,[],https://github.com/pocl/pocl/pull/726,https://github.com/jrprice,1,https://github.com/pocl/pocl/pull/726,Fixes #722.,Fixes #722.,True,{}
pocl/pocl,https://github.com/pocl/pocl,731,2019-05-15T11:39:33Z,2019-05-15T13:52:11Z,2019-05-15T13:52:11Z,CLOSED,False,332,299,22,https://github.com/pjaaskel,Create global offset 0 specialized WG functions (replaces #717),3,[],https://github.com/pocl/pocl/pull/731,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/731,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,732,2019-05-15T14:13:52Z,2019-05-15T18:24:41Z,2019-05-15T21:37:47Z,MERGED,True,71,10,9,https://github.com/franz,Relocation,3,[],https://github.com/pocl/pocl/pull/732,https://github.com/franz,1,https://github.com/pocl/pocl/pull/732,"This replaces PR #708. Squashed commits from the original PR, then added a few fixes on top.","This replaces PR #708. Squashed commits from the original PR, then added a few fixes on top.",True,{}
pocl/pocl,https://github.com/pocl/pocl,732,2019-05-15T14:13:52Z,2019-05-15T18:24:41Z,2019-05-15T21:37:47Z,MERGED,True,71,10,9,https://github.com/franz,Relocation,3,[],https://github.com/pocl/pocl/pull/732,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/732#issuecomment-492728218,"This replaces PR #708. Squashed commits from the original PR, then added a few fixes on top.",Thanks for working on this.,True,{}
pocl/pocl,https://github.com/pocl/pocl,734,2019-05-16T14:56:33Z,2019-05-18T10:47:26Z,2019-05-18T10:47:26Z,MERGED,True,469,278,13,https://github.com/pjaaskel,Device-side allocation of local memory to stack,8,[],https://github.com/pocl/pocl/pull/734,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/734,"Allows devices to set ""device_alloca_locals"" to 1, which causes then Workgroup.cc to generate code that allocates local memory from stack (using the alloca LLVM IR instruction) instead of expecting it to be preallocated by the host launcher. In that case the hidden local args contain the size of the local buffer to allocate instead of the buffer pointer.","Allows devices to set ""device_alloca_locals"" to 1, which causes then Workgroup.cc to generate code that allocates local memory from stack (using the alloca LLVM IR instruction) instead of expecting it to be preallocated by the host launcher. In that case the hidden local args contain the size of the local buffer to allocate instead of the buffer pointer.",True,{}
pocl/pocl,https://github.com/pocl/pocl,735,2019-05-20T11:24:22Z,2019-05-22T15:27:45Z,2019-05-22T15:27:45Z,MERGED,True,1,0,1,https://github.com/mr-c,"fix formatting of ""Some additional notes"" list",1,[],https://github.com/pocl/pocl/pull/735,https://github.com/mr-c,1,https://github.com/pocl/pocl/pull/735,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,736,2019-05-22T15:29:40Z,2019-05-22T16:59:45Z,2019-05-22T16:59:45Z,MERGED,True,230,226,25,https://github.com/pjaaskel,Refactorings,6,[],https://github.com/pocl/pocl/pull/736,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/736,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,737,2019-05-22T17:00:13Z,2019-05-27T13:39:26Z,2019-05-27T13:39:27Z,MERGED,True,20,33,8,https://github.com/franz,Minor bugfixes & cleanups,6,[],https://github.com/pocl/pocl/pull/737,https://github.com/franz,1,https://github.com/pocl/pocl/pull/737,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,737,2019-05-22T17:00:13Z,2019-05-27T13:39:26Z,2019-05-27T13:39:27Z,MERGED,True,20,33,8,https://github.com/franz,Minor bugfixes & cleanups,6,[],https://github.com/pocl/pocl/pull/737,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/737#issuecomment-495876476,,Can you add at least the minimum LLVM version bump to CHANGES?,True,{}
pocl/pocl,https://github.com/pocl/pocl,737,2019-05-22T17:00:13Z,2019-05-27T13:39:26Z,2019-05-27T13:39:27Z,MERGED,True,20,33,8,https://github.com/franz,Minor bugfixes & cleanups,6,[],https://github.com/pocl/pocl/pull/737,https://github.com/franz,3,https://github.com/pocl/pocl/pull/737#issuecomment-496126898,,Added,True,{}
pocl/pocl,https://github.com/pocl/pocl,738,2019-05-25T08:22:27Z,2019-05-28T06:14:50Z,2019-05-28T06:14:50Z,MERGED,True,812,570,27,https://github.com/pjaaskel,WG func specialization work,8,[],https://github.com/pocl/pocl/pull/738,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/738,"A bit of WG function specialization work here (this should be the last PR for a while):

Internal refactoring: make the specialization controllable with a function parameter + explicit run command flags.
Create specialized work-group functions for small (defined by a device  driver specific limit) grid dimensions.
Add Range Metadata to various ID queries etc. to improve vectorizing index computation to smaller lane widths and other optimizations.","A bit of WG function specialization work here (this should be the last PR for a while):

Internal refactoring: make the specialization controllable with a function parameter + explicit run command flags.
Create specialized work-group functions for small (defined by a device  driver specific limit) grid dimensions.
Add Range Metadata to various ID queries etc. to improve vectorizing index computation to smaller lane widths and other optimizations.",True,{}
pocl/pocl,https://github.com/pocl/pocl,740,2019-05-29T13:02:22Z,2019-05-30T10:23:44Z,2019-05-30T10:23:44Z,MERGED,True,6076,5730,40,https://github.com/franz,Some portability updates & bunch of random fixes,21,[],https://github.com/pocl/pocl/pull/740,https://github.com/franz,1,https://github.com/pocl/pocl/pull/740,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,742,2019-06-03T10:57:06Z,2019-07-17T07:58:12Z,2019-07-17T07:58:12Z,MERGED,True,401,20958,91,https://github.com/franz,Remove support for old LLVM versions,14,[],https://github.com/pocl/pocl/pull/742,https://github.com/franz,1,https://github.com/pocl/pocl/pull/742,We've already disabled them in CMake but this removes also the code.,We've already disabled them in CMake but this removes also the code.,True,{}
pocl/pocl,https://github.com/pocl/pocl,742,2019-06-03T10:57:06Z,2019-07-17T07:58:12Z,2019-07-17T07:58:12Z,MERGED,True,401,20958,91,https://github.com/franz,Remove support for old LLVM versions,14,[],https://github.com/pocl/pocl/pull/742,https://github.com/franz,2,https://github.com/pocl/pocl/pull/742#issuecomment-511461266,We've already disabled them in CMake but this removes also the code.,"Rebased on master, fixes applied, removed POCL_IMPLICIT_FINISH, also removed POCL_USE_FAKE_ADDR_SPACE_IDs and TargetAddressSpaces.cc.",True,{}
pocl/pocl,https://github.com/pocl/pocl,743,2019-06-08T00:55:50Z,2019-07-11T11:18:36Z,2019-07-11T11:18:36Z,MERGED,True,1,1,1,https://github.com/agozillon,pocl_buffer_boundcheck_3d off by 1,2,[],https://github.com/pocl/pocl/pull/743,https://github.com/agozillon,1,https://github.com/pocl/pocl/pull/743,"So i believe this is a small bug, I could be wrong though I think negating region[0] by 1 was always yielding a byte size 1 byte smaller than intended. For example a 2D region where we wish to specify a buffer of 1600 bytes would yield 1599 (sorry for the bad pseudo-code):
int origin[3] = {0, 0, 0}
int region[3] = {80, 20, 1}; // z always has to be 1 for spec conformance
int rp = region[0]; // 80
int sp = region[1] * rp; // 20 * 80 = 1600 

Old formula:
origin[0] + region[0]-1 + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 - 1 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1599
Updated formula:
origin[0] + region[0] + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1600
I think the general idea was to offset the fact that the region values always have to be a minimum of 1 in the OpenCL (at least 1.2) specification and it throws off the calculation a little. So just negate by 1. I don't think region[0] has to be negated by 1 though as it's not multiplied by a value in this case that's always set (and by default if not specified by a user), but I could be missing the bigger picture and be wrong in this case (sorry if I am).","So i believe this is a small bug, I could be wrong though I think negating region[0] by 1 was always yielding a byte size 1 byte smaller than intended. For example a 2D region where we wish to specify a buffer of 1600 bytes would yield 1599 (sorry for the bad pseudo-code):
int origin[3] = {0, 0, 0}
int region[3] = {80, 20, 1}; // z always has to be 1 for spec conformance
int rp = region[0]; // 80
int sp = region[1] * rp; // 20 * 80 = 1600 

Old formula:
origin[0] + region[0]-1 + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 - 1 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1599
Updated formula:
origin[0] + region[0] + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1600
I think the general idea was to offset the fact that the region values always have to be a minimum of 1 in the OpenCL (at least 1.2) specification and it throws off the calculation a little. So just negate by 1. I don't think region[0] has to be negated by 1 though as it's not multiplied by a value in this case that's always set (and by default if not specified by a user), but I could be missing the bigger picture and be wrong in this case (sorry if I am).",True,{}
pocl/pocl,https://github.com/pocl/pocl,743,2019-06-08T00:55:50Z,2019-07-11T11:18:36Z,2019-07-11T11:18:36Z,MERGED,True,1,1,1,https://github.com/agozillon,pocl_buffer_boundcheck_3d off by 1,2,[],https://github.com/pocl/pocl/pull/743,https://github.com/keryell,2,https://github.com/pocl/pocl/pull/743#issuecomment-500610690,"So i believe this is a small bug, I could be wrong though I think negating region[0] by 1 was always yielding a byte size 1 byte smaller than intended. For example a 2D region where we wish to specify a buffer of 1600 bytes would yield 1599 (sorry for the bad pseudo-code):
int origin[3] = {0, 0, 0}
int region[3] = {80, 20, 1}; // z always has to be 1 for spec conformance
int rp = region[0]; // 80
int sp = region[1] * rp; // 20 * 80 = 1600 

Old formula:
origin[0] + region[0]-1 + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 - 1 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1599
Updated formula:
origin[0] + region[0] + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1600
I think the general idea was to offset the fact that the region values always have to be a minimum of 1 in the OpenCL (at least 1.2) specification and it throws off the calculation a little. So just negate by 1. I don't think region[0] has to be negated by 1 though as it's not multiplied by a value in this case that's always set (and by default if not specified by a user), but I could be missing the bigger picture and be wrong in this case (sorry if I am).","After thinking to it, I have the feeling it would be clearer to compute it as
size_t byte_offset_last = origin[0] + region[0]-1 +
       rp * (origin[1] + region[1]-1) +
       sp * (origin[2] + region[2]-1);
size_t byte_offset_end = byte_offset_last + 1;

to avoid thinking about ""why is there a symmetry breakage for dimension 0?""... :-)",True,{}
pocl/pocl,https://github.com/pocl/pocl,743,2019-06-08T00:55:50Z,2019-07-11T11:18:36Z,2019-07-11T11:18:36Z,MERGED,True,1,1,1,https://github.com/agozillon,pocl_buffer_boundcheck_3d off by 1,2,[],https://github.com/pocl/pocl/pull/743,https://github.com/keryell,3,https://github.com/pocl/pocl/pull/743#issuecomment-500619271,"So i believe this is a small bug, I could be wrong though I think negating region[0] by 1 was always yielding a byte size 1 byte smaller than intended. For example a 2D region where we wish to specify a buffer of 1600 bytes would yield 1599 (sorry for the bad pseudo-code):
int origin[3] = {0, 0, 0}
int region[3] = {80, 20, 1}; // z always has to be 1 for spec conformance
int rp = region[0]; // 80
int sp = region[1] * rp; // 20 * 80 = 1600 

Old formula:
origin[0] + region[0]-1 + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 - 1 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1599
Updated formula:
origin[0] + region[0] + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1600
I think the general idea was to offset the fact that the region values always have to be a minimum of 1 in the OpenCL (at least 1.2) specification and it throws off the calculation a little. So just negate by 1. I don't think region[0] has to be negated by 1 though as it's not multiplied by a value in this case that's always set (and by default if not specified by a user), but I could be missing the bigger picture and be wrong in this case (sorry if I am).","Or even simpler by skipping size_t byte_offset_end = byte_offset_last + 1; and updating:
POCL_RETURN_ERROR_ON((byte_offset_last >= buffer_size), CL_INVALID_VALUE,
""%sorigin+region is outside the %sbuffer"", prefix, prefix);

with a >= instead.",True,{}
pocl/pocl,https://github.com/pocl/pocl,743,2019-06-08T00:55:50Z,2019-07-11T11:18:36Z,2019-07-11T11:18:36Z,MERGED,True,1,1,1,https://github.com/agozillon,pocl_buffer_boundcheck_3d off by 1,2,[],https://github.com/pocl/pocl/pull/743,https://github.com/agozillon,4,https://github.com/pocl/pocl/pull/743#issuecomment-500637052,"So i believe this is a small bug, I could be wrong though I think negating region[0] by 1 was always yielding a byte size 1 byte smaller than intended. For example a 2D region where we wish to specify a buffer of 1600 bytes would yield 1599 (sorry for the bad pseudo-code):
int origin[3] = {0, 0, 0}
int region[3] = {80, 20, 1}; // z always has to be 1 for spec conformance
int rp = region[0]; // 80
int sp = region[1] * rp; // 20 * 80 = 1600 

Old formula:
origin[0] + region[0]-1 + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 - 1 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1599
Updated formula:
origin[0] + region[0] + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1600
I think the general idea was to offset the fact that the region values always have to be a minimum of 1 in the OpenCL (at least 1.2) specification and it throws off the calculation a little. So just negate by 1. I don't think region[0] has to be negated by 1 though as it's not multiplied by a value in this case that's always set (and by default if not specified by a user), but I could be missing the bigger picture and be wrong in this case (sorry if I am).","Updated, I'm fine with any of the above changes so can modify it again if desired by the final reviewer
Edit: Force pushed to fix misspelled commit message",True,{}
pocl/pocl,https://github.com/pocl/pocl,743,2019-06-08T00:55:50Z,2019-07-11T11:18:36Z,2019-07-11T11:18:36Z,MERGED,True,1,1,1,https://github.com/agozillon,pocl_buffer_boundcheck_3d off by 1,2,[],https://github.com/pocl/pocl/pull/743,https://github.com/keryell,5,https://github.com/pocl/pocl/pull/743#issuecomment-509787952,"So i believe this is a small bug, I could be wrong though I think negating region[0] by 1 was always yielding a byte size 1 byte smaller than intended. For example a 2D region where we wish to specify a buffer of 1600 bytes would yield 1599 (sorry for the bad pseudo-code):
int origin[3] = {0, 0, 0}
int region[3] = {80, 20, 1}; // z always has to be 1 for spec conformance
int rp = region[0]; // 80
int sp = region[1] * rp; // 20 * 80 = 1600 

Old formula:
origin[0] + region[0]-1 + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 - 1 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1599
Updated formula:
origin[0] + region[0] + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1600
I think the general idea was to offset the fact that the region values always have to be a minimum of 1 in the OpenCL (at least 1.2) specification and it throws off the calculation a little. So just negate by 1. I don't think region[0] has to be negated by 1 though as it's not multiplied by a value in this case that's always set (and by default if not specified by a user), but I could be missing the bigger picture and be wrong in this case (sorry if I am).",@pjaaskel anything we need to do to move forward?,True,{}
pocl/pocl,https://github.com/pocl/pocl,743,2019-06-08T00:55:50Z,2019-07-11T11:18:36Z,2019-07-11T11:18:36Z,MERGED,True,1,1,1,https://github.com/agozillon,pocl_buffer_boundcheck_3d off by 1,2,[],https://github.com/pocl/pocl/pull/743,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/743#issuecomment-509913023,"So i believe this is a small bug, I could be wrong though I think negating region[0] by 1 was always yielding a byte size 1 byte smaller than intended. For example a 2D region where we wish to specify a buffer of 1600 bytes would yield 1599 (sorry for the bad pseudo-code):
int origin[3] = {0, 0, 0}
int region[3] = {80, 20, 1}; // z always has to be 1 for spec conformance
int rp = region[0]; // 80
int sp = region[1] * rp; // 20 * 80 = 1600 

Old formula:
origin[0] + region[0]-1 + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 - 1 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1599
Updated formula:
origin[0] + region[0] + rp * (origin[1] + region[1]-1) + sp * (origin[2] + region[2]-1);
0 + 80 + 80 * (0 + 20 - 1) + 1600 * (0 + 1 - 1) = 1600
I think the general idea was to offset the fact that the region values always have to be a minimum of 1 in the OpenCL (at least 1.2) specification and it throws off the calculation a little. So just negate by 1. I don't think region[0] has to be negated by 1 though as it's not multiplied by a value in this case that's always set (and by default if not specified by a user), but I could be missing the bigger picture and be wrong in this case (sorry if I am).",@keryell I'll pull this in after testing locally and if @franz nods.,True,{}
pocl/pocl,https://github.com/pocl/pocl,744,2019-07-09T14:58:18Z,2019-07-10T06:16:20Z,2019-07-10T06:16:20Z,CLOSED,False,11218,83,76,https://github.com/kattervo,"Add accel, a fixed function accelerator driver",1,[],https://github.com/pocl/pocl/pull/744,https://github.com/kattervo,1,https://github.com/pocl/pocl/pull/744,"The device driver for (primarily FPGA-based) fixed-function accelerators with a standard interface
Builtin kernel support
Instruction for use, and an example program + accelerator for Xilinx FPGA SoCs
Some compiler warning appeasement for a quieter build","The device driver for (primarily FPGA-based) fixed-function accelerators with a standard interface
Builtin kernel support
Instruction for use, and an example program + accelerator for Xilinx FPGA SoCs
Some compiler warning appeasement for a quieter build",True,{}
pocl/pocl,https://github.com/pocl/pocl,744,2019-07-09T14:58:18Z,2019-07-10T06:16:20Z,2019-07-10T06:16:20Z,CLOSED,False,11218,83,76,https://github.com/kattervo,"Add accel, a fixed function accelerator driver",1,[],https://github.com/pocl/pocl/pull/744,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/744#issuecomment-509924388,"The device driver for (primarily FPGA-based) fixed-function accelerators with a standard interface
Builtin kernel support
Instruction for use, and an example program + accelerator for Xilinx FPGA SoCs
Some compiler warning appeasement for a quieter build",Merged after editing the commit a bit to resolve @keryell's smaller comment. We'll improve the documentation in later commits.,True,{}
pocl/pocl,https://github.com/pocl/pocl,745,2019-07-10T14:34:16Z,2019-07-10T15:57:24Z,2019-07-11T00:41:49Z,MERGED,True,16,5,1,https://github.com/kattervo,Update accel documentation,1,[],https://github.com/pocl/pocl/pull/745,https://github.com/kattervo,1,https://github.com/pocl/pocl/pull/745,"Clarify the intended use of the example RTL, as well as note the possibility of sudo affecting environment variables.","Clarify the intended use of the example RTL, as well as note the possibility of sudo affecting environment variables.",True,{}
pocl/pocl,https://github.com/pocl/pocl,746,2019-07-19T09:14:44Z,2019-07-22T13:23:43Z,2019-07-22T13:23:44Z,MERGED,True,4900,855,42,https://github.com/franz,SPIR and SPIR-V improvements,14,[],https://github.com/pocl/pocl/pull/746,https://github.com/franz,1,https://github.com/pocl/pocl/pull/746,plus a few minor fixes,plus a few minor fixes,True,{}
pocl/pocl,https://github.com/pocl/pocl,748,2019-07-29T15:04:52Z,2019-08-08T12:00:45Z,2019-09-20T17:58:47Z,MERGED,True,10,1,1,https://github.com/StefanBruens,Determine CLANG resources dir at runtime,1,[],https://github.com/pocl/pocl/pull/748,https://github.com/StefanBruens,1,https://github.com/pocl/pocl/pull/748,"When the resources dir is determined at compile time, it also includes
the full version (e.g. /usr/lib64/clang/8.0.0/include/opencl-c.h). If
clang gets a minor version update later (e.g. from 8.0.0 to 8.0.1), pocl
will still add the obsolete path for the header lookup.
Determine the path at runtime instead. LLVM 9.0 adds a static method
llvm::driver::Driver::GetResourcesPath(...) which can be used, LLVM 8.0
and older have to use a dummy Driver instance.
Fixes #747.
This targets the release_1_3 branch, as thats the one I have tested. The
code around ClangResourcesDir has changed a little bit, but a forward
port should be trivial.","When the resources dir is determined at compile time, it also includes
the full version (e.g. /usr/lib64/clang/8.0.0/include/opencl-c.h). If
clang gets a minor version update later (e.g. from 8.0.0 to 8.0.1), pocl
will still add the obsolete path for the header lookup.
Determine the path at runtime instead. LLVM 9.0 adds a static method
llvm::driver::Driver::GetResourcesPath(...) which can be used, LLVM 8.0
and older have to use a dummy Driver instance.
Fixes #747.
This targets the release_1_3 branch, as thats the one I have tested. The
code around ClangResourcesDir has changed a little bit, but a forward
port should be trivial.",True,{}
pocl/pocl,https://github.com/pocl/pocl,749,2019-07-30T12:22:31Z,2019-08-05T12:57:52Z,2019-08-05T12:57:52Z,MERGED,True,58,11,6,https://github.com/franz,LLVM 9 support,2,[],https://github.com/pocl/pocl/pull/749,https://github.com/franz,1,https://github.com/pocl/pocl/pull/749,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,750,2019-08-01T10:42:28Z,2019-08-05T14:24:34Z,2019-08-07T14:45:04Z,MERGED,True,3380,789,49,https://github.com/franz,Various fixes & code refactoring,12,[],https://github.com/pocl/pocl/pull/750,https://github.com/franz,1,https://github.com/pocl/pocl/pull/750,After LLVM 9 PR,After LLVM 9 PR,True,{}
pocl/pocl,https://github.com/pocl/pocl,751,2019-08-07T14:47:51Z,2019-08-07T15:52:19Z,2019-08-07T15:52:19Z,MERGED,True,58,567,26,https://github.com/franz,Few minor fixes,5,[],https://github.com/pocl/pocl/pull/751,https://github.com/franz,1,https://github.com/pocl/pocl/pull/751,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,755,2019-08-19T12:43:38Z,2019-08-20T06:05:42Z,2019-08-20T06:05:43Z,MERGED,True,16,10,6,https://github.com/franz,pre-release fixes,4,[],https://github.com/pocl/pocl/pull/755,https://github.com/franz,1,https://github.com/pocl/pocl/pull/755,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,756,2019-08-23T12:11:50Z,2019-08-24T06:45:39Z,2019-08-24T06:45:39Z,MERGED,True,712,754,18,https://github.com/franz,Update & restructure the documentation,1,[],https://github.com/pocl/pocl/pull/756,https://github.com/franz,1,https://github.com/pocl/pocl/pull/756,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,759,2019-09-04T11:39:40Z,2019-09-05T13:54:28Z,2020-02-09T07:44:14Z,MERGED,True,3061,1132,16,https://github.com/alexbatashev,Upstream OpenCL headers to latest Khronos rev.,1,[],https://github.com/pocl/pocl/pull/759,https://github.com/alexbatashev,1,https://github.com/pocl/pocl/pull/759,"Update header files to match Khronos GitHub revision 0d5f18c6e7196863bc1557a693f1509adfcee056
Fixes #758","Update header files to match Khronos GitHub revision 0d5f18c6e7196863bc1557a693f1509adfcee056
Fixes #758",True,{}
pocl/pocl,https://github.com/pocl/pocl,759,2019-09-04T11:39:40Z,2019-09-05T13:54:28Z,2020-02-09T07:44:14Z,MERGED,True,3061,1132,16,https://github.com/alexbatashev,Upstream OpenCL headers to latest Khronos rev.,1,[],https://github.com/pocl/pocl/pull/759,https://github.com/franz,2,https://github.com/pocl/pocl/pull/759#issuecomment-528333116,"Update header files to match Khronos GitHub revision 0d5f18c6e7196863bc1557a693f1509adfcee056
Fixes #758",LGTM,True,{}
pocl/pocl,https://github.com/pocl/pocl,760,2019-09-05T13:40:20Z,2019-09-05T14:53:39Z,2019-09-05T14:53:39Z,MERGED,True,3226,1202,33,https://github.com/franz,1.4 release preparation,10,[],https://github.com/pocl/pocl/pull/760,https://github.com/franz,1,https://github.com/pocl/pocl/pull/760,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,761,2019-09-08T05:55:58Z,2019-09-09T16:37:30Z,2019-09-09T16:37:30Z,CLOSED,False,4,4,1,https://github.com/isuruf,Check for dladdr instead of dlinfo,1,[],https://github.com/pocl/pocl/pull/761,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/761,"In OSX, there's no dlinfo and only dladdr. For ENABLE_RELOCATION, only dladdr is needed.","In OSX, there's no dlinfo and only dladdr. For ENABLE_RELOCATION, only dladdr is needed.",True,{}
pocl/pocl,https://github.com/pocl/pocl,761,2019-09-08T05:55:58Z,2019-09-09T16:37:30Z,2019-09-09T16:37:30Z,CLOSED,False,4,4,1,https://github.com/isuruf,Check for dladdr instead of dlinfo,1,[],https://github.com/pocl/pocl/pull/761,https://github.com/franz,2,https://github.com/pocl/pocl/pull/761#issuecomment-529563532,"In OSX, there's no dlinfo and only dladdr. For ENABLE_RELOCATION, only dladdr is needed.",Merged into master+1.4,True,{}
pocl/pocl,https://github.com/pocl/pocl,762,2019-09-09T03:22:19Z,2019-09-09T16:37:19Z,2019-09-09T16:37:19Z,CLOSED,False,10,6,1,https://github.com/isuruf,Use private data dir only if ENABLE_RELOCATION is on,1,[],https://github.com/pocl/pocl/pull/762,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/762,"If ENABLE_RELOCATION is not set, look in directory given by clang.","If ENABLE_RELOCATION is not set, look in directory given by clang.",True,{}
pocl/pocl,https://github.com/pocl/pocl,762,2019-09-09T03:22:19Z,2019-09-09T16:37:19Z,2019-09-09T16:37:19Z,CLOSED,False,10,6,1,https://github.com/isuruf,Use private data dir only if ENABLE_RELOCATION is on,1,[],https://github.com/pocl/pocl/pull/762,https://github.com/franz,2,https://github.com/pocl/pocl/pull/762#issuecomment-529563466,"If ENABLE_RELOCATION is not set, look in directory given by clang.",Merged into master+1.4,True,{}
pocl/pocl,https://github.com/pocl/pocl,764,2019-09-09T17:53:38Z,2019-09-11T09:23:03Z,2019-09-11T09:23:03Z,CLOSED,False,21,7,7,https://github.com/isuruf,CentOS5 fixes,1,[],https://github.com/pocl/pocl/pull/764,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/764,Fixes #763,Fixes #763,True,{}
pocl/pocl,https://github.com/pocl/pocl,764,2019-09-09T17:53:38Z,2019-09-11T09:23:03Z,2019-09-11T09:23:03Z,CLOSED,False,21,7,7,https://github.com/isuruf,CentOS5 fixes,1,[],https://github.com/pocl/pocl/pull/764,https://github.com/franz,2,https://github.com/pocl/pocl/pull/764#issuecomment-530298229,Fixes #763,merged in both master & 1.4,True,{}
pocl/pocl,https://github.com/pocl/pocl,765,2019-09-09T18:03:01Z,2019-09-11T09:22:45Z,2019-09-11T09:22:46Z,CLOSED,False,173,0,2,https://github.com/isuruf,Add a script to create a binary release on x86_64 linux,1,[],https://github.com/pocl/pocl/pull/765,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/765,"Needs #764
Runing bash tools/scripts/build_linux_x86_64_binary.sh should give you a tarball in release directory that only needs the following requirements.
GLIBC >= 2.5
libm.so.6
libgcc_s.so.1 >= 4.4
libstdc++.so.6 >= 4.4
libpthread.so.0
libdl.do.2
librt.so.1
The binary release also needs a working linker ld.","Needs #764
Runing bash tools/scripts/build_linux_x86_64_binary.sh should give you a tarball in release directory that only needs the following requirements.
GLIBC >= 2.5
libm.so.6
libgcc_s.so.1 >= 4.4
libstdc++.so.6 >= 4.4
libpthread.so.0
libdl.do.2
librt.so.1
The binary release also needs a working linker ld.",True,{}
pocl/pocl,https://github.com/pocl/pocl,765,2019-09-09T18:03:01Z,2019-09-11T09:22:45Z,2019-09-11T09:22:46Z,CLOSED,False,173,0,2,https://github.com/isuruf,Add a script to create a binary release on x86_64 linux,1,[],https://github.com/pocl/pocl/pull/765,https://github.com/franz,2,https://github.com/pocl/pocl/pull/765#issuecomment-530298100,"Needs #764
Runing bash tools/scripts/build_linux_x86_64_binary.sh should give you a tarball in release directory that only needs the following requirements.
GLIBC >= 2.5
libm.so.6
libgcc_s.so.1 >= 4.4
libstdc++.so.6 >= 4.4
libpthread.so.0
libdl.do.2
librt.so.1
The binary release also needs a working linker ld.",merged in both master & 1.4,True,{}
pocl/pocl,https://github.com/pocl/pocl,768,2019-09-18T10:37:54Z,2020-08-25T23:17:38Z,2020-08-25T23:17:39Z,CLOSED,False,2257,1711,87,https://github.com/franz,some small fixes + global memory abstraction,17,[],https://github.com/pocl/pocl/pull/768,https://github.com/franz,1,https://github.com/pocl/pocl/pull/768,Passes all of my tests.,Passes all of my tests.,True,{}
pocl/pocl,https://github.com/pocl/pocl,768,2019-09-18T10:37:54Z,2020-08-25T23:17:38Z,2020-08-25T23:17:39Z,CLOSED,False,2257,1711,87,https://github.com/franz,some small fixes + global memory abstraction,17,[],https://github.com/pocl/pocl/pull/768,https://github.com/franz,2,https://github.com/pocl/pocl/pull/768#issuecomment-680315394,Passes all of my tests.,superseded by other work,True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/775,"Fixes: #772, #773, #774","Fixes: #772, #773, #774",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/KOLANICH,2,https://github.com/pocl/pocl/pull/775#issuecomment-534693200,"Fixes: #772, #773, #774",What prevents immediate merge?,True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/775#issuecomment-534898779,"Fixes: #772, #773, #774","Other tasks, too busy at the moment, sorry! :(",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/franz,4,https://github.com/pocl/pocl/pull/775#issuecomment-541082623,"Fixes: #772, #773, #774","Apparently i forgot to submit the review. Anyway LGTM now, passes tests with all LLVM versions.",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/KOLANICH,5,https://github.com/pocl/pocl/pull/775#issuecomment-541203642,"Fixes: #772, #773, #774",Thanks for the review.,True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/775#issuecomment-542124785,"Fixes: #772, #773, #774",Please run tools/scripts/format-branch.sh on this branch to fix up style issues.,True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/KOLANICH,7,https://github.com/pocl/pocl/pull/775#issuecomment-551007414,"Fixes: #772, #773, #774","Please run tools/scripts/format-branch.sh on this branch to fix up style issues.

IMHO the script has created more formatting issues than it has fixed.
Curently I cannot build the stuff against the latest llvm because of a linking error,  see https://bugs.llvm.org/show_bug.cgi?id=43940 for more info and a workaround.",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/KOLANICH,8,https://github.com/pocl/pocl/pull/775#issuecomment-551615324,"Fixes: #772, #773, #774","Since it is not a bug in pocl itself but in an llvm apt repo, I guess it can be merged.",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/pjaaskel,9,https://github.com/pocl/pocl/pull/775#issuecomment-551862383,"Fixes: #772, #773, #774","IMHO the script has created more formatting issues than it has fixed.

Oh, is there a settings issue? What is wrongly formatted?",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/KOLANICH,10,https://github.com/pocl/pocl/pull/775#issuecomment-551926326,"Fixes: #772, #773, #774",Indentation of pieces near preprocessor directives,True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/pjaaskel,11,https://github.com/pocl/pocl/pull/775#issuecomment-559497608,"Fixes: #772, #773, #774","Also please add your full real name + email to the commit log and CREDITS, then I can pull this in. It passed my local test envs.",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/KOLANICH,12,https://github.com/pocl/pocl/pull/775#issuecomment-559576415,"Fixes: #772, #773, #774","Sorry, but

add your full real name

Completely inacceptable. I am known under a nickname. Probably intelligence agencies and police can link my nickname to my identity, but allowing everyone in the internet to do the same is not a good idea.

email

email is not secret for the ones knowing where to look it and ready to look for it. But placing my email into lists, such as files, is also inacceptible",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/pjaaskel,13,https://github.com/pocl/pocl/pull/775#issuecomment-559680367,"Fixes: #772, #773, #774","Completely inacceptable. I am known under a nickname. Probably intelligence agencies and police can link my nickname to my identity, but allowing everyone in the internet to do the same is not a good idea.

I appreciate anonymity like the next person, especially if dealing with ""security related topics"", but I've wanted to collect the actual person info (as much as that's possible) who contribute code to pocl.
In addition to giving credits where credits are due (sure, some might want to accumulate fame to a nick for a reason or another), it is mainly for the ""first line of defence"" purposes related to copyrights and MIT licensing: Since we don't ask for a CLA or even DCO (developer certificate of origin), knowing who has contributed and what helps us to later possibly remove/replace contributions if that person (or his/her company/employer) later on becomes hostile and claims that the contributions were not MIT-licensable the first place. This is unlikely to happen, but who knows these days - we are living strange and volatile times.
Email is mainly for being able to contact later if needed (for support or otherwise), but that's optional if the contribution is not a major one.
Having said that, since your contribution is so minor and easily replaceable, I can make an exception in this case, but if you are planning to contribute more (and I hope you do!), it might be a good idea to pop up with a real (looking?) identity before sending the PR to make me feel more comfortable pulling them in.",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/pjaaskel,14,https://github.com/pocl/pocl/pull/775#issuecomment-559681614,"Fixes: #772, #773, #774","Email is mainly for being able to contact later if needed (for support or otherwise), but that's optional if the contribution is not a major one.

Well, another use is relicensing. LLVM recently decided to go through that and had to contact all copyright holders to relicense to Apache 2 + exceptions.",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/KOLANICH,15,https://github.com/pocl/pocl/pull/775#issuecomment-559715072,"Fixes: #772, #773, #774","it is mainly for the ""first line of defence"" purposes related to copyrights and MIT licensing: Since we don't ask for a CLA or even DCO (developer certificate of origin), knowing who has contributed and what helps us to later possibly remove/replace contributions if that person (or his/her company/employer) later on becomes hostile and claims that the contributions were not MIT-licensable the first place. This is unlikely to happen, but who knows these days - we are living strange and volatile times.

KYC stuff is completely inacceptable. I feel like it is a trend to embed (by making the procedure fast (i.e. smartcards or phones or biometrics) and then making people to require other people to pass it) KYC everywhere (for example into food shops) in order to make people more dependent and conTroll them. Voluntary enabling a mock of KYC is only makes this bad future closer. If you dislike the bad trends you should start from yourself. For example, if you dislike copyright, you probably should start licensing own works under public domain-like licenses.
You can also modify the text of this project license to say that any PR into this repo means consent to license own contribution under license of this project.

Well, another use is relicensing.

You can consider the code written by me for this project as licensed under Unlicense. This way anyone can do anything with it except using it to sue me. As you can guess, I deeply dislike copyright and have already started from myself.",True,{}
pocl/pocl,https://github.com/pocl/pocl,775,2019-09-24T12:14:48Z,2019-12-03T11:19:37Z,2019-12-03T17:38:01Z,MERGED,True,112,24,10,https://github.com/KOLANICH,LLVM 10 support,1,[],https://github.com/pocl/pocl/pull/775,https://github.com/pjaaskel,16,https://github.com/pocl/pocl/pull/775#issuecomment-559752816,"Fixes: #772, #773, #774","This is not ""KYC"" (I had to look this acronym up), but just about knowing who contributes code to the project so it's easier for me to trust them and their rights to submit the code to this project more.
Overall, I believe the license text in the file one modifies should be enough for removing legal troubles from the receiver side, but it hasn't been tested much in court to my knowledge.
But like said, as long as your contribution is this small I can make an exception.  If you fix the issue(s) pointed out, I can pull this in.",True,{}
pocl/pocl,https://github.com/pocl/pocl,779,2019-09-27T00:46:27Z,2020-03-25T20:06:50Z,2020-03-25T20:06:50Z,CLOSED,False,10,4,1,https://github.com/tstellar,Link against libclang-cpp.so when linking with shared libraries,1,[],https://github.com/pocl/pocl/pull/779,https://github.com/tstellar,1,https://github.com/pocl/pocl/pull/779,"libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.","libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.",True,{}
pocl/pocl,https://github.com/pocl/pocl,779,2019-09-27T00:46:27Z,2020-03-25T20:06:50Z,2020-03-25T20:06:50Z,CLOSED,False,10,4,1,https://github.com/tstellar,Link against libclang-cpp.so when linking with shared libraries,1,[],https://github.com/pocl/pocl/pull/779,https://github.com/tstellar,2,https://github.com/pocl/pocl/pull/779#issuecomment-535739824,"libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.","I've tested this with the build configuration we use for Fedora, but need help testing on other configurations.",True,{}
pocl/pocl,https://github.com/pocl/pocl,779,2019-09-27T00:46:27Z,2020-03-25T20:06:50Z,2020-03-25T20:06:50Z,CLOSED,False,10,4,1,https://github.com/tstellar,Link against libclang-cpp.so when linking with shared libraries,1,[],https://github.com/pocl/pocl/pull/779,https://github.com/franz,3,https://github.com/pocl/pocl/pull/779#issuecomment-537830213,"libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.","Hi,
Is libclang-cpp always built, in all LLVM build configurations (static and dynamic)  ? Asking because your PR enables it unconditionally (for LLVM >= 9).",True,{}
pocl/pocl,https://github.com/pocl/pocl,779,2019-09-27T00:46:27Z,2020-03-25T20:06:50Z,2020-03-25T20:06:50Z,CLOSED,False,10,4,1,https://github.com/tstellar,Link against libclang-cpp.so when linking with shared libraries,1,[],https://github.com/pocl/pocl/pull/779,https://github.com/tstellar,4,https://github.com/pocl/pocl/pull/779#issuecomment-537960403,"libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.","Yes, it's always built.",True,{}
pocl/pocl,https://github.com/pocl/pocl,779,2019-09-27T00:46:27Z,2020-03-25T20:06:50Z,2020-03-25T20:06:50Z,CLOSED,False,10,4,1,https://github.com/tstellar,Link against libclang-cpp.so when linking with shared libraries,1,[],https://github.com/pocl/pocl/pull/779,https://github.com/franz,5,https://github.com/pocl/pocl/pull/779#issuecomment-538349809,"libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.","I have tested with multiple LLVM 9 builds we have on buildbots, and in some cases it links but resulting libpocl fails to load with:
CommandLine Error: Option 'limited-coverage-experimental' registered more than once!
LLVM ERROR: inconsistency in registered CommandLine options

I have tracked this down to libclang-cpp.so linked differently; on some build configurations it's only linked to libLLVM* libraries, while on the failing configuration it's also linked to libclang* libraries (for some reason):
[buildbot@2cf6b58bf1e8 b]$ ldd /home/LLVM_90/lib/libclang-cpp.so
	libclangBasic.so.9 => /home/LLVM_90/lib/../lib/libclangBasic.so.9 (0x00007fdcc2919000)
	libclangCodeGen.so.9 => /home/LLVM_90/lib/../lib/libclangCodeGen.so.9 (0x00007fdcc22b2000)
	libclangFrontend.so.9 => /home/LLVM_90/lib/../lib/libclangFrontend.so.9 (0x00007fdcc20b9000)
	libclangLex.so.9 => /home/LLVM_90/lib/../lib/libclangLex.so.9 (0x00007fdcc1fd3000)

I'll try to find out which LLVM CMake option causes this.",True,{}
pocl/pocl,https://github.com/pocl/pocl,779,2019-09-27T00:46:27Z,2020-03-25T20:06:50Z,2020-03-25T20:06:50Z,CLOSED,False,10,4,1,https://github.com/tstellar,Link against libclang-cpp.so when linking with shared libraries,1,[],https://github.com/pocl/pocl/pull/779,https://github.com/tstellar,6,https://github.com/pocl/pocl/pull/779#issuecomment-538410121,"libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.",I actually just ran into this same problem too.  This happens when clang is liked without the --as-needed flag.  I think this will need a change to clang's cmake scripts in order to fix properly.,True,{}
pocl/pocl,https://github.com/pocl/pocl,779,2019-09-27T00:46:27Z,2020-03-25T20:06:50Z,2020-03-25T20:06:50Z,CLOSED,False,10,4,1,https://github.com/tstellar,Link against libclang-cpp.so when linking with shared libraries,1,[],https://github.com/pocl/pocl/pull/779,https://github.com/franz,7,https://github.com/pocl/pocl/pull/779#issuecomment-541057775,"libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.","@tstellar we can pull this PR, with a little change to the if condition. It doesn't work with LLVM 9.0 but that's OK since we already have that handled. If you can get the --as-needed fix into next LLVM point release (9.0.1) then we need if (LLVM_VERSION_FULL VERSION_GREATER 9 AND ..), otherwise if (LLVM_VERSION_FULL VERSION_GREATER_EQUAL 10 AND ..) would work.",True,{}
pocl/pocl,https://github.com/pocl/pocl,779,2019-09-27T00:46:27Z,2020-03-25T20:06:50Z,2020-03-25T20:06:50Z,CLOSED,False,10,4,1,https://github.com/tstellar,Link against libclang-cpp.so when linking with shared libraries,1,[],https://github.com/pocl/pocl/pull/779,https://github.com/franz,8,https://github.com/pocl/pocl/pull/779#issuecomment-583315280,"libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.","@tstellar i have tested with release/10.x branch, and it's still broken. Can you get a fix into Clang CMake scripts for release 10 ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,779,2019-09-27T00:46:27Z,2020-03-25T20:06:50Z,2020-03-25T20:06:50Z,CLOSED,False,10,4,1,https://github.com/tstellar,Link against libclang-cpp.so when linking with shared libraries,1,[],https://github.com/pocl/pocl/pull/779,https://github.com/franz,9,https://github.com/pocl/pocl/pull/779#issuecomment-604058346,"libclang-cpp.so is a new shared object in clang-9.0.0 which
contains all the clang components in one library.  Doing this will
save us from having to update cmake when there is a new clang component
and may provide better performance in LTO builds of clang.",Fixed & merged,True,{}
pocl/pocl,https://github.com/pocl/pocl,780,2019-09-27T15:43:05Z,2020-01-28T12:34:44Z,2020-01-28T14:08:36Z,MERGED,True,107,18,16,https://github.com/KOLANICH,Packages,1,[],https://github.com/pocl/pocl/pull/780,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/780,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,780,2019-09-27T15:43:05Z,2020-01-28T12:34:44Z,2020-01-28T14:08:36Z,MERGED,True,107,18,16,https://github.com/KOLANICH,Packages,1,[],https://github.com/pocl/pocl/pull/780,https://github.com/KOLANICH,2,https://github.com/pocl/pocl/pull/780#issuecomment-537716442,,Any progress on merging this?,True,{}
pocl/pocl,https://github.com/pocl/pocl,780,2019-09-27T15:43:05Z,2020-01-28T12:34:44Z,2020-01-28T14:08:36Z,MERGED,True,107,18,16,https://github.com/KOLANICH,Packages,1,[],https://github.com/pocl/pocl/pull/780,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/780#issuecomment-562847469,,"CMake Error at lib/CMakeLists.txt:39 (list):
  list does not recognize sub-command JOIN

This is with cmake 3.10.2 of Ubuntu 18.04 LTS. Please avoid JOIN here.",True,{}
pocl/pocl,https://github.com/pocl/pocl,780,2019-09-27T15:43:05Z,2020-01-28T12:34:44Z,2020-01-28T14:08:36Z,MERGED,True,107,18,16,https://github.com/KOLANICH,Packages,1,[],https://github.com/pocl/pocl/pull/780,https://github.com/KOLANICH,4,https://github.com/pocl/pocl/pull/780#issuecomment-577113707,,@pjaaskel,True,{}
pocl/pocl,https://github.com/pocl/pocl,780,2019-09-27T15:43:05Z,2020-01-28T12:34:44Z,2020-01-28T14:08:36Z,MERGED,True,107,18,16,https://github.com/KOLANICH,Packages,1,[],https://github.com/pocl/pocl/pull/780,https://github.com/KOLANICH,5,https://github.com/pocl/pocl/pull/780#issuecomment-579262243,,Thanks.,True,{}
pocl/pocl,https://github.com/pocl/pocl,783,2019-10-09T14:38:31Z,2019-10-19T08:23:39Z,2019-10-19T08:44:00Z,MERGED,True,378,103,21,https://github.com/pjaaskel,Add a minimally intrusive and easy-to-use kernel execution time profiler,3,[],https://github.com/pocl/pocl/pull/783,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/783,"Setting POCL_PROFILING=1 collects kernel execution times and dumps stats atexit(). The purpose of this feature is to enable implementation of minimally intrusive profile collection; the profile data collector can choose the occasions when it gathers the time stamp data from the events. The impact to the observed execution profile is minimized by avoiding writing any logs, copying objects or such while collecting the data during execution.
It relies on the standard event timestamps to enable devices update them as (and when) they see fit during the execution.
The drawback is accumulation of cl_object garbage, which should be taken in account in the data collection interval; the collector should release the events and the extra data objects they hold often enough to avoid memory consumption to become a problem.
The current version does not perform garbage collection, but assumes the alive OpenCL objects that are kept until the exit is a non-problem, which is clearly the case with most of the OpenCL programs which are rather simple; not long running, nor launch a lot of commands over their lifetime.
The default profile data collector counts only kernel commands at the moment. Collecting stats of data transfers would be a useful addition.

a few smaller fixes","Setting POCL_PROFILING=1 collects kernel execution times and dumps stats atexit(). The purpose of this feature is to enable implementation of minimally intrusive profile collection; the profile data collector can choose the occasions when it gathers the time stamp data from the events. The impact to the observed execution profile is minimized by avoiding writing any logs, copying objects or such while collecting the data during execution.
It relies on the standard event timestamps to enable devices update them as (and when) they see fit during the execution.
The drawback is accumulation of cl_object garbage, which should be taken in account in the data collection interval; the collector should release the events and the extra data objects they hold often enough to avoid memory consumption to become a problem.
The current version does not perform garbage collection, but assumes the alive OpenCL objects that are kept until the exit is a non-problem, which is clearly the case with most of the OpenCL programs which are rather simple; not long running, nor launch a lot of commands over their lifetime.
The default profile data collector counts only kernel commands at the moment. Collecting stats of data transfers would be a useful addition.

a few smaller fixes",True,{}
pocl/pocl,https://github.com/pocl/pocl,783,2019-10-09T14:38:31Z,2019-10-19T08:23:39Z,2019-10-19T08:44:00Z,MERGED,True,378,103,21,https://github.com/pjaaskel,Add a minimally intrusive and easy-to-use kernel execution time profiler,3,[],https://github.com/pocl/pocl/pull/783,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/783#issuecomment-541083420,"Setting POCL_PROFILING=1 collects kernel execution times and dumps stats atexit(). The purpose of this feature is to enable implementation of minimally intrusive profile collection; the profile data collector can choose the occasions when it gathers the time stamp data from the events. The impact to the observed execution profile is minimized by avoiding writing any logs, copying objects or such while collecting the data during execution.
It relies on the standard event timestamps to enable devices update them as (and when) they see fit during the execution.
The drawback is accumulation of cl_object garbage, which should be taken in account in the data collection interval; the collector should release the events and the extra data objects they hold often enough to avoid memory consumption to become a problem.
The current version does not perform garbage collection, but assumes the alive OpenCL objects that are kept until the exit is a non-problem, which is clearly the case with most of the OpenCL programs which are rather simple; not long running, nor launch a lot of commands over their lifetime.
The default profile data collector counts only kernel commands at the moment. Collecting stats of data transfers would be a useful addition.

a few smaller fixes",Fixed a race spotted by @jansol who reviewed the PR.,True,{}
pocl/pocl,https://github.com/pocl/pocl,783,2019-10-09T14:38:31Z,2019-10-19T08:23:39Z,2019-10-19T08:44:00Z,MERGED,True,378,103,21,https://github.com/pjaaskel,Add a minimally intrusive and easy-to-use kernel execution time profiler,3,[],https://github.com/pocl/pocl/pull/783,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/783#issuecomment-544116512,"Setting POCL_PROFILING=1 collects kernel execution times and dumps stats atexit(). The purpose of this feature is to enable implementation of minimally intrusive profile collection; the profile data collector can choose the occasions when it gathers the time stamp data from the events. The impact to the observed execution profile is minimized by avoiding writing any logs, copying objects or such while collecting the data during execution.
It relies on the standard event timestamps to enable devices update them as (and when) they see fit during the execution.
The drawback is accumulation of cl_object garbage, which should be taken in account in the data collection interval; the collector should release the events and the extra data objects they hold often enough to avoid memory consumption to become a problem.
The current version does not perform garbage collection, but assumes the alive OpenCL objects that are kept until the exit is a non-problem, which is clearly the case with most of the OpenCL programs which are rather simple; not long running, nor launch a lot of commands over their lifetime.
The default profile data collector counts only kernel commands at the moment. Collecting stats of data transfers would be a useful addition.

a few smaller fixes",Fixed according to feedback from @franz and pushed.,True,{}
pocl/pocl,https://github.com/pocl/pocl,784,2019-10-12T08:17:42Z,2019-10-15T16:10:21Z,2019-10-15T16:10:21Z,MERGED,True,101,58,12,https://github.com/pjaaskel,Misc fixes,14,[],https://github.com/pocl/pocl/pull/784,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/784,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,785,2019-10-12T08:18:22Z,2019-10-16T08:07:25Z,2019-10-16T08:07:25Z,MERGED,True,138,73,3,https://github.com/pjaaskel,Misc. HSA updates,3,[],https://github.com/pocl/pocl/pull/785,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/785,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,786,2019-10-14T11:51:38Z,2019-10-19T06:38:28Z,2019-10-19T06:38:28Z,CLOSED,False,77,10,5,https://github.com/pjaaskel,Add 32b index pytorch/Glow to the (tier1) test suite,1,[],https://github.com/pocl/pocl/pull/786,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/786,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,792,2019-11-16T01:36:12Z,2019-12-03T11:26:41Z,2019-12-03T11:26:41Z,CLOSED,False,20,18,8,https://github.com/miniskar,Updated sources to make it compatible with LLVM 10,1,[],https://github.com/pocl/pocl/pull/792,https://github.com/miniskar,1,https://github.com/pocl/pocl/pull/792,Requesting to pull these changes to get it compatible with latest LLVM (Master).,Requesting to pull these changes to get it compatible with latest LLVM (Master).,True,{}
pocl/pocl,https://github.com/pocl/pocl,792,2019-11-16T01:36:12Z,2019-12-03T11:26:41Z,2019-12-03T11:26:41Z,CLOSED,False,20,18,8,https://github.com/miniskar,Updated sources to make it compatible with LLVM 10,1,[],https://github.com/pocl/pocl/pull/792,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/792#issuecomment-559476168,Requesting to pull these changes to get it compatible with latest LLVM (Master).,"Thanks for the PR. Unfortunately, I cannot pull this in since it breaks LLVM 7 build.",True,{}
pocl/pocl,https://github.com/pocl/pocl,792,2019-11-16T01:36:12Z,2019-12-03T11:26:41Z,2019-12-03T11:26:41Z,CLOSED,False,20,18,8,https://github.com/miniskar,Updated sources to make it compatible with LLVM 10,1,[],https://github.com/pocl/pocl/pull/792,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/792#issuecomment-559478404,Requesting to pull these changes to get it compatible with latest LLVM (Master).,"OK, I didn't realize this was another pull requester for similar updates. Please check #775",True,{}
pocl/pocl,https://github.com/pocl/pocl,792,2019-11-16T01:36:12Z,2019-12-03T11:26:41Z,2019-12-03T11:26:41Z,CLOSED,False,20,18,8,https://github.com/miniskar,Updated sources to make it compatible with LLVM 10,1,[],https://github.com/pocl/pocl/pull/792,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/792#issuecomment-561126009,Requesting to pull these changes to get it compatible with latest LLVM (Master).,Obsoleted by PR #775 .,True,{}
pocl/pocl,https://github.com/pocl/pocl,794,2019-12-04T18:20:45Z,2019-12-16T14:38:09Z,2020-01-15T15:28:22Z,MERGED,True,21,14,2,https://github.com/KOLANICH,Further llvm 10 compatibility fixes,1,[],https://github.com/pocl/pocl/pull/794,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/794,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,794,2019-12-04T18:20:45Z,2019-12-16T14:38:09Z,2020-01-15T15:28:22Z,MERGED,True,21,14,2,https://github.com/KOLANICH,Further llvm 10 compatibility fixes,1,[],https://github.com/pocl/pocl/pull/794,https://github.com/KOLANICH,2,https://github.com/pocl/pocl/pull/794#issuecomment-565563603,,@pjaaskel,True,{}
pocl/pocl,https://github.com/pocl/pocl,797,2019-12-11T22:49:32Z,2019-12-16T14:00:21Z,2019-12-16T14:00:21Z,MERGED,True,14715,1896,3,https://github.com/blu,refactor vector conversions for better autovectorizing codegen,3,[],https://github.com/pocl/pocl/pull/797,https://github.com/blu,1,https://github.com/pocl/pocl/pull/797,"Change replaces the original lo/hi decomposition of convert_typeN(sourceN) for a decomposition of the kind (typeN)((type) source.s0, (type) source.s1, ... ), which emits sext/ zext llvm IR opcodes (for integral types), which, in their turn, autovectorize nicely on ISAs with corresponding ops. Change addresses issue #796.","Change replaces the original lo/hi decomposition of convert_typeN(sourceN) for a decomposition of the kind (typeN)((type) source.s0, (type) source.s1, ... ), which emits sext/ zext llvm IR opcodes (for integral types), which, in their turn, autovectorize nicely on ISAs with corresponding ops. Change addresses issue #796.",True,{}
pocl/pocl,https://github.com/pocl/pocl,797,2019-12-11T22:49:32Z,2019-12-16T14:00:21Z,2019-12-16T14:00:21Z,MERGED,True,14715,1896,3,https://github.com/blu,refactor vector conversions for better autovectorizing codegen,3,[],https://github.com/pocl/pocl/pull/797,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/797#issuecomment-565007953,"Change replaces the original lo/hi decomposition of convert_typeN(sourceN) for a decomposition of the kind (typeN)((type) source.s0, (type) source.s1, ... ), which emits sext/ zext llvm IR opcodes (for integral types), which, in their turn, autovectorize nicely on ISAs with corresponding ops. Change addresses issue #796.",Can you add a CHANGES entry (preferably with some speedup estimates from this) and yourself to CREDITS? Thanks.,True,{}
pocl/pocl,https://github.com/pocl/pocl,797,2019-12-11T22:49:32Z,2019-12-16T14:00:21Z,2019-12-16T14:00:21Z,MERGED,True,14715,1896,3,https://github.com/blu,refactor vector conversions for better autovectorizing codegen,3,[],https://github.com/pocl/pocl/pull/797,https://github.com/blu,3,https://github.com/pocl/pocl/pull/797#issuecomment-565066060,"Change replaces the original lo/hi decomposition of convert_typeN(sourceN) for a decomposition of the kind (typeN)((type) source.s0, (type) source.s1, ... ), which emits sext/ zext llvm IR opcodes (for integral types), which, in their turn, autovectorize nicely on ISAs with corresponding ops. Change addresses issue #796.",@pjaaskel I've updated CHANGES section for 1.5. Left CREDITS untouched as I'm already present there.,True,{}
pocl/pocl,https://github.com/pocl/pocl,798,2019-12-13T14:47:52Z,2020-01-13T11:51:53Z,2020-01-20T08:37:17Z,MERGED,True,2,1,2,https://github.com/new2f7,Also split if the resulting group size is equal to the minimum group size,2,[],https://github.com/pocl/pocl/pull/798,https://github.com/new2f7,1,https://github.com/pocl/pocl/pull/798,"clEnqueueNDRangeKernel(): When hitting a global_work_size := global_x * global_y * global_z that equals 4 * preferred_wg_multiple * max_compute_units, the program will now run in parallel (new behaviour) rather than not running in parallel (old behaviour).

If global_work_size is smaller, the program will not run in parallel (unchanged).
If global_work_size is bigger, the program will run in parallel (unchanged).","clEnqueueNDRangeKernel(): When hitting a global_work_size := global_x * global_y * global_z that equals 4 * preferred_wg_multiple * max_compute_units, the program will now run in parallel (new behaviour) rather than not running in parallel (old behaviour).

If global_work_size is smaller, the program will not run in parallel (unchanged).
If global_work_size is bigger, the program will run in parallel (unchanged).",True,{}
pocl/pocl,https://github.com/pocl/pocl,798,2019-12-13T14:47:52Z,2020-01-13T11:51:53Z,2020-01-20T08:37:17Z,MERGED,True,2,1,2,https://github.com/new2f7,Also split if the resulting group size is equal to the minimum group size,2,[],https://github.com/pocl/pocl/pull/798,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/798#issuecomment-565473690,"clEnqueueNDRangeKernel(): When hitting a global_work_size := global_x * global_y * global_z that equals 4 * preferred_wg_multiple * max_compute_units, the program will now run in parallel (new behaviour) rather than not running in parallel (old behaviour).

If global_work_size is smaller, the program will not run in parallel (unchanged).
If global_work_size is bigger, the program will run in parallel (unchanged).",Good catch. Can you add this to CHANGES (a mention of known perf. impact on some benchmark of interest would be optimal) and yourself to CREDITS? Thanks.,True,{}
pocl/pocl,https://github.com/pocl/pocl,798,2019-12-13T14:47:52Z,2020-01-13T11:51:53Z,2020-01-20T08:37:17Z,MERGED,True,2,1,2,https://github.com/new2f7,Also split if the resulting group size is equal to the minimum group size,2,[],https://github.com/pocl/pocl/pull/798,https://github.com/new2f7,3,https://github.com/pocl/pocl/pull/798#issuecomment-573539525,"clEnqueueNDRangeKernel(): When hitting a global_work_size := global_x * global_y * global_z that equals 4 * preferred_wg_multiple * max_compute_units, the program will now run in parallel (new behaviour) rather than not running in parallel (old behaviour).

If global_work_size is smaller, the program will not run in parallel (unchanged).
If global_work_size is bigger, the program will run in parallel (unchanged).","I updated the description of this PR to clarify my proposed modification. In my opinion, this modification is a small bug fix that only applies to an edge case, nothing worth mentioning in CHANGES (cf. ""notable bug fixes""). However, I can add something like the first sentence from the description to CHANGES if you prefer.
Regarding performance impacts: I used the hexciton_benchmark (proxy benchmark derived from a HEOM implementation) with a custom size that hits the described edge case above, see this pdf. I originally encountered this problem when conducting measurements with an
unpublished micro benchmark, see this pdf.",True,{}
pocl/pocl,https://github.com/pocl/pocl,804,2020-01-31T15:24:31Z,2020-02-04T08:55:36Z,2020-02-04T08:55:36Z,MERGED,True,5,4,1,https://github.com/alberto-cerato,Fix a crash when a null kernel object is passed to clEnqueueNDRangeKernel,1,[],https://github.com/pocl/pocl/pull/804,https://github.com/alberto-cerato,1,https://github.com/pocl/pocl/pull/804,"It looks like the 'kernel' parameter is used before is checked for nullness.
If you pass NULL as kernel argument to clEnqueueNDRangeKernel, the POCL library crashes.
This PR simply moves the nullness check before 'kernel' is actually used.
p.s.
I am not an OpenCL expert and new to this project, so maybe there is a reason I cannot see for this.","It looks like the 'kernel' parameter is used before is checked for nullness.
If you pass NULL as kernel argument to clEnqueueNDRangeKernel, the POCL library crashes.
This PR simply moves the nullness check before 'kernel' is actually used.
p.s.
I am not an OpenCL expert and new to this project, so maybe there is a reason I cannot see for this.",True,{}
pocl/pocl,https://github.com/pocl/pocl,804,2020-01-31T15:24:31Z,2020-02-04T08:55:36Z,2020-02-04T08:55:36Z,MERGED,True,5,4,1,https://github.com/alberto-cerato,Fix a crash when a null kernel object is passed to clEnqueueNDRangeKernel,1,[],https://github.com/pocl/pocl/pull/804,https://github.com/alberto-cerato,2,https://github.com/pocl/pocl/pull/804#issuecomment-581369931,"It looks like the 'kernel' parameter is used before is checked for nullness.
If you pass NULL as kernel argument to clEnqueueNDRangeKernel, the POCL library crashes.
This PR simply moves the nullness check before 'kernel' is actually used.
p.s.
I am not an OpenCL expert and new to this project, so maybe there is a reason I cannot see for this.","Hello @pjaaskel,
is there anything else I could/should do from my side for this to be merged?
Also, I assumed 'master' to be the right branch to merge this PR, but maybe that is not the case.",True,{}
pocl/pocl,https://github.com/pocl/pocl,805,2020-02-07T17:42:32Z,2020-05-19T17:07:45Z,2020-05-19T17:07:45Z,MERGED,True,45,42,8,https://github.com/KOLANICH,LLVM11 support,1,[],https://github.com/pocl/pocl/pull/805,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/805,"fixed the mess in macrodefs making adding support of new versions a nightmare
brought support to llvm and clang 11","fixed the mess in macrodefs making adding support of new versions a nightmare
brought support to llvm and clang 11",True,{}
pocl/pocl,https://github.com/pocl/pocl,805,2020-02-07T17:42:32Z,2020-05-19T17:07:45Z,2020-05-19T17:07:45Z,MERGED,True,45,42,8,https://github.com/KOLANICH,LLVM11 support,1,[],https://github.com/pocl/pocl/pull/805,https://github.com/franz,2,https://github.com/pocl/pocl/pull/805#issuecomment-585747466,"fixed the mess in macrodefs making adding support of new versions a nightmare
brought support to llvm and clang 11","@KOLANICH

it still doesn't compile because of nasty template problems each is half of screen high

Possibly fixed by commit 76ce2f9 ? i've run into that earlier, it can produce a huge amount of perplexing errors...
BTW this PR will have to wait until we branch pocl 1.5 for the LLVM 10 release, since we don't want to claim LLVM 11 compatibility in the release branch.",True,{}
pocl/pocl,https://github.com/pocl/pocl,805,2020-02-07T17:42:32Z,2020-05-19T17:07:45Z,2020-05-19T17:07:45Z,MERGED,True,45,42,8,https://github.com/KOLANICH,LLVM11 support,1,[],https://github.com/pocl/pocl/pull/805,https://github.com/KOLANICH,3,https://github.com/pocl/pocl/pull/805#issuecomment-585750268,"fixed the mess in macrodefs making adding support of new versions a nightmare
brought support to llvm and clang 11",master is not a release branch.,True,{}
pocl/pocl,https://github.com/pocl/pocl,805,2020-02-07T17:42:32Z,2020-05-19T17:07:45Z,2020-05-19T17:07:45Z,MERGED,True,45,42,8,https://github.com/KOLANICH,LLVM11 support,1,[],https://github.com/pocl/pocl/pull/805,https://github.com/KOLANICH,4,https://github.com/pocl/pocl/pull/805#issuecomment-585756588,"fixed the mess in macrodefs making adding support of new versions a nightmare
brought support to llvm and clang 11","Thanks, that works!",True,{}
pocl/pocl,https://github.com/pocl/pocl,806,2020-03-19T12:36:05Z,2020-03-20T14:38:02Z,2020-03-20T14:41:36Z,CLOSED,False,6,2,1,https://github.com/new2f7,Fix uneven distribution of work groups to threads,3,[],https://github.com/pocl/pocl/pull/806,https://github.com/new2f7,1,https://github.com/pocl/pocl/pull/806,"Problem (L208 and L210)
Integer division discards fractional part. To avoid result 0, 1 is added (poor man's ceil()). If num_threads divides k->remaining_wgs evenly, 1 is added anyway and the result is to high. This results in an uneven distribution of work groups to threads. An example: There are 4 work groups and 4 threads. For the first thread, num_threads divides k->remaining_wgs evenly (4/4=1), giving 2 work groups to the first thread. Thread 2 and 3 get 1 work group each. There is nothing left to do for the 4th thread which idles, while the first thread has double work.
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, (1 + k->remaining_wgs / num_threads));
else
  max_wgs = min (scaled_max_wgs, (1 + k->remaining_wgs / num_threads));

Solution
Floating point division and ceil():
int my_wgs = ceil ((float) k->remaining_wgs / (float) num_threads);
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, my_wgs);
else
  max_wgs = min (scaled_max_wgs, my_wgs);

See before.png and after.png.","Problem (L208 and L210)
Integer division discards fractional part. To avoid result 0, 1 is added (poor man's ceil()). If num_threads divides k->remaining_wgs evenly, 1 is added anyway and the result is to high. This results in an uneven distribution of work groups to threads. An example: There are 4 work groups and 4 threads. For the first thread, num_threads divides k->remaining_wgs evenly (4/4=1), giving 2 work groups to the first thread. Thread 2 and 3 get 1 work group each. There is nothing left to do for the 4th thread which idles, while the first thread has double work.
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, (1 + k->remaining_wgs / num_threads));
else
  max_wgs = min (scaled_max_wgs, (1 + k->remaining_wgs / num_threads));

Solution
Floating point division and ceil():
int my_wgs = ceil ((float) k->remaining_wgs / (float) num_threads);
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, my_wgs);
else
  max_wgs = min (scaled_max_wgs, my_wgs);

See before.png and after.png.",True,{}
pocl/pocl,https://github.com/pocl/pocl,806,2020-03-19T12:36:05Z,2020-03-20T14:38:02Z,2020-03-20T14:41:36Z,CLOSED,False,6,2,1,https://github.com/new2f7,Fix uneven distribution of work groups to threads,3,[],https://github.com/pocl/pocl/pull/806,https://github.com/new2f7,2,https://github.com/pocl/pocl/pull/806#issuecomment-601735502,"Problem (L208 and L210)
Integer division discards fractional part. To avoid result 0, 1 is added (poor man's ceil()). If num_threads divides k->remaining_wgs evenly, 1 is added anyway and the result is to high. This results in an uneven distribution of work groups to threads. An example: There are 4 work groups and 4 threads. For the first thread, num_threads divides k->remaining_wgs evenly (4/4=1), giving 2 work groups to the first thread. Thread 2 and 3 get 1 work group each. There is nothing left to do for the 4th thread which idles, while the first thread has double work.
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, (1 + k->remaining_wgs / num_threads));
else
  max_wgs = min (scaled_max_wgs, (1 + k->remaining_wgs / num_threads));

Solution
Floating point division and ceil():
int my_wgs = ceil ((float) k->remaining_wgs / (float) num_threads);
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, my_wgs);
else
  max_wgs = min (scaled_max_wgs, my_wgs);

See before.png and after.png.",I closed this PR and will open a new one because this PR now contains wrong commits.,True,{}
pocl/pocl,https://github.com/pocl/pocl,808,2020-03-20T14:54:32Z,2020-03-25T20:06:05Z,2020-03-25T20:06:05Z,CLOSED,False,6,2,1,https://github.com/new2f7,Fix uneven distribution of work groups to threads,1,[],https://github.com/pocl/pocl/pull/808,https://github.com/new2f7,1,https://github.com/pocl/pocl/pull/808,"Problem (L208 and L210)
Integer division discards fractional part. To avoid result 0, 1 is added (poor man's ceil()). If num_threads divides k->remaining_wgs evenly, 1 is added anyway and the result is to high. This results in an uneven distribution of work groups to threads. An example: There are 4 work groups and 4 threads. For the first thread, num_threads divides k->remaining_wgs evenly (4/4=1), giving 2 work groups to the first thread. Thread 2 and 3 get 1 work group each. There is nothing left to do for the 4th thread which idles, while the first thread has double work.
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, (1 + k->remaining_wgs / num_threads));
else
  max_wgs = min (scaled_max_wgs, (1 + k->remaining_wgs / num_threads));

Solution
The problem is solved by subtracting 1 from k->remaining_wgs (as suggested by @noma). I also refactored the if-statement to make the code more readable.
const unsigned wgs_per_thread = (1 + (k->remaining_wgs - 1) / num_threads);

Question
Why are POCL_PTHREAD_MAX_WGS/POCL_PTHREAD_MIN_WGS multiplied by num_threads in L189/L190? They appear to be a local (i.e. per thread) limit according to L208/L210. scaled_max_wgs is again multiplied by num_threads in L207, which makes sense because k->remaining_wgs is a global value, which is now compared against a value that contains num_threads squared. Maybe the commits author @franz can help?","Problem (L208 and L210)
Integer division discards fractional part. To avoid result 0, 1 is added (poor man's ceil()). If num_threads divides k->remaining_wgs evenly, 1 is added anyway and the result is to high. This results in an uneven distribution of work groups to threads. An example: There are 4 work groups and 4 threads. For the first thread, num_threads divides k->remaining_wgs evenly (4/4=1), giving 2 work groups to the first thread. Thread 2 and 3 get 1 work group each. There is nothing left to do for the 4th thread which idles, while the first thread has double work.
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, (1 + k->remaining_wgs / num_threads));
else
  max_wgs = min (scaled_max_wgs, (1 + k->remaining_wgs / num_threads));

Solution
The problem is solved by subtracting 1 from k->remaining_wgs (as suggested by @noma). I also refactored the if-statement to make the code more readable.
const unsigned wgs_per_thread = (1 + (k->remaining_wgs - 1) / num_threads);

Question
Why are POCL_PTHREAD_MAX_WGS/POCL_PTHREAD_MIN_WGS multiplied by num_threads in L189/L190? They appear to be a local (i.e. per thread) limit according to L208/L210. scaled_max_wgs is again multiplied by num_threads in L207, which makes sense because k->remaining_wgs is a global value, which is now compared against a value that contains num_threads squared. Maybe the commits author @franz can help?",True,{}
pocl/pocl,https://github.com/pocl/pocl,808,2020-03-20T14:54:32Z,2020-03-25T20:06:05Z,2020-03-25T20:06:05Z,CLOSED,False,6,2,1,https://github.com/new2f7,Fix uneven distribution of work groups to threads,1,[],https://github.com/pocl/pocl/pull/808,https://github.com/franz,2,https://github.com/pocl/pocl/pull/808#issuecomment-601860712,"Problem (L208 and L210)
Integer division discards fractional part. To avoid result 0, 1 is added (poor man's ceil()). If num_threads divides k->remaining_wgs evenly, 1 is added anyway and the result is to high. This results in an uneven distribution of work groups to threads. An example: There are 4 work groups and 4 threads. For the first thread, num_threads divides k->remaining_wgs evenly (4/4=1), giving 2 work groups to the first thread. Thread 2 and 3 get 1 work group each. There is nothing left to do for the 4th thread which idles, while the first thread has double work.
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, (1 + k->remaining_wgs / num_threads));
else
  max_wgs = min (scaled_max_wgs, (1 + k->remaining_wgs / num_threads));

Solution
The problem is solved by subtracting 1 from k->remaining_wgs (as suggested by @noma). I also refactored the if-statement to make the code more readable.
const unsigned wgs_per_thread = (1 + (k->remaining_wgs - 1) / num_threads);

Question
Why are POCL_PTHREAD_MAX_WGS/POCL_PTHREAD_MIN_WGS multiplied by num_threads in L189/L190? They appear to be a local (i.e. per thread) limit according to L208/L210. scaled_max_wgs is again multiplied by num_threads in L207, which makes sense because k->remaining_wgs is a global value, which is now compared against a value that contains num_threads squared. Maybe the commits author @franz can help?","They appear to be a local (i.e. per thread) limit

They are.

Why are POCL_PTHREAD_MAX_WGS / POCL_PTHREAD_MIN_WGS multiplied by num_threads

To improve scaling on multicore machines. It's somewhat described in comments in L179 and L200

value, which is now compared against a value that contains num_threads squared

You're trying to find a deeper sense in this; there isn't one. The comparison in if condition (k->remaining_wgs <= (scaled_max_wgs * num_threads)) must contain the  * num_threads because local limit vs global work, but how we arrive at numbers for scaled_min/max_wgs limits is black magic. IIRC i have found some tests improve on manycore machines by scaling min/max_wgs with threads. It could be because of locking overhead or cache effects or both. It's probably impossible to come up with a ""right value"" here.
Thanks for the fix.",True,{'THUMBS_UP': ['https://github.com/new2f7']}
pocl/pocl,https://github.com/pocl/pocl,808,2020-03-20T14:54:32Z,2020-03-25T20:06:05Z,2020-03-25T20:06:05Z,CLOSED,False,6,2,1,https://github.com/new2f7,Fix uneven distribution of work groups to threads,1,[],https://github.com/pocl/pocl/pull/808,https://github.com/franz,3,https://github.com/pocl/pocl/pull/808#issuecomment-604057977,"Problem (L208 and L210)
Integer division discards fractional part. To avoid result 0, 1 is added (poor man's ceil()). If num_threads divides k->remaining_wgs evenly, 1 is added anyway and the result is to high. This results in an uneven distribution of work groups to threads. An example: There are 4 work groups and 4 threads. For the first thread, num_threads divides k->remaining_wgs evenly (4/4=1), giving 2 work groups to the first thread. Thread 2 and 3 get 1 work group each. There is nothing left to do for the 4th thread which idles, while the first thread has double work.
if (k->remaining_wgs <= (scaled_max_wgs * num_threads))
  max_wgs = min (scaled_min_wgs, (1 + k->remaining_wgs / num_threads));
else
  max_wgs = min (scaled_max_wgs, (1 + k->remaining_wgs / num_threads));

Solution
The problem is solved by subtracting 1 from k->remaining_wgs (as suggested by @noma). I also refactored the if-statement to make the code more readable.
const unsigned wgs_per_thread = (1 + (k->remaining_wgs - 1) / num_threads);

Question
Why are POCL_PTHREAD_MAX_WGS/POCL_PTHREAD_MIN_WGS multiplied by num_threads in L189/L190? They appear to be a local (i.e. per thread) limit according to L208/L210. scaled_max_wgs is again multiplied by num_threads in L207, which makes sense because k->remaining_wgs is a global value, which is now compared against a value that contains num_threads squared. Maybe the commits author @franz can help?",Merged into master,True,{}
pocl/pocl,https://github.com/pocl/pocl,814,2020-04-12T01:48:07Z,2020-04-18T06:59:54Z,2020-04-18T06:59:54Z,MERGED,True,2,2,2,https://github.com/alexfikl,Wrap calls to clRetainKernel and clRetainEvent,1,[],https://github.com/pocl/pocl/pull/814,https://github.com/alexfikl,1,https://github.com/pocl/pocl/pull/814,These were causing some linking errors (undefined symbols) on my Linux system.,These were causing some linking errors (undefined symbols) on my Linux system.,True,{}
pocl/pocl,https://github.com/pocl/pocl,815,2020-04-18T02:41:45Z,2020-04-18T02:42:28Z,2020-04-18T14:14:04Z,CLOSED,False,1,1,1,https://github.com/isuruf,Use POname for clRetainEvent,1,[],https://github.com/pocl/pocl/pull/815,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/815,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,815,2020-04-18T02:41:45Z,2020-04-18T02:42:28Z,2020-04-18T14:14:04Z,CLOSED,False,1,1,1,https://github.com/isuruf,Use POname for clRetainEvent,1,[],https://github.com/pocl/pocl/pull/815,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/815#issuecomment-615543021,,Duplicate of #814,True,{}
pocl/pocl,https://github.com/pocl/pocl,818,2020-05-07T19:52:58Z,2020-05-20T06:40:06Z,2020-05-20T06:40:06Z,MERGED,True,1,0,1,https://github.com/matthiasdiener,matrix1: add missing #define,1,['Power9 Issue'],https://github.com/pocl/pocl/pull/818,https://github.com/matthiasdiener,1,https://github.com/pocl/pocl/pull/818,Required for RHEL 7.6 Power9/clang 9.0.,Required for RHEL 7.6 Power9/clang 9.0.,True,{}
pocl/pocl,https://github.com/pocl/pocl,819,2020-05-10T20:46:28Z,2020-05-20T07:58:42Z,2020-05-23T19:37:01Z,MERGED,True,8,0,1,https://github.com/isuruf,Don't build with PIE enabled on powerpc,1,[],https://github.com/pocl/pocl/pull/819,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/819,Fixes segfaults on powerpc. See #816 (comment),Fixes segfaults on powerpc. See #816 (comment),True,{}
pocl/pocl,https://github.com/pocl/pocl,819,2020-05-10T20:46:28Z,2020-05-20T07:58:42Z,2020-05-23T19:37:01Z,MERGED,True,8,0,1,https://github.com/isuruf,Don't build with PIE enabled on powerpc,1,[],https://github.com/pocl/pocl/pull/819,https://github.com/franz,2,https://github.com/pocl/pocl/pull/819#issuecomment-626591555,Fixes segfaults on powerpc. See #816 (comment),"Hi Fernando,
could you slightly change the patch. The PIE/PIC settings were added because without them, i got linker errors on some of our x86-64 build bots. An #ifdef <some-powerpc-macro> PIE=0 #else original-code version would be better. (Though best would be to figure out why PIE doesn't work on Power, but  a day only has so much hours)",True,{'THUMBS_UP': ['https://github.com/isuruf']}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/821,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer","This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer",True,{'THUMBS_UP': ['https://github.com/inducer']}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/821#issuecomment-627882410,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer","Thanks for this. The only question I have is if there's a real need to make this optional? I prefer to avoid additional cmake parameters unless strictly needed for some use case.
In the previous plan all the drivers would be organized like this, as ""plugins"", and would eventually be dynamically probed. E.g. POCL_DEVICES=auto would detect at runtime which devices can be enabled, POCL_DEVICES=last would use the previous (cached) POCL_DEVICES configuration, which would be the default, and POCL_DEVICES=""cuda pthread"" would work like now: force enabling a single CUDA device + a pthread-based CPU device in the pocl OpenCL platform.
I also saw some commented out code which should not be committed in.",True,{}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/jrprice,3,https://github.com/pocl/pocl/pull/821#issuecomment-627966591,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer",Agree - I can't think of a reason not to do this all the time.,True,{}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/isuruf,4,https://github.com/pocl/pocl/pull/821#issuecomment-628017754,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer","Thanks for the quick feedback. There are a couple of issues.

Symbol visibility has to be turned off (minor)
The device library has unresolved symbols which are only in libpocl.so.
On Linux, this is okay as shared libraries can work this way. On Windows, it doesn't. On Mac, there are some options that we can set. I'll have a look on Mac.
Running in build tree is not supported.",True,{}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/isuruf,5,https://github.com/pocl/pocl/pull/821#issuecomment-629465067,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer","Problems 2 and 3 are fixed. Is it okay if the symbol hiding is turned off for the functions that lib/CL/devices/cuda uses? If so, I will remove this option and make it default.",True,{}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/821#issuecomment-630785938,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer","Problems 2 and 3 are fixed. Is it okay if the symbol hiding is turned off for the functions that lib/CL/devices/cuda uses? If so, I will remove this option and make it default.

To be honest, I've forgot why we need to hide the symbols the first place (since we rename them to avoid ICD loader clashes), so I suppose it's fine.
Does the NVIDIA GPU part in the user manual need updating or does this change reflect to the end user? Also, please add this to CHANGES.",True,{}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/isuruf,7,https://github.com/pocl/pocl/pull/821#issuecomment-631074619,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer","I've made separate libpocl-devices-pthread.so and libpocl-devices-basic.so as well. I didn't do the same for hsa, tce as I don't have access to these devices. Building with accel enabled succeeds, but segfaults when loading the ICD.",True,{}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/821#issuecomment-631512138,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer","After fixing these, please rebase the branch to a single commit. Also if you can check why the formatter didn't pick up the devices.c, it'd be great.",True,{}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/pjaaskel,9,https://github.com/pocl/pocl/pull/821#issuecomment-634497809,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer","To be honest, I've forgot why we need to hide the symbols the first place (since we rename them to avoid ICD loader clashes), so I suppose it's fine.

The symbols were hidden in 686ef05. @franz do you remember what was the reason for hiding them? Just to avoid potential symbol clashes when libpocl.so is loaded in via ICD loader or something else?
Now there is a problem since the device drivers require utility functionality from libpocl.so, which need to be exposed. The ideal case would be to have libpocl-devices.so where all of the utilities would be put which the driver .sos would load if needed.  But if there is no problem exposing some extra symbols from an OpenCL driver library, we can fix this later.",True,{}
pocl/pocl,https://github.com/pocl/pocl,821,2020-05-12T18:34:56Z,2020-05-27T11:58:40Z,2020-05-27T11:58:40Z,MERGED,True,172,142,20,https://github.com/isuruf,Add an option to build device libraries separately and dlopen,1,[],https://github.com/pocl/pocl/pull/821,https://github.com/franz,10,https://github.com/pocl/pocl/pull/821#issuecomment-634546618,"This is only for CUDA and I can add support for other devices too if needed. I don't think we need to do it for pthreads since it is available on all systems supported by POCL.
Symbol visibility changes are needed because the device library uses those symbols.
Fixes: #820
cc @jrprice, @inducer","to avoid potential symbol clashes

Mainly that. Problem is that we don't know what program libpocl will be linked into (or dlopened by ICD), so we should make sure every symbol we expose has a pocl specific prefix (IIRC most, but not all of the internally used functions have that).",True,{}
pocl/pocl,https://github.com/pocl/pocl,822,2020-05-12T20:46:44Z,2020-05-20T10:12:56Z,2020-06-09T17:21:41Z,MERGED,True,10,0,1,https://github.com/isuruf,Pass --nvptx-short-ptr,2,[],https://github.com/pocl/pocl/pull/822,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/822,This makes the local/shared memory accesses using 32 bit pointers,This makes the local/shared memory accesses using 32 bit pointers,True,{'THUMBS_UP': ['https://github.com/inducer']}
pocl/pocl,https://github.com/pocl/pocl,822,2020-05-12T20:46:44Z,2020-05-20T10:12:56Z,2020-06-09T17:21:41Z,MERGED,True,10,0,1,https://github.com/isuruf,Pass --nvptx-short-ptr,2,[],https://github.com/pocl/pocl/pull/822,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/822#issuecomment-627877428,This makes the local/shared memory accesses using 32 bit pointers,@jrprice does it look OK to you?,True,{}
pocl/pocl,https://github.com/pocl/pocl,822,2020-05-12T20:46:44Z,2020-05-20T10:12:56Z,2020-06-09T17:21:41Z,MERGED,True,10,0,1,https://github.com/isuruf,Pass --nvptx-short-ptr,2,[],https://github.com/pocl/pocl/pull/822,https://github.com/jrprice,3,https://github.com/pocl/pocl/pull/822#issuecomment-627955736,This makes the local/shared memory accesses using 32 bit pointers,Seems like a good idea to me. Looks like this flag was added in Clang 7.0.,True,{}
pocl/pocl,https://github.com/pocl/pocl,824,2020-05-13T14:34:48Z,2020-05-20T13:10:23Z,2020-05-24T05:07:52Z,MERGED,True,202,91,7,https://github.com/isuruf,Turn off automatic conversion of locals to args in CUDA,5,[],https://github.com/pocl/pocl/pull/824,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/824,"Turning it on prevents optimization opportunities.
Fixes #823","Turning it on prevents optimization opportunities.
Fixes #823",True,{}
pocl/pocl,https://github.com/pocl/pocl,824,2020-05-13T14:34:48Z,2020-05-20T13:10:23Z,2020-05-24T05:07:52Z,MERGED,True,202,91,7,https://github.com/isuruf,Turn off automatic conversion of locals to args in CUDA,5,[],https://github.com/pocl/pocl/pull/824,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/824#issuecomment-628041391,"Turning it on prevents optimization opportunities.
Fixes #823","I suppose there were no regressions after switching this and you tested with different numbers of OpenCL locals, dynamic and static? I do not have a CUDA env set up to test at this moment.",True,{}
pocl/pocl,https://github.com/pocl/pocl,824,2020-05-13T14:34:48Z,2020-05-20T13:10:23Z,2020-05-24T05:07:52Z,MERGED,True,202,91,7,https://github.com/isuruf,Turn off automatic conversion of locals to args in CUDA,5,[],https://github.com/pocl/pocl/pull/824,https://github.com/isuruf,3,https://github.com/pocl/pocl/pull/824#issuecomment-628055203,"Turning it on prevents optimization opportunities.
Fixes #823",There are some regressions. I'll have a look and mark this PR as ready when done.,True,{}
pocl/pocl,https://github.com/pocl/pocl,824,2020-05-13T14:34:48Z,2020-05-20T13:10:23Z,2020-05-24T05:07:52Z,MERGED,True,202,91,7,https://github.com/isuruf,Turn off automatic conversion of locals to args in CUDA,5,[],https://github.com/pocl/pocl/pull/824,https://github.com/isuruf,4,https://github.com/pocl/pocl/pull/824#issuecomment-629570668,"Turning it on prevents optimization opportunities.
Fixes #823","Here's what's this patch is doing.

Disables converting constant sized __local arrays to the extern block if there are no __local arguments.
If there are __local arguments, local arrays with constant size is stored at the beginning of the extern block with constant offsets. Dynamic sized ones come later and they are indexed with a constant + unsigned dynamic offset.

This helps with what I think is a pointer aliasing issue.",True,{}
pocl/pocl,https://github.com/pocl/pocl,824,2020-05-13T14:34:48Z,2020-05-20T13:10:23Z,2020-05-24T05:07:52Z,MERGED,True,202,91,7,https://github.com/isuruf,Turn off automatic conversion of locals to args in CUDA,5,[],https://github.com/pocl/pocl/pull/824,https://github.com/Oblomov,5,https://github.com/pocl/pocl/pull/824#issuecomment-629607348,"Turning it on prevents optimization opportunities.
Fixes #823","I haven't looked at the code yet, but from your last comment, the constant + dynamic offset sounds like the correct solution.
In CUDA, all extern __shared__ memory blocks have the same base pointer address, because they point to the area allocated by the third parameter in the CUDA kernel launch syntax kernelName<<<numBlocks, threadsPerBlock, dynShMemSizeInBytes, commandStream>>>(arguments). So yeah, it's not possible to convert __local arguments (i.e. dynamically sized LDS) in OpenCL to extern __shared__ “as is”: instead, some kind of transformation has to happen, and the offset cannot be constant because it depends on the sizing of the other dynamically allocated memory blocks (taking pointer alignment into consideration, of course).",True,{}
pocl/pocl,https://github.com/pocl/pocl,824,2020-05-13T14:34:48Z,2020-05-20T13:10:23Z,2020-05-24T05:07:52Z,MERGED,True,202,91,7,https://github.com/isuruf,Turn off automatic conversion of locals to args in CUDA,5,[],https://github.com/pocl/pocl/pull/824,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/824#issuecomment-630784548,"Turning it on prevents optimization opportunities.
Fixes #823",@jrprice does it look OK to you? I'm trying to setup pocl-cuda in my box so I can test it. Is there an expected working test suite I can run?,True,{}
pocl/pocl,https://github.com/pocl/pocl,824,2020-05-13T14:34:48Z,2020-05-20T13:10:23Z,2020-05-24T05:07:52Z,MERGED,True,202,91,7,https://github.com/isuruf,Turn off automatic conversion of locals to args in CUDA,5,[],https://github.com/pocl/pocl/pull/824,https://github.com/pjaaskel,7,https://github.com/pocl/pocl/pull/824#issuecomment-630786338,"Turning it on prevents optimization opportunities.
Fixes #823","Can you @isuruf update CHANGES please? Preferably with some speedup estimates from this update, which we can advertise in the next release.",True,{}
pocl/pocl,https://github.com/pocl/pocl,824,2020-05-13T14:34:48Z,2020-05-20T13:10:23Z,2020-05-24T05:07:52Z,MERGED,True,202,91,7,https://github.com/isuruf,Turn off automatic conversion of locals to args in CUDA,5,[],https://github.com/pocl/pocl/pull/824,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/824#issuecomment-630819686,"Turning it on prevents optimization opportunities.
Fixes #823","Also please try format-last-commit.sh, I see some suspicious style issues.",True,{}
pocl/pocl,https://github.com/pocl/pocl,826,2020-05-23T05:04:07Z,2020-05-23T18:51:47Z,2020-05-23T18:51:47Z,CLOSED,False,5,0,1,https://github.com/isuruf,Use a higher unroll threshold for non workgroup_pass devices like CUDA,1,[],https://github.com/pocl/pocl/pull/826,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/826,"Since POCL sets the unroll threshold at 
  
    
      pocl/lib/CL/pocl_llvm_utils.cc
    
    
        Lines 347 to 349
      in
      e64cc2a
    
  
  
    

        
          
           O = opts[""unroll-threshold""]; 
        

        
          
           assert(O && ""could not find LLVM option 'unroll-threshold'""); 
        

        
          
           O->addOccurrence(1, StringRef(""unroll-threshold""), StringRef(""1""), false); 
        
    
  

 to 1, there are some optimizations missed.
What's the reason for changing the default of the loop unroll threshold? I assumed it has something to do with CPU devices and therefore changed it only for devices like CUDA.
SHOC GEMM benchmark improvements on an NVIDIA Titan X
sgemm_n:        443.20%
sgemm_t:        151.69%
sgemm_n_pcie:   323.49%
sgemm_t_pcie:   110.75%
dgemm_n:        4.66%
dgemm_t:        0.07%
dgemm_n_pcie:   4.18%
dgemm_t_pcie:   0.12%

Fixes #825
Thanks to @mattwala for debugging this.
cc @inducer, @nchristensen","Since POCL sets the unroll threshold at 
  
    
      pocl/lib/CL/pocl_llvm_utils.cc
    
    
        Lines 347 to 349
      in
      e64cc2a
    
  
  
    

        
          
           O = opts[""unroll-threshold""]; 
        

        
          
           assert(O && ""could not find LLVM option 'unroll-threshold'""); 
        

        
          
           O->addOccurrence(1, StringRef(""unroll-threshold""), StringRef(""1""), false); 
        
    
  

 to 1, there are some optimizations missed.
What's the reason for changing the default of the loop unroll threshold? I assumed it has something to do with CPU devices and therefore changed it only for devices like CUDA.
SHOC GEMM benchmark improvements on an NVIDIA Titan X
sgemm_n:        443.20%
sgemm_t:        151.69%
sgemm_n_pcie:   323.49%
sgemm_t_pcie:   110.75%
dgemm_n:        4.66%
dgemm_t:        0.07%
dgemm_n_pcie:   4.18%
dgemm_t_pcie:   0.12%

Fixes #825
Thanks to @mattwala for debugging this.
cc @inducer, @nchristensen",True,{}
pocl/pocl,https://github.com/pocl/pocl,826,2020-05-23T05:04:07Z,2020-05-23T18:51:47Z,2020-05-23T18:51:47Z,CLOSED,False,5,0,1,https://github.com/isuruf,Use a higher unroll threshold for non workgroup_pass devices like CUDA,1,[],https://github.com/pocl/pocl/pull/826,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/826#issuecomment-632986980,"Since POCL sets the unroll threshold at 
  
    
      pocl/lib/CL/pocl_llvm_utils.cc
    
    
        Lines 347 to 349
      in
      e64cc2a
    
  
  
    

        
          
           O = opts[""unroll-threshold""]; 
        

        
          
           assert(O && ""could not find LLVM option 'unroll-threshold'""); 
        

        
          
           O->addOccurrence(1, StringRef(""unroll-threshold""), StringRef(""1""), false); 
        
    
  

 to 1, there are some optimizations missed.
What's the reason for changing the default of the loop unroll threshold? I assumed it has something to do with CPU devices and therefore changed it only for devices like CUDA.
SHOC GEMM benchmark improvements on an NVIDIA Titan X
sgemm_n:        443.20%
sgemm_t:        151.69%
sgemm_n_pcie:   323.49%
sgemm_t_pcie:   110.75%
dgemm_n:        4.66%
dgemm_t:        0.07%
dgemm_n_pcie:   4.18%
dgemm_t_pcie:   0.12%

Fixes #825
Thanks to @mattwala for debugging this.
cc @inducer, @nchristensen","Should the threshold be a setting per device? Currently it's set globally, but if there's a way to set it when we are compiling for a device, I can change the code, but I'll need help on how to set these options for a device.",True,{}
pocl/pocl,https://github.com/pocl/pocl,826,2020-05-23T05:04:07Z,2020-05-23T18:51:47Z,2020-05-23T18:51:47Z,CLOSED,False,5,0,1,https://github.com/isuruf,Use a higher unroll threshold for non workgroup_pass devices like CUDA,1,[],https://github.com/pocl/pocl/pull/826,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/826#issuecomment-632993744,"Since POCL sets the unroll threshold at 
  
    
      pocl/lib/CL/pocl_llvm_utils.cc
    
    
        Lines 347 to 349
      in
      e64cc2a
    
  
  
    

        
          
           O = opts[""unroll-threshold""]; 
        

        
          
           assert(O && ""could not find LLVM option 'unroll-threshold'""); 
        

        
          
           O->addOccurrence(1, StringRef(""unroll-threshold""), StringRef(""1""), false); 
        
    
  

 to 1, there are some optimizations missed.
What's the reason for changing the default of the loop unroll threshold? I assumed it has something to do with CPU devices and therefore changed it only for devices like CUDA.
SHOC GEMM benchmark improvements on an NVIDIA Titan X
sgemm_n:        443.20%
sgemm_t:        151.69%
sgemm_n_pcie:   323.49%
sgemm_t_pcie:   110.75%
dgemm_n:        4.66%
dgemm_t:        0.07%
dgemm_n_pcie:   4.18%
dgemm_t_pcie:   0.12%

Fixes #825
Thanks to @mattwala for debugging this.
cc @inducer, @nchristensen","Good job for tracking this out. I think we should try to remove the unroll threshold override instead though. I tracked the original reason for having it: In fe18b91 I've mentioned the implicit autovectorizer is passed the decision whether to unroll the loops or not.  Thus this might have effect to targets (CPUs) which use implicit autovectorization of work-groups.
However, unrolling small loops early should not be very harmful except for their icache footprint and the general strategy of pocl LLVM compilation going forwards is to try to remove any ""divergent"" optimization paths step by step to move towards LLVM upstream defaults, and finally upstream the remaining bits. Thus, the unroll settings used by the LLVM target should be used if there are no visible harm to some case. I'll just try to remove it and see if any of my test envs fail, we can treat any possible implicit WG vectorization performarnce regressions later.",True,{}
pocl/pocl,https://github.com/pocl/pocl,826,2020-05-23T05:04:07Z,2020-05-23T18:51:47Z,2020-05-23T18:51:47Z,CLOSED,False,5,0,1,https://github.com/isuruf,Use a higher unroll threshold for non workgroup_pass devices like CUDA,1,[],https://github.com/pocl/pocl/pull/826,https://github.com/isuruf,4,https://github.com/pocl/pocl/pull/826#issuecomment-633116604,"Since POCL sets the unroll threshold at 
  
    
      pocl/lib/CL/pocl_llvm_utils.cc
    
    
        Lines 347 to 349
      in
      e64cc2a
    
  
  
    

        
          
           O = opts[""unroll-threshold""]; 
        

        
          
           assert(O && ""could not find LLVM option 'unroll-threshold'""); 
        

        
          
           O->addOccurrence(1, StringRef(""unroll-threshold""), StringRef(""1""), false); 
        
    
  

 to 1, there are some optimizations missed.
What's the reason for changing the default of the loop unroll threshold? I assumed it has something to do with CPU devices and therefore changed it only for devices like CUDA.
SHOC GEMM benchmark improvements on an NVIDIA Titan X
sgemm_n:        443.20%
sgemm_t:        151.69%
sgemm_n_pcie:   323.49%
sgemm_t_pcie:   110.75%
dgemm_n:        4.66%
dgemm_t:        0.07%
dgemm_n_pcie:   4.18%
dgemm_t_pcie:   0.12%

Fixes #825
Thanks to @mattwala for debugging this.
cc @inducer, @nchristensen",459d0bb fixed the issue,True,{}
pocl/pocl,https://github.com/pocl/pocl,828,2020-05-23T19:05:28Z,2020-05-26T15:21:17Z,2020-05-26T15:21:17Z,MERGED,True,5,5,1,https://github.com/mattwala,Fix AttributeList creation,1,[],https://github.com/pocl/pocl/pull/828,https://github.com/mattwala,1,https://github.com/pocl/pocl/pull/828,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,829,2020-05-24T04:44:13Z,2020-05-28T07:43:19Z,2020-06-09T17:21:34Z,MERGED,True,0,5,1,https://github.com/isuruf,Enable regression tests on OSX,1,[],https://github.com/pocl/pocl/pull/829,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/829,I checked and these work fine on OSX.,I checked and these work fine on OSX.,True,{}
pocl/pocl,https://github.com/pocl/pocl,833,2020-05-25T21:00:30Z,2020-05-29T06:03:30Z,2020-05-29T06:03:34Z,CLOSED,False,131,4,8,https://github.com/isuruf,[WIP] Remove flatten-inline-all pass for device without autolocals_to_args,2,[],https://github.com/pocl/pocl/pull/833,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/833,"In CUDA, we don't convert autolocals to args and use a constant offset
for autolocals. To identify these, they shouldn't be marked as always
inline. This is a hack, but in order to properly fix this, we'll have
to identify the autolocals some other way.
Fixes #832","In CUDA, we don't convert autolocals to args and use a constant offset
for autolocals. To identify these, they shouldn't be marked as always
inline. This is a hack, but in order to properly fix this, we'll have
to identify the autolocals some other way.
Fixes #832",True,{}
pocl/pocl,https://github.com/pocl/pocl,833,2020-05-25T21:00:30Z,2020-05-29T06:03:30Z,2020-05-29T06:03:34Z,CLOSED,False,131,4,8,https://github.com/isuruf,[WIP] Remove flatten-inline-all pass for device without autolocals_to_args,2,[],https://github.com/pocl/pocl/pull/833,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/833#issuecomment-634149600,"In CUDA, we don't convert autolocals to args and use a constant offset
for autolocals. To identify these, they shouldn't be marked as always
inline. This is a hack, but in order to properly fix this, we'll have
to identify the autolocals some other way.
Fixes #832",Would it be much work to add that failing case to the regression test suite?,True,{}
pocl/pocl,https://github.com/pocl/pocl,833,2020-05-25T21:00:30Z,2020-05-29T06:03:30Z,2020-05-29T06:03:34Z,CLOSED,False,131,4,8,https://github.com/isuruf,[WIP] Remove flatten-inline-all pass for device without autolocals_to_args,2,[],https://github.com/pocl/pocl/pull/833,https://github.com/isuruf,3,https://github.com/pocl/pocl/pull/833#issuecomment-634783791,"In CUDA, we don't convert autolocals to args and use a constant offset
for autolocals. To identify these, they shouldn't be marked as always
inline. This is a hack, but in order to properly fix this, we'll have
to identify the autolocals some other way.
Fixes #832",I can add shoc as a tier1 test suite. The test case is Scan from shoc benchmark suite.,True,{'THUMBS_UP': ['https://github.com/pjaaskel']}
pocl/pocl,https://github.com/pocl/pocl,833,2020-05-25T21:00:30Z,2020-05-29T06:03:30Z,2020-05-29T06:03:34Z,CLOSED,False,131,4,8,https://github.com/isuruf,[WIP] Remove flatten-inline-all pass for device without autolocals_to_args,2,[],https://github.com/pocl/pocl/pull/833,https://github.com/isuruf,4,https://github.com/pocl/pocl/pull/833#issuecomment-635778251,"In CUDA, we don't convert autolocals to args and use a constant offset
for autolocals. To identify these, they shouldn't be marked as always
inline. This is a hack, but in order to properly fix this, we'll have
to identify the autolocals some other way.
Fixes #832",This is not the correct fix,True,{}
pocl/pocl,https://github.com/pocl/pocl,834,2020-05-26T19:33:44Z,2020-06-09T10:59:13Z,2020-06-09T17:21:05Z,MERGED,True,201,1,3,https://github.com/isuruf,CUDA: implement fill_buffer for pattern_size<=4,2,[],https://github.com/pocl/pocl/pull/834,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/834,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,834,2020-05-26T19:33:44Z,2020-06-09T10:59:13Z,2020-06-09T17:21:05Z,MERGED,True,201,1,3,https://github.com/isuruf,CUDA: implement fill_buffer for pattern_size<=4,2,[],https://github.com/pocl/pocl/pull/834,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/834#issuecomment-635429985,,Added a test.,True,{}
pocl/pocl,https://github.com/pocl/pocl,836,2020-05-27T04:31:24Z,2020-06-09T11:34:13Z,2020-06-09T17:20:45Z,MERGED,True,286,4,7,https://github.com/isuruf,"CUDA: Implement frexp, tgamma, ldexp, modf, remquo",3,[],https://github.com/pocl/pocl/pull/836,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/836,Fixes #835,Fixes #835,True,{}
pocl/pocl,https://github.com/pocl/pocl,836,2020-05-27T04:31:24Z,2020-06-09T11:34:13Z,2020-06-09T17:20:45Z,MERGED,True,286,4,7,https://github.com/isuruf,"CUDA: Implement frexp, tgamma, ldexp, modf, remquo",3,[],https://github.com/pocl/pocl/pull/836,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/836#issuecomment-635377860,Fixes #835,"@pjaaskel, the formatter doesn't like the new lines I've added.
It's suggesting the following formatting,
diff --git a/lib/kernel/templates.h b/lib/kernel/templates.h
index d9fd018c..e0d1df9a 100644
--- a/lib/kernel/templates.h
+++ b/lib/kernel/templates.h
@@ -1878,21 +1878,22 @@
   IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, VTYPE, __global)
 #define DEFINE_BUILTIN_V_VPV(NAME)                                            \
   __IF_FP16 (                                                                 \
-  half _CL_OVERLOADABLE _CL_READNONE NAME (half a, __private half *b)         \
-  {                                                                           \
-    /* use float builtin */                                                   \
-    __private float c;                                                        \
-    __private float r = __builtin_##NAME##f (a, &c);                          \
-    *b = c;                                                                   \
-    return r;                                                                 \
-  }                                                                           \
-  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, half, __local)                     \
-  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, half, __global)                    \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, half2, half, half, lo, hi)                   \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, half3, half2, half, lo, s2)                  \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, half4, half2, half2, lo, hi)                 \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, half8, half4, half4, lo, hi)                 \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, half16, half8, half8, lo, hi))               \
+      half _CL_OVERLOADABLE _CL_READNONE NAME (half a, __private half *b) {   \
+        /* use float builtin */                                               \
+        __private float c;                                                    \
+        __private float r = __builtin_##NAME##f (a, &c);                      \
+        *b = c;                                                               \
+        return r;                                                             \
+      } IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, half, __local)               \
+          IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, half, __global)            \
+              IMPLEMENT_BUILTIN_V_VPV (NAME, half2, half, half, lo, hi)       \
+                  IMPLEMENT_BUILTIN_V_VPV (NAME, half3, half2, half, lo, s2)  \
+                      IMPLEMENT_BUILTIN_V_VPV (NAME, half4, half2, half2, lo, \
+                                               hi)                            \
+                          IMPLEMENT_BUILTIN_V_VPV (NAME, half8, half4, half4, \
+                                                   lo, hi)                    \
+                              IMPLEMENT_BUILTIN_V_VPV (NAME, half16, half8,   \
+                                                       half8, lo, hi))        \
   float _CL_OVERLOADABLE _CL_READNONE NAME (float a, __private float *b)      \
   {                                                                           \
     return __builtin_##NAME##f (a, b);                                        \
@@ -1905,17 +1906,20 @@
   IMPLEMENT_BUILTIN_V_VPV (NAME, float8, float4, float4, lo, hi)              \
   IMPLEMENT_BUILTIN_V_VPV (NAME, float16, float8, float8, lo, hi)             \
   __IF_FP64 (                                                                 \
-  double _CL_OVERLOADABLE _CL_READNONE NAME (double a, __private double *b)   \
-  {                                                                           \
-    return __builtin_##NAME (a, b);                                           \
-  }                                                                           \
-  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, double, __local)                   \
-  IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, double, __global)                  \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, double2, double, double, lo, hi)             \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, double3, double2, double, lo, s2)            \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, double4, double2, double2, lo, hi)           \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, double8, double4, double4, lo, hi)           \
-  IMPLEMENT_BUILTIN_V_VPV (NAME, double16, double8, double8, lo, hi))
+      double _CL_OVERLOADABLE _CL_READNONE NAME (double a,                    \
+                                                 __private double *b) {       \
+        return __builtin_##NAME (a, b);                                       \
+      } IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, double, __local)             \
+          IMPLEMENT_BUILTIN_V_VPV_ADDRSPACE (NAME, double, __global)          \
+              IMPLEMENT_BUILTIN_V_VPV (NAME, double2, double, double, lo, hi) \
+                  IMPLEMENT_BUILTIN_V_VPV (NAME, double3, double2, double,    \
+                                           lo, s2)                            \
+                      IMPLEMENT_BUILTIN_V_VPV (NAME, double4, double2,        \
+                                               double2, lo, hi)               \
+                          IMPLEMENT_BUILTIN_V_VPV (NAME, double8, double4,    \
+                                                   double4, lo, hi)           \
+                              IMPLEMENT_BUILTIN_V_VPV (                       \
+                                  NAME, double16, double8, double8, lo, hi))
 
 #define IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE(NAME, VTYPE, JTYPE, ADDRSPACE)     \
   VTYPE __attribute__ ((overloadable))                                        \
@@ -1941,21 +1945,23 @@
   IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, VTYPE, JTYPE, __global)
 #define DEFINE_BUILTIN_V_VVPJ(NAME)                                           \
   __IF_FP16 (                                                                 \
-  half _CL_OVERLOADABLE _CL_READNONE NAME (half a, half b, int *c)            \
-  {                                                                           \
-    /* use float builtin */                                                   \
-    __private int d;                                                          \
-    __private float r = __builtin_##NAME##f (a, b, &d);                       \
-    *c = d;                                                                   \
-    return r;                                                                 \
-  }                                                                           \
-  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, half, int, __local)               \
-  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, half, int, __global)              \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half2, int2, int, int, lo, hi)              \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half3, int3, int2, int, lo, s2)             \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half4, int4, int2, int2, lo, hi)            \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half8, int8, int4, int4, lo, hi)            \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half16, int16, int8, int8, lo, hi))         \
+      half _CL_OVERLOADABLE _CL_READNONE NAME (half a, half b, int *c) {      \
+        /* use float builtin */                                               \
+        __private int d;                                                      \
+        __private float r = __builtin_##NAME##f (a, b, &d);                   \
+        *c = d;                                                               \
+        return r;                                                             \
+      } IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, half, int, __local)         \
+          IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, half, int, __global)      \
+              IMPLEMENT_BUILTIN_V_VVPJ (NAME, half2, int2, int, int, lo, hi)  \
+                  IMPLEMENT_BUILTIN_V_VVPJ (NAME, half3, int3, int2, int, lo, \
+                                            s2)                               \
+                      IMPLEMENT_BUILTIN_V_VVPJ (NAME, half4, int4, int2,      \
+                                                int2, lo, hi)                 \
+                          IMPLEMENT_BUILTIN_V_VVPJ (NAME, half8, int8, int4,  \
+                                                    int4, lo, hi)             \
+                              IMPLEMENT_BUILTIN_V_VVPJ (NAME, half16, int16,  \
+                                                        int8, int8, lo, hi))  \
   float _CL_OVERLOADABLE _CL_READNONE NAME (float a, float b, int *c)         \
   {                                                                           \
     return __builtin_##NAME##f (a, b, c);                                     \
@@ -1968,17 +1974,21 @@
   IMPLEMENT_BUILTIN_V_VVPJ (NAME, float8, int8, int4, int4, lo, hi)           \
   IMPLEMENT_BUILTIN_V_VVPJ (NAME, float16, int16, int8, int8, lo, hi)         \
   __IF_FP64 (                                                                 \
-  double _CL_OVERLOADABLE _CL_READNONE NAME (double a, double b, int *c)      \
-  {                                                                           \
-    return __builtin_##NAME (a, b, c);                                        \
-  }                                                                           \
-  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, double, int, __local)             \
-  IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, double, int, __global)            \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double2, int2, int, int, lo, hi)            \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double3, int3, int2, int, lo, s2)           \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double4, int4, int2, int2, lo, hi)          \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double8, int8, int4, int4, lo, hi)          \
-  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double16, int16, int8, int8, lo, hi))
+      double _CL_OVERLOADABLE _CL_READNONE NAME (double a, double b,          \
+                                                 int *c) {                    \
+        return __builtin_##NAME (a, b, c);                                    \
+      } IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, double, int, __local)       \
+          IMPLEMENT_BUILTIN_V_VVPJ_ADDRSPACE (NAME, double, int, __global)    \
+              IMPLEMENT_BUILTIN_V_VVPJ (NAME, double2, int2, int, int, lo,    \
+                                        hi)                                   \
+                  IMPLEMENT_BUILTIN_V_VVPJ (NAME, double3, int3, int2, int,   \
+                                            lo, s2)                           \
+                      IMPLEMENT_BUILTIN_V_VVPJ (NAME, double4, int4, int2,    \
+                                                int2, lo, hi)                 \
+                          IMPLEMENT_BUILTIN_V_VVPJ (NAME, double8, int8,      \
+                                                    int4, int4, lo, hi)       \
+                              IMPLEMENT_BUILTIN_V_VVPJ (                      \
+                                  NAME, double16, int16, int8, int8, lo, hi))
 
 #define IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE(NAME, VTYPE, JTYPE, ADDRSPACE)      \
   VTYPE __attribute__ ((overloadable)) NAME (VTYPE a, ADDRSPACE JTYPE *c)     \
@@ -2003,21 +2013,23 @@
   IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, VTYPE, JTYPE, __global)
 #define DEFINE_BUILTIN_V_VPJ(NAME)                                            \
   __IF_FP16 (                                                                 \
-  half _CL_OVERLOADABLE _CL_READNONE NAME (half a, int *c)                    \
-  {                                                                           \
-    /* use float builtin */                                                   \
-    __private int d;                                                          \
-    __private float r = __builtin_##NAME##f (a, &d);                          \
-    *c = d;                                                                   \
-    return r;                                                                 \
-  }                                                                           \
-  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, half, int, __local)                \
-  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, half, int, __global)               \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, half2, int2, int, int, lo, hi)               \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, half3, int3, int2, int, lo, s2)              \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, half4, int4, int2, int2, lo, hi)             \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, half8, int8, int4, int4, lo, hi)             \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, half16, int16, int8, int8, lo, hi))          \
+      half _CL_OVERLOADABLE _CL_READNONE NAME (half a, int *c) {              \
+        /* use float builtin */                                               \
+        __private int d;                                                      \
+        __private float r = __builtin_##NAME##f (a, &d);                      \
+        *c = d;                                                               \
+        return r;                                                             \
+      } IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, half, int, __local)          \
+          IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, half, int, __global)       \
+              IMPLEMENT_BUILTIN_V_VPJ (NAME, half2, int2, int, int, lo, hi)   \
+                  IMPLEMENT_BUILTIN_V_VPJ (NAME, half3, int3, int2, int, lo,  \
+                                           s2)                                \
+                      IMPLEMENT_BUILTIN_V_VPJ (NAME, half4, int4, int2, int2, \
+                                               lo, hi)                        \
+                          IMPLEMENT_BUILTIN_V_VPJ (NAME, half8, int8, int4,   \
+                                                   int4, lo, hi)              \
+                              IMPLEMENT_BUILTIN_V_VPJ (NAME, half16, int16,   \
+                                                       int8, int8, lo, hi))   \
   float _CL_OVERLOADABLE _CL_READNONE NAME (float a, int *c)                  \
   {                                                                           \
     return __builtin_##NAME##f (a, c);                                        \
@@ -2030,17 +2042,19 @@
   IMPLEMENT_BUILTIN_V_VPJ (NAME, float8, int8, int4, int4, lo, hi)            \
   IMPLEMENT_BUILTIN_V_VPJ (NAME, float16, int16, int8, int8, lo, hi)          \
   __IF_FP64 (                                                                 \
-  double _CL_OVERLOADABLE _CL_READNONE NAME (double a, int *c)                \
-  {                                                                           \
-    return __builtin_##NAME (a, c);                                           \
-  }                                                                           \
-  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, double, int, __local)              \
-  IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, double, int, __global)             \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, double2, int2, int, int, lo, hi)             \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, double3, int3, int2, int, lo, s2)            \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, double4, int4, int2, int2, lo, hi)           \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, double8, int8, int4, int4, lo, hi)           \
-  IMPLEMENT_BUILTIN_V_VPJ (NAME, double16, int16, int8, int8, lo, hi))
+      double _CL_OVERLOADABLE _CL_READNONE NAME (double a, int *c) {          \
+        return __builtin_##NAME (a, c);                                       \
+      } IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, double, int, __local)        \
+          IMPLEMENT_BUILTIN_V_VPJ_ADDRSPACE (NAME, double, int, __global)     \
+              IMPLEMENT_BUILTIN_V_VPJ (NAME, double2, int2, int, int, lo, hi) \
+                  IMPLEMENT_BUILTIN_V_VPJ (NAME, double3, int3, int2, int,    \
+                                           lo, s2)                            \
+                      IMPLEMENT_BUILTIN_V_VPJ (NAME, double4, int4, int2,     \
+                                               int2, lo, hi)                  \
+                          IMPLEMENT_BUILTIN_V_VPJ (NAME, double8, int8, int4, \
+                                                   int4, lo, hi)              \
+                              IMPLEMENT_BUILTIN_V_VPJ (NAME, double16, int16, \
+                                                       int8, int8, lo, hi))
 
 #define __SINGLE_WI                             \
     if (get_local_id(0) == 0 &&                 \",True,{}
pocl/pocl,https://github.com/pocl/pocl,836,2020-05-27T04:31:24Z,2020-06-09T11:34:13Z,2020-06-09T17:20:45Z,MERGED,True,286,4,7,https://github.com/isuruf,"CUDA: Implement frexp, tgamma, ldexp, modf, remquo",3,[],https://github.com/pocl/pocl/pull/836,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/836#issuecomment-635775255,Fixes #835,"@pjaaskel, the formatter doesn't like the new lines I've added.

Yeah, that's what I guessed: the macro magic is too complex for it. So, pls just revert it manually for now.",True,{}
pocl/pocl,https://github.com/pocl/pocl,837,2020-05-29T16:33:43Z,2020-05-29T21:22:54Z,2020-05-29T21:23:00Z,CLOSED,False,89,104,7,https://github.com/isuruf,Fix kernels with automatic locals and function arguments,2,[],https://github.com/pocl/pocl/pull/837,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/837,"Previously autolocal_offset was not persisted to disk and therefore
kernels failed with an invalid memory access error when the cache was
used.","Previously autolocal_offset was not persisted to disk and therefore
kernels failed with an invalid memory access error when the cache was
used.",True,{}
pocl/pocl,https://github.com/pocl/pocl,837,2020-05-29T16:33:43Z,2020-05-29T21:22:54Z,2020-05-29T21:23:00Z,CLOSED,False,89,104,7,https://github.com/isuruf,Fix kernels with automatic locals and function arguments,2,[],https://github.com/pocl/pocl/pull/837,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/837#issuecomment-636198146,"Previously autolocal_offset was not persisted to disk and therefore
kernels failed with an invalid memory access error when the cache was
used.",This is still not the correct fix. I'll revert the automatic locals patch until I can come up with a PR that doesn't break correctness.,True,{}
pocl/pocl,https://github.com/pocl/pocl,838,2020-05-29T22:11:13Z,2020-07-03T08:38:46Z,2020-07-03T17:21:35Z,MERGED,True,175,183,13,https://github.com/isuruf,CUDA: Only convert autolocals to args if there are local function args,3,[],https://github.com/pocl/pocl/pull/838,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/838,"This PR reverts the previous PR and modifies the AutomaticLocals pass to have an optional behaviour of only converting if there are local function args.
After multiple tries, I couldn't get the automatic locals + local function args to work correctly, and those kernels might have bad performance, but correctness is more important.
Fixes #832","This PR reverts the previous PR and modifies the AutomaticLocals pass to have an optional behaviour of only converting if there are local function args.
After multiple tries, I couldn't get the automatic locals + local function args to work correctly, and those kernels might have bad performance, but correctness is more important.
Fixes #832",True,{}
pocl/pocl,https://github.com/pocl/pocl,838,2020-05-29T22:11:13Z,2020-07-03T08:38:46Z,2020-07-03T17:21:35Z,MERGED,True,175,183,13,https://github.com/isuruf,CUDA: Only convert autolocals to args if there are local function args,3,[],https://github.com/pocl/pocl/pull/838,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/838#issuecomment-636215802,"This PR reverts the previous PR and modifies the AutomaticLocals pass to have an optional behaviour of only converting if there are local function args.
After multiple tries, I couldn't get the automatic locals + local function args to work correctly, and those kernels might have bad performance, but correctness is more important.
Fixes #832",Performance of GEMM benchmark in SHOC is not affected by this change as it doesn't use local function args.,True,{}
pocl/pocl,https://github.com/pocl/pocl,838,2020-05-29T22:11:13Z,2020-07-03T08:38:46Z,2020-07-03T17:21:35Z,MERGED,True,175,183,13,https://github.com/isuruf,CUDA: Only convert autolocals to args if there are local function args,3,[],https://github.com/pocl/pocl/pull/838,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/838#issuecomment-636283064,"This PR reverts the previous PR and modifies the AutomaticLocals pass to have an optional behaviour of only converting if there are local function args.
After multiple tries, I couldn't get the automatic locals + local function args to work correctly, and those kernels might have bad performance, but correctness is more important.
Fixes #832",What is the symptom of the breakage? Wrong results or crash?,True,{}
pocl/pocl,https://github.com/pocl/pocl,838,2020-05-29T22:11:13Z,2020-07-03T08:38:46Z,2020-07-03T17:21:35Z,MERGED,True,175,183,13,https://github.com/isuruf,CUDA: Only convert autolocals to args if there are local function args,3,[],https://github.com/pocl/pocl/pull/838,https://github.com/isuruf,4,https://github.com/pocl/pocl/pull/838#issuecomment-636319679,"This PR reverts the previous PR and modifies the AutomaticLocals pass to have an optional behaviour of only converting if there are local function args.
After multiple tries, I couldn't get the automatic locals + local function args to work correctly, and those kernels might have bad performance, but correctness is more important.
Fixes #832","Wrong results in the case of #832
Another issue is that if we have both autolocals and local function arguments, we need to make it one extern block, but the optimizer might have demoted the ""lllvm global"" variable to the function scope and may hvae run other optimizations. Therefore we don't see the autolocal ""llvm global"" variable when we are generating code.",True,{}
pocl/pocl,https://github.com/pocl/pocl,838,2020-05-29T22:11:13Z,2020-07-03T08:38:46Z,2020-07-03T17:21:35Z,MERGED,True,175,183,13,https://github.com/isuruf,CUDA: Only convert autolocals to args if there are local function args,3,[],https://github.com/pocl/pocl/pull/838,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/838#issuecomment-637364877,"This PR reverts the previous PR and modifies the AutomaticLocals pass to have an optional behaviour of only converting if there are local function args.
After multiple tries, I couldn't get the automatic locals + local function args to work correctly, and those kernels might have bad performance, but correctness is more important.
Fixes #832","Another issue is that if we have both autolocals and local function arguments, we need to make it one extern block, but the optimizer might have demoted the ""lllvm global"" variable to the function scope and may hvae run other optimizations. Therefore we don't see the autolocal ""llvm global"" variable when we are generating code.

OK, I think you need a new automatic locals handing mode for this. AutomaticLocals::processAutomaticLocals(Function *F) in AutomaticLocals.cc is where it does the conversion from the LLVM global placeholders to function arguments.",True,{}
pocl/pocl,https://github.com/pocl/pocl,838,2020-05-29T22:11:13Z,2020-07-03T08:38:46Z,2020-07-03T17:21:35Z,MERGED,True,175,183,13,https://github.com/isuruf,CUDA: Only convert autolocals to args if there are local function args,3,[],https://github.com/pocl/pocl/pull/838,https://github.com/isuruf,6,https://github.com/pocl/pocl/pull/838#issuecomment-651971583,"This PR reverts the previous PR and modifies the AutomaticLocals pass to have an optional behaviour of only converting if there are local function args.
After multiple tries, I couldn't get the automatic locals + local function args to work correctly, and those kernels might have bad performance, but correctness is more important.
Fixes #832",Ping on this,True,{}
pocl/pocl,https://github.com/pocl/pocl,838,2020-05-29T22:11:13Z,2020-07-03T08:38:46Z,2020-07-03T17:21:35Z,MERGED,True,175,183,13,https://github.com/isuruf,CUDA: Only convert autolocals to args if there are local function args,3,[],https://github.com/pocl/pocl/pull/838,https://github.com/isuruf,7,https://github.com/pocl/pocl/pull/838#issuecomment-653160389,"This PR reverts the previous PR and modifies the AutomaticLocals pass to have an optional behaviour of only converting if there are local function args.
After multiple tries, I couldn't get the automatic locals + local function args to work correctly, and those kernels might have bad performance, but correctness is more important.
Fixes #832","In addition to the comments above, does this PR add new passing test cases?

No, it fixes a regression from one of my previous PRs.
I'll add the SHOC benchmarks as a tier 1 testsuite (which was where this regression was noticed) in a follow up PR.",True,{}
pocl/pocl,https://github.com/pocl/pocl,838,2020-05-29T22:11:13Z,2020-07-03T08:38:46Z,2020-07-03T17:21:35Z,MERGED,True,175,183,13,https://github.com/isuruf,CUDA: Only convert autolocals to args if there are local function args,3,[],https://github.com/pocl/pocl/pull/838,https://github.com/isuruf,8,https://github.com/pocl/pocl/pull/838#issuecomment-653628981,"This PR reverts the previous PR and modifies the AutomaticLocals pass to have an optional behaviour of only converting if there are local function args.
After multiple tries, I couldn't get the automatic locals + local function args to work correctly, and those kernels might have bad performance, but correctness is more important.
Fixes #832",Thanks,True,{}
pocl/pocl,https://github.com/pocl/pocl,839,2020-05-31T12:16:17Z,2020-06-09T14:23:58Z,2020-06-09T17:20:54Z,MERGED,True,9,4,1,https://github.com/isuruf,Support ppc64le (power8 and power9) in KERNELLIB_HOST_CPU_VARIANTS,1,[],https://github.com/pocl/pocl/pull/839,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/839,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,842,2020-06-13T09:59:40Z,2020-06-16T11:01:08Z,2020-06-16T11:01:08Z,MERGED,True,11,0,4,https://github.com/Kazhuu,Print loop vertorizer remarks when using poclcc,1,[],https://github.com/pocl/pocl/pull/842,https://github.com/Kazhuu,1,https://github.com/pocl/pocl/pull/842,"If POCL_VECTORIZER_REMARKS environment variable is set, print vectorizer remarks. Fixes issue #613","If POCL_VECTORIZER_REMARKS environment variable is set, print vectorizer remarks. Fixes issue #613",True,{}
pocl/pocl,https://github.com/pocl/pocl,842,2020-06-13T09:59:40Z,2020-06-16T11:01:08Z,2020-06-16T11:01:08Z,MERGED,True,11,0,4,https://github.com/Kazhuu,Print loop vertorizer remarks when using poclcc,1,[],https://github.com/pocl/pocl/pull/842,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/842#issuecomment-643601404,"If POCL_VECTORIZER_REMARKS environment variable is set, print vectorizer remarks. Fixes issue #613",Can you make a mention of this fix in CHANGES and and yourself to the list of CREDITS? Thanks.,True,{}
pocl/pocl,https://github.com/pocl/pocl,843,2020-06-22T14:40:30Z,2020-06-26T09:29:06Z,2020-06-26T09:29:07Z,MERGED,True,41,3,4,https://github.com/KOLANICH,Fixing llvm11 support due to recent changes:,1,[],https://github.com/pocl/pocl/pull/843,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/843,"llvm/llvm-project@4f04db4
llvm/llvm-project@a58b62b
llvm/llvm-project@4aae4e3
.","llvm/llvm-project@4f04db4
llvm/llvm-project@a58b62b
llvm/llvm-project@4aae4e3
.",True,{}
pocl/pocl,https://github.com/pocl/pocl,843,2020-06-22T14:40:30Z,2020-06-26T09:29:06Z,2020-06-26T09:29:07Z,MERGED,True,41,3,4,https://github.com/KOLANICH,Fixing llvm11 support due to recent changes:,1,[],https://github.com/pocl/pocl/pull/843,https://github.com/KOLANICH,2,https://github.com/pocl/pocl/pull/843#issuecomment-649678190,"llvm/llvm-project@4f04db4
llvm/llvm-project@a58b62b
llvm/llvm-project@4aae4e3
.",Done,True,{}
pocl/pocl,https://github.com/pocl/pocl,844,2020-06-22T14:57:04Z,2020-06-25T16:26:05Z,2020-06-25T17:50:22Z,MERGED,True,1,1,1,https://github.com/KOLANICH,Fixed packaging.,1,[],https://github.com/pocl/pocl/pull/844,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/844,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,846,2020-07-03T17:31:41Z,2020-07-30T14:05:10Z,2020-07-30T14:05:10Z,MERGED,True,26,21,8,https://github.com/isuruf,Rename pocl_autolocals_to_args_type to strategy,2,[],https://github.com/pocl/pocl/pull/846,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/846,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,847,2020-07-03T17:33:24Z,2020-07-16T19:03:54Z,2020-07-16T19:03:54Z,MERGED,True,128,3,7,https://github.com/isuruf,Add shoc tier1 test suite,1,[],https://github.com/pocl/pocl/pull/847,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/847,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,848,2020-07-07T12:04:28Z,2020-09-21T10:45:35Z,2020-09-21T10:45:35Z,MERGED,True,281,0,10,https://github.com/KOLANICH,Added some hardening.,1,[],https://github.com/pocl/pocl/pull/848,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/848,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,848,2020-07-07T12:04:28Z,2020-09-21T10:45:35Z,2020-09-21T10:45:35Z,MERGED,True,281,0,10,https://github.com/KOLANICH,Added some hardening.,1,[],https://github.com/pocl/pocl/pull/848,https://github.com/KOLANICH,2,https://github.com/pocl/pocl/pull/848#issuecomment-659479377,,"Can you add documentation to the sphinx documentation on this build mode and what it adds?

I don't think it makes any sense. IMHO the stuff mentioned there shouldn't be explicitly mentioned. IMHO it should be the defaults of all the compilers, and if someone wants to opt out, he needs to do it explicitly.",True,{}
pocl/pocl,https://github.com/pocl/pocl,850,2020-07-09T23:30:34Z,2020-07-16T13:25:43Z,2020-07-16T13:25:43Z,MERGED,True,142,27,6,https://github.com/mattwala,WI loops: ensure loads in parallel loops are safe to execute unconditionally,3,[],https://github.com/pocl/pocl/pull/850,https://github.com/mattwala,1,https://github.com/pocl/pocl/pull/850,"This change checks that loads in parallel loops are safe to execute
unconditionally before adding parallel loop metadata to the
instruction. LLVM makes this assumption. Without this change,
it's possible code can be generated that reads out of bounds
by the loop vectorizer.
See issue #757","This change checks that loads in parallel loops are safe to execute
unconditionally before adding parallel loop metadata to the
instruction. LLVM makes this assumption. Without this change,
it's possible code can be generated that reads out of bounds
by the loop vectorizer.
See issue #757",True,{}
pocl/pocl,https://github.com/pocl/pocl,850,2020-07-09T23:30:34Z,2020-07-16T13:25:43Z,2020-07-16T13:25:43Z,MERGED,True,142,27,6,https://github.com/mattwala,WI loops: ensure loads in parallel loops are safe to execute unconditionally,3,[],https://github.com/pocl/pocl/pull/850,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/850#issuecomment-656641376,"This change checks that loads in parallel loops are safe to execute
unconditionally before adding parallel loop metadata to the
instruction. LLVM makes this assumption. Without this change,
it's possible code can be generated that reads out of bounds
by the loop vectorizer.
See issue #757",Also this fix is worth mentioning in CHANGES.,True,{}
pocl/pocl,https://github.com/pocl/pocl,850,2020-07-09T23:30:34Z,2020-07-16T13:25:43Z,2020-07-16T13:25:43Z,MERGED,True,142,27,6,https://github.com/mattwala,WI loops: ensure loads in parallel loops are safe to execute unconditionally,3,[],https://github.com/pocl/pocl/pull/850,https://github.com/mattwala,3,https://github.com/pocl/pocl/pull/850#issuecomment-656985043,"This change checks that loads in parallel loops are safe to execute
unconditionally before adding parallel loop metadata to the
instruction. LLVM makes this assumption. Without this change,
it's possible code can be generated that reads out of bounds
by the loop vectorizer.
See issue #757","Also this fix is worth mentioning in CHANGES.

fe19914",True,{}
pocl/pocl,https://github.com/pocl/pocl,852,2020-07-20T07:36:13Z,2020-07-30T15:14:52Z,2020-07-30T15:14:52Z,MERGED,True,2,2,1,https://github.com/harishch4,TTASIM clEnqueueCopyBuffer offset correction,1,[],https://github.com/pocl/pocl/pull/852,https://github.com/harishch4,1,https://github.com/pocl/pocl/pull/852,"As per OpenCL1.2 spec offset calculation should be as below.
src_origin[0] + src_row_pitch * src_origin[1] + src_slice_pitch * src_origin[2]
dst_origin[0] + dst_row_pitch * dst_origin[1] + dst_slice_pitch * dst_origin[2]","As per OpenCL1.2 spec offset calculation should be as below.
src_origin[0] + src_row_pitch * src_origin[1] + src_slice_pitch * src_origin[2]
dst_origin[0] + dst_row_pitch * dst_origin[1] + dst_slice_pitch * dst_origin[2]",True,{}
pocl/pocl,https://github.com/pocl/pocl,854,2020-07-24T15:49:05Z,2020-07-30T16:14:40Z,2020-08-05T10:08:59Z,MERGED,True,19,2,4,https://github.com/KOLANICH,Initial LLVM 12 support,1,[],https://github.com/pocl/pocl/pull/854,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/854,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,855,2020-07-27T23:26:39Z,2020-08-19T08:49:52Z,2020-08-19T08:49:52Z,CLOSED,False,359,1,5,https://github.com/franz,Add documentation on debugging OpenCL applications with Pocl,9,[],https://github.com/pocl/pocl/pull/855,https://github.com/franz,1,https://github.com/pocl/pocl/pull/855,GDB part needs improvement,GDB part needs improvement,True,{}
pocl/pocl,https://github.com/pocl/pocl,855,2020-07-27T23:26:39Z,2020-08-19T08:49:52Z,2020-08-19T08:49:52Z,CLOSED,False,359,1,5,https://github.com/franz,Add documentation on debugging OpenCL applications with Pocl,9,[],https://github.com/pocl/pocl/pull/855,https://github.com/franz,2,https://github.com/pocl/pocl/pull/855#issuecomment-666307893,GDB part needs improvement,"OK, fixed pocl to PoCL etc, plus updated the GDB section with examples.
Stepping inside kernel in GDB is possible, though a little tricky; i've added an example for that too.",True,{}
pocl/pocl,https://github.com/pocl/pocl,855,2020-07-27T23:26:39Z,2020-08-19T08:49:52Z,2020-08-19T08:49:52Z,CLOSED,False,359,1,5,https://github.com/franz,Add documentation on debugging OpenCL applications with Pocl,9,[],https://github.com/pocl/pocl/pull/855,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/855#issuecomment-673390558,GDB part needs improvement,"Fails to build for LLVM 8.
FlattenGlobals.cc:117:58: error: ‘class llvm::Function’ has no member named ‘hasOptNone’; did you mean ‘hasSection’?
         if (pocl::Workgroup::isKernelToProcess(*f) && f->hasOptNone())
                                                          ^~~~~~~~~~
                                                          hasSection",True,{}
pocl/pocl,https://github.com/pocl/pocl,859,2020-08-06T10:05:29Z,2020-08-19T08:52:42Z,2020-08-19T08:52:42Z,MERGED,True,4,0,1,https://github.com/satcom886,Mention LLC_TRIPLE in the CMake options,1,[],https://github.com/pocl/pocl/pull/859,https://github.com/satcom886,1,https://github.com/pocl/pocl/pull/859,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,863,2020-08-25T23:20:24Z,2020-09-24T07:31:17Z,2020-09-24T07:31:17Z,MERGED,True,152,64,16,https://github.com/franz,next release (LLVM 11) fixes,11,[],https://github.com/pocl/pocl/pull/863,https://github.com/franz,1,https://github.com/pocl/pocl/pull/863,some fixes required for next pocl release,some fixes required for next pocl release,True,{}
pocl/pocl,https://github.com/pocl/pocl,869,2020-09-16T15:19:45Z,2020-09-21T12:01:31Z,2020-10-27T10:48:14Z,CLOSED,False,22,14,2,https://github.com/Kazhuu,Syncronization to previous events only in case of out-of-order queue,1,[],https://github.com/pocl/pocl/pull/869,https://github.com/Kazhuu,1,https://github.com/pocl/pocl/pull/869,"Using pocl with PolyBench gramschmidt kernel. Execution time is very high compared to normal CPU execution. Pocl execution takes around 44 seconds compared to CPU which only takes less than a second. Reason is use of barriers in the command queue which are synchronized to all previous commands in the queue. This change only does the synchronization if the command queue is out-of-order queue. Otherwise it defaults to binding to the last event when queue is in-order queue.
I moved last event binding to pocl_command_enqueue() function because I thought that where it should be with other event synchronizations.","Using pocl with PolyBench gramschmidt kernel. Execution time is very high compared to normal CPU execution. Pocl execution takes around 44 seconds compared to CPU which only takes less than a second. Reason is use of barriers in the command queue which are synchronized to all previous commands in the queue. This change only does the synchronization if the command queue is out-of-order queue. Otherwise it defaults to binding to the last event when queue is in-order queue.
I moved last event binding to pocl_command_enqueue() function because I thought that where it should be with other event synchronizations.",True,{}
pocl/pocl,https://github.com/pocl/pocl,869,2020-09-16T15:19:45Z,2020-09-21T12:01:31Z,2020-10-27T10:48:14Z,CLOSED,False,22,14,2,https://github.com/Kazhuu,Syncronization to previous events only in case of out-of-order queue,1,[],https://github.com/pocl/pocl/pull/869,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/869#issuecomment-693488757,"Using pocl with PolyBench gramschmidt kernel. Execution time is very high compared to normal CPU execution. Pocl execution takes around 44 seconds compared to CPU which only takes less than a second. Reason is use of barriers in the command queue which are synchronized to all previous commands in the queue. This change only does the synchronization if the command queue is out-of-order queue. Otherwise it defaults to binding to the last event when queue is in-order queue.
I moved last event binding to pocl_command_enqueue() function because I thought that where it should be with other event synchronizations.",Nice improvement! Can you add a note of this to CHANGES (with a mention of the speedup in this case) and yourself to CREDITS?,True,{}
pocl/pocl,https://github.com/pocl/pocl,869,2020-09-16T15:19:45Z,2020-09-21T12:01:31Z,2020-10-27T10:48:14Z,CLOSED,False,22,14,2,https://github.com/Kazhuu,Syncronization to previous events only in case of out-of-order queue,1,[],https://github.com/pocl/pocl/pull/869,https://github.com/Kazhuu,3,https://github.com/pocl/pocl/pull/869#issuecomment-693806956,"Using pocl with PolyBench gramschmidt kernel. Execution time is very high compared to normal CPU execution. Pocl execution takes around 44 seconds compared to CPU which only takes less than a second. Reason is use of barriers in the command queue which are synchronized to all previous commands in the queue. This change only does the synchronization if the command queue is out-of-order queue. Otherwise it defaults to binding to the last event when queue is in-order queue.
I moved last event binding to pocl_command_enqueue() function because I thought that where it should be with other event synchronizations.",I was already in CREDITS so omitted that one.,True,{}
pocl/pocl,https://github.com/pocl/pocl,870,2020-09-17T21:04:14Z,2020-09-21T15:18:10Z,2020-09-22T19:33:35Z,MERGED,True,1,1,1,https://github.com/matthiasdiener,Fix event timing data for CUDA,1,[],https://github.com/pocl/pocl/pull/870,https://github.com/matthiasdiener,1,https://github.com/pocl/pocl/pull/870,"In contrast to start and end, time_submit is not based on a CUDA event
and sometimes represents a time stamp that is afterstart and end, leading to bogus event timings.
See e.g. illinois-ceesd/mirgecom#71 (comment)","In contrast to start and end, time_submit is not based on a CUDA event
and sometimes represents a time stamp that is afterstart and end, leading to bogus event timings.
See e.g. illinois-ceesd/mirgecom#71 (comment)",True,{}
pocl/pocl,https://github.com/pocl/pocl,870,2020-09-17T21:04:14Z,2020-09-21T15:18:10Z,2020-09-22T19:33:35Z,MERGED,True,1,1,1,https://github.com/matthiasdiener,Fix event timing data for CUDA,1,[],https://github.com/pocl/pocl/pull/870,https://github.com/matthiasdiener,2,https://github.com/pocl/pocl/pull/870#issuecomment-694885458,"In contrast to start and end, time_submit is not based on a CUDA event
and sometimes represents a time stamp that is afterstart and end, leading to bogus event timings.
See e.g. illinois-ceesd/mirgecom#71 (comment)",CC @inducer @isuruf - this might be worth adding to pocl-feedstock.,True,{}
pocl/pocl,https://github.com/pocl/pocl,870,2020-09-17T21:04:14Z,2020-09-21T15:18:10Z,2020-09-22T19:33:35Z,MERGED,True,1,1,1,https://github.com/matthiasdiener,Fix event timing data for CUDA,1,[],https://github.com/pocl/pocl/pull/870,https://github.com/inducer,3,https://github.com/pocl/pocl/pull/870#issuecomment-694893350,"In contrast to start and end, time_submit is not based on a CUDA event
and sometimes represents a time stamp that is afterstart and end, leading to bogus event timings.
See e.g. illinois-ceesd/mirgecom#71 (comment)",@matthiasdiener Agree. Could you start a PR into https://github.com/conda-forge/pocl-feedstock/?,True,{}
pocl/pocl,https://github.com/pocl/pocl,870,2020-09-17T21:04:14Z,2020-09-21T15:18:10Z,2020-09-22T19:33:35Z,MERGED,True,1,1,1,https://github.com/matthiasdiener,Fix event timing data for CUDA,1,[],https://github.com/pocl/pocl/pull/870,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/870#issuecomment-696014412,"In contrast to start and end, time_submit is not based on a CUDA event
and sometimes represents a time stamp that is afterstart and end, leading to bogus event timings.
See e.g. illinois-ceesd/mirgecom#71 (comment)",@isuruf @jrprice does it look OK to merge?,True,{}
pocl/pocl,https://github.com/pocl/pocl,872,2020-09-22T07:06:52Z,2020-09-26T07:41:03Z,2020-09-26T07:52:06Z,MERGED,True,1,0,1,https://github.com/harishch4,CL_MEM_ASSOCIATED_MEMOBJECT Fix,1,[],https://github.com/pocl/pocl/pull/872,https://github.com/harishch4,1,https://github.com/pocl/pocl/pull/872,"This test case fails as memobj->parent, is not set if image type is CL_MEM_OBJECT_IMAGE1D_BUFFER","This test case fails as memobj->parent, is not set if image type is CL_MEM_OBJECT_IMAGE1D_BUFFER",True,{}
pocl/pocl,https://github.com/pocl/pocl,873,2020-09-23T16:06:32Z,2020-09-26T07:41:02Z,2020-10-27T10:48:55Z,MERGED,True,5,4,3,https://github.com/Kazhuu,Allow CMake option SINGLE_LLVM_LIB to be OFF without compiling errors,1,[],https://github.com/pocl/pocl/pull/873,https://github.com/Kazhuu,1,https://github.com/pocl/pocl/pull/873,"When pocl build files is generated with SINGLE_LLVM_LIB=OFF. LLVM_VERSION_MAJOR and MINOR are not set and during compilation following error messages happen:
...
../../include/_libclang_versions_checks.h:1:17: error: operator '<' has no left operand
    1 | #if CLANG_MAJOR < 12
      |                 ^
../../include/_libclang_versions_checks.h:5:17: error: operator '<' has no left operand
    5 | #if CLANG_MAJOR < 11
...

Move version parsing lines to LLVM.cmake instead for consistency.","When pocl build files is generated with SINGLE_LLVM_LIB=OFF. LLVM_VERSION_MAJOR and MINOR are not set and during compilation following error messages happen:
...
../../include/_libclang_versions_checks.h:1:17: error: operator '<' has no left operand
    1 | #if CLANG_MAJOR < 12
      |                 ^
../../include/_libclang_versions_checks.h:5:17: error: operator '<' has no left operand
    5 | #if CLANG_MAJOR < 11
...

Move version parsing lines to LLVM.cmake instead for consistency.",True,{}
pocl/pocl,https://github.com/pocl/pocl,878,2020-10-09T23:18:59Z,2020-11-24T18:10:51Z,2020-11-24T18:22:41Z,MERGED,True,73,0,2,https://github.com/isuruf,Initial release blog post,9,[],https://github.com/pocl/pocl/pull/878,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/878,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,879,2020-10-10T14:00:38Z,2020-10-26T07:57:32Z,2020-10-26T07:57:32Z,MERGED,True,5,0,3,https://github.com/lherschi,fix for issue #877,2,[],https://github.com/pocl/pocl/pull/879,https://github.com/lherschi,1,https://github.com/pocl/pocl/pull/879,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,879,2020-10-10T14:00:38Z,2020-10-26T07:57:32Z,2020-10-26T07:57:32Z,MERGED,True,5,0,3,https://github.com/lherschi,fix for issue #877,2,[],https://github.com/pocl/pocl/pull/879,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/879#issuecomment-706908835,,Can you add a short note of this fix to CHANGES and yourself to CREDITS? Thanks!,True,{}
pocl/pocl,https://github.com/pocl/pocl,880,2020-10-10T14:41:18Z,2020-10-26T09:25:56Z,2020-10-26T09:25:56Z,MERGED,True,6,4,1,https://github.com/blu,Avoid assert in get_llvm_cpu_name() when ENABLE_HOST_CPU_DEVICES=0 and llvm fails to recognize the host cpu,1,[],https://github.com/pocl/pocl/pull/880,https://github.com/blu,1,https://github.com/pocl/pocl/pull/880,"Configuring pocl with ENABLE_HOST_CPU_DEVICES=0 on a platform where llvm fails to recognize the host cpu leads to a situation where get_llvm_cpu_name() tries to get the host cpu from OCL_KERNEL_TARGET_CPU, which was never set in the first place. That produces an empty string which subsequently triggers an assert in get_llvm_cpu_name().","Configuring pocl with ENABLE_HOST_CPU_DEVICES=0 on a platform where llvm fails to recognize the host cpu leads to a situation where get_llvm_cpu_name() tries to get the host cpu from OCL_KERNEL_TARGET_CPU, which was never set in the first place. That produces an empty string which subsequently triggers an assert in get_llvm_cpu_name().",True,{}
pocl/pocl,https://github.com/pocl/pocl,882,2020-10-26T02:47:44Z,2020-10-26T10:49:41Z,2020-10-26T10:49:41Z,MERGED,True,9,12,5,https://github.com/new2f7,"Minor fixes (typos, indentation, ...)",4,[],https://github.com/pocl/pocl/pull/882,https://github.com/new2f7,1,https://github.com/pocl/pocl/pull/882,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,883,2020-10-27T06:21:19Z,2020-11-27T18:04:49Z,2020-11-27T18:04:49Z,MERGED,True,470,153,28,https://github.com/franz,More fixes for 1.6 release,15,[],https://github.com/pocl/pocl/pull/883,https://github.com/franz,1,https://github.com/pocl/pocl/pull/883,Fixes for 1.6 milestone issues,Fixes for 1.6 milestone issues,True,{}
pocl/pocl,https://github.com/pocl/pocl,886,2020-11-20T09:44:37Z,2020-11-28T08:28:17Z,2020-11-28T08:28:17Z,MERGED,True,33,11,2,https://github.com/Oblomov,Vendor ID for 3.0,3,[],https://github.com/pocl/pocl/pull/886,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/886,"OpenCL 3.0 has formalized the device vendor_id field, which should be the PCI vendor ID of the device if possible, and a value registered with Khronos (and automatically kept in sync cross-APIs) otherwise. This patchset tries to get the correct PCI vendor for both x86 and ARM CPUs based on the PCI root bus and/or the specific vendor, and prepares the ground (with a simple define that currently maps to the same value as before) for the Khronos registration as fall back.","OpenCL 3.0 has formalized the device vendor_id field, which should be the PCI vendor ID of the device if possible, and a value registered with Khronos (and automatically kept in sync cross-APIs) otherwise. This patchset tries to get the correct PCI vendor for both x86 and ARM CPUs based on the PCI root bus and/or the specific vendor, and prepares the ground (with a simple define that currently maps to the same value as before) for the Khronos registration as fall back.",True,{}
pocl/pocl,https://github.com/pocl/pocl,886,2020-11-20T09:44:37Z,2020-11-28T08:28:17Z,2020-11-28T08:28:17Z,MERGED,True,33,11,2,https://github.com/Oblomov,Vendor ID for 3.0,3,[],https://github.com/pocl/pocl/pull/886,https://github.com/Oblomov,2,https://github.com/pocl/pocl/pull/886#issuecomment-731292659,"OpenCL 3.0 has formalized the device vendor_id field, which should be the PCI vendor ID of the device if possible, and a value registered with Khronos (and automatically kept in sync cross-APIs) otherwise. This patchset tries to get the correct PCI vendor for both x86 and ARM CPUs based on the PCI root bus and/or the specific vendor, and prepares the ground (with a simple define that currently maps to the same value as before) for the Khronos registration as fall back.","Sorry for not checking the patches first, I'll give clang-format-script a run.
For the vendor ID I don't know. Mesa has one too, so I assume FLOSS projects can have one too 8-)",True,{}
pocl/pocl,https://github.com/pocl/pocl,886,2020-11-20T09:44:37Z,2020-11-28T08:28:17Z,2020-11-28T08:28:17Z,MERGED,True,33,11,2,https://github.com/Oblomov,Vendor ID for 3.0,3,[],https://github.com/pocl/pocl/pull/886,https://github.com/Oblomov,3,https://github.com/pocl/pocl/pull/886#issuecomment-731298919,"OpenCL 3.0 has formalized the device vendor_id field, which should be the PCI vendor ID of the device if possible, and a value registered with Khronos (and automatically kept in sync cross-APIs) otherwise. This patchset tries to get the correct PCI vendor for both x86 and ARM CPUs based on the PCI root bus and/or the specific vendor, and prepares the ground (with a simple define that currently maps to the same value as before) for the Khronos registration as fall back.",The format checks end up requiring some whitespace changes even in places where I just put stuff in the middle —should I proceed and accept the changes anyway?,True,{}
pocl/pocl,https://github.com/pocl/pocl,886,2020-11-20T09:44:37Z,2020-11-28T08:28:17Z,2020-11-28T08:28:17Z,MERGED,True,33,11,2,https://github.com/Oblomov,Vendor ID for 3.0,3,[],https://github.com/pocl/pocl/pull/886,https://github.com/Oblomov,4,https://github.com/pocl/pocl/pull/886#issuecomment-731302718,"OpenCL 3.0 has formalized the device vendor_id field, which should be the PCI vendor ID of the device if possible, and a value registered with Khronos (and automatically kept in sync cross-APIs) otherwise. This patchset tries to get the correct PCI vendor for both x86 and ARM CPUs based on the PCI root bus and/or the specific vendor, and prepares the ground (with a simple define that currently maps to the same value as before) for the Khronos registration as fall back.","I think this fixed the obvious whitespace issues, but I think the formatter still needs some tuning ;-)",True,{}
pocl/pocl,https://github.com/pocl/pocl,886,2020-11-20T09:44:37Z,2020-11-28T08:28:17Z,2020-11-28T08:28:17Z,MERGED,True,33,11,2,https://github.com/Oblomov,Vendor ID for 3.0,3,[],https://github.com/pocl/pocl/pull/886,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/886#issuecomment-731521379,"OpenCL 3.0 has formalized the device vendor_id field, which should be the PCI vendor ID of the device if possible, and a value registered with Khronos (and automatically kept in sync cross-APIs) otherwise. This patchset tries to get the correct PCI vendor for both x86 and ARM CPUs based on the PCI root bus and/or the specific vendor, and prepares the ground (with a simple define that currently maps to the same value as before) for the Khronos registration as fall back.","Yes, the script is new and would use tuning from someone who knows the quirks of clang-format. https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VkVendorId.html I see Mesa there, yes, I'll ask Khronos how we could get pocl there too.",True,{}
pocl/pocl,https://github.com/pocl/pocl,887,2020-11-29T01:01:19Z,2021-02-24T07:45:05Z,2021-02-24T14:43:16Z,MERGED,True,36,57,5,https://github.com/isuruf,Support cross compiling pocl,1,[],https://github.com/pocl/pocl/pull/887,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/887,I'm trying to cross compile for macos-arm64 from macos-x86_64.,I'm trying to cross compile for macos-arm64 from macos-x86_64.,True,{'THUMBS_UP': ['https://github.com/inducer']}
pocl/pocl,https://github.com/pocl/pocl,887,2020-11-29T01:01:19Z,2021-02-24T07:45:05Z,2021-02-24T14:43:16Z,MERGED,True,36,57,5,https://github.com/isuruf,Support cross compiling pocl,1,[],https://github.com/pocl/pocl/pull/887,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/887#issuecomment-768284055,I'm trying to cross compile for macos-arm64 from macos-x86_64.,This needs to be tested on an FPGA SoC with an LLVM-less build (the original use case in our group).,True,{}
pocl/pocl,https://github.com/pocl/pocl,887,2020-11-29T01:01:19Z,2021-02-24T07:45:05Z,2021-02-24T14:43:16Z,MERGED,True,36,57,5,https://github.com/isuruf,Support cross compiling pocl,1,[],https://github.com/pocl/pocl/pull/887,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/887#issuecomment-768285583,I'm trying to cross compile for macos-arm64 from macos-x86_64.,@TopiLeppanen can you test that we can still cross-build an LLVM-less for PYNQ after this is applied?,True,{}
pocl/pocl,https://github.com/pocl/pocl,887,2020-11-29T01:01:19Z,2021-02-24T07:45:05Z,2021-02-24T14:43:16Z,MERGED,True,36,57,5,https://github.com/isuruf,Support cross compiling pocl,1,[],https://github.com/pocl/pocl/pull/887,https://github.com/keryell,4,https://github.com/pocl/pocl/pull/887#issuecomment-768592287,I'm trying to cross compile for macos-arm64 from macos-x86_64.,"I am curious about what you are doing with PYNQ.
Are you using only the ARM cores or also the FPGA?",True,{}
pocl/pocl,https://github.com/pocl/pocl,887,2020-11-29T01:01:19Z,2021-02-24T07:45:05Z,2021-02-24T14:43:16Z,MERGED,True,36,57,5,https://github.com/isuruf,Support cross compiling pocl,1,[],https://github.com/pocl/pocl/pull/887,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/887#issuecomment-769046472,I'm trying to cross compile for macos-arm64 from macos-x86_64.,"We don't really use the ARM cores except for comparisons. CPC researches portable ways to utilize FPGAs from higher-level languages. One smaller project is the pocl-accel work https://www.computer.org/publications/tech-news/accelerator-framework-for-portable-computing-language which is still ongoing, another is the longer term research track of ours where we look into using TTA as a light weight but scalable OpenCL-programmable overlay for making FPGAs as ""easy"" to use as GPUs. E.g. https://www.researchgate.net/publication/346203698_TTA-SIMD_Soft_Core_Processors If you know of workloads that can be made competitive on FPGAs in general, please let me know. It's a bit hard to find those.",True,{}
pocl/pocl,https://github.com/pocl/pocl,887,2020-11-29T01:01:19Z,2021-02-24T07:45:05Z,2021-02-24T14:43:16Z,MERGED,True,36,57,5,https://github.com/isuruf,Support cross compiling pocl,1,[],https://github.com/pocl/pocl/pull/887,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/887#issuecomment-782570222,I'm trying to cross compile for macos-arm64 from macos-x86_64.,@isuruf  can you rebase this to a single commit which is easier to revert if we'll find problems in our cases?,True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/890,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/znmeb,2,https://github.com/pocl/pocl/pull/890#issuecomment-751609549,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,Is this going to be merged? I had to fork this repo and add this patch to get pocl working on the Jetson Nano (#888),True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/isuruf,3,https://github.com/pocl/pocl/pull/890#issuecomment-751613708,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"You mentioned that with this, Xavier had an extra test failure right?",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/znmeb,4,https://github.com/pocl/pocl/pull/890#issuecomment-751618504,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"Right now I have one test failure on both Nano and Xavier:
The following tests FAILED:
         83 - regression/clSetKernelArg_overwriting_the_previous_kernel's_args (Failed)

On the Xavier, test kernel/test_rotate runs. It takes a bit of time, but it completes successfully. On the Nano, that test starts up, but doesn't finish even after five minutes. I've commented it out for now.
My current source tree is https://github.com/edgyR/pocl/tree/nano-fixes if you want to compare code.",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/isuruf,5,https://github.com/pocl/pocl/pull/890#issuecomment-751618972,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,Does that test fail without this PR on Xavier?,True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/znmeb,6,https://github.com/pocl/pocl/pull/890#issuecomment-751622914,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"This is on the Xavier using pocl/pocl/master:
running CUDA tests
Using OCL_ICD_VENDORS: /usr/local/src/pocl/build/ocl-vendors
Test project /usr/local/src/pocl/build
      Start   1: pocl_version_check
 1/71 Test   #1: pocl_version_check ................................................................   Passed    0.05 sec
      Start  26: kernel/test_shuffle_char
 2/71 Test  #26: kernel/test_shuffle_char ..........................................................   Passed    7.39 sec
      Start  27: kernel/test_shuffle_short
 3/71 Test  #27: kernel/test_shuffle_short .........................................................   Passed    7.08 sec
      Start  28: kernel/test_shuffle_ushort
 4/71 Test  #28: kernel/test_shuffle_ushort ........................................................   Passed    7.59 sec
      Start  30: kernel/test_shuffle_int
 5/71 Test  #30: kernel/test_shuffle_int ...........................................................   Passed    6.85 sec
      Start  31: kernel/test_shuffle_uint
 6/71 Test  #31: kernel/test_shuffle_uint ..........................................................   Passed    4.92 sec
      Start  32: kernel/test_shuffle_float
 7/71 Test  #32: kernel/test_shuffle_float .........................................................   Passed    6.72 sec
      Start  33: kernel/test_shuffle_long
 8/71 Test  #33: kernel/test_shuffle_long ..........................................................   Passed    7.18 sec
      Start  34: kernel/test_shuffle_ulong
 9/71 Test  #34: kernel/test_shuffle_ulong .........................................................   Passed    4.89 sec
      Start  36: kernel/test_sizeof_uint
10/71 Test  #36: kernel/test_sizeof_uint ...........................................................   Passed    1.18 sec
      Start  37: kernel/test_shuffle_double
11/71 Test  #37: kernel/test_shuffle_double ........................................................   Passed    7.10 sec
      Start   2: kernel/test_as_type
12/71 Test   #2: kernel/test_as_type ...............................................................   Passed   71.30 sec
      Start  11: kernel/test_min_max
13/71 Test  #11: kernel/test_min_max ...............................................................   Passed    1.12 sec
      Start  12: kernel/test_length_distance
14/71 Test  #12: kernel/test_length_distance .......................................................   Passed    1.24 sec
      Start  13: kernel/test_fmin_fmax_fma
15/71 Test  #13: kernel/test_fmin_fmax_fma .........................................................   Passed    1.12 sec
      Start  14: kernel/test_local_struct_array
16/71 Test  #14: kernel/test_local_struct_array ....................................................   Passed    1.04 sec
      Start  15: kernel/test_convert_sat_regression
17/71 Test  #15: kernel/test_convert_sat_regression ................................................   Passed    1.10 sec
      Start  16: kernel/test_rotate
18/71 Test  #16: kernel/test_rotate ................................................................   Passed   29.15 sec
      Start  20: kernel/test_ldexp
19/71 Test  #20: kernel/test_ldexp .................................................................   Passed    3.81 sec
      Start  22: kernel/test_short16
20/71 Test  #22: kernel/test_short16 ...............................................................   Passed    1.07 sec
      Start  23: kernel/test_frexp_modf
21/71 Test  #23: kernel/test_frexp_modf ............................................................   Passed    1.13 sec
      Start 127: examples/example0
22/71 Test #127: examples/example0 .................................................................   Passed    1.19 sec
      Start 128: examples/example1_dot_product
23/71 Test #128: examples/example1_dot_product .....................................................   Passed    1.21 sec
      Start 129: examples/example2
24/71 Test #129: examples/example2 .................................................................   Passed    1.31 sec
      Start 130: examples/example2a
25/71 Test #130: examples/example2a ................................................................   Passed    1.19 sec
      Start 134: examples/scalarwave
26/71 Test #134: examples/scalarwave ...............................................................   Passed    1.31 sec
      Start 135: examples/trig
27/71 Test #135: examples/trig .....................................................................   Passed    1.19 sec
      Start  89: runtime/clGetDeviceInfo
28/71 Test  #89: runtime/clGetDeviceInfo ...........................................................   Passed    0.15 sec
      Start  91: runtime/clGetEventInfo
29/71 Test  #91: runtime/clGetEventInfo ............................................................   Passed    0.15 sec
      Start  92: runtime/clCreateProgramWithBinary
30/71 Test  #92: runtime/clCreateProgramWithBinary .................................................   Passed    1.07 sec
      Start  94: runtime/test_kernel_cache_includes
31/71 Test  #94: runtime/test_kernel_cache_includes ................................................   Passed    1.63 sec
      Start  95: runtime/clFinish
32/71 Test  #95: runtime/clFinish ..................................................................   Passed    1.10 sec
      Start  96: runtime/test_event_cycle
33/71 Test  #96: runtime/test_event_cycle ..........................................................   Passed    0.24 sec
      Start  98: runtime/test_read-copy-write-buffer
34/71 Test  #98: runtime/test_read-copy-write-buffer ...............................................   Passed    0.15 sec
      Start  99: runtime/test_fill-buffer
35/71 Test  #99: runtime/test_fill-buffer ..........................................................   Passed    0.17 sec
      Start 100: runtime/test_buffer-image-copy
36/71 Test #100: runtime/test_buffer-image-copy ....................................................   Passed    0.14 sec
      Start 103: runtime/clSetEventCallback
37/71 Test #103: runtime/clSetEventCallback ........................................................   Passed    1.11 sec
      Start 104: runtime/clGetSupportedImageFormats
38/71 Test #104: runtime/clGetSupportedImageFormats ................................................   Passed    0.13 sec
      Start 105: runtime/clCreateKernelsInProgram
39/71 Test #105: runtime/clCreateKernelsInProgram ..................................................   Passed    1.61 sec
      Start 107: runtime/test_event_free
40/71 Test #107: runtime/test_event_free ...........................................................   Passed    0.15 sec
      Start 108: runtime/test_event_double_wait
41/71 Test #108: runtime/test_event_double_wait ....................................................   Passed    1.06 sec
      Start 110: runtime/test_user_event
42/71 Test #110: runtime/test_user_event ...........................................................   Passed    0.14 sec
      Start 111: runtime/clSetMemObjectDestructorCallback
43/71 Test #111: runtime/clSetMemObjectDestructorCallback ..........................................   Passed    0.15 sec
      Start  44: regression/phi_nodes_not_replicated_REPL
44/71 Test  #44: regression/phi_nodes_not_replicated_REPL ..........................................   Passed    1.08 sec
      Start  45: regression/issues_with_local_pointers_REPL
45/71 Test  #45: regression/issues_with_local_pointers_REPL ........................................   Passed    1.06 sec
      Start  46: regression/barrier_between_two_for_loops_REPL
46/71 Test  #46: regression/barrier_between_two_for_loops_REPL .....................................   Passed    1.17 sec
      Start  47: regression/simple_for-loop_with_a_barrier_inside_REPL
47/71 Test  #47: regression/simple_for-loop_with_a_barrier_inside_REPL .............................   Passed    1.09 sec
      Start  48: regression/for-loop_with_computation_after_the_brexit_REPL
48/71 Test  #48: regression/for-loop_with_computation_after_the_brexit_REPL ........................   Passed    1.09 sec
      Start  49: regression/for-loop_with_a_variable_iteration_count_REPL
49/71 Test  #49: regression/for-loop_with_a_variable_iteration_count_REPL ..........................   Passed    1.06 sec
      Start  50: regression/early_return_before_a_barrier_region_REPL
50/71 Test  #50: regression/early_return_before_a_barrier_region_REPL ..............................   Passed    1.04 sec
      Start  51: regression/id-dependent_computation_before_kernel_exit_REPL
51/71 Test  #51: regression/id-dependent_computation_before_kernel_exit_REPL .......................   Passed    1.05 sec
      Start  52: regression/barrier_just_before_return_REPL
52/71 Test  #52: regression/barrier_just_before_return_REPL ........................................   Passed    1.04 sec
      Start  54: regression/undominated_variable_from_conditional_barrier_handling_REPL
53/71 Test  #54: regression/undominated_variable_from_conditional_barrier_handling_REPL ............   Passed    1.07 sec
      Start  55: regression/assigning_a_loop_iterator_variable_to_a_private_makes_it_local_REPL
54/71 Test  #55: regression/assigning_a_loop_iterator_variable_to_a_private_makes_it_local_REPL ....   Passed    1.14 sec
      Start  57: regression/test_program_from_binary_with_local_1_1_1_REPL
55/71 Test  #57: regression/test_program_from_binary_with_local_1_1_1_REPL .........................   Passed    1.35 sec
      Start  68: regression/phi_nodes_not_replicated_LOOPS
56/71 Test  #68: regression/phi_nodes_not_replicated_LOOPS .........................................   Passed    1.01 sec
      Start  69: regression/issues_with_local_pointers_LOOPS
57/71 Test  #69: regression/issues_with_local_pointers_LOOPS .......................................   Passed    0.99 sec
      Start  70: regression/barrier_between_two_for_loops_LOOPS
58/71 Test  #70: regression/barrier_between_two_for_loops_LOOPS ....................................   Passed    1.13 sec
      Start  71: regression/simple_for-loop_with_a_barrier_inside_LOOPS
59/71 Test  #71: regression/simple_for-loop_with_a_barrier_inside_LOOPS ............................   Passed    1.04 sec
      Start  72: regression/for-loop_with_computation_after_the_brexit_LOOPS
60/71 Test  #72: regression/for-loop_with_computation_after_the_brexit_LOOPS .......................   Passed    1.04 sec
      Start  73: regression/for-loop_with_a_variable_iteration_count_LOOPS
61/71 Test  #73: regression/for-loop_with_a_variable_iteration_count_LOOPS .........................   Passed    1.00 sec
      Start  74: regression/early_return_before_a_barrier_region_LOOPS
62/71 Test  #74: regression/early_return_before_a_barrier_region_LOOPS .............................   Passed    1.01 sec
      Start  76: regression/barrier_just_before_return_LOOPS
63/71 Test  #76: regression/barrier_just_before_return_LOOPS .......................................   Passed    0.98 sec
      Start  78: regression/undominated_variable_from_conditional_barrier_handling_LOOPS
64/71 Test  #78: regression/undominated_variable_from_conditional_barrier_handling_LOOPS ...........   Passed    1.01 sec
      Start  79: regression/assigning_a_loop_iterator_variable_to_a_private_makes_it_local_LOOPS
65/71 Test  #79: regression/assigning_a_loop_iterator_variable_to_a_private_makes_it_local_LOOPS ...   Passed    1.05 sec
      Start  81: regression/test_program_from_binary_with_local_1_1_1_LOOPS
66/71 Test  #81: regression/test_program_from_binary_with_local_1_1_1_LOOPS ........................   Passed    1.28 sec
      Start  82: regression/setting_a_buffer_argument_to_NULL_causes_a_segfault
67/71 Test  #82: regression/setting_a_buffer_argument_to_NULL_causes_a_segfault ....................   Passed    1.04 sec
      Start  83: regression/clSetKernelArg_overwriting_the_previous_kernel's_args
68/71 Test  #83: regression/clSetKernelArg_overwriting_the_previous_kernel's_args ..................   Passed    1.03 sec
      Start  85: regression/case_with_multiple_variable_length_loops_and_a_barrier_in_one
69/71 Test  #85: regression/case_with_multiple_variable_length_loops_and_a_barrier_in_one ..........   Passed    1.12 sec
      Start  86: regression/autolocals_in_constexprs
70/71 Test  #86: regression/autolocals_in_constexprs ...............................................   Passed    1.04 sec
      Start  88: regression/vector_kernel_arguments
71/71 Test  #88: regression/vector_kernel_arguments ................................................   Passed    1.70 sec

100% tests passed, 0 tests failed out of 71

Label Time Summary:
cuda          = 220.27 sec*proc (71 tests)
hsa           =   4.90 sec*proc (4 tests)
hsa-native    = 206.75 sec*proc (56 tests)
internal      = 220.27 sec*proc (71 tests)
kernel        = 172.99 sec*proc (20 tests)
regression    =  30.70 sec*proc (28 tests)
runtime       =   9.12 sec*proc (16 tests)
tce           =  10.24 sec*proc (9 tests)

Total Test time (real) = 220.37 sec
CUDA tests finished",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/znmeb,7,https://github.com/pocl/pocl/pull/890#issuecomment-751634757,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"This is on the Nano using pocl/pocl/master. I killed 18/71 Test  #16: kernel/test_rotate after 19 minutes of CPU time but the rest of the failures are legitimate.
running CUDA tests
Using OCL_ICD_VENDORS: /usr/local/src/pocl/build/ocl-vendors
Test project /usr/local/src/pocl/build
      Start   1: pocl_version_check
 1/71 Test   #1: pocl_version_check ................................................................   Passed    0.08 sec
      Start  26: kernel/test_shuffle_char
 2/71 Test  #26: kernel/test_shuffle_char ..........................................................***Failed  Error regular expression found in output. Regex=[FAIL]  0.87 sec
      Start  27: kernel/test_shuffle_short
 3/71 Test  #27: kernel/test_shuffle_short .........................................................***Failed  Error regular expression found in output. Regex=[FAIL]  0.88 sec
      Start  28: kernel/test_shuffle_ushort
 4/71 Test  #28: kernel/test_shuffle_ushort ........................................................***Failed  Error regular expression found in output. Regex=[FAIL]  0.89 sec
      Start  30: kernel/test_shuffle_int
 5/71 Test  #30: kernel/test_shuffle_int ...........................................................***Failed  Error regular expression found in output. Regex=[FAIL]  0.83 sec
      Start  31: kernel/test_shuffle_uint
 6/71 Test  #31: kernel/test_shuffle_uint ..........................................................***Failed  Error regular expression found in output. Regex=[FAIL]  0.82 sec
      Start  32: kernel/test_shuffle_float
 7/71 Test  #32: kernel/test_shuffle_float .........................................................***Failed  Error regular expression found in output. Regex=[FAIL]  0.82 sec
      Start  33: kernel/test_shuffle_long
 8/71 Test  #33: kernel/test_shuffle_long ..........................................................***Failed  Error regular expression found in output. Regex=[FAIL]  0.82 sec
      Start  34: kernel/test_shuffle_ulong
 9/71 Test  #34: kernel/test_shuffle_ulong .........................................................***Failed  Error regular expression found in output. Regex=[FAIL]  2.72 sec
      Start  36: kernel/test_sizeof_uint
10/71 Test  #36: kernel/test_sizeof_uint ...........................................................   Passed    2.54 sec
      Start  37: kernel/test_shuffle_double
11/71 Test  #37: kernel/test_shuffle_double ........................................................***Failed  Error regular expression found in output. Regex=[FAIL]  3.19 sec
      Start   2: kernel/test_as_type
12/71 Test   #2: kernel/test_as_type ...............................................................   Passed  158.23 sec
      Start  11: kernel/test_min_max
13/71 Test  #11: kernel/test_min_max ...............................................................   Passed    2.42 sec
      Start  12: kernel/test_length_distance
14/71 Test  #12: kernel/test_length_distance .......................................................   Passed    2.60 sec
      Start  13: kernel/test_fmin_fmax_fma
15/71 Test  #13: kernel/test_fmin_fmax_fma .........................................................   Passed    2.37 sec
      Start  14: kernel/test_local_struct_array
16/71 Test  #14: kernel/test_local_struct_array ....................................................   Passed    2.27 sec
      Start  15: kernel/test_convert_sat_regression
17/71 Test  #15: kernel/test_convert_sat_regression ................................................   Passed    2.36 sec
      Start  16: kernel/test_rotate
18/71 Test  #16: kernel/test_rotate ................................................................***Failed  Error regular expression found in output. Regex=[FAIL]1177.77 sec
      Start  20: kernel/test_ldexp
19/71 Test  #20: kernel/test_ldexp .................................................................   Passed    7.82 sec
      Start  22: kernel/test_short16
20/71 Test  #22: kernel/test_short16 ...............................................................   Passed    2.33 sec
      Start  23: kernel/test_frexp_modf
21/71 Test  #23: kernel/test_frexp_modf ............................................................   Passed    2.42 sec
      Start 127: examples/example0
22/71 Test #127: examples/example0 .................................................................   Passed    2.59 sec
      Start 128: examples/example1_dot_product
23/71 Test #128: examples/example1_dot_product .....................................................   Passed    2.53 sec
      Start 129: examples/example2
24/71 Test #129: examples/example2 .................................................................   Passed    2.91 sec
      Start 130: examples/example2a
25/71 Test #130: examples/example2a ................................................................   Passed    2.56 sec
      Start 134: examples/scalarwave
26/71 Test #134: examples/scalarwave ...............................................................   Passed    2.73 sec
      Start 135: examples/trig
27/71 Test #135: examples/trig .....................................................................   Passed    2.42 sec
      Start  89: runtime/clGetDeviceInfo
28/71 Test  #89: runtime/clGetDeviceInfo ...........................................................   Passed    0.18 sec
      Start  91: runtime/clGetEventInfo
29/71 Test  #91: runtime/clGetEventInfo ............................................................   Passed    0.18 sec
      Start  92: runtime/clCreateProgramWithBinary
30/71 Test  #92: runtime/clCreateProgramWithBinary .................................................   Passed    2.28 sec
      Start  94: runtime/test_kernel_cache_includes
31/71 Test  #94: runtime/test_kernel_cache_includes ................................................   Passed    3.61 sec
      Start  95: runtime/clFinish
32/71 Test  #95: runtime/clFinish ..................................................................   Passed    2.37 sec
      Start  96: runtime/test_event_cycle
33/71 Test  #96: runtime/test_event_cycle ..........................................................   Passed    0.97 sec
      Start  98: runtime/test_read-copy-write-buffer
34/71 Test  #98: runtime/test_read-copy-write-buffer ...............................................   Passed    0.19 sec
      Start  99: runtime/test_fill-buffer
35/71 Test  #99: runtime/test_fill-buffer ..........................................................   Passed    0.22 sec
      Start 100: runtime/test_buffer-image-copy
36/71 Test #100: runtime/test_buffer-image-copy ....................................................   Passed    0.18 sec
      Start 103: runtime/clSetEventCallback
37/71 Test #103: runtime/clSetEventCallback ........................................................   Passed    2.38 sec
      Start 104: runtime/clGetSupportedImageFormats
38/71 Test #104: runtime/clGetSupportedImageFormats ................................................   Passed    0.19 sec
      Start 105: runtime/clCreateKernelsInProgram
39/71 Test #105: runtime/clCreateKernelsInProgram ..................................................   Passed    3.46 sec
      Start 107: runtime/test_event_free
40/71 Test #107: runtime/test_event_free ...........................................................   Passed    0.18 sec
      Start 108: runtime/test_event_double_wait
41/71 Test #108: runtime/test_event_double_wait ....................................................   Passed    2.24 sec
      Start 110: runtime/test_user_event
42/71 Test #110: runtime/test_user_event ...........................................................   Passed    0.19 sec
      Start 111: runtime/clSetMemObjectDestructorCallback
43/71 Test #111: runtime/clSetMemObjectDestructorCallback ..........................................   Passed    0.18 sec
      Start  44: regression/phi_nodes_not_replicated_REPL
44/71 Test  #44: regression/phi_nodes_not_replicated_REPL ..........................................***Failed  Error regular expression found in output. Regex=[FAIL]  5.33 sec
      Start  45: regression/issues_with_local_pointers_REPL
45/71 Test  #45: regression/issues_with_local_pointers_REPL ........................................   Passed    2.29 sec
      Start  46: regression/barrier_between_two_for_loops_REPL
46/71 Test  #46: regression/barrier_between_two_for_loops_REPL .....................................***Failed  Error regular expression found in output. Regex=[FAIL]  4.17 sec
      Start  47: regression/simple_for-loop_with_a_barrier_inside_REPL
47/71 Test  #47: regression/simple_for-loop_with_a_barrier_inside_REPL .............................***Failed  Error regular expression found in output. Regex=[FAIL]  4.20 sec
      Start  48: regression/for-loop_with_computation_after_the_brexit_REPL
48/71 Test  #48: regression/for-loop_with_computation_after_the_brexit_REPL ........................***Failed  Error regular expression found in output. Regex=[FAIL]  4.18 sec
      Start  49: regression/for-loop_with_a_variable_iteration_count_REPL
49/71 Test  #49: regression/for-loop_with_a_variable_iteration_count_REPL ..........................***Failed  Error regular expression found in output. Regex=[FAIL]  4.01 sec
      Start  50: regression/early_return_before_a_barrier_region_REPL
50/71 Test  #50: regression/early_return_before_a_barrier_region_REPL ..............................***Failed  Error regular expression found in output. Regex=[FAIL]  4.27 sec
      Start  51: regression/id-dependent_computation_before_kernel_exit_REPL
51/71 Test  #51: regression/id-dependent_computation_before_kernel_exit_REPL .......................***Failed  Error regular expression found in output. Regex=[FAIL]  3.98 sec
      Start  52: regression/barrier_just_before_return_REPL
52/71 Test  #52: regression/barrier_just_before_return_REPL ........................................***Failed  Error regular expression found in output. Regex=[FAIL]  3.93 sec
      Start  54: regression/undominated_variable_from_conditional_barrier_handling_REPL
53/71 Test  #54: regression/undominated_variable_from_conditional_barrier_handling_REPL ............***Failed  Error regular expression found in output. Regex=[FAIL]  4.16 sec
      Start  55: regression/assigning_a_loop_iterator_variable_to_a_private_makes_it_local_REPL
54/71 Test  #55: regression/assigning_a_loop_iterator_variable_to_a_private_makes_it_local_REPL ....   Passed    2.49 sec
      Start  57: regression/test_program_from_binary_with_local_1_1_1_REPL
55/71 Test  #57: regression/test_program_from_binary_with_local_1_1_1_REPL .........................   Passed    2.82 sec
      Start  68: regression/phi_nodes_not_replicated_LOOPS
56/71 Test  #68: regression/phi_nodes_not_replicated_LOOPS .........................................***Failed  Error regular expression found in output. Regex=[FAIL]  3.98 sec
      Start  69: regression/issues_with_local_pointers_LOOPS
57/71 Test  #69: regression/issues_with_local_pointers_LOOPS .......................................   Passed    2.12 sec
      Start  70: regression/barrier_between_two_for_loops_LOOPS
58/71 Test  #70: regression/barrier_between_two_for_loops_LOOPS ....................................***Failed  Error regular expression found in output. Regex=[FAIL]  4.15 sec
      Start  71: regression/simple_for-loop_with_a_barrier_inside_LOOPS
59/71 Test  #71: regression/simple_for-loop_with_a_barrier_inside_LOOPS ............................***Failed  Error regular expression found in output. Regex=[FAIL]  4.03 sec
      Start  72: regression/for-loop_with_computation_after_the_brexit_LOOPS
60/71 Test  #72: regression/for-loop_with_computation_after_the_brexit_LOOPS .......................***Failed  Error regular expression found in output. Regex=[FAIL]  4.28 sec
      Start  73: regression/for-loop_with_a_variable_iteration_count_LOOPS
61/71 Test  #73: regression/for-loop_with_a_variable_iteration_count_LOOPS .........................***Failed  Error regular expression found in output. Regex=[FAIL]  4.30 sec
      Start  74: regression/early_return_before_a_barrier_region_LOOPS
62/71 Test  #74: regression/early_return_before_a_barrier_region_LOOPS .............................***Failed  Error regular expression found in output. Regex=[FAIL]  4.03 sec
      Start  76: regression/barrier_just_before_return_LOOPS
63/71 Test  #76: regression/barrier_just_before_return_LOOPS .......................................***Failed  Error regular expression found in output. Regex=[FAIL]  4.78 sec
      Start  78: regression/undominated_variable_from_conditional_barrier_handling_LOOPS
64/71 Test  #78: regression/undominated_variable_from_conditional_barrier_handling_LOOPS ...........***Failed  Error regular expression found in output. Regex=[FAIL]  4.56 sec
      Start  79: regression/assigning_a_loop_iterator_variable_to_a_private_makes_it_local_LOOPS
65/71 Test  #79: regression/assigning_a_loop_iterator_variable_to_a_private_makes_it_local_LOOPS ...   Passed    2.30 sec
      Start  81: regression/test_program_from_binary_with_local_1_1_1_LOOPS
66/71 Test  #81: regression/test_program_from_binary_with_local_1_1_1_LOOPS ........................   Passed    2.65 sec
      Start  82: regression/setting_a_buffer_argument_to_NULL_causes_a_segfault
67/71 Test  #82: regression/setting_a_buffer_argument_to_NULL_causes_a_segfault ....................***Failed  Error regular expression found in output. Regex=[FAIL]  4.09 sec
      Start  83: regression/clSetKernelArg_overwriting_the_previous_kernel's_args
68/71 Test  #83: regression/clSetKernelArg_overwriting_the_previous_kernel's_args ..................***Failed  Error regular expression found in output. Regex=[FAIL]  4.61 sec
      Start  85: regression/case_with_multiple_variable_length_loops_and_a_barrier_in_one
69/71 Test  #85: regression/case_with_multiple_variable_length_loops_and_a_barrier_in_one ..........***Failed  Error regular expression found in output. Regex=[FAIL]  4.11 sec
      Start  86: regression/autolocals_in_constexprs
70/71 Test  #86: regression/autolocals_in_constexprs ...............................................   Passed    2.31 sec
      Start  88: regression/vector_kernel_arguments
71/71 Test  #88: regression/vector_kernel_arguments ................................................   Passed    3.66 sec

58% tests passed, 30 tests failed out of 71

Label Time Summary:
cuda          = 1515.56 sec*proc (71 tests)
hsa           =  10.59 sec*proc (4 tests)
hsa-native    = 1477.47 sec*proc (56 tests)
internal      = 1515.56 sec*proc (71 tests)
kernel        = 1374.98 sec*proc (20 tests)
regression    = 105.79 sec*proc (28 tests)
runtime       =  18.97 sec*proc (16 tests)
tce           =  31.52 sec*proc (9 tests)

Total Test time (real) = 1515.66 sec

The following tests FAILED:
         16 - kernel/test_rotate (Failed)
         26 - kernel/test_shuffle_char (Failed)
         27 - kernel/test_shuffle_short (Failed)
         28 - kernel/test_shuffle_ushort (Failed)
         30 - kernel/test_shuffle_int (Failed)
         31 - kernel/test_shuffle_uint (Failed)
         32 - kernel/test_shuffle_float (Failed)
         33 - kernel/test_shuffle_long (Failed)
         34 - kernel/test_shuffle_ulong (Failed)
         37 - kernel/test_shuffle_double (Failed)
         44 - regression/phi_nodes_not_replicated_REPL (Failed)
         46 - regression/barrier_between_two_for_loops_REPL (Failed)
         47 - regression/simple_for-loop_with_a_barrier_inside_REPL (Failed)
         48 - regression/for-loop_with_computation_after_the_brexit_REPL (Failed)
         49 - regression/for-loop_with_a_variable_iteration_count_REPL (Failed)
         50 - regression/early_return_before_a_barrier_region_REPL (Failed)
         51 - regression/id-dependent_computation_before_kernel_exit_REPL (Failed)
         52 - regression/barrier_just_before_return_REPL (Failed)
         54 - regression/undominated_variable_from_conditional_barrier_handling_REPL (Failed)
         68 - regression/phi_nodes_not_replicated_LOOPS (Failed)
         70 - regression/barrier_between_two_for_loops_LOOPS (Failed)
         71 - regression/simple_for-loop_with_a_barrier_inside_LOOPS (Failed)
         72 - regression/for-loop_with_computation_after_the_brexit_LOOPS (Failed)
         73 - regression/for-loop_with_a_variable_iteration_count_LOOPS (Failed)
         74 - regression/early_return_before_a_barrier_region_LOOPS (Failed)
         76 - regression/barrier_just_before_return_LOOPS (Failed)
         78 - regression/undominated_variable_from_conditional_barrier_handling_LOOPS (Failed)
         82 - regression/setting_a_buffer_argument_to_NULL_causes_a_segfault (Failed)
         83 - regression/clSetKernelArg_overwriting_the_previous_kernel's_args (Failed)
         85 - regression/case_with_multiple_variable_length_loops_and_a_barrier_in_one (Failed)
Errors while running CTest",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/isuruf,8,https://github.com/pocl/pocl/pull/890#issuecomment-755892888,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"@znmeb, would you have some time to finish this PR? I think we want to check which device we are running on and add that hack only if the device is a Nano.",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/znmeb,9,https://github.com/pocl/pocl/pull/890#issuecomment-755916504,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"Can you figure out how to do it in CMake? There's some code there in either LLVM or the ""CMakeLists"" that looks at the output of ""/proc/cpuinfo"" to detect what processor it's on. For reference, here's the Nano:
znmeb@Nano:~$ more /proc/cpuinfo
processor       : 0
model name      : ARMv8 Processor rev 1 (v8l)
BogoMIPS        : 38.40
Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32
CPU implementer : 0x41
CPU architecture: 8
CPU variant     : 0x1
CPU part        : 0xd07
CPU revision    : 1

processor       : 1
model name      : ARMv8 Processor rev 1 (v8l)
BogoMIPS        : 38.40
Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32
CPU implementer : 0x41
CPU architecture: 8
CPU variant     : 0x1
CPU part        : 0xd07
CPU revision    : 1

etc. etc.


and the AGX Xavier:
(base) znmeb@AGX-Xavier:~$ more /proc/cpuinfo
processor       : 0
model name      : ARMv8 Processor rev 0 (v8l)
BogoMIPS        : 62.50
Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp
CPU implementer : 0x4e
CPU architecture: 8
CPU variant     : 0x0
CPU part        : 0x004
CPU revision    : 0
MTS version     : 50168445

processor       : 1
model name      : ARMv8 Processor rev 0 (v8l)
BogoMIPS        : 62.50
Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 atomics fphp asimdhp
CPU implementer : 0x4e
CPU architecture: 8
CPU variant     : 0x0
CPU part        : 0x004
CPU revision    : 0
MTS version     : 50168445

You probably want to use the ""features"" flag - I think that's what CMake / LLVM use. Also, bear in mind that code can be built on a Xavier and people will expect it to execute on a Nano. At least that's my expectation for the edgyR project, since I have some things that won't build on a Nano (pandoc) for lack of RAM at build time.",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/isuruf,10,https://github.com/pocl/pocl/pull/890#issuecomment-755939472,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,I think we want to do it at runtime. We also have some code to identify the GPU in pocl. (You can see it when the OpenCL device name is shown). I'm not sure how to get that information though.,True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/znmeb,11,https://github.com/pocl/pocl/pull/890#issuecomment-755944871,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"I think we want to do it at runtime. We also have some code to identify the GPU in pocl. (You can see it when the OpenCL device name is shown). I'm not sure how to get that information though.

I'm not a C++ programmer ... here's how I would do it in bash:
FEATURES=`grep Features /proc/cpuinfo | head -n 1'
if [ $FEATURES = ""Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32"" ]
then
  echo ""Nano""
fi",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/znmeb,12,https://github.com/pocl/pocl/pull/890#issuecomment-756497749,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"I have a little more information: it turns out CUDA provides a source program that queries the devices and prints out relevant info. It doesn't look like the executable, 'deviceQuery', ships with CUDA but the source does, located in a ""samples"" directory. Fortunately this source is also on GitHub: https://github.com/NVIDIA/cuda-samples/tree/master/Samples/deviceQuery
What you'd need to do at runtime would be to query the ""compute capability"" of the GPU and use that to reference a table of the allowed operations for that compute capability. Here's what the executable returns on the Nano:
$ deviceQuery
deviceQuery Starting...

 CUDA Device Query (Runtime API) version (CUDART static linking)

Detected 1 CUDA Capable device(s)

Device 0: ""NVIDIA Tegra X1""
  CUDA Driver Version / Runtime Version          10.2 / 10.2
  CUDA Capability Major/Minor version number:    5.3
  Total amount of global memory:                 3960 MBytes (4152881152 bytes)
  ( 1) Multiprocessors, (128) CUDA Cores/MP:     128 CUDA Cores
  GPU Max Clock rate:                            922 MHz (0.92 GHz)
  Memory Clock rate:                             13 Mhz
  Memory Bus Width:                              64-bit
  L2 Cache Size:                                 262144 bytes
  Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)
  Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers
  Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 32768
  Warp size:                                     32
  Maximum number of threads per multiprocessor:  2048
  Maximum number of threads per block:           1024
  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)
  Run time limit on kernels:                     Yes
  Integrated GPU sharing Host Memory:            Yes
  Support host page-locked memory mapping:       Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support:                        Disabled
  Device supports Unified Addressing (UVA):      Yes
  Device supports Compute Preemption:            No
  Supports Cooperative Kernel Launch:            No
  Supports MultiDevice Co-op Kernel Launch:      No
  Device PCI Domain ID / Bus ID / location ID:   0 / 0 / 0
  Compute Mode:
     < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >

deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1
Result = PASS

and the AGX Xavier:
$ deviceQuery
deviceQuery Starting...

 CUDA Device Query (Runtime API) version (CUDART static linking)

Detected 1 CUDA Capable device(s)

Device 0: ""Xavier""
  CUDA Driver Version / Runtime Version          10.2 / 10.2
  CUDA Capability Major/Minor version number:    7.2
  Total amount of global memory:                 15819 MBytes (16587489280 bytes)
  ( 8) Multiprocessors, ( 64) CUDA Cores/MP:     512 CUDA Cores
  GPU Max Clock rate:                            1377 MHz (1.38 GHz)
  Memory Clock rate:                             1377 Mhz
  Memory Bus Width:                              256-bit
  L2 Cache Size:                                 524288 bytes
  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)
  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers
  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers
  Total amount of constant memory:               65536 bytes
  Total amount of shared memory per block:       49152 bytes
  Total number of registers available per block: 65536
  Warp size:                                     32
  Maximum number of threads per multiprocessor:  2048
  Maximum number of threads per block:           1024
  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)
  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)
  Maximum memory pitch:                          2147483647 bytes
  Texture alignment:                             512 bytes
  Concurrent copy and kernel execution:          Yes with 1 copy engine(s)
  Run time limit on kernels:                     No
  Integrated GPU sharing Host Memory:            Yes
  Support host page-locked memory mapping:       Yes
  Alignment requirement for Surfaces:            Yes
  Device has ECC support:                        Disabled
  Device supports Unified Addressing (UVA):      Yes
  Device supports Compute Preemption:            Yes
  Supports Cooperative Kernel Launch:            Yes
  Supports MultiDevice Co-op Kernel Launch:      Yes
  Device PCI Domain ID / Bus ID / location ID:   0 / 0 / 0
  Compute Mode:
     < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >

deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 10.2, CUDA Runtime Version = 10.2, NumDevs = 1
Result = PASS

There are some other Jetson modules out there but I don't know what operations they support and don't have any to test on.",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/isuruf,13,https://github.com/pocl/pocl/pull/890#issuecomment-768027606,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"@znmeb, can you check that on xavier, all cuda tests pass and on nano, only one test fail?",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/pjaaskel,14,https://github.com/pocl/pocl/pull/890#issuecomment-770219755,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,Please update the fix to CHANGES and set XFAILs to match the test expected status.,True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/isuruf,15,https://github.com/pocl/pocl/pull/890#issuecomment-772884115,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,Added to CHANGES. I'm not sure how to mark the test as XFAIL because I don't know how to detect cuMemHostRegister support in CMake.,True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/pjaaskel,16,https://github.com/pocl/pocl/pull/890#issuecomment-773063172,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"Which test(s) are failing? Perhaps you can make it ""fake pass"" in the test C/C++ code depending on whether it's supported or not?",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/isuruf,17,https://github.com/pocl/pocl/pull/890#issuecomment-773460686,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,clSetKernelArg_overwriting_the_previous_kernel fails probably because of some issue in the code we have for working around the fact that cuMemHostRegister is not available.,True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/terryfork,18,https://github.com/pocl/pocl/pull/890#issuecomment-998200955,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"Hi guys!
All changes in this issue assumes that arm code is workable but it is broken since 4f34ae7 or maybe even earlier.
(in this commit mem_obj variable in pocl_cuda_alloc_mem_obj was renamed to mem everywhere except specific arm code. Code can't be compiled for arm after this commit and I'm sure nobody test it after 2019/08/30)",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/terryfork,19,https://github.com/pocl/pocl/pull/890#issuecomment-998637162,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"Even more.
arm specific code in procedure pocl_cuda_finalize_command is broken since release_1_3
Code uses undefined var meta.",True,{}
pocl/pocl,https://github.com/pocl/pocl,890,2020-12-13T06:03:08Z,2022-01-05T10:43:30Z,2022-01-05T10:43:30Z,MERGED,True,61,41,2,https://github.com/isuruf,disable cuMemHostRegister on aarch64 too,13,[],https://github.com/pocl/pocl/pull/890,https://github.com/pjaaskel,20,https://github.com/pocl/pocl/pull/890#issuecomment-1004950341,Since Jetson Xavier supports cuMemHostRegister we need a better fix than this. Keeping it a draft until that is fixed,"Fails to build here (CUDA version problem?):
[ 67%] Building C object lib/CL/devices/cuda/CMakeFiles/pocl-devices-cuda.dir/pocl-cuda.c.o
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c: In function ‘pocl_cuda_init’:
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c:315:43: error: ‘CU_DEVICE_ATTRIBUTE_READ_ONLY_HOST_REGISTER_SUPPORTED’ undeclared (first use in this function); did you mean ‘CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED’?
   result |= cuDeviceGetAttribute (&value, CU_DEVICE_ATTRIBUTE_##key, data->device); \
                                           ^
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c:332:7: note: in expansion of macro ‘GET_CU_PROP’
       GET_CU_PROP (READ_ONLY_HOST_REGISTER_SUPPORTED, data->supports_cu_mem_host_register);
       ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c:315:43: note: each undeclared identifier is reported only once for each function it appears in
   result |= cuDeviceGetAttribute (&value, CU_DEVICE_ATTRIBUTE_##key, data->device); \
                                           ^
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c:332:7: note: in expansion of macro ‘GET_CU_PROP’
       GET_CU_PROP (READ_ONLY_HOST_REGISTER_SUPPORTED, data->supports_cu_mem_host_register);
       ^~~~~~~~~~~
lib/CL/devices/cuda/CMakeFiles/pocl-devices-cuda.dir/build.make:81: recipe for target 'lib/CL/devices/cuda/CMakeFiles/pocl-devices-cuda.dir/pocl-cuda.c.o' failed
make[2]: *** [lib/CL/devices/cuda/CMakeFiles/pocl-devices-cuda.dir/pocl-cuda.c.o] Error 1",True,{}
pocl/pocl,https://github.com/pocl/pocl,891,2020-12-13T14:44:13Z,2020-12-16T13:12:17Z,2020-12-16T13:12:17Z,CLOSED,False,77,2,3,https://github.com/Oblomov,Double event wait,2,[],https://github.com/pocl/pocl/pull/891,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/891,This adds a test (and a fix for a failure in the CUDA driver) for when events are are waited-upon multiple times.,This adds a test (and a fix for a failure in the CUDA driver) for when events are are waited-upon multiple times.,True,{}
pocl/pocl,https://github.com/pocl/pocl,891,2020-12-13T14:44:13Z,2020-12-16T13:12:17Z,2020-12-16T13:12:17Z,CLOSED,False,77,2,3,https://github.com/Oblomov,Double event wait,2,[],https://github.com/pocl/pocl/pull/891,https://github.com/Oblomov,2,https://github.com/pocl/pocl/pull/891#issuecomment-744017806,This adds a test (and a fix for a failure in the CUDA driver) for when events are are waited-upon multiple times.,cc @jrprice,True,{}
pocl/pocl,https://github.com/pocl/pocl,891,2020-12-13T14:44:13Z,2020-12-16T13:12:17Z,2020-12-16T13:12:17Z,CLOSED,False,77,2,3,https://github.com/Oblomov,Double event wait,2,[],https://github.com/pocl/pocl/pull/891,https://github.com/franz,3,https://github.com/pocl/pocl/pull/891#issuecomment-746265842,This adds a test (and a fix for a failure in the CUDA driver) for when events are are waited-upon multiple times.,Merged,True,{}
pocl/pocl,https://github.com/pocl/pocl,892,2020-12-13T15:04:11Z,2020-12-16T13:10:37Z,2020-12-16T13:10:37Z,CLOSED,False,159,70,4,https://github.com/Oblomov,Conditional event free test,4,[],https://github.com/pocl/pocl/pull/892,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/892,"This changes test_event_free so that it doesn't run the image-related tests when the device doesn't support it (e.g. CUDA) and consequently labels the test as valid for the CUDA device.
It's built on top of #891 but it doesn't actually depend on it. If necessary I can rebase (which needs to be done manually because the changes in CMakeList.txt are right next to each other).","This changes test_event_free so that it doesn't run the image-related tests when the device doesn't support it (e.g. CUDA) and consequently labels the test as valid for the CUDA device.
It's built on top of #891 but it doesn't actually depend on it. If necessary I can rebase (which needs to be done manually because the changes in CMakeList.txt are right next to each other).",True,{}
pocl/pocl,https://github.com/pocl/pocl,892,2020-12-13T15:04:11Z,2020-12-16T13:10:37Z,2020-12-16T13:10:37Z,CLOSED,False,159,70,4,https://github.com/Oblomov,Conditional event free test,4,[],https://github.com/pocl/pocl/pull/892,https://github.com/franz,2,https://github.com/pocl/pocl/pull/892#issuecomment-746264113,"This changes test_event_free so that it doesn't run the image-related tests when the device doesn't support it (e.g. CUDA) and consequently labels the test as valid for the CUDA device.
It's built on top of #891 but it doesn't actually depend on it. If necessary I can rebase (which needs to be done manually because the changes in CMakeList.txt are right next to each other).",Rebased this on release_1_6 branch and pushed.,True,{}
pocl/pocl,https://github.com/pocl/pocl,896,2020-12-16T07:30:13Z,2020-12-16T07:40:36Z,2020-12-16T07:40:37Z,CLOSED,False,0,6,1,https://github.com/kif,Remove const to make SLEEF compatible with POCL,1,[],https://github.com/pocl/pocl/pull/896,https://github.com/kif,1,https://github.com/pocl/pocl/pull/896,"Apparently on PPC64le the compiler is ""properly"" detected then compilation fails as
signatures are not aligned.
I suspect on AMD64, the compiler is not properly detected and it work ""by accident"" (?)
close #876","Apparently on PPC64le the compiler is ""properly"" detected then compilation fails as
signatures are not aligned.
I suspect on AMD64, the compiler is not properly detected and it work ""by accident"" (?)
close #876",True,{}
pocl/pocl,https://github.com/pocl/pocl,896,2020-12-16T07:30:13Z,2020-12-16T07:40:36Z,2020-12-16T07:40:37Z,CLOSED,False,0,6,1,https://github.com/kif,Remove const to make SLEEF compatible with POCL,1,[],https://github.com/pocl/pocl/pull/896,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/896#issuecomment-745842797,"Apparently on PPC64le the compiler is ""properly"" detected then compilation fails as
signatures are not aligned.
I suspect on AMD64, the compiler is not properly detected and it work ""by accident"" (?)
close #876","Sorry, we are releasing within hours, so I prefer not to pull this in to the release branch. Please resend the PR against master.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/new2f7,1,https://github.com/pocl/pocl/pull/898,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/898#issuecomment-748162870,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.",Very nice! Thanks for your willingness to contribute back to the open source. I'm looking forward for finding the time to review this.,True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/Oblomov,3,https://github.com/pocl/pocl/pull/898#issuecomment-748174012,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","This is possibly a stupid question, but would it be possible to actually have the TBB device be something like a subclass of the pthread device, in order to minimize code duplication?",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/898#issuecomment-748175398,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","@Oblomov I agree. This is what is done between basic and several other drivers (at least pthread), the ugly C style of ""inheritance"".",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/new2f7,5,https://github.com/pocl/pocl/pull/898#issuecomment-754284247,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.",Thanks for the comments so far. I'm aware that the duplicated code segments are difficult to maintain. I'm willing to work on this issue but it might take some time until I'll implement the proposed changes.,True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/898#issuecomment-754426490,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","One option would be to rename 'pthread' to 'multithread'/'mt'/'multicore'/mc' and just implement the TBB as an alternative code path for its thread scheduler in it. If the TBB works, I don't know if there is an use case to use both the pthread and the TBB drivers simultaneously. Pthread solely is useful for multithreaded systems without TBB.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/new2f7,7,https://github.com/pocl/pocl/pull/898#issuecomment-839666088,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Sorry for the long delay with this PR, I was busy finalising the associated paper and presentation, which are now available.
In addition to the requested changes above, I've added the following changes:

02c2b81 Use a generic pocl_build_hash function for basic, pthread, tbb devices
13a1b7b Merge pthread_utils.h/.c and tbb_utils.h/.cc into new files called common_utils.h/.c
I replaced the 3rd party FindTBB.cmake (which does not support TBB 2021) with the binary integration according to TBB's official documentation.

I also prepared another commit to reduce duplicate code. To finish it, I would like to know:

Why is the basic device using the official Khronos vendor ID but the pthread device isn't?
Maybe consider using the Khronos vendor ID as fallback in cpuinfo.c? This seems to be the cleanest solution to me.
How to handle multiple instances of the same device in this case? Is it a problem if multiple instances use the same ID?

If you have any other comments to the code or the things mentioned above, please let me know.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/898#issuecomment-839868917,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Looks much better now! We'll take a closer look in the group and test it out.


Congrats on the IWOCL paper! Can you add a link to it in the http://portablecl.org/publications.html ? The web pages are in the repo.


Please add yourself to the copyright lines in the significantly edited files.


If TBB is enabled, I believe it should be used by default instead of pthread. Does your patch do that?


CHANGES and CREDITS should be updated.



Why is the basic device using the official Khronos vendor ID but the pthread device isn't?

No reason to my knowledge. The fallback sounds reasonable. Is the vendor id per (physical) device or just device type (the vendor of it)?. I think there's an extension called device uuid or such that is for identifying the physical device.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/jansol,9,https://github.com/pocl/pocl/pull/898#issuecomment-839953776,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","As per this footnote in the spec the vendor ID is specific to the OpenCL implementation, so PoCL should use the official Khronos vendor ID. For the CPU device implementations that seems fairly straightforward. I guess this is mainly meant for informational purposes and for easy filtering of known problematic implementations on the application level (for example IIRC the Cycles renderer in Blender explicitly checks that OpenCL devices have the AMD vendor ID and essentially forces NVIDIA devices to use CUDA instead).
For actually identifying a device there is indeed an extension.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/new2f7,10,https://github.com/pocl/pocl/pull/898#issuecomment-840448590,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Thank you very much for your remarks. I look forward to implementing them.

Did you run the tier1 tests with tbb as default already? Does the conformance pass?

I'm currently running conformance_suite_full. Suits micro and mini pass. I can run the tier1 tests afterwards, but I'm using a weird environment for the longer running stuff and it took me ages to figure out how to run conformance_suite_full.
I'm not very familiar with the copyright stuff. Maybe you could answer question 3 from my initial post or point to some literature?


I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"".",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/pjaaskel,11,https://github.com/pocl/pocl/pull/898#issuecomment-840499074,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"".

That should be the one that really owns the copyrights of the contributed work. If you are paid by an organization and the copyrights are transferred to them, they own the copyrights and you should ensure that you can license that code with MIT. In Universities it usually boils down to the project consortium agreements etc. where it's said which licenses must be used etc. for the code written within the project's funds etc. If it's clearly from one owner only then it's preferred to put that one (the person and the organization), PoCL developers have been used when there have been multiple smaller contributors, or the author has been shy, but the convention is not written in stone.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/Kazhuu,12,https://github.com/pocl/pocl/pull/898#issuecomment-840751897,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Hello! I was doing some testing with TBB device and polybench OpenCL kernels. I put up a graph below about the execution times with Intel OpenCL and PoCL with both pthread and TBB devices. TBB was used with auto partitioner. The execution time is normalized to Intel OpenCL execution time. Meaning that Intel execution time is always 1 and lower is better.

As can be seen from the graph some kernels execute a bit faster and some a bit slower. What caught my attention is gramschmidt kernel increased execution time when using TBB device.
I'm not 100% sure what causes this but in the past execution time for this kernel used to take around 44 seconds before I fixed the synchronization to all previous events in case of in-order queue which was not required. Meaning that when in-order queue was used, pocl did synchronization to all previous events with locking, which slowed down the total execution time a lot. With above fix the execution time for the kernel dropped to ~0.50 seconds. I think the issue was that the gramschmidt program enqueue kernels and barriers in the loop. Not sure is this related.
Any ideas why that specific kernel behaves like this with TBB?",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/noma,13,https://github.com/pocl/pocl/pull/898#issuecomment-840780644,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.",@Kazhuu thanks for the benchmark results.  Have you tried playing around with explicitly setting POCL_TBB_PARTITIONER as described in the doc?,True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/Kazhuu,14,https://github.com/pocl/pocl/pull/898#issuecomment-841020655,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","I used command POCL_DEVICES=tbb POCL_TBB_PARTITIONER=auto ./gramschmidt.exe to use TBB device and set the partitioner.
In polybench you can set the data set size in the header file. For the graph I was using MINI_DATASET with gramschmidt kernel. I retested with SMALL_DATASET data set size and actually now TBB executes faster than pthread. Below table of lowest execution times I observed in seconds.



pthread
TBB+auto
TBB+affinity
TBB+simple
TBB+static




14.501403
14.001868
12.684936
13.981414
12.654978



So it seems that TBB is better in this case when the data set size gets big enough.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/new2f7,15,https://github.com/pocl/pocl/pull/898#issuecomment-842141303,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","I addressed all previous remarks with the above commits or added a comment why I haven't implemented them (yet).
question about subdevice support
How important is subdevice support for PoCL? Are there common use cases out there?
To achieve rudimentary support, one could read the maximum number of threads to use from an environment variable and pass it to task_arena.initialize() (similar to POCL_MAX_PTHREAD_COUNT).
conformance tests results



suite
#tests that fail with pthread
#tests that additionally fail with tbb




micro
0
0


mini
2
0


full
11
0



The following tests from conformance_suite_mini failed:
166 - conformance_compiler (Failed)
412 - conformance_relationals_shuffle (Failed)

The following tests from conformance_suite_full failed:
171 - conformance_compiler (Failed)
360 - conformance_math_fmod (Failed)
362 - conformance_math_frexp (Failed)
392 - conformance_math_pow (Failed)
393 - conformance_math_pown (Failed)
394 - conformance_math_powr (Failed)
395 - conformance_math_remainder (Failed)
396 - conformance_math_remquo (Failed)
398 - conformance_math_rootn (Failed)
417 - conformance_relationals_shuffle (Failed)
439 - conformance_vecalign (Failed)

Logs for conformance_suite_full (I reran the failed tests with ctest --rerun-failed as suggested by ctest):
conformance_full_pthread.log
conformance_full_pthread_rerun_failed.log
conformance_full_tbb.log
conformance_full_tbb_rerun_failed.log
performance
@Kazhuu Thanks for trying the tbb device. I haven't evaluated the performance of the tbb device in scenarios other than the ones described in the paper. However, I can describe theoretical scenarios, in which the pthread device should be faster than the tbb device:
As far as I understand the pthread device, the execution of commands and kernels can overlap, because each thread constantly pulls for commands and kernels when work is done. For the tbb device, there is just one so called meta thread that does this and in case of kernels, executes them in parallel by a blocking call to the TBB library. Thus, this behaviour means that the tbb device cannot execute commands in parallel and the execution of kernels will not overlap.
This bottleneck could be widened by creating more meta threads which effectively execute commands and kernels in parallel. However, this would result in a (much) more complex implementation that also requires an answer to the question how TBB behaves when calling parallel_for() multiple times while other ones are still running.
I haven't worked towards such a solution, because the scenarios I was looking at benefited from the current solution and if a workload corresponds to the cases described above, the pthread device can still be used.
I hope these remarks help assessing the tbb device.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/new2f7,16,https://github.com/pocl/pocl/pull/898#issuecomment-842150666,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Device interop is important feature/benefit of PoCL. Can you add a smoke test to the test suite which does ping-pong between at least two different device drivers, e.g. tbb+basic (if tbb is enabled)? There should be some examples like that already, IIRC?

There is a conformance test which utilises two devices (conformance_events_ooo). It passes when there is one pthread and one tbb device (default before 0c99ec0). It does not fail if there is just one device but prints some warnings. Could you point me to the mentioned examples if you wish further testing?",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/franz,17,https://github.com/pocl/pocl/pull/898#issuecomment-842589747,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","How important is subdevice support for PoCL? Are there common use cases out there?

It becomes important when using PoCL on with machines with multiple NUMA nodes (CPU sockets). In that case you need affinity + subdevices to use the machine efficiently. Granted it's not a very common usecase, but IIRC there were a few people using it, we had a few related bugreports. But IMO it's not necessary to deal with subdevices in the first PR; it's fine have no subdevice support in the TBB device driver for now.
I've looked at the code and it looks reasonable, i only have some minor nitpicks:


In check_cmd_queue_for_device() - the for loop (DL_FOREACH) is unnecessary (that code was there for subdevices).


the TBB shipped in ubuntu doesn't have a CMake file, but it has a pkg-config file; TBB could be searched using pkg_check_modules as fallback after find_package. Something like this should work:


--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -407,7 +407,18 @@ endif()
 
 if(ENABLE_TBB_DEVICE)
   # related documentation: https://github.com/oneapi-src/oneTBB/tree/tbb_2020/cmake#binary-package-integration
-  find_package(TBB REQUIRED tbb)
+  find_package(TBB)
+  if(NOT TBB AND PKG_CONFIG_FOUND)
+    pkg_check_modules(TBB tbb>=2015)
+    if(TBB_FOUND)
+      set(TBB_IMPORTED_TARGETS ""${TBB_LIBRARIES}"" CACHE STRING ""TBB libraries"" FORCE)
+    endif()
+  endif()
+
+  if(NOT TBB_IMPORTED_TARGETS)
+    message(FATAL_ERROR ""Can't find TBB libraries"")
+  endif()
+
   # The tbb device depends on the pthread device which depends on the basic device. ENABLE_HOST_CPU_DEVICES enables both.
   set(ENABLE_HOST_CPU_DEVICES 1)
 endif()

Aside these, LGTM. Thanks for working on this.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/pjaaskel,18,https://github.com/pocl/pocl/pull/898#issuecomment-849360764,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Otherwise this now looks good and I started testing it (with Michal's fixes on top).
I noticed this breaks build when there are no host devices enabled. I found it in my local CUDA-only build. This is because moving the build hash and default extension stuff to common.c and common_utils.c and assuming they are always there. Also I noticed the build system doesn't treat tbb as a ""host device"".
I mean:
option(ENABLE_HOST_CPU_DEVICES ""Add host CPUs as OpenCL devices (basic and pthread)."" ON)

tbb should be considered a host CPU device, so this setting is now misleading.  The build host device hash for example should be introduced for all CPU device driver types (basic, pthread, tbb).",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/pjaaskel,19,https://github.com/pocl/pocl/pull/898#issuecomment-878187130,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Hi - just wanted to check, what is the status/plan of this PR? It would be great to get this in sooner than later to get it some testing.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/new2f7,20,https://github.com/pocl/pocl/pull/898#issuecomment-879097995,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Hey, I'm sorry, I'm currently not able to work on this PR. Some time ago, I have started some minor work locally which addresses the above comments from late May (Michal's fixes). I'll try to get this work into this PR this weekend but I cannot promise anything. Apart from these changes, I consider this PR ready for merge.
I had a plan to evaluate the performance of the TBB device on an ARM system but this plan is delayed at least until mid August.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/pjaaskel,21,https://github.com/pocl/pocl/pull/898#issuecomment-938709145,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.",Any updates on this? Would be nice to get this cleaned and pulled in.,True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/isuruf,22,https://github.com/pocl/pocl/pull/898#issuecomment-1035972283,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.",I rebased this PR on top of master branch. There are 2 tests failing though.,True,"{'THUMBS_UP': ['https://github.com/anton-malakhov', 'https://github.com/pjaaskel']}"
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/pjaaskel,23,https://github.com/pocl/pocl/pull/898#issuecomment-1038888081,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.",Thanks @isuruf  for working on this useful feature. Did you check our comments in this thread and try to address them?,True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/new2f7,24,https://github.com/pocl/pocl/pull/898#issuecomment-1040468883,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.",@isuruf Thank you for looking into my stale work. Which two tests of which test suite are failing?,True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/isuruf,25,https://github.com/pocl/pocl/pull/898#issuecomment-1042066708,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Two tests in pocl's internal test-suite run by ctest.
The following tests FAILED:
        113 - runtime/clCreateSubDevices (Failed)
        157 - EinsteinToolkit_SubDev (Subprocess aborted)
Errors while running CTest

I guess the failures are because of no subdevice suppport?",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/isuruf,26,https://github.com/pocl/pocl/pull/898#issuecomment-1063269545,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","Any suggestions on how to fix those tests?
@pjaaskel, I looked through the suggestions, but I don't understand what to do in

In check_cmd_queue_for_device() - the for loop (DL_FOREACH) is unnecessary (that code was there for subdevices).",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/franz,27,https://github.com/pocl/pocl/pull/898#issuecomment-1063888828,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","@isuruf
Yes the tests fail b/c of the subdevice support, we need an extra check in them and exit with a ""skip"" exit code (IIRC 77).
WRT the check_cmd_queue_for_device: it has a for loop that doesn't loop, it just returns the first value. So the whole body can be replaced with retval = scheduler.work_queue; if (retval) DL_DELETE(scheduler.work_queue, retval); return retval or even inlined.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/new2f7,28,https://github.com/pocl/pocl/pull/898#issuecomment-1064501119,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","I looked into my notes from 9 months ago and found some unfinished code. I'll just paste it here in case anyone finds it useful. Thanks again for looking into my unfinished work!
# Unfinished Patch (not working)

diff --git a/lib/CL/devices/tbb/tbb_scheduler.cc b/lib/CL/devices/tbb/tbb_scheduler.cc
index 0ddbc060..c2d6c7a1 100644
--- a/lib/CL/devices/tbb/tbb_scheduler.cc
+++ b/lib/CL/devices/tbb/tbb_scheduler.cc
@@ -273,17 +273,6 @@ static kernel_run_command *pocl_tbb_prepare_kernel(void *data,
   return (run_cmd);
 }

-/* Note: Using a double linked list is probably not necessary any more. */
-static _cl_command_node *check_cmd_queue_for_device() {
-  _cl_command_node *cmd;
-  DL_FOREACH(scheduler.work_queue, cmd) {
-    DL_DELETE(scheduler.work_queue, cmd)
-    return cmd; // return first cmd
-  }
-
-  return NULL;
-}
-
 static void tbb_exec_command(kernel_run_command *run_cmd) {
   /* Note: Grain size variation could be allowed for each dimension
    * individually. */
@@ -366,9 +355,10 @@ static int tbb_scheduler_get_work() {
 RETRY:
   do_exit = scheduler.meta_thread_shutdown_requested;

-  /* execute a command if available */
-  cmd = check_cmd_queue_for_device();
-  if (cmd) {
+  /* check if command is available */
+  if (scheduler.work_queue) {
+    /* command available, remove from queue and execute */
+    DL_DELETE(scheduler.work_queue, cmd)
     POCL_FAST_UNLOCK(scheduler.wq_lock_fast);

     assert(pocl_command_is_ready(cmd->event));
@@ -382,12 +372,13 @@ RETRY:
     }

     POCL_FAST_LOCK(scheduler.wq_lock_fast);
-  }

-  /* if no command was available, sleep */
-  if ((cmd == NULL) && (do_exit == 0)) {
-    pthread_cond_wait(&scheduler.wake_meta_thread, &scheduler.wq_lock_fast);
-    goto RETRY;
+  } else {
+    /* no command available, sleep */
+    if (do_exit == 0) {
+      pthread_cond_wait(&scheduler.wake_meta_thread, &scheduler.wq_lock_fast);
+      goto RETRY;
+    }
   }

   POCL_FAST_UNLOCK(scheduler.wq_lock_fast);


# Draft comment for Github PR 

> 1. In `check_cmd_queue_for_device()` - the for loop (DL_FOREACH) is unnecessary (that code was there for subdevices).

I'm aware of this issue. The current solution is a workaround because utlist.h does not provide something like DL_REMOVE_FIRST.

> 2. the TBB shipped in ubuntu doesn't have a CMake file, but it has a pkg-config file; TBB could be searched using `pkg_check_modules` as fallback after `find_package`. Something like this should work:

I could not reproduce the problem with Linux Mint 20/20.1, which is based on Ubuntu 20.04. I installed `libtbb2` and `libtbb-dev`. However, it works with and without your patch thus I added it to this PR.",True,{}
pocl/pocl,https://github.com/pocl/pocl,898,2020-12-17T10:22:52Z,,2022-03-23T15:33:58Z,OPEN,False,994,150,26,https://github.com/new2f7,TBB device,22,[],https://github.com/pocl/pocl/pull/898,https://github.com/jansol,29,https://github.com/pocl/pocl/pull/898#issuecomment-1076493046,"I hereby propose a new device which uses the Intel Threading Building Blocks library for scheduling (as suggested here). The intention of this device is to provide an alternative to the pthread device, which is:

potentially faster (Intel OpenCL uses TBB)
more configurable, such that workgroup scheduling best matches the application's needs

Similar to OpenMP's schedule clause, a partitioner and a grain size can be specified via environment variables. See below for background information and benchmark results.
I would be grateful for a code review and any comments.  If you are familiar with the pthread device, I suggest starting here.
I verified that with the tbb device produces no new errors while running the conformance_micro and conformance_mini test suits (tests 166 conformance_compiler and 412 conformance_relationals_shuffle from conformance_mini fail with the pthread device as well).


Notes/Questions before merging this PR:

To implement the tbb device, I created a copy of the pthread device and made the necessary changes in a minimal intrusive manner. This led to some files being almost identical except some minor adjustments like renaming (especially in tbb.cc vs. pthread.c and tbb_utils.h/.cc vs. pthread_utils.h/.c). For example, when franz@de42b3a got merged into the master I applied it to the tbb device as well.
I included a third party CMake module (MIT licence) to locate the TBB library (Apache 2.0 licence). Depending on the progress at TBB, this module might be removed in the future.
I've seen different copyright claim styles: ""pocl developers"", a person, an institution, or both. What is the preferred way of claiming copyright at the beginning of each file? For me personally, I'm fine with ""PoCL developers"". Should I update the year when making changes to a file?


Background:
I'm a master computer science student at Humboldt University Berlin and implemented the tbb device as part of my study project supervised by @noma at Zuse Institute Berlin. There exists a paper at an internal draft stage. Update 2021-05-12: paper and presentation are now available.

The kernel with the highest performance from each kernel group of the hexciton_benchmark (25 iterations excluding one warmup iteration). The error bars indicate minimum and maximum values observed.


Selected operations from the op_benchmark (20480 data_elements,10000 iterations, 45 kernel_runs, 5 kernel_warmups). The error bars indicate the lowest and the highest average runtime observed across all vectorisation modes.","...TBB shipped in ubuntu doesn't have a CMake file...

Looks like TBB has been shipping the necessary cmake files since version 21.1.1. With Ubuntu 22.04 LTS right around the corner I'm not sure if there is much point in going out of our way to detect older versions as 2021.5.0 appears to already be packaged there under the names libtbb12 and libtbb-dev.
On older systems find_package already allows specifying a custom path for a given library so it should be possible to build a more recent version and simply point CMake at it with -DTBB_DIR=/path/to/tbb?",True,{}
pocl/pocl,https://github.com/pocl/pocl,899,2020-12-18T07:06:03Z,2021-01-30T15:33:43Z,2021-01-30T15:33:43Z,MERGED,True,1,1,1,https://github.com/serge-sans-paille,Fix build error - missing semi column,1,[],https://github.com/pocl/pocl/pull/899,https://github.com/serge-sans-paille,1,https://github.com/pocl/pocl/pull/899,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,903,2021-01-05T14:05:07Z,2021-01-30T16:47:42Z,2021-01-30T16:47:42Z,MERGED,True,7,1,1,https://github.com/Kazhuu,Fix changes in getAllocationSizeInBits() return type,1,[],https://github.com/pocl/pocl/pull/903,https://github.com/Kazhuu,1,https://github.com/pocl/pocl/pull/903,https://reviews.llvm.org/rG8e0148dff703dd1ff12cc143482274233a8dacf3,https://reviews.llvm.org/rG8e0148dff703dd1ff12cc143482274233a8dacf3,True,{}
pocl/pocl,https://github.com/pocl/pocl,904,2021-01-08T11:00:13Z,2021-02-01T07:27:50Z,2021-02-01T07:27:51Z,MERGED,True,104,2,3,https://github.com/Kazhuu,Disable jump threading pass from crashing pocl with LLVM 11 and 12,2,[],https://github.com/pocl/pocl/pull/904,https://github.com/Kazhuu,1,https://github.com/pocl/pocl/pull/904,"This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.","This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.",True,{}
pocl/pocl,https://github.com/pocl/pocl,904,2021-01-08T11:00:13Z,2021-02-01T07:27:50Z,2021-02-01T07:27:51Z,MERGED,True,104,2,3,https://github.com/Kazhuu,Disable jump threading pass from crashing pocl with LLVM 11 and 12,2,[],https://github.com/pocl/pocl/pull/904,https://github.com/Kazhuu,2,https://github.com/pocl/pocl/pull/904#issuecomment-758192010,"This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.","I added a regression test verify PoCL is not crashing anymore. I also wrote small summary about the reason why the crash happens to the test case itself. I guess this would do for now but later when jump threading is enabled, parallel region code need improvements and also when to run jump threading needs to be checked.",True,{}
pocl/pocl,https://github.com/pocl/pocl,904,2021-01-08T11:00:13Z,2021-02-01T07:27:50Z,2021-02-01T07:27:51Z,MERGED,True,104,2,3,https://github.com/Kazhuu,Disable jump threading pass from crashing pocl with LLVM 11 and 12,2,[],https://github.com/pocl/pocl/pull/904,https://github.com/isuruf,3,https://github.com/pocl/pocl/pull/904#issuecomment-758396306,"This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.",cc @inducer,True,{}
pocl/pocl,https://github.com/pocl/pocl,904,2021-01-08T11:00:13Z,2021-02-01T07:27:50Z,2021-02-01T07:27:51Z,MERGED,True,104,2,3,https://github.com/Kazhuu,Disable jump threading pass from crashing pocl with LLVM 11 and 12,2,[],https://github.com/pocl/pocl/pull/904,https://github.com/inducer,4,https://github.com/pocl/pocl/pull/904#issuecomment-758448995,"This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.",@Kazhuu Thanks for finding the root cause of #893 as well as a workaround!,True,{'ROCKET': ['https://github.com/Kazhuu']}
pocl/pocl,https://github.com/pocl/pocl,904,2021-01-08T11:00:13Z,2021-02-01T07:27:50Z,2021-02-01T07:27:51Z,MERGED,True,104,2,3,https://github.com/Kazhuu,Disable jump threading pass from crashing pocl with LLVM 11 and 12,2,[],https://github.com/pocl/pocl/pull/904,https://github.com/franz,5,https://github.com/pocl/pocl/pull/904#issuecomment-758583562,"This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.","the regression test causes invalid memory accesses (tested with LLVM 7 & 11):
==18426== Invalid write of size 4
==18426==    at 0x12947A14: _pocl_kernel_loopy_kernel_workgroup (in /tmp/POCL_CACHE/LL/MNMICCOOIGMKJBEHKKAECEHLKOHHECHEEIBEM/loopy_kernel/8-1-1-goffs0-smallgrid/loopy_kernel.so)
==18426==    by 0xF53BE76: pocl_basic_run (basic.c:424)
==18426==    by 0x660DF30: pocl_exec_command (common.c:665)
==18426==    by 0xF53C27C: basic_command_scheduler (basic.c:875)
==18426==    by 0xF53C3F1: pocl_basic_submit (basic.c:895)
==18426==    by 0x65E2CAD: POclEnqueueNDRangeKernel (clEnqueueNDRangeKernel.c:369)
==18426==    by 0x10A466: enqueueNDRangeKernel (cl2.hpp:8360)
==18426==    by 0x10A466: main (test_issue_893.cpp:56)
==18426==  Address 0x11ca4a80 is 0 bytes after a block of size 128 alloc'd
==18426==    at 0x4C33E76: memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==18426==    by 0x4C33F91: posix_memalign (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==18426==    by 0x65FB055: pocl_memalign_alloc (pocl_util.c:252)
==18426==    by 0x65FB055: pocl_aligned_malloc (pocl_util.c:280)
==18426==    by 0x660F9F4: pocl_aligned_malloc_global_mem (common.c:1279)
==18426==    by 0xF53B9E2: pocl_basic_alloc_mem_obj (basic.c:243)
==18426==    by 0x65D3EA8: POclCreateBuffer (clCreateBuffer.c:147)
==18426==    by 0x10A32F: Buffer (cl2.hpp:3823)
==18426==    by 0x10A32F: main (test_issue_893.cpp:50)
==18426== 
==18426== Invalid write of size 4
==18426==    at 0x12947A29: _pocl_kernel_loopy_kernel_workgroup (in /tmp/POCL_CACHE/LL/MNMICCOOIGMKJBEHKKAECEHLKOHHECHEEIBEM/loopy_kernel/8-1-1-goffs0-smallgrid/loopy_kernel.so)
==18426==    by 0xF53BE76: pocl_basic_run (basic.c:424)
==18426==    by 0x660DF30: pocl_exec_command (common.c:665)
==18426==    by 0xF53C27C: basic_command_scheduler (basic.c:875)
==18426==    by 0xF53C3F1: pocl_basic_submit (basic.c:895)
==18426==    by 0x65E2CAD: POclEnqueueNDRangeKernel (clEnqueueNDRangeKernel.c:369)
==18426==    by 0x10A466: enqueueNDRangeKernel (cl2.hpp:8360)
==18426==    by 0x10A466: main (test_issue_893.cpp:56)
==18426==  Address 0x11ca4aa0 is 160 bytes inside a block of size 256 in arena ""client""


... resulting in random failures on buildbots. Possibly the test does some invalid memory access, or pocl has another bug.",True,{}
pocl/pocl,https://github.com/pocl/pocl,904,2021-01-08T11:00:13Z,2021-02-01T07:27:50Z,2021-02-01T07:27:51Z,MERGED,True,104,2,3,https://github.com/Kazhuu,Disable jump threading pass from crashing pocl with LLVM 11 and 12,2,[],https://github.com/pocl/pocl/pull/904,https://github.com/Kazhuu,6,https://github.com/pocl/pocl/pull/904#issuecomment-758594418,"This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.",This might be because I just spammed some random variables when calling the kernel without really knowing what it's expecting. @inducer where is this kernel from? Could you inform how to call this kernel properly so at least we can rule that out? And is this the original kernel without any modifications?,True,{}
pocl/pocl,https://github.com/pocl/pocl,904,2021-01-08T11:00:13Z,2021-02-01T07:27:50Z,2021-02-01T07:27:51Z,MERGED,True,104,2,3,https://github.com/Kazhuu,Disable jump threading pass from crashing pocl with LLVM 11 and 12,2,[],https://github.com/pocl/pocl/pull/904,https://github.com/inducer,7,https://github.com/pocl/pocl/pull/904#issuecomment-759859699,"This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.","It's supposed to be a convolution. The full kernel (before I messed with it to minimize it) is this:
#!/usr/bin/env python

import numpy as np
import pyopencl as cl

ctx = cl.create_some_context()

prg = cl.Program(ctx, """"""
#define lid(N) ((int) get_local_id(N))
#define gid(N) ((int) get_group_id(N))

__kernel void __attribute__ ((reqd_work_group_size(16, 16, 1))) loopy_kernel(__global float const *__restrict__ f, __global float const *__restrict__ img, __global float *__restrict__ out, int const im_h, int const im_w, int const nfeats, int const nimgs)
{
  float acc_f_x_f_y_icolor;
  __local float f_fetch[7 * 7 * 3];
  __local float img_fetch[22 * 22];

  if (6 + -1 * /* f_dim_2 */ lid(1) >= 0 && 2 + -1 * /* f_dim_3 */ lid(0) >= 0)
    for (int f_dim_1 = 0; f_dim_1 <= 6; ++f_dim_1)
      f_fetch[21 * f_dim_1 + 3 * /* f_dim_2 */ lid(1) + /* f_dim_3 */ lid(0)] = f[147 * /* ifeat */ gid(2) + 21 * f_dim_1 + 3 * /* f_dim_2 */ lid(1) + /* f_dim_3 */ lid(0)];
  for (int iimg = 0; iimg <= nimgs; ++iimg)
  {
    if (-1 + -1 * /* im_y_inner */ lid(1) + -16 * /* im_y_outer */ gid(1) + im_h >= 0 && -1 + -1 * /* im_x_inner */ lid(0) + -16 * /* im_x_outer */ gid(0) + im_w >= 0)
      acc_f_x_f_y_icolor = 0.0f;
    for (int icolor = 0; icolor <= 2; ++icolor)
    {
      barrier(CLK_LOCAL_MEM_FENCE) /* for img_fetch (img_fetch_rule rev-depends on insn_f_x_f_y_icolor_update) */;
      if (5 + -1 * /* img_dim_2_inner */ lid(0) + -16 * /* im_y_outer */ gid(1) + im_h >= 0 && 5 + -1 * /* img_dim_1_inner */ lid(1) + -16 * /* im_x_outer */ gid(0) + im_w >= 0)
        for (int img_dim_2_outer = 0; img_dim_2_outer <= (6 + -1 * /* f_dim_2 */ lid(1) >= 0 && 2 + -1 * /* f_dim_3 */ lid(0) >= 0 && -1 + im_w + -1 * /* im_x_inner */ lid(0) + -16 * /* im_x_outer */ gid(0) >= 0 && -16 + im_h + -16 * /* im_y_outer */ gid(1) >= 0 ? 1 + -1 * /* img_dim_2_inner */ lid(0) + (5 + 15 * /* img_dim_2_inner */ lid(0)) / 16 : -1 * /* im_y_outer */ gid(1) + -1 * /* img_dim_2_inner */ lid(0) + (5 + im_h + 15 * /* img_dim_2_inner */ lid(0)) / 16); ++img_dim_2_outer)
          if (21 + -16 * img_dim_2_outer + -1 * /* img_dim_2_inner */ lid(0) >= 0)
            for (int img_dim_1_outer = 0; img_dim_1_outer <= (6 + -1 * /* f_dim_2 */ lid(1) >= 0 && 2 + -1 * /* f_dim_3 */ lid(0) >= 0 && -16 + im_w + -16 * /* im_x_outer */ gid(0) >= 0 && -1 + im_h + -1 * /* im_y_inner */ lid(1) + -16 * /* im_y_outer */ gid(1) >= 0 ? 1 + -1 * /* img_dim_1_inner */ lid(1) + (5 + 15 * /* img_dim_1_inner */ lid(1)) / 16 : -1 * /* im_x_outer */ gid(0) + -1 * /* img_dim_1_inner */ lid(1) + (5 + im_w + 15 * /* img_dim_1_inner */ lid(1)) / 16); ++img_dim_1_outer)
              if (21 + -16 * img_dim_1_outer + -1 * /* img_dim_1_inner */ lid(1) >= 0)
                img_fetch[22 * (16 * img_dim_1_outer + /* img_dim_1_inner */ lid(1)) + 16 * img_dim_2_outer + /* img_dim_2_inner */ lid(0)] = img[3 * (im_h + 6) * (im_w + 6) * iimg + 3 * (im_h + 6) * (16 * /* im_x_outer */ gid(0) + 16 * img_dim_1_outer + /* img_dim_1_inner */ lid(1)) + 3 * (16 * /* im_y_outer */ gid(1) + 16 * img_dim_2_outer + /* img_dim_2_inner */ lid(0)) + icolor];
      barrier(CLK_LOCAL_MEM_FENCE) /* for img_fetch (insn_f_x_f_y_icolor_update depends on img_fetch_rule) */;
      if (-1 + -1 * /* im_y_inner */ lid(1) + -16 * /* im_y_outer */ gid(1) + im_h >= 0 && -1 + -1 * /* im_x_inner */ lid(0) + -16 * /* im_x_outer */ gid(0) + im_w >= 0)
        for (int f_y = -3; f_y <= 3; ++f_y)
          for (int f_x = -3; f_x <= 3; ++f_x)
            acc_f_x_f_y_icolor = acc_f_x_f_y_icolor + img_fetch[22 * (3 + -1 * f_x + /* im_x_inner */ lid(0)) + 3 + -1 * f_y + /* im_y_inner */ lid(1)] * f_fetch[72 + icolor + 21 * f_x + 3 * f_y];
    }
    if (-1 + -1 * /* im_y_inner */ lid(1) + -16 * /* im_y_outer */ gid(1) + im_h >= 0 && -1 + -1 * /* im_x_inner */ lid(0) + -16 * /* im_x_outer */ gid(0) + im_w >= 0)
      out[im_h * im_w * nfeats * iimg + im_h * im_w * /* ifeat */ gid(2) + im_h * (16 * /* im_x_outer */ gid(0) + /* im_x_inner */ lid(0)) + 16 * /* im_y_outer */ gid(1) + /* im_y_inner */ lid(1)] = acc_f_x_f_y_icolor;
  }
}
"""""").build()
As far as I can remember, it comes from the second variant here.",True,{}
pocl/pocl,https://github.com/pocl/pocl,904,2021-01-08T11:00:13Z,2021-02-01T07:27:50Z,2021-02-01T07:27:51Z,MERGED,True,104,2,3,https://github.com/Kazhuu,Disable jump threading pass from crashing pocl with LLVM 11 and 12,2,[],https://github.com/pocl/pocl/pull/904,https://github.com/Kazhuu,8,https://github.com/pocl/pocl/pull/904#issuecomment-760023541,"This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.",Okay I just increased the test output buffer size to get rid of the valgrind warnings. Thanks for this @franz!,True,{}
pocl/pocl,https://github.com/pocl/pocl,904,2021-01-08T11:00:13Z,2021-02-01T07:27:50Z,2021-02-01T07:27:51Z,MERGED,True,104,2,3,https://github.com/Kazhuu,Disable jump threading pass from crashing pocl with LLVM 11 and 12,2,[],https://github.com/pocl/pocl/pull/904,https://github.com/pjaaskel,9,https://github.com/pocl/pocl/pull/904#issuecomment-770601300,"This PR will fix issue #893. The crash was caused by PoCL construction invalid parallel regions which don't follow single-entry single-exit policy. This happens because LLVM 11 onward jump threading pass is enabled by default in the front end when OpenCL kernel is compiled to IR before other PoCL passes run. IR contains duplicate blocks which will mess up parallel regions especially when kernel contain barriers.
To fix this for now I disabled jump threading pass with options it provides. There wasn't option to explicitly turn it off. I also left comment if this is enabled later then parallel region construction code might need some improvements and also to make sure using this pass doesn't disable other optimizations like vectorization. Maybe also running this pass later after PoCL passes would be better option than running it before PoCL does anything with the kernel.","In this case if the the Copyrights are fully owned by you, the more correct form would be Mauri Mustonen / Tampere University, but this is fine too.",True,{}
pocl/pocl,https://github.com/pocl/pocl,905,2021-01-08T17:27:22Z,2021-02-03T12:48:54Z,2021-02-03T12:48:54Z,MERGED,True,0,10,1,https://github.com/Kazhuu,Remove redundant code,1,[],https://github.com/pocl/pocl/pull/905,https://github.com/Kazhuu,1,https://github.com/pocl/pocl/pull/905,Remove some unnecessary code and variables which are not used. Most likely from copy paste or something else.,Remove some unnecessary code and variables which are not used. Most likely from copy paste or something else.,True,{}
pocl/pocl,https://github.com/pocl/pocl,910,2021-01-25T22:59:43Z,2021-02-01T15:20:38Z,2021-02-01T16:07:32Z,MERGED,True,115,3,11,https://github.com/matthiasdiener,pocl-cuda: implement support for cl_nv_device_attribute_query,6,[],https://github.com/pocl/pocl/pull/910,https://github.com/matthiasdiener,1,https://github.com/pocl/pocl/pull/910,WIP - looking for feedback.,WIP - looking for feedback.,True,"{'THUMBS_UP': ['https://github.com/inducer', 'https://github.com/Oblomov']}"
pocl/pocl,https://github.com/pocl/pocl,910,2021-01-25T22:59:43Z,2021-02-01T15:20:38Z,2021-02-01T16:07:32Z,MERGED,True,115,3,11,https://github.com/matthiasdiener,pocl-cuda: implement support for cl_nv_device_attribute_query,6,[],https://github.com/pocl/pocl/pull/910,https://github.com/znmeb,2,https://github.com/pocl/pocl/pull/910#issuecomment-767169517,WIP - looking for feedback.,I can test this on Jetson Nano and AGX Xavier - will the CUDA tests show anything? Will clinfo?,True,{'THUMBS_UP': ['https://github.com/matthiasdiener']}
pocl/pocl,https://github.com/pocl/pocl,910,2021-01-25T22:59:43Z,2021-02-01T15:20:38Z,2021-02-01T16:07:32Z,MERGED,True,115,3,11,https://github.com/matthiasdiener,pocl-cuda: implement support for cl_nv_device_attribute_query,6,[],https://github.com/pocl/pocl/pull/910,https://github.com/matthiasdiener,3,https://github.com/pocl/pocl/pull/910#issuecomment-767171572,WIP - looking for feedback.,"I can test this on Jetson Nano and AGX Xavier - will the CUDA tests show anything? Will clinfo?

Thank you! I'm not sure about the CUDA tests, but clinfo should show something.
You could also try code like this (0x4008 == CL_DEVICE_PCI_BUS_ID_NV):
clGetDeviceInfo(device, 0x4008, sizeof(buf_uint), &buf_uint, NULL)",True,{}
pocl/pocl,https://github.com/pocl/pocl,910,2021-01-25T22:59:43Z,2021-02-01T15:20:38Z,2021-02-01T16:07:32Z,MERGED,True,115,3,11,https://github.com/matthiasdiener,pocl-cuda: implement support for cl_nv_device_attribute_query,6,[],https://github.com/pocl/pocl/pull/910,https://github.com/matthiasdiener,4,https://github.com/pocl/pocl/pull/910#issuecomment-767182769,WIP - looking for feedback.,"Here is a diff of the output of clinfo between pocl-1.6 and this branch:
--- pocl-1.6
+++ this branch
@@ -1,16 +1,18 @@
   Device Name                                     Tesla V100-SXM2-16GB
   Device Vendor                                   NVIDIA Corporation
   Device Vendor ID                                0x10de
   Device Version                                  OpenCL 1.2 pocl HSTR: CUDA-sm_70
-  Driver Version                                  1.6
+  Driver Version                                  1.7-pre cl_nv_device_attribute_query-ext-0-g37e699e5
   Device OpenCL C Version                         OpenCL C 1.2 pocl
   Device Type                                     GPU
+  Device Topology (NV)                            PCI-E, 03:00.0
   Device Profile                                  FULL_PROFILE
   Device Available                                Yes
   Compiler Available                              Yes
   Linker Available                                Yes
   Max compute units                               80
   Max clock frequency                             1530MHz
+  Compute Capability (NV)                         7.0
   Device Partition                                (core)
     Max number of sub-devices                     1
     Supported partition types                     None
@@ -19,6 +21,7 @@
   Max work item sizes                             1024x1024x64
   Max work group size                             1024
   Preferred work group size multiple              32
+  Warp size (NV)                                  32
   Preferred / native vector sizes
     char                                                 1 / 1
     short                                                1 / 1
@@ -50,12 +53,14 @@
   Error Correction support                        Yes
   Max memory allocation                           4236378112 (3.945GiB)
   Unified memory for Host and Device              No
+  Integrated memory (NV)                          No
   Minimum alignment for any data type             128 bytes
   Alignment of base address                       4096 bits (512 bytes)
   Global Memory cache type                        None
   Image support                                   No
   Local memory type                               Local
   Local memory size                               49152 (48KiB)
+  Registers per block (NV)                        65536
   Max number of constant args                     8
   Max constant buffer size                        65536 (64KiB)
   Max size of kernel argument                     1024
@@ -67,6 +72,10 @@
   Execution capabilities
     Run OpenCL kernels                            Yes
     Run native kernels                            No
+    Kernel execution timeout (NV)                 No
+  Concurrent copy and kernel execution (NV)       Yes
+    Number of async copy engines                  4
   printf() buffer size                            16777216 (16MiB)
   Built-in kernels                                (n/a)
-  Device Extensions                               cl_khr_byte_addressable_store cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics
+  Device Extensions                               cl_khr_byte_addressable_store cl_khr_global_int32_base_atomics cl_khr_global_int32_extended_atomics cl_khr_local_int32_base_atomics cl_khr_local_int32_extended_atomics cl_khr_fp64 cl_khr_int64_base_atomics cl_khr_int64_extended_atomics cl_nv_device_attribute_query",True,{}
pocl/pocl,https://github.com/pocl/pocl,910,2021-01-25T22:59:43Z,2021-02-01T15:20:38Z,2021-02-01T16:07:32Z,MERGED,True,115,3,11,https://github.com/matthiasdiener,pocl-cuda: implement support for cl_nv_device_attribute_query,6,[],https://github.com/pocl/pocl/pull/910,https://github.com/matthiasdiener,5,https://github.com/pocl/pocl/pull/910#issuecomment-767691119,WIP - looking for feedback.,"LGTM. Can you add the feature to CHANGES?

Added, thanks.",True,{}
pocl/pocl,https://github.com/pocl/pocl,910,2021-01-25T22:59:43Z,2021-02-01T15:20:38Z,2021-02-01T16:07:32Z,MERGED,True,115,3,11,https://github.com/matthiasdiener,pocl-cuda: implement support for cl_nv_device_attribute_query,6,[],https://github.com/pocl/pocl/pull/910,https://github.com/pjaaskel,6,https://github.com/pocl/pocl/pull/910#issuecomment-769155198,WIP - looking for feedback.,"Thanks.
Now that I look at this again, I think it would be cleaner if the vendor-specific device attribute handling was delegated to the driver layer so that the drivers can handle driver-specific extensions internally without needing to add driver-specific calls or attributes to the generic clGetDeviceInfo() implementation. That is, before returning an error for an unknown device info in clGetDeviceInfo() it would call a function in the driver layer which can be then overridden in the cuda side to detect the cases (and would be NULL by default for the drivers). Can you do this type of refactoring to make it cleaner and easier in the future to add device/vendor-specific device infos?
Also I tested this yesterday and PyOpenCL started to fail. I didn't have a chance to debug further, but can you try with the PyOpenCL enabled and check if you can see it?",True,{}
pocl/pocl,https://github.com/pocl/pocl,910,2021-01-25T22:59:43Z,2021-02-01T15:20:38Z,2021-02-01T16:07:32Z,MERGED,True,115,3,11,https://github.com/matthiasdiener,pocl-cuda: implement support for cl_nv_device_attribute_query,6,[],https://github.com/pocl/pocl/pull/910,https://github.com/matthiasdiener,7,https://github.com/pocl/pocl/pull/910#issuecomment-769186212,WIP - looking for feedback.,"Now that I look at this again, I think it would be cleaner if the vendor-specific device attribute handling was delegated to the driver layer so that the drivers can handle driver-specific extensions internally without needing to add driver-specific calls or attributes to the generic clGetDeviceInfo() implementation. That is, before returning an error for an unknown device info in clGetDeviceInfo() it would call a function in the driver layer which can be then overridden in the cuda side to detect the cases (and would be NULL by default for the drivers). Can you do this type of refactoring to make it cleaner and easier in the future to add device/vendor-specific device infos?

Ok, should this be a part of pocl_device_ops (maybe calling it ops->attribute_query)?

Also I tested this yesterday and PyOpenCL started to fail. I didn't have a chance to debug further, but can you try with the PyOpenCL enabled and check if you can see it?

Hmm, I tested this with pyopencl and it seemed to work fine, but I'll check again.",True,{}
pocl/pocl,https://github.com/pocl/pocl,910,2021-01-25T22:59:43Z,2021-02-01T15:20:38Z,2021-02-01T16:07:32Z,MERGED,True,115,3,11,https://github.com/matthiasdiener,pocl-cuda: implement support for cl_nv_device_attribute_query,6,[],https://github.com/pocl/pocl/pull/910,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/910#issuecomment-769226509,WIP - looking for feedback.,"Ok, should this be a part of pocl_device_ops (maybe calling it ops->attribute_query)?

Yes, in the device ops, but make it more generic so it can be used to handle any vendor-specific clGetDeviceInfo() query?
E.g. get_device_info_ext() or such?

Hmm, I tested this with pyopencl and it seemed to work fine, but I'll check again.

Did you check with the PoCL's pyopencl test suite?",True,{}
pocl/pocl,https://github.com/pocl/pocl,910,2021-01-25T22:59:43Z,2021-02-01T15:20:38Z,2021-02-01T16:07:32Z,MERGED,True,115,3,11,https://github.com/matthiasdiener,pocl-cuda: implement support for cl_nv_device_attribute_query,6,[],https://github.com/pocl/pocl/pull/910,https://github.com/matthiasdiener,9,https://github.com/pocl/pocl/pull/910#issuecomment-769488690,WIP - looking for feedback.,"Ok, should this be a part of pocl_device_ops (maybe calling it ops->attribute_query)?

Yes, in the device ops, but make it more generic so it can be used to handle any vendor-specific clGetDeviceInfo() query?
E.g. get_device_info_ext() or such?

I refactored this in the most recent commit like you suggested.


Hmm, I tested this with pyopencl and it seemed to work fine, but I'll check again.

Did you check with the PoCL's pyopencl test suite?

I ran the pyopencl test suite as outlined here with the current master branch of pyopencl and this PR branch of pocl:
$ PYOPENCL_NO_CACHE=1 PYOPENCL_TEST=portable py.test -v --tb=native
========================================== test session starts ==========================================
platform linux -- Python 3.8.6, pytest-6.2.1, py-1.10.0, pluggy-0.13.1 -- /g/g91/diener3/Work/emirge/miniforge3/envs/ceesd/bin/python
cachedir: .pytest_cache
rootdir: /usr/WS1/diener3/Work/emirge/pyopencl, configfile: pytest.ini
plugins: pudb-0.7.0
collected 1147 items

[...]

================ 1011 passed, 42 skipped, 94 xfailed, 114 warnings in 1473.27s (0:24:33) ================",True,{}
pocl/pocl,https://github.com/pocl/pocl,911,2021-01-26T07:07:52Z,2021-02-03T15:51:49Z,2021-07-19T08:08:29Z,MERGED,True,5350,9019,20,https://github.com/franz,Hipcl fixes,18,[],https://github.com/pocl/pocl/pull/911,https://github.com/franz,1,https://github.com/pocl/pocl/pull/911,mostly related to SPIR and atomics,mostly related to SPIR and atomics,True,{}
pocl/pocl,https://github.com/pocl/pocl,911,2021-01-26T07:07:52Z,2021-02-03T15:51:49Z,2021-07-19T08:08:29Z,MERGED,True,5350,9019,20,https://github.com/franz,Hipcl fixes,18,[],https://github.com/pocl/pocl/pull/911,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/911#issuecomment-770219224,mostly related to SPIR and atomics,"Did you test with CUDA+LLVM11?
The following tests FAILED:
         15 - kernel/test_convert_sat_regression (Failed)
         22 - kernel/test_short16 (Failed)
         26 - kernel/test_shuffle_char (Failed)
         27 - kernel/test_shuffle_short (Failed)
         28 - kernel/test_shuffle_ushort (Failed)
         30 - kernel/test_shuffle_int (Failed)
         31 - kernel/test_shuffle_uint (Failed)
         32 - kernel/test_shuffle_float (Failed)
         33 - kernel/test_shuffle_long (Failed)
         34 - kernel/test_shuffle_ulong (Failed)
         37 - kernel/test_shuffle_double (Failed)
         57 - regression/test_program_from_binary_with_local_1_1_1_REPL (Failed)
         81 - regression/test_program_from_binary_with_local_1_1_1_LOOPS (Failed)
Errors while running CTest
!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Errors with llvm-11-cuda-tests: CUDA/LLVM 11 tests (cold cache)
/home/visit0r/src/pocl/test-pr-cmake-llvm-11-cuda-tests-build/tests/kernel/test_shuffle;short
...
CL_BUILD_PROGRAM_FAILURE in run on line 304",True,{}
pocl/pocl,https://github.com/pocl/pocl,911,2021-01-26T07:07:52Z,2021-02-03T15:51:49Z,2021-07-19T08:08:29Z,MERGED,True,5350,9019,20,https://github.com/franz,Hipcl fixes,18,[],https://github.com/pocl/pocl/pull/911,https://github.com/franz,3,https://github.com/pocl/pocl/pull/911#issuecomment-771139870,mostly related to SPIR and atomics,"Yeah i did, but retested again. Zero failures with both LLVM 11.0.1 and LLVM 11.1.0. Maybe something hardware / environment specific ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,911,2021-01-26T07:07:52Z,2021-02-03T15:51:49Z,2021-07-19T08:08:29Z,MERGED,True,5350,9019,20,https://github.com/franz,Hipcl fixes,18,[],https://github.com/pocl/pocl/pull/911,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/911#issuecomment-772515874,mostly related to SPIR and atomics,"Nope, still the same above listed set of failing tests here :(",True,{}
pocl/pocl,https://github.com/pocl/pocl,911,2021-01-26T07:07:52Z,2021-02-03T15:51:49Z,2021-07-19T08:08:29Z,MERGED,True,5350,9019,20,https://github.com/franz,Hipcl fixes,18,[],https://github.com/pocl/pocl/pull/911,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/911#issuecomment-772529706,mostly related to SPIR and atomics,Build cleaning seemed to help. There seems to be some dep issue in the kernel builtin library makefiles.,True,{}
pocl/pocl,https://github.com/pocl/pocl,913,2021-01-26T21:56:03Z,2021-01-27T18:32:03Z,2021-01-27T18:32:03Z,MERGED,True,1,1,1,https://github.com/nchristensen,Add llvm-${LLVM_VERSION}-dev as requirement,1,[],https://github.com/pocl/pocl/pull/913,https://github.com/nchristensen,1,https://github.com/pocl/pocl/pull/913,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,917,2021-02-01T19:29:54Z,2021-02-03T17:07:37Z,2021-02-03T21:31:59Z,MERGED,True,1,1,1,https://github.com/matthiasdiener,fix DOMAIN_ID to the same value as used by the Nvidia CL driver,1,[],https://github.com/pocl/pocl/pull/917,https://github.com/matthiasdiener,1,https://github.com/pocl/pocl/pull/917,"Thanks to @Oblomov for pointing this out!
Followup of #910.","Thanks to @Oblomov for pointing this out!
Followup of #910.",True,{}
pocl/pocl,https://github.com/pocl/pocl,919,2021-02-05T22:48:55Z,2021-02-06T12:38:27Z,2021-02-13T22:06:27Z,MERGED,True,256,60,27,https://github.com/anbe42,support building with -fvisibility=hidden -fvisibility-inlines-hidden,13,[],https://github.com/pocl/pocl/pull/919,https://github.com/anbe42,1,https://github.com/pocl/pocl/pull/919,"Here I have a patch series to finally allow building with -fvisibility=hidden -fvisibility-inlines-hidden to reduce the amount of (mostly c++) symbols exposed by the shared libraries. It starts with some fixes I've long been carrying in the Debian packages and some further cleanup (e.g. pocl symbols should be prefixed with pocl and tests should depend on pocl_version_check).
Please merge or cherry-pick as much as you like and we can continue working on the remaining parts.
I've only tested it with the CPU devices (basic and pthread) and only with building an ICD and testing with pocl's internal testsuite. There may be adjustments needed for other build configurations, e.g. more declarations needing a POCL_EXPORT decoration. (I've tried to keep the pocl_* symbols exposed minimal.)
In order to quickly check for missing symbols I've added some dlopen tests.
I've intentionally not reformatted the commit adding the POCL_EXPORT decorations. Please advise how you'd like them.
Is there a reason for dlopen()ing the device library with RTLD_LAZY instead of RTLD_NOW? (it would indicate missing symbols immediately.)
What is currently unclear to me, is how libllvmopencl.so is to be used. It isn't used by pocl itself or any of the tests unless I missed something. If I simply dlopen() it, I get a missing symbol (or more), that is available in libpocl and if the symbols fromlibpocl are loaded, dlopen() fails with
Two passes with the same argument (-allocastoentry) attempted to be registered!
Segmentation fault

(That was with llvm-9, I haven't tried other versions.)","Here I have a patch series to finally allow building with -fvisibility=hidden -fvisibility-inlines-hidden to reduce the amount of (mostly c++) symbols exposed by the shared libraries. It starts with some fixes I've long been carrying in the Debian packages and some further cleanup (e.g. pocl symbols should be prefixed with pocl and tests should depend on pocl_version_check).
Please merge or cherry-pick as much as you like and we can continue working on the remaining parts.
I've only tested it with the CPU devices (basic and pthread) and only with building an ICD and testing with pocl's internal testsuite. There may be adjustments needed for other build configurations, e.g. more declarations needing a POCL_EXPORT decoration. (I've tried to keep the pocl_* symbols exposed minimal.)
In order to quickly check for missing symbols I've added some dlopen tests.
I've intentionally not reformatted the commit adding the POCL_EXPORT decorations. Please advise how you'd like them.
Is there a reason for dlopen()ing the device library with RTLD_LAZY instead of RTLD_NOW? (it would indicate missing symbols immediately.)
What is currently unclear to me, is how libllvmopencl.so is to be used. It isn't used by pocl itself or any of the tests unless I missed something. If I simply dlopen() it, I get a missing symbol (or more), that is available in libpocl and if the symbols fromlibpocl are loaded, dlopen() fails with
Two passes with the same argument (-allocastoentry) attempted to be registered!
Segmentation fault

(That was with llvm-9, I haven't tried other versions.)",True,{}
pocl/pocl,https://github.com/pocl/pocl,919,2021-02-05T22:48:55Z,2021-02-06T12:38:27Z,2021-02-13T22:06:27Z,MERGED,True,256,60,27,https://github.com/anbe42,support building with -fvisibility=hidden -fvisibility-inlines-hidden,13,[],https://github.com/pocl/pocl/pull/919,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/919#issuecomment-774457547,"Here I have a patch series to finally allow building with -fvisibility=hidden -fvisibility-inlines-hidden to reduce the amount of (mostly c++) symbols exposed by the shared libraries. It starts with some fixes I've long been carrying in the Debian packages and some further cleanup (e.g. pocl symbols should be prefixed with pocl and tests should depend on pocl_version_check).
Please merge or cherry-pick as much as you like and we can continue working on the remaining parts.
I've only tested it with the CPU devices (basic and pthread) and only with building an ICD and testing with pocl's internal testsuite. There may be adjustments needed for other build configurations, e.g. more declarations needing a POCL_EXPORT decoration. (I've tried to keep the pocl_* symbols exposed minimal.)
In order to quickly check for missing symbols I've added some dlopen tests.
I've intentionally not reformatted the commit adding the POCL_EXPORT decorations. Please advise how you'd like them.
Is there a reason for dlopen()ing the device library with RTLD_LAZY instead of RTLD_NOW? (it would indicate missing symbols immediately.)
What is currently unclear to me, is how libllvmopencl.so is to be used. It isn't used by pocl itself or any of the tests unless I missed something. If I simply dlopen() it, I get a missing symbol (or more), that is available in libpocl and if the symbols fromlibpocl are loaded, dlopen() fails with
Two passes with the same argument (-allocastoentry) attempted to be registered!
Segmentation fault

(That was with llvm-9, I haven't tried other versions.)","Also please update CREDITS. I'm testing this, if it passes my local envs with the build mode OFF, I'll push with the current OFF by default and next I'll test ON by default.",True,{}
pocl/pocl,https://github.com/pocl/pocl,919,2021-02-05T22:48:55Z,2021-02-06T12:38:27Z,2021-02-13T22:06:27Z,MERGED,True,256,60,27,https://github.com/anbe42,support building with -fvisibility=hidden -fvisibility-inlines-hidden,13,[],https://github.com/pocl/pocl/pull/919,https://github.com/anbe42,3,https://github.com/pocl/pocl/pull/919#issuecomment-776787561,"Here I have a patch series to finally allow building with -fvisibility=hidden -fvisibility-inlines-hidden to reduce the amount of (mostly c++) symbols exposed by the shared libraries. It starts with some fixes I've long been carrying in the Debian packages and some further cleanup (e.g. pocl symbols should be prefixed with pocl and tests should depend on pocl_version_check).
Please merge or cherry-pick as much as you like and we can continue working on the remaining parts.
I've only tested it with the CPU devices (basic and pthread) and only with building an ICD and testing with pocl's internal testsuite. There may be adjustments needed for other build configurations, e.g. more declarations needing a POCL_EXPORT decoration. (I've tried to keep the pocl_* symbols exposed minimal.)
In order to quickly check for missing symbols I've added some dlopen tests.
I've intentionally not reformatted the commit adding the POCL_EXPORT decorations. Please advise how you'd like them.
Is there a reason for dlopen()ing the device library with RTLD_LAZY instead of RTLD_NOW? (it would indicate missing symbols immediately.)
What is currently unclear to me, is how libllvmopencl.so is to be used. It isn't used by pocl itself or any of the tests unless I missed something. If I simply dlopen() it, I get a missing symbol (or more), that is available in libpocl and if the symbols fromlibpocl are loaded, dlopen() fails with
Two passes with the same argument (-allocastoentry) attempted to be registered!
Segmentation fault

(That was with llvm-9, I haven't tried other versions.)","Also please update CREDITS.

I'm already in ;-)",True,{}
pocl/pocl,https://github.com/pocl/pocl,919,2021-02-05T22:48:55Z,2021-02-06T12:38:27Z,2021-02-13T22:06:27Z,MERGED,True,256,60,27,https://github.com/anbe42,support building with -fvisibility=hidden -fvisibility-inlines-hidden,13,[],https://github.com/pocl/pocl/pull/919,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/919#issuecomment-776789981,"Here I have a patch series to finally allow building with -fvisibility=hidden -fvisibility-inlines-hidden to reduce the amount of (mostly c++) symbols exposed by the shared libraries. It starts with some fixes I've long been carrying in the Debian packages and some further cleanup (e.g. pocl symbols should be prefixed with pocl and tests should depend on pocl_version_check).
Please merge or cherry-pick as much as you like and we can continue working on the remaining parts.
I've only tested it with the CPU devices (basic and pthread) and only with building an ICD and testing with pocl's internal testsuite. There may be adjustments needed for other build configurations, e.g. more declarations needing a POCL_EXPORT decoration. (I've tried to keep the pocl_* symbols exposed minimal.)
In order to quickly check for missing symbols I've added some dlopen tests.
I've intentionally not reformatted the commit adding the POCL_EXPORT decorations. Please advise how you'd like them.
Is there a reason for dlopen()ing the device library with RTLD_LAZY instead of RTLD_NOW? (it would indicate missing symbols immediately.)
What is currently unclear to me, is how libllvmopencl.so is to be used. It isn't used by pocl itself or any of the tests unless I missed something. If I simply dlopen() it, I get a missing symbol (or more), that is available in libpocl and if the symbols fromlibpocl are loaded, dlopen() fails with
Two passes with the same argument (-allocastoentry) attempted to be registered!
Segmentation fault

(That was with llvm-9, I haven't tried other versions.)","Also please update CREDITS.

I'm already in ;-)

Sorry meant CHANGES of course :)",True,{}
pocl/pocl,https://github.com/pocl/pocl,920,2021-02-11T09:10:27Z,2021-02-19T15:07:32Z,2021-02-19T15:07:32Z,MERGED,True,17,2,3,https://github.com/Kazhuu,LLVM 13 support,1,[],https://github.com/pocl/pocl/pull/920,https://github.com/Kazhuu,1,https://github.com/pocl/pocl/pull/920,Add support for LLVM 13 main and 12 release branches.,Add support for LLVM 13 main and 12 release branches.,True,{}
pocl/pocl,https://github.com/pocl/pocl,921,2021-02-11T17:26:01Z,2021-02-19T16:21:17Z,2021-02-19T16:21:18Z,MERGED,True,2,1,1,https://github.com/Oblomov,Avoid division by 0 in profiling output if total_commands is 0,1,[],https://github.com/pocl/pocl/pull/921,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/921,"This is achieved by adding !total_commands to the divisor, which is a
quick way to divide by 1 if total_commands is 0, and by total_commands
itself if total_command is non-zero.
This should fix #909","This is achieved by adding !total_commands to the divisor, which is a
quick way to divide by 1 if total_commands is 0, and by total_commands
itself if total_command is non-zero.
This should fix #909",True,{}
pocl/pocl,https://github.com/pocl/pocl,921,2021-02-11T17:26:01Z,2021-02-19T16:21:17Z,2021-02-19T16:21:18Z,MERGED,True,2,1,1,https://github.com/Oblomov,Avoid division by 0 in profiling output if total_commands is 0,1,[],https://github.com/pocl/pocl/pull/921,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/921#issuecomment-778322605,"This is achieved by adding !total_commands to the divisor, which is a
quick way to divide by 1 if total_commands is 0, and by total_commands
itself if total_command is non-zero.
This should fix #909","I like the nifty C trickery, but this raises the question: why print at all if the total_commands is zero? Early exit from the function instead?",True,{}
pocl/pocl,https://github.com/pocl/pocl,921,2021-02-11T17:26:01Z,2021-02-19T16:21:17Z,2021-02-19T16:21:18Z,MERGED,True,2,1,1,https://github.com/Oblomov,Avoid division by 0 in profiling output if total_commands is 0,1,[],https://github.com/pocl/pocl/pull/921,https://github.com/Oblomov,3,https://github.com/pocl/pocl/pull/921#issuecomment-778410202,"This is achieved by adding !total_commands to the divisor, which is a
quick way to divide by 1 if total_commands is 0, and by total_commands
itself if total_command is non-zero.
This should fix #909","I would argue that if the user asked for tracing output, they should get tracing output, even if it's “mostly empty”, but of course if we prefer an early exit I can implement that instead.",True,{}
pocl/pocl,https://github.com/pocl/pocl,921,2021-02-11T17:26:01Z,2021-02-19T16:21:17Z,2021-02-19T16:21:18Z,MERGED,True,2,1,1,https://github.com/Oblomov,Avoid division by 0 in profiling output if total_commands is 0,1,[],https://github.com/pocl/pocl/pull/921,https://github.com/Kazhuu,4,https://github.com/pocl/pocl/pull/921#issuecomment-778572970,"This is achieved by adding !total_commands to the divisor, which is a
quick way to divide by 1 if total_commands is 0, and by total_commands
itself if total_command is non-zero.
This should fix #909",I think explicit trace output is also better if user asked for it than printing nothing. But of course the final decision is not mine to make :),True,{}
pocl/pocl,https://github.com/pocl/pocl,921,2021-02-11T17:26:01Z,2021-02-19T16:21:17Z,2021-02-19T16:21:18Z,MERGED,True,2,1,1,https://github.com/Oblomov,Avoid division by 0 in profiling output if total_commands is 0,1,[],https://github.com/pocl/pocl/pull/921,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/921#issuecomment-778573312,"This is achieved by adding !total_commands to the divisor, which is a
quick way to divide by 1 if total_commands is 0, and by total_commands
itself if total_command is non-zero.
This should fix #909","Then print ""No commands executed."" in that case? If I understood correctly that's the case. Printing nonsensical numbers (yet, but without crashing) seems the strange choice here.",True,{'THUMBS_UP': ['https://github.com/Kazhuu']}
pocl/pocl,https://github.com/pocl/pocl,921,2021-02-11T17:26:01Z,2021-02-19T16:21:17Z,2021-02-19T16:21:18Z,MERGED,True,2,1,1,https://github.com/Oblomov,Avoid division by 0 in profiling output if total_commands is 0,1,[],https://github.com/pocl/pocl/pull/921,https://github.com/Oblomov,6,https://github.com/pocl/pocl/pull/921#issuecomment-778601359,"This is achieved by adding !total_commands to the divisor, which is a
quick way to divide by 1 if total_commands is 0, and by total_commands
itself if total_command is non-zero.
This should fix #909","This is the output:
     kernel                           launches        total us          avg us
                                    ==========      ========== ==== ==========
                                             0               0 100%          0

I wouldn't call the number “nonsensical”: they are exactly what we would expect.",True,{}
pocl/pocl,https://github.com/pocl/pocl,921,2021-02-11T17:26:01Z,2021-02-19T16:21:17Z,2021-02-19T16:21:18Z,MERGED,True,2,1,1,https://github.com/Oblomov,Avoid division by 0 in profiling output if total_commands is 0,1,[],https://github.com/pocl/pocl/pull/921,https://github.com/pjaaskel,7,https://github.com/pocl/pocl/pull/921#issuecomment-778979954,"This is achieved by adding !total_commands to the divisor, which is a
quick way to divide by 1 if total_commands is 0, and by total_commands
itself if total_command is non-zero.
This should fix #909",Fair enough :),True,"{'LAUGH': ['https://github.com/Oblomov', 'https://github.com/pjaaskel']}"
pocl/pocl,https://github.com/pocl/pocl,922,2021-02-12T16:52:04Z,2021-02-19T15:07:32Z,2021-02-19T17:31:57Z,MERGED,True,21,2,4,https://github.com/KOLANICH,LLVM 13 support,2,[],https://github.com/pocl/pocl/pull/922,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/922,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,923,2021-02-12T16:52:38Z,2021-02-19T15:07:32Z,2021-02-19T17:32:21Z,MERGED,True,7,1,1,https://github.com/KOLANICH,Fixed LLVM 12 support: clang::CompilerInvocation::setLangDefaults signature was changed,1,[],https://github.com/pocl/pocl/pull/923,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/923,llvm/llvm-project@c495dfe,llvm/llvm-project@c495dfe,True,{}
pocl/pocl,https://github.com/pocl/pocl,924,2021-02-14T17:19:48Z,2021-02-19T16:21:17Z,2021-04-27T11:29:34Z,MERGED,True,8,8,4,https://github.com/rusyaev-roman,Fix typos in pocl documentation,1,[],https://github.com/pocl/pocl/pull/924,https://github.com/rusyaev-roman,1,https://github.com/pocl/pocl/pull/924,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,929,2021-02-22T12:37:14Z,2021-02-24T07:45:05Z,2021-07-19T08:08:28Z,MERGED,True,68,24,2,https://github.com/franz,minor fix + documentation update,2,[],https://github.com/pocl/pocl/pull/929,https://github.com/franz,1,https://github.com/pocl/pocl/pull/929,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,931,2021-03-11T17:03:47Z,2021-03-23T09:27:02Z,2021-03-23T09:27:02Z,MERGED,True,3096,13336,29,https://github.com/Vinsteri,Updated included headers to OpenCL 3.0 + implemented clGetDeviceInfo atomic memory consistency queries,4,[],https://github.com/pocl/pocl/pull/931,https://github.com/Vinsteri,1,https://github.com/pocl/pocl/pull/931,"This is part of implementing OpenCL 3.0 support for PoCL. This pull request includes update to included OpenCL headers and implementation of two new queries in clGetDeviceInfo.


Updated included OpenCL 3.0 headers to the latest release version (v2020.06.16) from https://github.com/KhronosGroup/OpenCL-Headers  with latest OpenCL api c++ bindings (v2.0.12) from https://github.com/KhronosGroup/OpenCL-CLHPP (v2.0.12).


Changed TARGET_OPENCL_VERSION to 300. New headers require this to enable OpenCL 3.0 features.


Changed POCL_CL_VERSION to 3.0. As far as I understood this is only a cosmetic change.


Implemented new clGetDeviceInfo queries CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES and CL_DEVICE_ATOMIC_FENCE_CAPABILITIES.


Devices report atomic memory and fence capabilities through new device struct members atomic_memory_capability and atomic_fence_capability. OpenCL mandates support minimum capability for devices which is set in devices/common.c. For now only devices basic and pthread overwrite this to report full memory consistency model* (*except CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES)
This implementation is very minimal since other devices (cuda, hsa and tce) only report the minimum mandated memory consistency model. This is because I couldn't really say what level of support should be reported for these devices.
For overview of atomic and fence operations  see https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_overview_of_atomic_and_fence_operations
On backwards compatibility https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_memory_consistency_model

extended coverage of test_clGetDeviceInfo.c to check that at least the minimum mandated support is reported for the new queries.

make check_tier1 passes","This is part of implementing OpenCL 3.0 support for PoCL. This pull request includes update to included OpenCL headers and implementation of two new queries in clGetDeviceInfo.


Updated included OpenCL 3.0 headers to the latest release version (v2020.06.16) from https://github.com/KhronosGroup/OpenCL-Headers  with latest OpenCL api c++ bindings (v2.0.12) from https://github.com/KhronosGroup/OpenCL-CLHPP (v2.0.12).


Changed TARGET_OPENCL_VERSION to 300. New headers require this to enable OpenCL 3.0 features.


Changed POCL_CL_VERSION to 3.0. As far as I understood this is only a cosmetic change.


Implemented new clGetDeviceInfo queries CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES and CL_DEVICE_ATOMIC_FENCE_CAPABILITIES.


Devices report atomic memory and fence capabilities through new device struct members atomic_memory_capability and atomic_fence_capability. OpenCL mandates support minimum capability for devices which is set in devices/common.c. For now only devices basic and pthread overwrite this to report full memory consistency model* (*except CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES)
This implementation is very minimal since other devices (cuda, hsa and tce) only report the minimum mandated memory consistency model. This is because I couldn't really say what level of support should be reported for these devices.
For overview of atomic and fence operations  see https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_overview_of_atomic_and_fence_operations
On backwards compatibility https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_memory_consistency_model

extended coverage of test_clGetDeviceInfo.c to check that at least the minimum mandated support is reported for the new queries.

make check_tier1 passes",True,{}
pocl/pocl,https://github.com/pocl/pocl,931,2021-03-11T17:03:47Z,2021-03-23T09:27:02Z,2021-03-23T09:27:02Z,MERGED,True,3096,13336,29,https://github.com/Vinsteri,Updated included headers to OpenCL 3.0 + implemented clGetDeviceInfo atomic memory consistency queries,4,[],https://github.com/pocl/pocl/pull/931,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/931#issuecomment-797589984,"This is part of implementing OpenCL 3.0 support for PoCL. This pull request includes update to included OpenCL headers and implementation of two new queries in clGetDeviceInfo.


Updated included OpenCL 3.0 headers to the latest release version (v2020.06.16) from https://github.com/KhronosGroup/OpenCL-Headers  with latest OpenCL api c++ bindings (v2.0.12) from https://github.com/KhronosGroup/OpenCL-CLHPP (v2.0.12).


Changed TARGET_OPENCL_VERSION to 300. New headers require this to enable OpenCL 3.0 features.


Changed POCL_CL_VERSION to 3.0. As far as I understood this is only a cosmetic change.


Implemented new clGetDeviceInfo queries CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES and CL_DEVICE_ATOMIC_FENCE_CAPABILITIES.


Devices report atomic memory and fence capabilities through new device struct members atomic_memory_capability and atomic_fence_capability. OpenCL mandates support minimum capability for devices which is set in devices/common.c. For now only devices basic and pthread overwrite this to report full memory consistency model* (*except CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES)
This implementation is very minimal since other devices (cuda, hsa and tce) only report the minimum mandated memory consistency model. This is because I couldn't really say what level of support should be reported for these devices.
For overview of atomic and fence operations  see https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_overview_of_atomic_and_fence_operations
On backwards compatibility https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_memory_consistency_model

extended coverage of test_clGetDeviceInfo.c to check that at least the minimum mandated support is reported for the new queries.

make check_tier1 passes",Can you rebase this branch so it has one commit for the header update and one for your new query? Also please add yourself to CREDITS and update CHANGES with this new features.,True,{}
pocl/pocl,https://github.com/pocl/pocl,931,2021-03-11T17:03:47Z,2021-03-23T09:27:02Z,2021-03-23T09:27:02Z,MERGED,True,3096,13336,29,https://github.com/Vinsteri,Updated included headers to OpenCL 3.0 + implemented clGetDeviceInfo atomic memory consistency queries,4,[],https://github.com/pocl/pocl/pull/931,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/931#issuecomment-799447022,"This is part of implementing OpenCL 3.0 support for PoCL. This pull request includes update to included OpenCL headers and implementation of two new queries in clGetDeviceInfo.


Updated included OpenCL 3.0 headers to the latest release version (v2020.06.16) from https://github.com/KhronosGroup/OpenCL-Headers  with latest OpenCL api c++ bindings (v2.0.12) from https://github.com/KhronosGroup/OpenCL-CLHPP (v2.0.12).


Changed TARGET_OPENCL_VERSION to 300. New headers require this to enable OpenCL 3.0 features.


Changed POCL_CL_VERSION to 3.0. As far as I understood this is only a cosmetic change.


Implemented new clGetDeviceInfo queries CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES and CL_DEVICE_ATOMIC_FENCE_CAPABILITIES.


Devices report atomic memory and fence capabilities through new device struct members atomic_memory_capability and atomic_fence_capability. OpenCL mandates support minimum capability for devices which is set in devices/common.c. For now only devices basic and pthread overwrite this to report full memory consistency model* (*except CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES)
This implementation is very minimal since other devices (cuda, hsa and tce) only report the minimum mandated memory consistency model. This is because I couldn't really say what level of support should be reported for these devices.
For overview of atomic and fence operations  see https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_overview_of_atomic_and_fence_operations
On backwards compatibility https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_memory_consistency_model

extended coverage of test_clGetDeviceInfo.c to check that at least the minimum mandated support is reported for the new queries.

make check_tier1 passes","Building the CUDA driver fails with this pulled in:
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c:169:10: error: ‘CL_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT_NV’ undeclared$
     case CL_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT_NV:                                                                         
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                                                          
          CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT                                                                             
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c:169:10: note: each undeclared identifier is reported only once for ea$
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c:173:10: error: ‘CL_DEVICE_PCI_BUS_ID_NV’ undeclared (first use in thi$
     case CL_DEVICE_PCI_BUS_ID_NV:
          ^~~~~~~~~~~~~~~~~~~~~~~
          CL_DEVICE_PCIE_ID_AMD
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c:177:10: error: ‘CL_DEVICE_PCI_SLOT_ID_NV’ undeclared (first use in th$
     case CL_DEVICE_PCI_SLOT_ID_NV:
          ^~~~~~~~~~~~~~~~~~~~~~~~
          CL_DEVICE_PCI_BUS_ID_NV
/home/visit0r/src/pocl/lib/CL/devices/cuda/pocl-cuda.c:181:10: error: ‘CL_DEVICE_PCI_DOMAIN_ID_NV’ undeclared (first use in $
     case CL_DEVICE_PCI_DOMAIN_ID_NV:                                                                                        
          ^~~~~~~~~~~~~~~~~~~~~~~~~~                                                                                         
          CL_DEVICE_PCI_SLOT_ID_NV 

Some ext header change perhaps?",True,{}
pocl/pocl,https://github.com/pocl/pocl,931,2021-03-11T17:03:47Z,2021-03-23T09:27:02Z,2021-03-23T09:27:02Z,MERGED,True,3096,13336,29,https://github.com/Vinsteri,Updated included headers to OpenCL 3.0 + implemented clGetDeviceInfo atomic memory consistency queries,4,[],https://github.com/pocl/pocl/pull/931,https://github.com/Vinsteri,4,https://github.com/pocl/pocl/pull/931#issuecomment-799519875,"This is part of implementing OpenCL 3.0 support for PoCL. This pull request includes update to included OpenCL headers and implementation of two new queries in clGetDeviceInfo.


Updated included OpenCL 3.0 headers to the latest release version (v2020.06.16) from https://github.com/KhronosGroup/OpenCL-Headers  with latest OpenCL api c++ bindings (v2.0.12) from https://github.com/KhronosGroup/OpenCL-CLHPP (v2.0.12).


Changed TARGET_OPENCL_VERSION to 300. New headers require this to enable OpenCL 3.0 features.


Changed POCL_CL_VERSION to 3.0. As far as I understood this is only a cosmetic change.


Implemented new clGetDeviceInfo queries CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES and CL_DEVICE_ATOMIC_FENCE_CAPABILITIES.


Devices report atomic memory and fence capabilities through new device struct members atomic_memory_capability and atomic_fence_capability. OpenCL mandates support minimum capability for devices which is set in devices/common.c. For now only devices basic and pthread overwrite this to report full memory consistency model* (*except CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES)
This implementation is very minimal since other devices (cuda, hsa and tce) only report the minimum mandated memory consistency model. This is because I couldn't really say what level of support should be reported for these devices.
For overview of atomic and fence operations  see https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_overview_of_atomic_and_fence_operations
On backwards compatibility https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_memory_consistency_model

extended coverage of test_clGetDeviceInfo.c to check that at least the minimum mandated support is reported for the new queries.

make check_tier1 passes","I had overlooked the possibility that the headers would have changes outside the OpenCL specification. This issue arises from changes made in #910, where some cuda specific device queries were added to the headers. I'll see if I can forward these changes to the new headers. I'll also check if there are other similar cases.",True,{'THUMBS_UP': ['https://github.com/pjaaskel']}
pocl/pocl,https://github.com/pocl/pocl,931,2021-03-11T17:03:47Z,2021-03-23T09:27:02Z,2021-03-23T09:27:02Z,MERGED,True,3096,13336,29,https://github.com/Vinsteri,Updated included headers to OpenCL 3.0 + implemented clGetDeviceInfo atomic memory consistency queries,4,[],https://github.com/pocl/pocl/pull/931,https://github.com/franz,5,https://github.com/pocl/pocl/pull/931#issuecomment-799925810,"This is part of implementing OpenCL 3.0 support for PoCL. This pull request includes update to included OpenCL headers and implementation of two new queries in clGetDeviceInfo.


Updated included OpenCL 3.0 headers to the latest release version (v2020.06.16) from https://github.com/KhronosGroup/OpenCL-Headers  with latest OpenCL api c++ bindings (v2.0.12) from https://github.com/KhronosGroup/OpenCL-CLHPP (v2.0.12).


Changed TARGET_OPENCL_VERSION to 300. New headers require this to enable OpenCL 3.0 features.


Changed POCL_CL_VERSION to 3.0. As far as I understood this is only a cosmetic change.


Implemented new clGetDeviceInfo queries CL_DEVICE_ATOMIC_MEMORY_CAPABILITIES and CL_DEVICE_ATOMIC_FENCE_CAPABILITIES.


Devices report atomic memory and fence capabilities through new device struct members atomic_memory_capability and atomic_fence_capability. OpenCL mandates support minimum capability for devices which is set in devices/common.c. For now only devices basic and pthread overwrite this to report full memory consistency model* (*except CL_DEVICE_ATOMIC_SCOPE_ALL_DEVICES)
This implementation is very minimal since other devices (cuda, hsa and tce) only report the minimum mandated memory consistency model. This is because I couldn't really say what level of support should be reported for these devices.
For overview of atomic and fence operations  see https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_overview_of_atomic_and_fence_operations
On backwards compatibility https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_memory_consistency_model

extended coverage of test_clGetDeviceInfo.c to check that at least the minimum mandated support is reported for the new queries.

make check_tier1 passes","LGTM, only a minor nitpick: can you please git-rebase the branch on master, in the rebase set the Implemented clGetDeviceInfo atomic memory and fence queries commit to editing, and run  tools/scripts/format-last-commit.sh on it (it's a short script that formats the code according to PoCL guidelines)",True,{}
pocl/pocl,https://github.com/pocl/pocl,933,2021-03-26T19:07:11Z,2021-03-27T08:27:17Z,2021-03-27T15:28:15Z,MERGED,True,8,6,1,https://github.com/isuruf,"Keep LLVM defaults for unroll, vectorize for SPMD devices",1,[],https://github.com/pocl/pocl/pull/933,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/933,Fixes #932,Fixes #932,True,{'THUMBS_UP': ['https://github.com/inducer']}
pocl/pocl,https://github.com/pocl/pocl,933,2021-03-26T19:07:11Z,2021-03-27T08:27:17Z,2021-03-27T15:28:15Z,MERGED,True,8,6,1,https://github.com/isuruf,"Keep LLVM defaults for unroll, vectorize for SPMD devices",1,[],https://github.com/pocl/pocl/pull/933,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/933#issuecomment-808451905,Fixes #932,"@nchristensen, this is a slightly different patch. Can you try this too?
cc @inducer, @Oblomov, @pjaaskel",True,{}
pocl/pocl,https://github.com/pocl/pocl,933,2021-03-26T19:07:11Z,2021-03-27T08:27:17Z,2021-03-27T15:28:15Z,MERGED,True,8,6,1,https://github.com/isuruf,"Keep LLVM defaults for unroll, vectorize for SPMD devices",1,[],https://github.com/pocl/pocl/pull/933,https://github.com/nchristensen,3,https://github.com/pocl/pocl/pull/933#issuecomment-808455934,Fixes #932,"@isuruf Yes, this version works too.",True,{}
pocl/pocl,https://github.com/pocl/pocl,934,2021-04-06T15:26:17Z,2021-06-03T16:12:29Z,2021-06-03T16:12:29Z,MERGED,True,10,10,8,https://github.com/KOLANICH,Replaced some http:// links with https:// ones using HTTPSEverywhere ruleset,1,[],https://github.com/pocl/pocl/pull/934,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/934,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,936,2021-04-25T21:31:52Z,2021-06-04T09:49:32Z,2021-06-19T05:02:27Z,MERGED,True,7,1,1,https://github.com/isuruf,Fix dlopen tests on macos,2,[],https://github.com/pocl/pocl/pull/936,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/936,,,True,{'THUMBS_UP': ['https://github.com/inducer']}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/938,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)","CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)",True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/938#issuecomment-884716348,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)","(At least) LLVM 12 build fails with this.
[  0%] Built target sleef_config_broadwell
[ 39%] Built target kernel_host_broadwell
[ 39%] Built target kernellib_hash
[ 39%] Building CXX object lib/llvmopencl/CMakeFiles/llvmpasses.dir/LLVMFileUtils.cc.o
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:75:17: error: expected unqualified-id before ‘<’ token
 inline template <typename SmallStringOrVectorT>
                 ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:104:1: error: expected ‘;’ before ‘using’
 using namespace llvm;
 ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:106:14: error: ‘Twine’ does not name a type; did you mean ‘fwide’?
 static const Twine random_pattern(""-%%-%%-%%-%%-%%"");
              ^~~~~
              fwide
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_rm_rf(const char*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:113:5: error: ‘SmallString’ was not declared in this scope
     SmallString<128> DirNative;
     ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:113:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:29:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/SmallString.h:25:7: note:   ‘llvm::SmallString’
 class SmallString : public SmallVector<char, InternalLen> {
       ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:113:22: error: ‘DirNative’ was not declared in this scope
     SmallString<128> DirNative;
                      ^~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:115:5: error: ‘sys’ has not been declared
     sys::path::native(Twine(path), DirNative);
     ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:115:23: error: ‘Twine’ was not declared in this scope
     sys::path::native(Twine(path), DirNative);
                       ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:115:23: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:119:10: error: ‘sys’ has not been declared
     for (sys::fs::recursive_directory_iterator Dir(DirNative.str(), ec), DirEnd;
          ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:120:10: error: ‘Dir’ was not declared in this scope
          Dir != DirEnd && !ec; Dir.increment(ec)) {
          ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:120:17: error: ‘DirEnd’ was not declared in this scope
          Dir != DirEnd && !ec; Dir.increment(ec)) {
                 ^~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:120:17: note: suggested alternative: ‘DirSet’
          Dir != DirEnd && !ec; Dir.increment(ec)) {
                 ^~~~~~
                 DirSet
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:121:15: error: expected ‘;’ before ‘p’
         Twine p = Dir->path();
               ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:122:25: error: ‘p’ was not declared in this scope
         std::string s = p.str();
                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:123:13: error: ‘sys’ has not been declared
         if (sys::fs::is_directory(p)) {
             ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:132:14: error: ‘sys’ has not been declared
         ec = sys::fs::remove(*it, true);
              ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:139:14: error: ‘sys’ has not been declared
         ec = sys::fs::remove(*it2, true);
              ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:143:5: error: ‘sys’ has not been declared
     sys::fs::remove(Twine(path));
     ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_mkdir_p(const char*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:150:5: error: ‘Twine’ was not declared in this scope
     Twine p(path);
     ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:150:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:151:26: error: ‘sys’ has not been declared
     std::error_code ec = sys::fs::create_directories(p, true);
                          ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:151:54: error: ‘p’ was not declared in this scope
     std::error_code ec = sys::fs::create_directories(p, true);
                                                      ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:149:26: warning: unused parameter ‘path’ [-Wunused-parameter]
 pocl_mkdir_p(const char* path) {
                          ^~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_remove(const char*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:157:5: error: ‘Twine’ was not declared in this scope
     Twine p(path);
     ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:157:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:158:26: error: ‘sys’ has not been declared
     std::error_code ec = sys::fs::remove(p, true);
                          ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:158:42: error: ‘p’ was not declared in this scope
     std::error_code ec = sys::fs::remove(p, true);
                                          ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:156:25: warning: unused parameter ‘path’ [-Wunused-parameter]
 pocl_remove(const char* path) {
                         ^~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: At global scope:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:162:18: error: ‘Twine’ was not declared in this scope
 int pocl_remove2(Twine &p) {
                  ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:162:18: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:162:25: error: ‘p’ was not declared in this scope
 int pocl_remove2(Twine &p) {
                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:167:18: error: ‘Twine’ was not declared in this scope
 int pocl_exists2(Twine &p) {
                  ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:167:18: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:167:25: error: ‘p’ was not declared in this scope
 int pocl_exists2(Twine &p) {
                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_exists(const char*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:173:5: error: ‘Twine’ was not declared in this scope
     Twine p(path);
     ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:173:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:174:25: error: ‘p’ was not declared in this scope
     return pocl_exists2(p);
                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:174:26: error: ‘pocl_exists2’ cannot be used as a function
     return pocl_exists2(p);
                          ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:172:25: warning: unused parameter ‘path’ [-Wunused-parameter]
 pocl_exists(const char* path) {
                         ^~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_rename(const char*, const char*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:199:5: error: ‘Twine’ was not declared in this scope
     Twine op(oldpath);
     ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:199:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:200:11: error: expected ‘;’ before ‘np’
     Twine np(newpath);
           ^~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:201:26: error: ‘sys’ has not been declared
     std::error_code ec = sys::fs::rename(op, np);
                          ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:201:42: error: ‘op’ was not declared in this scope
     std::error_code ec = sys::fs::rename(op, np);
                                          ^~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:201:46: error: ‘np’ was not declared in this scope
     std::error_code ec = sys::fs::rename(op, np);
                                              ^~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:198:29: warning: unused parameter ‘oldpath’ [-Wunused-parameter]
 int pocl_rename(const char *oldpath, const char *newpath) {
                             ^~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:198:50: warning: unused parameter ‘newpath’ [-Wunused-parameter]
 int pocl_rename(const char *oldpath, const char *newpath) {
                                                  ^~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: At global scope:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:205:18: error: ‘Twine’ was not declared in this scope
 int pocl_rename2(Twine &op, Twine &np) {
                  ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:205:18: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:205:25: error: ‘op’ was not declared in this scope
 int pocl_rename2(Twine &op, Twine &np) {
                         ^~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:205:29: error: ‘Twine’ was not declared in this scope
 int pocl_rename2(Twine &op, Twine &np) {
                             ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:205:29: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:205:36: error: ‘np’ was not declared in this scope
 int pocl_rename2(Twine &op, Twine &np) {
                                    ^~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:205:38: error: expression list treated as compound expression in initializer [-fpermissive]
 int pocl_rename2(Twine &op, Twine &np) {
                                      ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_mk_tempdir(char*, const char*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:211:3: error: ‘Twine’ was not declared in this scope
   Twine p(prefix);
   ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:211:3: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:212:3: error: ‘SmallString’ was not declared in this scope
   SmallString<512> TmpPath;
   ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:212:3: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:29:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/SmallString.h:25:7: note:   ‘llvm::SmallString’
 class SmallString : public SmallVector<char, InternalLen> {
       ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:212:20: error: ‘TmpPath’ was not declared in this scope
   SmallString<512> TmpPath;
                    ^~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:214:24: error: ‘sys’ has not been declared
   std::error_code ec = sys::fs::createUniqueDirectory(p, TmpPath);
                        ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:214:55: error: ‘p’ was not declared in this scope
   std::error_code ec = sys::fs::createUniqueDirectory(p, TmpPath);
                                                       ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:210:47: warning: unused parameter ‘prefix’ [-Wunused-parameter]
 int pocl_mk_tempdir(char *output, const char *prefix) {
                                               ^~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_mk_tempname(char*, const char*, const char*, int*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:223:3: error: ‘Twine’ was not declared in this scope
   Twine p(prefix);
   ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:223:3: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:226:9: error: expected ‘;’ before ‘suf’
   Twine suf(suffix);
         ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:228:3: error: ‘SmallString’ was not declared in this scope
   SmallString<512> TmpPath;
   ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:228:3: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:29:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/SmallString.h:25:7: note:   ‘llvm::SmallString’
 class SmallString : public SmallVector<char, InternalLen> {
       ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:228:20: error: ‘TmpPath’ was not declared in this scope
   SmallString<512> TmpPath;
                    ^~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:57: error: ‘p’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:232:3: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
   CREATE_UNIQUE_FILE(random_pattern + suf);
   ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:232:22: error: ‘random_pattern’ was not declared in this scope
   CREATE_UNIQUE_FILE(random_pattern + suf);
                      ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:232:22: note: suggested alternative: ‘random_data’
   CREATE_UNIQUE_FILE(random_pattern + suf);
                      ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:232:39: error: ‘suf’ was not declared in this scope
   CREATE_UNIQUE_FILE(random_pattern + suf);
                                       ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:36: error: ‘CreateUniqueFileImpl’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                    ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:232:3: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
   CREATE_UNIQUE_FILE(random_pattern + suf);
   ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:221:48: warning: unused parameter ‘prefix’ [-Wunused-parameter]
 int pocl_mk_tempname(char *output, const char *prefix, const char *suffix,
                                                ^~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_read_file(const char*, char**, uint64_t*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:261:5: error: ‘Twine’ was not declared in this scope
     Twine p(path);
     ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:261:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:272:10: error: ‘sys’ has not been declared
     ec = sys::fs::openFileForRead(p, fd);
          ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:272:35: error: ‘p’ was not declared in this scope
     ec = sys::fs::openFileForRead(p, fd);
                                   ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_write_file(const char*, const char*, uint64_t, int, int)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:313:5: error: ‘Twine’ was not declared in this scope
     Twine p(path);
     ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:313:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:314:5: error: ‘SmallVector’ was not declared in this scope
     SmallVector<char, 128> TmpPath;
     ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:314:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/ADT/SmallString.h:16:0,
                 from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:29,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/SmallVector.h:1095:56: note:   ‘llvm::SmallVector’
 template <typename T, unsigned N> class LLVM_GSL_OWNER SmallVector;
                                                        ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:314:17: error: expected primary-expression before ‘char’
     SmallVector<char, 128> TmpPath;
                 ^~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:316:22: error: ‘p’ was not declared in this scope
     if (pocl_exists2(p)) {
                      ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:316:23: error: ‘pocl_exists2’ cannot be used as a function
     if (pocl_exists2(p)) {
                       ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:321:33: error: ‘pocl_remove2’ cannot be used as a function
         int res = pocl_remove2(p);
                                 ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:100:8: error: ‘sys’ has not been declared
   ec = sys::fs::openFileForWrite(p, fd, sys::fs::CD_CreateAlways,              \
        ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:328:9: note: in expansion of macro ‘OPEN_FOR_APPEND’
         OPEN_FOR_APPEND;
         ^~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:100:34: error: ‘p’ was not declared in this scope
   ec = sys::fs::openFileForWrite(p, fd, sys::fs::CD_CreateAlways,              \
                                  ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:328:9: note: in expansion of macro ‘OPEN_FOR_APPEND’
         OPEN_FOR_APPEND;
         ^~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:100:41: error: ‘sys’ has not been declared
   ec = sys::fs::openFileForWrite(p, fd, sys::fs::CD_CreateAlways,              \
                                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:328:9: note: in expansion of macro ‘OPEN_FOR_APPEND’
         OPEN_FOR_APPEND;
         ^~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:101:34: error: ‘sys’ has not been declared
                                  sys::fs::OF_Append)
                                  ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:328:9: note: in expansion of macro ‘OPEN_FOR_APPEND’
         OPEN_FOR_APPEND;
         ^~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:57: error: ‘p’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:331:7: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
       CREATE_UNIQUE_FILE(random_pattern);
       ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:331:26: error: ‘random_pattern’ was not declared in this scope
       CREATE_UNIQUE_FILE(random_pattern);
                          ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:331:26: note: suggested alternative: ‘random_data’
       CREATE_UNIQUE_FILE(random_pattern);
                          ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:67: error: ‘TmpPath’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                                   ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:331:7: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
       CREATE_UNIQUE_FILE(random_pattern);
       ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:67: note: suggested alternative: ‘path’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                                   ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:331:7: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
       CREATE_UNIQUE_FILE(random_pattern);
       ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:36: error: ‘CreateUniqueFileImpl’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                    ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:331:7: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
       CREATE_UNIQUE_FILE(random_pattern);
       ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:354:13: error: expected ‘;’ before ‘t’
       Twine t(TmpPath);
             ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:355:27: error: ‘t’ was not declared in this scope
       return pocl_rename2(t, p);
                           ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:355:27: note: suggested alternative: ‘tm’
       return pocl_rename2(t, p);
                           ^
                           tm
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:355:30: error: ‘p’ was not declared in this scope
       return pocl_rename2(t, p);
                              ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:355:31: error: ‘pocl_rename2’ cannot be used as a function
       return pocl_rename2(t, p);
                               ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_write_tempfile(char*, const char*, const char*, const char*, uint64_t, int*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:369:3: error: ‘Twine’ was not declared in this scope
   Twine p(prefix);
   ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:369:3: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:372:9: error: expected ‘;’ before ‘suf’
   Twine suf(suffix);
         ^~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:373:3: error: ‘SmallString’ was not declared in this scope
   SmallString<512> TmpPath;
   ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:373:3: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:29:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/SmallString.h:25:7: note:   ‘llvm::SmallString’
 class SmallString : public SmallVector<char, InternalLen> {
       ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:373:20: error: ‘TmpPath’ was not declared in this scope
   SmallString<512> TmpPath;
                    ^~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:57: error: ‘p’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:375:3: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
   CREATE_UNIQUE_FILE(random_pattern + suf);
   ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:375:22: error: ‘random_pattern’ was not declared in this scope
   CREATE_UNIQUE_FILE(random_pattern + suf);
                      ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:375:22: note: suggested alternative: ‘random_data’
   CREATE_UNIQUE_FILE(random_pattern + suf);
                      ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:375:39: error: ‘suf’ was not declared in this scope
   CREATE_UNIQUE_FILE(random_pattern + suf);
                                       ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:36: error: ‘CreateUniqueFileImpl’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                    ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:375:3: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
   CREATE_UNIQUE_FILE(random_pattern + suf);
   ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:361:56: warning: unused parameter ‘prefix’ [-Wunused-parameter]
 int pocl_write_tempfile(char *output_path, const char *prefix,
                                                        ^~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_write_module(void*, const char*, int)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:408:5: error: ‘Twine’ was not declared in this scope
     Twine p(path);
     ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:408:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:31:0,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/Twine.h:80:9: note:   ‘llvm::Twine’
   class Twine {
         ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:411:22: error: ‘p’ was not declared in this scope
     if (pocl_exists2(p)) {
                      ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:411:23: error: ‘pocl_exists2’ cannot be used as a function
     if (pocl_exists2(p)) {
                       ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:415:33: error: ‘pocl_remove2’ cannot be used as a function
         int res = pocl_remove2(p);
                                 ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:423:5: error: ‘SmallVector’ was not declared in this scope
     SmallVector<char, 128> TmpPath;
     ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:423:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/ADT/SmallString.h:16:0,
                 from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:29,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/ADT/SmallVector.h:1095:56: note:   ‘llvm::SmallVector’
 template <typename T, unsigned N> class LLVM_GSL_OWNER SmallVector;
                                                        ^~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:423:17: error: expected primary-expression before ‘char’
     SmallVector<char, 128> TmpPath;
                 ^~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:57: error: ‘p’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:424:5: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
     CREATE_UNIQUE_FILE(random_pattern);
     ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:424:24: error: ‘random_pattern’ was not declared in this scope
     CREATE_UNIQUE_FILE(random_pattern);
                        ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:424:24: note: suggested alternative: ‘random_data’
     CREATE_UNIQUE_FILE(random_pattern);
                        ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:60: note: in definition of macro ‘CREATE_UNIQUE_FILE’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                            ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:67: error: ‘TmpPath’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                                   ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:424:5: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
     CREATE_UNIQUE_FILE(random_pattern);
     ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:67: note: suggested alternative: ‘path’
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                                                   ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:424:5: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
     CREATE_UNIQUE_FILE(random_pattern);
     ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:89:36: error: ‘CreateUniqueFileImpl’ was not declared in this scope
 #define CREATE_UNIQUE_FILE(S) ec = CreateUniqueFileImpl(p, S, fd, TmpPath);
                                    ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:424:5: note: in expansion of macro ‘CREATE_UNIQUE_FILE’
     CREATE_UNIQUE_FILE(random_pattern);
     ^~~~~~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:432:5: error: ‘raw_fd_ostream’ was not declared in this scope
     raw_fd_ostream os(fd, true);
     ^~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:432:5: note: suggested alternative:
In file included from /usr/lib/llvm-12/include/llvm/Support/FormatVariadicDetails.h:13:0,
                 from /usr/lib/llvm-12/include/llvm/Support/FormatProviders.h:21,
                 from /usr/lib/llvm-12/include/llvm/Support/Chrono.h:13,
                 from /usr/lib/llvm-12/include/llvm/Support/FileSystem.h:33,
                 from /home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:60:
/usr/lib/llvm-12/include/llvm/Support/raw_ostream.h:425:7: note:   ‘llvm::raw_fd_ostream’
 class raw_fd_ostream : public raw_pwrite_stream {
       ^~~~~~~~~~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:434:48: error: ‘os’ was not declared in this scope
     WriteBitcodeToFile(*(llvm::Module*)module, os);
                                                ^~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:434:48: note: suggested alternative: ‘cos’
     WriteBitcodeToFile(*(llvm::Module*)module, os);
                                                ^~
                                                cos
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:450:11: error: expected ‘;’ before ‘t’
     Twine t(TmpPath);
           ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:451:25: error: ‘t’ was not declared in this scope
     return pocl_rename2(t, p);
                         ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:451:25: note: suggested alternative: ‘tm’
     return pocl_rename2(t, p);
                         ^
                         tm
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:451:29: error: ‘pocl_rename2’ cannot be used as a function
     return pocl_rename2(t, p);
                             ^
lib/llvmopencl/CMakeFiles/llvmpasses.dir/build.make:289: recipe for target 'lib/llvmopencl/CMakeFiles/llvmpasses.dir/LLVMFileUtils.cc.o' failed
make[2]: *** [lib/llvmopencl/CMakeFiles/llvmpasses.dir/LLVMFileUtils.cc.o] Error 1
CMakeFiles/Makefile2:1143: recipe for target 'lib/llvmopencl/CMakeFiles/llvmpasses.dir/all' failed
make[1]: *** [lib/llvmopencl/CMakeFiles/llvmpasses.dir/all] Error 2
Makefile:181: recipe for target 'all' failed
make: *** [all] Error 2


(or https://termbin.com/gcg9)",True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/KOLANICH,3,https://github.com/pocl/pocl/pull/938#issuecomment-904582809,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)","I don't see these bunch of errors. I saw only 2 error messages on llvm12 (missing llvm:: namespace). After I have fixed them, everything started building for llvm12 for me again.
I have pushed these fixes here. Also brought support for llvm14. Had to clean up some mess in process.",True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/938#issuecomment-905209899,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)","Thanks, but it doesn't build. The first error:
Flatten.cc:111:18: error: ‘repacementAttr’ was not declared in this scope
     f->addFnAttr(repacementAttr);",True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/938#issuecomment-905318741,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)","Still not building against LLVM 12.
[ 46%] Building CL to LLVM bitcode /home/visit0r/src/pocl/test-pr-cmake-llvm-12-build/lib/kernel/host/broadwell/max_i.cl.bc
[ 46%] Building CXX object tests/regression/CMakeFiles/test_multi_level_loops_with_barriers.dir/test_multi_level_loops_with_barriers.cpp.o
In file included from /home/visit0r/src/pocl/tests/regression/test_loop_phi_replication.cpp:28:0:
/home/visit0r/src/pocl/include/CL/cl2.hpp: In static member function ‘static bool cl::detail::Wrapper<_cl_device_id*>::isReferenceCountable(cl_device_id)’:
/home/visit0r/src/pocl/include/CL/cl2.hpp:1865:51: warning: unused parameter ‘device’ [-Wunused-parameter]
     static bool isReferenceCountable(cl_device_id device)
                                                   ^~~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:75:17: error: expected unqualified-id before ‘<’ token
 inline template <typename SmallStringOrVectorT>
                 ^
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:104:1: error: expected ‘;’ before ‘using’
 using namespace llvm;
 ^~~~~
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:106:14: error: ‘Twine’ does not name a type; did you mean ‘fwide’?
 static const Twine random_pattern(""-%%-%%-%%-%%-%%"");
              ^~~~~
              fwide
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc: In function ‘int pocl_rm_rf(const char*)’:
/home/visit0r/src/pocl/lib/llvmopencl/LLVMFileUtils.cc:113:5: error: ‘SmallString’ was not declared in this scope
...",True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/KOLANICH,6,https://github.com/pocl/pocl/pull/938#issuecomment-905336213,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)","I have just tried. Works for me at least in the following combinations:

llvm-config-12 as llvm-config and clang 12 as compiler
llvm-config-14 as llvm-config and clang 14 as compiler
llvm-config-12 as llvm-config and clang 14 as compiler

Note - it seems it doesn't detect the llvm to SPIRV compiler lib installed in the my system properly (at least reinstalling it (I use the version from master + my patch above it generating the packages) doesn't cause relinking to it).",True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/KOLANICH,7,https://github.com/pocl/pocl/pull/938#issuecomment-905352350,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)",With enabled tests and PEDANTIC also works for me,True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/938#issuecomment-906223728,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)","Builds now, but ""make check"" fails completely. Seems pretty much any kernel fails to build.",True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/KOLANICH,9,https://github.com/pocl/pocl/pull/938#issuecomment-906349789,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)","Needs debugging. I don't know internals of LLVM well enough, to even hypothesize what can be wrong.",True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/franz,10,https://github.com/pocl/pocl/pull/938#issuecomment-929931534,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)",This has been pulled in as part of PR #989 so i'm closing it. Thanks @KOLANICH for helping,True,{}
pocl/pocl,https://github.com/pocl/pocl,938,2021-04-26T18:34:44Z,2021-09-29T07:56:00Z,2021-09-29T15:38:02Z,CLOSED,False,96,34,10,https://github.com/KOLANICH,llvm13 and 14 compatibility,2,[],https://github.com/pocl/pocl/pull/938,https://github.com/KOLANICH,11,https://github.com/pocl/pocl/pull/938#issuecomment-930293705,"CloneFunctionInto signature (llvm/llvm-project@22a52df)
createUniqueFile signature (llvm/llvm-project@4f750f6#diff-ab6b14f408acbab9c464232a6a7182a7ee6ff272aa219388782a86d37c8f4f42R819) + small refactoring
AliasResult is converted to a class (llvm/llvm-project@c1a88e0 + llvm/llvm-project@ce1626f)","Thanks to you, @franz, for fixing the things I haven't managed to get fixed. 👏 🎉",True,{}
pocl/pocl,https://github.com/pocl/pocl,939,2021-04-27T11:32:15Z,2021-12-09T16:49:04Z,2022-01-15T18:30:46Z,MERGED,True,46,16,2,https://github.com/rusyaev-roman,Avoid inheritance from std::vector in ParallelRegion class.,1,[],https://github.com/pocl/pocl/pull/939,https://github.com/rusyaev-roman,1,https://github.com/pocl/pocl/pull/939,Use composition instead of inheritance.,Use composition instead of inheritance.,True,{}
pocl/pocl,https://github.com/pocl/pocl,939,2021-04-27T11:32:15Z,2021-12-09T16:49:04Z,2022-01-15T18:30:46Z,MERGED,True,46,16,2,https://github.com/rusyaev-roman,Avoid inheritance from std::vector in ParallelRegion class.,1,[],https://github.com/pocl/pocl/pull/939,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/939#issuecomment-855871462,Use composition instead of inheritance.,Did you try running tier1 tests with this? Pulling this in seems to cause a segfault in a PyOpenCL test.,True,{}
pocl/pocl,https://github.com/pocl/pocl,939,2021-04-27T11:32:15Z,2021-12-09T16:49:04Z,2022-01-15T18:30:46Z,MERGED,True,46,16,2,https://github.com/rusyaev-roman,Avoid inheritance from std::vector in ParallelRegion class.,1,[],https://github.com/pocl/pocl/pull/939,https://github.com/rusyaev-roman,3,https://github.com/pocl/pocl/pull/939#issuecomment-856560913,Use composition instead of inheritance.,"Oh, sorry. I'll double check this",True,{}
pocl/pocl,https://github.com/pocl/pocl,939,2021-04-27T11:32:15Z,2021-12-09T16:49:04Z,2022-01-15T18:30:46Z,MERGED,True,46,16,2,https://github.com/rusyaev-roman,Avoid inheritance from std::vector in ParallelRegion class.,1,[],https://github.com/pocl/pocl/pull/939,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/939#issuecomment-986825401,Use composition instead of inheritance.,"Hi, can you update this PR? I'll then retest and pull it in if my local test envs pass. Thanks!",True,{}
pocl/pocl,https://github.com/pocl/pocl,939,2021-04-27T11:32:15Z,2021-12-09T16:49:04Z,2022-01-15T18:30:46Z,MERGED,True,46,16,2,https://github.com/rusyaev-roman,Avoid inheritance from std::vector in ParallelRegion class.,1,[],https://github.com/pocl/pocl/pull/939,https://github.com/rusyaev-roman,5,https://github.com/pocl/pocl/pull/939#issuecomment-989117023,Use composition instead of inheritance.,"Did you try running tier1 tests with this? Pulling this in seems to cause a segfault in a PyOpenCL test.

Could you check it again? I've run it manually and it passed successfully.",True,{}
pocl/pocl,https://github.com/pocl/pocl,940,2021-04-27T11:46:24Z,2021-06-07T12:11:42Z,2022-01-15T18:30:51Z,MERGED,True,4,4,1,https://github.com/rusyaev-roman,"Fix typos in ""Binary inputs format"" document",1,[],https://github.com/pocl/pocl/pull/940,https://github.com/rusyaev-roman,1,https://github.com/pocl/pocl/pull/940,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,948,2021-06-10T11:23:34Z,2021-06-14T17:24:23Z,2021-06-14T17:24:23Z,MERGED,True,6,3,1,https://github.com/alarixnia,cpuinfo: check for fopen() failure when opening sysfs nodes,1,[],https://github.com/pocl/pocl/pull/948,https://github.com/alarixnia,1,https://github.com/pocl/pocl/pull/948,"If sysfs is not mounted (or not available, e.g. on BSD), fopen() will return a NULL pointer and this will be passed to fscanf, potentially resulting in NULL dereference. This fixes a segmentation fault running poclcc -l on NetBSD.","If sysfs is not mounted (or not available, e.g. on BSD), fopen() will return a NULL pointer and this will be passed to fscanf, potentially resulting in NULL dereference. This fixes a segmentation fault running poclcc -l on NetBSD.",True,{}
pocl/pocl,https://github.com/pocl/pocl,949,2021-06-10T11:39:28Z,2021-06-14T17:24:23Z,2021-06-14T17:24:23Z,MERGED,True,5,8,1,https://github.com/alarixnia,pocl_timing: fix detection of Unix monotonic clocks,1,[],https://github.com/pocl/pocl/pull/949,https://github.com/alarixnia,1,https://github.com/pocl/pocl/pull/949,"CLOCK_UPTIME_FAST is an extension only available on FreeBSD and DragonFlyBSD, so don't try to use it on other BSDs - this previously resulted a compilation failure on NetBSD.
Instead, use CLOCK_MONOTONIC. This is available on NetBSD and OpenBSD and is defined in POSIX.2008. On older Unix-like operating systems, keep the fallback to CLOCK_REALTIME.
Replace OS-specific checks with more portable checks for definitions.","CLOCK_UPTIME_FAST is an extension only available on FreeBSD and DragonFlyBSD, so don't try to use it on other BSDs - this previously resulted a compilation failure on NetBSD.
Instead, use CLOCK_MONOTONIC. This is available on NetBSD and OpenBSD and is defined in POSIX.2008. On older Unix-like operating systems, keep the fallback to CLOCK_REALTIME.
Replace OS-specific checks with more portable checks for definitions.",True,{}
pocl/pocl,https://github.com/pocl/pocl,950,2021-06-10T11:50:21Z,2021-06-14T17:24:23Z,2021-06-14T17:24:23Z,MERGED,True,13,19,7,https://github.com/alarixnia,Fix detection of dlopen()/libdl,1,[],https://github.com/pocl/pocl/pull/950,https://github.com/alarixnia,1,https://github.com/pocl/pocl/pull/950,"Many Unix systems do not need (macOS, Linux with musl?), or do  not have (most BSDs) libdl, and dlopen() is in libc instead.  Therefore, libdl being missing should not be fatal.   Replace checks for libdl.so with checks for dlfcn.h.


Remove #error checks for libdl from indivial C files. The CMake build system will already refuse to run if dlopen()  is missing, so these checks are redundant.


Helps with building on NetBSD.","Many Unix systems do not need (macOS, Linux with musl?), or do  not have (most BSDs) libdl, and dlopen() is in libc instead.  Therefore, libdl being missing should not be fatal.   Replace checks for libdl.so with checks for dlfcn.h.


Remove #error checks for libdl from indivial C files. The CMake build system will already refuse to run if dlopen()  is missing, so these checks are redundant.


Helps with building on NetBSD.",True,{}
pocl/pocl,https://github.com/pocl/pocl,951,2021-06-12T08:45:29Z,2021-06-14T17:24:23Z,2021-06-22T11:12:23Z,MERGED,True,17,2,1,https://github.com/Kazhuu,Add parallel loop metadata on LLVM 13 onward for load instructions inside conditions,1,[],https://github.com/pocl/pocl/pull/951,https://github.com/Kazhuu,1,https://github.com/pocl/pocl/pull/951,"Now that parallel loop metadata if-conversion safety is removed by this change for LLVM 13 branch. This change will enable adding metadata insertion on load instructions unconditionally. Prior to LLVM 13 will still use conditional placement of metadata to avoid miscompilations. This change is a follow-up to #850.
I tested this locally and with the fix using latest LLVM from trunk is not producing illegal code anymore. Also earlier vectorization failures from PolyBench kernels this and this are now vectorizing successfully and executing faster.","Now that parallel loop metadata if-conversion safety is removed by this change for LLVM 13 branch. This change will enable adding metadata insertion on load instructions unconditionally. Prior to LLVM 13 will still use conditional placement of metadata to avoid miscompilations. This change is a follow-up to #850.
I tested this locally and with the fix using latest LLVM from trunk is not producing illegal code anymore. Also earlier vectorization failures from PolyBench kernels this and this are now vectorizing successfully and executing faster.",True,{}
pocl/pocl,https://github.com/pocl/pocl,951,2021-06-12T08:45:29Z,2021-06-14T17:24:23Z,2021-06-22T11:12:23Z,MERGED,True,17,2,1,https://github.com/Kazhuu,Add parallel loop metadata on LLVM 13 onward for load instructions inside conditions,1,[],https://github.com/pocl/pocl/pull/951,https://github.com/fodinabor,2,https://github.com/pocl/pocl/pull/951#issuecomment-860031207,"Now that parallel loop metadata if-conversion safety is removed by this change for LLVM 13 branch. This change will enable adding metadata insertion on load instructions unconditionally. Prior to LLVM 13 will still use conditional placement of metadata to avoid miscompilations. This change is a follow-up to #850.
I tested this locally and with the fix using latest LLVM from trunk is not producing illegal code anymore. Also earlier vectorization failures from PolyBench kernels this and this are now vectorizing successfully and executing faster.","I scheduled the patch to be backported to 12.0.1 as well, so the check could possibly be relaxed to support that as well in a week or so when the patch is in...",True,{}
pocl/pocl,https://github.com/pocl/pocl,951,2021-06-12T08:45:29Z,2021-06-14T17:24:23Z,2021-06-22T11:12:23Z,MERGED,True,17,2,1,https://github.com/Kazhuu,Add parallel loop metadata on LLVM 13 onward for load instructions inside conditions,1,[],https://github.com/pocl/pocl/pull/951,https://github.com/Kazhuu,3,https://github.com/pocl/pocl/pull/951#issuecomment-860152395,"Now that parallel loop metadata if-conversion safety is removed by this change for LLVM 13 branch. This change will enable adding metadata insertion on load instructions unconditionally. Prior to LLVM 13 will still use conditional placement of metadata to avoid miscompilations. This change is a follow-up to #850.
I tested this locally and with the fix using latest LLVM from trunk is not producing illegal code anymore. Also earlier vectorization failures from PolyBench kernels this and this are now vectorizing successfully and executing faster.",Okay that sounds great! Maybe add the reference here once you're ready with the patch?,True,{}
pocl/pocl,https://github.com/pocl/pocl,951,2021-06-12T08:45:29Z,2021-06-14T17:24:23Z,2021-06-22T11:12:23Z,MERGED,True,17,2,1,https://github.com/Kazhuu,Add parallel loop metadata on LLVM 13 onward for load instructions inside conditions,1,[],https://github.com/pocl/pocl/pull/951,https://github.com/fodinabor,4,https://github.com/pocl/pocl/pull/951#issuecomment-865892385,"Now that parallel loop metadata if-conversion safety is removed by this change for LLVM 13 branch. This change will enable adding metadata insertion on load instructions unconditionally. Prior to LLVM 13 will still use conditional placement of metadata to avoid miscompilations. This change is a follow-up to #850.
I tested this locally and with the fix using latest LLVM from trunk is not producing illegal code anymore. Also earlier vectorization failures from PolyBench kernels this and this are now vectorizing successfully and executing faster.","The LLVM patch is in the release/12.x branch now and should thus land in >=12.0.1-rc3
llvm/llvm-project@b690ec5",True,{'THUMBS_UP': ['https://github.com/pjaaskel']}
pocl/pocl,https://github.com/pocl/pocl,952,2021-06-14T06:24:22Z,2021-06-14T17:24:23Z,2021-06-14T17:24:23Z,MERGED,True,16,0,2,https://github.com/alarixnia,Add CREDITS and CHANGES entries for my changes.,1,[],https://github.com/pocl/pocl/pull/952,https://github.com/alarixnia,1,https://github.com/pocl/pocl/pull/952,"I was unsure on how the changes should be formatted since they haven't been released yet, so I took a guess based on the history of the file.
Requested in #948 #949 #950","I was unsure on how the changes should be formatted since they haven't been released yet, so I took a guess based on the history of the file.
Requested in #948 #949 #950",True,{}
pocl/pocl,https://github.com/pocl/pocl,954,2021-06-16T13:06:43Z,2022-01-24T12:29:25Z,2022-01-24T12:29:25Z,CLOSED,False,16,12,2,https://github.com/hominhquan,Improve generic vload vstore functions,1,[],https://github.com/pocl/pocl/pull/954,https://github.com/hominhquan,1,https://github.com/pocl/pocl/pull/954,"Current implementation splits a vload4 into two vload2 for example,
preventing compiler from performing load/store packing.
This commit improve it by doing load/store packing explicitly
(vload3/vstore3 are not concerned).","Current implementation splits a vload4 into two vload2 for example,
preventing compiler from performing load/store packing.
This commit improve it by doing load/store packing explicitly
(vload3/vstore3 are not concerned).",True,{}
pocl/pocl,https://github.com/pocl/pocl,954,2021-06-16T13:06:43Z,2022-01-24T12:29:25Z,2022-01-24T12:29:25Z,CLOSED,False,16,12,2,https://github.com/hominhquan,Improve generic vload vstore functions,1,[],https://github.com/pocl/pocl/pull/954,https://github.com/Oblomov,2,https://github.com/pocl/pocl/pull/954#issuecomment-1019109451,"Current implementation splits a vload4 into two vload2 for example,
preventing compiler from performing load/store packing.
This commit improve it by doing load/store packing explicitly
(vload3/vstore3 are not concerned).","Yeah, I think this is illegal. The whole point of these functions is to support unaligned packed loading. At the very least the optimization should be based on hardware properties (for example, intel has movups etc instructions that can be used for unaligned loads, and vload should map to those when possible, whereas direct accesses should map to movaps etc)",True,{}
pocl/pocl,https://github.com/pocl/pocl,957,2021-06-17T21:15:21Z,2021-07-13T18:14:27Z,2021-07-13T18:14:27Z,MERGED,True,4387,2553,164,https://github.com/franz,internal refactoring,44,[],https://github.com/pocl/pocl/pull/957,https://github.com/franz,1,https://github.com/pocl/pocl/pull/957,"refactors compilation callbacks
portability fixes (Android, MSVC)
LTTNG tracing improved
valgrind improvements
some random fixes

EDIT: removed migrations & changes to memory","refactors compilation callbacks
portability fixes (Android, MSVC)
LTTNG tracing improved
valgrind improvements
some random fixes

EDIT: removed migrations & changes to memory",True,{}
pocl/pocl,https://github.com/pocl/pocl,957,2021-06-17T21:15:21Z,2021-07-13T18:14:27Z,2021-07-13T18:14:27Z,MERGED,True,4387,2553,164,https://github.com/franz,internal refactoring,44,[],https://github.com/pocl/pocl/pull/957,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/957#issuecomment-878220713,"refactors compilation callbacks
portability fixes (Android, MSVC)
LTTNG tracing improved
valgrind improvements
some random fixes

EDIT: removed migrations & changes to memory",Breaks HSA. https://termbin.com/zsp7p,True,{}
pocl/pocl,https://github.com/pocl/pocl,959,2021-06-19T05:05:47Z,2021-08-02T14:54:36Z,2021-08-02T14:54:36Z,MERGED,True,4,2,1,https://github.com/isuruf,Use @loader_path on macos instead of $ORIGIN,1,[],https://github.com/pocl/pocl/pull/959,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/959,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,961,2021-06-22T16:33:17Z,2021-10-28T07:49:55Z,2021-10-28T07:49:55Z,MERGED,True,220,29,12,https://github.com/Vinsteri,OpenCL 3.0 API conformance: Device-Side Enqueue,1,[],https://github.com/pocl/pocl/pull/961,https://github.com/Vinsteri,1,https://github.com/pocl/pocl/pull/961,"This pull request implements missing queries and API functions related to device-side enqueue. Device-side enqueue is specified as optional in OpenCL 3.0. PoCL does not support device-side enqueue. This pull request implements the OpenCL API such that it conforms to the specification when device-side enqueue is not supported.
See https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_device_side_enqueue","This pull request implements missing queries and API functions related to device-side enqueue. Device-side enqueue is specified as optional in OpenCL 3.0. PoCL does not support device-side enqueue. This pull request implements the OpenCL API such that it conforms to the specification when device-side enqueue is not supported.
See https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_device_side_enqueue",True,{}
pocl/pocl,https://github.com/pocl/pocl,963,2021-07-02T06:54:02Z,2021-07-22T09:30:56Z,2021-07-22T09:30:57Z,MERGED,True,90,90,11,https://github.com/isuruf,Fix cuda atomics after rename,3,[],https://github.com/pocl/pocl/pull/963,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/963,"Rename done in b3e616e was incomplete
Fixes #955","Rename done in b3e616e was incomplete
Fixes #955",True,{}
pocl/pocl,https://github.com/pocl/pocl,965,2021-07-08T02:12:15Z,2021-08-02T16:34:12Z,2021-08-02T16:34:12Z,MERGED,True,20,17,1,https://github.com/Kazhuu,Add parallel loop metadata on LLVM 12 onward and not before on load instructions inside conditions,3,[],https://github.com/pocl/pocl/pull/965,https://github.com/Kazhuu,1,https://github.com/pocl/pocl/pull/965,Follow-up PR for this #951. This time lower the LLVM version check to 12 because the fix got backported to LLVM 12 release branch llvm/llvm-project@b690ec5.,Follow-up PR for this #951. This time lower the LLVM version check to 12 because the fix got backported to LLVM 12 release branch llvm/llvm-project@b690ec5.,True,{}
pocl/pocl,https://github.com/pocl/pocl,965,2021-07-08T02:12:15Z,2021-08-02T16:34:12Z,2021-08-02T16:34:12Z,MERGED,True,20,17,1,https://github.com/Kazhuu,Add parallel loop metadata on LLVM 12 onward and not before on load instructions inside conditions,3,[],https://github.com/pocl/pocl/pull/965,https://github.com/fodinabor,2,https://github.com/pocl/pocl/pull/965#issuecomment-877081033,Follow-up PR for this #951. This time lower the LLVM version check to 12 because the fix got backported to LLVM 12 release branch llvm/llvm-project@b690ec5.,"Mh.. I don't know how wide-spread 12.0.0 will be, but the issue is only fixed with 12.0.1, thus I used #if LLVM_VERSION_MAJOR < 13 && !(LLVM_VERSION_MAJOR == 12 && LLVM_VERSION_MINOR >= 0 && LLVM_VERSION_PATCH >= 1) for this check elsewhere.",True,{}
pocl/pocl,https://github.com/pocl/pocl,965,2021-07-08T02:12:15Z,2021-08-02T16:34:12Z,2021-08-02T16:34:12Z,MERGED,True,20,17,1,https://github.com/Kazhuu,Add parallel loop metadata on LLVM 12 onward and not before on load instructions inside conditions,3,[],https://github.com/pocl/pocl/pull/965,https://github.com/Kazhuu,3,https://github.com/pocl/pocl/pull/965#issuecomment-877321101,Follow-up PR for this #951. This time lower the LLVM version check to 12 because the fix got backported to LLVM 12 release branch llvm/llvm-project@b690ec5.,Thank you for this. Yeah this makes more sense. I'll add this.,True,{}
pocl/pocl,https://github.com/pocl/pocl,967,2021-07-17T03:36:39Z,2021-08-04T08:18:04Z,2021-08-04T08:18:04Z,MERGED,True,8,2,5,https://github.com/FnControlOption,Fix build on macOS,1,[],https://github.com/pocl/pocl/pull/967,https://github.com/FnControlOption,1,https://github.com/pocl/pocl/pull/967,"Closes #958 - This error is especially apparent when building with multiple cores (make -j2)
clCreateProgramWithIL is used in lib/poclu/misc.c, which in turn is used by poclcc and poclu. The above error is fixed by adding ${POCL_LIBRARY_NAME} to target_link_libraries().
Changing #define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL) to #define POCL_FAST_INIT(l) POCL_INIT_LOCK (l) fixes these errors:
pocl/lib/CL/devices/pthread/pthread_scheduler.c:89:3: error: too many arguments provided to
      function-like macro invocation
  POCL_FAST_INIT (scheduler.wq_lock_fast);
  ^
pocl/lib/CL/./pocl_cl.h:159:47: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                                              ^
pocl/lib/CL/./pocl_cl.h:124:9: note: macro 'POCL_INIT_LOCK' defined here
#define POCL_INIT_LOCK(__LOCK__)                                              \
        ^
pocl/lib/CL/devices/pthread/pthread_scheduler.c:89:3: error: use of undeclared identifier
      'POCL_INIT_LOCK'
  POCL_FAST_INIT (scheduler.wq_lock_fast);
  ^
pocl/lib/CL/./pocl_cl.h:159:27: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                          ^
pocl/lib/CL/devices/pthread/pthread_scheduler.c:372:3: error: too many arguments provided to
      function-like macro invocation
  POCL_FAST_INIT (run_cmd->lock);
  ^
pocl/lib/CL/./pocl_cl.h:159:47: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                                              ^
pocl/lib/CL/./pocl_cl.h:124:9: note: macro 'POCL_INIT_LOCK' defined here
#define POCL_INIT_LOCK(__LOCK__)                                              \
        ^
pocl/lib/CL/devices/pthread/pthread_scheduler.c:372:3: error: use of undeclared identifier
      'POCL_INIT_LOCK'
  POCL_FAST_INIT (run_cmd->lock);
  ^
pocl/lib/CL/./pocl_cl.h:159:27: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                          ^","Closes #958 - This error is especially apparent when building with multiple cores (make -j2)
clCreateProgramWithIL is used in lib/poclu/misc.c, which in turn is used by poclcc and poclu. The above error is fixed by adding ${POCL_LIBRARY_NAME} to target_link_libraries().
Changing #define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL) to #define POCL_FAST_INIT(l) POCL_INIT_LOCK (l) fixes these errors:
pocl/lib/CL/devices/pthread/pthread_scheduler.c:89:3: error: too many arguments provided to
      function-like macro invocation
  POCL_FAST_INIT (scheduler.wq_lock_fast);
  ^
pocl/lib/CL/./pocl_cl.h:159:47: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                                              ^
pocl/lib/CL/./pocl_cl.h:124:9: note: macro 'POCL_INIT_LOCK' defined here
#define POCL_INIT_LOCK(__LOCK__)                                              \
        ^
pocl/lib/CL/devices/pthread/pthread_scheduler.c:89:3: error: use of undeclared identifier
      'POCL_INIT_LOCK'
  POCL_FAST_INIT (scheduler.wq_lock_fast);
  ^
pocl/lib/CL/./pocl_cl.h:159:27: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                          ^
pocl/lib/CL/devices/pthread/pthread_scheduler.c:372:3: error: too many arguments provided to
      function-like macro invocation
  POCL_FAST_INIT (run_cmd->lock);
  ^
pocl/lib/CL/./pocl_cl.h:159:47: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                                              ^
pocl/lib/CL/./pocl_cl.h:124:9: note: macro 'POCL_INIT_LOCK' defined here
#define POCL_INIT_LOCK(__LOCK__)                                              \
        ^
pocl/lib/CL/devices/pthread/pthread_scheduler.c:372:3: error: use of undeclared identifier
      'POCL_INIT_LOCK'
  POCL_FAST_INIT (run_cmd->lock);
  ^
pocl/lib/CL/./pocl_cl.h:159:27: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                          ^",True,{}
pocl/pocl,https://github.com/pocl/pocl,967,2021-07-17T03:36:39Z,2021-08-04T08:18:04Z,2021-08-04T08:18:04Z,MERGED,True,8,2,5,https://github.com/FnControlOption,Fix build on macOS,1,[],https://github.com/pocl/pocl/pull/967,https://github.com/FnControlOption,2,https://github.com/pocl/pocl/pull/967#issuecomment-884997414,"Closes #958 - This error is especially apparent when building with multiple cores (make -j2)
clCreateProgramWithIL is used in lib/poclu/misc.c, which in turn is used by poclcc and poclu. The above error is fixed by adding ${POCL_LIBRARY_NAME} to target_link_libraries().
Changing #define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL) to #define POCL_FAST_INIT(l) POCL_INIT_LOCK (l) fixes these errors:
pocl/lib/CL/devices/pthread/pthread_scheduler.c:89:3: error: too many arguments provided to
      function-like macro invocation
  POCL_FAST_INIT (scheduler.wq_lock_fast);
  ^
pocl/lib/CL/./pocl_cl.h:159:47: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                                              ^
pocl/lib/CL/./pocl_cl.h:124:9: note: macro 'POCL_INIT_LOCK' defined here
#define POCL_INIT_LOCK(__LOCK__)                                              \
        ^
pocl/lib/CL/devices/pthread/pthread_scheduler.c:89:3: error: use of undeclared identifier
      'POCL_INIT_LOCK'
  POCL_FAST_INIT (scheduler.wq_lock_fast);
  ^
pocl/lib/CL/./pocl_cl.h:159:27: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                          ^
pocl/lib/CL/devices/pthread/pthread_scheduler.c:372:3: error: too many arguments provided to
      function-like macro invocation
  POCL_FAST_INIT (run_cmd->lock);
  ^
pocl/lib/CL/./pocl_cl.h:159:47: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                                              ^
pocl/lib/CL/./pocl_cl.h:124:9: note: macro 'POCL_INIT_LOCK' defined here
#define POCL_INIT_LOCK(__LOCK__)                                              \
        ^
pocl/lib/CL/devices/pthread/pthread_scheduler.c:372:3: error: use of undeclared identifier
      'POCL_INIT_LOCK'
  POCL_FAST_INIT (run_cmd->lock);
  ^
pocl/lib/CL/./pocl_cl.h:159:27: note: expanded from macro 'POCL_FAST_INIT'
#define POCL_FAST_INIT(l) POCL_INIT_LOCK (&l, NULL)
                          ^",Done,True,{}
pocl/pocl,https://github.com/pocl/pocl,968,2021-07-19T08:13:34Z,2021-07-22T07:28:13Z,2021-09-29T14:19:28Z,MERGED,True,469,22,22,https://github.com/franz,Add cl_pocl_content_size extension,2,[],https://github.com/pocl/pocl/pull/968,https://github.com/franz,1,https://github.com/pocl/pocl/pull/968,"Adds a new extension, cl_pocl_content_size, and an example implementation in clEnqueueCopyBuffer() of the CPU driver.
Since the extension is an optimization, drivers can safely ignore it.","Adds a new extension, cl_pocl_content_size, and an example implementation in clEnqueueCopyBuffer() of the CPU driver.
Since the extension is an optimization, drivers can safely ignore it.",True,{}
pocl/pocl,https://github.com/pocl/pocl,969,2021-07-25T15:53:32Z,2021-08-05T07:12:57Z,2021-08-05T15:52:28Z,MERGED,True,36,0,3,https://github.com/trixirt,[cmake] use ninja's compile and link pools,1,[],https://github.com/pocl/pocl/pull/969,https://github.com/trixirt,1,https://github.com/pocl/pocl/pull/969,"When CMAKE_BUILD_TYPE=DEBUG, the linking memory usage is so
high the build fails without setting -j <low_num> on the command
line.
The llvm project has a similar problem which is solved on the
ninja buildsystem by splitting the compile and link jobs.
see llvm-project/llvm/cmake/modules/HandleLLVMOptions.cmake
and these variables
LLVM_PARALLEL_COMPILE_JOBS and LLVM_PARALLEL_LINK_JOBS
The new POCL equivelent variables are
PARALLEL_COMPILE_JOBS and PARALLEL_LINK_JOBS
ex/ used in the cmake configure step
cmake -G Ninja
-DPARALLEL_COMPILE_JOBS=16
-DPARALLEL_LINK_JOBS=8
And reported if used as status
...
-- OCS_AVAILABLE: ON
-- PARALLEL_COMPILE_JOBS: 16
-- PARALLEL_LINK_JOBS: 8
-- POCL_ICD_ABSOLUTE_PATH: ON
...
Signed-off-by: Tom Rix trix@redhat.com","When CMAKE_BUILD_TYPE=DEBUG, the linking memory usage is so
high the build fails without setting -j <low_num> on the command
line.
The llvm project has a similar problem which is solved on the
ninja buildsystem by splitting the compile and link jobs.
see llvm-project/llvm/cmake/modules/HandleLLVMOptions.cmake
and these variables
LLVM_PARALLEL_COMPILE_JOBS and LLVM_PARALLEL_LINK_JOBS
The new POCL equivelent variables are
PARALLEL_COMPILE_JOBS and PARALLEL_LINK_JOBS
ex/ used in the cmake configure step
cmake -G Ninja
-DPARALLEL_COMPILE_JOBS=16
-DPARALLEL_LINK_JOBS=8
And reported if used as status
...
-- OCS_AVAILABLE: ON
-- PARALLEL_COMPILE_JOBS: 16
-- PARALLEL_LINK_JOBS: 8
-- POCL_ICD_ABSOLUTE_PATH: ON
...
Signed-off-by: Tom Rix trix@redhat.com",True,{}
pocl/pocl,https://github.com/pocl/pocl,969,2021-07-25T15:53:32Z,2021-08-05T07:12:57Z,2021-08-05T15:52:28Z,MERGED,True,36,0,3,https://github.com/trixirt,[cmake] use ninja's compile and link pools,1,[],https://github.com/pocl/pocl/pull/969,https://github.com/trixirt,2,https://github.com/pocl/pocl/pull/969#issuecomment-891274574,"When CMAKE_BUILD_TYPE=DEBUG, the linking memory usage is so
high the build fails without setting -j <low_num> on the command
line.
The llvm project has a similar problem which is solved on the
ninja buildsystem by splitting the compile and link jobs.
see llvm-project/llvm/cmake/modules/HandleLLVMOptions.cmake
and these variables
LLVM_PARALLEL_COMPILE_JOBS and LLVM_PARALLEL_LINK_JOBS
The new POCL equivelent variables are
PARALLEL_COMPILE_JOBS and PARALLEL_LINK_JOBS
ex/ used in the cmake configure step
cmake -G Ninja
-DPARALLEL_COMPILE_JOBS=16
-DPARALLEL_LINK_JOBS=8
And reported if used as status
...
-- OCS_AVAILABLE: ON
-- PARALLEL_COMPILE_JOBS: 16
-- PARALLEL_LINK_JOBS: 8
-- POCL_ICD_ABSOLUTE_PATH: ON
...
Signed-off-by: Tom Rix trix@redhat.com",CREDITS and CHANGES updated.  rebased to today's master.,True,{}
pocl/pocl,https://github.com/pocl/pocl,969,2021-07-25T15:53:32Z,2021-08-05T07:12:57Z,2021-08-05T15:52:28Z,MERGED,True,36,0,3,https://github.com/trixirt,[cmake] use ninja's compile and link pools,1,[],https://github.com/pocl/pocl/pull/969,https://github.com/trixirt,3,https://github.com/pocl/pocl/pull/969#issuecomment-892671739,"When CMAKE_BUILD_TYPE=DEBUG, the linking memory usage is so
high the build fails without setting -j <low_num> on the command
line.
The llvm project has a similar problem which is solved on the
ninja buildsystem by splitting the compile and link jobs.
see llvm-project/llvm/cmake/modules/HandleLLVMOptions.cmake
and these variables
LLVM_PARALLEL_COMPILE_JOBS and LLVM_PARALLEL_LINK_JOBS
The new POCL equivelent variables are
PARALLEL_COMPILE_JOBS and PARALLEL_LINK_JOBS
ex/ used in the cmake configure step
cmake -G Ninja
-DPARALLEL_COMPILE_JOBS=16
-DPARALLEL_LINK_JOBS=8
And reported if used as status
...
-- OCS_AVAILABLE: ON
-- PARALLEL_COMPILE_JOBS: 16
-- PARALLEL_LINK_JOBS: 8
-- POCL_ICD_ABSOLUTE_PATH: ON
...
Signed-off-by: Tom Rix trix@redhat.com",resolved the conflict on CREDITS,True,{}
pocl/pocl,https://github.com/pocl/pocl,971,2021-07-29T19:33:49Z,2021-08-05T07:12:57Z,2021-08-05T07:12:57Z,MERGED,True,37,19,1,https://github.com/trixirt,Add a fallback to finding the device's *.so,1,[],https://github.com/pocl/pocl/pull/971,https://github.com/trixirt,1,https://github.com/pocl/pocl/pull/971,"On linux, a user application can find a *.so with the
LD_LIBRARY_PATH evironment variable.
To use the LD_LIBRARY_PATH, the path returned by
get_pocl_device_lib_path() needs to be just the file name.
So add option to do this.
In pocl_init_device() if the current method fails, try again
with the fallback.
Signed-off-by: Tom Rix trix@redhat.com","On linux, a user application can find a *.so with the
LD_LIBRARY_PATH evironment variable.
To use the LD_LIBRARY_PATH, the path returned by
get_pocl_device_lib_path() needs to be just the file name.
So add option to do this.
In pocl_init_device() if the current method fails, try again
with the fallback.
Signed-off-by: Tom Rix trix@redhat.com",True,{}
pocl/pocl,https://github.com/pocl/pocl,971,2021-07-29T19:33:49Z,2021-08-05T07:12:57Z,2021-08-05T07:12:57Z,MERGED,True,37,19,1,https://github.com/trixirt,Add a fallback to finding the device's *.so,1,[],https://github.com/pocl/pocl/pull/971,https://github.com/isuruf,2,https://github.com/pocl/pocl/pull/971#issuecomment-889523656,"On linux, a user application can find a *.so with the
LD_LIBRARY_PATH evironment variable.
To use the LD_LIBRARY_PATH, the path returned by
get_pocl_device_lib_path() needs to be just the file name.
So add option to do this.
In pocl_init_device() if the current method fails, try again
with the fallback.
Signed-off-by: Tom Rix trix@redhat.com",I don't understand why the device so's are not in the place that pocl is expecting them to be.,True,{}
pocl/pocl,https://github.com/pocl/pocl,972,2021-08-11T07:00:49Z,2021-08-11T16:45:54Z,2021-08-11T16:45:54Z,MERGED,True,1,1,1,https://github.com/xantares,pocl_gettimemono_ns: use ULL suffix for int64_t,1,[],https://github.com/pocl/pocl/pull/972,https://github.com/xantares,1,https://github.com/pocl/pocl/pull/972,allows to build with mingw,allows to build with mingw,True,{}
pocl/pocl,https://github.com/pocl/pocl,973,2021-08-11T07:02:32Z,2021-08-11T16:45:54Z,2021-08-11T16:45:54Z,MERGED,True,2,0,1,https://github.com/xantares,topology: setenv is linux* specific,1,[],https://github.com/pocl/pocl/pull/973,https://github.com/xantares,1,https://github.com/pocl/pocl/pull/973,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,973,2021-08-11T07:02:32Z,2021-08-11T16:45:54Z,2021-08-11T16:45:54Z,MERGED,True,2,0,1,https://github.com/xantares,topology: setenv is linux* specific,1,[],https://github.com/pocl/pocl/pull/973,https://github.com/xantares,2,https://github.com/pocl/pocl/pull/973#issuecomment-896886545,,"the tests do not pass yet, something is up with the loader, I think it does not expose the api symbols",True,{}
pocl/pocl,https://github.com/pocl/pocl,974,2021-08-11T07:06:07Z,2021-08-11T16:45:54Z,2021-08-11T16:45:54Z,MERGED,True,9,28,4,https://github.com/xantares,cmake: Allow hwloc detection on mingw,1,[],https://github.com/pocl/pocl/pull/974,https://github.com/xantares,1,https://github.com/pocl/pocl/pull/974,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,975,2021-08-11T08:41:28Z,2021-08-11T16:45:54Z,2021-08-11T16:45:54Z,MERGED,True,12,34,2,https://github.com/xantares,cmake: Simplify dlfcn detection for mingw,1,[],https://github.com/pocl/pocl/pull/975,https://github.com/xantares,1,https://github.com/pocl/pocl/pull/975,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,976,2021-08-11T08:54:20Z,2021-08-11T16:45:54Z,2021-08-11T16:45:54Z,MERGED,True,8,8,1,https://github.com/xantares,cmake: use add_test NAME/COMMAND args,1,[],https://github.com/pocl/pocl/pull/976,https://github.com/xantares,1,https://github.com/pocl/pocl/pull/976,this allows to run tests when cross compiling (eg mingw),this allows to run tests when cross compiling (eg mingw),True,{}
pocl/pocl,https://github.com/pocl/pocl,977,2021-08-11T09:07:38Z,2021-08-11T16:45:54Z,2021-09-01T07:12:43Z,MERGED,True,108,38,24,https://github.com/xantares,Fix build on MinGW,1,[],https://github.com/pocl/pocl/pull/977,https://github.com/xantares,1,https://github.com/pocl/pocl/pull/977,"With this I succeeded in building libpocl.dll and the tests.
Now vccompat.hpp is used also for mingw because many things are shared with the msvc path.
It should help to build on MSVC as some common paths were fixed.
Yet to figure out why the loader fails.","With this I succeeded in building libpocl.dll and the tests.
Now vccompat.hpp is used also for mingw because many things are shared with the msvc path.
It should help to build on MSVC as some common paths were fixed.
Yet to figure out why the loader fails.",True,{}
pocl/pocl,https://github.com/pocl/pocl,980,2021-08-19T17:25:55Z,2021-08-23T07:17:11Z,2021-08-23T10:10:59Z,MERGED,True,64,3,7,https://github.com/fodinabor,Add barrier to latch if all preds are barriers.,3,[],https://github.com/pocl/pocl/pull/980,https://github.com/fodinabor,1,https://github.com/pocl/pocl/pull/980,"After BTR we need to re-add barriers in the single latch for the parallel region formation to work correctly. This is done in CanonicalizeBarriers.
This fixes #553.","After BTR we need to re-add barriers in the single latch for the parallel region formation to work correctly. This is done in CanonicalizeBarriers.
This fixes #553.",True,{}
pocl/pocl,https://github.com/pocl/pocl,980,2021-08-19T17:25:55Z,2021-08-23T07:17:11Z,2021-08-23T10:10:59Z,MERGED,True,64,3,7,https://github.com/fodinabor,Add barrier to latch if all preds are barriers.,3,[],https://github.com/pocl/pocl/pull/980,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/980#issuecomment-902715032,"After BTR we need to re-add barriers in the single latch for the parallel region formation to work correctly. This is done in CanonicalizeBarriers.
This fixes #553.",Nice! I'm extremely happy to see someone else is brave enough to dig into the CFG SPMD passes :D Can you add a test case for this? There are unit tests for WG function generation issues you can use as a starting point.,True,{}
pocl/pocl,https://github.com/pocl/pocl,980,2021-08-19T17:25:55Z,2021-08-23T07:17:11Z,2021-08-23T10:10:59Z,MERGED,True,64,3,7,https://github.com/fodinabor,Add barrier to latch if all preds are barriers.,3,[],https://github.com/pocl/pocl/pull/980,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/980#issuecomment-902739396,"After BTR we need to re-add barriers in the single latch for the parallel region formation to work correctly. This is done in CanonicalizeBarriers.
This fixes #553.",regression/case_with_multiple_variable_length_loops_and_a_barrier_in_one fails with this patch (with LLVM 12).,True,{}
pocl/pocl,https://github.com/pocl/pocl,980,2021-08-19T17:25:55Z,2021-08-23T07:17:11Z,2021-08-23T10:10:59Z,MERGED,True,64,3,7,https://github.com/fodinabor,Add barrier to latch if all preds are barriers.,3,[],https://github.com/pocl/pocl/pull/980,https://github.com/fodinabor,4,https://github.com/pocl/pocl/pull/980#issuecomment-902984198,"After BTR we need to re-add barriers in the single latch for the parallel region formation to work correctly. This is done in CanonicalizeBarriers.
This fixes #553.","Heh, I sort of had to :)
I'm currently taking a look at efficiently implementing nd_range kernels on CPU in hipSYCL. For this, I pulled in (most of) the POCL pipeline, which is great work btw! This triggered a test on my end, so I fixed it for hipSYCL a while ago and wanted to contribute it back before I completely forget the circumstances.
As it turned out that was a rather big hammer fix that worked fine in hipSYCL, I investigated the POCL side a bit more and came up with another slightly smaller fix, also including a testcase now.",True,{}
pocl/pocl,https://github.com/pocl/pocl,980,2021-08-19T17:25:55Z,2021-08-23T07:17:11Z,2021-08-23T10:10:59Z,MERGED,True,64,3,7,https://github.com/fodinabor,Add barrier to latch if all preds are barriers.,3,[],https://github.com/pocl/pocl/pull/980,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/980#issuecomment-903460035,"After BTR we need to re-add barriers in the single latch for the parallel region formation to work correctly. This is done in CanonicalizeBarriers.
This fixes #553.",I see. Thanks - testing now. It would be nice to get the de-SPMD CFG transformations upstreamed to LLVM where they belong.,True,{}
pocl/pocl,https://github.com/pocl/pocl,981,2021-08-25T10:03:12Z,2021-09-08T17:03:23Z,2021-09-08T19:22:51Z,MERGED,True,5,5,1,https://github.com/KOLANICH,Changes to satisfy pedantic flags,1,[],https://github.com/pocl/pocl/pull/981,https://github.com/KOLANICH,1,https://github.com/pocl/pocl/pull/981,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,982,2021-08-30T06:03:50Z,2021-09-08T15:15:49Z,2021-09-09T09:17:06Z,MERGED,True,4150,2454,148,https://github.com/franz,Memory management and llvm improvements,28,[],https://github.com/pocl/pocl/pull/982,https://github.com/franz,1,https://github.com/pocl/pocl/pull/982,"Improve memory architecture, buffer migration and allocation.
Buffers are now allocated on a device when first used
(previously each buffer was allocated on every device in context).


the single global LLVMContext was replaced with
multiple LLVMContexts, one per OpenCL cl_context.


add SIGUSR2 handler to print some debug info


loadable drivers can be turned off in CMake to build static libpocl (loadable is still the default)


added some extra documentation on memory architecture, since the changes are extensive. More documentation also in the code.","Improve memory architecture, buffer migration and allocation.
Buffers are now allocated on a device when first used
(previously each buffer was allocated on every device in context).


the single global LLVMContext was replaced with
multiple LLVMContexts, one per OpenCL cl_context.


add SIGUSR2 handler to print some debug info


loadable drivers can be turned off in CMake to build static libpocl (loadable is still the default)


added some extra documentation on memory architecture, since the changes are extensive. More documentation also in the code.",True,{'THUMBS_UP': ['https://github.com/isuruf']}
pocl/pocl,https://github.com/pocl/pocl,985,2021-09-03T10:17:52Z,2021-09-08T17:03:23Z,2021-09-08T17:05:12Z,MERGED,True,6,3,3,https://github.com/xantares,misc cross compilation fixes,4,[],https://github.com/pocl/pocl/pull/985,https://github.com/xantares,1,https://github.com/pocl/pocl/pull/985,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,986,2021-09-07T10:52:06Z,2021-09-08T17:03:23Z,2021-09-08T17:03:23Z,MERGED,True,1,1,1,https://github.com/Vinsteri,Removed deprecated option from PyOpenCL testsuite configurations,1,[],https://github.com/pocl/pocl/pull/986,https://github.com/Vinsteri,1,https://github.com/pocl/pocl/pull/986,"--no-site-packages option has been removed from latest versions of python virtualenv causing PyOpenCL testsuite error out during make prepare_examples.
Only information about this option I found from python3 virtualenv version 16.7.9 where this command is already deprecated and its functionality is the default behavior.
[https://virtualenv.pypa.io/en/legacy/reference.html#cmdoption-no-site-packages]","--no-site-packages option has been removed from latest versions of python virtualenv causing PyOpenCL testsuite error out during make prepare_examples.
Only information about this option I found from python3 virtualenv version 16.7.9 where this command is already deprecated and its functionality is the default behavior.
[https://virtualenv.pypa.io/en/legacy/reference.html#cmdoption-no-site-packages]",True,{}
pocl/pocl,https://github.com/pocl/pocl,988,2021-09-15T09:32:40Z,2021-09-20T16:48:52Z,2021-09-20T16:48:52Z,MERGED,True,4,0,1,https://github.com/AlexGhiti,CMakeLists.txt: Handle 'undefined' values returned by getconf,1,[],https://github.com/pocl/pocl/pull/988,https://github.com/AlexGhiti,1,https://github.com/pocl/pocl/pull/988,"This allows to avoid build failures when using qemu user mode for riscv64 1:
the corresponding bug in qemu 2 will get fixed but handling that here allows
to keep pocl buildable by old qemu versions.
Signed-off-by: Alexandre Ghiti alexandre.ghiti@canonical.com","This allows to avoid build failures when using qemu user mode for riscv64 1:
the corresponding bug in qemu 2 will get fixed but handling that here allows
to keep pocl buildable by old qemu versions.
Signed-off-by: Alexandre Ghiti alexandre.ghiti@canonical.com",True,{}
pocl/pocl,https://github.com/pocl/pocl,989,2021-09-25T08:58:10Z,2021-09-28T19:41:22Z,2021-09-29T14:19:09Z,MERGED,True,6001,632,53,https://github.com/franz,LLVM 13 fixes,18,[],https://github.com/pocl/pocl/pull/989,https://github.com/franz,1,https://github.com/pocl/pocl/pull/989,"This builds on @KOLANICH 's branch, fixes the remaining issues and some other problems that popped up during testing (SPIR stuff).","This builds on @KOLANICH 's branch, fixes the remaining issues and some other problems that popped up during testing (SPIR stuff).",True,{}
pocl/pocl,https://github.com/pocl/pocl,992,2021-10-15T07:15:29Z,2021-10-18T09:49:26Z,2021-10-18T09:49:26Z,MERGED,True,20155,1304,233,https://github.com/franz,"TCE fixes, proxy driver, tracing",14,[],https://github.com/pocl/pocl/pull/992,https://github.com/franz,1,https://github.com/pocl/pocl/pull/992,"many improvements to TCE driver
significantly improved tracing
new proxy driver","many improvements to TCE driver
significantly improved tracing
new proxy driver",True,{}
pocl/pocl,https://github.com/pocl/pocl,996,2021-10-26T18:22:57Z,2021-10-27T14:00:07Z,2021-10-27T14:00:07Z,MERGED,True,140,5,10,https://github.com/Vinsteri,OpenCL 3.0 API conformance: Pipes,1,[],https://github.com/pocl/pocl/pull/996,https://github.com/Vinsteri,1,https://github.com/pocl/pocl/pull/996,"Minimal implementation of pipe related API calls conformant to OpenCL 3.0. This pull request implements pipe related API call such that they conform to OpenCL 3.0 specification when pipes are not supported. See, https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_pipes_2","Minimal implementation of pipe related API calls conformant to OpenCL 3.0. This pull request implements pipe related API call such that they conform to OpenCL 3.0 specification when pipes are not supported. See, https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_pipes_2",True,{}
pocl/pocl,https://github.com/pocl/pocl,997,2021-10-27T12:17:59Z,2021-10-29T11:18:15Z,2021-10-29T11:18:15Z,MERGED,True,6,0,2,https://github.com/Vinsteri,OpenCL 3.0 API conformance: Program Scope Global Variables,1,[],https://github.com/pocl/pocl/pull/997,https://github.com/Vinsteri,1,https://github.com/pocl/pocl/pull/997,"Made program scope global variables API calls OpenCL 3.0 conformant. See, https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_program_scope_global_variables","Made program scope global variables API calls OpenCL 3.0 conformant. See, https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_program_scope_global_variables",True,{}
pocl/pocl,https://github.com/pocl/pocl,999,2021-11-10T20:19:00Z,2021-11-12T09:38:13Z,2021-11-12T09:38:13Z,MERGED,True,76,2,9,https://github.com/Vinsteri,OpenCL 3.0 API conformance: Non-Uniform Work Groups and Device and Host Timer Synchronization,2,[],https://github.com/pocl/pocl/pull/999,https://github.com/Vinsteri,1,https://github.com/pocl/pocl/pull/999,"This pull request contains changes for two features OpenCL 3.0 conformance. I decided to combine these to one pull request since the changes for non-uniform work groups were so small.
Changes are based directly on the OpenCL 3.0 specification. See
https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_non_uniform_work_groups
https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_device_and_host_timer_synchronization","This pull request contains changes for two features OpenCL 3.0 conformance. I decided to combine these to one pull request since the changes for non-uniform work groups were so small.
Changes are based directly on the OpenCL 3.0 specification. See
https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_non_uniform_work_groups
https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_device_and_host_timer_synchronization",True,{}
pocl/pocl,https://github.com/pocl/pocl,1001,2021-11-11T08:57:42Z,2021-11-12T09:38:13Z,2021-11-12T09:38:13Z,MERGED,True,1,0,1,https://github.com/agemuend,Add missing cl_ext_pocl.h to install.,1,[],https://github.com/pocl/pocl/pull/1001,https://github.com/agemuend,1,https://github.com/pocl/pocl/pull/1001,Fixes #1000,Fixes #1000,True,{}
pocl/pocl,https://github.com/pocl/pocl,1002,2021-11-15T06:38:50Z,2021-12-02T10:49:52Z,2021-12-02T10:49:52Z,MERGED,True,3609,63,45,https://github.com/franz,experimental Vulkan driver,18,[],https://github.com/pocl/pocl/pull/1002,https://github.com/franz,1,https://github.com/pocl/pocl/pull/1002,"VERY experimental, few features supported
requires google's clspv for compilation
documentation provided in doc/sphinx/source/vulkan.rst
tests can be run with tools/scripts/run_vulkan_tests","VERY experimental, few features supported
requires google's clspv for compilation
documentation provided in doc/sphinx/source/vulkan.rst
tests can be run with tools/scripts/run_vulkan_tests",True,"{'THUMBS_UP': ['https://github.com/oscarbg', 'https://github.com/pjaaskel']}"
pocl/pocl,https://github.com/pocl/pocl,1002,2021-11-15T06:38:50Z,2021-12-02T10:49:52Z,2021-12-02T10:49:52Z,MERGED,True,3609,63,45,https://github.com/franz,experimental Vulkan driver,18,[],https://github.com/pocl/pocl/pull/1002,https://github.com/Oblomov,2,https://github.com/pocl/pocl/pull/1002#issuecomment-969913800,"VERY experimental, few features supported
requires google's clspv for compilation
documentation provided in doc/sphinx/source/vulkan.rst
tests can be run with tools/scripts/run_vulkan_tests","Wow serendipity, I was just looking at the attempt to implement SYCL on Vulkan and was wondering if it was possible to do something like it for OpenCL.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1003,2021-11-18T07:11:59Z,2021-12-03T15:37:55Z,2021-12-03T15:37:55Z,MERGED,True,98,11,10,https://github.com/Vinsteri,OpenCL 3.0 API conformance: Subgroups,2,[],https://github.com/pocl/pocl/pull/1003,https://github.com/Vinsteri,1,https://github.com/pocl/pocl/pull/1003,"Changes are based on the OpenCL 3.0 API specification. See
https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_subgroups
CHANGES

Two new queries to clGetDeviceInfo ( CL_DEVICE_MAX_NUM_SUB_GROUPS and CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS ) and the corresponding fields to the cl_device_id struct. These fields get initialized in the devices/common.c pocl_init_default_device_infos() function to the values specified when subgroups are not supported.
Minimal implementation of clGetKernelSubGroupInfo with only the necessary error handling required for OpenCL 3.0 conformance.","Changes are based on the OpenCL 3.0 API specification. See
https://www.khronos.org/registry/OpenCL/specs/3.0-unified/html/OpenCL_API.html#_subgroups
CHANGES

Two new queries to clGetDeviceInfo ( CL_DEVICE_MAX_NUM_SUB_GROUPS and CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS ) and the corresponding fields to the cl_device_id struct. These fields get initialized in the devices/common.c pocl_init_default_device_infos() function to the values specified when subgroups are not supported.
Minimal implementation of clGetKernelSubGroupInfo with only the necessary error handling required for OpenCL 3.0 conformance.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/Michoumichmich,1,https://github.com/pocl/pocl/pull/1004,Fixes #990 to build with LLVM 14,Fixes #990 to build with LLVM 14,True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/1004#issuecomment-976442614,Fixes #990 to build with LLVM 14,Did you test to build this with older LLVMs? How old?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/Michoumichmich,3,https://github.com/pocl/pocl/pull/1004#issuecomment-977709640,Fixes #990 to build with LLVM 14,"Did you test to build this with older LLVMs? How old?

Hello, It's my first time contributing here, I will check on LLVM 13, should I try older versions?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/1004#issuecomment-977712281,Fixes #990 to build with LLVM 14,"Hi - and always glad to see new contributors! In principle yes, you should test at least the latest two LLVMs, but if you wrap your change in the LLVM version check macros (a newer than 13 macro here) with the old one as a fallback it should be safe. I personally currently locally test before pushing PRs with LLVMs down to 6.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/franz,5,https://github.com/pocl/pocl/pull/1004#issuecomment-984423751,Fixes #990 to build with LLVM 14,"fails on buildbots with LLVM 7:
/worker/llvm_70_pthread/source/lib/llvmopencl/OptimizeWorkItemFuncCalls.cc:133:27: error: ‘class llvm::CallInst’ has no member named ‘arg_size’
  133 |         assert(MovedCall->arg_size() == CallInst->arg_size());
      |                           ^~~~~~~~
/worker/llvm_70_pthread/source/lib/llvmopencl/OptimizeWorkItemFuncCalls.cc:133:51: error: ‘class llvm::CallInst’ has no member named ‘arg_size’
  133 |         assert(MovedCall->arg_size() == CallInst->arg_size());
      |                                                   ^~~~~~~~
/worker/llvm_70_pthread/source/lib/llvmopencl/OptimizeWorkItemFuncCalls.cc:136:45: error: ‘class llvm::CallInst’ has no member named ‘arg_size’
  136 |         for (unsigned I = 0; I < MovedCall->arg_size(); ++I) {
      |                                             ^~~~~~~~

LLVM 8 to 13 work fine.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/Michoumichmich,6,https://github.com/pocl/pocl/pull/1004#issuecomment-984430169,Fixes #990 to build with LLVM 14,"Okay, I'll add a pragma for this too.
I have the two spirv examples, example0 and example1 that fails on LLVM 14 with spirv file not found but works on other version, but I don't think that it's related to these modifications.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/Michoumichmich,7,https://github.com/pocl/pocl/pull/1004#issuecomment-984432631,Fixes #990 to build with LLVM 14,Should I use LLVM_OLDER_THAN_... ?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/1004#issuecomment-984433482,Fixes #990 to build with LLVM 14,"Should I use LLVM_OLDER_THAN_... ?

Yep.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/Michoumichmich,9,https://github.com/pocl/pocl/pull/1004#issuecomment-984464837,Fixes #990 to build with LLVM 14,"Should I use LLVM_OLDER_THAN_... ?


That's fixed!",True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/pjaaskel,10,https://github.com/pocl/pocl/pull/1004#issuecomment-984512020,Fixes #990 to build with LLVM 14,Can you add yourself to the end of CREDITS too?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1004,2021-11-20T11:57:02Z,2021-12-02T18:13:09Z,2021-12-02T18:17:22Z,MERGED,True,34,7,4,https://github.com/Michoumichmich,Fixing use of removed APIs,5,[],https://github.com/pocl/pocl/pull/1004,https://github.com/Michoumichmich,11,https://github.com/pocl/pocl/pull/1004#issuecomment-984552647,Fixes #990 to build with LLVM 14,"Can you add yourself to the end of CREDITS too?

Done :)",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/anbe42,1,https://github.com/pocl/pocl/pull/1007,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/franz,2,https://github.com/pocl/pocl/pull/1007#issuecomment-982725573,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.

The relevant code is in lib/kernel/printf.c. The LLVM passes in PoCL related to printf change functions and kernels to pass an on-device printf buffer as ""hidden"" argument.
This bug is (very likely) not an LLVM miscompilation, rather invoking undefined behavior in PoCL code. The implementation of printf was done with the wrong approach (which i did not realize it at the time). The problem is that it's done in C, and passing variadic arguments in C is ABI-dependent (and defined for only a small set of types). E.g. on my x86-64 machine, your branch produces errors for float16, double8 and double16 - all types that exceed 256bits (AVX2 register size). The proper fix would be to rewrite the printf implementation to something different, but i don't have the time ATM to do that.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/anbe42,3,https://github.com/pocl/pocl/pull/1007#issuecomment-983168223,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","E.g. on my x86-64 machine, your branch produces errors for float16, double8 and double16 - all types that exceed 256bits (AVX2 register size).

interesting data point. What about uint8, ulong8 and ulong16?
What cpu do you use? Or rather, which cpu target does your pocl build use?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/franz,4,https://github.com/pocl/pocl/pull/1007#issuecomment-983477441,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","CPU is Ryzen 3500U, LLVM 10. Yesterday i tested with Intel Skylake, same results AFAICT.
uint8 - works ; uint16 + ulong8 + ulong16 = fail. Exact same situation with float+double. Here's the diff:
--- /home/devel/0/pocl_test/tests/kernel/test_printf_expout.txt	2021-12-01 11:47:08.668924380 +0200
+++ /tmp/printf.txt	2021-12-01 11:51:19.706151638 +0200
@@ -168,25 +168,25 @@
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
 uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint16   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 
 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong8   0,0,0,0,0,0,0,0
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0x7fa8abfe545c,0x7fa8abfb6500,0xd827590,0x7fa8abfc6618,0x55dd1003e568
 
 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
 float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 
 double2  10.112,20.222
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double8  0,0,0,0,0,0,0,0
+double16 0,0,0,0,0,0,0,0,0,0,0,6.93482e-310,6.93482e-310,1.11982e-315,6.93482e-310,4.66437e-310",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/anbe42,5,https://github.com/pocl/pocl/pull/1007#issuecomment-983543608,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","The show build log on error commit has been overhauled and moved to the cleanup tests merge request.
But I have a new test for passing vector types by value without variadic functions ;-) It's mostly interesting to look at the disassembly ... So far I only did ucharn (which shows ""interesting"" behavior on 32-bit x86 for uchar8 and !uchar8), I'll look into doing the same for ulong, expecting ""interesting"" results on x86_64, too.
The good thing so far: passing vector types is symmetric between caller and callee, but there is no consistent abi between different vector sizes:

uchar2: unpacked: 2 values in 2 registers (cl, dl)
uchar3: unpacked: 2 values in 2 registers (cl, dl), 1 on the stack (maybe padded to 2 values)
uchar4: unpacked: 2 values in 2 registers (cl, dl), 2 on the stack
uchar8: packed: 8 values in 2 32-bit registers (ecx, edx)
uchar16: unpacked: 2 values in 2 registers (cl, dl), 14 on the stack

Does pocl ""mess"" which this argument passing as well, or is that more the realm of llvm?
000044a0 <g4>:
    44a0:       55                      push   %ebp
    44a1:       89 e5                   mov    %esp,%ebp
    44a3:       53                      push   %ebx
    44a4:       83 e4 f0                and    $0xfffffff0,%esp
    44a7:       83 ec 10                sub    $0x10,%esp
    44aa:       e8 00 00 00 00          call   44af <g4+0xf>
    44af:       5b                      pop    %ebx
    44b0:       81 c3 51 2b 00 00       add    $0x2b51,%ebx
    44b6:       83 ec 08                sub    $0x8,%esp
    44b9:       b9 42 00 00 00          mov    $0x42,%ecx
    44be:       ba 11 00 00 00          mov    $0x11,%edx
    44c3:       6a 40                   push   $0x40
    44c5:       6a 05                   push   $0x5
    44c7:       e8 a4 ff ff ff          call   4470 <f4>
    44cc:       83 c4 10                add    $0x10,%esp
    44cf:       f7 d8                   neg    %eax
    44d1:       8d 65 fc                lea    -0x4(%ebp),%esp
    44d4:       5b                      pop    %ebx
    44d5:       5d                      pop    %ebp
    44d6:       c3                      ret

00004530 <g8>:
    4530:       55                      push   %ebp
    4531:       89 e5                   mov    %esp,%ebp
    4533:       53                      push   %ebx
    4534:       83 e4 f0                and    $0xfffffff0,%esp
    4537:       83 ec 10                sub    $0x10,%esp
    453a:       e8 00 00 00 00          call   453f <g8+0xf>
    453f:       5b                      pop    %ebx
    4540:       81 c3 c1 2a 00 00       add    $0x2ac1,%ebx
    4546:       b9 20 02 10 01          mov    $0x1100220,%ecx
    454b:       ba 42 11 05 40          mov    $0x40051142,%edx
    4550:       e8 8b ff ff ff          call   44e0 <f8>
    4555:       f7 d8                   neg    %eax
    4557:       8d 65 fc                lea    -0x4(%ebp),%esp
    455a:       5b                      pop    %ebx
    455b:       5d                      pop    %ebp
    455c:       c3                      ret",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/franz,6,https://github.com/pocl/pocl/pull/1007#issuecomment-984433039,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","Does pocl ""mess"" which this argument passing as well, or is that more the realm of llvm?

Passing varargs is entirely in the realm of LLVM and the ABI (System V Application Binary Interface, or whatever else is used).",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/pjaaskel,7,https://github.com/pocl/pocl/pull/1007#issuecomment-984527341,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","Fails with LLVM 13 on an Intel CPU here. I'm not sure if this is supposed to pass (yet)? If so, perhaps isolate the XFAILs?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/anbe42,8,https://github.com/pocl/pocl/pull/1007#issuecomment-985130612,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","I've now factored out test_printf_vectors from test_printf.
test_printf should succeed everywhere, while test_printf_vectors exposes bugs.
I've given setting WILL_FAIL a try, is CMAKE_SYSTEM_PROCESSOR suitable for platform detection?
The last commit is primarily for debugging the parameter passing issue. If you approve the other ones, I'd move them to test cleanup-tests branch and we can turn this into a WIP merge request for debugging the variadic parameter passing for printf...",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/franz,9,https://github.com/pocl/pocl/pull/1007#issuecomment-985621927,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","I've given setting WILL_FAIL a try, is CMAKE_SYSTEM_PROCESSOR suitable for platform detection?

AFAIK it should work at least on Linux.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/franz,10,https://github.com/pocl/pocl/pull/1007#issuecomment-986075924,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","OK, this (at commit 6e49a19) now passes the buildbots.
WRT last commit, i'm not sure. Do you want to try to fix the code ? if there is some simple way to do it, you could just push into this PR.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1007,2021-11-22T23:28:36Z,2021-12-06T16:18:42Z,2021-12-07T10:46:50Z,MERGED,True,442,43,8,https://github.com/anbe42,"add printf() tests for all (unsigned, fp) vector types and sizes",5,[],https://github.com/pocl/pocl/pull/1007,https://github.com/anbe42,11,https://github.com/pocl/pocl/pull/1007#issuecomment-986326984,"There are three patches in this series

one for kernel.c to show compile errors if compilation fails (this could be done by other tests, too)
one for run_test to show a diff between the expected and actual output if they don't match (this may not work if the diff binary is not available)
one for test_printf.cl to add more printf() tests for more vector types and sizes

The last patch will probably expose more LLVM/Clang bugs. So far I only had it pass on aarch64 :-(
I've tested llvm-9, llvm-11, llvm-12, llvm-13 (all Debian packages, no local builds).
Unfortunately I have no idea how to reproduce the compilation process with llvm/clang command line tools (instead of library calls as done by pocl) in order to report miscompilation to LLVM. What is the actual code being compiled? What options are being used?.
The fact that printf() is the only variadic function permitted by the OpenCL standard doesn't simplify writing tests for checking parameter passing to variadic functions.
The diffs of the output for some llvm versions on different architectures are:
x86_64 (64-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-19 22:54:34.000000000 +0000
+++ /tmp/cmake_testrun_ROKIj    2021-11-19 22:57:32.367804902 +0000
@@ -174,7 +174,7 @@
 ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
-ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
+ulong16  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 float2   1.012,2.022
 float3   1.013,2.023,3.033
@@ -186,7 +186,7 @@
 double3  10.113,20.223,30.333
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
-double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
+double16 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

 PARAMETER PASSING

@@ -220,7 +220,7 @@
 l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
-l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
+l 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 <80>
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
@@ -234,7 +234,7 @@
 d 31.1,31.2,31.3 32.4,32.5,32.6 .
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+d 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 <80>
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

 x 0x31323334 2.4 0x393a3b3c 4.4 0x42434445 6.4 0x4a4b4c4d 8.4 0x53545556 10.4 0x5b5c5d5e 12.4 0x64656667 14.4 0x6c6d6e6f 16.4 0x75767778 18.4 0x7d7e7f81 20.4 0x86878889 22.4 0x8e8f9192 24.4 0x9798999a 26.4 0x9fa1a2a3 28.4 0xa8a9aaab 30.4 0xb1b2b3b4 32.4 .

All are fine except for ulong16, double16 which seem to be missing, i.e. only 0 is received as a value, or swapped.
x86 (32-bit) llvm-9, llvm-11, llvm-12:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 23:21:47.000000000 +0000
+++ /tmp/cmake_testrun_Y4XAW    2021-11-20 23:23:12.828877144 +0000
@@ -145,24 +145,24 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -190,48 +190,48 @@

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
+i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xf2f3f4f5,0xf6f7f8f9,0x2e 
 i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
 i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
 i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213,0xf6f7f8f90000002e 
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
+f 31.1,31.2,31.3 32.5,32.6,6.44597e-44 
 f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 31.1,31.2,31.3 32.5,32.6,9.87842e+09 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar2, uchar3, uchar4, uchar16 (but not uchar8) and ushort2, ushort3, ushort8, ushort16 (but not ushort4) seem to get passed in ""unpacked"" form on the stack, i.e. each individual vector element gets expanded to the size of an (32-bit) integer (not sure if it gets properly promoted) and placed on the stack.
uint3, ulong3, float3, double3 seem to get passed as only 3 values on the stack while pocl assumes that it can treat them the same way as the corresponding [type]4 vectors. (I.e. pocl consumes 4 values from the stack while there are only 3, reading random stack values behind the parameter space at some point.)
x86 (32-bit) llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-22 20:44:32.000000000 +0000
+++ /tmp/cmake_testrun_X0EY9    2021-11-22 20:47:32.163421350 +0000
@@ -145,95 +145,95 @@
 0x1.4p+3,0x1.15p-141,0x1.52d02cp+78,0x0p+0
 0x1.68p+6,0x1.2p+3,0x1.ccccccp-1,0x1.70a3d8p-4
 0x1p+12,0x1p+0,0x1p-3,0x1p-7
-0xfa,0xfb
-0x1234,0x8765
+0xfa,0
+0x1234,0
 0x12345678,0x87654321
 |a|   b|c   |
 |aa|  bb|cc  |dddddddddd|eeee|
 |0x2349aacc|  0xdeaddeed|0x92820384  |

-uchar2   0xa1,0xa2
-uchar3   0xb1,0xb2,0xb3
-uchar4   0xc1,0xc2,0xc3,0xc4
+uchar2   0xa1,0
+uchar3   0xb1,0,0
+uchar4   0xc1,0,0,0
 uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

-ushort2  0xa1a2,0xa3a4
-ushort3  0xb1b2,0xb3b4,0xb5b6
+ushort2  0xa1a2,0
+ushort3  0xb1b2,0,0xb3b4
 ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0,0x1213,0,0x1415,0,0x1617,0,0x1819,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
 uint4    0xc1c2c3c4,0xc5c6c7c8,0xc9cacbcc,0xcdcecfd1
-uint8    0xe1e2e3e4,0xe5e6e7e8,0xe9eaebec,0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112
-uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465
+uint8    0xf2f3f4f5,0xf6f7f8f9,0xfafbfcfd,0xfeff1112,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da
+uint16   0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
-ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
-ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
+ulong3   0xd2d3d4d5d6d7d8d9,0xa9aaabacadaeafb1,0x1000000dd5fb080
+ulong4   0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112,0x1000000dd5fb080,0xe35d25dae3dd6298
+ulong8   0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364,0x1000000dd5fb080,0xe35d25dae3dd6298
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8

 float2   1.012,2.022
 float3   1.013,2.023,3.033
 float4   1.014,2.024,3.034,4.044
-float8   1.018,2.028,3.038,4.048,5.058,6.068,7.078,8.088
-float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016
+float8   5.058,6.068,7.078,8.088,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21
+float16  5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21

 double2  10.112,20.222
-double3  10.113,20.223,30.333
-double4  10.114,20.224,30.334,40.444
-double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
+double3  30.333,20.222,7.29113e-304
+double4  30.334,40.444,7.29113e-304,-4.40012e+170
+double8  30.338,40.448,50.558,60.668,70.778,80.888,7.29113e-304,-4.40012e+170
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7

 PARAMETER PASSING

-* 0xfa,0xfb 0x21,0xfd .
-* 0x1234,0x8765 0xbe21,0xf00d .
+* 0xfa,0 0xfb,0 !
+* 0x1234,0 0x8765,0 !
 * 0x12345678,0x87654321 0x2468ace0,0xfdb97531 .
-* 0xfa,0xfb 0xfc,0xfd 0xe9,0xd6 0xfe,0xff 0x21,0x2b 0x3a,0x3b 0x4a,0x4b 0x5a,0x5b .
+* 0xfa,0 0xfb,0 0xfc,0 0xfd,0 0xe9,0 0xd6,0 0xfe,0 0xff,0 !

-c 0xa1,0xa2 0x21,0xb4 .
-c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
-c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
+c 0xa1,0 0xa2,0 !
+c 0xc1,0,0 0xc2,0,0 !
+c 0xe1,0,0,0 0xe2,0,0,0 !
 c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x44,0,0,0,0x45,0,0,0,0x46,0,0,0,0x47,0,0,0 0x48,0,0,0,0x49,0,0,0,0x4a,0,0,0,0x4b,0,0,0 !
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

-s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
-s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
+s 0xa1a2,0 0xa3a4,0 !
+s 0xc1c2,0,0xc3c4 0xc5c6,0,0xd7d8 !
 s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0x2728,0,0x292a,0,0x2b2c,0,0x2d2e,0 0x2f31,0,0x3233,0,0x3435,0,0x3637,0 !
+s 0x5f61,0,0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0 0x7172,0,0x7374,0,0x7576,0,0x7778,0,0x797a,0,0x7b7c,0,0x7d7e,0,0x7f81,0 !
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
-i 0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 .
-i 0x11121314,0x15161718,0x191a1b1c,0x1d1e1f21 0x22232425,0x26272829,0x2a2b2c2d,0x2e2f3132 .
-i 0x41424344,0x45464748,0x494a4b4c,0x4d4e4f51,0x51535455,0x35575859,0x5a5b5c5d,0x5e5f6162 0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f,0x81828384 .
-i 0x91929394,0x95969798,0x999a9b9c,0x9d9e9fa1,0xa2a3a4a5,0xa6a7a8a9,0xaaabacad,0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4 0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2,0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728 .
+i 0xedeeeff1,0xf2f3f4f5,0xf6f7f8f9 0xdd5fb080,0x1000000,0xe3dd6298 µ
+i 0x1d1e1f21,0x22232425,0x26272829,0x2a2b2c2d 0x2e2f3132,0x2e,0xf6f7f8f9,0x2e <80>
+i 0x5e5f6162,0x63646566,0x6768696a,0x6b6c6d6e,0x6f717273,0x74757677,0x78797a7b,0x7c7d7e7f 0x81828384,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
+i 0xaeafb1b2,0xb3b4b5b6,0xb7b8b9ba,0xbbbcbdbe,0xbfc1c2c3,0xc4c5c6c7,0xc8c9cacb,0xcccdcecf,0xd1d2d3d4,0xd5d6d7d8,0xd9dadbdc,0xdddedfe1,0xe2e3e4e5,0xe6e7e8e9,0xeaebeced,0xeeeff1f2 0xf3f4f5f6,0xf7f8f9fa,0xfbfcfdfe,0xff111213,0x14151617,0x18191a1b,0x1c1d1e1f,0x21222324,0x25262728,0x2e,0xf6f7f8f9,0x2e,0xdd5fb080,0x1000000,0xe3dd6298,0xe35d25da µ
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

-l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
-l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
-l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
+l 0xb6b7b8b9a9aaabac,0xbebfc1c2b2b3b4b5 0x2ebabbbcbd,0x2ef6f7f8f9 <80>
+l 0xe6e7e8e9d9dadbdc,0xeeeff1f2e2e3e4e5,0xf7f8f9faeaebeced 0x2efbfcfdfe,0x2ef6f7f8f9,0x1000000dd5fb080 µ
+l 0x4748494a3a3b3c3d,0x4f51525343444546,0x58595a5b4b4c4d4e,0x6162636454555657 0x2e5c5d5e5f,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
+l 0x9798999a8a8b8c8d,0x9fa1a2a393949596,0xa8a9aaab9b9c9d9e,0xb1b2b3b4a4a5a6a7,0xb9babbbcacadaeaf,0xc2c3c4c5b5b6b7b8,0xcacbcccdbdbebfc1,0xd3d4d5d6c6c7c8c9 0xdbdcdddececfd1d2,0xe4e5e6e7d7d8d9da,0xecedeeefdfe1e2e3,0xf5f6f7f8e8e9eaeb,0x2ef1f2f3f4,0x2ef6f7f8f9,0x1000000dd5fb080,0xe35d25dae3dd6298 µ
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
 l 0x4142434445464748 0x494a4b4c4d4e4f51 0x5253545556575859 0x5a5b5c5d5e5f6162 0x636465666768696a 0x6b6c6d6e6f717273 0x7475767778797a7b 0x7c7d7e7f81828384 0x85868788898a8b8c 0x8d8e8f9192939495 0x969798999a9b9c9d 0x9e9fa1a2a3a4a5a6 0xa7a8a9aaabacadae 0xafb1b2b3b4b5b6b7 0xb8b9babbbcbdbebf 0xc1c2c3c4c5c6c7c8 0xc9cacbcccdcecfd1 0xd2d3d4d5d6d7d8d9 0xdadbdcdddedfe1e2 0xe3e4e5e6e7e8e9ea 0xebecedeeeff1f2f3 0xf4f5f6f7f8f9fafb 0xfcfdfeff11121314 0x15161718191a1b1c 0x1d1e1f2122232425 0x262728292a2b2c2d 0x2e2f313233343536 0x3738393a3b3c3d3e 0x3f41424344454647 0x48494a4b4c4d4e4f 0x5152535455565758 0x595a5b5c5d5e5f61 .

 f 21.1,21.2 22.3,22.4 .
-f 31.1,31.2,31.3 32.4,32.5,32.6 .
-f 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-f 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
-f 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
+f 32.4,32.5,32.6 -1.00741e+18,2.35099e-38,-8.16767e+21 µ
+f 41.4,42.5,42.6,42.7 42.8,6.44597e-44,32.6,6.44597e-44 <80>
+f 81.08,82.09,82.1,82.11,82.12,82.13,82.14,82.15 82.16,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
+f 1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16,2.17,2.18,2.19,2.2,2.21,2.22,2.23 2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32,6.44597e-44,32.6,6.44597e-44,-1.00741e+18,2.35099e-38,-8.16767e+21,-4.07946e+21 µ
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

-d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
-d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
-d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
+d -9.25597e+61,1.9036e+185 9.81441e-313,9.8159e-313 <80>
+d -9.25597e+61,4.66726e-62,5.32578e-315 9.81444e-313,9.8159e-313,7.29113e-304 µ
+d 5.32723e-315,-9.25597e+61,-2.35344e-185,1.9036e+185 9.81446e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
+d 4.66726e-62,2.39344e-259,-4.16149e+160,-2.10649e-37,-1.10707e-234,1.9036e+185,9.45875e-13,5.11014e-210 -8.67922e+209,-4.31009e+12,-2.35344e-185,3.94265e+234,9.8145e-313,9.8159e-313,7.29113e-304,-4.40012e+170 µ
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .
 d 1.8 2.8 3.8 4.8 5.8 6.8 7.8 8.8 9.8 10.8 11.8 12.8 13.8 14.8 15.8 16.8 17.8 18.8 19.8 20.8 21.8 22.8 23.8 24.8 25.8 26.8 27.8 28.8 29.8 30.8 31.8 32.8 .

There are more differences with llvm-13, looks like some extra values being placed on the stack causing some offsets.
armhf (32-bit) llvm-9, llvm-11, llvm-12, llvm-13:
--- /build/pocl-1.8/tests/kernel/test_printf_expout.txt 2021-11-20 15:32:52.000000000 +0000
+++ /tmp/cmake_testrun_V3ahy    2021-11-20 16:00:25.846927762 +0000
@@ -155,14 +155,14 @@
 uchar2   0xa1,0xa2
 uchar3   0xb1,0xb2,0xb3
 uchar4   0xc1,0xc2,0xc3,0xc4
-uchar8   0xd1,0xd2,0xd3,0xd4,0xd5,0xd6,0xd7,0xd8
-uchar16  0xe1,0xe2,0xe3,0xe4,0xe5,0xe6,0xe7,0xe8,0xe9,0xea,0xeb,0xec,0xed,0xee,0xef,0xf1
+uchar8   0xd1,0,0,0,0xd2,0,0,0
+uchar16  0xe1,0,0,0,0xe2,0,0,0,0xe3,0,0,0,0xe4,0,0,0

 ushort2  0xa1a2,0xa3a4
 ushort3  0xb1b2,0xb3b4,0xb5b6
-ushort4  0xc1c2,0xc3c4,0xc5c6,0xc7c8
-ushort8  0xd1d2,0xd3d4,0xd5d6,0xd7d8,0xd9da,0xdbdc,0xddde,0xdfe1
-ushort16 0xf1f2,0xf3f4,0xf5f6,0xf7f8,0xf9fa,0xfbfc,0xfdfe,0xff11,0x1213,0x1415,0x1617,0x1819,0x1a1b,0x1c1d,0x1e1f,0x2122
+ushort4  0xc1c2,0,0xc3c4,0
+ushort8  0xd1d2,0,0xd3d4,0,0xd5d6,0,0xd7d8,0
+ushort16 0xf1f2,0,0xf3f4,0,0xf5f6,0,0xf7f8,0,0xf9fa,0,0xfbfc,0,0xfdfe,0,0xff11,0

 uint2    0xa1a2a3a4,0xa5a6a7a8
 uint3    0xb1b2b3b4,0xb5b6b7b8,0xb9babbbc
@@ -171,7 +171,7 @@
 uint16   0x21222324,0x25262728,0x292a2b2c,0x2d2e2f31,0x32333435,0x36373839,0x3a3b3c3d,0x3e3f4142,0x43444546,0x4748494a,0x4b4c4d4f,0x51525354,0x55565758,0x595a5b5c,0x5d5e5f61,0x62636465

 ulong2   0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1
-ulong3   0xc1c2c3c4c5c6c7c8,0xc9cacbcccdcecfd1,0xd2d3d4d5d6d7d8d9
+ulong3   0xa1a2a3a42fcbabe0,0xa9aaabacadaeafb1,0x3637383932333435
 ulong4   0xe1e2e3e4e5e6e7e8,0xe9eaebecedeeeff1,0xf2f3f4f5f6f7f8f9,0xfafbfcfdfeff1112
 ulong8   0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142,0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364
 ulong16  0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4,0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8
@@ -183,7 +183,7 @@
 float16  1.01,2.02,3.03,4.04,5.05,6.06,7.07,8.08,9.09,10.01,11.011,12.012,13.013,14.014,15.015,16.016

 double2  10.112,20.222
-double3  10.113,20.223,30.333
+double3  10.112,20.222,9175.04
 double4  10.114,20.224,30.334,40.444
 double8  10.118,20.228,30.338,40.448,50.558,60.668,70.778,80.888
 double16 10.11,20.22,30.33,40.44,50.55,60.66,70.77,80.88,90.99,100.1,110.2,120.3,130.4,140.5,150.6,160.7
@@ -198,15 +198,15 @@
 c 0xa1,0xa2 0x21,0xb4 .
 c 0xc1,0xc2,0x21 0xd4,0xd5,0xd6 .
 c 0xe1,0xe2,0x21,0xe4 0xf5,0xf6,0xf7,0xf8 .
-c 0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18 0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,0x31 .
-c 0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x21,0x4d,0x4e,0x4f,0x51 0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,0x61,0x62 .
+c 0x11,0,0,0,0x12,0,0,0 0x13,0,0,0,0x14,0,0,0 ^U
+c 0x41,0,0,0,0x42,0,0,0,0x43,0,0,0,0x44,0,0,0 0x45,0,0,0,0x46,0,0,0,0x47,0,0,0,0x48,0,0,0 I
 c 0x71 0x72 0x73 0x74 0x75 0x76 0x77 0x78 0x79 0x7a 0x7b 0x7c 0x7d 0x7e 0x7f 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x91 0x92 .

 s 0xa1a2,0xa3a4 0xb521,0xb7b8 .
 s 0xc1c2,0xc3c4,0xc5c6 0xd7d8,0xd921,0xdbdc .
-s 0xe1e2,0xe3e4,0xe5e6,0xe7e8 0xf9fa,0xfbfc,0xfdfe,0xff11 .
-s 0x2122,0x2324,0x2526,0x2728,0x292a,0x2b2c,0x2d2e,0x2f31 0x3233,0x3435,0x3637,0x3821,0x3a3b,0x3c3d,0x3e3f,0x4142 .
-s 0x5152,0x5354,0x5556,0x5758,0x595a,0x5b5c,0x5d5e,0x5f61,0x6263,0x6465,0x6667,0x6869,0x6a6b,0x6c6d,0x6e6f,0x7172 0x7374,0x7576,0x7778,0x797a,0x7b7c,0x7d7e,0x7f81,0x8221,0x8485,0x8687,0x8889,0x8a8b,0x8c8d,0x8e8f,0x9192,0x9394 .
+s 0xe1e2,0,0xe3e4,0 0xe5e6,0,0xe7e8,0 ú
+s 0x2122,0,0x2324,0,0x2526,0,0x2728,0 0x292a,0,0x2b2c,0,0x2d2e,0,0x2f31,0 3
+s 0x5152,0,0x5354,0,0x5556,0,0x5758,0,0x595a,0,0x5b5c,0,0x5d5e,0,0x5f61,0 0x6263,0,0x6465,0,0x6667,0,0x6869,0,0x6a6b,0,0x6c6d,0,0x6e6f,0,0x7172,0 t
 s 0xa1a2 0xa3a4 0xa5a6 0xa7a8 0xa9aa 0xabac 0xadae 0xafb1 0xb2b3 0xb4b5 0xb6b7 0xb8b9 0xbabb 0xbcbd 0xbebf 0xc1c2 0xc3c4 0xc5c6 0xc7c8 0xc9ca 0xcbcc 0xcdce 0xcfd1 0xd2d3 0xd4d5 0xd6d7 0xd8d9 0xdadb 0xdcdd 0xdedf 0xe1e2 0xe3e4 .

 i 0xa1a2a3a4,0xa5a6a7a8 0xb9babbbc,0xbdbebfc1 .
@@ -217,7 +217,7 @@
 i 0x31323334 0x35363738 0x393a3b3c 0x3d3e3f41 0x42434445 0x46474849 0x4a4b4c4d 0x4e4f5152 0x53545556 0x5758595a 0x5b5c5d5e 0x5f616263 0x64656667 0x68696a6b 0x6c6d6e6f 0x71727374 0x75767778 0x797a7b7c 0x7d7e7f81 0x82838485 0x86878889 0x8a8b8c8d 0x8e8f9192 0x93949596 0x9798999a 0x9b9c9d9e 0x9fa1a2a3 0xa4a5a6a7 0xa8a9aaab 0xacadaeaf 0xb1b2b3b4 0xb5b6b7b8 .

 l 0xa1a2a3a4a5a6a7a8,0xa9aaabacadaeafb1 0xb2b3b4b5b6b7b8b9,0xbabbbcbdbebfc1c2 .
-l 0xd1d2d3d4d5d6d7d8,0xd9dadbdcdddedfe1,0xe2e3e4e5e6e7e8e9 0xeaebecedeeeff1f2,0xf3f4f5f6f7f8f9fa,0xfbfcfdfeff111213 .
+l 0x2e2fcbab80,0xa9aaabacadaeafb1,0xb2b3b4b5b6b7b8b9 0x5b5c5d5e0000002e,0x646566675f616263,0x6c6d6e6f68696a6b |
 l 0x2122232425262728,0x292a2b2c2d2e2f31,0x3233343536373839,0x3a3b3c3d3e3f4142 0x434445464748494a,0x4b4c4d4e4f515253,0x5455565758595a5b,0x5c5d5e5f61626364 .
 l 0x7172737475767778,0x797a7b7c7d7e7f81,0x8283848586878889,0x8a8b8c8d8e8f9192,0x939495969798999a,0x9b9c9d9e9fa1a2a3,0xa4a5a6a7a8a9aaab,0xacadaeafb1b2b3b4 0xb5b6b7b8b9babbbc,0xbdbebfc1c2c3c4c5,0xc6c7c8c9cacbcccd,0xcecfd1d2d3d4d5d6,0xd7d8d9dadbdcddde,0xdfe1e2e3e4e5e6e7,0xe8e9eaebecedeeef,0xf1f2f3f4f5f6f7f8 .
 l 0x1112131415161718,0x191a1b1c1d1e1f21,0x2223242526272829,0x2a2b2c2d2e2f3132,0x333435363738393a,0x3b3c3d3e3f414243,0x4445464748494a4b,0x4c4d4e4f51525354,0x55565758595a5b5c,0x5d5e5f6162636465,0x666768696a6b6c6d,0x6e6f717273747576,0x7778797a7b7c7d7e,0x7f81828384858687,0x88898a8b8c8d8e8f,0x9192939495969798 0x999a9b9c9d9e9fa1,0xa2a3a4a5a6a7a8a9,0xaaabacadaeafb1b2,0xb3b4b5b6b7b8b9ba,0xbbbcbdbebfc1c2c3,0xc4c5c6c7c8c9cacb,0xcccdcecfd1d2d3d4,0xd5d6d7d8d9dadbdc,0xdddedfe1e2e3e4e5,0xe6e7e8e9eaebeced,0xeeeff1f2f3f4f5f6,0xf7f8f9fafbfcfdfe,0xff11121314151617,0x18191a1b1c1d1e1f,0x2122232425262728,0x292a2b2c2d2e2f31 .
@@ -231,7 +231,7 @@
 f 1.4 2.4 3.4 4.4 5.4 6.4 7.4 8.4 9.4 10.4 11.4 12.4 13.4 14.4 15.4 16.4 17.4 18.4 19.4 20.4 21.4 22.4 23.4 24.4 25.4 26.4 27.4 28.4 29.4 30.4 31.4 32.4 .

 d 21.1,21.2 22.3,22.4 .
-d 31.1,31.2,31.3 32.4,32.5,32.6 .
+d 9.8008e-313,21.2,22.3 5.4,6.4,7.4 
 d 41.1,41.2,41.3,41.4 42.5,42.6,42.7,42.8 .
 d 81.01,81.02,81.03,81.04,81.05,81.06,81.07,81.08 82.09,82.1,82.11,82.12,82.13,82.14,82.15,82.16 .
 d 1.01,1.02,1.03,1.04,1.05,1.06,1.07,1.08,1.09,1.1,1.11,1.12,1.13,1.14,1.15,1.16 2.17,2.18,2.19,2.2,2.21,2.22,2.23,2.24,2.25,2.26,2.27,2.28,2.29,2.3,2.31,2.32 .

uchar8, uchar16, ushort4, ushort8, ushort16 seem to get passed in ""unpacked"" form on the stack.
ulong3, double3 seem to be missing at all on the stack, instead some older values from earlier printf tests get printed.","@franz: I tried to port the ucharn test to ulong, but didn't observe anything interesting. (On a avx512 capable target the ulongn parameters get passed as xmm0 (2), ymm0, (3, 4), zmm0 (8), zmm0, zmm1 (16)).
But I managed to compile test_ucharn.cl directly with clang-13 (earlier versions don't work or maybe need extra flags). The resulting code is simpler than the one from pocl (due to missing the pocl passes), but the pattern for passing ucharn on a (non-variadic) function call is exactly the same as if compiled from pocl.
clang-13 -c -m32 -O2 -x cl tests/kernel/test_ucharn.cl -o ucharn.o
int f4(uchar4 uc4, int z) __attribute__((noinline));
int g4() __attribute__((noinline));
int g4()
{
uchar4 uc4 = (uchar4)(0x18, 0x29, 0x3a, 0x4b);
return -f4(uc4, 0x12345678);
}

000000b0 <g4>:
  b0:   83 ec 18                sub    $0x18,%esp
  b3:   68 78 56 34 12          push   $0x12345678
  b8:   6a 4b                   push   $0x4b
  ba:   6a 3a                   push   $0x3a
  bc:   6a 29                   push   $0x29
  be:   6a 18                   push   $0x18
  c0:   e8 fc ff ff ff          call   c1 <g4+0x11>
  c5:   83 c4 20                add    $0x20,%esp
  c8:   f7 d8                   neg    %eax
  ca:   83 c4 0c                add    $0xc,%esp
  cd:   c3                      ret

(same behavior for uchar2, uchar3, uchar4, uchar16: vector elements get passed ""unpacked"")
int f8(uchar8 uc8, int z) __attribute__((noinline));
int g8() __attribute__((noinline));
int g8()
{
uchar8 uc8 = (uchar8)(0x18, 0x29, 0x3a, 0x4b, 0x5c, 0x6d, 0x7e, 0x8f);
return -f8(uc8, 0x12345678);
}

00000110 <g8>:
 110:   83 ec 10                sub    $0x10,%esp
 113:   68 78 56 34 12          push   $0x12345678
 118:   68 5c 6d 7e 8f          push   $0x8f7e6d5c
 11d:   68 18 29 3a 4b          push   $0x4b3a2918
 122:   e8 fc ff ff ff          call   123 <g8+0x13>
 127:   83 c4 10                add    $0x10,%esp
 12a:   f7 d8                   neg    %eax
 12c:   83 c4 0c                add    $0xc,%esp
 12f:   c3                      ret

(only for uchar8: vector elements get passed ""packed"")
I'm exactly sure what ABI is implemented here, since all arguments get passed on the stack (pocl targeting i386 had 2 in registers), but I think that is at least ""interesting"" behavior by llvm. I'll check what happens on 32-bit arm, which seemd to behave similarily.
Right now I'm thinking there are at least 2 bugs affecting printf in pocl:

unpacked passing of some vector types on some platforms, which is in llvm's realm
something corrupting large vector types (the ones exceeding the largest vector register size in the target), which is on the pocl side",True,{}
pocl/pocl,https://github.com/pocl/pocl,1008,2021-11-23T16:28:08Z,2021-12-02T12:59:04Z,2021-12-02T12:59:04Z,MERGED,True,16,8,1,https://github.com/Oblomov,CUDA cleanup,2,[],https://github.com/pocl/pocl/pull/1008,https://github.com/Oblomov,1,https://github.com/pocl/pocl/pull/1008,"Two trivial fixes for the CUDA device.
cc @jrprice","Two trivial fixes for the CUDA device.
cc @jrprice",True,{}
pocl/pocl,https://github.com/pocl/pocl,1008,2021-11-23T16:28:08Z,2021-12-02T12:59:04Z,2021-12-02T12:59:04Z,MERGED,True,16,8,1,https://github.com/Oblomov,CUDA cleanup,2,[],https://github.com/pocl/pocl/pull/1008,https://github.com/franz,2,https://github.com/pocl/pocl/pull/1008#issuecomment-982539976,"Two trivial fixes for the CUDA device.
cc @jrprice","LGTM, passes cuda tests",True,{}
pocl/pocl,https://github.com/pocl/pocl,1010,2021-11-26T14:19:14Z,2021-12-06T18:33:25Z,2021-12-07T09:47:21Z,MERGED,True,163,133,13,https://github.com/anbe42,Pthread fixes,13,[],https://github.com/pocl/pocl/pull/1010,https://github.com/anbe42,1,https://github.com/pocl/pocl/pull/1010,"some fixes for the pthread device, mainly:

pthread_scheduler_init(): abort() if pthread_create() fails (also if it fails with EAGAIN)

recovery would be hard: terminate the partially created thread pool and return an error code


if any worker thread experienced an allocation failure during initialization, don't assert, but report this back to the scheduler: uninitialize the scheduler (shut down the worker thread pool) in this case and return an error code from  pthread_scheduler_init()

this may not totally solve the original issue, but at least in case of only the allocations failing the application would have the possibility to handle the unavailable device
there are more pthread_create() and other pthread_*() calls missing error handling in the pocl codebase, these are not covered here
fixes: #1009","some fixes for the pthread device, mainly:

pthread_scheduler_init(): abort() if pthread_create() fails (also if it fails with EAGAIN)

recovery would be hard: terminate the partially created thread pool and return an error code


if any worker thread experienced an allocation failure during initialization, don't assert, but report this back to the scheduler: uninitialize the scheduler (shut down the worker thread pool) in this case and return an error code from  pthread_scheduler_init()

this may not totally solve the original issue, but at least in case of only the allocations failing the application would have the possibility to handle the unavailable device
there are more pthread_create() and other pthread_*() calls missing error handling in the pocl codebase, these are not covered here
fixes: #1009",True,{}
pocl/pocl,https://github.com/pocl/pocl,1010,2021-11-26T14:19:14Z,2021-12-06T18:33:25Z,2021-12-07T09:47:21Z,MERGED,True,163,133,13,https://github.com/anbe42,Pthread fixes,13,[],https://github.com/pocl/pocl/pull/1010,https://github.com/anbe42,2,https://github.com/pocl/pocl/pull/1010#issuecomment-982650262,"some fixes for the pthread device, mainly:

pthread_scheduler_init(): abort() if pthread_create() fails (also if it fails with EAGAIN)

recovery would be hard: terminate the partially created thread pool and return an error code


if any worker thread experienced an allocation failure during initialization, don't assert, but report this back to the scheduler: uninitialize the scheduler (shut down the worker thread pool) in this case and return an error code from  pthread_scheduler_init()

this may not totally solve the original issue, but at least in case of only the allocations failing the application would have the possibility to handle the unavailable device
there are more pthread_create() and other pthread_*() calls missing error handling in the pocl codebase, these are not covered here
fixes: #1009","BTW, are you aware that PoCL already has a CMake variable PRINTF_BUFFER_SIZE that can be used to set the printf buffer size to a smaller value (default is 16MB per CPU thread). Perhaps it would make sense to change the 16MB to a smaller default on 32bit OS.
I'll try that in addition to the other fixes on 32-bit arm. 4 MB should hopefully still be ok unless there are extremely chatty applications ...",True,{}
pocl/pocl,https://github.com/pocl/pocl,1010,2021-11-26T14:19:14Z,2021-12-06T18:33:25Z,2021-12-07T09:47:21Z,MERGED,True,163,133,13,https://github.com/anbe42,Pthread fixes,13,[],https://github.com/pocl/pocl/pull/1010,https://github.com/anbe42,3,https://github.com/pocl/pocl/pull/1010#issuecomment-983004677,"some fixes for the pthread device, mainly:

pthread_scheduler_init(): abort() if pthread_create() fails (also if it fails with EAGAIN)

recovery would be hard: terminate the partially created thread pool and return an error code


if any worker thread experienced an allocation failure during initialization, don't assert, but report this back to the scheduler: uninitialize the scheduler (shut down the worker thread pool) in this case and return an error code from  pthread_scheduler_init()

this may not totally solve the original issue, but at least in case of only the allocations failing the application would have the possibility to handle the unavailable device
there are more pthread_create() and other pthread_*() calls missing error handling in the pocl codebase, these are not covered here
fixes: #1009","I just noticed, there is a PTHREAD_CHECK macro. Is there a reason for using that only by the hsa device?
Otherwise I could convert all remaining pthread_*() calls to use it as well.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1010,2021-11-26T14:19:14Z,2021-12-06T18:33:25Z,2021-12-07T09:47:21Z,MERGED,True,163,133,13,https://github.com/anbe42,Pthread fixes,13,[],https://github.com/pocl/pocl/pull/1010,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/1010#issuecomment-983366805,"some fixes for the pthread device, mainly:

pthread_scheduler_init(): abort() if pthread_create() fails (also if it fails with EAGAIN)

recovery would be hard: terminate the partially created thread pool and return an error code


if any worker thread experienced an allocation failure during initialization, don't assert, but report this back to the scheduler: uninitialize the scheduler (shut down the worker thread pool) in this case and return an error code from  pthread_scheduler_init()

this may not totally solve the original issue, but at least in case of only the allocations failing the application would have the possibility to handle the unavailable device
there are more pthread_create() and other pthread_*() calls missing error handling in the pocl codebase, these are not covered here
fixes: #1009","LGTM in general.
BTW, are you aware that PoCL already has a CMake variable PRINTF_BUFFER_SIZE that can be used to set the printf buffer size to a smaller value (default is 16MB per CPU thread). Perhaps it would make sense to change the 16MB to a smaller default on 32bit OS.

Shouldn't that variable be defined per device driver for devices where it could be configured?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1010,2021-11-26T14:19:14Z,2021-12-06T18:33:25Z,2021-12-07T09:47:21Z,MERGED,True,163,133,13,https://github.com/anbe42,Pthread fixes,13,[],https://github.com/pocl/pocl/pull/1010,https://github.com/franz,5,https://github.com/pocl/pocl/pull/1010#issuecomment-983539598,"some fixes for the pthread device, mainly:

pthread_scheduler_init(): abort() if pthread_create() fails (also if it fails with EAGAIN)

recovery would be hard: terminate the partially created thread pool and return an error code


if any worker thread experienced an allocation failure during initialization, don't assert, but report this back to the scheduler: uninitialize the scheduler (shut down the worker thread pool) in this case and return an error code from  pthread_scheduler_init()

this may not totally solve the original issue, but at least in case of only the allocations failing the application would have the possibility to handle the unavailable device
there are more pthread_create() and other pthread_*() calls missing error handling in the pocl codebase, these are not covered here
fixes: #1009","@pjaaskel yes good point
@anbe42 yes PTHREAD_CHECK should be used everywhere. There are also a few pthread-related POCL_XYZ macros as abstractions in pocl_cl.h,  these should also use PTHREAD_CHECK instead of asserts. It's quite inconsistent now.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1010,2021-11-26T14:19:14Z,2021-12-06T18:33:25Z,2021-12-07T09:47:21Z,MERGED,True,163,133,13,https://github.com/anbe42,Pthread fixes,13,[],https://github.com/pocl/pocl/pull/1010,https://github.com/franz,6,https://github.com/pocl/pocl/pull/1010#issuecomment-984485569,"some fixes for the pthread device, mainly:

pthread_scheduler_init(): abort() if pthread_create() fails (also if it fails with EAGAIN)

recovery would be hard: terminate the partially created thread pool and return an error code


if any worker thread experienced an allocation failure during initialization, don't assert, but report this back to the scheduler: uninitialize the scheduler (shut down the worker thread pool) in this case and return an error code from  pthread_scheduler_init()

this may not totally solve the original issue, but at least in case of only the allocations failing the application would have the possibility to handle the unavailable device
there are more pthread_create() and other pthread_*() calls missing error handling in the pocl codebase, these are not covered here
fixes: #1009","Thanks. Quick check (only LLVM 12) on buildbots: 1) TCE fails to build on syntax errors; 2) ASAN-enabled PoCL (with CPU driver) builds but fails some tests. Other build configs pass.
TCE:
In file included from /worker/llvm_120_tcemc/source/lib/CL/devices/common.h:28,
                 from /worker/llvm_120_tcemc/source/lib/CL/devices/tce/tce_common.cc:26:
/worker/llvm_120_tcemc/source/lib/CL/devices/tce/tce_common.cc: In function 'int pocl_tce_init_queue(cl_device_id, cl_command_queue)':
/worker/llvm_120_tcemc/source/lib/CL/./pocl_cl.h:123:3: error: expected primary-expression before 'do'
   do                                                                          \
   ^~
/worker/llvm_120_tcemc/source/lib/CL/./pocl_cl.h:186:27: note: in expansion of macro 'PTHREAD_CHECK'
 #define POCL_INIT_COND(c) PTHREAD_CHECK (pthread_cond_init (&c, NULL))
                           ^~~~~~~~~~~~~
/worker/llvm_120_tcemc/source/lib/CL/devices/tce/tce_common.cc:1025:7: note: in expansion of macro 'POCL_INIT_COND'
   if (POCL_INIT_COND(dd->cq_cond))
       ^~~~~~~~~~~~~~
/worker/llvm_120_tcemc/source/lib/CL/devices/tce/tce_common.cc:1025:7: error: expected ')' before 'do'
   if (POCL_INIT_COND(dd->cq_cond))
      ~^
       )
In file included from /worker/llvm_120_tcemc/source/lib/CL/devices/common.h:28,
                 from /worker/llvm_120_tcemc/source/lib/CL/devices/tce/tce_common.cc:26:
/worker/llvm_120_tcemc/source/lib/CL/devices/tce/tce_common.cc: In function 'void pocl_tce_notify_cmdq_finished(cl_command_queue)':
/worker/llvm_120_tcemc/source/lib/CL/./pocl_cl.h:123:3: error: expected primary-expression before 'do'
   do                                                                          \
   ^~
/worker/llvm_120_tcemc/source/lib/CL/./pocl_cl.h:189:32: note: in expansion of macro 'PTHREAD_CHECK'
 #define POCL_BROADCAST_COND(c) PTHREAD_CHECK (pthread_cond_broadcast (&c))
                                ^~~~~~~~~~~~~
/worker/llvm_120_tcemc/source/lib/CL/devices/tce/tce_common.cc:1087:11: note: in expansion of macro 'POCL_BROADCAST_COND'
   int r = POCL_BROADCAST_COND(dd->cq_cond);
           ^~~~~~~~~~~~~~~~~~~
/worker/llvm_120_tcemc/source/lib/CL/devices/tce/tce_common.cc: In function 'void pocl_tce_join(cl_device_id, cl_command_queue)':
/worker/llvm_120_tcemc/source/lib/CL/./pocl_cl.h:123:3: error: expected primary-expression before 'do'
   do                                                                          \
   ^~
/worker/llvm_120_tcemc/source/lib/CL/./pocl_cl.h:190:30: note: in expansion of macro 'PTHREAD_CHECK'
 #define POCL_WAIT_COND(c, m) PTHREAD_CHECK (pthread_cond_wait (&c, &m))
                              ^~~~~~~~~~~~~
/worker/llvm_120_tcemc/source/lib/CL/devices/tce/tce_common.cc:1100:15: note: in expansion of macro 'POCL_WAIT_COND'
       int r = POCL_WAIT_COND(dd->cq_cond, cq->pocl_lock);
               ^~~~~~~~~~~~~~

ASAN build (cmake -DENABLE_ASAN=1  -DENABLE_ICD=0):
	 92 - runtime/clGetDeviceInfo (Failed)
	 97 - runtime/test_kernel_cache_includes (Failed)
	100 - runtime/test_link_error (Failed)
	102 - runtime/test_fill-buffer (Failed)
	104 - runtime/clCreateKernel (Failed)
	107 - runtime/clGetSupportedImageFormats (Failed)
	116 - runtime/clSetMemObjectDestructorCallback (Failed)

tests fail with ""  STDERR:   Unknown error -1"".",True,{}
pocl/pocl,https://github.com/pocl/pocl,1010,2021-11-26T14:19:14Z,2021-12-06T18:33:25Z,2021-12-07T09:47:21Z,MERGED,True,163,133,13,https://github.com/anbe42,Pthread fixes,13,[],https://github.com/pocl/pocl/pull/1010,https://github.com/anbe42,7,https://github.com/pocl/pocl/pull/1010#issuecomment-985749297,"some fixes for the pthread device, mainly:

pthread_scheduler_init(): abort() if pthread_create() fails (also if it fails with EAGAIN)

recovery would be hard: terminate the partially created thread pool and return an error code


if any worker thread experienced an allocation failure during initialization, don't assert, but report this back to the scheduler: uninitialize the scheduler (shut down the worker thread pool) in this case and return an error code from  pthread_scheduler_init()

this may not totally solve the original issue, but at least in case of only the allocations failing the application would have the possibility to handle the unavailable device
there are more pthread_create() and other pthread_*() calls missing error handling in the pocl codebase, these are not covered here
fixes: #1009","Thanks. Quick check (only LLVM 12) on buildbots: 1) TCE fails to build on syntax errors; 2) ASAN-enabled PoCL (with CPU driver) builds but fails some tests. Other build configs pass.


/worker/llvm_120_tcemc/source/lib/CL/./pocl_cl.h:123:3: error: expected primary-expression before 'do'

TCE actually checked some return values ;-) that didn't work any longer after a block was added around the function call in the macro ...

ASAN build (cmake -DENABLE_ASAN=1 -DENABLE_ICD=0):
...
tests fail with "" STDERR: Unknown error -1"".

That was another occurrence of the barrier returning PTHREAD_BARRIER_SERIAL_THREAD ...
Both issues should be fixed, and vulkan as well ;-)",True,{}
pocl/pocl,https://github.com/pocl/pocl,1010,2021-11-26T14:19:14Z,2021-12-06T18:33:25Z,2021-12-07T09:47:21Z,MERGED,True,163,133,13,https://github.com/anbe42,Pthread fixes,13,[],https://github.com/pocl/pocl/pull/1010,https://github.com/franz,8,https://github.com/pocl/pocl/pull/1010#issuecomment-986075112,"some fixes for the pthread device, mainly:

pthread_scheduler_init(): abort() if pthread_create() fails (also if it fails with EAGAIN)

recovery would be hard: terminate the partially created thread pool and return an error code


if any worker thread experienced an allocation failure during initialization, don't assert, but report this back to the scheduler: uninitialize the scheduler (shut down the worker thread pool) in this case and return an error code from  pthread_scheduler_init()

this may not totally solve the original issue, but at least in case of only the allocations failing the application would have the possibility to handle the unavailable device
there are more pthread_create() and other pthread_*() calls missing error handling in the pocl codebase, these are not covered here
fixes: #1009","TCE still fails to build:
/worker/llvm_130_tcemc/source/lib/CL/devices/tce/tce_common.cc:1026:7: note: in expansion of macro ‘POCL_INIT_COND’
 1026 |   if (POCL_INIT_COND(dd->cq_cond))
      |       ^~~~~~~~~~~~~~

i'm guessing  it doesn't like the macro expanding to if (do {} while ()). Removing the if makes TCE build pass.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1012,2021-11-30T13:55:12Z,2021-12-08T14:52:57Z,2021-12-08T23:55:00Z,MERGED,True,198,132,29,https://github.com/anbe42,enabling VISIBILITY_HIDDEN by default,15,[],https://github.com/pocl/pocl/pull/1012,https://github.com/anbe42,1,https://github.com/pocl/pocl/pull/1012,"Here are a few more fixes needed when enabling VISIBILITY_HIDDEN. I also tested building the cuda and hsa devices in this configuration, but I can't build the tce device. If there are still missing symbols in tce, please send me nm -D libpocl-devices-tce.so and I should be able to figure out what needs to be exported as well.
With these fixes in place, I think we could enable VISIBILITY_HIDDEN by default. If you don't want to do this, just leave out that commit.
Since this is going to export more symbols from the basic device, are these routines that should be moved to the common code?","Here are a few more fixes needed when enabling VISIBILITY_HIDDEN. I also tested building the cuda and hsa devices in this configuration, but I can't build the tce device. If there are still missing symbols in tce, please send me nm -D libpocl-devices-tce.so and I should be able to figure out what needs to be exported as well.
With these fixes in place, I think we could enable VISIBILITY_HIDDEN by default. If you don't want to do this, just leave out that commit.
Since this is going to export more symbols from the basic device, are these routines that should be moved to the common code?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1012,2021-11-30T13:55:12Z,2021-12-08T14:52:57Z,2021-12-08T23:55:00Z,MERGED,True,198,132,29,https://github.com/anbe42,enabling VISIBILITY_HIDDEN by default,15,[],https://github.com/pocl/pocl/pull/1012,https://github.com/franz,2,https://github.com/pocl/pocl/pull/1012#issuecomment-984622504,"Here are a few more fixes needed when enabling VISIBILITY_HIDDEN. I also tested building the cuda and hsa devices in this configuration, but I can't build the tce device. If there are still missing symbols in tce, please send me nm -D libpocl-devices-tce.so and I should be able to figure out what needs to be exported as well.
With these fixes in place, I think we could enable VISIBILITY_HIDDEN by default. If you don't want to do this, just leave out that commit.
Since this is going to export more symbols from the basic device, are these routines that should be moved to the common code?","indeed there are still missing symbols in TCE:
  /worker/llvm_120_tcemc/build/tests/regression/test_early_return: symbol
  lookup error:
  /worker/llvm_120_tcemc/build/lib/CL/devices/tce//libpocl-devices-ttasim.so:
  undefined symbol: pocl_SHA1_Init

I've put the nm -D output here.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1012,2021-11-30T13:55:12Z,2021-12-08T14:52:57Z,2021-12-08T23:55:00Z,MERGED,True,198,132,29,https://github.com/anbe42,enabling VISIBILITY_HIDDEN by default,15,[],https://github.com/pocl/pocl/pull/1012,https://github.com/anbe42,3,https://github.com/pocl/pocl/pull/1012#issuecomment-985433366,"Here are a few more fixes needed when enabling VISIBILITY_HIDDEN. I also tested building the cuda and hsa devices in this configuration, but I can't build the tce device. If there are still missing symbols in tce, please send me nm -D libpocl-devices-tce.so and I should be able to figure out what needs to be exported as well.
With these fixes in place, I think we could enable VISIBILITY_HIDDEN by default. If you don't want to do this, just leave out that commit.
Since this is going to export more symbols from the basic device, are these routines that should be moved to the common code?","@franz: I've tried to export all symbols needed by tce and added the pocl_ prefix to exported symbols where was missing.
Do you need more symbols exported for the vulkan and proxy devices?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1012,2021-11-30T13:55:12Z,2021-12-08T14:52:57Z,2021-12-08T23:55:00Z,MERGED,True,198,132,29,https://github.com/anbe42,enabling VISIBILITY_HIDDEN by default,15,[],https://github.com/pocl/pocl/pull/1012,https://github.com/franz,4,https://github.com/pocl/pocl/pull/1012#issuecomment-986046878,"Here are a few more fixes needed when enabling VISIBILITY_HIDDEN. I also tested building the cuda and hsa devices in this configuration, but I can't build the tce device. If there are still missing symbols in tce, please send me nm -D libpocl-devices-tce.so and I should be able to figure out what needs to be exported as well.
With these fixes in place, I think we could enable VISIBILITY_HIDDEN by default. If you don't want to do this, just leave out that commit.
Since this is going to export more symbols from the basic device, are these routines that should be moved to the common code?","TCE still missing one:
  /worker/llvm_120_tcemc/build/tests/tce/ttasim/ttasim_host: symbol lookup
  error:
  /worker/llvm_120_tcemc/build/lib/CL/devices/tce//libpocl-devices-ttasim.so:
  undefined symbol: byteswap_uint32_t

Proxy device needs the visibility option force-disabled. This is necessary because it relies on POcl* symbols being visible in libpocl. Either something like
if(ENABLE_PROXY_DEVICE)
set(VISIBILITY_HIDDEN OFF CACHE BOOL ""Proxy driver can't work with -fvisibility=hidden"" FORCE)
else()...

... or return an error if both options are enabled.
WRT Vulkan: if you rebase this PR on current master, i can check. It does use alloc_buffer_from_region and init_mem_region  from bufalloc.h.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1012,2021-11-30T13:55:12Z,2021-12-08T14:52:57Z,2021-12-08T23:55:00Z,MERGED,True,198,132,29,https://github.com/anbe42,enabling VISIBILITY_HIDDEN by default,15,[],https://github.com/pocl/pocl/pull/1012,https://github.com/anbe42,5,https://github.com/pocl/pocl/pull/1012#issuecomment-986093600,"Here are a few more fixes needed when enabling VISIBILITY_HIDDEN. I also tested building the cuda and hsa devices in this configuration, but I can't build the tce device. If there are still missing symbols in tce, please send me nm -D libpocl-devices-tce.so and I should be able to figure out what needs to be exported as well.
With these fixes in place, I think we could enable VISIBILITY_HIDDEN by default. If you don't want to do this, just leave out that commit.
Since this is going to export more symbols from the basic device, are these routines that should be moved to the common code?","@franz: rebased, renamed/exported one more symbol, fixed the symbol names used by the vulkan driver
still thinking how to handle the proxy driver ...",True,{}
pocl/pocl,https://github.com/pocl/pocl,1012,2021-11-30T13:55:12Z,2021-12-08T14:52:57Z,2021-12-08T23:55:00Z,MERGED,True,198,132,29,https://github.com/anbe42,enabling VISIBILITY_HIDDEN by default,15,[],https://github.com/pocl/pocl/pull/1012,https://github.com/anbe42,6,https://github.com/pocl/pocl/pull/1012#issuecomment-987392342,"Here are a few more fixes needed when enabling VISIBILITY_HIDDEN. I also tested building the cuda and hsa devices in this configuration, but I can't build the tce device. If there are still missing symbols in tce, please send me nm -D libpocl-devices-tce.so and I should be able to figure out what needs to be exported as well.
With these fixes in place, I think we could enable VISIBILITY_HIDDEN by default. If you don't want to do this, just leave out that commit.
Since this is going to export more symbols from the basic device, are these routines that should be moved to the common code?","rebased, handled the proxy device (but that fails to build due to unrelated reasons) and renamed a few exported pocl_basic_*() symbols to pocl_driver_*() and relocated them to common_driver.c",True,{}
pocl/pocl,https://github.com/pocl/pocl,1012,2021-11-30T13:55:12Z,2021-12-08T14:52:57Z,2021-12-08T23:55:00Z,MERGED,True,198,132,29,https://github.com/anbe42,enabling VISIBILITY_HIDDEN by default,15,[],https://github.com/pocl/pocl/pull/1012,https://github.com/pjaaskel,7,https://github.com/pocl/pocl/pull/1012#issuecomment-987826733,"Here are a few more fixes needed when enabling VISIBILITY_HIDDEN. I also tested building the cuda and hsa devices in this configuration, but I can't build the tce device. If there are still missing symbols in tce, please send me nm -D libpocl-devices-tce.so and I should be able to figure out what needs to be exported as well.
With these fixes in place, I think we could enable VISIBILITY_HIDDEN by default. If you don't want to do this, just leave out that commit.
Since this is going to export more symbols from the basic device, are these routines that should be moved to the common code?","Vulkan driver fails to build:
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c:501:3: error: implicit declaration of function ‘init_init_mem_region’; did you mean ‘pocl_init_mem_region’? [-Werror=implicit-function-declaration]
   init_init_mem_region (&d->kernarg_region, 0, d->kernarg_size);
   ^~~~~~~~~~~~~~~~~~~~
   pocl_init_mem_region
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c: In function ‘pocl_vulkan_setup_kernel_arguments’:
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c:2239:25: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]
       shader_info.pCode = program->binaries[dev_i];
                         ^
cc1: some warnings being treated as errors",True,{}
pocl/pocl,https://github.com/pocl/pocl,1012,2021-11-30T13:55:12Z,2021-12-08T14:52:57Z,2021-12-08T23:55:00Z,MERGED,True,198,132,29,https://github.com/anbe42,enabling VISIBILITY_HIDDEN by default,15,[],https://github.com/pocl/pocl/pull/1012,https://github.com/anbe42,8,https://github.com/pocl/pocl/pull/1012#issuecomment-988285523,"Here are a few more fixes needed when enabling VISIBILITY_HIDDEN. I also tested building the cuda and hsa devices in this configuration, but I can't build the tce device. If there are still missing symbols in tce, please send me nm -D libpocl-devices-tce.so and I should be able to figure out what needs to be exported as well.
With these fixes in place, I think we could enable VISIBILITY_HIDDEN by default. If you don't want to do this, just leave out that commit.
Since this is going to export more symbols from the basic device, are these routines that should be moved to the common code?","Oops, misrenamed that one symbol. And vulkan was not yet enabled while build-testing the branch. Fixed.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,1,https://github.com/pocl/pocl/pull/1013,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,2,https://github.com/pocl/pocl/pull/1013#issuecomment-983511176,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Other cleanups are fine, but I'd rather not pull huge white space cleanups as they make 'git blame' less handy. So perhaps revert the white space cleanups to the tests, if possible?

rebased, omitting the CRLF elimination",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,3,https://github.com/pocl/pocl/pull/1013#issuecomment-984045373,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?",just ran the whole series through the formatter,True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/franz,4,https://github.com/pocl/pocl/pull/1013#issuecomment-984523560,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","OK, minor issues found:


regression/test_llvm_segfault_issue_889 segfaults on ""distro"" build (cmake -DKERNELLIB_HOST_CPU_VARIANTS=distro -DPOCL_ICD_ABSOLUTE_PATH=OFF -DENABLE_POCL_BUILDING=OFF -DENABLE_LLVM=1  -DENABLE_ICD=1 -DENABLE_HOST_CPU_DEVICES=1 )


putting internal label on all tests causes 3  tests to fail with the ASAN build (runtime/test_buffer_migration,  runtime/test_buffer_ping_pong and runtime/test_deviceside_enqueue) because they leak some memory.


Additionally the dlopen tests should only be enabled when ENABLE_LOADABLE_DRIVERS is ON (but i already have a commit in the vulkan PR that fixes this).",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/1013#issuecomment-984525693,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?

Not needed.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,6,https://github.com/pocl/pocl/pull/1013#issuecomment-985511176,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","@franz:

1. `regression/test_llvm_segfault_issue_889` segfaults on ""distro"" build


I assume that happened in a build targeting your AMD CPU? With which llvm versions? Does it pass with llvm-13?
Unfortunately there isn't a test property MAY_FAIL ... or FLAKY ...

2. putting internal label on all tests causes 3  tests to fail with the ASAN build (`runtime/test_buffer_migration`,  `runtime/test_buffer_ping_pong` and `runtime/test_deviceside_enqueue`) because they leak some memory.


I don't think these are regressions ... especially since I haven't touched the last one.

Additionally the dlopen tests should only be enabled when ENABLE_LOADABLE_DRIVERS is ON (but i already have a commit in the vulkan PR that fixes this).

Should the first dlopen test be enabled on ENABLE_ICD, regardless of the  ENABLE_LOADABLE_DRIVERS setting?
And the outer condition should probably be if (UNIX AND HAVE_DLFCN_H)",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/franz,7,https://github.com/pocl/pocl/pull/1013#issuecomment-985737769,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Unfortunately there isn't a test property MAY_FAIL ...

I'd rather avoid flaky tests, they waste time...
That said, this seems to fail (consistently) on AMD x86-64 with LLVM < 13, works on AMD with LLVM 13 and works on Intel (tested only LLVM 11). The AMD LLVM backend for whatever reason is very different from Intel LLVM backend, and i've also seen issues in opposite direction (crash on Intel, work on AMD).
Since the problem has been fixed in LLVM 13 ... how about we enable the test only for LLVM 13 and newer.

I don't think these are regressions

You're right, my bad.

Should the first dlopen test be enabled on ENABLE_ICD, regardless of the ENABLE_LOADABLE_DRIVERS setting?
And the outer condition should probably be if (UNIX AND HAVE_DLFCN_H)

yes, good points.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,8,https://github.com/pocl/pocl/pull/1013#issuecomment-986943216,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Since the problem has been fixed in LLVM 13 ... how about we enable the test only for LLVM 13 and newer.

Can we use cmake test property DISABLED (requires cmake 3.9)?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/pjaaskel,9,https://github.com/pocl/pocl/pull/1013#issuecomment-987661573,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Yep or just do not add the test if older than LLVM. Check examples/conformance/CMakeLists.txt where there's (now obsolete, since we do not support so old LLVMs) check for older than 5.0.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,10,https://github.com/pocl/pocl/pull/1013#issuecomment-988295186,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","rebased and added some dlopen test fixes for builds without ENABLE_ICD
marked llvm segfault test as WILL_FAIL where reproducible, as DISABLED where flaky
I'll happily extend the blacklist if more bad combinations show up",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/pjaaskel,11,https://github.com/pocl/pocl/pull/1013#issuecomment-988790917,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","The LLVM link test fails here after pulling this in. My guess is that it doesn't propagate the correct C++ header switch to Clang (I use system's headers, not libstdc++), ending up with:
--   Using -march=
-- LLVM link test output: Change Dir: /home/visit0r/src/pocl/test-pr-cmake-llvm-13-build/CMakeFiles/CMakeTmp

Run Build Command:""/usr/bin/make"" ""cmTC_7b9d8/fast""
/usr/bin/make -f CMakeFiles/cmTC_7b9d8.dir/build.make CMakeFiles/cmTC_7b9d8.dir/build
make[1]: Entering directory '/mnt/olddisk2/visit0r/src/pocl/test-pr-cmake-llvm-13-build/CMakeFiles/CMakeTmp'
Building CXX object CMakeFiles/cmTC_7b9d8.dir/llvm_link_test_bpAzp.cc.o
/usr/bin/g++  -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS  -g -O3 -Wall -Wextra -Wno-long-long  -fPIE   -g -O3 -Wall -Wextra -Wno-long-long -I/usr/lib/llvm-13/include -std=c++14 -fno-exceptions -std=gnu++11 -o CMakeFiles/cmTC_7b9d8.dir/llvm_link_test_bpAzp.cc.o -c /home/visit0r/src/pocl/test-pr-cmake-llvm-13-build/llvm_link_test_bpAzp.cc
In file included from /usr/lib/llvm-13/include/llvm/ADT/Hashing.h:49:0,
                 from /usr/lib/llvm-13/include/llvm/ADT/Optional.h:18,
                 from /usr/lib/llvm-13/include/llvm/ADT/STLExtras.h:19,
                 from /usr/lib/llvm-13/include/llvm/ADT/StringRef.h:12,
                 from /usr/lib/llvm-13/include/llvm/IR/DiagnosticHandler.h:15,
                 from /usr/lib/llvm-13/include/llvm/IR/LLVMContext.h:18,
                 from /home/visit0r/src/pocl/test-pr-cmake-llvm-13-build/llvm_link_test_bpAzp.cc:3:
/usr/lib/llvm-13/include/llvm/Support/SwapByteOrder.h:152:13: error: ‘enable_if_t’ in namespace ‘std’ does not name a template type
 inline std::enable_if_t<std::is_enum<T>::value, T> getSwappedBytes(T C) {
...",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,12,https://github.com/pocl/pocl/pull/1013#issuecomment-988886458,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","The LLVM link test fails here after pulling this in.

cmake policy issue. Reproducible by simply bumping cmake_minimum_required to 3.9 in master. Weird cmake error: disappears if rerunning the cmake command with the partial CMakeCache.txt from previous failed run available.
For now I'm downgrading the policy, but at some point the custom_try_compile macros should be ""modernized"".
Added another WILL_FAIL test which should help diagnosing the printf issues.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/pjaaskel,13,https://github.com/pocl/pocl/pull/1013#issuecomment-995549263,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Vulkan driver fails:
3/163 Test: pocl_test_dlopen_device_vulkan                                                                                                
Command: ""/home/visit0r/src/pocl/test-pr-cmake-vulkan-tests-build/tests/runtime/test_dlopen"" ""vulkan""                                     
Directory: /home/visit0r/src/pocl/test-pr-cmake-vulkan-tests-build/tests                                                                  
""pocl_test_dlopen_device_vulkan"" start time: Dec 16 10:25 EET                                                                             
Output:
----------------------------------------------------------
dlopen($ORIGIN/../../lib/CL/devices/vulkan/libpocl-devices-vulkan.so, RTLD_NOW) failed: /mnt/olddisk2/visit0r/src/pocl/test-pr-cmake-vulk\
an-tests-build/tests/runtime/../../lib/CL/devices/vulkan/libpocl-devices-vulkan.so: undefined symbol: pocl_alloc_buffer_from_region
<end of output>
Test time =   0.03 sec",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/pjaaskel,14,https://github.com/pocl/pocl/pull/1013#issuecomment-995558231,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Also svm symbols missing (perhaps due to the 3.x commits pulled in?):
  1/332 Test   #3: pocl_test_dlopen_device_basic .......................................................***Failed    0.15 sec
dlopen($ORIGIN/../../lib/CL/devices/basic/libpocl-devices-basic.so, RTLD_NOW) failed: /mnt/olddisk2/visit0r/src/pocl/test-pr-cmake-llvm-13-build/tests/runtime/../../lib/CL/devices/basic/libpocl-devices-basic.so: undefined symbol: pocl_driver_svm_fill

  2/332 Test   #2: pocl_test_dlopen_libpocl ............................................................   Passed    0.15 sec
  3/332 Test   #4: pocl_test_dlopen_device_pthread .....................................................***Failed    1.16 sec
dlopen($ORIGIN/../../lib/CL/devices/pthread/libpocl-devices-pthread.so, RTLD_NOW) failed: /home/visit0r/src/pocl/test-pr-cmake-llvm-13-build/lib/CL/devices/basic/libpocl-devices-basic.so: undefined symbol: pocl_driver_svm_fill",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,15,https://github.com/pocl/pocl/pull/1013#issuecomment-995916962,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Vulkan driver fails:
an-tests-build/tests/runtime/../../lib/CL/devices/vulkan/libpocl-devices-vulkan.so: undefined symbol: pocl_alloc_buffer_from_region

Did you use the latest version of that branch? That symbol (and the svn ones) were already exported ... but there were actually 3 symbols missing that are needed by the vulkan device. I've prepended two fixing commits to the cleanup-tests branch ...",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/pjaaskel,16,https://github.com/pocl/pocl/pull/1013#issuecomment-996556387,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Still fails:
  symbol lookup error:                                                                                                                    
  /home/visit0r/src/pocl/test-pr-cmake-vulkan-tests-build/lib/CL/devices/vulkan//libpocl-devices-vulkan.so:                               
  undefined symbol: pocl_cache_create_program_cachedir",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,17,https://github.com/pocl/pocl/pull/1013#issuecomment-996637372,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","undefined symbol: pocl_cache_create_program_cachedir

That usage was hidden behind #ifdef HAVE_CLSPV and thus not in a code path tested on my builds ...
More symbols exported and renamed.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/pjaaskel,18,https://github.com/pocl/pocl/pull/1013#issuecomment-996647068,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?",Now complaining about undefined symbol: pocl_bitcode_is_spirv_execmodel_sha,True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,19,https://github.com/pocl/pocl/pull/1013#issuecomment-996699470,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Now complaining about undefined symbol: pocl_bitcode_is_spirv_execmodel_sha

I cannot reproduce that. Sounds like an incomplete rebuild.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/pjaaskel,20,https://github.com/pocl/pocl/pull/1013#issuecomment-1000137330,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","No, it's persistent. My guess is that you build the CPU devices in and I don't in my test env. I use the following cmake flags:
-DENABLE_EXPERIMENTAL_DRIVERS=1 -DENABLE_TCE=OFF -DENABLE_VULKAN=ON -DENABLE_HOST_CPU_DEVICES=OFF -DCLSPV=/home/visit0r/local/bin/clspv",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,21,https://github.com/pocl/pocl/pull/1013#issuecomment-1006185048,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","I still cannot reproduce that issue ...
I've configured cleanup-tests at commit a9e0fae with
cmake \ 
        -DWITH_LLVM_CONFIG=/usr/bin/llvm-config-13 \
        -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-11 \
        -DENABLE_TCE=OFF -DENABLE_VULKAN=ON -DENABLE_HOST_CPU_DEVICES=OFF -DCLSPV_DIR=/tmp/usr/local/bin \
        ..

The tests fail due to lack of a supported device, but I don't see missing symbols.
$ nm -D ./lib/CL/libpocl.so.2.9.0 | grep pocl_bitcode_is_spirv_execmodel_shader
0000000000062884 T pocl_bitcode_is_spirv_execmodel_shader
$ nm -D ./lib/CL/devices/vulkan/libpocl-devices-vulkan.so | grep pocl_bitcode_is_spirv_execmodel_shader
                 U pocl_bitcode_is_spirv_execmodel_shader

You can find grep -vE '^(#|//|$)' CMakeCache.txt at https://gist.github.com/anbe42/f38f786b90e34710b4342b7f07e12018
If I use -DCLSPV=/tmp/usr/local/bin/clspv instead of setting CLSPV_DIR, the code path calling pocl_bitcode_is_spirv_execmodel_shader gets deactivated and libpocl-devices-vulkan.so no longer references the symbol.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1013,2021-12-01T09:45:34Z,2022-01-06T15:52:00Z,2022-01-07T11:05:28Z,MERGED,True,674,177,99,https://github.com/anbe42,Cleanup tests,17,[],https://github.com/pocl/pocl/pull/1013,https://github.com/anbe42,22,https://github.com/pocl/pocl/pull/1013#issuecomment-1007322872,"Some cleanup for the tests, mostly increasing consistency.
Adds a new helper poclu_show_program_build_log(cl_program).
Adds a new regression test for a llvm segfault triggered by pocl in llvm-10/llvm-11/llvm-12, seems to be fixed in llvm-13.
And while doing cleanup, I came across ...
There are two files left with mixed CRLF and CR line endings:
examples/IntelSVM/intelsvm.patch
examples/opencl-book-samples/ImageFilter2D.cl

With the minimal supported llvm version being 6.0, are the patches for older versions under tools/patches still needed?","Thanks for fixing the last bit.
BTW, there is another occurrence of #ifdef ENABLE_ICD in lib/CL/devices/proxy/pocl_proxy.c",True,{}
pocl/pocl,https://github.com/pocl/pocl,1014,2021-12-01T10:56:26Z,2021-12-17T11:03:42Z,2021-12-17T12:40:06Z,MERGED,True,164,2711,23,https://github.com/anbe42,Miscellaneous fixes,20,[],https://github.com/pocl/pocl/pull/1014,https://github.com/anbe42,1,https://github.com/pocl/pocl/pull/1014,"These fixes I have accumulated in the Debian package over time or they were born while I was prepareing the other merge requests.
The underlinked device libraries (relying transitively on libpocl.so.2 being linked against the missing libraries) made finding the actually missing symbol exports for VISIBILITY_HIDDEN more difficult.
As with my the other merge requests, feel free to cherry-pick only some bits if you don't want the others.","These fixes I have accumulated in the Debian package over time or they were born while I was prepareing the other merge requests.
The underlinked device libraries (relying transitively on libpocl.so.2 being linked against the missing libraries) made finding the actually missing symbol exports for VISIBILITY_HIDDEN more difficult.
As with my the other merge requests, feel free to cherry-pick only some bits if you don't want the others.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1014,2021-12-01T10:56:26Z,2021-12-17T11:03:42Z,2021-12-17T12:40:06Z,MERGED,True,164,2711,23,https://github.com/anbe42,Miscellaneous fixes,20,[],https://github.com/pocl/pocl/pull/1014,https://github.com/anbe42,2,https://github.com/pocl/pocl/pull/1014#issuecomment-984058119,"These fixes I have accumulated in the Debian package over time or they were born while I was prepareing the other merge requests.
The underlinked device libraries (relying transitively on libpocl.so.2 being linked against the missing libraries) made finding the actually missing symbol exports for VISIBILITY_HIDDEN more difficult.
As with my the other merge requests, feel free to cherry-pick only some bits if you don't want the others.","Added some fixes for the formatting scripts.
While doing that, I noticed tools/scripts/clang-format-diff.py is not accompanied by its license file. The same is true for lib/llvmopencl/BreakConstantGEPs.*
And you could also add a copy of the Boost license for lib/kernel/sleef/* ...
(I haven't done a complete license audit.)",True,{}
pocl/pocl,https://github.com/pocl/pocl,1014,2021-12-01T10:56:26Z,2021-12-17T11:03:42Z,2021-12-17T12:40:06Z,MERGED,True,164,2711,23,https://github.com/anbe42,Miscellaneous fixes,20,[],https://github.com/pocl/pocl/pull/1014,https://github.com/franz,3,https://github.com/pocl/pocl/pull/1014#issuecomment-984564112,"These fixes I have accumulated in the Debian package over time or they were born while I was prepareing the other merge requests.
The underlinked device libraries (relying transitively on libpocl.so.2 being linked against the missing libraries) made finding the actually missing symbol exports for VISIBILITY_HIDDEN more difficult.
As with my the other merge requests, feel free to cherry-pick only some bits if you don't want the others.","LGTM in general, and passes the buildbots, but i have not checked the HSA commits. @pjaaskel  can you check
Also, the libllvmopencl might be still useful for testing LLVM PoCL passes - so maybe it should not be removed, just disabled by default ? @pjaaskel what do you think ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1014,2021-12-01T10:56:26Z,2021-12-17T11:03:42Z,2021-12-17T12:40:06Z,MERGED,True,164,2711,23,https://github.com/anbe42,Miscellaneous fixes,20,[],https://github.com/pocl/pocl/pull/1014,https://github.com/anbe42,4,https://github.com/pocl/pocl/pull/1014#issuecomment-989298789,"These fixes I have accumulated in the Debian package over time or they were born while I was prepareing the other merge requests.
The underlinked device libraries (relying transitively on libpocl.so.2 being linked against the missing libraries) made finding the actually missing symbol exports for VISIBILITY_HIDDEN more difficult.
As with my the other merge requests, feel free to cherry-pick only some bits if you don't want the others.","Also, the libllvmopencl might be still useful for testing LLVM PoCL passes - so maybe it should not be removed, just disabled by default ?

building libllvmopencl.so is now disabled by default",True,{}
pocl/pocl,https://github.com/pocl/pocl,1014,2021-12-01T10:56:26Z,2021-12-17T11:03:42Z,2021-12-17T12:40:06Z,MERGED,True,164,2711,23,https://github.com/anbe42,Miscellaneous fixes,20,[],https://github.com/pocl/pocl/pull/1014,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/1014#issuecomment-995560602,"These fixes I have accumulated in the Debian package over time or they were born while I was prepareing the other merge requests.
The underlinked device libraries (relying transitively on libpocl.so.2 being linked against the missing libraries) made finding the actually missing symbol exports for VISIBILITY_HIDDEN more difficult.
As with my the other merge requests, feel free to cherry-pick only some bits if you don't want the others.","(At least) Vulkan fails:
142/161 Testing: examples/example2                                                                                                        
142/161 Test: examples/example2                                                                                                           
Command: ""/home/visit0r/src/pocl/test-pr-cmake-vulkan-tests-build/examples/example2/example2""                                             
Directory: /home/visit0r/src/pocl/test-pr-cmake-vulkan-tests-build/examples/example2                                                      
""examples/example2"" start time: Dec 16 10:44 EET                                                                                          
Output:                                                                                                                                   
----------------------------------------------------------
/home/visit0r/src/pocl/test-pr-cmake-vulkan-tests-build/examples/example2/example2: symbol lookup error: /home/visit0r/src/pocl/test-pr-c\
make-vulkan-tests-build/lib/CL/devices/vulkan//libpocl-devices-vulkan.so: undefined symbol: pocl_cache_create_program_cachedir
<end of output>                                                                                                                           
Test time =   0.13 sec",True,{}
pocl/pocl,https://github.com/pocl/pocl,1015,2021-12-05T16:58:43Z,2021-12-16T10:42:19Z,2022-01-03T04:38:00Z,MERGED,True,4,2,3,https://github.com/nchristensen,Avoid loss of precision in CUDA event time calculations,2,[],https://github.com/pocl/pocl/pull/1015,https://github.com/nchristensen,1,https://github.com/pocl/pocl/pull/1015,"The current code implicitly converts epoch to a float before calculating time_end and time_start and converting back to a cl_ulong. A float only has seven or so digits of accuracy meaning this conversion throws away the least significant digits of epoch if epoch is larger than about 1e8. Conversely, the precision of diff is around 1e-3 so multiplying by 1e6 makes all of these digits > 1 and converting this number to a cl_ulong will not lose any  digits. The gist below illustrates this in Python.
https://gist.github.com/nchristensen/15ab1fd53ba099accaab780ab6dbad90","The current code implicitly converts epoch to a float before calculating time_end and time_start and converting back to a cl_ulong. A float only has seven or so digits of accuracy meaning this conversion throws away the least significant digits of epoch if epoch is larger than about 1e8. Conversely, the precision of diff is around 1e-3 so multiplying by 1e6 makes all of these digits > 1 and converting this number to a cl_ulong will not lose any  digits. The gist below illustrates this in Python.
https://gist.github.com/nchristensen/15ab1fd53ba099accaab780ab6dbad90",True,{}
pocl/pocl,https://github.com/pocl/pocl,1015,2021-12-05T16:58:43Z,2021-12-16T10:42:19Z,2022-01-03T04:38:00Z,MERGED,True,4,2,3,https://github.com/nchristensen,Avoid loss of precision in CUDA event time calculations,2,[],https://github.com/pocl/pocl/pull/1015,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/1015#issuecomment-988857795,"The current code implicitly converts epoch to a float before calculating time_end and time_start and converting back to a cl_ulong. A float only has seven or so digits of accuracy meaning this conversion throws away the least significant digits of epoch if epoch is larger than about 1e8. Conversely, the precision of diff is around 1e-3 so multiplying by 1e6 makes all of these digits > 1 and converting this number to a cl_ulong will not lose any  digits. The gist below illustrates this in Python.
https://gist.github.com/nchristensen/15ab1fd53ba099accaab780ab6dbad90","I think this is enough user visible change (although small) that could be added to CHANGES. Also if you are not yet in CREDITS, can you add yourself there?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1015,2021-12-05T16:58:43Z,2021-12-16T10:42:19Z,2022-01-03T04:38:00Z,MERGED,True,4,2,3,https://github.com/nchristensen,Avoid loss of precision in CUDA event time calculations,2,[],https://github.com/pocl/pocl/pull/1015,https://github.com/nchristensen,3,https://github.com/pocl/pocl/pull/1015#issuecomment-989104837,"The current code implicitly converts epoch to a float before calculating time_end and time_start and converting back to a cl_ulong. A float only has seven or so digits of accuracy meaning this conversion throws away the least significant digits of epoch if epoch is larger than about 1e8. Conversely, the precision of diff is around 1e-3 so multiplying by 1e6 makes all of these digits > 1 and converting this number to a cl_ulong will not lose any  digits. The gist below illustrates this in Python.
https://gist.github.com/nchristensen/15ab1fd53ba099accaab780ab6dbad90",Done!,True,{}
pocl/pocl,https://github.com/pocl/pocl,1016,2021-12-08T11:23:18Z,2022-03-16T09:37:40Z,2022-03-16T09:37:40Z,MERGED,True,2734,1601,62,https://github.com/franz,OpenCL 3.0 CTS support + fixes,24,[],https://github.com/pocl/pocl/pull/1016,https://github.com/franz,1,https://github.com/pocl/pocl/pull/1016,"Main changes:

updates the platform version to 3.0
updates the CPU driver version to 3.0 if LLVM is sufficiently recent (12+)
updates the included OpenCL headers,
updates examples/conformance to use the 3.0 version of CTS when possible.

Also changes the way PoCL codebase is built (this is to make it easier to use OpenCL 3.0 internally and at the same time build against older ICD / header versions).

the library (lib/*) is always built against internal OpenCL 3.0 headers.
the poclu, tests & examples are now built against either 1) internal OpenCL 3.0 headers if ENABLE_ICD is OFF, or 2) against system headers & ICD (whatever the version) if ENABLE_ICD is ON.

At some point we can switch everything to 3.0-only but right now most systems have older ICDs / headers.
There are still a few failures with CTS 3.0 b/c of missing features.","Main changes:

updates the platform version to 3.0
updates the CPU driver version to 3.0 if LLVM is sufficiently recent (12+)
updates the included OpenCL headers,
updates examples/conformance to use the 3.0 version of CTS when possible.

Also changes the way PoCL codebase is built (this is to make it easier to use OpenCL 3.0 internally and at the same time build against older ICD / header versions).

the library (lib/*) is always built against internal OpenCL 3.0 headers.
the poclu, tests & examples are now built against either 1) internal OpenCL 3.0 headers if ENABLE_ICD is OFF, or 2) against system headers & ICD (whatever the version) if ENABLE_ICD is ON.

At some point we can switch everything to 3.0-only but right now most systems have older ICDs / headers.
There are still a few failures with CTS 3.0 b/c of missing features.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1016,2021-12-08T11:23:18Z,2022-03-16T09:37:40Z,2022-03-16T09:37:40Z,MERGED,True,2734,1601,62,https://github.com/franz,OpenCL 3.0 CTS support + fixes,24,[],https://github.com/pocl/pocl/pull/1016,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/1016#issuecomment-988856888,"Main changes:

updates the platform version to 3.0
updates the CPU driver version to 3.0 if LLVM is sufficiently recent (12+)
updates the included OpenCL headers,
updates examples/conformance to use the 3.0 version of CTS when possible.

Also changes the way PoCL codebase is built (this is to make it easier to use OpenCL 3.0 internally and at the same time build against older ICD / header versions).

the library (lib/*) is always built against internal OpenCL 3.0 headers.
the poclu, tests & examples are now built against either 1) internal OpenCL 3.0 headers if ENABLE_ICD is OFF, or 2) against system headers & ICD (whatever the version) if ENABLE_ICD is ON.

At some point we can switch everything to 3.0-only but right now most systems have older ICDs / headers.
There are still a few failures with CTS 3.0 b/c of missing features.","Great work again Michal, thanks. Can you add documentation on how to enable the OpenCL 3.0 build (how to install new enough ICD loader, it boils down to, I suppose) and what is the overall status of the CTS? Can we claim minimal OpenCL 3.0 compliance with this PR or is there something to do still? CHANGES needs to state that too.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1016,2021-12-08T11:23:18Z,2022-03-16T09:37:40Z,2022-03-16T09:37:40Z,MERGED,True,2734,1601,62,https://github.com/franz,OpenCL 3.0 CTS support + fixes,24,[],https://github.com/pocl/pocl/pull/1016,https://github.com/Vinsteri,3,https://github.com/pocl/pocl/pull/1016#issuecomment-989879936,"Main changes:

updates the platform version to 3.0
updates the CPU driver version to 3.0 if LLVM is sufficiently recent (12+)
updates the included OpenCL headers,
updates examples/conformance to use the 3.0 version of CTS when possible.

Also changes the way PoCL codebase is built (this is to make it easier to use OpenCL 3.0 internally and at the same time build against older ICD / header versions).

the library (lib/*) is always built against internal OpenCL 3.0 headers.
the poclu, tests & examples are now built against either 1) internal OpenCL 3.0 headers if ENABLE_ICD is OFF, or 2) against system headers & ICD (whatever the version) if ENABLE_ICD is ON.

At some point we can switch everything to 3.0-only but right now most systems have older ICDs / headers.
There are still a few failures with CTS 3.0 b/c of missing features.","Can we claim minimal OpenCL 3.0 compliance with this PR or is there something to do still?

I would say that we can't claim OpenCL 3.0 compliance yet, there's still some mandatory OpenCL 3.0 features missing implementations. For example,

clSetContextDestructorCallback
All new versioning queries like CL_PLATFORM_EXTENSIONS_WITH_VERSION
clCreateBufferWithProperties
clCreateImageWithProperties
and more..",True,{}
pocl/pocl,https://github.com/pocl/pocl,1016,2021-12-08T11:23:18Z,2022-03-16T09:37:40Z,2022-03-16T09:37:40Z,MERGED,True,2734,1601,62,https://github.com/franz,OpenCL 3.0 CTS support + fixes,24,[],https://github.com/pocl/pocl/pull/1016,https://github.com/franz,4,https://github.com/pocl/pocl/pull/1016#issuecomment-993607550,"Main changes:

updates the platform version to 3.0
updates the CPU driver version to 3.0 if LLVM is sufficiently recent (12+)
updates the included OpenCL headers,
updates examples/conformance to use the 3.0 version of CTS when possible.

Also changes the way PoCL codebase is built (this is to make it easier to use OpenCL 3.0 internally and at the same time build against older ICD / header versions).

the library (lib/*) is always built against internal OpenCL 3.0 headers.
the poclu, tests & examples are now built against either 1) internal OpenCL 3.0 headers if ENABLE_ICD is OFF, or 2) against system headers & ICD (whatever the version) if ENABLE_ICD is ON.

At some point we can switch everything to 3.0-only but right now most systems have older ICDs / headers.
There are still a few failures with CTS 3.0 b/c of missing features.","OK, i have apparently missed some tests in the ""api"" test group. After adding them, still only 2 tests fail (one of them, get_kernel_arg_info, is expected). However it skips many tests:
context_destructor_callback skipped (requires at least OpenCL version 3.0, but the device reports OpenCL version 1.2)

I'm not sure why it skips context destructor tests if the platform reports 3.0 (IOW why is that test device dependent not platform dependent...)
But 3.0 can't be enabled on device yet, because it doesn't build, because of missing feature macros:
error: options cl_khr_fp64 and __opencl_c_fp64 are set to different values

so i think feature macros need to be solved first.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1016,2021-12-08T11:23:18Z,2022-03-16T09:37:40Z,2022-03-16T09:37:40Z,MERGED,True,2734,1601,62,https://github.com/franz,OpenCL 3.0 CTS support + fixes,24,[],https://github.com/pocl/pocl/pull/1016,https://github.com/Vinsteri,5,https://github.com/pocl/pocl/pull/1016#issuecomment-995545336,"Main changes:

updates the platform version to 3.0
updates the CPU driver version to 3.0 if LLVM is sufficiently recent (12+)
updates the included OpenCL headers,
updates examples/conformance to use the 3.0 version of CTS when possible.

Also changes the way PoCL codebase is built (this is to make it easier to use OpenCL 3.0 internally and at the same time build against older ICD / header versions).

the library (lib/*) is always built against internal OpenCL 3.0 headers.
the poclu, tests & examples are now built against either 1) internal OpenCL 3.0 headers if ENABLE_ICD is OFF, or 2) against system headers & ICD (whatever the version) if ENABLE_ICD is ON.

At some point we can switch everything to 3.0-only but right now most systems have older ICDs / headers.
There are still a few failures with CTS 3.0 b/c of missing features.","make install fails with
CMake Error at include/CL/cmake_install.cmake:49 (file):
file INSTALL cannot find ""~/pocl/include/CL/cl2.hpp"": No such
file or directory.
Call Stack (most recent call first):
include/cmake_install.cmake:67 (include)
cmake_install.cmake:81 (include)

when -DINSTALL_OPENCL_HEADERS=ON
I suspect this is result of cl2.hpp being moved in commit Move include/CL/cl2.hpp -> include/hpp/CL/cl2.hpp , but cl2.hpp wasn't removed from the include/CL/CMakeLists.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1016,2021-12-08T11:23:18Z,2022-03-16T09:37:40Z,2022-03-16T09:37:40Z,MERGED,True,2734,1601,62,https://github.com/franz,OpenCL 3.0 CTS support + fixes,24,[],https://github.com/pocl/pocl/pull/1016,https://github.com/franz,6,https://github.com/pocl/pocl/pull/1016#issuecomment-1059228308,"Main changes:

updates the platform version to 3.0
updates the CPU driver version to 3.0 if LLVM is sufficiently recent (12+)
updates the included OpenCL headers,
updates examples/conformance to use the 3.0 version of CTS when possible.

Also changes the way PoCL codebase is built (this is to make it easier to use OpenCL 3.0 internally and at the same time build against older ICD / header versions).

the library (lib/*) is always built against internal OpenCL 3.0 headers.
the poclu, tests & examples are now built against either 1) internal OpenCL 3.0 headers if ENABLE_ICD is OFF, or 2) against system headers & ICD (whatever the version) if ENABLE_ICD is ON.

At some point we can switch everything to 3.0-only but right now most systems have older ICDs / headers.
There are still a few failures with CTS 3.0 b/c of missing features.","Rebased the PR on master, and removed two commits that enable the 3.0 CTS and 3.0 platform. I can commit them later when all 3.0 features are in.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1016,2021-12-08T11:23:18Z,2022-03-16T09:37:40Z,2022-03-16T09:37:40Z,MERGED,True,2734,1601,62,https://github.com/franz,OpenCL 3.0 CTS support + fixes,24,[],https://github.com/pocl/pocl/pull/1016,https://github.com/pjaaskel,7,https://github.com/pocl/pocl/pull/1016#issuecomment-1059297903,"Main changes:

updates the platform version to 3.0
updates the CPU driver version to 3.0 if LLVM is sufficiently recent (12+)
updates the included OpenCL headers,
updates examples/conformance to use the 3.0 version of CTS when possible.

Also changes the way PoCL codebase is built (this is to make it easier to use OpenCL 3.0 internally and at the same time build against older ICD / header versions).

the library (lib/*) is always built against internal OpenCL 3.0 headers.
the poclu, tests & examples are now built against either 1) internal OpenCL 3.0 headers if ENABLE_ICD is OFF, or 2) against system headers & ICD (whatever the version) if ENABLE_ICD is ON.

At some point we can switch everything to 3.0-only but right now most systems have older ICDs / headers.
There are still a few failures with CTS 3.0 b/c of missing features.","Thanks! The diffs look good overall, but I get a build error when testing:
[ 71%] Building C object poclu/CMakeFiles/poclu.dir/misc.c.o
/home/visit0r/src/pocl/poclu/misc.c: In function ‘poclu_load_program_multidev’:
/home/visit0r/src/pocl/poclu/misc.c:469:17: error: implicit declaration of function ‘clCreateProgramWithIL’; did you mean ‘clCreateProgramWithBinary’? [-Werror=implicit-function-declaration]
       program = clCreateProgramWithIL (context, (const void *)binary,
                 ^~~~~~~~~~~~~~~~~~~~~
                 clCreateProgramWithBinary
/home/visit0r/src/pocl/poclu/misc.c:469:15: warning: assignment makes pointer from integer without a cast [-Wint-conversion]
       program = clCreateProgramWithIL (context, (const void *)binary,",True,{}
pocl/pocl,https://github.com/pocl/pocl,1016,2021-12-08T11:23:18Z,2022-03-16T09:37:40Z,2022-03-16T09:37:40Z,MERGED,True,2734,1601,62,https://github.com/franz,OpenCL 3.0 CTS support + fixes,24,[],https://github.com/pocl/pocl/pull/1016,https://github.com/franz,8,https://github.com/pocl/pocl/pull/1016#issuecomment-1063954630,"Main changes:

updates the platform version to 3.0
updates the CPU driver version to 3.0 if LLVM is sufficiently recent (12+)
updates the included OpenCL headers,
updates examples/conformance to use the 3.0 version of CTS when possible.

Also changes the way PoCL codebase is built (this is to make it easier to use OpenCL 3.0 internally and at the same time build against older ICD / header versions).

the library (lib/*) is always built against internal OpenCL 3.0 headers.
the poclu, tests & examples are now built against either 1) internal OpenCL 3.0 headers if ENABLE_ICD is OFF, or 2) against system headers & ICD (whatever the version) if ENABLE_ICD is ON.

At some point we can switch everything to 3.0-only but right now most systems have older ICDs / headers.
There are still a few failures with CTS 3.0 b/c of missing features.",@pjaaskel  Should be fixed. Which OS are you testing with ?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1021,2021-12-29T19:03:20Z,2022-01-07T20:05:49Z,2022-01-07T20:05:49Z,CLOSED,False,10,10,1,https://github.com/trixirt,cuda: refresh running on Jetson nano,1,[],https://github.com/pocl/pocl/pull/1021,https://github.com/trixirt,1,https://github.com/pocl/pocl/pull/1021,"On Jetson nano with jetpack 4.6 / Cuda 10.2
gcc/clang builtin is aarch64 instead of arm
In pocl_cuda_alloc_mem_obj(), the second parameter changed its
identifier from mem_obj to mem, so the use in the arm ifdef had to change.
In pocl_cuda_finalize_command() the event structure changed so its use
needed to change.  meta->num_args was wrong it should have been
kernel->meta->num_args.
Fixes most ctest failures.
Signed-off-by: Tom Rix trix@redhat.com","On Jetson nano with jetpack 4.6 / Cuda 10.2
gcc/clang builtin is aarch64 instead of arm
In pocl_cuda_alloc_mem_obj(), the second parameter changed its
identifier from mem_obj to mem, so the use in the arm ifdef had to change.
In pocl_cuda_finalize_command() the event structure changed so its use
needed to change.  meta->num_args was wrong it should have been
kernel->meta->num_args.
Fixes most ctest failures.
Signed-off-by: Tom Rix trix@redhat.com",True,{}
pocl/pocl,https://github.com/pocl/pocl,1021,2021-12-29T19:03:20Z,2022-01-07T20:05:49Z,2022-01-07T20:05:49Z,CLOSED,False,10,10,1,https://github.com/trixirt,cuda: refresh running on Jetson nano,1,[],https://github.com/pocl/pocl/pull/1021,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/1021#issuecomment-1003000242,"On Jetson nano with jetpack 4.6 / Cuda 10.2
gcc/clang builtin is aarch64 instead of arm
In pocl_cuda_alloc_mem_obj(), the second parameter changed its
identifier from mem_obj to mem, so the use in the arm ifdef had to change.
In pocl_cuda_finalize_command() the event structure changed so its use
needed to change.  meta->num_args was wrong it should have been
kernel->meta->num_args.
Fixes most ctest failures.
Signed-off-by: Tom Rix trix@redhat.com",Does it look ok to pull @jrprice ?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1021,2021-12-29T19:03:20Z,2022-01-07T20:05:49Z,2022-01-07T20:05:49Z,CLOSED,False,10,10,1,https://github.com/trixirt,cuda: refresh running on Jetson nano,1,[],https://github.com/pocl/pocl/pull/1021,https://github.com/isuruf,3,https://github.com/pocl/pocl/pull/1021#issuecomment-1003099302,"On Jetson nano with jetpack 4.6 / Cuda 10.2
gcc/clang builtin is aarch64 instead of arm
In pocl_cuda_alloc_mem_obj(), the second parameter changed its
identifier from mem_obj to mem, so the use in the arm ifdef had to change.
In pocl_cuda_finalize_command() the event structure changed so its use
needed to change.  meta->num_args was wrong it should have been
kernel->meta->num_args.
Fixes most ctest failures.
Signed-off-by: Tom Rix trix@redhat.com",Can we please merge #890 instead of this?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1021,2021-12-29T19:03:20Z,2022-01-07T20:05:49Z,2022-01-07T20:05:49Z,CLOSED,False,10,10,1,https://github.com/trixirt,cuda: refresh running on Jetson nano,1,[],https://github.com/pocl/pocl/pull/1021,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/1021#issuecomment-1005601794,"On Jetson nano with jetpack 4.6 / Cuda 10.2
gcc/clang builtin is aarch64 instead of arm
In pocl_cuda_alloc_mem_obj(), the second parameter changed its
identifier from mem_obj to mem, so the use in the arm ifdef had to change.
In pocl_cuda_finalize_command() the event structure changed so its use
needed to change.  meta->num_args was wrong it should have been
kernel->meta->num_args.
Fixes most ctest failures.
Signed-off-by: Tom Rix trix@redhat.com",@isuruf I merged #890. Is there something more in this PR that needs to be pulled in @trixirt?,True,{'HOORAY': ['https://github.com/isuruf']}
pocl/pocl,https://github.com/pocl/pocl,1021,2021-12-29T19:03:20Z,2022-01-07T20:05:49Z,2022-01-07T20:05:49Z,CLOSED,False,10,10,1,https://github.com/trixirt,cuda: refresh running on Jetson nano,1,[],https://github.com/pocl/pocl/pull/1021,https://github.com/trixirt,5,https://github.com/pocl/pocl/pull/1021#issuecomment-1007702043,"On Jetson nano with jetpack 4.6 / Cuda 10.2
gcc/clang builtin is aarch64 instead of arm
In pocl_cuda_alloc_mem_obj(), the second parameter changed its
identifier from mem_obj to mem, so the use in the arm ifdef had to change.
In pocl_cuda_finalize_command() the event structure changed so its use
needed to change.  meta->num_args was wrong it should have been
kernel->meta->num_args.
Fixes most ctest failures.
Signed-off-by: Tom Rix trix@redhat.com","not sure as the target looks like xavier and i have have nano
Since its' merged, i'll give it a try .",True,{}
pocl/pocl,https://github.com/pocl/pocl,1023,2022-01-02T14:30:31Z,2022-01-05T13:12:44Z,2022-01-07T20:06:48Z,MERGED,True,32,18,2,https://github.com/trixirt,llvm 13: handle deprecated CreateLoad,1,[],https://github.com/pocl/pocl/pull/1023,https://github.com/trixirt,1,https://github.com/pocl/pocl/pull/1023,"As of llvm 13, CreateLoad prefers to have a type arguement as it's
first parameter, deprecating the old api.
For readablity, seperated out the CreateConstGEP* calls which have
a similar deprecation.
Signed-off-by: Tom Rix trix@redhat.com","As of llvm 13, CreateLoad prefers to have a type arguement as it's
first parameter, deprecating the old api.
For readablity, seperated out the CreateConstGEP* calls which have
a similar deprecation.
Signed-off-by: Tom Rix trix@redhat.com",True,{}
pocl/pocl,https://github.com/pocl/pocl,1026,2022-01-12T14:03:09Z,2022-01-21T16:37:59Z,2022-01-21T16:37:59Z,MERGED,True,41,6,2,https://github.com/trixirt,llvm 14: handle deprecated LLVMBuildCall,3,[],https://github.com/pocl/pocl/pull/1026,https://github.com/trixirt,1,https://github.com/pocl/pocl/pull/1026,"As of llvm 14, LLVMBuildCall is deprecated in favor of LLVMBuildCall2
Signed-off-by: Tom Rix trix@redhat.com","As of llvm 14, LLVMBuildCall is deprecated in favor of LLVMBuildCall2
Signed-off-by: Tom Rix trix@redhat.com",True,{}
pocl/pocl,https://github.com/pocl/pocl,1026,2022-01-12T14:03:09Z,2022-01-21T16:37:59Z,2022-01-21T16:37:59Z,MERGED,True,41,6,2,https://github.com/trixirt,llvm 14: handle deprecated LLVMBuildCall,3,[],https://github.com/pocl/pocl/pull/1026,https://github.com/trixirt,2,https://github.com/pocl/pocl/pull/1026#issuecomment-1014542566,"As of llvm 14, LLVMBuildCall is deprecated in favor of LLVMBuildCall2
Signed-off-by: Tom Rix trix@redhat.com",TargetRegister.h moved and LLVMBuildLoad was deprecated in llvm 14.,True,{}
pocl/pocl,https://github.com/pocl/pocl,1027,2022-01-18T19:55:35Z,,2022-03-16T09:51:40Z,OPEN,False,53,35,1,https://github.com/trixirt,cuda : generalize pocl_cuda_submit_memfill,1,[],https://github.com/pocl/pocl/pull/1027,https://github.com/trixirt,1,https://github.com/pocl/pocl/pull/1027,"The use of cuMemsetD32|16 is dependent on the alignment and
not as much the size.  Check the alignment of the inputs
and use an appropriate cuMemset.
Signed-off-by: Tom Rix trix@redhat.com","The use of cuMemsetD32|16 is dependent on the alignment and
not as much the size.  Check the alignment of the inputs
and use an appropriate cuMemset.
Signed-off-by: Tom Rix trix@redhat.com",True,{}
pocl/pocl,https://github.com/pocl/pocl,1027,2022-01-18T19:55:35Z,,2022-03-16T09:51:40Z,OPEN,False,53,35,1,https://github.com/trixirt,cuda : generalize pocl_cuda_submit_memfill,1,[],https://github.com/pocl/pocl/pull/1027,https://github.com/trixirt,2,https://github.com/pocl/pocl/pull/1027#issuecomment-1015785286,"The use of cuMemsetD32|16 is dependent on the alignment and
not as much the size.  Check the alignment of the inputs
and use an appropriate cuMemset.
Signed-off-by: Tom Rix trix@redhat.com","conformance_buffers_fill mostly works now on jetson, before it failed when the size was 8+
failures now are on the flags wanting to use host ptr.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1027,2022-01-18T19:55:35Z,,2022-03-16T09:51:40Z,OPEN,False,53,35,1,https://github.com/trixirt,cuda : generalize pocl_cuda_submit_memfill,1,[],https://github.com/pocl/pocl/pull/1027,https://github.com/isuruf,3,https://github.com/pocl/pocl/pull/1027#issuecomment-1016442546,"The use of cuMemsetD32|16 is dependent on the alignment and
not as much the size.  Check the alignment of the inputs
and use an appropriate cuMemset.
Signed-off-by: Tom Rix trix@redhat.com","@trixirt, I don't think this is correct. AFAIK, pattern_size gives the length of the data in pattern, but cuMemsetD32Async considers pattern to be a 32-bit value. Is my understanding incorrect?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1027,2022-01-18T19:55:35Z,,2022-03-16T09:51:40Z,OPEN,False,53,35,1,https://github.com/trixirt,cuda : generalize pocl_cuda_submit_memfill,1,[],https://github.com/pocl/pocl/pull/1027,https://github.com/trixirt,4,https://github.com/pocl/pocl/pull/1027#issuecomment-1016849774,"The use of cuMemsetD32|16 is dependent on the alignment and
not as much the size.  Check the alignment of the inputs
and use an appropriate cuMemset.
Signed-off-by: Tom Rix trix@redhat.com","yes i believe so, that cu api is a value not a pointer.
I must have been getting lucky on the conformance test.
I will rework.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1027,2022-01-18T19:55:35Z,,2022-03-16T09:51:40Z,OPEN,False,53,35,1,https://github.com/trixirt,cuda : generalize pocl_cuda_submit_memfill,1,[],https://github.com/pocl/pocl/pull/1027,https://github.com/Oblomov,5,https://github.com/pocl/pocl/pull/1027#issuecomment-1017609793,"The use of cuMemsetD32|16 is dependent on the alignment and
not as much the size.  Check the alignment of the inputs
and use an appropriate cuMemset.
Signed-off-by: Tom Rix trix@redhat.com","I'm afraid the only way to properly implement clEnqueueFillBuffer through CUDA is using kernels. This may be optimized for specific alignment/size cases, but a kernel for the generic case is necessary.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1027,2022-01-18T19:55:35Z,,2022-03-16T09:51:40Z,OPEN,False,53,35,1,https://github.com/trixirt,cuda : generalize pocl_cuda_submit_memfill,1,[],https://github.com/pocl/pocl/pull/1027,https://github.com/trixirt,6,https://github.com/pocl/pocl/pull/1027#issuecomment-1017619551,"The use of cuMemsetD32|16 is dependent on the alignment and
not as much the size.  Check the alignment of the inputs
and use an appropriate cuMemset.
Signed-off-by: Tom Rix trix@redhat.com","Can you explain why a write and copies would not work ?
The test i am fixing is conformance_buffers_fill",True,{}
pocl/pocl,https://github.com/pocl/pocl,1027,2022-01-18T19:55:35Z,,2022-03-16T09:51:40Z,OPEN,False,53,35,1,https://github.com/trixirt,cuda : generalize pocl_cuda_submit_memfill,1,[],https://github.com/pocl/pocl/pull/1027,https://github.com/Oblomov,7,https://github.com/pocl/pocl/pull/1027#issuecomment-1019107078,"The use of cuMemsetD32|16 is dependent on the alignment and
not as much the size.  Check the alignment of the inputs
and use an appropriate cuMemset.
Signed-off-by: Tom Rix trix@redhat.com","If we're only aiming for correctness, then yes, the approach would work. However, the performance is going to be abysmal.
Buffer filling should work at close to peak bandwidth performance. If it's implemented as a doubling copy, you're only going to get < 1/3rd the performance that the hardware could achieve (it's sort of like a “reverse reduction”). Even a simple kernel doing a[i] = pattern would do better in this case.
(That being said, it's obviously OK to strive for correctness now and then aim for performance later.)",True,{}
pocl/pocl,https://github.com/pocl/pocl,1027,2022-01-18T19:55:35Z,,2022-03-16T09:51:40Z,OPEN,False,53,35,1,https://github.com/trixirt,cuda : generalize pocl_cuda_submit_memfill,1,[],https://github.com/pocl/pocl/pull/1027,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/1027#issuecomment-1068932417,"The use of cuMemsetD32|16 is dependent on the alignment and
not as much the size.  Check the alignment of the inputs
and use an appropriate cuMemset.
Signed-off-by: Tom Rix trix@redhat.com",What's the plan with this work?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,1,https://github.com/pocl/pocl/pull/1028,"details in issue #962
at the moment I only tried it outside POCL","details in issue #962
at the moment I only tried it outside POCL",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,2,https://github.com/pocl/pocl/pull/1028#issuecomment-1016713477,"details in issue #962
at the moment I only tried it outside POCL","Tested on linux, with and without whitespaces in path",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/1028#issuecomment-1017421487,"details in issue #962
at the moment I only tried it outside POCL","Thanks for your contribution. Looking at it though, it seems a bit complex. Could you simplify this by implementing a simple tokenizer instead that handles the quotes as a special case? Now you go through hoops to hide the space char just to pass it to the standard tokenizer whereas we could have our simpler one that scans the string and returns new tokens at space char unless a quote is being processed?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,4,https://github.com/pocl/pocl/pull/1028#issuecomment-1017446805,"details in issue #962
at the moment I only tried it outside POCL","Thanks for your contribution. Looking at it though, it seems a bit complex. Could you simplify this by implementing a simple tokenizer instead that handles the quotes as a special case? Now you go through hoops to hide the space char just to pass it to the standard tokenizer whereas we could have our simpler one that scans the string and returns new tokens at space char unless a quote is being processed?

Hi, I think this solution it's the faster and less complex possible. As you see, I'm not changing the tokenizer, but only the input and the output. The best thing to do will be using array instead of strings, from the beginning.
I'm very busy with work and also in porting Metal on hashcat, so I can't help you at the moment. However the workaround is functional, you can always optimize it in the future.
Thanks for the comments, they are always appreciated :)",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/1028#issuecomment-1017506029,"details in issue #962
at the moment I only tried it outside POCL","The workaround you add seems much more code than a simple tokenizer, but I suppose that's fine as it's not a beauty contest. However, I see duplicated code in injecting those chars on top of the quoted white spaces, thus at least should be refactored to a utility function to get this to an acceptable level. I still don't have extra time to ""optimize"" it by myself due to my own itches to scratch - sorry.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,6,https://github.com/pocl/pocl/pull/1028#issuecomment-1017528376,"details in issue #962
at the moment I only tried it outside POCL","yes, I can move the duplicate static function somewhere if you want. Thanks",True,{'THUMBS_UP': ['https://github.com/pjaaskel']}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,7,https://github.com/pocl/pocl/pull/1028#issuecomment-1017531361,"details in issue #962
at the moment I only tried it outside POCL",any suggestions on where you keep the shared functions?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/pjaaskel,8,https://github.com/pocl/pocl/pull/1028#issuecomment-1017553141,"details in issue #962
at the moment I only tried it outside POCL","pocl_util.c could fit this one, thanks.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,9,https://github.com/pocl/pocl/pull/1028#issuecomment-1024879271,"details in issue #962
at the moment I only tried it outside POCL","Sorry but I don’t understand what you say about style and the last
sentence. This patch works, and it’s tested on Linux. If you want to add I
and all hashcat users will be happy, else we need to handle this by stop
hashcat execution in case of white space on path.

Thanks, have a nice day
…
On Sat, 29 Jan 2022 at 09:14, Pekka Jääskeläinen ***@***.***> wrote:
 ***@***.**** requested changes on this pull request.

 Please check my new comments, thanks for your patience.
 ------------------------------

 In lib/CL/pocl_llvm_build.cc
 <#1028 (comment)>:

 > @@ -353,14 +355,45 @@ int pocl_llvm_build_program(cl_program program,

    POCL_MSG_PRINT_LLVM(""all build options: %s\n"", ss.str().c_str());

 -  std::istream_iterator<std::string> begin(ss);
 -  std::istream_iterator<std::string> end;
 -  std::istream_iterator<std::string> i = begin;
 -  std::vector<const char*> itemcstrs;
 +  char replace_me = 0;

 Also please take note this is a .cc file so we follow the LLVM style (yeah
 - I'm still sorry for the two different styles), so please make sure the
 new codes convert these files towards the style guide. It here for example
 means WSReplacementChar as the variable name that follows the convention.
 ------------------------------

 In lib/CL/pocl_llvm_build.cc
 <#1028 (comment)>:

 > -    ++i;
 +
 +  std::string s;
 +
 +  while (iss >> s)
 +  {
 +    // if needed, put back whitespace
 +    if (replace_me != 0)
 +    {
 +      if (s.find(replace_me) != std::string::npos)
 +      {
 +        std::replace(s.begin(), s.end(), replace_me, ' ');
 +      }
 +    }
 +
 +    // if quoted, remove it to make compiler happy

 Doesn't your code convert /foo/""bar dir""/inc_vendor.h````to /foo/ bar dir
 /inc_vendor.h```, that is, add extra whitespaces to the path?

 —
 Reply to this email directly, view it on GitHub
 <#1028 (review)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ADVLFQPDFTHW5UVXLRZGB4LUYOOVRANCNFSM5MJFITUQ>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.

 You are receiving this because you authored the thread.Message ID:
 ***@***.***>",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/pjaaskel,10,https://github.com/pocl/pocl/pull/1028#issuecomment-1025424355,"details in issue #962
at the moment I only tried it outside POCL","Sorry but I don’t understand what you say about style and the last sentence. This patch works, and it’s tested on Linux. If you want to add I and all hashcat users will be happy, else we need to handle this by stop hashcat execution in case of white space on path. Thanks, have a nice day

Sorry for being unclear, like too often. What I meant to say is that the .cc (since being a C++) doesn't adhere to the PoCL style guidelines, which we gradually fix with the new commits. The idea is to improve the style with each commit, thus we do not push commits that go away from the agreed style guidelines, but preferably improve it a bit from the surroundings also.
There's a script tools/scripts/format_branch.sh which should fix the style automatically, but doesn't fix the naming conventions. E.g. ThisIsAVariable instead of this_is_a_variable. Yes, I understand it would be beneficial to your use cases to get this committed quickly and with minimal contributor effort, but surely you understand I must also guard the PoCL's code base since being responsible of its longer term maintenance. You'd likely require the same for a code base you were responsible for, right?
Have a great week!",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,11,https://github.com/pocl/pocl/pull/1028#issuecomment-1025701220,"details in issue #962
at the moment I only tried it outside POCL","I'm sorry but the time I could devote to this is over. If you think that
what has been done is not enough, I will close the PR asap. Thank you

Il giorno lun 31 gen 2022 alle ore 13:09 Pekka Jääskeläinen <
***@***.***> ha scritto:
…
 ***@***.**** requested changes on this pull request.
 ------------------------------

 In lib/CL/pocl_llvm_build.cc
 <#1028 (comment)>:

 > @@ -355,14 +355,14 @@ int pocl_llvm_build_program(cl_program program,

    POCL_MSG_PRINT_LLVM(""all build options: %s\n"", ss.str().c_str());

 -  char replace_me = 0;
 +  char WSReplacementChar = 0;

    char *temp_options = (char *) malloc (ss.str().length() + 1);

 This also needs renaming. Please check:
 https://llvm.org/docs/CodingStandards.html#name-types-functions-variables-and-enumerators-properly
 Thanks!

 —
 Reply to this email directly, view it on GitHub
 <#1028 (review)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ADVLFQOPCEDOKSBDOBLK2VLUYZ3WDANCNFSM5MJFITUQ>
 .
 Triage notifications on the go with GitHub Mobile for iOS
 <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
 or Android
 <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.

 You are receiving this because you authored the thread.Message ID:
 ***@***.***>",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/pjaaskel,12,https://github.com/pocl/pocl/pull/1028#issuecomment-1025747393,"details in issue #962
at the moment I only tried it outside POCL","Sure, I understand. We all have our time priorities. Thanks for your first steps, perhaps someone else can take it to the mergeable level.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,13,https://github.com/pocl/pocl/pull/1028#issuecomment-1025752489,"details in issue #962
at the moment I only tried it outside POCL","""first steps"" seems a bit simplistic to me, thanks anyway

Il giorno lun 31 gen 2022 alle ore 14:37 Pekka Jääskeläinen
***@***.***> ha scritto:
…

 Sure, I understand. We all have our time priorities. Thanks for your first steps, perhaps someone else can take it to the mergeable level.

 —
 Reply to this email directly, view it on GitHub, or unsubscribe.
 Triage notifications on the go with GitHub Mobile for iOS or Android.
 You are receiving this because you authored the thread.Message ID: ***@***.***>",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/pjaaskel,14,https://github.com/pocl/pocl/pull/1028#issuecomment-1025814200,"details in issue #962
at the moment I only tried it outside POCL","Yep, you are right, it's not far.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,15,https://github.com/pocl/pocl/pull/1028#issuecomment-1030598908,"details in issue #962
at the moment I only tried it outside POCL","@pjaaskel now it's all done or there're others changes to do? If not, please do a complete review also considering that the present code does not follow everything you have told me to do.
Thanks!",True,{}
pocl/pocl,https://github.com/pocl/pocl,1028,2022-01-19T07:35:26Z,2022-02-08T16:25:12Z,2022-02-08T16:25:12Z,MERGED,True,141,10,5,https://github.com/matrix,handling whitespace chars in build options,10,[],https://github.com/pocl/pocl/pull/1028,https://github.com/matrix,16,https://github.com/pocl/pocl/pull/1028#issuecomment-1032564261,"details in issue #962
at the moment I only tried it outside POCL",done,True,{}
pocl/pocl,https://github.com/pocl/pocl,1029,2022-01-20T01:04:01Z,2022-02-03T18:01:33Z,2022-02-03T18:02:32Z,MERGED,True,47,3,2,https://github.com/matthiasdiener,cuda: show ptx error messages when debug enabled,4,['CUDA issue'],https://github.com/pocl/pocl/pull/1029,https://github.com/matthiasdiener,1,https://github.com/pocl/pocl/pull/1029,"Based on an idea and code discussed in #944
cc: @blu","Based on an idea and code discussed in #944
cc: @blu",True,"{'THUMBS_UP': ['https://github.com/inducer', 'https://github.com/blu']}"
pocl/pocl,https://github.com/pocl/pocl,1029,2022-01-20T01:04:01Z,2022-02-03T18:01:33Z,2022-02-03T18:02:32Z,MERGED,True,47,3,2,https://github.com/matthiasdiener,cuda: show ptx error messages when debug enabled,4,['CUDA issue'],https://github.com/pocl/pocl/pull/1029,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/1029#issuecomment-1024863576,"Based on an idea and code discussed in #944
cc: @blu",I suppose ok for @jrprice too?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1029,2022-01-20T01:04:01Z,2022-02-03T18:01:33Z,2022-02-03T18:02:32Z,MERGED,True,47,3,2,https://github.com/matthiasdiener,cuda: show ptx error messages when debug enabled,4,['CUDA issue'],https://github.com/pocl/pocl/pull/1029,https://github.com/matthiasdiener,3,https://github.com/pocl/pocl/pull/1029#issuecomment-1025341054,"Based on an idea and code discussed in #944
cc: @blu","format-branch.sh

Thanks, should be fixed now.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1029,2022-01-20T01:04:01Z,2022-02-03T18:01:33Z,2022-02-03T18:02:32Z,MERGED,True,47,3,2,https://github.com/matthiasdiener,cuda: show ptx error messages when debug enabled,4,['CUDA issue'],https://github.com/pocl/pocl/pull/1029,https://github.com/matthiasdiener,4,https://github.com/pocl/pocl/pull/1029#issuecomment-1028142315,"Based on an idea and code discussed in #944
cc: @blu",Could you please take another look @pjaaskel ?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1030,2022-01-31T04:24:00Z,2022-02-03T18:01:33Z,2022-02-03T18:02:13Z,MERGED,True,1,1,1,https://github.com/matthiasdiener,Fix value of CL_DEVICE_PCI_DOMAIN_ID_NV,1,[],https://github.com/pocl/pocl/pull/1030,https://github.com/matthiasdiener,1,https://github.com/pocl/pocl/pull/1030,"This value was initially fixed by #917 but got reverted by #931 (specifically 5f806ca).
cc: @Vinsteri","This value was initially fixed by #917 but got reverted by #931 (specifically 5f806ca).
cc: @Vinsteri",True,{}
pocl/pocl,https://github.com/pocl/pocl,1030,2022-01-31T04:24:00Z,2022-02-03T18:01:33Z,2022-02-03T18:02:13Z,MERGED,True,1,1,1,https://github.com/matthiasdiener,Fix value of CL_DEVICE_PCI_DOMAIN_ID_NV,1,[],https://github.com/pocl/pocl/pull/1030,https://github.com/matthiasdiener,2,https://github.com/pocl/pocl/pull/1030#issuecomment-1025371459,"This value was initially fixed by #917 but got reverted by #931 (specifically 5f806ca).
cc: @Vinsteri",Fixes illinois-ceesd/mirgecom#590,True,{}
pocl/pocl,https://github.com/pocl/pocl,1030,2022-01-31T04:24:00Z,2022-02-03T18:01:33Z,2022-02-03T18:02:13Z,MERGED,True,1,1,1,https://github.com/matthiasdiener,Fix value of CL_DEVICE_PCI_DOMAIN_ID_NV,1,[],https://github.com/pocl/pocl/pull/1030,https://github.com/matthiasdiener,3,https://github.com/pocl/pocl/pull/1030#issuecomment-1028141528,"This value was initially fixed by #917 but got reverted by #931 (specifically 5f806ca).
cc: @Vinsteri",A gentle ping for a review,True,{}
pocl/pocl,https://github.com/pocl/pocl,1032,2022-02-12T14:27:31Z,2022-02-14T15:42:01Z,2022-02-15T17:47:24Z,MERGED,True,10,7,5,https://github.com/trixirt,Trix/llvm 14 breakage,2,[],https://github.com/pocl/pocl/pull/1032,https://github.com/trixirt,1,https://github.com/pocl/pocl/pull/1032,fixes a couple of build breaks with llvm 14,fixes a couple of build breaks with llvm 14,True,{}
pocl/pocl,https://github.com/pocl/pocl,1032,2022-02-12T14:27:31Z,2022-02-14T15:42:01Z,2022-02-15T17:47:24Z,MERGED,True,10,7,5,https://github.com/trixirt,Trix/llvm 14 breakage,2,[],https://github.com/pocl/pocl/pull/1032,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/1032#issuecomment-1039317193,fixes a couple of build breaks with llvm 14,"Thanks, appreciated!",True,{}
pocl/pocl,https://github.com/pocl/pocl,1033,2022-02-27T04:28:36Z,2022-04-19T16:44:54Z,2022-04-20T19:55:57Z,MERGED,True,5,1,1,https://github.com/vrpascuzzi,Update TargetRegistry.h path for LLVM_MAJOR > 13,1,[],https://github.com/pocl/pocl/pull/1033,https://github.com/vrpascuzzi,1,https://github.com/pocl/pocl/pull/1033,"In LLVM 14.x, TargetRegistry.h was relocated from llvm/Support to llvm/MC.
This patch adds an LLVM_OLDER_THAN_14_0 check to pocl-ptx.gen.cc to accommodate the relocation.","In LLVM 14.x, TargetRegistry.h was relocated from llvm/Support to llvm/MC.
This patch adds an LLVM_OLDER_THAN_14_0 check to pocl-ptx.gen.cc to accommodate the relocation.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1033,2022-02-27T04:28:36Z,2022-04-19T16:44:54Z,2022-04-20T19:55:57Z,MERGED,True,5,1,1,https://github.com/vrpascuzzi,Update TargetRegistry.h path for LLVM_MAJOR > 13,1,[],https://github.com/pocl/pocl/pull/1033,https://github.com/franz,2,https://github.com/pocl/pocl/pull/1033#issuecomment-1083288728,"In LLVM 14.x, TargetRegistry.h was relocated from llvm/Support to llvm/MC.
This patch adds an LLVM_OLDER_THAN_14_0 check to pocl-ptx.gen.cc to accommodate the relocation.",Thanks. LGTM + the CUDA buildbot now successfully builds with LLVM 14 (though a few tests still fail).,True,{}
pocl/pocl,https://github.com/pocl/pocl,1037,2022-03-21T02:39:57Z,2022-04-20T08:36:18Z,2022-04-20T08:36:19Z,MERGED,True,4,4,4,https://github.com/s-barannikov,Remove redundant `const` qualifier on parameter declarations,1,[],https://github.com/pocl/pocl/pull/1037,https://github.com/s-barannikov,1,https://github.com/pocl/pocl/pull/1037,"Remove const qualifier on the declaration of the length parameter of pocl_*_supports_binary functions.
This silences clang-tidy and makes the code more consistent.","Remove const qualifier on the declaration of the length parameter of pocl_*_supports_binary functions.
This silences clang-tidy and makes the code more consistent.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1037,2022-03-21T02:39:57Z,2022-04-20T08:36:18Z,2022-04-20T08:36:19Z,MERGED,True,4,4,4,https://github.com/s-barannikov,Remove redundant `const` qualifier on parameter declarations,1,[],https://github.com/pocl/pocl/pull/1037,https://github.com/franz,2,https://github.com/pocl/pocl/pull/1037#issuecomment-1083287338,"Remove const qualifier on the declaration of the length parameter of pocl_*_supports_binary functions.
This silences clang-tidy and makes the code more consistent.",Thanks. LGTM and passes the buildbot tests.,True,{}
pocl/pocl,https://github.com/pocl/pocl,1040,2022-03-25T18:46:09Z,2022-04-20T10:46:48Z,2022-04-20T17:58:35Z,MERGED,True,9,6,1,https://github.com/isuruf,Fix freeing for devices that don't support cuMemHostRegister,1,[],https://github.com/pocl/pocl/pull/1040,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/1040,This fixes a bug we found in #890,This fixes a bug we found in #890,True,{}
pocl/pocl,https://github.com/pocl/pocl,1040,2022-03-25T18:46:09Z,2022-04-20T10:46:48Z,2022-04-20T17:58:35Z,MERGED,True,9,6,1,https://github.com/isuruf,Fix freeing for devices that don't support cuMemHostRegister,1,[],https://github.com/pocl/pocl/pull/1040,https://github.com/franz,2,https://github.com/pocl/pocl/pull/1040#issuecomment-1083241535,This fixes a bug we found in #890,LGTM + passes tests on CUDA buildbot,True,{}
pocl/pocl,https://github.com/pocl/pocl,1041,2022-03-28T18:23:48Z,2022-04-20T12:30:03Z,2022-04-20T12:34:57Z,MERGED,True,8,24,1,https://github.com/jansol,build: avoid duplicating prefix in install paths by using full paths,1,[],https://github.com/pocl/pocl/pull/1041,https://github.com/jansol,1,https://github.com/pocl/pocl/pull/1041,"When explicit full paths are provided for BINDIR, LIBDIR, etc, like is the case in Nix, they would get the prefix prepended to them regardless, which is wrong:
/nix/store/g2lx5mamf4dapv52w91r98c69vcc7glq-pocl-1.8
├── nix
│  └── store
│     └── g2lx5mamf4dapv52w91r98c69vcc7glq-pocl-1.8
│        ├── bin
│        │  └── poclcc
│        ├── include
│        │  └── CL
│        │     ├── cl.h
│        │     ├── cl2.hpp
│        │     ├── cl_d3d10.h
│        │     ├── cl_d3d11.h
│        │     ├── cl_dx9_media_sharing.h
│        │     ├── cl_dx9_media_sharing_intel.h
│        │     ├── cl_egl.h
│        │     ├── cl_ext.h
│        │     ├── cl_ext_intel.h
│        │     ├── cl_ext_pocl.h
│        │     ├── cl_gl.h
│        │     ├── cl_gl_ext.h
│        │     ├── cl_half.h
│        │     ├── cl_icd.h
│        │     ├── cl_platform.h
│        │     ├── cl_va_api_media_sharing_intel.h
│        │     ├── cl_version.h
│        │     └── opencl.h
│        └── lib
│           ├── libOpenCL.so -> libOpenCL.so.2
│           ├── libOpenCL.so.2 -> libOpenCL.so.2.9.0
│           ├── libOpenCL.so.2.9.0
│           ├── pkgconfig
│           │  └── pocl.pc
│           └── pocl
│              ├── libpocl-devices-basic.so
│              └── libpocl-devices-pthread.so
└── share
   └── pocl
      ├── include
      │  ├── _builtin_renames.h
      │  ├── _clang_opencl.h
      │  ├── _enable_all_exts.h
      │  ├── _kernel.h
      │  ├── _kernel_c.h
      │  ├── _kernel_constants.h
      │  ├── _libclang_versions_checks.h
      │  ├── opencl-c-base.h
      │  ├── opencl-c.h
      │  ├── pocl.h
      │  ├── pocl_device.h
      │  ├── pocl_image_types.h
      │  ├── pocl_spir.h
      │  └── pocl_types.h
      └── kernel-x86_64-unknown-linux-gnu-znver3.bc

Using the _FULL_ variants from GNUInstallDirs works correctly and is apparently also the recommended way to go on Windows despite the name (I haven't tried building on Windows with these changes though, so that still needs verifying):
/nix/store/iw0ss9qzddzghfw8zqwwdxcfkdvr4hq4-pocl-1.8
├── bin
│  └── poclcc
├── include
│  └── CL
│     ├── cl.h
│     ├── cl2.hpp
│     ├── cl_d3d10.h
│     ├── cl_d3d11.h
│     ├── cl_dx9_media_sharing.h
│     ├── cl_dx9_media_sharing_intel.h
│     ├── cl_egl.h
│     ├── cl_ext.h
│     ├── cl_ext_intel.h
│     ├── cl_ext_pocl.h
│     ├── cl_gl.h
│     ├── cl_gl_ext.h
│     ├── cl_half.h
│     ├── cl_icd.h
│     ├── cl_platform.h
│     ├── cl_va_api_media_sharing_intel.h
│     ├── cl_version.h
│     └── opencl.h
├── lib
│  ├── libOpenCL.so -> libOpenCL.so.2
│  ├── libOpenCL.so.2 -> libOpenCL.so.2.9.0
│  ├── libOpenCL.so.2.9.0
│  ├── pkgconfig
│  │  └── pocl.pc
│  └── pocl
│     ├── libpocl-devices-basic.so
│     └── libpocl-devices-pthread.so
└── share
   └── pocl
      ├── include
      │  ├── _builtin_renames.h
      │  ├── _clang_opencl.h
      │  ├── _enable_all_exts.h
      │  ├── _kernel.h
      │  ├── _kernel_c.h
      │  ├── _kernel_constants.h
      │  ├── _libclang_versions_checks.h
      │  ├── opencl-c-base.h
      │  ├── opencl-c.h
      │  ├── pocl.h
      │  ├── pocl_device.h
      │  ├── pocl_image_types.h
      │  ├── pocl_spir.h
      │  └── pocl_types.h
      └── kernel-x86_64-unknown-linux-gnu-znver3.bc

This also gets is part of the way towards more idiomatic CMake packaging as is demonstrated in https://github.com/alexreinking/SharedStaticStarter","When explicit full paths are provided for BINDIR, LIBDIR, etc, like is the case in Nix, they would get the prefix prepended to them regardless, which is wrong:
/nix/store/g2lx5mamf4dapv52w91r98c69vcc7glq-pocl-1.8
├── nix
│  └── store
│     └── g2lx5mamf4dapv52w91r98c69vcc7glq-pocl-1.8
│        ├── bin
│        │  └── poclcc
│        ├── include
│        │  └── CL
│        │     ├── cl.h
│        │     ├── cl2.hpp
│        │     ├── cl_d3d10.h
│        │     ├── cl_d3d11.h
│        │     ├── cl_dx9_media_sharing.h
│        │     ├── cl_dx9_media_sharing_intel.h
│        │     ├── cl_egl.h
│        │     ├── cl_ext.h
│        │     ├── cl_ext_intel.h
│        │     ├── cl_ext_pocl.h
│        │     ├── cl_gl.h
│        │     ├── cl_gl_ext.h
│        │     ├── cl_half.h
│        │     ├── cl_icd.h
│        │     ├── cl_platform.h
│        │     ├── cl_va_api_media_sharing_intel.h
│        │     ├── cl_version.h
│        │     └── opencl.h
│        └── lib
│           ├── libOpenCL.so -> libOpenCL.so.2
│           ├── libOpenCL.so.2 -> libOpenCL.so.2.9.0
│           ├── libOpenCL.so.2.9.0
│           ├── pkgconfig
│           │  └── pocl.pc
│           └── pocl
│              ├── libpocl-devices-basic.so
│              └── libpocl-devices-pthread.so
└── share
   └── pocl
      ├── include
      │  ├── _builtin_renames.h
      │  ├── _clang_opencl.h
      │  ├── _enable_all_exts.h
      │  ├── _kernel.h
      │  ├── _kernel_c.h
      │  ├── _kernel_constants.h
      │  ├── _libclang_versions_checks.h
      │  ├── opencl-c-base.h
      │  ├── opencl-c.h
      │  ├── pocl.h
      │  ├── pocl_device.h
      │  ├── pocl_image_types.h
      │  ├── pocl_spir.h
      │  └── pocl_types.h
      └── kernel-x86_64-unknown-linux-gnu-znver3.bc

Using the _FULL_ variants from GNUInstallDirs works correctly and is apparently also the recommended way to go on Windows despite the name (I haven't tried building on Windows with these changes though, so that still needs verifying):
/nix/store/iw0ss9qzddzghfw8zqwwdxcfkdvr4hq4-pocl-1.8
├── bin
│  └── poclcc
├── include
│  └── CL
│     ├── cl.h
│     ├── cl2.hpp
│     ├── cl_d3d10.h
│     ├── cl_d3d11.h
│     ├── cl_dx9_media_sharing.h
│     ├── cl_dx9_media_sharing_intel.h
│     ├── cl_egl.h
│     ├── cl_ext.h
│     ├── cl_ext_intel.h
│     ├── cl_ext_pocl.h
│     ├── cl_gl.h
│     ├── cl_gl_ext.h
│     ├── cl_half.h
│     ├── cl_icd.h
│     ├── cl_platform.h
│     ├── cl_va_api_media_sharing_intel.h
│     ├── cl_version.h
│     └── opencl.h
├── lib
│  ├── libOpenCL.so -> libOpenCL.so.2
│  ├── libOpenCL.so.2 -> libOpenCL.so.2.9.0
│  ├── libOpenCL.so.2.9.0
│  ├── pkgconfig
│  │  └── pocl.pc
│  └── pocl
│     ├── libpocl-devices-basic.so
│     └── libpocl-devices-pthread.so
└── share
   └── pocl
      ├── include
      │  ├── _builtin_renames.h
      │  ├── _clang_opencl.h
      │  ├── _enable_all_exts.h
      │  ├── _kernel.h
      │  ├── _kernel_c.h
      │  ├── _kernel_constants.h
      │  ├── _libclang_versions_checks.h
      │  ├── opencl-c-base.h
      │  ├── opencl-c.h
      │  ├── pocl.h
      │  ├── pocl_device.h
      │  ├── pocl_image_types.h
      │  ├── pocl_spir.h
      │  └── pocl_types.h
      └── kernel-x86_64-unknown-linux-gnu-znver3.bc

This also gets is part of the way towards more idiomatic CMake packaging as is demonstrated in https://github.com/alexreinking/SharedStaticStarter",True,{}
pocl/pocl,https://github.com/pocl/pocl,1041,2022-03-28T18:23:48Z,2022-04-20T12:30:03Z,2022-04-20T12:34:57Z,MERGED,True,8,24,1,https://github.com/jansol,build: avoid duplicating prefix in install paths by using full paths,1,[],https://github.com/pocl/pocl/pull/1041,https://github.com/franz,2,https://github.com/pocl/pocl/pull/1041#issuecomment-1083274484,"When explicit full paths are provided for BINDIR, LIBDIR, etc, like is the case in Nix, they would get the prefix prepended to them regardless, which is wrong:
/nix/store/g2lx5mamf4dapv52w91r98c69vcc7glq-pocl-1.8
├── nix
│  └── store
│     └── g2lx5mamf4dapv52w91r98c69vcc7glq-pocl-1.8
│        ├── bin
│        │  └── poclcc
│        ├── include
│        │  └── CL
│        │     ├── cl.h
│        │     ├── cl2.hpp
│        │     ├── cl_d3d10.h
│        │     ├── cl_d3d11.h
│        │     ├── cl_dx9_media_sharing.h
│        │     ├── cl_dx9_media_sharing_intel.h
│        │     ├── cl_egl.h
│        │     ├── cl_ext.h
│        │     ├── cl_ext_intel.h
│        │     ├── cl_ext_pocl.h
│        │     ├── cl_gl.h
│        │     ├── cl_gl_ext.h
│        │     ├── cl_half.h
│        │     ├── cl_icd.h
│        │     ├── cl_platform.h
│        │     ├── cl_va_api_media_sharing_intel.h
│        │     ├── cl_version.h
│        │     └── opencl.h
│        └── lib
│           ├── libOpenCL.so -> libOpenCL.so.2
│           ├── libOpenCL.so.2 -> libOpenCL.so.2.9.0
│           ├── libOpenCL.so.2.9.0
│           ├── pkgconfig
│           │  └── pocl.pc
│           └── pocl
│              ├── libpocl-devices-basic.so
│              └── libpocl-devices-pthread.so
└── share
   └── pocl
      ├── include
      │  ├── _builtin_renames.h
      │  ├── _clang_opencl.h
      │  ├── _enable_all_exts.h
      │  ├── _kernel.h
      │  ├── _kernel_c.h
      │  ├── _kernel_constants.h
      │  ├── _libclang_versions_checks.h
      │  ├── opencl-c-base.h
      │  ├── opencl-c.h
      │  ├── pocl.h
      │  ├── pocl_device.h
      │  ├── pocl_image_types.h
      │  ├── pocl_spir.h
      │  └── pocl_types.h
      └── kernel-x86_64-unknown-linux-gnu-znver3.bc

Using the _FULL_ variants from GNUInstallDirs works correctly and is apparently also the recommended way to go on Windows despite the name (I haven't tried building on Windows with these changes though, so that still needs verifying):
/nix/store/iw0ss9qzddzghfw8zqwwdxcfkdvr4hq4-pocl-1.8
├── bin
│  └── poclcc
├── include
│  └── CL
│     ├── cl.h
│     ├── cl2.hpp
│     ├── cl_d3d10.h
│     ├── cl_d3d11.h
│     ├── cl_dx9_media_sharing.h
│     ├── cl_dx9_media_sharing_intel.h
│     ├── cl_egl.h
│     ├── cl_ext.h
│     ├── cl_ext_intel.h
│     ├── cl_ext_pocl.h
│     ├── cl_gl.h
│     ├── cl_gl_ext.h
│     ├── cl_half.h
│     ├── cl_icd.h
│     ├── cl_platform.h
│     ├── cl_va_api_media_sharing_intel.h
│     ├── cl_version.h
│     └── opencl.h
├── lib
│  ├── libOpenCL.so -> libOpenCL.so.2
│  ├── libOpenCL.so.2 -> libOpenCL.so.2.9.0
│  ├── libOpenCL.so.2.9.0
│  ├── pkgconfig
│  │  └── pocl.pc
│  └── pocl
│     ├── libpocl-devices-basic.so
│     └── libpocl-devices-pthread.so
└── share
   └── pocl
      ├── include
      │  ├── _builtin_renames.h
      │  ├── _clang_opencl.h
      │  ├── _enable_all_exts.h
      │  ├── _kernel.h
      │  ├── _kernel_c.h
      │  ├── _kernel_constants.h
      │  ├── _libclang_versions_checks.h
      │  ├── opencl-c-base.h
      │  ├── opencl-c.h
      │  ├── pocl.h
      │  ├── pocl_device.h
      │  ├── pocl_image_types.h
      │  ├── pocl_spir.h
      │  └── pocl_types.h
      └── kernel-x86_64-unknown-linux-gnu-znver3.bc

This also gets is part of the way towards more idiomatic CMake packaging as is demonstrated in https://github.com/alexreinking/SharedStaticStarter","Thanks. LGTM, and passes make install + internal tests on the buildbot.

I haven't tried building on Windows with these changes though

That is almost certainly broken for many unrelated reasons...

more idiomatic CMake packaging

Yeah this part of CMakeLists is likely one of the oldest, written around 2014 when CMake 3.0 was still fresh.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1042,2022-03-30T03:41:36Z,2022-06-01T23:30:59Z,2022-06-01T23:31:00Z,CLOSED,False,16,5,1,https://github.com/nchristensen,Check cl_version.h for CL version,1,[],https://github.com/pocl/pocl/pull/1042,https://github.com/nchristensen,1,https://github.com/pocl/pocl/pull/1042,The CL_VERSION_X_X symbols appear live in cl_version.h (see https://github.com/KhronosGroup/OpenCL-Headers/blob/main/CL/cl_version.h). With this change cl_version.h is checked for the CL versions if it is present.,The CL_VERSION_X_X symbols appear live in cl_version.h (see https://github.com/KhronosGroup/OpenCL-Headers/blob/main/CL/cl_version.h). With this change cl_version.h is checked for the CL versions if it is present.,True,{}
pocl/pocl,https://github.com/pocl/pocl,1042,2022-03-30T03:41:36Z,2022-06-01T23:30:59Z,2022-06-01T23:31:00Z,CLOSED,False,16,5,1,https://github.com/nchristensen,Check cl_version.h for CL version,1,[],https://github.com/pocl/pocl/pull/1042,https://github.com/franz,2,https://github.com/pocl/pocl/pull/1042#issuecomment-1083281833,The CL_VERSION_X_X symbols appear live in cl_version.h (see https://github.com/KhronosGroup/OpenCL-Headers/blob/main/CL/cl_version.h). With this change cl_version.h is checked for the CL versions if it is present.,"Hello, and thanks for contribution. Out of curiosity, did you run into an issue with the current CMake code, on some platform ? AFAICT, CL/opencl.h should include CL/cl.h which in turn includes CL/cl_version.h.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1042,2022-03-30T03:41:36Z,2022-06-01T23:30:59Z,2022-06-01T23:31:00Z,CLOSED,False,16,5,1,https://github.com/nchristensen,Check cl_version.h for CL version,1,[],https://github.com/pocl/pocl/pull/1042,https://github.com/nchristensen,3,https://github.com/pocl/pocl/pull/1042#issuecomment-1083301010,The CL_VERSION_X_X symbols appear live in cl_version.h (see https://github.com/KhronosGroup/OpenCL-Headers/blob/main/CL/cl_version.h). With this change cl_version.h is checked for the CL versions if it is present.,"Yes, I was building poc on RHEL8 with cmake 3.21.3 and the ocl-icd package from conda-forge (https://anaconda.org/conda-forge/ocl-icd). In the build process it found CL/opencl.h in the conda environment but complained it couldn't find an OpenCL version until I forced it to look at CL/cl_version.h.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1042,2022-03-30T03:41:36Z,2022-06-01T23:30:59Z,2022-06-01T23:31:00Z,CLOSED,False,16,5,1,https://github.com/nchristensen,Check cl_version.h for CL version,1,[],https://github.com/pocl/pocl/pull/1042,https://github.com/franz,4,https://github.com/pocl/pocl/pull/1042#issuecomment-1084535460,The CL_VERSION_X_X symbols appear live in cl_version.h (see https://github.com/KhronosGroup/OpenCL-Headers/blob/main/CL/cl_version.h). With this change cl_version.h is checked for the CL versions if it is present.,"Can you check in the conda environment if the CL/opencl.h includes CL/cl.h, and cl.h includes CL/cl_version.h ? if that is the case, probably check_symbol_exists can't find the header because the include path doesn't contain the conda include directory. In that case the solution is to add the full include path explicitly to the check_symbol_exists macro.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1042,2022-03-30T03:41:36Z,2022-06-01T23:30:59Z,2022-06-01T23:31:00Z,CLOSED,False,16,5,1,https://github.com/nchristensen,Check cl_version.h for CL version,1,[],https://github.com/pocl/pocl/pull/1042,https://github.com/nchristensen,5,https://github.com/pocl/pocl/pull/1042#issuecomment-1144245074,The CL_VERSION_X_X symbols appear live in cl_version.h (see https://github.com/KhronosGroup/OpenCL-Headers/blob/main/CL/cl_version.h). With this change cl_version.h is checked for the CL versions if it is present.,Closing since this is most likely an issue with the include paths and I haven't needed to rebuild pocl in a while. If I encounter this problem again and find it isn't a configuration problem I will re-open this.,True,{}
pocl/pocl,https://github.com/pocl/pocl,1043,2022-03-30T16:33:57Z,2022-04-22T13:01:35Z,2022-04-22T13:01:36Z,MERGED,True,10532,10479,52,https://github.com/franz,test fixes + opencl.hpp,9,[],https://github.com/pocl/pocl/pull/1043,https://github.com/franz,1,https://github.com/pocl/pocl/pull/1043,"small fixes in tests + an update by jansol, updates headers to latest from Khronos (cl2.hpp was renamed to opencl.hpp).","small fixes in tests + an update by jansol, updates headers to latest from Khronos (cl2.hpp was renamed to opencl.hpp).",True,{}
pocl/pocl,https://github.com/pocl/pocl,1044,2022-03-30T20:21:35Z,2022-04-02T12:42:40Z,2022-04-02T12:42:46Z,CLOSED,False,1,0,1,https://github.com/Ayrtat,pocl for nm,1,[],https://github.com/pocl/pocl/pull/1044,https://github.com/Ayrtat,1,https://github.com/pocl/pocl/pull/1044,,,True,{}
pocl/pocl,https://github.com/pocl/pocl,1045,2022-04-05T20:02:41Z,2022-04-25T10:57:03Z,2022-04-25T10:57:03Z,MERGED,True,103,0,3,https://github.com/isuruf,Use __nv_rsqrt for rsqrt,2,[],https://github.com/pocl/pocl/pull/1045,https://github.com/isuruf,1,https://github.com/pocl/pocl/pull/1045,cc @inducer,cc @inducer,True,{'THUMBS_UP': ['https://github.com/inducer']}
pocl/pocl,https://github.com/pocl/pocl,1046,2022-04-10T00:06:39Z,2022-04-25T17:06:42Z,2022-04-25T17:11:23Z,MERGED,True,5,0,1,https://github.com/matthiasdiener,CUDA: Set max_parameter_size to correct value,2,[],https://github.com/pocl/pocl/pull/1046,https://github.com/matthiasdiener,1,https://github.com/pocl/pocl/pull/1046,"This limit is imposed by ptxas, and is the same value
returned by NVidia CL.","This limit is imposed by ptxas, and is the same value
returned by NVidia CL.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1046,2022-04-10T00:06:39Z,2022-04-25T17:06:42Z,2022-04-25T17:11:23Z,MERGED,True,5,0,1,https://github.com/matthiasdiener,CUDA: Set max_parameter_size to correct value,2,[],https://github.com/pocl/pocl/pull/1046,https://github.com/matthiasdiener,2,https://github.com/pocl/pocl/pull/1046#issuecomment-1096970203,"This limit is imposed by ptxas, and is the same value
returned by NVidia CL.","Related question: What do we do with the 1024-byte limit on the pthread device?
Edit: As a datapoint, Apple CL on CPU has a 4096 byte limit.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1050,2022-04-24T16:31:47Z,2022-05-07T16:19:38Z,2022-05-07T16:19:38Z,CLOSED,False,1,6,1,https://github.com/s-barannikov,Don't call pocl_<device>_init_ops twice,1,[],https://github.com/pocl/pocl/pull/1050,https://github.com/s-barannikov,1,https://github.com/pocl/pocl/pull/1050,"If a device driver allocates resources in pocl_<device>_init_ops,
calling it twice can result in a memory leak.
Also, don't append the path separator twice when building the path
to the device's DSO.","If a device driver allocates resources in pocl_<device>_init_ops,
calling it twice can result in a memory leak.
Also, don't append the path separator twice when building the path
to the device's DSO.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1050,2022-04-24T16:31:47Z,2022-05-07T16:19:38Z,2022-05-07T16:19:38Z,CLOSED,False,1,6,1,https://github.com/s-barannikov,Don't call pocl_<device>_init_ops twice,1,[],https://github.com/pocl/pocl/pull/1050,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/1050#issuecomment-1109531109,"If a device driver allocates resources in pocl_<device>_init_ops,
calling it twice can result in a memory leak.
Also, don't append the path separator twice when building the path
to the device's DSO.",LGTM. Can you add yourself to CREDITS if you are not there yet?,True,{}
pocl/pocl,https://github.com/pocl/pocl,1051,2022-04-26T15:16:40Z,2022-05-02T07:37:33Z,2022-05-02T07:37:34Z,MERGED,True,2682,772,81,https://github.com/franz,OpenCL 3.0 support,55,[],https://github.com/pocl/pocl/pull/1051,https://github.com/franz,1,https://github.com/pocl/pocl/pull/1051,"Changes:

Platform is now 3.0
CPU device is 3.0 if LLVM >= 14 otherwise it's 1.2
other devices are unchanged (1.2)
OpenCL CTS is upgraded to 3.0
documentation updated

... some workarounds were required for CPU device to pass CTS, these are only enabled when using -DENABLE_CONFORMANCE=ON CMake option.","Changes:

Platform is now 3.0
CPU device is 3.0 if LLVM >= 14 otherwise it's 1.2
other devices are unchanged (1.2)
OpenCL CTS is upgraded to 3.0
documentation updated

... some workarounds were required for CPU device to pass CTS, these are only enabled when using -DENABLE_CONFORMANCE=ON CMake option.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1051,2022-04-26T15:16:40Z,2022-05-02T07:37:33Z,2022-05-02T07:37:34Z,MERGED,True,2682,772,81,https://github.com/franz,OpenCL 3.0 support,55,[],https://github.com/pocl/pocl/pull/1051,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/1051#issuecomment-1111790845,"Changes:

Platform is now 3.0
CPU device is 3.0 if LLVM >= 14 otherwise it's 1.2
other devices are unchanged (1.2)
OpenCL CTS is upgraded to 3.0
documentation updated

... some workarounds were required for CPU device to pass CTS, these are only enabled when using -DENABLE_CONFORMANCE=ON CMake option.","Fails to build here:
                 from /home/visit0r/src/pocl/lib/CL/clGetPlatformInfo.c:24:
/home/visit0r/src/pocl/include/CL/cl.h:936:3: error: initializer element is not constant
   ((((major) & CL_VERSION_MAJOR_MASK)                             \
   ^
/home/visit0r/src/pocl/lib/CL/clGetPlatformInfo.c:133:7: note: in expansion of macro ‘CL_MAKE_VERSION’
     = CL_MAKE_VERSION ((cl_uint)(POCL_CL_VERSION[0] - '0'),",True,{}
pocl/pocl,https://github.com/pocl/pocl,1051,2022-04-26T15:16:40Z,2022-05-02T07:37:33Z,2022-05-02T07:37:34Z,MERGED,True,2682,772,81,https://github.com/franz,OpenCL 3.0 support,55,[],https://github.com/pocl/pocl/pull/1051,https://github.com/pjaaskel,3,https://github.com/pocl/pocl/pull/1051#issuecomment-1112965899,"Changes:

Platform is now 3.0
CPU device is 3.0 if LLVM >= 14 otherwise it's 1.2
other devices are unchanged (1.2)
OpenCL CTS is upgraded to 3.0
documentation updated

... some workarounds were required for CPU device to pass CTS, these are only enabled when using -DENABLE_CONFORMANCE=ON CMake option.","Vulkan build fails:
[ 52%] Building C object lib/CL/devices/vulkan/CMakeFiles/pocl-devices-vulkan.dir/pocl-vulkan.c.o
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c: In function ‘pocl_vulkan_init’:
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c:1098:6: error: ‘struct _cl_device_id’ has no member named ‘consumes_il_directly’
   dev->consumes_il_directly = CL_TRUE;
      ^~
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c: In function ‘pocl_vulkan_setup_kernel_arguments’:
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c:2239:25: warning: assignment from incompatible pointer type [-Wincompatible-pointer-types]
       shader_info.pCode = program->binaries[dev_i];
                         ^
lib/CL/devices/vulkan/CMakeFiles/pocl-devices-vulkan.dir/build.make:81: recipe for target 'lib/CL/devices/vulkan/CMakeFiles/pocl-devices-vulkan.dir/pocl-vulkan.c.o' failed",True,{}
pocl/pocl,https://github.com/pocl/pocl,1051,2022-04-26T15:16:40Z,2022-05-02T07:37:33Z,2022-05-02T07:37:34Z,MERGED,True,2682,772,81,https://github.com/franz,OpenCL 3.0 support,55,[],https://github.com/pocl/pocl/pull/1051,https://github.com/pjaaskel,4,https://github.com/pocl/pocl/pull/1051#issuecomment-1112983987,"Changes:

Platform is now 3.0
CPU device is 3.0 if LLVM >= 14 otherwise it's 1.2
other devices are unchanged (1.2)
OpenCL CTS is upgraded to 3.0
documentation updated

... some workarounds were required for CPU device to pass CTS, these are only enabled when using -DENABLE_CONFORMANCE=ON CMake option.","Also the conformance tests fail to build. Perhaps due to -Wall?
test-pr-cmake-llvm-13-build/examples/conformance/src/conformance/test_common/harness/featureHelpers.cpp:27:20: error: missing initializer for member ‘OpenCLCFeatures::supports__opencl_c_atomic_order_acq_rel’ [-Werror=missing-field-initializers]
     features = { 0 };
                    ^",True,{}
pocl/pocl,https://github.com/pocl/pocl,1051,2022-04-26T15:16:40Z,2022-05-02T07:37:33Z,2022-05-02T07:37:34Z,MERGED,True,2682,772,81,https://github.com/franz,OpenCL 3.0 support,55,[],https://github.com/pocl/pocl/pull/1051,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/1051#issuecomment-1112989727,"Changes:

Platform is now 3.0
CPU device is 3.0 if LLVM >= 14 otherwise it's 1.2
other devices are unchanged (1.2)
OpenCL CTS is upgraded to 3.0
documentation updated

... some workarounds were required for CPU device to pass CTS, these are only enabled when using -DENABLE_CONFORMANCE=ON CMake option.","Also conformance suite fails at linkage:
[  6%] Linking CXX executable test_api
CMakeFiles/test_api.dir/test_api_consistency.cpp.o: In function `test_consistency_2d_image_from_buffer(_cl_device_id*, _cl_context*, _cl_command_
queue*, int)':
/home/visit0r/src/pocl/test-pr-cmake-llvm-13-build/examples/conformance/src/conformance/test_conformance/api/test_api_consistency.cpp:770: undefi
ned reference to `clCreateImageWithProperties'
CMakeFiles/test_api.dir/test_api_consistency.cpp.o: In function `test_consistency_il_programs(_cl_device_id*, _cl_context*, _cl_command_queue*, i
nt)':
/home/visit0r/src/pocl/test-pr-cmake-llvm-13-build/examples/conformance/src/conformance/test_conformance/api/test_api_consistency.cpp:974: undefi ned reference to `clSetProgramSpecializationConstant'


Perhaps due to me having a non 3.0 ICD. How should we handle this? Refuse to enable the conformance suite if that's detected?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1051,2022-04-26T15:16:40Z,2022-05-02T07:37:33Z,2022-05-02T07:37:34Z,MERGED,True,2682,772,81,https://github.com/franz,OpenCL 3.0 support,55,[],https://github.com/pocl/pocl/pull/1051,https://github.com/franz,6,https://github.com/pocl/pocl/pull/1051#issuecomment-1113058862,"Changes:

Platform is now 3.0
CPU device is 3.0 if LLVM >= 14 otherwise it's 1.2
other devices are unchanged (1.2)
OpenCL CTS is upgraded to 3.0
documentation updated

... some workarounds were required for CPU device to pass CTS, these are only enabled when using -DENABLE_CONFORMANCE=ON CMake option.","I cannot reproduce ""error: missing initializer for member ‘OpenCLCFeatures::supports__opencl_c_atomic_order_acq_rel"" with GCC 6.5.0 and 7.5.0, are you using Clang or something else ?
Yes it fails to build because of the too old ICD. We can either disable the CTS completely, or i can reverse the commit ""Disable & remove old CTS (1.2)"" and keep both old & new CTS in CMake (it's quite messy though).",True,{}
pocl/pocl,https://github.com/pocl/pocl,1054,2022-05-13T12:29:26Z,2022-05-13T15:55:27Z,2022-05-13T15:55:27Z,MERGED,True,1,1,1,https://github.com/karihepola,Replace LLVMGetCalledFunctionType() with getFunctionType() to fix cas…,1,[],https://github.com/pocl/pocl/pull/1054,https://github.com/karihepola,1,https://github.com/pocl/pocl/pull/1054,Replace LLVMGetCalledFunctionType() with getFunctionType() to fix casting related crash with LLVM 14,Replace LLVMGetCalledFunctionType() with getFunctionType() to fix casting related crash with LLVM 14,True,{}
pocl/pocl,https://github.com/pocl/pocl,1055,2022-05-14T07:08:24Z,,2022-05-14T07:08:24Z,OPEN,False,101,11,9,https://github.com/pjaaskel,Proof-of-concept cl_ext_device_side_abort impl. for CPU devices,1,[],https://github.com/pocl/pocl/pull/1055,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/1055,https://github.com/parmance/OpenCL-Docs/blob/abort/extensions/cl_ext_device_side_abort.asciidoc,https://github.com/parmance/OpenCL-Docs/blob/abort/extensions/cl_ext_device_side_abort.asciidoc,True,{}
pocl/pocl,https://github.com/pocl/pocl,1056,2022-05-20T13:16:03Z,,2022-05-25T15:15:00Z,OPEN,False,686,255,2,https://github.com/RABijl,Vulkan fixes for testing with multiple devices,1,[],https://github.com/pocl/pocl/pull/1056,https://github.com/RABijl,1,https://github.com/pocl/pocl/pull/1056,plus disables compiler options in vulkan driver,plus disables compiler options in vulkan driver,True,{}
pocl/pocl,https://github.com/pocl/pocl,1056,2022-05-20T13:16:03Z,,2022-05-25T15:15:00Z,OPEN,False,686,255,2,https://github.com/RABijl,Vulkan fixes for testing with multiple devices,1,[],https://github.com/pocl/pocl/pull/1056,https://github.com/pjaaskel,2,https://github.com/pocl/pocl/pull/1056#issuecomment-1134212132,plus disables compiler options in vulkan driver,"Fails to build:
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c: In function ‘pocl_vulkan_init’:
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c:1080:3: error: unknown type name ‘VkPhysicalDeviceShaderAtomicInt64Features’; did you mean ‘VkPhysicalDeviceShaderAtomicInt64FeaturesKHR’?
   VkPhysicalDeviceShaderAtomicInt64Features atomic64b_features
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   VkPhysicalDeviceShaderAtomicInt64FeaturesKHR
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c:1081:11: error: ‘VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES’ undeclared (first use in this function); did you mean ‘VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR’?
       = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, 0 };
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c:1081:11: note: each undeclared identifier is reported only once for each function it appears in
/home/visit0r/src/pocl/lib/CL/devices/vulkan/pocl-vulkan.c:1081:75: warning: excess elements in scalar initializer
       = { VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES, 0 };
                                                                           ^
...",True,{}
pocl/pocl,https://github.com/pocl/pocl,1056,2022-05-20T13:16:03Z,,2022-05-25T15:15:00Z,OPEN,False,686,255,2,https://github.com/RABijl,Vulkan fixes for testing with multiple devices,1,[],https://github.com/pocl/pocl/pull/1056,https://github.com/jansol,3,https://github.com/pocl/pocl/pull/1056#issuecomment-1134689157,plus disables compiler options in vulkan driver,Sounds like your vulkan headers might be too old. VkPhysicalDeviceShaderAtomicInt64Features seems to be a Vulkan 1.2 feature.,True,{}
pocl/pocl,https://github.com/pocl/pocl,1056,2022-05-20T13:16:03Z,,2022-05-25T15:15:00Z,OPEN,False,686,255,2,https://github.com/RABijl,Vulkan fixes for testing with multiple devices,1,[],https://github.com/pocl/pocl/pull/1056,https://github.com/franz,4,https://github.com/pocl/pocl/pull/1056#issuecomment-1137257125,plus disables compiler options in vulkan driver,"This seems like one of my older commits. I have a branch with a few more vulkan fixes, that should also build with vulkan down to 1.1, but i'm not sure if its OK to push into master before release. OTOH vulkan was not in the previous release. @pjaaskel  what do you think ?",True,{}
pocl/pocl,https://github.com/pocl/pocl,1056,2022-05-20T13:16:03Z,,2022-05-25T15:15:00Z,OPEN,False,686,255,2,https://github.com/RABijl,Vulkan fixes for testing with multiple devices,1,[],https://github.com/pocl/pocl/pull/1056,https://github.com/pjaaskel,5,https://github.com/pocl/pocl/pull/1056#issuecomment-1137422886,plus disables compiler options in vulkan driver,Please just send a PR and I will pull it to master if it passes my local test envs. We can also pull it to 3.0 since like you said there shouldn't be regressions as it wasn't there before :),True,{}
pocl/pocl,https://github.com/pocl/pocl,1057,2022-05-20T13:28:00Z,,2022-05-20T14:16:33Z,OPEN,False,4,1,1,https://github.com/RABijl,throw assert error if extension string is too long,1,[],https://github.com/pocl/pocl/pull/1057,https://github.com/RABijl,1,https://github.com/pocl/pocl/pull/1057,Add throw assert error if result of pocl_cl_name_version_to_str does not fit in buffer,Add throw assert error if result of pocl_cl_name_version_to_str does not fit in buffer,True,{}
pocl/pocl,https://github.com/pocl/pocl,1058,2022-05-25T18:19:22Z,,2022-06-02T18:28:06Z,OPEN,False,2,6,2,https://github.com/s-barannikov,Don't call pocl_<device>_init_ops twice,1,[],https://github.com/pocl/pocl/pull/1058,https://github.com/s-barannikov,1,https://github.com/pocl/pocl/pull/1058,"If a device driver allocates resources in pocl_<device>_init_ops,
calling it twice can result in a memory leak.
Also, don't append the path separator twice when building the path
to the device's DSO.
This is a clone of #1050 which was closed because I accidently removed the fork^^
Also added myself to the credits list, as was suggested.","If a device driver allocates resources in pocl_<device>_init_ops,
calling it twice can result in a memory leak.
Also, don't append the path separator twice when building the path
to the device's DSO.
This is a clone of #1050 which was closed because I accidently removed the fork^^
Also added myself to the credits list, as was suggested.",True,{}
pocl/pocl,https://github.com/pocl/pocl,1059,2022-05-26T08:26:24Z,,2022-05-26T08:26:24Z,OPEN,False,426,14,11,https://github.com/pjaaskel,cl_ext_relaxed_printf_address_space for CPUs,1,[],https://github.com/pocl/pocl/pull/1059,https://github.com/pjaaskel,1,https://github.com/pocl/pocl/pull/1059,"Implements the relaxed printf AS extension for flat address space targets (read: CPUs).  Supporting disjoint AS targets would require a bit more work.
The extension is here.","Implements the relaxed printf AS extension for flat address space targets (read: CPUs).  Supporting disjoint AS targets would require a bit more work.
The extension is here.",True,{}
