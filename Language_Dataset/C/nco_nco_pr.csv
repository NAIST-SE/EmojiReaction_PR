nco/nco,https://github.com/nco/nco,25,2016-02-27T18:01:57Z,2016-02-27T19:54:31Z,2016-02-27T20:11:28Z,MERGED,True,16,16,9,https://github.com/sebastic,Fix various typos.,1,[],https://github.com/nco/nco/pull/25,https://github.com/sebastic,1,https://github.com/nco/nco/pull/25,"The lintian QA reported some spelling errors for NCO 4.5.5:

doesnt -> doesn't
existance -> existence
mamory -> memory
missmatch -> mismatch
occuring -> occurring
Refrence -> Reference

lintian also reported missing manpages for ncdiff & ncwa, but this PR only fixes the typos.","The lintian QA reported some spelling errors for NCO 4.5.5:

doesnt -> doesn't
existance -> existence
mamory -> memory
missmatch -> mismatch
occuring -> occurring
Refrence -> Reference

lintian also reported missing manpages for ncdiff & ncwa, but this PR only fixes the typos.",True,{}
nco/nco,https://github.com/nco/nco,26,2016-08-07T10:53:36Z,2016-08-07T15:38:07Z,2016-08-07T15:38:45Z,MERGED,True,2,2,2,https://github.com/sebastic,Fix spelling errors.,1,[],https://github.com/nco/nco/pull/26,https://github.com/sebastic,1,https://github.com/nco/nco/pull/26,"These spelling errors were reported by the lintian QA tool for the Debian package build:
rquested    -> requested
specifiying -> specifying","These spelling errors were reported by the lintian QA tool for the Debian package build:
rquested    -> requested
specifiying -> specifying",True,{}
nco/nco,https://github.com/nco/nco,27,2016-09-13T07:58:35Z,2016-09-14T03:24:39Z,2016-09-14T03:24:39Z,CLOSED,False,341,63,4,https://github.com/FlyingWithJerome,Add support to the new NCO parameter syntax,7,[],https://github.com/nco/nco/pull/27,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/27,,,True,{}
nco/nco,https://github.com/nco/nco,27,2016-09-13T07:58:35Z,2016-09-14T03:24:39Z,2016-09-14T03:24:39Z,CLOSED,False,341,63,4,https://github.com/FlyingWithJerome,Add support to the new NCO parameter syntax,7,[],https://github.com/nco/nco/pull/27,https://github.com/czender,2,https://github.com/nco/nco/pull/27#issuecomment-246744323,,"@FlyingWithJerome these mods fail the automatic Travis CI check (see above). Travis builds and checks NCO with gcc, clang, and g++. gcc and clang pass, g++ fails. You have used syntax somewhere that violates C++ rules. Please only use C99 code that does not violate C++ rules. The links above show exactly where the problem is. Please resubmit a pull request once this is fixed.
Thanks!",True,{}
nco/nco,https://github.com/nco/nco,27,2016-09-13T07:58:35Z,2016-09-14T03:24:39Z,2016-09-14T03:24:39Z,CLOSED,False,341,63,4,https://github.com/FlyingWithJerome,Add support to the new NCO parameter syntax,7,[],https://github.com/nco/nco/pull/27,https://github.com/FlyingWithJerome,3,https://github.com/nco/nco/pull/27#issuecomment-246894700,,"@czender  I just realized that the problem might be the different standards on library functions in C and C++:
I used a library function strchr(), which returns a string in C; but C++ will return a constant string.",True,{}
nco/nco,https://github.com/nco/nco,28,2016-09-14T03:26:07Z,2016-09-14T16:30:04Z,2016-09-14T16:31:16Z,MERGED,True,341,63,4,https://github.com/FlyingWithJerome,Add support to the new NCO parameter syntax (Revised),7,[],https://github.com/nco/nco/pull/28,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/28,,,True,{}
nco/nco,https://github.com/nco/nco,28,2016-09-14T03:26:07Z,2016-09-14T16:30:04Z,2016-09-14T16:31:16Z,MERGED,True,341,63,4,https://github.com/FlyingWithJerome,Add support to the new NCO parameter syntax (Revised),7,[],https://github.com/nco/nco/pull/28,https://github.com/czender,2,https://github.com/nco/nco/pull/28#issuecomment-247072760,,"Merged! good job, Jerome. Please pay attention to any updates of this code I make in the near future to improve compliance with NCO coding style. Mostly it will be renaming and whitespace.",True,{}
nco/nco,https://github.com/nco/nco,30,2016-09-23T16:22:55Z,2016-09-23T16:41:35Z,2016-09-23T16:41:40Z,MERGED,True,116,137,4,https://github.com/FlyingWithJerome,"Coding style, memory leak, user-defined delimiter",1,[],https://github.com/nco/nco/pull/30,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/30,,,True,{}
nco/nco,https://github.com/nco/nco,30,2016-09-23T16:22:55Z,2016-09-23T16:41:35Z,2016-09-23T16:41:40Z,MERGED,True,116,137,4,https://github.com/FlyingWithJerome,"Coding style, memory leak, user-defined delimiter",1,[],https://github.com/nco/nco/pull/30,https://github.com/czender,2,https://github.com/nco/nco/pull/30#issuecomment-249242097,,"Thanks, Jerome, I look forward to trying these new features.",True,{}
nco/nco,https://github.com/nco/nco,31,2016-09-25T00:42:57Z,2016-09-26T13:11:03Z,2016-09-26T13:12:26Z,MERGED,True,125,81,4,https://github.com/FlyingWithJerome,"Add multi-argument parsing for rgr, trr and ppc; revise ERROR message",1,[],https://github.com/nco/nco/pull/31,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/31,,,True,{}
nco/nco,https://github.com/nco/nco,31,2016-09-25T00:42:57Z,2016-09-26T13:11:03Z,2016-09-26T13:12:26Z,MERGED,True,125,81,4,https://github.com/FlyingWithJerome,"Add multi-argument parsing for rgr, trr and ppc; revise ERROR message",1,[],https://github.com/nco/nco/pull/31,https://github.com/czender,2,https://github.com/nco/nco/pull/31#issuecomment-249565389,,"Thanks, Jerome. Glad all the tests pass, though there may be some remaining problems we can discuss today.",True,{}
nco/nco,https://github.com/nco/nco,32,2016-09-28T04:25:17Z,2016-09-28T13:31:23Z,2016-09-28T16:38:41Z,MERGED,True,73,54,3,https://github.com/FlyingWithJerome,Fix segfaults in some cases; streamlined part of the codes,1,[],https://github.com/nco/nco/pull/32,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/32,I had also added some test cases in regression test; they might be false positive since they failed in regression tests but I ran them directly from terminal and get the expected results from Panoply.,I had also added some test cases in regression test; they might be false positive since they failed in regression tests but I ran them directly from terminal and get the expected results from Panoply.,True,{}
nco/nco,https://github.com/nco/nco,32,2016-09-28T04:25:17Z,2016-09-28T13:31:23Z,2016-09-28T16:38:41Z,MERGED,True,73,54,3,https://github.com/FlyingWithJerome,Fix segfaults in some cases; streamlined part of the codes,1,[],https://github.com/nco/nco/pull/32,https://github.com/czender,2,https://github.com/nco/nco/pull/32#issuecomment-250166995,I had also added some test cases in regression test; they might be false positive since they failed in regression tests but I ran them directly from terminal and get the expected results from Panoply.,"Looks good. Just merged this. Jerome, please confirm that you understand that command line strings are owned by system memory not by NCO. Meaning that Bash (or whatever) allocates the memory that contains the command line. This system memory can be copied but should NEVER be modified by NCO. I'm wondering if the multi-argument routines attempt to modify system memory. This would cause segfaults...better to copy the system memory once and work on that.",True,{}
nco/nco,https://github.com/nco/nco,32,2016-09-28T04:25:17Z,2016-09-28T13:31:23Z,2016-09-28T16:38:41Z,MERGED,True,73,54,3,https://github.com/FlyingWithJerome,Fix segfaults in some cases; streamlined part of the codes,1,[],https://github.com/nco/nco/pull/32,https://github.com/FlyingWithJerome,3,https://github.com/nco/nco/pull/32#issuecomment-250169630,I had also added some test cases in regression test; they might be false positive since they failed in regression tests but I ran them directly from terminal and get the expected results from Panoply.,"Yes. Yesterday I read the code line by line, I found that I directly strcat two strings without reallocate new memory spaces...",True,{}
nco/nco,https://github.com/nco/nco,32,2016-09-28T04:25:17Z,2016-09-28T13:31:23Z,2016-09-28T16:38:41Z,MERGED,True,73,54,3,https://github.com/FlyingWithJerome,Fix segfaults in some cases; streamlined part of the codes,1,[],https://github.com/nco/nco/pull/32,https://github.com/czender,4,https://github.com/nco/nco/pull/32#issuecomment-250173344,I had also added some test cases in regression test; they might be false positive since they failed in regression tests but I ran them directly from terminal and get the expected results from Panoply.,"Good. However, all the new regression tests fail for me (on MacOS). Do they fail for you, too?
ncks    test 102: Add multiple global attributes with argument parsing by Jerome.....................   ERR: FAILURE in ncks failure: Add multiple global attributes with argument parsing by Jerome
ERR::EXPLAIN: Result: [Thu Sep 15] != Expected: [Thu Sep 15 13:03:18 PDT 2016]
ncks    test 103: More tests on multi-argument parsing #1............................................   ERR: FAILURE in ncks failure: More tests on multi-argument parsing #1
ERR::EXPLAIN: Result: [bar3] != Expected: [bar1]
ncks    test 104: More tests on multi-argument parsing #2(with time string).......................... !!FAILED
$cmd_rsl_is_nbr = 1 and $xpc_is_nbr = 0
ERR: FAILURE in ncks failure: More tests on multi-argument parsing #2(with time string)
ERR::EXPLAIN: Result: [] != Expected: [Thu Sep 15 13:03:18 PDT 2016]
ncks    test 105: More tests on multi-argument parsing #3(the time string is followed by kvms)....... !!FAILED
$cmd_rsl_is_nbr = 1 and $xpc_is_nbr = 0
ERR: FAILURE in ncks failure: More tests on multi-argument parsing #3(the time string is followed by kvms)
ERR::EXPLAIN: Result: [] != Expected: [bar10]
ncks    test 106: More tests on multi-argument parsing #4(all have subdelimiters).................... !!FAILED
$cmd_rsl_is_nbr = 1 and $xpc_is_nbr = 0
ERR: FAILURE in ncks failure: More tests on multi-argument parsing #4(all have subdelimiters)
ERR::EXPLAIN: Result: [] != Expected: [Thu Sep 15 13:03:18 PDT 2016]",True,{}
nco/nco,https://github.com/nco/nco,32,2016-09-28T04:25:17Z,2016-09-28T13:31:23Z,2016-09-28T16:38:41Z,MERGED,True,73,54,3,https://github.com/FlyingWithJerome,Fix segfaults in some cases; streamlined part of the codes,1,[],https://github.com/nco/nco/pull/32,https://github.com/FlyingWithJerome,5,https://github.com/nco/nco/pull/32#issuecomment-250195557,I had also added some test cases in regression test; they might be false positive since they failed in regression tests but I ran them directly from terminal and get the expected results from Panoply.,"Yes, they failed on my Mac as well. But I had just manually checked each of them with Panoply and ncks. These commands all performed normally. Keys and values are exactly matched, and none is missing.",True,{}
nco/nco,https://github.com/nco/nco,32,2016-09-28T04:25:17Z,2016-09-28T13:31:23Z,2016-09-28T16:38:41Z,MERGED,True,73,54,3,https://github.com/FlyingWithJerome,Fix segfaults in some cases; streamlined part of the codes,1,[],https://github.com/nco/nco/pull/32,https://github.com/czender,6,https://github.com/nco/nco/pull/32#issuecomment-250223486,I had also added some test cases in regression test; they might be false positive since they failed in regression tests but I ran them directly from terminal and get the expected results from Panoply.,"so this is the ""false positive"" you mentioned. does this imply that running from Perl (in the regression test) yields different results than running from the command line. If so, I may be able to help.",True,{}
nco/nco,https://github.com/nco/nco,33,2016-09-30T22:35:54Z,2016-09-30T22:42:24Z,2016-09-30T22:42:26Z,MERGED,True,18,18,2,https://github.com/FlyingWithJerome,Fix compiler warnings,3,[],https://github.com/nco/nco/pull/33,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/33,,,True,{}
nco/nco,https://github.com/nco/nco,33,2016-09-30T22:35:54Z,2016-09-30T22:42:24Z,2016-09-30T22:42:26Z,MERGED,True,18,18,2,https://github.com/FlyingWithJerome,Fix compiler warnings,3,[],https://github.com/nco/nco/pull/33,https://github.com/czender,2,https://github.com/nco/nco/pull/33#issuecomment-250868860,,"thank you, jerome",True,{}
nco/nco,https://github.com/nco/nco,34,2016-10-01T04:49:45Z,2016-10-01T04:56:51Z,2016-10-01T04:56:51Z,MERGED,True,3,10,4,https://github.com/FlyingWithJerome,cleanup some redundant codes,1,[],https://github.com/nco/nco/pull/34,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/34,,,True,{}
nco/nco,https://github.com/nco/nco,35,2016-10-02T08:16:50Z,2016-10-02T08:27:35Z,2016-10-02T08:27:35Z,CLOSED,False,15,10,1,https://github.com/FlyingWithJerome,Fix the backward compatibility in rgr (latlong issue),2,[],https://github.com/nco/nco/pull/35,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/35,,,True,{}
nco/nco,https://github.com/nco/nco,36,2016-10-02T08:35:40Z,2016-10-02T16:21:05Z,2016-10-02T16:21:05Z,MERGED,True,8,10,1,https://github.com/FlyingWithJerome,Fix the backward compatibility in rgr (the latlong issue),3,[],https://github.com/nco/nco/pull/36,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/36,nco_mta.c is not up-to-date with the master repo in the last two pull requests; but header files and other documents are fine. Now everything was properly updated before this pull request.,nco_mta.c is not up-to-date with the master repo in the last two pull requests; but header files and other documents are fine. Now everything was properly updated before this pull request.,True,{}
nco/nco,https://github.com/nco/nco,37,2016-10-06T21:50:01Z,2016-10-07T13:23:21Z,2016-10-07T13:23:21Z,MERGED,True,30,9,1,https://github.com/FlyingWithJerome,rewrite the split method so it is now based on strstr instead of strtok,1,[],https://github.com/nco/nco/pull/37,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/37,,,True,{}
nco/nco,https://github.com/nco/nco,38,2016-10-08T03:23:49Z,2016-10-09T22:11:10Z,2016-10-09T22:11:31Z,MERGED,True,36,25,3,https://github.com/FlyingWithJerome,Add support to double backslashes as a flag for literal characters,4,[],https://github.com/nco/nco/pull/38,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/38,"Now ncks -O --dlm=':' --gaa 'foo=bar:foo2=bar2:foo3,foo4=Thu Sep 15 13\\:03\\:18 PDT 2016' ~/nco/data/in.nc ~/foo.nc is supported. Users can use double backslashes (please note that single backslash might disappear) when they think the delimiters should have their literal meanings.","Now ncks -O --dlm=':' --gaa 'foo=bar:foo2=bar2:foo3,foo4=Thu Sep 15 13\\:03\\:18 PDT 2016' ~/nco/data/in.nc ~/foo.nc is supported. Users can use double backslashes (please note that single backslash might disappear) when they think the delimiters should have their literal meanings.",True,{}
nco/nco,https://github.com/nco/nco,38,2016-10-08T03:23:49Z,2016-10-09T22:11:10Z,2016-10-09T22:11:31Z,MERGED,True,36,25,3,https://github.com/FlyingWithJerome,Add support to double backslashes as a flag for literal characters,4,[],https://github.com/nco/nco/pull/38,https://github.com/czender,2,https://github.com/nco/nco/pull/38#issuecomment-252516541,"Now ncks -O --dlm=':' --gaa 'foo=bar:foo2=bar2:foo3,foo4=Thu Sep 15 13\\:03\\:18 PDT 2016' ~/nco/data/in.nc ~/foo.nc is supported. Users can use double backslashes (please note that single backslash might disappear) when they think the delimiters should have their literal meanings.","Thanks, Jerome. This will be good to have.",True,{}
nco/nco,https://github.com/nco/nco,39,2016-11-16T18:27:54Z,2016-11-16T18:45:15Z,2016-11-16T18:49:21Z,MERGED,True,5,5,4,https://github.com/sebastic,Fix spelling errors.,1,[],https://github.com/nco/nco/pull/39,https://github.com/sebastic,1,https://github.com/nco/nco/pull/39,"The lintian QA tool reported a couple of spelling errors for 4.6.2:

convertable -> convertible
supercedes  -> supersedes

If you'd like to catch these before the release, I recommend to modify the spelling script from GDAL for NCO:
https://trac.osgeo.org/gdal/browser/trunk/gdal/scripts/fix_typos.sh","The lintian QA tool reported a couple of spelling errors for 4.6.2:

convertable -> convertible
supercedes  -> supersedes

If you'd like to catch these before the release, I recommend to modify the spelling script from GDAL for NCO:
https://trac.osgeo.org/gdal/browser/trunk/gdal/scripts/fix_typos.sh",True,{}
nco/nco,https://github.com/nco/nco,41,2016-11-20T10:55:22Z,2016-11-20T16:48:03Z,2016-11-20T16:52:40Z,MERGED,True,2,0,1,https://github.com/sebastic,Add ncap_yacc.h to BUILT_SOURCES to build it before being used.,1,[],https://github.com/nco/nco/pull/41,https://github.com/sebastic,1,https://github.com/nco/nco/pull/41,"To fix the issue reported in #40 where the build failed when -j64 was used because ncap_yacc.h is used before being generated, I found the BUILT_SOURCES solution in the automake documentation, see:
https://www.gnu.org/software/automake/manual/html_node/Yacc-and-Lex.html
https://www.gnu.org/software/automake/manual/html_node/Sources.html","To fix the issue reported in #40 where the build failed when -j64 was used because ncap_yacc.h is used before being generated, I found the BUILT_SOURCES solution in the automake documentation, see:
https://www.gnu.org/software/automake/manual/html_node/Yacc-and-Lex.html
https://www.gnu.org/software/automake/manual/html_node/Sources.html",True,{}
nco/nco,https://github.com/nco/nco,41,2016-11-20T10:55:22Z,2016-11-20T16:48:03Z,2016-11-20T16:52:40Z,MERGED,True,2,0,1,https://github.com/sebastic,Add ncap_yacc.h to BUILT_SOURCES to build it before being used.,1,[],https://github.com/nco/nco/pull/41,https://github.com/czender,2,https://github.com/nco/nco/pull/41#issuecomment-261789362,"To fix the issue reported in #40 where the build failed when -j64 was used because ncap_yacc.h is used before being generated, I found the BUILT_SOURCES solution in the automake documentation, see:
https://www.gnu.org/software/automake/manual/html_node/Yacc-and-Lex.html
https://www.gnu.org/software/automake/manual/html_node/Sources.html",Thanks so much for identifying and fixing this issue!,True,{}
nco/nco,https://github.com/nco/nco,45,2017-02-24T18:15:25Z,2017-02-24T18:51:45Z,2017-02-24T18:51:46Z,MERGED,True,5,14,4,https://github.com/FlyingWithJerome,Clear some of the redundant,1,[],https://github.com/nco/nco/pull/45,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/45,"Clear the redundant in gaa, ppc, trr and rgr.
Had passed the
make test","Clear the redundant in gaa, ppc, trr and rgr.
Had passed the
make test",True,{}
nco/nco,https://github.com/nco/nco,45,2017-02-24T18:15:25Z,2017-02-24T18:51:45Z,2017-02-24T18:51:46Z,MERGED,True,5,14,4,https://github.com/FlyingWithJerome,Clear some of the redundant,1,[],https://github.com/nco/nco/pull/45,https://github.com/FlyingWithJerome,2,https://github.com/nco/nco/pull/45#issuecomment-282370599,"Clear the redundant in gaa, ppc, trr and rgr.
Had passed the
make test","@czender
The g++ log shows that it failed in module ""nco_cln_utl.c,"" which is pretty confusing. Is this module under construction?",True,{}
nco/nco,https://github.com/nco/nco,45,2017-02-24T18:15:25Z,2017-02-24T18:51:45Z,2017-02-24T18:51:46Z,MERGED,True,5,14,4,https://github.com/FlyingWithJerome,Clear some of the redundant,1,[],https://github.com/nco/nco/pull/45,https://github.com/czender,3,https://github.com/nco/nco/pull/45#issuecomment-282372494,"Clear the redundant in gaa, ppc, trr and rgr.
Had passed the
make test",The breakage in the g++ case is due to new code from @hmb1 that he will soon fix. Your code is ready to merge. Thanks.,True,{}
nco/nco,https://github.com/nco/nco,47,2017-03-02T03:52:40Z,2017-03-02T16:57:04Z,2017-03-02T17:00:07Z,MERGED,True,6,0,1,https://github.com/ocehugo,fill the missing setup for chunk_size in ncra/ncrcat,1,[],https://github.com/nco/nco/pull/47,https://github.com/ocehugo,1,https://github.com/nco/nco/pull/47,See #46,See #46,True,{}
nco/nco,https://github.com/nco/nco,47,2017-03-02T03:52:40Z,2017-03-02T16:57:04Z,2017-03-02T17:00:07Z,MERGED,True,6,0,1,https://github.com/ocehugo,fill the missing setup for chunk_size in ncra/ncrcat,1,[],https://github.com/nco/nco/pull/47,https://github.com/ocehugo,2,https://github.com/nco/nco/pull/47#issuecomment-283550962,See #46,just for the record : I also got a different problem than the travis above. Ncap2 did not compile with some antlr missing includes related to EOF definition.,True,{}
nco/nco,https://github.com/nco/nco,47,2017-03-02T03:52:40Z,2017-03-02T16:57:04Z,2017-03-02T17:00:07Z,MERGED,True,6,0,1,https://github.com/ocehugo,fill the missing setup for chunk_size in ncra/ncrcat,1,[],https://github.com/nco/nco/pull/47,https://github.com/czender,3,https://github.com/nco/nco/pull/47#issuecomment-283712730,See #46,"Yes there is a problem with the automated Travis check, but it is unrelated to your patch. Hope to fix it today.",True,{}
nco/nco,https://github.com/nco/nco,51,2017-04-30T22:40:11Z,2017-05-01T11:49:14Z,2017-05-01T11:49:14Z,MERGED,True,138,11,4,https://github.com/FlyingWithJerome,Update the ncks rgr Flag Parsing,4,[],https://github.com/nco/nco/pull/51,https://github.com/FlyingWithJerome,1,https://github.com/nco/nco/pull/51,"Now the ncks can normally parse the flags and the users do not need to add redundant values for them, e.g.,
ncks -O --rgr grid=~/foo_grid.nc#latlon=64,128#--no_area#lat_typ=gss#lon_typ=Grn_ctr ~/nco/data/in.nc ~/foo.nc
is considered as a legal input (notice the flag ""--no_area"").
@czender
Please help update the testcase in NCO_rgr.pm to see whether ""no_area"" is a good flag we can test and how to test it. So far it can be successfully compiled and executed, but we do need to see the outputs.
The testcase is marked as ""ncks #122.""","Now the ncks can normally parse the flags and the users do not need to add redundant values for them, e.g.,
ncks -O --rgr grid=~/foo_grid.nc#latlon=64,128#--no_area#lat_typ=gss#lon_typ=Grn_ctr ~/nco/data/in.nc ~/foo.nc
is considered as a legal input (notice the flag ""--no_area"").
@czender
Please help update the testcase in NCO_rgr.pm to see whether ""no_area"" is a good flag we can test and how to test it. So far it can be successfully compiled and executed, but we do need to see the outputs.
The testcase is marked as ""ncks #122.""",True,{}
nco/nco,https://github.com/nco/nco,51,2017-04-30T22:40:11Z,2017-05-01T11:49:14Z,2017-05-01T11:49:14Z,MERGED,True,138,11,4,https://github.com/FlyingWithJerome,Update the ncks rgr Flag Parsing,4,[],https://github.com/nco/nco/pull/51,https://github.com/czender,2,https://github.com/nco/nco/pull/51#issuecomment-298263059,"Now the ncks can normally parse the flags and the users do not need to add redundant values for them, e.g.,
ncks -O --rgr grid=~/foo_grid.nc#latlon=64,128#--no_area#lat_typ=gss#lon_typ=Grn_ctr ~/nco/data/in.nc ~/foo.nc
is considered as a legal input (notice the flag ""--no_area"").
@czender
Please help update the testcase in NCO_rgr.pm to see whether ""no_area"" is a good flag we can test and how to test it. So far it can be successfully compiled and executed, but we do need to see the outputs.
The testcase is marked as ""ncks #122.""","That's great! Please make one more change and then I'll test it. For the flags, the switch should not need the ""--"". Both of these should be legal and handle a flag:
--rgr no_area
--rgr grid=~/foo_grid.nc#latlon=64,128#no_area#lat_typ=gss#lon_typ=Grn_ctr",True,{}
nco/nco,https://github.com/nco/nco,51,2017-04-30T22:40:11Z,2017-05-01T11:49:14Z,2017-05-01T11:49:14Z,MERGED,True,138,11,4,https://github.com/FlyingWithJerome,Update the ncks rgr Flag Parsing,4,[],https://github.com/nco/nco/pull/51,https://github.com/FlyingWithJerome,3,https://github.com/nco/nco/pull/51#issuecomment-298265615,"Now the ncks can normally parse the flags and the users do not need to add redundant values for them, e.g.,
ncks -O --rgr grid=~/foo_grid.nc#latlon=64,128#--no_area#lat_typ=gss#lon_typ=Grn_ctr ~/nco/data/in.nc ~/foo.nc
is considered as a legal input (notice the flag ""--no_area"").
@czender
Please help update the testcase in NCO_rgr.pm to see whether ""no_area"" is a good flag we can test and how to test it. So far it can be successfully compiled and executed, but we do need to see the outputs.
The testcase is marked as ""ncks #122.""","@czender
I updated two places:

1
The commands above

--rgr no_area
--rgr grid=~/foo_grid.nc#latlon=64,128#no_area#lat_typ=gss#lon_typ=Grn_ctr
is acceptable; actually ""--no_area,""  ""-no_area"" and ""no_area"" are all legal (in case some people prefer Linux style flags).

2
The nco_mta.c will print put HINT and lists of rgr, gaa, trr and ppc flags (if users make mistakes):

-bash-4.1$ !1015
ncks -O --rgr no_are /home/jiarunm/nco/data/in.nc /home/jiarunm/foo.nc #Bad input
ERROR: Possibly you mistyped a flag. HINT If you are trying to use a (or multiple) ncks flag(s), please refer to the following lists of ncks flags and make sure that you correct any typos. The flag(s) can be Linux style (with ""--"") or concise style (w/o ""--"")
ncks rgr (Regridding) flags:
   1. no_area
   2. no_area_out
   3. cell_measures
   4. cll_msr
   5. no_cell_measures
   6. no_cll_msr
   7. curvilinear
   8. crv
   9. infer
  10. nfr
  11. no_stagger
  12. no_stg
ncks gaa (Global Attribute Adding) flags:

ncks trr (Terraref) flags:

ncks ppc (Precision-Preserving Compression) flags:",True,{}
nco/nco,https://github.com/nco/nco,52,2017-05-15T11:13:41Z,2017-05-15T18:51:27Z,2017-05-16T08:11:31Z,MERGED,True,1,1,1,https://github.com/hegish,"allow att_val = """" for character type",1,[],https://github.com/nco/nco/pull/52,https://github.com/hegish,1,https://github.com/nco/nco/pull/52,"currently ncatted reports an error when trying to set an empty string, which should be possible (as the error message itself confirms): ""Value must be explicitly specified for all modes except delete (although an empty string value is permissible for attributes of type NC_CHAR and NC_STRING)""","currently ncatted reports an error when trying to set an empty string, which should be possible (as the error message itself confirms): ""Value must be explicitly specified for all modes except delete (although an empty string value is permissible for attributes of type NC_CHAR and NC_STRING)""",True,{}
nco/nco,https://github.com/nco/nco,52,2017-05-15T11:13:41Z,2017-05-15T18:51:27Z,2017-05-16T08:11:31Z,MERGED,True,1,1,1,https://github.com/hegish,"allow att_val = """" for character type",1,[],https://github.com/nco/nco/pull/52,https://github.com/czender,2,https://github.com/nco/nco/pull/52#issuecomment-301623009,"currently ncatted reports an error when trying to set an empty string, which should be possible (as the error message itself confirms): ""Value must be explicitly specified for all modes except delete (although an empty string value is permissible for attributes of type NC_CHAR and NC_STRING)""",This needed some extra fixes which are now committed. Now seems to work.,True,{}
nco/nco,https://github.com/nco/nco,52,2017-05-15T11:13:41Z,2017-05-15T18:51:27Z,2017-05-16T08:11:31Z,MERGED,True,1,1,1,https://github.com/hegish,"allow att_val = """" for character type",1,[],https://github.com/nco/nco/pull/52,https://github.com/hegish,3,https://github.com/nco/nco/pull/52#issuecomment-301708506,"currently ncatted reports an error when trying to set an empty string, which should be possible (as the error message itself confirms): ""Value must be explicitly specified for all modes except delete (although an empty string value is permissible for attributes of type NC_CHAR and NC_STRING)""",Thank you!,True,{}
nco/nco,https://github.com/nco/nco,54,2017-06-06T13:44:55Z,2017-06-06T14:07:36Z,2017-06-06T14:10:56Z,MERGED,True,26,4,2,https://github.com/neumannd,use default libdir (lib / lib64) as UDUNITS2 libdir,1,[],https://github.com/nco/nco/pull/54,https://github.com/neumannd,1,https://github.com/nco/nco/pull/54,"Some 64bit distributions use 'lib64' instead of 'lib' as library
directory. The base directory of $libdir is taken (on most distros
it is 'lib' or 'lib64') and appended to $UDUNITS2_PATH to generate
the UDUNITS2 library directory. If this directory does not exist,
the directory is set to $UDUNITS2_PATH/lib.","Some 64bit distributions use 'lib64' instead of 'lib' as library
directory. The base directory of $libdir is taken (on most distros
it is 'lib' or 'lib64') and appended to $UDUNITS2_PATH to generate
the UDUNITS2 library directory. If this directory does not exist,
the directory is set to $UDUNITS2_PATH/lib.",True,{}
nco/nco,https://github.com/nco/nco,54,2017-06-06T13:44:55Z,2017-06-06T14:07:36Z,2017-06-06T14:10:56Z,MERGED,True,26,4,2,https://github.com/neumannd,use default libdir (lib / lib64) as UDUNITS2 libdir,1,[],https://github.com/nco/nco/pull/54,https://github.com/czender,2,https://github.com/nco/nco/pull/54#issuecomment-306498236,"Some 64bit distributions use 'lib64' instead of 'lib' as library
directory. The base directory of $libdir is taken (on most distros
it is 'lib' or 'lib64') and appended to $UDUNITS2_PATH to generate
the UDUNITS2 library directory. If this directory does not exist,
the directory is set to $UDUNITS2_PATH/lib.",I merged this right away and regenerated configure. If possible please verify the current snapshot works for you without patching.,True,{}
nco/nco,https://github.com/nco/nco,55,2017-06-06T18:59:01Z,2017-06-08T14:49:42Z,2017-06-08T14:49:42Z,MERGED,True,2,6,2,https://github.com/neumannd,fixed: GSL not recognised when GSL_LIB was set,1,[],https://github.com/nco/nco/pull/55,https://github.com/neumannd,1,https://github.com/nco/nco/pull/55,"When GSL_LIB was set, ""gsl-config --libs"" was not called and appended
to LIBS. If GSL_LIB did not contain -lgsl but just -L/SOME/GSL/LIB/DIR,
GSL was not properly recognized. Now, GSL_LIB is appended to LIBS and,
in addition, $GSL_ROOT/bin/gsl-config --libs is also appended to
LIBS.","When GSL_LIB was set, ""gsl-config --libs"" was not called and appended
to LIBS. If GSL_LIB did not contain -lgsl but just -L/SOME/GSL/LIB/DIR,
GSL was not properly recognized. Now, GSL_LIB is appended to LIBS and,
in addition, $GSL_ROOT/bin/gsl-config --libs is also appended to
LIBS.",True,{}
nco/nco,https://github.com/nco/nco,56,2017-06-07T22:36:58Z,2017-06-08T14:49:41Z,2017-06-08T14:49:41Z,MERGED,True,6,8,6,https://github.com/neumannd,Fixed  in 4c.nc  creation,3,[],https://github.com/nco/nco/pull/56,https://github.com/neumannd,1,https://github.com/nco/nco/pull/56,"test file in_4c.nc now is created during make test
The ./data directory contains *.cdl files, from which netCDF files for the NCO tests are build. The makefile for creating these files is called in the beginning of the build process. However, creating the file in_4c.nc needs 'ncks'. All other files are generated via 'ncgen'. Because ncks has not been compiled in the beginning of the build process, that file is not generated/created. Two makefiles were modified:


./data/Makefile: path to the compiled ncks binary (path BEFORE 'make install') -> $abs_top_builddir/src/nco/ncks


./Makefile: the 'tst' target now does > cd data && $(MAKE) in_4c.nc && cd .. to generate the 'in_4c.nc' before the actual tests are performed


The Makefile.in and Makefile.am were equally modified (one doesn't need to newly generate the Makefile.in files).)","test file in_4c.nc now is created during make test
The ./data directory contains *.cdl files, from which netCDF files for the NCO tests are build. The makefile for creating these files is called in the beginning of the build process. However, creating the file in_4c.nc needs 'ncks'. All other files are generated via 'ncgen'. Because ncks has not been compiled in the beginning of the build process, that file is not generated/created. Two makefiles were modified:


./data/Makefile: path to the compiled ncks binary (path BEFORE 'make install') -> $abs_top_builddir/src/nco/ncks


./Makefile: the 'tst' target now does > cd data && $(MAKE) in_4c.nc && cd .. to generate the 'in_4c.nc' before the actual tests are performed


The Makefile.in and Makefile.am were equally modified (one doesn't need to newly generate the Makefile.in files).)",True,{}
nco/nco,https://github.com/nco/nco,61,2017-12-14T20:35:17Z,2017-12-15T05:05:08Z,2017-12-15T11:33:30Z,MERGED,True,26,17,2,https://github.com/isuruf,CMake changes for conda,2,[],https://github.com/nco/nco/pull/61,https://github.com/isuruf,1,https://github.com/nco/nco/pull/61,,,True,{}
nco/nco,https://github.com/nco/nco,61,2017-12-14T20:35:17Z,2017-12-15T05:05:08Z,2017-12-15T11:33:30Z,MERGED,True,26,17,2,https://github.com/isuruf,CMake changes for conda,2,[],https://github.com/nco/nco/pull/61,https://github.com/czender,2,https://github.com/nco/nco/pull/61#issuecomment-351850834,,"Note that the travis-ci failure is clang-only and is months old and was triggered when travis updated to ubuntu Trusty on 20170905, the link failure occurs in ncap2 not all because ncap2 links with g++ instead of clang. In other words this merge request appears good since no new failures are reported.",True,{}
nco/nco,https://github.com/nco/nco,61,2017-12-14T20:35:17Z,2017-12-15T05:05:08Z,2017-12-15T11:33:30Z,MERGED,True,26,17,2,https://github.com/isuruf,CMake changes for conda,2,[],https://github.com/nco/nco/pull/61,https://github.com/pedro-vicente,3,https://github.com/nco/nco/pull/61#issuecomment-351890242,,"@isuruf good addition...it seems what it does is to keep the current static, debug, and override if wanted on the command line, let's go ahead and merge",True,{}
nco/nco,https://github.com/nco/nco,61,2017-12-14T20:35:17Z,2017-12-15T05:05:08Z,2017-12-15T11:33:30Z,MERGED,True,26,17,2,https://github.com/isuruf,CMake changes for conda,2,[],https://github.com/nco/nco/pull/61,https://github.com/ocefpaf,4,https://github.com/nco/nco/pull/61#issuecomment-351984221,,Awesome! Thanks @isuruf for the patches and @czender and @pedro-vicente for the review.,True,{}
nco/nco,https://github.com/nco/nco,62,2017-12-16T21:31:42Z,2017-12-16T22:10:03Z,2017-12-17T16:43:16Z,MERGED,True,122,0,4,https://github.com/ocefpaf,Add AppVeyor+conda builds/tests.,1,[],https://github.com/nco/nco/pull/62,https://github.com/ocefpaf,1,https://github.com/nco/nco/pull/62,"@czender this adds a simple AppVeyor configuration that builds the conda recipe for Windows and run the same tests from the conda-forge feedstock. It can serve as a guide to catch bugs early as you develop nco. Note that you will need to enable AppVeyor for this repository to see the status in each PRs.
Right not the command ccap2 -O -v -s 'erf_one=float(gsl_sf_erf(1.0f));print(erf_one,""%g"")' in.nc foo.nc is failing. A user reported that as soon as I published the Windows binaries 😒
I added the || exit 1 to prevent AppVeyor from failing silently but, because this is a segfault, so we don't get much info on the screen. I made the same change in the conda-forge recipe in conda-forge/nco-feedstock#55
I am not sure if that failure in in conda's gsl or in nco. I'll try to investigate more.
PS: users reported that the basic ncks functionalities are working properly!","@czender this adds a simple AppVeyor configuration that builds the conda recipe for Windows and run the same tests from the conda-forge feedstock. It can serve as a guide to catch bugs early as you develop nco. Note that you will need to enable AppVeyor for this repository to see the status in each PRs.
Right not the command ccap2 -O -v -s 'erf_one=float(gsl_sf_erf(1.0f));print(erf_one,""%g"")' in.nc foo.nc is failing. A user reported that as soon as I published the Windows binaries 😒
I added the || exit 1 to prevent AppVeyor from failing silently but, because this is a segfault, so we don't get much info on the screen. I made the same change in the conda-forge recipe in conda-forge/nco-feedstock#55
I am not sure if that failure in in conda's gsl or in nco. I'll try to investigate more.
PS: users reported that the basic ncks functionalities are working properly!",True,{}
nco/nco,https://github.com/nco/nco,63,2017-12-19T04:27:03Z,2017-12-20T16:20:01Z,2017-12-20T16:20:01Z,MERGED,True,5,1,2,https://github.com/isuruf,Fix MSVC warning,7,[],https://github.com/nco/nco/pull/63,https://github.com/isuruf,1,https://github.com/nco/nco/pull/63,,,True,{}
nco/nco,https://github.com/nco/nco,63,2017-12-19T04:27:03Z,2017-12-20T16:20:01Z,2017-12-20T16:20:01Z,MERGED,True,5,1,2,https://github.com/isuruf,Fix MSVC warning,7,[],https://github.com/nco/nco/pull/63,https://github.com/czender,2,https://github.com/nco/nco/pull/63#issuecomment-353109008,,"Thanks @isuruf, you are the Dude! It is a pleasure to have a build matrix that checks everything and no longer produces false-negatives.",True,{}
nco/nco,https://github.com/nco/nco,64,2017-12-20T13:38:38Z,2017-12-20T15:03:38Z,2017-12-20T15:10:59Z,MERGED,True,2,1,1,https://github.com/ocefpaf,fix ncap2 test on windows,1,[],https://github.com/nco/nco/pull/64,https://github.com/ocefpaf,1,https://github.com/nco/nco/pull/64,"This PR fixes the Windows ncap2 test by avoiding the print, replacing ' with "" and checking the expected value with ncks. Ideally we should check if the value is indeed 0.8427008 but my Windows CLI-fu is terrible and I have no idea how to do it.
PS: the change here is the same as conda-forge/nco-feedstock@be01a37","This PR fixes the Windows ncap2 test by avoiding the print, replacing ' with "" and checking the expected value with ncks. Ideally we should check if the value is indeed 0.8427008 but my Windows CLI-fu is terrible and I have no idea how to do it.
PS: the change here is the same as conda-forge/nco-feedstock@be01a37",True,{}
nco/nco,https://github.com/nco/nco,64,2017-12-20T13:38:38Z,2017-12-20T15:03:38Z,2017-12-20T15:10:59Z,MERGED,True,2,1,1,https://github.com/ocefpaf,fix ncap2 test on windows,1,[],https://github.com/nco/nco/pull/64,https://github.com/ocefpaf,2,https://github.com/nco/nco/pull/64#issuecomment-353066838,"This PR fixes the Windows ncap2 test by avoiding the print, replacing ' with "" and checking the expected value with ncks. Ideally we should check if the value is indeed 0.8427008 but my Windows CLI-fu is terrible and I have no idea how to do it.
PS: the change here is the same as conda-forge/nco-feedstock@be01a37","Lines 1681-1691 from AppVeyor's log:
ncap2 -O -v -s ""erf_one=float(gsl_sf_erf(1.0f));"" in.nc foo.nc || exit 1 
        1 file(s) moved.
ncks -v erf_one foo.nc || exit 1 
netcdf foo {
  variables:
    float erf_one ;
  data:
    erf_one = 0.8427008 ; 
} // group /",True,{}
nco/nco,https://github.com/nco/nco,64,2017-12-20T13:38:38Z,2017-12-20T15:03:38Z,2017-12-20T15:10:59Z,MERGED,True,2,1,1,https://github.com/ocefpaf,fix ncap2 test on windows,1,[],https://github.com/nco/nco/pull/64,https://github.com/ocefpaf,3,https://github.com/nco/nco/pull/64#issuecomment-353088611,"This PR fixes the Windows ncap2 test by avoiding the print, replacing ' with "" and checking the expected value with ncks. Ideally we should check if the value is indeed 0.8427008 but my Windows CLI-fu is terrible and I have no idea how to do it.
PS: the change here is the same as conda-forge/nco-feedstock@be01a37","I was glad that in the end it is just the CLI syntax, everything seems to be working as expected.",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/ocefpaf,1,https://github.com/nco/nco/pull/65,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/xylar,2,https://github.com/nco/nco/pull/65#issuecomment-360895384,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,@czender. This PR still was failing the AppVeyor test.  It would be good if someone makes a PR to try to fix AppVeyor and that it doesn't get merged until the AppVeyor test is actually passing.  Maybe I've misunderstood the process?,True,{'THUMBS_UP': ['https://github.com/ocefpaf']}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/pedro-vicente,3,https://github.com/nco/nco/pull/65#issuecomment-360905155,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"the error comes from ANTLR, you are mixing debug and release libraries, nothing to do with NCO
antlr.lib(String.obj) : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MD_DynamicRelease' doesn't match value 'MDd_DynamicDebug' in Invoke.cc.obj",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/pedro-vicente,4,https://github.com/nco/nco/pull/65#issuecomment-360905679,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"I'll add a github repo to the NCO org with a ANTLR library with Cmake support , so that you can use that one",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/czender,5,https://github.com/nco/nco/pull/65#issuecomment-360905920,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"@xylar shall I revert this? I thought this was an incremental improvement that should be merged, despite fact that AppVeyor still failed. Does AppVeyor run NCO code in master or in latest stable tagged NCO release (e.g., 4.7.2), or what? And when you say make a PR to fix AppVeyor, do you mean a fix to NCO master that allows AppVeyor to succeed?",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/xylar,6,https://github.com/nco/nco/pull/65#issuecomment-360909942,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"@czender, my understanding was that @ocefpaf was using this PR to get NCO working under AppVeyor.  Each time code gets committed to a PR, AppVeyor starts over checking the code so it's a good way to fix what's going wrong without merging to master until the problem is actually fixed.",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/xylar,7,https://github.com/nco/nco/pull/65#issuecomment-360910185,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"@pedro-vicente, before you add ANTLR to NCO itself, we should find out what the implications of doing so would be for conda-forge.  @ocefpaf, do you have thoughts about this?  Could this lead to conflicts?",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/pedro-vicente,8,https://github.com/nco/nco/pull/65#issuecomment-360912199,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"it's just added to the NCO ""umbrella"" organization as a repository
here
https://github.com/nco/antlr
you can use the CMakeLists.txt in
/lib/cpp",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/pedro-vicente,9,https://github.com/nco/nco/pull/65#issuecomment-360912596,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,and that's a wrap for me before the weekend :-),True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/xylar,10,https://github.com/nco/nco/pull/65#issuecomment-360957142,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"@czender, I feel I owe a bit more of an explanation than I had time to give earlier today.
Here's my understanding:  Each time a pull request is made now to this repo (or a commit is pushed to master or to a branch for which a pull request has already been made), continuous integration (CI) runs in the form of both Travis CI and AppVeyor.  You can tell if both succeeded by a green check mark next to the commit message or at the bottom of the pull request.  If either fails, you'll see a red x.  If you're doing a pull request, this means something should be done to fix whichever CI is failing before the pull request gets merged.
If you look at all the recent commits going back to aad9150, you can see that CI has been failing every time.  At least on the repos I work with, this is a red flag and we try to fix the CI right away before we merge the pull request or before we go on with development.  Certainly, CI should be succeeding before a release is made, because we will very likely see the same failure on the conda-forge side, the recipe will fail to build and we won't have binaries for at least one of the supported OSes.
My recommendation would be for someone with knowledge of the AppVeyor setup in this repo to make a pull request to try to fix the CI.  Until CI is working again, I would recommend against merging the pull request but by pushing new commits to the pull request, we'll be able to see whether CI is working again after each commit once CI has completed.  If I had enough knowledge of either NCO, Windows programming or AppVeyor, I'd be happy to try my hand at this but I really have no knowledge of it.",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/xylar,11,https://github.com/nco/nco/pull/65#issuecomment-360957411,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"@pedro-vicente, my concern about ANTLR is that there's a conda-forge recipe for it already:
https://github.com/conda-forge/antlr-feedstock
building from
https://github.com/antlr/antlr4
I just want to make sure that either the conda-forge recipe for NCO uses the conda-forge ANTLR or that there is some way in which we can be sure that the special NCO version of ANTLR stays completely separate from and does not interfere with conda-forge version if someone were to install both NCO and ANTLR (from conda-forge) in the same environment.  I've seen nasty conflicts with other packages that try to pull in a custom version of another package and I'd very much like to avoid that with NCO.
All that being said, I'm as ignorant of ANTLR as I am at Windows programming and AppVeyor so perhaps my concerns are completely unfounded.",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/czender,12,https://github.com/nco/nco/pull/65#issuecomment-360989881,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"@xylar Thanks for you patience. I agree with your recommendations on source code management. Both @pedro-vicente and I are still learning how to exploit the CI infrastructure after many years of not having it. We'll get there after we make a lot of mistakes. I hope that an AppVeyor failure does not stop conda from building UNIX packages, my main concern. Your concerns about ANTLR seem justified, though I don't know the answers. Pedro, I'm not sure what justifies the new ANTLR repository in NCO, though you understand the Windows issues better than I. Until you are sure that no conflicts will arise, consider renaming the new ANTLR repository to ""antlr2"" instead of ""antlr"", to make clear that it only provide the ANTLRv2 library upon which NCO depends.",True,{'THUMBS_UP': ['https://github.com/ocefpaf']}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/pedro-vicente,13,https://github.com/nco/nco/pull/65#issuecomment-360995618,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"@czender The  ""official"" github for ANTLR does not have the v2 anymore. There is a site for ANTLRv2
http://www.antlr2.org/
but it does not include git. Also it does not include Cmake support. So, the nco/antlr2 provides a way for the cmake/bld.bat to automatically git clone and build. It's now renamed to nco/antlr2.",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/xylar,14,https://github.com/nco/nco/pull/65#issuecomment-361010922,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"@pedro-vicente and @czender, do either of you know if antlr2 will conflict with antlr4 available on conda-forge?",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/isuruf,15,https://github.com/nco/nco/pull/65#issuecomment-361022034,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"Error is because of 31043f5#diff-af3b638bc2a3e6c650974192a53c7291R57
Remove FORCE from there, otherwise the command line options are ignored.",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/ocefpaf,16,https://github.com/nco/nco/pull/65#issuecomment-361024131,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"Remove FORCE from there, otherwise the command line options are ignored.

Thanks @isuruf! That fixed it for me locally, see #66

@pedro-vicente and @czender, do either of you know if antlr2 will conflict with antlr4 available on conda-forge?

@xylar we use antlr2 to build nco in conda-forge. I don't think nco is compatible with antlr >2

but it does not include git. Also it does not include Cmake support. So, the nco/antlr2 provides a way for the cmake/bld.bat to automatically git clone and build. It's now renamed to nco/antlr2.

Still, things should work with conda-forge's binary and #66 should restore that.",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/pedro-vicente,17,https://github.com/nco/nco/pull/65#issuecomment-361025829,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"I removed FORCE from Debug, thanks

Still, things should work with conda-forge's binary

you could replace your antlr2 with our nco/antlr2, that includes CMake, or just take CMakeLists.txt from there",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/xylar,18,https://github.com/nco/nco/pull/65#issuecomment-361026304,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"we use antlr2 to build nco in conda-forge. I don't think nco is compatible with antlr >2

@ocefpaf, okay I see.  So it would be used to build NCO but wouldn't be a dependency of NCO that a user would need to install so it shouldn't conflict with anything else?  If I've understood correctly, I appreciate the clarification.",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/pedro-vicente,19,https://github.com/nco/nco/pull/65#issuecomment-361046274,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"continuous integration (CI) runs in the form of both Travis CI and AppVeyor. You can tell if both succeeded by a green check mark next to the commit message or at the bottom of the pull request. If either fails, you'll see a red x.

I now see that the build had been failing on AppVeyor... now it has the green icon
so, I went to check out about AppVeyor, here's an example
https://github.com/LearningByExample/ModernCppCI
and I added it to one of my github projects
https://github.com/pedro-vicente/csv-parser",True,{}
nco/nco,https://github.com/nco/nco,65,2018-01-26T19:26:33Z,2018-01-26T20:16:59Z,2018-01-28T11:09:15Z,MERGED,True,7,7,2,https://github.com/ocefpaf,Check appveyor,2,[],https://github.com/nco/nco/pull/65,https://github.com/ocefpaf,20,https://github.com/nco/nco/pull/65#issuecomment-361054742,@czender @pedro-vicente this updates the recipe here to reflect what we have in conda-forge. Let's see if latest master is passing for out current setup.,"@pedro-vicente nco has theAppVeyor trigger for PRs already, see #66. Its status should be our guide for merging changes.",True,{}
nco/nco,https://github.com/nco/nco,66,2018-01-27T23:24:47Z,2018-01-29T12:08:58Z,2018-01-29T12:09:55Z,MERGED,True,1,1,1,https://github.com/ocefpaf,remove FORCE,1,[],https://github.com/nco/nco/pull/66,https://github.com/ocefpaf,1,https://github.com/nco/nco/pull/66,This should fix the Windows builds.,This should fix the Windows builds.,True,{}
nco/nco,https://github.com/nco/nco,66,2018-01-27T23:24:47Z,2018-01-29T12:08:58Z,2018-01-29T12:09:55Z,MERGED,True,1,1,1,https://github.com/ocefpaf,remove FORCE,1,[],https://github.com/nco/nco/pull/66,https://github.com/xylar,2,https://github.com/nco/nco/pull/66#issuecomment-361026456,This should fix the Windows builds.,@pedro-vicente seems to already have done this in commit a332bd8 and it seems to have fixed AppVeyor!,True,{}
nco/nco,https://github.com/nco/nco,66,2018-01-27T23:24:47Z,2018-01-29T12:08:58Z,2018-01-29T12:09:55Z,MERGED,True,1,1,1,https://github.com/ocefpaf,remove FORCE,1,[],https://github.com/nco/nco/pull/66,https://github.com/ocefpaf,3,https://github.com/nco/nco/pull/66#issuecomment-361054666,This should fix the Windows builds.,"@pedro-vicente seems to already have done this in commit a332bd8 and it seems to have fixed AppVeyor!

Indeed. The goal of this PR was to show how we can see the CIs status and decide if we are OK to merge or of we need to perform more changes to get a stable release out.",True,{}
nco/nco,https://github.com/nco/nco,66,2018-01-27T23:24:47Z,2018-01-29T12:08:58Z,2018-01-29T12:09:55Z,MERGED,True,1,1,1,https://github.com/ocefpaf,remove FORCE,1,[],https://github.com/nco/nco/pull/66,https://github.com/xylar,4,https://github.com/nco/nco/pull/66#issuecomment-361075987,This should fix the Windows builds.,"The goal of this PR was to show how we can see the CIs status and decide if we are OK to merge or of we need to perform more changes to get a stable release out.

@ocefpaf, agreed.  @pedro-vicente and @czender, this pull request demonstrates how you can see if the CI has passed. You see a green check mark with ""all checks have passed"".  If that weren't the case, you could push more commits to this PR until CI is working again without the need to merge to master until the checks pass.  Additionally, PRs give you a chance to review each other's work before it goes to master, which can be helpful in reducing the number of fixes and reversions on master.  A PR from a branch can also typically help to group commits into small projects, making it clearer what is being added.",True,"{'THUMBS_UP': ['https://github.com/ocefpaf'], 'HEART': ['https://github.com/ocefpaf']}"
nco/nco,https://github.com/nco/nco,68,2018-02-01T19:09:08Z,2018-02-02T18:31:29Z,2018-02-02T18:31:49Z,MERGED,True,167,111,24,https://github.com/czender,Add --log_level option to all binaries,4,['medium priority'],https://github.com/nco/nco/pull/68,https://github.com/czender,1,https://github.com/nco/nco/pull/68,"This patch-set allows users to pass --log_level=[0..5] to all binaries, and the binaries will call nc_set_log_level(), which will (or, more accurately, may) do something if the netCDF library that NCO is linked to was configured with --enable-logging, which I ALWAYS do when building netCDF from source. @hmb1 and @pedro-vicente please use this opportunity to practice your git-fu. You are both reviewers on this PR. After you have both reviewed it, and potentially committed your own changes, I will merge it. I would like to shift (slowly) from the current ""commit to master"" practice to a ""Feature-based workflow"" environment, so that Travis and AppVeyor builds are known to succeed before the PR is merged to master.","This patch-set allows users to pass --log_level=[0..5] to all binaries, and the binaries will call nc_set_log_level(), which will (or, more accurately, may) do something if the netCDF library that NCO is linked to was configured with --enable-logging, which I ALWAYS do when building netCDF from source. @hmb1 and @pedro-vicente please use this opportunity to practice your git-fu. You are both reviewers on this PR. After you have both reviewed it, and potentially committed your own changes, I will merge it. I would like to shift (slowly) from the current ""commit to master"" practice to a ""Feature-based workflow"" environment, so that Travis and AppVeyor builds are known to succeed before the PR is merged to master.",True,{}
nco/nco,https://github.com/nco/nco,68,2018-02-01T19:09:08Z,2018-02-02T18:31:29Z,2018-02-02T18:31:49Z,MERGED,True,167,111,24,https://github.com/czender,Add --log_level option to all binaries,4,['medium priority'],https://github.com/nco/nco/pull/68,https://github.com/pedro-vicente,2,https://github.com/nco/nco/pull/68#issuecomment-362378263,"This patch-set allows users to pass --log_level=[0..5] to all binaries, and the binaries will call nc_set_log_level(), which will (or, more accurately, may) do something if the netCDF library that NCO is linked to was configured with --enable-logging, which I ALWAYS do when building netCDF from source. @hmb1 and @pedro-vicente please use this opportunity to practice your git-fu. You are both reviewers on this PR. After you have both reviewed it, and potentially committed your own changes, I will merge it. I would like to shift (slowly) from the current ""commit to master"" practice to a ""Feature-based workflow"" environment, so that Travis and AppVeyor builds are known to succeed before the PR is merged to master.","ok, will do, after I find some time on my super busy week :-)",True,{}
nco/nco,https://github.com/nco/nco,68,2018-02-01T19:09:08Z,2018-02-02T18:31:29Z,2018-02-02T18:31:49Z,MERGED,True,167,111,24,https://github.com/czender,Add --log_level option to all binaries,4,['medium priority'],https://github.com/nco/nco/pull/68,https://github.com/czender,3,https://github.com/nco/nco/pull/68#issuecomment-362611853,"This patch-set allows users to pass --log_level=[0..5] to all binaries, and the binaries will call nc_set_log_level(), which will (or, more accurately, may) do something if the netCDF library that NCO is linked to was configured with --enable-logging, which I ALWAYS do when building netCDF from source. @hmb1 and @pedro-vicente please use this opportunity to practice your git-fu. You are both reviewers on this PR. After you have both reviewed it, and potentially committed your own changes, I will merge it. I would like to shift (slowly) from the current ""commit to master"" practice to a ""Feature-based workflow"" environment, so that Travis and AppVeyor builds are known to succeed before the PR is merged to master.","Maybe I was unclear. I've asked you to review this PR to demonstrate how others think we should and I would like us to handle invasive new features (e.g., build reconfiguration, new ANTLR repository, migration of regression tests from Perl to Python, dropping ncap, ncap2 string issues on Windows) in the future. Having produced a useful patch set on the log_level branch, I committed it locally then and pushed it upstream to origin where it now sits waiting for your review(s). Please verify that ""All checks have passed"" and that the code changes seem appropriate. A line-by-line review is not asked for, just familiarize yourself with what is changing to heighten your awareness of unforeseen issues that may arise. If the checks have passed and the code changes (seen from the ""File Changes"" button up top) look good, finish the review by approving it. Otherwise don't approve it, and write what concerns you or commit a patch on this branch to change it. Once I receive the blessing of the named reviewers, I will merge the PR to master. Normally it will be you who submits the PR and names me as the reviewer, I just want you to see it from the other side this time. Please complete your reviews.",True,{}
nco/nco,https://github.com/nco/nco,68,2018-02-01T19:09:08Z,2018-02-02T18:31:29Z,2018-02-02T18:31:49Z,MERGED,True,167,111,24,https://github.com/czender,Add --log_level option to all binaries,4,['medium priority'],https://github.com/nco/nco/pull/68,https://github.com/hmb1,4,https://github.com/nco/nco/pull/68#issuecomment-362626933,"This patch-set allows users to pass --log_level=[0..5] to all binaries, and the binaries will call nc_set_log_level(), which will (or, more accurately, may) do something if the netCDF library that NCO is linked to was configured with --enable-logging, which I ALWAYS do when building netCDF from source. @hmb1 and @pedro-vicente please use this opportunity to practice your git-fu. You are both reviewers on this PR. After you have both reviewed it, and potentially committed your own changes, I will merge it. I would like to shift (slowly) from the current ""commit to master"" practice to a ""Feature-based workflow"" environment, so that Travis and AppVeyor builds are known to succeed before the PR is merged to master.",code  looks fine,True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/hmb1,1,https://github.com/nco/nco/pull/74,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)","Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)",True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/pedro-vicente,2,https://github.com/nco/nco/pull/74#issuecomment-367376783,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)","builds, only a few warnings left
Invoke.cc
  cl /c /I""E:\nco\cmake\build\netcdf-c\include"" /I""E:\nco\cmake\build\UDUNITS-2\lib"" /IE:\nco\cmake\build\gsl\build /IE:\nco\src\nco /IE:\nco\cmake\build\antlr
  2\lib\cpp /Zi /W3 /WX- /Od /Ob0 /D WIN32 /D _WINDOWS /D ENABLE_STATIC /D HAVE_NC_INQ_PATH /D HAVE_NC_INQ_FORMAT /D HAVE_NC_DEF_VAR_FILTER /D HAVE_NC_INQ_VAR_
  FILTER /D NC_LIB_VERSION=460 /D HAVE_NETCDF_MEM_H /D _MATH_DEFINES_DEFINED /D HAVE_NETCDF4_H /D ENABLE_NETCDF4 /D ENABLE_UDUNITS /D HAVE_UDUNITS2_H /D ENABLE
  _GSL /D ENABLE_DAP /D ENABLE_DEBUG_SYMBOLS /D USER=pedro /D ""HOSTNAME=DESKTOP-039C73K"" /D NCO_BUILDENGINE=CMake /D _CRT_SECURE_NO_WARNINGS /D _CRT_NONSTDC_NO
  _DEPRECATE /D NEED_STRNCASECMP /D ""CMAKE_INTDIR=\""Debug\"""" /D _MBCS /Gm- /EHsc /RTC1 /MDd /GS /fp:precise /Zc:wchar_t /Zc:forScope /Zc:inline /GR /Fo""ncap2.d
  ir\Debug\\"" /Fd""ncap2.dir\Debug\vc140.pdb"" /Gd /TP /wd4267 /wd4244 /wd4477 /errorReport:queue E:\nco\src\nco++\Invoke.cc E:\nco\src\nco++\NcapVar.cc E:\nco\s
  rc\nco++\NcapVarVector.cc E:\nco\src\nco++\fmc_all_cls.cc E:\nco\src\nco++\fmc_cls.cc E:\nco\src\nco++\fmc_gsl_cls.cc E:\nco\src\nco++\ncap2.cc E:\nco\src\nc
  o++\ncap2_att.cc E:\nco\src\nco++\ncap2_utl.cc E:\nco\src\nco++\ncoLexer.cpp E:\nco\src\nco++\ncoParser.cpp E:\nco\src\nco++\ncoTree.cpp E:\nco\src\nco++\prs
  _cls.cc

  NcapVar.cc
  NcapVarVector.cc
  fmc_all_cls.cc
E:\nco\src\nco++\fmc_all_cls.cc(2002): warning C4305: '*=': truncation from 'double' to 'float' [E:\nco\cmake\build\ncap2.vcxproj]
E:\nco\src\nco++\fmc_all_cls.cc(2727): warning C4800: 'int': forcing value to bool 'true' or 'false' (performance warning) [E:\nco\cmake\build\ncap2.vcxproj]
  fmc_cls.cc
  fmc_gsl_cls.cc
  ncap2.cc
E:\nco\src\nco++\ncap2.cc(759): warning C4800: 'int': forcing value to bool 'true' or 'false' (performance warning) [E:\nco\cmake\build\ncap2.vcxproj]
E:\nco\src\nco++\ncap2.cc(760): warning C4800: 'int': forcing value to bool 'true' or 'false' (performance warning) [E:\nco\cmake\build\ncap2.vcxproj]
E:\nco\src\nco++\ncap2.cc(761): warning C4800: 'int': forcing value to bool 'true' or 'false' (performance warning) [E:\nco\cmake\build\ncap2.vcxproj]
E:\nco\src\nco++\ncap2.cc(1183): warning C4101: 'dnan': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
  ncap2_att.cc
  ncap2_utl.cc
  ncoLexer.cpp
  ncoParser.cpp
  ncoTree.cpp
ncoTree.cpp(1382): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(1427): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(1477): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(1535): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(1593): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(1651): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(1815): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(1869): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(1929): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2007): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2061): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2121): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2198): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2252): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2312): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2389): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2443): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2503): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2578): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2632): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2785): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(2853): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(3116): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(3210): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(3395): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(3457): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(3572): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(3831): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(4087): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
ncoTree.cpp(4283): warning C4101: 'pe': unreferenced local variable [E:\nco\cmake\build\ncap2.vcxproj]
  prs_cls.cc
  Generating Code...
e:\nco\src\nco++\fmc_gsl_cls.cc(5090): warning C4715: 'nco_gsl_cls::fnd': not all control paths return a value [E:\nco\cmake\build\ncap2.vcxproj]",True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/hmb1,3,https://github.com/nco/nco/pull/74#issuecomment-367379068,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)","Thanks Pedro,
Ive already squelched most of the above compiler warnings in the ""master"" branch
They will disapear when I do the MR",True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/hmb1,4,https://github.com/nco/nco/pull/74#issuecomment-367754321,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)","Hi Charlie,
Have merged ncap.h and ncap_yacc.h into the new file ncap_utl.h .
have deleted ncap_yacc.*  and  ncap.c and ncap.h
All that remains to get it working on AppVeyor  and then delete the unused functions in ncap_utl.c
...Henry",True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/czender,5,https://github.com/nco/nco/pull/74#issuecomment-367759589,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)","@hmb1 Sounds good, carry on. Once the checks pass and I know the new filenames then I will make the necessary changes to bld/Makefile and then we'll merge the patchset.",True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/czender,6,https://github.com/nco/nco/pull/74#issuecomment-368668514,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)",What is the status of the failing appveyor check?,True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/hmb1,7,https://github.com/nco/nco/pull/74#issuecomment-368827090,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)",attempt to resolve conflict in branch,True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/hmb1,8,https://github.com/nco/nco/pull/74#issuecomment-368833227,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)",tidy up in ncap_lex.l and  ncap_utl.c,True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/hmb1,9,https://github.com/nco/nco/pull/74#issuecomment-368863800,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)","Hi Pedro,
thanks for doing the checks
I am having the same issue:
And I cant find the links either
...Henry
On 27/02/2018 at 12:37 PM, ""Pedro Vicente"" pedro.vicente@space-research.org wrote:
Hi team
I’m trying to make some sense in GitHub about the supposed failures of #74
But cannot :=)
Both branches compile for me locally
And I cannot see any appveyor log ; what would be the links to follow ?
-Pedro",True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/czender,10,https://github.com/nco/nco/pull/74#issuecomment-368914011,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)","The PR box says :

""This branch has conflicts that must be resolved
to resolve conflicts before continuing.
Conflicting files
configure.ac
src/nco/ncap.c""

I would expect that after this is done manually, appveyor will test the merged sources.",True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/czender,11,https://github.com/nco/nco/pull/74#issuecomment-368969955,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)",This is related to #74,True,{}
nco/nco,https://github.com/nco/nco,74,2018-02-21T09:21:49Z,2018-02-28T11:16:31Z,2020-04-01T08:45:51Z,MERGED,True,327,3054,18,https://github.com/hmb1,Hmb dep ncap,22,[],https://github.com/nco/nco/pull/74,https://github.com/hmb1,12,https://github.com/nco/nco/pull/74#issuecomment-368971593,"Hi Charlie,
please review mods at your leisure
Hi Pedro -
Please double check that branch works on Windows (it works on AppVeyor)","deleted following ncap_yacc.{c,h,y}
deleted ncap.c .
new file ncap_utl.c",True,{}
nco/nco,https://github.com/nco/nco,75,2018-02-22T21:51:25Z,2018-03-01T23:27:24Z,2018-03-01T23:27:33Z,MERGED,True,90,9,7,https://github.com/czender,Create sanitize_input branch. Implement nco_sng_sntz().,6,['medium priority'],https://github.com/nco/nco/pull/75,https://github.com/czender,1,https://github.com/nco/nco/pull/75,"Implement white-list-based filtering of input filenames. This has the potential to break existing workflows, so we may need to turn this off before release, and announce our intentions before activating. Eliminate waiting on user input for regression tests.","Implement white-list-based filtering of input filenames. This has the potential to break existing workflows, so we may need to turn this off before release, and announce our intentions before activating. Eliminate waiting on user input for regression tests.",True,{}
nco/nco,https://github.com/nco/nco,75,2018-02-22T21:51:25Z,2018-03-01T23:27:24Z,2018-03-01T23:27:33Z,MERGED,True,90,9,7,https://github.com/czender,Create sanitize_input branch. Implement nco_sng_sntz().,6,['medium priority'],https://github.com/nco/nco/pull/75,https://github.com/czender,2,https://github.com/nco/nco/pull/75#issuecomment-368948170,"Implement white-list-based filtering of input filenames. This has the potential to break existing workflows, so we may need to turn this off before release, and announce our intentions before activating. Eliminate waiting on user input for regression tests.","@hmb1 and @pedro-vicente I would appreciate your review on this prior to releasing 4.7.3, which I aim to do within a week.",True,{}
nco/nco,https://github.com/nco/nco,75,2018-02-22T21:51:25Z,2018-03-01T23:27:24Z,2018-03-01T23:27:33Z,MERGED,True,90,9,7,https://github.com/czender,Create sanitize_input branch. Implement nco_sng_sntz().,6,['medium priority'],https://github.com/nco/nco/pull/75,https://github.com/hmb1,3,https://github.com/nco/nco/pull/75#issuecomment-369195045,"Implement white-list-based filtering of input filenames. This has the potential to break existing workflows, so we may need to turn this off before release, and announce our intentions before activating. Eliminate waiting on user input for regression tests.","had a good look at  code :
all looks fine",True,{}
nco/nco,https://github.com/nco/nco,82,2018-03-21T12:25:12Z,2018-03-21T14:32:43Z,2018-03-21T14:45:01Z,MERGED,True,9,10,1,https://github.com/ocefpaf,fix appveyor,1,[],https://github.com/nco/nco/pull/82,https://github.com/ocefpaf,1,https://github.com/nco/nco/pull/82,Should fix #81,Should fix #81,True,{}
nco/nco,https://github.com/nco/nco,82,2018-03-21T12:25:12Z,2018-03-21T14:32:43Z,2018-03-21T14:45:01Z,MERGED,True,9,10,1,https://github.com/ocefpaf,fix appveyor,1,[],https://github.com/nco/nco/pull/82,https://github.com/czender,2,https://github.com/nco/nco/pull/82#issuecomment-374961542,Should fix #81,Many thanks. We would be lost without you!,True,{'THUMBS_UP': ['https://github.com/ocefpaf']}
nco/nco,https://github.com/nco/nco,82,2018-03-21T12:25:12Z,2018-03-21T14:32:43Z,2018-03-21T14:45:01Z,MERGED,True,9,10,1,https://github.com/ocefpaf,fix appveyor,1,[],https://github.com/nco/nco/pull/82,https://github.com/ocefpaf,3,https://github.com/nco/nco/pull/82#issuecomment-374962279,Should fix #81,No problem. Happy to help with boilerplate stuff like that so you can focus on awesome code for nco.,True,{}
nco/nco,https://github.com/nco/nco,84,2018-03-29T14:06:17Z,2018-03-29T14:12:54Z,2020-04-01T08:47:17Z,MERGED,True,4,4,1,https://github.com/hmb1,Hmb fix cdl,2,[],https://github.com/nco/nco/pull/84,https://github.com/hmb1,1,https://github.com/nco/nco/pull/84,fixes to nco_prn.c such that  unhandled NetCDF types are ignored,fixes to nco_prn.c such that  unhandled NetCDF types are ignored,True,{}
nco/nco,https://github.com/nco/nco,87,2018-04-07T14:14:03Z,2018-04-07T16:02:23Z,2018-04-07T16:49:28Z,MERGED,True,9,9,4,https://github.com/sebastic,Fix spelling errors.,1,[],https://github.com/nco/nco/pull/87,https://github.com/sebastic,1,https://github.com/nco/nco/pull/87,"The lintian QA tool reported a typo for the Debian package build:

statment -> statement","The lintian QA tool reported a typo for the Debian package build:

statment -> statement",True,{}
nco/nco,https://github.com/nco/nco,101,2018-07-27T16:09:20Z,2018-07-27T16:17:06Z,2020-04-01T08:46:19Z,MERGED,True,255,67,3,https://github.com/hmb1,Hmb aux new2,3,[],https://github.com/nco/nco/pull/101,https://github.com/hmb1,1,https://github.com/nco/nco/pull/101,Merge new code that can search  for aux coords without standard_name attributte,Merge new code that can search  for aux coords without standard_name attributte,True,{}
nco/nco,https://github.com/nco/nco,102,2018-07-30T10:21:40Z,2018-07-30T11:44:23Z,2020-04-01T08:46:22Z,MERGED,True,524,213,53,https://github.com/hmb1,Hmb inter,26,[],https://github.com/nco/nco/pull/102,https://github.com/hmb1,1,https://github.com/nco/nco/pull/102,merge after removing data/rgr.nc,merge after removing data/rgr.nc,True,{}
nco/nco,https://github.com/nco/nco,107,2018-09-10T19:23:43Z,2018-09-10T19:33:00Z,2018-09-10T19:41:31Z,MERGED,True,65,93,5,https://github.com/ocefpaf,Fix appveyor,2,[],https://github.com/nco/nco/pull/107,https://github.com/ocefpaf,1,https://github.com/nco/nco/pull/107,"@czender conda-build is not adequate for the tests here, it triggers a false positive when the tests segfault or error in odd ways. See conda/conda-build#3083
This PRs still relies on conda to build and test but it does not use conda-build, so errors should ""break"" AppVeyor as expected.","@czender conda-build is not adequate for the tests here, it triggers a false positive when the tests segfault or error in odd ways. See conda/conda-build#3083
This PRs still relies on conda to build and test but it does not use conda-build, so errors should ""break"" AppVeyor as expected.",True,{}
nco/nco,https://github.com/nco/nco,110,2018-10-12T11:57:34Z,2018-10-24T12:37:01Z,2018-10-24T12:37:01Z,CLOSED,False,45,13,7,https://github.com/hmb1,update branch with master commit,5,[],https://github.com/nco/nco/pull/110,https://github.com/hmb1,1,https://github.com/nco/nco/pull/110,"update branch with master commit
( with a --rebase of course )","update branch with master commit
( with a --rebase of course )",True,{}
nco/nco,https://github.com/nco/nco,113,2018-12-31T11:32:59Z,2018-12-31T12:01:06Z,2018-12-31T12:01:06Z,MERGED,True,1295,511,33,https://github.com/hmb1,refresh branch from master,42,[],https://github.com/nco/nco/pull/113,https://github.com/hmb1,1,https://github.com/nco/nco/pull/113,refresh branch  from master ( with rebase ),refresh branch  from master ( with rebase ),True,{}
nco/nco,https://github.com/nco/nco,113,2018-12-31T11:32:59Z,2018-12-31T12:01:06Z,2018-12-31T12:01:06Z,MERGED,True,1295,511,33,https://github.com/hmb1,refresh branch from master,42,[],https://github.com/nco/nco/pull/113,https://github.com/hmb1,2,https://github.com/nco/nco/pull/113#issuecomment-450637529,refresh branch  from master ( with rebase ),ok,True,{}
nco/nco,https://github.com/nco/nco,116,2019-02-13T01:29:05Z,2019-02-13T01:44:19Z,2019-02-13T01:44:31Z,MERGED,True,8,8,7,https://github.com/opoplawski,"Remove default(none) clauses to prevent GCC9 errors, fixes #114",1,[],https://github.com/nco/nco/pull/116,https://github.com/opoplawski,1,https://github.com/nco/nco/pull/116,This seems to be all of them,This seems to be all of them,True,{}
nco/nco,https://github.com/nco/nco,116,2019-02-13T01:29:05Z,2019-02-13T01:44:19Z,2019-02-13T01:44:31Z,MERGED,True,8,8,7,https://github.com/opoplawski,"Remove default(none) clauses to prevent GCC9 errors, fixes #114",1,[],https://github.com/nco/nco/pull/116,https://github.com/czender,2,https://github.com/nco/nco/pull/116#issuecomment-463019907,This seems to be all of them,"Thanks for doing this Orion. The appveyor failure is due to a separate issue I am working on, so the checks looks good.",True,{}
nco/nco,https://github.com/nco/nco,117,2019-02-14T17:42:13Z,2019-02-14T17:52:02Z,2019-02-14T17:55:35Z,MERGED,True,7,8,1,https://github.com/ocefpaf,fix appveyor,1,[],https://github.com/nco/nco/pull/117,https://github.com/ocefpaf,1,https://github.com/nco/nco/pull/117,This PR removes any conda command after the activation b/c we don't really need them. Note that AppVeyor still fails but it is a real failures now and not b/c of the conda list/info commands.,This PR removes any conda command after the activation b/c we don't really need them. Note that AppVeyor still fails but it is a real failures now and not b/c of the conda list/info commands.,True,{}
nco/nco,https://github.com/nco/nco,117,2019-02-14T17:42:13Z,2019-02-14T17:52:02Z,2019-02-14T17:55:35Z,MERGED,True,7,8,1,https://github.com/ocefpaf,fix appveyor,1,[],https://github.com/nco/nco/pull/117,https://github.com/ocefpaf,2,https://github.com/nco/nco/pull/117#issuecomment-463722953,This PR removes any conda command after the activation b/c we don't really need them. Note that AppVeyor still fails but it is a real failures now and not b/c of the conda list/info commands.,"The failure now is:
Scanning dependencies of target nco
[  1%] Building C object CMakeFiles/nco.dir/src/nco/nco_att_utl.c.obj
nco_att_utl.c
C:\Miniconda36-x64\envs\TEST\Library\include\netcdf_mem.h(15): error C2011: 'NC_memio': 'struct' type redefinition
c:\projects\nco\src\nco\nco_netcdf.h(355): note: see declaration of 'NC_memio'
NMAKE : fatal error U1077: 'C:\PROGRA~2\MI0E91~1.0\VC\bin\amd64\cl.exe' : return code '0x2'
Stop.
NMAKE : fatal error U1077: '""C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\amd64\nmake.exe""' : return code '0x2'
Stop.
NMAKE : fatal error U1077: '""C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\BIN\amd64\nmake.exe""' : return code '0x2'
Stop.",True,{}
nco/nco,https://github.com/nco/nco,117,2019-02-14T17:42:13Z,2019-02-14T17:52:02Z,2019-02-14T17:55:35Z,MERGED,True,7,8,1,https://github.com/ocefpaf,fix appveyor,1,[],https://github.com/nco/nco/pull/117,https://github.com/czender,3,https://github.com/nco/nco/pull/117#issuecomment-463724722,This PR removes any conda command after the activation b/c we don't really need them. Note that AppVeyor still fails but it is a real failures now and not b/c of the conda list/info commands.,Thanks. Now I can try to fix the NCO bug.,True,{'THUMBS_UP': ['https://github.com/ocefpaf']}
nco/nco,https://github.com/nco/nco,117,2019-02-14T17:42:13Z,2019-02-14T17:52:02Z,2019-02-14T17:55:35Z,MERGED,True,7,8,1,https://github.com/ocefpaf,fix appveyor,1,[],https://github.com/nco/nco/pull/117,https://github.com/ocefpaf,4,https://github.com/nco/nco/pull/117#issuecomment-463725777,This PR removes any conda command after the activation b/c we don't really need them. Note that AppVeyor still fails but it is a real failures now and not b/c of the conda list/info commands.,"Thanks. Now I can try to fix the NCO bug.

Thanks for keeping nco working on Windows! (I know it is not an easy feat!)",True,{}
nco/nco,https://github.com/nco/nco,119,2019-03-13T16:09:37Z,2019-03-14T13:40:48Z,2019-03-14T13:41:15Z,MERGED,True,8662,715,28,https://github.com/hmb1,Hmb gen msh3,76,[],https://github.com/nco/nco/pull/119,https://github.com/hmb1,1,https://github.com/nco/nco/pull/119,"HI Charlie,
It worked ok on skyglow !!
...Henry","HI Charlie,
It worked ok on skyglow !!
...Henry",True,{}
nco/nco,https://github.com/nco/nco,127,2019-04-24T13:22:46Z,2019-04-24T15:29:05Z,2019-04-24T15:29:05Z,MERGED,True,1232,314,10,https://github.com/hmb1,Hmb gen msh4,26,[],https://github.com/nco/nco/pull/127,https://github.com/hmb1,1,https://github.com/nco/nco/pull/127,"@czender
merge latest mesh stuff","@czender
merge latest mesh stuff",True,{}
nco/nco,https://github.com/nco/nco,128,2019-04-24T15:32:20Z,2019-04-24T15:33:11Z,2022-03-25T19:37:00Z,MERGED,True,314,1232,10,https://github.com/czender,"Revert ""Hmb gen msh4""",1,[],https://github.com/nco/nco/pull/128,https://github.com/czender,1,https://github.com/nco/nco/pull/128,"Reverts #127
Only now did I notice all the new compiler warning messages like this:
kd.c: In function 'kd_nearest_intersect_wrp':
kd.c:2601:56: warning: ISO C does not support 'FUNCTION' predefined identifier [-Wpedantic]
fprintf(stderr,""%s(): Just entered the function\n"",FUNCTION);
Please eliminate all these warnings by getting rid of the FUNCTION macro then we can merge this.","Reverts #127
Only now did I notice all the new compiler warning messages like this:
kd.c: In function 'kd_nearest_intersect_wrp':
kd.c:2601:56: warning: ISO C does not support 'FUNCTION' predefined identifier [-Wpedantic]
fprintf(stderr,""%s(): Just entered the function\n"",FUNCTION);
Please eliminate all these warnings by getting rid of the FUNCTION macro then we can merge this.",True,{}
nco/nco,https://github.com/nco/nco,129,2019-04-25T15:02:32Z,2019-04-25T19:49:53Z,2019-04-25T19:49:53Z,MERGED,True,1241,315,10,https://github.com/hmb1,Hmb gen msh4,2,[],https://github.com/nco/nco/pull/129,https://github.com/hmb1,1,https://github.com/nco/nco/pull/129,,,True,{}
nco/nco,https://github.com/nco/nco,129,2019-04-25T15:02:32Z,2019-04-25T19:49:53Z,2019-04-25T19:49:53Z,MERGED,True,1241,315,10,https://github.com/hmb1,Hmb gen msh4,2,[],https://github.com/nco/nco/pull/129,https://github.com/czender,2,https://github.com/nco/nco/pull/129#issuecomment-486813681,,Thank you. Good luck with rescuing E3SM from ERWG bugs!,True,{}
nco/nco,https://github.com/nco/nco,130,2019-05-08T13:05:14Z,2019-05-08T13:52:08Z,2019-05-08T13:52:08Z,MERGED,True,360,123,11,https://github.com/hmb1,Hmb gen msh4,15,[],https://github.com/nco/nco/pull/130,https://github.com/hmb1,1,https://github.com/nco/nco/pull/130,"@czender
intermediate release -  before commencing with RLL intersection
some optimisations and tidy of enum's","@czender
intermediate release -  before commencing with RLL intersection
some optimisations and tidy of enum's",True,{}
nco/nco,https://github.com/nco/nco,131,2019-05-15T12:50:48Z,2019-05-15T14:03:45Z,2019-05-15T14:26:10Z,MERGED,True,686,225,11,https://github.com/hmb1,Hmb gen msh4,16,[],https://github.com/nco/nco/pull/131,https://github.com/hmb1,1,https://github.com/nco/nco/pull/131,"@czender
quite a few mods
nco_msh_mk()
now chooses  overlap method (poly_rll or poly_sph) based on  rank.
This is the first cut of the poly_rll code so there maybe some spookiness at the poles.
What is the max resolution of  RLL files you intend to use ?","@czender
quite a few mods
nco_msh_mk()
now chooses  overlap method (poly_rll or poly_sph) based on  rank.
This is the first cut of the poly_rll code so there maybe some spookiness at the poles.
What is the max resolution of  RLL files you intend to use ?",True,{}
nco/nco,https://github.com/nco/nco,131,2019-05-15T12:50:48Z,2019-05-15T14:03:45Z,2019-05-15T14:26:10Z,MERGED,True,686,225,11,https://github.com/hmb1,Hmb gen msh4,16,[],https://github.com/nco/nco/pull/131,https://github.com/czender,2,https://github.com/nco/nco/pull/131#issuecomment-492668558,"@czender
quite a few mods
nco_msh_mk()
now chooses  overlap method (poly_rll or poly_sph) based on  rank.
This is the first cut of the poly_rll code so there maybe some spookiness at the poles.
What is the max resolution of  RLL files you intend to use ?","max rll resolution is 1441x2880 (eighth degree) for now.
ne512 case is in that neighborhood",True,{}
nco/nco,https://github.com/nco/nco,131,2019-05-15T12:50:48Z,2019-05-15T14:03:45Z,2019-05-15T14:26:10Z,MERGED,True,686,225,11,https://github.com/hmb1,Hmb gen msh4,16,[],https://github.com/nco/nco/pull/131,https://github.com/czender,3,https://github.com/nco/nco/pull/131#issuecomment-492669143,"@czender
quite a few mods
nco_msh_mk()
now chooses  overlap method (poly_rll or poly_sph) based on  rank.
This is the first cut of the poly_rll code so there maybe some spookiness at the poles.
What is the max resolution of  RLL files you intend to use ?","Please fix this:
nco_sph.c: In function 'nco_rll_seg_parallel':
nco_sph.c:1988:12: warning: multi-character character constant [-Wmultichar]
     code = '2;';
            ^~~~
nco_sph.c:1988:12: warning: overflow in conversion from 'int' to 'char' changes value from '12859' to '59' [-Woverflow]

```m",True,{}
nco/nco,https://github.com/nco/nco,131,2019-05-15T12:50:48Z,2019-05-15T14:03:45Z,2019-05-15T14:26:10Z,MERGED,True,686,225,11,https://github.com/hmb1,Hmb gen msh4,16,[],https://github.com/nco/nco/pull/131,https://github.com/hmb1,4,https://github.com/nco/nco/pull/131#issuecomment-492677636,"@czender
quite a few mods
nco_msh_mk()
now chooses  overlap method (poly_rll or poly_sph) based on  rank.
This is the first cut of the poly_rll code so there maybe some spookiness at the poles.
What is the max resolution of  RLL files you intend to use ?","@czender
fixed syntax  error in nco_sph.c",True,{}
nco/nco,https://github.com/nco/nco,134,2019-05-23T09:54:54Z,2019-05-23T13:31:52Z,2019-05-23T13:31:52Z,MERGED,True,199,65,5,https://github.com/hmb1,various fixes to nco_sph.c,7,[],https://github.com/nco/nco/pull/134,https://github.com/hmb1,1,https://github.com/nco/nco/pull/134,"@czender
latest fixes in nco_sph code branch","@czender
latest fixes in nco_sph code branch",True,{}
nco/nco,https://github.com/nco/nco,136,2019-06-03T11:22:13Z,2019-06-03T14:08:13Z,2019-06-03T14:08:13Z,MERGED,True,127,30,6,https://github.com/hmb1,Hmb gen msh4,3,[],https://github.com/nco/nco/pull/136,https://github.com/hmb1,1,https://github.com/nco/nco/pull/136,"@pedro-vicente
@czender
Hi Pedro, I have nailed most of the windows compiler warnings you mention.","@pedro-vicente
@czender
Hi Pedro, I have nailed most of the windows compiler warnings you mention.",True,{}
nco/nco,https://github.com/nco/nco,136,2019-06-03T11:22:13Z,2019-06-03T14:08:13Z,2019-06-03T14:08:13Z,MERGED,True,127,30,6,https://github.com/hmb1,Hmb gen msh4,3,[],https://github.com/nco/nco/pull/136,https://github.com/hmb1,2,https://github.com/nco/nco/pull/136#issuecomment-498219388,"@pedro-vicente
@czender
Hi Pedro, I have nailed most of the windows compiler warnings you mention.","@czender
looks like appveyor is broken !!",True,{}
nco/nco,https://github.com/nco/nco,136,2019-06-03T11:22:13Z,2019-06-03T14:08:13Z,2019-06-03T14:08:13Z,MERGED,True,127,30,6,https://github.com/hmb1,Hmb gen msh4,3,[],https://github.com/nco/nco/pull/136,https://github.com/czender,3,https://github.com/nco/nco/pull/136#issuecomment-498272029,"@pedro-vicente
@czender
Hi Pedro, I have nailed most of the windows compiler warnings you mention.","Yes. Appveyor appears to have broken, but not due to any changes we made.",True,{}
nco/nco,https://github.com/nco/nco,137,2019-06-05T18:55:24Z,2019-06-05T19:07:40Z,2019-06-05T19:15:31Z,MERGED,True,2,2,1,https://github.com/ocefpaf,Fix AppVeyor builds,1,[],https://github.com/nco/nco/pull/137,https://github.com/ocefpaf,1,https://github.com/nco/nco/pull/137,Should get the environment building again.,Should get the environment building again.,True,{}
nco/nco,https://github.com/nco/nco,139,2019-06-14T12:24:19Z,2019-06-14T12:54:48Z,2020-04-01T08:46:28Z,MERGED,True,521,706,17,https://github.com/hmb1,Rename of kd files and  new configure / CMake files,5,[],https://github.com/nco/nco/pull/139,https://github.com/hmb1,1,https://github.com/nco/nco/pull/139,"@czender
kd files renamed  kd.c => nco_kd.c  kd.h => nco_kd.h
new configure/Makfile  script with autotools    1.15.1
new CMakelists.txt","@czender
kd files renamed  kd.c => nco_kd.c  kd.h => nco_kd.h
new configure/Makfile  script with autotools    1.15.1
new CMakelists.txt",True,{}
nco/nco,https://github.com/nco/nco,141,2019-07-02T04:32:25Z,2019-07-02T05:22:19Z,2019-07-02T05:27:43Z,MERGED,True,1,1,1,https://github.com/sebastic,Fix spelling errors.,1,[],https://github.com/nco/nco/pull/141,https://github.com/sebastic,1,https://github.com/nco/nco/pull/141,"The lintian QA tool reported a spelling error for NCO 4.8.1:

didnt -> didn't","The lintian QA tool reported a spelling error for NCO 4.8.1:

didnt -> didn't",True,{}
nco/nco,https://github.com/nco/nco,146,2019-08-08T17:51:30Z,2019-08-09T16:21:47Z,2019-08-09T16:21:47Z,MERGED,True,1978,530,11,https://github.com/hmb1,Hmb gen msh5,33,[],https://github.com/nco/nco/pull/146,https://github.com/hmb1,1,https://github.com/nco/nco/pull/146,,,True,{}
nco/nco,https://github.com/nco/nco,146,2019-08-08T17:51:30Z,2019-08-09T16:21:47Z,2019-08-09T16:21:47Z,MERGED,True,1978,530,11,https://github.com/hmb1,Hmb gen msh5,33,[],https://github.com/nco/nco/pull/146,https://github.com/hmb1,2,https://github.com/nco/nco/pull/146#issuecomment-519622358,,"@czender
please review",True,{}
nco/nco,https://github.com/nco/nco,146,2019-08-08T17:51:30Z,2019-08-09T16:21:47Z,2019-08-09T16:21:47Z,MERGED,True,1978,530,11,https://github.com/hmb1,Hmb gen msh5,33,[],https://github.com/nco/nco/pull/146,https://github.com/czender,3,https://github.com/nco/nco/pull/146#issuecomment-519675477,,"Also there are tons of ""register deprecated"" warnings caused by kd.h, e.g.,
In file included from ../nco/nco_ply_lst.h:29:
../nco/nco_kd.h:252:14: warning: 'register' storage class specifier is
      deprecated and incompatible with C++17 [-Wdeprecated-register]
void resolve(register KDElem **lo, register KDElem **eq, register KDEle...
             ^~~~~~~~~
../nco/nco_kd.h:252:36: warning: 'register' storage class specifier is
      deprecated and incompatible with C++17 [-Wdeprecated-register]
void resolve(register KDElem **lo, register KDElem **eq, register KDEle...
                                   ^~~~~~~~~
../nco/nco_kd.h:252:58: warning: 'register' storage class specifier is
      deprecated and incompatible with C++17 [-Wdeprecated-register]
void resolve(register KDElem **lo, register KDElem **eq, register KDElem **hi...",True,{}
nco/nco,https://github.com/nco/nco,146,2019-08-08T17:51:30Z,2019-08-09T16:21:47Z,2019-08-09T16:21:47Z,MERGED,True,1978,530,11,https://github.com/hmb1,Hmb gen msh5,33,[],https://github.com/nco/nco/pull/146,https://github.com/hmb1,4,https://github.com/nco/nco/pull/146#issuecomment-519883578,,"@czender
squelched most of them !!",True,{}
nco/nco,https://github.com/nco/nco,149,2019-08-20T15:16:15Z,2019-08-20T19:37:57Z,2019-08-20T19:37:57Z,MERGED,True,62,9,2,https://github.com/hmb1,Hmb gen msh5,2,[],https://github.com/nco/nco/pull/149,https://github.com/hmb1,1,https://github.com/nco/nco/pull/149,"@czender
fix issue 147
mostly mods to   nco_map_mk()","@czender
fix issue 147
mostly mods to   nco_map_mk()",True,{}
nco/nco,https://github.com/nco/nco,153,2019-10-02T14:55:52Z,2019-10-02T16:57:49Z,2019-10-02T16:58:08Z,MERGED,True,909,539,9,https://github.com/hmb1,Hmb gen msh5 nm,27,[],https://github.com/nco/nco/pull/153,https://github.com/hmb1,1,https://github.com/nco/nco/pull/153,"@czender
latest and greatest interpolation method
big tidy up","@czender
latest and greatest interpolation method
big tidy up",True,{}
nco/nco,https://github.com/nco/nco,153,2019-10-02T14:55:52Z,2019-10-02T16:57:49Z,2019-10-02T16:58:08Z,MERGED,True,909,539,9,https://github.com/hmb1,Hmb gen msh5 nm,27,[],https://github.com/nco/nco/pull/153,https://github.com/czender,2,https://github.com/nco/nco/pull/153#issuecomment-537558293,"@czender
latest and greatest interpolation method
big tidy up","I am excited to see this merged! Please do so after you fix these compiler warnings in the PR.
nco_map.c: In function ‘nco_msh_mk’:
nco_map.c:1010:23: warning: format ‘%d’ expects argument of type ‘int’, but argument 4 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
       fprintf(stderr, ""%s: INFO: num input polygons=%d, num output polygons=%d num overlap polygons=%d\n"", nco_prg_nm_get(),grd_sz_in, grd_sz_out , pl_cnt_vrl);
                       ^
nco_map.c:1010:23: warning: format ‘%d’ expects argument of type ‘int’, but argument 5 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
nco_ply_lst.c: In function ‘nco_poly_lst_mk_sph’:
nco_ply_lst.c:400:27: warning: format ‘%d’ expects argument of type ‘int’, but argument 6 has type ‘size_t {aka long unsigned int}’ [-Wformat=]
     (void)fprintf(stderr, ""%s: %s size input list(%lu), size output list(%d)  total area=%.15e  num wrapped= %d num caps=%d num masked=%d\n"", nco_prg_nm_get(),fnc_nm, grd_sz, grd_sz, tot_area, wrp_cnt, wrp_y_cnt, msk_cnt);
  
nco_sph.c:1882:12: warning: ‘LON_MAX_RAD’ is static but used in inline function ‘Cos’ which is not static
     theta-=LON_MAX_RAD;
            ^
nco_sph.c:1881:31: warning: ‘LON_MIN_RAD’ is static but used in inline function ‘Cos’ which is not static
   if(blon &&  theta > M_PI && LON_MIN_RAD >=0.0 )
                               ^
nco_sph.c:1850:14: warning: ‘LON_MAX_RAD’ is static but used in inline function ‘Sin’ which is not static
       theta-=LON_MAX_RAD;
              ^
nco_sph.c:1849:33: warning: ‘LON_MIN_RAD’ is static but used in inline function ‘Sin’ which is not static
     if(blon &&  theta > M_PI && LON_MIN_RAD >=0.0 )

nco_kd.c:2079:37: warning: address of array 'list[i].elem->size' will always
      evaluate to 'true' [-Wpointer-bool-conversion]
          if(list[i].elem && list[i].elem->size)
                          ~~ ~~~~~~~~~~~~~~^~~~

nco_map.c:1399:10: warning: enumeration value 'nco_grd_lon_nil' not handled in
      switch [-Wswitch]
  switch(typ_in){
         ^",True,{}
nco/nco,https://github.com/nco/nco,153,2019-10-02T14:55:52Z,2019-10-02T16:57:49Z,2019-10-02T16:58:08Z,MERGED,True,909,539,9,https://github.com/hmb1,Hmb gen msh5 nm,27,[],https://github.com/nco/nco/pull/153,https://github.com/hmb1,3,https://github.com/nco/nco/pull/153#issuecomment-537578509,"@czender
latest and greatest interpolation method
big tidy up","@czender
think I got most of the compiler warnings !!",True,{}
nco/nco,https://github.com/nco/nco,153,2019-10-02T14:55:52Z,2019-10-02T16:57:49Z,2019-10-02T16:58:08Z,MERGED,True,909,539,9,https://github.com/hmb1,Hmb gen msh5 nm,27,[],https://github.com/nco/nco/pull/153,https://github.com/hmb1,4,https://github.com/nco/nco/pull/153#issuecomment-537579539,"@czender
latest and greatest interpolation method
big tidy up","@czender
go ahead and merge",True,{}
nco/nco,https://github.com/nco/nco,153,2019-10-02T14:55:52Z,2019-10-02T16:57:49Z,2019-10-02T16:58:08Z,MERGED,True,909,539,9,https://github.com/hmb1,Hmb gen msh5 nm,27,[],https://github.com/nco/nco/pull/153,https://github.com/czender,5,https://github.com/nco/nco/pull/153#issuecomment-537585502,"@czender
latest and greatest interpolation method
big tidy up","Thanks, merged!",True,{}
nco/nco,https://github.com/nco/nco,157,2019-10-18T14:27:31Z,2019-10-18T17:47:41Z,2019-10-18T17:47:41Z,MERGED,True,271,294,10,https://github.com/hmb1,Hmb msh tidy,7,[],https://github.com/nco/nco/pull/157,https://github.com/hmb1,1,https://github.com/nco/nco/pull/157,"@czender
code tidy up, removed the global NCO_SPH_PLY_TYP","@czender
code tidy up, removed the global NCO_SPH_PLY_TYP",True,{}
nco/nco,https://github.com/nco/nco,157,2019-10-18T14:27:31Z,2019-10-18T17:47:41Z,2019-10-18T17:47:41Z,MERGED,True,271,294,10,https://github.com/hmb1,Hmb msh tidy,7,[],https://github.com/nco/nco/pull/157,https://github.com/czender,2,https://github.com/nco/nco/pull/157#issuecomment-543819697,"@czender
code tidy up, removed the global NCO_SPH_PLY_TYP","Please fix all warnings below first:
C:\projects\nco\src\nco\nco_kd.c(2462): warning C4101: 'kd_list_nw': unreferenced local variable
C:\projects\nco\src\nco\nco_kd.c(2702): warning C4101: 'm': unreferenced local variable
C:\projects\nco\src\nco\nco_kd.c(2709): warning C4101: 'list_end': unreferenced local variable
C:\projects\nco\src\nco\nco_kd.c(2708): warning C4101: 'list_srt': unreferenced local variable
C:\projects\nco\src\nco\nco_map.c(550): warning C4101: 'aed_mtd': unreferenced local variable
C:\projects\nco\src\nco\nco_map.c(551): warning C4101: 'att_nm': unreferenced local variable
C:\projects\nco\src\nco\nco_map.c(552): warning C4101: 'var_nm': unreferenced local variable
C:\projects\nco\src\nco\nco_sph.c(1322): warning C4101: 'Pcross': unreferenced local variable
ncoGrammer.g(2035): warning C4390: ';': empty controlled statement found; is this the intent?",True,{}
nco/nco,https://github.com/nco/nco,157,2019-10-18T14:27:31Z,2019-10-18T17:47:41Z,2019-10-18T17:47:41Z,MERGED,True,271,294,10,https://github.com/hmb1,Hmb msh tidy,7,[],https://github.com/nco/nco/pull/157,https://github.com/hmb1,3,https://github.com/nco/nco/pull/157#issuecomment-543850784,"@czender
code tidy up, removed the global NCO_SPH_PLY_TYP","@czender
fixed compiler warnings !!",True,{}
nco/nco,https://github.com/nco/nco,159,2019-11-07T15:08:04Z,2019-11-07T17:26:18Z,2019-11-07T17:26:18Z,MERGED,True,171,78,7,https://github.com/hmb1,Hmb msh tidy,8,[],https://github.com/nco/nco/pull/159,https://github.com/hmb1,1,https://github.com/nco/nco/pull/159,"@czender
See what you think","@czender
See what you think",True,{}
nco/nco,https://github.com/nco/nco,161,2019-11-12T16:05:08Z,2019-11-12T16:29:27Z,2019-11-12T16:29:28Z,MERGED,True,373,1,2,https://github.com/hmb1,Hmb map chk,2,[],https://github.com/nco/nco/pull/161,https://github.com/hmb1,1,https://github.com/nco/nco/pull/161,"@czender
first cut of map report function for Mark Taylor","@czender
first cut of map report function for Mark Taylor",True,{}
nco/nco,https://github.com/nco/nco,162,2019-11-14T15:11:39Z,2019-11-14T17:16:00Z,2020-04-01T08:46:39Z,MERGED,True,155,10,2,https://github.com/hmb1,added more output to nco_map_chk(),1,[],https://github.com/nco/nco/pull/162,https://github.com/hmb1,1,https://github.com/nco/nco/pull/162,"@czender
As discussed  min/max of frac b  is taken from map file and is also computed
same for frac_a (slightly more tricky )
...Henry","@czender
As discussed  min/max of frac b  is taken from map file and is also computed
same for frac_a (slightly more tricky )
...Henry",True,{}
nco/nco,https://github.com/nco/nco,163,2019-11-26T13:05:07Z,2019-11-26T13:11:52Z,2019-11-26T13:11:52Z,MERGED,True,168,181,4,https://github.com/hmb1,Hmb msh tidy,3,[],https://github.com/nco/nco/pull/163,https://github.com/hmb1,1,https://github.com/nco/nco/pull/163,"@czender
improvements to nco_sph_seg_int()
more debugging in nco_map.c
experimental rounding of weights in nco_msh_mk()","@czender
improvements to nco_sph_seg_int()
more debugging in nco_map.c
experimental rounding of weights in nco_msh_mk()",True,{}
nco/nco,https://github.com/nco/nco,165,2019-12-25T04:07:34Z,2020-08-11T16:28:07Z,2020-08-11T16:28:07Z,CLOSED,False,10,66821,32,https://github.com/dmacks,Autotools files cleanup,5,[],https://github.com/nco/nco/pull/165,https://github.com/dmacks,1,https://github.com/nco/nco/pull/165,"Here are a ton of changes solely related to the autotools infrastructure. Builds for me on OS X 10.13 (only sandbox I have at hand). I tried to do individual commits in chunks of related changes with specific commit messages, but of course happy to discuss any of them further.","Here are a ton of changes solely related to the autotools infrastructure. Builds for me on OS X 10.13 (only sandbox I have at hand). I tried to do individual commits in chunks of related changes with specific commit messages, but of course happy to discuss any of them further.",True,{'THUMBS_UP': ['https://github.com/czender']}
nco/nco,https://github.com/nco/nco,165,2019-12-25T04:07:34Z,2020-08-11T16:28:07Z,2020-08-11T16:28:07Z,CLOSED,False,10,66821,32,https://github.com/dmacks,Autotools files cleanup,5,[],https://github.com/nco/nco/pull/165,https://github.com/czender,2,https://github.com/nco/nco/pull/165#issuecomment-592649179,"Here are a ton of changes solely related to the autotools infrastructure. Builds for me on OS X 10.13 (only sandbox I have at hand). I tried to do individual commits in chunks of related changes with specific commit messages, but of course happy to discuss any of them further.",Any chance of your fixing the conflicts in this PR?,True,{}
nco/nco,https://github.com/nco/nco,165,2019-12-25T04:07:34Z,2020-08-11T16:28:07Z,2020-08-11T16:28:07Z,CLOSED,False,10,66821,32,https://github.com/dmacks,Autotools files cleanup,5,[],https://github.com/nco/nco/pull/165,https://github.com/DWesl,3,https://github.com/nco/nco/pull/165#issuecomment-635615266,"Here are a ton of changes solely related to the autotools infrastructure. Builds for me on OS X 10.13 (only sandbox I have at hand). I tried to do individual commits in chunks of related changes with specific commit messages, but of course happy to discuss any of them further.","I can't figure out what the problem in Appveyor is, but the basic formula for this PR is
for line in <.gitignore>:
    if line starts with '#':
        continue
    if line starts with '/':
        git rm "".${line}""
    else:
        find . -name ""${line}"" -exec git rm {} +

That part is relatively easy to redo, and is in line with autotools recommendations.
One note: this change will introduce a difference between ""release archives"" generated by make dist or make distcheck, which include configure and the various Makefile.ins and can be used on systems with only sh, make, and the compilers; and ""development snapshots"" that are generated by cloning the repository and zipping everything that isn't .git, which requires the autotools to be installed as well.  The archives linked on GitHub's ""releases"" page are the second kind.  On the other hand, it's a lot harder to make an archive with a Makefile.in older than the corresponding Makefile.am
The next part of the PR is to extend that philosophy of ""delete all files autotools will create"" to include files autotools copies from its installation; those in the m4 and autobld directories.
autoreconf --install will happily install (most of) those files for you, though mkinstalldirs appears to be left out.
I'm moderately surprised that autogen.sh was not also removed in this PR, since autotools has distributed the autoreconf script for a few years now. It fills the same role as the autogen.sh scripts, and autotools has favored dropping autogen.sh scripts from repositories.
The only bits of the PR not covered by the above seem to be moving from ${AUTOMAKE} --foreign in autogen.sh to AM_INIT_AUTOMAKE([foreign]) in configure.ac and allowing shared libraries on OSX (configure.ac line 1181)",True,{}
nco/nco,https://github.com/nco/nco,165,2019-12-25T04:07:34Z,2020-08-11T16:28:07Z,2020-08-11T16:28:07Z,CLOSED,False,10,66821,32,https://github.com/dmacks,Autotools files cleanup,5,[],https://github.com/nco/nco/pull/165,https://github.com/czender,4,https://github.com/nco/nco/pull/165#issuecomment-635623063,"Here are a ton of changes solely related to the autotools infrastructure. Builds for me on OS X 10.13 (only sandbox I have at hand). I tried to do individual commits in chunks of related changes with specific commit messages, but of course happy to discuss any of them further.","@DWesl Thank you for taking a look at this PR. Appveyor and Travis tend to use toolchains that are a few years old (Travis, e.g., is hosted on long-term Ubuntu OS releases I think). Perhaps that explains some of the failures. In any case, we would welcome any modernizations of NCO's autotools build mechanism that preserve the validity of the Appveyor and Travis CI checks.",True,{}
nco/nco,https://github.com/nco/nco,166,2020-01-17T12:18:28Z,2020-01-17T16:02:55Z,2020-01-17T16:02:55Z,MERGED,True,474,150,4,https://github.com/hmb1,Hmb msh tidy,13,[],https://github.com/nco/nco/pull/166,https://github.com/hmb1,1,https://github.com/nco/nco/pull/166,"@czender
added new   gtc/smc intersection function
Can now fully test the smc area functionality","@czender
added new   gtc/smc intersection function
Can now fully test the smc area functionality",True,{}
nco/nco,https://github.com/nco/nco,167,2020-01-20T12:31:41Z,2020-01-20T12:52:07Z,2020-01-20T12:52:07Z,MERGED,True,3,3,1,https://github.com/hmb1,fixed serious compiler warnings,1,[],https://github.com/nco/nco/pull/167,https://github.com/hmb1,1,https://github.com/nco/nco/pull/167,"@czender
fixed serious compiler warnings","@czender
fixed serious compiler warnings",True,{}
nco/nco,https://github.com/nco/nco,168,2020-01-21T12:42:01Z,2020-01-21T14:54:38Z,2020-01-21T14:54:38Z,MERGED,True,36,43,1,https://github.com/hmb1,Hmb msh tidy,2,[],https://github.com/nco/nco/pull/168,https://github.com/hmb1,1,https://github.com/nco/nco/pull/168,"@czender
tidy up nco_rll_intersect()","@czender
tidy up nco_rll_intersect()",True,{}
nco/nco,https://github.com/nco/nco,169,2020-01-24T12:11:09Z,2020-01-24T16:28:29Z,2020-01-24T16:28:29Z,MERGED,True,4,1,1,https://github.com/hmb1,nco_msh_mk() use poly_sph for 2D curvlinear grids,1,[],https://github.com/nco/nco/pull/169,https://github.com/hmb1,1,https://github.com/nco/nco/pull/169,"@czender
untested fix","@czender
untested fix",True,{}
nco/nco,https://github.com/nco/nco,170,2020-01-27T14:57:43Z,2020-01-27T16:05:00Z,2020-01-27T16:05:00Z,MERGED,True,5,2,1,https://github.com/hmb1,"nco_sph_seg_parallel() - use metric to check r0, r1",1,[],https://github.com/nco/nco/pull/170,https://github.com/hmb1,1,https://github.com/nco/nco/pull/170,"@czender
fixes some of the regressions of the mapping.
grids/ne30pg2.nc  -> grids/cmip6_180x360_scrip.20180901.nc
;;","@czender
fixes some of the regressions of the mapping.
grids/ne30pg2.nc  -> grids/cmip6_180x360_scrip.20180901.nc
;;",True,{}
nco/nco,https://github.com/nco/nco,171,2020-01-28T17:28:34Z,2020-01-28T17:44:43Z,2020-01-28T17:44:43Z,MERGED,True,11,4,2,https://github.com/hmb1,Hmb map fix,2,[],https://github.com/nco/nco/pull/171,https://github.com/hmb1,1,https://github.com/nco/nco/pull/171,"@czender
subtle but important fixes to nco_sph_seg_int()","@czender
subtle but important fixes to nco_sph_seg_int()",True,{}
nco/nco,https://github.com/nco/nco,172,2020-02-03T15:16:14Z,2020-02-03T15:27:00Z,2020-02-03T15:27:00Z,MERGED,True,16,4,3,https://github.com/hmb1,Hmb map fix,3,[],https://github.com/nco/nco/pull/172,https://github.com/hmb1,1,https://github.com/nco/nco/pull/172,"@czender
Added informative info (not debug) to main processing loop in nco_ply_lst_mk_vrl_sph()","@czender
Added informative info (not debug) to main processing loop in nco_ply_lst_mk_vrl_sph()",True,{}
nco/nco,https://github.com/nco/nco,173,2020-02-06T14:36:15Z,2020-02-06T15:40:34Z,2020-02-06T15:40:35Z,MERGED,True,15,1,1,https://github.com/hmb1,fixes to nco_ply_minmax_add(),1,[],https://github.com/nco/nco/pull/173,https://github.com/hmb1,1,https://github.com/nco/nco/pull/173,"@czender
fixes specific to HYDRO1K file.
min/max and wrapping flag is now processed correctly for grid cells which have logitude==360.0 when it should be longitude==0.0","@czender
fixes specific to HYDRO1K file.
min/max and wrapping flag is now processed correctly for grid cells which have logitude==360.0 when it should be longitude==0.0",True,{}
nco/nco,https://github.com/nco/nco,174,2020-02-07T14:26:54Z,2020-02-07T16:49:08Z,2020-02-07T16:49:08Z,MERGED,True,29,14,2,https://github.com/hmb1,Hmb map fix,3,[],https://github.com/nco/nco/pull/174,https://github.com/hmb1,1,https://github.com/nco/nco/pull/174,"@czender
user progress dialogue for nco_ply_lst_mk_vrl_sph()","@czender
user progress dialogue for nco_ply_lst_mk_vrl_sph()",True,{}
nco/nco,https://github.com/nco/nco,175,2020-02-13T12:20:22Z,2020-02-13T15:27:14Z,2020-02-13T15:27:15Z,MERGED,True,44,7,2,https://github.com/hmb1,Hmb map fix,2,[],https://github.com/nco/nco/pull/175,https://github.com/hmb1,1,https://github.com/nco/nco/pull/175,"@czender
significant fixes to nco_ply_lst_mk_vrl_sph()","@czender
significant fixes to nco_ply_lst_mk_vrl_sph()",True,{}
nco/nco,https://github.com/nco/nco,176,2020-02-13T15:56:43Z,2020-02-13T16:06:18Z,2020-02-13T16:06:18Z,MERGED,True,1,1,1,https://github.com/hmb1,fiex compiler warning,1,[],https://github.com/nco/nco/pull/176,https://github.com/hmb1,1,https://github.com/nco/nco/pull/176,,,True,{}
nco/nco,https://github.com/nco/nco,176,2020-02-13T15:56:43Z,2020-02-13T16:06:18Z,2020-02-13T16:06:18Z,MERGED,True,1,1,1,https://github.com/hmb1,fiex compiler warning,1,[],https://github.com/nco/nco/pull/176,https://github.com/hmb1,2,https://github.com/nco/nco/pull/176#issuecomment-585830265,,"@czender
fixed compiler warning",True,{}
nco/nco,https://github.com/nco/nco,180,2020-02-28T16:54:28Z,2020-02-29T20:27:19Z,2020-02-29T20:27:19Z,MERGED,True,9,2,6,https://github.com/rkouznetsov,Building of .deb,6,[],https://github.com/nco/nco/pull/180,https://github.com/rkouznetsov,1,https://github.com/nco/nco/pull/180,"Made  "" dpkg-buildpackage -b -rfakeroot -us -uc"" pass
Added dummy ChangeLog NEWS README
Fixed path in debian/rules
Fixed wrong date from future","Made  "" dpkg-buildpackage -b -rfakeroot -us -uc"" pass
Added dummy ChangeLog NEWS README
Fixed path in debian/rules
Fixed wrong date from future",True,{'THUMBS_UP': ['https://github.com/czender']}
nco/nco,https://github.com/nco/nco,180,2020-02-28T16:54:28Z,2020-02-29T20:27:19Z,2020-02-29T20:27:19Z,MERGED,True,9,2,6,https://github.com/rkouznetsov,Building of .deb,6,[],https://github.com/nco/nco/pull/180,https://github.com/czender,2,https://github.com/nco/nco/pull/180#issuecomment-592631713,"Made  "" dpkg-buildpackage -b -rfakeroot -us -uc"" pass
Added dummy ChangeLog NEWS README
Fixed path in debian/rules
Fixed wrong date from future","Thank you for your PR. We love PRs from new contributors! However, I dislike placing dummy NEWS README ChangeLog in top-level directory when those are all already in docs directory. It would be preferable to point dpkg-buildpackage to that directory for those files. Can you do this? If not, then please move the files from doc to top-level so we do not duplicate them which would be confusing.",True,{}
nco/nco,https://github.com/nco/nco,180,2020-02-28T16:54:28Z,2020-02-29T20:27:19Z,2020-02-29T20:27:19Z,MERGED,True,9,2,6,https://github.com/rkouznetsov,Building of .deb,6,[],https://github.com/nco/nco/pull/180,https://github.com/rkouznetsov,3,https://github.com/nco/nco/pull/180#issuecomment-592945856,"Made  "" dpkg-buildpackage -b -rfakeroot -us -uc"" pass
Added dummy ChangeLog NEWS README
Fixed path in debian/rules
Fixed wrong date from future","Thank you! I agree that it is a dirty workaround to make dpkg-buildpackage pass. It looks like there is an issue with working directory when automake (or make?) tries to access the files: it is in $(top_srcdir) while should be in $(top_srcdir)/doc...
Unfortunately, my ignorance about the building mechanisms  did not let me to find the right place to correct this.
Moving the files to one level up, as you suggested does not help, since  dh_installchangelogs wants the changelog still in doc/.
In any case I have made a commit with moved files, despite ""dpkg-buildpackage -b -rfakeroot -us -uc"" fails on that commit.",True,{}
nco/nco,https://github.com/nco/nco,180,2020-02-28T16:54:28Z,2020-02-29T20:27:19Z,2020-02-29T20:27:19Z,MERGED,True,9,2,6,https://github.com/rkouznetsov,Building of .deb,6,[],https://github.com/nco/nco/pull/180,https://github.com/rkouznetsov,4,https://github.com/nco/nco/pull/180#issuecomment-592946758,"Made  "" dpkg-buildpackage -b -rfakeroot -us -uc"" pass
Added dummy ChangeLog NEWS README
Fixed path in debian/rules
Fixed wrong date from future",Looks like Changelog has been updated in upstream. I could not find a way to merge this on my side..,True,{}
nco/nco,https://github.com/nco/nco,180,2020-02-28T16:54:28Z,2020-02-29T20:27:19Z,2020-02-29T20:27:19Z,MERGED,True,9,2,6,https://github.com/rkouznetsov,Building of .deb,6,[],https://github.com/nco/nco/pull/180,https://github.com/rkouznetsov,5,https://github.com/nco/nco/pull/180#issuecomment-592955304,"Made  "" dpkg-buildpackage -b -rfakeroot -us -uc"" pass
Added dummy ChangeLog NEWS README
Fixed path in debian/rules
Fixed wrong date from future","Ok. Now I have got it working. Here is the line form configure.ac
cd ~/nco;for fl in NEWS README AUTHORS ChangeLog ; do ln -s doc/${fl} ${fl};done;autoreconf --force
After symlinking the files to the top-level directory dpkg-buildpackage -b -rfakeroot -us -uc passes.",True,{}
nco/nco,https://github.com/nco/nco,181,2020-03-03T13:09:43Z,2020-03-03T15:40:23Z,2020-03-03T15:40:23Z,MERGED,True,17,15,3,https://github.com/hmb1,Hmb map fix,3,[],https://github.com/nco/nco/pull/181,https://github.com/hmb1,1,https://github.com/nco/nco/pull/181,"@czender
Moved  calculation of frc_out  up from  critical area in  nco_ply_lst_mk_vrl_sph()  to nco_msh_mk()
some fixes to debug output","@czender
Moved  calculation of frc_out  up from  critical area in  nco_ply_lst_mk_vrl_sph()  to nco_msh_mk()
some fixes to debug output",True,{}
nco/nco,https://github.com/nco/nco,182,2020-03-04T13:28:03Z,2020-03-04T17:27:47Z,2020-03-04T17:46:44Z,MERGED,True,1,1,1,https://github.com/hmb1,for rll->rll maps check the edg_typ is not gtc,1,[],https://github.com/nco/nco/pull/182,https://github.com/hmb1,1,https://github.com/nco/nco/pull/182,"@czender
Additional check  in nco_msh_mk()  that for rll->rll maps that edge type is NOT ""gtc""
Note the default for edge type in nco_rgr_ini() is  ""gtc"". Do you wish the unspecified default edge type  for rll->rll to be  ""smc"" ?","@czender
Additional check  in nco_msh_mk()  that for rll->rll maps that edge type is NOT ""gtc""
Note the default for edge type in nco_rgr_ini() is  ""gtc"". Do you wish the unspecified default edge type  for rll->rll to be  ""smc"" ?",True,{}
nco/nco,https://github.com/nco/nco,182,2020-03-04T13:28:03Z,2020-03-04T17:27:47Z,2020-03-04T17:46:44Z,MERGED,True,1,1,1,https://github.com/hmb1,for rll->rll maps check the edg_typ is not gtc,1,[],https://github.com/nco/nco/pull/182,https://github.com/czender,2,https://github.com/nco/nco/pull/182#issuecomment-594697374,"@czender
Additional check  in nco_msh_mk()  that for rll->rll maps that edge type is NOT ""gtc""
Note the default for edge type in nco_rgr_ini() is  ""gtc"". Do you wish the unspecified default edge type  for rll->rll to be  ""smc"" ?","Thank you. I made the other changes I needed. Now edg_typ defaults to edg_typ_nil in nco_rgr_ini(), and if the user does not override it, downstream functions pick their defaults appropriately.",True,{}
nco/nco,https://github.com/nco/nco,183,2020-03-17T15:06:28Z,2020-03-17T17:40:30Z,2020-03-17T17:40:32Z,MERGED,True,422,135,10,https://github.com/hmb1,Hmb dbg fix,8,[],https://github.com/nco/nco/pull/183,https://github.com/hmb1,1,https://github.com/nco/nco/pull/183,"@czender
Many fixes relating to handling of parallel arcs.
USing gsl libs to solve matrix in nco_mat_int_pl()","@czender
Many fixes relating to handling of parallel arcs.
USing gsl libs to solve matrix in nco_mat_int_pl()",True,{}
nco/nco,https://github.com/nco/nco,183,2020-03-17T15:06:28Z,2020-03-17T17:40:30Z,2020-03-17T17:40:32Z,MERGED,True,422,135,10,https://github.com/hmb1,Hmb dbg fix,8,[],https://github.com/nco/nco/pull/183,https://github.com/hmb1,2,https://github.com/nco/nco/pull/183#issuecomment-600202931,"@czender
Many fixes relating to handling of parallel arcs.
USing gsl libs to solve matrix in nco_mat_int_pl()","@czender
sorted out the GSL config for ncks",True,{}
nco/nco,https://github.com/nco/nco,183,2020-03-17T15:06:28Z,2020-03-17T17:40:30Z,2020-03-17T17:40:32Z,MERGED,True,422,135,10,https://github.com/hmb1,Hmb dbg fix,8,[],https://github.com/nco/nco/pull/183,https://github.com/czender,3,https://github.com/nco/nco/pull/183#issuecomment-600206093,"@czender
Many fixes relating to handling of parallel arcs.
USing gsl libs to solve matrix in nco_mat_int_pl()",Thank you. Much cleaner to merge with working AppVeyor.,True,{}
nco/nco,https://github.com/nco/nco,184,2020-03-30T14:10:01Z,2020-03-30T21:21:01Z,2022-03-25T19:37:17Z,MERGED,True,14,7,2,https://github.com/hmb1,Hmb fix ply,2,[],https://github.com/nco/nco/pull/184,https://github.com/hmb1,1,https://github.com/nco/nco/pull/184,"@czender
fixes the regional mapping:
ncremap --alg_typ=nco -v T -t 1  -D 12 -g grids/180x360_SCRIP.20150901.nc grids/wrfout_v2_Lambert_notime.nc -m wrf.nc","@czender
fixes the regional mapping:
ncremap --alg_typ=nco -v T -t 1  -D 12 -g grids/180x360_SCRIP.20150901.nc grids/wrfout_v2_Lambert_notime.nc -m wrf.nc",True,{}
nco/nco,https://github.com/nco/nco,185,2020-03-31T17:49:06Z,2020-03-31T18:10:11Z,2020-03-31T18:10:11Z,MERGED,True,76,52,2,https://github.com/hmb1,Hmb dbg fix2,3,[],https://github.com/nco/nco/pull/185,https://github.com/hmb1,1,https://github.com/nco/nco/pull/185,"@czender
various fixes to  nco_sph_seg_parallel() and  nco_sph_intersect()  so that
mosart ( 1/8 deg RLL grid) ->  physics grids ( ne256pg2, ne512pg2, ne1024pg2 ) work","@czender
various fixes to  nco_sph_seg_parallel() and  nco_sph_intersect()  so that
mosart ( 1/8 deg RLL grid) ->  physics grids ( ne256pg2, ne512pg2, ne1024pg2 ) work",True,{}
nco/nco,https://github.com/nco/nco,186,2020-04-02T14:35:41Z,2020-04-02T15:26:25Z,2020-04-02T15:26:25Z,MERGED,True,122,36,6,https://github.com/hmb1,Hmb fix kdtree,4,[],https://github.com/nco/nco/pull/186,https://github.com/hmb1,1,https://github.com/nco/nco/pull/186,"@czender
added parallel build of multiple kd trees.
Have checked intel compiler compilation on cori
Initial indications are good.
The following mapping

MOSART_global_8th.scrip.20180211c.nc  ->  ne1024pg2.nc

Now takes 15 minutes with 6 threads on e3sm.ess.uci.edu","@czender
added parallel build of multiple kd trees.
Have checked intel compiler compilation on cori
Initial indications are good.
The following mapping

MOSART_global_8th.scrip.20180211c.nc  ->  ne1024pg2.nc

Now takes 15 minutes with 6 threads on e3sm.ess.uci.edu",True,{}
nco/nco,https://github.com/nco/nco,187,2020-04-03T12:23:52Z,2020-04-06T22:26:14Z,2020-04-07T17:28:53Z,MERGED,True,46,207,3,https://github.com/hmb1,Hmb gsl fix,3,[],https://github.com/nco/nco/pull/187,https://github.com/hmb1,1,https://github.com/nco/nco/pull/187,"@czender
removed ""GSL"" code in  nco_gsl.c and replaced with calls to original GSL functions","@czender
removed ""GSL"" code in  nco_gsl.c and replaced with calls to original GSL functions",True,{}
nco/nco,https://github.com/nco/nco,187,2020-04-03T12:23:52Z,2020-04-06T22:26:14Z,2020-04-07T17:28:53Z,MERGED,True,46,207,3,https://github.com/hmb1,Hmb gsl fix,3,[],https://github.com/nco/nco/pull/187,https://github.com/czender,2,https://github.com/nco/nco/pull/187#issuecomment-610483346,"@czender
removed ""GSL"" code in  nco_gsl.c and replaced with calls to original GSL functions","Henry, this patch works only if GSL is installed. Please rewrite and resubmit with appropriate protection by #ifdef ENABLE_GSL and provision of stub GSL functions for when GSL is not installed. Please acknowledge receipt of this request.",True,{}
nco/nco,https://github.com/nco/nco,187,2020-04-03T12:23:52Z,2020-04-06T22:26:14Z,2020-04-07T17:28:53Z,MERGED,True,46,207,3,https://github.com/hmb1,Hmb gsl fix,3,[],https://github.com/nco/nco/pull/187,https://github.com/hmb1,3,https://github.com/nco/nco/pull/187#issuecomment-610519484,"@czender
removed ""GSL"" code in  nco_gsl.c and replaced with calls to original GSL functions","Will do first thing tomorrow
…
On 07/04/20 17:18, Charlie Zender wrote:

 Henry, this patch works only if GSL is installed. Please rewrite and
 resubmit with appropriate protection by #ifdef ENABLE_GSL and
 provision of stub GSL functions for when GSL is not installed. Please
 acknowledge receipt of this request.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#187 (comment)>, or
 unsubscribe
 <https://github.com/notifications/unsubscribe-auth/ABRBP4AY3MGU2ENCMDC2BGTRLNG7FANCNFSM4L35YOPA>.",True,{}
nco/nco,https://github.com/nco/nco,188,2020-04-07T11:33:58Z,2020-04-07T15:54:15Z,2020-04-07T15:57:37Z,MERGED,True,30,4,1,https://github.com/hmb1,nco_cln_clc_tm() / nco_cln_clc_var_dff() promote var type to float be…,1,[],https://github.com/nco/nco/pull/188,https://github.com/hmb1,1,https://github.com/nco/nco/pull/188,"@czender
promote var type to float before rebase of var.
May fix https://github.com/nco/nco/issues/179","@czender
promote var type to float before rebase of var.
May fix https://github.com/nco/nco/issues/179",True,{}
nco/nco,https://github.com/nco/nco,188,2020-04-07T11:33:58Z,2020-04-07T15:54:15Z,2020-04-07T15:57:37Z,MERGED,True,30,4,1,https://github.com/hmb1,nco_cln_clc_tm() / nco_cln_clc_var_dff() promote var type to float be…,1,[],https://github.com/nco/nco/pull/188,https://github.com/czender,2,https://github.com/nco/nco/pull/188#issuecomment-610471263,"@czender
promote var type to float before rebase of var.
May fix https://github.com/nco/nco/issues/179","Thank you, and thank you for adding the associated regression test that now passes",True,{}
nco/nco,https://github.com/nco/nco,189,2020-04-08T13:33:44Z,2020-04-08T22:06:07Z,2020-04-08T22:14:34Z,MERGED,True,14,1,2,https://github.com/hmb1,fix - now builds with --disable-gsl,1,[],https://github.com/nco/nco/pull/189,https://github.com/hmb1,1,https://github.com/nco/nco/pull/189,"@czender
nco++/nco_gsl.{c,h}    - code now builds correctly with  --disable-gsl","@czender
nco++/nco_gsl.{c,h}    - code now builds correctly with  --disable-gsl",True,{}
nco/nco,https://github.com/nco/nco,189,2020-04-08T13:33:44Z,2020-04-08T22:06:07Z,2020-04-08T22:14:34Z,MERGED,True,14,1,2,https://github.com/hmb1,fix - now builds with --disable-gsl,1,[],https://github.com/nco/nco/pull/189,https://github.com/czender,2,https://github.com/nco/nco/pull/189#issuecomment-611221957,"@czender
nco++/nco_gsl.{c,h}    - code now builds correctly with  --disable-gsl","This PR is also flawed. Did you test it on a system without GSL? It's not hard to uninstall GSL and then test NCO. Your code also violates the NCO standard that all library source files only #include one header file. Perhaps now you will appreciate the usefulness of that standard. Also your patch must provide stubs for the GSL functions when GSL is not available. Please acknowledge, patch, TEST, and submit a new PR ASAP.
gcc -std=gnu99 -DHAVE_CONFIG_H -I. -I../..  -I./ -I../nco -I/blues/gpfs/home/software/spack-0.10.0/opt/spack/linux-centos6-x86_64/gcc-5.3.0/netcdf-4.4.1.1-2dtwbu4ojkwj5tqd4uqvomnu6ecmh6tx/include -I/blues/gpfs/home/software/spack-0.10.0/opt/spack/linux-centos6-x86_64/gcc-5.3.0/curl-7.52.1-jbkyt7ue4m7m7o6ypahobonwtc64u2yg/include -I/blues/gpfs/home/software/spack-0.10.0/opt/spack/linux-centos6-x86_64/gcc-5.3.0/hdf5-1.10.0-patch1-t4uaip2cnvy6qtzeay2aljtyzv6zt6ja/include -I/blues/gpfs/home/software/spack-0.10.0/opt/spack/linux-centos6-x86_64/gcc-5.3.0/hdf-4.2.12-ut6cuz27dm6df2y2zdiybk3sunecpkig/include -I/usr/local/include -I/soft/spack-0.10.0/opt/spack/linux-centos6-x86_64/gcc-5.3.0/netcdf-4.4.1.1-2dtwbu4ojkwj5tqd4uqvomnu6ecmh6tx/include   -I/home/zender/include -I/home/zender/include  -g -O2 -fopenmp -std=c99 -D_BSD_SOURCE -D_POSIX_SOURCE -MT nco_gsl.o -MD -MP -MF .deps/nco_gsl.Tpo -c -o nco_gsl.o nco_gsl.c
nco_gsl.c:11:32: fatal error: gsl/gsl_statistics.h: No such file or directory
 #include <gsl/gsl_statistics.h>
                                ^
compilation terminated.
make[2]: *** [nco_gsl.o] Error 1
make[2]: Leaving directory `/blues/gpfs/home/zender/nco/src/nco++'
make[1]: *** [install-recursive] Error 1
make[1]: Leaving directory `/blues/gpfs/home/zender/nco/src'
make: *** [install-recursive] Error 1",True,{}
nco/nco,https://github.com/nco/nco,190,2020-04-09T12:16:41Z,2020-04-10T16:14:55Z,2020-04-10T16:39:06Z,MERGED,True,120,47,2,https://github.com/hmb1,big tidy up credible code for non gsl build,1,[],https://github.com/nco/nco/pull/190,https://github.com/hmb1,1,https://github.com/nco/nco/pull/190,"@czender
big tidy up
credible code for non gsl build
build without GSL tested  on configure/make and  cmake/make","@czender
big tidy up
credible code for non gsl build
build without GSL tested  on configure/make and  cmake/make",True,{}
nco/nco,https://github.com/nco/nco,190,2020-04-09T12:16:41Z,2020-04-10T16:14:55Z,2020-04-10T16:39:06Z,MERGED,True,120,47,2,https://github.com/hmb1,big tidy up credible code for non gsl build,1,[],https://github.com/nco/nco/pull/190,https://github.com/czender,2,https://github.com/nco/nco/pull/190#issuecomment-612112571,"@czender
big tidy up
credible code for non gsl build
build without GSL tested  on configure/make and  cmake/make","If you were in the habit of reading the compiler warnings you would have noticed the typo
""#ifdef ENABLE GSL"" that caused all evaluations to assume no GSL.",True,{}
nco/nco,https://github.com/nco/nco,191,2020-04-15T11:31:11Z,2020-04-15T13:23:54Z,2020-04-15T13:23:55Z,MERGED,True,58,83,2,https://github.com/hmb1,Hmb msh tidy,2,[],https://github.com/nco/nco/pull/191,https://github.com/hmb1,1,https://github.com/nco/nco/pull/191,"@czender
new custom cross product nco_sph_cross_sub()
Calculates  (A - B) X B  instead of  A X B
Better result when A, B very close","@czender
new custom cross product nco_sph_cross_sub()
Calculates  (A - B) X B  instead of  A X B
Better result when A, B very close",True,{}
nco/nco,https://github.com/nco/nco,192,2020-04-22T16:41:18Z,2020-04-22T21:11:58Z,2020-04-22T21:11:58Z,MERGED,True,351,73,9,https://github.com/hmb1,Hmb msh tidy,10,[],https://github.com/nco/nco/pull/192,https://github.com/hmb1,1,https://github.com/nco/nco/pull/192,"@czender
changes to area func
new flags
--rgr cell_area_quad
--rgr   cell_area_nco","@czender
changes to area func
new flags
--rgr cell_area_quad
--rgr   cell_area_nco",True,{}
nco/nco,https://github.com/nco/nco,193,2020-05-04T09:05:00Z,2020-05-05T16:39:13Z,2020-05-05T16:39:13Z,MERGED,True,54,3,3,https://github.com/hmb1,Hmb sz vrl,3,[],https://github.com/nco/nco/pull/193,https://github.com/hmb1,1,https://github.com/nco/nco/pull/193,"@czender
print in nco_msh_mk() total size in memory of  pl_lst_vl - the overlap mesh","@czender
print in nco_msh_mk() total size in memory of  pl_lst_vl - the overlap mesh",True,{}
nco/nco,https://github.com/nco/nco,194,2020-05-29T16:22:10Z,2020-05-29T16:29:08Z,2020-05-29T16:29:08Z,MERGED,True,5,1,2,https://github.com/hmb1,set default of rgr->area_mth to cell_area_nco,1,[],https://github.com/nco/nco/pull/194,https://github.com/hmb1,1,https://github.com/nco/nco/pull/194,"@czender
one line mod to fix default of rgr->area+mth to cell_area_nco","@czender
one line mod to fix default of rgr->area+mth to cell_area_nco",True,{}
nco/nco,https://github.com/nco/nco,195,2020-06-15T16:06:35Z,2020-06-15T17:40:58Z,2020-06-15T17:40:58Z,MERGED,True,630,205,6,https://github.com/hmb1,Hmb nni fix,5,[],https://github.com/nco/nco/pull/195,https://github.com/hmb1,1,https://github.com/nco/nco/pull/195,"@czender
new member wgt_sct - used instead of poly_sct  in nco_msh_mk() when the overlap mesh is NOT requested.
new enum  nco_wgt_typ_enm  for  rgr->wgt_typ -
The prefix wgt is pretty overused in NCO so if you wish me to modify the struct name wgt_sct let me know.
Sorry I overwrote your code tidy up in nco_msh_mk(() and nco_ply_lst_mk_vrl_sph() - but it was a pretty complex merge - so I will reinstate  this after the PR","@czender
new member wgt_sct - used instead of poly_sct  in nco_msh_mk() when the overlap mesh is NOT requested.
new enum  nco_wgt_typ_enm  for  rgr->wgt_typ -
The prefix wgt is pretty overused in NCO so if you wish me to modify the struct name wgt_sct let me know.
Sorry I overwrote your code tidy up in nco_msh_mk(() and nco_ply_lst_mk_vrl_sph() - but it was a pretty complex merge - so I will reinstate  this after the PR",True,{}
nco/nco,https://github.com/nco/nco,196,2020-06-16T22:08:14Z,2020-06-18T15:06:17Z,2020-06-18T15:06:17Z,MERGED,True,37,28,3,https://github.com/hmb1,Hmb nni fix,3,[],https://github.com/nco/nco/pull/196,https://github.com/hmb1,1,https://github.com/nco/nco/pull/196,"@czender
addition of code for new option rgr->wgt_typ","@czender
addition of code for new option rgr->wgt_typ",True,{}
nco/nco,https://github.com/nco/nco,196,2020-06-16T22:08:14Z,2020-06-18T15:06:17Z,2020-06-18T15:06:17Z,MERGED,True,37,28,3,https://github.com/hmb1,Hmb nni fix,3,[],https://github.com/nco/nco/pull/196,https://github.com/czender,2,https://github.com/nco/nco/pull/196#issuecomment-645042341,"@czender
addition of code for new option rgr->wgt_typ","Please restore my commits to the ChangeLog file that your last PR overwrote, and incorporate in this PR, which. I will then accept.",True,{}
nco/nco,https://github.com/nco/nco,196,2020-06-16T22:08:14Z,2020-06-18T15:06:17Z,2020-06-18T15:06:17Z,MERGED,True,37,28,3,https://github.com/hmb1,Hmb nni fix,3,[],https://github.com/nco/nco/pull/196,https://github.com/hmb1,3,https://github.com/nco/nco/pull/196#issuecomment-645279296,"@czender
addition of code for new option rgr->wgt_typ","@czender
Sorry about that - have restored your additions to ChangeLog",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,1,https://github.com/nco/nco/pull/199,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/czender,2,https://github.com/nco/nco/pull/199#issuecomment-657169874,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","@rkouznetsov thank you for this patch which seems well-formed and should work transparently since it adheres to the bit-adjustment-algorithm (baa) API already in place. Happy to merge. Please elaborate on what you mean by ""nasty features of bit-grooming"". And what beneficial properties does doubling it, subtracting the shaved version, then shaving again yield? Please be specific. I am interested in improving the lossy compression metrics of Bit-Grooming, though I am not familiar with much of what many compression experts would consider the fundamentals of IEEE arithmetic biases. In fact a different (I think) method of improving Bit Grooming was just brought to my attention, and I would like to understand how your suggestions relate to those. Please respond in an NCO issue so we can track the conversation and make progress in merging all the improvements into a better default PPC algorithm (or two) whatever the name over the summer and fall.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,3,https://github.com/nco/nco/pull/199#issuecomment-657249210,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Hi @czender ,
Thank you or merging the patch. Here are some details of my experiments and of the method.
I have tried to calculate structure functions of precision-trimmed ozone fields and found that Bit-Grooming (currently default method of PPC) creates significant artifacts there. A structure function  of a field F(x) is a root-mean-square difference between two points of a field as a function of a distance between the points.
I have made a simple script to test the effect of a precision-preserving compression on the structure function. Here is a figure with a structure function of a synthetic random signal with -5/3 spectrum over a background of 300. A theory says that the result should be y=x^2/3. ""ref"" is a structure function of the original signal. The panels correspond to various methods of trimming precision, and curves on them to different number of matissa bits kept.
.
One can see that bit-grooming produces enormous distortion. (Yes, i use quite small number of bits to make things visible.)
Here is the translation of a linear signal around the same background, that clarifies the reason for the distortion:

One can see that indeed Bit-Grooming  introduces quite powerful parasite signal to the original one.
The bit-shave procedure introduces offset, but does not have that parasite mode.
Rounding has both zero-offset (as Bit-Grooming) and minimal distortion (as Bit-Shave).
Moreover, the result of the rounding has half of the RMSE of either of Bit-Shave or Bit-Grove,
for the same number of explicitly-set LSBs.
The reason why the implemented rounding method works is simple. Consider original value V and bit-shaved value U. Bit-shaving is an operation of rounding towards zero.  One can write the difference:  = V - U. Bit-shaving of  V+ would result to a rounded value. Preparing V+ as a floating-point is not a simple bit-wise operation, but one can do it easily via floating-point operations. Bit-shaving of 2V - U results in a desired value with rounded mantissa.
One can reach very similar effect by ""halfcut"" procedure, i.e. by applying Bit-Shave and then setting the most-significant of the shaved-off bits to 1. The procedure has very similar statistical properties (RMSE, structure function distortion) as rounding, but it damages values that could be represented exactly with rounding, and one has to avoid applying it to zero and de-normalised floating-point numbers.
The rounding procedure above should work for all numbers including NaNs (except for missing_value, of course). Note that it would turn Inf to NaN, which might be not a desirable effect..
I hope, it is more clear now. I would appreciate to get any example where Bit-Grooming is superior over the rounding. Thank you!",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/czender,4,https://github.com/nco/nco/pull/199#issuecomment-657268465,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","It is more clear and convincing now. Bit Grooming was designed to improve on point-to-comparisons relative to shaving and setting. It does that fairly well. However, these plots show that rounding reduces the structure function bias at each point by a factor of two relative to the other quantization methods. Structure functions emphasize that BG's strength, alternating high and low estimates, is also its weakness at the point-by-point scale. Notice, however, that a two-point running mean (i.e., the mean of BG errors for any two adjacent values) of BG quantization would seem to outperform all the other methods. Can you verify (or is this just my biased view)? In other words, if one takes a BG'd field and then halves the resolution using simple floating-point means in any direction, that reduced resolution reconstruction will have a better behaved structure function than the field obtained by halving the resolution of the field reconstructed from any other quantization method (including rounding). I do not claim that is a useful property or is superior to rounding, yet it is an observation relevant to the behavior of BG when tested by structure functions. In any case, these graphs beautifully demonstrate how BG is the noisiest quantization at the scale of one-point. It's not surprising that quantization has sudden jumps because that is inherent in the method.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,5,https://github.com/nco/nco/pull/199#issuecomment-657389537,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!",":) Moving average is a cure that seems to be more nasty than the decease, since it destroys the information that survived though bit-grooming. I would suggest that the above-mentioned ""half-cut"" is a right cure for recovering the signal (still with twice-more RMSE than rounding would do), i.e. if one averages-out only bits destroyed by BG keeping the rest intact. The implementation replaces alternating 00000s and 111111s with 100000.  I would guess, that from the compression point of view the half-cut and bit-grooming are equally good.
For the smooth signals like above, the moving average indeed seems to make things better:

This is just a zoom of the above figure with added panels for the two methods of recovering bit-groomed signal: ""groomhalf"" for half-cut applied, and ""groomav"" for a simple moving average applied after bit-grooming. Note more steep behavior of the structure function at  dx=1 for ""groomav"" case.
However for the signal generated like
rndsig = background + 100.*np.array(np.random.random((N,)),dtype=np.float32)
(same 4096 data points and same background) the moving average irrecoverably ruins the structure function:

Note that it not only affects the structure function at dx=1, but spoils the mean value of the structure function, whereas the half-cut of bit-groomed data is equivalent to the half-cut of the original data.
Of course I have chosen extreme cases. Often data are more forgiving..",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,6,https://github.com/nco/nco/pull/199#issuecomment-657483837,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!",Sorry for not responding to an issue. I could not find any issue regarding bit-grooming. Could you please point me to the issue which describes the method you have mentioned?,True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/czender,7,https://github.com/nco/nco/pull/199#issuecomment-657884533,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Sorry for not responding to an issue. I could not find any issue regarding bit-grooming. Could you please point me to the issue which describes the method you have mentioned?

I'm not sure what this refers to. You have responded to all my questions. If you mean the other suggestion about BG that I mentioned receiving recently, that was via a (now somewhat lengthy) e-mail thread which I could forward to you off-line (since the author may not want his ideas published on GitHub, I don't know). That person also advocates using rounding to reduce the RMSE by half  relative to BG, and provides timing data that demonstrates the floating point rounding is faster not slower than BG.
Also, thanks for all the graphics that clearly show the issues! Much appreciated.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,8,https://github.com/nco/nco/pull/199#issuecomment-658375945,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","This refers to

Please respond in an NCO issue so we can track the conversation and make progress in merging all the improvements into a better default PPC algorithm (or two) whatever the name over the summer and fall.

That person is right. I have submitted a note to GMDD stating in particular that rounding has half RMSE of one resulting from BG. I am all curious about the thread, but forwarding the thread before the paper accepted would be, probably, unethical. I would appreciate to see it later, if the author would not mind.
With the speed of BG vs rounding, I guess there is no difference, since both methods should be limited with memory bandwidth (of course, one is free to implement ether of them less efficiently than another), and the bottle-neck lies somewhere deep in NetCDF/HDF stack.
I think that rounding should be the default method. I'll try to submit this week a pull request with the half-shave version of bba. It has no advantages nether drawbacks over rounding in terms of precision, but it would be useful to rectify  Bit-Groomed data. The only drawback of half-shave is that the quantisation levels of it are somewhat unnatural to my perception.. I would prefer to have values of power of 2 to be reproduced exactly regardless the precision I chose.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/czender,9,https://github.com/nco/nco/pull/199#issuecomment-658481092,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","You are welcome to create an NCO issue on GitHub anytime. It makes more sense to discuss these ideas in issues than in PRs.
Your submission of a note to GMDD comes as a small surprise. You must have though about this for awhile before contacting me, and/or you work really fast! Good luck with your note. Your contribution(s) to NCO (not to mention my understanding) are much appreciated and will benefit many users as soon as the next release in a month or so. The other person is aware of this thread and can join or not as he sees fit.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/czender,10,https://github.com/nco/nco/pull/199#issuecomment-659579330,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!",FYI I made the bit-rounding algorithm (baa=5) the default in the latest NCO snapshot,True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,11,https://github.com/nco/nco/pull/199#issuecomment-659632788,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!",Great! Thank you!,True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/milankl,12,https://github.com/nco/nco/pull/199#issuecomment-660069327,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Hey Charlie, hey @rkouznetsov,
Charlie and I had a similar discussion via email in the last weeks, which basically confirms your points.
(1) Round-to-nearst can be as fast as bitgrooming. In this implementation for rounding, and this for grooming I get
julia> A = rand(Float32,1000,1000);
julia> @btime shave(A,7);
333.972 μs (2 allocations: 3.81 MiB)
julia> @btime set_one(A,7);
337.278 μs (2 allocations: 3.81 MiB)
julia> @btime round(A,7);
326.123 μs (2 allocations: 3.81 MiB)
julia> @btime groom(A,7);
425.594 μs (2 allocations: 3.81 MiB)
In case @rkouznetsov your method compares differently to groom, we should compare whether this is because your method involves floating-point arithmetic, whereas mine is solely based on integer arithmetic. As far as I know, this is how it's done on most hardware too.
(2) Absolute and relative/decimal errors are always half as big for round-to-nearest then for grooming. This can be shown analytically, assuming a uniform distribution between two quantised numbers x,y with distance ulp between them. Then mean absolute errors with grooming (and shaving/setting) are ulp/2, whereas round-to-nearest is ulp/4. The mean error (i.e. bias) is a bit trickier to analyse, but shown here for a couple of different data distributions

Although both groom & round are unbiased (shave is not), round yields statisitically smaller biases for almost all distributions, but is never worse than groom.
I therefore support making round-to-nearest the default quanitisation method.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/czender,13,https://github.com/nco/nco/pull/199#issuecomment-660233988,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Milan,
Thank you for adding your comments and graphs above. I would like to get your integer-arithmetic-only rounding method (and Delauney's digit rounding) into NCO too, so we can see if there is a timing difference and pick the optimal routine to be the default. You provided the Julia source so that should not be too difficult. Ultimately this will improve the compression ratio in the next version of NCO  relative to the CR produced by bit-grooming for a specified precision.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,14,https://github.com/nco/nco/pull/199#issuecomment-660265906,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Hi,
Just implemented, and then saw @czender 's reply.
I do not know how much Julia optimizes, but the difference in performance of BG vs average in Milan's implementation seems to be the difference of one call vs two calls per element. As It has been said above, memory bandwidth should be the limit for practical applications where the array size is bigger than any CPU cache, so it should not really matter.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/milankl,15,https://github.com/nco/nco/pull/199#issuecomment-660995914,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","With ""two calls per element"" you mean that I do
@inbounds for i in 1:2:length(X)-1
    Y[i] = shave(X[i],mask0)            # every second element is shaved
    Y[i+1] = set_one(X[i+1],mask1)      # every other 2nd element is set
end
instead of first looping over 1:2:n and then 2:2:n as it's done in here? Yes, I don't know exactly what happens under the hood, although I could check the intermediate LLVM code. The reason I do both calls in one element is, that then (I'm at least hoping for) the data is actually contiguously read from memory. On my laptop doing two calls per iterations makes the grooming about 1.5x faster than doing first 1:2:n and then 2:2:n. Do you have any benchmarks for the nco routines, then we would get a good idea how fast things actually are. I agree with you that it's likely not the bottleneck, but you'll never know before benchmarking...",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,16,https://github.com/nco/nco/pull/199#issuecomment-662509691,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Yep,  operations in one pass should be better indeed.  I guess, that applying masks to pairs of 32-bit values using 64-bit integers would be even faster. At least less indices to calculate... Again, I do not know how soon one faces memory-bandwidth limitation.
I wonder if there is much sense to benchmark these tiny operations in nco. NetCDF library and other parts of nco are not superfast, so I would expect the effect of optimizing baa procedure to be within the timing error of other operations...",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/czender,17,https://github.com/nco/nco/pull/199#issuecomment-662549539,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","I like the idea of mask all (except possibly the last) pair of 32-bit floats with a 64 bit mask, though I agree it will likely not make a significant difference in wallclock time because I/O and lossless compression are much more expensive. Testing and timing this idea would be a good little project for a student.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/milankl,18,https://github.com/nco/nco/pull/199#issuecomment-663497935,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","I wonder if there is much sense to benchmark these tiny operations in nco.

I guess not. As long as round-to-nearest, shaving, setting & groom all have similar speeds in nco, which they should have. This is what should be checked though, as round-to-nearest shouldn't be significantly slower than grooming if you want to set it as the default?",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,19,https://github.com/nco/nco/pull/199#issuecomment-663514458,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","System  nco (4.9.1, default from Ubuntu 20.04) vs today's snapshot (4.9.4-alpha07) makes some difference on my laptop.
The command was
$ncks -O -4 -L1 --baa $baa --ppc cnc_O3_gas=1 --cnk_dmn hybrid,1  $infile $outfile
Here are the results:
 ncks4.9.1-baa0 2.23user 0.34system 0:02.62elapsed 98%CPU (0avgtext+0avgdata 384368maxresident)k
 ncks4.9.1-baa1 2.16user 0.30system 0:02.51elapsed 98%CPU (0avgtext+0avgdata 384220maxresident)k
 ncks4.9.1-baa2 2.16user 0.34system 0:02.54elapsed 98%CPU (0avgtext+0avgdata 384240maxresident)k
 ncks4.9.1-baa3 2.19user 0.34system 0:02.57elapsed 98%CPU (0avgtext+0avgdata 384268maxresident)k
 ncks4.9.1-baa4 3.31user 0.28system 0:03.70elapsed 97%CPU (0avgtext+0avgdata 384236maxresident)k
 ncks4.9.1-baa5 0.78user 0.32system 0:21.03elapsed 5%CPU (0avgtext+0avgdata 384244maxresident)k
 ncks4.9.1-baa6 0.74user 0.20system 0:01.05elapsed 90%CPU (0avgtext+0avgdata 384268maxresident)k
 ncks4.9.4-alpha07-baa0 2.37user 0.32system 0:02.73elapsed 98%CPU (0avgtext+0avgdata 384952maxresident)k
 ncks4.9.4-alpha07-baa1 2.22user 0.31system 0:02.55elapsed 98%CPU (0avgtext+0avgdata 384984maxresident)k
 ncks4.9.4-alpha07-baa2 2.18user 0.31system 0:02.53elapsed 98%CPU (0avgtext+0avgdata 384960maxresident)k
 ncks4.9.4-alpha07-baa3 2.17user 0.37system 0:02.59elapsed 98%CPU (0avgtext+0avgdata 385032maxresident)k
 ncks4.9.4-alpha07-baa4 3.30user 0.37system 0:03.79elapsed 96%CPU (0avgtext+0avgdata 384992maxresident)k
 ncks4.9.4-alpha07-baa5 2.26user 0.34system 0:02.63elapsed 98%CPU (0avgtext+0avgdata 384948maxresident)k
 ncks4.9.4-alpha07-baa6 2.26user 0.37system 0:02.66elapsed 99%CPU (0avgtext+0avgdata 384964maxresident)k

On the v4.9.1 bba 5 and 6 returned much quicker, as those were not implemented.
baa=4 is clearly slower than others. Rounding/halfshave (baa 5/6) are marginally slower than shave/set (baa 1/3), but faster than groom (baa 0), I guess, due to two loops used for groom.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/milankl,20,https://github.com/nco/nco/pull/199#issuecomment-663516492,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","How you can remember all these cryptic abbreviations, respect ;) Okay, sounds good enough for now I guess. What's the size of the input array? Time is in seconds I guess??",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,21,https://github.com/nco/nco/pull/199#issuecomment-663518899,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","""Use the source, Luke"" :)
Time is in seconds as reported by time (1).
The input is http://silam.fmi.fi/roux/ALL_SRCS_AQ_2020070423_O3.nc
(please get it if needed, i'll kill it there in a few days..)",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/milankl,22,https://github.com/nco/nco/pull/199#issuecomment-663523180,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Okay, if I get this right than my speeds around a order of magnitude faster (on my 2020 MacBookAir)
julia> using NetCDF
julia> nc = NetCDF.open(""ALL_SRCS_AQ_2020070423_O3.nc"")
julia> o3 = nc.vars[""cnc_O3_gas""][:,:,:]
1800×897×29 Array{Float32,3}
...
julia> @btime round(o3,7);
  96.352 ms (2 allocations: 178.62 MiB)

julia> @btime shave(o3,7);
  98.017 ms (2 allocations: 178.62 MiB)

julia> @btime groom(o3,7);
  115.603 ms (2 allocations: 178.62 MiB)

julia> @btime set_one(o3,7);
  98.760 ms (2 allocations: 178.62 MiB)
This includes the memory allocation as you can see, but does not write the array to file.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,23,https://github.com/nco/nco/pull/199#issuecomment-663527632,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!",".. And they do not include launching ncks, parsing NetCDF4, decompression, compression, and writing NetCDF4 :))",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/milankl,24,https://github.com/nco/nco/pull/199#issuecomment-663528280,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Yes, so can you not just benchmark the actual round/groom operation?",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,25,https://github.com/nco/nco/pull/199#issuecomment-663568669,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","We try to improve nco here, don't we? The question was ""are rounding/half-shave significantly slower for nco than shaving/grooming?"". The answer is ""No. They are not.""  One could make a C program for benchmarking if needed.",True,{'THUMBS_UP': ['https://github.com/milankl']}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/milankl,26,https://github.com/nco/nco/pull/199#issuecomment-663570466,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Ah sorry, I didn't know that producing the benchmark would involve effort in C...! Then I agree yes.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/czender,27,https://github.com/nco/nco/pull/199#issuecomment-663727124,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Thank you for all your efforts on timing, gentlemen.",True,{'THUMBS_UP': ['https://github.com/milankl']}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,28,https://github.com/nco/nco/pull/199#issuecomment-666163163,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","FYI: the discussion paper is out.  https://gmd.copernicus.org/preprints/gmd-2020-239/
As  usually, the paper gets a bit outdated at the stage of publishing :))
Any comments/suggestion/criticism are welcome.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/milankl,29,https://github.com/nco/nco/pull/199#issuecomment-666327253,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Hey Rostislav, thanks for your efforts in writing this. I have some comments regarding the tie-rules of your 2u-v method. I'll post them on the GMD page.",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/rkouznetsov,30,https://github.com/nco/nco/pull/199#issuecomment-666354308,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Thank you! I did not get what ""tie-rules"" is...
Of course, there should be integer operation (as it has been implemented).",True,{}
nco/nco,https://github.com/nco/nco,199,2020-07-11T12:43:59Z,2020-07-12T03:35:47Z,2020-07-30T15:19:27Z,MERGED,True,26,0,2,https://github.com/rkouznetsov,Mantissa rounding for precision-reserving conversion,1,[],https://github.com/nco/nco/pull/199,https://github.com/milankl,31,https://github.com/nco/nco/pull/199#issuecomment-666431261,"Hi Charlie,
I have stumbled on some nasty features of bit grooming and  implemented the proper rounding for mantissa, which, probably, should be the default method of PPC. At least I could not imagine any application where rounding would not be preferable over all others.
It can be triggered with --baa 5 for floats for now. Should be straightforward
to implement for double, if someone really wants to apply ppc to double instead of converting them to float first.
I have noticed from the code that you have been  working on a paper on the subject. I would be happy to contribute there with the method and few illustrations of bit-grooming and other packing artifacts on synthetic and geophysical fields. Please let me know if you are interested.
Thank you!","Just left an ineractive comment there. I hope this explains it in more detail. I anything of my comment needs more clarification let me know. Tie rules are actually quite well explained on wikipedia once even/odd for integers is generalised to even=0 odd=1 for bits. E.g. for two quantums 0000 and 0010 we have
0001 -> 0000     # tie to even / round towards zero
0001 -> 0010     # tie to odd / round away from zero
however for quantums 1000 and 0110 we have
0111 -> 1000     # tie to even / round away from zero
0111 -> 0110     # tie to odd / round towards zero",True,{}
nco/nco,https://github.com/nco/nco,200,2020-07-15T10:40:27Z,2020-07-15T16:04:56Z,2020-07-16T06:06:16Z,MERGED,True,35,0,2,https://github.com/rkouznetsov,Implemented baa=6 for half-shave (rectifying Bit Groomed data),1,[],https://github.com/nco/nco/pull/200,https://github.com/rkouznetsov,1,https://github.com/nco/nco/pull/200,"Here is an example ozone field in stratosphere from Silam, processed with ppc =2 with different baa, including the new one. Note the spatial patterns due to the crossing of a binary order contour.","Here is an example ozone field in stratosphere from Silam, processed with ppc =2 with different baa, including the new one. Note the spatial patterns due to the crossing of a binary order contour.",True,{}
nco/nco,https://github.com/nco/nco,200,2020-07-15T10:40:27Z,2020-07-15T16:04:56Z,2020-07-16T06:06:16Z,MERGED,True,35,0,2,https://github.com/rkouznetsov,Implemented baa=6 for half-shave (rectifying Bit Groomed data),1,[],https://github.com/nco/nco/pull/200,https://github.com/rkouznetsov,2,https://github.com/nco/nco/pull/200#issuecomment-658727608,"Here is an example ozone field in stratosphere from Silam, processed with ppc =2 with different baa, including the new one. Note the spatial patterns due to the crossing of a binary order contour.","Sorry, the original file for the previous message already was rounded to 10 bits of mantissa. That feature has been implemeted in Silam (Fortran) for few years already. That is why the RMSE for shave is so small.
Here is ppc=1 for the same file, so the errors are as expected:",True,{}
nco/nco,https://github.com/nco/nco,200,2020-07-15T10:40:27Z,2020-07-15T16:04:56Z,2020-07-16T06:06:16Z,MERGED,True,35,0,2,https://github.com/rkouznetsov,Implemented baa=6 for half-shave (rectifying Bit Groomed data),1,[],https://github.com/nco/nco/pull/200,https://github.com/rkouznetsov,3,https://github.com/nco/nco/pull/200#issuecomment-659180225,"Here is an example ozone field in stratosphere from Silam, processed with ppc =2 with different baa, including the new one. Note the spatial patterns due to the crossing of a binary order contour.",Thank you for NCO and for being open to accept the improvements :),True,{}
nco/nco,https://github.com/nco/nco,201,2020-07-17T18:14:18Z,2020-07-17T19:47:05Z,2020-07-17T19:47:05Z,MERGED,True,12,30,1,https://github.com/rkouznetsov,Integer-arithmetic baa rounding,1,[],https://github.com/nco/nco/pull/201,https://github.com/rkouznetsov,1,https://github.com/nco/nco/pull/201,"Hi,
I guess, this should be unbeatable for speed of bba :)","Hi,
I guess, this should be unbeatable for speed of bba :)",True,{}
nco/nco,https://github.com/nco/nco,201,2020-07-17T18:14:18Z,2020-07-17T19:47:05Z,2020-07-17T19:47:05Z,MERGED,True,12,30,1,https://github.com/rkouznetsov,Integer-arithmetic baa rounding,1,[],https://github.com/nco/nco/pull/201,https://github.com/czender,2,https://github.com/nco/nco/pull/201#issuecomment-660305965,"Hi,
I guess, this should be unbeatable for speed of bba :)",Thank you for incorporating Milan's integer-math-only method into the rounding algorithm,True,{}
nco/nco,https://github.com/nco/nco,203,2020-07-30T04:47:17Z,2020-07-30T17:31:11Z,2020-07-30T17:31:11Z,MERGED,True,639,93,4,https://github.com/hbdch,Added vectorization,10,[],https://github.com/nco/nco/pull/203,https://github.com/hbdch,1,https://github.com/nco/nco/pull/203,"Added vectorization pragmas to nco_var_rth.c
Ignore all other changes.","Added vectorization pragmas to nco_var_rth.c
Ignore all other changes.",True,{}
nco/nco,https://github.com/nco/nco,204,2020-07-30T09:36:07Z,2020-07-30T17:16:26Z,2020-07-30T17:16:26Z,MERGED,True,3,4,2,https://github.com/hmb1,Fix compiler warnings on Windows (MSVC),2,[],https://github.com/nco/nco/pull/204,https://github.com/hmb1,1,https://github.com/nco/nco/pull/204,Fixed compiler warnings from Windows.,Fixed compiler warnings from Windows.,True,{}
nco/nco,https://github.com/nco/nco,206,2020-07-31T21:44:04Z,2020-08-01T00:57:53Z,2020-08-01T00:57:53Z,CLOSED,False,105,35,3,https://github.com/hbdch,Added enable GPU flag to configure.ac,1,[],https://github.com/nco/nco/pull/206,https://github.com/hbdch,1,https://github.com/nco/nco/pull/206,"Added enable GPU flag to configure.ac, added compiler/architecture specific options
Commented timing code in nco_var_rth.c","Added enable GPU flag to configure.ac, added compiler/architecture specific options
Commented timing code in nco_var_rth.c",True,{}
nco/nco,https://github.com/nco/nco,206,2020-07-31T21:44:04Z,2020-08-01T00:57:53Z,2020-08-01T00:57:53Z,CLOSED,False,105,35,3,https://github.com/hbdch,Added enable GPU flag to configure.ac,1,[],https://github.com/nco/nco/pull/206,https://github.com/czender,2,https://github.com/nco/nco/pull/206#issuecomment-667404394,"Added enable GPU flag to configure.ac, added compiler/architecture specific options
Commented timing code in nco_var_rth.c",Your PR may have tangled with my recent commit. No tests are passing. Please re-base on current master and re-submit.,True,{}
nco/nco,https://github.com/nco/nco,207,2020-08-01T00:57:33Z,2020-08-01T22:18:55Z,2020-08-01T22:18:55Z,MERGED,True,106,34,3,https://github.com/hbdch,newest config script,1,[],https://github.com/nco/nco/pull/207,https://github.com/hbdch,1,https://github.com/nco/nco/pull/207,"Pulled latest master and rebased changes
Updated configure.ac with GPU option and compiler/architecture options
Commented out timing code in nco_rgr.c","Pulled latest master and rebased changes
Updated configure.ac with GPU option and compiler/architecture options
Commented out timing code in nco_rgr.c",True,{}
nco/nco,https://github.com/nco/nco,208,2020-08-04T11:15:23Z,2020-08-04T21:08:54Z,2020-08-04T21:08:54Z,MERGED,True,31,18,4,https://github.com/hmb1,Hmb fix ncks cal,3,[],https://github.com/nco/nco/pull/208,https://github.com/hmb1,1,https://github.com/nco/nco/pull/208,"@czender
expanded scope of  ncks switches --cal and --dt_fmt  to include xml (--xml)  and json ( --json )","@czender
expanded scope of  ncks switches --cal and --dt_fmt  to include xml (--xml)  and json ( --json )",True,{}
nco/nco,https://github.com/nco/nco,210,2020-08-11T06:17:19Z,2020-08-11T17:03:49Z,2020-08-11T17:03:49Z,CLOSED,False,454,695,13,https://github.com/hbdch,Gpuselect,2,[],https://github.com/nco/nco/pull/210,https://github.com/hbdch,1,https://github.com/nco/nco/pull/210,"Pulled latest master and rebased changes on top.
Ran these commands to refresh all files:
aclocal;autoheader;automake --foreign;autoconf","Pulled latest master and rebased changes on top.
Ran these commands to refresh all files:
aclocal;autoheader;automake --foreign;autoconf",True,{}
nco/nco,https://github.com/nco/nco,210,2020-08-11T06:17:19Z,2020-08-11T17:03:49Z,2020-08-11T17:03:49Z,CLOSED,False,454,695,13,https://github.com/hbdch,Gpuselect,2,[],https://github.com/nco/nco/pull/210,https://github.com/czender,2,https://github.com/nco/nco/pull/210#issuecomment-672045227,"Pulled latest master and rebased changes on top.
Ran these commands to refresh all files:
aclocal;autoheader;automake --foreign;autoconf","I merged by hand and gave the #ifdef ENABLE_GPU an #else branch with the simd directive, since we want that regardless.
#ifdef ENABLE_GPU 
# pragma omp target teams distribute parallel for simd schedule(static,1)
#else /* !ENABLE_GPU */
# pragma omp simd
#endif /* !ENABLE_GPU */

or perhaps it should be
#pragma omp simd
#ifdef ENABLE_GPU 
# pragma omp target teams distribute parallel for schedule(static,1)
#endif /* !ENABLE_GPU */

Any thoughts? I merged the former not the latter.",True,{}
nco/nco,https://github.com/nco/nco,212,2020-08-18T11:30:04Z,2020-08-18T15:45:46Z,2020-08-18T15:45:46Z,MERGED,True,297,25,4,https://github.com/hmb1,Hmb clmtime mk,4,[],https://github.com/nco/nco/pull/212,https://github.com/hmb1,1,https://github.com/nco/nco/pull/212,"@czender
Created the clm function    nco_clm_nfo_to_tm_bnds() as requested.
Tested with ncap2 wrapper function clmtime()
please test and review.","@czender
Created the clm function    nco_clm_nfo_to_tm_bnds() as requested.
Tested with ncap2 wrapper function clmtime()
please test and review.",True,{}
nco/nco,https://github.com/nco/nco,214,2020-08-20T13:55:50Z,2020-08-21T13:24:02Z,2020-08-21T13:24:02Z,MERGED,True,411,173,7,https://github.com/hmb1,Hmb nni fix,23,[],https://github.com/nco/nco/pull/214,https://github.com/hmb1,1,https://github.com/nco/nco/pull/214,"@czender
merge of new nni code","@czender
merge of new nni code",True,{}
nco/nco,https://github.com/nco/nco,215,2020-08-24T11:50:12Z,2020-08-25T00:45:30Z,2020-08-25T00:45:56Z,MERGED,True,38,49,5,https://github.com/hmb1,fixes to  nco_clm_nfo_to_tm_bnds() ,2,[],https://github.com/nco/nco/pull/215,https://github.com/hmb1,1,https://github.com/nco/nco/pull/215,"@czender
for tpd==0   tm_var[]  is now always 15th day of start month.
fixed test script cb_tst.nco so tpd==0 is handled correctly","@czender
for tpd==0   tm_var[]  is now always 15th day of start month.
fixed test script cb_tst.nco so tpd==0 is handled correctly",True,{}
nco/nco,https://github.com/nco/nco,215,2020-08-24T11:50:12Z,2020-08-25T00:45:30Z,2020-08-25T00:45:56Z,MERGED,True,38,49,5,https://github.com/hmb1,fixes to  nco_clm_nfo_to_tm_bnds() ,2,[],https://github.com/nco/nco/pull/215,https://github.com/czender,2,https://github.com/nco/nco/pull/215#issuecomment-679437547,"@czender
for tpd==0   tm_var[]  is now always 15th day of start month.
fixed test script cb_tst.nco so tpd==0 is handled correctly",Thank you,True,{}
nco/nco,https://github.com/nco/nco,217,2020-08-31T16:06:23Z,2020-08-31T16:59:04Z,2020-08-31T16:59:05Z,MERGED,True,36,129,5,https://github.com/hmb1,Hmb nni fix,5,[],https://github.com/nco/nco/pull/217,https://github.com/hmb1,1,https://github.com/nco/nco/pull/217,"@czender
added rgr_nfo to function signature of nco_poly_lst_mk_dwe_sph()
tidy up of compiler warnings","@czender
added rgr_nfo to function signature of nco_poly_lst_mk_dwe_sph()
tidy up of compiler warnings",True,{}
nco/nco,https://github.com/nco/nco,218,2020-09-04T15:41:18Z,2020-09-04T18:23:01Z,2020-09-04T18:23:01Z,MERGED,True,6,1,2,https://github.com/hmb1,Hmb dwe fix,2,[],https://github.com/nco/nco/pull/218,https://github.com/hmb1,1,https://github.com/nco/nco/pull/218,"@czender
Have modified nco_msh_mk() so that  weights for input grid cells are calculated  for _dwe  option.
i.e frac_a is calculated
For some  maps maybe frac_a >1.0 and frac_a==0.0","@czender
Have modified nco_msh_mk() so that  weights for input grid cells are calculated  for _dwe  option.
i.e frac_a is calculated
For some  maps maybe frac_a >1.0 and frac_a==0.0",True,{}
nco/nco,https://github.com/nco/nco,222,2020-09-21T14:38:08Z,2020-09-21T15:05:28Z,2020-09-21T15:05:28Z,MERGED,True,8,4,1,https://github.com/hmb1,reverts 84576aa5c0 - over zealous with removing compiler warnings,1,[],https://github.com/nco/nco/pull/222,https://github.com/hmb1,1,https://github.com/nco/nco/pull/222,"@czender
fixes RLL->RLL maps","@czender
fixes RLL->RLL maps",True,{}
nco/nco,https://github.com/nco/nco,223,2020-09-22T11:59:27Z,2020-09-22T14:53:58Z,2020-09-22T14:53:58Z,MERGED,True,55,0,3,https://github.com/hmb1,Hmb cmp fix,3,[],https://github.com/nco/nco/pull/223,https://github.com/hmb1,1,https://github.com/nco/nco/pull/223,,,True,{}
nco/nco,https://github.com/nco/nco,223,2020-09-22T11:59:27Z,2020-09-22T14:53:58Z,2020-09-22T14:53:58Z,MERGED,True,55,0,3,https://github.com/hmb1,Hmb cmp fix,3,[],https://github.com/nco/nco/pull/223,https://github.com/hmb1,2,https://github.com/nco/nco/pull/223#issuecomment-696678866,,"@czender
fixes RLL_>RLL map  when using spherical coords",True,{}
nco/nco,https://github.com/nco/nco,224,2020-10-01T14:13:53Z,2020-10-01T15:46:57Z,2020-10-01T15:46:57Z,MERGED,True,16,14,3,https://github.com/hmb1,Hmb fix mask,3,[],https://github.com/nco/nco/pull/224,https://github.com/hmb1,1,https://github.com/nco/nco/pull/224,"@czender
Fixed issue with  masking variable and nco_poly_lst_mk_vrl()","@czender
Fixed issue with  masking variable and nco_poly_lst_mk_vrl()",True,{}
nco/nco,https://github.com/nco/nco,225,2020-10-13T04:21:47Z,2020-10-13T15:09:05Z,2020-10-13T15:45:52Z,MERGED,True,3,3,2,https://github.com/drf5n,Document that ncap2 requires no [input_file],2,[],https://github.com/nco/nco/pull/225,https://github.com/drf5n,1,https://github.com/nco/nco/pull/225,"ncap2 does not require an input file but does seem to require an output file
If the output file doesn't depend on inputs, the input_file is not required per https://sourceforge.net/p/nco/discussion/9829/thread/131d984ab3/#6e25/d716 and http://nco.sourceforge.net/nco.html#ncap2-netCDF-Arithmetic-Processor
For instance:
ncap2 -s 'print(1)' junk.nc

... creates junk.nc with no dimensions or variables but with a global history attribute.  If run repeatedly, then the history accumulates.","ncap2 does not require an input file but does seem to require an output file
If the output file doesn't depend on inputs, the input_file is not required per https://sourceforge.net/p/nco/discussion/9829/thread/131d984ab3/#6e25/d716 and http://nco.sourceforge.net/nco.html#ncap2-netCDF-Arithmetic-Processor
For instance:
ncap2 -s 'print(1)' junk.nc

... creates junk.nc with no dimensions or variables but with a global history attribute.  If run repeatedly, then the history accumulates.",True,{}
nco/nco,https://github.com/nco/nco,225,2020-10-13T04:21:47Z,2020-10-13T15:09:05Z,2020-10-13T15:45:52Z,MERGED,True,3,3,2,https://github.com/drf5n,Document that ncap2 requires no [input_file],2,[],https://github.com/nco/nco/pull/225,https://github.com/czender,2,https://github.com/nco/nco/pull/225#issuecomment-707807285,"ncap2 does not require an input file but does seem to require an output file
If the output file doesn't depend on inputs, the input_file is not required per https://sourceforge.net/p/nco/discussion/9829/thread/131d984ab3/#6e25/d716 and http://nco.sourceforge.net/nco.html#ncap2-netCDF-Arithmetic-Processor
For instance:
ncap2 -s 'print(1)' junk.nc

... creates junk.nc with no dimensions or variables but with a global history attribute.  If run repeatedly, then the history accumulates.","Thank you for the patch. It's always great to get help, especially from a first-time contributor!",True,{}
nco/nco,https://github.com/nco/nco,225,2020-10-13T04:21:47Z,2020-10-13T15:09:05Z,2020-10-13T15:45:52Z,MERGED,True,3,3,2,https://github.com/drf5n,Document that ncap2 requires no [input_file],2,[],https://github.com/nco/nco/pull/225,https://github.com/drf5n,3,https://github.com/nco/nco/pull/225#issuecomment-707832744,"ncap2 does not require an input file but does seem to require an output file
If the output file doesn't depend on inputs, the input_file is not required per https://sourceforge.net/p/nco/discussion/9829/thread/131d984ab3/#6e25/d716 and http://nco.sourceforge.net/nco.html#ncap2-netCDF-Arithmetic-Processor
For instance:
ncap2 -s 'print(1)' junk.nc

... creates junk.nc with no dimensions or variables but with a global history attribute.  If run repeatedly, then the history accumulates.",Thanks.  NCO is fantastic.,True,{}
nco/nco,https://github.com/nco/nco,226,2020-10-29T14:33:42Z,2020-10-29T16:51:10Z,2020-10-29T16:51:10Z,MERGED,True,6,2,2,https://github.com/hmb1,Hmb msk unset,2,[],https://github.com/nco/nco/pull/226,https://github.com/hmb1,1,https://github.com/nco/nco/pull/226,"@czender
msk_in and msk_out no longer modified in nco_msh_mk()","@czender
msk_in and msk_out no longer modified in nco_msh_mk()",True,{}
nco/nco,https://github.com/nco/nco,228,2020-12-16T03:49:26Z,2020-12-18T18:54:15Z,2020-12-18T20:07:59Z,MERGED,True,8,2,1,https://github.com/kgerheiser,Add all NetCDF/HDF5 dependencies to CMAKE_REQUIRED_LIBRARIES,1,[],https://github.com/nco/nco/pull/228,https://github.com/kgerheiser,1,https://github.com/nco/nco/pull/228,"All dependencies need to be linked in so that CMake can properly check for the desired features.
When using static libraries the checks to detect NetCDF and HDF5 features will always fail and cause issues when building.
Fixes #227
These changes worked for me, but I'd like to see someone else try and build this with your usual workflow. Slightly more advanced logic may be needed to only link in the libraries that are present. But if those library variables are empty then they'll have no effect, so I think it might be fine.","All dependencies need to be linked in so that CMake can properly check for the desired features.
When using static libraries the checks to detect NetCDF and HDF5 features will always fail and cause issues when building.
Fixes #227
These changes worked for me, but I'd like to see someone else try and build this with your usual workflow. Slightly more advanced logic may be needed to only link in the libraries that are present. But if those library variables are empty then they'll have no effect, so I think it might be fine.",True,{}
nco/nco,https://github.com/nco/nco,228,2020-12-16T03:49:26Z,2020-12-18T18:54:15Z,2020-12-18T20:07:59Z,MERGED,True,8,2,1,https://github.com/kgerheiser,Add all NetCDF/HDF5 dependencies to CMAKE_REQUIRED_LIBRARIES,1,[],https://github.com/nco/nco/pull/228,https://github.com/kgerheiser,2,https://github.com/nco/nco/pull/228#issuecomment-745748605,"All dependencies need to be linked in so that CMake can properly check for the desired features.
When using static libraries the checks to detect NetCDF and HDF5 features will always fail and cause issues when building.
Fixes #227
These changes worked for me, but I'd like to see someone else try and build this with your usual workflow. Slightly more advanced logic may be needed to only link in the libraries that are present. But if those library variables are empty then they'll have no effect, so I think it might be fine.","Hmm, fails on Windows. I don't know much about how library linking works on Windows.
Something about unescaped backslashes.",True,{}
nco/nco,https://github.com/nco/nco,228,2020-12-16T03:49:26Z,2020-12-18T18:54:15Z,2020-12-18T20:07:59Z,MERGED,True,8,2,1,https://github.com/kgerheiser,Add all NetCDF/HDF5 dependencies to CMAKE_REQUIRED_LIBRARIES,1,[],https://github.com/nco/nco/pull/228,https://github.com/kgerheiser,3,https://github.com/nco/nco/pull/228#issuecomment-745770643,"All dependencies need to be linked in so that CMake can properly check for the desired features.
When using static libraries the checks to detect NetCDF and HDF5 features will always fail and cause issues when building.
Fixes #227
These changes worked for me, but I'd like to see someone else try and build this with your usual workflow. Slightly more advanced logic may be needed to only link in the libraries that are present. But if those library variables are empty then they'll have no effect, so I think it might be fine.",CI works now after replacing backslashes with forward slashes.,True,{}
nco/nco,https://github.com/nco/nco,228,2020-12-16T03:49:26Z,2020-12-18T18:54:15Z,2020-12-18T20:07:59Z,MERGED,True,8,2,1,https://github.com/kgerheiser,Add all NetCDF/HDF5 dependencies to CMAKE_REQUIRED_LIBRARIES,1,[],https://github.com/nco/nco/pull/228,https://github.com/czender,4,https://github.com/nco/nco/pull/228#issuecomment-748260692,"All dependencies need to be linked in so that CMake can properly check for the desired features.
When using static libraries the checks to detect NetCDF and HDF5 features will always fail and cause issues when building.
Fixes #227
These changes worked for me, but I'd like to see someone else try and build this with your usual workflow. Slightly more advanced logic may be needed to only link in the libraries that are present. But if those library variables are empty then they'll have no effect, so I think it might be fine.",Thank you for making your first contribution to NCO! Hope there will be more. Charlie,True,{}
nco/nco,https://github.com/nco/nco,229,2020-12-22T22:20:09Z,2021-02-08T22:06:17Z,2021-02-08T22:07:25Z,MERGED,True,199,2,2,https://github.com/jtolento,Increase number of groomed bits,4,[],https://github.com/nco/nco/pull/229,https://github.com/jtolento,1,https://github.com/nco/nco/pull/229,,,True,{}
nco/nco,https://github.com/nco/nco,234,2021-02-25T15:05:02Z,2021-02-25T15:15:24Z,2021-02-25T15:16:02Z,MERGED,True,2,2,1,https://github.com/hmb1,fixed rounding issues with array() method,1,[],https://github.com/nco/nco/pull/234,https://github.com/hmb1,1,https://github.com/nco/nco/pull/234,,,True,{}
nco/nco,https://github.com/nco/nco,234,2021-02-25T15:05:02Z,2021-02-25T15:15:24Z,2021-02-25T15:16:02Z,MERGED,True,2,2,1,https://github.com/hmb1,fixed rounding issues with array() method,1,[],https://github.com/nco/nco/pull/234,https://github.com/hmb1,2,https://github.com/nco/nco/pull/234#issuecomment-785974710,,@czender,True,{}
nco/nco,https://github.com/nco/nco,234,2021-02-25T15:05:02Z,2021-02-25T15:15:24Z,2021-02-25T15:16:02Z,MERGED,True,2,2,1,https://github.com/hmb1,fixed rounding issues with array() method,1,[],https://github.com/nco/nco/pull/234,https://github.com/czender,3,https://github.com/nco/nco/pull/234#issuecomment-785977285,,"Thanks, Henry. The Travis failures are due to my changes elsewhere so your PR was fine.",True,{}
nco/nco,https://github.com/nco/nco,240,2021-04-13T13:35:27Z,2021-04-13T16:09:11Z,2021-04-13T16:09:30Z,MERGED,True,258,144,3,https://github.com/hmb1,Hmb blk sz,7,[],https://github.com/nco/nco/pull/240,https://github.com/hmb1,1,https://github.com/nco/nco/pull/240,"@czender
changed  KDPriority *kd_list  to KDPriority **kd_list.
List now be dynamically resized.
NCO_VRL_BLOCKSIZE 1000","@czender
changed  KDPriority *kd_list  to KDPriority **kd_list.
List now be dynamically resized.
NCO_VRL_BLOCKSIZE 1000",True,{}
nco/nco,https://github.com/nco/nco,240,2021-04-13T13:35:27Z,2021-04-13T16:09:11Z,2021-04-13T16:09:30Z,MERGED,True,258,144,3,https://github.com/hmb1,Hmb blk sz,7,[],https://github.com/nco/nco/pull/240,https://github.com/czender,2,https://github.com/nco/nco/pull/240#issuecomment-818858496,"@czender
changed  KDPriority *kd_list  to KDPriority **kd_list.
List now be dynamically resized.
NCO_VRL_BLOCKSIZE 1000","Thank you, Henry!",True,{}
nco/nco,https://github.com/nco/nco,241,2021-04-19T23:58:45Z,2021-04-20T00:12:47Z,2021-04-20T00:12:56Z,MERGED,True,28,4,1,https://github.com/czender,mods to _mk_vrl() _mk_rll() so that masked cell data is included in l…,1,[],https://github.com/nco/nco/pull/241,https://github.com/czender,1,https://github.com/nco/nco/pull/241,…ists,…ists,True,{}
nco/nco,https://github.com/nco/nco,241,2021-04-19T23:58:45Z,2021-04-20T00:12:47Z,2021-04-20T00:12:56Z,MERGED,True,28,4,1,https://github.com/czender,mods to _mk_vrl() _mk_rll() so that masked cell data is included in l…,1,[],https://github.com/nco/nco/pull/241,https://github.com/czender,2,https://github.com/nco/nco/pull/241#issuecomment-822873107,…ists,"thanks, henry",True,{}
nco/nco,https://github.com/nco/nco,242,2021-04-27T21:42:00Z,2021-04-28T16:51:22Z,2021-04-28T16:51:22Z,MERGED,True,105,65,1,https://github.com/jtolento,Gbg,2,[],https://github.com/nco/nco/pull/242,https://github.com/jtolento,1,https://github.com/nco/nco/pull/242,Improvements to baa 7 granular bitgrooming,Improvements to baa 7 granular bitgrooming,True,{}
nco/nco,https://github.com/nco/nco,245,2021-07-30T10:23:58Z,2021-08-04T18:16:32Z,2021-08-04T18:16:43Z,MERGED,True,1,1,1,https://github.com/hmb1,fixed clang++ warning,1,[],https://github.com/nco/nco/pull/245,https://github.com/hmb1,1,https://github.com/nco/nco/pull/245,"@czender
have done fix but am not seeing the travis or appveyor CI builds in  the master branch ?","@czender
have done fix but am not seeing the travis or appveyor CI builds in  the master branch ?",True,{}
nco/nco,https://github.com/nco/nco,248,2021-09-23T16:24:27Z,2021-09-23T17:03:04Z,2021-09-23T17:03:17Z,MERGED,True,225,221,15,https://github.com/hmb1,Hmb grm fix,7,[],https://github.com/nco/nco/pull/248,https://github.com/hmb1,1,https://github.com/nco/nco/pull/248,"@czender
renamed ncoGRammer->ncoGRammar","@czender
renamed ncoGRammer->ncoGRammar",True,{}
nco/nco,https://github.com/nco/nco,248,2021-09-23T16:24:27Z,2021-09-23T17:03:04Z,2021-09-23T17:03:17Z,MERGED,True,225,221,15,https://github.com/hmb1,Hmb grm fix,7,[],https://github.com/nco/nco/pull/248,https://github.com/hmb1,2,https://github.com/nco/nco/pull/248#issuecomment-925982997,"@czender
renamed ncoGRammer->ncoGRammar","@czender
Think I got all of the renames
Please test before merge",True,{}
nco/nco,https://github.com/nco/nco,253,2022-01-13T06:56:11Z,2022-01-13T23:05:41Z,2022-01-13T23:05:41Z,MERGED,True,0,4,1,https://github.com/rkouznetsov,Removed unsupported -d option for ncap2 from man,1,[],https://github.com/nco/nco/pull/253,https://github.com/rkouznetsov,1,https://github.com/nco/nco/pull/253,Fix an error in the man page,Fix an error in the man page,True,{}
nco/nco,https://github.com/nco/nco,254,2022-04-22T11:55:25Z,2022-04-22T14:04:45Z,2022-04-22T14:05:08Z,MERGED,True,38,8,4,https://github.com/hmb1,Hmb fix where,2,[],https://github.com/nco/nco/pull/254,https://github.com/hmb1,1,https://github.com/nco/nco/pull/254,"@czender
fixed issue with where()  when   mask   FillValue is NC_FILL_INT
re-enabled  test script in   ncap2_tst.nco  NCO_rgr.pm
added where test for above issue","@czender
fixed issue with where()  when   mask   FillValue is NC_FILL_INT
re-enabled  test script in   ncap2_tst.nco  NCO_rgr.pm
added where test for above issue",True,{}
nco/nco,https://github.com/nco/nco,254,2022-04-22T11:55:25Z,2022-04-22T14:04:45Z,2022-04-22T14:05:08Z,MERGED,True,38,8,4,https://github.com/hmb1,Hmb fix where,2,[],https://github.com/nco/nco/pull/254,https://github.com/czender,2,https://github.com/nco/nco/pull/254#issuecomment-1106550780,"@czender
fixed issue with where()  when   mask   FillValue is NC_FILL_INT
re-enabled  test script in   ncap2_tst.nco  NCO_rgr.pm
added where test for above issue","Looks good, thank you.",True,{}
nco/nco,https://github.com/nco/nco,255,2022-05-04T10:38:18Z,2022-05-04T14:28:23Z,2022-05-04T14:28:23Z,MERGED,True,257,253,1,https://github.com/hmb1,update to latest Grammar,1,[],https://github.com/nco/nco/pull/255,https://github.com/hmb1,1,https://github.com/nco/nco/pull/255,"@czender
Forgot to update Tree Parser source file from updated grammar.","@czender
Forgot to update Tree Parser source file from updated grammar.",True,{}
