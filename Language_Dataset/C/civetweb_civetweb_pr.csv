civetweb/civetweb,https://github.com/civetweb/civetweb,269,2016-03-06T12:10:31Z,2016-03-08T18:41:30Z,2016-03-08T18:41:30Z,MERGED,True,15,13,2,https://github.com/mingodad,"Fix unit_test, still not working properly",1,[],https://github.com/civetweb/civetweb/pull/269,https://github.com/mingodad,1,https://github.com/civetweb/civetweb/pull/269,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,269,2016-03-06T12:10:31Z,2016-03-08T18:41:30Z,2016-03-08T18:41:30Z,MERGED,True,15,13,2,https://github.com/mingodad,"Fix unit_test, still not working properly",1,[],https://github.com/civetweb/civetweb/pull/269,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/269#issuecomment-193907396,,"In July 2015, with the build system change to CMake (#94), we started to port or re-implement the existing unit_test.c file, so the unit tests are done by TravisCI and AppVeyor based on the CMakeList file.
The current unit test files are public_func.c, public_server.c, private.c and private_exe.c.
They for every push and for every pull request - e.g.: for this pull request (#269), 128 builds on Travis were made (see https://travis-ci.org/civetweb/civetweb/builds/114035298), and 19 test suits with several test cases each are run for every of these 128 builds (e.g. see https://travis-ci.org/civetweb/civetweb/jobs/114035441#L468).
'unit_test.c' should be deleted, once the CMake build system is fully working (I would like to get it working for MacOS as well, but currently I don't know how this has to be done).
But I think there should be at least a note in the header of unit_test.c that it mostly obsolete and replaced by the CMake + CHECK system.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,272,2016-03-15T04:16:48Z,2016-03-15T19:43:14Z,2016-03-17T01:07:46Z,MERGED,True,9,0,1,https://github.com/jd-boyd,Add MIME types for fonts.,1,[],https://github.com/civetweb/civetweb/pull/272,https://github.com/jd-boyd,1,https://github.com/civetweb/civetweb/pull/272,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,272,2016-03-15T04:16:48Z,2016-03-15T19:43:14Z,2016-03-17T01:07:46Z,MERGED,True,9,0,1,https://github.com/jd-boyd,Add MIME types for fonts.,1,[],https://github.com/civetweb/civetweb/pull/272,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/272#issuecomment-196990888,,"Merged.
Thank you for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,275,2016-03-16T04:35:29Z,2016-03-16T19:03:23Z,2016-03-17T00:17:23Z,MERGED,True,29,4,2,https://github.com/jd-boyd,Add mg_send_mime_file.,1,[],https://github.com/civetweb/civetweb/pull/275,https://github.com/jd-boyd,1,https://github.com/civetweb/civetweb/pull/275,"This allows sending files with a specified Content-Type instead of
relying on file name extension lookup.
Addresses #271","This allows sending files with a specified Content-Type instead of
relying on file name extension lookup.
Addresses #271",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,275,2016-03-16T04:35:29Z,2016-03-16T19:03:23Z,2016-03-17T00:17:23Z,MERGED,True,29,4,2,https://github.com/jd-boyd,Add mg_send_mime_file.,1,[],https://github.com/civetweb/civetweb/pull/275,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/275#issuecomment-197492775,"This allows sending files with a specified Content-Type instead of
relying on file name extension lookup.
Addresses #271","Merged.
Thank you for your contribution.
I will close #271 then.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,277,2016-03-17T06:21:03Z,2016-03-17T21:18:26Z,2016-03-24T15:47:43Z,MERGED,True,2,2,1,https://github.com/jd-boyd,Fix signed conversion error in a new CGI test.,1,[],https://github.com/civetweb/civetweb/pull/277,https://github.com/jd-boyd,1,https://github.com/civetweb/civetweb/pull/277,"The broken test was introduced in 54c6b08.
Closes #276.","The broken test was introduced in 54c6b08.
Closes #276.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,279,2016-03-18T06:51:09Z,2016-03-18T19:33:09Z,2016-03-24T15:46:59Z,MERGED,True,5,4,1,https://github.com/jd-boyd,Turn on verbose output on failure for tests.,1,[],https://github.com/civetweb/civetweb/pull/279,https://github.com/jd-boyd,1,https://github.com/civetweb/civetweb/pull/279,"Also, work towards solving #278, but for now only expect more useful information.","Also, work towards solving #278, but for now only expect more useful information.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,279,2016-03-18T06:51:09Z,2016-03-18T19:33:09Z,2016-03-24T15:46:59Z,MERGED,True,5,4,1,https://github.com/jd-boyd,Turn on verbose output on failure for tests.,1,[],https://github.com/civetweb/civetweb/pull/279,https://github.com/jd-boyd,2,https://github.com/civetweb/civetweb/pull/279#issuecomment-198231629,"Also, work towards solving #278, but for now only expect more useful information.",Feel free to ignore this until I look at the appveyor results.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,279,2016-03-18T06:51:09Z,2016-03-18T19:33:09Z,2016-03-24T15:46:59Z,MERGED,True,5,4,1,https://github.com/jd-boyd,Turn on verbose output on failure for tests.,1,[],https://github.com/civetweb/civetweb/pull/279,https://github.com/jd-boyd,3,https://github.com/civetweb/civetweb/pull/279#issuecomment-198377185,"Also, work towards solving #278, but for now only expect more useful information.","OK, the test results on appveyor are the same, see here: https://ci.appveyor.com/project/civetweb/civetweb/build/401
Looking at the failing job inside that ( https://ci.appveyor.com/project/civetweb/civetweb/build/401/job/f81v88wmyyyiror5 ), we do now see more information about the test failures:
        Start 16: test-publicserver-start-stop-https-server
  16/19 Test #16: test-publicserver-start-stop-https-server ...***Failed    1.03 sec
  Running suite(s): PublicServer
  0%: Checks: 1, Failures: 1, Errors: 0
  C:\projects\civetweb\test\public_server.c:340:F:Start Stop HTTPS Server:test_mg_start_stop_https_server:0: Assertion 'errmsg==""""' failed: errmsg==""load_dll: cannot load libeay32.dll"", """"==""""

        Start 17: test-publicserver-tls-server-client
  17/19 Test #17: test-publicserver-tls-server-client .........***Failed    1.03 sec
  Running suite(s): PublicServer
  0%: Checks: 1, Failures: 1, Errors: 0
  C:\projects\civetweb\test\public_server.c:446:F:TLS Server Client:test_mg_server_and_client_tls:0: Assertion 'errmsg==""""' failed: errmsg==""load_dll: cannot load libeay32.dll"", """"==""""

        Start 18: test-publicserver-server-requests
  18/19 Test #18: test-publicserver-server-requests ...........***Failed    0.00 sec
  Running suite(s): PublicServer
  0%: Checks: 1, Failures: 1, Errors: 0
  C:\projects\civetweb\test\public_server.c:784:F:Server Requests:test_request_handlers:0: Assertion 'ctx != ((void *)0)' failed

Thus, I would suggest this is worth merging.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,280,2016-03-21T12:32:47Z,2016-03-24T18:26:13Z,2016-03-28T11:36:54Z,MERGED,True,35,1,1,https://github.com/gaida,Added certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/280,https://github.com/gaida,1,https://github.com/civetweb/civetweb/pull/280,"This reloads the certificate and ca certificate on every request. The goal is to provide functionality for short lived certificates. The functionality can be enabled with the config option ""ssl_short_trust"".
It's advised to keep the certificates stored on tmpfs on systems with high throughput because of the increased disk io.
Why Short-Lived Trust?
Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP) are great technologies for checking the current status of certificates. The problem with these technologies is, that they introduce both scale and management challenges in deployed cloud applications. Short-lived trust enables added security in such environments, since compromised keys are less valuable to an attacker.","This reloads the certificate and ca certificate on every request. The goal is to provide functionality for short lived certificates. The functionality can be enabled with the config option ""ssl_short_trust"".
It's advised to keep the certificates stored on tmpfs on systems with high throughput because of the increased disk io.
Why Short-Lived Trust?
Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP) are great technologies for checking the current status of certificates. The problem with these technologies is, that they introduce both scale and management challenges in deployed cloud applications. Short-lived trust enables added security in such environments, since compromised keys are less valuable to an attacker.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,280,2016-03-21T12:32:47Z,2016-03-24T18:26:13Z,2016-03-28T11:36:54Z,MERGED,True,35,1,1,https://github.com/gaida,Added certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/280,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/280#issuecomment-199443063,"This reloads the certificate and ca certificate on every request. The goal is to provide functionality for short lived certificates. The functionality can be enabled with the config option ""ssl_short_trust"".
It's advised to keep the certificates stored on tmpfs on systems with high throughput because of the increased disk io.
Why Short-Lived Trust?
Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP) are great technologies for checking the current status of certificates. The problem with these technologies is, that they introduce both scale and management challenges in deployed cloud applications. Short-lived trust enables added security in such environments, since compromised keys are less valuable to an attacker.","I agree in principle to support short lived certificates.
The idea of this implementation is to exchange the certificate file while the server is running, right?
I wonder if this may cause the problem that you won't be able to exchange the file, since it is often (always) read by the web server process.
It may also cause a lot of disk IO. In Linux, maybe RAM-disks and symlinks could help, but you don't have that for Windows.
An alternative could be to have a cert folder for every day, e.g., cert/2016-03-21/, cert/2016-03-22/, ...
On the other hand, we should not try the solve a problem that does not exist.
Did you check if it is still possible to exchange the cert file and directory in a high server load condition?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,280,2016-03-21T12:32:47Z,2016-03-24T18:26:13Z,2016-03-28T11:36:54Z,MERGED,True,35,1,1,https://github.com/gaida,Added certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/280,https://github.com/gaida,3,https://github.com/civetweb/civetweb/pull/280#issuecomment-199520952,"This reloads the certificate and ca certificate on every request. The goal is to provide functionality for short lived certificates. The functionality can be enabled with the config option ""ssl_short_trust"".
It's advised to keep the certificates stored on tmpfs on systems with high throughput because of the increased disk io.
Why Short-Lived Trust?
Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP) are great technologies for checking the current status of certificates. The problem with these technologies is, that they introduce both scale and management challenges in deployed cloud applications. Short-lived trust enables added security in such environments, since compromised keys are less valuable to an attacker.","Yes, that is the idea of this implementation.
While working on this subject, I have tried two options with civetweb to implement the short lived certificates.

One would be to use certificates with file names like cert.123456.pem, where 123456 would represent the current timestamp. Then a callback can be defined to retrieve the current certificate.
The other implementation is the one in this pull request. I would prefer this implementation since this is simpler to use and could also be run standalone. I tried certificates with a validity of 7 minutes and kept requesting against the server (""ddos"" like). This did not result into any issues yet, but I will further inspect this to ensure this will not be a problem.

Since I do not want to decrease portability of the SSL/TLS library with more certificate validation, i did not have a solution yet to reduce the disk IO in general. And yes, the IO could be a concern if civetweb is run on windows with short lived certificates.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,280,2016-03-21T12:32:47Z,2016-03-24T18:26:13Z,2016-03-28T11:36:54Z,MERGED,True,35,1,1,https://github.com/gaida,Added certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/280,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/280#issuecomment-200960095,"This reloads the certificate and ca certificate on every request. The goal is to provide functionality for short lived certificates. The functionality can be enabled with the config option ""ssl_short_trust"".
It's advised to keep the certificates stored on tmpfs on systems with high throughput because of the increased disk io.
Why Short-Lived Trust?
Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP) are great technologies for checking the current status of certificates. The problem with these technologies is, that they introduce both scale and management challenges in deployed cloud applications. Short-lived trust enables added security in such environments, since compromised keys are less valuable to an attacker.","Thinking about the alternatives, I agree to your design choice.
Since ssl_short_trust is a new option, an additional entry in the user manual is required. Do you have a suggestion for a first version of the documentation?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,280,2016-03-21T12:32:47Z,2016-03-24T18:26:13Z,2016-03-28T11:36:54Z,MERGED,True,35,1,1,https://github.com/gaida,Added certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/280,https://github.com/gaida,5,https://github.com/civetweb/civetweb/pull/280#issuecomment-201008556,"This reloads the certificate and ca certificate on every request. The goal is to provide functionality for short lived certificates. The functionality can be enabled with the config option ""ssl_short_trust"".
It's advised to keep the certificates stored on tmpfs on systems with high throughput because of the increased disk io.
Why Short-Lived Trust?
Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP) are great technologies for checking the current status of certificates. The problem with these technologies is, that they introduce both scale and management challenges in deployed cloud applications. Short-lived trust enables added security in such environments, since compromised keys are less valuable to an attacker.","I will write some documentation. I also improved the current version a bit by implementing a stat check on the cert file first, which should reduce disk IO (a little). I will commit everything tomorrow.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,280,2016-03-21T12:32:47Z,2016-03-24T18:26:13Z,2016-03-28T11:36:54Z,MERGED,True,35,1,1,https://github.com/gaida,Added certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/280,https://github.com/gaida,6,https://github.com/civetweb/civetweb/pull/280#issuecomment-201245914,"This reloads the certificate and ca certificate on every request. The goal is to provide functionality for short lived certificates. The functionality can be enabled with the config option ""ssl_short_trust"".
It's advised to keep the certificates stored on tmpfs on systems with high throughput because of the increased disk io.
Why Short-Lived Trust?
Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP) are great technologies for checking the current status of certificates. The problem with these technologies is, that they introduce both scale and management challenges in deployed cloud applications. Short-lived trust enables added security in such environments, since compromised keys are less valuable to an attacker.",Follow up can be found here: #284,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,280,2016-03-21T12:32:47Z,2016-03-24T18:26:13Z,2016-03-28T11:36:54Z,MERGED,True,35,1,1,https://github.com/gaida,Added certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/280,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/280#issuecomment-202168030,"This reloads the certificate and ca certificate on every request. The goal is to provide functionality for short lived certificates. The functionality can be enabled with the config option ""ssl_short_trust"".
It's advised to keep the certificates stored on tmpfs on systems with high throughput because of the increased disk io.
Why Short-Lived Trust?
Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP) are great technologies for checking the current status of certificates. The problem with these technologies is, that they introduce both scale and management challenges in deployed cloud applications. Short-lived trust enables added security in such environments, since compromised keys are less valuable to an attacker.","It seems #280 introduced an exception in the Travis CI builds:
https://travis-ci.org/civetweb/civetweb/jobs/118305459#L454
All builds with SSL support fail with this exception since the merge (Build #534), while they did not before the merge (Build #533).
See build .5, .6, .7, .8,   .13, .14, .15, .16,   .21, .22, .23, .24,   .29, .30, .31, .32,   .37, .38, .39, .40,   .45, .46, .47, .48,   .53, .54, .55, .56,  and  .61, .62, .63, .64 for GCC (.65 to .128 fail due to a currently incomplete OSX support) - and build .133, .134, .135, .136,   .141, .142, .143, .144,   and so on to .189, .190, .191, .192 for clang (.193 to .256 again fail because they are OSX builds).
The clang builds do have a stack backtrace.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,280,2016-03-21T12:32:47Z,2016-03-24T18:26:13Z,2016-03-28T11:36:54Z,MERGED,True,35,1,1,https://github.com/gaida,Added certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/280,https://github.com/gaida,8,https://github.com/civetweb/civetweb/pull/280#issuecomment-202349481,"This reloads the certificate and ca certificate on every request. The goal is to provide functionality for short lived certificates. The functionality can be enabled with the config option ""ssl_short_trust"".
It's advised to keep the certificates stored on tmpfs on systems with high throughput because of the increased disk io.
Why Short-Lived Trust?
Certificate Revocation Lists (CRLs) and Online Certificate Status Protocol (OCSP) are great technologies for checking the current status of certificates. The problem with these technologies is, that they introduce both scale and management challenges in deployed cloud applications. Short-lived trust enables added security in such environments, since compromised keys are less valuable to an attacker.",I will have a look at this tomorrow and then I will report back.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,281,2016-03-22T18:36:48Z,2016-03-22T19:53:26Z,2016-03-22T19:53:26Z,MERGED,True,5,5,2,https://github.com/joelgallant,using correct cmake source dir variable,1,[],https://github.com/civetweb/civetweb/pull/281,https://github.com/joelgallant,1,https://github.com/civetweb/civetweb/pull/281,"AFAIK there is a migration to cmake for this project, and a big bonus of cmake is inclusion of targets in parent projects. This change lets a parent properly build civetweb without issue (unit tests withstanding).","AFAIK there is a migration to cmake for this project, and a big bonus of cmake is inclusion of targets in parent projects. This change lets a parent properly build civetweb without issue (unit tests withstanding).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,281,2016-03-22T18:36:48Z,2016-03-22T19:53:26Z,2016-03-22T19:53:26Z,MERGED,True,5,5,2,https://github.com/joelgallant,using correct cmake source dir variable,1,[],https://github.com/civetweb/civetweb/pull/281,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/281#issuecomment-199987495,"AFAIK there is a migration to cmake for this project, and a big bonus of cmake is inclusion of targets in parent projects. This change lets a parent properly build civetweb without issue (unit tests withstanding).","Yes, there is a transition to CMake: #94
I'm not really an expert on CMake, so if you say this modification is required for other projects, I'll merge it.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,282,2016-03-23T16:27:47Z,2016-03-24T18:22:59Z,2016-03-31T21:55:19Z,MERGED,True,50,5,2,https://github.com/thewaterymoon,Fix the checking of 'keep-alive' connection flag.,4,[],https://github.com/civetweb/civetweb/pull/282,https://github.com/thewaterymoon,1,https://github.com/civetweb/civetweb/pull/282,"Hi,
The ""Connection:"" header can contain multiple entries. In my specific case, I'm handling a WebSocket connection with keep-alive (so, the header is ""Connection: keep-alive, Upgrade"" - at least when the websocket is opened from Firefox).
The current places that check for ""keep-alive"" in the ""Connection"" header do a string compare against the whole header.
So, this patch:

Adds a utility function for checking if a specific option is listed in a multi-option (comma-separated) header.
Modifies the next_option() function to strip leading and trailing whitespace from the option. As mentioned above, the Firefox-generated header has a space after the comma, and a brief glance at the RFC seems to say that's allowable anywhere between tokens. I have not analysed the code to see if other uses of next_option() should /not/ have that behaviour.
Modifies the two existing places where 'keep-alive' was being tested, to use the new function.

Notes on the implementation:
I use assert() - I presume that is OK?
It uses 'goto' to skip any blank entries it finds (i.e., ""Connection: keep-alive,,Upgrade,""). I notice that the source does not generally use 'goto' unless for tidy-up purposes. I don't think the use of goto in this patch is particularly bad, but if you don't like it I could submit a different patch. Suggestions for approaches would be:

Create a two-stage function (the outer function just loops as long as the inner function is returning empty entries).
Use an outer ""for(;;)"" loop such that 'continue' will do the same as the 'goto' and there's a trailing 'break' should it get to the bottom (i.e., it's not actually a loop, just a construct with two unnamed branch targets ...).
Recursion. [FWIW, I don't like this one as it's operating on externally-generated data and a huge header containing many commas would cause it to recurse deeply. A good optimizer /should/ optimize out the tail recursion, but why leave that to chance?]

I've attached a stand-alone test program (it doesn't need to actually start a server).
K.
option_test.zip","Hi,
The ""Connection:"" header can contain multiple entries. In my specific case, I'm handling a WebSocket connection with keep-alive (so, the header is ""Connection: keep-alive, Upgrade"" - at least when the websocket is opened from Firefox).
The current places that check for ""keep-alive"" in the ""Connection"" header do a string compare against the whole header.
So, this patch:

Adds a utility function for checking if a specific option is listed in a multi-option (comma-separated) header.
Modifies the next_option() function to strip leading and trailing whitespace from the option. As mentioned above, the Firefox-generated header has a space after the comma, and a brief glance at the RFC seems to say that's allowable anywhere between tokens. I have not analysed the code to see if other uses of next_option() should /not/ have that behaviour.
Modifies the two existing places where 'keep-alive' was being tested, to use the new function.

Notes on the implementation:
I use assert() - I presume that is OK?
It uses 'goto' to skip any blank entries it finds (i.e., ""Connection: keep-alive,,Upgrade,""). I notice that the source does not generally use 'goto' unless for tidy-up purposes. I don't think the use of goto in this patch is particularly bad, but if you don't like it I could submit a different patch. Suggestions for approaches would be:

Create a two-stage function (the outer function just loops as long as the inner function is returning empty entries).
Use an outer ""for(;;)"" loop such that 'continue' will do the same as the 'goto' and there's a trailing 'break' should it get to the bottom (i.e., it's not actually a loop, just a construct with two unnamed branch targets ...).
Recursion. [FWIW, I don't like this one as it's operating on externally-generated data and a huge header containing many commas would cause it to recurse deeply. A good optimizer /should/ optimize out the tail recursion, but why leave that to chance?]

I've attached a stand-alone test program (it doesn't need to actually start a server).
K.
option_test.zip",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,282,2016-03-23T16:27:47Z,2016-03-24T18:22:59Z,2016-03-31T21:55:19Z,MERGED,True,50,5,2,https://github.com/thewaterymoon,Fix the checking of 'keep-alive' connection flag.,4,[],https://github.com/civetweb/civetweb/pull/282,https://github.com/thewaterymoon,2,https://github.com/civetweb/civetweb/pull/282#issuecomment-200530171,"Hi,
The ""Connection:"" header can contain multiple entries. In my specific case, I'm handling a WebSocket connection with keep-alive (so, the header is ""Connection: keep-alive, Upgrade"" - at least when the websocket is opened from Firefox).
The current places that check for ""keep-alive"" in the ""Connection"" header do a string compare against the whole header.
So, this patch:

Adds a utility function for checking if a specific option is listed in a multi-option (comma-separated) header.
Modifies the next_option() function to strip leading and trailing whitespace from the option. As mentioned above, the Firefox-generated header has a space after the comma, and a brief glance at the RFC seems to say that's allowable anywhere between tokens. I have not analysed the code to see if other uses of next_option() should /not/ have that behaviour.
Modifies the two existing places where 'keep-alive' was being tested, to use the new function.

Notes on the implementation:
I use assert() - I presume that is OK?
It uses 'goto' to skip any blank entries it finds (i.e., ""Connection: keep-alive,,Upgrade,""). I notice that the source does not generally use 'goto' unless for tidy-up purposes. I don't think the use of goto in this patch is particularly bad, but if you don't like it I could submit a different patch. Suggestions for approaches would be:

Create a two-stage function (the outer function just loops as long as the inner function is returning empty entries).
Use an outer ""for(;;)"" loop such that 'continue' will do the same as the 'goto' and there's a trailing 'break' should it get to the bottom (i.e., it's not actually a loop, just a construct with two unnamed branch targets ...).
Recursion. [FWIW, I don't like this one as it's operating on externally-generated data and a huge header containing many commas would cause it to recurse deeply. A good optimizer /should/ optimize out the tail recursion, but why leave that to chance?]

I've attached a stand-alone test program (it doesn't need to actually start a server).
K.
option_test.zip","Hi.
""recv()"" can fail -1/EINTR on a socket which has a timeout set, regardless of SA_RESTART (see signal(7)). This can cause the premature closure of long-lived connections. I propose re-starting recv() when EINTR is the cause of failure.
K.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,282,2016-03-23T16:27:47Z,2016-03-24T18:22:59Z,2016-03-31T21:55:19Z,MERGED,True,50,5,2,https://github.com/thewaterymoon,Fix the checking of 'keep-alive' connection flag.,4,[],https://github.com/civetweb/civetweb/pull/282,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/282#issuecomment-200959234,"Hi,
The ""Connection:"" header can contain multiple entries. In my specific case, I'm handling a WebSocket connection with keep-alive (so, the header is ""Connection: keep-alive, Upgrade"" - at least when the websocket is opened from Firefox).
The current places that check for ""keep-alive"" in the ""Connection"" header do a string compare against the whole header.
So, this patch:

Adds a utility function for checking if a specific option is listed in a multi-option (comma-separated) header.
Modifies the next_option() function to strip leading and trailing whitespace from the option. As mentioned above, the Firefox-generated header has a space after the comma, and a brief glance at the RFC seems to say that's allowable anywhere between tokens. I have not analysed the code to see if other uses of next_option() should /not/ have that behaviour.
Modifies the two existing places where 'keep-alive' was being tested, to use the new function.

Notes on the implementation:
I use assert() - I presume that is OK?
It uses 'goto' to skip any blank entries it finds (i.e., ""Connection: keep-alive,,Upgrade,""). I notice that the source does not generally use 'goto' unless for tidy-up purposes. I don't think the use of goto in this patch is particularly bad, but if you don't like it I could submit a different patch. Suggestions for approaches would be:

Create a two-stage function (the outer function just loops as long as the inner function is returning empty entries).
Use an outer ""for(;;)"" loop such that 'continue' will do the same as the 'goto' and there's a trailing 'break' should it get to the bottom (i.e., it's not actually a loop, just a construct with two unnamed branch targets ...).
Recursion. [FWIW, I don't like this one as it's operating on externally-generated data and a huge header containing many commas would cause it to recurse deeply. A good optimizer /should/ optimize out the tail recursion, but why leave that to chance?]

I've attached a stand-alone test program (it doesn't need to actually start a server).
K.
option_test.zip","Thank you for your contribution.
Usually I use the for/continue version (alternative 2 above) - I will merge it with the goto statement.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,282,2016-03-23T16:27:47Z,2016-03-24T18:22:59Z,2016-03-31T21:55:19Z,MERGED,True,50,5,2,https://github.com/thewaterymoon,Fix the checking of 'keep-alive' connection flag.,4,[],https://github.com/civetweb/civetweb/pull/282,https://github.com/thewaterymoon,4,https://github.com/civetweb/civetweb/pull/282#issuecomment-201064499,"Hi,
The ""Connection:"" header can contain multiple entries. In my specific case, I'm handling a WebSocket connection with keep-alive (so, the header is ""Connection: keep-alive, Upgrade"" - at least when the websocket is opened from Firefox).
The current places that check for ""keep-alive"" in the ""Connection"" header do a string compare against the whole header.
So, this patch:

Adds a utility function for checking if a specific option is listed in a multi-option (comma-separated) header.
Modifies the next_option() function to strip leading and trailing whitespace from the option. As mentioned above, the Firefox-generated header has a space after the comma, and a brief glance at the RFC seems to say that's allowable anywhere between tokens. I have not analysed the code to see if other uses of next_option() should /not/ have that behaviour.
Modifies the two existing places where 'keep-alive' was being tested, to use the new function.

Notes on the implementation:
I use assert() - I presume that is OK?
It uses 'goto' to skip any blank entries it finds (i.e., ""Connection: keep-alive,,Upgrade,""). I notice that the source does not generally use 'goto' unless for tidy-up purposes. I don't think the use of goto in this patch is particularly bad, but if you don't like it I could submit a different patch. Suggestions for approaches would be:

Create a two-stage function (the outer function just loops as long as the inner function is returning empty entries).
Use an outer ""for(;;)"" loop such that 'continue' will do the same as the 'goto' and there's a trailing 'break' should it get to the bottom (i.e., it's not actually a loop, just a construct with two unnamed branch targets ...).
Recursion. [FWIW, I don't like this one as it's operating on externally-generated data and a huge header containing many commas would cause it to recurse deeply. A good optimizer /should/ optimize out the tail recursion, but why leave that to chance?]

I've attached a stand-alone test program (it doesn't need to actually start a server).
K.
option_test.zip","Hi. Thanks for that. I'm new to github so am still working out its workflow. I thought I was making three separate pull requests, but they have all been merged into one - I can see why that would be now, as I had to make a small change for a CI failure.
Anyway, be aware that you picked up a separate change - the recv() retry-on-EINTR thing. I had intended for that to be considered separately, but if you're happy with that too then it's fine. I just want to be sure you're aware that another change had been ""snuck in"" under a pull request for a different topic :)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,282,2016-03-23T16:27:47Z,2016-03-24T18:22:59Z,2016-03-31T21:55:19Z,MERGED,True,50,5,2,https://github.com/thewaterymoon,Fix the checking of 'keep-alive' connection flag.,4,[],https://github.com/civetweb/civetweb/pull/282,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/282#issuecomment-203647170,"Hi,
The ""Connection:"" header can contain multiple entries. In my specific case, I'm handling a WebSocket connection with keep-alive (so, the header is ""Connection: keep-alive, Upgrade"" - at least when the websocket is opened from Firefox).
The current places that check for ""keep-alive"" in the ""Connection"" header do a string compare against the whole header.
So, this patch:

Adds a utility function for checking if a specific option is listed in a multi-option (comma-separated) header.
Modifies the next_option() function to strip leading and trailing whitespace from the option. As mentioned above, the Firefox-generated header has a space after the comma, and a brief glance at the RFC seems to say that's allowable anywhere between tokens. I have not analysed the code to see if other uses of next_option() should /not/ have that behaviour.
Modifies the two existing places where 'keep-alive' was being tested, to use the new function.

Notes on the implementation:
I use assert() - I presume that is OK?
It uses 'goto' to skip any blank entries it finds (i.e., ""Connection: keep-alive,,Upgrade,""). I notice that the source does not generally use 'goto' unless for tidy-up purposes. I don't think the use of goto in this patch is particularly bad, but if you don't like it I could submit a different patch. Suggestions for approaches would be:

Create a two-stage function (the outer function just loops as long as the inner function is returning empty entries).
Use an outer ""for(;;)"" loop such that 'continue' will do the same as the 'goto' and there's a trailing 'break' should it get to the bottom (i.e., it's not actually a loop, just a construct with two unnamed branch targets ...).
Recursion. [FWIW, I don't like this one as it's operating on externally-generated data and a huge header containing many commas would cause it to recurse deeply. A good optimizer /should/ optimize out the tail recursion, but why leave that to chance?]

I've attached a stand-alone test program (it doesn't need to actually start a server).
K.
option_test.zip","I don`t think merging the ""retry-on-EINTR thing"" causes any problem.
Or do you think there is something special to consider that I might not have seen yet?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,282,2016-03-23T16:27:47Z,2016-03-24T18:22:59Z,2016-03-31T21:55:19Z,MERGED,True,50,5,2,https://github.com/thewaterymoon,Fix the checking of 'keep-alive' connection flag.,4,[],https://github.com/civetweb/civetweb/pull/282,https://github.com/thewaterymoon,6,https://github.com/civetweb/civetweb/pull/282#issuecomment-204147408,"Hi,
The ""Connection:"" header can contain multiple entries. In my specific case, I'm handling a WebSocket connection with keep-alive (so, the header is ""Connection: keep-alive, Upgrade"" - at least when the websocket is opened from Firefox).
The current places that check for ""keep-alive"" in the ""Connection"" header do a string compare against the whole header.
So, this patch:

Adds a utility function for checking if a specific option is listed in a multi-option (comma-separated) header.
Modifies the next_option() function to strip leading and trailing whitespace from the option. As mentioned above, the Firefox-generated header has a space after the comma, and a brief glance at the RFC seems to say that's allowable anywhere between tokens. I have not analysed the code to see if other uses of next_option() should /not/ have that behaviour.
Modifies the two existing places where 'keep-alive' was being tested, to use the new function.

Notes on the implementation:
I use assert() - I presume that is OK?
It uses 'goto' to skip any blank entries it finds (i.e., ""Connection: keep-alive,,Upgrade,""). I notice that the source does not generally use 'goto' unless for tidy-up purposes. I don't think the use of goto in this patch is particularly bad, but if you don't like it I could submit a different patch. Suggestions for approaches would be:

Create a two-stage function (the outer function just loops as long as the inner function is returning empty entries).
Use an outer ""for(;;)"" loop such that 'continue' will do the same as the 'goto' and there's a trailing 'break' should it get to the bottom (i.e., it's not actually a loop, just a construct with two unnamed branch targets ...).
Recursion. [FWIW, I don't like this one as it's operating on externally-generated data and a huge header containing many commas would cause it to recurse deeply. A good optimizer /should/ optimize out the tail recursion, but why leave that to chance?]

I've attached a stand-alone test program (it doesn't need to actually start a server).
K.
option_test.zip","No, it works for me and fixes my use-case. I just wanted to make sure someone with a more rounded understanding of civetweb as a whole was happy that it doesn't break some other area that I hadn't considered. It sounds like you are ;)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,283,2016-03-24T22:24:28Z,2016-03-26T11:59:12Z,2016-03-26T11:59:12Z,MERGED,True,1,3,2,https://github.com/joelgallant,C++ cmake fixes,3,[],https://github.com/civetweb/civetweb/pull/283,https://github.com/joelgallant,1,https://github.com/civetweb/civetweb/pull/283,"There are violations in code of the compiler flags you add (in c++ only it looks like). Also, when building as a subdirectory, the linking to libdl was not working for me. Using the link flag manually worked.","There are violations in code of the compiler flags you add (in c++ only it looks like). Also, when building as a subdirectory, the linking to libdl was not working for me. Using the link flag manually worked.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,284,2016-03-25T11:33:57Z,2016-03-26T11:57:46Z,2016-03-26T11:57:46Z,MERGED,True,59,12,2,https://github.com/gaida,Improved certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/284,https://github.com/gaida,1,https://github.com/civetweb/civetweb/pull/284,"A follow up for pull request #280 (Added certificate hot swap for use with short lived certificates)
The following improvements have been made:

This version stats the cert / key pem file and checks if a new version is available and only reloads then.
Fixed a threading issue while reloading the certificate.
Added documentation for the ssl_short_trust option.","A follow up for pull request #280 (Added certificate hot swap for use with short lived certificates)
The following improvements have been made:

This version stats the cert / key pem file and checks if a new version is available and only reloads then.
Fixed a threading issue while reloading the certificate.
Added documentation for the ssl_short_trust option.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,284,2016-03-25T11:33:57Z,2016-03-26T11:57:46Z,2016-03-26T11:57:46Z,MERGED,True,59,12,2,https://github.com/gaida,Improved certificate hot swap for use with short lived certificates,3,[],https://github.com/civetweb/civetweb/pull/284,https://github.com/gaida,2,https://github.com/civetweb/civetweb/pull/284#issuecomment-201247007,"A follow up for pull request #280 (Added certificate hot swap for use with short lived certificates)
The following improvements have been made:

This version stats the cert / key pem file and checks if a new version is available and only reloads then.
Fixed a threading issue while reloading the certificate.
Added documentation for the ssl_short_trust option.",This version is stress tested with more than 1000 requests per second while swapping the certificate every minute. We use it here.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,286,2016-03-27T07:50:16Z,2016-03-27T08:53:11Z,2016-03-28T16:12:11Z,MERGED,True,40,12,3,https://github.com/jd-boyd,"Update libcheck to 0.10.0, and add a patch for osx",1,[],https://github.com/civetweb/civetweb/pull/286,https://github.com/jd-boyd,1,https://github.com/civetweb/civetweb/pull/286,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,287,2016-03-30T15:13:47Z,2016-03-30T18:12:09Z,2016-03-30T18:12:35Z,MERGED,True,4,1,1,https://github.com/gaida,Fixed bug in sslize (see #280),2,[],https://github.com/civetweb/civetweb/pull/287,https://github.com/gaida,1,https://github.com/civetweb/civetweb/pull/287,"#280 introduced a bug in the TLS/SSL support.
Bug is fixed, see: this build","#280 introduced a bug in the TLS/SSL support.
Bug is fixed, see: this build",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,287,2016-03-30T15:13:47Z,2016-03-30T18:12:09Z,2016-03-30T18:12:35Z,MERGED,True,4,1,1,https://github.com/gaida,Fixed bug in sslize (see #280),2,[],https://github.com/civetweb/civetweb/pull/287,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/287#issuecomment-203561115,"#280 introduced a bug in the TLS/SSL support.
Bug is fixed, see: this build","Thanks for the fix.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,289,2016-04-03T00:51:08Z,2016-04-03T00:51:47Z,2016-04-03T00:53:23Z,CLOSED,False,40,25,8,https://github.com/kainjow,Fix OS X link error due to missing libcompat,10,[],https://github.com/civetweb/civetweb/pull/289,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/289,See #94 (comment),See #94 (comment),True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,289,2016-04-03T00:51:08Z,2016-04-03T00:51:47Z,2016-04-03T00:53:23Z,CLOSED,False,40,25,8,https://github.com/kainjow,Fix OS X link error due to missing libcompat,10,[],https://github.com/civetweb/civetweb/pull/289,https://github.com/kainjow,2,https://github.com/civetweb/civetweb/pull/289#issuecomment-204838524,See #94 (comment),"Oops, I didn't want all those commits, will retry.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,290,2016-04-03T00:54:09Z,2016-04-03T07:54:22Z,2016-04-03T19:42:23Z,MERGED,True,2,2,2,https://github.com/kainjow,Fix OS X link error due to missing libcompat,2,[],https://github.com/civetweb/civetweb/pull/290,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/290,See #94 (comment),See #94 (comment),True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,290,2016-04-03T00:54:09Z,2016-04-03T07:54:22Z,2016-04-03T19:42:23Z,MERGED,True,2,2,2,https://github.com/kainjow,Fix OS X link error due to missing libcompat,2,[],https://github.com/civetweb/civetweb/pull/290,https://github.com/kainjow,2,https://github.com/civetweb/civetweb/pull/290#issuecomment-204843781,See #94 (comment),"Just ran make test and it succeeds:
100% tests passed, 0 tests failed out of 20

Total Test time (real) =  10.71 sec",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,290,2016-04-03T00:54:09Z,2016-04-03T07:54:22Z,2016-04-03T19:42:23Z,MERGED,True,2,2,2,https://github.com/kainjow,Fix OS X link error due to missing libcompat,2,[],https://github.com/civetweb/civetweb/pull/290,https://github.com/kainjow,3,https://github.com/civetweb/civetweb/pull/290#issuecomment-204889075,See #94 (comment),"I believe ""gcc"" on OS X on Travis is just a symlink to clang, so it's duplicate tests. It seems like Travis has GCC 4.8 for OS X, but I don't think many people use GCC on OS X nowadays. Clang is the standard compiler. However I'm not sure how to disable the GCC variant on Travis to reduce build time.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,290,2016-04-03T00:54:09Z,2016-04-03T07:54:22Z,2016-04-03T19:42:23Z,MERGED,True,2,2,2,https://github.com/kainjow,Fix OS X link error due to missing libcompat,2,[],https://github.com/civetweb/civetweb/pull/290,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/290#issuecomment-204976471,See #94 (comment),"Thank you for the fix. It seems now OSX builds work, and it was only one line in the build file you changed - probably easy if you know OSX and the build system.
Unfortunately I never used OSX and have no access to an OSX system to check the code there, and I never used CMake and check before.
Is it possible to store the result of the OSX build results, for the release?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,290,2016-04-03T00:54:09Z,2016-04-03T07:54:22Z,2016-04-03T19:42:23Z,MERGED,True,2,2,2,https://github.com/kainjow,Fix OS X link error due to missing libcompat,2,[],https://github.com/civetweb/civetweb/pull/290,https://github.com/kainjow,5,https://github.com/civetweb/civetweb/pull/290#issuecomment-204994912,See #94 (comment),"Seems like Travis can store the files, see:
https://docs.travis-ci.com/user/deployment/
https://docs.travis-ci.com/user/deployment/custom/
However I wouldn't, especially if you have no way to test the final binaries you copy out, and especially since Civetweb is primarily a developer library and not end-user program.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,290,2016-04-03T00:54:09Z,2016-04-03T07:54:22Z,2016-04-03T19:42:23Z,MERGED,True,2,2,2,https://github.com/kainjow,Fix OS X link error due to missing libcompat,2,[],https://github.com/civetweb/civetweb/pull/290,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/290#issuecomment-205040930,See #94 (comment),"Civetweb is primarily a developer library and not end-user program.

It is used for both, developers and end users.
End users may download the binaries from https://sourceforge.net/projects/civetweb/files/
Up to 1.6 there was always a .dmg file for OSX. I have neither a way to build a .dmg file, nor a way to test it. Still, I don't want to cancel OS X support for end users.
The advantage for end users is, they can copy the executable and start the server with one click, without complicated setup and configuration. If you just want a http upload for files, or a simple html web page, you don`t need to do anything else. If you want more, you can use Lua (and now server side javascript). This is also used by end users.
You are right, I don't like to upload binaries that I can not test manually. But they are tested automatically by the CI tests. Probably we need a ""civetweb OSX commissioner"" to care OSX - I can't do it since I have no OSX system, and I've got enough to do anyway so I need to somehow limit the time spent dealing with curious properties of OSX.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,290,2016-04-03T00:54:09Z,2016-04-03T07:54:22Z,2016-04-03T19:42:23Z,MERGED,True,2,2,2,https://github.com/kainjow,Fix OS X link error due to missing libcompat,2,[],https://github.com/civetweb/civetweb/pull/290,https://github.com/kainjow,7,https://github.com/civetweb/civetweb/pull/290#issuecomment-205041535,See #94 (comment),I noticed the Makefile.osx wasn't building correctly either. I'll look into integrating that functionality into CMake to reduce duplicate build code. We can also use CPack (part of CMake) for creating the OS X distribution file.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,291,2016-04-03T15:24:11Z,2016-04-03T20:03:53Z,2016-04-03T22:32:25Z,MERGED,True,17,17,4,https://github.com/kainjow,Fix various const warnings,5,[],https://github.com/civetweb/civetweb/pull/291,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/291,These showed up from clang on Xcode 7.3.,These showed up from clang on Xcode 7.3.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,291,2016-04-03T15:24:11Z,2016-04-03T20:03:53Z,2016-04-03T22:32:25Z,MERGED,True,17,17,4,https://github.com/kainjow,Fix various const warnings,5,[],https://github.com/civetweb/civetweb/pull/291,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/291#issuecomment-205041493,These showed up from clang on Xcode 7.3.,"One build failed: https://travis-ci.org/civetweb/civetweb/jobs/120439799
but due to a timeout.
Probably I needs to increase the timeout for the unit tests again.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,292,2016-04-03T18:58:20Z,2016-04-03T20:04:14Z,2016-04-04T00:06:11Z,MERGED,True,5,5,1,https://github.com/kainjow,Exclude GCC from OS X,3,[],https://github.com/civetweb/civetweb/pull/292,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/292,"A few small Travis changes.
I added the exclude to the first matrix, but it didn't work until I added it to the second, so I think the second matrix key was overwriting the first.","A few small Travis changes.
I added the exclude to the first matrix, but it didn't work until I added it to the second, so I think the second matrix key was overwriting the first.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,293,2016-04-03T21:11:14Z,2016-04-05T18:10:15Z,2016-04-05T18:10:15Z,MERGED,True,11,6,2,https://github.com/kainjow,Fix OS X dmg build,2,[],https://github.com/civetweb/civetweb/pull/293,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/293,I am looking into adding this build to Travis.,I am looking into adding this build to Travis.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,294,2016-04-04T00:13:42Z,2016-04-05T18:10:41Z,2016-04-05T18:10:41Z,MERGED,True,10,3,1,https://github.com/kainjow,Apply patch only for OS X,2,[],https://github.com/civetweb/civetweb/pull/294,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/294,"So Windows doesn't need to have the ""patch"" program.","So Windows doesn't need to have the ""patch"" program.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,294,2016-04-04T00:13:42Z,2016-04-05T18:10:41Z,2016-04-05T18:10:41Z,MERGED,True,10,3,1,https://github.com/kainjow,Apply patch only for OS X,2,[],https://github.com/civetweb/civetweb/pull/294,https://github.com/kainjow,2,https://github.com/civetweb/civetweb/pull/294#issuecomment-205885409,"So Windows doesn't need to have the ""patch"" program.",Made the change.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,297,2016-04-20T09:57:47Z,2016-07-09T09:03:51Z,2016-07-09T09:22:11Z,CLOSED,False,96,21,1,https://github.com/c-mauderer,"Add parameters for thread stack size, priority and policy.",1,[],https://github.com/civetweb/civetweb/pull/297,https://github.com/c-mauderer,1,https://github.com/civetweb/civetweb/pull/297,"This adds the following three parameters:

--thread_stack_size: Set the stack size of the threads.
--thread_priority: Set the priority of the thread.
--thread_policy: Set the scheduling policy of the thread.

The additional parameters simplify the integration of civetweb as a library
with changing requirements regarding to thread creation.","This adds the following three parameters:

--thread_stack_size: Set the stack size of the threads.
--thread_priority: Set the priority of the thread.
--thread_policy: Set the scheduling policy of the thread.

The additional parameters simplify the integration of civetweb as a library
with changing requirements regarding to thread creation.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,297,2016-04-20T09:57:47Z,2016-07-09T09:03:51Z,2016-07-09T09:22:11Z,CLOSED,False,96,21,1,https://github.com/c-mauderer,"Add parameters for thread stack size, priority and policy.",1,[],https://github.com/civetweb/civetweb/pull/297,https://github.com/c-mauderer,2,https://github.com/civetweb/civetweb/pull/297#issuecomment-212421948,"This adds the following three parameters:

--thread_stack_size: Set the stack size of the threads.
--thread_priority: Set the priority of the thread.
--thread_policy: Set the scheduling policy of the thread.

The additional parameters simplify the integration of civetweb as a library
with changing requirements regarding to thread creation.",Seems that I have to rework the patch. See https://groups.google.com/forum/#!topic/civetweb/_Mul9PxgpBE,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,297,2016-04-20T09:57:47Z,2016-07-09T09:03:51Z,2016-07-09T09:22:11Z,CLOSED,False,96,21,1,https://github.com/c-mauderer,"Add parameters for thread stack size, priority and policy.",1,[],https://github.com/civetweb/civetweb/pull/297,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/297#issuecomment-212548332,"This adds the following three parameters:

--thread_stack_size: Set the stack size of the threads.
--thread_priority: Set the priority of the thread.
--thread_policy: Set the scheduling policy of the thread.

The additional parameters simplify the integration of civetweb as a library
with changing requirements regarding to thread creation.","Let's discuss the entire problem, and what would be the best solution in the google group:
https://groups.google.com/forum/#!topic/civetweb/_Mul9PxgpBE",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,297,2016-04-20T09:57:47Z,2016-07-09T09:03:51Z,2016-07-09T09:22:11Z,CLOSED,False,96,21,1,https://github.com/c-mauderer,"Add parameters for thread stack size, priority and policy.",1,[],https://github.com/civetweb/civetweb/pull/297,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/297#issuecomment-231524068,"This adds the following three parameters:

--thread_stack_size: Set the stack size of the threads.
--thread_priority: Set the priority of the thread.
--thread_policy: Set the scheduling policy of the thread.

The additional parameters simplify the integration of civetweb as a library
with changing requirements regarding to thread creation.",Are there any news on this topic?,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,297,2016-04-20T09:57:47Z,2016-07-09T09:03:51Z,2016-07-09T09:22:11Z,CLOSED,False,96,21,1,https://github.com/c-mauderer,"Add parameters for thread stack size, priority and policy.",1,[],https://github.com/civetweb/civetweb/pull/297,https://github.com/c-mauderer,5,https://github.com/civetweb/civetweb/pull/297#issuecomment-231524454,"This adds the following three parameters:

--thread_stack_size: Set the stack size of the threads.
--thread_priority: Set the priority of the thread.
--thread_policy: Set the scheduling policy of the thread.

The additional parameters simplify the integration of civetweb as a library
with changing requirements regarding to thread creation.","Hello bel,
only that I currently don't find the time to properly create the patch like we discussed in the forum. Therefore I think it would be best to close the request for now. I hope that I can reopen it sometimes in the future when I have the time to implement it.
I'm really sorry that I used so much of your time. Thank you for all your help in this matter.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,297,2016-04-20T09:57:47Z,2016-07-09T09:03:51Z,2016-07-09T09:22:11Z,CLOSED,False,96,21,1,https://github.com/c-mauderer,"Add parameters for thread stack size, priority and policy.",1,[],https://github.com/civetweb/civetweb/pull/297,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/297#issuecomment-231525179,"This adds the following three parameters:

--thread_stack_size: Set the stack size of the threads.
--thread_priority: Set the priority of the thread.
--thread_policy: Set the scheduling policy of the thread.

The additional parameters simplify the integration of civetweb as a library
with changing requirements regarding to thread creation.","You are welcome.
Just open the issue again when you have time to deal with this topic.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,1,https://github.com/civetweb/civetweb/pull/298,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/298#issuecomment-212524541,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"I agree to this patch.
Could you still tell me what system without timegm() you mean?
Alternatively, I got the hint that it could be possible to use the timegm implementation of the musl project - see this comment: #278 (comment)
musl uses an MIT licence, so it would be possible to integrate a function from there in civetweb.
I did not yet decide about integrating this piece of code.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,3,https://github.com/civetweb/civetweb/pull/298#issuecomment-212539928,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"I'm currently trying to replace the old version of mongoose that is integrated into RTEMS (https://www.rtems.org/) with the latest version of civetweb. RTEMS is using newlib for it's standard-C-library and there is currently not timegm implemented in newlib (at least not for anything but cygwin).
My first approach was to replace timegm with standard POSIX functions like for example suggested in the man page of timegm (http://linux.die.net/man/3/timegm) but it seems that there is really no easy way to do this in a thread save way. So I just disabled this feature as a temporary fix and noted down that we might have to implement timegm for RTEMS in the long term.
But even if RTEMS sometimes gets a timegm, I think optionally disabling this function can still be useful for other embedded operating systems.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/298#issuecomment-212561090,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"Probably having an alternative implementation for timegm is useful for RTEMS and other (embedded) operating systems as well.
musl could be an option, it has a timegm implementation, with two helper functions (tm_to_secs, secs_to_tm).
It probably does not handle leap seconds, so I would not take this as a general replacement if there is an operating system timegm function that does handle leap seconds.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,5,https://github.com/civetweb/civetweb/pull/298#issuecomment-212843792,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"I think a correct time calculation is not really easy. For a (possible future) implementation of the timegm function in RTEMS, I would try to use the one from freebsd: https://github.com/freebsd/freebsd/blob/master/contrib/tzcode/stdtime/localtime.c#L2136
The helper functions that are used in FreeBSD (time1 and time2) are a bit more complex than the ones in musl. But I would expect that they can handle most cases.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/298#issuecomment-213078466,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"The advantage of musl is the MIT license. Thus, it would be possible to copy the musl code here.
The FreeBSD code has at least some parts with 4-clause BSD license (https://github.com/freebsd/freebsd/blob/master/COPYRIGHT#L39) - this can not be added here.
So if the FreeBSD implementation is used, civetweb would just leave an undefined reference, and it is up to the user to link it with a proper implementation.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,7,https://github.com/civetweb/civetweb/pull/298#issuecomment-214731060,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"Sorry for not answering earlier. I'm a little busy right now.
As far as I can tell, the FreeBSD-code is based on an older version of the IANA time zone database (http://www.iana.org/time-zones/repository/releases/tzcode2016d.tar.gz). This code is (with three exceptions) public domain according to the LICENSE file packed into the zip. Eventually this could be a better alternative to the less exact musl?
On the other hand, the ""localtime.c"" in this package has 2271 lines of code. So it's not really the smallest package. What do you think?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/298#issuecomment-215206705,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"I think my preferred implementation is this one:
time_t sec_since_epoch[69][12] =
{0, 2678400, 5097600, 7776000, 10368000, 13046400, 15638400, 18316800, 20995200, 23587200, 26265600, 28857600},
{31536000, 34214400, 36633600, 39312000, 41904000, 44582400, 47174400, 49852800, 52531200, 55123200, 57801600, 60393600},
{63072000, 65750400, 68256000, 70934400, 73526400, 76204800, 78796800, 81475200, 84153600, 86745600, 89424000, 92016000},
{94694400, 97372800, 99792000, 102470400, 105062400, 107740800, 110332800, 113011200, 115689600, 118281600, 120960000, 123552000},
{126230400, 128908800, 131328000, 134006400, 136598400, 139276800, 141868800, 144547200, 147225600, 149817600, 152496000, 155088000},
{157766400, 160444800, 162864000, 165542400, 168134400, 170812800, 173404800, 176083200, 178761600, 181353600, 184032000, 186624000},
{189302400, 191980800, 194486400, 197164800, 199756800, 202435200, 205027200, 207705600, 210384000, 212976000, 215654400, 218246400},
{220924800, 223603200, 226022400, 228700800, 231292800, 233971200, 236563200, 239241600, 241920000, 244512000, 247190400, 249782400},
{252460800, 255139200, 257558400, 260236800, 262828800, 265507200, 268099200, 270777600, 273456000, 276048000, 278726400, 281318400},
{283996800, 286675200, 289094400, 291772800, 294364800, 297043200, 299635200, 302313600, 304992000, 307584000, 310262400, 312854400},
{315532800, 318211200, 320716800, 323395200, 325987200, 328665600, 331257600, 333936000, 336614400, 339206400, 341884800, 344476800},
{347155200, 349833600, 352252800, 354931200, 357523200, 360201600, 362793600, 365472000, 368150400, 370742400, 373420800, 376012800},
{378691200, 381369600, 383788800, 386467200, 389059200, 391737600, 394329600, 397008000, 399686400, 402278400, 404956800, 407548800},
{410227200, 412905600, 415324800, 418003200, 420595200, 423273600, 425865600, 428544000, 431222400, 433814400, 436492800, 439084800},
{441763200, 444441600, 446947200, 449625600, 452217600, 454896000, 457488000, 460166400, 462844800, 465436800, 468115200, 470707200},
{473385600, 476064000, 478483200, 481161600, 483753600, 486432000, 489024000, 491702400, 494380800, 496972800, 499651200, 502243200},
{504921600, 507600000, 510019200, 512697600, 515289600, 517968000, 520560000, 523238400, 525916800, 528508800, 531187200, 533779200},
{536457600, 539136000, 541555200, 544233600, 546825600, 549504000, 552096000, 554774400, 557452800, 560044800, 562723200, 565315200},
{567993600, 570672000, 573177600, 575856000, 578448000, 581126400, 583718400, 586396800, 589075200, 591667200, 594345600, 596937600},
{599616000, 602294400, 604713600, 607392000, 609984000, 612662400, 615254400, 617932800, 620611200, 623203200, 625881600, 628473600},
{631152000, 633830400, 636249600, 638928000, 641520000, 644198400, 646790400, 649468800, 652147200, 654739200, 657417600, 660009600},
{662688000, 665366400, 667785600, 670464000, 673056000, 675734400, 678326400, 681004800, 683683200, 686275200, 688953600, 691545600},
{694224000, 696902400, 699408000, 702086400, 704678400, 707356800, 709948800, 712627200, 715305600, 717897600, 720576000, 723168000},
{725846400, 728524800, 730944000, 733622400, 736214400, 738892800, 741484800, 744163200, 746841600, 749433600, 752112000, 754704000},
{757382400, 760060800, 762480000, 765158400, 767750400, 770428800, 773020800, 775699200, 778377600, 780969600, 783648000, 786240000},
{788918400, 791596800, 794016000, 796694400, 799286400, 801964800, 804556800, 807235200, 809913600, 812505600, 815184000, 817776000},
{820454400, 823132800, 825638400, 828316800, 830908800, 833587200, 836179200, 838857600, 841536000, 844128000, 846806400, 849398400},
{852076800, 854755200, 857174400, 859852800, 862444800, 865123200, 867715200, 870393600, 873072000, 875664000, 878342400, 880934400},
{883612800, 886291200, 888710400, 891388800, 893980800, 896659200, 899251200, 901929600, 904608000, 907200000, 909878400, 912470400},
{915148800, 917827200, 920246400, 922924800, 925516800, 928195200, 930787200, 933465600, 936144000, 938736000, 941414400, 944006400},
{946684800, 949363200, 951868800, 954547200, 957139200, 959817600, 962409600, 965088000, 967766400, 970358400, 973036800, 975628800},
{978307200, 980985600, 983404800, 986083200, 988675200, 991353600, 993945600, 996624000, 999302400, 1001894400, 1004572800, 1007164800},
{1009843200, 1012521600, 1014940800, 1017619200, 1020211200, 1022889600, 1025481600, 1028160000, 1030838400, 1033430400, 1036108800, 1038700800},
{1041379200, 1044057600, 1046476800, 1049155200, 1051747200, 1054425600, 1057017600, 1059696000, 1062374400, 1064966400, 1067644800, 1070236800},
{1072915200, 1075593600, 1078099200, 1080777600, 1083369600, 1086048000, 1088640000, 1091318400, 1093996800, 1096588800, 1099267200, 1101859200},
{1104537600, 1107216000, 1109635200, 1112313600, 1114905600, 1117584000, 1120176000, 1122854400, 1125532800, 1128124800, 1130803200, 1133395200},
{1136073600, 1138752000, 1141171200, 1143849600, 1146441600, 1149120000, 1151712000, 1154390400, 1157068800, 1159660800, 1162339200, 1164931200},
{1167609600, 1170288000, 1172707200, 1175385600, 1177977600, 1180656000, 1183248000, 1185926400, 1188604800, 1191196800, 1193875200, 1196467200},
{1199145600, 1201824000, 1204329600, 1207008000, 1209600000, 1212278400, 1214870400, 1217548800, 1220227200, 1222819200, 1225497600, 1228089600},
{1230768000, 1233446400, 1235865600, 1238544000, 1241136000, 1243814400, 1246406400, 1249084800, 1251763200, 1254355200, 1257033600, 1259625600},
{1262304000, 1264982400, 1267401600, 1270080000, 1272672000, 1275350400, 1277942400, 1280620800, 1283299200, 1285891200, 1288569600, 1291161600},
{1293840000, 1296518400, 1298937600, 1301616000, 1304208000, 1306886400, 1309478400, 1312156800, 1314835200, 1317427200, 1320105600, 1322697600},
{1325376000, 1328054400, 1330560000, 1333238400, 1335830400, 1338508800, 1341100800, 1343779200, 1346457600, 1349049600, 1351728000, 1354320000},
{1356998400, 1359676800, 1362096000, 1364774400, 1367366400, 1370044800, 1372636800, 1375315200, 1377993600, 1380585600, 1383264000, 1385856000},
{1388534400, 1391212800, 1393632000, 1396310400, 1398902400, 1401580800, 1404172800, 1406851200, 1409529600, 1412121600, 1414800000, 1417392000},
{1420070400, 1422748800, 1425168000, 1427846400, 1430438400, 1433116800, 1435708800, 1438387200, 1441065600, 1443657600, 1446336000, 1448928000},
{1451606400, 1454284800, 1456790400, 1459468800, 1462060800, 1464739200, 1467331200, 1470009600, 1472688000, 1475280000, 1477958400, 1480550400},
{1483228800, 1485907200, 1488326400, 1491004800, 1493596800, 1496275200, 1498867200, 1501545600, 1504224000, 1506816000, 1509494400, 1512086400},
{1514764800, 1517443200, 1519862400, 1522540800, 1525132800, 1527811200, 1530403200, 1533081600, 1535760000, 1538352000, 1541030400, 1543622400},
{1546300800, 1548979200, 1551398400, 1554076800, 1556668800, 1559347200, 1561939200, 1564617600, 1567296000, 1569888000, 1572566400, 1575158400},
{1577836800, 1580515200, 1583020800, 1585699200, 1588291200, 1590969600, 1593561600, 1596240000, 1598918400, 1601510400, 1604188800, 1606780800},
{1609459200, 1612137600, 1614556800, 1617235200, 1619827200, 1622505600, 1625097600, 1627776000, 1630454400, 1633046400, 1635724800, 1638316800},
{1640995200, 1643673600, 1646092800, 1648771200, 1651363200, 1654041600, 1656633600, 1659312000, 1661990400, 1664582400, 1667260800, 1669852800},
{1672531200, 1675209600, 1677628800, 1680307200, 1682899200, 1685577600, 1688169600, 1690848000, 1693526400, 1696118400, 1698796800, 1701388800},
{1704067200, 1706745600, 1709251200, 1711929600, 1714521600, 1717200000, 1719792000, 1722470400, 1725148800, 1727740800, 1730419200, 1733011200},
{1735689600, 1738368000, 1740787200, 1743465600, 1746057600, 1748736000, 1751328000, 1754006400, 1756684800, 1759276800, 1761955200, 1764547200},
{1767225600, 1769904000, 1772323200, 1775001600, 1777593600, 1780272000, 1782864000, 1785542400, 1788220800, 1790812800, 1793491200, 1796083200},
{1798761600, 1801440000, 1803859200, 1806537600, 1809129600, 1811808000, 1814400000, 1817078400, 1819756800, 1822348800, 1825027200, 1827619200},
{1830297600, 1832976000, 1835481600, 1838160000, 1840752000, 1843430400, 1846022400, 1848700800, 1851379200, 1853971200, 1856649600, 1859241600},
{1861920000, 1864598400, 1867017600, 1869696000, 1872288000, 1874966400, 1877558400, 1880236800, 1882915200, 1885507200, 1888185600, 1890777600},
{1893456000, 1896134400, 1898553600, 1901232000, 1903824000, 1906502400, 1909094400, 1911772800, 1914451200, 1917043200, 1919721600, 1922313600},
{1924992000, 1927670400, 1930089600, 1932768000, 1935360000, 1938038400, 1940630400, 1943308800, 1945987200, 1948579200, 1951257600, 1953849600},
{1956528000, 1959206400, 1961712000, 1964390400, 1966982400, 1969660800, 1972252800, 1974931200, 1977609600, 1980201600, 1982880000, 1985472000},
{1988150400, 1990828800, 1993248000, 1995926400, 1998518400, 2001196800, 2003788800, 2006467200, 2009145600, 2011737600, 2014416000, 2017008000},
{2019686400, 2022364800, 2024784000, 2027462400, 2030054400, 2032732800, 2035324800, 2038003200, 2040681600, 2043273600, 2045952000, 2048544000},
{2051222400, 2053900800, 2056320000, 2058998400, 2061590400, 2064268800, 2066860800, 2069539200, 2072217600, 2074809600, 2077488000, 2080080000},
{2082758400, 2085436800, 2087942400, 2090620800, 2093212800, 2095891200, 2098483200, 2101161600, 2103840000, 2106432000, 2109110400, 2111702400},
{2114380800, 2117059200, 2119478400, 2122156800, 2124748800, 2127427200, 2130019200, 2132697600, 2135376000, 2137968000, 2140646400, 2143238400}
};

return sec_since_epoch[tm_year-70][tm_mon] + (tm_mday-1)*24*60*60 + tm_hour*60*60 + tm_min*60 + tm_sec

This is a table of the seconds since epoch of the first of every month from 1970 to 2038 (could be more if sizeof(time_t)>4). The table is calculated on a PC with an exact timegm (_mkgmtime) implementation. The embedded system does not need any complex algorithm with a lot of exceptions like leap years anymore, just 3kB of data and a short formula.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,9,https://github.com/civetweb/civetweb/pull/298#issuecomment-215325760,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"This implementation is definitely fast and easy to read. So it might be a good starting point. I'm not sure if a calculation wouldn't be smaller in code size but let's just ignore that. By the way: The table you posted currently does not handle leap seconds. But it should be able to do it in an approximation. It can be correct at the beginning of each month.
A bigger problem could be the end year: Some embedded systems run quite a while (for example industrial controlling systems or satellites) so 2038 doesn't seem that far. I don't think, that it is a problem if the system isn't accurate after a given year but it mustn't crash. So checking the indices for a limit would be necessary. Another start year for getting accurate times for some more years in the future could be worth a thought too. I would expect that the past isn't that relevant.
So if you are OK with it, I would try to write a solution along the following (just a concept. I would align it with your coding style):
#define START_YEAR 116
#define NR_OF_YEARS 100
#define MONTHS_PER_YEAR 12
time_t sec_since_epoch[NR_OF_YEARS][MONTHS_PER_YEAR] = {
    /* fill in a (generated?) list with first seconds of the months */
}

if(tm_year < START_YEAR || tm_year >= START_YEAR + NR_OF_YEARS) {
    /* Return an approximation. */
    return tm_sec + tm_min*60 + tm_hour*3600 + tm_yday*86400 +
        (tm_year-70)*31536000 + ((tm_year-69)/4)*86400 -
        ((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;
} else {
    return sec_since_epoch[tm_year-START_YEAR][tm_mon] + (tm_mday-1)*24*60*60 + tm_hour*60*60 + tm_min*60 + tm_sec;
}

I would have to put some more thoughts in it and might check the month index too.
I took the approximation from http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_15
The formula should be to short and obvious to have any copyright. Anyway, the copyright should be compatible too: http://pubs.opengroup.org/onlinepubs/9699919799/frontmatter/notice.html",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,10,https://github.com/civetweb/civetweb/pull/298#issuecomment-215566636,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"A bigger problem could be the end year: Some embedded systems run quite a while (for example industrial controlling systems or satellites) so 2038 doesn't seem that far.

I know.
But 2038 is the limit for a 32 bit time_t with 1970-01-01 = 0, just like usual for most systems.
This is not a specific civetweb limitation but the Y2038 bug.
You have to use a 64 bit time_t in order to use dates after 2038 (this is what all desktop systems do).
Otherwise you have to either use a different epoch, e.g. 2016-01-01 = 0, or define time_t as unsigned. Both would mean you have to get a special C library.

Another start year for getting accurate times for some more years in the future could be worth a thought too. I would expect that the past isn't that relevant.

That's exactly what I meant with shifting the epoch.
But I think you have to replace all standard C functions working with a time_t data type in order to get this working. Changing only timegm() to use a different time_t will cause some problems with time(), gmtime(), localtime(), mktime(), ... all functions have to work with the same definition of time_t. If you re-implement one of them, you have to re-implement all of them.

So if you are OK with it, I would try to write a solution along the following

As stated above, I think shifting the epoch will require to exchange several other C standard library functions as well. I might be wrong, but if I'm right, we need to find a different solution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,11,https://github.com/civetweb/civetweb/pull/298#issuecomment-215571363,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"The formula from The Open Group uses tm_yday:
    return tm_sec + tm_min*60 + tm_hour*3600 + tm_yday*86400 +
        (tm_year-70)*31536000 + ((tm_year-69)/4)*86400 -
        ((tm_year-1)/100)*86400 + ((tm_year+299)/400)*86400;

The way we use timegm, we know tm_mon and tm_mday, but not tm_yday. So tm_yday has to be calculated first.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,12,https://github.com/civetweb/civetweb/pull/298#issuecomment-215644676,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"I'm aware where the 2038 problem comes from. I thought more along the line of splitting the table depending on the size of time_t. On a system with a 64Bit time_t, the table would reach beyond 2038. On all other systems, it would just stop there and maybe issue a warning. This should be possible with preprocessor directives.
I agree that shifting the epoche wouldn't be a good idea. If we would take systems with a shifted epoche in account, we would get a problem with any calculation outside of the c library. So every patch that provides a timegm() has to assume a ""standard"" time_t representation as seconds since 1970. At least I wouldn't know another way.
I thought more along the way of cutting of the first part of the table to save memory.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,13,https://github.com/civetweb/civetweb/pull/298#issuecomment-215896484,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"By the way: The table you posted currently does not handle leap seconds.

Interesting. Then the script I used does not know leap seconds. I did not check this in advance, since I posted it here only as a concept.
Leap seconds are one of the reasons why I wanted to use a table.
It seems leap seconds are often avoided or implemented differently on purpose: Some servers do not do a leap second, but for one day every second takes 1.000011574 seconds, some bank servers move the leap second to maintenance phases on bank holidays, ...
But since leap seconds are not known in advance (according to Wikipedia they are announced only six month in advance), one can not build a table for several years into the future.

I thought more along the way of cutting of the first part of the table to save memory.

If leap seconds can not be calculated in advance, probably a table with the seconds for every first of March would do. But without leap seconds, that's not too hard to calculate either.
If leap seconds are not known in advance, a system without regular updates every some months and/or an external time server will not be able to take leap seconds into account.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,14,https://github.com/civetweb/civetweb/pull/298#issuecomment-215949171,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"Sound like the problem with leap seconds can't be easily solved. So falling back to the solution from musl like you suggested at the beginning would be a good solution.
If you want, I can write the patch. From the current code style I would expect that the code should go in an .inl? I wouldn't touch the coding style of the musl source so that a future update is simpler to integrate. Is that OK for you?
And having to few experience with github: Is there a way to just update this pull-request or would I have to close it and create a new one?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,15,https://github.com/civetweb/civetweb/pull/298#issuecomment-216288554,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"After some discussion we came to the conclusion that it is not really wise to implement timegm in the civetweb source. Leap seconds are one of the reasons it should be avoided. If you do have a C runtime that does implement leap seconds in gmtime but you do not implement it in timegm, you run in troubles. The same is true if your C runtime does not implement leap seconds (it seems msvcrt does not), but you do implement it in timegm - whatever you do, it will be wrong for 50% of the systems.
If x != timegm(gmtime(x)), unchanged files might be considered as changed or changed files as unchanged - nobody knows for sure what happens, and bugs will probably be not reproducible.
You need to have a timegm implementation, that does exactly fit the gmtime of your C runtime.
Since I do not know every C runtime, and the C runtimes behave differently on different systems, this problem can not be solved in CivetWeb.
It is also not known in advance when leap seconds are going to happen in ~20 years (whatever the lifetime of your embedded system is supposed to be). For Linux, leap seconds can be included by Linux system updated. You would have to make sure a Linux system update would also update a timegm implementation. Ok, ...Linux has a timegm function. But this similar update scenario also has to be considered for your embedded system. And even if you find a scenario for your system, it needs to work for all other (embedded) system using civetweb as well.
The only solution to implement a missing y = timegm(x) would be to call gmtime(y) iteratively with varying y, until you get x (iteratively solve the inverse problem). This is stable with respect to leap seconds, but its far from efficient.
I think CivetWeb has to rely on timegm being implemented externally.
If it does not exist in the C runtime, the system integrator should provide an implementation and link with it. This implementation could be from musl, from BSD or from elsewhere. It could even be an implementation with a proprietary license or with GPL, since it is not a part of civetweb (CivetWeb needs to retain a pure MIT license) - it's up to the system integrator to choose an implementation which matches his C runtime and his license requirements.
This problem is much easier to solve for a special system, as compared to implementing a general solution for all C runtimes and the strict license requirement we have here.
With this insight, I could merge your initial pull request (adding #if !defined(NO_TIMEGM)).
But I do recommend you add your own timegm implementation and just link with it.
I think, you do not even need to change anything in the source code (civetweb.c+.h), since the linker will take care if the timegm function is implemented as non-static function in another .c file. If this works as expected, it is the most flexible solution. If it does not work out of the box, there are probably just some minor adaptations in order to get it working, and they could certainly be added with some defines in civetweb.c. I did not test it, but anyway it makes more sense if you test it for your environment.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,16,https://github.com/civetweb/civetweb/pull/298#issuecomment-216314785,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"I've no problem with not adding a timegm(). My initial solution disabled this feature anyway.
Adding a timegm() to the application might be a solution but it would lead to the same problem that you described. It has to match the library version. Of course I could just return the maximum value for timegm and disable the caching feature with this. But this would have the character of a hack. Further it could lead to problems if another part of the software tries something similar and uses another implementation for timegm().
So from my point of view a compile time option would be a better solution.
Please note: In the mean time, i noted a bug in the patch (the is_not_modified() function should return an integer and not ""false"") so I will have to rework the patch. But It would be nice, if an updated version could be integrated.
I will update the patch shortly. It might be a better idea to rename the define to NO_CACHING to better define the result. I'll do that too.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,17,https://github.com/civetweb/civetweb/pull/298#issuecomment-216333174,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"Adding a timegm() to the application might be a solution but it would lead to the same problem that you described.

It would be easier to do it as a system specific file added to the build, because you do not need a generic, system independent solution, but you can create a system dependent table.
Anyway, let's add the NO_CACHING option. If you add a configuration to the .travis.yml file, the continuous integration (CI) test will also run automatically - I would just use the configuration with all features set, and set the NO_CACHING option. Or I can do this later, if you prefer.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,18,https://github.com/civetweb/civetweb/pull/298#issuecomment-216337164,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,I added a patch to add it to .travis.yml. I've never worked with Travis so please correct me if I did it wrong.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,19,https://github.com/civetweb/civetweb/pull/298#issuecomment-216342295,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"The CI test is running - https://travis-ci.org/civetweb/civetweb/builds/127313868
- FEATURES=32 will probably not work. FEATURES is a bit mask calculated here: https://github.com/civetweb/civetweb/blob/master/src/civetweb.c#L13021
Since NO_CACHING does not have a feature bit yet, it must be 31.
But let's just wait for the CI test to finish, I can take care of it later.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,20,https://github.com/civetweb/civetweb/pull/298#issuecomment-216343320,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"I wondered what the FEATURES would be for. It looked like a counter that is just counted up. So I just used the next value.
If you want I can change that before the merge so the merge commit is a clean one.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,21,https://github.com/civetweb/civetweb/pull/298#issuecomment-216642716,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"Only the FEATURES=32 tests failed.
If you could set the FEATURES value properly, it would be a clean commit.
Probably I will add a FEATURES flag for cache later anyway, but this can be done by me later.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,22,https://github.com/civetweb/civetweb/pull/298#issuecomment-216644677,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,I changed it to 31 like you suggested. Thank you for all your work guiding me through this.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,23,https://github.com/civetweb/civetweb/pull/298#issuecomment-216654901,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"It seems there is an additional problem:
https://travis-ci.org/civetweb/civetweb/jobs/127613387

415Scanning dependencies of target sqlite
416[  1%] Performing patch step for 'sqlite'
417Error copying file ""/home/travis/build/civetweb/civetweb/src/cmake/sqlite/CMakeLists.txt"" to ""/home/travis/third-party/src/sqlite/CMakeLists.txt"".
418make[2]: *** [/home/travis/third-party/src/sqlite-stamp/sqlite-patch] Error 1

I don't see a reason why it should need sqlite ...
the real problem is here:
ENABLE_LUA=YES
ENABLE_DUKTAPE=YES
Lua does not build in TravisCI currently - the integration of third party components into the CMake build has not been made yet.
I will have a look to the .travis.yml in more detail.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,24,https://github.com/civetweb/civetweb/pull/298#issuecomment-216655988,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"This part is ok:
583 645        - FEATURES=31  
584 646          BUILD_SHARED=NO  
585 647          NO_FILES=NO  
586 648        ENABLE_SSL=YES 
587 649        NO_CGI=NO 
588 650        ENABLE_IPV6=YES 
589 651          ENABLE_WEBSOCKETS=YES  
590 652          ENABLE_LUA=NO  
591 653          ENABLE_DUKTAPE=NO  
 654   +      NO_CACHING=NO  
592 655        - FEATURES=31  
593 656          BUILD_SHARED=YES  
594 657          NO_FILES=NO  
595 658        ENABLE_SSL=YES 
596 659        NO_CGI=NO 
597 660        ENABLE_IPV6=YES 
598 661          ENABLE_WEBSOCKETS=YES  
599 662          ENABLE_LUA=NO  
600 663          ENABLE_DUKTAPE=NO  
 664   +      NO_CACHING=NO  

Then it should be
 665   +    - FEATURES=31  
 666   +      BUILD_SHARED=NO <-------------  
 667   +      NO_FILES=NO  
 668   +      ENABLE_SSL=YES  
 669   +      NO_CGI=NO  
 670   +      ENABLE_IPV6=YES  
 671   +      ENABLE_WEBSOCKETS=YES  
 672   +      ENABLE_LUA=NO <------------------  
 673   +      ENABLE_DUKTAPE=NO <-----------  
 674   +      NO_CACHING=YES <-------------
 675   +    - FEATURES=31  
 676   +      BUILD_SHARED=YES  
 677   +      NO_FILES=NO  
 678   +      ENABLE_SSL=YES  
 679   +      NO_CGI=NO  
 680   +      ENABLE_IPV6=YES  
 681   +      ENABLE_WEBSOCKETS=YES  
 682   +      ENABLE_LUA=NO  <--------------  
 683   +      ENABLE_DUKTAPE=NO  <---------  
 684   +      NO_CACHING=YES",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,25,https://github.com/civetweb/civetweb/pull/298#issuecomment-216969404,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"I would have been surprised, if the test cases from line 645 to 664 would have been wrong. I haven't written them ;-)
For the other cases: It seems that I have misinterpreted the two test cases for every feature set. I thought that it is a base set (with a useful feature combination) and than the tested feature one time disabled and one time enabled. Now I see that you dis- / enabled the BUILD_SHARED for each feature.
I adapted the patch like you suggested and added it to my pull request. I hope that this time Travis is happy with it.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,26,https://github.com/civetweb/civetweb/pull/298#issuecomment-216987225,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"Still not working: https://travis-ci.org/civetweb/civetweb/jobs/127875643
/home/travis/build/civetweb/civetweb/test/private.c: In function ‘test_parse_date_string’:

/home/travis/build/civetweb/civetweb/test/private.c:544:2: error: implicit declaration of function ‘parse_date_string’ [-Wimplicit-function-declaration]

/home/travis/build/civetweb/civetweb/test/private.c:560:10: error: ‘month_names’ undeclared (first use in this function)

/home/travis/build/civetweb/civetweb/test/private.c:560:10: note: each undeclared identifier is reported only once for each function it appears in",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,27,https://github.com/civetweb/civetweb/pull/298#issuecomment-216988567,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"Yes. Already noted it. I just tested to build with the Makefile and that worked fine. I could reproduce the bug with cmake on my local system.
It seems that there is one test that checks if the test_parse_date_string is working. I disabled this function so of course it's not. I will analyze the test and find out, if I can modify it.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,28,https://github.com/civetweb/civetweb/pull/298#issuecomment-216989607,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"It needs an
#if !defined(NO_CACHING)

from
https://github.com/civetweb/civetweb/blob/master/test/private.c#L539
to
https://github.com/civetweb/civetweb/blob/master/test/private.c#L583",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,29,https://github.com/civetweb/civetweb/pull/298#issuecomment-216994449,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,I've added the two lines. I just had to take another look because some other tests went wrong too and I wanted to avoid to annoy Travis (and probably you too) once again. But it turned out that the other test just didn't find the SSL certificates because I started the test from the wrong directory.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,30,https://github.com/civetweb/civetweb/pull/298#issuecomment-217093695,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,Travis is happy now. But it seems that I decreased the coverage. Probably by adding some additional lines to the code? I wouldn't be sure how I should test the new lines. I more or less just added some #ifdefs.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/bel2125,31,https://github.com/civetweb/civetweb/pull/298#issuecomment-217197723,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,"Don't worry if the test coverage decreasing by less than a percent if you add a few lines.
The pull request can be merged now.
Thank you for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,298,2016-04-20T10:47:29Z,2016-05-05T16:11:43Z,2016-05-05T17:04:28Z,MERGED,True,112,2,6,https://github.com/c-mauderer,Add option for building civetweb without timegm().,6,[],https://github.com/civetweb/civetweb/pull/298,https://github.com/c-mauderer,32,https://github.com/civetweb/civetweb/pull/298#issuecomment-217211289,Using the NO_TIMEGM option disables the caching feature. Civetweb will not be able to detect a unchanged file. On the other hand it allows to build civetweb on systems that don't implement timegm().,Great. Thank you.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,300,2016-04-21T23:21:01Z,2016-04-22T17:29:27Z,2016-05-15T22:47:36Z,MERGED,True,6,2,1,https://github.com/kainjow,"Fix ""argument unused during compilation""",1,[],https://github.com/civetweb/civetweb/pull/300,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/300,"Apparently -mwindows flag doesn't produce an error for the way the current CMake code checks, so the flag gets added on OS X (Clang) but then this produces a warning during compilation.","Apparently -mwindows flag doesn't produce an error for the way the current CMake code checks, so the flag gets added on OS X (Clang) but then this produces a warning during compilation.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,300,2016-04-21T23:21:01Z,2016-04-22T17:29:27Z,2016-05-15T22:47:36Z,MERGED,True,6,2,1,https://github.com/kainjow,"Fix ""argument unused during compilation""",1,[],https://github.com/civetweb/civetweb/pull/300,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/300#issuecomment-213440179,"Apparently -mwindows flag doesn't produce an error for the way the current CMake code checks, so the flag gets added on OS X (Clang) but then this produces a warning during compilation.","I'm sorry, I don't get the description:
MinGW does not produce a warning where it should, or OSX produces a warning where it should not?
Anyway, I am sure you know what you are doing with OSX and CMake, so I will merge it.
Still I would like to understand the problem for this fix.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,300,2016-04-21T23:21:01Z,2016-04-22T17:29:27Z,2016-05-15T22:47:36Z,MERGED,True,6,2,1,https://github.com/kainjow,"Fix ""argument unused during compilation""",1,[],https://github.com/civetweb/civetweb/pull/300,https://github.com/kainjow,3,https://github.com/civetweb/civetweb/pull/300#issuecomment-213491947,"Apparently -mwindows flag doesn't produce an error for the way the current CMake code checks, so the flag gets added on OS X (Clang) but then this produces a warning during compilation.","Those flags in the CMakeLists.txt file are added only if they're recognized by the compiler, but the -mwindows flag apparently passes for Clang on OS X, so it gets used, but when compiling it generates a warning. I wonder if -Werror or /WX should be used for testing the flags to catch this, but then that requires testing for those flags too, unless you can assume if not MSVC -Werror is supported. Either way, I think just limiting to MINGW should be good enough, as that I think is the only case where this flag is actually needed.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,300,2016-04-21T23:21:01Z,2016-04-22T17:29:27Z,2016-05-15T22:47:36Z,MERGED,True,6,2,1,https://github.com/kainjow,"Fix ""argument unused during compilation""",1,[],https://github.com/civetweb/civetweb/pull/300,https://github.com/kainjow,4,https://github.com/civetweb/civetweb/pull/300#issuecomment-213493875,"Apparently -mwindows flag doesn't produce an error for the way the current CMake code checks, so the flag gets added on OS X (Clang) but then this produces a warning during compilation.","FWIW, -Weverything is where most of these warnings come from (I don't use that in any projects), but most of them are good, and show code paths that should be corrected.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,301,2016-04-21T23:28:03Z,2016-05-15T23:05:14Z,2016-05-16T07:00:41Z,CLOSED,False,1390,253,27,https://github.com/kainjow,"Don't link libraries directly, only the executable.",62,[],https://github.com/civetweb/civetweb/pull/301,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/301,This fixes excessive warnings resulting in a failed build when using Xcode generator on OS X.,This fixes excessive warnings resulting in a failed build when using Xcode generator on OS X.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,301,2016-04-21T23:28:03Z,2016-05-15T23:05:14Z,2016-05-16T07:00:41Z,CLOSED,False,1390,253,27,https://github.com/kainjow,"Don't link libraries directly, only the executable.",62,[],https://github.com/civetweb/civetweb/pull/301,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/301#issuecomment-213440970,This fixes excessive warnings resulting in a failed build when using Xcode generator on OS X.,"In this case, 50% of the gcc builds fail, while it seems OK for clang:
https://travis-ci.org/civetweb/civetweb/builds/124894319
There seems to be some problem with the dl library now:
https://travis-ci.org/civetweb/civetweb/jobs/124894324#L447",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,301,2016-04-21T23:28:03Z,2016-05-15T23:05:14Z,2016-05-16T07:00:41Z,CLOSED,False,1390,253,27,https://github.com/kainjow,"Don't link libraries directly, only the executable.",62,[],https://github.com/civetweb/civetweb/pull/301,https://github.com/kainjow,3,https://github.com/civetweb/civetweb/pull/301#issuecomment-213494571,This fixes excessive warnings resulting in a failed build when using Xcode generator on OS X.,"Interesting. Ok, I'll look at this again.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,301,2016-04-21T23:28:03Z,2016-05-15T23:05:14Z,2016-05-16T07:00:41Z,CLOSED,False,1390,253,27,https://github.com/kainjow,"Don't link libraries directly, only the executable.",62,[],https://github.com/civetweb/civetweb/pull/301,https://github.com/kainjow,4,https://github.com/civetweb/civetweb/pull/301#issuecomment-213495051,This fixes excessive warnings resulting in a failed build when using Xcode generator on OS X.,"Looks like the GCC ENABLE_SSL=YES ones are failing, which makes sense since they load the lib dynamically.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,301,2016-04-21T23:28:03Z,2016-05-15T23:05:14Z,2016-05-16T07:00:41Z,CLOSED,False,1390,253,27,https://github.com/kainjow,"Don't link libraries directly, only the executable.",62,[],https://github.com/civetweb/civetweb/pull/301,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/301#issuecomment-217201496,This fixes excessive warnings resulting in a failed build when using Xcode generator on OS X.,"How should we continue here:
If the 'target_linked_library' lines are removed, the builds with OpenSSL libraries fail, otherwise they work.
I don't know the ""Xcode generator on OS X"" problem, since I neither know Xcode nor have an OSX system to test, but I can not merge this commit if the OpenSSL builds/tests on Travis fail.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,301,2016-04-21T23:28:03Z,2016-05-15T23:05:14Z,2016-05-16T07:00:41Z,CLOSED,False,1390,253,27,https://github.com/kainjow,"Don't link libraries directly, only the executable.",62,[],https://github.com/civetweb/civetweb/pull/301,https://github.com/kainjow,6,https://github.com/civetweb/civetweb/pull/301#issuecomment-219317461,This fixes excessive warnings resulting in a failed build when using Xcode generator on OS X.,"I borked the rebase of this branch. I want to get a better understanding of the error, so I will just abandon this for now and look into it later.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,303,2016-04-26T07:26:13Z,2016-04-27T05:23:21Z,2016-04-27T07:55:31Z,MERGED,True,2,2,2,https://github.com/flyd1005,doc: fix typos,1,[],https://github.com/civetweb/civetweb/pull/303,https://github.com/flyd1005,1,https://github.com/civetweb/civetweb/pull/303,Signed-off-by: Li Peng lip@dtdream.com,Signed-off-by: Li Peng lip@dtdream.com,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,303,2016-04-26T07:26:13Z,2016-04-27T05:23:21Z,2016-04-27T07:55:31Z,MERGED,True,2,2,2,https://github.com/flyd1005,doc: fix typos,1,[],https://github.com/civetweb/civetweb/pull/303,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/303#issuecomment-214973523,Signed-off-by: Li Peng lip@dtdream.com,"Thanks for the fix.
src/third_party/sqlite3.c is not developed here, but in the SQLite project. If it is not fixed in the original repository as well, the typo might come back again when sqlite is updated here.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,303,2016-04-26T07:26:13Z,2016-04-27T05:23:21Z,2016-04-27T07:55:31Z,MERGED,True,2,2,2,https://github.com/flyd1005,doc: fix typos,1,[],https://github.com/civetweb/civetweb/pull/303,https://github.com/flyd1005,3,https://github.com/civetweb/civetweb/pull/303#issuecomment-214999366,Signed-off-by: Li Peng lip@dtdream.com,OK. I informed SQLite maintainer drh@hwaci.com.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,304,2016-05-03T13:13:07Z,2016-05-04T19:22:17Z,2016-05-04T19:23:10Z,MERGED,True,10,0,2,https://github.com/jdetaeye,Adding a callback that is called when a new worker thread is initialized,2,[],https://github.com/civetweb/civetweb/pull/304,https://github.com/jdetaeye,1,https://github.com/civetweb/civetweb/pull/304,"My application embeds a Python interpreter. Python requires each thread to be initialized specifically for use with Python (see https://docs.python.org/3.5/c-api/init.html)
This pull request adds a new callback function that is called when a new worker thread is initialized.
See this dicussion on the google group.","My application embeds a Python interpreter. Python requires each thread to be initialized specifically for use with Python (see https://docs.python.org/3.5/c-api/init.html)
This pull request adds a new callback function that is called when a new worker thread is initialized.
See this dicussion on the google group.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,304,2016-05-03T13:13:07Z,2016-05-04T19:22:17Z,2016-05-04T19:23:10Z,MERGED,True,10,0,2,https://github.com/jdetaeye,Adding a callback that is called when a new worker thread is initialized,2,[],https://github.com/civetweb/civetweb/pull/304,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/304#issuecomment-216645882,"My application embeds a Python interpreter. Python requires each thread to be initialized specifically for use with Python (see https://docs.python.org/3.5/c-api/init.html)
This pull request adds a new callback function that is called when a new worker thread is initialized.
See this dicussion on the google group.","I agree to include this patch in principle.
Still I would do two changes:

the init_thread callback function should have one or two extra arguments. The first is for the thread type, e.g. 1 = worker thread. There are different thread types as well: the master thread, the timer thread, websocket client worker threads, threads created by the user using mg_start_thread. Even if we only add a callback for the worker thread in a first step, this argument should be available in order to add other thread types later. The second argument could be thread type specific extra information (void*) - I have to think about this. The problem is, adding an additional argument to the callback later is an incompatible change.
I would call the callback after setting thread name and tls

Do you want to change it? Or do you see reasons why this should not be made?
Otherwise I could also merge it and change it by myself.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,304,2016-05-03T13:13:07Z,2016-05-04T19:22:17Z,2016-05-04T19:23:10Z,MERGED,True,10,0,2,https://github.com/jdetaeye,Adding a callback that is called when a new worker thread is initialized,2,[],https://github.com/civetweb/civetweb/pull/304,https://github.com/jdetaeye,3,https://github.com/civetweb/civetweb/pull/304#issuecomment-216773028,"My application embeds a Python interpreter. Python requires each thread to be initialized specifically for use with Python (see https://docs.python.org/3.5/c-api/init.html)
This pull request adds a new callback function that is called when a new worker thread is initialized.
See this dicussion on the google group.","I updated the patch according to the feedback.
The void* argument wasn't added yet - leaving it your judgment.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,304,2016-05-03T13:13:07Z,2016-05-04T19:22:17Z,2016-05-04T19:23:10Z,MERGED,True,10,0,2,https://github.com/jdetaeye,Adding a callback that is called when a new worker thread is initialized,2,[],https://github.com/civetweb/civetweb/pull/304,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/304#issuecomment-216973167,"My application embeds a Python interpreter. Python requires each thread to be initialized specifically for use with Python (see https://docs.python.org/3.5/c-api/init.html)
This pull request adds a new callback function that is called when a new worker thread is initialized.
See this dicussion on the google group.",Thank you. Merged.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,305,2016-05-08T14:56:24Z,2016-05-08T19:24:33Z,2016-05-08T19:44:15Z,MERGED,True,9,7,1,https://github.com/colivi,fix unit tests build on linux,1,[],https://github.com/civetweb/civetweb/pull/305,https://github.com/colivi,1,https://github.com/civetweb/civetweb/pull/305,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,305,2016-05-08T14:56:24Z,2016-05-08T19:24:33Z,2016-05-08T19:44:15Z,MERGED,True,9,7,1,https://github.com/colivi,fix unit tests build on linux,1,[],https://github.com/civetweb/civetweb/pull/305,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/305#issuecomment-217740609,,"I will merge your commit, but did you see the note in the source:
 /* Note: The unit_test.c file is mostly obsolete, since the current unit
  * tests are performed by the CMake build framework based on the
  * CMakeList (https://github.com/civetweb/civetweb/blob/master/test/CMakeLists.txt).
  * The tests do no longer use unit_test.c but public_func.c, public_server.c,
  * private.c, private_exe.c and others.
  * This file is left here for reference and will be removed in the future.
  * It is no longer actively maintained.
  */

On the long term, you should use the new test sources. The old one will be removed sooner or later.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,305,2016-05-08T14:56:24Z,2016-05-08T19:24:33Z,2016-05-08T19:44:15Z,MERGED,True,9,7,1,https://github.com/colivi,fix unit tests build on linux,1,[],https://github.com/civetweb/civetweb/pull/305,https://github.com/colivi,3,https://github.com/civetweb/civetweb/pull/305#issuecomment-217741873,,"Oh thanks, I did not check it, I finally saw the build logs on one of the docker images.
Thanks for that and sorry!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,306,2016-05-19T14:19:48Z,2016-05-19T18:11:18Z,2016-05-23T14:22:09Z,MERGED,True,20,8,2,https://github.com/PhilLab,Automatically initialize mg_callbacks to NULL in constructor,1,[],https://github.com/civetweb/civetweb/pull/306,https://github.com/PhilLab,1,https://github.com/civetweb/civetweb/pull/306,Forgetting the memset when using the C++ constructor yields invalid pointers,Forgetting the memset when using the C++ constructor yields invalid pointers,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,308,2016-05-28T20:55:27Z,2016-05-29T08:00:09Z,2016-05-29T08:00:09Z,MERGED,True,3,3,1,https://github.com/kainjow,Fix typos in header,1,[],https://github.com/civetweb/civetweb/pull/308,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/308,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,309,2016-05-28T21:11:40Z,2016-05-29T08:01:15Z,2016-05-29T15:29:41Z,MERGED,True,2,0,1,https://github.com/kainjow,"Fix ""Macro name is a reserved identifier"" on OS X",1,[],https://github.com/civetweb/civetweb/pull/309,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/309,This also more accurately only sets these definitions for MSVC.,This also more accurately only sets these definitions for MSVC.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,310,2016-05-29T02:13:56Z,2016-05-29T08:01:47Z,2016-05-29T15:29:32Z,MERGED,True,6,0,1,https://github.com/kainjow,Fix warnings when building with NO_SSL_DL.,1,[],https://github.com/civetweb/civetweb/pull/310,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/310,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,311,2016-05-29T03:55:03Z,2016-05-29T18:04:11Z,2016-05-29T18:18:28Z,MERGED,True,3,0,1,https://github.com/kainjow,Add Lua to OS X app,1,[],https://github.com/civetweb/civetweb/pull/311,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/311,"I tested this by using the sample .lp script in the manual.
I also set resources/ssl_cert.pem as the ssl_certificate and confirmed SSL is working. So I imagine that's dynamically loading the OpenSSL library that is built-in to OS X, which is pretty old. Apple deprecated it a while ago and dropped the headers from the most recent SDK. Ideally, the OS X app should use the latest OpenSSL build and static compile it into the binary. I did get this working as a test, but it'd be more work to set it up for automation, as OpenSSL would need to be downloaded, and makedepend needs to be downloaded compiled as an OpenSSL build dependency as well. Then OpenSSL's Makefile needs to be modified to set the OS X minimum version to match what civetweb uses. If I ever get that functioning, we should increase the OS X minimum version so we don't need to build both for 32-bit and 64-bit (10.7 is 64-bit only).","I tested this by using the sample .lp script in the manual.
I also set resources/ssl_cert.pem as the ssl_certificate and confirmed SSL is working. So I imagine that's dynamically loading the OpenSSL library that is built-in to OS X, which is pretty old. Apple deprecated it a while ago and dropped the headers from the most recent SDK. Ideally, the OS X app should use the latest OpenSSL build and static compile it into the binary. I did get this working as a test, but it'd be more work to set it up for automation, as OpenSSL would need to be downloaded, and makedepend needs to be downloaded compiled as an OpenSSL build dependency as well. Then OpenSSL's Makefile needs to be modified to set the OS X minimum version to match what civetweb uses. If I ever get that functioning, we should increase the OS X minimum version so we don't need to build both for 32-bit and 64-bit (10.7 is 64-bit only).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,311,2016-05-29T03:55:03Z,2016-05-29T18:04:11Z,2016-05-29T18:18:28Z,MERGED,True,3,0,1,https://github.com/kainjow,Add Lua to OS X app,1,[],https://github.com/civetweb/civetweb/pull/311,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/311#issuecomment-222355265,"I tested this by using the sample .lp script in the manual.
I also set resources/ssl_cert.pem as the ssl_certificate and confirmed SSL is working. So I imagine that's dynamically loading the OpenSSL library that is built-in to OS X, which is pretty old. Apple deprecated it a while ago and dropped the headers from the most recent SDK. Ideally, the OS X app should use the latest OpenSSL build and static compile it into the binary. I did get this working as a test, but it'd be more work to set it up for automation, as OpenSSL would need to be downloaded, and makedepend needs to be downloaded compiled as an OpenSSL build dependency as well. Then OpenSSL's Makefile needs to be modified to set the OS X minimum version to match what civetweb uses. If I ever get that functioning, we should increase the OS X minimum version so we don't need to build both for 32-bit and 64-bit (10.7 is 64-bit only).","Adding Lua to the OSX build is one issue - this is in the pull request.
Changing the way OpenSSL is included is another one - if I merge the pull request, it probably gets lost since I do not look for open topics in merged/closed pull requests.
I'm not sure if there are license issues if we link OpenSSL statically. We must check this first.
Apple includes an obsolete OpenSSL version? Is there no way to update it?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,311,2016-05-29T03:55:03Z,2016-05-29T18:04:11Z,2016-05-29T18:18:28Z,MERGED,True,3,0,1,https://github.com/kainjow,Add Lua to OS X app,1,[],https://github.com/civetweb/civetweb/pull/311,https://github.com/kainjow,3,https://github.com/civetweb/civetweb/pull/311#issuecomment-222370379,"I tested this by using the sample .lp script in the manual.
I also set resources/ssl_cert.pem as the ssl_certificate and confirmed SSL is working. So I imagine that's dynamically loading the OpenSSL library that is built-in to OS X, which is pretty old. Apple deprecated it a while ago and dropped the headers from the most recent SDK. Ideally, the OS X app should use the latest OpenSSL build and static compile it into the binary. I did get this working as a test, but it'd be more work to set it up for automation, as OpenSSL would need to be downloaded, and makedepend needs to be downloaded compiled as an OpenSSL build dependency as well. Then OpenSSL's Makefile needs to be modified to set the OS X minimum version to match what civetweb uses. If I ever get that functioning, we should increase the OS X minimum version so we don't need to build both for 32-bit and 64-bit (10.7 is 64-bit only).","Here is the license. Doesn't seem like the distribution type matters, just have to have the licenses, which we can easily put in the .dmg (or embed in the program's about box).
Anyways, I'll play around with the OpenSSL stuff, and make a new issue if I come across any.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,313,2016-05-29T17:07:31Z,2016-05-29T18:05:14Z,2016-05-29T18:05:14Z,MERGED,True,8,0,1,https://github.com/kainjow,Update UserManual.md,1,[],https://github.com/civetweb/civetweb/pull/313,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/313,Add info for when php-cgi is missing.,Add info for when php-cgi is missing.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,314,2016-05-29T18:24:05Z,2016-05-30T20:29:36Z,2016-05-30T20:29:36Z,MERGED,True,14,4,2,https://github.com/kainjow,Add travis build for making the OS X package,2,[],https://github.com/civetweb/civetweb/pull/314,https://github.com/kainjow,1,https://github.com/civetweb/civetweb/pull/314,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,314,2016-05-29T18:24:05Z,2016-05-30T20:29:36Z,2016-05-30T20:29:36Z,MERGED,True,14,4,2,https://github.com/kainjow,Add travis build for making the OS X package,2,[],https://github.com/civetweb/civetweb/pull/314,https://github.com/kainjow,2,https://github.com/civetweb/civetweb/pull/314#issuecomment-222389664,,"hdiutil: create failed - Resource busy

This is a random error that hdiutil will generate. Often it's related to OS X having issues mounting the disk image to write files into it. I haven't experienced it directly with CivetWeb, but maybe Travis' systems are slow.
I'm going to change it to generate a zip file instead of a dmg. Then we can merge this in.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/nattgris,1,https://github.com/civetweb/civetweb/pull/316,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/316#issuecomment-225451135,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","Sorry, I was sick for a couple of days, then I was abroad and finally I forgot about some open topics - this one is among them. I will have a look in a day or two.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/316#issuecomment-226998424,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","It took me a while to understand the implementation. The generated diff skips some levels of braces here and there, which doesn't make it any easier.
You basically add a completely new implementation for reading form fields, add a new interface and change the current example so the data is stored directly (with a new function) in field_found instead of returning a command what to do with the field.
On the one hand, I like this interface - on the other hand, now we have a different interface released and keeping both interfaces will double maintenance.
If there are additional requirements that cannot be fulfilled with the current API or implementation, I would prefer to add something to the current implementation.
Could you explain your requirement in more detail?
From what I understood: You need to read a file on the fly, chunk by chunk, without storing it to disk/flash/whatever first?
But this should already be supported by using FORM_FIELD_STORAGE_GET / field_get. If the data size is too large than an internal buffer, it will call the field_get handler several times for the same field - the chunk sizes do not necessarily correspond to network package sizes, but package sizes are not guaranteed anyway.
Or did I get something wrong?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/316#issuecomment-241129050,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","As already written, I like your interface, but now, after the release, I don't want to change the current interface, and I don't want to have two interfaces (one for all methods/encodings and one for multipart/form-data only). I will add an example to parse a file on the fly with the current interface.
If you still want to do something that cannot be done this way, we need to discuss this in more detail.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/nattgris,5,https://github.com/civetweb/civetweb/pull/316#issuecomment-241151120,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","Hi and sorry for the delay. I was really busy with the release of the product before the summer vacation and now I just got back to work.
I did not realize the existing mg_handle_form_request API now supports streaming transfers. I read a comment in the source code that hinted it wasn't supported yet, but I guess it was still work-in-progress back then.
Nevertheless, the problem that made me re-implement the form handler still persists in mg_handle_form_request() as far as I can tell.
For example, I have a library which defines the following interface:
typedef ssize_t (*generic_reader)(void *ctx, void *buf, size_t len);
int unpack(generic_reader reader, void *ctx, const char *dest_dir);

I can then define
ssize_t form_reader(void *ctx, void *buf, size_t len)
{
    struct mg_form_data *fd = ctx;
    return mg_read_form_data(fd, buf, len);
}

so the form handler can look something like
int unpack_archive(struct mg_form_data *fd, void *user_data)
{
    if (strcmp(mg_get_form_key(fd), ""file"") == 0) {
        unpack(form_reader, fd, NULL);
        return 1;
    }

    return 0;
}

I don't see how the mg_handle_form_request() API can support streaming data to this kind of interfaces, because it forces the callbacks to be written as state machines which returns after every chunk. This might not always be possible, especially not if the consumer of the data is a library you don't control.
Note that the mg_handle_form_request() API can be implemented in terms of the mg_handle_form_data() API but the reverse is not possible.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/316#issuecomment-241162030,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","I added an example to parse uploaded files on the fly and calculate the md5 checksum without storing the entire file:
c8b8e9f
I have to check your comment above in more detail - when reading it the first time I did not get actual problem.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/316#issuecomment-241162809,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","Essentially, you do have a library, that wants to pull in the data itself using a user defined reader callback, instead of being feed with data by the calling function, right?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/nattgris,8,https://github.com/civetweb/civetweb/pull/316#issuecomment-241170046,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","Yes, that's essentially it. Whenever there's a streaming data transfer between two parts of code, you have basically two choices (unless you resort to multithreading/coroutines/protothreads). Either the consumer pulls data from the producer, or the producer pushes data to the consumer. If a consumer is written to pull data, it's fundamentally incompatible with a producer that is written to push data (as I understand mg_handle_form_request is). The other three possible combinations are all compatible (if a consumer that accepts data pushed to it, is to be combined with a producer that provides data pulled from it, some glue code is needed to drive the actual data flow).
Even if you have full control over the consumer and can structure it however you want, I believe it's often easier to write (and understand) it in a pulling fashion. The code is linear with everything in one place without a need to keep explicit track of state between invocations. For example, if the md5 example would be rewritten for the mg_handle_form_data() API, everything would be contained in a single function which runs from start to finish.  The state tracking has already been done once and for all in the producer.
int
checksum_files(struct mg_form_data *fd, void *user_data)
{
    md5_state_t state;
    uint8_t block[100];

    md5_init(&state);

    for (;;) {
        int len = mg_read_form_data(fd, block, sizeof(block));
        if (len == 0)
            break;
        md5_append(&state, block, len);
    }

    md5_finish(&state, digest); 

    return 1;
}",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/bel2125,9,https://github.com/civetweb/civetweb/pull/316#issuecomment-241228592,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","I was about to recommend using co-routines (basically setjmp/longjmp) ... I see you already know this option:

... (unless you resort to multithreading/coroutines/protothreads) ...

The idea for the interface was inspired by SAX parsing - basically you get an event/callback for every field found, and if you want you can fill your own data structure in the callback.
In your program structure, you still keep the field_found callback, but instead of returning ""store to a file"" or ""call callback with data"", you read the data using another function directly in the field_found callback. Couldn't this be done with the current interface as well, if a form_data_read function is added? This function is callable only from inside the field_found callback. This would be an extension of the current interface instead a completely new one with a completely new implementation, it would not double the maintenance effort for form handling, and it would not only work for multipart encoding but for all methods / encodings.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/nattgris,10,https://github.com/civetweb/civetweb/pull/316#issuecomment-241230768,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","I'm not familiar with SAX parsing but I imagine it too has the same limitations w.r.t. ""streaming"" data (in other words, arbitrarily large XML elements).

Couldn't this be done with the current interface as well, if a form_data_read function is added?

I guess that would basically be the same API as mine then, because that's exactly what it does: In the field callback, instead of returning a value to get a second callback with the data, allow to read the data (with regular mg_read() semantics) directly in the field callback.

This would be an extension of the current interface instead a completely new one with a completely new implementation

I imagine changing the current API to allow that would more or less result in this PR. The main difference is that I didn't keep/add that second data callback option. Note that my code is largely just your code but split in half with the header parsing in the first part and the data transfer broken out to a separate function with some state saving in between. True, I had to rewrite the data transfer part quite a bit to allow for the state to be updated between calls instead of looping in the same function call. Any implementation with the same functionality would need to do the same.

it would not double the maintenance effort for form handling

This is just a proposition for an improved API. I pushed it as a parallel to mg_handle_form_request() just to focus on the API, not on the differences in the implementations. If this idea is ever brought into civetweb I mean it should be in a form that combines it with the current form data handler (given that the latter is already released). I don't think it will need a lot of duplicated code (in fact, I suspect that the current API can be reimplemented as a fairly thin wrapper around an API of the suggested kind).

and it would not only work for multipart encoding but for all methods / encodings.

Just to be clear, mg_handle_form_data() could very well cope with url-encoded data as well, both for GET and POST; I did not complete it because I was in urgent need for file upload only. The TODOs in the code outline the work that needs to be done. As I said in the first comment, I would be happy to do it if it comes to a point where this could be merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/bel2125,11,https://github.com/civetweb/civetweb/pull/316#issuecomment-241276691,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","Then, let's restart the discussion from scratch - ignore the content of the pull request (at least for the moment), and first discuss features and concepts, then APIs and only then the implementation.
I agree it is a valuable feature to use a ""read""-like function to get field values in a form handler callback.
This is currently not so easy (fiddling with setjmp/longjmp or threads), so the CivetWeb API  should provide something. Also compatibility is an important feature.
So, how can we add this while keeping compatibility?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/bel2125,12,https://github.com/civetweb/civetweb/pull/316#issuecomment-241278451,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","So, how can we add this while keeping compatibility?

I think, the field_found callback does not necessarily need to be changed:
    int (*field_found)(const char *key,
                       const char *filename,
                       char *path,
                       size_t pathlen,
                       void *user_data);
You had additional getter functions for key, filename and connection:
    const char *mg_get_form_key(struct mg_form_data *fd);
    const char *mg_get_form_filename(struct mg_form_data *fd);
    struct mg_connection *mg_get_form_connection(struct mg_form_data *fd);
key and filename are already available as parameters of field_found, so for these two values there is no need for an incompatible change of the field_found callback to have struct mg_form_data *fd argument and getter functions.
This leaves the conn argument. What do you need to do with it? You should not use it directly in a mg_read, because you would corrupt form data parsing. Using mg_write/mg_printf would work if the handler returns something only depending on a single field value - I think this is a rather rare use case, but in most cases the response to the client will depend on the combination of all field values, so you would rarely use mg_write/mg_printf directly in the callback (yes, I did it in the example - maybe it is too simple to be realistic in this respect).
You also have
    int mg_store_form_data(struct mg_form_data *fd,
                           const char *filename);
This is the API to define the filename the multipart part should be saved to. I did this with the path output parameter of field_found if you return FORM_FIELD_STORAGE_STORE. So the feature already exists. Your API is more elegant. But the current API is already released, and it's doing the very same thing.
This leaves one function:
    int mg_read_form_data(struct mg_form_data *fd,
                          void *buf,
                          size_t len);
This is the API to accesses the one feature, that needs to be added, right?
A compatible way to do this would have to avoid the struct mg_form_data argument, since we do not have it in field_found. So the question is, can we work without this argument and keep the API fully compatible, or is this impossible and the API needs to be changed.
Since mg_read_form_data can only be used within the field_found callback, and only be used for the current field (i.e., it makes no sense to store old mg_read_form_data values to static or global variables and reuse it later), we could store this information in the thread local storage.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/mewalig,13,https://github.com/civetweb/civetweb/pull/316#issuecomment-249590945,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","why not use another thread? civetweb is already using multiple threads, and with another thread, it is easy to convert a push interface to a pull one.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,316,2016-06-02T23:59:53Z,2017-08-09T19:08:11Z,2017-08-09T19:08:11Z,CLOSED,False,532,78,4,https://github.com/nattgris,Alternate API for mg_upload replacement,3,"['Status: waiting for info from submitter', 'Status: analysis']",https://github.com/civetweb/civetweb/pull/316,https://github.com/bel2125,14,https://github.com/civetweb/civetweb/pull/316#issuecomment-321352160,"I realize it's a bit late to give feedback on the recently released mg_handle_form_request improvement over mg_upload. Still, I have a bit of an issue with the API.
Some background: I needed to parse a big file on the fly (unpack an archive to be precise) on an embedded system and found that it wasn't supported using the existing form data parser (mg_upload). I started thinking on how to implement an improvement before I saw the work in progress replacement upstream. Unfortunately it appears that the replacement does not support that use-case either (yet) and I found it very hard to extend to support it. So I wrote a separate form handler, using an API more suited for my use-case (and I think it works well for other cases too).
This is not yet complete, as it says it the commit comment, since I only implemented the multipart/form-data I needed to move forward. Nevertheless, the API should be unchanged and it should be straight-forward to implement the other method/encoding. If you like the idea I can do it, if not I'll just use it as it is until mg_handle_form_request supports streaming data.","I want to close this issue/pull request now:
As an original pull request I did not want to merge it, because it implemented a second handle_form mechanism, just about a few weeks after the first one was released. Duplicating a lot of code.
So I treated it as a general request for an additional feature that should be integrated in my first handle_form implementation. Some enhancements were already made.
Still it's essentially a callback (push) interface, since the basic structure remains - just like it was for the upload callback that has been replaced by handle_form. A simple way to convert it would be a pipe (fifo queue): The CivetWeb callback implementation would write to this pipe whenever the callback is called. Your library would read from this pipe.
The implementation is quite simple, but I think it does not belong into the CivetWeb core.
On request, I can give some more detailed explanation how this can be done in the callback.
But I don't want to add it directly to CivetWeb, so I'm closing this issue now.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,317,2016-06-03T18:19:04Z,2016-06-05T17:10:34Z,2018-09-26T11:05:43Z,MERGED,True,3,1,1,https://github.com/xtne6f,Fix unexpected 301 response,1,[],https://github.com/civetweb/civetweb/pull/317,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/317,uri_len update is needed after the process 1.2. or 1.3. of handle_request().,uri_len update is needed after the process 1.2. or 1.3. of handle_request().,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,319,2016-06-06T21:14:11Z,2016-06-10T17:48:13Z,2016-06-10T17:48:13Z,CLOSED,False,139,91,3,https://github.com/bel2125,Alternative fix for headers without : (issue #318),16,[],https://github.com/civetweb/civetweb/pull/319,https://github.com/bel2125,1,https://github.com/civetweb/civetweb/pull/319,Merge 5e6a1a0 (see #318) and retest,Merge 5e6a1a0 (see #318) and retest,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,319,2016-06-06T21:14:11Z,2016-06-10T17:48:13Z,2016-06-10T17:48:13Z,CLOSED,False,139,91,3,https://github.com/bel2125,Alternative fix for headers without : (issue #318),16,[],https://github.com/civetweb/civetweb/pull/319,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/319#issuecomment-224091188,Merge 5e6a1a0 (see #318) and retest,"This needs to be done manually - automatic tests won't run now.
So this is going to take a while.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,319,2016-06-06T21:14:11Z,2016-06-10T17:48:13Z,2016-06-10T17:48:13Z,CLOSED,False,139,91,3,https://github.com/bel2125,Alternative fix for headers without : (issue #318),16,[],https://github.com/civetweb/civetweb/pull/319,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/319#issuecomment-225249454,Merge 5e6a1a0 (see #318) and retest,merged manually,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,322,2016-06-23T19:27:10Z,2016-06-23T22:04:35Z,2017-10-16T12:19:01Z,MERGED,True,80,68,1,https://github.com/xtne6f,Fix thread handling,5,[],https://github.com/civetweb/civetweb/pull/322,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/322,"These are not so serious. You can put this request off.
(But I especially recommend e071d46 and 51c2afe.)","These are not so serious. You can put this request off.
(But I especially recommend e071d46 and 51c2afe.)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,322,2016-06-23T19:27:10Z,2016-06-23T22:04:35Z,2017-10-16T12:19:01Z,MERGED,True,80,68,1,https://github.com/xtne6f,Fix thread handling,5,[],https://github.com/civetweb/civetweb/pull/322,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/322#issuecomment-228175963,"These are not so serious. You can put this request off.
(But I especially recommend e071d46 and 51c2afe.)","I understood the first four changes, and agree to integrate it.
I need some time to think about 51c2afe, and I want to wait until the TravisCI tests finished.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,322,2016-06-23T19:27:10Z,2016-06-23T22:04:35Z,2017-10-16T12:19:01Z,MERGED,True,80,68,1,https://github.com/xtne6f,Fix thread handling,5,[],https://github.com/civetweb/civetweb/pull/322,https://github.com/xtne6f,3,https://github.com/civetweb/civetweb/pull/322#issuecomment-228290480,"These are not so serious. You can put this request off.
(But I especially recommend e071d46 and 51c2afe.)","cv->waitingthreadcount increases every pthread_cond_timedwait() call. It's not constrained by MAX_WORKER_THREADS.
assert() has no effect on release builds.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,322,2016-06-23T19:27:10Z,2016-06-23T22:04:35Z,2017-10-16T12:19:01Z,MERGED,True,80,68,1,https://github.com/xtne6f,Fix thread handling,5,[],https://github.com/civetweb/civetweb/pull/322,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/322#issuecomment-228442655,"These are not so serious. You can put this request off.
(But I especially recommend e071d46 and 51c2afe.)","But cv->waitingthreadcount is decreased in every signal call. So every time a thread is suspended, it increases, every time a thread gets wakened up, it decreases - as long as there is no timeout.
Ok, your comment in commit 51c2afe already states this .. possible overrun ... with abstime. It is important to note there was no problem in any of the previously released versions, since the affected code was never used anyway (dead code), as you stated (fortunately abstime is not used)
By the way: I do all the tests with debug builds (except a final manual test for the binaries on SourceForge), so asserts should detect errors during the tests.
So the code is not only more elegant now, it will also work in the abstime != NULL case - it's currently not used, but maybe in the future.
So again, thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/PhilLab,1,https://github.com/civetweb/civetweb/pull/332,This allows to put additional file meta data in your header fields,This allows to put additional file meta data in your header fields,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/332#issuecomment-236361227,This allows to put additional file meta data in your header fields,"One of the TravisCI tests failed - maybe just some problem of the build server (this happens from time to time), so I restarted the test.
However, this is also an interface change and might lead to compatibility issues.
I'll be on vacation for 10 days now, we can discuss more details afterwards.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/PhilLab,3,https://github.com/civetweb/civetweb/pull/332#issuecomment-236362142,This allows to put additional file meta data in your header fields,"okay, thanks. Have a great vacation!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/332#issuecomment-236362661,This allows to put additional file meta data in your header fields,"Thanks.
Maybe a solution for the incompatibility could be to use the MG_LEGACY_INTERFACE define, as already used at several other places. Maybe it is time to do some more API cleanup, and document what needs to be changed ... let's discuss this later.
The Travis build works now - it just required some ""restart"" ... sometimes this happens.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/332#issuecomment-241127729,This allows to put additional file meta data in your header fields,"I spent some time thinking on this proposal, and found a second compatibility problem

the first one was a backward compatibility issue (changing the existing mg_send_mime_file interface)
the second one is a ""forward"" compatibility issue:
If you manually set an additional HTTP header in your code, and I (or someone) later decides to add the very same HTTP header with some default value (or a configured one) to civetweb.c, the server will send the same header twice, probably with different values, violating the HTTP protocol. But we need to be able to add a new HTTP header to the default in civetweb.c if this is meaningful/required. The problem is basically a shared responsibility for sending consistent HTTP headers. We could specify ""in order to know what headers you are allowed to send, you have to read the civetweb source"" (because a second documentation needs to be maintained or is not up do date) and ""this may change from version to version without further notice"" (because we need some liberty of action as discussed above), but these restrictions are not really satisfying for an external interface.

Could you give some examples of the headers you want to send.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/PhilLab,6,https://github.com/civetweb/civetweb/pull/332#issuecomment-241963453,This allows to put additional file meta data in your header fields,"Could you give some examples of the headers you want to send.

Sure: In my application I have to deliver Android install packages (.apk). In order for my client to detect if an upgrade is necessary, I send the version code in the headers, using the X- prefix for the header field:
header = ""X-APK-VersionCode: "" + std::to_string(versionNumber);

in order to know what headers you are allowed to send, you have to read the civetweb source

Why not declaring the written header fields in the documentation directly? Do you fear that the list would become outdated?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/332#issuecomment-242185868,This allows to put additional file meta data in your header fields,"Do you fear that the list would become outdated?
This is one problem: I (or someone) adds a new header and forgets to add it to the documentation.
Even if I add a comment ""add this to the documentation"", this comment could be in the wrong place, if a function calls a function calls a function ... sending one header.

The other issue is, I documented to use 5 headers, you send a sixth in your private code.
The next version I come to the conclusion it makes sense to send the same header as you already did, and I add it. The new version will be incompatible for you, and you won't get any compiler/linker/... warning.
But I understand the need for additional headers now, and I understand they can not be added using a static configuration. Probably adding the interface with some sneaky warning ""make sure you don't send the same header as civetweb.c"" and ""note, the headers sent by civetweb may change from version to version"" is still the best solution.  I am 99.999999999% sure, civetweb will never send a X-APK-VersionCode header in the default.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/PhilLab,8,https://github.com/civetweb/civetweb/pull/332#issuecomment-242314252,This allows to put additional file meta data in your header fields,"One idea which just came to my mind: Although the X- prefix is deprecated we could use exactly this fact, i.e. guarantee in the method-documentation (and probably also an inline comment) that this function does and will never add X-something headers and provided additional headers MUST start with ""X-"".
The latter could be a) left entirely in the user's responsibility b) checked before sending or c) enforced by automatically adding an X- to each line's beginning. I think I prefer option a) here.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/bel2125,9,https://github.com/civetweb/civetweb/pull/332#issuecomment-242513559,This allows to put additional file meta data in your header fields,"I would definitely exclude c)
For headers with X- a) and b) are equivalent.
The behavior for headers without X- is unspecified, so a) and b) are both valid, even switching between them without further notice would be valid. So let's use a)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/PhilLab,10,https://github.com/civetweb/civetweb/pull/332#issuecomment-242640016,This allows to put additional file meta data in your header fields,Added documentation. Do you think it is sufficient? Should we add a test making sure the function does not include X- headers when additonal_headers==NULL and if so - how?,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/bel2125,11,https://github.com/civetweb/civetweb/pull/332#issuecomment-242831670,This allows to put additional file meta data in your header fields,"Added documentation. Do you think it is sufficient?

You mean ""Each header must start with an X- to ensure it is not included twice."" from the header?
I dont think it's sufficient for users, but I'm going to append more text later. So it's sufficient for the pull request :-)

Should we add a test making sure the function does not include X- headers when additonal_headers==NULL ...?

No.
I can not imagine  good reason to add X- headers - but if there would ever be a strong reason, we would have to do it anyway and remove the test again. So I would not create a test like this.
So the backward compatibility issue (changing the existing mg_send_mime_file interface) still remains.
We need a new function ´mg_send_mime_file2´ t avoid this.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/bel2125,12,https://github.com/civetweb/civetweb/pull/332#issuecomment-243242309,This allows to put additional file meta data in your header fields,"Are you going to change the ´mg_send_mime_file´ to ´mg_send_mime_file2´, so I can merge the PR?
Or should I change it?
The Travis CI tests do have some errors, but this seems to be an error in Travis (#345), not in your code.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,332,2016-07-29T10:48:26Z,2016-09-11T17:21:38Z,2016-09-11T17:21:38Z,MERGED,True,42,4,2,https://github.com/PhilLab,Added optional additional_headers for mg_send_mime_file,1,[],https://github.com/civetweb/civetweb/pull/332,https://github.com/bel2125,13,https://github.com/civetweb/civetweb/pull/332#issuecomment-246191995,This allows to put additional file meta data in your header fields,"I needed to restart build 730.162 (https://travis-ci.org/civetweb/civetweb/jobs/156138034) again, due to the annoying instability of Travis CI (#345). I think it's time to merge this now.
Thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,339,2016-08-08T11:38:39Z,2016-08-08T18:32:23Z,2016-08-08T19:21:18Z,CLOSED,False,450,55,6,https://github.com/hcp24,Bugfix mg_get_cookie,9,[],https://github.com/civetweb/civetweb/pull/339,https://github.com/hcp24,1,https://github.com/civetweb/civetweb/pull/339,"mg_get_cookie does not work correctly.
Try following:
void test_get_cookie()
{
const char *cookie = ""XDEBUG_SESSION=PHPSTORM; session=test_session"";
char buf[256];
int rc = mg_get_cookie(cookie, ""session"", buf, sizeof(buf));
printf(""cookie=%s\r\nsession=%s\r\n"", cookie, buf);
}
It should return 'test_session' but it is 'PHPSTORM'.
The problem is 's = mg_strcasestr(s, var_name)' it find the substring but it ignores 'XDEBUG_'.
I redesigned the function. It is not perfect but it works for me.
It is only tested on windows VS 2015.
Bugfix timer_add (comparisation > must be < )
timer.time should never been < current time
Added dynamic timers (dyn_timer.inl) as single linked and sorted list
Enable dynamic timers #define USE_DYNAMIC_TIMERS
Added timer test (timer_test.inl)
Enable dynamic timers #define USE_TIMER_TEST
Is only for development to check timer functions.
Sorry but is my first time to working on github.
I do not know how it realy works with the travis-test and what i have to do if it not completes.","mg_get_cookie does not work correctly.
Try following:
void test_get_cookie()
{
const char *cookie = ""XDEBUG_SESSION=PHPSTORM; session=test_session"";
char buf[256];
int rc = mg_get_cookie(cookie, ""session"", buf, sizeof(buf));
printf(""cookie=%s\r\nsession=%s\r\n"", cookie, buf);
}
It should return 'test_session' but it is 'PHPSTORM'.
The problem is 's = mg_strcasestr(s, var_name)' it find the substring but it ignores 'XDEBUG_'.
I redesigned the function. It is not perfect but it works for me.
It is only tested on windows VS 2015.
Bugfix timer_add (comparisation > must be < )
timer.time should never been < current time
Added dynamic timers (dyn_timer.inl) as single linked and sorted list
Enable dynamic timers #define USE_DYNAMIC_TIMERS
Added timer test (timer_test.inl)
Enable dynamic timers #define USE_TIMER_TEST
Is only for development to check timer functions.
Sorry but is my first time to working on github.
I do not know how it realy works with the travis-test and what i have to do if it not completes.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,339,2016-08-08T11:38:39Z,2016-08-08T18:32:23Z,2016-08-08T19:21:18Z,CLOSED,False,450,55,6,https://github.com/hcp24,Bugfix mg_get_cookie,9,[],https://github.com/civetweb/civetweb/pull/339,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/339#issuecomment-238347210,"mg_get_cookie does not work correctly.
Try following:
void test_get_cookie()
{
const char *cookie = ""XDEBUG_SESSION=PHPSTORM; session=test_session"";
char buf[256];
int rc = mg_get_cookie(cookie, ""session"", buf, sizeof(buf));
printf(""cookie=%s\r\nsession=%s\r\n"", cookie, buf);
}
It should return 'test_session' but it is 'PHPSTORM'.
The problem is 's = mg_strcasestr(s, var_name)' it find the substring but it ignores 'XDEBUG_'.
I redesigned the function. It is not perfect but it works for me.
It is only tested on windows VS 2015.
Bugfix timer_add (comparisation > must be < )
timer.time should never been < current time
Added dynamic timers (dyn_timer.inl) as single linked and sorted list
Enable dynamic timers #define USE_DYNAMIC_TIMERS
Added timer test (timer_test.inl)
Enable dynamic timers #define USE_TIMER_TEST
Is only for development to check timer functions.
Sorry but is my first time to working on github.
I do not know how it realy works with the travis-test and what i have to do if it not completes.","There are probably more commits in this pull request as desired.
Better seperate the pull requests for mg_get_cookie and for the timer issue (I haven't checked this yet), and some changes should remain local and not be merged in the main repository (e.g., some of the files added to the gitignore file).
Closing the pull request stopped the CI build. In the beginning, it had some problems with int / size_t type mixes: https://travis-ci.org/civetweb/civetweb/jobs/150608272#L415",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,341,2016-08-08T19:57:10Z,2016-08-09T10:57:02Z,2016-08-09T16:49:40Z,CLOSED,False,56,44,1,https://github.com/hcp24,bugfix and redesign mg_get_cookie,1,[],https://github.com/civetweb/civetweb/pull/341,https://github.com/hcp24,1,https://github.com/civetweb/civetweb/pull/341,redesign mg_get_cookie,redesign mg_get_cookie,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,341,2016-08-08T19:57:10Z,2016-08-09T10:57:02Z,2016-08-09T16:49:40Z,CLOSED,False,56,44,1,https://github.com/hcp24,bugfix and redesign mg_get_cookie,1,[],https://github.com/civetweb/civetweb/pull/341,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/341#issuecomment-238511957,redesign mg_get_cookie,"Please have a look at these errors:
https://travis-ci.org/civetweb/civetweb/jobs/150740553#L414
https://travis-ci.org/civetweb/civetweb/jobs/150740627#L412
While Visual Studio seems to ignore mixes of signed/unsigned integers, gcc and clang do not.
You need to add an explicit type cast to tell the compiler if the operation must be performed with signed or unsigned integers.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,341,2016-08-08T19:57:10Z,2016-08-09T10:57:02Z,2016-08-09T16:49:40Z,CLOSED,False,56,44,1,https://github.com/hcp24,bugfix and redesign mg_get_cookie,1,[],https://github.com/civetweb/civetweb/pull/341,https://github.com/hcp24,3,https://github.com/civetweb/civetweb/pull/341#issuecomment-238518757,redesign mg_get_cookie,"the mixed sign/unsign fixed. But what happens with /home/travis/build/civetweb/civetweb/src/civetweb.c:1971:1: error: ‘mg_strcasestr’ defined but not used [-Werror=unused-function]
How can I fix it? I try a empty call with mg_strcasestr. It is now only used on webSockets and in the unit tests.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,341,2016-08-08T19:57:10Z,2016-08-09T10:57:02Z,2016-08-09T16:49:40Z,CLOSED,False,56,44,1,https://github.com/hcp24,bugfix and redesign mg_get_cookie,1,[],https://github.com/civetweb/civetweb/pull/341,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/341#issuecomment-238615630,redesign mg_get_cookie,"error: ‘mg_strcasestr’ defined but not used
means, in the original solution the function mg_strcasestr was used, now it is not used anymore. I see you replaced it by mg_strncasecmp. If there is no reference to mg_strcasestr left in the entire code, you can set it in a
#if 0 /* no longer used since ... */ 
... mg_strcasestr(...) {
}
#endif
block",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,342,2016-08-09T11:02:56Z,2016-08-09T11:17:13Z,2016-08-09T16:45:43Z,CLOSED,False,59,44,1,https://github.com/hcp24,mg_get_cookie redesign,2,[],https://github.com/civetweb/civetweb/pull/342,https://github.com/hcp24,1,https://github.com/civetweb/civetweb/pull/342,how can I make the travis-tests local?,how can I make the travis-tests local?,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,342,2016-08-09T11:02:56Z,2016-08-09T11:17:13Z,2016-08-09T16:45:43Z,CLOSED,False,59,44,1,https://github.com/hcp24,mg_get_cookie redesign,2,[],https://github.com/civetweb/civetweb/pull/342,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/342#issuecomment-238614411,how can I make the travis-tests local?,"You can not directly test Travis CI locally (or, at least there is no simple way I would know).
You also do not need to. Travis CI executes a CMake script several times with different configurations. The CMake script first starts the compiler (either GCC or clang, depending on the configuration) and then starts a set of integration tests.
You can start CMake locally or directly use GCC or clang. If you use Linux, you can do this from the command shell using the existing Makefile. If you use Windows, you would need either MinGW to use GCC for Windows, or there are several other options. If you need a IDE, you could use QtCreator for Windows - it comes with a pre-configured MinGW environment.
But I think you do not really need to do this locally for this issue.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,343,2016-08-09T11:53:44Z,2016-08-14T20:54:16Z,2016-08-14T20:54:16Z,MERGED,True,49,44,1,https://github.com/hcp24,change mg_get_cookie to ignore substrings,3,[],https://github.com/civetweb/civetweb/pull/343,https://github.com/hcp24,1,https://github.com/civetweb/civetweb/pull/343,try again,try again,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,343,2016-08-09T11:53:44Z,2016-08-14T20:54:16Z,2016-08-14T20:54:16Z,MERGED,True,49,44,1,https://github.com/hcp24,change mg_get_cookie to ignore substrings,3,[],https://github.com/civetweb/civetweb/pull/343,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/343#issuecomment-238617124,try again,"This test looks quite OK now.
If all tests but one/two run, like in this case (https://travis-ci.org/civetweb/civetweb/builds/150904466), it can be a problem with Travis CI itself, and it disappears if I restart the failed configurations.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,344,2016-08-15T10:37:16Z,2016-08-15T17:29:02Z,2016-08-15T17:29:42Z,MERGED,True,25,7,1,https://github.com/hcp24,HCP24: bugfix: timer_add,1,[],https://github.com/civetweb/civetweb/pull/344,https://github.com/hcp24,1,https://github.com/civetweb/civetweb/pull/344,"comparisation
if (ctx->timers->timers[u].time < next_time) {
should be
if (ctx->timers->timers[u].time > next_time) {
result is:
if you put 2 or more functions to the timer list, it will only called one.
second one:
next_time should never < current time
if is_relative = 0 and next_time = 0 and period = 1 then the timer function will called until next_time >= now without pause (now it was > 29000).","comparisation
if (ctx->timers->timers[u].time < next_time) {
should be
if (ctx->timers->timers[u].time > next_time) {
result is:
if you put 2 or more functions to the timer list, it will only called one.
second one:
next_time should never < current time
if is_relative = 0 and next_time = 0 and period = 1 then the timer function will called until next_time >= now without pause (now it was > 29000).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,344,2016-08-15T10:37:16Z,2016-08-15T17:29:02Z,2016-08-15T17:29:42Z,MERGED,True,25,7,1,https://github.com/hcp24,HCP24: bugfix: timer_add,1,[],https://github.com/civetweb/civetweb/pull/344,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/344#issuecomment-239868558,"comparisation
if (ctx->timers->timers[u].time < next_time) {
should be
if (ctx->timers->timers[u].time > next_time) {
result is:
if you put 2 or more functions to the timer list, it will only called one.
second one:
next_time should never < current time
if is_relative = 0 and next_time = 0 and period = 1 then the timer function will called until next_time >= now without pause (now it was > 29000).","Merged.
Thank you for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,353,2016-09-03T03:17:59Z,2016-09-03T19:20:16Z,2016-09-03T19:20:35Z,MERGED,True,3,3,1,https://github.com/saumitravikram,Disabling code optimization flag for DEBUG build,1,[],https://github.com/civetweb/civetweb/pull/353,https://github.com/saumitravikram,1,https://github.com/civetweb/civetweb/pull/353,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,353,2016-09-03T03:17:59Z,2016-09-03T19:20:16Z,2016-09-03T19:20:35Z,MERGED,True,3,3,1,https://github.com/saumitravikram,Disabling code optimization flag for DEBUG build,1,[],https://github.com/civetweb/civetweb/pull/353,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/353#issuecomment-244565041,,Merged. Thanks for your contribution.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,353,2016-09-03T03:17:59Z,2016-09-03T19:20:16Z,2016-09-03T19:20:35Z,MERGED,True,3,3,1,https://github.com/saumitravikram,Disabling code optimization flag for DEBUG build,1,[],https://github.com/civetweb/civetweb/pull/353,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/353#issuecomment-244565047,,Closes #351,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,355,2016-09-10T05:23:42Z,2016-09-11T17:14:58Z,2016-09-11T17:14:58Z,MERGED,True,16,10,1,https://github.com/saumitravikram,close socket without linger when connection already closed from client,2,[],https://github.com/civetweb/civetweb/pull/355,https://github.com/saumitravikram,1,https://github.com/civetweb/civetweb/pull/355,"On Mac setsocketopt for linger throws invalid arguments error if socket already closed from client side but,its same does not happen in windows or linux.
This commit is add a check if already client has closed socket,then we will directly close the socket without linger.
Fixes #237","On Mac setsocketopt for linger throws invalid arguments error if socket already closed from client side but,its same does not happen in windows or linux.
This commit is add a check if already client has closed socket,then we will directly close the socket without linger.
Fixes #237",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,355,2016-09-10T05:23:42Z,2016-09-11T17:14:58Z,2016-09-11T17:14:58Z,MERGED,True,16,10,1,https://github.com/saumitravikram,close socket without linger when connection already closed from client,2,[],https://github.com/civetweb/civetweb/pull/355,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/355#issuecomment-246191320,"On Mac setsocketopt for linger throws invalid arguments error if socket already closed from client side but,its same does not happen in windows or linux.
This commit is add a check if already client has closed socket,then we will directly close the socket without linger.
Fixes #237","It seems, build #734.144 errored: https://travis-ci.org/civetweb/civetweb/jobs/158919319
No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.

Check the details on how to adjust your build configuration on: https://docs.travis-ci.com/user/common-build-problems/#Build-times-out-because-no-output-was-received

The build has been terminated

Probably yet another TravisCI bug (#345). I will restart the build.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,356,2016-09-12T19:42:19Z,2016-09-12T19:54:54Z,2016-09-12T19:55:20Z,MERGED,True,11,1,1,https://github.com/ehlertjd,Do not define clock_gettime for OSX versions >= 10.12.,1,[],https://github.com/civetweb/civetweb/pull/356,https://github.com/ehlertjd,1,https://github.com/civetweb/civetweb/pull/356,Closes #349.,Closes #349.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,356,2016-09-12T19:42:19Z,2016-09-12T19:54:54Z,2016-09-12T19:55:20Z,MERGED,True,11,1,1,https://github.com/ehlertjd,Do not define clock_gettime for OSX versions >= 10.12.,1,[],https://github.com/civetweb/civetweb/pull/356,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/356#issuecomment-246471039,Closes #349.,"Merged.
Thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,358,2016-09-15T21:13:10Z,2016-09-17T16:39:10Z,2016-10-10T18:31:44Z,MERGED,True,20,14,1,https://github.com/ehlertjd,Second fix attempt for issue 349.,1,[],https://github.com/civetweb/civetweb/pull/358,https://github.com/ehlertjd,1,https://github.com/civetweb/civetweb/pull/358,"This is the only way to safely call clock_gettime (that I know of) when compiling for OSX 10.12 or iOS 10.
Please review for correctness and whether or not this seems like a good fix from a code-style perspective. I'm not a fan of the #define clock_gettime ... solution, but I'm not sure there's a cleaner way other than modifying anywhere that clock_gettime is called.
Refs #349.","This is the only way to safely call clock_gettime (that I know of) when compiling for OSX 10.12 or iOS 10.
Please review for correctness and whether or not this seems like a good fix from a code-style perspective. I'm not a fan of the #define clock_gettime ... solution, but I'm not sure there's a cleaner way other than modifying anywhere that clock_gettime is called.
Refs #349.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,358,2016-09-15T21:13:10Z,2016-09-17T16:39:10Z,2016-10-10T18:31:44Z,MERGED,True,20,14,1,https://github.com/ehlertjd,Second fix attempt for issue 349.,1,[],https://github.com/civetweb/civetweb/pull/358,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/358#issuecomment-247785083,"This is the only way to safely call clock_gettime (that I know of) when compiling for OSX 10.12 or iOS 10.
Please review for correctness and whether or not this seems like a good fix from a code-style perspective. I'm not a fan of the #define clock_gettime ... solution, but I'm not sure there's a cleaner way other than modifying anywhere that clock_gettime is called.
Refs #349.","The Travis build failed again - most likely #345 strikes again.
I'm restarting the build.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,358,2016-09-15T21:13:10Z,2016-09-17T16:39:10Z,2016-10-10T18:31:44Z,MERGED,True,20,14,1,https://github.com/ehlertjd,Second fix attempt for issue 349.,1,[],https://github.com/civetweb/civetweb/pull/358,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/358#issuecomment-252701961,"This is the only way to safely call clock_gettime (that I know of) when compiling for OSX 10.12 or iOS 10.
Please review for correctness and whether or not this seems like a good fix from a code-style perspective. I'm not a fan of the #define clock_gettime ... solution, but I'm not sure there's a cleaner way other than modifying anywhere that clock_gettime is called.
Refs #349.","What about the following idea:
Instead of trying to figure out what #ifdef combination has to be used, just check with dlsym if clock_gettime is available.
Maybe something like
int (*pf_clock_gettime)(clockid_t clk_id, struct timespec *tp) = NULL;

...

somewhere in init
   pf_clock_gettime = dlsym(NULL, ""clock_gettime"");

...
and the call:

int
_civet_safe_clock_gettime(int clk_id, struct timespec *t)
{
    if (pf_clock_gettime) {
        return pf_clock_gettime(clk_id, t);
    }
    return _civet_clock_gettime(clk_id, t);
}
or as an optimization set pf_clock_gettime directly to _civet_clock_gettime and do some define-rename-magic so it does not clash with clock_gettime.
And probably don't use _civet as a function prefix, because symbols starting with _ are reserved.
This assumes dlsym(NULL, ...) gets symbols from the system libraries and C library. This would work for Linux, I don't know for OSX and I have no machine to test it directly.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,360,2016-09-28T05:26:48Z,2016-09-28T05:56:15Z,2016-09-28T05:56:15Z,MERGED,True,13,2,1,https://github.com/eberan,Unit test fixes for legacy and updated API's,1,[],https://github.com/civetweb/civetweb/pull/360,https://github.com/eberan,1,https://github.com/civetweb/civetweb/pull/360,"Ifdef's out the testing of legacy mg_upload API
Update parse_port_string test for new API; include ip version","Ifdef's out the testing of legacy mg_upload API
Update parse_port_string test for new API; include ip version",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,360,2016-09-28T05:26:48Z,2016-09-28T05:56:15Z,2016-09-28T05:56:15Z,MERGED,True,13,2,1,https://github.com/eberan,Unit test fixes for legacy and updated API's,1,[],https://github.com/civetweb/civetweb/pull/360,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/360#issuecomment-250078521,"Ifdef's out the testing of legacy mg_upload API
Update parse_port_string test for new API; include ip version","I will merge your contribution, thank you.
However, note this file is mostly obsolete, since the tests are now in other files, as already stated in the header (line 29, right below the copyright):
/* Note: The unit_test.c file is mostly obsolete, since the current unit
 * tests are performed by the CMake build framework based on the
 * CMakeList (https://github.com/civetweb/civetweb/blob/master/test/CMakeLists.txt).
 * The tests do no longer use unit_test.c but public_func.c, public_server.c,
 * private.c, private_exe.c and others.
 * This file is left here for reference and will be removed in the future.
 * It is no longer actively maintained.
 */",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,362,2016-10-06T21:01:38Z,2016-10-07T19:12:42Z,2016-10-07T19:12:42Z,MERGED,True,1,0,1,https://github.com/yehudasa,discard unread data if handled by begin_request(),1,[],https://github.com/civetweb/civetweb/pull/362,https://github.com/yehudasa,1,https://github.com/civetweb/civetweb/pull/362,Signed-off-by: Yehuda Sadeh yehuda@redhat.com,Signed-off-by: Yehuda Sadeh yehuda@redhat.com,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,362,2016-10-06T21:01:38Z,2016-10-07T19:12:42Z,2016-10-07T19:12:42Z,MERGED,True,1,0,1,https://github.com/yehudasa,discard unread data if handled by begin_request(),1,[],https://github.com/civetweb/civetweb/pull/362,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/362#issuecomment-252292922,Signed-off-by: Yehuda Sadeh yehuda@redhat.com,The Travis CI fails for this PR - maybe #345 strikes again. I will check it.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,362,2016-10-06T21:01:38Z,2016-10-07T19:12:42Z,2016-10-07T19:12:42Z,MERGED,True,1,0,1,https://github.com/yehudasa,discard unread data if handled by begin_request(),1,[],https://github.com/civetweb/civetweb/pull/362,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/362#issuecomment-252293266,Signed-off-by: Yehuda Sadeh yehuda@redhat.com,"Wouldn't this cause problems, if keep_alive is yes, and you use request pipe-lining?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,362,2016-10-06T21:01:38Z,2016-10-07T19:12:42Z,2016-10-07T19:12:42Z,MERGED,True,1,0,1,https://github.com/yehudasa,discard unread data if handled by begin_request(),1,[],https://github.com/civetweb/civetweb/pull/362,https://github.com/yehudasa,4,https://github.com/civetweb/civetweb/pull/362#issuecomment-252305294,Signed-off-by: Yehuda Sadeh yehuda@redhat.com,"@bel2125 this fixes an issue when keel_alive is yes. The problem is that if we don't drain the request, and begin_request() didn't read all the data off the pipe, the next request that will be handled will be broken",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,362,2016-10-06T21:01:38Z,2016-10-07T19:12:42Z,2016-10-07T19:12:42Z,MERGED,True,1,0,1,https://github.com/yehudasa,discard unread data if handled by begin_request(),1,[],https://github.com/civetweb/civetweb/pull/362,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/362#issuecomment-252307292,Signed-off-by: Yehuda Sadeh yehuda@redhat.com,"It seems all OSX builds are failing, but I cannot imagine how adding this line can cause errors like
/System/Library/Frameworks/Kernel.framework/Headers/sys/_types/_mach_port_t.h:49:30: error: typedef redefinition with different types ('__darwin_mach_port_t' (aka 'unsigned int') vs 'ipc_port_t' (aka 'struct ipc_port *'))

typedef __darwin_mach_port_t mach_port_t;

or
/Users/travis/build/civetweb/civetweb/test/../src/civetweb.c:3899:20: error: use of undeclared identifier 'errno'

strerror(ERRNO));

(logs of build 152: https://travis-ci.org/civetweb/civetweb/jobs/165652355)
Probably Travis CI changed something in the OSX build environment since the last build 751 (https://travis-ci.org/civetweb/civetweb/builds/163312168).
I think I will first repeat build 751.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,362,2016-10-06T21:01:38Z,2016-10-07T19:12:42Z,2016-10-07T19:12:42Z,MERGED,True,1,0,1,https://github.com/yehudasa,discard unread data if handled by begin_request(),1,[],https://github.com/civetweb/civetweb/pull/362,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/362#issuecomment-252337119,Signed-off-by: Yehuda Sadeh yehuda@redhat.com,"After restarting Travis CI build 751 (https://travis-ci.org/civetweb/civetweb/builds/163312168), it seems now all OSX builds fail as well. So Travis changed something in the OSX build environment.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,367,2016-11-15T08:45:41Z,2016-11-16T19:04:36Z,2016-11-16T19:04:36Z,MERGED,True,112,28,2,https://github.com/feneuilflo,Multiple protocols management for Websocket,3,[],https://github.com/civetweb/civetweb/pull/367,https://github.com/feneuilflo,1,https://github.com/civetweb/civetweb/pull/367,"Currently, when a client requests multiple Websocket protocols
Sec-Websocket-Protocol: foo, bar
CivetWeb always replies with the first protocol (see #295)
This isn't acceptable in my application (where some clients use Websocket subprotocols to identify the nature of ws streams), thus I have developed a workaround.
The new method mg_set_websocket_handler_with_subprotocols accepts a list of ws protocols.
This list is internally stored in the mg_request_info structure and used to find a matching protocol every time a client connects.
The accepted protocol, if any, is then stored in mg_request_info and sent back to the client.","Currently, when a client requests multiple Websocket protocols
Sec-Websocket-Protocol: foo, bar
CivetWeb always replies with the first protocol (see #295)
This isn't acceptable in my application (where some clients use Websocket subprotocols to identify the nature of ws streams), thus I have developed a workaround.
The new method mg_set_websocket_handler_with_subprotocols accepts a list of ws protocols.
This list is internally stored in the mg_request_info structure and used to find a matching protocol every time a client connects.
The accepted protocol, if any, is then stored in mg_request_info and sent back to the client.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,367,2016-11-15T08:45:41Z,2016-11-16T19:04:36Z,2016-11-16T19:04:36Z,MERGED,True,112,28,2,https://github.com/feneuilflo,Multiple protocols management for Websocket,3,[],https://github.com/civetweb/civetweb/pull/367,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/367#issuecomment-261039901,"Currently, when a client requests multiple Websocket protocols
Sec-Websocket-Protocol: foo, bar
CivetWeb always replies with the first protocol (see #295)
This isn't acceptable in my application (where some clients use Websocket subprotocols to identify the nature of ws streams), thus I have developed a workaround.
The new method mg_set_websocket_handler_with_subprotocols accepts a list of ws protocols.
This list is internally stored in the mg_request_info structure and used to find a matching protocol every time a client connects.
The accepted protocol, if any, is then stored in mg_request_info and sent back to the client.","Thank you very much for your contribution. It covers a ""TODO"" in the code, that needed to be solved.
civetweb.h:
I reviewed the interface and think it is quite good. I think I will rename ""acceptedSubprotocol"" to ""acceptedWebSocketSubprotocol"", and will add a ""deprecated"" mark to mg_set_websocket_handler (without the subprotocol). I will also apply the auto-format (format.bat) to format the source code.
civetweb.c:
I guess you tested it. Probably there is also a way to add an automated CI test. I will also format the source.
I will also add you to the CREDITS.md file (unless you insist on not being added there).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,369,2016-11-18T13:29:16Z,2016-11-19T17:15:18Z,2016-11-19T17:15:18Z,MERGED,True,4,2,1,https://github.com/feneuilflo,bugfix - ignore leading whitespaces when matching websocket protocols,2,[],https://github.com/civetweb/civetweb/pull/369,https://github.com/feneuilflo,1,https://github.com/civetweb/civetweb/pull/369,"#367 introduced a bug:
During websocket handshake, when client offers multiple protocols, civetweb server should ignore whitespaces. Currently it fails to match any subprotocol except the first one because of spaces between commas and subprotocols.","#367 introduced a bug:
During websocket handshake, when client offers multiple protocols, civetweb server should ignore whitespaces. Currently it fails to match any subprotocol except the first one because of spaces between commas and subprotocols.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,371,2016-12-05T00:47:46Z,2016-12-07T09:46:24Z,2016-12-08T16:27:11Z,CLOSED,False,1717,0,61,https://github.com/lammertb,API Reference,50,[],https://github.com/civetweb/civetweb/pull/371,https://github.com/lammertb,1,https://github.com/civetweb/civetweb/pull/371,"As already announced some time ago in the Civetweb Google group I have created an API Reference for Civetweb. Every public function and structure is described in their own document in the docs/api sub directory. The document file docs/APIReference.md contains links to each of the sub documents.
Function and structure descriptions are cross linked with related functions and structures to make it easy for people to hop around in the documentation.","As already announced some time ago in the Civetweb Google group I have created an API Reference for Civetweb. Every public function and structure is described in their own document in the docs/api sub directory. The document file docs/APIReference.md contains links to each of the sub documents.
Function and structure descriptions are cross linked with related functions and structures to make it easy for people to hop around in the documentation.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,371,2016-12-05T00:47:46Z,2016-12-07T09:46:24Z,2016-12-08T16:27:11Z,CLOSED,False,1717,0,61,https://github.com/lammertb,API Reference,50,[],https://github.com/civetweb/civetweb/pull/371,https://github.com/lammertb,2,https://github.com/civetweb/civetweb/pull/371#issuecomment-265402391,"As already announced some time ago in the Civetweb Google group I have created an API Reference for Civetweb. Every public function and structure is described in their own document in the docs/api sub directory. The document file docs/APIReference.md contains links to each of the sub documents.
Function and structure descriptions are cross linked with related functions and structures to make it easy for people to hop around in the documentation.","If no-one is interested, no problem. I'll further develop my fork of Civetweb and leave this alone here.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,371,2016-12-05T00:47:46Z,2016-12-07T09:46:24Z,2016-12-08T16:27:11Z,CLOSED,False,1717,0,61,https://github.com/lammertb,API Reference,50,[],https://github.com/civetweb/civetweb/pull/371,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/371#issuecomment-265769906,"As already announced some time ago in the Civetweb Google group I have created an API Reference for Civetweb. Every public function and structure is described in their own document in the docs/api sub directory. The document file docs/APIReference.md contains links to each of the sub documents.
Function and structure descriptions are cross linked with related functions and structures to make it easy for people to hop around in the documentation.","Sorry, I was abroad since Sunday - I just started to have a look at my mails 10 minutes ago.
Of course I'm interested in the documentation - I'm just sometimes not available for a week or so.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,371,2016-12-05T00:47:46Z,2016-12-07T09:46:24Z,2016-12-08T16:27:11Z,CLOSED,False,1717,0,61,https://github.com/lammertb,API Reference,50,[],https://github.com/civetweb/civetweb/pull/371,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/371#issuecomment-265784124,"As already announced some time ago in the Civetweb Google group I have created an API Reference for Civetweb. Every public function and structure is described in their own document in the docs/api sub directory. The document file docs/APIReference.md contains links to each of the sub documents.
Function and structure descriptions are cross linked with related functions and structures to make it easy for people to hop around in the documentation.","I would like to merge it, but it seems I cannot reopen this pull request.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,375,2016-12-07T21:56:28Z,2016-12-08T15:54:32Z,2016-12-08T15:54:32Z,MERGED,True,20,4,1,https://github.com/pstrinkle,Bugfix/infiniterecursion,2,[],https://github.com/civetweb/civetweb/pull/375,https://github.com/pstrinkle,1,https://github.com/civetweb/civetweb/pull/375,Fixes #374,Fixes #374,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,379,2016-12-20T02:15:40Z,2016-12-20T18:58:20Z,2016-12-20T18:58:20Z,MERGED,True,14,11,3,https://github.com/p-brz,Changing c++ library name to 'civetweb-cpp',1,[],https://github.com/civetweb/civetweb/pull/379,https://github.com/p-brz,1,https://github.com/civetweb/civetweb/pull/379,"Changed the name used on build to the c++ wrapper library to something more related to the project.
Made  some minor fixes to avoid build errors.","Changed the name used on build to the c++ wrapper library to something more related to the project.
Made  some minor fixes to avoid build errors.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,384,2017-01-04T23:29:45Z,2017-01-07T21:47:03Z,2017-01-07T21:47:03Z,MERGED,True,410,38,6,https://github.com/kakwa,Add OpenSSL 1.1 support,21,[],https://github.com/civetweb/civetweb/pull/384,https://github.com/kakwa,1,https://github.com/civetweb/civetweb/pull/384,"This PR adds support for the new OpenSSL API (version > 1.1.0) while retaining the compatibility with the 1.0.0 OpenSSL branch.
The selection is done through a new CIVETWEB_SSL_OPENSSL_API_1_1 CMake option, set to YES for 1.1 support, NO for 1.0 support (default).
Inside the source code, the following modifications are done:

a few modifications are done to ease the compatibility (some type and argument order in the sha1.inl, the way the x509 certificate serial is recovered in civetweb.c)
a few #define and typedef are added.
adding various OPENSSL_API_1_1 #ifdef to handle OpenSSL 1.1 specific code.
add OpenSSL 1.1 code (I tried to have consistent blocks of code, even if it meant a little duplication).
add handling of the dynamic loading handling (ssl_sw and crypto_sw) and the macro magic around it for OpenSSL 1.1.
accidentally I may have fixed the CMakeLists.txt and the code for the non dynamic loading (no dlopen) of OpenSSL (it seemed a little broken, for example the SLL typo in the CMakeLists.txt, there may have been some errors or warnings in the code to, but I don't remember exactly...)
add testing environments in travis-ci for non dynamic configuration for both OpenSSL 1.0 (using linux) and 1.1 (using OSX), plus some additions to handle the new  CIVETWEB_SSL_OPENSSL_API_1_1 option and the setup of OSX with OpenSSL 1.1

PR limitation:

I wished I could add some test environment for OpenSSL 1.1 using dynamic loading, but I wasn't able to make it work under OSX. I could have done something hackish for linux, like wget openssl-v1.1.0.tar.gz, ./config, make install, but it's far from elegant...
I'm not completely sure I do all the necessary cleanup in uninitialize_ssl, OpenSSL 1.1 is quite different than 1.0 in that regard, introducing auto-deinit, which renders most (all?) free and *_cleanup functions/macros useless.

For reference:

changes in OpenSSL between 1.0.2 and 1.1.0: https://github.com/openssl/openssl/blob/master/CHANGES#L168","This PR adds support for the new OpenSSL API (version > 1.1.0) while retaining the compatibility with the 1.0.0 OpenSSL branch.
The selection is done through a new CIVETWEB_SSL_OPENSSL_API_1_1 CMake option, set to YES for 1.1 support, NO for 1.0 support (default).
Inside the source code, the following modifications are done:

a few modifications are done to ease the compatibility (some type and argument order in the sha1.inl, the way the x509 certificate serial is recovered in civetweb.c)
a few #define and typedef are added.
adding various OPENSSL_API_1_1 #ifdef to handle OpenSSL 1.1 specific code.
add OpenSSL 1.1 code (I tried to have consistent blocks of code, even if it meant a little duplication).
add handling of the dynamic loading handling (ssl_sw and crypto_sw) and the macro magic around it for OpenSSL 1.1.
accidentally I may have fixed the CMakeLists.txt and the code for the non dynamic loading (no dlopen) of OpenSSL (it seemed a little broken, for example the SLL typo in the CMakeLists.txt, there may have been some errors or warnings in the code to, but I don't remember exactly...)
add testing environments in travis-ci for non dynamic configuration for both OpenSSL 1.0 (using linux) and 1.1 (using OSX), plus some additions to handle the new  CIVETWEB_SSL_OPENSSL_API_1_1 option and the setup of OSX with OpenSSL 1.1

PR limitation:

I wished I could add some test environment for OpenSSL 1.1 using dynamic loading, but I wasn't able to make it work under OSX. I could have done something hackish for linux, like wget openssl-v1.1.0.tar.gz, ./config, make install, but it's far from elegant...
I'm not completely sure I do all the necessary cleanup in uninitialize_ssl, OpenSSL 1.1 is quite different than 1.0 in that regard, introducing auto-deinit, which renders most (all?) free and *_cleanup functions/macros useless.

For reference:

changes in OpenSSL between 1.0.2 and 1.1.0: https://github.com/openssl/openssl/blob/master/CHANGES#L168",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,384,2017-01-04T23:29:45Z,2017-01-07T21:47:03Z,2017-01-07T21:47:03Z,MERGED,True,410,38,6,https://github.com/kakwa,Add OpenSSL 1.1 support,21,[],https://github.com/civetweb/civetweb/pull/384,https://github.com/kakwa,2,https://github.com/civetweb/civetweb/pull/384#issuecomment-270518950,"This PR adds support for the new OpenSSL API (version > 1.1.0) while retaining the compatibility with the 1.0.0 OpenSSL branch.
The selection is done through a new CIVETWEB_SSL_OPENSSL_API_1_1 CMake option, set to YES for 1.1 support, NO for 1.0 support (default).
Inside the source code, the following modifications are done:

a few modifications are done to ease the compatibility (some type and argument order in the sha1.inl, the way the x509 certificate serial is recovered in civetweb.c)
a few #define and typedef are added.
adding various OPENSSL_API_1_1 #ifdef to handle OpenSSL 1.1 specific code.
add OpenSSL 1.1 code (I tried to have consistent blocks of code, even if it meant a little duplication).
add handling of the dynamic loading handling (ssl_sw and crypto_sw) and the macro magic around it for OpenSSL 1.1.
accidentally I may have fixed the CMakeLists.txt and the code for the non dynamic loading (no dlopen) of OpenSSL (it seemed a little broken, for example the SLL typo in the CMakeLists.txt, there may have been some errors or warnings in the code to, but I don't remember exactly...)
add testing environments in travis-ci for non dynamic configuration for both OpenSSL 1.0 (using linux) and 1.1 (using OSX), plus some additions to handle the new  CIVETWEB_SSL_OPENSSL_API_1_1 option and the setup of OSX with OpenSSL 1.1

PR limitation:

I wished I could add some test environment for OpenSSL 1.1 using dynamic loading, but I wasn't able to make it work under OSX. I could have done something hackish for linux, like wget openssl-v1.1.0.tar.gz, ./config, make install, but it's far from elegant...
I'm not completely sure I do all the necessary cleanup in uninitialize_ssl, OpenSSL 1.1 is quite different than 1.0 in that regard, introducing auto-deinit, which renders most (all?) free and *_cleanup functions/macros useless.

For reference:

changes in OpenSSL between 1.0.2 and 1.1.0: https://github.com/openssl/openssl/blob/master/CHANGES#L168",Related to: #370,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,384,2017-01-04T23:29:45Z,2017-01-07T21:47:03Z,2017-01-07T21:47:03Z,MERGED,True,410,38,6,https://github.com/kakwa,Add OpenSSL 1.1 support,21,[],https://github.com/civetweb/civetweb/pull/384,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/384#issuecomment-270743206,"This PR adds support for the new OpenSSL API (version > 1.1.0) while retaining the compatibility with the 1.0.0 OpenSSL branch.
The selection is done through a new CIVETWEB_SSL_OPENSSL_API_1_1 CMake option, set to YES for 1.1 support, NO for 1.0 support (default).
Inside the source code, the following modifications are done:

a few modifications are done to ease the compatibility (some type and argument order in the sha1.inl, the way the x509 certificate serial is recovered in civetweb.c)
a few #define and typedef are added.
adding various OPENSSL_API_1_1 #ifdef to handle OpenSSL 1.1 specific code.
add OpenSSL 1.1 code (I tried to have consistent blocks of code, even if it meant a little duplication).
add handling of the dynamic loading handling (ssl_sw and crypto_sw) and the macro magic around it for OpenSSL 1.1.
accidentally I may have fixed the CMakeLists.txt and the code for the non dynamic loading (no dlopen) of OpenSSL (it seemed a little broken, for example the SLL typo in the CMakeLists.txt, there may have been some errors or warnings in the code to, but I don't remember exactly...)
add testing environments in travis-ci for non dynamic configuration for both OpenSSL 1.0 (using linux) and 1.1 (using OSX), plus some additions to handle the new  CIVETWEB_SSL_OPENSSL_API_1_1 option and the setup of OSX with OpenSSL 1.1

PR limitation:

I wished I could add some test environment for OpenSSL 1.1 using dynamic loading, but I wasn't able to make it work under OSX. I could have done something hackish for linux, like wget openssl-v1.1.0.tar.gz, ./config, make install, but it's far from elegant...
I'm not completely sure I do all the necessary cleanup in uninitialize_ssl, OpenSSL 1.1 is quite different than 1.0 in that regard, introducing auto-deinit, which renders most (all?) free and *_cleanup functions/macros useless.

For reference:

changes in OpenSSL between 1.0.2 and 1.1.0: https://github.com/openssl/openssl/blob/master/CHANGES#L168","Thank you very much for your contribution.
I already had a look at it, and I'm going to merge it. But before, I have to changed the version number from 1.9.1 to 1.10, create a new chapter in the release notes, ... some formalities.
This may take a day or two.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,388,2017-01-09T14:47:47Z,2017-01-09T19:27:43Z,2017-01-09T19:27:43Z,MERGED,True,1,1,1,https://github.com/PavelVozenilek,typo,1,[],https://github.com/civetweb/civetweb/pull/388,https://github.com/PavelVozenilek,1,https://github.com/civetweb/civetweb/pull/388,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,389,2017-01-09T14:50:41Z,2017-01-09T14:51:00Z,2017-01-09T14:51:10Z,CLOSED,False,1,1,1,https://github.com/PavelVozenilek,typo,1,[],https://github.com/civetweb/civetweb/pull/389,https://github.com/PavelVozenilek,1,https://github.com/civetweb/civetweb/pull/389,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,390,2017-01-09T14:54:11Z,2017-01-09T14:54:19Z,2017-01-09T14:54:24Z,CLOSED,False,1,1,1,https://github.com/PavelVozenilek,typo,1,[],https://github.com/civetweb/civetweb/pull/390,https://github.com/PavelVozenilek,1,https://github.com/civetweb/civetweb/pull/390,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,391,2017-01-09T15:10:13Z,2017-01-09T19:28:05Z,2017-01-09T19:28:05Z,MERGED,True,1,1,1,https://github.com/PavelVozenilek,another typo,1,[],https://github.com/civetweb/civetweb/pull/391,https://github.com/PavelVozenilek,1,https://github.com/civetweb/civetweb/pull/391,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,392,2017-01-09T15:13:23Z,2017-01-09T19:28:19Z,2017-01-09T19:28:19Z,MERGED,True,2,2,1,https://github.com/PavelVozenilek,Fixing API docs links,1,[],https://github.com/civetweb/civetweb/pull/392,https://github.com/PavelVozenilek,1,https://github.com/civetweb/civetweb/pull/392,This needs to be done also elsewhere.,This needs to be done also elsewhere.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,397,2017-01-11T12:51:08Z,2017-01-12T23:37:03Z,2017-01-12T23:37:03Z,MERGED,True,30,24,1,https://github.com/theanalyst,make auth domain check optional via a configurable,1,[],https://github.com/civetweb/civetweb/pull/397,https://github.com/theanalyst,1,https://github.com/civetweb/civetweb/pull/397,"Based on the value of the configurable auth_domain_check_enabled, we
validate whether a request with absolute urls matches the auth domain or
not.
Fixes #397
Signed-off-by: Abhishek Lekshmanan abhishek@suse.com","Based on the value of the configurable auth_domain_check_enabled, we
validate whether a request with absolute urls matches the auth domain or
not.
Fixes #397
Signed-off-by: Abhishek Lekshmanan abhishek@suse.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,397,2017-01-11T12:51:08Z,2017-01-12T23:37:03Z,2017-01-12T23:37:03Z,MERGED,True,30,24,1,https://github.com/theanalyst,make auth domain check optional via a configurable,1,[],https://github.com/civetweb/civetweb/pull/397,https://github.com/theanalyst,2,https://github.com/civetweb/civetweb/pull/397#issuecomment-271860848,"Based on the value of the configurable auth_domain_check_enabled, we
validate whether a request with absolute urls matches the auth domain or
not.
Fixes #397
Signed-off-by: Abhishek Lekshmanan abhishek@suse.com","initial version for feedback, still docs, tests etc. pending",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,399,2017-01-12T20:51:10Z,2017-01-12T23:04:32Z,2017-01-12T23:04:42Z,MERGED,True,27,0,1,https://github.com/draptik,Documentation: Clarified usage of PREFIX option for Makefile,1,[],https://github.com/civetweb/civetweb/pull/399,https://github.com/draptik,1,https://github.com/civetweb/civetweb/pull/399,"Not having used Makefiles in a while, the docs where unclear to me on the usage of the PREFIX option.
Here is what I tried until I found the solution:
Trial 1: This is what I expected to work from reading the docs:
$ make build PREFIX=/opt/civetweb WITH_LUA=1 WITH_WEBSOCKET=1
$ make -n install

install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 resources/itworks.html /usr/local/share/doc/civetweb/index.html
install -m 644 resources/civetweb_64x64.png /usr/local/share/doc/civetweb/
install -d -m 755  ""/usr/local/etc""
install -m 644 resources/civetweb.conf  ""/usr/local/etc/""
sed -i 's#^document_root.*$#document_root /usr/local/share/doc/civetweb#' ""/usr/local/etc/civetweb.conf""
sed -i 's#^listening_ports.*$#listening_ports 8080#' ""/usr/local/etc/civetweb.conf""
install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 *.md ""/usr/local/share/doc/civetweb""
install -d -m 755 ""/usr/local/bin""
install -m 755 civetweb ""/usr/local/bin/""

Trial 2: Trial and error:
$ PREFIX=/opt/civetweb make build WITH_LUA=1 WITH_WEBSOCKET=1
$ make -n install
install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 resources/itworks.html /usr/local/share/doc/civetweb/index.html
install -m 644 resources/civetweb_64x64.png /usr/local/share/doc/civetweb/
install -d -m 755  ""/usr/local/etc""
install -m 644 resources/civetweb.conf  ""/usr/local/etc/""
sed -i 's#^document_root.*$#document_root /usr/local/share/doc/civetweb#' ""/usr/local/etc/civetweb.conf""
sed -i 's#^listening_ports.*$#listening_ports 8080#' ""/usr/local/etc/civetweb.conf""
install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 *.md ""/usr/local/share/doc/civetweb""
install -d -m 755 ""/usr/local/bin""
install -m 755 civetweb ""/usr/local/bin/""

Trial 3: Finally ;-)
$ make build WITH_LUA=1 WITH_WEBSOCKET=1
$ make -n install PREFIX=/opt/civetweb 
install -d -m 755  ""/opt/civetweb/share/doc/civetweb""
install -m 644 resources/itworks.html /opt/civetweb/share/doc/civetweb/index.html
install -m 644 resources/civetweb_64x64.png /opt/civetweb/share/doc/civetweb/
install -d -m 755  ""/opt/civetweb/etc""
install -m 644 resources/civetweb.conf  ""/opt/civetweb/etc/""
sed -i 's#^document_root.*$#document_root /opt/civetweb/share/doc/civetweb#' ""/opt/civetweb/etc/civetweb.conf""
sed -i 's#^listening_ports.*$#listening_ports 8080#' ""/opt/civetweb/etc/civetweb.conf""
install -d -m 755  ""/opt/civetweb/share/doc/civetweb""
install -m 644 *.md ""/opt/civetweb/share/doc/civetweb""
install -d -m 755 ""/opt/civetweb/bin""
install -m 755 civetweb ""/opt/civetweb/bin/""

My PR just ads a sub section to the build documentation.","Not having used Makefiles in a while, the docs where unclear to me on the usage of the PREFIX option.
Here is what I tried until I found the solution:
Trial 1: This is what I expected to work from reading the docs:
$ make build PREFIX=/opt/civetweb WITH_LUA=1 WITH_WEBSOCKET=1
$ make -n install

install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 resources/itworks.html /usr/local/share/doc/civetweb/index.html
install -m 644 resources/civetweb_64x64.png /usr/local/share/doc/civetweb/
install -d -m 755  ""/usr/local/etc""
install -m 644 resources/civetweb.conf  ""/usr/local/etc/""
sed -i 's#^document_root.*$#document_root /usr/local/share/doc/civetweb#' ""/usr/local/etc/civetweb.conf""
sed -i 's#^listening_ports.*$#listening_ports 8080#' ""/usr/local/etc/civetweb.conf""
install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 *.md ""/usr/local/share/doc/civetweb""
install -d -m 755 ""/usr/local/bin""
install -m 755 civetweb ""/usr/local/bin/""

Trial 2: Trial and error:
$ PREFIX=/opt/civetweb make build WITH_LUA=1 WITH_WEBSOCKET=1
$ make -n install
install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 resources/itworks.html /usr/local/share/doc/civetweb/index.html
install -m 644 resources/civetweb_64x64.png /usr/local/share/doc/civetweb/
install -d -m 755  ""/usr/local/etc""
install -m 644 resources/civetweb.conf  ""/usr/local/etc/""
sed -i 's#^document_root.*$#document_root /usr/local/share/doc/civetweb#' ""/usr/local/etc/civetweb.conf""
sed -i 's#^listening_ports.*$#listening_ports 8080#' ""/usr/local/etc/civetweb.conf""
install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 *.md ""/usr/local/share/doc/civetweb""
install -d -m 755 ""/usr/local/bin""
install -m 755 civetweb ""/usr/local/bin/""

Trial 3: Finally ;-)
$ make build WITH_LUA=1 WITH_WEBSOCKET=1
$ make -n install PREFIX=/opt/civetweb 
install -d -m 755  ""/opt/civetweb/share/doc/civetweb""
install -m 644 resources/itworks.html /opt/civetweb/share/doc/civetweb/index.html
install -m 644 resources/civetweb_64x64.png /opt/civetweb/share/doc/civetweb/
install -d -m 755  ""/opt/civetweb/etc""
install -m 644 resources/civetweb.conf  ""/opt/civetweb/etc/""
sed -i 's#^document_root.*$#document_root /opt/civetweb/share/doc/civetweb#' ""/opt/civetweb/etc/civetweb.conf""
sed -i 's#^listening_ports.*$#listening_ports 8080#' ""/opt/civetweb/etc/civetweb.conf""
install -d -m 755  ""/opt/civetweb/share/doc/civetweb""
install -m 644 *.md ""/opt/civetweb/share/doc/civetweb""
install -d -m 755 ""/opt/civetweb/bin""
install -m 755 civetweb ""/opt/civetweb/bin/""

My PR just ads a sub section to the build documentation.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,399,2017-01-12T20:51:10Z,2017-01-12T23:04:32Z,2017-01-12T23:04:42Z,MERGED,True,27,0,1,https://github.com/draptik,Documentation: Clarified usage of PREFIX option for Makefile,1,[],https://github.com/civetweb/civetweb/pull/399,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/399#issuecomment-272312246,"Not having used Makefiles in a while, the docs where unclear to me on the usage of the PREFIX option.
Here is what I tried until I found the solution:
Trial 1: This is what I expected to work from reading the docs:
$ make build PREFIX=/opt/civetweb WITH_LUA=1 WITH_WEBSOCKET=1
$ make -n install

install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 resources/itworks.html /usr/local/share/doc/civetweb/index.html
install -m 644 resources/civetweb_64x64.png /usr/local/share/doc/civetweb/
install -d -m 755  ""/usr/local/etc""
install -m 644 resources/civetweb.conf  ""/usr/local/etc/""
sed -i 's#^document_root.*$#document_root /usr/local/share/doc/civetweb#' ""/usr/local/etc/civetweb.conf""
sed -i 's#^listening_ports.*$#listening_ports 8080#' ""/usr/local/etc/civetweb.conf""
install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 *.md ""/usr/local/share/doc/civetweb""
install -d -m 755 ""/usr/local/bin""
install -m 755 civetweb ""/usr/local/bin/""

Trial 2: Trial and error:
$ PREFIX=/opt/civetweb make build WITH_LUA=1 WITH_WEBSOCKET=1
$ make -n install
install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 resources/itworks.html /usr/local/share/doc/civetweb/index.html
install -m 644 resources/civetweb_64x64.png /usr/local/share/doc/civetweb/
install -d -m 755  ""/usr/local/etc""
install -m 644 resources/civetweb.conf  ""/usr/local/etc/""
sed -i 's#^document_root.*$#document_root /usr/local/share/doc/civetweb#' ""/usr/local/etc/civetweb.conf""
sed -i 's#^listening_ports.*$#listening_ports 8080#' ""/usr/local/etc/civetweb.conf""
install -d -m 755  ""/usr/local/share/doc/civetweb""
install -m 644 *.md ""/usr/local/share/doc/civetweb""
install -d -m 755 ""/usr/local/bin""
install -m 755 civetweb ""/usr/local/bin/""

Trial 3: Finally ;-)
$ make build WITH_LUA=1 WITH_WEBSOCKET=1
$ make -n install PREFIX=/opt/civetweb 
install -d -m 755  ""/opt/civetweb/share/doc/civetweb""
install -m 644 resources/itworks.html /opt/civetweb/share/doc/civetweb/index.html
install -m 644 resources/civetweb_64x64.png /opt/civetweb/share/doc/civetweb/
install -d -m 755  ""/opt/civetweb/etc""
install -m 644 resources/civetweb.conf  ""/opt/civetweb/etc/""
sed -i 's#^document_root.*$#document_root /opt/civetweb/share/doc/civetweb#' ""/opt/civetweb/etc/civetweb.conf""
sed -i 's#^listening_ports.*$#listening_ports 8080#' ""/opt/civetweb/etc/civetweb.conf""
install -d -m 755  ""/opt/civetweb/share/doc/civetweb""
install -m 644 *.md ""/opt/civetweb/share/doc/civetweb""
install -d -m 755 ""/opt/civetweb/bin""
install -m 755 civetweb ""/opt/civetweb/bin/""

My PR just ads a sub section to the build documentation.","Thank you.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,405,2017-01-29T14:47:10Z,2017-01-29T19:08:50Z,2017-01-29T19:09:26Z,MERGED,True,1,0,1,https://github.com/kakwa,fix include directory for openssl,1,[],https://github.com/civetweb/civetweb/pull/405,https://github.com/kakwa,1,https://github.com/civetweb/civetweb/pull/405,"Previsously the include of OpenSSL worked a little by accident (the
default /usr/include directory being there). On system where two versions
of OpenSSL can cohabite (for example FreeBSD), issues can occur in the
form of including one version (the one in /usr/include) and
linking against another (the one /usr/local/include|lib).
The issue can be reproduced on FreeBSD 11 with the openssl-devel package
installed. FindPackage(OpenSSL) recovers 1.1.0, with directories /usr/local/include|lib),
linkage is set to this version, but lack of proper include meant that the openssl lib from the
basesystem (1.0.2, header in /usr/include/) is used to try compiling.","Previsously the include of OpenSSL worked a little by accident (the
default /usr/include directory being there). On system where two versions
of OpenSSL can cohabite (for example FreeBSD), issues can occur in the
form of including one version (the one in /usr/include) and
linking against another (the one /usr/local/include|lib).
The issue can be reproduced on FreeBSD 11 with the openssl-devel package
installed. FindPackage(OpenSSL) recovers 1.1.0, with directories /usr/local/include|lib),
linkage is set to this version, but lack of proper include meant that the openssl lib from the
basesystem (1.0.2, header in /usr/include/) is used to try compiling.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,405,2017-01-29T14:47:10Z,2017-01-29T19:08:50Z,2017-01-29T19:09:26Z,MERGED,True,1,0,1,https://github.com/kakwa,fix include directory for openssl,1,[],https://github.com/civetweb/civetweb/pull/405,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/405#issuecomment-275937569,"Previsously the include of OpenSSL worked a little by accident (the
default /usr/include directory being there). On system where two versions
of OpenSSL can cohabite (for example FreeBSD), issues can occur in the
form of including one version (the one in /usr/include) and
linking against another (the one /usr/local/include|lib).
The issue can be reproduced on FreeBSD 11 with the openssl-devel package
installed. FindPackage(OpenSSL) recovers 1.1.0, with directories /usr/local/include|lib),
linkage is set to this version, but lack of proper include meant that the openssl lib from the
basesystem (1.0.2, header in /usr/include/) is used to try compiling.","Thank you for your contribution,
merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,408,2017-01-30T23:25:54Z,2017-01-31T12:57:34Z,2017-01-31T12:57:34Z,MERGED,True,2,1,1,https://github.com/kakwa,fix order include_directories for OpenSSL + message,1,[],https://github.com/civetweb/civetweb/pull/408,https://github.com/kakwa,1,https://github.com/civetweb/civetweb/pull/408,"The include_directories directive for OpenSSL was placed before the
find_package(OpenSSL) which was not logical.
Placing it at the correct position + adding a status message printing
the OpenSSL include directory for easier debugging.
Sorry for #405 which was not fully correct. Without fully cleaning the CMakeCache.txt file, it worked fine and I missed it.","The include_directories directive for OpenSSL was placed before the
find_package(OpenSSL) which was not logical.
Placing it at the correct position + adding a status message printing
the OpenSSL include directory for easier debugging.
Sorry for #405 which was not fully correct. Without fully cleaning the CMakeCache.txt file, it worked fine and I missed it.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,412,2017-02-15T09:40:20Z,2017-02-15T18:58:47Z,2017-02-15T18:59:03Z,MERGED,True,3,3,1,https://github.com/palortoff,Fix callback doc,1,[],https://github.com/civetweb/civetweb/pull/412,https://github.com/palortoff,1,https://github.com/civetweb/civetweb/pull/412,end_request signature was missing the reply_status_code param.,end_request signature was missing the reply_status_code param.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,412,2017-02-15T09:40:20Z,2017-02-15T18:58:47Z,2017-02-15T18:59:03Z,MERGED,True,3,3,1,https://github.com/palortoff,Fix callback doc,1,[],https://github.com/civetweb/civetweb/pull/412,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/412#issuecomment-280104480,end_request signature was missing the reply_status_code param.,"Thank you for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,413,2017-02-15T10:06:09Z,2017-02-15T18:59:42Z,2017-02-16T04:59:27Z,MERGED,True,4,2,2,https://github.com/pavel-pimenov,Fix build embedded_cpp.cpp,1,[],https://github.com/civetweb/civetweb/pull/413,https://github.com/pavel-pimenov,1,https://github.com/civetweb/civetweb/pull/413,Fix .gitignore (VC++2015),Fix .gitignore (VC++2015),True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,413,2017-02-15T10:06:09Z,2017-02-15T18:59:42Z,2017-02-16T04:59:27Z,MERGED,True,4,2,2,https://github.com/pavel-pimenov,Fix build embedded_cpp.cpp,1,[],https://github.com/civetweb/civetweb/pull/413,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/413#issuecomment-280104716,Fix .gitignore (VC++2015),"Thank you for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,415,2017-02-16T05:12:04Z,2017-02-17T19:32:41Z,2017-02-17T19:59:07Z,MERGED,True,2,2,1,https://github.com/pavel-pimenov,Fix if(rlen != rlen),1,[],https://github.com/civetweb/civetweb/pull/415,https://github.com/pavel-pimenov,1,https://github.com/civetweb/civetweb/pull/415,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,415,2017-02-16T05:12:04Z,2017-02-17T19:32:41Z,2017-02-17T19:59:07Z,MERGED,True,2,2,1,https://github.com/pavel-pimenov,Fix if(rlen != rlen),1,[],https://github.com/civetweb/civetweb/pull/415,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/415#issuecomment-280744793,,One Travis worker got stuck somehow - after restarting the build all CI tests work.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,415,2017-02-16T05:12:04Z,2017-02-17T19:32:41Z,2017-02-17T19:59:07Z,MERGED,True,2,2,1,https://github.com/pavel-pimenov,Fix if(rlen != rlen),1,[],https://github.com/civetweb/civetweb/pull/415,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/415#issuecomment-280744937,,"Thank you.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,416,2017-02-16T05:21:18Z,2017-02-17T19:41:32Z,2017-02-17T21:20:27Z,MERGED,True,0,4,1,https://github.com/pavel-pimenov,Remove if(!ri) ... always false.,1,[],https://github.com/civetweb/civetweb/pull/416,https://github.com/pavel-pimenov,1,https://github.com/civetweb/civetweb/pull/416,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,416,2017-02-16T05:21:18Z,2017-02-17T19:41:32Z,2017-02-17T21:20:27Z,MERGED,True,0,4,1,https://github.com/pavel-pimenov,Remove if(!ri) ... always false.,1,[],https://github.com/civetweb/civetweb/pull/416,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/416#issuecomment-280746994,,"Please always provide some description with the pull request.
It's true, &conn->request_info can not be NULL here.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,416,2017-02-16T05:21:18Z,2017-02-17T19:41:32Z,2017-02-17T21:20:27Z,MERGED,True,0,4,1,https://github.com/pavel-pimenov,Remove if(!ri) ... always false.,1,[],https://github.com/civetweb/civetweb/pull/416,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/416#issuecomment-280747080,,"Merged.
Thank you.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,418,2017-02-18T20:44:03Z,2017-02-19T17:51:16Z,2017-02-20T18:54:08Z,MERGED,True,7,6,2,https://github.com/pulsa,Allow compiling as C++.,1,[],https://github.com/civetweb/civetweb/pull/418,https://github.com/pulsa,1,https://github.com/civetweb/civetweb/pull/418,"I prefer to compile civetweb.c as C++, so I can share the same precompiled header with the rest of my code.  This used to work with Civetweb version 1.7.
I know civetweb.c is a C program, but I see no harm in enforcing the extra type safety and const correctness required for C++.
In Visual Studio 2015 this is Properties -> C++ -> Advanced -> Compile As, or /TP on the command line.","I prefer to compile civetweb.c as C++, so I can share the same precompiled header with the rest of my code.  This used to work with Civetweb version 1.7.
I know civetweb.c is a C program, but I see no harm in enforcing the extra type safety and const correctness required for C++.
In Visual Studio 2015 this is Properties -> C++ -> Advanced -> Compile As, or /TP on the command line.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,418,2017-02-18T20:44:03Z,2017-02-19T17:51:16Z,2017-02-20T18:54:08Z,MERGED,True,7,6,2,https://github.com/pulsa,Allow compiling as C++.,1,[],https://github.com/civetweb/civetweb/pull/418,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/418#issuecomment-280935941,"I prefer to compile civetweb.c as C++, so I can share the same precompiled header with the rest of my code.  This used to work with Civetweb version 1.7.
I know civetweb.c is a C program, but I see no harm in enforcing the extra type safety and const correctness required for C++.
In Visual Studio 2015 this is Properties -> C++ -> Advanced -> Compile As, or /TP on the command line.","Thank you for your contribution.
I can reproduce this in Visual Studio as well.
However, we can not set this as a standard setting, since in C++ mode it will not detect if some variables are declared in the middle of a function instead on top of a block (we cannot assume C99 yet).
Maybe there is a way to add a new AppVeyor build in C++ mode, in addition to the existing one in C mode.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,418,2017-02-18T20:44:03Z,2017-02-19T17:51:16Z,2017-02-20T18:54:08Z,MERGED,True,7,6,2,https://github.com/pulsa,Allow compiling as C++.,1,[],https://github.com/civetweb/civetweb/pull/418,https://github.com/pulsa,3,https://github.com/civetweb/civetweb/pull/418#issuecomment-280973604,"I prefer to compile civetweb.c as C++, so I can share the same precompiled header with the rest of my code.  This used to work with Civetweb version 1.7.
I know civetweb.c is a C program, but I see no harm in enforcing the extra type safety and const correctness required for C++.
In Visual Studio 2015 this is Properties -> C++ -> Advanced -> Compile As, or /TP on the command line.","I like the idea of a new AppVeyor build, if C++ code compatibility is a project goal.  I have never used AppVeyor and I am allergic to CMake, so I will just post my preliminary work here and hope someone with more experience can finish it.  (Bad form, I know.  Sorry.)
I added this to src/CMakeLists.txt:
if (COMPILE_AS_CPP)
  set_source_files_properties(civetweb.c main.c PROPERTIES LANGUAGE CXX)
endif()

I also had to #include <direct.h> to use _getcwd() in main.c.
I had some trouble with SSL and IPv6.  I don't need these features, so I disabled them for my testing.  It would be best to enable all features, but that depends on whoever is doing the work.  😄
I noticed this line in appveyor.yml:
- appveyor AddMessage -Category Information ""Test command '%build%'""
Shouldn't that be '%test%'?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,418,2017-02-18T20:44:03Z,2017-02-19T17:51:16Z,2017-02-20T18:54:08Z,MERGED,True,7,6,2,https://github.com/pulsa,Allow compiling as C++.,1,[],https://github.com/civetweb/civetweb/pull/418,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/418#issuecomment-281156741,"I prefer to compile civetweb.c as C++, so I can share the same precompiled header with the rest of my code.  This used to work with Civetweb version 1.7.
I know civetweb.c is a C program, but I see no harm in enforcing the extra type safety and const correctness required for C++.
In Visual Studio 2015 this is Properties -> C++ -> Advanced -> Compile As, or /TP on the command line.","I like ""Clean C"" (source compiles with a C and C++ compiler), like Lua does.
I'm not an expert on AppVeyor/CMake either, but I can try (or ask a coworker).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,429,2017-03-15T11:24:19Z,2017-03-15T22:09:58Z,2017-03-15T22:10:10Z,MERGED,True,2,3,1,https://github.com/PhilLab,Fixed typo,1,[],https://github.com/civetweb/civetweb/pull/429,https://github.com/PhilLab,1,https://github.com/civetweb/civetweb/pull/429,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,429,2017-03-15T11:24:19Z,2017-03-15T22:09:58Z,2017-03-15T22:10:10Z,MERGED,True,2,3,1,https://github.com/PhilLab,Fixed typo,1,[],https://github.com/civetweb/civetweb/pull/429,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/429#issuecomment-286895614,,"Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,430,2017-03-15T11:34:47Z,2017-03-15T22:11:43Z,2017-03-15T22:11:44Z,MERGED,True,33,0,1,https://github.com/PhilLab,Make sure make_cert.bat is executed with admin rights,1,[],https://github.com/civetweb/civetweb/pull/430,https://github.com/PhilLab,1,https://github.com/civetweb/civetweb/pull/430,"Otherwise, OpenSSL complains with the message ""unable to write 'random state' ""","Otherwise, OpenSSL complains with the message ""unable to write 'random state' """,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,441,2017-03-29T10:38:01Z,2017-08-09T18:33:11Z,2017-08-09T18:33:11Z,CLOSED,False,18,0,1,https://github.com/khanhbui,fixed retrieving the content-length,3,[],https://github.com/civetweb/civetweb/pull/441,https://github.com/khanhbui,1,https://github.com/civetweb/civetweb/pull/441,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,441,2017-03-29T10:38:01Z,2017-08-09T18:33:11Z,2017-08-09T18:33:11Z,CLOSED,False,18,0,1,https://github.com/khanhbui,fixed retrieving the content-length,3,[],https://github.com/civetweb/civetweb/pull/441,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/441#issuecomment-290194143,,"Description: See #440
There seems to be a merge conflict. I will check if I can resolve it.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,441,2017-03-29T10:38:01Z,2017-08-09T18:33:11Z,2017-08-09T18:33:11Z,CLOSED,False,18,0,1,https://github.com/khanhbui,fixed retrieving the content-length,3,[],https://github.com/civetweb/civetweb/pull/441,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/441#issuecomment-290198739,,"It seems there are some differences in the code base, that could draw in some code not directly related to the problem (as described in #440), e.g.:
+#if defined(ANDROID)
+#include <android/log.h>
+#define  LOG_TAG    ""civetweb""
+#define  LOGD(...)  __android_log_print(ANDROID_LOG_DEBUG,LOG_TAG,__VA_ARGS__)
+#else
+#define  LOGD(...)
+#endif",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,441,2017-03-29T10:38:01Z,2017-08-09T18:33:11Z,2017-08-09T18:33:11Z,CLOSED,False,18,0,1,https://github.com/khanhbui,fixed retrieving the content-length,3,[],https://github.com/civetweb/civetweb/pull/441,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/441#issuecomment-290203157,,"Thank you for your contribution. If we have an issue with file sizes of zero, I would like to understand how this is possible in the current code. Maybe let's discuss it in #440.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,441,2017-03-29T10:38:01Z,2017-08-09T18:33:11Z,2017-08-09T18:33:11Z,CLOSED,False,18,0,1,https://github.com/khanhbui,fixed retrieving the content-length,3,[],https://github.com/civetweb/civetweb/pull/441,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/441#issuecomment-321342742,,"The relevant lines
	if (filep->stat.size > INT64_MAX) {
		mg_send_http_error(conn,
		                   500,
		                   ""Error: File size is too large to send\n%"" INT64_FMT,
		                   filep->stat.size);
		return;
	}
have been integrated manually.
This change request is merged.
Although it will be displayed in GitHub as ""closed"" due to isaacs/github#2",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,447,2017-04-22T19:29:52Z,2017-04-22T20:01:08Z,2017-04-22T20:01:32Z,MERGED,True,1,1,1,None,fix typo implementedi ==> implemented,1,[],https://github.com/civetweb/civetweb/pull/447,None,1,https://github.com/civetweb/civetweb/pull/447,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,447,2017-04-22T19:29:52Z,2017-04-22T20:01:08Z,2017-04-22T20:01:32Z,MERGED,True,1,1,1,None,fix typo implementedi ==> implemented,1,[],https://github.com/civetweb/civetweb/pull/447,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/447#issuecomment-296397858,,"Thank you for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,449,2017-04-25T07:35:14Z,2017-04-28T21:46:40Z,2017-04-28T21:47:27Z,MERGED,True,2,0,1,https://github.com/thilbern,fix memory leak. Issue #448,1,[],https://github.com/civetweb/civetweb/pull/449,https://github.com/thilbern,1,https://github.com/civetweb/civetweb/pull/449,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,449,2017-04-25T07:35:14Z,2017-04-28T21:46:40Z,2017-04-28T21:47:27Z,MERGED,True,2,0,1,https://github.com/thilbern,fix memory leak. Issue #448,1,[],https://github.com/civetweb/civetweb/pull/449,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/449#issuecomment-298114261,,"Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,449,2017-04-25T07:35:14Z,2017-04-28T21:46:40Z,2017-04-28T21:47:27Z,MERGED,True,2,0,1,https://github.com/thilbern,fix memory leak. Issue #448,1,[],https://github.com/civetweb/civetweb/pull/449,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/449#issuecomment-298114350,,Fixes #448,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,453,2017-05-02T09:01:34Z,2017-05-02T17:38:59Z,2017-05-02T17:39:11Z,MERGED,True,2,2,1,None,fix compilation issue with LUA and websockets enabled,1,[],https://github.com/civetweb/civetweb/pull/453,None,1,https://github.com/civetweb/civetweb/pull/453,"name is conn and not con.
broke compilation of make lib WITH_CPP=1 WITH_LUA=1 WITH_WEBSOCKET=1","name is conn and not con.
broke compilation of make lib WITH_CPP=1 WITH_LUA=1 WITH_WEBSOCKET=1",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,453,2017-05-02T09:01:34Z,2017-05-02T17:38:59Z,2017-05-02T17:39:11Z,MERGED,True,2,2,1,None,fix compilation issue with LUA and websockets enabled,1,[],https://github.com/civetweb/civetweb/pull/453,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/453#issuecomment-298707058,"name is conn and not con.
broke compilation of make lib WITH_CPP=1 WITH_LUA=1 WITH_WEBSOCKET=1","Thank you.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,458,2017-05-10T18:07:49Z,2017-05-11T19:07:28Z,2017-05-14T17:33:32Z,CLOSED,False,239,230,2,https://github.com/snej,API functions now return error codes in addition to messages,1,[],https://github.com/civetweb/civetweb/pull/458,https://github.com/snej,1,https://github.com/civetweb/civetweb/pull/458,"Added a new struct mg_error containing the string buffer and error code.
Defined some error codes for it to return in addition to 'errno' values.
Changed functions that took ""char *ebuf, size_t ebuflen"" parameters to
take ""mg_error *error"" instead.
Fixes #456
(Note: If you have concerns about API compatibility and don't want to change the signatures of existing functions, I could add a suffix like _v2 to the new versions of the calls and leave the old signatures too, implemented as stubs that call the new ones. This is similar to what SQLite does, for instance with sqlite3_open_v2 vs sqlite3_open.)","Added a new struct mg_error containing the string buffer and error code.
Defined some error codes for it to return in addition to 'errno' values.
Changed functions that took ""char *ebuf, size_t ebuflen"" parameters to
take ""mg_error *error"" instead.
Fixes #456
(Note: If you have concerns about API compatibility and don't want to change the signatures of existing functions, I could add a suffix like _v2 to the new versions of the calls and leave the old signatures too, implemented as stubs that call the new ones. This is similar to what SQLite does, for instance with sqlite3_open_v2 vs sqlite3_open.)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,458,2017-05-10T18:07:49Z,2017-05-11T19:07:28Z,2017-05-14T17:33:32Z,CLOSED,False,239,230,2,https://github.com/snej,API functions now return error codes in addition to messages,1,[],https://github.com/civetweb/civetweb/pull/458,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/458#issuecomment-300619483,"Added a new struct mg_error containing the string buffer and error code.
Defined some error codes for it to return in addition to 'errno' values.
Changed functions that took ""char *ebuf, size_t ebuflen"" parameters to
take ""mg_error *error"" instead.
Fixes #456
(Note: If you have concerns about API compatibility and don't want to change the signatures of existing functions, I could add a suffix like _v2 to the new versions of the calls and leave the old signatures too, implemented as stubs that call the new ones. This is similar to what SQLite does, for instance with sqlite3_open_v2 vs sqlite3_open.)","This pull request has merge conflicts.
Did you do it on the latest version?
I will check it tomorrow.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,458,2017-05-10T18:07:49Z,2017-05-11T19:07:28Z,2017-05-14T17:33:32Z,CLOSED,False,239,230,2,https://github.com/snej,API functions now return error codes in addition to messages,1,[],https://github.com/civetweb/civetweb/pull/458,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/458#issuecomment-300887015,"Added a new struct mg_error containing the string buffer and error code.
Defined some error codes for it to return in addition to 'errno' values.
Changed functions that took ""char *ebuf, size_t ebuflen"" parameters to
take ""mg_error *error"" instead.
Fixes #456
(Note: If you have concerns about API compatibility and don't want to change the signatures of existing functions, I could add a suffix like _v2 to the new versions of the calls and leave the old signatures too, implemented as stubs that call the new ones. This is similar to what SQLite does, for instance with sqlite3_open_v2 vs sqlite3_open.)","Sorry, but this cannot be done in that way. Changing released interfaces in civetweb.h breaks compatibility. Interfaces in civetweb.h can only be changed until the next release. mg_download, mg_connect_websocket_client, mg_connect_client, mg_connect_client_secure, mg_get_response are all released already. For some of them, an additional interface is already planned (see https://github.com/civetweb/civetweb/blob/master/docs/Interface_Changes_1.10.md). But existing interfaces must not be changed. New interfaces with a different name may be added, and old ones can be declared as ""MG_LEGACY_INTERFACE"" - then, after a year or more, they finally may be removed.
Please let's always discuss any changes to civetweb.h (including extensions) first, since any interface is a long term commitment for maintenance.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,458,2017-05-10T18:07:49Z,2017-05-11T19:07:28Z,2017-05-14T17:33:32Z,CLOSED,False,239,230,2,https://github.com/snej,API functions now return error codes in addition to messages,1,[],https://github.com/civetweb/civetweb/pull/458,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/458#issuecomment-300887516,"Added a new struct mg_error containing the string buffer and error code.
Defined some error codes for it to return in addition to 'errno' values.
Changed functions that took ""char *ebuf, size_t ebuflen"" parameters to
take ""mg_error *error"" instead.
Fixes #456
(Note: If you have concerns about API compatibility and don't want to change the signatures of existing functions, I could add a suffix like _v2 to the new versions of the calls and leave the old signatures too, implemented as stubs that call the new ones. This is similar to what SQLite does, for instance with sqlite3_open_v2 vs sqlite3_open.)","Interface changes must be discussed first.
Discussion in #456",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,458,2017-05-10T18:07:49Z,2017-05-11T19:07:28Z,2017-05-14T17:33:32Z,CLOSED,False,239,230,2,https://github.com/snej,API functions now return error codes in addition to messages,1,[],https://github.com/civetweb/civetweb/pull/458,https://github.com/snej,5,https://github.com/civetweb/civetweb/pull/458#issuecomment-301219482,"Added a new struct mg_error containing the string buffer and error code.
Defined some error codes for it to return in addition to 'errno' values.
Changed functions that took ""char *ebuf, size_t ebuflen"" parameters to
take ""mg_error *error"" instead.
Fixes #456
(Note: If you have concerns about API compatibility and don't want to change the signatures of existing functions, I could add a suffix like _v2 to the new versions of the calls and leave the old signatures too, implemented as stubs that call the new ones. This is similar to what SQLite does, for instance with sqlite3_open_v2 vs sqlite3_open.)","I wanted to make these changes on the latest commit, but that one doesn't compile (#457). I understand if intermediate commits on master don't always build, but in that case it's not fair to expect all PRs to be based on the latest commit...",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,458,2017-05-10T18:07:49Z,2017-05-11T19:07:28Z,2017-05-14T17:33:32Z,CLOSED,False,239,230,2,https://github.com/snej,API functions now return error codes in addition to messages,1,[],https://github.com/civetweb/civetweb/pull/458,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/458#issuecomment-301327423,"Added a new struct mg_error containing the string buffer and error code.
Defined some error codes for it to return in addition to 'errno' values.
Changed functions that took ""char *ebuf, size_t ebuflen"" parameters to
take ""mg_error *error"" instead.
Fixes #456
(Note: If you have concerns about API compatibility and don't want to change the signatures of existing functions, I could add a suffix like _v2 to the new versions of the calls and leave the old signatures too, implemented as stubs that call the new ones. This is similar to what SQLite does, for instance with sqlite3_open_v2 vs sqlite3_open.)",The problem here is not the merge conflict - usually merge conflicts can be solved in one way or the other. The problem here is only the incompatible change of the API. I will come up with a suggestion for a new API function in #456.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,465,2017-05-26T16:30:10Z,2017-05-26T19:59:11Z,2017-05-27T05:28:56Z,MERGED,True,18,19,3,https://github.com/big-henry,Make MAX_REQUEST_SIZE configurable,1,[],https://github.com/civetweb/civetweb/pull/465,https://github.com/big-henry,1,https://github.com/civetweb/civetweb/pull/465,"In case we want to support larger HTTP requests (e.g., S3 Object PUT
with large metadata), we need to increase this value. So, make it
configurable.
Signed-off-by: Henry Chang henry_chang@bigtera.com","In case we want to support larger HTTP requests (e.g., S3 Object PUT
with large metadata), we need to increase this value. So, make it
configurable.
Signed-off-by: Henry Chang henry_chang@bigtera.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,465,2017-05-26T16:30:10Z,2017-05-26T19:59:11Z,2017-05-27T05:28:56Z,MERGED,True,18,19,3,https://github.com/big-henry,Make MAX_REQUEST_SIZE configurable,1,[],https://github.com/civetweb/civetweb/pull/465,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/465#issuecomment-304375180,"In case we want to support larger HTTP requests (e.g., S3 Object PUT
with large metadata), we need to increase this value. So, make it
configurable.
Signed-off-by: Henry Chang henry_chang@bigtera.com","I agree to make this configurable. There are some warnings that need to be fixed (I will do this).
I think a minimum value of 256 is too low even for a standard request from a browser.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,465,2017-05-26T16:30:10Z,2017-05-26T19:59:11Z,2017-05-27T05:28:56Z,MERGED,True,18,19,3,https://github.com/big-henry,Make MAX_REQUEST_SIZE configurable,1,[],https://github.com/civetweb/civetweb/pull/465,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/465#issuecomment-304383398,"In case we want to support larger HTTP requests (e.g., S3 Object PUT
with large metadata), we need to increase this value. So, make it
configurable.
Signed-off-by: Henry Chang henry_chang@bigtera.com","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,466,2017-05-30T15:06:00Z,2017-05-30T18:06:19Z,2017-05-31T18:42:39Z,MERGED,True,43,24,1,https://github.com/feneuilflo,quick fix for multiple Sec-WebSocket-Protocol headers,3,[],https://github.com/civetweb/civetweb/pull/466,https://github.com/feneuilflo,1,https://github.com/civetweb/civetweb/pull/466,"Based on https://tools.ietf.org/html/rfc6455#section-11.3.4,

The |Sec-WebSocket-Protocol| header field MAY appear multiple times in an HTTP request (which is logically the same as a single |Sec-WebSocket-Protocol| header field that contains all values)

The current API does not manage such situation. The method get_header returns only the first occurence of the required header.
Here is a quick fix that solves the problem for the Sec-WebSocket-Protocol header. It is based on a new method static int get_headers(const struct mg_request_info *ri, const char *name, const char** output, int output_max_size) which retrieves all headers with a given name. However, it does not solve the general question of dealing with repeated headers.","Based on https://tools.ietf.org/html/rfc6455#section-11.3.4,

The |Sec-WebSocket-Protocol| header field MAY appear multiple times in an HTTP request (which is logically the same as a single |Sec-WebSocket-Protocol| header field that contains all values)

The current API does not manage such situation. The method get_header returns only the first occurence of the required header.
Here is a quick fix that solves the problem for the Sec-WebSocket-Protocol header. It is based on a new method static int get_headers(const struct mg_request_info *ri, const char *name, const char** output, int output_max_size) which retrieves all headers with a given name. However, it does not solve the general question of dealing with repeated headers.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,466,2017-05-30T15:06:00Z,2017-05-30T18:06:19Z,2017-05-31T18:42:39Z,MERGED,True,43,24,1,https://github.com/feneuilflo,quick fix for multiple Sec-WebSocket-Protocol headers,3,[],https://github.com/civetweb/civetweb/pull/466,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/466#issuecomment-304960717,"Based on https://tools.ietf.org/html/rfc6455#section-11.3.4,

The |Sec-WebSocket-Protocol| header field MAY appear multiple times in an HTTP request (which is logically the same as a single |Sec-WebSocket-Protocol| header field that contains all values)

The current API does not manage such situation. The method get_header returns only the first occurence of the required header.
Here is a quick fix that solves the problem for the Sec-WebSocket-Protocol header. It is based on a new method static int get_headers(const struct mg_request_info *ri, const char *name, const char** output, int output_max_size) which retrieves all headers with a given name. However, it does not solve the general question of dealing with repeated headers.","Thanks for your contribution.
The error in Travis is a ""unused function"" warning for get_headers in case websocket support is not enabled. I can deal with this either by adding an #ifdef
Or do you think it has to be used somewhere else as well?
Do you know, is there somewhere a list of all headers that may occur multiple times, or a general rule?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,466,2017-05-30T15:06:00Z,2017-05-30T18:06:19Z,2017-05-31T18:42:39Z,MERGED,True,43,24,1,https://github.com/feneuilflo,quick fix for multiple Sec-WebSocket-Protocol headers,3,[],https://github.com/civetweb/civetweb/pull/466,https://github.com/feneuilflo,3,https://github.com/civetweb/civetweb/pull/466#issuecomment-305279824,"Based on https://tools.ietf.org/html/rfc6455#section-11.3.4,

The |Sec-WebSocket-Protocol| header field MAY appear multiple times in an HTTP request (which is logically the same as a single |Sec-WebSocket-Protocol| header field that contains all values)

The current API does not manage such situation. The method get_header returns only the first occurence of the required header.
Here is a quick fix that solves the problem for the Sec-WebSocket-Protocol header. It is based on a new method static int get_headers(const struct mg_request_info *ri, const char *name, const char** output, int output_max_size) which retrieves all headers with a given name. However, it does not solve the general question of dealing with repeated headers.","HTTP spec states that multiple headers may be used instead of a comma-separated list of values as long as it has no impact on the semantics of the request.
But here it is written that it should not be used except for few exceptions (namely, the Set-Cookie header, since values may contain comma).
I don't think there is a list of these exceptions. I have looked a bit for it, without much success yet.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,467,2017-06-02T10:58:30Z,2017-06-02T18:33:24Z,2017-06-02T18:33:34Z,MERGED,True,1,1,1,https://github.com/theanalyst,user_manual: typo fix,1,[],https://github.com/civetweb/civetweb/pull/467,https://github.com/theanalyst,1,https://github.com/civetweb/civetweb/pull/467,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,467,2017-06-02T10:58:30Z,2017-06-02T18:33:24Z,2017-06-02T18:33:34Z,MERGED,True,1,1,1,https://github.com/theanalyst,user_manual: typo fix,1,[],https://github.com/civetweb/civetweb/pull/467,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/467#issuecomment-305875185,,"Thank you.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/tzimmofsecure,1,https://github.com/civetweb/civetweb/pull/471,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/tzimmofsecure,2,https://github.com/civetweb/civetweb/pull/471#issuecomment-308997112,,There seem to be bunch of failures but at least the ones I checked at random were related to variable 'date' not being available because the declaration was inside #if !defined(NO_FILES) but the code using it is not.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/471#issuecomment-309095255,,"Static source code analysis is something mysterious. I'm already used to two different analysis tools showing completely different warnings, but in this case it seems Coverity reports different warnings to you and to me???
Civetweb builds without warnings on gcc, clang and MSVC with -wall, -wextra, ... all clang scan-build warnings are false positives and the online version of Coverity just returns two minor warnings. Coverity did not show me the errors you mentioned above.
However, your fixes seem reasonable - thanks, I will merge it.
But it seems I need to do this manually due to some merge conflicts.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/tzimmofsecure,4,https://github.com/civetweb/civetweb/pull/471#issuecomment-309099057,,"The conflict is easy to resolve. The latest fix for date generated the conflict. It was clean at the point of making the pull request.
I'm using quite strict settings both of Coverity and in gcc. While -Wall -W -Wextra enables most warnings, they don't enable all of them. And we are building this on multiple platforms, multiple distributions and multiple versions, some of which are pretty old, like RHEL 5, in order to build binaries that work for all our customers. Different compiler versions and architectures warn about different things.
We use different options for different compiler versions, but among those options are, in addition to those -Wall -W -Wextra:
-Wundef -Wshadow -Wpointer-arith -Wbad-function-cast -Wcast-qual -Wwrite-strings -Wconversion -Wsign-compare -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wredundant-decls -Wnested-externs -Winline -Wlong-long -Wcast-align -ansi
Some of them are enabled on some compiler versions without explicitly specifying them but not all of them.
And for Coverity:
--aggressiveness-level high --all --enable-callgraph-metrics --enable-fnptr --enable-parse-warnings --hfa --security --enable-constraint-fpp",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/tzimmofsecure,5,https://github.com/civetweb/civetweb/pull/471#issuecomment-309099976,,And there are some more issues reported by Coverity but they were more difficult to investigate and fix and/or there are multiple alternatives how to fix them. And there are maybe some false positives that cannot happen in reality but the code fools Coverity. And in a library's case Coverity cannot know how the caller will eventually call the functions as it cannot see the calling code (which might not even exist yet at the time of analysis because it hasn't been even written yet).,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/tzimmofsecure,6,https://github.com/civetweb/civetweb/pull/471#issuecomment-309100889,,"Oh, one more thing: The code supports many different combinations of enabling/disabling features, and Coverity should actually be run with all the combinations to catch all the issues. Maybe we are using a different combination of features than you are and thus we are seeing different issues.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/471#issuecomment-309107923,,"This is the way I do the coverity scan:
https://github.com/civetweb/civetweb/blob/master/resources/coverity_check.sh
cov-analysis-linux64-8.7.0/bin/cov-build --dir cov-int make WITH_IPV6=1 WITH_WEBSOCKET=1 WITH_SERVER_STATS=1

And here is the list of compile flags:
https://github.com/civetweb/civetweb/blob/master/CMakeLists.txt#L259
add_c_compiler_flag(-Wall)
add_c_compiler_flag(-Wextra)
add_c_compiler_flag(-Wshadow)
add_c_compiler_flag(-Wconversion)
add_c_compiler_flag(-Wmissing-prototypes)
add_c_compiler_flag(-Weverything)
add_c_compiler_flag(/W4)
add_c_compiler_flag(-Wno-padded)
add_c_compiler_flag(/Wd4820)
add_c_compiler_flag(-Wno-unused-macros)
add_c_compiler_flag(-Wno-format-nonliteral)
add_c_compiler_flag(-Wparentheses)
if (MINGW)
  add_c_compiler_flag(-Wno-format)
endif()
if (NOT CIVETWEB_ALLOW_WARNINGS)
  add_c_compiler_flag(-Werror)
endif()
add_c_compiler_flag(/WX)
add_c_compiler_flag(-pedantic-errors)
add_c_compiler_flag(-fvisibility=hidden)
add_c_compiler_flag(-fstack-protector-strong RELEASE)
add_c_compiler_flag(-flto RELEASE)
add_c_compiler_flag(-fsanitize=undefined DEBUG)
add_c_compiler_flag(-fsanitize=address DEBUG)
if (HAVE_C_FLAG_FSANITIZE_ADDRESS)
  add_c_compiler_flag(-static-asan DEBUG)
endif()
add_c_compiler_flag(-fstack-protector-all DEBUG)
if (MINGW)
  add_c_compiler_flag(-mwindows)
endif()

Probably some are still missing. Any suggestions what flags should be added as a next step?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/471#issuecomment-309108037,,The merge is indeed trivial. I just wait for the automatic test to complete.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/tzimmofsecure,9,https://github.com/civetweb/civetweb/pull/471#issuecomment-309116610,,"No, I'm not any expert on those flags. I have just found a working set that works across the compiler versions and platforms we are using. You seem to have a good set of flags that work on modern compilers. Older ones that we use don't support many of those.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,471,2017-06-16T08:42:34Z,2017-06-16T19:45:17Z,2017-06-16T20:27:50Z,MERGED,True,82,22,1,https://github.com/tzimmofsecure,Fix some compiler warnings. Fix some issues reported by Coverity.,11,[],https://github.com/civetweb/civetweb/pull/471,https://github.com/bel2125,10,https://github.com/civetweb/civetweb/pull/471#issuecomment-309126261,,"The clang warning ""-Weverything"" should enable every current and future warning, only three warnins are explicitly deactivated (""Wno-unused-macros"", ""Wno-padded"" and ""Wno-format-nonliteral"" will remain deactivated).
I did not find out how to add flags to the Coverity scan script (cov-analysis-linux64-8.7.0/bin/cov-build). Still, while I can do 148 build configurations for every commit, I cannot do more than 2 (or 3?) Coverity builds each day. So, I cannot build every combination with coverity, so I'm just using one configuration with all CivetWeb features except those using third party code.
The current warning and scan settings already seem quite strict. Still, if anyone has a suggestion for more flags (in particular for Coverity), I will add them.
Meanwhile the code is merged, thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,477,2017-06-20T11:34:00Z,2017-06-20T18:44:24Z,2017-06-20T18:44:58Z,MERGED,True,3,1,1,https://github.com/tzimmofsecure,Fix compiler warnings on Android build using gcc-4.6.,2,[],https://github.com/civetweb/civetweb/pull/477,https://github.com/tzimmofsecure,1,https://github.com/civetweb/civetweb/pull/477,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,477,2017-06-20T11:34:00Z,2017-06-20T18:44:24Z,2017-06-20T18:44:58Z,MERGED,True,3,1,1,https://github.com/tzimmofsecure,Fix compiler warnings on Android build using gcc-4.6.,2,[],https://github.com/civetweb/civetweb/pull/477,https://github.com/tzimmofsecure,2,https://github.com/civetweb/civetweb/pull/477#issuecomment-309726038,,"src/civetweb.c: In function 'mg_inet_pton':
src/civetweb.c:7411:14: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,477,2017-06-20T11:34:00Z,2017-06-20T18:44:24Z,2017-06-20T18:44:58Z,MERGED,True,3,1,1,https://github.com/tzimmofsecure,Fix compiler warnings on Android build using gcc-4.6.,2,[],https://github.com/civetweb/civetweb/pull/477,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/477#issuecomment-309851689,,Merged. Thanks for your contribution.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,478,2017-06-21T11:56:08Z,2017-06-22T18:12:40Z,2017-06-22T18:12:40Z,MERGED,True,23,7,2,https://github.com/tzimmofsecure,Fix compiler warnings on CentOS 5.11 (gcc 4.1.2).,1,[],https://github.com/civetweb/civetweb/pull/478,https://github.com/tzimmofsecure,1,https://github.com/civetweb/civetweb/pull/478,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/tzimmofsecure,1,https://github.com/civetweb/civetweb/pull/480,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/480#issuecomment-311164118,,"I'm not sure if this is the right way to do this.
First of all, __i686 does not appear in this list or this list and I don't get it with gcc -dM -E - < /dev/null either (I also don't get __i386 but __x86_64__).
Also, the GCC documentation does not mention any platform specific requirement.
As to my knowledge, __sync_add_and_fetch compiles to LOCK XADD and should be available at least for i486 (introduced in 1989). So all x86 CPUs from the last 25 year should support it.
Could you provide some reference for this define?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/480#issuecomment-311165489,,"So all x86 CPUs from the last 25 year should support it.

I just found 80386 were produced until 2007 (according to Wikipedia from October 1985 to September 2007). Still, is supporting 80386 the intention?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/tzimmofsecure,4,https://github.com/civetweb/civetweb/pull/480#issuecomment-311312916,,"We have customers and some may be running really old hardware and we have no control over it. Thus compiling for i386 (for 32-bit builds) is what we have been doing so far.
On a 32-bit system: (CentOS 5.11 32-bit in this case)
--8<--8<--
$ echo | gcc -dM -E - | grep i.86
#define __i386 1
#define i386 1
#define i386 1
$ echo | gcc -march=i686 -dM -E - | grep i.86
#define __i686 1
#define i686 1
#define __i386 1
#define i386 1
#define i386 1
--8<--8<--
but actually -march=i486 and -march=i586 would be possible as well and then that __sync_add_and_fetch() is probably present as well.
And the original issue was:
--8<--8<--
$ gcc  -Wall -W -Wno-traditional -Wundef -Wshadow -Werror  -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wsign-compare -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wnested-externs -Winline -fPIC -DNO_SSL -Wno-unknown-pragmas  -I . -I include             -g -c -o civetweb.o src/civetweb.c
$ gcc  -Wall -W -Wno-traditional -Wundef -Wshadow -Werror  -Wpointer-arith -Wbad-function-cast -Wwrite-strings -Wsign-compare -Waggregate-return -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wmissing-noreturn -Wnested-externs -Winline -fPIC -DNO_SSL -Wno-unknown-pragmas  -I . -I include             -g -c -o main.o src/main.c
$ gcc -o civetweb main.o civetweb.o -pthread -lrt
civetweb.o: In function mg_atomic_inc': /home/tzimmo/git/civetweb-build-clean/civetweb-build/build/civetweb/src/civetweb.c:815: undefined reference to __sync_add_and_fetch_4'
civetweb.o: In function mg_atomic_dec': /home/tzimmo/git/civetweb-build-clean/civetweb-build/build/civetweb/src/civetweb.c:834: undefined reference to __sync_sub_and_fetch_4'
collect2: ld returned 1 exit status
--8<--8<--
I'm open to other alternatives in resolving this as well if you have any ideas in mind?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/480#issuecomment-311473834,,"The fallback
ret = (++(*addr));
isn't really atomic. When I wrote it, I thought no platform will ever use this. I also thought about just writing
#error ""You use a platform unknown to me. Please implement atomic-inc on your own.""
So I wonder this piece of code is really in use.
Regarding your pull request:
First of all, I'm afraid it might lead to some platforms using this fallback code, although it would not be required for this platform. An explicit define NO_SYNC_AND_FETCH (in analogy to NO_POPEN) would be a way to avoid using compiler specific system defines in a wrong way, and accidentally using the fallback. If you know exactly what you are doing, you could add this define to your build. I think 486 already has the required operations, but I don't know if the compiler supports it (old versions of Visual Studio had to use emit for this, don't know for old gcc versions).
Next, ret = (++(*addr)); could cause problems anyway - you probably add a pthread_mutex_lock/.._unlock pair, using a mutex global to your entire application - not to the civetweb context, since you need to create it before the first call to mg_start, and never destroy it (until the application exits). In the recent version, it could be done in mg_init_library, but then using this init function is mandatory.
You could also write your own __sync_add_and_fetch function, and link it in case there is no built-in.
Maybe you do not have this issue, if your minimum platform is an 80486?
By the way - I don't get a list of defines for 486:
> echo | gcc -march=i486 -dM -E -
cc1: error: CPU you selected does not support x86-64 instruction set
cc1: error: CPU you selected does not support x86-64 instruction set

> gcc --version
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/tzimmofsecure,6,https://github.com/civetweb/civetweb/pull/480#issuecomment-311478176,,"You don't get a list because you are using 64-bit compiler targeted to create 64-bit (x86_64) binaries, thus you cannot compile for i486 architecture (there is no i486 for 64-bit). But if you add -m32 to the gcc command line, it instructs it to target for 32-bit architecture, such as i486, for example, so:
echo | gcc -m32 -march=i486 -dM -E -
probably works for you. Not sure if it needs some 32-bit development packages though, maybe not.
And yes, a separate -D(efine) could be used instead. Another thing is that if this atomic operation is not done too often to cause too much performance penalties (I didn't check how often it gets called), using a mutex around it could be an option on all platforms as well. Civetweb is threaded anyway, so having a mutex might not be too bad option.
As I cannot tell what the customers are running, I cannot say for sure that i486 is not too modern for some of them.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/480#issuecomment-311478234,,"Although I can't guarantee anything, I think it's actually not really dramatic, if ""atomic"" operations are not atomic on single core CPUs with the current default feature defines, if you don't call mg_start twice the same time from different threads and don't use the alternative queue define. Some statistics data might be wrong (number of active clients, used memory, ...) but that's not used for anything but showing statistics. Still there should be this lock if there is no sync operation - making the init library call mandatory for those platforms.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/480#issuecomment-311478706,,"echo | gcc -m32 -march=i486 -dM -E -  works, thanks.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/bel2125,9,https://github.com/civetweb/civetweb/pull/480#issuecomment-311481381,,"Another thing is that if this atomic operation is not done too often to cause too much performance penalties (I didn't check how often it gets called), using a mutex around it could be an option on all platforms as well. Civetweb is threaded anyway, so having a mutex might not be too bad option.

if USE_SERVER_STATS is set, mg_atomic_inc and mg_atomic_add are called quite often.
The original intention of mg_atomic_inc was, to check if mg_start is called the first time, and some one time initialization needs to be done. Retrospectively, the simpler way would have been to add an init library function earlier, and require it to be used before mg_start (maybe with some compatibility fallback to call mg_init_library from there, but leaving a memory leak).
Then it got used to create thread indexes - that's a rare operation and a lock would be possible there.
It's used to refresh trusts - don't know if you use short time certificates.
And there is server statistics.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/bel2125,10,https://github.com/civetweb/civetweb/pull/480#issuecomment-318863146,,"I added the 'NO_ATOMICS' define some days ago.
Maybe this will solve your problem.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/bel2125,11,https://github.com/civetweb/civetweb/pull/480#issuecomment-321341313,,"a #define NO_ATOMICS should solve your problems, and it's even multi-threaded safe now:
	mg_global_lock();
	ret = (++(*addr));
	mg_global_unlock();",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,480,2017-06-26T10:21:03Z,2017-09-02T18:25:53Z,2017-09-02T18:25:59Z,CLOSED,False,8,0,1,https://github.com/tzimmofsecure,On i386 (non-i686) builds __sync_(add|sub)_and_fetch is not available.,1,[],https://github.com/civetweb/civetweb/pull/480,https://github.com/bel2125,12,https://github.com/civetweb/civetweb/pull/480#issuecomment-326761721,,"The NO_ATOMICS define will solve this problem.
In case there are still unresolved issues, please open a new issue.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,489,2017-07-07T06:03:21Z,2017-07-08T20:12:23Z,2017-07-08T20:12:42Z,MERGED,True,24,5,2,https://github.com/btsimonh,Add general usercontext variable to CPP server,2,[],https://github.com/civetweb/civetweb/pull/489,https://github.com/btsimonh,1,https://github.com/civetweb/civetweb/pull/489,"When I'm using CivetServer.cpp, a usercontext variable in the class is useful....  nothing in the class references it, but it is publicly accessible.
If you think this should be done by other means (e.g. deriving a class), just close this request :).","When I'm using CivetServer.cpp, a usercontext variable in the class is useful....  nothing in the class references it, but it is publicly accessible.
If you think this should be done by other means (e.g. deriving a class), just close this request :).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,489,2017-07-07T06:03:21Z,2017-07-08T20:12:23Z,2017-07-08T20:12:42Z,MERGED,True,24,5,2,https://github.com/btsimonh,Add general usercontext variable to CPP server,2,[],https://github.com/civetweb/civetweb/pull/489,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/489#issuecomment-313785506,"When I'm using CivetServer.cpp, a usercontext variable in the class is useful....  nothing in the class references it, but it is publicly accessible.
If you think this should be done by other means (e.g. deriving a class), just close this request :).","I would rather not add an unused member variable to a class, without any feature assigned to it.
I don't know what feature you want to realise this way.
If you just want to store some user defined pointer while starting the server (CivetServer constructor), one could add a parameter in the constructor and add a getter function.
This would be similar to the C interface (user_data parameter in mg_start).
You could derive the class, but I think you will end up with a lot of reinterpret_cast is the callbacks (unless you wrap every handler).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,489,2017-07-07T06:03:21Z,2017-07-08T20:12:23Z,2017-07-08T20:12:42Z,MERGED,True,24,5,2,https://github.com/btsimonh,Add general usercontext variable to CPP server,2,[],https://github.com/civetweb/civetweb/pull/489,https://github.com/btsimonh,3,https://github.com/civetweb/civetweb/pull/489#issuecomment-313840464,"When I'm using CivetServer.cpp, a usercontext variable in the class is useful....  nothing in the class references it, but it is publicly accessible.
If you think this should be done by other means (e.g. deriving a class), just close this request :).","modified; take a look.
Use case is this:
I have a general webserver class, which creates a CivetServer, and contains all the handlers, etc.
I have another class which launches everything (including the webserver).  Each handler needs to serve data from different classes launched by the 'Parent'.  So I set this 'Parent' class pointer in UserData, and then use it to access the different data sources (each providing very similar functionality in OpenJson, GetJson, CloseJson, but providing very different types of data).
Example use in handler (simplified):
bool MyDataHandler::handleGet(CivetServer *server, struct mg_connection *conn)
{
    CMyClass *Parent = (CMyClass * )server->getUserContext();
#define MAX_BUFFER 2048
    char buffer[MAX_BUFFER];
    mg_printf(conn,
              ""HTTP/1.1 200 OK\r\nContent-Type: ""
              ""application/json\r\nConnection: close\r\n\r\n"");
    if (Parent && Parent->Data){
        void *h = Parent->Data->OpenJson();
        if (NULL != h){
            int len = 0;
            while (len = Parent->Data->GetJson(h, buffer, MAX_BUFFER)){
                mg_printf(conn, ""%.*s"", len, buffer);
            }
            Parent->Data->CloseJson(h);
        } else {
            mg_printf(conn,
                  ""{ \""result\"":\""no data available\""}\r\n"");
        }
    } else {
        mg_printf(conn,
              ""{ \""result\"":\""no data class available\""}\r\n"");
    }
    return true;
}

Is there a better way to achieve this? - the C civetweb general user data is already occupied by the CivetServer class pointer....",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,489,2017-07-07T06:03:21Z,2017-07-08T20:12:23Z,2017-07-08T20:12:42Z,MERGED,True,24,5,2,https://github.com/btsimonh,Add general usercontext variable to CPP server,2,[],https://github.com/civetweb/civetweb/pull/489,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/489#issuecomment-313877829,"When I'm using CivetServer.cpp, a usercontext variable in the class is useful....  nothing in the class references it, but it is publicly accessible.
If you think this should be done by other means (e.g. deriving a class), just close this request :).","I think, the way you do it now is the C++ equivalent to the C general user data.
I don't know why one build fails for this pull request - I will have a closer look.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,489,2017-07-07T06:03:21Z,2017-07-08T20:12:23Z,2017-07-08T20:12:42Z,MERGED,True,24,5,2,https://github.com/btsimonh,Add general usercontext variable to CPP server,2,[],https://github.com/civetweb/civetweb/pull/489,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/489#issuecomment-313878448,"When I'm using CivetServer.cpp, a usercontext variable in the class is useful....  nothing in the class references it, but it is publicly accessible.
If you think this should be done by other means (e.g. deriving a class), just close this request :).","It seems it was only a build system instability: I just had to repeat it (unfortunately, this happens from time to time).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,489,2017-07-07T06:03:21Z,2017-07-08T20:12:23Z,2017-07-08T20:12:42Z,MERGED,True,24,5,2,https://github.com/btsimonh,Add general usercontext variable to CPP server,2,[],https://github.com/civetweb/civetweb/pull/489,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/489#issuecomment-313878464,"When I'm using CivetServer.cpp, a usercontext variable in the class is useful....  nothing in the class references it, but it is publicly accessible.
If you think this should be done by other means (e.g. deriving a class), just close this request :).","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,490,2017-07-11T00:54:37Z,2017-07-17T17:44:05Z,2017-07-17T17:44:35Z,MERGED,True,8,0,1,https://github.com/nigels-com,Optional CMake opt-out of ASAN in debug mode build,2,[],https://github.com/civetweb/civetweb/pull/490,https://github.com/nigels-com,1,https://github.com/civetweb/civetweb/pull/490,"For building a debug-mode civetweb static library we want to be able to disable ASAN.
Otherwise we have link errors such as:
/src/civetweb/src/civetweb.c:820: undefined reference to __asan_report_store4
We'd prefer to build with: -DCIVETWEB_ENABLE_ASAN=OFF","For building a debug-mode civetweb static library we want to be able to disable ASAN.
Otherwise we have link errors such as:
/src/civetweb/src/civetweb.c:820: undefined reference to __asan_report_store4
We'd prefer to build with: -DCIVETWEB_ENABLE_ASAN=OFF",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,490,2017-07-11T00:54:37Z,2017-07-17T17:44:05Z,2017-07-17T17:44:35Z,MERGED,True,8,0,1,https://github.com/nigels-com,Optional CMake opt-out of ASAN in debug mode build,2,[],https://github.com/civetweb/civetweb/pull/490,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/490#issuecomment-315827937,"For building a debug-mode civetweb static library we want to be able to disable ASAN.
Otherwise we have link errors such as:
/src/civetweb/src/civetweb.c:820: undefined reference to __asan_report_store4
We'd prefer to build with: -DCIVETWEB_ENABLE_ASAN=OFF","Merged.
Thank's for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,495,2017-07-26T16:48:59Z,2017-07-28T19:43:25Z,2017-07-28T19:43:45Z,MERGED,True,4,4,4,https://github.com/asomers,Fix bash path in shebangs,1,[],https://github.com/civetweb/civetweb/pull/495,https://github.com/asomers,1,https://github.com/civetweb/civetweb/pull/495,"""/bin/bash"" is a Linuxism.  ""/usr/bin/env bash"" is portable.","""/bin/bash"" is a Linuxism.  ""/usr/bin/env bash"" is portable.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,495,2017-07-26T16:48:59Z,2017-07-28T19:43:25Z,2017-07-28T19:43:45Z,MERGED,True,4,4,4,https://github.com/asomers,Fix bash path in shebangs,1,[],https://github.com/civetweb/civetweb/pull/495,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/495#issuecomment-318734037,"""/bin/bash"" is a Linuxism.  ""/usr/bin/env bash"" is portable.","I did not know this is possible. Looking for it I found there seem to be some disadvantages as well:

https://unix.stackexchange.com/questions/29608/why-is-it-better-to-use-usr-bin-env-name-instead-of-path-to-name-as-my/29620#29620
https://stackoverflow.com/a/16365367
Could you tell me a little more on the actual problem: Why do you want this modified?
You wrote, it's ""a Linuxism"" - is this required for some operating system?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,495,2017-07-26T16:48:59Z,2017-07-28T19:43:25Z,2017-07-28T19:43:45Z,MERGED,True,4,4,4,https://github.com/asomers,Fix bash path in shebangs,1,[],https://github.com/civetweb/civetweb/pull/495,https://github.com/asomers,3,https://github.com/civetweb/civetweb/pull/495#issuecomment-318739283,"""/bin/bash"" is a Linuxism.  ""/usr/bin/env bash"" is portable.","On all of the BSDs, bash is normally installed into /usr/local/bin, not /bin (if it's installed at all).  The BSDs normally use /bin/sh as the interpreter for shell scripts, but /usr/bin/env bash is acceptable if the script uses bash-specific features, which one of these scripts does.  None of the disadvantages in the link you posted is relevant in this case:

PATH affects the commands in the script itself, so it's not a big deal if it also affects the choice of interpreter.  It's not like script's behavior will be PATH-independent
On systems like the BSDs where bash is installed to /usr/local/bin, there are usually a lot of other commands that are also installed there.  So if /usr/local/bin isn't in the PATH, the script won't work anyway.  So it's not a problem to look for the interpreter there.
bash occasionally takes arguments, but all of its useful arguments can also be set with the set builtin.  Indeed, some of these scripts already do that.
All modern unixes put env at /usr/bin/env
The reason that cron omits /usr/local/bin from itsPATH is to prevent scripts from using stuff in /usr/local/bin.  if that's where bash is installed, then invoking it via absolute path is the wrong solution; you should just adjust PATH instead.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,495,2017-07-26T16:48:59Z,2017-07-28T19:43:25Z,2017-07-28T19:43:45Z,MERGED,True,4,4,4,https://github.com/asomers,Fix bash path in shebangs,1,[],https://github.com/civetweb/civetweb/pull/495,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/495#issuecomment-318745092,"""/bin/bash"" is a Linuxism.  ""/usr/bin/env bash"" is portable.","Sounds very reasonable.
Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,500,2017-08-08T00:01:47Z,2017-08-08T17:21:37Z,2017-08-08T17:22:03Z,MERGED,True,3,3,1,https://github.com/kbranigan,Update mg_websocket_write.md,1,[],https://github.com/civetweb/civetweb/pull/500,https://github.com/kbranigan,1,https://github.com/civetweb/civetweb/pull/500,"Simple typo fixes, nothing significant.","Simple typo fixes, nothing significant.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,500,2017-08-08T00:01:47Z,2017-08-08T17:21:37Z,2017-08-08T17:22:03Z,MERGED,True,3,3,1,https://github.com/kbranigan,Update mg_websocket_write.md,1,[],https://github.com/civetweb/civetweb/pull/500,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/500#issuecomment-321023942,"Simple typo fixes, nothing significant.","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,501,2017-08-08T22:38:54Z,2017-08-08T23:12:32Z,2017-08-13T21:08:51Z,MERGED,True,43,3,2,https://github.com/BigJoe01,Added background script parameters and shutdown detection,1,[],https://github.com/civetweb/civetweb/pull/501,https://github.com/BigJoe01,1,https://github.com/civetweb/civetweb/pull/501,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,501,2017-08-08T22:38:54Z,2017-08-08T23:12:32Z,2017-08-13T21:08:51Z,MERGED,True,43,3,2,https://github.com/BigJoe01,Added background script parameters and shutdown detection,1,[],https://github.com/civetweb/civetweb/pull/501,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/501#issuecomment-321107120,,"Please, everybody, provide at least one or two lines of description for your pull requests.
https://github.com/civetweb/civetweb/blob/master/docs/Contribution.md
Yes, I can read it from the code in a minute or two - but others maybe not.
Anyway:
Thank you for contribution. I will merge it.
Will you provide a brief description for lua_background_script_params, to add it to doc/UserManual.md?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,501,2017-08-08T22:38:54Z,2017-08-08T23:12:32Z,2017-08-13T21:08:51Z,MERGED,True,43,3,2,https://github.com/BigJoe01,Added background script parameters and shutdown detection,1,[],https://github.com/civetweb/civetweb/pull/501,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/501#issuecomment-321107151,,"Merged.
Thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,501,2017-08-08T22:38:54Z,2017-08-08T23:12:32Z,2017-08-13T21:08:51Z,MERGED,True,43,3,2,https://github.com/BigJoe01,Added background script parameters and shutdown detection,1,[],https://github.com/civetweb/civetweb/pull/501,https://github.com/BigJoe01,4,https://github.com/civetweb/civetweb/pull/501#issuecomment-322050118,,"Next week i want update User manual, and next time i adding more information to commit.
Sorry for inconvenience.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,501,2017-08-08T22:38:54Z,2017-08-08T23:12:32Z,2017-08-13T21:08:51Z,MERGED,True,43,3,2,https://github.com/BigJoe01,Added background script parameters and shutdown detection,1,[],https://github.com/civetweb/civetweb/pull/501,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/501#issuecomment-322067662,,"Don't worry, a working contribution is never an inconvenience.
Still, an example for the documentation would be welcome.
Do you have an example how to use the ""shutdown"" variable in Lua?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,506,2017-08-18T16:24:23Z,2017-08-18T21:13:54Z,2017-08-18T23:00:37Z,MERGED,True,14,7,2,https://github.com/kuzi117,Allow disabling executable install.,1,[],https://github.com/civetweb/civetweb/pull/506,https://github.com/kuzi117,1,https://github.com/civetweb/civetweb/pull/506,"This keeps previous functionality by having executable installation on by
default. It also tries to mitigate the ability to ""screw it up"" by only
allowing users that have made themselves advanced to disable installing
the executable.
See: https://cmake.org/cmake/help/v3.9/command/mark_as_advanced.html
Closes #505.","This keeps previous functionality by having executable installation on by
default. It also tries to mitigate the ability to ""screw it up"" by only
allowing users that have made themselves advanced to disable installing
the executable.
See: https://cmake.org/cmake/help/v3.9/command/mark_as_advanced.html
Closes #505.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,506,2017-08-18T16:24:23Z,2017-08-18T21:13:54Z,2017-08-18T23:00:37Z,MERGED,True,14,7,2,https://github.com/kuzi117,Allow disabling executable install.,1,[],https://github.com/civetweb/civetweb/pull/506,https://github.com/codecov-io,2,https://github.com/civetweb/civetweb/pull/506#issuecomment-323444220,"This keeps previous functionality by having executable installation on by
default. It also tries to mitigate the ability to ""screw it up"" by only
allowing users that have made themselves advanced to disable installing
the executable.
See: https://cmake.org/cmake/help/v3.9/command/mark_as_advanced.html
Closes #505.","Codecov Report

Merging #506 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #506   +/-   ##
=======================================
  Coverage   77.82%   77.82%           
=======================================
  Files          13       13           
  Lines        9888     9888           
=======================================
  Hits         7695     7695           
  Misses       2193     2193

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 9ec3c46...2462470. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,506,2017-08-18T16:24:23Z,2017-08-18T21:13:54Z,2017-08-18T23:00:37Z,MERGED,True,14,7,2,https://github.com/kuzi117,Allow disabling executable install.,1,[],https://github.com/civetweb/civetweb/pull/506,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/506#issuecomment-323462374,"This keeps previous functionality by having executable installation on by
default. It also tries to mitigate the ability to ""screw it up"" by only
allowing users that have made themselves advanced to disable installing
the executable.
See: https://cmake.org/cmake/help/v3.9/command/mark_as_advanced.html
Closes #505.","Merged.
Thank you for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,506,2017-08-18T16:24:23Z,2017-08-18T21:13:54Z,2017-08-18T23:00:37Z,MERGED,True,14,7,2,https://github.com/kuzi117,Allow disabling executable install.,1,[],https://github.com/civetweb/civetweb/pull/506,https://github.com/kuzi117,4,https://github.com/civetweb/civetweb/pull/506#issuecomment-323478875,"This keeps previous functionality by having executable installation on by
default. It also tries to mitigate the ability to ""screw it up"" by only
allowing users that have made themselves advanced to disable installing
the executable.
See: https://cmake.org/cmake/help/v3.9/command/mark_as_advanced.html
Closes #505.",Thanks for the quick response!,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,507,2017-08-18T22:11:03Z,2017-08-19T11:20:56Z,2017-08-19T11:20:56Z,CLOSED,False,238,40,3,https://github.com/BigJoe01,Background lua script moved from main thread to external thread,1,[],https://github.com/civetweb/civetweb/pull/507,https://github.com/BigJoe01,1,https://github.com/civetweb/civetweb/pull/507,"The background script old behivor, fully frezee the main thread while script not finished.
In this version, main thread start new background script thread.
When server is closed, background script receive terminate signal and exit, or run once and lua state closed.

Added some thread specific calling, like sleep, root dir, script name.
Background script example attached.
Documentation is not upgraded, my english is not well.","The background script old behivor, fully frezee the main thread while script not finished.
In this version, main thread start new background script thread.
When server is closed, background script receive terminate signal and exit, or run once and lua state closed.

Added some thread specific calling, like sleep, root dir, script name.
Background script example attached.
Documentation is not upgraded, my english is not well.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,507,2017-08-18T22:11:03Z,2017-08-19T11:20:56Z,2017-08-19T11:20:56Z,CLOSED,False,238,40,3,https://github.com/BigJoe01,Background lua script moved from main thread to external thread,1,[],https://github.com/civetweb/civetweb/pull/507,https://github.com/BigJoe01,2,https://github.com/civetweb/civetweb/pull/507#issuecomment-323517246,"The background script old behivor, fully frezee the main thread while script not finished.
In this version, main thread start new background script thread.
When server is closed, background script receive terminate signal and exit, or run once and lua state closed.

Added some thread specific calling, like sleep, root dir, script name.
Background script example attached.
Documentation is not upgraded, my english is not well.",Fixed in another pull request,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,508,2017-08-19T11:56:00Z,2019-03-10T19:48:40Z,2019-03-10T19:48:40Z,CLOSED,False,246,41,4,https://github.com/BigJoe01,Background script moved to external thread,3,[],https://github.com/civetweb/civetweb/pull/508,https://github.com/BigJoe01,1,https://github.com/civetweb/civetweb/pull/508,"Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well","Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,508,2017-08-19T11:56:00Z,2019-03-10T19:48:40Z,2019-03-10T19:48:40Z,CLOSED,False,246,41,4,https://github.com/BigJoe01,Background script moved to external thread,3,[],https://github.com/civetweb/civetweb/pull/508,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/508#issuecomment-323527083,"Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well","Codecov Report

Merging #508 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #508   +/-   ##
=======================================
  Coverage   77.82%   77.82%           
=======================================
  Files          13       13           
  Lines        9888     9888           
=======================================
  Hits         7695     7695           
  Misses       2193     2193



Impacted Files
Coverage Δ





src/civetweb.c
68.63% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b041b20...d388871. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,508,2017-08-19T11:56:00Z,2019-03-10T19:48:40Z,2019-03-10T19:48:40Z,CLOSED,False,246,41,4,https://github.com/BigJoe01,Background script moved to external thread,3,[],https://github.com/civetweb/civetweb/pull/508,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/508#issuecomment-323527591,"Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well","Thanks for your contribution.
I saw you created a new thread for the Lua background script.
Did you think about using a timer instead of a thread, like I did for Lua websockets:
https://github.com/civetweb/civetweb/blob/master/test/websocket.lua ?
mg.set_timeout can be used to register a timer callback to be called after some time, similar to timer in javascript. Also, you don't have to poll for ""isterminated"" but just have an optional ""close"" function defined.
This would make the programming model of a background script similar to the programming model for websockets.
Or is there a reason you need a real thread?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,508,2017-08-19T11:56:00Z,2019-03-10T19:48:40Z,2019-03-10T19:48:40Z,CLOSED,False,246,41,4,https://github.com/BigJoe01,Background script moved to external thread,3,[],https://github.com/civetweb/civetweb/pull/508,https://github.com/BigJoe01,4,https://github.com/civetweb/civetweb/pull/508#issuecomment-323541958,"Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well","Long running script
From my view point, the background script is a long running lua state, not a task based workflow.
If i use internal timer solution, calling back running lua state from another thread is unsafe.
Better option if we creating a new event driven background script.
Main thread vs external thread.
Usually mg_start called from application thread, long running script blocking application main thread, event driven like websocket only freeze for short time.
This cause high processor use in main layer.
Better solution
I place lua state pointer to main thread, and closed at main thread end, and add timer event function.
Then work as timered script too.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,508,2017-08-19T11:56:00Z,2019-03-10T19:48:40Z,2019-03-10T19:48:40Z,CLOSED,False,246,41,4,https://github.com/BigJoe01,Background script moved to external thread,3,[],https://github.com/civetweb/civetweb/pull/508,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/508#issuecomment-323546198,"Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well","The current timer implementation uses one timer thread:
https://github.com/civetweb/civetweb/blob/master/src/timer.inl#L121
This thread can be used to call Lua functions:
https://github.com/civetweb/civetweb/blob/master/src/mod_lua.inl#L1392
It's safe as long as no other thread uses the same Lua state the same time.
The 'lua_action' uses a mutex for this.
The example script:
mg.log(thandler ,""Background script running"")
while ( true) do
	if ( mg.isterminated(thandler ) )
	then
		mg.log(thandler ,""Background script terminated by main thread"")
		break
	end
	mg.sleep(500)
end
mg.log(thandler,""Background script shutdown"") 
With timers would just be
function close()
	mg.log(thandler,""Background script shutdown"") 
end
And if there is an else for if ( mg.isterminated(thandler ) )
mg.set_interval(""timer()"", 0.5)
function timer()
	mg.log(thandler,""Background script cyclic action"") 
end
The timer thread is already an additional internal thread, not the main thread used to call mg_start.
Using an additional background thread or using the existing timer thread makes a difference, if the ""background script cyclic action"" is a long running action blocking the timer thread.
Do you have an example of what you want to do as a cyclic operation in the background script?
Up to now, I only used long operations in the starting phase, e.g. for preparing files, but no cyclic ones, but there may be a good reason for an extra thread.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,508,2017-08-19T11:56:00Z,2019-03-10T19:48:40Z,2019-03-10T19:48:40Z,CLOSED,False,246,41,4,https://github.com/BigJoe01,Background script moved to external thread,3,[],https://github.com/civetweb/civetweb/pull/508,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/508#issuecomment-323604897,"Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well","Sorry, I did not mean to criticize your pull request or frustrate you.
My only intention is to get the best programming model for background scripts, which fits to other programming models in the server and is not overly complex for maintenance.
I definitely want to merge the documentation (d388871), and if a new thread turns out to be the best solution for a particular requirement it's also fine with me.
I just want to discuss all pull requests if they (1) modify or extend the API, (2) affect threading, (3) imply structural changes, (4) have significant influence for maintenance.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,508,2017-08-19T11:56:00Z,2019-03-10T19:48:40Z,2019-03-10T19:48:40Z,CLOSED,False,246,41,4,https://github.com/BigJoe01,Background script moved to external thread,3,[],https://github.com/civetweb/civetweb/pull/508,https://github.com/BigJoe01,7,https://github.com/civetweb/civetweb/pull/508#issuecomment-323605456,"Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well","Hello, not frustrate me. Next commit support timer based background script too.
I write another example for this work flow.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,508,2017-08-19T11:56:00Z,2019-03-10T19:48:40Z,2019-03-10T19:48:40Z,CLOSED,False,246,41,4,https://github.com/BigJoe01,Background script moved to external thread,3,[],https://github.com/civetweb/civetweb/pull/508,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/508#issuecomment-323605924,"Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well","Hello, not frustrate me. Next commit support timer based background script too.
I write another example for this work flow.

Glad to here that.
Need any help or further explanation of this mechanism?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,508,2017-08-19T11:56:00Z,2019-03-10T19:48:40Z,2019-03-10T19:48:40Z,CLOSED,False,246,41,4,https://github.com/BigJoe01,Background script moved to external thread,3,[],https://github.com/civetweb/civetweb/pull/508,https://github.com/BigJoe01,9,https://github.com/civetweb/civetweb/pull/508#issuecomment-323606070,"Older behivor frezee fully the main thread.
Background script running in separeted thread, before main thread exit
send terminate signal to script.

Example added
Check document my english is not well",I saw how it works.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,511,2017-08-29T12:25:15Z,2017-09-02T18:23:02Z,2017-09-02T18:23:02Z,MERGED,True,0,0,0,https://github.com/rzarzynski,Reset mg_connection::content_len for chunked transfer encoding.,2,[],https://github.com/civetweb/civetweb/pull/511,https://github.com/rzarzynski,1,https://github.com/civetweb/civetweb/pull/511,"It looks that the content_len field of mg_connection isn't reset by reset_per_request_attributes() nor in get_requests() when it comes to chunked transfer encoding of HTTP.
I'm not sure whether this can be dangerous or not. I saw similar change in one of CivetWeb's forks. With this PR I would to ask if its is truly needed.","It looks that the content_len field of mg_connection isn't reset by reset_per_request_attributes() nor in get_requests() when it comes to chunked transfer encoding of HTTP.
I'm not sure whether this can be dangerous or not. I saw similar change in one of CivetWeb's forks. With this PR I would to ask if its is truly needed.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,511,2017-08-29T12:25:15Z,2017-09-02T18:23:02Z,2017-09-02T18:23:02Z,MERGED,True,0,0,0,https://github.com/rzarzynski,Reset mg_connection::content_len for chunked transfer encoding.,2,[],https://github.com/civetweb/civetweb/pull/511,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/511#issuecomment-325767680,"It looks that the content_len field of mg_connection isn't reset by reset_per_request_attributes() nor in get_requests() when it comes to chunked transfer encoding of HTTP.
I'm not sure whether this can be dangerous or not. I saw similar change in one of CivetWeb's forks. With this PR I would to ask if its is truly needed.","A correctly set content_len is not required for chunked transfer. The read function more or less starts with
if (chunked encoding used) {
  work without content length
} else {
  use content length or read till connection is closed
}

Without having it tested, I would not set the value to 0 here.
The meaning of 0 is ""We know there is no contents"".
The meaning of -1 would be ""We do not know the content length"".
So it would seem more natural to me to use a value of -1 for initialization.
I would do a test with chunked encoding, http keep alive enabled and multiple requests using the same connection, with one network package containing the end of the first request as well as the beginning of the next one - but crafting these packages manually will require some time (browsers don't work this way, afaik).
Did you experience any actual problems?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,511,2017-08-29T12:25:15Z,2017-09-02T18:23:02Z,2017-09-02T18:23:02Z,MERGED,True,0,0,0,https://github.com/rzarzynski,Reset mg_connection::content_len for chunked transfer encoding.,2,[],https://github.com/civetweb/civetweb/pull/511,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/511#issuecomment-326761549,"It looks that the content_len field of mg_connection isn't reset by reset_per_request_attributes() nor in get_requests() when it comes to chunked transfer encoding of HTTP.
I'm not sure whether this can be dangerous or not. I saw similar change in one of CivetWeb's forks. With this PR I would to ask if its is truly needed.","Thinking about it again, resetting conn->content_len = 0 would was OK for an older version, but I rewrote some code for chunked encoding. The value of -1 means unknown, but it was not used consistently, e.g., reset_per_request_attributes did reset conn->response_info.content_length = conn->request_info.content_length = -1; but not conn->content_len = -1;.
I think it should be consistent now.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,525,2017-09-30T06:27:44Z,2017-09-30T18:02:45Z,2017-09-30T18:02:45Z,MERGED,True,1,1,1,https://github.com/suzukibitman,"Fixed README.md ""OSX->macOS""",1,[],https://github.com/civetweb/civetweb/pull/525,https://github.com/suzukibitman,1,https://github.com/civetweb/civetweb/pull/525,"I fixed README.md.
link here
For Apple changed the original name ""Mac OS X"" to ""OS X"" in 2012 and then to ""macOS"" in 2016.
In the document I think should be better to modify.","I fixed README.md.
link here
For Apple changed the original name ""Mac OS X"" to ""OS X"" in 2012 and then to ""macOS"" in 2016.
In the document I think should be better to modify.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,525,2017-09-30T06:27:44Z,2017-09-30T18:02:45Z,2017-09-30T18:02:45Z,MERGED,True,1,1,1,https://github.com/suzukibitman,"Fixed README.md ""OSX->macOS""",1,[],https://github.com/civetweb/civetweb/pull/525,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/525#issuecomment-333288788,"I fixed README.md.
link here
For Apple changed the original name ""Mac OS X"" to ""OS X"" in 2012 and then to ""macOS"" in 2016.
In the document I think should be better to modify.","Codecov Report

Merging #525 into master will increase coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #525      +/-   ##
=========================================
+ Coverage   77.39%   77.4%   +0.01%     
=========================================
  Files          13      13              
  Lines        9109    9109              
  Branches     1512    1512              
=========================================
+ Hits         7050    7051       +1     
+ Misses       2059    2058       -1



Impacted Files
Coverage Δ





src/civetweb.c
67.54% <0%> (+0.02%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 0f1b435...4237580. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,525,2017-09-30T06:27:44Z,2017-09-30T18:02:45Z,2017-09-30T18:02:45Z,MERGED,True,1,1,1,https://github.com/suzukibitman,"Fixed README.md ""OSX->macOS""",1,[],https://github.com/civetweb/civetweb/pull/525,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/525#issuecomment-333325517,"I fixed README.md.
link here
For Apple changed the original name ""Mac OS X"" to ""OS X"" in 2012 and then to ""macOS"" in 2016.
In the document I think should be better to modify.","Thanks for the info.
Probably I used the name ""OSX"" in several other documents as well.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,528,2017-10-05T03:26:09Z,2017-10-05T18:06:25Z,2017-10-05T18:06:50Z,MERGED,True,23,15,1,https://github.com/kmroz,civetweb: setgid/groups/uid only once if needed,1,[],https://github.com/civetweb/civetweb/pull/528,https://github.com/kmroz,1,https://github.com/civetweb/civetweb/pull/528,"Allows applications to internally use multiple civetweb instances.
Fixes: #527
Signed-off-by: Karol Mroz kmroz@suse.de","Allows applications to internally use multiple civetweb instances.
Fixes: #527
Signed-off-by: Karol Mroz kmroz@suse.de",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,528,2017-10-05T03:26:09Z,2017-10-05T18:06:25Z,2017-10-05T18:06:50Z,MERGED,True,23,15,1,https://github.com/kmroz,civetweb: setgid/groups/uid only once if needed,1,[],https://github.com/civetweb/civetweb/pull/528,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/528#issuecomment-334546091,"Allows applications to internally use multiple civetweb instances.
Fixes: #527
Signed-off-by: Karol Mroz kmroz@suse.de",Closes #527,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,533,2017-10-09T08:24:47Z,2017-10-10T20:56:42Z,2017-10-10T22:16:55Z,MERGED,True,41,0,2,https://github.com/nfrmtkr,Add new callback get_external_ssl_ctx,2,[],https://github.com/civetweb/civetweb/pull/533,https://github.com/nfrmtkr,1,https://github.com/civetweb/civetweb/pull/533,"As discussed in
#526
here is the pull request for this enhancement.","As discussed in
#526
here is the pull request for this enhancement.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,533,2017-10-09T08:24:47Z,2017-10-10T20:56:42Z,2017-10-10T22:16:55Z,MERGED,True,41,0,2,https://github.com/nfrmtkr,Add new callback get_external_ssl_ctx,2,[],https://github.com/civetweb/civetweb/pull/533,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/533#issuecomment-335262287,"As discussed in
#526
here is the pull request for this enhancement.","Thanks for your contribution. There is one compile error (twice) which should be easy to fix, and probably one should make a difference in the call for initializing and uninitializing the SSL_CTX.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,533,2017-10-09T08:24:47Z,2017-10-10T20:56:42Z,2017-10-10T22:16:55Z,MERGED,True,41,0,2,https://github.com/nfrmtkr,Add new callback get_external_ssl_ctx,2,[],https://github.com/civetweb/civetweb/pull/533,https://github.com/nfrmtkr,3,https://github.com/civetweb/civetweb/pull/533#issuecomment-335412721,"As discussed in
#526
here is the pull request for this enhancement.","I've made the changes you've suggestef.
Yes, good idea to hand over ctx.ssl_ctx to the callback in free_ctx.
I've renamed the callback to ""external_ssl_ctx"", seems more generic, but if you don't like it then suggest a new name.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,533,2017-10-09T08:24:47Z,2017-10-10T20:56:42Z,2017-10-10T22:16:55Z,MERGED,True,41,0,2,https://github.com/nfrmtkr,Add new callback get_external_ssl_ctx,2,[],https://github.com/civetweb/civetweb/pull/533,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/533#issuecomment-335605427,"As discussed in
#526
here is the pull request for this enhancement.","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,533,2017-10-09T08:24:47Z,2017-10-10T20:56:42Z,2017-10-10T22:16:55Z,MERGED,True,41,0,2,https://github.com/nfrmtkr,Add new callback get_external_ssl_ctx,2,[],https://github.com/civetweb/civetweb/pull/533,https://github.com/apps/codecov,5,https://github.com/civetweb/civetweb/pull/533#issuecomment-335624659,"As discussed in
#526
here is the pull request for this enhancement.","Codecov Report

Merging #533 into master will decrease coverage by 0.05%.
The diff coverage is 61.11%.


@@            Coverage Diff             @@
##           master     #533      +/-   ##
==========================================
- Coverage   76.99%   76.94%   -0.06%     
==========================================
  Files          13       13              
  Lines        9245     9263      +18     
  Branches     1532     1535       +3     
==========================================
+ Hits         7118     7127       +9     
- Misses       2127     2136       +9



Impacted Files
Coverage Δ





src/civetweb.c
67.94% <61.11%> (-0.07%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 2428ade...4601405. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,537,2017-10-13T12:43:51Z,2017-10-13T16:27:46Z,2017-10-14T06:27:29Z,MERGED,True,5,3,2,https://github.com/nfrmtkr,Provide client peer certificate (X509) in mg_client_cert structure.,1,[],https://github.com/civetweb/civetweb/pull/537,https://github.com/nfrmtkr,1,https://github.com/civetweb/civetweb/pull/537,"Result of #531 ""Allow access to mg_connection.SSL""","Result of #531 ""Allow access to mg_connection.SSL""",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,537,2017-10-13T12:43:51Z,2017-10-13T16:27:46Z,2017-10-14T06:27:29Z,MERGED,True,5,3,2,https://github.com/nfrmtkr,Provide client peer certificate (X509) in mg_client_cert structure.,1,[],https://github.com/civetweb/civetweb/pull/537,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/537#issuecomment-336501903,"Result of #531 ""Allow access to mg_connection.SSL""","Merged.
Thanks for your contribution.
Closes #531",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,537,2017-10-13T12:43:51Z,2017-10-13T16:27:46Z,2017-10-14T06:27:29Z,MERGED,True,5,3,2,https://github.com/nfrmtkr,Provide client peer certificate (X509) in mg_client_cert structure.,1,[],https://github.com/civetweb/civetweb/pull/537,https://github.com/apps/codecov,3,https://github.com/civetweb/civetweb/pull/537#issuecomment-336562269,"Result of #531 ""Allow access to mg_connection.SSL""","Codecov Report

Merging #537 into master will decrease coverage by 0.01%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##           master     #537      +/-   ##
==========================================
- Coverage   76.98%   76.96%   -0.02%     
==========================================
  Files          13       13              
  Lines        9272     9274       +2     
  Branches     1536     1536              
==========================================
  Hits         7138     7138              
- Misses       2134     2136       +2



Impacted Files
Coverage Δ





src/civetweb.c
68.01% <100%> (-0.03%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update e9e9866...f460b61. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,538,2017-10-15T07:13:57Z,2017-10-15T07:38:01Z,2018-09-26T11:01:44Z,MERGED,True,2,2,1,https://github.com/xtne6f,Delete Byte Order Mark,1,[],https://github.com/civetweb/civetweb/pull/538,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/538,I think plain ASCII is the safest format for most compilers/editors.,I think plain ASCII is the safest format for most compilers/editors.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,538,2017-10-15T07:13:57Z,2017-10-15T07:38:01Z,2018-09-26T11:01:44Z,MERGED,True,2,2,1,https://github.com/xtne6f,Delete Byte Order Mark,1,[],https://github.com/civetweb/civetweb/pull/538,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/538#issuecomment-336692728,I think plain ASCII is the safest format for most compilers/editors.,"Codecov Report

Merging #538 into master will increase coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #538      +/-   ##
=========================================
+ Coverage   77.07%   77.1%   +0.03%     
=========================================
  Files          13      13              
  Lines        9335    9335              
  Branches     1537    1537              
=========================================
+ Hits         7195    7198       +3     
+ Misses       2140    2137       -3



Impacted Files
Coverage Δ





src/civetweb.c
68% <ø> (+0.05%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update ba59481...17b4b91. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,538,2017-10-15T07:13:57Z,2017-10-15T07:38:01Z,2018-09-26T11:01:44Z,MERGED,True,2,2,1,https://github.com/xtne6f,Delete Byte Order Mark,1,[],https://github.com/civetweb/civetweb/pull/538,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/538#issuecomment-336692973,I think plain ASCII is the safest format for most compilers/editors.,"I did not know there is a BOM now - some editor added it, I don't know which one, so it probably will come back.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,539,2017-10-16T13:11:27Z,2017-10-16T16:47:52Z,2018-09-26T11:02:24Z,MERGED,True,1,11,1,https://github.com/xtne6f,Trivial cleanups,2,[],https://github.com/civetweb/civetweb/pull/539,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/539,"The pre-condition I commented on 9e66683 is currently always satisfied, so this is not a security fix.","The pre-condition I commented on 9e66683 is currently always satisfied, so this is not a security fix.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,539,2017-10-16T13:11:27Z,2017-10-16T16:47:52Z,2018-09-26T11:02:24Z,MERGED,True,1,11,1,https://github.com/xtne6f,Trivial cleanups,2,[],https://github.com/civetweb/civetweb/pull/539,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/539#issuecomment-336904956,"The pre-condition I commented on 9e66683 is currently always satisfied, so this is not a security fix.","Codecov Report

Merging #539 into master will increase coverage by 0.03%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##           master     #539      +/-   ##
==========================================
+ Coverage   77.09%   77.13%   +0.03%     
==========================================
  Files          13       13              
  Lines        9335     9333       -2     
  Branches     1537     1536       -1     
==========================================
+ Hits         7197     7199       +2     
+ Misses       2138     2134       -4



Impacted Files
Coverage Δ





src/civetweb.c
68.04% <100%> (+0.06%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5abcca3...9e66683. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,540,2017-10-17T14:41:08Z,2017-10-17T17:35:21Z,2018-09-26T11:03:48Z,MERGED,True,5,13,1,https://github.com/xtne6f,Fix enable_auth_domain_check,1,[],https://github.com/civetweb/civetweb/pull/540,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/540,The current behavior is different from what UserManual.md says.,The current behavior is different from what UserManual.md says.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,540,2017-10-17T14:41:08Z,2017-10-17T17:35:21Z,2018-09-26T11:03:48Z,MERGED,True,5,13,1,https://github.com/xtne6f,Fix enable_auth_domain_check,1,[],https://github.com/civetweb/civetweb/pull/540,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/540#issuecomment-337281742,The current behavior is different from what UserManual.md says.,"Codecov Report

Merging #540 into master will increase coverage by 0.02%.
The diff coverage is 75%.


@@            Coverage Diff             @@
##           master     #540      +/-   ##
==========================================
+ Coverage    77.1%   77.12%   +0.02%     
==========================================
  Files          13       13              
  Lines        9333     9329       -4     
  Branches     1536     1534       -2     
==========================================
- Hits         7196     7195       -1     
+ Misses       2137     2134       -3



Impacted Files
Coverage Δ





src/civetweb.c
68.02% <75%> (+0.03%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 9aa7072...296b3b2. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,541,2017-10-19T16:27:16Z,2017-10-19T17:55:33Z,2018-09-26T11:01:16Z,MERGED,True,6,4,2,https://github.com/xtne6f,Restore C89/C90 compliance,1,[],https://github.com/civetweb/civetweb/pull/541,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/541,I still need it for Visual C++2010.,I still need it for Visual C++2010.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,541,2017-10-19T16:27:16Z,2017-10-19T17:55:33Z,2018-09-26T11:01:16Z,MERGED,True,6,4,2,https://github.com/xtne6f,Restore C89/C90 compliance,1,[],https://github.com/civetweb/civetweb/pull/541,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/541#issuecomment-338006224,I still need it for Visual C++2010.,"Codecov Report

Merging #541 into master will increase coverage by 0.05%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #541      +/-   ##
==========================================
+ Coverage   77.07%   77.12%   +0.05%     
==========================================
  Files          13       13              
  Lines        9329     9329              
  Branches     1534     1534              
==========================================
+ Hits         7190     7195       +5     
+ Misses       2139     2134       -5



Impacted Files
Coverage Δ





src/civetweb.c
68.02% <ø> (+0.09%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 2c52c48...a0a10ad. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,547,2017-11-03T11:01:50Z,2017-11-03T17:50:37Z,2017-11-03T17:50:49Z,MERGED,True,19,19,1,https://github.com/abramobagnara,Use caching consistently for static file requests.,1,[],https://github.com/civetweb/civetweb/pull/547,https://github.com/abramobagnara,1,https://github.com/civetweb/civetweb/pull/547,This allow to exploit caching also for mg_send_file family helpers.,This allow to exploit caching also for mg_send_file family helpers.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,547,2017-11-03T11:01:50Z,2017-11-03T17:50:37Z,2017-11-03T17:50:49Z,MERGED,True,19,19,1,https://github.com/abramobagnara,Use caching consistently for static file requests.,1,[],https://github.com/civetweb/civetweb/pull/547,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/547#issuecomment-341778973,This allow to exploit caching also for mg_send_file family helpers.,"Thanks for your contribution,
merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,549,2017-11-06T20:35:29Z,2017-11-08T18:46:06Z,2018-09-26T11:03:10Z,MERGED,True,17,17,1,https://github.com/xtne6f,Fix about PATH_MAX,2,[],https://github.com/civetweb/civetweb/pull/549,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/549,"The second 664d7af is optional. If you don't want, I'll remove it.
For CJK languages, 260(MAX_PATH) bytes in UTF-8 are only 86 elements in wchar_t. Sometimes I suffer this limit.","The second 664d7af is optional. If you don't want, I'll remove it.
For CJK languages, 260(MAX_PATH) bytes in UTF-8 are only 86 elements in wchar_t. Sometimes I suffer this limit.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,549,2017-11-06T20:35:29Z,2017-11-08T18:46:06Z,2018-09-26T11:03:10Z,MERGED,True,17,17,1,https://github.com/xtne6f,Fix about PATH_MAX,2,[],https://github.com/civetweb/civetweb/pull/549,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/549#issuecomment-342919478,"The second 664d7af is optional. If you don't want, I'll remove it.
For CJK languages, 260(MAX_PATH) bytes in UTF-8 are only 86 elements in wchar_t. Sometimes I suffer this limit.","Merged,
thank you.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,554,2017-11-20T23:37:01Z,2017-11-21T21:13:39Z,2017-11-21T21:13:54Z,MERGED,True,55,46,3,https://github.com/jrepp,Improving the ability to embed civetweb into a parent CMakeLists.txt,3,[],https://github.com/civetweb/civetweb/pull/554,https://github.com/jrepp,1,https://github.com/civetweb/civetweb/pull/554,"Adding prefixes to variable names and targets
Adding the ability to turn off the web server executable","Adding prefixes to variable names and targets
Adding the ability to turn off the web server executable",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,554,2017-11-20T23:37:01Z,2017-11-21T21:13:39Z,2017-11-21T21:13:54Z,MERGED,True,55,46,3,https://github.com/jrepp,Improving the ability to embed civetweb into a parent CMakeLists.txt,3,[],https://github.com/civetweb/civetweb/pull/554,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/554#issuecomment-345902459,"Adding prefixes to variable names and targets
Adding the ability to turn off the web server executable","Codecov Report

Merging #554 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #554      +/-   ##
==========================================
- Coverage   76.87%   76.85%   -0.02%     
==========================================
  Files          13       13              
  Lines        9317     9317              
  Branches     1533     1533              
==========================================
- Hits         7162     7161       -1     
- Misses       2155     2156       +1



Impacted Files
Coverage Δ





src/civetweb.c
68.07% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 9351729...a3db490. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,554,2017-11-20T23:37:01Z,2017-11-21T21:13:39Z,2017-11-21T21:13:54Z,MERGED,True,55,46,3,https://github.com/jrepp,Improving the ability to embed civetweb into a parent CMakeLists.txt,3,[],https://github.com/civetweb/civetweb/pull/554,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/554#issuecomment-346162908,"Adding prefixes to variable names and targets
Adding the ability to turn off the web server executable","Thanks for your contribution
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/ColdenCullen,1,https://github.com/civetweb/civetweb/pull/556,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/556#issuecomment-346481617,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","Codecov Report

Merging #556 into master will decrease coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #556      +/-   ##
==========================================
- Coverage   76.89%   76.85%   -0.04%     
==========================================
  Files          13       13              
  Lines        9317     9317              
  Branches     1533     1533              
==========================================
- Hits         7164     7161       -3     
- Misses       2153     2156       +3



Impacted Files
Coverage Δ





src/civetweb.c
68.07% <ø> (-0.06%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b3cd4a3...59b937f. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/556#issuecomment-346482093,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","Merged.
Thanks for your contribution",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/ColdenCullen,4,https://github.com/civetweb/civetweb/pull/556#issuecomment-346482481,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","Thanks for the quick merge!
Side note, any plans for a new release any time soon? It's been a while since the last one.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/556#issuecomment-346483745,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","Last release, V1.10, was end of September 2017, less than two months ago. Usually I collect several new features for a new release (1.11). If there is a critical bug, I will do a bug fix release (1.10.1).
What would you need to be released?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/ColdenCullen,6,https://github.com/civetweb/civetweb/pull/556#issuecomment-346488641,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","That seems like a reasonable strategy, carry on!
I don't need anything per say, but it's kind of a pain in the butt to pull new versions into my project, so I was hoping I could do it on a clean version number. It doesn't really get me anything valuable other than a sense of cleanliness 😄 No worries, I can just tag this commit.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/556#issuecomment-346488982,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","If you only need this change, you could also use a 1.10 plus patch 59b937f",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/ColdenCullen,8,https://github.com/civetweb/civetweb/pull/556#issuecomment-346489489,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","Honestly the builds seem stable, so I'll just take master at 59b937f, or I'll just apply that patch on top of my current version.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/bel2125,9,https://github.com/civetweb/civetweb/pull/556#issuecomment-346491162,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","All automatic continuous integration (CI) tests for Linux are OK for this version.
The CI tests for Windows are not yet completed (see here). If they work as well, the only thing missing for a release are:

some manual tests ... but you have to do your own tests anyway
cleaning some things up, including documentation, CREDITS.md, RELEASE_NOTES.md, ... but they do not change functionality
I will not be a dedicated bug fix branch for a not released version ... but I can fix a bug in the current HEAD version (and last released version), and you can either update or apply the fix to your private branch

You probably can live with that ;-)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,556,2017-11-22T20:37:12Z,2017-11-22T21:47:53Z,2017-11-22T23:05:01Z,MERGED,True,3,5,1,https://github.com/ColdenCullen,#394: static_assert on Windows with Clang,1,[],https://github.com/civetweb/civetweb/pull/556,https://github.com/ColdenCullen,10,https://github.com/civetweb/civetweb/pull/556#issuecomment-346492311,"When C11 is available, use _Static_assert.
Otherwise, if C++11 is available, use 'static_assert'.
Finally, fallback on the custom array-index based implementation.","Ha yeah, I think I'll be ok 😄
I'll keep an eye on those Windows builds, and if those work I'll start ingesting. If the Windows builds break... I'll run and hide 😄",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,559,2017-12-01T11:03:04Z,2017-12-02T16:17:46Z,2017-12-02T16:20:55Z,MERGED,True,13,1,2,https://github.com/newsoft,Fix truncation check in (deprecated) mg_upload_field_found() function.,2,[],https://github.com/civetweb/civetweb/pull/559,https://github.com/newsoft,1,https://github.com/civetweb/civetweb/pull/559,"The logic is inverted here. If 'truncated' has been set to 'true' by mg_snprintf(), then it means the file path was too long.","The logic is inverted here. If 'truncated' has been set to 'true' by mg_snprintf(), then it means the file path was too long.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,559,2017-12-01T11:03:04Z,2017-12-02T16:17:46Z,2017-12-02T16:20:55Z,MERGED,True,13,1,2,https://github.com/newsoft,Fix truncation check in (deprecated) mg_upload_field_found() function.,2,[],https://github.com/civetweb/civetweb/pull/559,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/559#issuecomment-348473980,"The logic is inverted here. If 'truncated' has been set to 'true' by mg_snprintf(), then it means the file path was too long.","Codecov Report

Merging #559 into master will decrease coverage by 0.09%.
The diff coverage is 0%.


@@            Coverage Diff            @@
##           master     #559     +/-   ##
=========================================
- Coverage   76.84%   76.75%   -0.1%     
=========================================
  Files          13       13             
  Lines        9317     9326      +9     
  Branches     1533     1536      +3     
=========================================
- Hits         7160     7158      -2     
- Misses       2157     2168     +11



Impacted Files
Coverage Δ





src/civetweb.c
68.01% <ø> (-0.04%)
⬇️


src/handle_form.inl
73.72% <0%> (-1.83%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update cda9b71...27be5f3. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,559,2017-12-01T11:03:04Z,2017-12-02T16:17:46Z,2017-12-02T16:20:55Z,MERGED,True,13,1,2,https://github.com/newsoft,Fix truncation check in (deprecated) mg_upload_field_found() function.,2,[],https://github.com/civetweb/civetweb/pull/559,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/559#issuecomment-348702486,"The logic is inverted here. If 'truncated' has been set to 'true' by mg_snprintf(), then it means the file path was too long.","Merged.
Thank you for your contribution.
As you already know, mg_upload_field_found is a deprecated function.
It is in a MG_LEGACY_INTERFACE define and may be removed in later versions.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,562,2017-12-12T19:37:11Z,2017-12-13T19:38:29Z,2017-12-13T19:38:30Z,MERGED,True,31,0,2,https://github.com/marcoafo,Adds static method to get post data from CivetServer,2,[],https://github.com/civetweb/civetweb/pull/562,https://github.com/marcoafo,1,https://github.com/civetweb/civetweb/pull/562,"I'm using civetweb with JSON requests/responses, so I needed to access the response body directly. I know that the C API can handle it pretty well, but lately I've been using the C++ classes. And either I can't find it or there isn't a clear method to retrieve it.
So I added this small part of code. Since ""connections"" map is protected, I can access connection post data only by a static method.
I've used this for the several past weeks even in production. I honestly didn't run the C tests because this affects the C++ interface. Does it have test routines for this too?
Thanks!","I'm using civetweb with JSON requests/responses, so I needed to access the response body directly. I know that the C API can handle it pretty well, but lately I've been using the C++ classes. And either I can't find it or there isn't a clear method to retrieve it.
So I added this small part of code. Since ""connections"" map is protected, I can access connection post data only by a static method.
I've used this for the several past weeks even in production. I honestly didn't run the C tests because this affects the C++ interface. Does it have test routines for this too?
Thanks!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,562,2017-12-12T19:37:11Z,2017-12-13T19:38:29Z,2017-12-13T19:38:30Z,MERGED,True,31,0,2,https://github.com/marcoafo,Adds static method to get post data from CivetServer,2,[],https://github.com/civetweb/civetweb/pull/562,https://github.com/marcoafo,2,https://github.com/civetweb/civetweb/pull/562#issuecomment-351175789,"I'm using civetweb with JSON requests/responses, so I needed to access the response body directly. I know that the C API can handle it pretty well, but lately I've been using the C++ classes. And either I can't find it or there isn't a clear method to retrieve it.
So I added this small part of code. Since ""connections"" map is protected, I can access connection post data only by a static method.
I've used this for the several past weeks even in production. I honestly didn't run the C tests because this affects the C++ interface. Does it have test routines for this too?
Thanks!","I think this code breaks with huge posts. So a better function would be:
std::string
CivetServer::getPostData(struct mg_connection *conn)
{
	mg_lock_connection(conn);
	std::string postdata;
	char buf[2048];
	int r = mg_read(conn, buf, sizeof(buf));
	while (r > 0) {
		std::string p = std::string(buf);
		p.resize(r);
		postdata += p;
		r = mg_read(conn, buf, sizeof(buf));
	}
	mg_unlock_connection(conn);
	return postdata;
}",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,562,2017-12-12T19:37:11Z,2017-12-13T19:38:29Z,2017-12-13T19:38:30Z,MERGED,True,31,0,2,https://github.com/marcoafo,Adds static method to get post data from CivetServer,2,[],https://github.com/civetweb/civetweb/pull/562,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/562#issuecomment-351499215,"I'm using civetweb with JSON requests/responses, so I needed to access the response body directly. I know that the C API can handle it pretty well, but lately I've been using the C++ classes. And either I can't find it or there isn't a clear method to retrieve it.
So I added this small part of code. Since ""connections"" map is protected, I can access connection post data only by a static method.
I've used this for the several past weeks even in production. I honestly didn't run the C tests because this affects the C++ interface. Does it have test routines for this too?
Thanks!","Thanks for your contribution.
I am only using the C API. The C++ API is far from complete, and I mostly add only functions contributed by someone else.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,566,2017-12-13T20:00:22Z,2017-12-13T20:14:26Z,2017-12-13T23:00:41Z,MERGED,True,8,10,1,https://github.com/marcoafo,Changed method getPostData from CivetServer to a more robust method,1,[],https://github.com/civetweb/civetweb/pull/566,https://github.com/marcoafo,1,https://github.com/civetweb/civetweb/pull/566,The old method seems to break if post data is too large or has some strange chars. This one is more stable and C++ like.,The old method seems to break if post data is too large or has some strange chars. This one is more stable and C++ like.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,566,2017-12-13T20:00:22Z,2017-12-13T20:14:26Z,2017-12-13T23:00:41Z,MERGED,True,8,10,1,https://github.com/marcoafo,Changed method getPostData from CivetServer to a more robust method,1,[],https://github.com/civetweb/civetweb/pull/566,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/566#issuecomment-351508889,The old method seems to break if post data is too large or has some strange chars. This one is more stable and C++ like.,"Agreed.
I thought that code was already the previous pull request, but it was just a comment ...
Anyway, thanks for your contribution",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,566,2017-12-13T20:00:22Z,2017-12-13T20:14:26Z,2017-12-13T23:00:41Z,MERGED,True,8,10,1,https://github.com/marcoafo,Changed method getPostData from CivetServer to a more robust method,1,[],https://github.com/civetweb/civetweb/pull/566,https://github.com/marcoafo,3,https://github.com/civetweb/civetweb/pull/566#issuecomment-351509655,The old method seems to break if post data is too large or has some strange chars. This one is more stable and C++ like.,You're mostly welcome!,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,566,2017-12-13T20:00:22Z,2017-12-13T20:14:26Z,2017-12-13T23:00:41Z,MERGED,True,8,10,1,https://github.com/marcoafo,Changed method getPostData from CivetServer to a more robust method,1,[],https://github.com/civetweb/civetweb/pull/566,https://github.com/apps/codecov,4,https://github.com/civetweb/civetweb/pull/566#issuecomment-351552508,The old method seems to break if post data is too large or has some strange chars. This one is more stable and C++ like.,"Codecov Report

Merging #566 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #566   +/-   ##
=======================================
  Coverage   77.89%   77.89%           
=======================================
  Files          13       13           
  Lines        9428     9428           
  Branches     1552     1552           
=======================================
  Hits         7344     7344           
  Misses       2084     2084

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 9528275...706122d. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,567,2017-12-15T10:07:37Z,2017-12-17T09:38:24Z,2017-12-19T07:58:04Z,MERGED,True,3,3,1,None,Update civetweb.c,1,[],https://github.com/civetweb/civetweb/pull/567,None,1,https://github.com/civetweb/civetweb/pull/567,Initialize has_body with correct value before it is used.,Initialize has_body with correct value before it is used.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,567,2017-12-15T10:07:37Z,2017-12-17T09:38:24Z,2017-12-19T07:58:04Z,MERGED,True,3,3,1,None,Update civetweb.c,1,[],https://github.com/civetweb/civetweb/pull/567,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/567#issuecomment-352243264,Initialize has_body with correct value before it is used.,"Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,573,2018-01-04T16:11:31Z,2018-01-13T00:03:07Z,2018-01-13T00:03:07Z,CLOSED,False,4,4,1,https://github.com/colmartofus,Fix ret cast type on evhdl to work on older compilers.,2,[],https://github.com/civetweb/civetweb/pull/573,https://github.com/colmartofus,1,https://github.com/civetweb/civetweb/pull/573,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,573,2018-01-04T16:11:31Z,2018-01-13T00:03:07Z,2018-01-13T00:03:07Z,CLOSED,False,4,4,1,https://github.com/colmartofus,Fix ret cast type on evhdl to work on older compilers.,2,[],https://github.com/civetweb/civetweb/pull/573,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/573#issuecomment-355546007,,"Codecov Report

Merging #573 into master will not change coverage.
The diff coverage is n/a.


@@          Coverage Diff           @@
##           master    #573   +/-   ##
======================================
  Coverage    77.9%   77.9%           
======================================
  Files          13      13           
  Lines        9450    9450           
======================================
  Hits         7362    7362           
  Misses       2088    2088



Impacted Files
Coverage Δ





src/civetweb.c
69.74% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5e96189...770a3b3. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,573,2018-01-04T16:11:31Z,2018-01-13T00:03:07Z,2018-01-13T00:03:07Z,CLOSED,False,4,4,1,https://github.com/colmartofus,Fix ret cast type on evhdl to work on older compilers.,2,[],https://github.com/civetweb/civetweb/pull/573,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/573#issuecomment-355641909,,"d3bf8b1 is certainly correct.
But 770a3b3, replacing (int)eventhdl by *(int *)eventhdl, will not have the expected effect.
create_event does
int evhdl1 = eventfd(0, EFD_CLOEXEC);
ret = (int *)evhdl1;
return (void *) ret

event_wait(void *evhdl1) does
**evhdl2 = *(int *)evhdl1;**
read(evhdl2, ...)

this will effectively interpret evhdl1 as a pointer, and even if this does not yield in an access violation, evhdl2 will be different.
It will only work if you drop
 	if (sizeof(int) == sizeof(void *)) {
		ret = (int *)evhdl;
 	} else {

completely, and only work with the else branch
 		ret = (int *)mg_malloc(sizeof(int));
 		if (ret) {
 			*ret = evhdl;
 		} else {
 			(void)close(evhdl);
}",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,573,2018-01-04T16:11:31Z,2018-01-13T00:03:07Z,2018-01-13T00:03:07Z,CLOSED,False,4,4,1,https://github.com/colmartofus,Fix ret cast type on evhdl to work on older compilers.,2,[],https://github.com/civetweb/civetweb/pull/573,https://github.com/colmartofus,4,https://github.com/civetweb/civetweb/pull/573#issuecomment-355994392,,You're right. I'll try to clean this up.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,573,2018-01-04T16:11:31Z,2018-01-13T00:03:07Z,2018-01-13T00:03:07Z,CLOSED,False,4,4,1,https://github.com/colmartofus,Fix ret cast type on evhdl to work on older compilers.,2,[],https://github.com/civetweb/civetweb/pull/573,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/573#issuecomment-356133210,,"Maybe the entire if (sizeof(int) == sizeof(void *)) special case is not really required.
It only saves one ""malloc"" when creating the event.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,573,2018-01-04T16:11:31Z,2018-01-13T00:03:07Z,2018-01-13T00:03:07Z,CLOSED,False,4,4,1,https://github.com/colmartofus,Fix ret cast type on evhdl to work on older compilers.,2,[],https://github.com/civetweb/civetweb/pull/573,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/573#issuecomment-357388194,,cherry picked d3bf8b1,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,575,2018-01-07T22:09:02Z,2018-01-08T23:34:38Z,2018-01-08T23:35:39Z,MERGED,True,52,52,30,https://github.com/thdot,Fixed a lot of misspellings in source code and documentation,1,[],https://github.com/civetweb/civetweb/pull/575,https://github.com/thdot,1,https://github.com/civetweb/civetweb/pull/575,Fixed misspellings found by codespell.,Fixed misspellings found by codespell.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,575,2018-01-07T22:09:02Z,2018-01-08T23:34:38Z,2018-01-08T23:35:39Z,MERGED,True,52,52,30,https://github.com/thdot,Fixed a lot of misspellings in source code and documentation,1,[],https://github.com/civetweb/civetweb/pull/575,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/575#issuecomment-356131000,Fixed misspellings found by codespell.,"Thanks a lot.
I have to try codespell myself ...",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,578,2018-01-17T15:57:38Z,2018-01-17T19:05:54Z,2018-01-18T09:02:20Z,MERGED,True,5,5,2,https://github.com/colmartofus,Add lua casts for clang++.,1,[],https://github.com/civetweb/civetweb/pull/578,https://github.com/colmartofus,1,https://github.com/civetweb/civetweb/pull/578,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,578,2018-01-17T15:57:38Z,2018-01-17T19:05:54Z,2018-01-18T09:02:20Z,MERGED,True,5,5,2,https://github.com/colmartofus,Add lua casts for clang++.,1,[],https://github.com/civetweb/civetweb/pull/578,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/578#issuecomment-358409018,,"Thanks for your contribution ... merged.
But, please provide at least one line (or even just three words) of description.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,578,2018-01-17T15:57:38Z,2018-01-17T19:05:54Z,2018-01-18T09:02:20Z,MERGED,True,5,5,2,https://github.com/colmartofus,Add lua casts for clang++.,1,[],https://github.com/civetweb/civetweb/pull/578,https://github.com/colmartofus,3,https://github.com/civetweb/civetweb/pull/578#issuecomment-358581482,,Alright. I'll try to be more descriptive in future. The reason I was doing this was so that I could run clang static analysis (compile time checks) and address sanitizer (run time checks). Neither found any kind of errors in Civet.,True,{'THUMBS_UP': ['https://github.com/bel2125']}
civetweb/civetweb,https://github.com/civetweb/civetweb,579,2018-01-17T16:11:19Z,2018-01-17T19:07:21Z,2018-01-17T19:07:29Z,MERGED,True,1,1,1,https://github.com/colmartofus,Add malloc cast for clang++.,1,[],https://github.com/civetweb/civetweb/pull/579,https://github.com/colmartofus,1,https://github.com/civetweb/civetweb/pull/579,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,579,2018-01-17T16:11:19Z,2018-01-17T19:07:21Z,2018-01-17T19:07:29Z,MERGED,True,1,1,1,https://github.com/colmartofus,Add malloc cast for clang++.,1,[],https://github.com/civetweb/civetweb/pull/579,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/579#issuecomment-358409162,,Merged. Thanks.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,581,2018-01-18T17:38:10Z,2018-01-18T21:01:37Z,2018-01-18T21:01:37Z,MERGED,True,1,1,1,https://github.com/TorbenJ,Comment (currently) superfluous include directive.,1,[],https://github.com/civetweb/civetweb/pull/581,https://github.com/TorbenJ,1,https://github.com/civetweb/civetweb/pull/581,"I just started to embed this library into my project and noticed this required but superfluous include directive.
I don't know if this include is needed in the near future so I just commented it out.","I just started to embed this library into my project and noticed this required but superfluous include directive.
I don't know if this include is needed in the near future so I just commented it out.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,581,2018-01-18T17:38:10Z,2018-01-18T21:01:37Z,2018-01-18T21:01:37Z,MERGED,True,1,1,1,https://github.com/TorbenJ,Comment (currently) superfluous include directive.,1,[],https://github.com/civetweb/civetweb/pull/581,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/581#issuecomment-358780304,"I just started to embed this library into my project and noticed this required but superfluous include directive.
I don't know if this include is needed in the near future so I just commented it out.","It's some remains of an old idea to move all file operations into a different file - back from a time where there was some ""file in memory"" implementation no-one really needs any more (see https://groups.google.com/forum/#!topic/civetweb/h9HT4CmeYqI).
It can be dropped",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,589,2018-02-06T15:14:28Z,2018-02-07T20:09:50Z,2018-02-07T20:10:08Z,MERGED,True,82,3,1,https://github.com/hcodina,Avoid request handler call after unregistering,1,[],https://github.com/civetweb/civetweb/pull/589,https://github.com/hcodina,1,https://github.com/civetweb/civetweb/pull/589,"This commit guarantees that the handler unregistered using
mg_set_request_handler() will not be called after
mg_set_request_handler() returns.
It prevents some kind of race condition between
mg_set_request_handler() and handler use in handle_request()
Signed-off-by: Herve Codina Herve.CODINA@celad.com","This commit guarantees that the handler unregistered using
mg_set_request_handler() will not be called after
mg_set_request_handler() returns.
It prevents some kind of race condition between
mg_set_request_handler() and handler use in handle_request()
Signed-off-by: Herve Codina Herve.CODINA@celad.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,589,2018-02-06T15:14:28Z,2018-02-07T20:09:50Z,2018-02-07T20:10:08Z,MERGED,True,82,3,1,https://github.com/hcodina,Avoid request handler call after unregistering,1,[],https://github.com/civetweb/civetweb/pull/589,https://github.com/hcodina,2,https://github.com/civetweb/civetweb/pull/589#issuecomment-363455399,"This commit guarantees that the handler unregistered using
mg_set_request_handler() will not be called after
mg_set_request_handler() returns.
It prevents some kind of race condition between
mg_set_request_handler() and handler use in handle_request()
Signed-off-by: Herve Codina Herve.CODINA@celad.com","This pull request is about issue #588 : mg_set_request_handler race condition
I do the work only for REQUEST_HANDLER handler type (I do not touch anything concerning websocket or authentication handlers).
Thanks for your reading and comments.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,589,2018-02-06T15:14:28Z,2018-02-07T20:09:50Z,2018-02-07T20:10:08Z,MERGED,True,82,3,1,https://github.com/hcodina,Avoid request handler call after unregistering,1,[],https://github.com/civetweb/civetweb/pull/589,https://github.com/apps/codecov,3,https://github.com/civetweb/civetweb/pull/589#issuecomment-363463655,"This commit guarantees that the handler unregistered using
mg_set_request_handler() will not be called after
mg_set_request_handler() returns.
It prevents some kind of race condition between
mg_set_request_handler() and handler use in handle_request()
Signed-off-by: Herve Codina Herve.CODINA@celad.com","Codecov Report

Merging #589 into master will decrease coverage by 0.01%.
The diff coverage is 64.28%.


@@            Coverage Diff             @@
##           master     #589      +/-   ##
==========================================
- Coverage   77.78%   77.76%   -0.02%     
==========================================
  Files          13       13              
  Lines        9484     9526      +42     
==========================================
+ Hits         7377     7408      +31     
- Misses       2107     2118      +11



Impacted Files
Coverage Δ





src/civetweb.c
69.68% <64.28%> (+0.03%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update c96df1f...04a696c. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,589,2018-02-06T15:14:28Z,2018-02-07T20:09:50Z,2018-02-07T20:10:08Z,MERGED,True,82,3,1,https://github.com/hcodina,Avoid request handler call after unregistering,1,[],https://github.com/civetweb/civetweb/pull/589,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/589#issuecomment-363894973,"This commit guarantees that the handler unregistered using
mg_set_request_handler() will not be called after
mg_set_request_handler() returns.
It prevents some kind of race condition between
mg_set_request_handler() and handler use in handle_request()
Signed-off-by: Herve Codina Herve.CODINA@celad.com","Thanks for your contribution. Merged.
Closes #588",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,590,2018-02-12T15:30:22Z,2018-02-19T18:57:15Z,2018-02-19T18:57:15Z,MERGED,True,46,0,1,https://github.com/abramobagnara,Added replacement for timegm where _mkgmtime can be missing.,1,[],https://github.com/civetweb/civetweb/pull/590,https://github.com/abramobagnara,1,https://github.com/civetweb/civetweb/pull/590,Please consider to pull this as a solution for the part of issue #278 related to missing _mkgmtime in msvcrt.dll on 32-bits machines.,Please consider to pull this as a solution for the part of issue #278 related to missing _mkgmtime in msvcrt.dll on 32-bits machines.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,590,2018-02-12T15:30:22Z,2018-02-19T18:57:15Z,2018-02-19T18:57:15Z,MERGED,True,46,0,1,https://github.com/abramobagnara,Added replacement for timegm where _mkgmtime can be missing.,1,[],https://github.com/civetweb/civetweb/pull/590,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/590#issuecomment-364968743,Please consider to pull this as a solution for the part of issue #278 related to missing _mkgmtime in msvcrt.dll on 32-bits machines.,"Codecov Report

Merging #590 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #590   +/-   ##
=======================================
  Coverage   77.69%   77.69%           
=======================================
  Files          13       13           
  Lines        9532     9532           
=======================================
  Hits         7406     7406           
  Misses       2126     2126



Impacted Files
Coverage Δ





src/civetweb.c
69.56% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 4dc4044...3c1d726. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,590,2018-02-12T15:30:22Z,2018-02-19T18:57:15Z,2018-02-19T18:57:15Z,MERGED,True,46,0,1,https://github.com/abramobagnara,Added replacement for timegm where _mkgmtime can be missing.,1,[],https://github.com/civetweb/civetweb/pull/590,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/590#issuecomment-365854125,Please consider to pull this as a solution for the part of issue #278 related to missing _mkgmtime in msvcrt.dll on 32-bits machines.,"_mkgmtime is available for 32 bit Windows at least since VisualStudio 2008 (see MSDN). The Windows 32 bit Builds are working as well (see AppVeyor). So not all 32 bit Windows require this replacement.
A problem of not using the operating system implementation might be a different handling of leap seconds between timegm and gmtime. So one should be absolutely sure to only add a replacement function when _mkgmtime is definitely missing, not when it could be missing for extremely old compilers. I will check if there is a way to detect this - otherwise there could be some explicit define the user has to set (like ""#define ADD_MKGMTIME_REPLACEMENT_FUNCTION"").
Thank you for your contribution, I want to merge all of it but one line:
+#if defined(_WIN64)

Using this for all 32 bit Windows is just too much - I just need to figure out if there is any better automatic define, or if we need a manual one (like ADD_MKGMTIME_REPLACEMENT_FUNCTION).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,590,2018-02-12T15:30:22Z,2018-02-19T18:57:15Z,2018-02-19T18:57:15Z,MERGED,True,46,0,1,https://github.com/abramobagnara,Added replacement for timegm where _mkgmtime can be missing.,1,[],https://github.com/civetweb/civetweb/pull/590,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/590#issuecomment-366777827,Please consider to pull this as a solution for the part of issue #278 related to missing _mkgmtime in msvcrt.dll on 32-bits machines.,"I think I will merge it, and replace the define by a NEED_GMTIME. This can be set automatically if we have a MinGW32 Build, but not a Visual Studio 32 bit build - you can still set it manually for other compilers.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,592,2018-02-15T18:05:01Z,2018-02-15T22:56:34Z,2018-02-15T22:58:09Z,MERGED,True,1,1,1,https://github.com/jimevans,Fixing configuration of ports for IPv4/IPv6 dual host sockets,1,[],https://github.com/civetweb/civetweb/pull/592,https://github.com/jimevans,1,https://github.com/civetweb/civetweb/pull/592,"When checking for configuring a socket, if the port option indicates that
a dual host socket should be used (single socket to receive traffic from
IPv4 and IPv6 addresses, e.g., +80), the IP version returned is 10. To
signal that a socket should be used by both versions, the IPV6_ONLY socket
option should be set to 0. Prior to this commit, set_ports_option looked
for an IP version equal to 6 to set the option to zero, but should be
looking for a version of 10.","When checking for configuring a socket, if the port option indicates that
a dual host socket should be used (single socket to receive traffic from
IPv4 and IPv6 addresses, e.g., +80), the IP version returned is 10. To
signal that a socket should be used by both versions, the IPV6_ONLY socket
option should be set to 0. Prior to this commit, set_ports_option looked
for an IP version equal to 6 to set the option to zero, but should be
looking for a version of 10.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,592,2018-02-15T18:05:01Z,2018-02-15T22:56:34Z,2018-02-15T22:58:09Z,MERGED,True,1,1,1,https://github.com/jimevans,Fixing configuration of ports for IPv4/IPv6 dual host sockets,1,[],https://github.com/civetweb/civetweb/pull/592,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/592#issuecomment-366069030,"When checking for configuring a socket, if the port option indicates that
a dual host socket should be used (single socket to receive traffic from
IPv4 and IPv6 addresses, e.g., +80), the IP version returned is 10. To
signal that a socket should be used by both versions, the IPV6_ONLY socket
option should be set to 0. Prior to this commit, set_ports_option looked
for an IP version equal to 6 to set the option to zero, but should be
looking for a version of 10.","Codecov Report

Merging #592 into master will increase coverage by 0.01%.
The diff coverage is 100%.


@@            Coverage Diff            @@
##           master    #592      +/-   ##
=========================================
+ Coverage   77.69%   77.7%   +0.01%     
=========================================
  Files          13      13              
  Lines        9532    9532              
=========================================
+ Hits         7406    7407       +1     
+ Misses       2126    2125       -1



Impacted Files
Coverage Δ





src/civetweb.c
69.58% <100%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f3386ac...40e298b. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,592,2018-02-15T18:05:01Z,2018-02-15T22:56:34Z,2018-02-15T22:58:09Z,MERGED,True,1,1,1,https://github.com/jimevans,Fixing configuration of ports for IPv4/IPv6 dual host sockets,1,[],https://github.com/civetweb/civetweb/pull/592,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/592#issuecomment-366090379,"When checking for configuring a socket, if the port option indicates that
a dual host socket should be used (single socket to receive traffic from
IPv4 and IPv6 addresses, e.g., +80), the IP version returned is 10. To
signal that a socket should be used by both versions, the IPV6_ONLY socket
option should be set to 0. Prior to this commit, set_ports_option looked
for an IP version equal to 6 to set the option to zero, but should be
looking for a version of 10.","Thanks, merged.
Looking a bit closer into the entire function, I think we should always use IPV6_V6ONLY, either with ""on"" or ""off"", so we do not depend on operating system defaults.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,596,2018-03-03T21:07:54Z,2018-03-04T19:46:39Z,2018-03-05T19:30:48Z,MERGED,True,22,1,2,https://github.com/hojalot,Add install targets for headers and libraries.,1,[],https://github.com/civetweb/civetweb/pull/596,https://github.com/hojalot,1,https://github.com/civetweb/civetweb/pull/596,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,596,2018-03-03T21:07:54Z,2018-03-04T19:46:39Z,2018-03-05T19:30:48Z,MERGED,True,22,1,2,https://github.com/hojalot,Add install targets for headers and libraries.,1,[],https://github.com/civetweb/civetweb/pull/596,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/596#issuecomment-370181536,,"Thanks.
I assume you tested it for one or more Linux distributions?
Could you add a short description for what systems this is supposed to work?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,596,2018-03-03T21:07:54Z,2018-03-04T19:46:39Z,2018-03-05T19:30:48Z,MERGED,True,22,1,2,https://github.com/hojalot,Add install targets for headers and libraries.,1,[],https://github.com/civetweb/civetweb/pull/596,https://github.com/hojalot,3,https://github.com/civetweb/civetweb/pull/596#issuecomment-370255134,,"Yes, I tested under Ubuntu 17.10 by building an application that includes CivetServer.h and links against the static lib.
I assume that the added install targets only apply to Linux systems, like docs/Building.md mentions in the ""Using Make"" section.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,596,2018-03-03T21:07:54Z,2018-03-04T19:46:39Z,2018-03-05T19:30:48Z,MERGED,True,22,1,2,https://github.com/hojalot,Add install targets for headers and libraries.,1,[],https://github.com/civetweb/civetweb/pull/596,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/596#issuecomment-370258036,,"Thank you for your contribution. Merged.
For future pull requests (... you are welcome to contribute something in future ...) ""please provide a description for every pull request"" (as mentioned in the contribution docs ;-) )",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,596,2018-03-03T21:07:54Z,2018-03-04T19:46:39Z,2018-03-05T19:30:48Z,MERGED,True,22,1,2,https://github.com/hojalot,Add install targets for headers and libraries.,1,[],https://github.com/civetweb/civetweb/pull/596,https://github.com/hojalot,5,https://github.com/civetweb/civetweb/pull/596#issuecomment-370466813,,"Does the description go in the pull request, the commit message or both?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,596,2018-03-03T21:07:54Z,2018-03-04T19:46:39Z,2018-03-05T19:30:48Z,MERGED,True,22,1,2,https://github.com/hojalot,Add install targets for headers and libraries.,1,[],https://github.com/civetweb/civetweb/pull/596,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/596#issuecomment-370535500,,"You can add a description in the commit - but this is independent from the description here in the pull request.
I'm just asking for a description, because I do a quick review of all pull requests: First I check title and description to get an idea of the problem/enhancement that is supposed solved with the pull request. Then I check if the ""files changed"" are suitable for this purpose. And I check the files changed, if it could cause new issues.
If there is no description, I can just guess from the changed files what should be solved by the pull request.
That's why I added ""Please provide a description for every pull request"" to the Contribution.md documentation.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,599,2018-03-14T08:08:57Z,2018-03-14T19:37:16Z,2018-03-14T19:37:52Z,MERGED,True,2,2,1,https://github.com/jgilje,move /WX flag inside 'NOT CIVETWEB_ALLOW_WARNINGS' block,1,[],https://github.com/civetweb/civetweb/pull/599,https://github.com/jgilje,1,https://github.com/civetweb/civetweb/pull/599,"/WX is the MSVC equivalent of -Werror, and should not be set if we allow warnings","/WX is the MSVC equivalent of -Werror, and should not be set if we allow warnings",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,599,2018-03-14T08:08:57Z,2018-03-14T19:37:16Z,2018-03-14T19:37:52Z,MERGED,True,2,2,1,https://github.com/jgilje,move /WX flag inside 'NOT CIVETWEB_ALLOW_WARNINGS' block,1,[],https://github.com/civetweb/civetweb/pull/599,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/599#issuecomment-372943976,"/WX is the MSVC equivalent of -Werror, and should not be set if we allow warnings","Codecov Report

Merging #599 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #599   +/-   ##
=======================================
  Coverage   77.84%   77.84%           
=======================================
  Files          13       13           
  Lines        9514     9514           
=======================================
  Hits         7406     7406           
  Misses       2108     2108

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f04a9f7...e97d4c9. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,599,2018-03-14T08:08:57Z,2018-03-14T19:37:16Z,2018-03-14T19:37:52Z,MERGED,True,2,2,1,https://github.com/jgilje,move /WX flag inside 'NOT CIVETWEB_ALLOW_WARNINGS' block,1,[],https://github.com/civetweb/civetweb/pull/599,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/599#issuecomment-373148958,"/WX is the MSVC equivalent of -Werror, and should not be set if we allow warnings","You are definitely right.
Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,604,2018-04-04T07:01:45Z,2018-04-04T18:58:18Z,2018-04-09T10:14:43Z,MERGED,True,62,1,2,https://github.com/deblauwetom,Add conan packaging file,7,[],https://github.com/civetweb/civetweb/pull/604,https://github.com/deblauwetom,1,https://github.com/civetweb/civetweb/pull/604,"A conan packaging file. I'm not very proficient in conan, but it could be a starting point for more!","A conan packaging file. I'm not very proficient in conan, but it could be a starting point for more!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,604,2018-04-04T07:01:45Z,2018-04-04T18:58:18Z,2018-04-09T10:14:43Z,MERGED,True,62,1,2,https://github.com/deblauwetom,Add conan packaging file,7,[],https://github.com/civetweb/civetweb/pull/604,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/604#issuecomment-378709017,"A conan packaging file. I'm not very proficient in conan, but it could be a starting point for more!","Thanks for your contribution.
Merged.
Since I personally do not use conan and have no experience with it, I can not promise to maintain this file in a way future changes will work out of the box. But it could certainly be more helpful than ""no conan file"" ;-)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,604,2018-04-04T07:01:45Z,2018-04-04T18:58:18Z,2018-04-09T10:14:43Z,MERGED,True,62,1,2,https://github.com/deblauwetom,Add conan packaging file,7,[],https://github.com/civetweb/civetweb/pull/604,https://github.com/deblauwetom,3,https://github.com/civetweb/civetweb/pull/604#issuecomment-378845288,"A conan packaging file. I'm not very proficient in conan, but it could be a starting point for more!","ok, thanks!
You can test the package here with this remote:
conan remote add metalmajor https://api.bintray.com/conan/metalmajor/metalmajor
and you can add this to your conaninfo.txt in the ""requires"" section:
civetweb/1.10@metalmajor/testing",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,604,2018-04-04T07:01:45Z,2018-04-04T18:58:18Z,2018-04-09T10:14:43Z,MERGED,True,62,1,2,https://github.com/deblauwetom,Add conan packaging file,7,[],https://github.com/civetweb/civetweb/pull/604,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/604#issuecomment-379040073,"A conan packaging file. I'm not very proficient in conan, but it could be a starting point for more!","Sorry, I don't have ""conan"" installed - if I type it to my Linux shell, it asks me if I want to install ""»conman« (universe)"" - and I don't know a conaninfo.txt file.
I'm probably too far to understand your short descriptions and would need a link to basic introduction.
But let me ask it this way: Is there a simple way to add it to the existing Travis CI and/or AppVeyor unit tests, so I can see if something is broken?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,604,2018-04-04T07:01:45Z,2018-04-04T18:58:18Z,2018-04-09T10:14:43Z,MERGED,True,62,1,2,https://github.com/deblauwetom,Add conan packaging file,7,[],https://github.com/civetweb/civetweb/pull/604,https://github.com/deblauwetom,5,https://github.com/civetweb/civetweb/pull/604#issuecomment-379703851,"A conan packaging file. I'm not very proficient in conan, but it could be a starting point for more!","yes, well, you can just ""use"" my repo and then conan will download and compile from my package that I uploaded to my own conan remote.
So to test my package first install conan from ""conan.io"", and add my remote:
conan remote add metalmajor https://api.bintray.com/conan/metalmajor/metalmajor

Then, you can create a text file called ""conanfile.txt"" and put this in it:
[requires]
	civetweb/1.10@metalmajor/testing

[generators]
    cmake

Now this command should fetch and build the package, and create a cmake file which you can then use in a cmake project:
conan install conanfile.txt

If you want to build the package from the civetweb source directory, then you could do this:
cd civetweb
conan create . civetweb/1.10.0@bel2125/testing

And that will build and create the package locally. Then you can change the line in the conanfile.txt to require your package for example. It is then possible to upload the package to some remote with
conan upload civetweb/1.10.0@bel2125/testing -r <your-remote>

Hope this helps!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,606,2018-04-10T11:14:56Z,2018-04-10T18:08:12Z,2018-04-11T10:57:34Z,MERGED,True,7,0,1,https://github.com/linev,Disable gcc warning with OpenSSL 1.1 SSL_CTX_set_info_callback() call,1,[],https://github.com/civetweb/civetweb/pull/606,https://github.com/linev,1,https://github.com/civetweb/civetweb/pull/606,Disable same kind of warning as for clang,Disable same kind of warning as for clang,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,606,2018-04-10T11:14:56Z,2018-04-10T18:08:12Z,2018-04-11T10:57:34Z,MERGED,True,7,0,1,https://github.com/linev,Disable gcc warning with OpenSSL 1.1 SSL_CTX_set_info_callback() call,1,[],https://github.com/civetweb/civetweb/pull/606,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/606#issuecomment-380069800,Disable same kind of warning as for clang,"Codecov Report

Merging #606 into master will increase coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #606      +/-   ##
==========================================
+ Coverage   77.44%   77.47%   +0.02%     
==========================================
  Files          13       13              
  Lines        9574     9574              
==========================================
+ Hits         7415     7417       +2     
+ Misses       2159     2157       -2



Impacted Files
Coverage Δ





src/civetweb.c
69.52% <ø> (+0.03%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 3235a2e...b0ee76d. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,606,2018-04-10T11:14:56Z,2018-04-10T18:08:12Z,2018-04-11T10:57:34Z,MERGED,True,7,0,1,https://github.com/linev,Disable gcc warning with OpenSSL 1.1 SSL_CTX_set_info_callback() call,1,[],https://github.com/civetweb/civetweb/pull/606,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/606#issuecomment-380195547,Disable same kind of warning as for clang,"Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,607,2018-04-10T11:23:23Z,2018-04-10T18:10:54Z,2018-04-11T10:57:34Z,MERGED,True,2,2,1,https://github.com/linev,Fix warning about implicit function declaration in CivetWeb,1,[],https://github.com/civetweb/civetweb/pull/607,https://github.com/linev,1,https://github.com/civetweb/civetweb/pull/607,"Using pthread_setname_np requires a #define _GNU_SOURCE before including
pthread.h, or it will cause warnings about implicit function
declaration:
net/http/civetweb/civetweb.c:2701:8: warning:
implicit declaration of function 'pthread_setname_np' is invalid in C99
(void)pthread_setname_np(pthread_self(), threadName);
^","Using pthread_setname_np requires a #define _GNU_SOURCE before including
pthread.h, or it will cause warnings about implicit function
declaration:
net/http/civetweb/civetweb.c:2701:8: warning:
implicit declaration of function 'pthread_setname_np' is invalid in C99
(void)pthread_setname_np(pthread_self(), threadName);
^",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,607,2018-04-10T11:23:23Z,2018-04-10T18:10:54Z,2018-04-11T10:57:34Z,MERGED,True,2,2,1,https://github.com/linev,Fix warning about implicit function declaration in CivetWeb,1,[],https://github.com/civetweb/civetweb/pull/607,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/607#issuecomment-380076305,"Using pthread_setname_np requires a #define _GNU_SOURCE before including
pthread.h, or it will cause warnings about implicit function
declaration:
net/http/civetweb/civetweb.c:2701:8: warning:
implicit declaration of function 'pthread_setname_np' is invalid in C99
(void)pthread_setname_np(pthread_self(), threadName);
^","Codecov Report

Merging #607 into master will increase coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #607      +/-   ##
==========================================
+ Coverage   77.44%   77.48%   +0.03%     
==========================================
  Files          13       13              
  Lines        9574     9574              
==========================================
+ Hits         7415     7418       +3     
+ Misses       2159     2156       -3



Impacted Files
Coverage Δ





src/civetweb.c
69.53% <ø> (+0.05%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 3235a2e...c6017a5. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,607,2018-04-10T11:23:23Z,2018-04-10T18:10:54Z,2018-04-11T10:57:34Z,MERGED,True,2,2,1,https://github.com/linev,Fix warning about implicit function declaration in CivetWeb,1,[],https://github.com/civetweb/civetweb/pull/607,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/607#issuecomment-380196486,"Using pthread_setname_np requires a #define _GNU_SOURCE before including
pthread.h, or it will cause warnings about implicit function
declaration:
net/http/civetweb/civetweb.c:2701:8: warning:
implicit declaration of function 'pthread_setname_np' is invalid in C99
(void)pthread_setname_np(pthread_self(), threadName);
^",Thanks you for your contribution.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,610,2018-04-19T23:47:44Z,2018-04-21T08:58:56Z,2018-04-23T05:39:54Z,MERGED,True,30,76,1,https://github.com/pavel-pimenov,WinAPI: Add struct dlg_header_param,1,[],https://github.com/civetweb/civetweb/pull/610,https://github.com/pavel-pimenov,1,https://github.com/civetweb/civetweb/pull/610,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,610,2018-04-19T23:47:44Z,2018-04-21T08:58:56Z,2018-04-23T05:39:54Z,MERGED,True,30,76,1,https://github.com/pavel-pimenov,WinAPI: Add struct dlg_header_param,1,[],https://github.com/civetweb/civetweb/pull/610,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/610#issuecomment-382921536,,"Codecov Report

Merging #610 into master will increase coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #610      +/-   ##
==========================================
+ Coverage   77.45%   77.47%   +0.02%     
==========================================
  Files          13       13              
  Lines        9587     9587              
==========================================
+ Hits         7426     7428       +2     
+ Misses       2161     2159       -2



Impacted Files
Coverage Δ





src/main.c
0% <ø> (ø)
⬆️


src/civetweb.c
69.46% <0%> (+0.03%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update c000dea...ab3af27. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,610,2018-04-19T23:47:44Z,2018-04-21T08:58:56Z,2018-04-23T05:39:54Z,MERGED,True,30,76,1,https://github.com/pavel-pimenov,WinAPI: Add struct dlg_header_param,1,[],https://github.com/civetweb/civetweb/pull/610,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/610#issuecomment-383274694,,"Please provide a description for every pull request:
https://github.com/civetweb/civetweb/blob/master/docs/Contribution.md",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,610,2018-04-19T23:47:44Z,2018-04-21T08:58:56Z,2018-04-23T05:39:54Z,MERGED,True,30,76,1,https://github.com/pavel-pimenov,WinAPI: Add struct dlg_header_param,1,[],https://github.com/civetweb/civetweb/pull/610,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/610#issuecomment-383279342,,"So, this probably avoids the
A call of the 'memcpy' function will lead to underflow of the buffer 'p'.
warning from #597 (comment) ?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,611,2018-04-20T05:56:31Z,2018-04-21T07:30:22Z,2018-04-23T05:40:09Z,MERGED,True,3,4,1,https://github.com/pavel-pimenov,mod_lua: fix strchr,1,[],https://github.com/civetweb/civetweb/pull/611,https://github.com/pavel-pimenov,1,https://github.com/civetweb/civetweb/pull/611,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,611,2018-04-20T05:56:31Z,2018-04-21T07:30:22Z,2018-04-23T05:40:09Z,MERGED,True,3,4,1,https://github.com/pavel-pimenov,mod_lua: fix strchr,1,[],https://github.com/civetweb/civetweb/pull/611,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/611#issuecomment-382992770,,"Codecov Report

Merging #611 into master will increase coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #611      +/-   ##
==========================================
+ Coverage   77.45%   77.49%   +0.03%     
==========================================
  Files          13       13              
  Lines        9587     9587              
==========================================
+ Hits         7426     7429       +3     
+ Misses       2161     2158       -3



Impacted Files
Coverage Δ





src/civetweb.c
69.48% <0%> (+0.05%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update c000dea...255d8f0. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,611,2018-04-20T05:56:31Z,2018-04-21T07:30:22Z,2018-04-23T05:40:09Z,MERGED,True,3,4,1,https://github.com/pavel-pimenov,mod_lua: fix strchr,1,[],https://github.com/civetweb/civetweb/pull/611,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/611#issuecomment-383274792,,"Thanks for your contribution.
Merged.
Please provide a short description for every pull request.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,615,2018-05-02T13:46:56Z,2018-05-02T18:50:32Z,2018-05-02T18:59:09Z,MERGED,True,1,1,1,https://github.com/linev,Define _GNU_SOURCE not only with gcc,1,[],https://github.com/civetweb/civetweb/pull/615,https://github.com/linev,1,https://github.com/civetweb/civetweb/pull/615,"This defines enables extra features from glibc.
These features available also with other compilers (like clang).","This defines enables extra features from glibc.
These features available also with other compilers (like clang).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,615,2018-05-02T13:46:56Z,2018-05-02T18:50:32Z,2018-05-02T18:59:09Z,MERGED,True,1,1,1,https://github.com/linev,Define _GNU_SOURCE not only with gcc,1,[],https://github.com/civetweb/civetweb/pull/615,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/615#issuecomment-385993518,"This defines enables extra features from glibc.
These features available also with other compilers (like clang).","Codecov Report

Merging #615 into master will decrease coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #615      +/-   ##
=========================================
- Coverage   77.52%   77.5%   -0.03%     
=========================================
  Files          13      13              
  Lines        9596    9596              
=========================================
- Hits         7439    7437       -2     
- Misses       2157    2159       +2



Impacted Files
Coverage Δ





src/civetweb.c
69.46% <ø> (-0.04%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 20ecdd1...4325165. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,615,2018-05-02T13:46:56Z,2018-05-02T18:50:32Z,2018-05-02T18:59:09Z,MERGED,True,1,1,1,https://github.com/linev,Define _GNU_SOURCE not only with gcc,1,[],https://github.com/civetweb/civetweb/pull/615,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/615#issuecomment-386082373,"This defines enables extra features from glibc.
These features available also with other compilers (like clang).","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,616,2018-05-08T15:29:03Z,2018-05-09T20:07:13Z,2018-05-10T05:33:49Z,MERGED,True,1,1,1,https://github.com/pavel-pimenov,mg_option config_options[] - add const,1,[],https://github.com/civetweb/civetweb/pull/616,https://github.com/pavel-pimenov,1,https://github.com/civetweb/civetweb/pull/616,https://randomascii.wordpress.com/2017/01/08/add-a-const-here-delete-a-const-there/,https://randomascii.wordpress.com/2017/01/08/add-a-const-here-delete-a-const-there/,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,616,2018-05-08T15:29:03Z,2018-05-09T20:07:13Z,2018-05-10T05:33:49Z,MERGED,True,1,1,1,https://github.com/pavel-pimenov,mg_option config_options[] - add const,1,[],https://github.com/civetweb/civetweb/pull/616,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/616#issuecomment-387454262,https://randomascii.wordpress.com/2017/01/08/add-a-const-here-delete-a-const-there/,"Codecov Report

Merging #616 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #616      +/-   ##
=========================================
- Coverage   77.51%   77.5%   -0.02%     
=========================================
  Files          13      13              
  Lines        9596    9596              
=========================================
- Hits         7438    7437       -1     
- Misses       2158    2159       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.46% <ø> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 1c08b16...cf4fc0e. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,616,2018-05-08T15:29:03Z,2018-05-09T20:07:13Z,2018-05-10T05:33:49Z,MERGED,True,1,1,1,https://github.com/pavel-pimenov,mg_option config_options[] - add const,1,[],https://github.com/civetweb/civetweb/pull/616,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/616#issuecomment-387859769,https://randomascii.wordpress.com/2017/01/08/add-a-const-here-delete-a-const-there/,"Merged, thanks for your contribution and for the link.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,620,2018-05-20T01:27:41Z,2018-05-20T18:24:11Z,2018-05-20T18:24:27Z,MERGED,True,1,1,1,https://github.com/mika314,Fix typo,1,[],https://github.com/civetweb/civetweb/pull/620,https://github.com/mika314,1,https://github.com/civetweb/civetweb/pull/620,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,620,2018-05-20T01:27:41Z,2018-05-20T18:24:11Z,2018-05-20T18:24:27Z,MERGED,True,1,1,1,https://github.com/mika314,Fix typo,1,[],https://github.com/civetweb/civetweb/pull/620,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/620#issuecomment-390452026,,"Codecov Report

Merging #620 into master will decrease coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #620      +/-   ##
==========================================
- Coverage    77.5%   77.46%   -0.04%     
==========================================
  Files          13       13              
  Lines        9596     9596              
==========================================
- Hits         7437     7434       -3     
- Misses       2159     2162       +3



Impacted Files
Coverage Δ





src/civetweb.c
69.4% <0%> (-0.06%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 65bd4ce...801770e. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,620,2018-05-20T01:27:41Z,2018-05-20T18:24:11Z,2018-05-20T18:24:27Z,MERGED,True,1,1,1,https://github.com/mika314,Fix typo,1,[],https://github.com/civetweb/civetweb/pull/620,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/620#issuecomment-390501252,,"Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,625,2018-06-04T09:50:42Z,2018-06-09T10:07:14Z,2018-06-09T10:07:29Z,MERGED,True,11,27,1,https://github.com/aboutbus,Wait for ready socket using poll instead of select,1,[],https://github.com/civetweb/civetweb/pull/625,https://github.com/aboutbus,1,https://github.com/civetweb/civetweb/pull/625,"Select does not work with descriptor numbers bigger than 1024.
It cause application fail, when get such descriptor number.
I suggest to use poll instead of select.","Select does not work with descriptor numbers bigger than 1024.
It cause application fail, when get such descriptor number.
I suggest to use poll instead of select.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,625,2018-06-04T09:50:42Z,2018-06-09T10:07:14Z,2018-06-09T10:07:29Z,MERGED,True,11,27,1,https://github.com/aboutbus,Wait for ready socket using poll instead of select,1,[],https://github.com/civetweb/civetweb/pull/625,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/625#issuecomment-395956998,"Select does not work with descriptor numbers bigger than 1024.
It cause application fail, when get such descriptor number.
I suggest to use poll instead of select.","I need to look in more detail into this issue.
select is not only used in push_inner but also in connect_socket, as well as in the alternative implementation of poll for systems missing poll.
Windows does not seem to have this limit (MSDN, so the alternative poll functions is probably not affected - connect_socket probably is.
Anyway, I think I will merge your change now and do some more investigations later.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,625,2018-06-04T09:50:42Z,2018-06-09T10:07:14Z,2018-06-09T10:07:29Z,MERGED,True,11,27,1,https://github.com/aboutbus,Wait for ready socket using poll instead of select,1,[],https://github.com/civetweb/civetweb/pull/625,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/625#issuecomment-395957017,"Select does not work with descriptor numbers bigger than 1024.
It cause application fail, when get such descriptor number.
I suggest to use poll instead of select.","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,627,2018-06-07T18:24:36Z,2018-06-09T09:55:38Z,2018-06-09T09:55:50Z,MERGED,True,13,4,2,https://github.com/lt-holman,Vs2015 warning fix,4,[],https://github.com/civetweb/civetweb/pull/627,https://github.com/lt-holman,1,https://github.com/civetweb/civetweb/pull/627,Various fixes to pass build errors on GCC and Visual Studio 2015.,Various fixes to pass build errors on GCC and Visual Studio 2015.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,627,2018-06-07T18:24:36Z,2018-06-09T09:55:38Z,2018-06-09T09:55:50Z,MERGED,True,13,4,2,https://github.com/lt-holman,Vs2015 warning fix,4,[],https://github.com/civetweb/civetweb/pull/627,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/627#issuecomment-395558898,Various fixes to pass build errors on GCC and Visual Studio 2015.,"Codecov Report

❗ No coverage uploaded for pull request base (master@fa4af4a). Click here to learn what that means.
The diff coverage is 100%.


@@           Coverage Diff            @@
##             master    #627   +/-   ##
========================================
  Coverage          ?   77.4%           
========================================
  Files             ?      13           
  Lines             ?    9613           
  Branches          ?       0           
========================================
  Hits              ?    7441           
  Misses            ?    2172           
  Partials          ?       0



Impacted Files
Coverage Δ





src/civetweb.c
69.31% <100%> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update fa4af4a...e57abb3. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,627,2018-06-07T18:24:36Z,2018-06-09T09:55:38Z,2018-06-09T09:55:50Z,MERGED,True,13,4,2,https://github.com/lt-holman,Vs2015 warning fix,4,[],https://github.com/civetweb/civetweb/pull/627,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/627#issuecomment-395956353,Various fixes to pass build errors on GCC and Visual Studio 2015.,"Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,628,2018-06-08T11:46:28Z,2018-06-09T09:56:49Z,2018-06-09T09:57:34Z,MERGED,True,2,0,1,https://github.com/ryankopf,Function abort_process is not defined unless we are using timers.,1,[],https://github.com/civetweb/civetweb/pull/628,https://github.com/ryankopf,1,https://github.com/civetweb/civetweb/pull/628,"Function abort_process is not defined unless USE_TIMERS is defined, and so the previous version would not compile.","Function abort_process is not defined unless USE_TIMERS is defined, and so the previous version would not compile.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,628,2018-06-08T11:46:28Z,2018-06-09T09:56:49Z,2018-06-09T09:57:34Z,MERGED,True,2,0,1,https://github.com/ryankopf,Function abort_process is not defined unless we are using timers.,1,[],https://github.com/civetweb/civetweb/pull/628,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/628#issuecomment-395956453,"Function abort_process is not defined unless USE_TIMERS is defined, and so the previous version would not compile.","Thank you. The last commit with aport_process is still a bit experimental, and probably this has to be rewritten again anyway.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,630,2018-06-11T07:47:28Z,2018-06-15T20:06:52Z,2018-06-15T20:07:05Z,MERGED,True,5,0,1,https://github.com/mretallack,"Make sure that if sslize fails, we close the socket",1,[],https://github.com/civetweb/civetweb/pull/630,https://github.com/mretallack,1,https://github.com/civetweb/civetweb/pull/630,"Hi,
If the sslize call fails for a new connection, then it is not cleaned up.  This leads to a file descriptor leak.","Hi,
If the sslize call fails for a new connection, then it is not cleaned up.  This leads to a file descriptor leak.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,630,2018-06-11T07:47:28Z,2018-06-15T20:06:52Z,2018-06-15T20:07:05Z,MERGED,True,5,0,1,https://github.com/mretallack,"Make sure that if sslize fails, we close the socket",1,[],https://github.com/civetweb/civetweb/pull/630,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/630#issuecomment-396160590,"Hi,
If the sslize call fails for a new connection, then it is not cleaned up.  This leads to a file descriptor leak.","Codecov Report

Merging #630 into master will decrease coverage by <.01%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##           master     #630      +/-   ##
==========================================
- Coverage   77.89%   77.88%   -0.01%     
==========================================
  Files          13       13              
  Lines        9671     9672       +1     
==========================================
  Hits         7533     7533              
- Misses       2138     2139       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.94% <100%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 4aab5d2...03c05aa. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,630,2018-06-11T07:47:28Z,2018-06-15T20:06:52Z,2018-06-15T20:07:05Z,MERGED,True,5,0,1,https://github.com/mretallack,"Make sure that if sslize fails, we close the socket",1,[],https://github.com/civetweb/civetweb/pull/630,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/630#issuecomment-397728637,"Hi,
If the sslize call fails for a new connection, then it is not cleaned up.  This leads to a file descriptor leak.","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,632,2018-06-14T17:21:32Z,2018-06-15T20:09:20Z,2018-06-15T20:09:33Z,MERGED,True,11,9,1,https://github.com/lt-holman,build: fixes for Visual Studio 2015,1,[],https://github.com/civetweb/civetweb/pull/632,https://github.com/lt-holman,1,https://github.com/civetweb/civetweb/pull/632,"This patch contains minor fixes to build on Windows Visual Studio 2015
without any warnings.
Signed-off-by: Keith Holman keith.holman@windriver.com","This patch contains minor fixes to build on Windows Visual Studio 2015
without any warnings.
Signed-off-by: Keith Holman keith.holman@windriver.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,632,2018-06-14T17:21:32Z,2018-06-15T20:09:20Z,2018-06-15T20:09:33Z,MERGED,True,11,9,1,https://github.com/lt-holman,build: fixes for Visual Studio 2015,1,[],https://github.com/civetweb/civetweb/pull/632,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/632#issuecomment-397729124,"This patch contains minor fixes to build on Windows Visual Studio 2015
without any warnings.
Signed-off-by: Keith Holman keith.holman@windriver.com","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,634,2018-06-15T20:47:25Z,2018-06-16T10:51:43Z,2018-06-16T10:51:43Z,MERGED,True,6,2,1,https://github.com/lt-holman,build: add ability to generate shared library,1,[],https://github.com/civetweb/civetweb/pull/634,https://github.com/lt-holman,1,https://github.com/civetweb/civetweb/pull/634,"This patch updates the source tree to generate shared library.
Signed-off-by: Keith Holman keith.holman@windriver.com","This patch updates the source tree to generate shared library.
Signed-off-by: Keith Holman keith.holman@windriver.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,634,2018-06-15T20:47:25Z,2018-06-16T10:51:43Z,2018-06-16T10:51:43Z,MERGED,True,6,2,1,https://github.com/lt-holman,build: add ability to generate shared library,1,[],https://github.com/civetweb/civetweb/pull/634,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/634#issuecomment-397751800,"This patch updates the source tree to generate shared library.
Signed-off-by: Keith Holman keith.holman@windriver.com","Codecov Report

Merging #634 into master will increase coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #634      +/-   ##
=========================================
+ Coverage   77.88%   77.9%   +0.02%     
=========================================
  Files          13      13              
  Lines        9672    9672              
=========================================
+ Hits         7533    7535       +2     
+ Misses       2139    2137       -2



Impacted Files
Coverage Δ





src/civetweb.c
69.98% <0%> (+0.03%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 28d01ad...00f3e70. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,635,2018-06-15T20:48:01Z,2018-06-16T10:52:38Z,2018-06-16T10:52:38Z,MERGED,True,11,3,2,https://github.com/lt-holman,build: warning fixes for test executables,1,[],https://github.com/civetweb/civetweb/pull/635,https://github.com/lt-holman,1,https://github.com/civetweb/civetweb/pull/635,"This patch contains additional warning fixes for Microsoft Visual Studio
2015 without any warnings.  Specifically, this patch addresses warnings
generated by the test executables.
Signed-off-by: Keith Holman keith.holman@windriver.com","This patch contains additional warning fixes for Microsoft Visual Studio
2015 without any warnings.  Specifically, this patch addresses warnings
generated by the test executables.
Signed-off-by: Keith Holman keith.holman@windriver.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,635,2018-06-15T20:48:01Z,2018-06-16T10:52:38Z,2018-06-16T10:52:38Z,MERGED,True,11,3,2,https://github.com/lt-holman,build: warning fixes for test executables,1,[],https://github.com/civetweb/civetweb/pull/635,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/635#issuecomment-397756319,"This patch contains additional warning fixes for Microsoft Visual Studio
2015 without any warnings.  Specifically, this patch addresses warnings
generated by the test executables.
Signed-off-by: Keith Holman keith.holman@windriver.com","Codecov Report

Merging #635 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #635   +/-   ##
=======================================
  Coverage   77.88%   77.88%           
=======================================
  Files          13       13           
  Lines        9672     9672           
=======================================
  Hits         7533     7533           
  Misses       2139     2139



Impacted Files
Coverage Δ





unittest/public_server.c
98.59% <ø> (ø)
⬆️


src/main.c
0% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 28d01ad...6175047. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,642,2018-07-18T14:46:30Z,2018-07-19T18:02:07Z,2018-07-19T18:02:16Z,MERGED,True,0,0,56,https://github.com/ErikPartridge,Lossless compression of all assets in the repo,2,[],https://github.com/civetweb/civetweb/pull/642,https://github.com/ErikPartridge,1,https://github.com/civetweb/civetweb/pull/642,"This doesn't impact the functionality of civetweb at all, just makes the GitHub repository a little faster to load--automatically ran lossless image compression over all image files.","This doesn't impact the functionality of civetweb at all, just makes the GitHub repository a little faster to load--automatically ran lossless image compression over all image files.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,642,2018-07-18T14:46:30Z,2018-07-19T18:02:07Z,2018-07-19T18:02:16Z,MERGED,True,0,0,56,https://github.com/ErikPartridge,Lossless compression of all assets in the repo,2,[],https://github.com/civetweb/civetweb/pull/642,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/642#issuecomment-405969833,"This doesn't impact the functionality of civetweb at all, just makes the GitHub repository a little faster to load--automatically ran lossless image compression over all image files.","Codecov Report

Merging #642 into master will decrease coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #642      +/-   ##
==========================================
- Coverage   77.78%   77.76%   -0.03%     
==========================================
  Files          13       13              
  Lines        9699     9699              
==========================================
- Hits         7544     7542       -2     
- Misses       2155     2157       +2



Impacted Files
Coverage Δ





src/civetweb.c
69.76% <0%> (-0.04%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 3031e6d...e4491b2. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,642,2018-07-18T14:46:30Z,2018-07-19T18:02:07Z,2018-07-19T18:02:16Z,MERGED,True,0,0,56,https://github.com/ErikPartridge,Lossless compression of all assets in the repo,2,[],https://github.com/civetweb/civetweb/pull/642,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/642#issuecomment-406364175,"This doesn't impact the functionality of civetweb at all, just makes the GitHub repository a little faster to load--automatically ran lossless image compression over all image files.","Merged,
Thanks.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,645,2018-08-17T05:59:32Z,2018-08-18T19:04:41Z,2018-08-18T19:05:14Z,MERGED,True,12,5,1,https://github.com/newle,param can from query_string or body,1,[],https://github.com/civetweb/civetweb/pull/645,https://github.com/newle,1,https://github.com/civetweb/civetweb/pull/645,getParam will ignore param in query_string when body not NULL,getParam will ignore param in query_string when body not NULL,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,645,2018-08-17T05:59:32Z,2018-08-18T19:04:41Z,2018-08-18T19:05:14Z,MERGED,True,12,5,1,https://github.com/newle,param can from query_string or body,1,[],https://github.com/civetweb/civetweb/pull/645,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/645#issuecomment-413771113,getParam will ignore param in query_string when body not NULL,"Codecov Report

Merging #645 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #645   +/-   ##
=======================================
  Coverage   77.76%   77.76%           
=======================================
  Files          13       13           
  Lines        9699     9699           
=======================================
  Hits         7542     7542           
  Misses       2157     2157

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 71a9d0e...80e0929. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,645,2018-08-17T05:59:32Z,2018-08-18T19:04:41Z,2018-08-18T19:05:14Z,MERGED,True,12,5,1,https://github.com/newle,param can from query_string or body,1,[],https://github.com/civetweb/civetweb/pull/645,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/645#issuecomment-414079905,getParam will ignore param in query_string when body not NULL,"Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,649,2018-08-29T06:04:13Z,2018-08-30T20:48:04Z,2018-08-30T20:48:20Z,MERGED,True,1,0,1,https://github.com/kraj,undefine macro before redefining,1,[],https://github.com/civetweb/civetweb/pull/649,https://github.com/kraj,1,https://github.com/civetweb/civetweb/pull/649,"Fixes
src/main.c:89:9: error: 'printf' macro redefined [-Werror,-Wmacro-redefined]
Signed-off-by: Khem Raj raj.khem@gmail.com","Fixes
src/main.c:89:9: error: 'printf' macro redefined [-Werror,-Wmacro-redefined]
Signed-off-by: Khem Raj raj.khem@gmail.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,649,2018-08-29T06:04:13Z,2018-08-30T20:48:04Z,2018-08-30T20:48:20Z,MERGED,True,1,0,1,https://github.com/kraj,undefine macro before redefining,1,[],https://github.com/civetweb/civetweb/pull/649,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/649#issuecomment-416841272,"Fixes
src/main.c:89:9: error: 'printf' macro redefined [-Werror,-Wmacro-redefined]
Signed-off-by: Khem Raj raj.khem@gmail.com","Codecov Report

Merging #649 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #649      +/-   ##
==========================================
- Coverage   77.69%   77.68%   -0.02%     
==========================================
  Files          13       13              
  Lines        9721     9721              
==========================================
- Hits         7553     7552       -1     
- Misses       2168     2169       +1



Impacted Files
Coverage Δ





src/main.c
0% <ø> (ø)
⬆️


src/civetweb.c
69.77% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update fc281de...105d0ae. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,649,2018-08-29T06:04:13Z,2018-08-30T20:48:04Z,2018-08-30T20:48:20Z,MERGED,True,1,0,1,https://github.com/kraj,undefine macro before redefining,1,[],https://github.com/civetweb/civetweb/pull/649,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/649#issuecomment-417083370,"Fixes
src/main.c:89:9: error: 'printf' macro redefined [-Werror,-Wmacro-redefined]
Signed-off-by: Khem Raj raj.khem@gmail.com","Thanks for your contribution.
For whatever reason, the Windows build on AppVeyor fails for this PR (https://ci.appveyor.com/project/civetweb/civetweb/build/1457) - probably it's a temporary problem with AppVeyor and I need to check it later.
However, couldn't this cause another warning ""macro not defined"" for compilers (respectively C libraries) not defining printf as a macro but as a function? Probably some #ifdef printf  should also be added.
I will have a look when AppVeyor is working again.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,649,2018-08-29T06:04:13Z,2018-08-30T20:48:04Z,2018-08-30T20:48:20Z,MERGED,True,1,0,1,https://github.com/kraj,undefine macro before redefining,1,[],https://github.com/civetweb/civetweb/pull/649,https://github.com/kraj,4,https://github.com/civetweb/civetweb/pull/649#issuecomment-417159600,"Fixes
src/main.c:89:9: error: 'printf' macro redefined [-Werror,-Wmacro-redefined]
Signed-off-by: Khem Raj raj.khem@gmail.com",@bel2125 if it is not a macro then you should get a different error and the fact that we never ran into this issue means this is not a problem. And you can undef a non existing identifier.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,649,2018-08-29T06:04:13Z,2018-08-30T20:48:04Z,2018-08-30T20:48:20Z,MERGED,True,1,0,1,https://github.com/kraj,undefine macro before redefining,1,[],https://github.com/civetweb/civetweb/pull/649,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/649#issuecomment-417461210,"Fixes
src/main.c:89:9: error: 'printf' macro redefined [-Werror,-Wmacro-redefined]
Signed-off-by: Khem Raj raj.khem@gmail.com","and the fact that we never ran into this issue means this is not a problem
What compilers did you test?
And you can undef a non existing identifier.
For all compilers without getting warnings?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,649,2018-08-29T06:04:13Z,2018-08-30T20:48:04Z,2018-08-30T20:48:20Z,MERGED,True,1,0,1,https://github.com/kraj,undefine macro before redefining,1,[],https://github.com/civetweb/civetweb/pull/649,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/649#issuecomment-417461911,"Fixes
src/main.c:89:9: error: 'printf' macro redefined [-Werror,-Wmacro-redefined]
Signed-off-by: Khem Raj raj.khem@gmail.com",Restarting the AppVeyor build worked - https://ci.appveyor.com/project/civetweb/civetweb/build/1458 ... seems the first build ran into an AppVeyor maintenance window (or something like that),True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,649,2018-08-29T06:04:13Z,2018-08-30T20:48:04Z,2018-08-30T20:48:20Z,MERGED,True,1,0,1,https://github.com/kraj,undefine macro before redefining,1,[],https://github.com/civetweb/civetweb/pull/649,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/649#issuecomment-417462032,"Fixes
src/main.c:89:9: error: 'printf' macro redefined [-Werror,-Wmacro-redefined]
Signed-off-by: Khem Raj raj.khem@gmail.com",Merged. Thanks for your contribution,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,650,2018-08-30T08:37:38Z,2018-08-30T20:49:07Z,2018-08-30T20:49:20Z,MERGED,True,1,1,1,https://github.com/ra1u,segfault issue in cpp,1,[],https://github.com/civetweb/civetweb/pull/650,https://github.com/ra1u,1,https://github.com/civetweb/civetweb/pull/650,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,650,2018-08-30T08:37:38Z,2018-08-30T20:49:07Z,2018-08-30T20:49:20Z,MERGED,True,1,1,1,https://github.com/ra1u,segfault issue in cpp,1,[],https://github.com/civetweb/civetweb/pull/650,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/650#issuecomment-417247219,,"Codecov Report

Merging #650 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #650      +/-   ##
==========================================
- Coverage   77.69%   77.68%   -0.02%     
==========================================
  Files          13       13              
  Lines        9721     9721              
==========================================
- Hits         7553     7552       -1     
- Misses       2168     2169       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.77% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update fc281de...e7af0df. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,650,2018-08-30T08:37:38Z,2018-08-30T20:49:07Z,2018-08-30T20:49:20Z,MERGED,True,1,1,1,https://github.com/ra1u,segfault issue in cpp,1,[],https://github.com/civetweb/civetweb/pull/650,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/650#issuecomment-417462326,,"Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,652,2018-09-04T11:41:39Z,2018-09-05T20:20:20Z,2018-09-06T07:16:00Z,MERGED,True,5,0,1,https://github.com/linev,Fix - use pthread_setname_np for OS X with proper arguemnts,1,[],https://github.com/civetweb/civetweb/pull/652,https://github.com/linev,1,https://github.com/civetweb/civetweb/pull/652,Only name of current thread can be changed on Mac,Only name of current thread can be changed on Mac,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,652,2018-09-04T11:41:39Z,2018-09-05T20:20:20Z,2018-09-06T07:16:00Z,MERGED,True,5,0,1,https://github.com/linev,Fix - use pthread_setname_np for OS X with proper arguemnts,1,[],https://github.com/civetweb/civetweb/pull/652,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/652#issuecomment-418343900,Only name of current thread can be changed on Mac,"Codecov Report

Merging #652 into master will increase coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #652      +/-   ##
=========================================
+ Coverage   77.67%   77.7%   +0.03%     
=========================================
  Files          13      13              
  Lines        9721    9721              
=========================================
+ Hits         7551    7554       +3     
+ Misses       2170    2167       -3



Impacted Files
Coverage Δ





src/civetweb.c
69.81% <ø> (+0.05%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 19b85cf...b89c86d. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,652,2018-09-04T11:41:39Z,2018-09-05T20:20:20Z,2018-09-06T07:16:00Z,MERGED,True,5,0,1,https://github.com/linev,Fix - use pthread_setname_np for OS X with proper arguemnts,1,[],https://github.com/civetweb/civetweb/pull/652,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/652#issuecomment-418867941,Only name of current thread can be changed on Mac,"Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,658,2018-09-18T21:29:51Z,2018-09-19T20:58:51Z,2018-09-19T20:59:06Z,MERGED,True,14,3,2,https://github.com/Mellnik,Add support for clientside SNI,2,[],https://github.com/civetweb/civetweb/pull/658,https://github.com/Mellnik,1,https://github.com/civetweb/civetweb/pull/658,"SSL_set_tlsext_host_name must be called after context creation and before SSL_connect.
Therefore it required me to push the client options to sslize.
You can test this by connecting to any website running behind Cloudflare. Without setting the hostname the SSL connection will fail.","SSL_set_tlsext_host_name must be called after context creation and before SSL_connect.
Therefore it required me to push the client options to sslize.
You can test this by connecting to any website running behind Cloudflare. Without setting the hostname the SSL connection will fail.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,658,2018-09-18T21:29:51Z,2018-09-19T20:58:51Z,2018-09-19T20:59:06Z,MERGED,True,14,3,2,https://github.com/Mellnik,Add support for clientside SNI,2,[],https://github.com/civetweb/civetweb/pull/658,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/658#issuecomment-422916618,"SSL_set_tlsext_host_name must be called after context creation and before SSL_connect.
Therefore it required me to push the client options to sslize.
You can test this by connecting to any website running behind Cloudflare. Without setting the hostname the SSL connection will fail.","Seems I get some continuous integration errors: https://travis-ci.org/civetweb/civetweb/builds/430264098?utm_source=github_status&utm_medium=notification
The first one is a linker error: https://travis-ci.org/civetweb/civetweb/jobs/430264101#L1050
The builds with OpenSSL 1.1 environment work, the 1.0 builds seem to miss _SSL_set_tlsext_host_name. Probably it's new to V1.1 and missing the OPENSSL_API_1_1 define.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,658,2018-09-18T21:29:51Z,2018-09-19T20:58:51Z,2018-09-19T20:59:06Z,MERGED,True,14,3,2,https://github.com/Mellnik,Add support for clientside SNI,2,[],https://github.com/civetweb/civetweb/pull/658,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/658#issuecomment-422927696,"SSL_set_tlsext_host_name must be called after context creation and before SSL_connect.
Therefore it required me to push the client options to sslize.
You can test this by connecting to any website running behind Cloudflare. Without setting the hostname the SSL connection will fail.","It seems to be already available since 0.9.8f, so no need for an `OPENSSL_API_1_1' define.
Only the dynamic loading code is missing:
By default, civetweb does not ship with OpenSSL included, and there is no load time dependency to OpenSSL (unless you set the NO_SSL_DL define to force this dependency). CivetWeb checks the config file if HTTPS support is required. Only then, it dynamically loads a TLS library using LoadLibrary/dlopen.
... got it ... this little define is missing for dynamic loading ... I can add that ...
#define SSL_CTRL_SET_TLSEXT_HOSTNAME 55
#define SSL_set_tlsext_host_name(ctx,arg)                                      \
        SSL_ctrl(ctx,SSL_CTRL_SET_TLSEXT_HOSTNAME, 0, (void *)arg)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,658,2018-09-18T21:29:51Z,2018-09-19T20:58:51Z,2018-09-19T20:59:06Z,MERGED,True,14,3,2,https://github.com/Mellnik,Add support for clientside SNI,2,[],https://github.com/civetweb/civetweb/pull/658,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/658#issuecomment-422956397,"SSL_set_tlsext_host_name must be called after context creation and before SSL_connect.
Therefore it required me to push the client options to sslize.
You can test this by connecting to any website running behind Cloudflare. Without setting the hostname the SSL connection will fail.",Merged. Thanks for your contribution.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,659,2018-09-19T06:47:54Z,2018-09-19T18:55:27Z,2018-09-19T19:44:07Z,MERGED,True,43,69,1,https://github.com/linev,Fix several compilation problem with OpenSSL,4,[],https://github.com/civetweb/civetweb/pull/659,https://github.com/linev,1,https://github.com/civetweb/civetweb/pull/659,"Remove deprecated ERR_remove_state (since SSL 1.0) and ERR_remove_thread_state (since SSL 1.1)
Use ""const SSL *"" in callback function for SSL_CTX_set_info_callback
In SSL documentation examples callback defined without const specifier void (*)(SSL *, int, int)  See:
https://www.openssl.org/docs/man1.0.2/ssl/ssl.html
https://www.openssl.org/docs/man1.1.0/ssl/ssl.html
But in the source code const SSL is used 'void (*)(const SSL *, int, int) See:
https://github.com/openssl/openssl/blob/1d97c8435171a7af575f73c526d79e1ef0ee5960/ssl/ssl.h#L1173
Problem about wrong documentation described, but not resolved:
https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1147526
Wrong const cast ignored on C or can be suppressed by compiler flags.
But when compiled with modern C++ compiler, correct const should be provided","Remove deprecated ERR_remove_state (since SSL 1.0) and ERR_remove_thread_state (since SSL 1.1)
Use ""const SSL *"" in callback function for SSL_CTX_set_info_callback
In SSL documentation examples callback defined without const specifier void (*)(SSL *, int, int)  See:
https://www.openssl.org/docs/man1.0.2/ssl/ssl.html
https://www.openssl.org/docs/man1.1.0/ssl/ssl.html
But in the source code const SSL is used 'void (*)(const SSL *, int, int) See:
https://github.com/openssl/openssl/blob/1d97c8435171a7af575f73c526d79e1ef0ee5960/ssl/ssl.h#L1173
Problem about wrong documentation described, but not resolved:
https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1147526
Wrong const cast ignored on C or can be suppressed by compiler flags.
But when compiled with modern C++ compiler, correct const should be provided",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,659,2018-09-19T06:47:54Z,2018-09-19T18:55:27Z,2018-09-19T19:44:07Z,MERGED,True,43,69,1,https://github.com/linev,Fix several compilation problem with OpenSSL,4,[],https://github.com/civetweb/civetweb/pull/659,https://github.com/linev,2,https://github.com/civetweb/civetweb/pull/659#issuecomment-422802811,"Remove deprecated ERR_remove_state (since SSL 1.0) and ERR_remove_thread_state (since SSL 1.1)
Use ""const SSL *"" in callback function for SSL_CTX_set_info_callback
In SSL documentation examples callback defined without const specifier void (*)(SSL *, int, int)  See:
https://www.openssl.org/docs/man1.0.2/ssl/ssl.html
https://www.openssl.org/docs/man1.1.0/ssl/ssl.html
But in the source code const SSL is used 'void (*)(const SSL *, int, int) See:
https://github.com/openssl/openssl/blob/1d97c8435171a7af575f73c526d79e1ef0ee5960/ssl/ssl.h#L1173
Problem about wrong documentation described, but not resolved:
https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1147526
Wrong const cast ignored on C or can be suppressed by compiler flags.
But when compiled with modern C++ compiler, correct const should be provided","Seems to be, there is compilation problem on Mac OSX.
Function ERR_remove_thread_state, which is marked as deprecated in openssl 1.0.x is fully missing on openssl 1.1.x. And thus function is not found when trying to load newer library and use it with older ssl 1.0.x API. ERR_remove_state is still there - even if fully deprecated.
I will try to provide workaround",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,659,2018-09-19T06:47:54Z,2018-09-19T18:55:27Z,2018-09-19T19:44:07Z,MERGED,True,43,69,1,https://github.com/linev,Fix several compilation problem with OpenSSL,4,[],https://github.com/civetweb/civetweb/pull/659,https://github.com/apps/codecov,3,https://github.com/civetweb/civetweb/pull/659#issuecomment-422808160,"Remove deprecated ERR_remove_state (since SSL 1.0) and ERR_remove_thread_state (since SSL 1.1)
Use ""const SSL *"" in callback function for SSL_CTX_set_info_callback
In SSL documentation examples callback defined without const specifier void (*)(SSL *, int, int)  See:
https://www.openssl.org/docs/man1.0.2/ssl/ssl.html
https://www.openssl.org/docs/man1.1.0/ssl/ssl.html
But in the source code const SSL is used 'void (*)(const SSL *, int, int) See:
https://github.com/openssl/openssl/blob/1d97c8435171a7af575f73c526d79e1ef0ee5960/ssl/ssl.h#L1173
Problem about wrong documentation described, but not resolved:
https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1147526
Wrong const cast ignored on C or can be suppressed by compiler flags.
But when compiled with modern C++ compiler, correct const should be provided","Codecov Report

Merging #659 into master will increase coverage by 0.01%.
The diff coverage is 80%.


@@            Coverage Diff             @@
##           master     #659      +/-   ##
==========================================
+ Coverage   77.68%   77.69%   +0.01%     
==========================================
  Files          13       13              
  Lines        9728     9728              
==========================================
+ Hits         7557     7558       +1     
+ Misses       2171     2170       -1



Impacted Files
Coverage Δ





src/civetweb.c
69.82% <80%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update ce8f6d3...ac3bdf1. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,659,2018-09-19T06:47:54Z,2018-09-19T18:55:27Z,2018-09-19T19:44:07Z,MERGED,True,43,69,1,https://github.com/linev,Fix several compilation problem with OpenSSL,4,[],https://github.com/civetweb/civetweb/pull/659,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/659#issuecomment-422919326,"Remove deprecated ERR_remove_state (since SSL 1.0) and ERR_remove_thread_state (since SSL 1.1)
Use ""const SSL *"" in callback function for SSL_CTX_set_info_callback
In SSL documentation examples callback defined without const specifier void (*)(SSL *, int, int)  See:
https://www.openssl.org/docs/man1.0.2/ssl/ssl.html
https://www.openssl.org/docs/man1.1.0/ssl/ssl.html
But in the source code const SSL is used 'void (*)(const SSL *, int, int) See:
https://github.com/openssl/openssl/blob/1d97c8435171a7af575f73c526d79e1ef0ee5960/ssl/ssl.h#L1173
Problem about wrong documentation described, but not resolved:
https://bugs.launchpad.net/ubuntu/+source/openssl/+bug/1147526
Wrong const cast ignored on C or can be suppressed by compiler flags.
But when compiled with modern C++ compiler, correct const should be provided","Thanks for your investigation into OpenSSL versions and documentation inconsistencies.
Contribution merged!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,661,2018-09-20T13:20:06Z,2018-09-21T18:34:37Z,2020-04-27T15:02:58Z,MERGED,True,48,24,1,https://github.com/xtne6f, Fix alternative queue,2,[],https://github.com/civetweb/civetweb/pull/661,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/661,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,661,2018-09-20T13:20:06Z,2018-09-21T18:34:37Z,2020-04-27T15:02:58Z,MERGED,True,48,24,1,https://github.com/xtne6f, Fix alternative queue,2,[],https://github.com/civetweb/civetweb/pull/661,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/661#issuecomment-423315945,,"Since you contributed to CivetWeb since several years and apparently know the code quite well, I would like to invite you in github, so you can merge your changes on your own.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,661,2018-09-20T13:20:06Z,2018-09-21T18:34:37Z,2020-04-27T15:02:58Z,MERGED,True,48,24,1,https://github.com/xtne6f, Fix alternative queue,2,[],https://github.com/civetweb/civetweb/pull/661,https://github.com/xtne6f,3,https://github.com/civetweb/civetweb/pull/661#issuecomment-423522672,,"Thank you for your invitation.
From now on, I will directly merge my own commits to your master only if they are mere fixes or clear improvements. In other cases, I will raise pull requests as usual.
Then, I am Japanese and not so good at English. Feel free to correct my wrong expression of source code comments ;)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,661,2018-09-20T13:20:06Z,2018-09-21T18:34:37Z,2020-04-27T15:02:58Z,MERGED,True,48,24,1,https://github.com/xtne6f, Fix alternative queue,2,[],https://github.com/civetweb/civetweb/pull/661,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/661#issuecomment-423632380,,Don't worry - any comments are better than no comments.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,662,2018-09-21T11:56:27Z,2018-09-21T17:57:21Z,2018-09-24T10:09:08Z,MERGED,True,5,2,2,https://github.com/linev,GCC warning -Wdate-time appeared first with gcc4.9,3,[],https://github.com/civetweb/civetweb/pull/662,https://github.com/linev,1,https://github.com/civetweb/civetweb/pull/662,"Do not try do disable it for gcc 4.8, which is still very popular","Do not try do disable it for gcc 4.8, which is still very popular",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,662,2018-09-21T11:56:27Z,2018-09-21T17:57:21Z,2018-09-24T10:09:08Z,MERGED,True,5,2,2,https://github.com/linev,GCC warning -Wdate-time appeared first with gcc4.9,3,[],https://github.com/civetweb/civetweb/pull/662,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/662#issuecomment-423514136,"Do not try do disable it for gcc 4.8, which is still very popular","Codecov Report

Merging #662 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #662   +/-   ##
=======================================
  Coverage   77.66%   77.66%           
=======================================
  Files          13       13           
  Lines        9731     9731           
=======================================
  Hits         7558     7558           
  Misses       2173     2173



Impacted Files
Coverage Δ





src/civetweb.c
69.78% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 78da3d9...588e49d. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,662,2018-09-21T11:56:27Z,2018-09-21T17:57:21Z,2018-09-24T10:09:08Z,MERGED,True,5,2,2,https://github.com/linev,GCC warning -Wdate-time appeared first with gcc4.9,3,[],https://github.com/civetweb/civetweb/pull/662,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/662#issuecomment-423621896,"Do not try do disable it for gcc 4.8, which is still very popular","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,663,2018-09-27T09:22:59Z,2018-10-07T18:16:46Z,2020-04-27T15:08:28Z,MERGED,True,19,14,1,https://github.com/xtne6f,Avoid redefinition of pollfd if HAVE_POLL is not set,1,[],https://github.com/civetweb/civetweb/pull/663,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/663,"On Mingw-w64, or on MSVC and _WIN32_WINNT >= 0x0600, struct pollfd is already defined in winsock2.h in spite of lacking poll(). I recommend avoiding the name.","On Mingw-w64, or on MSVC and _WIN32_WINNT >= 0x0600, struct pollfd is already defined in winsock2.h in spite of lacking poll(). I recommend avoiding the name.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,663,2018-09-27T09:22:59Z,2018-10-07T18:16:46Z,2020-04-27T15:08:28Z,MERGED,True,19,14,1,https://github.com/xtne6f,Avoid redefinition of pollfd if HAVE_POLL is not set,1,[],https://github.com/civetweb/civetweb/pull/663,https://github.com/xtne6f,2,https://github.com/civetweb/civetweb/pull/663#issuecomment-425042611,"On Mingw-w64, or on MSVC and _WIN32_WINNT >= 0x0600, struct pollfd is already defined in winsock2.h in spite of lacking poll(). I recommend avoiding the name.","Umm.. CI failed. If _WIN32 is not set, I must treat HAVE_POLL as set. I'll fix it.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,663,2018-09-27T09:22:59Z,2018-10-07T18:16:46Z,2020-04-27T15:08:28Z,MERGED,True,19,14,1,https://github.com/xtne6f,Avoid redefinition of pollfd if HAVE_POLL is not set,1,[],https://github.com/civetweb/civetweb/pull/663,https://github.com/apps/codecov,3,https://github.com/civetweb/civetweb/pull/663#issuecomment-425073516,"On Mingw-w64, or on MSVC and _WIN32_WINNT >= 0x0600, struct pollfd is already defined in winsock2.h in spite of lacking poll(). I recommend avoiding the name.","Codecov Report

Merging #663 into master will increase coverage by 0.02%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##           master     #663      +/-   ##
==========================================
+ Coverage   77.62%   77.64%   +0.02%     
==========================================
  Files          13       13              
  Lines        9746     9746              
==========================================
+ Hits         7565     7567       +2     
+ Misses       2181     2179       -2



Impacted Files
Coverage Δ





src/civetweb.c
69.75% <100%> (+0.03%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b1e29a4...18e05bb. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,663,2018-09-27T09:22:59Z,2018-10-07T18:16:46Z,2020-04-27T15:08:28Z,MERGED,True,19,14,1,https://github.com/xtne6f,Avoid redefinition of pollfd if HAVE_POLL is not set,1,[],https://github.com/civetweb/civetweb/pull/663,https://github.com/xtne6f,4,https://github.com/civetweb/civetweb/pull/663#issuecomment-425077152,"On Mingw-w64, or on MSVC and _WIN32_WINNT >= 0x0600, struct pollfd is already defined in winsock2.h in spite of lacking poll(). I recommend avoiding the name.",I have fixed it.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,663,2018-09-27T09:22:59Z,2018-10-07T18:16:46Z,2020-04-27T15:08:28Z,MERGED,True,19,14,1,https://github.com/xtne6f,Avoid redefinition of pollfd if HAVE_POLL is not set,1,[],https://github.com/civetweb/civetweb/pull/663,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/663#issuecomment-427674736,"On Mingw-w64, or on MSVC and _WIN32_WINNT >= 0x0600, struct pollfd is already defined in winsock2.h in spite of lacking poll(). I recommend avoiding the name.","You know, as ""member"" you could merge your PR on your own, so you don't have to wait if I'm not available for a couple of days.
Anyway, thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,664,2018-09-27T21:25:24Z,2018-10-07T18:19:06Z,2018-10-07T18:19:20Z,MERGED,True,2,0,1,https://github.com/hojalot,Enable -fPIC when compiling library objects,1,[],https://github.com/civetweb/civetweb/pull/664,https://github.com/hojalot,1,https://github.com/civetweb/civetweb/pull/664,"The -FPIC flag is used when linking the library, but without -fPIC when compiling civetweb.o, libcivetweb.so will fail to link.
Signed-off-by: John Faith jfaith@impinj.com","The -FPIC flag is used when linking the library, but without -fPIC when compiling civetweb.o, libcivetweb.so will fail to link.
Signed-off-by: John Faith jfaith@impinj.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,664,2018-09-27T21:25:24Z,2018-10-07T18:19:06Z,2018-10-07T18:19:20Z,MERGED,True,2,0,1,https://github.com/hojalot,Enable -fPIC when compiling library objects,1,[],https://github.com/civetweb/civetweb/pull/664,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/664#issuecomment-425256137,"The -FPIC flag is used when linking the library, but without -fPIC when compiling civetweb.o, libcivetweb.so will fail to link.
Signed-off-by: John Faith jfaith@impinj.com","Codecov Report

Merging #664 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #664   +/-   ##
=======================================
  Coverage   77.62%   77.62%           
=======================================
  Files          13       13           
  Lines        9746     9746           
=======================================
  Hits         7565     7565           
  Misses       2181     2181

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b1e29a4...9518b50. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,664,2018-09-27T21:25:24Z,2018-10-07T18:19:06Z,2018-10-07T18:19:20Z,MERGED,True,2,0,1,https://github.com/hojalot,Enable -fPIC when compiling library objects,1,[],https://github.com/civetweb/civetweb/pull/664,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/664#issuecomment-427674804,"The -FPIC flag is used when linking the library, but without -fPIC when compiling civetweb.o, libcivetweb.so will fail to link.
Signed-off-by: John Faith jfaith@impinj.com",Thanks for your contribution. Merged.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,665,2018-10-02T00:57:33Z,2018-10-07T18:19:48Z,2018-10-07T23:42:02Z,MERGED,True,3,3,1,https://github.com/hoffa,Fix typo and broken links,1,[],https://github.com/civetweb/civetweb/pull/665,https://github.com/hoffa,1,https://github.com/civetweb/civetweb/pull/665,"Just some housekeeping.
Thanks for the great project!","Just some housekeeping.
Thanks for the great project!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,665,2018-10-02T00:57:33Z,2018-10-07T18:19:48Z,2018-10-07T23:42:02Z,MERGED,True,3,3,1,https://github.com/hoffa,Fix typo and broken links,1,[],https://github.com/civetweb/civetweb/pull/665,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/665#issuecomment-426116788,"Just some housekeeping.
Thanks for the great project!","Codecov Report

Merging #665 into master will increase coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #665      +/-   ##
==========================================
+ Coverage   77.62%   77.64%   +0.02%     
==========================================
  Files          13       13              
  Lines        9746     9746              
==========================================
+ Hits         7565     7567       +2     
+ Misses       2181     2179       -2



Impacted Files
Coverage Δ





src/civetweb.c
69.75% <0%> (+0.03%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b1e29a4...eeabb9b. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,665,2018-10-02T00:57:33Z,2018-10-07T18:19:48Z,2018-10-07T23:42:02Z,MERGED,True,3,3,1,https://github.com/hoffa,Fix typo and broken links,1,[],https://github.com/civetweb/civetweb/pull/665,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/665#issuecomment-427674846,"Just some housekeeping.
Thanks for the great project!","Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,668,2018-10-04T18:23:37Z,2018-10-07T19:10:14Z,2018-10-07T19:10:38Z,MERGED,True,22,22,1,https://github.com/ijm7,Fix some typos and change some grammar in the user manual,2,[],https://github.com/civetweb/civetweb/pull/668,https://github.com/ijm7,1,https://github.com/civetweb/civetweb/pull/668,"Fixes some typos and changes some grammar in the user manual, just to make some bits flow better and make it easier to read.","Fixes some typos and changes some grammar in the user manual, just to make some bits flow better and make it easier to read.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,668,2018-10-04T18:23:37Z,2018-10-07T19:10:14Z,2018-10-07T19:10:38Z,MERGED,True,22,22,1,https://github.com/ijm7,Fix some typos and change some grammar in the user manual,2,[],https://github.com/civetweb/civetweb/pull/668,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/668#issuecomment-427678542,"Fixes some typos and changes some grammar in the user manual, just to make some bits flow better and make it easier to read.","Thanks for your review and corrections.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,669,2018-10-05T05:15:18Z,2018-10-07T19:16:26Z,2018-10-07T19:16:49Z,MERGED,True,39,1,3,https://github.com/tkanoh,Small patch for daemonize,1,[],https://github.com/civetweb/civetweb/pull/669,https://github.com/tkanoh,1,https://github.com/civetweb/civetweb/pull/669,I made a small patch to daemonize and write PID to /var/run/civetweb.pid.,I made a small patch to daemonize and write PID to /var/run/civetweb.pid.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,669,2018-10-05T05:15:18Z,2018-10-07T19:16:26Z,2018-10-07T19:16:49Z,MERGED,True,39,1,3,https://github.com/tkanoh,Small patch for daemonize,1,[],https://github.com/civetweb/civetweb/pull/669,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/669#issuecomment-427678994,I made a small patch to daemonize and write PID to /var/run/civetweb.pid.,"Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,675,2018-10-22T09:22:02Z,2018-10-24T17:01:38Z,2018-10-24T17:02:02Z,MERGED,True,12,1,1,https://github.com/mretallack,fixed memory leak in get_request when fetching the remote host,2,[],https://github.com/civetweb/civetweb/pull/675,https://github.com/mretallack,1,https://github.com/civetweb/civetweb/pull/675,There is a memory leak in the get_request function when it calls the alloc_get_host function. The conn->host can contain a valid/existing hostname. This change makes sure that it is free'ed if it already has been set for a connection.,There is a memory leak in the get_request function when it calls the alloc_get_host function. The conn->host can contain a valid/existing hostname. This change makes sure that it is free'ed if it already has been set for a connection.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,675,2018-10-22T09:22:02Z,2018-10-24T17:01:38Z,2018-10-24T17:02:02Z,MERGED,True,12,1,1,https://github.com/mretallack,fixed memory leak in get_request when fetching the remote host,2,[],https://github.com/civetweb/civetweb/pull/675,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/675#issuecomment-431924259,There is a memory leak in the get_request function when it calls the alloc_get_host function. The conn->host can contain a valid/existing hostname. This change makes sure that it is free'ed if it already has been set for a connection.,"Codecov Report

Merging #675 into master will increase coverage by 0.01%.
The diff coverage is 83.33%.


@@            Coverage Diff             @@
##           master     #675      +/-   ##
==========================================
+ Coverage   77.63%   77.64%   +0.01%     
==========================================
  Files          13       13              
  Lines        9746     9751       +5     
==========================================
+ Hits         7566     7571       +5     
  Misses       2180     2180



Impacted Files
Coverage Δ





src/civetweb.c
69.76% <83.33%> (+0.02%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f3cffdf...1917a22. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,675,2018-10-22T09:22:02Z,2018-10-24T17:01:38Z,2018-10-24T17:02:02Z,MERGED,True,12,1,1,https://github.com/mretallack,fixed memory leak in get_request when fetching the remote host,2,[],https://github.com/civetweb/civetweb/pull/675,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/675#issuecomment-432742985,There is a memory leak in the get_request function when it calls the alloc_get_host function. The conn->host can contain a valid/existing hostname. This change makes sure that it is free'ed if it already has been set for a connection.,"Thanks for your fix.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,676,2018-10-22T09:31:45Z,2018-10-24T16:56:16Z,2018-10-24T16:56:31Z,MERGED,True,9,1,1,https://github.com/mretallack,Reuse timeout for SSL Connect and Accept operation.,1,[],https://github.com/civetweb/civetweb/pull/676,https://github.com/mretallack,1,https://github.com/civetweb/civetweb/pull/676,"The SSL_Accept and SSL_Connect operations had a timeout of 2 seconds,
for slow and bad networks, this caused disconnects in the Connect and
Accept stages. This change allow the timeout to be reused to allow
SSL_Connect and SSL_Accept to be longer.","The SSL_Accept and SSL_Connect operations had a timeout of 2 seconds,
for slow and bad networks, this caused disconnects in the Connect and
Accept stages. This change allow the timeout to be reused to allow
SSL_Connect and SSL_Accept to be longer.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,676,2018-10-22T09:31:45Z,2018-10-24T16:56:16Z,2018-10-24T16:56:31Z,MERGED,True,9,1,1,https://github.com/mretallack,Reuse timeout for SSL Connect and Accept operation.,1,[],https://github.com/civetweb/civetweb/pull/676,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/676#issuecomment-431925798,"The SSL_Accept and SSL_Connect operations had a timeout of 2 seconds,
for slow and bad networks, this caused disconnects in the Connect and
Accept stages. This change allow the timeout to be reused to allow
SSL_Connect and SSL_Accept to be longer.","Codecov Report

Merging #676 into master will decrease coverage by <.01%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##           master     #676      +/-   ##
==========================================
- Coverage   77.63%   77.62%   -0.01%     
==========================================
  Files          13       13              
  Lines        9746     9749       +3     
==========================================
+ Hits         7566     7568       +2     
- Misses       2180     2181       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.73% <100%> (-0.01%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f3cffdf...d3e6b5b. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,676,2018-10-22T09:31:45Z,2018-10-24T16:56:16Z,2018-10-24T16:56:31Z,MERGED,True,9,1,1,https://github.com/mretallack,Reuse timeout for SSL Connect and Accept operation.,1,[],https://github.com/civetweb/civetweb/pull/676,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/676#issuecomment-432740407,"The SSL_Accept and SSL_Connect operations had a timeout of 2 seconds,
for slow and bad networks, this caused disconnects in the Connect and
Accept stages. This change allow the timeout to be reused to allow
SSL_Connect and SSL_Accept to be longer.","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,679,2018-11-01T10:24:48Z,2018-11-01T20:58:17Z,2018-11-01T20:58:27Z,MERGED,True,1,1,1,https://github.com/erick-vieyra,Corrected typo in mg_send_file_body.md,1,[],https://github.com/civetweb/civetweb/pull/679,https://github.com/erick-vieyra,1,https://github.com/civetweb/civetweb/pull/679,It seems that there is a small typo in the description!,It seems that there is a small typo in the description!,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,679,2018-11-01T10:24:48Z,2018-11-01T20:58:17Z,2018-11-01T20:58:27Z,MERGED,True,1,1,1,https://github.com/erick-vieyra,Corrected typo in mg_send_file_body.md,1,[],https://github.com/civetweb/civetweb/pull/679,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/679#issuecomment-435005439,It seems that there is a small typo in the description!,"Codecov Report

Merging #679 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #679      +/-   ##
==========================================
- Coverage   77.63%   77.62%   -0.02%     
==========================================
  Files          13       13              
  Lines        9751     9751              
==========================================
- Hits         7570     7569       -1     
- Misses       2181     2182       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.73% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update a53c492...1c4a7ec. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,679,2018-11-01T10:24:48Z,2018-11-01T20:58:17Z,2018-11-01T20:58:27Z,MERGED,True,1,1,1,https://github.com/erick-vieyra,Corrected typo in mg_send_file_body.md,1,[],https://github.com/civetweb/civetweb/pull/679,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/679#issuecomment-435184849,It seems that there is a small typo in the description!,"Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,685,2018-11-09T12:38:30Z,2018-11-11T17:46:31Z,2018-11-11T17:46:41Z,MERGED,True,27,11,2,https://github.com/gjasny,Separate C and CXX DLL import and export flags,1,[],https://github.com/civetweb/civetweb/pull/685,https://github.com/gjasny,1,https://github.com/civetweb/civetweb/pull/685,The C++ DLL has to export their own symbols but to import symbols from C DLL.,The C++ DLL has to export their own symbols but to import symbols from C DLL.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,685,2018-11-09T12:38:30Z,2018-11-11T17:46:31Z,2018-11-11T17:46:41Z,MERGED,True,27,11,2,https://github.com/gjasny,Separate C and CXX DLL import and export flags,1,[],https://github.com/civetweb/civetweb/pull/685,https://github.com/gjasny,2,https://github.com/civetweb/civetweb/pull/685#issuecomment-437349573,The C++ DLL has to export their own symbols but to import symbols from C DLL.,As a follow-up the gerenate_export_header might ease exporting logic.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,685,2018-11-09T12:38:30Z,2018-11-11T17:46:31Z,2018-11-11T17:46:41Z,MERGED,True,27,11,2,https://github.com/gjasny,Separate C and CXX DLL import and export flags,1,[],https://github.com/civetweb/civetweb/pull/685,https://github.com/apps/codecov,3,https://github.com/civetweb/civetweb/pull/685#issuecomment-437354296,The C++ DLL has to export their own symbols but to import symbols from C DLL.,"Codecov Report

Merging #685 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #685      +/-   ##
==========================================
- Coverage   77.63%   77.62%   -0.02%     
==========================================
  Files          13       13              
  Lines        9751     9751              
==========================================
- Hits         7570     7569       -1     
- Misses       2181     2182       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.73% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8ce7be8...a474201. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,685,2018-11-09T12:38:30Z,2018-11-11T17:46:31Z,2018-11-11T17:46:41Z,MERGED,True,27,11,2,https://github.com/gjasny,Separate C and CXX DLL import and export flags,1,[],https://github.com/civetweb/civetweb/pull/685,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/685#issuecomment-437689772,The C++ DLL has to export their own symbols but to import symbols from C DLL.,Good idea - thanks for your PR.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,685,2018-11-09T12:38:30Z,2018-11-11T17:46:31Z,2018-11-11T17:46:41Z,MERGED,True,27,11,2,https://github.com/gjasny,Separate C and CXX DLL import and export flags,1,[],https://github.com/civetweb/civetweb/pull/685,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/685#issuecomment-437689790,The C++ DLL has to export their own symbols but to import symbols from C DLL.,"Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,687,2018-11-12T10:12:56Z,2018-11-14T21:44:19Z,2018-11-14T21:44:35Z,MERGED,True,1,3,1,https://github.com/vaind,Fix #686 CivetServer::getPostData valgrind UninitCondition,1,[],https://github.com/civetweb/civetweb/pull/687,https://github.com/vaind,1,https://github.com/civetweb/civetweb/pull/687,Fixes a valgrind issue by limiting the constructed string to the number of bytes read,Fixes a valgrind issue by limiting the constructed string to the number of bytes read,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,687,2018-11-12T10:12:56Z,2018-11-14T21:44:19Z,2018-11-14T21:44:35Z,MERGED,True,1,3,1,https://github.com/vaind,Fix #686 CivetServer::getPostData valgrind UninitCondition,1,[],https://github.com/civetweb/civetweb/pull/687,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/687#issuecomment-438829821,Fixes a valgrind issue by limiting the constructed string to the number of bytes read,"Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,689,2018-11-13T11:24:07Z,2018-11-14T22:43:40Z,2018-11-15T09:41:19Z,MERGED,True,15,14,2,https://github.com/mikecrowe,CMakeLists: Use GNUInstallDirs to determine install directories,1,[],https://github.com/civetweb/civetweb/pull/689,https://github.com/mikecrowe,1,https://github.com/civetweb/civetweb/pull/689,"CMake's GNUInstallDirs knows where particular Linux architectures and
distributions want to have their libraries installed. In particular,
Debian-derived ""multi-arch"" distributions keep their libraries in triplet
directories under /lib. Other ""bi-arch"" distributions keep 64-bit libraries
in /lib64.
Including GNUInstallDirs and using CMAKE_INSTALL_LIBDIR,
CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_INCLUDEDIR means that civetweb's
libraries, binaries and header files are installed in the correct
collection.
The placement of the include(GnuInstallDirs) appears to be critical to
ensure that the variables it uses are available. Immediately after
determine_target_architecture appears to work for me.
Tested with OpenEmbedded and on Debian GNU/Linux 9 (the special naming only
applies when installing in /usr.)","CMake's GNUInstallDirs knows where particular Linux architectures and
distributions want to have their libraries installed. In particular,
Debian-derived ""multi-arch"" distributions keep their libraries in triplet
directories under /lib. Other ""bi-arch"" distributions keep 64-bit libraries
in /lib64.
Including GNUInstallDirs and using CMAKE_INSTALL_LIBDIR,
CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_INCLUDEDIR means that civetweb's
libraries, binaries and header files are installed in the correct
collection.
The placement of the include(GnuInstallDirs) appears to be critical to
ensure that the variables it uses are available. Immediately after
determine_target_architecture appears to work for me.
Tested with OpenEmbedded and on Debian GNU/Linux 9 (the special naming only
applies when installing in /usr.)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,689,2018-11-13T11:24:07Z,2018-11-14T22:43:40Z,2018-11-15T09:41:19Z,MERGED,True,15,14,2,https://github.com/mikecrowe,CMakeLists: Use GNUInstallDirs to determine install directories,1,[],https://github.com/civetweb/civetweb/pull/689,https://github.com/mikecrowe,2,https://github.com/civetweb/civetweb/pull/689#issuecomment-438244898,"CMake's GNUInstallDirs knows where particular Linux architectures and
distributions want to have their libraries installed. In particular,
Debian-derived ""multi-arch"" distributions keep their libraries in triplet
directories under /lib. Other ""bi-arch"" distributions keep 64-bit libraries
in /lib64.
Including GNUInstallDirs and using CMAKE_INSTALL_LIBDIR,
CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_INCLUDEDIR means that civetweb's
libraries, binaries and header files are installed in the correct
collection.
The placement of the include(GnuInstallDirs) appears to be critical to
ensure that the variables it uses are available. Immediately after
determine_target_architecture appears to work for me.
Tested with OpenEmbedded and on Debian GNU/Linux 9 (the special naming only
applies when installing in /usr.)","It doesn't look like the build failure is related to the change I made, and a different unrelated pull request failed with the same thing. :(",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,689,2018-11-13T11:24:07Z,2018-11-14T22:43:40Z,2018-11-15T09:41:19Z,MERGED,True,15,14,2,https://github.com/mikecrowe,CMakeLists: Use GNUInstallDirs to determine install directories,1,[],https://github.com/civetweb/civetweb/pull/689,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/689#issuecomment-438837599,"CMake's GNUInstallDirs knows where particular Linux architectures and
distributions want to have their libraries installed. In particular,
Debian-derived ""multi-arch"" distributions keep their libraries in triplet
directories under /lib. Other ""bi-arch"" distributions keep 64-bit libraries
in /lib64.
Including GNUInstallDirs and using CMAKE_INSTALL_LIBDIR,
CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_INCLUDEDIR means that civetweb's
libraries, binaries and header files are installed in the correct
collection.
The placement of the include(GnuInstallDirs) appears to be critical to
ensure that the variables it uses are available. Immediately after
determine_target_architecture appears to work for me.
Tested with OpenEmbedded and on Debian GNU/Linux 9 (the special naming only
applies when installing in /usr.)",I fixed the error and restarted the CI test.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,689,2018-11-13T11:24:07Z,2018-11-14T22:43:40Z,2018-11-15T09:41:19Z,MERGED,True,15,14,2,https://github.com/mikecrowe,CMakeLists: Use GNUInstallDirs to determine install directories,1,[],https://github.com/civetweb/civetweb/pull/689,https://github.com/apps/codecov,4,https://github.com/civetweb/civetweb/pull/689#issuecomment-438846660,"CMake's GNUInstallDirs knows where particular Linux architectures and
distributions want to have their libraries installed. In particular,
Debian-derived ""multi-arch"" distributions keep their libraries in triplet
directories under /lib. Other ""bi-arch"" distributions keep 64-bit libraries
in /lib64.
Including GNUInstallDirs and using CMAKE_INSTALL_LIBDIR,
CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_INCLUDEDIR means that civetweb's
libraries, binaries and header files are installed in the correct
collection.
The placement of the include(GnuInstallDirs) appears to be critical to
ensure that the variables it uses are available. Immediately after
determine_target_architecture appears to work for me.
Tested with OpenEmbedded and on Debian GNU/Linux 9 (the special naming only
applies when installing in /usr.)","Codecov Report

❗ No coverage uploaded for pull request base (master@79226cd). Click here to learn what that means.
The diff coverage is n/a.


@@            Coverage Diff            @@
##             master     #689   +/-   ##
=========================================
  Coverage          ?   77.78%           
=========================================
  Files             ?       13           
  Lines             ?     9756           
  Branches          ?        0           
=========================================
  Hits              ?     7589           
  Misses            ?     2167           
  Partials          ?        0

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 79226cd...e0921f6. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,689,2018-11-13T11:24:07Z,2018-11-14T22:43:40Z,2018-11-15T09:41:19Z,MERGED,True,15,14,2,https://github.com/mikecrowe,CMakeLists: Use GNUInstallDirs to determine install directories,1,[],https://github.com/civetweb/civetweb/pull/689,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/689#issuecomment-438846937,"CMake's GNUInstallDirs knows where particular Linux architectures and
distributions want to have their libraries installed. In particular,
Debian-derived ""multi-arch"" distributions keep their libraries in triplet
directories under /lib. Other ""bi-arch"" distributions keep 64-bit libraries
in /lib64.
Including GNUInstallDirs and using CMAKE_INSTALL_LIBDIR,
CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_INCLUDEDIR means that civetweb's
libraries, binaries and header files are installed in the correct
collection.
The placement of the include(GnuInstallDirs) appears to be critical to
ensure that the variables it uses are available. Immediately after
determine_target_architecture appears to work for me.
Tested with OpenEmbedded and on Debian GNU/Linux 9 (the special naming only
applies when installing in /usr.)",Works after fixing the unrelated error.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,689,2018-11-13T11:24:07Z,2018-11-14T22:43:40Z,2018-11-15T09:41:19Z,MERGED,True,15,14,2,https://github.com/mikecrowe,CMakeLists: Use GNUInstallDirs to determine install directories,1,[],https://github.com/civetweb/civetweb/pull/689,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/689#issuecomment-438846992,"CMake's GNUInstallDirs knows where particular Linux architectures and
distributions want to have their libraries installed. In particular,
Debian-derived ""multi-arch"" distributions keep their libraries in triplet
directories under /lib. Other ""bi-arch"" distributions keep 64-bit libraries
in /lib64.
Including GNUInstallDirs and using CMAKE_INSTALL_LIBDIR,
CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_INCLUDEDIR means that civetweb's
libraries, binaries and header files are installed in the correct
collection.
The placement of the include(GnuInstallDirs) appears to be critical to
ensure that the variables it uses are available. Immediately after
determine_target_architecture appears to work for me.
Tested with OpenEmbedded and on Debian GNU/Linux 9 (the special naming only
applies when installing in /usr.)","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,689,2018-11-13T11:24:07Z,2018-11-14T22:43:40Z,2018-11-15T09:41:19Z,MERGED,True,15,14,2,https://github.com/mikecrowe,CMakeLists: Use GNUInstallDirs to determine install directories,1,[],https://github.com/civetweb/civetweb/pull/689,https://github.com/mikecrowe,7,https://github.com/civetweb/civetweb/pull/689#issuecomment-438978949,"CMake's GNUInstallDirs knows where particular Linux architectures and
distributions want to have their libraries installed. In particular,
Debian-derived ""multi-arch"" distributions keep their libraries in triplet
directories under /lib. Other ""bi-arch"" distributions keep 64-bit libraries
in /lib64.
Including GNUInstallDirs and using CMAKE_INSTALL_LIBDIR,
CMAKE_INSTALL_BINDIR and CMAKE_INSTALL_INCLUDEDIR means that civetweb's
libraries, binaries and header files are installed in the correct
collection.
The placement of the include(GnuInstallDirs) appears to be critical to
ensure that the variables it uses are available. Immediately after
determine_target_architecture appears to work for me.
Tested with OpenEmbedded and on Debian GNU/Linux 9 (the special naming only
applies when installing in /usr.)","Thanks for merging so quickly.
Mike.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,690,2018-11-14T22:40:32Z,2018-11-15T21:19:52Z,2018-11-15T21:21:06Z,MERGED,True,14,16,1,https://github.com/albertino80,fix relative url in directory listing,1,[],https://github.com/civetweb/civetweb/pull/690,https://github.com/albertino80,1,https://github.com/civetweb/civetweb/pull/690,"If civetweb is used behind a reverse proxy (for example, using Apache as a Reverse Proxy with mod_proxy), the listing directory reports wrong file/dir urls.
Example:
I have a civetweb server that answers internally at: http://127.0.0.1:8080
Apache configuration:
<VirtualHost *:80>
    ProxyPreserveHost On

    ProxyPass /example http://127.0.0.1:8080/
    ProxyPassReverse /example http://127.0.0.1:8080/
</VirtualHost>

In my browser I can call
http://127.0.0.1/example/
internally I am redirected to
http://127.0.0.1:8080
In this case, request_info.local_uri is equal to / (because it's the proxy that calls civetweb internally).
Suppose the root folder contains test.txt 
if request_info.local_uri is placed in front of the links, I will get the link /test.txt which resolves into http://127.0.0.1/test.txt
I want the link test.txt (relative), which resolves into http://127.0.0.1/example/test.txt
With this change, relative urls are used and the links on drectory listing are correct.","If civetweb is used behind a reverse proxy (for example, using Apache as a Reverse Proxy with mod_proxy), the listing directory reports wrong file/dir urls.
Example:
I have a civetweb server that answers internally at: http://127.0.0.1:8080
Apache configuration:
<VirtualHost *:80>
    ProxyPreserveHost On

    ProxyPass /example http://127.0.0.1:8080/
    ProxyPassReverse /example http://127.0.0.1:8080/
</VirtualHost>

In my browser I can call
http://127.0.0.1/example/
internally I am redirected to
http://127.0.0.1:8080
In this case, request_info.local_uri is equal to / (because it's the proxy that calls civetweb internally).
Suppose the root folder contains test.txt 
if request_info.local_uri is placed in front of the links, I will get the link /test.txt which resolves into http://127.0.0.1/test.txt
I want the link test.txt (relative), which resolves into http://127.0.0.1/example/test.txt
With this change, relative urls are used and the links on drectory listing are correct.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,690,2018-11-14T22:40:32Z,2018-11-15T21:19:52Z,2018-11-15T21:21:06Z,MERGED,True,14,16,1,https://github.com/albertino80,fix relative url in directory listing,1,[],https://github.com/civetweb/civetweb/pull/690,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/690#issuecomment-438858459,"If civetweb is used behind a reverse proxy (for example, using Apache as a Reverse Proxy with mod_proxy), the listing directory reports wrong file/dir urls.
Example:
I have a civetweb server that answers internally at: http://127.0.0.1:8080
Apache configuration:
<VirtualHost *:80>
    ProxyPreserveHost On

    ProxyPass /example http://127.0.0.1:8080/
    ProxyPassReverse /example http://127.0.0.1:8080/
</VirtualHost>

In my browser I can call
http://127.0.0.1/example/
internally I am redirected to
http://127.0.0.1:8080
In this case, request_info.local_uri is equal to / (because it's the proxy that calls civetweb internally).
Suppose the root folder contains test.txt 
if request_info.local_uri is placed in front of the links, I will get the link /test.txt which resolves into http://127.0.0.1/test.txt
I want the link test.txt (relative), which resolves into http://127.0.0.1/example/test.txt
With this change, relative urls are used and the links on drectory listing are correct.","Codecov Report

Merging #690 into master will decrease coverage by 0.04%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##           master     #690      +/-   ##
==========================================
- Coverage   77.78%   77.74%   -0.05%     
==========================================
  Files          13       13              
  Lines        9756     9755       -1     
==========================================
- Hits         7589     7584       -5     
- Misses       2167     2171       +4



Impacted Files
Coverage Δ





src/civetweb.c
69.66% <100%> (-0.09%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5987313...167c7a1. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,690,2018-11-14T22:40:32Z,2018-11-15T21:19:52Z,2018-11-15T21:21:06Z,MERGED,True,14,16,1,https://github.com/albertino80,fix relative url in directory listing,1,[],https://github.com/civetweb/civetweb/pull/690,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/690#issuecomment-439194415,"If civetweb is used behind a reverse proxy (for example, using Apache as a Reverse Proxy with mod_proxy), the listing directory reports wrong file/dir urls.
Example:
I have a civetweb server that answers internally at: http://127.0.0.1:8080
Apache configuration:
<VirtualHost *:80>
    ProxyPreserveHost On

    ProxyPass /example http://127.0.0.1:8080/
    ProxyPassReverse /example http://127.0.0.1:8080/
</VirtualHost>

In my browser I can call
http://127.0.0.1/example/
internally I am redirected to
http://127.0.0.1:8080
In this case, request_info.local_uri is equal to / (because it's the proxy that calls civetweb internally).
Suppose the root folder contains test.txt 
if request_info.local_uri is placed in front of the links, I will get the link /test.txt which resolves into http://127.0.0.1/test.txt
I want the link test.txt (relative), which resolves into http://127.0.0.1/example/test.txt
With this change, relative urls are used and the links on drectory listing are correct.","Thanks for your contribution.
Merged.
I will add this to the release notes later.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,694,2018-11-21T09:54:50Z,2018-11-22T07:20:27Z,2018-11-22T07:20:27Z,CLOSED,False,1,1,1,https://github.com/duong2179,Update mg_get_response_info.md,1,[],https://github.com/civetweb/civetweb/pull/694,https://github.com/duong2179,1,https://github.com/civetweb/civetweb/pull/694,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,695,2018-11-21T09:57:29Z,2018-11-22T07:42:05Z,2018-11-22T07:42:05Z,CLOSED,False,27,0,1,https://github.com/duong2179,Update mg_read.md,1,[],https://github.com/civetweb/civetweb/pull/695,https://github.com/duong2179,1,https://github.com/civetweb/civetweb/pull/695,Added example,Added example,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,695,2018-11-21T09:57:29Z,2018-11-22T07:42:05Z,2018-11-22T07:42:05Z,CLOSED,False,27,0,1,https://github.com/duong2179,Update mg_read.md,1,[],https://github.com/civetweb/civetweb/pull/695,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/695#issuecomment-440622196,Added example,"Codecov Report

Merging #695 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #695   +/-   ##
=======================================
  Coverage   77.77%   77.77%           
=======================================
  Files          13       13           
  Lines        9755     9755           
=======================================
  Hits         7587     7587           
  Misses       2168     2168

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5a8fd38...a3ec19b. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,696,2018-11-21T20:03:47Z,2018-11-22T20:19:26Z,2018-11-22T20:19:37Z,MERGED,True,49,7,3,https://github.com/gjasny,Export CMake project,1,[],https://github.com/civetweb/civetweb/pull/696,https://github.com/gjasny,1,https://github.com/civetweb/civetweb/pull/696,"That patch adds exporting of the CMake targets for later consumption. If replaces the need to write a custom FindCivetWeb.cmake and makes instead the project describing itself.
I have not tested it on Windows, yet. But it's a start and better than noting.","That patch adds exporting of the CMake targets for later consumption. If replaces the need to write a custom FindCivetWeb.cmake and makes instead the project describing itself.
I have not tested it on Windows, yet. But it's a start and better than noting.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,696,2018-11-21T20:03:47Z,2018-11-22T20:19:26Z,2018-11-22T20:19:37Z,MERGED,True,49,7,3,https://github.com/gjasny,Export CMake project,1,[],https://github.com/civetweb/civetweb/pull/696,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/696#issuecomment-440801206,"That patch adds exporting of the CMake targets for later consumption. If replaces the need to write a custom FindCivetWeb.cmake and makes instead the project describing itself.
I have not tested it on Windows, yet. But it's a start and better than noting.","Codecov Report

Merging #696 into master will increase coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #696      +/-   ##
==========================================
+ Coverage   77.77%   77.79%   +0.02%     
==========================================
  Files          13       13              
  Lines        9755     9755              
==========================================
+ Hits         7587     7589       +2     
+ Misses       2168     2166       -2



Impacted Files
Coverage Δ





src/civetweb.c
69.76% <0%> (+0.03%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5a8fd38...2c1caa6. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,696,2018-11-21T20:03:47Z,2018-11-22T20:19:26Z,2018-11-22T20:19:37Z,MERGED,True,49,7,3,https://github.com/gjasny,Export CMake project,1,[],https://github.com/civetweb/civetweb/pull/696,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/696#issuecomment-441114618,"That patch adds exporting of the CMake targets for later consumption. If replaces the need to write a custom FindCivetWeb.cmake and makes instead the project describing itself.
I have not tested it on Windows, yet. But it's a start and better than noting.",It seems most of you have more experience with CMake than I have. So I just trust you this does something useful without breaking the current behavior.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,696,2018-11-21T20:03:47Z,2018-11-22T20:19:26Z,2018-11-22T20:19:37Z,MERGED,True,49,7,3,https://github.com/gjasny,Export CMake project,1,[],https://github.com/civetweb/civetweb/pull/696,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/696#issuecomment-441114642,"That patch adds exporting of the CMake targets for later consumption. If replaces the need to write a custom FindCivetWeb.cmake and makes instead the project describing itself.
I have not tested it on Windows, yet. But it's a start and better than noting.","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,698,2018-11-22T07:22:20Z,2018-11-22T07:42:20Z,2018-11-22T07:42:20Z,CLOSED,False,2,2,1,https://github.com/duong2179,Fixed typos in websocket example,1,[],https://github.com/civetweb/civetweb/pull/698,https://github.com/duong2179,1,https://github.com/civetweb/civetweb/pull/698,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,699,2018-11-22T07:23:20Z,2018-11-22T07:42:28Z,2018-11-22T07:42:28Z,CLOSED,False,1,1,1,https://github.com/duong2179,Fixed typos in mg_get_response_info.md,1,[],https://github.com/civetweb/civetweb/pull/699,https://github.com/duong2179,1,https://github.com/civetweb/civetweb/pull/699,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,700,2018-11-22T07:41:50Z,2018-11-22T20:33:40Z,2018-11-22T20:37:50Z,MERGED,True,30,3,3,https://github.com/duong2179,Fixed some typos and added example code snippet.,6,[],https://github.com/civetweb/civetweb/pull/700,https://github.com/duong2179,1,https://github.com/civetweb/civetweb/pull/700,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,700,2018-11-22T07:41:50Z,2018-11-22T20:33:40Z,2018-11-22T20:37:50Z,MERGED,True,30,3,3,https://github.com/duong2179,Fixed some typos and added example code snippet.,6,[],https://github.com/civetweb/civetweb/pull/700,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/700#issuecomment-440949568,,"Codecov Report

Merging #700 into master will increase coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #700      +/-   ##
==========================================
+ Coverage   77.77%   77.78%   +0.01%     
==========================================
  Files          13       13              
  Lines        9755     9755              
==========================================
+ Hits         7587     7588       +1     
+ Misses       2168     2167       -1



Impacted Files
Coverage Δ





src/civetweb.c
69.74% <0%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5a8fd38...b60eff6. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,700,2018-11-22T07:41:50Z,2018-11-22T20:33:40Z,2018-11-22T20:37:50Z,MERGED,True,30,3,3,https://github.com/duong2179,Fixed some typos and added example code snippet.,6,[],https://github.com/civetweb/civetweb/pull/700,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/700#issuecomment-441116254,,You opened and closed a couple of pull requests - is this the sum of all your previous pull requests?,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,700,2018-11-22T07:41:50Z,2018-11-22T20:33:40Z,2018-11-22T20:37:50Z,MERGED,True,30,3,3,https://github.com/duong2179,Fixed some typos and added example code snippet.,6,[],https://github.com/civetweb/civetweb/pull/700,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/700#issuecomment-441116759,,"Merged.
Thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,701,2018-11-22T10:12:00Z,2018-11-22T21:10:04Z,2018-11-27T09:35:49Z,MERGED,True,40,23,2,https://github.com/PhilLab,CPP interface: Added getter for full port information,1,[],https://github.com/civetweb/civetweb/pull/701,https://github.com/PhilLab,1,https://github.com/civetweb/civetweb/pull/701,"To be able to query port details like SSL.
I am not convinced by the naming though. If you have a better idea than getListeningPortsFull(). I can change it.
EDIT By the way, why is the struct called mg_server_ports and not mg_server_port?","To be able to query port details like SSL.
I am not convinced by the naming though. If you have a better idea than getListeningPortsFull(). I can change it.
EDIT By the way, why is the struct called mg_server_ports and not mg_server_port?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,701,2018-11-22T10:12:00Z,2018-11-22T21:10:04Z,2018-11-27T09:35:49Z,MERGED,True,40,23,2,https://github.com/PhilLab,CPP interface: Added getter for full port information,1,[],https://github.com/civetweb/civetweb/pull/701,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/701#issuecomment-440989266,"To be able to query port details like SSL.
I am not convinced by the naming though. If you have a better idea than getListeningPortsFull(). I can change it.
EDIT By the way, why is the struct called mg_server_ports and not mg_server_port?","Codecov Report

Merging #701 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #701   +/-   ##
=======================================
  Coverage   77.77%   77.77%           
=======================================
  Files          13       13           
  Lines        9755     9755           
=======================================
  Hits         7587     7587           
  Misses       2168     2168

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5a8fd38...161dc25. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,701,2018-11-22T10:12:00Z,2018-11-22T21:10:04Z,2018-11-27T09:35:49Z,MERGED,True,40,23,2,https://github.com/PhilLab,CPP interface: Added getter for full port information,1,[],https://github.com/civetweb/civetweb/pull/701,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/701#issuecomment-441120449,"To be able to query port details like SSL.
I am not convinced by the naming though. If you have a better idea than getListeningPortsFull(). I can change it.
EDIT By the way, why is the struct called mg_server_ports and not mg_server_port?","I am not convinced by the naming though. If you have a better idea than getListeningPortsFull(). I can change it.

sorry ... no better idea right now ;-)

EDIT By the way, why is the struct called mg_server_ports and not mg_server_port?

Probably I got a lot of ""spam"" that day, turned it to a ""map"", but then I had to put the surplus ""s"" somewhere?
You are right, it does not belong there - but removing it causes compatibility issues. So we could add the correct name without s, but for some time (some years) there must be both names.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,701,2018-11-22T10:12:00Z,2018-11-22T21:10:04Z,2018-11-27T09:35:49Z,MERGED,True,40,23,2,https://github.com/PhilLab,CPP interface: Added getter for full port information,1,[],https://github.com/civetweb/civetweb/pull/701,https://github.com/PhilLab,4,https://github.com/civetweb/civetweb/pull/701#issuecomment-441990742,"To be able to query port details like SSL.
I am not convinced by the naming though. If you have a better idea than getListeningPortsFull(). I can change it.
EDIT By the way, why is the struct called mg_server_ports and not mg_server_port?","I fixed the typo (hopefully backwards-compatible) in this MR:
#703",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,702,2018-11-24T14:58:13Z,2018-11-24T19:22:30Z,2018-11-24T20:19:51Z,MERGED,True,8,1,1,https://github.com/gjasny,Also export CMake package version,1,[],https://github.com/civetweb/civetweb/pull/702,https://github.com/gjasny,1,https://github.com/civetweb/civetweb/pull/702,"After merging, could you please release a v1.11.1 or v1.12.0 version (or an release candidate of some form)?
Thanks!","After merging, could you please release a v1.11.1 or v1.12.0 version (or an release candidate of some form)?
Thanks!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,702,2018-11-24T14:58:13Z,2018-11-24T19:22:30Z,2018-11-24T20:19:51Z,MERGED,True,8,1,1,https://github.com/gjasny,Also export CMake package version,1,[],https://github.com/civetweb/civetweb/pull/702,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/702#issuecomment-441375383,"After merging, could you please release a v1.11.1 or v1.12.0 version (or an release candidate of some form)?
Thanks!","Codecov Report

Merging #702 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #702   +/-   ##
=======================================
  Coverage   77.79%   77.79%           
=======================================
  Files          13       13           
  Lines        9755     9755           
=======================================
  Hits         7589     7589           
  Misses       2166     2166



Impacted Files
Coverage Δ





src/civetweb.c
69.76% <0%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 00972f7...f277263. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,702,2018-11-24T14:58:13Z,2018-11-24T19:22:30Z,2018-11-24T20:19:51Z,MERGED,True,8,1,1,https://github.com/gjasny,Also export CMake package version,1,[],https://github.com/civetweb/civetweb/pull/702,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/702#issuecomment-441393125,"After merging, could you please release a v1.11.1 or v1.12.0 version (or an release candidate of some form)?
Thanks!","For a full release (V 1.12), I need to have a look at all open issues, need to finish release notes and some manual tests on several platforms - this takes a couple of weeks.
A bug fix branch (V 1.11.1) would be exactly the source of V 1.11 plus a patch for a severe bug.
In both cases, binaries are uploaded to Sourceforge.
Why do you need a ""release""? In other words, what's your expectation from a ""release""?
Do you need a zip or binary somewhere? Or is it a tag you need for reference?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,703,2018-11-27T09:35:23Z,2018-12-23T18:44:31Z,2019-01-07T09:37:02Z,MERGED,True,21,18,10,https://github.com/PhilLab,WIP: Fixed typo mg_server_ports -> mg_server_port,2,[],https://github.com/civetweb/civetweb/pull/703,https://github.com/PhilLab,1,https://github.com/civetweb/civetweb/pull/703,"Using
typedef struct mg_server_port mg_server_ports;
to stay backwards-compatible","Using
typedef struct mg_server_port mg_server_ports;
to stay backwards-compatible",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,703,2018-11-27T09:35:23Z,2018-12-23T18:44:31Z,2019-01-07T09:37:02Z,MERGED,True,21,18,10,https://github.com/PhilLab,WIP: Fixed typo mg_server_ports -> mg_server_port,2,[],https://github.com/civetweb/civetweb/pull/703,https://github.com/PhilLab,2,https://github.com/civetweb/civetweb/pull/703#issuecomment-441996737,"Using
typedef struct mg_server_port mg_server_ports;
to stay backwards-compatible","Hm, well, I could swear I saw it working... but
typedef struct mg_server_port mg_server_ports; does not do what is intended. Additionally, maybe C and C++ collide here too",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,703,2018-11-27T09:35:23Z,2018-12-23T18:44:31Z,2019-01-07T09:37:02Z,MERGED,True,21,18,10,https://github.com/PhilLab,WIP: Fixed typo mg_server_ports -> mg_server_port,2,[],https://github.com/civetweb/civetweb/pull/703,https://github.com/apps/codecov,3,https://github.com/civetweb/civetweb/pull/703#issuecomment-442000410,"Using
typedef struct mg_server_port mg_server_ports;
to stay backwards-compatible","Codecov Report

Merging #703 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #703   +/-   ##
=======================================
  Coverage   77.49%   77.49%           
=======================================
  Files          13       13           
  Lines        9786     9786           
=======================================
  Hits         7584     7584           
  Misses       2202     2202



Impacted Files
Coverage Δ





unittest/public_server.c
98.55% <ø> (ø)
⬆️


src/civetweb.c
69.35% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 6399a4b...79fcb55. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,703,2018-11-27T09:35:23Z,2018-12-23T18:44:31Z,2019-01-07T09:37:02Z,MERGED,True,21,18,10,https://github.com/PhilLab,WIP: Fixed typo mg_server_ports -> mg_server_port,2,[],https://github.com/civetweb/civetweb/pull/703,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/703#issuecomment-442953849,"Using
typedef struct mg_server_port mg_server_ports;
to stay backwards-compatible","Instead of typedef struct mg_server_port mg_server_ports; use an old fashioned #define mg_server_ports mg_server_port - It won't cause any C/C++ problems, since a preprocessor define is basically just a text replacement in an early compile step.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,704,2018-11-28T10:45:47Z,2018-11-29T18:53:01Z,2020-04-27T15:06:21Z,MERGED,True,63,78,3,https://github.com/xtne6f,Use proper cast for ctype.h routines,2,[],https://github.com/civetweb/civetweb/pull/704,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/704,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,704,2018-11-28T10:45:47Z,2018-11-29T18:53:01Z,2020-04-27T15:06:21Z,MERGED,True,63,78,3,https://github.com/xtne6f,Use proper cast for ctype.h routines,2,[],https://github.com/civetweb/civetweb/pull/704,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/704#issuecomment-442411477,,"Codecov Report

Merging #704 into master will not change coverage.
The diff coverage is 71.79%.


@@           Coverage Diff           @@
##           master     #704   +/-   ##
=======================================
  Coverage   77.78%   77.78%           
=======================================
  Files          13       13           
  Lines        9755     9755           
=======================================
  Hits         7588     7588           
  Misses       2167     2167



Impacted Files
Coverage Δ





src/main.c
0% <0%> (ø)
⬆️


src/civetweb.c
69.74% <90.32%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 0bfcd5c...ab9db22. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,704,2018-11-28T10:45:47Z,2018-11-29T18:53:01Z,2020-04-27T15:06:21Z,MERGED,True,63,78,3,https://github.com/xtne6f,Use proper cast for ctype.h routines,2,[],https://github.com/civetweb/civetweb/pull/704,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/704#issuecomment-442951189,,"I think you should be able to merge your PR on your own, in case I'm not available for some days.
If you cannot do this in GitHub, I maybe made some mistakes with the GitHub settings.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,706,2018-11-29T20:49:26Z,2018-12-03T19:00:17Z,2018-12-03T19:01:08Z,MERGED,True,3,0,1,https://github.com/ffontaine,modlua.ini: include dlfcn.h,1,[],https://github.com/civetweb/civetweb/pull/706,https://github.com/ffontaine,1,https://github.com/civetweb/civetweb/pull/706,"dlfcn.h must be included to be able to use dlopen otherwise build will
fail on:
src/mod_lua.inl:2845:41: error: 'RTLD_LAZY' undeclared (first use in this function)
lib_handle_uuid = dlopen(""libuuid.so"", RTLD_LAZY);
Fixes:

http://autobuild.buildroot.org/results/7a189f49c5a8b6f7b3d4c57cda5982adc65dbc19

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","dlfcn.h must be included to be able to use dlopen otherwise build will
fail on:
src/mod_lua.inl:2845:41: error: 'RTLD_LAZY' undeclared (first use in this function)
lib_handle_uuid = dlopen(""libuuid.so"", RTLD_LAZY);
Fixes:

http://autobuild.buildroot.org/results/7a189f49c5a8b6f7b3d4c57cda5982adc65dbc19

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,706,2018-11-29T20:49:26Z,2018-12-03T19:00:17Z,2018-12-03T19:01:08Z,MERGED,True,3,0,1,https://github.com/ffontaine,modlua.ini: include dlfcn.h,1,[],https://github.com/civetweb/civetweb/pull/706,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/706#issuecomment-443828427,"dlfcn.h must be included to be able to use dlopen otherwise build will
fail on:
src/mod_lua.inl:2845:41: error: 'RTLD_LAZY' undeclared (first use in this function)
lib_handle_uuid = dlopen(""libuuid.so"", RTLD_LAZY);
Fixes:

http://autobuild.buildroot.org/results/7a189f49c5a8b6f7b3d4c57cda5982adc65dbc19

Signed-off-by: Fabrice Fontaine fontaine.fabrice@gmail.com","Thanks for your contribution.
Interestingly this never caused any error or even warning on my test machine, or during the Travis CI continuous integration tests.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,709,2018-12-08T22:35:22Z,2018-12-08T22:35:28Z,2018-12-08T22:36:05Z,MERGED,True,19,8,1,https://github.com/bel2125,Improve response time at sslize(),1,[],https://github.com/civetweb/civetweb/pull/709,https://github.com/bel2125,1,https://github.com/civetweb/civetweb/pull/709,"Issue #708
For instance, SSL_connect() returns SSL_ERROR_WANT_READ two times or so.","Issue #708
For instance, SSL_connect() returns SSL_ERROR_WANT_READ two times or so.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/uilianries,1,https://github.com/civetweb/civetweb/pull/716,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/716#issuecomment-450366970,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Codecov Report

Merging #716 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #716      +/-   ##
==========================================
- Coverage   77.49%   77.48%   -0.02%     
==========================================
  Files          13       13              
  Lines        9786     9786              
==========================================
- Hits         7584     7583       -1     
- Misses       2202     2203       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.33% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 09de6cd...a8fe051. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/uilianries,3,https://github.com/civetweb/civetweb/pull/716#issuecomment-452071659,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712",Thanks!,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/716#issuecomment-452072478,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Thanks for your contribution.
I created the bintray account with the names you proposed - so there is a page https://bintray.com/civetweb/conan/civetweb/ now.
I think I also set the CONAN_PASSWORD variable to the API key.
Thanks for your detailed explanation how to do this.
Next step is

After to upload your package by CI ...

Isn't this done automatically?
Or do I need to so something manually?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/716#issuecomment-458722379,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","It seems bintray is not a free service:

Hello bel2125,
Your Bintray trial will end in 7 days!
To continue using Bintray and keep your premium repositories, please purchase a subscription.
Once your trial period ends, without a premium subscription, all of your premium content will be permanently deleted.
For any question, contact us at service@jfrog.com.
Looking forward to hear from you,
JFrog Bintray Team",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/danimtb,6,https://github.com/civetweb/civetweb/pull/716#issuecomment-458861877,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","@bel2125 Did you sign up as an opensource account organization? Seems that you signed up with a trial premium account. This is the link to create an OSS one: https://bintray.com/signup/oss
If you sign up for a trial is to have the PRO features which are not needed in this case. I would say you have to create the organization as an OSS account in Bintray. I am going to ask the Bintray team if they can switch to the OSS version.
Thanks",True,{'THUMBS_UP': ['https://github.com/uilianries']}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/danimtb,7,https://github.com/civetweb/civetweb/pull/716#issuecomment-458948651,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","HI again @bel2125. Looking at you Bintray  organization, there are still no Conan packages uploaded there. Best approach would be to change you account manually (delete trial and create an OSS account). This is the less painfull way Bintray team is proposing to not interfere with the account settings.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/716#issuecomment-459515756,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","I'm not precisely sure what I did, since the bintray service is completely unknown to me.
I think I created an organisation ""civetweb"" and a user ""bel2125"" - at least this is what I intended to do, to mirror the structure on GitHub. I can't sign up a new user ""civetweb"" or ""bel2125"" using the https://bintray.com/signup/oss link , since these users already exist (yes they do - I created them).
Should I delete the organization or the user?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/danimtb,9,https://github.com/civetweb/civetweb/pull/716#issuecomment-459707406,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","yes sorry, that is what is meant 😅",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,10,https://github.com/civetweb/civetweb/pull/716#issuecomment-459984011,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Deleting civetweb:
Error: ""Cannot delete a premium organization account""
Deleting bel2125:
Error: ""Cannot delete a user owning active organizations""
So that's not going to work.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/danimtb,11,https://github.com/civetweb/civetweb/pull/716#issuecomment-460606821,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Here you have the steps to cancel the trial:

Click on Premium Dashboard

Click on Account:

Click on Cancel Enterprise (Trail) button:

Approve:",True,{'HEART': ['https://github.com/uilianries']}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,12,https://github.com/civetweb/civetweb/pull/716#issuecomment-461943255,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","tried it, got lost somewhere between account settings and organization
settings, .. but the page above now says
""Your current plan is OSS"", not ""Your current plan is enterprise (trial)""

But, I can not access the organization now, and I can also not import it
from github.

Organizations Identifier is already used. Please try another one.

I guess that won't work out without support from bintray
…
On Tue, Feb 5, 2019 at 12:39 PM Daniel ***@***.***> wrote:
 Here you have the steps to cancel the trial:

    1. Click on Premium Dashboard
    [image: image]
    <https://user-images.githubusercontent.com/10808592/52271026-d8990c80-2942-11e9-97c0-0fe05a72079f.png>
    2. Click on Account:
    [image: image]
    <https://user-images.githubusercontent.com/10808592/52271046-e189de00-2942-11e9-8731-8c499caa25ce.png>
    3. Click on Cancel Enterprise (Trail) button:
    [image: image]
    <https://user-images.githubusercontent.com/10808592/52271058-eb134600-2942-11e9-911a-a270df431ef8.png>
    4. Approve:
    [image: image]
    <https://user-images.githubusercontent.com/10808592/52271074-f5354480-2942-11e9-9003-7f260599c271.png>

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 <#716 (comment)>,
 or mute the thread
 <https://github.com/notifications/unsubscribe-auth/AFW99yGJgyUqBC75dNp4Xw_R73b16oyUks5vKW1pgaJpZM4Zj4Mt>
 .",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/memsharded,13,https://github.com/civetweb/civetweb/pull/716#issuecomment-462766541,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Hi @bel2125
The organization has been unblocked, could you please try again? Thanks!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,14,https://github.com/civetweb/civetweb/pull/716#issuecomment-463380901,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Now it seems to work, thanks.
I created https://bintray.com/civetweb/civetweb and was able to upload ""something"" (Version 1.11 ... but there was no conan build script when 1.11 was released, so I'm not sure what it did). Anyway, probably we can try to upload the current working version, or some intermediate label for test purposes?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/uilianries,15,https://github.com/civetweb/civetweb/pull/716#issuecomment-463660023,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Hi @bel2125 !
Since you created a repo with the name civetweb, I'll need to change the build.py because here I expected to use a repo with the name ""conan"". There is no problem using civetweb, just to be clear.
Also, the script build.py will ONLY upload a package when your current branch is a tag. We could change it to upload all packages when a new change is made on master branch, but this will increase your CI time and I think few users will be interested in download a testing package.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,16,https://github.com/civetweb/civetweb/pull/716#issuecomment-463781601,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Since you created a repo with the name civetweb, I'll need to change the build.py because here I expected to use a repo with the name ""conan"".

That was not intentional - I changed the repository name: https://bintray.com/civetweb/conan
Once everything is set up correctly, I could create a test tag. Will a ""git tag"" with arbitrary name (""conan_test_tag"") do, or does it have to be 1.12 or a full Github release?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/uilianries,17,https://github.com/civetweb/civetweb/pull/716#issuecomment-463793370,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Actually it uses a regex, not the git tag...
So you are able to pretend a tag branch just using the same pattern for your branch name. It must follow your project version pattern e.g. v1.2
The PR #735 to check if it's a real tag, but I think the current pattern is enough.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/stgatilov,18,https://github.com/civetweb/civetweb/pull/716#issuecomment-552878921,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","I'm sorry for stupid question, but can how can I use this civetweb package with conan?
I tried searching for ""civetweb"" in various remotes, but cannot find any packages. Is it available in conan-center or bincrafters? Do I need to add some specific remote to use this package?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/uilianries,19,https://github.com/civetweb/civetweb/pull/716#issuecomment-552909712,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","As Conan now offers the conan-center-index, we can move this recipe/package there.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,20,https://github.com/civetweb/civetweb/pull/716#issuecomment-555184596,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712",Anything I need to do here?,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,21,https://github.com/civetweb/civetweb/pull/716#issuecomment-703298667,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","It seems everything in the release V1.13 worked, except the Conan scripts: https://travis-ci.org/github/civetweb/civetweb/builds/731726649
Since I do not really understand what they are doing, I cannot fix them.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/memsharded,22,https://github.com/civetweb/civetweb/pull/716#issuecomment-703305759,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","Hi @bel2125
The process to publish packages in ConanCenter is to submit a PR to https://github.com/conan-io/conan-center-index. Detailed instructions are in https://github.com/conan-io/conan-center-index/blob/master/docs/README.md.
It is still EAP so you need to apply for it sending a comment in conan-io/conan-center-index#4.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,716,2018-12-28T13:55:37Z,2019-01-07T20:17:24Z,2020-10-06T19:55:48Z,MERGED,True,449,78,11,https://github.com/uilianries,Build Conan package in CI (#712 ),31,[],https://github.com/civetweb/civetweb/pull/716,https://github.com/bel2125,23,https://github.com/civetweb/civetweb/pull/716#issuecomment-704518244,"Hi!
This PR is related to issue #712.
Here I list some important points in this PR:

Travis CI jobs to build Civetweb as Conan package in Linux and Macos
Appveyor jobs to build Civetweb as Conan package in Windows
Add test package to validate the Conan package created
Fix bad support for clang 4 (flto)
Apply new Conan conventions from 1.8

Conan jobs will be executed ONLY for Github tags. Any other PR will not trigger a new job, otherwise your CI time will increase.
I've created a virtual tag in my fork to check that conditional:
https://github.com/uilianries/civetweb/tree/v1.12
https://travis-ci.com/uilianries/civetweb/jobs/167366381
https://ci.appveyor.com/project/uilianries/civetweb/builds/21266286
Conan uses the file conanfile.py as recipe to execute all steps necessary to create the package. As your project is a library, it needs to be built, and Conan defines the package id by settings + options + requires.
To make sure that your package is working well, Conan provides test_package, where we put a simple example consuming your package and building as well. When test_package.cpp is including civetweb header, all files are imported from the packaged provided by Conan. Test package is not for unit testing propose, it's a package validation.
When running your package on CI (appveyor, travis or any other) we could run Conan to create the package and check. But prepare a full environment with compiler, build-essential , conan and all stuff could be boring, so we use Docker. Conan provides a good range of images, including gcc and clang. I added multiple jobs because your project should match (compiler version, arch, os, release/debug) when required as dependency.
How to upload?
Conan uses Bintray to store their packages. You need to create an account on bintray for that. There is a good documentation how to create a bintray account here.
In short, you need to create a new account here.
So you will have two options:
Create a repository based on your username
Create a new organization and so create a new repository.

I would recommend the second one, because you will be able to add more people to maintain your organization.
Following the second choice, create a new organization named civetweb or any preferred name. And create a new repository named conan or any preferred name.
The build.py is configured following the reference civetweb/conan/civetweb/. Where:
civetweb is your Bintray organization name
conan is the repository name
civetweb is the package name
Also, build.py has a rule to upload only tags or any branch with the pattern name ""v(\d+.\d+)"".
And finally, you must set the variable CONAN_PASSWORD on Travis settings. The password is the Bintray API Key, it's not your account password. To read your API key you need to access bintray.com/profile/edit and click on API Key button. Don't forget to mark as secret on Travis settings.
Bintray package page
After to upload your package by CI, we recommend update your Bintray package page:
bintray.com/civetweb/conan/civetweb%3Acivetweb/edit?tab=general
The page contains only project metadata, as url, maturity (official), license.
Conan Center request
Now that all steps are done. Just click on ""Add to Conan Center"" button, present on your package page, and wait for a review.
Okay, this is a lot of information. Please, feel free to ask anything.
I'm including @danimtb and @SSE4 to review this PR. They are Conan experts.
Regards!
/cc @danimtb @SSE4
closes #712","It is still EAP so you need to apply for it sending a comment in conan-io/conan-center-index#4.

Done and accepted by the ConanCenter.
I checked these instructions: https://github.com/conan-io/conan-center-index/blob/master/docs/how_to_add_packages.md and compared to the files in this pull request. We already have a conanfile.py there. However, there is no TravisCI related information in this link above, and the pull request is definitely Travis related.
Currently I still don't feel able to fix this issue by myself, since I'm still missing how all these pieces are supposed to work together. What is already done in this PR, what changed on Conan and/or Travis since that time - and what needs to be done now?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,717,2018-12-29T04:08:07Z,2019-03-07T18:49:28Z,2019-03-08T14:21:41Z,MERGED,True,147,210,2,https://github.com/xtne6f,Fix reading a message body,4,[],https://github.com/civetweb/civetweb/pull/717,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/717,"Although I have tested this as well as possible, I want your review.","Although I have tested this as well as possible, I want your review.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,717,2018-12-29T04:08:07Z,2019-03-07T18:49:28Z,2019-03-08T14:21:41Z,MERGED,True,147,210,2,https://github.com/xtne6f,Fix reading a message body,4,[],https://github.com/civetweb/civetweb/pull/717,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/717#issuecomment-450465102,"Although I have tested this as well as possible, I want your review.","Codecov Report

Merging #717 into master will decrease coverage by 0.03%.
The diff coverage is 71.59%.


@@            Coverage Diff             @@
##           master     #717      +/-   ##
==========================================
- Coverage   77.49%   77.46%   -0.04%     
==========================================
  Files          13       13              
  Lines        9786     9756      -30     
==========================================
- Hits         7584     7557      -27     
+ Misses       2202     2199       -3



Impacted Files
Coverage Δ





unittest/public_server.c
98.55% <100%> (ø)
⬆️


src/civetweb.c
69.23% <69.87%> (-0.12%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 09de6cd...c0e4ed4. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,717,2018-12-29T04:08:07Z,2019-03-07T18:49:28Z,2019-03-08T14:21:41Z,MERGED,True,147,210,2,https://github.com/xtne6f,Fix reading a message body,4,[],https://github.com/civetweb/civetweb/pull/717,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/717#issuecomment-452118472,"Although I have tested this as well as possible, I want your review.","Thanks for your effort.
I was on holidays last week and I'm going to review this in more detail in a couple of days.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,717,2018-12-29T04:08:07Z,2019-03-07T18:49:28Z,2019-03-08T14:21:41Z,MERGED,True,147,210,2,https://github.com/xtne6f,Fix reading a message body,4,[],https://github.com/civetweb/civetweb/pull/717,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/717#issuecomment-470647937,"Although I have tested this as well as possible, I want your review.","Sorry, for I while I just forgot that this PR is still open.
Merged (finally).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,718,2019-01-08T11:29:33Z,2019-01-08T20:33:32Z,2019-01-08T20:33:47Z,MERGED,True,2,2,1,https://github.com/BeaverCC,fix build type in build script,1,[],https://github.com/civetweb/civetweb/pull/718,https://github.com/BeaverCC,1,https://github.com/civetweb/civetweb/pull/718,the build_type option is reversed,the build_type option is reversed,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,718,2019-01-08T11:29:33Z,2019-01-08T20:33:32Z,2019-01-08T20:33:47Z,MERGED,True,2,2,1,https://github.com/BeaverCC,fix build type in build script,1,[],https://github.com/civetweb/civetweb/pull/718,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/718#issuecomment-452274131,the build_type option is reversed,"Codecov Report

Merging #718 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #718      +/-   ##
==========================================
- Coverage   77.47%   77.46%   -0.02%     
==========================================
  Files          13       13              
  Lines        9781     9781              
==========================================
- Hits         7578     7577       -1     
- Misses       2203     2204       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.28% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 6a88e23...adb5b12. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,718,2019-01-08T11:29:33Z,2019-01-08T20:33:32Z,2019-01-08T20:33:47Z,MERGED,True,2,2,1,https://github.com/BeaverCC,fix build type in build script,1,[],https://github.com/civetweb/civetweb/pull/718,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/718#issuecomment-452441857,the build_type option is reversed,Merged. Thanks for your contribution.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,720,2019-01-13T15:18:51Z,2019-01-17T12:00:50Z,2019-01-17T12:02:43Z,MERGED,True,202,354,1,https://github.com/xtne6f,Fix mg_get_{system|context|connection}_info(),2,[],https://github.com/civetweb/civetweb/pull/720,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/720,"For example, the following code causes buffer overflow.
int bufsize = mg_get_system_info(NULL, 0);
char *buf = malloc(bufsize);
mg_get_system_info(buf, bufsize);
I know enough room for mg_get_system_info() in this case is bufsize + 1, but anyway the function
must not exceed bufsize, so I want to merge this request.
Before merging this, I want to confirm the purpose of int reserved_len variable. Did you intend to reserve space for a closing bracket ( ""}\n"" ) by using the variable in case the specified buffer did not have enough space ? If so, I need to modify the request a little.","For example, the following code causes buffer overflow.
int bufsize = mg_get_system_info(NULL, 0);
char *buf = malloc(bufsize);
mg_get_system_info(buf, bufsize);
I know enough room for mg_get_system_info() in this case is bufsize + 1, but anyway the function
must not exceed bufsize, so I want to merge this request.
Before merging this, I want to confirm the purpose of int reserved_len variable. Did you intend to reserve space for a closing bracket ( ""}\n"" ) by using the variable in case the specified buffer did not have enough space ? If so, I need to modify the request a little.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,720,2019-01-13T15:18:51Z,2019-01-17T12:00:50Z,2019-01-17T12:02:43Z,MERGED,True,202,354,1,https://github.com/xtne6f,Fix mg_get_{system|context|connection}_info(),2,[],https://github.com/civetweb/civetweb/pull/720,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/720#issuecomment-453840488,"For example, the following code causes buffer overflow.
int bufsize = mg_get_system_info(NULL, 0);
char *buf = malloc(bufsize);
mg_get_system_info(buf, bufsize);
I know enough room for mg_get_system_info() in this case is bufsize + 1, but anyway the function
must not exceed bufsize, so I want to merge this request.
Before merging this, I want to confirm the purpose of int reserved_len variable. Did you intend to reserve space for a closing bracket ( ""}\n"" ) by using the variable in case the specified buffer did not have enough space ? If so, I need to modify the request a little.","Codecov Report

Merging #720 into master will decrease coverage by 0.07%.
The diff coverage is 97.72%.


@@            Coverage Diff             @@
##           master     #720      +/-   ##
==========================================
- Coverage   77.47%   77.39%   -0.08%     
==========================================
  Files          13       13              
  Lines        9781     9751      -30     
==========================================
- Hits         7578     7547      -31     
- Misses       2203     2204       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.1% <97.72%> (-0.2%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f07acaf...843ea9f. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,720,2019-01-13T15:18:51Z,2019-01-17T12:00:50Z,2019-01-17T12:02:43Z,MERGED,True,202,354,1,https://github.com/xtne6f,Fix mg_get_{system|context|connection}_info(),2,[],https://github.com/civetweb/civetweb/pull/720,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/720#issuecomment-454542524,"For example, the following code causes buffer overflow.
int bufsize = mg_get_system_info(NULL, 0);
char *buf = malloc(bufsize);
mg_get_system_info(buf, bufsize);
I know enough room for mg_get_system_info() in this case is bufsize + 1, but anyway the function
must not exceed bufsize, so I want to merge this request.
Before merging this, I want to confirm the purpose of int reserved_len variable. Did you intend to reserve space for a closing bracket ( ""}\n"" ) by using the variable in case the specified buffer did not have enough space ? If so, I need to modify the request a little.","int reserved_len = (int)strlen(eoobj) + (int)strlen(eol);
Is meant to keep ""}\n"" (2 characters) or ""}\r\n"" (3 characters for Windows).
The correct usage should be (at least this was what I intended):
int infosize = mg_get_system_info(NULL, 0); // the length of the available string
if (infosize<=0) .. some error
size_t bufsize = (size_t)infosize + 1; // the size for the buffer is the length of the string + 1
char *buf = malloc(bufsize);
mg_get_system_info(buf, bufsize);
And in case there is some dynamic information (like some number was ""9"" and is now ""10""), you should add some extra bytes to bufsize as well.
The extra ""}\r\n"" was meant to always return valid json - even if some elements are dropped.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,720,2019-01-13T15:18:51Z,2019-01-17T12:00:50Z,2019-01-17T12:02:43Z,MERGED,True,202,354,1,https://github.com/xtne6f,Fix mg_get_{system|context|connection}_info(),2,[],https://github.com/civetweb/civetweb/pull/720,https://github.com/xtne6f,4,https://github.com/civetweb/civetweb/pull/720#issuecomment-454760166,"For example, the following code causes buffer overflow.
int bufsize = mg_get_system_info(NULL, 0);
char *buf = malloc(bufsize);
mg_get_system_info(buf, bufsize);
I know enough room for mg_get_system_info() in this case is bufsize + 1, but anyway the function
must not exceed bufsize, so I want to merge this request.
Before merging this, I want to confirm the purpose of int reserved_len variable. Did you intend to reserve space for a closing bracket ( ""}\n"" ) by using the variable in case the specified buffer did not have enough space ? If so, I need to modify the request a little.","I have added one more commit. If there is no problem, I will merge this branch after a few days.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,720,2019-01-13T15:18:51Z,2019-01-17T12:00:50Z,2019-01-17T12:02:43Z,MERGED,True,202,354,1,https://github.com/xtne6f,Fix mg_get_{system|context|connection}_info(),2,[],https://github.com/civetweb/civetweb/pull/720,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/720#issuecomment-454939215,"For example, the following code causes buffer overflow.
int bufsize = mg_get_system_info(NULL, 0);
char *buf = malloc(bufsize);
mg_get_system_info(buf, bufsize);
I know enough room for mg_get_system_info() in this case is bufsize + 1, but anyway the function
must not exceed bufsize, so I want to merge this request.
Before merging this, I want to confirm the purpose of int reserved_len variable. Did you intend to reserve space for a closing bracket ( ""}\n"" ) by using the variable in case the specified buffer did not have enough space ? If so, I need to modify the request a little.","Ok, thanks.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,721,2019-01-16T19:05:37Z,2019-01-16T21:16:34Z,2019-01-17T08:25:45Z,MERGED,True,3,0,1,https://github.com/jodogne,fix for visual studio 2008,1,[],https://github.com/civetweb/civetweb/pull/721,https://github.com/jodogne,1,https://github.com/civetweb/civetweb/pull/721,The macro ECONNRESET is not always defined (e.g. on Visual Studio 2008).,The macro ECONNRESET is not always defined (e.g. on Visual Studio 2008).,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,721,2019-01-16T19:05:37Z,2019-01-16T21:16:34Z,2019-01-17T08:25:45Z,MERGED,True,3,0,1,https://github.com/jodogne,fix for visual studio 2008,1,[],https://github.com/civetweb/civetweb/pull/721,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/721#issuecomment-454911591,The macro ECONNRESET is not always defined (e.g. on Visual Studio 2008).,"Codecov Report

Merging #721 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #721   +/-   ##
=======================================
  Coverage   77.47%   77.47%           
=======================================
  Files          13       13           
  Lines        9781     9781           
=======================================
  Hits         7578     7578           
  Misses       2203     2203



Impacted Files
Coverage Δ





src/civetweb.c
69.3% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f07acaf...a06ddb6. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,721,2019-01-16T19:05:37Z,2019-01-16T21:16:34Z,2019-01-17T08:25:45Z,MERGED,True,3,0,1,https://github.com/jodogne,fix for visual studio 2008,1,[],https://github.com/civetweb/civetweb/pull/721,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/721#issuecomment-454946208,The macro ECONNRESET is not always defined (e.g. on Visual Studio 2008).,"Merged. Thanks for your contribution.
Anyway, are you still using Visual Studio 2008?
Are you getting a working version of civetweb with it? I'm asking, since I stopped testing with Visual Studio 2008 quite some years ago and defined Visual Studio 2010 as minimum standard that time. This does not mean, we can include patches for 2008 - it just means, if some commit breaks a VS2008 build but works with newer Versions, no CI test will find it. In particular stdint.h is now mandatory, and it came only with VS2010.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,721,2019-01-16T19:05:37Z,2019-01-16T21:16:34Z,2019-01-17T08:25:45Z,MERGED,True,3,0,1,https://github.com/jodogne,fix for visual studio 2008,1,[],https://github.com/civetweb/civetweb/pull/721,https://github.com/jodogne,4,https://github.com/civetweb/civetweb/pull/721#issuecomment-455083697,The macro ECONNRESET is not always defined (e.g. on Visual Studio 2008).,"Hello, yes, CivetWeb still compiles fine with Visual Studio 2008, if using a third-party implementation of the stdint.h header. Check out the compatibility header we use in the Orthanc project.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,723,2019-01-16T19:55:15Z,2019-01-23T20:44:11Z,2019-01-23T20:44:11Z,MERGED,True,4,0,1,https://github.com/jodogne,partial fix to support Linux Standard Base (LSB),2,[],https://github.com/civetweb/civetweb/pull/723,https://github.com/jodogne,1,https://github.com/civetweb/civetweb/pull/723,"This changeset implements a partial fix for LSB, as described in issue #722. It solves the problem of missing symbols pthread_setname_np and timegm.","This changeset implements a partial fix for LSB, as described in issue #722. It solves the problem of missing symbols pthread_setname_np and timegm.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,723,2019-01-16T19:55:15Z,2019-01-23T20:44:11Z,2019-01-23T20:44:11Z,MERGED,True,4,0,1,https://github.com/jodogne,partial fix to support Linux Standard Base (LSB),2,[],https://github.com/civetweb/civetweb/pull/723,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/723#issuecomment-456937753,"This changeset implements a partial fix for LSB, as described in issue #722. It solves the problem of missing symbols pthread_setname_np and timegm.","Codecov Report

Merging #723 into master will decrease coverage by 0.08%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #723      +/-   ##
==========================================
- Coverage   77.47%   77.38%   -0.09%     
==========================================
  Files          13       13              
  Lines        9781     9756      -25     
==========================================
- Hits         7578     7550      -28     
- Misses       2203     2206       +3



Impacted Files
Coverage Δ





src/civetweb.c
69.1% <ø> (-0.21%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f07acaf...e3ed959. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,723,2019-01-16T19:55:15Z,2019-01-23T20:44:11Z,2019-01-23T20:44:11Z,MERGED,True,4,0,1,https://github.com/jodogne,partial fix to support Linux Standard Base (LSB),2,[],https://github.com/civetweb/civetweb/pull/723,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/723#issuecomment-456938330,"This changeset implements a partial fix for LSB, as described in issue #722. It solves the problem of missing symbols pthread_setname_np and timegm.",I reused the existing NO_THREAD_NAME - if the CI tests pass I will merge this first partial fix.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,726,2019-01-19T19:10:03Z,2019-01-20T18:35:50Z,2019-01-20T18:36:04Z,MERGED,True,8,0,1,https://github.com/krypticmouse,Update README.md,1,[],https://github.com/civetweb/civetweb/pull/726,https://github.com/krypticmouse,1,https://github.com/civetweb/civetweb/pull/726,Added a Getting The Source article to make it easy for others do the process more smoothly.,Added a Getting The Source article to make it easy for others do the process more smoothly.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,726,2019-01-19T19:10:03Z,2019-01-20T18:35:50Z,2019-01-20T18:36:04Z,MERGED,True,8,0,1,https://github.com/krypticmouse,Update README.md,1,[],https://github.com/civetweb/civetweb/pull/726,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/726#issuecomment-455809097,Added a Getting The Source article to make it easy for others do the process more smoothly.,"Codecov Report

Merging #726 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #726      +/-   ##
==========================================
- Coverage   77.39%   77.38%   -0.02%     
==========================================
  Files          13       13              
  Lines        9751     9751              
==========================================
- Hits         7547     7546       -1     
- Misses       2204     2205       +1



Impacted Files
Coverage Δ





src/civetweb.c
69.09% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f211e86...f0d7131. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,726,2019-01-19T19:10:03Z,2019-01-20T18:35:50Z,2019-01-20T18:36:04Z,MERGED,True,8,0,1,https://github.com/krypticmouse,Update README.md,1,[],https://github.com/civetweb/civetweb/pull/726,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/726#issuecomment-455890855,Added a Getting The Source article to make it easy for others do the process more smoothly.,"Merged.
Thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,730,2019-01-30T14:09:05Z,2019-01-31T20:52:29Z,2019-02-28T15:36:08Z,MERGED,True,4,2,1,https://github.com/krzk,Log SSL error also on client connections,1,[],https://github.com/civetweb/civetweb/pull/730,https://github.com/krzk,1,https://github.com/civetweb/civetweb/pull/730,"Be more verbose about SSL connection error on client side.  This might
help user to figure out his error.","Be more verbose about SSL connection error on client side.  This might
help user to figure out his error.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,730,2019-01-30T14:09:05Z,2019-01-31T20:52:29Z,2019-02-28T15:36:08Z,MERGED,True,4,2,1,https://github.com/krzk,Log SSL error also on client connections,1,[],https://github.com/civetweb/civetweb/pull/730,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/730#issuecomment-458967500,"Be more verbose about SSL connection error on client side.  This might
help user to figure out his error.","Codecov Report

Merging #730 into master will not change coverage.
The diff coverage is 100%.


@@           Coverage Diff           @@
##           master     #730   +/-   ##
=======================================
  Coverage   77.38%   77.38%           
=======================================
  Files          13       13           
  Lines        9756     9756           
=======================================
  Hits         7550     7550           
  Misses       2206     2206



Impacted Files
Coverage Δ





src/civetweb.c
69.1% <100%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b5b560f...954750f. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,730,2019-01-30T14:09:05Z,2019-01-31T20:52:29Z,2019-02-28T15:36:08Z,MERGED,True,4,2,1,https://github.com/krzk,Log SSL error also on client connections,1,[],https://github.com/civetweb/civetweb/pull/730,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/730#issuecomment-459502117,"Be more verbose about SSL connection error on client side.  This might
help user to figure out his error.","Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,735,2019-02-14T19:47:25Z,2019-02-14T20:50:52Z,2019-02-14T23:11:45Z,CLOSED,False,35,24,1,https://github.com/uilianries,#716 Upload only when tag,1,[],https://github.com/civetweb/civetweb/pull/735,https://github.com/uilianries,1,https://github.com/civetweb/civetweb/pull/735,"Related issue #716
Hi! This PR is dedicated to update Civetweb bintray address.
/cc @danimtb @SSE4","Related issue #716
Hi! This PR is dedicated to update Civetweb bintray address.
/cc @danimtb @SSE4",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,735,2019-02-14T19:47:25Z,2019-02-14T20:50:52Z,2019-02-14T23:11:45Z,CLOSED,False,35,24,1,https://github.com/uilianries,#716 Upload only when tag,1,[],https://github.com/civetweb/civetweb/pull/735,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/735#issuecomment-463779119,"Related issue #716
Hi! This PR is dedicated to update Civetweb bintray address.
/cc @danimtb @SSE4","Codecov Report

Merging #735 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #735   +/-   ##
=======================================
  Coverage   77.39%   77.39%           
=======================================
  Files          13       13           
  Lines        9758     9758           
=======================================
  Hits         7552     7552           
  Misses       2206     2206

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 38fe585...ab65d91. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,735,2019-02-14T19:47:25Z,2019-02-14T20:50:52Z,2019-02-14T23:11:45Z,CLOSED,False,35,24,1,https://github.com/uilianries,#716 Upload only when tag,1,[],https://github.com/civetweb/civetweb/pull/735,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/735#issuecomment-463782923,"Related issue #716
Hi! This PR is dedicated to update Civetweb bintray address.
/cc @danimtb @SSE4","I think I just made this change obsolete 5 minutes ago before reading this PR ... did I?
          return ""https://api.bintray.com/conan/civetweb/conan""
==>
          return ""https://api.bintray.com/conan/civetweb/civetweb""

Should we still merge the rest?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,735,2019-02-14T19:47:25Z,2019-02-14T20:50:52Z,2019-02-14T23:11:45Z,CLOSED,False,35,24,1,https://github.com/uilianries,#716 Upload only when tag,1,[],https://github.com/civetweb/civetweb/pull/735,https://github.com/uilianries,4,https://github.com/civetweb/civetweb/pull/735#issuecomment-463790495,"Related issue #716
Hi! This PR is dedicated to update Civetweb bintray address.
/cc @danimtb @SSE4",Nice! Thanks for updating. We can discard this PR. Regards!,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,738,2019-03-03T21:05:04Z,2019-03-03T21:48:06Z,2019-03-03T21:48:22Z,MERGED,True,14,4,1,https://github.com/chrisejones,Make link time optimization optional,1,[],https://github.com/civetweb/civetweb/pull/738,https://github.com/chrisejones,1,https://github.com/civetweb/civetweb/pull/738,"Fixes #733
I've maintained the existing behavior - LTO is enabled by default for the C++ wrapper only. Let me know if you'd like me to change it. It might be better to enable LTO by default only when building a shared library.","Fixes #733
I've maintained the existing behavior - LTO is enabled by default for the C++ wrapper only. Let me know if you'd like me to change it. It might be better to enable LTO by default only when building a shared library.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,738,2019-03-03T21:05:04Z,2019-03-03T21:48:06Z,2019-03-03T21:48:22Z,MERGED,True,14,4,1,https://github.com/chrisejones,Make link time optimization optional,1,[],https://github.com/civetweb/civetweb/pull/738,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/738#issuecomment-469067895,"Fixes #733
I've maintained the existing behavior - LTO is enabled by default for the C++ wrapper only. Let me know if you'd like me to change it. It might be better to enable LTO by default only when building a shared library.","Merged.
Thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,739,2019-03-06T13:52:10Z,2019-03-06T18:48:12Z,2019-03-06T18:48:12Z,CLOSED,False,147,48,2,https://github.com/krzk,RFC - SSL client fixes/features,4,[],https://github.com/civetweb/civetweb/pull/739,https://github.com/krzk,1,https://github.com/civetweb/civetweb/pull/739,"Request for comments for extending SSL client websocket connections. This adds new API although without any documentation and tests. If this approach is accepted, I can extend the docs and tests.","Request for comments for extending SSL client websocket connections. This adds new API although without any documentation and tests. If this approach is accepted, I can extend the docs and tests.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,739,2019-03-06T13:52:10Z,2019-03-06T18:48:12Z,2019-03-06T18:48:12Z,CLOSED,False,147,48,2,https://github.com/krzk,RFC - SSL client fixes/features,4,[],https://github.com/civetweb/civetweb/pull/739,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/739#issuecomment-470196921,"Request for comments for extending SSL client websocket connections. This adds new API although without any documentation and tests. If this approach is accepted, I can extend the docs and tests.","Could we split this in two PRs - one for the SSL fixes (the first two commits), another one for the API?
I could also do this by cherry picking, but I think both changes need to be handled and discussed differently and it makes sense to handle both, not pick some and ignore some.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,739,2019-03-06T13:52:10Z,2019-03-06T18:48:12Z,2019-03-06T18:48:12Z,CLOSED,False,147,48,2,https://github.com/krzk,RFC - SSL client fixes/features,4,[],https://github.com/civetweb/civetweb/pull/739,https://github.com/krzk,3,https://github.com/civetweb/civetweb/pull/739#issuecomment-470227851,"Request for comments for extending SSL client websocket connections. This adds new API although without any documentation and tests. If this approach is accepted, I can extend the docs and tests.","Sure, I'll fix the builds on different platforms and split them.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/krzk,1,https://github.com/civetweb/civetweb/pull/740,Adds new API allowing to customize client HTTPS connections.,Adds new API allowing to customize client HTTPS connections.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/740#issuecomment-470498306,Adds new API allowing to customize client HTTPS connections.,"Codecov Report

Merging #740 into master will increase coverage by 0.03%.
The diff coverage is 95.65%.


@@            Coverage Diff             @@
##           master     #740      +/-   ##
==========================================
+ Coverage   77.24%   77.27%   +0.03%     
==========================================
  Files          13       13              
  Lines        9791     9809      +18     
==========================================
+ Hits         7563     7580      +17     
- Misses       2228     2229       +1



Impacted Files
Coverage Δ





src/civetweb.c
68.97% <95.65%> (+0.08%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 32011b7...1b1cb3e. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/740#issuecomment-470684958,Adds new API allowing to customize client HTTPS connections.,"While your other PR contained fixes, this change needs some discussion.
It is heavily related to #479 and the other issues cited there (a lot of other issues).
The server has a generic interface for all parameters: mg_start ... A text-key, text-value list of parameters that can be easily extended by new parameters.
The client already has multiple interfaces: mg_download, mg_connect_client, mg_connect_websocket_client, mg_connect_client_secure. Still we are missing options for tcp_nodelay #434, Authentication #460, error information #456, cipher settings #705, binding to specific interfaces #660, the options you added in this PR (#740) ... then there is a list of planned incompatibilities (not updated for a while).
Adding new members to existing struct definition or adding additional parameters to existing functions is an incompatibility that should be avoided. But adding new functions for every additional parameter will soon lead to ..connect3(), ..connect4(), ..connect5(), .. ..connect47(), .. and a lot of ""fun"" for maintenance.
So I would definitely prefer an API function that allows to add more parameters without adding more functions and without introducing incompatibilities. Of course it should also fulfill your requirements for additional parameters. Another key-text, value-text list interface would be an option. Working with attributes (like many POSIX functions) another one. I tend to exclude versioned structs.
And finally the old (= now current) interfaces need to be deprecated (but kept for several versions).
Thoughts?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/krzk,4,https://github.com/civetweb/civetweb/pull/740#issuecomment-471444277,Adds new API allowing to customize client HTTPS connections.,"I don't think you will need more ...connectX() functions. The ...connect2() brings the struct with client options where you could embed any option you need. Although growing a struct is not breaking the API but it is a break of ABI. Solution to this could be:

Define future fields in struct as reserved, e.g. u8 reserved[32];... which is a waste of space and still does not allow to grow later beyond the reserved fields.
Create abstract helpers/class for this hiding the struct contents, for example in client code:

struct client_options; /* Private, members not exposed in API */
struct client_options *opt = mg_new_client_options();
mg_set_client_option(opt, ""some_key"", ""some_value"");
mg_connect_websocket_client2(opt ....);```",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/krzk,5,https://github.com/civetweb/civetweb/pull/740#issuecomment-471475059,Adds new API allowing to customize client HTTPS connections.,"After some thoughts, I think the solution 2 will be exactly the same as existing key-text approach used in server part. The only benefit is that there struct client_options is already used.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/krzk,6,https://github.com/civetweb/civetweb/pull/740#issuecomment-539448240,Adds new API allowing to customize client HTTPS connections.,"Let me bring back this topic with new idea. Solution for extendable C API is to use pass arguments as struct and provide its length:
mg_connect_websocket_client2(const struct mg_client_options *client_options, unsigned int options_size, ...)
The library will check the options_size (size of passed structure) and depending on:

size == X, no compatibility issues, go on,
size > X, bigger structure passed so code was compiled with newer civetweb but is running against older, still this is fully compatible (assuming future civetweb will not reorder fields),
size < X, smaller structure passed so code was compiled with older civetweb, the library has to turn off some options and run in backwards-compatible mode (skipping some of the fields from structure).

This way the code will be API and ABI compatible although parsing of options will could get much more complicated in the future (need to maintain backwards compatible).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/740#issuecomment-541253664,Adds new API allowing to customize client HTTPS connections.,I will have to look at this in more detail ... this is going to take me a few days.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/740#issuecomment-549066891,Adds new API allowing to customize client HTTPS connections.,"I think, we need a couple of additional client options. I checked all other issues related to the client interface, requirements, TODOs and found:

We need an additional client option const char  * cookie (https://tools.ietf.org/html/rfc6265#section-5.4), since many sites use cookie based authentication
but password/username is also required for sites using simple or digest HTTP auth (#460)
also ""follow_redirect"" would be valuable (#460)
tcp_nodelay (#434), and probably linger_timeout_ms are missing
ssl_cipher_list, ssl_protocol_version (#705) to set security options
max_response_header_size (equivalent to the max_request_size in the server config)
additional_header is definitely also meaningful for clients
the client API should return some error code, not only text (#456, #458)

... all of the above is only related to download (HTTP GET request).
But for other request methods (POST, PUT, DELETE, PATCH, ...), and some more client issues related to these methods (e.g., #550).
The ""client interface issue collection"" is #479.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/bel2125,9,https://github.com/civetweb/civetweb/pull/740#issuecomment-549074493,Adds new API allowing to customize client HTTPS connections.,"All client connection option fields (requirements currently known by me ... probably there are more in the future):
struct mg_client_options {
	const char *host;
	int port;
	const char *client_cert;
	const char *server_cert;
	const char *host_name;
	/* Timeout for connection in ms, value of 0 means use default */
	unsigned int request_timeout;

	/* more data: */

        const char *http_cookie; /* One line sent as header. NOT REQUIRED: could be added to ""fmt"" */
        const char *additional_header; /* multiline parameter. NOT REQUIRED: could be added to ""fmt"" */

        int max_response_header_size; /* used here https://github.com/civetweb/civetweb/blob/32299611c866536c55d55a8ee908c817d19fe769/src/civetweb.c#L16504 */

        int ssl_protocol_version; /* TODO: call SSL_CTX_set_options in mg_connect_client */
        const char *ssl_cipher_list; /* TODO: call SSL_CTX_set_cipher_list in mg_connect_client */

        int tcp_nodelay; /* TODO: call set_tcp_nodelay for the new client socket */
        int linger_timeout_ms; /* close_connection will look at conn->dom_ctx->config[LINGER_TIMEOUT] for this value. TODO: It must be stored there */


        int follow_redirect; /* Follow a 30x redirect response - New feature, should be possible using a new API .... maybe in a next step? */

        const char *http_username; /* After a ""401 Unauthorized"" response from a server, retry with a ""basic"" or ""digest"" auth request, retry using username/password */
        const char *http_password; /* (see above) - New feature like ""follow_redirect"" */

};

mg_connect_client2(const struct mg_client_options *client_options,
             int use_ssl,
             char *ebuf,
             size_t ebuf_len,
             int32_t *errorcode, /* <-- additional error code */
             const char *fmt,
             ...);",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/bel2125,10,https://github.com/civetweb/civetweb/pull/740#issuecomment-549078938,Adds new API allowing to customize client HTTPS connections.,"Adding linger_timeout_ms by setting conn->dom_ctx->config[LINGER_TIMEOUT] may cause interference with if (conn->dom_ctx->config[REQUEST_TIMEOUT]) timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]); in 1b1cb3e#diff-942b175a4f5673b8f0ce6c0ab2fc2932R15185
The additional socket and connection options (ssl_protocol_version, ssl_cipher_list, tcp_nodelay) will require mg_connect_client2 to be implemented first, and connect_socket to be extended. The current mg_connect_client_impl already builds a conn->dom_ctx, but does not set any ->config[] options. By filling this data correctly, all other functions will access these config options.
So, I think the first step do do, before merging, is to implement mg_connect_client2 with the additional options.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,740,2019-03-07T11:26:27Z,,2020-06-30T17:48:31Z,OPEN,False,198,44,5,https://github.com/krzk,SSL client new HTTPS API,2,[],https://github.com/civetweb/civetweb/pull/740,https://github.com/plan44,11,https://github.com/civetweb/civetweb/pull/740#issuecomment-651946535,Adds new API allowing to customize client HTTPS connections.,"Hello, I am in no way up to speed with real civetweb mainline development, so I can't really contribute here.
But out of need for a project of mine (p44utils on which all my C++ automation daemons are based), I forked civetweb back in 2017 and had to add a few features to the http client code over the years, such as variants for server certificate verification, more timeout control, chunked event stream capability, http auth. Also I needed some more specific (so less generally useful) changes to the server.
Now I rebased these changes on v1.12, so I thought it might be of some use in the general context of client improvements going on, so I forked civetweb on github and posted my changes here in the p44_updates branch.
Just in case - I realize that this is specific code and far from ready for mainline, but maybe some snippets of it can still save you some work ;-)",True,{'THUMBS_UP': ['https://github.com/aji-s']}
civetweb/civetweb,https://github.com/civetweb/civetweb,741,2019-03-07T11:27:03Z,2019-03-07T18:23:54Z,2019-03-07T18:24:05Z,MERGED,True,20,4,1,https://github.com/krzk,SSL client fixes,2,[],https://github.com/civetweb/civetweb/pull/741,https://github.com/krzk,1,https://github.com/civetweb/civetweb/pull/741,Minor fixes for SSL/TLS client code,Minor fixes for SSL/TLS client code,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,741,2019-03-07T11:27:03Z,2019-03-07T18:23:54Z,2019-03-07T18:24:05Z,MERGED,True,20,4,1,https://github.com/krzk,SSL client fixes,2,[],https://github.com/civetweb/civetweb/pull/741,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/741#issuecomment-470505481,Minor fixes for SSL/TLS client code,"Codecov Report

Merging #741 into master will decrease coverage by 0.04%.
The diff coverage is 33.33%.


@@            Coverage Diff            @@
##           master    #741      +/-   ##
=========================================
- Coverage   77.24%   77.2%   -0.05%     
=========================================
  Files          13      13              
  Lines        9791    9799       +8     
=========================================
+ Hits         7563    7565       +2     
- Misses       2228    2234       +6



Impacted Files
Coverage Δ





src/civetweb.c
68.82% <33.33%> (-0.07%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 32011b7...9dfef15. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,741,2019-03-07T11:27:03Z,2019-03-07T18:23:54Z,2019-03-07T18:24:05Z,MERGED,True,20,4,1,https://github.com/krzk,SSL client fixes,2,[],https://github.com/civetweb/civetweb/pull/741,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/741#issuecomment-470638883,Minor fixes for SSL/TLS client code,"Thanks for these fixes.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,742,2019-03-09T05:12:18Z,2019-03-10T19:48:13Z,2019-03-20T11:37:51Z,MERGED,True,390,432,4,https://github.com/xtne6f,Several fixes and improvements about threading,6,[],https://github.com/civetweb/civetweb/pull/742,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/742,"I have selected stack/context based approach for readability, though thread-local storage is available.
This request might conflict with the commit of #719 (comment) . I also agree to apply it.","I have selected stack/context based approach for readability, though thread-local storage is available.
This request might conflict with the commit of #719 (comment) . I also agree to apply it.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,742,2019-03-09T05:12:18Z,2019-03-10T19:48:13Z,2019-03-20T11:37:51Z,MERGED,True,390,432,4,https://github.com/xtne6f,Several fixes and improvements about threading,6,[],https://github.com/civetweb/civetweb/pull/742,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/742#issuecomment-471148452,"I have selected stack/context based approach for readability, though thread-local storage is available.
This request might conflict with the commit of #719 (comment) . I also agree to apply it.","Codecov Report

Merging #742 into master will increase coverage by 0.02%.
The diff coverage is 47.33%.


@@            Coverage Diff             @@
##           master     #742      +/-   ##
==========================================
+ Coverage   77.16%   77.18%   +0.02%     
==========================================
  Files          13       13              
  Lines        9769     9762       -7     
==========================================
- Hits         7538     7535       -3     
+ Misses       2231     2227       -4



Impacted Files
Coverage Δ





unittest/private.c
99.82% <ø> (ø)
⬆️


src/civetweb.c
68.8% <41.8%> (+0.1%)
⬆️


src/timer.inl
86.2% <71.42%> (-6.2%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 664e4b9...9a678ae. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,746,2019-03-22T23:37:53Z,2019-03-23T17:20:47Z,2019-03-23T17:20:57Z,MERGED,True,4,3,3,https://github.com/br-lemes,Typo fix and Android.mk fix,3,[],https://github.com/civetweb/civetweb/pull/746,https://github.com/br-lemes,1,https://github.com/civetweb/civetweb/pull/746,"Typo fix.
Android.mk: ""Always use Unix-style forward slashes (/) in build files. The build system does not handle Windows-style backslashes () properly."" According to: https://developer.android.com/ndk/guides/android_mk?hl=en#local_src_files
Android.mk: add include path","Typo fix.
Android.mk: ""Always use Unix-style forward slashes (/) in build files. The build system does not handle Windows-style backslashes () properly."" According to: https://developer.android.com/ndk/guides/android_mk?hl=en#local_src_files
Android.mk: add include path",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,746,2019-03-22T23:37:53Z,2019-03-23T17:20:47Z,2019-03-23T17:20:57Z,MERGED,True,4,3,3,https://github.com/br-lemes,Typo fix and Android.mk fix,3,[],https://github.com/civetweb/civetweb/pull/746,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/746#issuecomment-475823351,"Typo fix.
Android.mk: ""Always use Unix-style forward slashes (/) in build files. The build system does not handle Windows-style backslashes () properly."" According to: https://developer.android.com/ndk/guides/android_mk?hl=en#local_src_files
Android.mk: add include path","Codecov Report

Merging #746 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #746      +/-   ##
==========================================
- Coverage   77.18%   77.17%   -0.02%     
==========================================
  Files          13       13              
  Lines        9762     9762              
==========================================
- Hits         7535     7534       -1     
- Misses       2227     2228       +1



Impacted Files
Coverage Δ





src/civetweb.c
68.78% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 757c72d...defd430. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,746,2019-03-22T23:37:53Z,2019-03-23T17:20:47Z,2019-03-23T17:20:57Z,MERGED,True,4,3,3,https://github.com/br-lemes,Typo fix and Android.mk fix,3,[],https://github.com/civetweb/civetweb/pull/746,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/746#issuecomment-475888246,"Typo fix.
Android.mk: ""Always use Unix-style forward slashes (/) in build files. The build system does not handle Windows-style backslashes () properly."" According to: https://developer.android.com/ndk/guides/android_mk?hl=en#local_src_files
Android.mk: add include path","Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,747,2019-03-23T21:22:08Z,2019-03-25T19:10:39Z,2019-03-25T19:10:47Z,MERGED,True,218,168,76,https://github.com/br-lemes,Update from Lua 5.3.4 to 5.3.5,1,[],https://github.com/civetweb/civetweb/pull/747,https://github.com/br-lemes,1,https://github.com/civetweb/civetweb/pull/747,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,747,2019-03-23T21:22:08Z,2019-03-25T19:10:39Z,2019-03-25T19:10:47Z,MERGED,True,218,168,76,https://github.com/br-lemes,Update from Lua 5.3.4 to 5.3.5,1,[],https://github.com/civetweb/civetweb/pull/747,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/747#issuecomment-475907735,,"Codecov Report

Merging #747 into master will decrease coverage by 0.02%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #747      +/-   ##
==========================================
- Coverage   77.19%   77.17%   -0.03%     
==========================================
  Files          13       13              
  Lines        9762     9762              
==========================================
- Hits         7536     7534       -2     
- Misses       2226     2228       +2



Impacted Files
Coverage Δ





src/civetweb.c
68.78% <0%> (-0.04%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 38f2912...4c7ab65. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,747,2019-03-23T21:22:08Z,2019-03-25T19:10:39Z,2019-03-25T19:10:47Z,MERGED,True,218,168,76,https://github.com/br-lemes,Update from Lua 5.3.4 to 5.3.5,1,[],https://github.com/civetweb/civetweb/pull/747,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/747#issuecomment-476337953,,"Thanks.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,748,2019-03-25T12:03:42Z,2019-03-25T19:12:21Z,2019-03-26T09:52:20Z,MERGED,True,10,70,3,https://github.com/xtne6f,Fix Lua connect(),2,[],https://github.com/civetweb/civetweb/pull/748,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/748,8454ab6 is optional. I'll drop it on demand.,8454ab6 is optional. I'll drop it on demand.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,748,2019-03-25T12:03:42Z,2019-03-25T19:12:21Z,2019-03-26T09:52:20Z,MERGED,True,10,70,3,https://github.com/xtne6f,Fix Lua connect(),2,[],https://github.com/civetweb/civetweb/pull/748,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/748#issuecomment-476176582,8454ab6 is optional. I'll drop it on demand.,"Codecov Report

Merging #748 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #748      +/-   ##
==========================================
- Coverage   77.19%   77.18%   -0.02%     
==========================================
  Files          13       13              
  Lines        9762     9760       -2     
==========================================
- Hits         7536     7533       -3     
- Misses       2226     2227       +1



Impacted Files
Coverage Δ





src/civetweb.c
68.79% <ø> (-0.04%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 38f2912...bc3d4af. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,748,2019-03-25T12:03:42Z,2019-03-25T19:12:21Z,2019-03-26T09:52:20Z,MERGED,True,10,70,3,https://github.com/xtne6f,Fix Lua connect(),2,[],https://github.com/civetweb/civetweb/pull/748,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/748#issuecomment-476338505,8454ab6 is optional. I'll drop it on demand.,Thanks. Merged,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,749,2019-03-26T05:53:08Z,2019-03-31T18:53:41Z,2019-03-31T18:53:41Z,MERGED,True,137,2,1,https://github.com/br-lemes,Add the WITH_* options,1,[],https://github.com/civetweb/civetweb/pull/749,https://github.com/br-lemes,1,https://github.com/civetweb/civetweb/pull/749,"Remove -O2 option (let ndk-build handle it)
Add WITH_DEBUG option (it's supposed to work, but I don't use/know if it's ok)
Add the WITH_* options
The following options I don't use/know if it works: WITH_LUA_SHARED, WITH_LUAJIT_SHARED, WITH_DUKTAPE_SHARED, SSL_LIB, CRYPTO_LIB
Not implemented the WITH_CPP option

I copied from the main Makefile, so it's likely to works the same.","Remove -O2 option (let ndk-build handle it)
Add WITH_DEBUG option (it's supposed to work, but I don't use/know if it's ok)
Add the WITH_* options
The following options I don't use/know if it works: WITH_LUA_SHARED, WITH_LUAJIT_SHARED, WITH_DUKTAPE_SHARED, SSL_LIB, CRYPTO_LIB
Not implemented the WITH_CPP option

I copied from the main Makefile, so it's likely to works the same.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,749,2019-03-26T05:53:08Z,2019-03-31T18:53:41Z,2019-03-31T18:53:41Z,MERGED,True,137,2,1,https://github.com/br-lemes,Add the WITH_* options,1,[],https://github.com/civetweb/civetweb/pull/749,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/749#issuecomment-476491406,"Remove -O2 option (let ndk-build handle it)
Add WITH_DEBUG option (it's supposed to work, but I don't use/know if it's ok)
Add the WITH_* options
The following options I don't use/know if it works: WITH_LUA_SHARED, WITH_LUAJIT_SHARED, WITH_DUKTAPE_SHARED, SSL_LIB, CRYPTO_LIB
Not implemented the WITH_CPP option

I copied from the main Makefile, so it's likely to works the same.","Codecov Report

Merging #749 into master will decrease coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #749      +/-   ##
==========================================
- Coverage   77.21%   77.18%   -0.04%     
==========================================
  Files          13       13              
  Lines        9760     9760              
==========================================
- Hits         7536     7533       -3     
- Misses       2224     2227       +3



Impacted Files
Coverage Δ





src/civetweb.c
68.79% <0%> (-0.06%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8f5cf80...2ddea3a. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,750,2019-03-28T17:09:45Z,2019-03-31T18:54:45Z,2019-03-31T18:55:03Z,MERGED,True,13,5,1,https://github.com/daveelton,mg_form_data_handler.md improved,1,[],https://github.com/civetweb/civetweb/pull/750,https://github.com/daveelton,1,https://github.com/civetweb/civetweb/pull/750,Added documentation for the field_get method and fixed formatting issues on the mg_form_data_handler.md page,Added documentation for the field_get method and fixed formatting issues on the mg_form_data_handler.md page,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,750,2019-03-28T17:09:45Z,2019-03-31T18:54:45Z,2019-03-31T18:55:03Z,MERGED,True,13,5,1,https://github.com/daveelton,mg_form_data_handler.md improved,1,[],https://github.com/civetweb/civetweb/pull/750,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/750#issuecomment-477745410,Added documentation for the field_get method and fixed formatting issues on the mg_form_data_handler.md page,"Codecov Report

Merging #750 into master will decrease coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #750      +/-   ##
==========================================
- Coverage   77.21%   77.18%   -0.04%     
==========================================
  Files          13       13              
  Lines        9760     9760              
==========================================
- Hits         7536     7533       -3     
- Misses       2224     2227       +3



Impacted Files
Coverage Δ





src/civetweb.c
68.79% <0%> (-0.06%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8f5cf80...18e3c0c. Read the comment docs.",True,{'CONFUSED': ['https://github.com/daveelton']}
civetweb/civetweb,https://github.com/civetweb/civetweb,750,2019-03-28T17:09:45Z,2019-03-31T18:54:45Z,2019-03-31T18:55:03Z,MERGED,True,13,5,1,https://github.com/daveelton,mg_form_data_handler.md improved,1,[],https://github.com/civetweb/civetweb/pull/750,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/750#issuecomment-478369021,Added documentation for the field_get method and fixed formatting issues on the mg_form_data_handler.md page,"Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,751,2019-04-01T10:16:19Z,2019-04-01T10:17:10Z,2019-04-01T10:17:10Z,CLOSED,False,1,1,1,https://github.com/krzk,Use correct name of file (certificate chain) in error message,1,[],https://github.com/civetweb/civetweb/pull/751,https://github.com/krzk,1,https://github.com/civetweb/civetweb/pull/751,"Use correct file name when printing error message after unsuccessful
call to SSL_CTX_use_certificate_chain_file().
Signed-off-by: Krzysztof Kozlowski krzk@kernel.org","Use correct file name when printing error message after unsuccessful
call to SSL_CTX_use_certificate_chain_file().
Signed-off-by: Krzysztof Kozlowski krzk@kernel.org",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,751,2019-04-01T10:16:19Z,2019-04-01T10:17:10Z,2019-04-01T10:17:10Z,CLOSED,False,1,1,1,https://github.com/krzk,Use correct name of file (certificate chain) in error message,1,[],https://github.com/civetweb/civetweb/pull/751,https://github.com/krzk,2,https://github.com/civetweb/civetweb/pull/751#issuecomment-478521325,"Use correct file name when printing error message after unsuccessful
call to SSL_CTX_use_certificate_chain_file().
Signed-off-by: Krzysztof Kozlowski krzk@kernel.org","Ah, let me remove the signed-off.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,752,2019-04-01T10:18:11Z,2019-04-04T19:12:56Z,2019-04-04T19:13:05Z,MERGED,True,1,1,1,https://github.com/krzk,Use correct name of file (certificate chain) in error message,1,[],https://github.com/civetweb/civetweb/pull/752,https://github.com/krzk,1,https://github.com/civetweb/civetweb/pull/752,"Use correct file name when printing error message after unsuccessful
call to SSL_CTX_use_certificate_chain_file().","Use correct file name when printing error message after unsuccessful
call to SSL_CTX_use_certificate_chain_file().",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,752,2019-04-01T10:18:11Z,2019-04-04T19:12:56Z,2019-04-04T19:13:05Z,MERGED,True,1,1,1,https://github.com/krzk,Use correct name of file (certificate chain) in error message,1,[],https://github.com/civetweb/civetweb/pull/752,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/752#issuecomment-478531453,"Use correct file name when printing error message after unsuccessful
call to SSL_CTX_use_certificate_chain_file().","Codecov Report

Merging #752 into master will increase coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #752      +/-   ##
=========================================
+ Coverage   77.19%   77.2%   +0.01%     
=========================================
  Files          13      13              
  Lines        9760    9760              
=========================================
+ Hits         7534    7535       +1     
+ Misses       2226    2225       -1



Impacted Files
Coverage Δ





src/civetweb.c
68.83% <ø> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 9f07491...c1686a3. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,752,2019-04-01T10:18:11Z,2019-04-04T19:12:56Z,2019-04-04T19:13:05Z,MERGED,True,1,1,1,https://github.com/krzk,Use correct name of file (certificate chain) in error message,1,[],https://github.com/civetweb/civetweb/pull/752,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/752#issuecomment-480026834,"Use correct file name when printing error message after unsuccessful
call to SSL_CTX_use_certificate_chain_file().","Merged.
Thanks",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,755,2019-04-18T10:35:01Z,2019-04-19T19:15:21Z,2019-04-19T19:15:39Z,MERGED,True,2,2,1,https://github.com/domekuf,Documentation: mg_get_context_info.md fixed typo,1,[],https://github.com/civetweb/civetweb/pull/755,https://github.com/domekuf,1,https://github.com/civetweb/civetweb/pull/755,Added missing apostrophes.,Added missing apostrophes.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,755,2019-04-18T10:35:01Z,2019-04-19T19:15:21Z,2019-04-19T19:15:39Z,MERGED,True,2,2,1,https://github.com/domekuf,Documentation: mg_get_context_info.md fixed typo,1,[],https://github.com/civetweb/civetweb/pull/755,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/755#issuecomment-484456460,Added missing apostrophes.,"Codecov Report

Merging #755 into master will increase coverage by 0.03%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #755      +/-   ##
==========================================
+ Coverage   77.18%   77.21%   +0.03%     
==========================================
  Files          13       13              
  Lines        9760     9760              
==========================================
+ Hits         7533     7536       +3     
+ Misses       2227     2224       -3



Impacted Files
Coverage Δ





src/civetweb.c
68.85% <0%> (+0.05%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 1137004...760b2dc. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,755,2019-04-18T10:35:01Z,2019-04-19T19:15:21Z,2019-04-19T19:15:39Z,MERGED,True,2,2,1,https://github.com/domekuf,Documentation: mg_get_context_info.md fixed typo,1,[],https://github.com/civetweb/civetweb/pull/755,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/755#issuecomment-484990395,Added missing apostrophes.,"Thanks.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,757,2019-04-18T23:54:04Z,2020-10-29T14:00:44Z,2020-10-29T14:00:44Z,CLOSED,False,0,44,1,https://github.com/tweenk,Remove build date from system info.,1,[],https://github.com/civetweb/civetweb/pull/757,https://github.com/tweenk,1,https://github.com/civetweb/civetweb/pull/757,DATE causes builds to be non-reproducible and should be avoided.,DATE causes builds to be non-reproducible and should be avoided.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,757,2019-04-18T23:54:04Z,2020-10-29T14:00:44Z,2020-10-29T14:00:44Z,CLOSED,False,0,44,1,https://github.com/tweenk,Remove build date from system info.,1,[],https://github.com/civetweb/civetweb/pull/757,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/757#issuecomment-484730493,DATE causes builds to be non-reproducible and should be avoided.,"Codecov Report

Merging #757 into master will increase coverage by <.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #757      +/-   ##
==========================================
+ Coverage   77.18%   77.18%   +<.01%     
==========================================
  Files          13       13              
  Lines        9760     9758       -2     
==========================================
- Hits         7533     7532       -1     
+ Misses       2227     2226       -1



Impacted Files
Coverage Δ





src/civetweb.c
68.8% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 1137004...ab2a078. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,757,2019-04-18T23:54:04Z,2020-10-29T14:00:44Z,2020-10-29T14:00:44Z,CLOSED,False,0,44,1,https://github.com/tweenk,Remove build date from system info.,1,[],https://github.com/civetweb/civetweb/pull/757,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/757#issuecomment-484992670,DATE causes builds to be non-reproducible and should be avoided.,"Sorry, no.
Using __DATE__ is my way to identify an executable - that's exactly the idea behind __DATE__ since several decades of C programming.
From my point of view the warning: expansion of date or time macro is not reproducible should be removed from compilers - not the use of __DATE__ from code.
A possible replacement ... even enhancement! ... could be to use the git commit number, but not to completely remove __DATE__ without any replacement.",True,"{'THUMBS_UP': ['https://github.com/ursine', 'https://github.com/Qinch']}"
civetweb/civetweb,https://github.com/civetweb/civetweb,757,2019-04-18T23:54:04Z,2020-10-29T14:00:44Z,2020-10-29T14:00:44Z,CLOSED,False,0,44,1,https://github.com/tweenk,Remove build date from system info.,1,[],https://github.com/civetweb/civetweb/pull/757,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/757#issuecomment-485001776,DATE causes builds to be non-reproducible and should be avoided.,"I know there is some doctrine ""identical source should yield in identical binaries"" (currently the binary is identical EXCEPT one diagnosis printf), and there is another one doctrine ""every build should be uniquely identifiable"" (using DATE is not perfect but a useful approximation with standard C). Everything better than that requires a build server, from my experience - but you are welcome to tell my another way to do that.
Just, please don't remove the way binaries can be identified without offering any replacement.
(To manually increment the version number in every commit is not an option. This is currently only done for releases.)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,757,2019-04-18T23:54:04Z,2020-10-29T14:00:44Z,2020-10-29T14:00:44Z,CLOSED,False,0,44,1,https://github.com/tweenk,Remove build date from system info.,1,[],https://github.com/civetweb/civetweb/pull/757,https://github.com/tweenk,5,https://github.com/civetweb/civetweb/pull/757#issuecomment-485023984,DATE causes builds to be non-reproducible and should be avoided.,"I can add a git commit hash instead. Would you accept a change that does that, but only when you build with CMake?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,757,2019-04-18T23:54:04Z,2020-10-29T14:00:44Z,2020-10-29T14:00:44Z,CLOSED,False,0,44,1,https://github.com/tweenk,Remove build date from system info.,1,[],https://github.com/civetweb/civetweb/pull/757,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/757#issuecomment-485160821,DATE causes builds to be non-reproducible and should be avoided.,"The Travis CI environment uses CMake - locally I usually use the Visual Studio project (Windows) or the Makefile (Linux). I would accept, even welcome, a solution that would use some kind of ""signature"" that could be a commit hash, build GUID, ... or date if everything else fails ... depending on the build environment. In C this could be done with a ""#ifdef COMMIT_HASH"" ... or ""BUILD_SIGNATURE"" ... or whatever. Maybe CMake could set such a hash, while the Makefile and Visual Studio project use DATE ... or do you have another idea?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,757,2019-04-18T23:54:04Z,2020-10-29T14:00:44Z,2020-10-29T14:00:44Z,CLOSED,False,0,44,1,https://github.com/tweenk,Remove build date from system info.,1,[],https://github.com/civetweb/civetweb/pull/757,https://github.com/Dialga,7,https://github.com/civetweb/civetweb/pull/757#issuecomment-643076892,DATE causes builds to be non-reproducible and should be avoided.,Maybe using a SOURCE_DATE_EPOCH will help https://reproducible-builds.org/specs/source-date-epoch/?,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,757,2019-04-18T23:54:04Z,2020-10-29T14:00:44Z,2020-10-29T14:00:44Z,CLOSED,False,0,44,1,https://github.com/tweenk,Remove build date from system info.,1,[],https://github.com/civetweb/civetweb/pull/757,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/757#issuecomment-643475958,DATE causes builds to be non-reproducible and should be avoided.,"Maybe using a SOURCE_DATE_EPOCH will help https://reproducible-builds.org/specs/source-date-epoch/?

I don't understand how this is supposed to work: Is this only an environment variable, or also a C pre-processor define? Is it available only for Debian, or gcc, or ... some standard? What about Windows/Visual Studio? Other systems?
How would it be used? Could you provide an example?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,757,2019-04-18T23:54:04Z,2020-10-29T14:00:44Z,2020-10-29T14:00:44Z,CLOSED,False,0,44,1,https://github.com/tweenk,Remove build date from system info.,1,[],https://github.com/civetweb/civetweb/pull/757,https://github.com/bel2125,9,https://github.com/civetweb/civetweb/pull/757#issuecomment-718772331,DATE causes builds to be non-reproducible and should be avoided.,"The latest release allows to set a pre-processor define BUILD_DATE. If this is present, it is used instead of __DATE__ in the code. It must be defined as some string (representing a build date or build ID).
As far as I understood, SOURCE_DATE_EPOCH is something recognized by the compiler: https://gcc.gnu.org/onlinedocs/gcc-8.4.0/cpp/Environment-Variables.html - it replaces __DATE__ (and __TIME__) by the value set in SOURCE_DATE_EPOCH (a number in seconds since 1.1.1970). Thus, neither civetweb.c nor any build file needs to be changed for using SOURCE_DATE_EPOCH.
I hope this solves the problem without eliminating any build ids (and eventually ending up with unidentifiable binaries).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,760,2019-05-09T09:05:04Z,2019-05-12T18:28:32Z,2019-05-12T18:28:40Z,MERGED,True,3,3,1,https://github.com/0-wiz-0,README.md: fix some typos,1,[],https://github.com/civetweb/civetweb/pull/760,https://github.com/0-wiz-0,1,https://github.com/civetweb/civetweb/pull/760,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,760,2019-05-09T09:05:04Z,2019-05-12T18:28:32Z,2019-05-12T18:28:40Z,MERGED,True,3,3,1,https://github.com/0-wiz-0,README.md: fix some typos,1,[],https://github.com/civetweb/civetweb/pull/760,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/760#issuecomment-490831628,,"Codecov Report

Merging #760 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #760      +/-   ##
==========================================
- Coverage   77.18%   77.17%   -0.02%     
==========================================
  Files          13       13              
  Lines        9762     9762              
==========================================
- Hits         7535     7534       -1     
- Misses       2227     2228       +1



Impacted Files
Coverage Δ





src/civetweb.c
68.78% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 1c727d7...4f37b94. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,760,2019-05-09T09:05:04Z,2019-05-12T18:28:32Z,2019-05-12T18:28:40Z,MERGED,True,3,3,1,https://github.com/0-wiz-0,README.md: fix some typos,1,[],https://github.com/civetweb/civetweb/pull/760,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/760#issuecomment-491618106,,Thanks. Merged,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,762,2019-05-13T12:15:22Z,2019-05-13T19:31:06Z,2019-05-14T05:42:56Z,MERGED,True,1,0,1,https://github.com/k-mds,Fix Lua websocket stack overflow error,1,[],https://github.com/civetweb/civetweb/pull/762,https://github.com/k-mds,1,https://github.com/civetweb/civetweb/pull/762,"lua_pushlightuserdata() pushes a value onto the Lua stack, which has to be popped. Otherwise the stack fills up with every websocket timer callback.","lua_pushlightuserdata() pushes a value onto the Lua stack, which has to be popped. Otherwise the stack fills up with every websocket timer callback.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,762,2019-05-13T12:15:22Z,2019-05-13T19:31:06Z,2019-05-14T05:42:56Z,MERGED,True,1,0,1,https://github.com/k-mds,Fix Lua websocket stack overflow error,1,[],https://github.com/civetweb/civetweb/pull/762,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/762#issuecomment-491807399,"lua_pushlightuserdata() pushes a value onto the Lua stack, which has to be popped. Otherwise the stack fills up with every websocket timer callback.","Codecov Report

Merging #762 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #762   +/-   ##
=======================================
  Coverage   77.19%   77.19%           
=======================================
  Files          13       13           
  Lines        9762     9762           
=======================================
  Hits         7536     7536           
  Misses       2226     2226



Impacted Files
Coverage Δ





src/civetweb.c
68.81% <0%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 367b748...01a0f4f. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,762,2019-05-13T12:15:22Z,2019-05-13T19:31:06Z,2019-05-14T05:42:56Z,MERGED,True,1,0,1,https://github.com/k-mds,Fix Lua websocket stack overflow error,1,[],https://github.com/civetweb/civetweb/pull/762,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/762#issuecomment-491955178,"lua_pushlightuserdata() pushes a value onto the Lua stack, which has to be popped. Otherwise the stack fills up with every websocket timer callback.","Thanks for your contribution.
Merge.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/tgorochowik,1,https://github.com/civetweb/civetweb/pull/764,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/764#issuecomment-494048145,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","Codecov Report

Merging #764 into master will increase coverage by <.01%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##           master     #764      +/-   ##
==========================================
+ Coverage   77.18%   77.18%   +<.01%     
==========================================
  Files          13       13              
  Lines        9762     9763       +1     
==========================================
+ Hits         7535     7536       +1     
  Misses       2227     2227



Impacted Files
Coverage Δ





src/handle_form.inl
72.72% <ø> (ø)
⬆️


src/civetweb.c
68.8% <100%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 2ddb130...e371e61. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/764#issuecomment-494122369,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","At first sight, the approch makes sense - I will have a second look at some details.

Maybe adding default empty attribute((weak)) declarations would be acceptable?

Please don't. This is some GCC ELF specific platform dependent linker hack. Let's find another solution

Maybe storing all the necessary data in the memory instead of files?

What about using the existing auth callbacks?

... so by disabling support for files, we lose the form from the sample

I don't like that - obviously ;-)
An option could be
#if NO_FILESYSTEM
  mg_write(...); /* very small subset of the full form in the file */
#else
  mg_send_file(...);
#endif
The form page in the ""small subset"" string could contain one string input, just to demonstrate how the form is working without files. It could also contain a file input, but I don't know what it should do with the file (except storing) ... maybe calculate an MD5 checksum?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/764#issuecomment-494132355,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","And the NO_FILESYSTEM needs to be documented here: https://github.com/civetweb/civetweb/blob/master/docs/Building.md#setting-compile-flags


The NO_FILESYSTEM must not be used without NO_FILES


.. but this can all be done in later steps",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/764#issuecomment-494140043,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","Actually I like it - thanks for your contribution.
But please change this part:
#if NO_FILESYSTEM
  mg_write(...); /* very small subset of the full form in the file */
#else
  mg_send_file(...);
#endif",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/tgorochowik,6,https://github.com/civetweb/civetweb/pull/764#issuecomment-494299897,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","Thank you for your review and thank you for merging, let me answer to some general questions here (and some of them I will answer inline)


Maybe adding default empty __attribute__((weak)) declarations would be acceptable?

Please don't. This is some GCC ELF specific platform dependent linker hack. Let's find another solution

Maybe storing all the necessary data in the memory instead of files?

What about using the existing auth callbacks?

Noted, will take a look at that.


... so by disabling support for files, we lose the form from the sample

I don't like that - obviously ;-)
An option could be
#if NO_FILESYSTEM
  mg_write(...); /* very small subset of the full form in the file */
#else
  mg_send_file(...);
#endif
The form page in the ""small subset"" string could contain one string input, just to demonstrate how the form is working without files. It could also contain a file input, but I don't know what it should do with the file (except storing) ... maybe calculate an MD5 checksum?

Actually calculating an MD5 sum for a file is part of /on_the_fly_form, and it works just fine with filesystems disabled. But we will look at that and try to add a meaningful subset of the current form.

And the NO_FILESYSTEM needs to be documented here: https://github.com/civetweb/civetweb/blob/master/docs/Building.md#setting-compile-flags
The NO_FILESYSTEM must not be used without NO_FILES

We will send PRs for these.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/tgorochowik,7,https://github.com/civetweb/civetweb/pull/764#issuecomment-494449657,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","So we focused on the easiest stuff:

The NO_FILESYSTEM must not be used without NO_FILES

While this seems fairly easy, we did not want  to have to add an ifdef in each and every file that could potentially use it. To make it better, we though it should be configurable with an extra Makefile flag, like WITH_FILESYSTEM=0.
There are two problems with that:

For most of the features you use WITH_FEATURE=1, and never check what the value actually is, and here we have a flag that we want enabled by default, but give users the possibility to disable it, so it makes it kind of inconsistent unfortunately
The Makefile used for the embedded_c sample did not really use the main makefile (except calling it externally). While this solution works, it makes it impossible to use the same configuration flag for both the library code and the sample

So in the end this easy task turned out to be quite daunting, we had to make quite a few changes to make it pretty and make it work properly. But it works, and now the sample Makefile just includes tha main Makefile, and shares all the configuration with it. The code is here:
https://github.com/antmicro/civetweb/commits/no-filesytems-followup
There is no PR yet, as we probably need to run some more tests to make sure nothing is broken (the main civetweb app works and the embedded_c sample works just fine, but we may have had some impact on some other parts of the system that we are not yet aware of).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/764#issuecomment-494500089,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","I was thinking of a
#if defined(NO_FILESYSTEMS) && !defined(NO_FILES)
#error ""Inconsistant build flags. NO_FILESYSTEM requires NO_FILES 
#endif
or
#if defined(NO_FILESYSTEMS)
#defined(NO_FILES)
#endif
plus documentation",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/bel2125,9,https://github.com/civetweb/civetweb/pull/764#issuecomment-494501420,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","It seems Visual Studio 2010 and 2012 don't like this:
https://ci.appveyor.com/project/civetweb/civetweb/branch/master/job/d7j27s1gvdk0w4lf#L312",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/tgorochowik,10,https://github.com/civetweb/civetweb/pull/764#issuecomment-494503732,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","Sure, defining it like that will work. But where should it be added then? To all of the files? This is a compilation flag so it may differ when compiling multiple sources.
For our needs it's mostly civetweb.c and embedded_c.c files (and maybe headers), so it's not that much of a problem, but a global solution would be nicer.
As for the visual studio stuff: we will take a look at that. Is there a way we can trigger that CI ourselves to see if it works?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,764,2019-05-20T15:26:08Z,2019-05-20T20:31:30Z,2019-05-21T18:48:26Z,MERGED,True,84,7,3,https://github.com/tgorochowik,Add option to disable filesystems support,2,[],https://github.com/civetweb/civetweb/pull/764,https://github.com/bel2125,11,https://github.com/civetweb/civetweb/pull/764#issuecomment-494512285,"Hello @bel2125
This is supposed to serve as the initial PR that will pave the way for the Zephyr RTOS target in civetweb. As you know from your discussion with @PiotrZierhoffer, we would like to start by providing a way of using civetweb without any support for filesystems.
We started by using this with the embedded_c sample
Please let us know what you think about it in general and how would you prefer us to approach the various issues.
Some cases that probably need special attention are:

We compiled the code with -DMG_EXTERNAL_FUNCTION_mg_cry_internal_impl and -DMG_EXTERNAL_FUNCTION_log_access because their default implementation depended on files. For test purposes we provided empty functions, but requiring users to do that does not seem like the best approach - maybe adding default empty __attribute__((weak)) declarations would be acceptable?
The authorization - for now we just always return a 1 in check_authorization - we probably need a better solution for that. Maybe storing all the necessary data in the memory instead of files? We could do that, but your ACK before we start the implementation would be nice.
The whole /form URL in the sample is served from an external file with mg_send_file, so by disabling support for files, we lose the form from the sample

The points above definitely require some work, but please let us know if you see some other issues too.","I think the CI is triggered for every pull request.
Usually >90% of the ""does not work with old Visual Studio"" issues are due to variable declarations that are not on top of a block / function:

  
    
      civetweb/src/handle_form.inl
    
    
         Line 191
      in
      e7a40c9
    
  
  
    

        
          
           int has_body_data = 
        
    
  


this has to be before the (void)unused; stuff.
Regarding the #ifdef NO_FILESYSTEMS: I think civetweb.c is enough. There are a couple of issues if you build the embedded example with different options (e.g. with IPv6 support while civetweb.c is built without). A check for that is possible using ""feature"" flags:

  
    
      civetweb/include/civetweb.h
    
    
        Lines 1448 to 1475
      in
      e7a40c9
    
  
  
    

        
          
           /* Check which features where set when the civetweb library has been compiled. 
        

        
          
              The function explicitly addresses compile time defines used when building 
        

        
          
              the library - it does not mean, the feature has been initialized using a 
        

        
          
              mg_init_library call. 
        

        
          
              mg_check_feature can be called anytime, even before mg_init_library has 
        

        
          
              been called. 
        

        
          
            
        

        
          
              Parameters: 
        

        
          
                feature: specifies which feature should be checked 
        

        
          
                  The value is a bit mask. The individual bits are defined as: 
        

        
          
                    1  serve files (NO_FILES not set) 
        

        
          
                    2  support HTTPS (NO_SSL not set) 
        

        
          
                    4  support CGI (NO_CGI not set) 
        

        
          
                    8  support IPv6 (USE_IPV6 set) 
        

        
          
                   16  support WebSocket (USE_WEBSOCKET set) 
        

        
          
                   32  support Lua scripts and Lua server pages (USE_LUA is set) 
        

        
          
                   64  support server side JavaScript (USE_DUKTAPE is set) 
        

        
          
                  128  support caching (NO_CACHING not set) 
        

        
          
                  256  support server statistics (USE_SERVER_STATS is set) 
        

        
          
                  The result is undefined, if bits are set that do not represent a 
        

        
          
                  defined feature (currently: feature >= 512). 
        

        
          
                  The result is undefined, if no bit is set (feature == 0). 
        

        
          
            
        

        
          
              Return: 
        

        
          
                If feature is available, the corresponding bit is set 
        

        
          
                If feature is not available, the bit is 0 
        

        
          
           */ 
        

        
          
           CIVETWEB_API unsigned mg_check_feature(unsigned feature); 
        
    
  


... so we need a new feature flag (probably I do that).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,765,2019-05-22T07:32:45Z,2019-05-23T19:07:54Z,2019-05-23T19:07:54Z,MERGED,True,7,3,3,https://github.com/tgorochowik,NO_FILESYSTEMS follow-up,3,[],https://github.com/civetweb/civetweb/pull/765,https://github.com/tgorochowik,1,https://github.com/civetweb/civetweb/pull/765,This contains the patches requested in the discussion in #764.,This contains the patches requested in the discussion in #764.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,765,2019-05-22T07:32:45Z,2019-05-23T19:07:54Z,2019-05-23T19:07:54Z,MERGED,True,7,3,3,https://github.com/tgorochowik,NO_FILESYSTEMS follow-up,3,[],https://github.com/civetweb/civetweb/pull/765,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/765#issuecomment-494698531,This contains the patches requested in the discussion in #764.,"Codecov Report

Merging #765 into master will increase coverage by 0.01%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##           master     #765      +/-   ##
==========================================
+ Coverage   77.17%   77.18%   +0.01%     
==========================================
  Files          13       13              
  Lines        9763     9763              
==========================================
+ Hits         7535     7536       +1     
+ Misses       2228     2227       -1



Impacted Files
Coverage Δ





src/civetweb.c
68.8% <ø> (+0.01%)
⬆️


src/handle_form.inl
72.72% <100%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update e7a40c9...d35f7d6. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,765,2019-05-22T07:32:45Z,2019-05-23T19:07:54Z,2019-05-23T19:07:54Z,MERGED,True,7,3,3,https://github.com/tgorochowik,NO_FILESYSTEMS follow-up,3,[],https://github.com/civetweb/civetweb/pull/765,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/765#issuecomment-495346476,This contains the patches requested in the discussion in #764.,👍,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,767,2019-05-27T14:52:02Z,2019-05-27T18:21:08Z,2019-05-27T18:21:08Z,MERGED,True,2,0,1,https://github.com/tgorochowik,Add ARRAY_SIZE definition check,1,[],https://github.com/civetweb/civetweb/pull/767,https://github.com/tgorochowik,1,https://github.com/civetweb/civetweb/pull/767,"This is often defined in various places, add a definition check to make
sure it is not already defined.
This will be needed for the Zephyr RTOS port.","This is often defined in various places, add a definition check to make
sure it is not already defined.
This will be needed for the Zephyr RTOS port.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,767,2019-05-27T14:52:02Z,2019-05-27T18:21:08Z,2019-05-27T18:21:08Z,MERGED,True,2,0,1,https://github.com/tgorochowik,Add ARRAY_SIZE definition check,1,[],https://github.com/civetweb/civetweb/pull/767,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/767#issuecomment-496245314,"This is often defined in various places, add a definition check to make
sure it is not already defined.
This will be needed for the Zephyr RTOS port.","Codecov Report

Merging #767 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #767   +/-   ##
=======================================
  Coverage   77.18%   77.18%           
=======================================
  Files          13       13           
  Lines        9763     9763           
=======================================
  Hits         7536     7536           
  Misses       2227     2227



Impacted Files
Coverage Δ





src/civetweb.c
68.8% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5cdebfd...8e274a1. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,770,2019-06-24T15:55:13Z,2019-06-26T20:02:02Z,2019-08-15T21:38:53Z,MERGED,True,195,59,3,https://github.com/tgorochowik,Zephyr RTOS port,4,[],https://github.com/civetweb/civetweb/pull/770,https://github.com/tgorochowik,1,https://github.com/civetweb/civetweb/pull/770,"This PR adds support for Zephyr RTOS. It also adds some meta-files to make civetweb usable as an externally usable Zephyr module. It was tested on Sam E70 Xplained board.
Note that the work on the side of Zephyr is not really finished (see: zephyrproject-rtos/zephyr#17019)
Here is the main issue that sums up the porting efforts on the side of Zephyr: zephyrproject-rtos/zephyr#16683 - all the individual issues are referenced there.
Some of the changes here (for example the change from sscanf to atoi in one of the lines, or the way the stacks for worker threads are indexed for zephyr) can be removed once the Zephyr side is fully finished.
You can also see that lots of the includes have been moved around. This is to minimize slicing the code with Zephyr related ifdefs (which there are still many).
If you have any initial comments we will be happy to hear them.
It is probably a good idea to wait for at least some initial comments from the reviewers in Zephyr before doing anything with this.
CC: @laperie @jukkar @PiotrZierhoffer","This PR adds support for Zephyr RTOS. It also adds some meta-files to make civetweb usable as an externally usable Zephyr module. It was tested on Sam E70 Xplained board.
Note that the work on the side of Zephyr is not really finished (see: zephyrproject-rtos/zephyr#17019)
Here is the main issue that sums up the porting efforts on the side of Zephyr: zephyrproject-rtos/zephyr#16683 - all the individual issues are referenced there.
Some of the changes here (for example the change from sscanf to atoi in one of the lines, or the way the stacks for worker threads are indexed for zephyr) can be removed once the Zephyr side is fully finished.
You can also see that lots of the includes have been moved around. This is to minimize slicing the code with Zephyr related ifdefs (which there are still many).
If you have any initial comments we will be happy to hear them.
It is probably a good idea to wait for at least some initial comments from the reviewers in Zephyr before doing anything with this.
CC: @laperie @jukkar @PiotrZierhoffer",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,770,2019-06-24T15:55:13Z,2019-06-26T20:02:02Z,2019-08-15T21:38:53Z,MERGED,True,195,59,3,https://github.com/tgorochowik,Zephyr RTOS port,4,[],https://github.com/civetweb/civetweb/pull/770,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/770#issuecomment-505190744,"This PR adds support for Zephyr RTOS. It also adds some meta-files to make civetweb usable as an externally usable Zephyr module. It was tested on Sam E70 Xplained board.
Note that the work on the side of Zephyr is not really finished (see: zephyrproject-rtos/zephyr#17019)
Here is the main issue that sums up the porting efforts on the side of Zephyr: zephyrproject-rtos/zephyr#16683 - all the individual issues are referenced there.
Some of the changes here (for example the change from sscanf to atoi in one of the lines, or the way the stacks for worker threads are indexed for zephyr) can be removed once the Zephyr side is fully finished.
You can also see that lots of the includes have been moved around. This is to minimize slicing the code with Zephyr related ifdefs (which there are still many).
If you have any initial comments we will be happy to hear them.
It is probably a good idea to wait for at least some initial comments from the reviewers in Zephyr before doing anything with this.
CC: @laperie @jukkar @PiotrZierhoffer","It seems, this PR brokes basically every Travis CI build:
https://travis-ci.org/civetweb/civetweb/builds/549817833?utm_source=github_status&utm_medium=notification
The error is in unit test ""test-private-internal-parsing-6"":
https://travis-ci.org/civetweb/civetweb/jobs/549817834#L1325:
/home/travis/build/civetweb/civetweb/unittest/private.c:640:F:Internal Parsing 6:test_parse_port_string:0: Port string [0]: expected valid=1, family=4; got valid=0, family=0

  
    
      civetweb/unittest/private.c
    
    
        Lines 624 to 642
      in
      c3f14b3
    
  
  
    

        
          
           for (i = 0; testdata[i].port_string != NULL; i++) { 
        

        
          
           	vec.ptr = testdata[i].port_string; 
        

        
          
           	vec.len = strlen(vec.ptr); 
        

        
          
            
        

        
          
           	ip_family = 123; 
        

        
          
           	ret = parse_port_string(&vec, &so, &ip_family); 
        

        
          
            
        

        
          
           	if ((ret != testdata[i].valid) 
        

        
          
           	    || (ip_family != testdata[i].ip_family)) { 
        

        
          
           		ck_abort_msg(""Port string [%s]: "" 
        

        
          
           		             ""expected valid=%i, family=%i; "" 
        

        
          
           		             ""got valid=%i, family=%i"", 
        

        
          
           		             testdata[i].port_string, 
        

        
          
           		             testdata[i].valid, 
        

        
          
           		             testdata[i].ip_family, 
        

        
          
           		             ret, 
        

        
          
           		             ip_family); 
        

        
          
           	} 
        

        
          
           } 
        
    
  


The test string is ""0"".
There seems to be a problem in parse_port_string, probably here:
https://github.com/civetweb/civetweb/pull/770/files#diff-942b175a4f5673b8f0ce6c0ab2fc2932R14411
I did not check the rest of the PR yet.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,770,2019-06-24T15:55:13Z,2019-06-26T20:02:02Z,2019-08-15T21:38:53Z,MERGED,True,195,59,3,https://github.com/tgorochowik,Zephyr RTOS port,4,[],https://github.com/civetweb/civetweb/pull/770,https://github.com/tgorochowik,3,https://github.com/civetweb/civetweb/pull/770#issuecomment-505386295,"This PR adds support for Zephyr RTOS. It also adds some meta-files to make civetweb usable as an externally usable Zephyr module. It was tested on Sam E70 Xplained board.
Note that the work on the side of Zephyr is not really finished (see: zephyrproject-rtos/zephyr#17019)
Here is the main issue that sums up the porting efforts on the side of Zephyr: zephyrproject-rtos/zephyr#16683 - all the individual issues are referenced there.
Some of the changes here (for example the change from sscanf to atoi in one of the lines, or the way the stacks for worker threads are indexed for zephyr) can be removed once the Zephyr side is fully finished.
You can also see that lots of the includes have been moved around. This is to minimize slicing the code with Zephyr related ifdefs (which there are still many).
If you have any initial comments we will be happy to hear them.
It is probably a good idea to wait for at least some initial comments from the reviewers in Zephyr before doing anything with this.
CC: @laperie @jukkar @PiotrZierhoffer","Right! Thanks! It was actually the commit that we are hoping to remove once everything is right in Zephyr.
The problem was that it did not consider 0 to be a valid port, but we just pushed and update to make it so.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,770,2019-06-24T15:55:13Z,2019-06-26T20:02:02Z,2019-08-15T21:38:53Z,MERGED,True,195,59,3,https://github.com/tgorochowik,Zephyr RTOS port,4,[],https://github.com/civetweb/civetweb/pull/770,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/770#issuecomment-505606550,"This PR adds support for Zephyr RTOS. It also adds some meta-files to make civetweb usable as an externally usable Zephyr module. It was tested on Sam E70 Xplained board.
Note that the work on the side of Zephyr is not really finished (see: zephyrproject-rtos/zephyr#17019)
Here is the main issue that sums up the porting efforts on the side of Zephyr: zephyrproject-rtos/zephyr#16683 - all the individual issues are referenced there.
Some of the changes here (for example the change from sscanf to atoi in one of the lines, or the way the stacks for worker threads are indexed for zephyr) can be removed once the Zephyr side is fully finished.
You can also see that lots of the includes have been moved around. This is to minimize slicing the code with Zephyr related ifdefs (which there are still many).
If you have any initial comments we will be happy to hear them.
It is probably a good idea to wait for at least some initial comments from the reviewers in Zephyr before doing anything with this.
CC: @laperie @jukkar @PiotrZierhoffer","Is there any reason why
	} else if (sscanf(vec->ptr, ""%u%n"", &port, &len) == 1) {
has to be replaced by
	} else if (is_valid_port(port = strtoul(vec->ptr, &endptr, 0))
		   && vec->ptr != endptr) {
		len = endptr - vec->ptr;
in order to build for Zephyr?
One build is still failing:
https://travis-ci.org/civetweb/civetweb/jobs/550213372#L277
/Users/travis/build/civetweb/civetweb/src/civetweb.c:833:9: error: 'SSL_LIB' macro redefined [-Werror,-Wmacro-redefined]
#define SSL_LIB ""libssl.dylib""
        ^
<command line>:3:9: note: previous definition is here
#define SSL_LIB ""libssl.so""
        ^
/Users/travis/build/civetweb/civetweb/src/civetweb.c:834:9: error: 'CRYPTO_LIB' macro redefined [-Werror,-Wmacro-redefined]
#define CRYPTO_LIB ""libcrypto.dylib""
        ^
<command line>:1:9: note: previous definition is here
#define CRYPTO_LIB ""libcrypto.so""
        ^

It seems, some #ifdef for MacOS is no longer consistent now.

It was actually the commit that we are hoping to remove once everything is right in Zephyr.

So, what's supposed to be left, once everything is right in Zephyr? If there is a lot of temporary stuff, it should probably be in another civetweb branch than the civetweb master branch.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,770,2019-06-24T15:55:13Z,2019-06-26T20:02:02Z,2019-08-15T21:38:53Z,MERGED,True,195,59,3,https://github.com/tgorochowik,Zephyr RTOS port,4,[],https://github.com/civetweb/civetweb/pull/770,https://github.com/apps/codecov,5,https://github.com/civetweb/civetweb/pull/770#issuecomment-505874468,"This PR adds support for Zephyr RTOS. It also adds some meta-files to make civetweb usable as an externally usable Zephyr module. It was tested on Sam E70 Xplained board.
Note that the work on the side of Zephyr is not really finished (see: zephyrproject-rtos/zephyr#17019)
Here is the main issue that sums up the porting efforts on the side of Zephyr: zephyrproject-rtos/zephyr#16683 - all the individual issues are referenced there.
Some of the changes here (for example the change from sscanf to atoi in one of the lines, or the way the stacks for worker threads are indexed for zephyr) can be removed once the Zephyr side is fully finished.
You can also see that lots of the includes have been moved around. This is to minimize slicing the code with Zephyr related ifdefs (which there are still many).
If you have any initial comments we will be happy to hear them.
It is probably a good idea to wait for at least some initial comments from the reviewers in Zephyr before doing anything with this.
CC: @laperie @jukkar @PiotrZierhoffer","Codecov Report

Merging #770 into master will increase coverage by 0.01%.
The diff coverage is 100%.


@@            Coverage Diff             @@
##           master     #770      +/-   ##
==========================================
+ Coverage   77.14%   77.16%   +0.01%     
==========================================
  Files          13       13              
  Lines        9768     9770       +2     
==========================================
+ Hits         7536     7539       +3     
+ Misses       2232     2231       -1



Impacted Files
Coverage Δ





src/civetweb.c
68.77% <100%> (+0.03%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update c3f14b3...90befd8. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,770,2019-06-24T15:55:13Z,2019-06-26T20:02:02Z,2019-08-15T21:38:53Z,MERGED,True,195,59,3,https://github.com/tgorochowik,Zephyr RTOS port,4,[],https://github.com/civetweb/civetweb/pull/770,https://github.com/PiotrZierhoffer,6,https://github.com/civetweb/civetweb/pull/770#issuecomment-506251391,"This PR adds support for Zephyr RTOS. It also adds some meta-files to make civetweb usable as an externally usable Zephyr module. It was tested on Sam E70 Xplained board.
Note that the work on the side of Zephyr is not really finished (see: zephyrproject-rtos/zephyr#17019)
Here is the main issue that sums up the porting efforts on the side of Zephyr: zephyrproject-rtos/zephyr#16683 - all the individual issues are referenced there.
Some of the changes here (for example the change from sscanf to atoi in one of the lines, or the way the stacks for worker threads are indexed for zephyr) can be removed once the Zephyr side is fully finished.
You can also see that lots of the includes have been moved around. This is to minimize slicing the code with Zephyr related ifdefs (which there are still many).
If you have any initial comments we will be happy to hear them.
It is probably a good idea to wait for at least some initial comments from the reviewers in Zephyr before doing anything with this.
CC: @laperie @jukkar @PiotrZierhoffer","As for the sscanf change - this function is lacking from Zephyr, and adding it is a complicated feat - here we need just a small subset of its functionality, but it doesn't really make sense to implement it partially.
Zephyr work on libc and posix support is moving forward - it will be some time before it's fully done, but we are actively pushing this effort. It's difficult to make ""partial"" changes to such a complex subsystem, so I cannot really give any estimates on when will this be done.
This is exactly the change we would like to revert in future, we will keep track of Zephyr progress in this matter.
Other things that are not fully complete in Zephyr are patched in the sample directory we added there - these will also be gradually moved to the core of the system, but do not affect CivetWeb.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,772,2019-07-12T02:06:40Z,2019-07-14T18:01:05Z,2019-07-14T18:01:12Z,MERGED,True,6,2,1,https://github.com/macedot,Fix for Windows compilation,1,[],https://github.com/civetweb/civetweb/pull/772,https://github.com/macedot,1,https://github.com/civetweb/civetweb/pull/772,Includes for windows compilation. stdint.h was moved to global context since it was inclued at else condition of defined(_WIN32). Local definition of INT64_MAX was kept if the given include doesn't contain this definition.,Includes for windows compilation. stdint.h was moved to global context since it was inclued at else condition of defined(_WIN32). Local definition of INT64_MAX was kept if the given include doesn't contain this definition.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,772,2019-07-12T02:06:40Z,2019-07-14T18:01:05Z,2019-07-14T18:01:12Z,MERGED,True,6,2,1,https://github.com/macedot,Fix for Windows compilation,1,[],https://github.com/civetweb/civetweb/pull/772,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/772#issuecomment-511223187,Includes for windows compilation. stdint.h was moved to global context since it was inclued at else condition of defined(_WIN32). Local definition of INT64_MAX was kept if the given include doesn't contain this definition.,Thanks. Merged,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,773,2019-07-19T07:41:52Z,2019-07-21T15:48:43Z,2019-07-21T15:48:43Z,MERGED,True,4,1,1,https://github.com/PiotrZierhoffer,Add filtering for Zephyr buildsystem,1,[],https://github.com/civetweb/civetweb/pull/773,https://github.com/PiotrZierhoffer,1,https://github.com/civetweb/civetweb/pull/773,"Zephyr runs cmake on every module it is provided, so we add filtering
not to build CivetWeb unless explicitly configured.
This, of course, only affects building within the Zephyr tree.","Zephyr runs cmake on every module it is provided, so we add filtering
not to build CivetWeb unless explicitly configured.
This, of course, only affects building within the Zephyr tree.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,773,2019-07-19T07:41:52Z,2019-07-21T15:48:43Z,2019-07-21T15:48:43Z,MERGED,True,4,1,1,https://github.com/PiotrZierhoffer,Add filtering for Zephyr buildsystem,1,[],https://github.com/civetweb/civetweb/pull/773,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/773#issuecomment-513137190,"Zephyr runs cmake on every module it is provided, so we add filtering
not to build CivetWeb unless explicitly configured.
This, of course, only affects building within the Zephyr tree.","Codecov Report

Merging #773 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #773      +/-   ##
==========================================
- Coverage   77.17%   77.16%   -0.02%     
==========================================
  Files          13       13              
  Lines        9770     9770              
==========================================
- Hits         7540     7539       -1     
- Misses       2230     2231       +1



Impacted Files
Coverage Δ





src/civetweb.c
68.77% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update bebe254...ac92f0a. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,773,2019-07-19T07:41:52Z,2019-07-21T15:48:43Z,2019-07-21T15:48:43Z,MERGED,True,4,1,1,https://github.com/PiotrZierhoffer,Add filtering for Zephyr buildsystem,1,[],https://github.com/civetweb/civetweb/pull/773,https://github.com/PiotrZierhoffer,3,https://github.com/civetweb/civetweb/pull/773#issuecomment-513252628,"Zephyr runs cmake on every module it is provided, so we add filtering
not to build CivetWeb unless explicitly configured.
This, of course, only affects building within the Zephyr tree.","I believe the codecov report is somehow misleading, there were no changes to the sources.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,776,2019-07-27T00:26:41Z,2019-08-04T16:39:32Z,2020-01-27T23:57:40Z,MERGED,True,14,8,3,https://github.com/chardan,make SOMAXCONN configurable (fix 775),3,[],https://github.com/civetweb/civetweb/pull/776,https://github.com/chardan,1,https://github.com/civetweb/civetweb/pull/776,"Adds a configurable ""max_connections"" parameter that allows user-tuneable SOMAXCONN.
See-also:
#775","Adds a configurable ""max_connections"" parameter that allows user-tuneable SOMAXCONN.
See-also:
#775",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,776,2019-07-27T00:26:41Z,2019-08-04T16:39:32Z,2020-01-27T23:57:40Z,MERGED,True,14,8,3,https://github.com/chardan,make SOMAXCONN configurable (fix 775),3,[],https://github.com/civetweb/civetweb/pull/776,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/776#issuecomment-515638223,"Adds a configurable ""max_connections"" parameter that allows user-tuneable SOMAXCONN.
See-also:
#775","Codecov Report

Merging #776 into master will decrease coverage by 0.01%.
The diff coverage is 71.42%.


@@            Coverage Diff             @@
##           master     #776      +/-   ##
==========================================
- Coverage   77.16%   77.14%   -0.02%     
==========================================
  Files          13       13              
  Lines        9770     9776       +6     
==========================================
+ Hits         7539     7542       +3     
- Misses       2231     2234       +3



Impacted Files
Coverage Δ





unittest/private.c
99.82% <100%> (ø)
⬆️


src/civetweb.c
68.74% <66.66%> (-0.03%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7ffad76...3b8eb36. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,776,2019-07-27T00:26:41Z,2019-08-04T16:39:32Z,2020-01-27T23:57:40Z,MERGED,True,14,8,3,https://github.com/chardan,make SOMAXCONN configurable (fix 775),3,[],https://github.com/civetweb/civetweb/pull/776,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/776#issuecomment-578973265,"Adds a configurable ""max_connections"" parameter that allows user-tuneable SOMAXCONN.
See-also:
#775","The name ""max_connections"" seems to cause confusion, since it's not a limit for the maximum number of (active) connections - both, the Linux API and Windows API documentation name for the parameter seems to be ""backlog"" (http://man7.org/linux/man-pages/man2/listen.2.html, https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen). I will have to rename this parameter for the upcoming release (it's not yet in a released version, and not yet documented in UserManual.md).
Currently there are 3 connection ""backlog/queues/limit/..(whatever) stages (or whatever we call it)"":

The first one is this one (""backlog"" ... name to be defined), maintained by the operating system
The second one is ""connection_queue"" (socket accepted, but not yet dispatched to a worker thread)
Finally there are ""num_threads"" worker threads.
Only after all three stages are full, further connections attempts need to be ignored (so, this sum would be the maximum number of (active) connections (""max_connections""?) limit. The first ""stage"" needs a new (less confusing) name - maybe ""listen_backlog""?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,776,2019-07-27T00:26:41Z,2019-08-04T16:39:32Z,2020-01-27T23:57:40Z,MERGED,True,14,8,3,https://github.com/chardan,make SOMAXCONN configurable (fix 775),3,[],https://github.com/civetweb/civetweb/pull/776,https://github.com/chardan,4,https://github.com/civetweb/civetweb/pull/776#issuecomment-578985073,"Adds a configurable ""max_connections"" parameter that allows user-tuneable SOMAXCONN.
See-also:
#775","@bel2125 Hi, thanks for the thoughtful comment-- that's a great explanation and I see the source of confusion. ""listen_backlog"" seems ok to me, as would ""max_pending_connections"". Any preference between them (or another suggestion)?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,776,2019-07-27T00:26:41Z,2019-08-04T16:39:32Z,2020-01-27T23:57:40Z,MERGED,True,14,8,3,https://github.com/chardan,make SOMAXCONN configurable (fix 775),3,[],https://github.com/civetweb/civetweb/pull/776,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/776#issuecomment-578989394,"Adds a configurable ""max_connections"" parameter that allows user-tuneable SOMAXCONN.
See-also:
#775","I tried to explain them here:
https://github.com/civetweb/civetweb/blob/master/docs/UserManual.md#num_threads-50
https://github.com/civetweb/civetweb/blob/master/docs/UserManual.md#listen_backlog-200
https://github.com/civetweb/civetweb/blob/master/docs/UserManual.md#connection_queue-20
And I also increased the default value from 100 to 200, since this seems to be some minimum for Windows (see SOMAXCONN_HINT, https://docs.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-listen)",True,{'THUMBS_UP': ['https://github.com/chardan']}
civetweb/civetweb,https://github.com/civetweb/civetweb,776,2019-07-27T00:26:41Z,2019-08-04T16:39:32Z,2020-01-27T23:57:40Z,MERGED,True,14,8,3,https://github.com/chardan,make SOMAXCONN configurable (fix 775),3,[],https://github.com/civetweb/civetweb/pull/776,https://github.com/chardan,6,https://github.com/civetweb/civetweb/pull/776#issuecomment-579013729,"Adds a configurable ""max_connections"" parameter that allows user-tuneable SOMAXCONN.
See-also:
#775","@bel2125 +1, looks good to me!",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,777,2019-08-06T14:25:46Z,2019-08-07T18:42:18Z,2019-08-07T18:42:18Z,MERGED,True,1,1,1,https://github.com/macedot,Fix for double const on pointer,1,[],https://github.com/civetweb/civetweb/pull/777,https://github.com/macedot,1,https://github.com/civetweb/civetweb/pull/777,"Change from ""const char* const p"" to ""const char* p "" due to syntax error on old VS versions (2010, 2012) on Continuous integration for Windows (AppVeyor).","Change from ""const char* const p"" to ""const char* p "" due to syntax error on old VS versions (2010, 2012) on Continuous integration for Windows (AppVeyor).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,778,2019-08-07T09:27:17Z,2019-08-07T18:43:02Z,2019-08-07T18:43:02Z,MERGED,True,17,16,1,https://github.com/PiotrZierhoffer,Verify target platform earlier,1,[],https://github.com/civetweb/civetweb/pull/778,https://github.com/PiotrZierhoffer,1,https://github.com/civetweb/civetweb/pull/778,"This prevents unneeded output and CMAKE settings to be set before we
move past the filtering.","This prevents unneeded output and CMAKE settings to be set before we
move past the filtering.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,778,2019-08-07T09:27:17Z,2019-08-07T18:43:02Z,2019-08-07T18:43:02Z,MERGED,True,17,16,1,https://github.com/PiotrZierhoffer,Verify target platform earlier,1,[],https://github.com/civetweb/civetweb/pull/778,https://github.com/PiotrZierhoffer,2,https://github.com/civetweb/civetweb/pull/778#issuecomment-519044610,"This prevents unneeded output and CMAKE settings to be set before we
move past the filtering.",I force-pushed because Travis seems to have timed out on some network communication with apt repos,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,780,2019-08-10T12:42:18Z,2019-08-11T09:23:33Z,2019-08-11T09:23:42Z,MERGED,True,2,0,1,https://github.com/rinatdobr,Add missed description of callback function,1,[],https://github.com/civetweb/civetweb/pull/780,https://github.com/rinatdobr,1,https://github.com/civetweb/civetweb/pull/780,Just add missed description.,Just add missed description.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,780,2019-08-10T12:42:18Z,2019-08-11T09:23:33Z,2019-08-11T09:23:42Z,MERGED,True,2,0,1,https://github.com/rinatdobr,Add missed description of callback function,1,[],https://github.com/civetweb/civetweb/pull/780,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/780#issuecomment-520147989,Just add missed description.,"Codecov Report

Merging #780 into master will increase coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff            @@
##           master    #780      +/-   ##
=========================================
+ Coverage   77.09%   77.1%   +0.01%     
=========================================
  Files          13      13              
  Lines        9783    9783              
=========================================
+ Hits         7542    7543       +1     
+ Misses       2241    2240       -1



Impacted Files
Coverage Δ





src/civetweb.c
68.66% <0%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 99129c5...68a5ac1. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,780,2019-08-10T12:42:18Z,2019-08-11T09:23:33Z,2019-08-11T09:23:42Z,MERGED,True,2,0,1,https://github.com/rinatdobr,Add missed description of callback function,1,[],https://github.com/civetweb/civetweb/pull/780,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/780#issuecomment-520213236,Just add missed description.,"Thanks, merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,781,2019-08-28T09:15:59Z,2019-09-01T18:28:33Z,2019-09-01T18:28:45Z,MERGED,True,3,2,1,https://github.com/larsimmisch,Fix compilation issues with Xcode 10.3,1,[],https://github.com/civetweb/civetweb/pull/781,https://github.com/larsimmisch,1,https://github.com/civetweb/civetweb/pull/781,These are two small changes needed to compile civetweb with XCode 10.3,These are two small changes needed to compile civetweb with XCode 10.3,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,781,2019-08-28T09:15:59Z,2019-09-01T18:28:33Z,2019-09-01T18:28:45Z,MERGED,True,3,2,1,https://github.com/larsimmisch,Fix compilation issues with Xcode 10.3,1,[],https://github.com/civetweb/civetweb/pull/781,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/781#issuecomment-525667592,These are two small changes needed to compile civetweb with XCode 10.3,"Codecov Report

Merging #781 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #781   +/-   ##
=======================================
  Coverage   77.09%   77.09%           
=======================================
  Files          13       13           
  Lines        9783     9783           
=======================================
  Hits         7542     7542           
  Misses       2241     2241



Impacted Files
Coverage Δ





src/civetweb.c
68.64% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 3fadd57...e41be40. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,781,2019-08-28T09:15:59Z,2019-09-01T18:28:33Z,2019-09-01T18:28:45Z,MERGED,True,3,2,1,https://github.com/larsimmisch,Fix compilation issues with Xcode 10.3,1,[],https://github.com/civetweb/civetweb/pull/781,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/781#issuecomment-526942393,These are two small changes needed to compile civetweb with XCode 10.3,"Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,782,2019-08-30T08:55:34Z,2019-09-01T18:29:45Z,2019-09-01T18:29:45Z,MERGED,True,5,0,1,https://github.com/larsimmisch,Document ephemeral ports.,1,[],https://github.com/civetweb/civetweb/pull/782,https://github.com/larsimmisch,1,https://github.com/civetweb/civetweb/pull/782,"I looked for ephemeral ports in the documentation, and because I somehow didn't think of using port 0, I started a PR to allow ephemeral ports, only to find that they are already supported (after changing the unit-tests for my PR). Maybe this helps other folks.","I looked for ephemeral ports in the documentation, and because I somehow didn't think of using port 0, I started a PR to allow ephemeral ports, only to find that they are already supported (after changing the unit-tests for my PR). Maybe this helps other folks.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,782,2019-08-30T08:55:34Z,2019-09-01T18:29:45Z,2019-09-01T18:29:45Z,MERGED,True,5,0,1,https://github.com/larsimmisch,Document ephemeral ports.,1,[],https://github.com/civetweb/civetweb/pull/782,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/782#issuecomment-526530867,"I looked for ephemeral ports in the documentation, and because I somehow didn't think of using port 0, I started a PR to allow ephemeral ports, only to find that they are already supported (after changing the unit-tests for my PR). Maybe this helps other folks.","Codecov Report

Merging #782 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #782   +/-   ##
=======================================
  Coverage   77.09%   77.09%           
=======================================
  Files          13       13           
  Lines        9783     9783           
=======================================
  Hits         7542     7542           
  Misses       2241     2241

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 3fadd57...380110b. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,791,2019-09-20T12:22:18Z,2019-09-22T13:57:03Z,2020-08-07T19:19:56Z,MERGED,True,1,1,1,https://github.com/rmisev,Optimize CivetServer::getPostData,1,[],https://github.com/civetweb/civetweb/pull/791,https://github.com/rmisev,1,https://github.com/civetweb/civetweb/pull/791,Use std::string::append instead of creating std::string object for each append.,Use std::string::append instead of creating std::string object for each append.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,791,2019-09-20T12:22:18Z,2019-09-22T13:57:03Z,2020-08-07T19:19:56Z,MERGED,True,1,1,1,https://github.com/rmisev,Optimize CivetServer::getPostData,1,[],https://github.com/civetweb/civetweb/pull/791,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/791#issuecomment-533540948,Use std::string::append instead of creating std::string object for each append.,"Codecov Report

Merging #791 into master will not change coverage.
The diff coverage is n/a.


@@          Coverage Diff           @@
##           master    #791   +/-   ##
======================================
  Coverage    77.1%   77.1%           
======================================
  Files          13      13           
  Lines        9785    9785           
======================================
  Hits         7545    7545           
  Misses       2240    2240

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f70fa77...b564474. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,798,2019-10-24T19:48:54Z,2020-01-03T13:18:53Z,2020-01-03T13:18:54Z,MERGED,True,4,2,1,https://github.com/shreyajaggi8,Add conan/test_package/build to gitignore,2,[],https://github.com/civetweb/civetweb/pull/798,https://github.com/shreyajaggi8,1,https://github.com/civetweb/civetweb/pull/798,Add conan/test_package/build to gitignore,Add conan/test_package/build to gitignore,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,798,2019-10-24T19:48:54Z,2020-01-03T13:18:53Z,2020-01-03T13:18:54Z,MERGED,True,4,2,1,https://github.com/shreyajaggi8,Add conan/test_package/build to gitignore,2,[],https://github.com/civetweb/civetweb/pull/798,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/798#issuecomment-546087588,Add conan/test_package/build to gitignore,"Codecov Report

Merging #798 into master will increase coverage by 0.55%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #798      +/-   ##
==========================================
+ Coverage   76.54%   77.09%   +0.55%     
==========================================
  Files          13       13              
  Lines        9947     9785     -162     
==========================================
- Hits         7614     7544      -70     
+ Misses       2333     2241      -92



Impacted Files
Coverage Δ





unittest/private.c
99.82% <0%> (-0.01%)
⬇️


src/main.c
0% <0%> (ø)
⬆️


unittest/public_server.c
98.55% <0%> (+0.04%)
⬆️


src/civetweb.c
68.65% <0%> (+0.69%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update edc8488...6f414df. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,798,2019-10-24T19:48:54Z,2020-01-03T13:18:53Z,2020-01-03T13:18:54Z,MERGED,True,4,2,1,https://github.com/shreyajaggi8,Add conan/test_package/build to gitignore,2,[],https://github.com/civetweb/civetweb/pull/798,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/798#issuecomment-546727960,Add conan/test_package/build to gitignore,"In the ""Contribution doc"" I explicitly asked for a brief description of every pull request. And yes, please also provide a title.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,802,2019-11-14T15:13:25Z,2019-11-18T19:38:04Z,2019-11-18T19:38:05Z,MERGED,True,26,2,3,https://github.com/samal-rasmussen,Add static_file_cache_control config option,1,[],https://github.com/civetweb/civetweb/pull/802,https://github.com/samal-rasmussen,1,https://github.com/civetweb/civetweb/pull/802,"Solves #801
Add a config option for adding an arbitrary Cache-Control header to static file responses.","Solves #801
Add a config option for adding an arbitrary Cache-Control header to static file responses.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,802,2019-11-14T15:13:25Z,2019-11-18T19:38:04Z,2019-11-18T19:38:05Z,MERGED,True,26,2,3,https://github.com/samal-rasmussen,Add static_file_cache_control config option,1,[],https://github.com/civetweb/civetweb/pull/802,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/802#issuecomment-553948147,"Solves #801
Add a config option for adding an arbitrary Cache-Control header to static file responses.","Codecov Report

Merging #802 into master will increase coverage by <.01%.
The diff coverage is 66.66%.


@@            Coverage Diff             @@
##           master     #802      +/-   ##
==========================================
+ Coverage   77.11%   77.11%   +<.01%     
==========================================
  Files          13       13              
  Lines        9791     9794       +3     
==========================================
+ Hits         7550     7553       +3     
  Misses       2241     2241



Impacted Files
Coverage Δ





src/civetweb.c
68.68% <66.66%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update a87eeec...9307f1d. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,803,2019-11-19T14:10:06Z,2019-11-26T19:54:26Z,2019-11-26T19:54:27Z,MERGED,True,4,2,1,https://github.com/samal-rasmussen,Slight formatting improvement to static_file_cache_control documentation,1,[],https://github.com/civetweb/civetweb/pull/803,https://github.com/samal-rasmussen,1,https://github.com/civetweb/civetweb/pull/803,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,803,2019-11-19T14:10:06Z,2019-11-26T19:54:26Z,2019-11-26T19:54:27Z,MERGED,True,4,2,1,https://github.com/samal-rasmussen,Slight formatting improvement to static_file_cache_control documentation,1,[],https://github.com/civetweb/civetweb/pull/803,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/803#issuecomment-555536760,,"Codecov Report

Merging #803 into master will not change coverage.
The diff coverage is n/a.


@@          Coverage Diff           @@
##           master    #803   +/-   ##
======================================
  Coverage    77.1%   77.1%           
======================================
  Files          13      13           
  Lines        9794    9794           
======================================
  Hits         7552    7552           
  Misses       2242    2242

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 465c731...4730699. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,808,2019-12-05T00:56:06Z,2019-12-05T00:56:55Z,2019-12-05T00:56:55Z,CLOSED,False,426845,48316,512,https://github.com/mjeremyhsu,test,881,[],https://github.com/civetweb/civetweb/pull/808,https://github.com/mjeremyhsu,1,https://github.com/civetweb/civetweb/pull/808,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,814,2019-12-17T13:25:57Z,2019-12-21T09:44:25Z,2019-12-21T09:45:27Z,MERGED,True,9,6,4,https://github.com/drew-wells,Added server_domain parameter to init_ssl callback,2,[],https://github.com/civetweb/civetweb/pull/814,https://github.com/drew-wells,1,https://github.com/civetweb/civetweb/pull/814,When using the init_ssl callback in conjunction with mg_start_domain (for multiple certificates) it's impossible in the callback to determine which SSL_CTX is being configured.  Seeing as the AUTHENTICATION_DOMAIN is a required config then I've used this value (server_domain) to pass through to the init_ssl callback.,When using the init_ssl callback in conjunction with mg_start_domain (for multiple certificates) it's impossible in the callback to determine which SSL_CTX is being configured.  Seeing as the AUTHENTICATION_DOMAIN is a required config then I've used this value (server_domain) to pass through to the init_ssl callback.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,814,2019-12-17T13:25:57Z,2019-12-21T09:44:25Z,2019-12-21T09:45:27Z,MERGED,True,9,6,4,https://github.com/drew-wells,Added server_domain parameter to init_ssl callback,2,[],https://github.com/civetweb/civetweb/pull/814,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/814#issuecomment-566550076,When using the init_ssl callback in conjunction with mg_start_domain (for multiple certificates) it's impossible in the callback to determine which SSL_CTX is being configured.  Seeing as the AUTHENTICATION_DOMAIN is a required config then I've used this value (server_domain) to pass through to the init_ssl callback.,"Codecov Report

Merging #814 into master will decrease coverage by 0.01%.
The diff coverage is 50%.


@@            Coverage Diff            @@
##           master    #814      +/-   ##
=========================================
- Coverage   77.12%   77.1%   -0.02%     
=========================================
  Files          13      13              
  Lines        9795    9796       +1     
=========================================
- Hits         7554    7553       -1     
- Misses       2241    2243       +2



Impacted Files
Coverage Δ





src/civetweb.c
68.65% <50%> (-0.04%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 6423fae...16f346f. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,814,2019-12-17T13:25:57Z,2019-12-21T09:44:25Z,2019-12-21T09:45:27Z,MERGED,True,9,6,4,https://github.com/drew-wells,Added server_domain parameter to init_ssl callback,2,[],https://github.com/civetweb/civetweb/pull/814,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/814#issuecomment-567186121,When using the init_ssl callback in conjunction with mg_start_domain (for multiple certificates) it's impossible in the callback to determine which SSL_CTX is being configured.  Seeing as the AUTHENTICATION_DOMAIN is a required config then I've used this value (server_domain) to pass through to the init_ssl callback.,"it's impossible in the callback to determine which SSL_CTX is being configured.

You are right ... but adding a parameter to the callback breaks compatibility.
Let me first check if there is a reasonable way this can be done in a compatible way.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,814,2019-12-17T13:25:57Z,2019-12-21T09:44:25Z,2019-12-21T09:45:27Z,MERGED,True,9,6,4,https://github.com/drew-wells,Added server_domain parameter to init_ssl callback,2,[],https://github.com/civetweb/civetweb/pull/814,https://github.com/drew-wells,4,https://github.com/civetweb/civetweb/pull/814#issuecomment-567410446,When using the init_ssl callback in conjunction with mg_start_domain (for multiple certificates) it's impossible in the callback to determine which SSL_CTX is being configured.  Seeing as the AUTHENTICATION_DOMAIN is a required config then I've used this value (server_domain) to pass through to the init_ssl callback.,"I was worried about breaking compatibility.  I did look at getting a different 'init_ssl' called (something like 'init_ssl_domain') but this ended up being a bit messy, however I can carry on looking into this if it helps with compatibility.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,814,2019-12-17T13:25:57Z,2019-12-21T09:44:25Z,2019-12-21T09:45:27Z,MERGED,True,9,6,4,https://github.com/drew-wells,Added server_domain parameter to init_ssl callback,2,[],https://github.com/civetweb/civetweb/pull/814,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/814#issuecomment-568167813,When using the init_ssl callback in conjunction with mg_start_domain (for multiple certificates) it's impossible in the callback to determine which SSL_CTX is being configured.  Seeing as the AUTHENTICATION_DOMAIN is a required config then I've used this value (server_domain) to pass through to the init_ssl callback.,Solved with #815,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,815,2019-12-19T09:59:16Z,2019-12-21T09:44:23Z,2019-12-21T09:44:41Z,MERGED,True,90,15,4,https://github.com/drew-wells,Init ssl domain,4,[],https://github.com/civetweb/civetweb/pull/815,https://github.com/drew-wells,1,https://github.com/civetweb/civetweb/pull/815,"Because of the mentioned compatibility problems with the init_ssl callback, I've created a branch which adds another callback called init_ssl_domain, this is passed the server_domain as the first parameters and is called after init_ssl (as long as init_ssl returns 0).  init_ssl remains as it was.","Because of the mentioned compatibility problems with the init_ssl callback, I've created a branch which adds another callback called init_ssl_domain, this is passed the server_domain as the first parameters and is called after init_ssl (as long as init_ssl returns 0).  init_ssl remains as it was.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,815,2019-12-19T09:59:16Z,2019-12-21T09:44:23Z,2019-12-21T09:44:41Z,MERGED,True,90,15,4,https://github.com/drew-wells,Init ssl domain,4,[],https://github.com/civetweb/civetweb/pull/815,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/815#issuecomment-567430918,"Because of the mentioned compatibility problems with the init_ssl callback, I've created a branch which adds another callback called init_ssl_domain, this is passed the server_domain as the first parameters and is called after init_ssl (as long as init_ssl returns 0).  init_ssl remains as it was.","Codecov Report

Merging #815 into master will decrease coverage by 0.02%.
The diff coverage is 50%.


@@            Coverage Diff             @@
##           master     #815      +/-   ##
==========================================
- Coverage   77.12%   77.09%   -0.03%     
==========================================
  Files          13       13              
  Lines        9795     9803       +8     
==========================================
+ Hits         7554     7558       +4     
- Misses       2241     2245       +4



Impacted Files
Coverage Δ





src/civetweb.c
68.66% <50%> (-0.03%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 6423fae...b0dfc92. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,815,2019-12-19T09:59:16Z,2019-12-21T09:44:23Z,2019-12-21T09:44:41Z,MERGED,True,90,15,4,https://github.com/drew-wells,Init ssl domain,4,[],https://github.com/civetweb/civetweb/pull/815,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/815#issuecomment-568167747,"Because of the mentioned compatibility problems with the init_ssl callback, I've created a branch which adds another callback called init_ssl_domain, this is passed the server_domain as the first parameters and is called after init_ssl (as long as init_ssl returns 0).  init_ssl remains as it was.","Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,823,2020-01-13T10:27:17Z,2020-01-19T09:55:23Z,2020-01-19T09:57:16Z,MERGED,True,2,2,1,https://github.com/lmartanovic,Fix hostname resolution in parse_port_string() (issue #822),1,[],https://github.com/civetweb/civetweb/pull/823,https://github.com/lmartanovic,1,https://github.com/civetweb/civetweb/pull/823,"I am not sure how to construct the unit test for it to make it independent of the testing machine.
I think I'd either need to mock the getaddrinfo() response, have some control of /etc/hosts (or equivalent on WIN), or something completely different.
I'd appreciate any advice in this regard.","I am not sure how to construct the unit test for it to make it independent of the testing machine.
I think I'd either need to mock the getaddrinfo() response, have some control of /etc/hosts (or equivalent on WIN), or something completely different.
I'd appreciate any advice in this regard.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,823,2020-01-13T10:27:17Z,2020-01-19T09:55:23Z,2020-01-19T09:57:16Z,MERGED,True,2,2,1,https://github.com/lmartanovic,Fix hostname resolution in parse_port_string() (issue #822),1,[],https://github.com/civetweb/civetweb/pull/823,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/823#issuecomment-573607060,"I am not sure how to construct the unit test for it to make it independent of the testing machine.
I think I'd either need to mock the getaddrinfo() response, have some control of /etc/hosts (or equivalent on WIN), or something completely different.
I'd appreciate any advice in this regard.","Codecov Report

Merging #823 into master will not change coverage.
The diff coverage is 0%.


@@           Coverage Diff           @@
##           master     #823   +/-   ##
=======================================
  Coverage   77.01%   77.01%           
=======================================
  Files          13       13           
  Lines        9957     9957           
=======================================
  Hits         7668     7668           
  Misses       2289     2289



Impacted Files
Coverage Δ





src/civetweb.c
68.76% <0%> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 26e3a33...0a1983a. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,823,2020-01-13T10:27:17Z,2020-01-19T09:55:23Z,2020-01-19T09:57:16Z,MERGED,True,2,2,1,https://github.com/lmartanovic,Fix hostname resolution in parse_port_string() (issue #822),1,[],https://github.com/civetweb/civetweb/pull/823,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/823#issuecomment-575987060,"I am not sure how to construct the unit test for it to make it independent of the testing machine.
I think I'd either need to mock the getaddrinfo() response, have some control of /etc/hosts (or equivalent on WIN), or something completely different.
I'd appreciate any advice in this regard.","Thanks for your contribution, just merged the code.

I am not sure how to construct the unit test

All unit existing unit tests work ... but they worked as well with the code before, so if you just give me an example that did not work before and works now, I can do the unittest in some minutes.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,824,2020-01-14T13:52:06Z,2020-01-19T10:15:00Z,2020-01-19T10:15:00Z,MERGED,True,1,1,1,https://github.com/PiotrZierhoffer,Fix typo in docs/Building.md,1,[],https://github.com/civetweb/civetweb/pull/824,https://github.com/PiotrZierhoffer,1,https://github.com/civetweb/civetweb/pull/824,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,824,2020-01-14T13:52:06Z,2020-01-19T10:15:00Z,2020-01-19T10:15:00Z,MERGED,True,1,1,1,https://github.com/PiotrZierhoffer,Fix typo in docs/Building.md,1,[],https://github.com/civetweb/civetweb/pull/824,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/824#issuecomment-574195402,,"Codecov Report

Merging #824 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #824   +/-   ##
=======================================
  Coverage   77.01%   77.01%           
=======================================
  Files          13       13           
  Lines        9957     9957           
=======================================
  Hits         7668     7668           
  Misses       2289     2289

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 26e3a33...3a191cb. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,829,2020-01-24T11:27:47Z,2020-01-25T15:47:47Z,2020-01-25T15:48:29Z,MERGED,True,46,1,1,https://github.com/jenik1,* Fix issue 828: Make sure the thread specific storage is available d…,3,[],https://github.com/civetweb/civetweb/pull/829,https://github.com/jenik1,1,https://github.com/civetweb/civetweb/pull/829,"…uring mg_set_handler_type() call.
It is used in cases when hook deletion is made during an active HTTP request.
In such situations the thread which tries to delete the hook is put to sleep and it's TLS structure is used to maintain the wait queue during the sleep (next_waiting_thread field of mg_workerTLS structure)","…uring mg_set_handler_type() call.
It is used in cases when hook deletion is made during an active HTTP request.
In such situations the thread which tries to delete the hook is put to sleep and it's TLS structure is used to maintain the wait queue during the sleep (next_waiting_thread field of mg_workerTLS structure)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,829,2020-01-24T11:27:47Z,2020-01-25T15:47:47Z,2020-01-25T15:48:29Z,MERGED,True,46,1,1,https://github.com/jenik1,* Fix issue 828: Make sure the thread specific storage is available d…,3,[],https://github.com/civetweb/civetweb/pull/829,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/829#issuecomment-578101457,"…uring mg_set_handler_type() call.
It is used in cases when hook deletion is made during an active HTTP request.
In such situations the thread which tries to delete the hook is put to sleep and it's TLS structure is used to maintain the wait queue during the sleep (next_waiting_thread field of mg_workerTLS structure)","Codecov Report

Merging #829 into master will decrease coverage by 0.03%.
The diff coverage is 63.63%.


@@            Coverage Diff             @@
##           master     #829      +/-   ##
==========================================
- Coverage   77.02%   76.98%   -0.04%     
==========================================
  Files          13       13              
  Lines        9957     9978      +21     
==========================================
+ Hits         7669     7682      +13     
- Misses       2288     2296       +8



Impacted Files
Coverage Δ





src/civetweb.c
68.76% <63.63%> (-0.03%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update adf5495...7b32812. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,829,2020-01-24T11:27:47Z,2020-01-25T15:47:47Z,2020-01-25T15:48:29Z,MERGED,True,46,1,1,https://github.com/jenik1,* Fix issue 828: Make sure the thread specific storage is available d…,3,[],https://github.com/civetweb/civetweb/pull/829,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/829#issuecomment-578391177,"…uring mg_set_handler_type() call.
It is used in cases when hook deletion is made during an active HTTP request.
In such situations the thread which tries to delete the hook is put to sleep and it's TLS structure is used to maintain the wait queue during the sleep (next_waiting_thread field of mg_workerTLS structure)","I had a look on your changed.
If you set the TLS of every thread calling mg_set_request_handler, you will overwrite any TLS it already has --> it will no longer be possible to call mg_set_request_handler from a CivetWeb thread.
From what I know, some users register/unregister handlers when creating/deleting ressources in REST PUT/DELETE calls (I personally keep all handlers registered and decide in the handler if something is ""Not Found""/""Gone"", but I would not consider the other design choice as incorrect).
Probably one has to check if there is already a TLS struct (thread is known). Mabe it would also be easier to add one wrapper function around mg_set_handler_type (split into mg_set_handler_type and mg_set_handler_type_impl) instead of adding something like if (we_registered_the_TLS) {pthread_setspecific(sTlsKey, NULL);} at every return.",True,{'THUMBS_UP': ['https://github.com/jenik1']}
civetweb/civetweb,https://github.com/civetweb/civetweb,829,2020-01-24T11:27:47Z,2020-01-25T15:47:47Z,2020-01-25T15:48:29Z,MERGED,True,46,1,1,https://github.com/jenik1,* Fix issue 828: Make sure the thread specific storage is available d…,3,[],https://github.com/civetweb/civetweb/pull/829,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/829#issuecomment-578416988,"…uring mg_set_handler_type() call.
It is used in cases when hook deletion is made during an active HTTP request.
In such situations the thread which tries to delete the hook is put to sleep and it's TLS structure is used to maintain the wait queue during the sleep (next_waiting_thread field of mg_workerTLS structure)","Thanks for your contribution.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,835,2020-02-05T03:11:01Z,2020-02-07T07:39:44Z,2020-02-07T07:39:58Z,MERGED,True,14,6,1,https://github.com/ika-musuko,Use new .dll names on Windows x64 for OpenSSL 1.1.x,1,[],https://github.com/civetweb/civetweb/pull/835,https://github.com/ika-musuko,1,https://github.com/civetweb/civetweb/pull/835,"Hi, I ran into an issue while using civetweb on Windows to host a server over https and the issue ended up being that civetweb was looking for the old OpenSSL (<=1.1.0) dlls. So I cloned civetweb and applied the following changes and recompiled with the OPENSSL_API_1_1 flag and it seemed to fix my problem. I thought it might be useful for others so I decided to make this pull request.
Please let me know if there are any changes I should make or potential concerns with it. Thank you.
Original commit message:
In OpenSSL 1.1.x, the following .dlls have new names:
    libeay64.dll -> libcrypto-1_1-x64.dll
    ssleay64.dll -> libssl-1_1-x64.dll

While work was done in https://github.com/civetweb/civetweb/issues/370
(commit 0733fae) to have civetweb use OpenSSL 1.1.x's new API, the
Windows .dll names were not changed. This causes civetweb to throw an
error since it can't find libeay or ssleay. A workaround would be to
copy the new dlls and rename them as the old .dlls. With this commit,
such a workaround is no longer necessary if civetweb is build with the
OPENSSL_API_1_1 flag.

See https://mta.openssl.org/pipermail/openssl-users/2017-June/005977.html
for more details about the relevant OpenSSL change.","Hi, I ran into an issue while using civetweb on Windows to host a server over https and the issue ended up being that civetweb was looking for the old OpenSSL (<=1.1.0) dlls. So I cloned civetweb and applied the following changes and recompiled with the OPENSSL_API_1_1 flag and it seemed to fix my problem. I thought it might be useful for others so I decided to make this pull request.
Please let me know if there are any changes I should make or potential concerns with it. Thank you.
Original commit message:
In OpenSSL 1.1.x, the following .dlls have new names:
    libeay64.dll -> libcrypto-1_1-x64.dll
    ssleay64.dll -> libssl-1_1-x64.dll

While work was done in https://github.com/civetweb/civetweb/issues/370
(commit 0733fae) to have civetweb use OpenSSL 1.1.x's new API, the
Windows .dll names were not changed. This causes civetweb to throw an
error since it can't find libeay or ssleay. A workaround would be to
copy the new dlls and rename them as the old .dlls. With this commit,
such a workaround is no longer necessary if civetweb is build with the
OPENSSL_API_1_1 flag.

See https://mta.openssl.org/pipermail/openssl-users/2017-June/005977.html
for more details about the relevant OpenSSL change.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,835,2020-02-05T03:11:01Z,2020-02-07T07:39:44Z,2020-02-07T07:39:58Z,MERGED,True,14,6,1,https://github.com/ika-musuko,Use new .dll names on Windows x64 for OpenSSL 1.1.x,1,[],https://github.com/civetweb/civetweb/pull/835,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/835#issuecomment-582226805,"Hi, I ran into an issue while using civetweb on Windows to host a server over https and the issue ended up being that civetweb was looking for the old OpenSSL (<=1.1.0) dlls. So I cloned civetweb and applied the following changes and recompiled with the OPENSSL_API_1_1 flag and it seemed to fix my problem. I thought it might be useful for others so I decided to make this pull request.
Please let me know if there are any changes I should make or potential concerns with it. Thank you.
Original commit message:
In OpenSSL 1.1.x, the following .dlls have new names:
    libeay64.dll -> libcrypto-1_1-x64.dll
    ssleay64.dll -> libssl-1_1-x64.dll

While work was done in https://github.com/civetweb/civetweb/issues/370
(commit 0733fae) to have civetweb use OpenSSL 1.1.x's new API, the
Windows .dll names were not changed. This causes civetweb to throw an
error since it can't find libeay or ssleay. A workaround would be to
copy the new dlls and rename them as the old .dlls. With this commit,
such a workaround is no longer necessary if civetweb is build with the
OPENSSL_API_1_1 flag.

See https://mta.openssl.org/pipermail/openssl-users/2017-June/005977.html
for more details about the relevant OpenSSL change.","Codecov Report

Merging #835 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #835      +/-   ##
==========================================
- Coverage   76.97%   76.96%   -0.02%     
==========================================
  Files          13       13              
  Lines        9981     9981              
==========================================
- Hits         7683     7682       -1     
- Misses       2298     2299       +1



Impacted Files
Coverage Δ





src/civetweb.c
68.76% <ø> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update db6c594...448c69d. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,835,2020-02-05T03:11:01Z,2020-02-07T07:39:44Z,2020-02-07T07:39:58Z,MERGED,True,14,6,1,https://github.com/ika-musuko,Use new .dll names on Windows x64 for OpenSSL 1.1.x,1,[],https://github.com/civetweb/civetweb/pull/835,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/835#issuecomment-583271472,"Hi, I ran into an issue while using civetweb on Windows to host a server over https and the issue ended up being that civetweb was looking for the old OpenSSL (<=1.1.0) dlls. So I cloned civetweb and applied the following changes and recompiled with the OPENSSL_API_1_1 flag and it seemed to fix my problem. I thought it might be useful for others so I decided to make this pull request.
Please let me know if there are any changes I should make or potential concerns with it. Thank you.
Original commit message:
In OpenSSL 1.1.x, the following .dlls have new names:
    libeay64.dll -> libcrypto-1_1-x64.dll
    ssleay64.dll -> libssl-1_1-x64.dll

While work was done in https://github.com/civetweb/civetweb/issues/370
(commit 0733fae) to have civetweb use OpenSSL 1.1.x's new API, the
Windows .dll names were not changed. This causes civetweb to throw an
error since it can't find libeay or ssleay. A workaround would be to
copy the new dlls and rename them as the old .dlls. With this commit,
such a workaround is no longer necessary if civetweb is build with the
OPENSSL_API_1_1 flag.

See https://mta.openssl.org/pipermail/openssl-users/2017-June/005977.html
for more details about the relevant OpenSSL change.","Thanks for your contribution.
Merged.",True,{'THUMBS_UP': ['https://github.com/ika-musuko']}
civetweb/civetweb,https://github.com/civetweb/civetweb,841,2020-02-28T04:09:22Z,2020-02-28T21:39:40Z,2020-02-28T21:40:01Z,MERGED,True,13,0,1,https://github.com/LilyWangL,Add vcpkg installation instructions,1,[],https://github.com/civetweb/civetweb/pull/841,https://github.com/LilyWangL,1,https://github.com/civetweb/civetweb/pull/841,"Civetweb is available as a port in vcpkg, a C++ library manager that simplifies installation for civetweb and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build civetweb, ready to be included in their projects.
We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.","Civetweb is available as a port in vcpkg, a C++ library manager that simplifies installation for civetweb and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build civetweb, ready to be included in their projects.
We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,841,2020-02-28T04:09:22Z,2020-02-28T21:39:40Z,2020-02-28T21:40:01Z,MERGED,True,13,0,1,https://github.com/LilyWangL,Add vcpkg installation instructions,1,[],https://github.com/civetweb/civetweb/pull/841,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/841#issuecomment-592309492,"Civetweb is available as a port in vcpkg, a C++ library manager that simplifies installation for civetweb and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build civetweb, ready to be included in their projects.
We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.","Codecov Report

Merging #841 into master will increase coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #841      +/-   ##
==========================================
+ Coverage   77.08%   77.09%   +0.01%     
==========================================
  Files          13       13              
  Lines        9988     9988              
==========================================
+ Hits         7699     7700       +1     
+ Misses       2289     2288       -1     



Impacted Files
Coverage Δ





src/civetweb.c
68.98% <0.00%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 09e29b2...9a4d542. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,841,2020-02-28T04:09:22Z,2020-02-28T21:39:40Z,2020-02-28T21:40:01Z,MERGED,True,13,0,1,https://github.com/LilyWangL,Add vcpkg installation instructions,1,[],https://github.com/civetweb/civetweb/pull/841,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/841#issuecomment-592741424,"Civetweb is available as a port in vcpkg, a C++ library manager that simplifies installation for civetweb and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build civetweb, ready to be included in their projects.
We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.
I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.",Thank you for your contribution.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,842,2020-02-29T09:33:26Z,2020-03-01T10:36:29Z,2020-03-01T10:36:29Z,MERGED,True,6,2,1,https://github.com/helloray,No need to call discard_unread_request_data when conn->must_close is true,1,[],https://github.com/civetweb/civetweb/pull/842,https://github.com/helloray,1,https://github.com/civetweb/civetweb/pull/842,See #840,See #840,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,842,2020-02-29T09:33:26Z,2020-03-01T10:36:29Z,2020-03-01T10:36:29Z,MERGED,True,6,2,1,https://github.com/helloray,No need to call discard_unread_request_data when conn->must_close is true,1,[],https://github.com/civetweb/civetweb/pull/842,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/842#issuecomment-592928165,See #840,"Codecov Report

Merging #842 into master will increase coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #842      +/-   ##
==========================================
+ Coverage   77.08%   77.09%   +0.01%     
==========================================
  Files          13       13              
  Lines        9988     9990       +2     
==========================================
+ Hits         7699     7702       +3     
+ Misses       2289     2288       -1     



Impacted Files
Coverage Δ





src/civetweb.c
68.99% <0.00%> (+0.02%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 09e29b2...b4f84c1. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,844,2020-03-02T08:19:13Z,2020-03-02T10:44:22Z,2020-03-02T11:21:44Z,MERGED,True,12,0,1,https://github.com/gou4shi1,Support BoringSSL,1,[],https://github.com/civetweb/civetweb/pull/844,https://github.com/gou4shi1,1,https://github.com/civetweb/civetweb/pull/844,#843,#843,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,844,2020-03-02T08:19:13Z,2020-03-02T10:44:22Z,2020-03-02T11:21:44Z,MERGED,True,12,0,1,https://github.com/gou4shi1,Support BoringSSL,1,[],https://github.com/civetweb/civetweb/pull/844,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/844#issuecomment-593289548,#843,"Codecov Report

Merging #844 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #844      +/-   ##
==========================================
- Coverage   77.09%   77.08%   -0.02%     
==========================================
  Files          13       13              
  Lines        9990     9990              
==========================================
- Hits         7702     7701       -1     
- Misses       2288     2289       +1



Impacted Files
Coverage Δ





src/civetweb.c
68.97% <ø> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 5eb5f15...ec1f0b1. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,846,2020-03-05T17:11:40Z,2020-03-06T07:59:09Z,2020-03-06T07:59:09Z,MERGED,True,3,0,1,https://github.com/gou4shi1,Support BoringSSL: disable CONF_modules_unload() and ENGINE_cleanup(),2,[],https://github.com/civetweb/civetweb/pull/846,https://github.com/gou4shi1,1,https://github.com/civetweb/civetweb/pull/846,#843,#843,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,846,2020-03-05T17:11:40Z,2020-03-06T07:59:09Z,2020-03-06T07:59:09Z,MERGED,True,3,0,1,https://github.com/gou4shi1,Support BoringSSL: disable CONF_modules_unload() and ENGINE_cleanup(),2,[],https://github.com/civetweb/civetweb/pull/846,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/846#issuecomment-595588545,#843,"Codecov Report

Merging #846 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #846   +/-   ##
=======================================
  Coverage   77.08%   77.08%           
=======================================
  Files          13       13           
  Lines        9990     9990           
=======================================
  Hits         7701     7701           
  Misses       2289     2289



Impacted Files
Coverage Δ





src/civetweb.c
68.97% <ø> (ø)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update ec1f0b1...06797d2. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,848,2020-03-09T18:53:03Z,2020-03-11T21:17:02Z,2020-03-11T21:17:03Z,CLOSED,False,31,24,4,https://github.com/mulle-nat,"use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC, still d…",2,[],https://github.com/civetweb/civetweb/pull/848,https://github.com/mulle-nat,1,https://github.com/civetweb/civetweb/pull/848,"…efaults to stdout though
In my test cases, I need to use stdout for something else. Yet I would like to have DEBUG_TRACE_FUNC on at the same time. My solution I set DEBUG_TRACE_STREAM to stderr. This patch enables this.","…efaults to stdout though
In my test cases, I need to use stdout for something else. Yet I would like to have DEBUG_TRACE_FUNC on at the same time. My solution I set DEBUG_TRACE_STREAM to stderr. This patch enables this.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,848,2020-03-09T18:53:03Z,2020-03-11T21:17:02Z,2020-03-11T21:17:03Z,CLOSED,False,31,24,4,https://github.com/mulle-nat,"use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC, still d…",2,[],https://github.com/civetweb/civetweb/pull/848,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/848#issuecomment-596743789,"…efaults to stdout though
In my test cases, I need to use stdout for something else. Yet I would like to have DEBUG_TRACE_FUNC on at the same time. My solution I set DEBUG_TRACE_STREAM to stderr. This patch enables this.","Codecov Report

Merging #848 into master will increase coverage by <.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #848      +/-   ##
==========================================
+ Coverage   77.08%   77.08%   +<.01%     
==========================================
  Files          13       13              
  Lines        9988     9990       +2     
==========================================
+ Hits         7699     7701       +2     
  Misses       2289     2289



Impacted Files
Coverage Δ





src/civetweb.c
68.97% <ø> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 09e29b2...a12ad14. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,848,2020-03-09T18:53:03Z,2020-03-11T21:17:02Z,2020-03-11T21:17:03Z,CLOSED,False,31,24,4,https://github.com/mulle-nat,"use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC, still d…",2,[],https://github.com/civetweb/civetweb/pull/848,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/848#issuecomment-597462448,"…efaults to stdout though
In my test cases, I need to use stdout for something else. Yet I would like to have DEBUG_TRACE_FUNC on at the same time. My solution I set DEBUG_TRACE_STREAM to stderr. This patch enables this.","The patch to use DEBUG_TRACE_STREAM is uncritical and can be merged.
However, this PR also contains a commit that changes a public interface and breaks all unit tests:
https://travis-ci.org/civetweb/civetweb/jobs/660318851#L1417",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,848,2020-03-09T18:53:03Z,2020-03-11T21:17:02Z,2020-03-11T21:17:03Z,CLOSED,False,31,24,4,https://github.com/mulle-nat,"use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC, still d…",2,[],https://github.com/civetweb/civetweb/pull/848,https://github.com/mulle-nat,4,https://github.com/civetweb/civetweb/pull/848#issuecomment-597617441,"…efaults to stdout though
In my test cases, I need to use stdout for something else. Yet I would like to have DEBUG_TRACE_FUNC on at the same time. My solution I set DEBUG_TRACE_STREAM to stderr. This patch enables this.","Sorry about that, I messed that up apparently. I only intended the DEBUG_TRACE_STREAM commit to appear in this pull request.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,848,2020-03-09T18:53:03Z,2020-03-11T21:17:02Z,2020-03-11T21:17:03Z,CLOSED,False,31,24,4,https://github.com/mulle-nat,"use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC, still d…",2,[],https://github.com/civetweb/civetweb/pull/848,https://github.com/mulle-nat,5,https://github.com/civetweb/civetweb/pull/848#issuecomment-597882739,"…efaults to stdout though
In my test cases, I need to use stdout for something else. Yet I would like to have DEBUG_TRACE_FUNC on at the same time. My solution I set DEBUG_TRACE_STREAM to stderr. This patch enables this.",Killing this,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,850,2020-03-11T21:24:26Z,2020-03-14T18:18:31Z,2020-03-14T18:19:48Z,MERGED,True,9,6,1,https://github.com/mulle-nat,use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC,1,[],https://github.com/civetweb/civetweb/pull/850,https://github.com/mulle-nat,1,https://github.com/civetweb/civetweb/pull/850,"It still defaults to stdout though.
Here is a proper pull request. I think my mistake was last time, that I commited to master after having created the pull request. So this time it's from its own branch.","It still defaults to stdout though.
Here is a proper pull request. I think my mistake was last time, that I commited to master after having created the pull request. So this time it's from its own branch.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,850,2020-03-11T21:24:26Z,2020-03-14T18:18:31Z,2020-03-14T18:19:48Z,MERGED,True,9,6,1,https://github.com/mulle-nat,use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC,1,[],https://github.com/civetweb/civetweb/pull/850,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/850#issuecomment-599104236,"It still defaults to stdout though.
Here is a proper pull request. I think my mistake was last time, that I commited to master after having created the pull request. So this time it's from its own branch.","This PR still fails in an MacOS unit test:
https://travis-ci.org/github/civetweb/civetweb/jobs/661272790#L803
/Users/travis/build/civetweb/civetweb/unittest/public_server.c:243:F:TLS Server Client:test_mg_server_and_client_tls:0: Assertion 'client_err != """"' failed: client_err == """", """" == """"


  
    
      civetweb/unittest/public_server.c
    
    
        Lines 237 to 243
      in
      db7394b
    
  
  
    

        
          
           static int 
        

        
          
           log_msg_func(const struct mg_connection *conn, const char *message) 
        

        
          
           { 
        

        
          
           	struct mg_context *ctx; 
        

        
          
           	char *ud; 
        

        
          
            
        

        
          
           	ck_assert(conn != NULL); 
        
    
  


Unfortunately, this is rather hard to debug - it only happens at MacOS in one particular branch, and it's not clear from where this function is called.
But it seems, this is a problem in ""master"" as well ... or maybe it is not related to CivetWeb at all, but to a change in the Travis CI environment (wouldn't be the first time this introduces a hard to find build failure) ... It will take some time to analyze this.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,850,2020-03-11T21:24:26Z,2020-03-14T18:18:31Z,2020-03-14T18:19:48Z,MERGED,True,9,6,1,https://github.com/mulle-nat,use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC,1,[],https://github.com/civetweb/civetweb/pull/850,https://github.com/mulle-nat,3,https://github.com/civetweb/civetweb/pull/850#issuecomment-599106162,"It still defaults to stdout though.
Here is a proper pull request. I think my mistake was last time, that I commited to master after having created the pull request. So this time it's from its own branch.","I have no experience with these tests unfortunately. It looks to me, from the error message, that the problem is in ck_assert itself though. There is no client_err visible at that point in public_server.c.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,850,2020-03-11T21:24:26Z,2020-03-14T18:18:31Z,2020-03-14T18:19:48Z,MERGED,True,9,6,1,https://github.com/mulle-nat,use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC,1,[],https://github.com/civetweb/civetweb/pull/850,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/850#issuecomment-599114800,"It still defaults to stdout though.
Here is a proper pull request. I think my mistake was last time, that I commited to master after having created the pull request. So this time it's from its own branch.","The problem in the build seems to be not related to this PR, but some strange ""Apple OpenSSL only"" issue.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,850,2020-03-11T21:24:26Z,2020-03-14T18:18:31Z,2020-03-14T18:19:48Z,MERGED,True,9,6,1,https://github.com/mulle-nat,use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC,1,[],https://github.com/civetweb/civetweb/pull/850,https://github.com/mulle-nat,5,https://github.com/civetweb/civetweb/pull/850#issuecomment-599114812,"It still defaults to stdout though.
Here is a proper pull request. I think my mistake was last time, that I commited to master after having created the pull request. So this time it's from its own branch.",Thanks,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,850,2020-03-11T21:24:26Z,2020-03-14T18:18:31Z,2020-03-14T18:19:48Z,MERGED,True,9,6,1,https://github.com/mulle-nat,use DEBUG_TRACE_STREAM instead of stdout in DEBUG_TRACE_FUNC,1,[],https://github.com/civetweb/civetweb/pull/850,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/850#issuecomment-599114851,"It still defaults to stdout though.
Here is a proper pull request. I think my mistake was last time, that I commited to master after having created the pull request. So this time it's from its own branch.",Thanks for your contribution.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,855,2020-03-26T03:31:50Z,2020-03-28T18:23:35Z,2020-03-28T18:23:50Z,MERGED,True,1,1,1,https://github.com/5tefan,Fix cmake when CMAKE_SIZEOF_VOID_P udnefined,1,[],https://github.com/civetweb/civetweb/pull/855,https://github.com/5tefan,1,https://github.com/civetweb/civetweb/pull/855,"The cmake build emits errors similar to here: [1] when
the CMAKE_SIZEOF_VOID_P variable is not defined. Not sure
why it's not defined in some cases, but this is an easy fix.
CMake Error at CMakeLists.txt:77 (if):

    if given arguments:

    [...........]

Unknown arguments specified

[1] https://stackoverflow.com/a/39733128","The cmake build emits errors similar to here: [1] when
the CMAKE_SIZEOF_VOID_P variable is not defined. Not sure
why it's not defined in some cases, but this is an easy fix.
CMake Error at CMakeLists.txt:77 (if):

    if given arguments:

    [...........]

Unknown arguments specified

[1] https://stackoverflow.com/a/39733128",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,855,2020-03-26T03:31:50Z,2020-03-28T18:23:35Z,2020-03-28T18:23:50Z,MERGED,True,1,1,1,https://github.com/5tefan,Fix cmake when CMAKE_SIZEOF_VOID_P udnefined,1,[],https://github.com/civetweb/civetweb/pull/855,https://github.com/5tefan,2,https://github.com/civetweb/civetweb/pull/855#issuecomment-604209275,"The cmake build emits errors similar to here: [1] when
the CMAKE_SIZEOF_VOID_P variable is not defined. Not sure
why it's not defined in some cases, but this is an easy fix.
CMake Error at CMakeLists.txt:77 (if):

    if given arguments:

    [...........]

Unknown arguments specified

[1] https://stackoverflow.com/a/39733128",Thanks also to @EricEKim and @smmauck for finding this!,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,855,2020-03-26T03:31:50Z,2020-03-28T18:23:35Z,2020-03-28T18:23:50Z,MERGED,True,1,1,1,https://github.com/5tefan,Fix cmake when CMAKE_SIZEOF_VOID_P udnefined,1,[],https://github.com/civetweb/civetweb/pull/855,https://github.com/apps/codecov,3,https://github.com/civetweb/civetweb/pull/855#issuecomment-604211750,"The cmake build emits errors similar to here: [1] when
the CMAKE_SIZEOF_VOID_P variable is not defined. Not sure
why it's not defined in some cases, but this is an easy fix.
CMake Error at CMakeLists.txt:77 (if):

    if given arguments:

    [...........]

Unknown arguments specified

[1] https://stackoverflow.com/a/39733128","Codecov Report

Merging #855 into master will decrease coverage by 0.01%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #855      +/-   ##
==========================================
- Coverage    77.1%   77.09%   -0.02%     
==========================================
  Files          13       13              
  Lines        9991     9991              
==========================================
- Hits         7704     7703       -1     
- Misses       2287     2288       +1



Impacted Files
Coverage Δ





src/civetweb.c
68.99% <0%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 1beb379...bdcc562. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,855,2020-03-26T03:31:50Z,2020-03-28T18:23:35Z,2020-03-28T18:23:50Z,MERGED,True,1,1,1,https://github.com/5tefan,Fix cmake when CMAKE_SIZEOF_VOID_P udnefined,1,[],https://github.com/civetweb/civetweb/pull/855,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/855#issuecomment-605499783,"The cmake build emits errors similar to here: [1] when
the CMAKE_SIZEOF_VOID_P variable is not defined. Not sure
why it's not defined in some cases, but this is an easy fix.
CMake Error at CMakeLists.txt:77 (if):

    if given arguments:

    [...........]

Unknown arguments specified

[1] https://stackoverflow.com/a/39733128","thanks for your contribution
merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,860,2020-04-16T14:36:09Z,2020-04-16T19:57:25Z,2020-04-16T20:20:02Z,MERGED,True,3,3,1,https://github.com/vaind,Start master_thread after worker threads to avoid data race on worker_threadids,1,[],https://github.com/civetweb/civetweb/pull/860,https://github.com/vaind,1,https://github.com/civetweb/civetweb/pull/860,"See the following TSAN report
WARNING: ThreadSanitizer: data race (pid=745240)
  Read of size 8 at 0x7b08000006d8 by thread T1:
    #0 master_thread_run civetweb/src/civetweb.c:18665:7 (objectbox-http-server-test+0x2781ec)
    #1 master_thread civetweb/src/civetweb.c:18725:2 (objectbox-http-server-test+0x2781ec)

  Previous write of size 8 at 0x7b08000006d8 by main thread:
    #0 mg_start_thread_with_id civetweb/src/civetweb.c:6052:16 (objectbox-http-server-test+0x26ea67)
    #1 mg_start2 civetweb/src/civetweb.c:19488:7 (objectbox-http-server-test+0x26ea67)
    #2 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26ea67)
    #3 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

  Location is heap block of size 32 at 0x7b08000006c0 allocated by main thread:
    #0 calloc <null> (objectbox-http-server-test+0x7b468)
    #1 mg_calloc civetweb/src/civetweb.c:1540:9 (objectbox-http-server-test+0x26e864)
    #2 mg_start2 civetweb/src/civetweb.c:19336:39 (objectbox-http-server-test+0x26e864)
    #3 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26e864)
    #4 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

  Thread T1 'civetweb-master' (tid=745245, running) created by main thread at:
    #0 pthread_create <null> (objectbox-http-server-test+0xb07ce)
    #1 mg_start_thread_with_id civetweb/src/civetweb.c:6049:11 (objectbox-http-server-test+0x26e920)
    #2 mg_start2 civetweb/src/civetweb.c:19482:2 (objectbox-http-server-test+0x26e920)
    #3 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26e920)
    #4 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

SUMMARY: ThreadSanitizer: data race civetweb/src/civetweb.c:18665:7 in master_thread_run","See the following TSAN report
WARNING: ThreadSanitizer: data race (pid=745240)
  Read of size 8 at 0x7b08000006d8 by thread T1:
    #0 master_thread_run civetweb/src/civetweb.c:18665:7 (objectbox-http-server-test+0x2781ec)
    #1 master_thread civetweb/src/civetweb.c:18725:2 (objectbox-http-server-test+0x2781ec)

  Previous write of size 8 at 0x7b08000006d8 by main thread:
    #0 mg_start_thread_with_id civetweb/src/civetweb.c:6052:16 (objectbox-http-server-test+0x26ea67)
    #1 mg_start2 civetweb/src/civetweb.c:19488:7 (objectbox-http-server-test+0x26ea67)
    #2 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26ea67)
    #3 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

  Location is heap block of size 32 at 0x7b08000006c0 allocated by main thread:
    #0 calloc <null> (objectbox-http-server-test+0x7b468)
    #1 mg_calloc civetweb/src/civetweb.c:1540:9 (objectbox-http-server-test+0x26e864)
    #2 mg_start2 civetweb/src/civetweb.c:19336:39 (objectbox-http-server-test+0x26e864)
    #3 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26e864)
    #4 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

  Thread T1 'civetweb-master' (tid=745245, running) created by main thread at:
    #0 pthread_create <null> (objectbox-http-server-test+0xb07ce)
    #1 mg_start_thread_with_id civetweb/src/civetweb.c:6049:11 (objectbox-http-server-test+0x26e920)
    #2 mg_start2 civetweb/src/civetweb.c:19482:2 (objectbox-http-server-test+0x26e920)
    #3 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26e920)
    #4 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

SUMMARY: ThreadSanitizer: data race civetweb/src/civetweb.c:18665:7 in master_thread_run",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,860,2020-04-16T14:36:09Z,2020-04-16T19:57:25Z,2020-04-16T20:20:02Z,MERGED,True,3,3,1,https://github.com/vaind,Start master_thread after worker threads to avoid data race on worker_threadids,1,[],https://github.com/civetweb/civetweb/pull/860,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/860#issuecomment-614700626,"See the following TSAN report
WARNING: ThreadSanitizer: data race (pid=745240)
  Read of size 8 at 0x7b08000006d8 by thread T1:
    #0 master_thread_run civetweb/src/civetweb.c:18665:7 (objectbox-http-server-test+0x2781ec)
    #1 master_thread civetweb/src/civetweb.c:18725:2 (objectbox-http-server-test+0x2781ec)

  Previous write of size 8 at 0x7b08000006d8 by main thread:
    #0 mg_start_thread_with_id civetweb/src/civetweb.c:6052:16 (objectbox-http-server-test+0x26ea67)
    #1 mg_start2 civetweb/src/civetweb.c:19488:7 (objectbox-http-server-test+0x26ea67)
    #2 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26ea67)
    #3 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

  Location is heap block of size 32 at 0x7b08000006c0 allocated by main thread:
    #0 calloc <null> (objectbox-http-server-test+0x7b468)
    #1 mg_calloc civetweb/src/civetweb.c:1540:9 (objectbox-http-server-test+0x26e864)
    #2 mg_start2 civetweb/src/civetweb.c:19336:39 (objectbox-http-server-test+0x26e864)
    #3 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26e864)
    #4 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

  Thread T1 'civetweb-master' (tid=745245, running) created by main thread at:
    #0 pthread_create <null> (objectbox-http-server-test+0xb07ce)
    #1 mg_start_thread_with_id civetweb/src/civetweb.c:6049:11 (objectbox-http-server-test+0x26e920)
    #2 mg_start2 civetweb/src/civetweb.c:19482:2 (objectbox-http-server-test+0x26e920)
    #3 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26e920)
    #4 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

SUMMARY: ThreadSanitizer: data race civetweb/src/civetweb.c:18665:7 in master_thread_run","Codecov Report

Merging #860 into master will not change coverage.
The diff coverage is 100.00%.


@@           Coverage Diff           @@
##           master     #860   +/-   ##
=======================================
  Coverage   77.09%   77.09%           
=======================================
  Files          13       13           
  Lines       10049    10049           
=======================================
  Hits         7747     7747           
  Misses       2302     2302           



Impacted Files
Coverage Δ





src/civetweb.c
68.91% <100.00%> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 085e10c...f383bae. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,860,2020-04-16T14:36:09Z,2020-04-16T19:57:25Z,2020-04-16T20:20:02Z,MERGED,True,3,3,1,https://github.com/vaind,Start master_thread after worker threads to avoid data race on worker_threadids,1,[],https://github.com/civetweb/civetweb/pull/860,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/860#issuecomment-614873818,"See the following TSAN report
WARNING: ThreadSanitizer: data race (pid=745240)
  Read of size 8 at 0x7b08000006d8 by thread T1:
    #0 master_thread_run civetweb/src/civetweb.c:18665:7 (objectbox-http-server-test+0x2781ec)
    #1 master_thread civetweb/src/civetweb.c:18725:2 (objectbox-http-server-test+0x2781ec)

  Previous write of size 8 at 0x7b08000006d8 by main thread:
    #0 mg_start_thread_with_id civetweb/src/civetweb.c:6052:16 (objectbox-http-server-test+0x26ea67)
    #1 mg_start2 civetweb/src/civetweb.c:19488:7 (objectbox-http-server-test+0x26ea67)
    #2 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26ea67)
    #3 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

  Location is heap block of size 32 at 0x7b08000006c0 allocated by main thread:
    #0 calloc <null> (objectbox-http-server-test+0x7b468)
    #1 mg_calloc civetweb/src/civetweb.c:1540:9 (objectbox-http-server-test+0x26e864)
    #2 mg_start2 civetweb/src/civetweb.c:19336:39 (objectbox-http-server-test+0x26e864)
    #3 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26e864)
    #4 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

  Thread T1 'civetweb-master' (tid=745245, running) created by main thread at:
    #0 pthread_create <null> (objectbox-http-server-test+0xb07ce)
    #1 mg_start_thread_with_id civetweb/src/civetweb.c:6049:11 (objectbox-http-server-test+0x26e920)
    #2 mg_start2 civetweb/src/civetweb.c:19482:2 (objectbox-http-server-test+0x26e920)
    #3 mg_start civetweb/src/civetweb.c:19548:9 (objectbox-http-server-test+0x26e920)
    #4 CivetServer::CivetServer(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, CivetCallbacks const*, void const*) civetweb/src/CivetServer.cpp:321:12 (objectbox-http-server-test+0x2830de)

SUMMARY: ThreadSanitizer: data race civetweb/src/civetweb.c:18665:7 in master_thread_run","From the information above, I cannot really track if there is a problem or not. I would need the exact version (commit number), the compile options used for this test, the operating system (Windows/Linux), ...
Since I an pretty sure that changing the order of these two lines, like in your pull request, does not cause any harm, we can merge this. Still it would be interesting to get some information to understand what ThreadSanitizer found here - if this is a real issue or a false positive.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,863,2020-04-22T21:30:10Z,2020-04-23T08:40:40Z,2020-04-23T08:46:54Z,MERGED,True,1,1,1,https://github.com/gaborcsardi,Need the timegm stub on Solaris,1,[],https://github.com/civetweb/civetweb/pull/863,https://github.com/gaborcsardi,1,https://github.com/civetweb/civetweb/pull/863,This is Solaris 10 and gcc 5.5.50 from opencsw.,This is Solaris 10 and gcc 5.5.50 from opencsw.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,863,2020-04-22T21:30:10Z,2020-04-23T08:40:40Z,2020-04-23T08:46:54Z,MERGED,True,1,1,1,https://github.com/gaborcsardi,Need the timegm stub on Solaris,1,[],https://github.com/civetweb/civetweb/pull/863,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/863#issuecomment-618056263,This is Solaris 10 and gcc 5.5.50 from opencsw.,"Codecov Report

Merging #863 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #863   +/-   ##
=======================================
  Coverage   77.13%   77.13%           
=======================================
  Files          13       13           
  Lines       10196    10196           
=======================================
  Hits         7865     7865           
  Misses       2331     2331           



Impacted Files
Coverage Δ





src/civetweb.c
68.92% <ø> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7cdc0f2...92d3ec6. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,863,2020-04-22T21:30:10Z,2020-04-23T08:40:40Z,2020-04-23T08:46:54Z,MERGED,True,1,1,1,https://github.com/gaborcsardi,Need the timegm stub on Solaris,1,[],https://github.com/civetweb/civetweb/pull/863,https://github.com/gaborcsardi,3,https://github.com/civetweb/civetweb/pull/863#issuecomment-618268665,This is Solaris 10 and gcc 5.5.50 from opencsw.,Thanks for merging!,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,865,2020-04-24T16:44:13Z,2020-04-24T22:59:07Z,2020-04-24T22:59:07Z,MERGED,True,1,0,1,https://github.com/epkugelmass,Update docs to reflect init_thread thread type for websocket,1,[],https://github.com/civetweb/civetweb/pull/865,https://github.com/epkugelmass,1,https://github.com/civetweb/civetweb/pull/865,"https://github.com/civetweb/civetweb/blob/master/src/civetweb.c#L18083
The init_thread callback is passed 3 when the created thread is for websockets,
but the documentation doesn't reflect this.","https://github.com/civetweb/civetweb/blob/master/src/civetweb.c#L18083
The init_thread callback is passed 3 when the created thread is for websockets,
but the documentation doesn't reflect this.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,865,2020-04-24T16:44:13Z,2020-04-24T22:59:07Z,2020-04-24T22:59:07Z,MERGED,True,1,0,1,https://github.com/epkugelmass,Update docs to reflect init_thread thread type for websocket,1,[],https://github.com/civetweb/civetweb/pull/865,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/865#issuecomment-619130295,"https://github.com/civetweb/civetweb/blob/master/src/civetweb.c#L18083
The init_thread callback is passed 3 when the created thread is for websockets,
but the documentation doesn't reflect this.","Codecov Report

Merging #865 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #865   +/-   ##
=======================================
  Coverage   77.13%   77.13%           
=======================================
  Files          13       13           
  Lines       10196    10196           
=======================================
  Hits         7865     7865           
  Misses       2331     2331           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8756381...cf954b5. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,868,2020-05-07T16:10:02Z,2020-05-09T16:08:12Z,2020-05-09T22:33:01Z,MERGED,True,76,116,2,https://github.com/xtne6f,Use more of civetweb.c functions in CivetServer,1,[],https://github.com/civetweb/civetweb/pull/868,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/868,"I think it is better to avoid code clones from ""civetweb.c"" for maintainability. However, if you don't want, feel free to point out lines in this commit. I will revert them back.","I think it is better to avoid code clones from ""civetweb.c"" for maintainability. However, if you don't want, feel free to point out lines in this commit. I will revert them back.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,868,2020-05-07T16:10:02Z,2020-05-09T16:08:12Z,2020-05-09T22:33:01Z,MERGED,True,76,116,2,https://github.com/xtne6f,Use more of civetweb.c functions in CivetServer,1,[],https://github.com/civetweb/civetweb/pull/868,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/868#issuecomment-626198474,"I think it is better to avoid code clones from ""civetweb.c"" for maintainability. However, if you don't want, feel free to point out lines in this commit. I will revert them back.","Looks quite reasonable.
It think we should merge it as it is.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,869,2020-05-07T16:31:44Z,2020-05-10T20:08:52Z,2020-05-11T14:50:23Z,MERGED,True,40,45,1,https://github.com/xtne6f,Improving remove_dot_segments(),2,[],https://github.com/civetweb/civetweb/pull/869,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/869,No need to hurry for marge this. Please examine carefully.,No need to hurry for marge this. Please examine carefully.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,869,2020-05-07T16:31:44Z,2020-05-10T20:08:52Z,2020-05-11T14:50:23Z,MERGED,True,40,45,1,https://github.com/xtne6f,Improving remove_dot_segments(),2,[],https://github.com/civetweb/civetweb/pull/869,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/869#issuecomment-626199679,No need to hurry for marge this. Please examine carefully.,"My original implementation of remove_dot_segments was done by translating the RFC paragraph my paragraph into C code, without any optimization.
I will take a close look at this, and do some tests as well ... it seems the automatic tests did not run for this.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,869,2020-05-07T16:31:44Z,2020-05-10T20:08:52Z,2020-05-11T14:50:23Z,MERGED,True,40,45,1,https://github.com/xtne6f,Improving remove_dot_segments(),2,[],https://github.com/civetweb/civetweb/pull/869,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/869#issuecomment-626382289,No need to hurry for marge this. Please examine carefully.,"After having a look at the code, testing with the defined unit tests (and an additional test with 1 billion of random strings with lots of '.' and '/'), the new algorithm and the old one produce the same result. For the worst case string, new algorithm is up to four times faster - for ""normal"" cases, it's still 30% faster.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,870,2020-05-09T07:08:24Z,2020-05-09T16:30:50Z,2020-05-09T22:33:26Z,MERGED,True,8,0,1,https://github.com/xtne6f,Use new .dll names on Windows x86 for OpenSSL 1.1.x,1,[],https://github.com/civetweb/civetweb/pull/870,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/870,"Unless there is a particular reason, let's make symmetrical with x64 names.","Unless there is a particular reason, let's make symmetrical with x64 names.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,870,2020-05-09T07:08:24Z,2020-05-09T16:30:50Z,2020-05-09T22:33:26Z,MERGED,True,8,0,1,https://github.com/xtne6f,Use new .dll names on Windows x86 for OpenSSL 1.1.x,1,[],https://github.com/civetweb/civetweb/pull/870,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/870#issuecomment-626201751,"Unless there is a particular reason, let's make symmetrical with x64 names.","These seem to be the names for the DLLs from this source:
https://bintray.com/vszakats/generic/openssl/1.1.1g
Do you know if the DLL names are somehow standard? Or does every download source of binaries use their own names? There are quire some sources (https://wiki.openssl.org/index.php/Binaries, https://slproweb.com/products/Win32OpenSSL.html, ...).
Anyway, I think this should be merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,870,2020-05-09T07:08:24Z,2020-05-09T16:30:50Z,2020-05-09T22:33:26Z,MERGED,True,8,0,1,https://github.com/xtne6f,Use new .dll names on Windows x86 for OpenSSL 1.1.x,1,[],https://github.com/civetweb/civetweb/pull/870,https://github.com/xtne6f,3,https://github.com/civetweb/civetweb/pull/870#issuecomment-626229812,"Unless there is a particular reason, let's make symmetrical with x64 names.","As far as I know, we can assume that the DLL names are standard (and official).
I don't know about third party binaries, but when we build OpenSSL from the official source, we always get libssl-1_1(-x64).dll and libcrypto-1_1(-x64).dll. Because the official Configure script configures so. Besides, the name configuration is very hard-coded, so there seem to be no easy way to modify it. (At least I don't know.)
For your information, the renaming to libssl/libcrypto seems to have been done at this commit.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,871,2020-05-10T04:04:57Z,2020-05-18T09:39:38Z,2020-05-22T10:39:47Z,MERGED,True,171,273,4,https://github.com/xtne6f,Fix about SSL context and locking,6,[],https://github.com/civetweb/civetweb/pull/871,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/871,"I have checked these commits as well as possible, but if you have questions, please ask me anything before merging.
Currently I have no idea about handler removal from the handler itself (#800, #819, #834). Furthermore, I don't feel the necessity of it so far.","I have checked these commits as well as possible, but if you have questions, please ask me anything before merging.
Currently I have no idea about handler removal from the handler itself (#800, #819, #834). Furthermore, I don't feel the necessity of it so far.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,871,2020-05-10T04:04:57Z,2020-05-18T09:39:38Z,2020-05-22T10:39:47Z,MERGED,True,171,273,4,https://github.com/xtne6f,Fix about SSL context and locking,6,[],https://github.com/civetweb/civetweb/pull/871,https://github.com/xtne6f,2,https://github.com/civetweb/civetweb/pull/871#issuecomment-628640655,"I have checked these commits as well as possible, but if you have questions, please ask me anything before merging.
Currently I have no idea about handler removal from the handler itself (#800, #819, #834). Furthermore, I don't feel the necessity of it so far.",I did not check about embedded_c. I added 6ebe819 .,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,871,2020-05-10T04:04:57Z,2020-05-18T09:39:38Z,2020-05-22T10:39:47Z,MERGED,True,171,273,4,https://github.com/xtne6f,Fix about SSL context and locking,6,[],https://github.com/civetweb/civetweb/pull/871,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/871#issuecomment-630068227,"I have checked these commits as well as possible, but if you have questions, please ask me anything before merging.
Currently I have no idea about handler removal from the handler itself (#800, #819, #834). Furthermore, I don't feel the necessity of it so far.","I had a look at the changes and I think I understood it.
Thanks.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,872,2020-05-10T13:54:02Z,2020-05-10T20:08:14Z,2020-05-11T14:49:17Z,MERGED,True,2,0,1,https://github.com/xtne6f,Fix a possible socket leak,1,[],https://github.com/civetweb/civetweb/pull/872,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/872,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,873,2020-05-14T14:39:04Z,2020-05-14T17:34:54Z,2020-05-15T12:12:45Z,MERGED,True,26,34,1,https://github.com/xtne6f,X509 struct leaks if malloc() failed,2,[],https://github.com/civetweb/civetweb/pull/873,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/873,"Though such a situation is quite rare, anyway stack allocation should be enough in this case.","Though such a situation is quite rare, anyway stack allocation should be enough in this case.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,876,2020-06-04T14:06:05Z,2020-06-04T17:10:24Z,2020-06-04T17:10:33Z,MERGED,True,1,1,1,https://github.com/pponnuvel,Fix a potential buffer overflow in unit test,1,[],https://github.com/civetweb/civetweb/pull/876,https://github.com/pponnuvel,1,https://github.com/civetweb/civetweb/pull/876,"strncpy wouldn't append the null byte in case the source
string length is >= destination buffer.
's_test_directory' is already zero initialized. So leaving
the last byte alone is enough ensure the buffer is null byte
terminated in the worse case.
Signed-off-by: Ponnuvel Palaniyappan pponnuvel@gmail.com","strncpy wouldn't append the null byte in case the source
string length is >= destination buffer.
's_test_directory' is already zero initialized. So leaving
the last byte alone is enough ensure the buffer is null byte
terminated in the worse case.
Signed-off-by: Ponnuvel Palaniyappan pponnuvel@gmail.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,876,2020-06-04T14:06:05Z,2020-06-04T17:10:24Z,2020-06-04T17:10:33Z,MERGED,True,1,1,1,https://github.com/pponnuvel,Fix a potential buffer overflow in unit test,1,[],https://github.com/civetweb/civetweb/pull/876,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/876#issuecomment-638987454,"strncpy wouldn't append the null byte in case the source
string length is >= destination buffer.
's_test_directory' is already zero initialized. So leaving
the last byte alone is enough ensure the buffer is null byte
terminated in the worse case.
Signed-off-by: Ponnuvel Palaniyappan pponnuvel@gmail.com",Thanks. Merged.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,877,2020-06-05T09:09:51Z,2020-06-05T23:15:40Z,2020-06-05T23:15:53Z,MERGED,True,6,1,1,https://github.com/drew-wells,Fix to allow building without USE_SERVER_STATS,2,[],https://github.com/civetweb/civetweb/pull/877,https://github.com/drew-wells,1,https://github.com/civetweb/civetweb/pull/877,Build failed with MG_EXPERIMENTAL_INTERFACES without USE_SERVER_STATS and with NO_SSL,Build failed with MG_EXPERIMENTAL_INTERFACES without USE_SERVER_STATS and with NO_SSL,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,877,2020-06-05T09:09:51Z,2020-06-05T23:15:40Z,2020-06-05T23:15:53Z,MERGED,True,6,1,1,https://github.com/drew-wells,Fix to allow building without USE_SERVER_STATS,2,[],https://github.com/civetweb/civetweb/pull/877,https://github.com/drew-wells,2,https://github.com/civetweb/civetweb/pull/877#issuecomment-639528241,Build failed with MG_EXPERIMENTAL_INTERFACES without USE_SERVER_STATS and with NO_SSL,"Tried building tag 1.12 with :
/usr/bin/make PREFIX=/usr 'COPT=-DNO_SSL -DMG_EXPERIMENTAL_INTERFACES'
Failed with :
src/civetweb.c: In function ‘mg_start_domain2’:
src/civetweb.c:19684: warning: implicit declaration of function ‘init_ssl_ctx’
out/src/civetweb.o: In function 'mg_start_domain2':
civetweb.c:(.text+0x364a): undefined reference to 'init_ssl_ctx'",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,877,2020-06-05T09:09:51Z,2020-06-05T23:15:40Z,2020-06-05T23:15:53Z,MERGED,True,6,1,1,https://github.com/drew-wells,Fix to allow building without USE_SERVER_STATS,2,[],https://github.com/civetweb/civetweb/pull/877,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/877#issuecomment-639888093,Build failed with MG_EXPERIMENTAL_INTERFACES without USE_SERVER_STATS and with NO_SSL,"Thanks for your PR.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,882,2020-06-19T16:32:06Z,2020-06-19T18:18:40Z,2020-06-22T05:20:16Z,MERGED,True,32,35,1,https://github.com/xtne6f,handle_directory_request() might leak memory,1,[],https://github.com/civetweb/civetweb/pull/882,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/882,"I want to suggest ""stop scan"" feature for scan_directory().","I want to suggest ""stop scan"" feature for scan_directory().",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,882,2020-06-19T16:32:06Z,2020-06-19T18:18:40Z,2020-06-22T05:20:16Z,MERGED,True,32,35,1,https://github.com/xtne6f,handle_directory_request() might leak memory,1,[],https://github.com/civetweb/civetweb/pull/882,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/882#issuecomment-646743911,"I want to suggest ""stop scan"" feature for scan_directory().","Codecov Report

Merging #882 into master will decrease coverage by 0.01%.
The diff coverage is 72.22%.


@@            Coverage Diff             @@
##           master     #882      +/-   ##
==========================================
- Coverage   77.31%   77.29%   -0.02%     
==========================================
  Files          13       13              
  Lines       10150    10148       -2     
==========================================
- Hits         7847     7844       -3     
- Misses       2303     2304       +1     



Impacted Files
Coverage Δ





src/civetweb.c
69.14% <72.22%> (-0.03%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update dc26971...76ca320. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,882,2020-06-19T16:32:06Z,2020-06-19T18:18:40Z,2020-06-22T05:20:16Z,MERGED,True,32,35,1,https://github.com/xtne6f,handle_directory_request() might leak memory,1,[],https://github.com/civetweb/civetweb/pull/882,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/882#issuecomment-646802887,"I want to suggest ""stop scan"" feature for scan_directory().",Makes sense. Thanks.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,884,2020-06-21T05:44:14Z,2020-06-21T05:44:35Z,2020-06-21T05:45:18Z,CLOSED,False,78,4,12,https://github.com/Ashibananon,Yuan web,3,[],https://github.com/civetweb/civetweb/pull/884,https://github.com/Ashibananon,1,https://github.com/civetweb/civetweb/pull/884,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,885,2020-06-23T15:57:34Z,2020-06-23T22:25:43Z,2020-06-25T16:58:01Z,MERGED,True,148,174,1,https://github.com/xtne6f,Fix about commit 8f621bdfcb8ce53f2d3edfcc6b67cf3c2d9c8ac4,1,[],https://github.com/civetweb/civetweb/pull/885,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/885,"There are also bugs about the closing of the DLLs which are not fixed in this commit. They are somewhat complicated, so I will work on them at a later date.","There are also bugs about the closing of the DLLs which are not fixed in this commit. They are somewhat complicated, so I will work on them at a later date.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,885,2020-06-23T15:57:34Z,2020-06-23T22:25:43Z,2020-06-25T16:58:01Z,MERGED,True,148,174,1,https://github.com/xtne6f,Fix about commit 8f621bdfcb8ce53f2d3edfcc6b67cf3c2d9c8ac4,1,[],https://github.com/civetweb/civetweb/pull/885,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/885#issuecomment-648263688,"There are also bugs about the closing of the DLLs which are not fixed in this commit. They are somewhat complicated, so I will work on them at a later date.","Codecov Report

Merging #885 into master will decrease coverage by 0.01%.
The diff coverage is 50.00%.


@@            Coverage Diff             @@
##           master     #885      +/-   ##
==========================================
- Coverage   77.30%   77.28%   -0.02%     
==========================================
  Files          13       13              
  Lines       10148    10149       +1     
==========================================
- Hits         7845     7844       -1     
- Misses       2303     2305       +2     



Impacted Files
Coverage Δ





src/civetweb.c
69.13% <50.00%> (-0.04%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update fe1eef7...9331de6. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,886,2020-06-27T15:40:14Z,2020-06-27T19:54:08Z,2020-07-02T08:36:09Z,MERGED,True,259,218,2,https://github.com/xtne6f,"Support IPv6 ACL, and some fixes",8,[],https://github.com/civetweb/civetweb/pull/886,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/886,"The content of this PR is mostly IPv6 related fixes and improvements.
#591 can be closed if this PR is merged.
I guess you might be a bit negative or low priority about implementing IPv6 ACL. However, from my experience, it is useful enough.","The content of this PR is mostly IPv6 related fixes and improvements.
#591 can be closed if this PR is merged.
I guess you might be a bit negative or low priority about implementing IPv6 ACL. However, from my experience, it is useful enough.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,886,2020-06-27T15:40:14Z,2020-06-27T19:54:08Z,2020-07-02T08:36:09Z,MERGED,True,259,218,2,https://github.com/xtne6f,"Support IPv6 ACL, and some fixes",8,[],https://github.com/civetweb/civetweb/pull/886,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/886#issuecomment-650611700,"The content of this PR is mostly IPv6 related fixes and improvements.
#591 can be closed if this PR is merged.
I guess you might be a bit negative or low priority about implementing IPv6 ACL. However, from my experience, it is useful enough.","I think this also allows to use IPv6 addresses for ""throttle"", right?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,886,2020-06-27T15:40:14Z,2020-06-27T19:54:08Z,2020-07-02T08:36:09Z,MERGED,True,259,218,2,https://github.com/xtne6f,"Support IPv6 ACL, and some fixes",8,[],https://github.com/civetweb/civetweb/pull/886,https://github.com/xtne6f,3,https://github.com/civetweb/civetweb/pull/886#issuecomment-650628574,"The content of this PR is mostly IPv6 related fixes and improvements.
#591 can be closed if this PR is merged.
I guess you might be a bit negative or low priority about implementing IPv6 ACL. However, from my experience, it is useful enough.","Yes. In addition, considering the distinctiveness with uri_prefix_pattern, I decided that square brackets are required for throttle.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,890,2020-07-08T10:21:55Z,2020-07-10T12:38:31Z,2020-07-11T09:08:35Z,MERGED,True,1,2,1,https://github.com/gou4shi1,Fix mg_connect_websocket_client_secure,1,[],https://github.com/civetweb/civetweb/pull/890,https://github.com/gou4shi1,1,https://github.com/civetweb/civetweb/pull/890,#853,#853,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,898,2020-08-07T02:14:47Z,2020-08-07T02:16:40Z,2020-08-07T02:21:56Z,CLOSED,False,2,2,1,https://github.com/goodmenzy,"Makefile: update install-slib  target, symlink fix",1,[],https://github.com/civetweb/civetweb/pull/898,https://github.com/goodmenzy,1,https://github.com/civetweb/civetweb/pull/898,"cmd install seems did not create symlink to the $(LIBDIR), so we turn to use 'ln' cmd directly.","cmd install seems did not create symlink to the $(LIBDIR), so we turn to use 'ln' cmd directly.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,899,2020-08-07T02:27:07Z,2020-08-07T16:11:55Z,2020-08-07T16:11:55Z,MERGED,True,3,3,1,https://github.com/goodmenzy,"Makefile: update install-slib target, symlink fix",1,[],https://github.com/civetweb/civetweb/pull/899,https://github.com/goodmenzy,1,https://github.com/civetweb/civetweb/pull/899,"cmd 'install' seems can not create symlink to the $(LIBDIR), so we turn to use 'ln' cmd directly.","cmd 'install' seems can not create symlink to the $(LIBDIR), so we turn to use 'ln' cmd directly.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,899,2020-08-07T02:27:07Z,2020-08-07T16:11:55Z,2020-08-07T16:11:55Z,MERGED,True,3,3,1,https://github.com/goodmenzy,"Makefile: update install-slib target, symlink fix",1,[],https://github.com/civetweb/civetweb/pull/899,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/899#issuecomment-670289086,"cmd 'install' seems can not create symlink to the $(LIBDIR), so we turn to use 'ln' cmd directly.","Codecov Report

Merging #899 into master will increase coverage by 0.00%.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #899   +/-   ##
=======================================
  Coverage   77.08%   77.09%           
=======================================
  Files          13       13           
  Lines       10196    10196           
=======================================
+ Hits         7860     7861    +1     
+ Misses       2336     2335    -1     



Impacted Files
Coverage Δ





src/civetweb.c
68.85% <0.00%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 08e22cc...6574a2c. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,902,2020-08-15T15:33:09Z,2020-08-17T07:39:27Z,2020-08-17T07:39:48Z,MERGED,True,148,67,2,https://github.com/bel2125,Atomic server stats,4,[],https://github.com/civetweb/civetweb/pull/902,https://github.com/bel2125,1,https://github.com/civetweb/civetweb/pull/902,Merge atomic-server-stats to master,Merge atomic-server-stats to master,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,902,2020-08-15T15:33:09Z,2020-08-17T07:39:27Z,2020-08-17T07:39:48Z,MERGED,True,148,67,2,https://github.com/bel2125,Atomic server stats,4,[],https://github.com/civetweb/civetweb/pull/902,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/902#issuecomment-674414417,Merge atomic-server-stats to master,"Codecov Report

Merging #902 into master will increase coverage by 0.01%.
The diff coverage is 91.42%.


@@            Coverage Diff             @@
##           master     #902      +/-   ##
==========================================
+ Coverage   77.10%   77.12%   +0.01%     
==========================================
  Files          13       13              
  Lines       10199    10220      +21     
==========================================
+ Hits         7864     7882      +18     
- Misses       2335     2338       +3     



Impacted Files
Coverage Δ





src/civetweb.c
68.92% <91.42%> (+0.06%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 59902c5...8838266. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,903,2020-08-18T07:24:22Z,2020-11-25T21:14:44Z,2020-11-25T21:14:44Z,CLOSED,False,2,2,1,https://github.com/rockeet,embedded_cpp.cpp: fix sleep time,1,[],https://github.com/civetweb/civetweb/pull/903,https://github.com/rockeet,1,https://github.com/civetweb/civetweb/pull/903,"Windows Sleep is in milliseconds, and unix sleep is in microseconds.","Windows Sleep is in milliseconds, and unix sleep is in microseconds.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,903,2020-08-18T07:24:22Z,2020-11-25T21:14:44Z,2020-11-25T21:14:44Z,CLOSED,False,2,2,1,https://github.com/rockeet,embedded_cpp.cpp: fix sleep time,1,[],https://github.com/civetweb/civetweb/pull/903,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/903#issuecomment-675314453,"Windows Sleep is in milliseconds, and unix sleep is in microseconds.","Codecov Report

Merging #903 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #903   +/-   ##
=======================================
  Coverage   77.12%   77.12%           
=======================================
  Files          13       13           
  Lines       10220    10220           
=======================================
  Hits         7882     7882           
  Misses       2338     2338           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update b3667f3...074e21a. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,903,2020-08-18T07:24:22Z,2020-11-25T21:14:44Z,2020-11-25T21:14:44Z,CLOSED,False,2,2,1,https://github.com/rockeet,embedded_cpp.cpp: fix sleep time,1,[],https://github.com/civetweb/civetweb/pull/903,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/903#issuecomment-675543377,"Windows Sleep is in milliseconds, and unix sleep is in microseconds.","Windows Sleep is in milliseconds, and unix sleep is in microseconds.

Windows Sleep is in milliseconds, and unix sleep is in seconds - unix usleep would be microseconds - see documentation in the links.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,903,2020-08-18T07:24:22Z,2020-11-25T21:14:44Z,2020-11-25T21:14:44Z,CLOSED,False,2,2,1,https://github.com/rockeet,embedded_cpp.cpp: fix sleep time,1,[],https://github.com/civetweb/civetweb/pull/903,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/903#issuecomment-675546056,"Windows Sleep is in milliseconds, and unix sleep is in microseconds.","nanosleep on Linux would be nanoseconds.
So (deliberately?) there is no function that uses the same unit on Windows and Linux:

Seconds: Available on Linux using sleep (not available on Windows, use Sleep*1000)
Milliseconds: Available on Windows using Sleep (not available on Linux, use usleep*1000)
Microseconds: Available on Linux using usleep (not available on Windows)
Nanoseconds: Available on Linux using nanosleep and clock_nanosleep (not available on Windows)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,903,2020-08-18T07:24:22Z,2020-11-25T21:14:44Z,2020-11-25T21:14:44Z,CLOSED,False,2,2,1,https://github.com/rockeet,embedded_cpp.cpp: fix sleep time,1,[],https://github.com/civetweb/civetweb/pull/903,https://github.com/rockeet,5,https://github.com/civetweb/civetweb/pull/903#issuecomment-677440100,"Windows Sleep is in milliseconds, and unix sleep is in microseconds.","nanosleep on Linux would be nanoseconds.
So (deliberately?) there is no function that uses the same unit on Windows and Linux:

Seconds: Available on Linux using sleep (not available on Windows, use Sleep*1000)
Milliseconds: Available on Windows using Sleep (not available on Linux, use usleep*1000)
Microseconds: Available on Linux using usleep (not available on Windows)
Nanoseconds: Available on Linux using nanosleep and clock_nanosleep (not available on Windows)


Thank you, It's my mistake.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,904,2020-08-19T16:38:35Z,2020-08-19T16:40:13Z,2020-08-30T20:00:13Z,CLOSED,False,1,1,1,https://github.com/PiotrZierhoffer,civetweb: WebSockets support for Zephyr,1,[],https://github.com/civetweb/civetweb/pull/904,https://github.com/PiotrZierhoffer,1,https://github.com/civetweb/civetweb/pull/904,"Enable websockets support for Zephyr.
To use, pass -DCIVETWEB_ENABLE_WEBSOCKETS=ON to west.
Signed-off-by: Alexander Kozhinov AlexanderKozhinov@yandex.com
Signed-off-by: Piotr Zierhoffer pzierhoffer@antmicro.com","Enable websockets support for Zephyr.
To use, pass -DCIVETWEB_ENABLE_WEBSOCKETS=ON to west.
Signed-off-by: Alexander Kozhinov AlexanderKozhinov@yandex.com
Signed-off-by: Piotr Zierhoffer pzierhoffer@antmicro.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,904,2020-08-19T16:38:35Z,2020-08-19T16:40:13Z,2020-08-30T20:00:13Z,CLOSED,False,1,1,1,https://github.com/PiotrZierhoffer,civetweb: WebSockets support for Zephyr,1,[],https://github.com/civetweb/civetweb/pull/904,https://github.com/PiotrZierhoffer,2,https://github.com/civetweb/civetweb/pull/904#issuecomment-676536128,"Enable websockets support for Zephyr.
To use, pass -DCIVETWEB_ENABLE_WEBSOCKETS=ON to west.
Signed-off-by: Alexander Kozhinov AlexanderKozhinov@yandex.com
Signed-off-by: Piotr Zierhoffer pzierhoffer@antmicro.com","This was created by mistake. We'll probably reopen it anyway, but in a controlled manner. Sorry for the mess",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,908,2020-09-14T16:30:16Z,2020-09-18T06:07:49Z,2020-09-18T06:07:59Z,MERGED,True,328,26,2,https://github.com/jdetaeye,first prototype for websocket compression,4,[],https://github.com/civetweb/civetweb/pull/908,https://github.com/jdetaeye,1,https://github.com/civetweb/civetweb/pull/908,"Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.","Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,908,2020-09-14T16:30:16Z,2020-09-18T06:07:49Z,2020-09-18T06:07:59Z,MERGED,True,328,26,2,https://github.com/jdetaeye,first prototype for websocket compression,4,[],https://github.com/civetweb/civetweb/pull/908,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/908#issuecomment-692176736,"Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.","Codecov Report

Merging #908 into master will increase coverage by 0.01%.
The diff coverage is 61.53%.


@@            Coverage Diff             @@
##           master     #908      +/-   ##
==========================================
+ Coverage   77.16%   77.18%   +0.01%     
==========================================
  Files          13       13              
  Lines       10254    10255       +1     
==========================================
+ Hits         7913     7915       +2     
+ Misses       2341     2340       -1     



Impacted Files
Coverage Δ





src/civetweb.c
68.94% <61.53%> (+0.02%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update e730c4b...a4bc4fb. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,908,2020-09-14T16:30:16Z,2020-09-18T06:07:49Z,2020-09-18T06:07:59Z,MERGED,True,328,26,2,https://github.com/jdetaeye,first prototype for websocket compression,4,[],https://github.com/civetweb/civetweb/pull/908,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/908#issuecomment-692281927,"Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.","Thanks for your contribution. If you consider it ""not ready for production"", it could be enclosed by the MG_EXPERIMENTAL_INTERFACES define (it's not only used for experimental interfaces, but also for experimental features).
We plan a release this month, so I must make sure not to merge any code that might be a risk - unless it is deactivated by default and is activated using some ""experimental"" define.
It seems there is some unused, commented code in the PR, and I think some unused variables.
Will it work for websocket server and client? In this case, it might be possible to copy and adapt the existing unit test for uncompressed websockets (I can check this afterwards).
Could we move it from civetweb.c to mod_zlib.inl - like on the fly compression for regular (non-websocket) HTTP requests?
Regarding hardcoded configurations: Some were already defined in mod_zlib.c, e.g., parameters for deflateInit2

  
    
      civetweb/src/mod_zlib.inl
    
    
        Lines 51 to 57
      in
      e730c4b
    
  
  
    

        
          
           /* Initialize for GZIP compression (MAX_WBITS | 16) */ 
        

        
          
           zret = deflateInit2(&zstream, 
        

        
          
                               Z_BEST_COMPRESSION, 
        

        
          
                               Z_DEFLATED, 
        

        
          
                               MAX_WBITS | 16, 
        

        
          
                               MEM_LEVEL, 
        

        
          
                               Z_DEFAULT_STRATEGY); 
        
    
  


Configuration is possible by setting some defines, e.g.,

  
    
      civetweb/src/mod_zlib.inl
    
    
        Lines 9 to 11
      in
      e730c4b
    
  
  
    

        
          
           #if !defined(MEM_LEVEL) 
        

        
          
           #define MEM_LEVEL (8) 
        

        
          
           #endif 
        
    
  


Is there a ""mg_free"" for inflated = mg_calloc? 10 MB seems a lot - not on a big server or desktop PC, but on an embedded device, in particular if the client only encodes ~10kB.
https://github.com/civetweb/civetweb/pull/908/files#diff-942b175a4f5673b8f0ce6c0ab2fc2932R12864
I don't know if inflate is able to handle next_out == NULL, in case calloc fails, but indexing inflated will cause a crash if allocation failed before.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,908,2020-09-14T16:30:16Z,2020-09-18T06:07:49Z,2020-09-18T06:07:59Z,MERGED,True,328,26,2,https://github.com/jdetaeye,first prototype for websocket compression,4,[],https://github.com/civetweb/civetweb/pull/908,https://github.com/jdetaeye,4,https://github.com/civetweb/civetweb/pull/908#issuecomment-692515195,"Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.","Thanks for the quick feedback.  I'll work on an updated pull request.

If you consider it ""not ready for production"", it could be enclosed by the MG_EXPERIMENTAL_INTERFACES define (it's not only used for experimental interfaces, but also for experimental features).

Once the open things on the pull request will be fixed, the code will be production ready.
https://tools.ietf.org/html/rfc7692 is a tough read, but I have used the implementation in https://github.com/zaphoyd/websocketpp (BSD license) as a reference&inspiration for this pull request. @zaphoyd Nice work!
So, the use of the word ""experimental"" isn't needed, IMHO.  Currently the code is active as soon as USE_ZLIB and USE_WEBSOCKET are defined.  If you prefer, we can add a new define USE_WESOCKET_DEFLATE to make the use of the new feature fully optional.
Let me know your preference and I'll adjust accordingly.

We plan a release this month, so I must make sure not to merge any code that might be a risk - unless it is deactivated by default and is activated using some ""experimental"" define.

If ""this month"" means ""september 30th"", then it'll still work out to get this properly added to the release.  If you're shooting an earlier release date, my feeling is that we better add it to the next release rather than rushing something partial & incomplete.

It seems there is some unused, commented code in the PR, and I think some unused variables.

Defines, hardcodes, unused variables, etc are all to be cleaned up.

Will it work for websocket server and client? In this case, it might be possible to copy and adapt the existing unit test for uncompressed websockets (I can check this afterwards).

Currently I only tested as a server.  But it'll be possible to apply it also for the client.

Could we move it from civetweb.c to mod_zlib.inl - like on the fly compression for regular (non-websocket) HTTP requests?

OK, I'll update like that.
Expect an updated pull request in 1-2 days...",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,908,2020-09-14T16:30:16Z,2020-09-18T06:07:49Z,2020-09-18T06:07:59Z,MERGED,True,328,26,2,https://github.com/jdetaeye,first prototype for websocket compression,4,[],https://github.com/civetweb/civetweb/pull/908,https://github.com/jdetaeye,5,https://github.com/civetweb/civetweb/pull/908#issuecomment-693523636,"Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.","Just pushed an updated version that considers the feedback above.
Todo:

Needs critical review for memory allocation & free corner cases
Only the server side is coded now.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,908,2020-09-14T16:30:16Z,2020-09-18T06:07:49Z,2020-09-18T06:07:59Z,MERGED,True,328,26,2,https://github.com/jdetaeye,first prototype for websocket compression,4,[],https://github.com/civetweb/civetweb/pull/908,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/908#issuecomment-693581975,"Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.","I think this is an unintended double call of mg_calloc:
		deflated = mg_calloc(deflated_size, sizeof(Bytef));
		conn->websocket_deflate_state.avail_out = deflated_size;
		conn->websocket_deflate_state.next_out = deflated =
		    mg_calloc(deflated_size, sizeof(Bytef));",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,908,2020-09-14T16:30:16Z,2020-09-18T06:07:49Z,2020-09-18T06:07:59Z,MERGED,True,328,26,2,https://github.com/jdetaeye,first prototype for websocket compression,4,[],https://github.com/civetweb/civetweb/pull/908,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/908#issuecomment-693583675,"Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.","It is also possible for mg_calloc and mg_realloc to return NULL. This would cause an AccessViolation / SEGFAULT error.
I think the only clean way to handle this would be to call mg_cry to log an error message, and close the websocket connection.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,908,2020-09-14T16:30:16Z,2020-09-18T06:07:49Z,2020-09-18T06:07:59Z,MERGED,True,328,26,2,https://github.com/jdetaeye,first prototype for websocket compression,4,[],https://github.com/civetweb/civetweb/pull/908,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/908#issuecomment-694102895,"Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.","I wanted to check why GitHub now has a merge conflict, while it did not have this before.
There seems to be something wrong:

Probably code formatting, EOL conversion, tab vs. space changed?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,908,2020-09-14T16:30:16Z,2020-09-18T06:07:49Z,2020-09-18T06:07:59Z,MERGED,True,328,26,2,https://github.com/jdetaeye,first prototype for websocket compression,4,[],https://github.com/civetweb/civetweb/pull/908,https://github.com/bel2125,9,https://github.com/civetweb/civetweb/pull/908#issuecomment-694674985,"Here is a prototype pull request for #897.
A civetweb websocket server with this update can already successfully compress websocket traffic with Chrome, Firefox and Edge.
It's not production ready yet:

codes has some hardcodes that need to be made more generic
no tests included yet

Any comments & feedback are welcome, so I can further improve the pull request.","Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,910,2020-09-20T10:21:19Z,2020-09-20T13:50:34Z,2020-09-21T13:49:40Z,CLOSED,False,320,4,2,https://github.com/Qinch,civetweb support mbedtls v2.16.2,1,[],https://github.com/civetweb/civetweb/pull/910,https://github.com/Qinch,1,https://github.com/civetweb/civetweb/pull/910,"#839
The Pull Request without compile and test, which is working in progress.
Today, I only completed part of the modification. I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DMG_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. MG_MBEDTLS means that mbed TLS is compiled.","#839
The Pull Request without compile and test, which is working in progress.
Today, I only completed part of the modification. I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DMG_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. MG_MBEDTLS means that mbed TLS is compiled.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,910,2020-09-20T10:21:19Z,2020-09-20T13:50:34Z,2020-09-21T13:49:40Z,CLOSED,False,320,4,2,https://github.com/Qinch,civetweb support mbedtls v2.16.2,1,[],https://github.com/civetweb/civetweb/pull/910,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/910#issuecomment-695789101,"#839
The Pull Request without compile and test, which is working in progress.
Today, I only completed part of the modification. I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DMG_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. MG_MBEDTLS means that mbed TLS is compiled.","Codecov Report

Merging #910 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #910   +/-   ##
=======================================
  Coverage   77.17%   77.17%           
=======================================
  Files          13       13           
  Lines       10255    10255           
=======================================
  Hits         7914     7914           
  Misses       2341     2341           



Impacted Files
Coverage Δ





src/civetweb.c
68.92% <ø> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8e1f656...49488c8. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,911,2020-09-21T13:53:22Z,2020-09-21T13:53:37Z,2020-09-21T13:53:37Z,CLOSED,False,35121,18,96,https://github.com/Qinch,CivetWeb support mbedTLS 2.16.2,7,[],https://github.com/civetweb/civetweb/pull/911,https://github.com/Qinch,1,https://github.com/civetweb/civetweb/pull/911,"#839
The Pull Request without  test.
Today, I only completed part of the modification.
I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DMG_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. MG_MBEDTLS means that mbed TLS is compiled.","#839
The Pull Request without  test.
Today, I only completed part of the modification.
I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DMG_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. MG_MBEDTLS means that mbed TLS is compiled.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,912,2020-09-21T13:54:20Z,2020-10-04T19:22:35Z,2020-10-09T13:17:27Z,MERGED,True,322,5,2,https://github.com/Qinch,civetweb support mbedtls,1,[],https://github.com/civetweb/civetweb/pull/912,https://github.com/Qinch,1,https://github.com/civetweb/civetweb/pull/912,"#839
The Pull Request without  test.
I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DUSE_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. USE_MBEDTLS means that mbed TLS is compiled.","#839
The Pull Request without  test.
I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DUSE_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. USE_MBEDTLS means that mbed TLS is compiled.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,912,2020-09-21T13:54:20Z,2020-10-04T19:22:35Z,2020-10-09T13:17:27Z,MERGED,True,322,5,2,https://github.com/Qinch,civetweb support mbedtls,1,[],https://github.com/civetweb/civetweb/pull/912,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/912#issuecomment-696138381,"#839
The Pull Request without  test.
I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DUSE_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. USE_MBEDTLS means that mbed TLS is compiled.","Codecov Report

Merging #912 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #912   +/-   ##
=======================================
  Coverage   77.17%   77.17%           
=======================================
  Files          13       13           
  Lines       10255    10255           
=======================================
  Hits         7914     7914           
  Misses       2341     2341           



Impacted Files
Coverage Δ





src/civetweb.c
68.92% <ø> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8e1f656...4c6a818. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,912,2020-09-21T13:54:20Z,2020-10-04T19:22:35Z,2020-10-09T13:17:27Z,MERGED,True,322,5,2,https://github.com/Qinch,civetweb support mbedtls,1,[],https://github.com/civetweb/civetweb/pull/912,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/912#issuecomment-703304157,"#839
The Pull Request without  test.
I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DUSE_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. USE_MBEDTLS means that mbed TLS is compiled.","Merged to branch ""mbedtls"": https://github.com/civetweb/civetweb/tree/mbedtls",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,912,2020-09-21T13:54:20Z,2020-10-04T19:22:35Z,2020-10-09T13:17:27Z,MERGED,True,322,5,2,https://github.com/Qinch,civetweb support mbedtls,1,[],https://github.com/civetweb/civetweb/pull/912,https://github.com/Qinch,4,https://github.com/civetweb/civetweb/pull/912#issuecomment-706096586,"#839
The Pull Request without  test.
I will try to compile and test the code, In the next few days.
As I said before,
the demo using compile option -DUSE_MBEDTLS and -DNO_SSL at the same time. NO_SSL is used to compile without OpenSSL. USE_MBEDTLS means that mbed TLS is compiled.","@bel2125  I will compile the mbedtls branch. and provide a guidance document(such as docs/mbedtls.md).
note that:civetweb need to use Arm Mbed TLS in threaded environments.
see:
https://tls.mbed.org/kb/development/thread-safety-and-multi-threading)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,914,2020-09-22T18:02:57Z,2020-09-22T20:25:21Z,2020-09-22T20:25:25Z,MERGED,True,2765,625,16,https://github.com/bel2125,Merge HTTP2 prototype into master,21,[],https://github.com/civetweb/civetweb/pull/914,https://github.com/bel2125,1,https://github.com/civetweb/civetweb/pull/914,"HTTP2 is not yet ready for production, but the code is separated by an #ifdef USE_HTTP2. Adding it without the define set will not have negative side effects on master, but still add some fixes and enhancements done in this branch during development. Also, it allows further development to start on a released version.","HTTP2 is not yet ready for production, but the code is separated by an #ifdef USE_HTTP2. Adding it without the define set will not have negative side effects on master, but still add some fixes and enhancements done in this branch during development. Also, it allows further development to start on a released version.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,915,2020-10-01T06:21:34Z,2020-11-25T21:14:05Z,2020-11-25T21:14:05Z,CLOSED,False,3,1,1,https://github.com/kamit9171,Update CMakeLists.txt,1,[],https://github.com/civetweb/civetweb/pull/915,https://github.com/kamit9171,1,https://github.com/civetweb/civetweb/pull/915,Adding IP version 4 with version 6,Adding IP version 4 with version 6,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,915,2020-10-01T06:21:34Z,2020-11-25T21:14:05Z,2020-11-25T21:14:05Z,CLOSED,False,3,1,1,https://github.com/kamit9171,Update CMakeLists.txt,1,[],https://github.com/civetweb/civetweb/pull/915,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/915#issuecomment-701933898,Adding IP version 4 with version 6,"Codecov Report

Merging #915 into master will decrease coverage by 0.00%.
The diff coverage is n/a.


@@            Coverage Diff             @@
##           master     #915      +/-   ##
==========================================
- Coverage   77.12%   77.11%   -0.01%     
==========================================
  Files          14       14              
  Lines       10380    10380              
==========================================
- Hits         8006     8005       -1     
- Misses       2374     2375       +1     



Impacted Files
Coverage Δ





src/civetweb.c
69.03% <0.00%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8e24345...d74bf8c. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,915,2020-10-01T06:21:34Z,2020-11-25T21:14:05Z,2020-11-25T21:14:05Z,CLOSED,False,3,1,1,https://github.com/kamit9171,Update CMakeLists.txt,1,[],https://github.com/civetweb/civetweb/pull/915,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/915#issuecomment-703068719,Adding IP version 4 with version 6,"Could you please explain in a little more detail what problem your pull requests wants to solve?
Adding this option to CMakeList.txt only will not have any effect on the code. If you need an option to deactivate IPv4, this has to be done in civetweb.c as well.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,915,2020-10-01T06:21:34Z,2020-11-25T21:14:05Z,2020-11-25T21:14:05Z,CLOSED,False,3,1,1,https://github.com/kamit9171,Update CMakeLists.txt,1,[],https://github.com/civetweb/civetweb/pull/915,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/915#issuecomment-703068893,Adding IP version 4 with version 6,Please also have a look at the Contribution Guidelines.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,916,2020-10-01T13:51:31Z,2020-11-25T21:14:20Z,2020-11-25T21:14:20Z,CLOSED,False,10,0,1,https://github.com/impradeepgupta,Create C PROGRAM,1,[],https://github.com/civetweb/civetweb/pull/916,https://github.com/impradeepgupta,1,https://github.com/civetweb/civetweb/pull/916,C program to add two numbers,C program to add two numbers,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,916,2020-10-01T13:51:31Z,2020-11-25T21:14:20Z,2020-11-25T21:14:20Z,CLOSED,False,10,0,1,https://github.com/impradeepgupta,Create C PROGRAM,1,[],https://github.com/civetweb/civetweb/pull/916,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/916#issuecomment-703068390,C program to add two numbers,"Contributions are welcome, provided they add some value to the CivetWeb web server, e.g., by fixing a bug, adding a feature, improving documentation, adding/improving tests/examples, etc. - and they are MIT licensed, see the contribution guidelines.
It is not clear to me what web server related problem your program wants to solve.
In case you want to create a CGI program to add two numbers, this must be done in a different way and it must be put to a different folder.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,918,2020-10-04T11:29:27Z,2020-10-04T16:58:12Z,2020-10-05T18:43:20Z,MERGED,True,43,0,3,https://github.com/gjasny,fix: properly lookup winsock in imported project,1,[],https://github.com/civetweb/civetweb/pull/918,https://github.com/gjasny,1,https://github.com/civetweb/civetweb/pull/918,"Hello,
I recently got a report that CMake project import of civetweb fails in a MinGW environment. The root cause is that the exported civetweb config links against WINSOCK::WINSOCK which is unknown outside of the civetweb project.
This PR exports the publicly needed CMake find modules and looks those up on a case-by-case basis.
Thanks,
Gregor","Hello,
I recently got a report that CMake project import of civetweb fails in a MinGW environment. The root cause is that the exported civetweb config links against WINSOCK::WINSOCK which is unknown outside of the civetweb project.
This PR exports the publicly needed CMake find modules and looks those up on a case-by-case basis.
Thanks,
Gregor",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,918,2020-10-04T11:29:27Z,2020-10-04T16:58:12Z,2020-10-05T18:43:20Z,MERGED,True,43,0,3,https://github.com/gjasny,fix: properly lookup winsock in imported project,1,[],https://github.com/civetweb/civetweb/pull/918,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/918#issuecomment-703246551,"Hello,
I recently got a report that CMake project import of civetweb fails in a MinGW environment. The root cause is that the exported civetweb config links against WINSOCK::WINSOCK which is unknown outside of the civetweb project.
This PR exports the publicly needed CMake find modules and looks those up on a case-by-case basis.
Thanks,
Gregor","Codecov Report

Merging #918 into master will increase coverage by 0.00%.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #918   +/-   ##
=======================================
  Coverage   77.12%   77.13%           
=======================================
  Files          14       14           
  Lines       10380    10380           
=======================================
+ Hits         8006     8007    +1     
+ Misses       2374     2373    -1     



Impacted Files
Coverage Δ





src/civetweb.c
69.07% <0.00%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8e24345...ba5f596. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,918,2020-10-04T11:29:27Z,2020-10-04T16:58:12Z,2020-10-05T18:43:20Z,MERGED,True,43,0,3,https://github.com/gjasny,fix: properly lookup winsock in imported project,1,[],https://github.com/civetweb/civetweb/pull/918,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/918#issuecomment-703284219,"Hello,
I recently got a report that CMake project import of civetweb fails in a MinGW environment. The root cause is that the exported civetweb config links against WINSOCK::WINSOCK which is unknown outside of the civetweb project.
This PR exports the publicly needed CMake find modules and looks those up on a case-by-case basis.
Thanks,
Gregor","Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,918,2020-10-04T11:29:27Z,2020-10-04T16:58:12Z,2020-10-05T18:43:20Z,MERGED,True,43,0,3,https://github.com/gjasny,fix: properly lookup winsock in imported project,1,[],https://github.com/civetweb/civetweb/pull/918,https://github.com/gjasny,4,https://github.com/civetweb/civetweb/pull/918#issuecomment-703287658,"Hello,
I recently got a report that CMake project import of civetweb fails in a MinGW environment. The root cause is that the exported civetweb config links against WINSOCK::WINSOCK which is unknown outside of the civetweb project.
This PR exports the publicly needed CMake find modules and looks those up on a case-by-case basis.
Thanks,
Gregor",Could you please release a v1.13.1 with this fix?,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,918,2020-10-04T11:29:27Z,2020-10-04T16:58:12Z,2020-10-05T18:43:20Z,MERGED,True,43,0,3,https://github.com/gjasny,fix: properly lookup winsock in imported project,1,[],https://github.com/civetweb/civetweb/pull/918,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/918#issuecomment-703817324,"Hello,
I recently got a report that CMake project import of civetweb fails in a MinGW environment. The root cause is that the exported civetweb config links against WINSOCK::WINSOCK which is unknown outside of the civetweb project.
This PR exports the publicly needed CMake find modules and looks those up on a case-by-case basis.
Thanks,
Gregor","This will require a bug fix branch of V1.13.
I will check if there are some other urgent fixes, and probably do this next week.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,919,2020-10-04T19:11:40Z,2020-10-04T19:18:00Z,2020-10-04T19:18:00Z,MERGED,True,322,5,2,https://github.com/bel2125,civetweb support mbedtsl v2.16.2,1,[],https://github.com/civetweb/civetweb/pull/919,https://github.com/bel2125,1,https://github.com/civetweb/civetweb/pull/919,"Like #912, but merge to a development branch, not the master branch
see also #839","Like #912, but merge to a development branch, not the master branch
see also #839",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,920,2020-10-04T19:25:07Z,2020-10-04T19:25:43Z,2020-10-04T19:25:43Z,CLOSED,False,322,5,2,https://github.com/bel2125,Merge pull request #919 from Qinch/master,1,[],https://github.com/civetweb/civetweb/pull/920,https://github.com/bel2125,1,https://github.com/civetweb/civetweb/pull/920,civetweb support mbedtsl v2.16.2,civetweb support mbedtsl v2.16.2,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,921,2020-10-04T19:28:18Z,2020-10-04T19:28:44Z,2020-10-04T19:37:14Z,MERGED,True,5,322,2,https://github.com/bel2125,"Revert ""civetweb support mbedtls""",1,[],https://github.com/civetweb/civetweb/pull/921,https://github.com/bel2125,1,https://github.com/civetweb/civetweb/pull/921,"Reverts #912 --> merge needs to be done in branch ""mbedtls"", not ""master""","Reverts #912 --> merge needs to be done in branch ""mbedtls"", not ""master""",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,922,2020-10-05T10:55:22Z,2020-10-10T06:21:34Z,2020-10-10T08:38:18Z,MERGED,True,155,31,3,https://github.com/jdetaeye,Websocket compression client,4,[],https://github.com/civetweb/civetweb/pull/922,https://github.com/jdetaeye,1,https://github.com/civetweb/civetweb/pull/922,"This pull requests includes:

minor fix for formatting of out-of-memory message
a first, partial update for client-side websocket compression","This pull requests includes:

minor fix for formatting of out-of-memory message
a first, partial update for client-side websocket compression",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,922,2020-10-05T10:55:22Z,2020-10-10T06:21:34Z,2020-10-10T08:38:18Z,MERGED,True,155,31,3,https://github.com/jdetaeye,Websocket compression client,4,[],https://github.com/civetweb/civetweb/pull/922,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/922#issuecomment-703575586,"This pull requests includes:

minor fix for formatting of out-of-memory message
a first, partial update for client-side websocket compression","Codecov Report

Merging #922 into master will decrease coverage by 0.09%.
The diff coverage is 18.75%.


@@            Coverage Diff             @@
##           master     #922      +/-   ##
==========================================
- Coverage   77.12%   77.03%   -0.10%     
==========================================
  Files          14       14              
  Lines       10380    10392      +12     
==========================================
- Hits         8006     8005       -1     
- Misses       2374     2387      +13     



Impacted Files
Coverage Δ





src/civetweb.c
68.88% <18.75%> (-0.17%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8e24345...0d60dbf. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,922,2020-10-05T10:55:22Z,2020-10-10T06:21:34Z,2020-10-10T08:38:18Z,MERGED,True,155,31,3,https://github.com/jdetaeye,Websocket compression client,4,[],https://github.com/civetweb/civetweb/pull/922,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/922#issuecomment-706496466,"This pull requests includes:

minor fix for formatting of out-of-memory message
a first, partial update for client-side websocket compression","Probably I am going to modify the client interface (civetweb.h) a little, e.g., to have user_data as the last argument, like in every function (except mg_start).
I will also try to add a unit test later.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,922,2020-10-05T10:55:22Z,2020-10-10T06:21:34Z,2020-10-10T08:38:18Z,MERGED,True,155,31,3,https://github.com/jdetaeye,Websocket compression client,4,[],https://github.com/civetweb/civetweb/pull/922,https://github.com/jdetaeye,4,https://github.com/civetweb/civetweb/pull/922#issuecomment-706512921,"This pull requests includes:

minor fix for formatting of out-of-memory message
a first, partial update for client-side websocket compression","Thanks for all merges & all your work on civetweb!
FYI   You can see the websocket compression in action on this link https://demo.frepple.com/planningboard/   The data for the Gantt chart are coming through a websocket from a memory-resident c++ planning engine. Changes in the Gantt chart (eg drag a block to a new date) are sent as websocket messages to the planning engine, and the planning engine sends updated plans after processing these changes.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,923,2020-10-05T10:58:21Z,2020-10-05T18:46:31Z,2020-10-05T18:47:03Z,MERGED,True,182,8,2,https://github.com/pietercardoen,C++: Added overload handle functions with http status,1,[],https://github.com/civetweb/civetweb/pull/923,https://github.com/pietercardoen,1,https://github.com/civetweb/civetweb/pull/923,"The CivetHandler has been extended with overloaded handleGet, handlePut,
handlePatch ... functions with extra int *http_status argument.
This allows applications to return a valid HTTP status code if a resource is
not found or an operation is forbidden.","The CivetHandler has been extended with overloaded handleGet, handlePut,
handlePatch ... functions with extra int *http_status argument.
This allows applications to return a valid HTTP status code if a resource is
not found or an operation is forbidden.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,923,2020-10-05T10:58:21Z,2020-10-05T18:46:31Z,2020-10-05T18:47:03Z,MERGED,True,182,8,2,https://github.com/pietercardoen,C++: Added overload handle functions with http status,1,[],https://github.com/civetweb/civetweb/pull/923,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/923#issuecomment-703592850,"The CivetHandler has been extended with overloaded handleGet, handlePut,
handlePatch ... functions with extra int *http_status argument.
This allows applications to return a valid HTTP status code if a resource is
not found or an operation is forbidden.","Codecov Report

Merging #923 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #923   +/-   ##
=======================================
  Coverage   77.11%   77.11%           
=======================================
  Files          14       14           
  Lines       10380    10380           
=======================================
  Hits         8005     8005           
  Misses       2375     2375           

Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 26ca423...cf080fd. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,923,2020-10-05T10:58:21Z,2020-10-05T18:46:31Z,2020-10-05T18:47:03Z,MERGED,True,182,8,2,https://github.com/pietercardoen,C++: Added overload handle functions with http status,1,[],https://github.com/civetweb/civetweb/pull/923,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/923#issuecomment-703819140,"The CivetHandler has been extended with overloaded handleGet, handlePut,
handlePatch ... functions with extra int *http_status argument.
This allows applications to return a valid HTTP status code if a resource is
not found or an operation is forbidden.","Thank you.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,925,2020-10-09T13:23:08Z,2020-10-09T20:21:17Z,2020-11-07T11:55:18Z,MERGED,True,9,1,2,https://github.com/Qinch,mbedtls guidance,1,[],https://github.com/civetweb/civetweb/pull/925,https://github.com/Qinch,1,https://github.com/civetweb/civetweb/pull/925,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,925,2020-10-09T13:23:08Z,2020-10-09T20:21:17Z,2020-11-07T11:55:18Z,MERGED,True,9,1,2,https://github.com/Qinch,mbedtls guidance,1,[],https://github.com/civetweb/civetweb/pull/925,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/925#issuecomment-706202494,,"Codecov Report

Merging #925 into mbedtls will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff            @@
##           mbedtls     #925   +/-   ##
========================================
  Coverage    77.11%   77.11%           
========================================
  Files           14       14           
  Lines        10380    10380           
========================================
  Hits          8005     8005           
  Misses        2375     2375           



Impacted Files
Coverage Δ





unittest/public_func.c




src/sha1.inl




unittest/timertest.c




unittest/private.c




src/civetweb.c




src/handle_form.inl




unittest/main.c




unittest/shared.c




src/md5.inl




unittest/private_exe.c




... and 18 more






Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 8eb091a...3ce217e. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,926,2020-10-10T14:57:15Z,2020-10-10T16:33:24Z,2020-10-10T16:33:24Z,MERGED,True,8,3,1,https://github.com/Qinch,mbedtls.md update,1,[],https://github.com/civetweb/civetweb/pull/926,https://github.com/Qinch,1,https://github.com/civetweb/civetweb/pull/926,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,928,2020-10-11T12:49:43Z,2020-10-11T19:25:57Z,2020-10-11T19:25:57Z,MERGED,True,12,7,1,https://github.com/Qinch,mbedtls.md update,1,[],https://github.com/civetweb/civetweb/pull/928,https://github.com/Qinch,1,https://github.com/civetweb/civetweb/pull/928,docs/mbedtls update,docs/mbedtls update,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,928,2020-10-11T12:49:43Z,2020-10-11T19:25:57Z,2020-10-11T19:25:57Z,MERGED,True,12,7,1,https://github.com/Qinch,mbedtls.md update,1,[],https://github.com/civetweb/civetweb/pull/928,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/928#issuecomment-706710450,docs/mbedtls update,"Codecov Report

Merging #928 into mbedtls will decrease coverage by 0.00%.
The diff coverage is n/a.


@@             Coverage Diff             @@
##           mbedtls     #928      +/-   ##
===========================================
- Coverage    77.12%   77.11%   -0.01%     
===========================================
  Files           14       14              
  Lines        10380    10380              
===========================================
- Hits          8006     8005       -1     
- Misses        2374     2375       +1     



Impacted Files
Coverage Δ





src/civetweb.c
69.03% <0.00%> (-0.02%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 1b64692...8793b22. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,931,2020-10-25T13:00:38Z,2020-11-26T06:52:52Z,2020-11-26T06:52:52Z,CLOSED,False,1,1,1,https://github.com/06022000,Update mingw.cmd,1,[],https://github.com/civetweb/civetweb/pull/931,https://github.com/06022000,1,https://github.com/civetweb/civetweb/pull/931,i just made the description clear,i just made the description clear,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,931,2020-10-25T13:00:38Z,2020-11-26T06:52:52Z,2020-11-26T06:52:52Z,CLOSED,False,1,1,1,https://github.com/06022000,Update mingw.cmd,1,[],https://github.com/civetweb/civetweb/pull/931,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/931#issuecomment-716150706,i just made the description clear,"Codecov Report

Merging #931 into master will increase coverage by 0.00%.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #931   +/-   ##
=======================================
  Coverage   77.03%   77.04%           
=======================================
  Files          14       14           
  Lines       10393    10393           
=======================================
+ Hits         8006     8007    +1     
+ Misses       2387     2386    -1     



Impacted Files
Coverage Δ





src/civetweb.c
68.91% <0.00%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 68c0a7c...0e752fb. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,932,2020-10-28T10:38:29Z,2020-10-28T19:30:19Z,2020-10-29T04:18:34Z,MERGED,True,2,1,1,https://github.com/Dialga,Update main.c,1,[],https://github.com/civetweb/civetweb/pull/932,https://github.com/Dialga,1,https://github.com/civetweb/civetweb/pull/932,Don't redefine _XOPEN_SOURCE,Don't redefine _XOPEN_SOURCE,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,932,2020-10-28T10:38:29Z,2020-10-28T19:30:19Z,2020-10-29T04:18:34Z,MERGED,True,2,1,1,https://github.com/Dialga,Update main.c,1,[],https://github.com/civetweb/civetweb/pull/932,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/932#issuecomment-717973679,Don't redefine _XOPEN_SOURCE,"Codecov Report

Merging #932 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #932   +/-   ##
=======================================
  Coverage   76.91%   76.91%           
=======================================
  Files          14       14           
  Lines       10417    10417           
=======================================
  Hits         8012     8012           
  Misses       2405     2405           



Impacted Files
Coverage Δ





src/main.c
1.35% <ø> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 78aac66...228f6f4. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,932,2020-10-28T10:38:29Z,2020-10-28T19:30:19Z,2020-10-29T04:18:34Z,MERGED,True,2,1,1,https://github.com/Dialga,Update main.c,1,[],https://github.com/civetweb/civetweb/pull/932,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/932#issuecomment-718160056,Don't redefine _XOPEN_SOURCE,"Thanks.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,934,2020-10-29T05:29:03Z,2020-10-29T10:57:57Z,2020-10-30T03:39:55Z,MERGED,True,1,0,1,https://github.com/Dialga,Undefine printf after use,1,[],https://github.com/civetweb/civetweb/pull/934,https://github.com/Dialga,1,https://github.com/civetweb/civetweb/pull/934,Undefine printf for amalgamation build,Undefine printf for amalgamation build,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,934,2020-10-29T05:29:03Z,2020-10-29T10:57:57Z,2020-10-30T03:39:55Z,MERGED,True,1,0,1,https://github.com/Dialga,Undefine printf after use,1,[],https://github.com/civetweb/civetweb/pull/934,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/934#issuecomment-718469816,Undefine printf for amalgamation build,"Codecov Report

Merging #934 into master will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #934   +/-   ##
=======================================
  Coverage   76.91%   76.91%           
=======================================
  Files          14       14           
  Lines       10417    10417           
=======================================
  Hits         8012     8012           
  Misses       2405     2405           



Impacted Files
Coverage Δ





src/main.c
1.35% <ø> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update c291824...1734110. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,935,2020-10-29T12:04:29Z,2020-10-29T12:43:39Z,2020-10-29T12:43:39Z,MERGED,True,1,1,1,https://github.com/vaind,Stop flag lock - fix missing functions,1,[],https://github.com/civetweb/civetweb/pull/935,https://github.com/vaind,1,https://github.com/civetweb/civetweb/pull/935,"I see the stop flag can be now optionally switched from volatile to atomic/lock protected 👍
However, adding the flag -DSTOP_FLAG_NEEDS_LOCK actually breaks the build:
...
src/civetweb.c:2898:19: warning: implicit declaration of function 'mg_atomic_add' is invalid in C99 [-Wimplicit-function-declaration]
        stop_flag_t sf = mg_atomic_add(f, 0);
                         ^
src/civetweb.c:2905:19: warning: implicit declaration of function 'mg_atomic_add' is invalid in C99 [-Wimplicit-function-declaration]
        stop_flag_t sf = mg_atomic_add(f, 0);
                         ^
src/civetweb.c:2914:8: warning: implicit declaration of function 'mg_atomic_compare_and_swap' is invalid in C99 [-Wimplicit-function-declaration]
                sf = mg_atomic_compare_and_swap(f, *f, v);
                     ^
...","I see the stop flag can be now optionally switched from volatile to atomic/lock protected 👍
However, adding the flag -DSTOP_FLAG_NEEDS_LOCK actually breaks the build:
...
src/civetweb.c:2898:19: warning: implicit declaration of function 'mg_atomic_add' is invalid in C99 [-Wimplicit-function-declaration]
        stop_flag_t sf = mg_atomic_add(f, 0);
                         ^
src/civetweb.c:2905:19: warning: implicit declaration of function 'mg_atomic_add' is invalid in C99 [-Wimplicit-function-declaration]
        stop_flag_t sf = mg_atomic_add(f, 0);
                         ^
src/civetweb.c:2914:8: warning: implicit declaration of function 'mg_atomic_compare_and_swap' is invalid in C99 [-Wimplicit-function-declaration]
                sf = mg_atomic_compare_and_swap(f, *f, v);
                     ^
...",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,935,2020-10-29T12:04:29Z,2020-10-29T12:43:39Z,2020-10-29T12:43:39Z,MERGED,True,1,1,1,https://github.com/vaind,Stop flag lock - fix missing functions,1,[],https://github.com/civetweb/civetweb/pull/935,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/935#issuecomment-718727912,"I see the stop flag can be now optionally switched from volatile to atomic/lock protected 👍
However, adding the flag -DSTOP_FLAG_NEEDS_LOCK actually breaks the build:
...
src/civetweb.c:2898:19: warning: implicit declaration of function 'mg_atomic_add' is invalid in C99 [-Wimplicit-function-declaration]
        stop_flag_t sf = mg_atomic_add(f, 0);
                         ^
src/civetweb.c:2905:19: warning: implicit declaration of function 'mg_atomic_add' is invalid in C99 [-Wimplicit-function-declaration]
        stop_flag_t sf = mg_atomic_add(f, 0);
                         ^
src/civetweb.c:2914:8: warning: implicit declaration of function 'mg_atomic_compare_and_swap' is invalid in C99 [-Wimplicit-function-declaration]
                sf = mg_atomic_compare_and_swap(f, *f, v);
                     ^
...","I see the stop flag can be now optionally switched from volatile to atomic/lock protected 👍

Yes it can. I'm still convinced it is not necessary on any real world CPU (x86, x64, ARM, PPC), but a hypothetical CPU might be defined in some theoretical PhD thesis ...",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,939,2020-11-07T10:08:28Z,2020-11-08T10:11:25Z,2020-11-08T10:11:46Z,MERGED,True,6,1,1,https://github.com/jodogne,Adding HTTP methods for write access to files in WEBDAV,1,[],https://github.com/civetweb/civetweb/pull/939,https://github.com/jodogne,1,https://github.com/civetweb/civetweb/pull/939,This modification is successfully used in the context of the WEBDAV server of Orthanc (DICOM server for medical imaging).,This modification is successfully used in the context of the WEBDAV server of Orthanc (DICOM server for medical imaging).,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,939,2020-11-07T10:08:28Z,2020-11-08T10:11:25Z,2020-11-08T10:11:46Z,MERGED,True,6,1,1,https://github.com/jodogne,Adding HTTP methods for write access to files in WEBDAV,1,[],https://github.com/civetweb/civetweb/pull/939,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/939#issuecomment-723430274,This modification is successfully used in the context of the WEBDAV server of Orthanc (DICOM server for medical imaging).,"Codecov Report

Merging #939 (8a1722e) into master (2fe6637) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #939   +/-   ##
=======================================
  Coverage   77.45%   77.45%           
=======================================
  Files          14       14           
  Lines       10660    10660           
=======================================
  Hits         8257     8257           
  Misses       2403     2403           



Impacted Files
Coverage Δ





src/civetweb.c
68.98% <ø> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 2fe6637...8a1722e. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,939,2020-11-07T10:08:28Z,2020-11-08T10:11:25Z,2020-11-08T10:11:46Z,MERGED,True,6,1,1,https://github.com/jodogne,Adding HTTP methods for write access to files in WEBDAV,1,[],https://github.com/civetweb/civetweb/pull/939,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/939#issuecomment-723556011,This modification is successfully used in the context of the WEBDAV server of Orthanc (DICOM server for medical imaging).,Thanks. Merged.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,940,2020-11-07T10:51:14Z,2020-11-08T12:03:53Z,2020-11-08T12:03:53Z,MERGED,True,18,0,2,https://github.com/jodogne,Added interface to disable keep_alive on a per-connection basis,1,[],https://github.com/civetweb/civetweb/pull/940,https://github.com/jodogne,1,https://github.com/civetweb/civetweb/pull/940,This changeset adds new function mg_disable_connection_keep_alive() to disable HTTP keep alive on a per-connection basis. Full context can be found in issue #727.,This changeset adds new function mg_disable_connection_keep_alive() to disable HTTP keep alive on a per-connection basis. Full context can be found in issue #727.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,940,2020-11-07T10:51:14Z,2020-11-08T12:03:53Z,2020-11-08T12:03:53Z,MERGED,True,18,0,2,https://github.com/jodogne,Added interface to disable keep_alive on a per-connection basis,1,[],https://github.com/civetweb/civetweb/pull/940,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/940#issuecomment-723434394,This changeset adds new function mg_disable_connection_keep_alive() to disable HTTP keep alive on a per-connection basis. Full context can be found in issue #727.,"Codecov Report

Merging #940 (fb1c679) into master (2fe6637) will decrease coverage by 0.02%.
The diff coverage is 0.00%.


@@            Coverage Diff             @@
##           master     #940      +/-   ##
==========================================
- Coverage   77.45%   77.43%   -0.03%     
==========================================
  Files          14       14              
  Lines       10660    10663       +3     
==========================================
  Hits         8257     8257              
- Misses       2403     2406       +3     



Impacted Files
Coverage Δ





src/civetweb.c
68.94% <0.00%> (-0.04%)
⬇️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 2fe6637...fb1c679. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,943,2020-11-18T10:33:54Z,2020-11-20T07:32:28Z,2020-11-20T07:32:45Z,MERGED,True,32,15,1,https://github.com/xtne6f,Restore tray icon after shell (explorer) restarts,1,[],https://github.com/civetweb/civetweb/pull/943,https://github.com/xtne6f,1,https://github.com/civetweb/civetweb/pull/943,"Windows Explorer sometimes crashes and restarts in some environments. When this happens, the tray icon of Civetweb disappears. This commit fixes the problem.
(A little difficult to explain in my words, please look at this.)","Windows Explorer sometimes crashes and restarts in some environments. When this happens, the tray icon of Civetweb disappears. This commit fixes the problem.
(A little difficult to explain in my words, please look at this.)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,943,2020-11-18T10:33:54Z,2020-11-20T07:32:28Z,2020-11-20T07:32:45Z,MERGED,True,32,15,1,https://github.com/xtne6f,Restore tray icon after shell (explorer) restarts,1,[],https://github.com/civetweb/civetweb/pull/943,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/943#issuecomment-729746396,"Windows Explorer sometimes crashes and restarts in some environments. When this happens, the tray icon of Civetweb disappears. This commit fixes the problem.
(A little difficult to explain in my words, please look at this.)","Codecov Report

Merging #943 (b15708a) into master (7bb01ed) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #943   +/-   ##
=======================================
  Coverage   77.39%   77.39%           
=======================================
  Files          14       14           
  Lines       10669    10669           
=======================================
  Hits         8257     8257           
  Misses       2412     2412           



Impacted Files
Coverage Δ





src/main.c
1.35% <ø> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 7bb01ed...b15708a. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,943,2020-11-18T10:33:54Z,2020-11-20T07:32:28Z,2020-11-20T07:32:45Z,MERGED,True,32,15,1,https://github.com/xtne6f,Restore tray icon after shell (explorer) restarts,1,[],https://github.com/civetweb/civetweb/pull/943,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/943#issuecomment-730961819,"Windows Explorer sometimes crashes and restarts in some environments. When this happens, the tray icon of Civetweb disappears. This commit fixes the problem.
(A little difficult to explain in my words, please look at this.)","Thank you, merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,945,2020-11-21T18:56:43Z,2020-11-21T21:23:47Z,2020-11-21T21:23:58Z,MERGED,True,1,1,1,https://github.com/paperino1983,fix FindLibDl.cmake file name into the CMakeLists.txt,1,[],https://github.com/civetweb/civetweb/pull/945,https://github.com/paperino1983,1,https://github.com/civetweb/civetweb/pull/945,case sensitive file fix if installing in UNIX like system (eg: Linux),case sensitive file fix if installing in UNIX like system (eg: Linux),True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,945,2020-11-21T18:56:43Z,2020-11-21T21:23:47Z,2020-11-21T21:23:58Z,MERGED,True,1,1,1,https://github.com/paperino1983,fix FindLibDl.cmake file name into the CMakeLists.txt,1,[],https://github.com/civetweb/civetweb/pull/945,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/945#issuecomment-731638756,case sensitive file fix if installing in UNIX like system (eg: Linux),"Thanks.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,946,2020-11-24T07:44:31Z,2020-11-25T15:46:00Z,2020-11-25T15:46:00Z,MERGED,True,1,1,1,https://github.com/PiotrZierhoffer,civetweb: WebSockets support for Zephyr,1,[],https://github.com/civetweb/civetweb/pull/946,https://github.com/PiotrZierhoffer,1,https://github.com/civetweb/civetweb/pull/946,"Enable websockets support for Zephyr.
To use, pass -DCIVETWEB_ENABLE_WEBSOCKETS=ON to west.
Signed-off-by: Alexander Kozhinov AlexanderKozhinov@yandex.com
Signed-off-by: Piotr Zierhoffer pzierhoffer@antmicro.com","Enable websockets support for Zephyr.
To use, pass -DCIVETWEB_ENABLE_WEBSOCKETS=ON to west.
Signed-off-by: Alexander Kozhinov AlexanderKozhinov@yandex.com
Signed-off-by: Piotr Zierhoffer pzierhoffer@antmicro.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,946,2020-11-24T07:44:31Z,2020-11-25T15:46:00Z,2020-11-25T15:46:00Z,MERGED,True,1,1,1,https://github.com/PiotrZierhoffer,civetweb: WebSockets support for Zephyr,1,[],https://github.com/civetweb/civetweb/pull/946,https://github.com/PiotrZierhoffer,2,https://github.com/civetweb/civetweb/pull/946#issuecomment-732718491,"Enable websockets support for Zephyr.
To use, pass -DCIVETWEB_ENABLE_WEBSOCKETS=ON to west.
Signed-off-by: Alexander Kozhinov AlexanderKozhinov@yandex.com
Signed-off-by: Piotr Zierhoffer pzierhoffer@antmicro.com","@bel2125 as we are bumping the Zephyr's fork of civetweb, it would be super helpful if we could merge this as it is (without commit sha changes). We'd probably need to push things to your fork before we merge in the Zephyr tree in future.
Of course if there's something to be fixed from your perspective, please let us know",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,946,2020-11-24T07:44:31Z,2020-11-25T15:46:00Z,2020-11-25T15:46:00Z,MERGED,True,1,1,1,https://github.com/PiotrZierhoffer,civetweb: WebSockets support for Zephyr,1,[],https://github.com/civetweb/civetweb/pull/946,https://github.com/apps/codecov,3,https://github.com/civetweb/civetweb/pull/946#issuecomment-732917080,"Enable websockets support for Zephyr.
To use, pass -DCIVETWEB_ENABLE_WEBSOCKETS=ON to west.
Signed-off-by: Alexander Kozhinov AlexanderKozhinov@yandex.com
Signed-off-by: Piotr Zierhoffer pzierhoffer@antmicro.com","Codecov Report

Merging #946 (e6903b8) into master (f70fa77) will increase coverage by 0.29%.
The diff coverage is 100.00%.


@@            Coverage Diff             @@
##           master     #946      +/-   ##
==========================================
+ Coverage   77.10%   77.40%   +0.29%     
==========================================
  Files          13       14       +1     
  Lines        9785    10661     +876     
==========================================
+ Hits         7545     8252     +707     
- Misses       2240     2409     +169     



Impacted Files
Coverage Δ





src/civetweb.c
68.88% <100.00%> (+0.21%)
⬆️


unittest/timertest.c
98.26% <0.00%> (-0.43%)
⬇️


unittest/public_server.c
98.36% <0.00%> (-0.19%)
⬇️


unittest/private.c
99.76% <0.00%> (-0.07%)
⬇️


src/handle_form.inl
72.86% <0.00%> (ø)



src/response.inl
68.31% <0.00%> (ø)



unittest/public_func.c
99.72% <0.00%> (+0.04%)
⬆️


unittest/main.c
76.92% <0.00%> (+1.11%)
⬆️


src/timer.inl
87.50% <0.00%> (+1.13%)
⬆️


... and 3 more






Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update f70fa77...e6903b8. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,947,2020-11-27T23:09:23Z,2020-12-01T22:51:06Z,2020-12-01T22:51:06Z,MERGED,True,2,2,1,https://github.com/timgates42,"docs: fix simple typo, pendig -> pending",1,[],https://github.com/civetweb/civetweb/pull/947,https://github.com/timgates42,1,https://github.com/civetweb/civetweb/pull/947,"There is a small typo in src/third_party/sqlite3.c.
Should read pending rather than pendig.","There is a small typo in src/third_party/sqlite3.c.
Should read pending rather than pendig.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,947,2020-11-27T23:09:23Z,2020-12-01T22:51:06Z,2020-12-01T22:51:06Z,MERGED,True,2,2,1,https://github.com/timgates42,"docs: fix simple typo, pendig -> pending",1,[],https://github.com/civetweb/civetweb/pull/947,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/947#issuecomment-735026414,"There is a small typo in src/third_party/sqlite3.c.
Should read pending rather than pendig.","Codecov Report

Merging #947 (4e15289) into master (73fd993) will increase coverage by 0.00%.
The diff coverage is n/a.


@@           Coverage Diff           @@
##           master     #947   +/-   ##
=======================================
  Coverage   77.40%   77.41%           
=======================================
  Files          14       14           
  Lines       10661    10661           
=======================================
+ Hits         8252     8253    +1     
+ Misses       2409     2408    -1     



Impacted Files
Coverage Δ





src/civetweb.c
68.90% <0.00%> (+0.01%)
⬆️




Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 73fd993...4e15289. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,947,2020-11-27T23:09:23Z,2020-12-01T22:51:06Z,2020-12-01T22:51:06Z,MERGED,True,2,2,1,https://github.com/timgates42,"docs: fix simple typo, pendig -> pending",1,[],https://github.com/civetweb/civetweb/pull/947,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/947#issuecomment-736870194,"There is a small typo in src/third_party/sqlite3.c.
Should read pending rather than pendig.","sqlite3 is a third party source code, taken from https://www.sqlite.org/download.html
The upstream source already has this typo. We can certainly fix it here for our local copy, but it will have the same typo again once we update to a new version. As to my knowledge, the upstream source of SQLite3 is not on github, but there are just some mirrors, e.g. for android: https://raw.githubusercontent.com/android/platform_external_sqlite/master/dist/sqlite3.c - with exactly the same typo.",True,{'THUMBS_UP': ['https://github.com/timgates42']}
civetweb/civetweb,https://github.com/civetweb/civetweb,948,2020-12-04T10:38:06Z,2020-12-06T10:51:52Z,2020-12-06T10:51:52Z,MERGED,True,4,6,2,https://github.com/hunyadi-dev,Fix checks for available compiler flags,1,[],https://github.com/civetweb/civetweb/pull/948,https://github.com/hunyadi-dev,1,https://github.com/civetweb/civetweb/pull/948,"Some of my builds of a project bundling civetweb showed these kinds of errors on Ubuntu with both ninja and make using either clang or gcc, resulting in compilation failure:
clang: error: no such file or directory: '/W4'
clang: error: no such file or directory: '/Wd4820'
clang: error: no such file or directory: '/WX'
Hope this fixes the issue :)","Some of my builds of a project bundling civetweb showed these kinds of errors on Ubuntu with both ninja and make using either clang or gcc, resulting in compilation failure:
clang: error: no such file or directory: '/W4'
clang: error: no such file or directory: '/Wd4820'
clang: error: no such file or directory: '/WX'
Hope this fixes the issue :)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,948,2020-12-04T10:38:06Z,2020-12-06T10:51:52Z,2020-12-06T10:51:52Z,MERGED,True,4,6,2,https://github.com/hunyadi-dev,Fix checks for available compiler flags,1,[],https://github.com/civetweb/civetweb/pull/948,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/948#issuecomment-739485550,"Some of my builds of a project bundling civetweb showed these kinds of errors on Ubuntu with both ninja and make using either clang or gcc, resulting in compilation failure:
clang: error: no such file or directory: '/W4'
clang: error: no such file or directory: '/Wd4820'
clang: error: no such file or directory: '/WX'
Hope this fixes the issue :)","Interestingly, I did not have this issue in Ubuntu 18.04 LTS using gcc 7.5.0",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,952,2020-12-15T13:59:01Z,2020-12-17T16:24:49Z,2020-12-17T16:24:49Z,MERGED,True,4,1,1,https://github.com/gjasny,CMake: Add option to disable Debug tools,1,[],https://github.com/civetweb/civetweb/pull/952,https://github.com/gjasny,1,https://github.com/civetweb/civetweb/pull/952,"Sometimes one needs the CMake Debug build type
to select the Windows Debug runtime. But at the same
time the verbose logging output might be unwanted.
This PR adds the CIVETWEB_ENABLE_DEBUG_TOOLS option
to disable extensive logging and assertion.","Sometimes one needs the CMake Debug build type
to select the Windows Debug runtime. But at the same
time the verbose logging output might be unwanted.
This PR adds the CIVETWEB_ENABLE_DEBUG_TOOLS option
to disable extensive logging and assertion.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,953,2020-12-22T13:00:52Z,2020-12-22T18:28:11Z,2020-12-22T18:28:22Z,MERGED,True,6,0,1,https://github.com/drew-wells,Support for OpenSSL 1.0.x/1.1.x,1,[],https://github.com/civetweb/civetweb/pull/953,https://github.com/drew-wells,1,https://github.com/civetweb/civetweb/pull/953,"Added WITH_OPENSSL_API_1_0 and WITH_OPENSSL_1_1 to allow compiling against OpenSSL 1.0.x/1.1.x.  The default is still OpenSSL 1.1.x.
I couldn't compile against OpenSSL 1.0.x without modifying the Makefile so I added these two WITH's.","Added WITH_OPENSSL_API_1_0 and WITH_OPENSSL_1_1 to allow compiling against OpenSSL 1.0.x/1.1.x.  The default is still OpenSSL 1.1.x.
I couldn't compile against OpenSSL 1.0.x without modifying the Makefile so I added these two WITH's.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,953,2020-12-22T13:00:52Z,2020-12-22T18:28:11Z,2020-12-22T18:28:22Z,MERGED,True,6,0,1,https://github.com/drew-wells,Support for OpenSSL 1.0.x/1.1.x,1,[],https://github.com/civetweb/civetweb/pull/953,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/953#issuecomment-749706891,"Added WITH_OPENSSL_API_1_0 and WITH_OPENSSL_1_1 to allow compiling against OpenSSL 1.0.x/1.1.x.  The default is still OpenSSL 1.1.x.
I couldn't compile against OpenSSL 1.0.x without modifying the Makefile so I added these two WITH's.","Thanks for your contribution.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,956,2021-01-13T11:27:30Z,2021-01-13T18:02:04Z,2021-01-19T03:46:59Z,MERGED,True,7,2,1,https://github.com/Dialga,Update UserManual.md,1,[],https://github.com/civetweb/civetweb/pull/956,https://github.com/Dialga,1,https://github.com/civetweb/civetweb/pull/956,Document more of mg.request_info,Document more of mg.request_info,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,956,2021-01-13T11:27:30Z,2021-01-13T18:02:04Z,2021-01-19T03:46:59Z,MERGED,True,7,2,1,https://github.com/Dialga,Update UserManual.md,1,[],https://github.com/civetweb/civetweb/pull/956,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/956#issuecomment-759620685,Document more of mg.request_info,"Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,957,2021-01-14T09:42:24Z,2021-01-14T20:27:39Z,2021-01-14T20:28:23Z,MERGED,True,31,14,3,https://github.com/xhpohanka,mbedtls: read out unprocessed TLS data,4,[],https://github.com/civetweb/civetweb/pull/957,https://github.com/xhpohanka,1,https://github.com/civetweb/civetweb/pull/957,There can be data remaining inside TLS layer so read them out before we poll a socket,There can be data remaining inside TLS layer so read them out before we poll a socket,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,957,2021-01-14T09:42:24Z,2021-01-14T20:27:39Z,2021-01-14T20:28:23Z,MERGED,True,31,14,3,https://github.com/xhpohanka,mbedtls: read out unprocessed TLS data,4,[],https://github.com/civetweb/civetweb/pull/957,https://github.com/apps/codecov,2,https://github.com/civetweb/civetweb/pull/957#issuecomment-760113812,There can be data remaining inside TLS layer so read them out before we poll a socket,"Codecov Report

Merging #957 (10e0ef0) into mbedtls (935b493) will not change coverage.
The diff coverage is n/a.


@@           Coverage Diff            @@
##           mbedtls     #957   +/-   ##
========================================
  Coverage    77.12%   77.12%           
========================================
  Files           14       14           
  Lines        10391    10391           
========================================
  Hits          8014     8014           
  Misses        2377     2377           



Impacted Files
Coverage Δ





src/civetweb.c
69.04% <ø> (ø)





Continue to review full report at Codecov.

Legend - Click here to learn more
Δ = absolute <relative> (impact), ø = not affected, ? = missing data
Powered by Codecov. Last update 935b493...10e0ef0. Read the comment docs.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,957,2021-01-14T09:42:24Z,2021-01-14T20:27:39Z,2021-01-14T20:28:23Z,MERGED,True,31,14,3,https://github.com/xhpohanka,mbedtls: read out unprocessed TLS data,4,[],https://github.com/civetweb/civetweb/pull/957,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/957#issuecomment-760456935,There can be data remaining inside TLS layer so read them out before we poll a socket,"Thanks for this fix.
I will do some tests later this month.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,958,2021-01-15T17:31:19Z,2021-01-17T08:54:29Z,2021-01-19T03:46:38Z,MERGED,True,1,1,1,https://github.com/Dialga,Fix invalid uuid() call in mod_lua.inl,1,[],https://github.com/civetweb/civetweb/pull/958,https://github.com/Dialga,1,https://github.com/civetweb/civetweb/pull/958,Fix invalid uuid() call,Fix invalid uuid() call,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,959,2021-01-15T17:44:19Z,2021-01-17T08:54:57Z,2021-01-19T03:46:29Z,MERGED,True,1,1,1,https://github.com/Dialga,Fix oom url_encode() error msg,1,[],https://github.com/civetweb/civetweb/pull/959,https://github.com/Dialga,1,https://github.com/civetweb/civetweb/pull/959,fix oom url_encode error msg,fix oom url_encode error msg,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,960,2021-01-15T18:18:02Z,2021-01-17T08:55:19Z,2021-01-19T03:46:18Z,MERGED,True,1,0,1,https://github.com/Dialga,Register send_http_redirect() in lua,1,[],https://github.com/civetweb/civetweb/pull/960,https://github.com/Dialga,1,https://github.com/civetweb/civetweb/pull/960,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,961,2021-01-15T19:19:19Z,2021-01-17T08:56:04Z,2021-01-19T03:46:01Z,MERGED,True,37,6,1,https://github.com/Dialga,Document all remaining exported lua functions,1,[],https://github.com/civetweb/civetweb/pull/961,https://github.com/Dialga,1,https://github.com/civetweb/civetweb/pull/961,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,961,2021-01-15T19:19:19Z,2021-01-17T08:56:04Z,2021-01-19T03:46:01Z,MERGED,True,37,6,1,https://github.com/Dialga,Document all remaining exported lua functions,1,[],https://github.com/civetweb/civetweb/pull/961,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/961#issuecomment-761757011,,"Thanks a lot.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/DL6ER,1,https://github.com/civetweb/civetweb/pull/964,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/964#issuecomment-766151976,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","The problem with allowing // is a security issue on Windows.
If you have a file /path/to/protected/file/hidden.txt, Windows happily accepts /path/to/protected/file//hidden.txt, /path//to/protected//file/hidden.txt, /path\to/./protected////////file/hidden.txt, ...
All filenames are ""normalized"" before any pattern matching is done for hiding files, rewriting URLs, checking access rights, ...
Pattern matching does not work well with all these possible variations.
While Windows will not work with a : in the path, Linux will accept it as part of a filename.
Probably it is not a security issue in your particular case, but it may open one in a different use case - this needs to be thoroughly checked and tested.
Query strings are not modified this way. Would it be possible to add a ? before the protocol, e.g. instead of POST /api/lists/https://somedomain.com use POST /api/lists/?https://somedomain.com or POST /api/lists?https://somedomain.com?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/DL6ER,3,https://github.com/civetweb/civetweb/pull/964#issuecomment-766163200,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","The problem with allowing // is a security issue on Windows.

Could we skip this safety measure on other operating systems?

All filenames are ""normalized"" before any pattern matching is done

Maybe this ""sanitization"" could be done closer where things are checked. And/or could we have a raw URI that does not get modified where I could extract my path from? (even when this would be some kind of hack in my eyes).

Would it be possible to add a ? before the protocol

Unfortunately, this would not work for us. This would be in violation with the REST principles of creating the item at that POSTed endpoint.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/DL6ER,4,https://github.com/civetweb/civetweb/pull/964#issuecomment-766323428,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","Just to provide some further support for my last statement and for you to see why this is important in the concept of RESTful APIs (which is what everyone should do if they design a API for web services, but I may be biased here):

source
So if {id} happens to be a URL, this currently cannot be done with civetweb (without my proposed or a similar modification).
If you prefer this being an option rather than anything else, I could change my proposed solution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/964#issuecomment-766748785,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","Could we skip this safety measure on other operating systems?

There are some Windows related issues that will not occur on Windows.
However, the issue with pattern matching is not operating system specific.

Maybe this ""sanitization"" could be done closer where things are checked.

There are several stages where pattern matching is done, so this might be quite complicated.
In particular, if you use install C handler functions, then you should match the /path/to/handler before, to select the handler that should be called, but have ""some extra args"" in /path/to/handler/some///extra/./args unmodified.
In other words, if you have ""/path/to/handler"" registered, then ""../path//to/./handler/some///extra/./args/..."" would be ""/path/to/handler/some///extra/./args/..."".
I think this would cause a lot of troubles.

...or could we have a raw URI that does not get modified where I could extract my path from? (even when this would be some kind of hack in my eyes).

That would be more in line with the current design. You have the ""sanitized"" path, that is used for handler selection, pattern matching, ... but all handlers can access a request path ""as it is"".

This would be in violation with the REST principles ...
...
So if {id} happens to be a URL, this currently cannot be done with civetweb (without my proposed or a similar modification).

I'm also using REST whenever it makes sense. REST allows you some freedom in API design and does not forbid query strings. Also the {id} could have some encoding (translating http:// into something).
But I understand if you want to use the URL unmodified.

If you prefer this being an option rather than anything else, I could change my proposed solution.

I will figure out a solution that does not cause problems in other parts of the code, and will come back to you in a few days.",True,{'THUMBS_UP': ['https://github.com/DL6ER']}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/964#issuecomment-767503187,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","I have a little test script (https://github.com/civetweb/civetweb/blob/master/test/page7.lua) to reflect the request back to the client (I don't know if you are using Lua, it's similar for C and for CGI).
The result looks like this:

The handler would be mg.script_name = ""/opt/civetweb/docroot/file/index.lua"", the C handler path would be just /file.
In particular, the path_info (CGI: PATH_INFO) part should not be modified.
While the front of the URL should be sanitized:

the ""path_info"" part should not.
I think this is doable, but requires some changes in different functions.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/DL6ER,7,https://github.com/civetweb/civetweb/pull/964#issuecomment-767689819,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","Thanks for your investigations and you continued support.
I'm using c here and compile civetweb directly into my own code (for static linking).
I see that path_info isn't exposed (it is contained in struct mg_connection which is oblique for the application). I guess you would like to make this property available somewhere easily accessible like in struct mg_request_info ?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/bel2125,8,https://github.com/civetweb/civetweb/pull/964#issuecomment-767716332,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","I guess you would like to make this property available somewhere easily accessible like in struct mg_request_info ?

Exactly.
Differences between the C API, the Lua interface and the CGI interfaces are often not intentional (if they don't have restrictions due to the implementation language)., but some implementation or merge request solved it only on one place while not adding it to the others. Every now and then I add missing functions already available in another interface.
Conceptually C and Lua handlers should be similar (and CGI is close, but there are more technical restrictions).
If it is solved for one of them, it is solved for all ... C, Lua and CGI all access the same data.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/bel2125,9,https://github.com/civetweb/civetweb/pull/964#issuecomment-771408631,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","I had a look at some existing applications and found some where not sanitizing the path_info will cause some problems.
A handler for an URL like http:////media/ will need this for the path_info part of the URI.
The request_link could be left unmodified.
This will take a little longer to implement, but it will not cause problems in known applications.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/DL6ER,10,https://github.com/civetweb/civetweb/pull/964#issuecomment-771433653,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds",I'm happy with whatever works for all applications. I will explore this (= an additional variable) myself and come back to you here. Thanks for your support. I do really appreciate it.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/bel2125,11,https://github.com/civetweb/civetweb/pull/964#issuecomment-790890549,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","Probably we have a similar issue with trailing dots: #973
They are also removed from the path of ""real files"" for security reasons.
And the solution might be similar: Add an additional field to store the original request URL.

I will explore this (= an additional variable) myself and come back to you here.

Did you already find some time to take a look at this?
Or should I have a look?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,964,2021-01-23T06:04:36Z,2021-03-06T08:57:47Z,2021-03-06T10:04:06Z,CLOSED,False,3,2,1,https://github.com/DL6ER,Replacing // by / is not always correct,1,[],https://github.com/civetweb/civetweb/pull/964,https://github.com/DL6ER,12,https://github.com/civetweb/civetweb/pull/964#issuecomment-791871516,"We use civetweb to create a RESTful API for our application. Unfortunately, there is an error in how civetweb handles URIs.
Assume we add an URL to some lists using our (or, in fact, any RESTful API):
POST /api/lists/https://somedomain.com

(this is, of course, sent URI-encoded as POST /api/lists/https%3A%2F%2Fsomedomain.com)
Our API receives, however,
POST /api/lists/http:/somedomain.com

which is incorrect (mind the https:/ with only one / after the :).
This is caused by:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 8484 to 8487
      in
      98abdf9
    
  
  
    

        
          
           /* For Windows, the files/folders ""x"" and ""x."" (with a dot but without 
        

        
          
            * extension) are identical. Replace all ""./"" by ""/"" and remove a ""."" at 
        

        
          
            * the end. Also replace all ""//"" by ""/"". Repeat until there is no ""./"" 
        

        
          
            * or ""//"" anymore. 
        
    
  



  
    
      civetweb/src/civetweb.c
    
    
        Lines 8511 to 8520
      in
      98abdf9
    
  
  
    

        
          
           } else if (*in == '/') { 
        

        
          
           	/* replace // by / */ 
        

        
          
           	*out_end++ = '/'; 
        

        
          
           	do { 
        

        
          
           		in++; 
        

        
          
           	} while (*in == '/'); 
        

        
          
           } else { 
        

        
          
           	*out_end++ = *in; 
        

        
          
           	in++; 
        

        
          
           } 
        
    
  



Possible solutions:

Removing this else if solves the problem for us (simple fix)
Check if the // is intended as they are following a : and correspond to a protocol where we should accept them (minimal changes fix without introducing a new option) <- this is what this PR adds","@bel2125 Sorry, I forgot to commit/push my changes. I did that now in a separate PR to keep things clean: #975
Please take a look at it and test it. Specifically the CGI and LUA changes are something I did in a ""best effort"" way as I'm not actually using them myself.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,965,2021-01-30T18:57:01Z,2021-02-01T07:23:27Z,2021-02-01T07:23:39Z,MERGED,True,594,89,10,https://github.com/bel2125,Merge mbedtls into master,24,[],https://github.com/civetweb/civetweb/pull/965,https://github.com/bel2125,1,https://github.com/civetweb/civetweb/pull/965,Merge mbedtls branch into master branch,Merge mbedtls branch into master branch,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,966,2021-02-04T13:42:02Z,2021-02-04T19:43:58Z,2021-02-04T19:44:01Z,MERGED,True,1,0,1,https://github.com/xhpohanka,fix memory leak in mbedtls support,1,[],https://github.com/civetweb/civetweb/pull/966,https://github.com/xhpohanka,1,https://github.com/civetweb/civetweb/pull/966,"failed mbed_ssl_handshake() was causing a leak because of
forgotten mbedtls_ssl_free call in a cleanup branch","failed mbed_ssl_handshake() was causing a leak because of
forgotten mbedtls_ssl_free call in a cleanup branch",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,966,2021-02-04T13:42:02Z,2021-02-04T19:43:58Z,2021-02-04T19:44:01Z,MERGED,True,1,0,1,https://github.com/xhpohanka,fix memory leak in mbedtls support,1,[],https://github.com/civetweb/civetweb/pull/966,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/966#issuecomment-773559112,"failed mbed_ssl_handshake() was causing a leak because of
forgotten mbedtls_ssl_free call in a cleanup branch","Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,970,2021-02-18T19:41:28Z,2021-02-19T08:22:44Z,2021-02-19T08:22:54Z,MERGED,True,1,0,1,https://github.com/dprandle,Fix for failing to build in Debug on Mac Big Sur (v11.2.1) using clang 11.0.0,1,[],https://github.com/civetweb/civetweb/pull/970,https://github.com/dprandle,1,https://github.com/civetweb/civetweb/pull/970,"As mentioned in subject line, when building in debug for Mac using clang 11, the build fails with

Adding the include fixes the error","As mentioned in subject line, when building in debug for Mac using clang 11, the build fails with

Adding the include fixes the error",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,970,2021-02-18T19:41:28Z,2021-02-19T08:22:44Z,2021-02-19T08:22:54Z,MERGED,True,1,0,1,https://github.com/dprandle,Fix for failing to build in Debug on Mac Big Sur (v11.2.1) using clang 11.0.0,1,[],https://github.com/civetweb/civetweb/pull/970,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/970#issuecomment-781916294,"As mentioned in subject line, when building in debug for Mac using clang 11, the build fails with

Adding the include fixes the error","Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,971,2021-02-23T12:24:23Z,2021-02-23T21:14:10Z,2021-02-23T21:14:10Z,MERGED,True,17,2,3,https://github.com/wolframroesler,"Add ""after connection was closed"" callback",1,[],https://github.com/civetweb/civetweb/pull/971,https://github.com/wolframroesler,1,https://github.com/civetweb/civetweb/pull/971,"The existing callback connection_close is called before the connection is closed (i. e., while the connection is still open). This commit adds a new callback, connection_closed, which is called after the SSL shutdown is complete and the socket has been closed.","The existing callback connection_close is called before the connection is closed (i. e., while the connection is still open). This commit adds a new callback, connection_closed, which is called after the SSL shutdown is complete and the socket has been closed.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,971,2021-02-23T12:24:23Z,2021-02-23T21:14:10Z,2021-02-23T21:14:10Z,MERGED,True,17,2,3,https://github.com/wolframroesler,"Add ""after connection was closed"" callback",1,[],https://github.com/civetweb/civetweb/pull/971,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/971#issuecomment-784517035,"The existing callback connection_close is called before the connection is closed (i. e., while the connection is still open). This commit adds a new callback, connection_closed, which is called after the SSL shutdown is complete and the socket has been closed.","Thanks for your contribution.
This extension is meaningful and there is even some documentation 👍",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,975,2021-03-06T04:27:29Z,2021-03-06T08:57:54Z,2021-03-06T10:04:20Z,MERGED,True,43,14,3,https://github.com/DL6ER,Add dedicated raw (local) URI variable,4,[],https://github.com/civetweb/civetweb/pull/975,https://github.com/DL6ER,1,https://github.com/civetweb/civetweb/pull/975,"This PR is the successor of #964 (check there for further details). TL;DR: We need a dedicated buffer containing the raw (local) URI sent by the requestor. This is currently overwritten by some cleaning routine inside civetweb.
Motivations for my changes:
The memory used for local_uri propagates downwards a rather long way. It is set in mg_get_response (which is an external interface and never used inside civetweb.c):

  
    
      civetweb/src/civetweb.c
    
    
         Line 17910
      in
      37300a0
    
  
  
    

        
          
           conn->request_info.local_uri = conn->request_info.request_uri; 
        
    
  


or in process_new_connection which is the relevant part for now:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 18455 to 18487
      in
      37300a0
    
  
  
    

        
          
           if (ebuf[0] == '\0') { 
        

        
          
           	uri_type = get_uri_type(conn->request_info.request_uri); 
        

        
          
           	switch (uri_type) { 
        

        
          
           	case 1: 
        

        
          
           		/* Asterisk */ 
        

        
          
           		conn->request_info.local_uri = 0; 
        

        
          
           		/* TODO: Deal with '*'. */ 
        

        
          
           		break; 
        

        
          
           	case 2: 
        

        
          
           		/* relative uri */ 
        

        
          
           		conn->request_info.local_uri = conn->request_info.request_uri; 
        

        
          
           		break; 
        

        
          
           	case 3: 
        

        
          
           	case 4: 
        

        
          
           		/* absolute uri (with/without port) */ 
        

        
          
           		hostend = get_rel_url_at_current_server( 
        

        
          
           		    conn->request_info.request_uri, conn); 
        

        
          
           		if (hostend) { 
        

        
          
           			conn->request_info.local_uri = hostend; 
        

        
          
           		} else { 
        

        
          
           			conn->request_info.local_uri = NULL; 
        

        
          
           		} 
        

        
          
           		break; 
        

        
          
           	default: 
        

        
          
           		mg_snprintf(conn, 
        

        
          
           		            NULL, /* No truncation check for ebuf */ 
        

        
          
           		            ebuf, 
        

        
          
           		            sizeof(ebuf), 
        

        
          
           		            ""Invalid URI""); 
        

        
          
           		mg_send_http_error(conn, 400, ""%s"", ebuf); 
        

        
          
           		conn->request_info.local_uri = NULL; 
        

        
          
           		break; 
        

        
          
           	} 
        
    
  


The request_uri originates from

  
    
      civetweb/src/civetweb.c
    
    
         Line 10695
      in
      37300a0
    
  
  
    

        
          
           ri->request_uri = buf; 
        
    
  


Where buf points to a part of memory containing the raw request:

  
    
      civetweb/src/civetweb.c
    
    
         Line 18806
      in
      37300a0
    
  
  
    

        
          
           conn->buf = (char *)mg_malloc_ctx(ctx->max_request_size, conn->phys_ctx); 
        
    
  



This shows that the function we're currently discussing about (remove_dot_segments()), modifies memory from the original request:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 14087 to 14089
      in
      37300a0
    
  
  
    

        
          
           /* 1.4. clean URIs, so a path like allowed_dir/../forbidden_file is 
        

        
          
            * not possible */ 
        

        
          
           remove_dot_segments((char *)ri->local_uri); 
        
    
  


this seems counterintuitive as I'd expect the original buf to never get really modified at all.
Solution (ri = conn->request_info in the following):

Instead of storing the snippet from the original const char* buf in ri->local_uri, we store it in ri->local_uri_raw, and
set ri->local_uri = ri->local_uri_raw.
Before calling the cleaning routine remove_dot_segments() (which used to wrongfully cast away the const attribute), we duplicate the memory in ri->local_uri_raw to have a dedicated buffer we can modify at will (which does not point to some memory inside buf).

Fixes #964 and #973","This PR is the successor of #964 (check there for further details). TL;DR: We need a dedicated buffer containing the raw (local) URI sent by the requestor. This is currently overwritten by some cleaning routine inside civetweb.
Motivations for my changes:
The memory used for local_uri propagates downwards a rather long way. It is set in mg_get_response (which is an external interface and never used inside civetweb.c):

  
    
      civetweb/src/civetweb.c
    
    
         Line 17910
      in
      37300a0
    
  
  
    

        
          
           conn->request_info.local_uri = conn->request_info.request_uri; 
        
    
  


or in process_new_connection which is the relevant part for now:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 18455 to 18487
      in
      37300a0
    
  
  
    

        
          
           if (ebuf[0] == '\0') { 
        

        
          
           	uri_type = get_uri_type(conn->request_info.request_uri); 
        

        
          
           	switch (uri_type) { 
        

        
          
           	case 1: 
        

        
          
           		/* Asterisk */ 
        

        
          
           		conn->request_info.local_uri = 0; 
        

        
          
           		/* TODO: Deal with '*'. */ 
        

        
          
           		break; 
        

        
          
           	case 2: 
        

        
          
           		/* relative uri */ 
        

        
          
           		conn->request_info.local_uri = conn->request_info.request_uri; 
        

        
          
           		break; 
        

        
          
           	case 3: 
        

        
          
           	case 4: 
        

        
          
           		/* absolute uri (with/without port) */ 
        

        
          
           		hostend = get_rel_url_at_current_server( 
        

        
          
           		    conn->request_info.request_uri, conn); 
        

        
          
           		if (hostend) { 
        

        
          
           			conn->request_info.local_uri = hostend; 
        

        
          
           		} else { 
        

        
          
           			conn->request_info.local_uri = NULL; 
        

        
          
           		} 
        

        
          
           		break; 
        

        
          
           	default: 
        

        
          
           		mg_snprintf(conn, 
        

        
          
           		            NULL, /* No truncation check for ebuf */ 
        

        
          
           		            ebuf, 
        

        
          
           		            sizeof(ebuf), 
        

        
          
           		            ""Invalid URI""); 
        

        
          
           		mg_send_http_error(conn, 400, ""%s"", ebuf); 
        

        
          
           		conn->request_info.local_uri = NULL; 
        

        
          
           		break; 
        

        
          
           	} 
        
    
  


The request_uri originates from

  
    
      civetweb/src/civetweb.c
    
    
         Line 10695
      in
      37300a0
    
  
  
    

        
          
           ri->request_uri = buf; 
        
    
  


Where buf points to a part of memory containing the raw request:

  
    
      civetweb/src/civetweb.c
    
    
         Line 18806
      in
      37300a0
    
  
  
    

        
          
           conn->buf = (char *)mg_malloc_ctx(ctx->max_request_size, conn->phys_ctx); 
        
    
  



This shows that the function we're currently discussing about (remove_dot_segments()), modifies memory from the original request:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 14087 to 14089
      in
      37300a0
    
  
  
    

        
          
           /* 1.4. clean URIs, so a path like allowed_dir/../forbidden_file is 
        

        
          
            * not possible */ 
        

        
          
           remove_dot_segments((char *)ri->local_uri); 
        
    
  


this seems counterintuitive as I'd expect the original buf to never get really modified at all.
Solution (ri = conn->request_info in the following):

Instead of storing the snippet from the original const char* buf in ri->local_uri, we store it in ri->local_uri_raw, and
set ri->local_uri = ri->local_uri_raw.
Before calling the cleaning routine remove_dot_segments() (which used to wrongfully cast away the const attribute), we duplicate the memory in ri->local_uri_raw to have a dedicated buffer we can modify at will (which does not point to some memory inside buf).

Fixes #964 and #973",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,975,2021-03-06T04:27:29Z,2021-03-06T08:57:54Z,2021-03-06T10:04:20Z,MERGED,True,43,14,3,https://github.com/DL6ER,Add dedicated raw (local) URI variable,4,[],https://github.com/civetweb/civetweb/pull/975,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/975#issuecomment-791897803,"This PR is the successor of #964 (check there for further details). TL;DR: We need a dedicated buffer containing the raw (local) URI sent by the requestor. This is currently overwritten by some cleaning routine inside civetweb.
Motivations for my changes:
The memory used for local_uri propagates downwards a rather long way. It is set in mg_get_response (which is an external interface and never used inside civetweb.c):

  
    
      civetweb/src/civetweb.c
    
    
         Line 17910
      in
      37300a0
    
  
  
    

        
          
           conn->request_info.local_uri = conn->request_info.request_uri; 
        
    
  


or in process_new_connection which is the relevant part for now:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 18455 to 18487
      in
      37300a0
    
  
  
    

        
          
           if (ebuf[0] == '\0') { 
        

        
          
           	uri_type = get_uri_type(conn->request_info.request_uri); 
        

        
          
           	switch (uri_type) { 
        

        
          
           	case 1: 
        

        
          
           		/* Asterisk */ 
        

        
          
           		conn->request_info.local_uri = 0; 
        

        
          
           		/* TODO: Deal with '*'. */ 
        

        
          
           		break; 
        

        
          
           	case 2: 
        

        
          
           		/* relative uri */ 
        

        
          
           		conn->request_info.local_uri = conn->request_info.request_uri; 
        

        
          
           		break; 
        

        
          
           	case 3: 
        

        
          
           	case 4: 
        

        
          
           		/* absolute uri (with/without port) */ 
        

        
          
           		hostend = get_rel_url_at_current_server( 
        

        
          
           		    conn->request_info.request_uri, conn); 
        

        
          
           		if (hostend) { 
        

        
          
           			conn->request_info.local_uri = hostend; 
        

        
          
           		} else { 
        

        
          
           			conn->request_info.local_uri = NULL; 
        

        
          
           		} 
        

        
          
           		break; 
        

        
          
           	default: 
        

        
          
           		mg_snprintf(conn, 
        

        
          
           		            NULL, /* No truncation check for ebuf */ 
        

        
          
           		            ebuf, 
        

        
          
           		            sizeof(ebuf), 
        

        
          
           		            ""Invalid URI""); 
        

        
          
           		mg_send_http_error(conn, 400, ""%s"", ebuf); 
        

        
          
           		conn->request_info.local_uri = NULL; 
        

        
          
           		break; 
        

        
          
           	} 
        
    
  


The request_uri originates from

  
    
      civetweb/src/civetweb.c
    
    
         Line 10695
      in
      37300a0
    
  
  
    

        
          
           ri->request_uri = buf; 
        
    
  


Where buf points to a part of memory containing the raw request:

  
    
      civetweb/src/civetweb.c
    
    
         Line 18806
      in
      37300a0
    
  
  
    

        
          
           conn->buf = (char *)mg_malloc_ctx(ctx->max_request_size, conn->phys_ctx); 
        
    
  



This shows that the function we're currently discussing about (remove_dot_segments()), modifies memory from the original request:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 14087 to 14089
      in
      37300a0
    
  
  
    

        
          
           /* 1.4. clean URIs, so a path like allowed_dir/../forbidden_file is 
        

        
          
            * not possible */ 
        

        
          
           remove_dot_segments((char *)ri->local_uri); 
        
    
  


this seems counterintuitive as I'd expect the original buf to never get really modified at all.
Solution (ri = conn->request_info in the following):

Instead of storing the snippet from the original const char* buf in ri->local_uri, we store it in ri->local_uri_raw, and
set ri->local_uri = ri->local_uri_raw.
Before calling the cleaning routine remove_dot_segments() (which used to wrongfully cast away the const attribute), we duplicate the memory in ri->local_uri_raw to have a dedicated buffer we can modify at will (which does not point to some memory inside buf).

Fixes #964 and #973","You code looks very good.
I don't know why the coverage/coveralls unit test fails.
I think the local_uri in civetweb.h should still be const, because the outside users of civetweb.h should not modify it.
I will modify this and add API documentation for this field.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,975,2021-03-06T04:27:29Z,2021-03-06T08:57:54Z,2021-03-06T10:04:20Z,MERGED,True,43,14,3,https://github.com/DL6ER,Add dedicated raw (local) URI variable,4,[],https://github.com/civetweb/civetweb/pull/975,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/975#issuecomment-791898054,"This PR is the successor of #964 (check there for further details). TL;DR: We need a dedicated buffer containing the raw (local) URI sent by the requestor. This is currently overwritten by some cleaning routine inside civetweb.
Motivations for my changes:
The memory used for local_uri propagates downwards a rather long way. It is set in mg_get_response (which is an external interface and never used inside civetweb.c):

  
    
      civetweb/src/civetweb.c
    
    
         Line 17910
      in
      37300a0
    
  
  
    

        
          
           conn->request_info.local_uri = conn->request_info.request_uri; 
        
    
  


or in process_new_connection which is the relevant part for now:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 18455 to 18487
      in
      37300a0
    
  
  
    

        
          
           if (ebuf[0] == '\0') { 
        

        
          
           	uri_type = get_uri_type(conn->request_info.request_uri); 
        

        
          
           	switch (uri_type) { 
        

        
          
           	case 1: 
        

        
          
           		/* Asterisk */ 
        

        
          
           		conn->request_info.local_uri = 0; 
        

        
          
           		/* TODO: Deal with '*'. */ 
        

        
          
           		break; 
        

        
          
           	case 2: 
        

        
          
           		/* relative uri */ 
        

        
          
           		conn->request_info.local_uri = conn->request_info.request_uri; 
        

        
          
           		break; 
        

        
          
           	case 3: 
        

        
          
           	case 4: 
        

        
          
           		/* absolute uri (with/without port) */ 
        

        
          
           		hostend = get_rel_url_at_current_server( 
        

        
          
           		    conn->request_info.request_uri, conn); 
        

        
          
           		if (hostend) { 
        

        
          
           			conn->request_info.local_uri = hostend; 
        

        
          
           		} else { 
        

        
          
           			conn->request_info.local_uri = NULL; 
        

        
          
           		} 
        

        
          
           		break; 
        

        
          
           	default: 
        

        
          
           		mg_snprintf(conn, 
        

        
          
           		            NULL, /* No truncation check for ebuf */ 
        

        
          
           		            ebuf, 
        

        
          
           		            sizeof(ebuf), 
        

        
          
           		            ""Invalid URI""); 
        

        
          
           		mg_send_http_error(conn, 400, ""%s"", ebuf); 
        

        
          
           		conn->request_info.local_uri = NULL; 
        

        
          
           		break; 
        

        
          
           	} 
        
    
  


The request_uri originates from

  
    
      civetweb/src/civetweb.c
    
    
         Line 10695
      in
      37300a0
    
  
  
    

        
          
           ri->request_uri = buf; 
        
    
  


Where buf points to a part of memory containing the raw request:

  
    
      civetweb/src/civetweb.c
    
    
         Line 18806
      in
      37300a0
    
  
  
    

        
          
           conn->buf = (char *)mg_malloc_ctx(ctx->max_request_size, conn->phys_ctx); 
        
    
  



This shows that the function we're currently discussing about (remove_dot_segments()), modifies memory from the original request:

  
    
      civetweb/src/civetweb.c
    
    
        Lines 14087 to 14089
      in
      37300a0
    
  
  
    

        
          
           /* 1.4. clean URIs, so a path like allowed_dir/../forbidden_file is 
        

        
          
            * not possible */ 
        

        
          
           remove_dot_segments((char *)ri->local_uri); 
        
    
  


this seems counterintuitive as I'd expect the original buf to never get really modified at all.
Solution (ri = conn->request_info in the following):

Instead of storing the snippet from the original const char* buf in ri->local_uri, we store it in ri->local_uri_raw, and
set ri->local_uri = ri->local_uri_raw.
Before calling the cleaning routine remove_dot_segments() (which used to wrongfully cast away the const attribute), we duplicate the memory in ri->local_uri_raw to have a dedicated buffer we can modify at will (which does not point to some memory inside buf).

Fixes #964 and #973","Merge failed.
Please reload the page.
This branch has conflicts that must be resolved
to resolve conflicts before continuing.
???",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,976,2021-03-07T18:47:54Z,2021-03-07T19:40:23Z,2021-03-07T19:40:35Z,MERGED,True,3,3,3,https://github.com/paperino1983,docs/api/ fix link to mg_printf md page,1,[],https://github.com/civetweb/civetweb/pull/976,https://github.com/paperino1983,1,https://github.com/civetweb/civetweb/pull/976,Signed-off-by: Lorenzo Canepa paperino1983@gmail.com,Signed-off-by: Lorenzo Canepa paperino1983@gmail.com,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,976,2021-03-07T18:47:54Z,2021-03-07T19:40:23Z,2021-03-07T19:40:35Z,MERGED,True,3,3,3,https://github.com/paperino1983,docs/api/ fix link to mg_printf md page,1,[],https://github.com/civetweb/civetweb/pull/976,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/976#issuecomment-792339567,Signed-off-by: Lorenzo Canepa paperino1983@gmail.com,"Thank you.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,984,2021-03-24T11:56:10Z,2021-03-27T21:11:05Z,2021-03-27T21:11:44Z,MERGED,True,40,20,2,https://github.com/t-j-h,quick OpenSSL-3.0 API support,3,[],https://github.com/civetweb/civetweb/pull/984,https://github.com/t-j-h,1,https://github.com/civetweb/civetweb/pull/984,"This is a quick PR to support compiling with OpenSSL 3.0.
It is unclear if you want more OPENSSL_API defines like this or if you want to unify the code for 1.1 and 3.0 support under a separate define (like for example OPENSSL_API_1_1_PLUS) so I've created this PR so you can see what it looks like.
At this stage this is just testing compilation and getting your feedback on the approach you want used.","This is a quick PR to support compiling with OpenSSL 3.0.
It is unclear if you want more OPENSSL_API defines like this or if you want to unify the code for 1.1 and 3.0 support under a separate define (like for example OPENSSL_API_1_1_PLUS) so I've created this PR so you can see what it looks like.
At this stage this is just testing compilation and getting your feedback on the approach you want used.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,984,2021-03-24T11:56:10Z,2021-03-27T21:11:05Z,2021-03-27T21:11:44Z,MERGED,True,40,20,2,https://github.com/t-j-h,quick OpenSSL-3.0 API support,3,[],https://github.com/civetweb/civetweb/pull/984,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/984#issuecomment-806166102,"This is a quick PR to support compiling with OpenSSL 3.0.
It is unclear if you want more OPENSSL_API defines like this or if you want to unify the code for 1.1 and 3.0 support under a separate define (like for example OPENSSL_API_1_1_PLUS) so I've created this PR so you can see what it looks like.
At this stage this is just testing compilation and getting your feedback on the approach you want used.","Thank you for your contribution.
I think adding ""OPENSSL_API_3_0"" as you did is the consistent with the current code, and it would also allow a OPENSSL_API_4_0 if we ever need it, while OPENSSL_API_1_1_PLUS might be confusing then.
The TravisCI build currently complains about multiple SSL libraries
https://travis-ci.org/github/civetweb/civetweb/jobs/764222885#L914
I think it has to be
#if (defined(OPENSSL_API_1_0) || defined(OPENSSL_API_1_1) || defined(OPENSSL_API_3_0)) && defined(USE_MBEDTLS)

instead of
#if (defined(OPENSSL_API_1_0) || defined(OPENSSL_API_1_1))                     \
    || defined(OPENSSL_API_3_0) && defined(USE_MBEDTLS)

.... all these #if ... #error ... #endif code blocks are there to raise a compile error if there are some inconsistent defines.
Consistent is: if NO_SSL is defined, none of this four options must be set.
If NO_SSL is not defined, exactly one of this four options must be set.
If more than one of these four options is set, it is an error in any case.
Probably there is a solution like this, but I don't know if this works for all compilers:
#if (defined(OPENSSL_API_1_0) + defined(OPENSSL_API_1_1) + defined(OPENSSL_API_3_0) + defined(USE_MBEDTLS)) != 1
#error ""Define exactly one of TLS library!""
#endif",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,984,2021-03-24T11:56:10Z,2021-03-27T21:11:05Z,2021-03-27T21:11:44Z,MERGED,True,40,20,2,https://github.com/t-j-h,quick OpenSSL-3.0 API support,3,[],https://github.com/civetweb/civetweb/pull/984,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/984#issuecomment-806407718,"This is a quick PR to support compiling with OpenSSL 3.0.
It is unclear if you want more OPENSSL_API defines like this or if you want to unify the code for 1.1 and 3.0 support under a separate define (like for example OPENSSL_API_1_1_PLUS) so I've created this PR so you can see what it looks like.
At this stage this is just testing compilation and getting your feedback on the approach you want used.","Yes, this additional commit fixes the error in the unit tests (except coveralls, but this seems to be a general configuration error I can't find).
Is this already sufficient to use OpenSSL 3.0 (Alpha 13, since there is no final version yet)?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,984,2021-03-24T11:56:10Z,2021-03-27T21:11:05Z,2021-03-27T21:11:44Z,MERGED,True,40,20,2,https://github.com/t-j-h,quick OpenSSL-3.0 API support,3,[],https://github.com/civetweb/civetweb/pull/984,https://github.com/t-j-h,4,https://github.com/civetweb/civetweb/pull/984#issuecomment-808610600,"This is a quick PR to support compiling with OpenSSL 3.0.
It is unclear if you want more OPENSSL_API defines like this or if you want to unify the code for 1.1 and 3.0 support under a separate define (like for example OPENSSL_API_1_1_PLUS) so I've created this PR so you can see what it looks like.
At this stage this is just testing compilation and getting your feedback on the approach you want used.","And with the one additional change just pushed I've got working browser to civetweb on OpenSSL 3.0
I haven't tested client certificate authentication as yet - but the base logic is working.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,984,2021-03-24T11:56:10Z,2021-03-27T21:11:05Z,2021-03-27T21:11:44Z,MERGED,True,40,20,2,https://github.com/t-j-h,quick OpenSSL-3.0 API support,3,[],https://github.com/civetweb/civetweb/pull/984,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/984#issuecomment-808797688,"This is a quick PR to support compiling with OpenSSL 3.0.
It is unclear if you want more OPENSSL_API defines like this or if you want to unify the code for 1.1 and 3.0 support under a separate define (like for example OPENSSL_API_1_1_PLUS) so I've created this PR so you can see what it looks like.
At this stage this is just testing compilation and getting your feedback on the approach you want used.","Thank you.
Do you plan to add more commits to this PR, or do you think this state should be merged?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,984,2021-03-24T11:56:10Z,2021-03-27T21:11:05Z,2021-03-27T21:11:44Z,MERGED,True,40,20,2,https://github.com/t-j-h,quick OpenSSL-3.0 API support,3,[],https://github.com/civetweb/civetweb/pull/984,https://github.com/t-j-h,6,https://github.com/civetweb/civetweb/pull/984#issuecomment-808800963,"This is a quick PR to support compiling with OpenSSL 3.0.
It is unclear if you want more OPENSSL_API defines like this or if you want to unify the code for 1.1 and 3.0 support under a separate define (like for example OPENSSL_API_1_1_PLUS) so I've created this PR so you can see what it looks like.
At this stage this is just testing compilation and getting your feedback on the approach you want used.",It is working for me for TLS usage tested against various browsers so in a state to be able to be merged in my view. Any issues encountered can go into separate PRs.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,984,2021-03-24T11:56:10Z,2021-03-27T21:11:05Z,2021-03-27T21:11:44Z,MERGED,True,40,20,2,https://github.com/t-j-h,quick OpenSSL-3.0 API support,3,[],https://github.com/civetweb/civetweb/pull/984,https://github.com/bel2125,7,https://github.com/civetweb/civetweb/pull/984#issuecomment-808802985,"This is a quick PR to support compiling with OpenSSL 3.0.
It is unclear if you want more OPENSSL_API defines like this or if you want to unify the code for 1.1 and 3.0 support under a separate define (like for example OPENSSL_API_1_1_PLUS) so I've created this PR so you can see what it looks like.
At this stage this is just testing compilation and getting your feedback on the approach you want used.","Then I will merge this PR now.
Thanks for your contribution.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,990,2021-04-04T08:43:44Z,2021-04-05T03:48:56Z,2021-04-06T03:34:07Z,CLOSED,False,11,9,1,https://github.com/pavel-pimenov,reduce stack size,1,[],https://github.com/civetweb/civetweb/pull/990,https://github.com/pavel-pimenov,1,https://github.com/civetweb/civetweb/pull/990,fix #989,fix #989,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,990,2021-04-04T08:43:44Z,2021-04-05T03:48:56Z,2021-04-06T03:34:07Z,CLOSED,False,11,9,1,https://github.com/pavel-pimenov,reduce stack size,1,[],https://github.com/civetweb/civetweb/pull/990,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/990#issuecomment-813085988,fix #989,"I still think #989 does not need to be ""fixed"", since it is not ""broken"".
struct mg_client_cert client_cert; is nothing else than five pointers with negligible stack usage:

  
    
      civetweb/include/civetweb.h
    
    
        Lines 210 to 216
      in
      365b389
    
  
  
    

        
          
           struct mg_client_cert { 
        

        
          
           	void *peer_cert; 
        

        
          
           	const char *subject; 
        

        
          
           	const char *issuer; 
        

        
          
           	const char *serial; 
        

        
          
           	const char *finger; 
        

        
          
           }; 
        
    
  


If I do not use one structure but 5 isolated pointers, this false positive warning (#989) is probably gone?
Allocating a structure dynamically will probably remove one false positive warning, but it introduces another warning: malloc (or mg_malloc) may return NULL.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,992,2021-04-15T21:04:18Z,2021-04-16T18:20:04Z,2021-04-16T18:32:43Z,MERGED,True,1,1,1,https://github.com/gromero,Bump minimum required CMake version,1,[],https://github.com/civetweb/civetweb/pull/992,https://github.com/gromero,1,https://github.com/civetweb/civetweb/pull/992,"Hi,
Could the following simple change be reviewed please?
It will bump the minimum required CMake version to 2.8.12 now that it's released.
That will also avoid the following deprecation warning:
CMake Deprecation Warning at .../civetweb/CMakeLists.txt:2 (cmake_minimum_required):
Compatibility with CMake < 2.8.12 will be removed from a future version of
CMake.
Thanks,
Gustavo","Hi,
Could the following simple change be reviewed please?
It will bump the minimum required CMake version to 2.8.12 now that it's released.
That will also avoid the following deprecation warning:
CMake Deprecation Warning at .../civetweb/CMakeLists.txt:2 (cmake_minimum_required):
Compatibility with CMake < 2.8.12 will be removed from a future version of
CMake.
Thanks,
Gustavo",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,992,2021-04-15T21:04:18Z,2021-04-16T18:20:04Z,2021-04-16T18:32:43Z,MERGED,True,1,1,1,https://github.com/gromero,Bump minimum required CMake version,1,[],https://github.com/civetweb/civetweb/pull/992,https://github.com/gromero,2,https://github.com/civetweb/civetweb/pull/992#issuecomment-820747525,"Hi,
Could the following simple change be reviewed please?
It will bump the minimum required CMake version to 2.8.12 now that it's released.
That will also avoid the following deprecation warning:
CMake Deprecation Warning at .../civetweb/CMakeLists.txt:2 (cmake_minimum_required):
Compatibility with CMake < 2.8.12 will be removed from a future version of
CMake.
Thanks,
Gustavo",@bel2125 Hi. Is the CI coverage/coverall error a regression? or it's a CI issue?,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,992,2021-04-15T21:04:18Z,2021-04-16T18:20:04Z,2021-04-16T18:32:43Z,MERGED,True,1,1,1,https://github.com/gromero,Bump minimum required CMake version,1,[],https://github.com/civetweb/civetweb/pull/992,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/992#issuecomment-821405243,"Hi,
Could the following simple change be reviewed please?
It will bump the minimum required CMake version to 2.8.12 now that it's released.
That will also avoid the following deprecation warning:
CMake Deprecation Warning at .../civetweb/CMakeLists.txt:2 (cmake_minimum_required):
Compatibility with CMake < 2.8.12 will be removed from a future version of
CMake.
Thanks,
Gustavo","Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,992,2021-04-15T21:04:18Z,2021-04-16T18:20:04Z,2021-04-16T18:32:43Z,MERGED,True,1,1,1,https://github.com/gromero,Bump minimum required CMake version,1,[],https://github.com/civetweb/civetweb/pull/992,https://github.com/gromero,4,https://github.com/civetweb/civetweb/pull/992#issuecomment-821430762,"Hi,
Could the following simple change be reviewed please?
It will bump the minimum required CMake version to 2.8.12 now that it's released.
That will also avoid the following deprecation warning:
CMake Deprecation Warning at .../civetweb/CMakeLists.txt:2 (cmake_minimum_required):
Compatibility with CMake < 2.8.12 will be removed from a future version of
CMake.
Thanks,
Gustavo","Thank you.
Merged

Thanks @bel2125",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,995,2021-04-21T00:06:59Z,2021-04-21T05:24:55Z,2021-04-21T05:25:11Z,MERGED,True,13,0,2,https://github.com/justinsg,CMake: add option for zlib support,1,[],https://github.com/civetweb/civetweb/pull/995,https://github.com/justinsg,1,https://github.com/civetweb/civetweb/pull/995,"When building with Make, WITH_ZLIB=1 can be used to enable compression with zlib, therefore this option should also be available when building with CMake.","When building with Make, WITH_ZLIB=1 can be used to enable compression with zlib, therefore this option should also be available when building with CMake.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,995,2021-04-21T00:06:59Z,2021-04-21T05:24:55Z,2021-04-21T05:25:11Z,MERGED,True,13,0,2,https://github.com/justinsg,CMake: add option for zlib support,1,[],https://github.com/civetweb/civetweb/pull/995,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/995#issuecomment-823785750,"When building with Make, WITH_ZLIB=1 can be used to enable compression with zlib, therefore this option should also be available when building with CMake.","Thank you for this patch.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,996,2021-04-27T16:22:04Z,2021-04-27T18:51:35Z,2021-04-27T18:52:25Z,MERGED,True,15,0,2,https://github.com/macedot,Adds getMethod for CivetServer class,1,[],https://github.com/civetweb/civetweb/pull/996,https://github.com/macedot,1,https://github.com/civetweb/civetweb/pull/996,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,996,2021-04-27T16:22:04Z,2021-04-27T18:51:35Z,2021-04-27T18:52:25Z,MERGED,True,15,0,2,https://github.com/macedot,Adds getMethod for CivetServer class,1,[],https://github.com/civetweb/civetweb/pull/996,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/996#issuecomment-827837548,,"a) Please always provide a description: https://github.com/civetweb/civetweb/blob/master/docs/Contribution.md#why-does-a-pull-request-need-a-description
b) Note that the C++ interface is not complete and most likely never will be - in contrast to the C interface.
Yes, I will merge it.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,996,2021-04-27T16:22:04Z,2021-04-27T18:51:35Z,2021-04-27T18:52:25Z,MERGED,True,15,0,2,https://github.com/macedot,Adds getMethod for CivetServer class,1,[],https://github.com/civetweb/civetweb/pull/996,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/996#issuecomment-827838534,,"Thank you for the patch.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,997,2021-04-30T09:12:03Z,,2021-04-30T14:11:17Z,OPEN,False,7,0,1,https://github.com/mglettig,Fix Debug-Build for Zephyr,1,[],https://github.com/civetweb/civetweb/pull/997,https://github.com/mglettig,1,https://github.com/civetweb/civetweb/pull/997,Do nothing in DEBUG_TRACE_FUNC for ZEPHYR as Zephyr-RTOS lacks support for function flockfile (POSIX_DEVICE_IO).,Do nothing in DEBUG_TRACE_FUNC for ZEPHYR as Zephyr-RTOS lacks support for function flockfile (POSIX_DEVICE_IO).,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,997,2021-04-30T09:12:03Z,,2021-04-30T14:11:17Z,OPEN,False,7,0,1,https://github.com/mglettig,Fix Debug-Build for Zephyr,1,[],https://github.com/civetweb/civetweb/pull/997,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/997#issuecomment-830123055,Do nothing in DEBUG_TRACE_FUNC for ZEPHYR as Zephyr-RTOS lacks support for function flockfile (POSIX_DEVICE_IO).,"The design compliant way to do this would be to #define DEBUG_TRACE() to an appropriate debug function, or to nothing.
If you define it to nothing, I wonder why you set the DEBUG define for CivetWeb at all.

Did you try to set a define for DEBUG_TRACE?
What cannot be solved by using your own define for this?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,998,2021-05-04T23:01:27Z,2021-05-05T05:28:25Z,2021-05-05T05:28:39Z,MERGED,True,1,1,1,https://github.com/JensWallgren,Mistyped function call in docs,1,[],https://github.com/civetweb/civetweb/pull/998,https://github.com/JensWallgren,1,https://github.com/civetweb/civetweb/pull/998,Found a mistyped function call in the example section of the Embedding doc.,Found a mistyped function call in the example section of the Embedding doc.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,998,2021-05-04T23:01:27Z,2021-05-05T05:28:25Z,2021-05-05T05:28:39Z,MERGED,True,1,1,1,https://github.com/JensWallgren,Mistyped function call in docs,1,[],https://github.com/civetweb/civetweb/pull/998,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/998#issuecomment-832421507,Found a mistyped function call in the example section of the Embedding doc.,"You are right.
Thank you.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1004,2021-06-06T14:47:38Z,2021-06-07T18:29:02Z,2021-06-07T18:29:46Z,MERGED,True,22,13,1,https://github.com/sbj-ss,fix url-encoded payloads,2,[],https://github.com/civetweb/civetweb/pull/1004,https://github.com/sbj-ss,1,https://github.com/civetweb/civetweb/pull/1004,"Currently the buffered chunks fed to mg_url_decode()  may tear an encoded byte causing misinterpretation.
For example, ""%42"" is split on the buffer boundary into ""%4"" (which isn't recognized as a codepoint) and ""2"" and then recombined as ""%42"" instead of decoding. Things become even worse when unicode characters are present.
A more general and robust solution would be returning the number of bytes actually processed from mg_url_decode() but unfortunately I have no time to fix and test this in the whole project scope.","Currently the buffered chunks fed to mg_url_decode()  may tear an encoded byte causing misinterpretation.
For example, ""%42"" is split on the buffer boundary into ""%4"" (which isn't recognized as a codepoint) and ""2"" and then recombined as ""%42"" instead of decoding. Things become even worse when unicode characters are present.
A more general and robust solution would be returning the number of bytes actually processed from mg_url_decode() but unfortunately I have no time to fix and test this in the whole project scope.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1004,2021-06-06T14:47:38Z,2021-06-07T18:29:02Z,2021-06-07T18:29:46Z,MERGED,True,22,13,1,https://github.com/sbj-ss,fix url-encoded payloads,2,[],https://github.com/civetweb/civetweb/pull/1004,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1004#issuecomment-856165014,"Currently the buffered chunks fed to mg_url_decode()  may tear an encoded byte causing misinterpretation.
For example, ""%42"" is split on the buffer boundary into ""%4"" (which isn't recognized as a codepoint) and ""2"" and then recombined as ""%42"" instead of decoding. Things become even worse when unicode characters are present.
A more general and robust solution would be returning the number of bytes actually processed from mg_url_decode() but unfortunately I have no time to fix and test this in the whole project scope.",Thank you for your contribution. Merged.,True,{'HOORAY': ['https://github.com/sbj-ss']}
civetweb/civetweb,https://github.com/civetweb/civetweb,1006,2021-06-14T11:24:07Z,2021-06-15T19:09:22Z,2021-06-15T19:09:40Z,MERGED,True,4,4,2,https://github.com/kjeldflarup,Fix using NO_SSL_DL,1,[],https://github.com/civetweb/civetweb/pull/1006,https://github.com/kjeldflarup,1,https://github.com/civetweb/civetweb/pull/1006,"I had some problems using the NO_SSL_DL flag. Eventhough I was linking libcrypto in, then the code to load the library still was build.
I hope that I follow the conventions.
Solves: #1002
Signed-off-by: Kjeld Flarup kfa@deif.com","I had some problems using the NO_SSL_DL flag. Eventhough I was linking libcrypto in, then the code to load the library still was build.
I hope that I follow the conventions.
Solves: #1002
Signed-off-by: Kjeld Flarup kfa@deif.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1006,2021-06-14T11:24:07Z,2021-06-15T19:09:22Z,2021-06-15T19:09:40Z,MERGED,True,4,4,2,https://github.com/kjeldflarup,Fix using NO_SSL_DL,1,[],https://github.com/civetweb/civetweb/pull/1006,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1006#issuecomment-861761891,"I had some problems using the NO_SSL_DL flag. Eventhough I was linking libcrypto in, then the code to load the library still was build.
I hope that I follow the conventions.
Solves: #1002
Signed-off-by: Kjeld Flarup kfa@deif.com",Thank you. Merged,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1007,2021-06-15T12:48:23Z,2021-06-15T19:12:01Z,2021-06-15T19:12:47Z,MERGED,True,100,10,6,https://github.com/wolframroesler,Add mg_modify_passwords_file_ha1,2,[],https://github.com/civetweb/civetweb/pull/1007,https://github.com/wolframroesler,1,https://github.com/civetweb/civetweb/pull/1007,"This new function makes it possible to add an entry to the password file without making the plain-text password known to civetweb (in fact, the caller may not even know it). Instead, the HA1 hash that's  stored in the password file is passed as a parameter directly.","This new function makes it possible to add an entry to the password file without making the plain-text password known to civetweb (in fact, the caller may not even know it). Instead, the HA1 hash that's  stored in the password file is passed as a parameter directly.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1007,2021-06-15T12:48:23Z,2021-06-15T19:12:01Z,2021-06-15T19:12:47Z,MERGED,True,100,10,6,https://github.com/wolframroesler,Add mg_modify_passwords_file_ha1,2,[],https://github.com/civetweb/civetweb/pull/1007,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1007#issuecomment-861763804,"This new function makes it possible to add an entry to the password file without making the plain-text password known to civetweb (in fact, the caller may not even know it). Instead, the HA1 hash that's  stored in the password file is passed as a parameter directly.",Thank you for this extension and the documentation provided with it.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1009,2021-06-20T11:03:07Z,2021-06-20T17:49:12Z,2021-06-20T17:49:22Z,MERGED,True,1,1,1,https://github.com/girish946,"Fixed a typo in Makefile, this was causing 'make help' to fail",1,[],https://github.com/civetweb/civetweb/pull/1009,https://github.com/girish946,1,https://github.com/civetweb/civetweb/pull/1009,"Fixed a typo in Makefile, this was causing 'make help' to fail
Signed-off-by: Girish Joshi girish946@gmail.com","Fixed a typo in Makefile, this was causing 'make help' to fail
Signed-off-by: Girish Joshi girish946@gmail.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1009,2021-06-20T11:03:07Z,2021-06-20T17:49:12Z,2021-06-20T17:49:22Z,MERGED,True,1,1,1,https://github.com/girish946,"Fixed a typo in Makefile, this was causing 'make help' to fail",1,[],https://github.com/civetweb/civetweb/pull/1009,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1009#issuecomment-864589196,"Fixed a typo in Makefile, this was causing 'make help' to fail
Signed-off-by: Girish Joshi girish946@gmail.com","thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1010,2021-06-21T12:33:59Z,2021-06-26T08:18:18Z,2021-06-26T08:18:29Z,MERGED,True,1,0,1,https://github.com/jodogne,missing definition of OPENSSL_REMOVE_THREAD_STATE if OpenSSL 3.x,1,[],https://github.com/civetweb/civetweb/pull/1010,https://github.com/jodogne,1,https://github.com/civetweb/civetweb/pull/1010,"The function ERR_remove_thread_state() is deprecated since OpenSSL 1.1.0, and corresponds to an empty function. The macro OPENSSL_REMOVE_THREAD_STATE() is defined in civetweb.c as a no-op macro for OpenSSL 1.1.x, but this definition is missing in the case of the newly-released OpenSSL 3.x family, which causes an undefined symbol error while linking civetweb. This pull request introduces the missing definition.","The function ERR_remove_thread_state() is deprecated since OpenSSL 1.1.0, and corresponds to an empty function. The macro OPENSSL_REMOVE_THREAD_STATE() is defined in civetweb.c as a no-op macro for OpenSSL 1.1.x, but this definition is missing in the case of the newly-released OpenSSL 3.x family, which causes an undefined symbol error while linking civetweb. This pull request introduces the missing definition.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1010,2021-06-21T12:33:59Z,2021-06-26T08:18:18Z,2021-06-26T08:18:29Z,MERGED,True,1,0,1,https://github.com/jodogne,missing definition of OPENSSL_REMOVE_THREAD_STATE if OpenSSL 3.x,1,[],https://github.com/civetweb/civetweb/pull/1010,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1010#issuecomment-868967299,"The function ERR_remove_thread_state() is deprecated since OpenSSL 1.1.0, and corresponds to an empty function. The macro OPENSSL_REMOVE_THREAD_STATE() is defined in civetweb.c as a no-op macro for OpenSSL 1.1.x, but this definition is missing in the case of the newly-released OpenSSL 3.x family, which causes an undefined symbol error while linking civetweb. This pull request introduces the missing definition.","thank you
merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1013,2021-06-25T11:50:54Z,2021-06-26T08:55:23Z,2021-06-26T08:59:01Z,MERGED,True,23,32,2,https://github.com/wolframroesler,Fix static analysis findings,1,[],https://github.com/civetweb/civetweb/pull/1013,https://github.com/wolframroesler,1,https://github.com/civetweb/civetweb/pull/1013,"We (devolo AG) have rather strict requirements about source code passing static analysis (among other things, we require a good deal of SEI CERT compliance). This PR eliminates the following findings:
civetweb/src/civetweb.c:5942:22: warning: pointer parameter 'stop_flag' can be pointer to const [readability-non-const-parameter]
civetweb/src/civetweb.c:6172:13: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:6440:13: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:10816:21: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:10819:7: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:10824:8: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:13264:19: warning: redundant cast to the same type [google-readability-casting]
civetweb/src/civetweb.c:13506:12: warning: redundant 'mg_construct_local_link' declaration [readability-redundant-declaration]
civetweb/src/civetweb.c:14068:2: warning: Value stored to 'uri_len' is never read [clang-analyzer-deadcode.DeadStores]
civetweb/src/civetweb.c:18110:40: warning: pointer parameter 'error_buffer' can be pointer to const [readability-non-const-parameter]
civetweb/src/md5.inl:288:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:288:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:289:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:315:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:315:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:316:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:342:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:342:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:343:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:369:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:369:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:370:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]

In addition, some uses of sscanf were flagged as NOLINT (=exclude from static analysis). Eventually these should also be reworked to use strtol or similar.
Static analysis was performed with clang-tidy 12.0.0.","We (devolo AG) have rather strict requirements about source code passing static analysis (among other things, we require a good deal of SEI CERT compliance). This PR eliminates the following findings:
civetweb/src/civetweb.c:5942:22: warning: pointer parameter 'stop_flag' can be pointer to const [readability-non-const-parameter]
civetweb/src/civetweb.c:6172:13: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:6440:13: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:10816:21: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:10819:7: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:10824:8: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:13264:19: warning: redundant cast to the same type [google-readability-casting]
civetweb/src/civetweb.c:13506:12: warning: redundant 'mg_construct_local_link' declaration [readability-redundant-declaration]
civetweb/src/civetweb.c:14068:2: warning: Value stored to 'uri_len' is never read [clang-analyzer-deadcode.DeadStores]
civetweb/src/civetweb.c:18110:40: warning: pointer parameter 'error_buffer' can be pointer to const [readability-non-const-parameter]
civetweb/src/md5.inl:288:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:288:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:289:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:315:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:315:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:316:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:342:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:342:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:343:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:369:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:369:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:370:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]

In addition, some uses of sscanf were flagged as NOLINT (=exclude from static analysis). Eventually these should also be reworked to use strtol or similar.
Static analysis was performed with clang-tidy 12.0.0.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1013,2021-06-25T11:50:54Z,2021-06-26T08:55:23Z,2021-06-26T08:59:01Z,MERGED,True,23,32,2,https://github.com/wolframroesler,Fix static analysis findings,1,[],https://github.com/civetweb/civetweb/pull/1013,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1013#issuecomment-868971997,"We (devolo AG) have rather strict requirements about source code passing static analysis (among other things, we require a good deal of SEI CERT compliance). This PR eliminates the following findings:
civetweb/src/civetweb.c:5942:22: warning: pointer parameter 'stop_flag' can be pointer to const [readability-non-const-parameter]
civetweb/src/civetweb.c:6172:13: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:6440:13: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:10816:21: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:10819:7: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:10824:8: warning: 'atof' used to convert a string to a floating-point value, but function will not report conversion errors; consider using 'strtod' instead [cert-err34-c]
civetweb/src/civetweb.c:13264:19: warning: redundant cast to the same type [google-readability-casting]
civetweb/src/civetweb.c:13506:12: warning: redundant 'mg_construct_local_link' declaration [readability-redundant-declaration]
civetweb/src/civetweb.c:14068:2: warning: Value stored to 'uri_len' is never read [clang-analyzer-deadcode.DeadStores]
civetweb/src/civetweb.c:18110:40: warning: pointer parameter 'error_buffer' can be pointer to const [readability-non-const-parameter]
civetweb/src/md5.inl:288:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:288:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:289:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:315:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:315:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:316:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:342:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:342:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:343:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:369:6: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:369:30: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
civetweb/src/md5.inl:370:2: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]

In addition, some uses of sscanf were flagged as NOLINT (=exclude from static analysis). Eventually these should also be reworked to use strtol or similar.
Static analysis was performed with clang-tidy 12.0.0.","Thank you.

In addition, some uses of sscanf were flagged as NOLINT (=exclude from static analysis). Eventually these should also be reworked to use strtol or similar.

Yes, I would prefer this instead of keeping tool specific comments in the source code.
I will probably replace it by a general purpose pattern matching function, that's on the TODO list for a while anyway - but this has always been low priority, so I can't tell anything about when this will be done.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1015,2021-07-07T16:30:32Z,2021-07-09T13:37:30Z,2021-07-09T17:57:07Z,MERGED,True,1,3,1,https://github.com/SpaceIm,CMake: fix installation of bundles on iOS/tvOS/watchOS,1,[],https://github.com/civetweb/civetweb/pull/1015,https://github.com/SpaceIm,1,https://github.com/civetweb/civetweb/pull/1015,"If host is iOS, executables need a BUNDLE DESTINATION, otherwise CMale configuration fails. It's easier to set DESTINATION globally if all targets of install() command are executables.
see https://cmake.org/cmake/help/latest/policy/CMP0006.html","If host is iOS, executables need a BUNDLE DESTINATION, otherwise CMale configuration fails. It's easier to set DESTINATION globally if all targets of install() command are executables.
see https://cmake.org/cmake/help/latest/policy/CMP0006.html",True,{'HOORAY': ['https://github.com/prince-chrismc']}
civetweb/civetweb,https://github.com/civetweb/civetweb,1015,2021-07-07T16:30:32Z,2021-07-09T13:37:30Z,2021-07-09T17:57:07Z,MERGED,True,1,3,1,https://github.com/SpaceIm,CMake: fix installation of bundles on iOS/tvOS/watchOS,1,[],https://github.com/civetweb/civetweb/pull/1015,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1015#issuecomment-877193854,"If host is iOS, executables need a BUNDLE DESTINATION, otherwise CMale configuration fails. It's easier to set DESTINATION globally if all targets of install() command are executables.
see https://cmake.org/cmake/help/latest/policy/CMP0006.html","Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1023,2021-08-19T16:33:57Z,2021-08-20T06:14:21Z,2021-08-20T06:16:56Z,MERGED,True,5,5,1,https://github.com/drew-wells,"Fix for (null) in ""Bad request"" response",1,[],https://github.com/civetweb/civetweb/pull/1023,https://github.com/drew-wells,1,https://github.com/civetweb/civetweb/pull/1023,"If a client sends a request that isn't handled (like 'PROPPATCH /example.c HTTP/1.1') then 'is_valid_http_method()' is called before the HTTP version is parsed which means the response sent to the client is malformed ('HTTP/(null) 400 Bad Request'), so call 'is_valid_http_method()' after parsing the HTTP version.
There is still the possibility for the client to send complete garbage (like 'GARBAGE') then the 'HTTP/(null)' still appears, for this scenario we probably need to set the version to a default (like '1.0'), not sure though.","If a client sends a request that isn't handled (like 'PROPPATCH /example.c HTTP/1.1') then 'is_valid_http_method()' is called before the HTTP version is parsed which means the response sent to the client is malformed ('HTTP/(null) 400 Bad Request'), so call 'is_valid_http_method()' after parsing the HTTP version.
There is still the possibility for the client to send complete garbage (like 'GARBAGE') then the 'HTTP/(null)' still appears, for this scenario we probably need to set the version to a default (like '1.0'), not sure though.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1023,2021-08-19T16:33:57Z,2021-08-20T06:14:21Z,2021-08-20T06:16:56Z,MERGED,True,5,5,1,https://github.com/drew-wells,"Fix for (null) in ""Bad request"" response",1,[],https://github.com/civetweb/civetweb/pull/1023,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1023#issuecomment-902459810,"If a client sends a request that isn't handled (like 'PROPPATCH /example.c HTTP/1.1') then 'is_valid_http_method()' is called before the HTTP version is parsed which means the response sent to the client is malformed ('HTTP/(null) 400 Bad Request'), so call 'is_valid_http_method()' after parsing the HTTP version.
There is still the possibility for the client to send complete garbage (like 'GARBAGE') then the 'HTTP/(null)' still appears, for this scenario we probably need to set the version to a default (like '1.0'), not sure though.","Thank you.
Merged

There is still the possibility for the client to send complete garbage (like 'GARBAGE') then the 'HTTP/(null)' still appears, for this scenario we probably need to set the version to a default (like '1.0'), not sure though.

If we get something that is not HTTP at all, a HTTP/0.0 (or indeed null) would be a reasonable output.
What line of code is the output HTTP/null you mean exactly?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1025,2021-09-01T21:19:29Z,2021-09-02T04:55:02Z,2021-09-02T04:55:02Z,MERGED,True,1,428,9,https://github.com/uilianries,Remove Conan support,1,[],https://github.com/civetweb/civetweb/pull/1025,https://github.com/uilianries,1,https://github.com/civetweb/civetweb/pull/1025,"The new Conan Center already supports CivetWeb: https://conan.io/center/civetweb
No longer need to build it here.
closes #991","The new Conan Center already supports CivetWeb: https://conan.io/center/civetweb
No longer need to build it here.
closes #991",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1028,2021-10-01T08:14:12Z,2021-10-01T12:30:04Z,2021-10-01T12:30:14Z,MERGED,True,6,1,1,https://github.com/wolframroesler,Eliminate static checker findings in experimental interfaces,1,[],https://github.com/civetweb/civetweb/pull/1028,https://github.com/wolframroesler,1,https://github.com/civetweb/civetweb/pull/1028,"""Unused parameter"", ""unused variable"", and ""cast to same type"".
These findings occurred after compiling with MG_EXPERIMENTAL_INTERFACES.","""Unused parameter"", ""unused variable"", and ""cast to same type"".
These findings occurred after compiling with MG_EXPERIMENTAL_INTERFACES.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1028,2021-10-01T08:14:12Z,2021-10-01T12:30:04Z,2021-10-01T12:30:14Z,MERGED,True,6,1,1,https://github.com/wolframroesler,Eliminate static checker findings in experimental interfaces,1,[],https://github.com/civetweb/civetweb/pull/1028,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1028#issuecomment-932187456,"""Unused parameter"", ""unused variable"", and ""cast to same type"".
These findings occurred after compiling with MG_EXPERIMENTAL_INTERFACES.","Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1035,2021-11-10T13:12:48Z,2021-11-12T05:10:21Z,2021-11-12T15:24:16Z,MERGED,True,43,59,1,https://github.com/Dialga,Update README.md,2,[],https://github.com/civetweb/civetweb/pull/1035,https://github.com/Dialga,1,https://github.com/civetweb/civetweb/pull/1035,"Tidied software used and use relative image links
http -> https links
Added more badges
Removed obvious cloning command
Various additions and rewording","Tidied software used and use relative image links
http -> https links
Added more badges
Removed obvious cloning command
Various additions and rewording",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1035,2021-11-10T13:12:48Z,2021-11-12T05:10:21Z,2021-11-12T15:24:16Z,MERGED,True,43,59,1,https://github.com/Dialga,Update README.md,2,[],https://github.com/civetweb/civetweb/pull/1035,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1035#issuecomment-966825283,"Tidied software used and use relative image links
http -> https links
Added more badges
Removed obvious cloning command
Various additions and rewording",Thank you.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1036,2021-11-12T07:51:03Z,2021-11-21T07:25:44Z,2021-11-21T07:25:44Z,MERGED,True,0,2,1,https://github.com/gjasny,Replace memset by value-initialization,1,[],https://github.com/civetweb/civetweb/pull/1036,https://github.com/gjasny,1,https://github.com/civetweb/civetweb/pull/1036,"Otherwise I get the following warning:
'void* memset(void*, int, size_t)' clearing an object of non-trivial type 'struct CivetCallbacks'

See: https://stackoverflow.com/questions/112085/is-this-c-structure-initialization-trick-safe","Otherwise I get the following warning:
'void* memset(void*, int, size_t)' clearing an object of non-trivial type 'struct CivetCallbacks'

See: https://stackoverflow.com/questions/112085/is-this-c-structure-initialization-trick-safe",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1036,2021-11-12T07:51:03Z,2021-11-21T07:25:44Z,2021-11-21T07:25:44Z,MERGED,True,0,2,1,https://github.com/gjasny,Replace memset by value-initialization,1,[],https://github.com/civetweb/civetweb/pull/1036,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1036#issuecomment-968244316,"Otherwise I get the following warning:
'void* memset(void*, int, size_t)' clearing an object of non-trivial type 'struct CivetCallbacks'

See: https://stackoverflow.com/questions/112085/is-this-c-structure-initialization-trick-safe","I think this warning is a false positive, since CivetCallbacks is identical to the trivial struct mg_callbacks.
I don't get this warning. What compiler and flags did you use?
The memset after the two struct CivetCallbacks callbacks; should be obsolete if callbacks is initialized by the CivetCallbacks::CivetCallbacks() constructor. But I'm not sure if this works for all compilers and all C++ language version standard:
CivetCallbacks::CivetCallbacks() : mg_callbacks() {}
instead of
CivetCallbacks::CivetCallbacks()
{
	memset(this, 0, sizeof(*this));
}
since mg_callbacks is a C structure, not a C++ class.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1036,2021-11-12T07:51:03Z,2021-11-21T07:25:44Z,2021-11-21T07:25:44Z,MERGED,True,0,2,1,https://github.com/gjasny,Replace memset by value-initialization,1,[],https://github.com/civetweb/civetweb/pull/1036,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/1036#issuecomment-968304235,"Otherwise I get the following warning:
'void* memset(void*, int, size_t)' clearing an object of non-trivial type 'struct CivetCallbacks'

See: https://stackoverflow.com/questions/112085/is-this-c-structure-initialization-trick-safe","After reading https://en.cppreference.com/w/cpp/language/default_constructor again, mg_callbacks should have a ""Trivial default constructor"" - which means, the constructor does nothing - in particular not setting the members to 0.
According to https://stackoverflow.com/questions/2417065/does-the-default-constructor-initialize-built-in-types, the are values are not initialized, or depending on the C++ language version (98 or 03) or even if it would be defined: ""However, in the real world, this isn't well supported so don't use it."".
I found many more Q&A threads when I was looking for this: https://coderedirect.com/questions/299574/default-initialization-versus-zero-initialization, http://ostack.cn/?qa=1150676/, https://www.py4u.net/discuss/65262
Finally I found these two articles: https://accu.org/journals/overload/25/139/brand_2379/, http://mikelui.io/2019/01/03/seriously-bonkers.html
Probably it is better to stay with memset than to risk to introduce hard to find errors that do only occur with some compilers.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1036,2021-11-12T07:51:03Z,2021-11-21T07:25:44Z,2021-11-21T07:25:44Z,MERGED,True,0,2,1,https://github.com/gjasny,Replace memset by value-initialization,1,[],https://github.com/civetweb/civetweb/pull/1036,https://github.com/gjasny,4,https://github.com/civetweb/civetweb/pull/1036#issuecomment-969303984,"Otherwise I get the following warning:
'void* memset(void*, int, size_t)' clearing an object of non-trivial type 'struct CivetCallbacks'

See: https://stackoverflow.com/questions/112085/is-this-c-structure-initialization-trick-safe","Some playground to see the compiler warning. Seems it gets only triggered when memset is called from the ""outside"".
I'll change the PR accordingly.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1037,2021-11-15T20:59:08Z,2021-11-16T05:53:44Z,2021-11-16T05:53:44Z,MERGED,True,7,7,1,https://github.com/gjasny,Fix doxygen variable names,1,[],https://github.com/civetweb/civetweb/pull/1037,https://github.com/gjasny,1,https://github.com/civetweb/civetweb/pull/1037,Found by the Clang -Wdocumentation warning.,Found by the Clang -Wdocumentation warning.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1041,2021-11-24T15:06:11Z,2021-11-25T07:24:31Z,2021-11-25T07:24:46Z,MERGED,True,1,1,1,https://github.com/forworldm,fix unmatched URL length,1,[],https://github.com/civetweb/civetweb/pull/1041,https://github.com/forworldm,1,https://github.com/civetweb/civetweb/pull/1041,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1041,2021-11-24T15:06:11Z,2021-11-25T07:24:31Z,2021-11-25T07:24:46Z,MERGED,True,1,1,1,https://github.com/forworldm,fix unmatched URL length,1,[],https://github.com/civetweb/civetweb/pull/1041,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1041#issuecomment-978159931,,"Please have a look at this: https://github.com/civetweb/civetweb/blob/master/docs/Contribution.md#why-does-a-pull-request-need-a-description
I need to understand what you want to fix before merging a PR - otherwise I don't know if this might introduce undesired side effects.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1041,2021-11-24T15:06:11Z,2021-11-25T07:24:31Z,2021-11-25T07:24:46Z,MERGED,True,1,1,1,https://github.com/forworldm,fix unmatched URL length,1,[],https://github.com/civetweb/civetweb/pull/1041,https://github.com/forworldm,3,https://github.com/civetweb/civetweb/pull/1041#issuecomment-978212861,,added the description to commit message,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1041,2021-11-24T15:06:11Z,2021-11-25T07:24:31Z,2021-11-25T07:24:46Z,MERGED,True,1,1,1,https://github.com/forworldm,fix unmatched URL length,1,[],https://github.com/civetweb/civetweb/pull/1041,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/1041#issuecomment-978903839,,"Thank you.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1042,2021-11-26T11:59:29Z,2021-11-26T20:28:22Z,2021-11-26T20:29:29Z,MERGED,True,25,0,1,https://github.com/DavidKorczynski,ci: add cifuzz integration,1,[],https://github.com/civetweb/civetweb/pull/1042,https://github.com/DavidKorczynski,1,https://github.com/civetweb/civetweb/pull/1042,"Signed-off-by: David Korczynski david@adalogics.com
This adds CI integration with CIFuzz. CIFuzz will run the Civetweb OSS-Fuzz fuzzers for a short period of time for each PR. The benefit is that regressions and bugs has a chance of being captured early in the development process.","Signed-off-by: David Korczynski david@adalogics.com
This adds CI integration with CIFuzz. CIFuzz will run the Civetweb OSS-Fuzz fuzzers for a short period of time for each PR. The benefit is that regressions and bugs has a chance of being captured early in the development process.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1042,2021-11-26T11:59:29Z,2021-11-26T20:28:22Z,2021-11-26T20:29:29Z,MERGED,True,25,0,1,https://github.com/DavidKorczynski,ci: add cifuzz integration,1,[],https://github.com/civetweb/civetweb/pull/1042,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1042#issuecomment-980416755,"Signed-off-by: David Korczynski david@adalogics.com
This adds CI integration with CIFuzz. CIFuzz will run the Civetweb OSS-Fuzz fuzzers for a short period of time for each PR. The benefit is that regressions and bugs has a chance of being captured early in the development process.","Thank you.
Let's try if this works.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1053,2022-02-11T19:06:45Z,2022-02-13T16:40:13Z,2022-02-13T16:40:13Z,MERGED,True,11,1,1,https://github.com/cyfdecyf,fix: FindWinSock include dir and library detection.,3,[],https://github.com/civetweb/civetweb/pull/1053,https://github.com/cyfdecyf,1,https://github.com/civetweb/civetweb/pull/1053,"execute_process with non-existing input file result ""No such file"" error which can't be parsed
WINSOCK_LIBRARY_PATHS replace : with ; to make it valid list

I'm trying to add civetweb as a package to xmake-repo. Github action for that PR fails for compiling civetweb using mingw. The link error can be fixed with this fix.
Note it's still not reliable to find the correct include directory and library file path for winsock2 when using MinGW. It still failed with MinGW on windows. But I'm don't have windows machined to investigate why for this weekend and I'm not familiar with MinGW.","execute_process with non-existing input file result ""No such file"" error which can't be parsed
WINSOCK_LIBRARY_PATHS replace : with ; to make it valid list

I'm trying to add civetweb as a package to xmake-repo. Github action for that PR fails for compiling civetweb using mingw. The link error can be fixed with this fix.
Note it's still not reliable to find the correct include directory and library file path for winsock2 when using MinGW. It still failed with MinGW on windows. But I'm don't have windows machined to investigate why for this weekend and I'm not familiar with MinGW.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1053,2022-02-11T19:06:45Z,2022-02-13T16:40:13Z,2022-02-13T16:40:13Z,MERGED,True,11,1,1,https://github.com/cyfdecyf,fix: FindWinSock include dir and library detection.,3,[],https://github.com/civetweb/civetweb/pull/1053,https://github.com/cyfdecyf,2,https://github.com/civetweb/civetweb/pull/1053#issuecomment-1037886000,"execute_process with non-existing input file result ""No such file"" error which can't be parsed
WINSOCK_LIBRARY_PATHS replace : with ; to make it valid list

I'm trying to add civetweb as a package to xmake-repo. Github action for that PR fails for compiling civetweb using mingw. The link error can be fixed with this fix.
Note it's still not reliable to find the correct include directory and library file path for winsock2 when using MinGW. It still failed with MinGW on windows. But I'm don't have windows machined to investigate why for this weekend and I'm not familiar with MinGW.",I've update this PR to correctly handle MinGW on both macOS and Windows. The failed CI tasks should not be caused by my Change as it only affects when using MinGW compiler.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1053,2022-02-11T19:06:45Z,2022-02-13T16:40:13Z,2022-02-13T16:40:13Z,MERGED,True,11,1,1,https://github.com/cyfdecyf,fix: FindWinSock include dir and library detection.,3,[],https://github.com/civetweb/civetweb/pull/1053,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/1053#issuecomment-1038121886,"execute_process with non-existing input file result ""No such file"" error which can't be parsed
WINSOCK_LIBRARY_PATHS replace : with ; to make it valid list

I'm trying to add civetweb as a package to xmake-repo. Github action for that PR fails for compiling civetweb using mingw. The link error can be fixed with this fix.
Note it's still not reliable to find the correct include directory and library file path for winsock2 when using MinGW. It still failed with MinGW on windows. But I'm don't have windows machined to investigate why for this weekend and I'm not familiar with MinGW.","The failed CI tasks should not be caused by my Change as it only affects when using MinGW compiler.

the failed CI tasks are ""only"" for MacOS and FreeBSD - for MacOS, I think there was a change at Travis CI some time ago and I can't figure out how to fix this without a physical Mac where I can debug locally. And FreeBSD never worked (I can try to fix this using a virtual machine, but I did not find the time for this up to now).
I restarted another test ... this will run for an hour or two ...",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1054,2022-02-17T05:47:57Z,2022-02-17T06:33:08Z,2022-02-17T06:33:16Z,MERGED,True,1,1,1,https://github.com/Razdeep,docs: typos rectified in RELEASE_NOTES.md,1,[],https://github.com/civetweb/civetweb/pull/1054,https://github.com/Razdeep,1,https://github.com/civetweb/civetweb/pull/1054,"docs: typos rectified in RELEASE_NOTES.md
Signed-off-by: Rajdeep Roy Chowdhury rrajdeeproychowdhury@gmail.com","docs: typos rectified in RELEASE_NOTES.md
Signed-off-by: Rajdeep Roy Chowdhury rrajdeeproychowdhury@gmail.com",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1054,2022-02-17T05:47:57Z,2022-02-17T06:33:08Z,2022-02-17T06:33:16Z,MERGED,True,1,1,1,https://github.com/Razdeep,docs: typos rectified in RELEASE_NOTES.md,1,[],https://github.com/civetweb/civetweb/pull/1054,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1054#issuecomment-1042619562,"docs: typos rectified in RELEASE_NOTES.md
Signed-off-by: Rajdeep Roy Chowdhury rrajdeeproychowdhury@gmail.com",Thank you,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1055,2022-02-19T19:00:36Z,,2022-02-20T09:49:24Z,OPEN,False,5,2,1,https://github.com/paperino1983,should fix *** CID 349582:  Null pointer dereferences  (REVERSE_INULL),1,[],https://github.com/civetweb/civetweb/pull/1055,https://github.com/paperino1983,1,https://github.com/civetweb/civetweb/pull/1055,Signed-off-by: Lorenzo Canepa paperino1983@gmail.com,Signed-off-by: Lorenzo Canepa paperino1983@gmail.com,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1055,2022-02-19T19:00:36Z,,2022-02-20T09:49:24Z,OPEN,False,5,2,1,https://github.com/paperino1983,should fix *** CID 349582:  Null pointer dereferences  (REVERSE_INULL),1,[],https://github.com/civetweb/civetweb/pull/1055,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1055#issuecomment-1046200851,Signed-off-by: Lorenzo Canepa paperino1983@gmail.com,"Just out of curiosity: What makes you think this could be a bug in ""dav_lock_file""? Some static source code analysis tool? Which one?
There is an identical pattern in ""dav_unlock_file"", that apparently does not raise a warning in the same tool?
Both functions have a comment in the beginning (/* internal function - therefore conn is assumed to be valid */, because both are only called from ""handle_request"". Also ""handle_request"" is a function that uses ""conn"" without checking for NULL before. The ""handle_request"" is only called from ""handle_request_stat_log"" that does not check ""conn"" either. Looking up the callstack, either through ""handle_http2"" / ""process_new_http2_connection"" / ""process_new_http2_connection"" or ""process_new_connection"", you will arrive at ""worker_thread_run"". All of these functions are using ""conn"" without checking for NULL since all of these functions are ""internal"" (i.e., the argument ""conn"" does not come from a user API). It is checked in the very beginning in ""mg_start2"" and the threads are not even started when ""conn"" is NULL.
What makes you or your static code analysis tool consider ""dav_lock_file"" different from all other functions that do not check conn for NULL either?",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1056,2022-02-25T08:19:32Z,2022-02-25T22:21:27Z,2022-02-26T09:04:18Z,MERGED,True,13,12,2,https://github.com/hahnjo,Resolve warnings,2,[],https://github.com/civetweb/civetweb/pull/1056,https://github.com/hahnjo,1,https://github.com/civetweb/civetweb/pull/1056,"Resolve compiler warnings with GCC 8.5.0 and Clang 13 (from CentOS 8):

Avoid pointer subtraction with null pointers
Remove unused init parameter of mg_connect_client_impl
Improve const-ness of options","Resolve compiler warnings with GCC 8.5.0 and Clang 13 (from CentOS 8):

Avoid pointer subtraction with null pointers
Remove unused init parameter of mg_connect_client_impl
Improve const-ness of options",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1056,2022-02-25T08:19:32Z,2022-02-25T22:21:27Z,2022-02-26T09:04:18Z,MERGED,True,13,12,2,https://github.com/hahnjo,Resolve warnings,2,[],https://github.com/civetweb/civetweb/pull/1056,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1056#issuecomment-1051002786,"Resolve compiler warnings with GCC 8.5.0 and Clang 13 (from CentOS 8):

Avoid pointer subtraction with null pointers
Remove unused init parameter of mg_connect_client_impl
Improve const-ness of options",Please provide a description for every pull request: https://github.com/civetweb/civetweb/blob/master/docs/Contribution.md#why-does-a-pull-request-need-a-description,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1056,2022-02-25T08:19:32Z,2022-02-25T22:21:27Z,2022-02-26T09:04:18Z,MERGED,True,13,12,2,https://github.com/hahnjo,Resolve warnings,2,[],https://github.com/civetweb/civetweb/pull/1056,https://github.com/hahnjo,3,https://github.com/civetweb/civetweb/pull/1056#issuecomment-1051030049,"Resolve compiler warnings with GCC 8.5.0 and Clang 13 (from CentOS 8):

Avoid pointer subtraction with null pointers
Remove unused init parameter of mg_connect_client_impl
Improve const-ness of options","Please provide a description for every pull request: https://github.com/civetweb/civetweb/blob/master/docs/Contribution.md#why-does-a-pull-request-need-a-description

Done",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1056,2022-02-25T08:19:32Z,2022-02-25T22:21:27Z,2022-02-26T09:04:18Z,MERGED,True,13,12,2,https://github.com/hahnjo,Resolve warnings,2,[],https://github.com/civetweb/civetweb/pull/1056,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/1056#issuecomment-1051058136,"Resolve compiler warnings with GCC 8.5.0 and Clang 13 (from CentOS 8):

Avoid pointer subtraction with null pointers
Remove unused init parameter of mg_connect_client_impl
Improve const-ness of options","Thank you.


I can merge ""Avoid pointer subtraction with null pointers""


I don't want to merge Remove unused init parameter of mg_connect_client_impl, because this parameter will be used to resolve #479 and many associated issues (see there). It is true the parameter is currently unused, but not for very much longer. For the moment we can use a (void)init; to avoid a warning.


In Improve const-ness of options you essentially use a const cast to get rid of the const again before passing it to free in start_civetweb and set_option. I think we can merge this as well.


Can you modify your PR accordingly or should I cherry-pick the other two commits (haven't done that for a while, so I need to consult my GitHub cheat sheets again).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1056,2022-02-25T08:19:32Z,2022-02-25T22:21:27Z,2022-02-26T09:04:18Z,MERGED,True,13,12,2,https://github.com/hahnjo,Resolve warnings,2,[],https://github.com/civetweb/civetweb/pull/1056,https://github.com/hahnjo,5,https://github.com/civetweb/civetweb/pull/1056#issuecomment-1051260257,"Resolve compiler warnings with GCC 8.5.0 and Clang 13 (from CentOS 8):

Avoid pointer subtraction with null pointers
Remove unused init parameter of mg_connect_client_impl
Improve const-ness of options","I've removed the second commit. Could have guessed that it's still work-in-progress, my bad.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1056,2022-02-25T08:19:32Z,2022-02-25T22:21:27Z,2022-02-26T09:04:18Z,MERGED,True,13,12,2,https://github.com/hahnjo,Resolve warnings,2,[],https://github.com/civetweb/civetweb/pull/1056,https://github.com/bel2125,6,https://github.com/civetweb/civetweb/pull/1056#issuecomment-1051317571,"Resolve compiler warnings with GCC 8.5.0 and Clang 13 (from CentOS 8):

Avoid pointer subtraction with null pointers
Remove unused init parameter of mg_connect_client_impl
Improve const-ness of options","Thank you.
Merged.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1057,2022-02-27T14:59:51Z,2022-02-27T17:51:44Z,2022-03-05T20:05:48Z,MERGED,True,8,12,1,https://github.com/oliv3r,Makefile: Ensure each install is idempotent,1,[],https://github.com/civetweb/civetweb/pull/1057,https://github.com/oliv3r,1,https://github.com/civetweb/civetweb/pull/1057,"While it's quite alright to use install to create directories, install
can do so on the fly using the -D parameter. Further more, install can
make installation easier when using the -t flag.
The combined set of changes makes it that the installation steps are now
idempotent, and do not fail anymore due to missing directories, such as
install-headersfor example, which does not do the right thing if the
directory does not exists.
Signed-off-by: Olliver Schinagl oliver@schinagl.nl","While it's quite alright to use install to create directories, install
can do so on the fly using the -D parameter. Further more, install can
make installation easier when using the -t flag.
The combined set of changes makes it that the installation steps are now
idempotent, and do not fail anymore due to missing directories, such as
install-headersfor example, which does not do the right thing if the
directory does not exists.
Signed-off-by: Olliver Schinagl oliver@schinagl.nl",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1057,2022-02-27T14:59:51Z,2022-02-27T17:51:44Z,2022-03-05T20:05:48Z,MERGED,True,8,12,1,https://github.com/oliv3r,Makefile: Ensure each install is idempotent,1,[],https://github.com/civetweb/civetweb/pull/1057,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1057#issuecomment-1053593167,"While it's quite alright to use install to create directories, install
can do so on the fly using the -D parameter. Further more, install can
make installation easier when using the -t flag.
The combined set of changes makes it that the installation steps are now
idempotent, and do not fail anymore due to missing directories, such as
install-headersfor example, which does not do the right thing if the
directory does not exists.
Signed-off-by: Olliver Schinagl oliver@schinagl.nl","Thank you, I will have a look.
Basically you replace a ""-d"" and a ""-m"" copy step by one ""-D"" install command.
On what distributions did you already test this?
(I am asking because maybe you are using different distributions than me. Then I can have a look if I can test on another different distribution.)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1057,2022-02-27T14:59:51Z,2022-02-27T17:51:44Z,2022-03-05T20:05:48Z,MERGED,True,8,12,1,https://github.com/oliv3r,Makefile: Ensure each install is idempotent,1,[],https://github.com/civetweb/civetweb/pull/1057,https://github.com/oliv3r,3,https://github.com/civetweb/civetweb/pull/1057#issuecomment-1059742592,"While it's quite alright to use install to create directories, install
can do so on the fly using the -D parameter. Further more, install can
make installation easier when using the -t flag.
The combined set of changes makes it that the installation steps are now
idempotent, and do not fail anymore due to missing directories, such as
install-headersfor example, which does not do the right thing if the
directory does not exists.
Signed-off-by: Olliver Schinagl oliver@schinagl.nl","Hey @bel2125
So i ran this on alpine (while packaging it for alpine) so basically, the busybox variant, which should be the most minimal variant. Arch Linux has at least the same options, so should be equally compatible.
Note, that the change is indeed just that, but the impact is bigger, as in its current form, it doesn't actually work due to missing directories, which the -D ensures isn't a problem.
As you already merged, this comment is a bit to late; but thanks! :)",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1057,2022-02-27T14:59:51Z,2022-02-27T17:51:44Z,2022-03-05T20:05:48Z,MERGED,True,8,12,1,https://github.com/oliv3r,Makefile: Ensure each install is idempotent,1,[],https://github.com/civetweb/civetweb/pull/1057,https://github.com/bel2125,4,https://github.com/civetweb/civetweb/pull/1057#issuecomment-1059824295,"While it's quite alright to use install to create directories, install
can do so on the fly using the -D parameter. Further more, install can
make installation easier when using the -t flag.
The combined set of changes makes it that the installation steps are now
idempotent, and do not fail anymore due to missing directories, such as
install-headersfor example, which does not do the right thing if the
directory does not exists.
Signed-off-by: Olliver Schinagl oliver@schinagl.nl",Thank you for your explanation.,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1059,2022-03-02T09:18:33Z,2022-05-23T16:58:10Z,2022-05-23T16:58:11Z,MERGED,True,191,0,3,https://github.com/minhanghuang,Add websocket server cpp example,1,[],https://github.com/civetweb/civetweb/pull/1059,https://github.com/minhanghuang,1,https://github.com/civetweb/civetweb/pull/1059,websocket server cpp support Ubuntu and macOS,websocket server cpp support Ubuntu and macOS,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1059,2022-03-02T09:18:33Z,2022-05-23T16:58:10Z,2022-05-23T16:58:11Z,MERGED,True,191,0,3,https://github.com/minhanghuang,Add websocket server cpp example,1,[],https://github.com/civetweb/civetweb/pull/1059,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1059#issuecomment-1057361279,websocket server cpp support Ubuntu and macOS,"Thank you.
I will have a detailed look on your example in a couple of days.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1060,2022-03-04T15:15:05Z,2022-03-05T19:55:48Z,2022-03-05T19:55:48Z,MERGED,True,8,1,2,https://github.com/minhanghuang,add cmake find_package() variables,1,[],https://github.com/civetweb/civetweb/pull/1060,https://github.com/minhanghuang,1,https://github.com/civetweb/civetweb/pull/1060,"...
find_package(civetweb)
include_directories(${civetweb_INCLUDE_DIR})

include_directories(${civetweb_INCLUDE_DIRS}) # new 
link_directories(${civetweb_LIBRARY_DIRS}) # new 
target_link_libraries(${TARGET_NAME} 
  ${civetweb_LIBRARIES} # new 
  ${civetweb-cpp_LIBRARIES} # new 
)
...","...
find_package(civetweb)
include_directories(${civetweb_INCLUDE_DIR})

include_directories(${civetweb_INCLUDE_DIRS}) # new 
link_directories(${civetweb_LIBRARY_DIRS}) # new 
target_link_libraries(${TARGET_NAME} 
  ${civetweb_LIBRARIES} # new 
  ${civetweb-cpp_LIBRARIES} # new 
)
...",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1061,2022-03-11T16:36:20Z,2022-03-14T15:59:22Z,2022-03-14T15:59:29Z,MERGED,True,9,0,1,https://github.com/skyhisi,Replace usage of localtime with localtime_r in log_access when built with REENTRANT_TIME,1,[],https://github.com/civetweb/civetweb/pull/1061,https://github.com/skyhisi,1,https://github.com/civetweb/civetweb/pull/1061,"The log_access function uses the thread unsafe function localtime, replace with the re-entrant localtime_r when the REENTRANT_TIME flag is defined.","The log_access function uses the thread unsafe function localtime, replace with the re-entrant localtime_r when the REENTRANT_TIME flag is defined.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1061,2022-03-11T16:36:20Z,2022-03-14T15:59:22Z,2022-03-14T15:59:29Z,MERGED,True,9,0,1,https://github.com/skyhisi,Replace usage of localtime with localtime_r in log_access when built with REENTRANT_TIME,1,[],https://github.com/civetweb/civetweb/pull/1061,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1061#issuecomment-1066993235,"The log_access function uses the thread unsafe function localtime, replace with the re-entrant localtime_r when the REENTRANT_TIME flag is defined.","Thank you.
Merged",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1063,2022-03-16T09:36:11Z,2022-03-17T22:23:56Z,2022-03-17T22:23:56Z,MERGED,True,49,0,3,https://github.com/minhanghuang,feat: add pkg-config find libs,1,[],https://github.com/civetweb/civetweb/pull/1063,https://github.com/minhanghuang,1,https://github.com/civetweb/civetweb/pull/1063,"add  pkg_check_modules() find lib
example
...
find_package(PkgConfig REQUIRED) # Ubuntu: sudo apt install pkg-config; macOS: brew install pkg-config
pkg_check_modules(Civetweb REQUIRED civetweb)
pkg_check_modules(Civetweb-cpp REQUIRED civetweb-cpp)
include_directories(
  ${Civetweb_INCLUDE_DIRS} # new, /usr/local/include
  ${Civetweb-cpp_INCLUDE_DIRS} # new, /usr/local/include 
)

link_directories(
  ${Civetweb_LIBRARY_DIRS} # new , /usr/local/lib 
  ${Civetweb-cpp_LIBRARY_DIRS} # new, /usr/local/lib 
)

target_link_libraries(${TARGET_NAME}
  ${Civetweb_LIBRARIES} # new, civetweb 
  ${Civetweb-cpp_LIBRARIES} # new, civetweb-cpp
)
...","add  pkg_check_modules() find lib
example
...
find_package(PkgConfig REQUIRED) # Ubuntu: sudo apt install pkg-config; macOS: brew install pkg-config
pkg_check_modules(Civetweb REQUIRED civetweb)
pkg_check_modules(Civetweb-cpp REQUIRED civetweb-cpp)
include_directories(
  ${Civetweb_INCLUDE_DIRS} # new, /usr/local/include
  ${Civetweb-cpp_INCLUDE_DIRS} # new, /usr/local/include 
)

link_directories(
  ${Civetweb_LIBRARY_DIRS} # new , /usr/local/lib 
  ${Civetweb-cpp_LIBRARY_DIRS} # new, /usr/local/lib 
)

target_link_libraries(${TARGET_NAME}
  ${Civetweb_LIBRARIES} # new, civetweb 
  ${Civetweb-cpp_LIBRARIES} # new, civetweb-cpp
)
...",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1068,2022-04-03T12:39:45Z,2022-04-03T14:43:16Z,2022-04-03T14:44:27Z,MERGED,True,9,9,1,https://github.com/cfriedt,zephyr: remove posix prefix on standard headers,1,[],https://github.com/civetweb/civetweb/pull/1068,https://github.com/cfriedt,1,https://github.com/civetweb/civetweb/pull/1068,"Instead of using #include <posix/unistd.h>, just use #include <unistd.h>, etc.
Required-by zephyrproject-rtos/zephyr#43998","Instead of using #include <posix/unistd.h>, just use #include <unistd.h>, etc.
Required-by zephyrproject-rtos/zephyr#43998",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1068,2022-04-03T12:39:45Z,2022-04-03T14:43:16Z,2022-04-03T14:44:27Z,MERGED,True,9,9,1,https://github.com/cfriedt,zephyr: remove posix prefix on standard headers,1,[],https://github.com/civetweb/civetweb/pull/1068,https://github.com/cfriedt,2,https://github.com/civetweb/civetweb/pull/1068#issuecomment-1086862423,"Instead of using #include <posix/unistd.h>, just use #include <unistd.h>, etc.
Required-by zephyrproject-rtos/zephyr#43998","Note: This change will need to be made in civetweb first, and then pulled into Zephyr's fork of civetweb.

 CI passes in zephyrproject-rtos/zephyr#43987
 west.yml in zephyrproject-rtos/zephyr#43987 pulls in this change from zephyrproject-rtos#10
 zephyrproject-rtos/civetweb must pull from civetweb/civetweb
 close zephyrproject-rtos#10
 update west.yml in zephyrproject-rtos/zephyr#43987 to use the pulled update in zephyrproject-rtos/civetweb",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1068,2022-04-03T12:39:45Z,2022-04-03T14:43:16Z,2022-04-03T14:44:27Z,MERGED,True,9,9,1,https://github.com/cfriedt,zephyr: remove posix prefix on standard headers,1,[],https://github.com/civetweb/civetweb/pull/1068,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/1068#issuecomment-1086883760,"Instead of using #include <posix/unistd.h>, just use #include <unistd.h>, etc.
Required-by zephyrproject-rtos/zephyr#43998","Under the assumption that you know exactly what headers to use in Zephyr, because I do not test with this operating system myself:
Merged!",True,{'THUMBS_UP': ['https://github.com/cfriedt']}
civetweb/civetweb,https://github.com/civetweb/civetweb,1072,2022-04-11T18:55:34Z,2022-04-13T18:09:31Z,2022-05-31T06:15:15Z,MERGED,True,2,4,1,https://github.com/guitargeek,Using higher-level wrapper of OpenSSL SHA1 hash function,1,[],https://github.com/civetweb/civetweb/pull/1072,https://github.com/guitargeek,1,https://github.com/civetweb/civetweb/pull/1072,"This is to get rid of deprecation warninigs when building with newer
OpenSSL versions:
https://www.openssl.org/docs/manmaster/man3/SHA1_Init.html","This is to get rid of deprecation warninigs when building with newer
OpenSSL versions:
https://www.openssl.org/docs/manmaster/man3/SHA1_Init.html",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1072,2022-04-11T18:55:34Z,2022-04-13T18:09:31Z,2022-05-31T06:15:15Z,MERGED,True,2,4,1,https://github.com/guitargeek,Using higher-level wrapper of OpenSSL SHA1 hash function,1,[],https://github.com/civetweb/civetweb/pull/1072,https://github.com/guitargeek,2,https://github.com/civetweb/civetweb/pull/1072#issuecomment-1096526848,"This is to get rid of deprecation warninigs when building with newer
OpenSSL versions:
https://www.openssl.org/docs/manmaster/man3/SHA1_Init.html","I now use EVP_Digest(), which seems fine as it is already used in other places in civetweb.c:
https://github.com/civetweb/civetweb/blob/master/src/civetweb.c#L16585
And this other place is not guarded by any preprocessor macros other that if !defined(NO_SSL).",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1072,2022-04-11T18:55:34Z,2022-04-13T18:09:31Z,2022-05-31T06:15:15Z,MERGED,True,2,4,1,https://github.com/guitargeek,Using higher-level wrapper of OpenSSL SHA1 hash function,1,[],https://github.com/civetweb/civetweb/pull/1072,https://github.com/bel2125,3,https://github.com/civetweb/civetweb/pull/1072#issuecomment-1098340978,"This is to get rid of deprecation warninigs when building with newer
OpenSSL versions:
https://www.openssl.org/docs/manmaster/man3/SHA1_Init.html","Thank you.
Merged.",True,{'THUMBS_UP': ['https://github.com/linev']}
civetweb/civetweb,https://github.com/civetweb/civetweb,1072,2022-04-11T18:55:34Z,2022-04-13T18:09:31Z,2022-05-31T06:15:15Z,MERGED,True,2,4,1,https://github.com/guitargeek,Using higher-level wrapper of OpenSSL SHA1 hash function,1,[],https://github.com/civetweb/civetweb/pull/1072,https://github.com/linev,4,https://github.com/civetweb/civetweb/pull/1072#issuecomment-1134276923,"This is to get rid of deprecation warninigs when building with newer
OpenSSL versions:
https://www.openssl.org/docs/manmaster/man3/SHA1_Init.html","One comment - one can remove #include ""sha1.inl"" from the source and file sha1.inl itself.
But after this PR civetweb cannot be compiled without direct linking with SSL libraries.
Before SHA1 functions could be used from sha1.inl.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1072,2022-04-11T18:55:34Z,2022-04-13T18:09:31Z,2022-05-31T06:15:15Z,MERGED,True,2,4,1,https://github.com/guitargeek,Using higher-level wrapper of OpenSSL SHA1 hash function,1,[],https://github.com/civetweb/civetweb/pull/1072,https://github.com/bel2125,5,https://github.com/civetweb/civetweb/pull/1072#issuecomment-1141326809,"This is to get rid of deprecation warninigs when building with newer
OpenSSL versions:
https://www.openssl.org/docs/manmaster/man3/SHA1_Init.html","It seems this change has an unintended side effect: If the server is built without OpenSSL support, the EVP_Digest function is not loaded - however WebSocket still uses it:
#1078
The original ""deprecation warning"" did not warn about OpenSSL functions but functions implemented in sha1.inl.",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1072,2022-04-11T18:55:34Z,2022-04-13T18:09:31Z,2022-05-31T06:15:15Z,MERGED,True,2,4,1,https://github.com/guitargeek,Using higher-level wrapper of OpenSSL SHA1 hash function,1,[],https://github.com/civetweb/civetweb/pull/1072,https://github.com/linev,6,https://github.com/civetweb/civetweb/pull/1072#issuecomment-1141707684,"This is to get rid of deprecation warninigs when building with newer
OpenSSL versions:
https://www.openssl.org/docs/manmaster/man3/SHA1_Init.html","In my mind, one either revert this change or have to provide EVP_Digest function without OpenSSH.
But I did not found inline version of EVP_Digest",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1073,2022-04-17T08:59:33Z,2022-05-23T16:51:36Z,2022-05-23T16:57:27Z,CLOSED,False,2,2,2,https://github.com/minhanghuang,types warning,1,[],https://github.com/civetweb/civetweb/pull/1073,https://github.com/minhanghuang,1,https://github.com/civetweb/civetweb/pull/1073,"'char *' to parameter of type 'unsigned char *' converts between pointers to integer types
CIVETWEB_API int mg_base64_decode(const char *src,
                                  size_t src_len,
                                  unsigned char *dst, 
                                  size_t *dst_len);

char *buf;
mg_base64_decode(userpw_b64, userpw_b64_len, buf, &buf_len_r);","'char *' to parameter of type 'unsigned char *' converts between pointers to integer types
CIVETWEB_API int mg_base64_decode(const char *src,
                                  size_t src_len,
                                  unsigned char *dst, 
                                  size_t *dst_len);

char *buf;
mg_base64_decode(userpw_b64, userpw_b64_len, buf, &buf_len_r);",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1073,2022-04-17T08:59:33Z,2022-05-23T16:51:36Z,2022-05-23T16:57:27Z,CLOSED,False,2,2,2,https://github.com/minhanghuang,types warning,1,[],https://github.com/civetweb/civetweb/pull/1073,https://github.com/bel2125,2,https://github.com/civetweb/civetweb/pull/1073#issuecomment-1134920542,"'char *' to parameter of type 'unsigned char *' converts between pointers to integer types
CIVETWEB_API int mg_base64_decode(const char *src,
                                  size_t src_len,
                                  unsigned char *dst, 
                                  size_t *dst_len);

char *buf;
mg_base64_decode(userpw_b64, userpw_b64_len, buf, &buf_len_r);","The warning has been fixed by changing the implementation, while keeping the interface unchanged.
2466497",True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1076,2022-04-29T18:26:13Z,2022-04-29T18:26:17Z,2022-04-29T18:26:40Z,CLOSED,False,0,0,0,https://github.com/PiotrZierhoffer,Bump to f0ab2c5,2,[],https://github.com/civetweb/civetweb/pull/1076,https://github.com/PiotrZierhoffer,1,https://github.com/civetweb/civetweb/pull/1076,,,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1076,2022-04-29T18:26:13Z,2022-04-29T18:26:17Z,2022-04-29T18:26:40Z,CLOSED,False,0,0,0,https://github.com/PiotrZierhoffer,Bump to f0ab2c5,2,[],https://github.com/civetweb/civetweb/pull/1076,https://github.com/PiotrZierhoffer,2,https://github.com/civetweb/civetweb/pull/1076#issuecomment-1113600100,,Sorry  for this - it's a malformed url. This was supposed to target Zephyr's fork,True,{}
civetweb/civetweb,https://github.com/civetweb/civetweb,1077,2022-05-10T13:40:00Z,2022-05-17T06:40:20Z,2022-05-17T06:40:20Z,MERGED,True,1,1,1,https://github.com/gmarull,zephyr: update include paths to use <zephyr/...>,2,[],https://github.com/civetweb/civetweb/pull/1077,https://github.com/gmarull,1,https://github.com/civetweb/civetweb/pull/1077,"Zephyr has prefixed all of its includes with <zephyr/...>. While the old
mode can still be used (CONFIG_LEGACY_INCLUDE_PATH) and is still enabled
by default, it's better to be prepared for its removal in the future.","Zephyr has prefixed all of its includes with <zephyr/...>. While the old
mode can still be used (CONFIG_LEGACY_INCLUDE_PATH) and is still enabled
by default, it's better to be prepared for its removal in the future.",True,{}
