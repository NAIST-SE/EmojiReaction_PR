ros2/rmw,https://github.com/ros2/rmw,57,2016-03-01T00:08:30Z,2016-03-01T00:58:12Z,2016-03-01T00:58:15Z,MERGED,True,3,3,1,https://github.com/jacquelinekay,Don't type-erase request header,1,[],https://github.com/ros2/rmw/pull/57,https://github.com/jacquelinekay,1,https://github.com/ros2/rmw/pull/57,See discussion in ros2/rcl#30 (comment),See discussion in ros2/rcl#30 (comment),True,{}
ros2/rmw,https://github.com/ros2/rmw,57,2016-03-01T00:08:30Z,2016-03-01T00:58:12Z,2016-03-01T00:58:15Z,MERGED,True,3,3,1,https://github.com/jacquelinekay,Don't type-erase request header,1,[],https://github.com/ros2/rmw/pull/57,https://github.com/esteve,2,https://github.com/ros2/rmw/pull/57#issuecomment-190459556,See discussion in ros2/rcl#30 (comment),+1,True,{}
ros2/rmw,https://github.com/ros2/rmw,57,2016-03-01T00:08:30Z,2016-03-01T00:58:12Z,2016-03-01T00:58:15Z,MERGED,True,3,3,1,https://github.com/jacquelinekay,Don't type-erase request header,1,[],https://github.com/ros2/rmw/pull/57,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/57#issuecomment-190461356,See discussion in ros2/rcl#30 (comment),"This needs matching changes in all the rmw implementations, but otherwise +1.",True,{}
ros2/rmw,https://github.com/ros2/rmw,57,2016-03-01T00:08:30Z,2016-03-01T00:58:12Z,2016-03-01T00:58:15Z,MERGED,True,3,3,1,https://github.com/jacquelinekay,Don't type-erase request header,1,[],https://github.com/ros2/rmw/pull/57,https://github.com/jacquelinekay,4,https://github.com/ros2/rmw/pull/57#issuecomment-190461651,See discussion in ros2/rcl#30 (comment),other PRs are pending,True,{}
ros2/rmw,https://github.com/ros2/rmw,57,2016-03-01T00:08:30Z,2016-03-01T00:58:12Z,2016-03-01T00:58:15Z,MERGED,True,3,3,1,https://github.com/jacquelinekay,Don't type-erase request header,1,[],https://github.com/ros2/rmw/pull/57,https://github.com/jacquelinekay,5,https://github.com/ros2/rmw/pull/57#issuecomment-190464110,See discussion in ros2/rcl#30 (comment),"I think all the necessary PRs are in now.
http://ci.ros2.org/job/ci_linux/1043/
http://ci.ros2.org/job/ci_osx/860/
http://ci.ros2.org/job/ci_windows/1104/",True,{}
ros2/rmw,https://github.com/ros2/rmw,59,2016-03-17T21:34:44Z,2016-04-01T21:08:19Z,2017-07-24T16:58:04Z,MERGED,True,2,2,2,https://github.com/jacquelinekay,remove fixed guard conditions,1,[],https://github.com/ros2/rmw/pull/59,https://github.com/jacquelinekay,1,https://github.com/ros2/rmw/pull/59,Connects to ros2/rcl#33,Connects to ros2/rcl#33,True,{}
ros2/rmw,https://github.com/ros2/rmw,59,2016-03-17T21:34:44Z,2016-04-01T21:08:19Z,2017-07-24T16:58:04Z,MERGED,True,2,2,2,https://github.com/jacquelinekay,remove fixed guard conditions,1,[],https://github.com/ros2/rmw/pull/59,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/59#issuecomment-201048539,Connects to ros2/rcl#33,lgtm,True,{}
ros2/rmw,https://github.com/ros2/rmw,60,2016-03-29T09:03:41Z,2016-10-19T08:15:36Z,2016-10-19T08:15:36Z,CLOSED,False,28,0,2,https://github.com/vmayoral,Include rosnode and rostopic headers,2,[],https://github.com/ros2/rmw/pull/60,https://github.com/vmayoral,1,https://github.com/ros2/rmw/pull/60,,,True,{}
ros2/rmw,https://github.com/ros2/rmw,61,2016-04-01T19:19:17Z,2016-04-01T20:42:42Z,2017-07-24T16:57:30Z,MERGED,True,59,5,2,https://github.com/jacquelinekay,Document rmw_wait,1,[],https://github.com/ros2/rmw/pull/61,https://github.com/jacquelinekay,1,https://github.com/ros2/rmw/pull/61,"In accordance with a recent discussion with @dirk-thomas and @wjwwood, this adds a comment describing the behavior of rmw_wait and how it treats its input arrays of void * pointers.","In accordance with a recent discussion with @dirk-thomas and @wjwwood, this adds a comment describing the behavior of rmw_wait and how it treats its input arrays of void * pointers.",True,{}
ros2/rmw,https://github.com/ros2/rmw,61,2016-04-01T19:19:17Z,2016-04-01T20:42:42Z,2017-07-24T16:57:30Z,MERGED,True,59,5,2,https://github.com/jacquelinekay,Document rmw_wait,1,[],https://github.com/ros2/rmw/pull/61,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/61#issuecomment-204553014,"In accordance with a recent discussion with @dirk-thomas and @wjwwood, this adds a comment describing the behavior of rmw_wait and how it treats its input arrays of void * pointers.","+1, with @dirk-thomas's comments addressed.",True,{}
ros2/rmw,https://github.com/ros2/rmw,61,2016-04-01T19:19:17Z,2016-04-01T20:42:42Z,2017-07-24T16:57:30Z,MERGED,True,59,5,2,https://github.com/jacquelinekay,Document rmw_wait,1,[],https://github.com/ros2/rmw/pull/61,https://github.com/jacquelinekay,3,https://github.com/ros2/rmw/pull/61#issuecomment-204556627,"In accordance with a recent discussion with @dirk-thomas and @wjwwood, this adds a comment describing the behavior of rmw_wait and how it treats its input arrays of void * pointers.",Comments addressed in 88fb6c1,True,{}
ros2/rmw,https://github.com/ros2/rmw,61,2016-04-01T19:19:17Z,2016-04-01T20:42:42Z,2017-07-24T16:57:30Z,MERGED,True,59,5,2,https://github.com/jacquelinekay,Document rmw_wait,1,[],https://github.com/ros2/rmw/pull/61,https://github.com/dirk-thomas,4,https://github.com/ros2/rmw/pull/61#issuecomment-204559803,"In accordance with a recent discussion with @dirk-thomas and @wjwwood, this adds a comment describing the behavior of rmw_wait and how it treats its input arrays of void * pointers.",I wrapped each sentence. LGTM.,True,{}
ros2/rmw,https://github.com/ros2/rmw,61,2016-04-01T19:19:17Z,2016-04-01T20:42:42Z,2017-07-24T16:57:30Z,MERGED,True,59,5,2,https://github.com/jacquelinekay,Document rmw_wait,1,[],https://github.com/ros2/rmw/pull/61,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/61#issuecomment-204560261,"In accordance with a recent discussion with @dirk-thomas and @wjwwood, this adds a comment describing the behavior of rmw_wait and how it treats its input arrays of void * pointers.","@jacquelinekay you can try the new ""squash + merge"" button!",True,{}
ros2/rmw,https://github.com/ros2/rmw,61,2016-04-01T19:19:17Z,2016-04-01T20:42:42Z,2017-07-24T16:57:30Z,MERGED,True,59,5,2,https://github.com/jacquelinekay,Document rmw_wait,1,[],https://github.com/ros2/rmw/pull/61,https://github.com/wjwwood,6,https://github.com/ros2/rmw/pull/61#issuecomment-204560310,"In accordance with a recent discussion with @dirk-thomas and @wjwwood, this adds a comment describing the behavior of rmw_wait and how it treats its input arrays of void * pointers.",nvm 😢,True,{}
ros2/rmw,https://github.com/ros2/rmw,61,2016-04-01T19:19:17Z,2016-04-01T20:42:42Z,2017-07-24T16:57:30Z,MERGED,True,59,5,2,https://github.com/jacquelinekay,Document rmw_wait,1,[],https://github.com/ros2/rmw/pull/61,https://github.com/jacquelinekay,7,https://github.com/ros2/rmw/pull/61#issuecomment-204560456,"In accordance with a recent discussion with @dirk-thomas and @wjwwood, this adds a comment describing the behavior of rmw_wait and how it treats its input arrays of void * pointers.",Oops too late,True,{}
ros2/rmw,https://github.com/ros2/rmw,62,2016-04-02T01:13:49Z,2016-04-02T01:17:32Z,2016-04-02T01:17:38Z,MERGED,True,1,1,1,https://github.com/jacquelinekay,Fix uncrustify failure,1,[],https://github.com/ros2/rmw/pull/62,https://github.com/jacquelinekay,1,https://github.com/ros2/rmw/pull/62,whitespace at the end of a line. classic. (also 100% my fault),whitespace at the end of a line. classic. (also 100% my fault),True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,1,https://github.com/ros2/rmw/pull/63,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,2,https://github.com/ros2/rmw/pull/63#issuecomment-209003610,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","CI:
http://ci.ros2.org/job/ci_linux/1171/
http://ci.ros2.org/job/ci_osx/947/
http://ci.ros2.org/job/ci_windows/1227/",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,3,https://github.com/ros2/rmw/pull/63#issuecomment-209021548,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","I realized after starting the build that PR was subtly broken. I renamed the key for the ament index entry to rmw_typesupport (from rmw_implementation, which I thought was misleading). Fixed in 929018e.",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,4,https://github.com/ros2/rmw/pull/63#issuecomment-209085011,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","I launched a new build where everything looks good except for failing tests in rclpy. I cannot reproduce this locally. Hmmm.
http://ci.ros2.org/job/ci_linux/1173/",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/63#issuecomment-209087770,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",@jacquelinekay it's failing because you don't have any rmw implementations enabled which are supported by rclpy. The error message for this case is improved in https://github.com/ros2/rclpy/pull/12/files#diff-aa7e84a9e617f0578e51ed0daace94aaR91.,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,6,https://github.com/ros2/rmw/pull/63#issuecomment-209088403,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","But use_connext and use_opensplice are both set to true in the job with the failing test (and disable_connext_static is false), so you would expect those rmw implementations to be found and for the test to pass. This leads me to believe that my changes have broken the logic for finding an rmw implementation in Python.",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/63#issuecomment-209088768,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",@jacquelinekay maybe. It's also possible there is a problem with how my code changes and yours have merged? The supported Python rmw extensions are now registered separately.,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,8,https://github.com/ros2/rmw/pull/63#issuecomment-209089138,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",That's what I was thinking. I thought I rebuilt my workspace locally with an up-to-date version of rclpy; I'm going to try again and take a closer look at your changes in rclpy.,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/63#issuecomment-209089813,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","Ok, if there is an issue, then this commit will be the culprit: ros2/rclpy@0bf9640",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,10,https://github.com/ros2/rmw/pull/63#issuecomment-209120803,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","The rclpy tests passed on Jenkins in this new build:
http://ci.ros2.org/job/ci_linux/1173/",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/wjwwood,11,https://github.com/ros2/rmw/pull/63#issuecomment-209121801,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","So, what made the difference in your opinion?",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,12,https://github.com/ros2/rmw/pull/63#issuecomment-209159027,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","It looks like the Jenkins job with the failed rclpy test was before your rclpy test was merged, and the successful one was launched afterwards.
All I know is that if I do a git reset --hard HEAD~1 locally in rclpy to revert your most recent PR and rebuild my workspace, the rclpy tests fail (for the same reason as seen on Jenkins, no valid rmw implementation for rclpy found.) But both on Jenkins and locally, if I go back to the current state of rclpy on master, then the test passes.",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/wjwwood,13,https://github.com/ros2/rmw/pull/63#issuecomment-209164218,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","Well there was a matching pr merged, so to ""undo"" what I merged, you'd need to also undo this one: ament/ament_cmake#65",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,14,https://github.com/ros2/rmw/pull/63#issuecomment-209542085,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","@dirk-thomas I tried to address the multiple typesupports issue but I didn't understand how to use ament_index_get_resources and ament_index_register_resource for this purpose.
For example, I want to do something like this:
ament_index['rmw_typesupport'] = {'rmw_connext_cpp' : ['rosidl_typesupport_connext_c', 'rosidl_typesupport_connext_cpp'] }

ament_index['rmw_typesupport_c'] = {'rmw_connext_cpp' : ['rosidl_typesupport_connext_c'] }
ament_index['rmw_typesupport_cpp'] = {'rmw_connext_cpp' : ['rosidl_typesupport_connext_cpp'] }

but the first resource map doesn't work because I cannot store a list of string at rmw_connext_cpp.
Should I expect to be able to do this?
I have a workaround in 12b9777.",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/dirk-thomas,15,https://github.com/ros2/rmw/pull/63#issuecomment-209548414,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",Within one resource file you can story any kind of content. If you choose to store a CMake list in it that will be exactly what you will get back out.,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,16,https://github.com/ros2/rmw/pull/63#issuecomment-209554504,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","I see, so if I expect an entry to store multiple strings, I should initialize it and append to it as a list.",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,17,https://github.com/ros2/rmw/pull/63#issuecomment-209650215,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",I fixed the index entries in this pull request so that they all can store a list of strings in b7d7897,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/dirk-thomas,18,https://github.com/ros2/rmw/pull/63#issuecomment-209651735,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",Instead of creating new macros for each language why not have a single function with a language parameter?,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,19,https://github.com/ros2/rmw/pull/63#issuecomment-209652289,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",Probably a better solution. Do you suggest a positional argument or a flag (e.g. get_rmw_typesupport(var rmw_connext_cpp LANGUAGE C))? I prefer the latter.,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/dirk-thomas,20,https://github.com/ros2/rmw/pull/63#issuecomment-209673705,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",If it is optional a keyword argument would be ok but I think it is required and therefore I think a positional argument makes more sense.,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,21,https://github.com/ros2/rmw/pull/63#issuecomment-209686978,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","I was thinking for get_rmw_typesupport that the ""language"" parameter could be optional, and if it's left out then the typesupports for all languages is returned.",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/dirk-thomas,22,https://github.com/ros2/rmw/pull/63#issuecomment-209688080,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",That sounds good to me.,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,23,https://github.com/ros2/rmw/pull/63#issuecomment-209688356,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","Another round of CI:
http://ci.ros2.org/job/ci_linux/1181/
http://ci.ros2.org/job/ci_osx/958/
http://ci.ros2.org/job/ci_windows/1236/",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,24,https://github.com/ros2/rmw/pull/63#issuecomment-209722785,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","In 9b823e5 I changed it so that register_rmw_implementation parses its arguments such that the arguments must come in pairs of (language, typesupport package names). There isn't very much error checking however.
One more CI job for good measure:
http://ci.ros2.org/job/ci_linux/1184",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,25,https://github.com/ros2/rmw/pull/63#issuecomment-210134312,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","OK, I've implemented the suggestions and corrected the new ""language:typesupport"" syntax in each rmw implementation where register_rmw_implementation is called.",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,26,https://github.com/ros2/rmw/pull/63#issuecomment-214041697,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","sorry @dirk-thomas, I wasn't getting email updates for your comments on this thread for some reason. Does the style look better in 137e44a?",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,27,https://github.com/ros2/rmw/pull/63#issuecomment-214914770,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","Latest CI:
http://ci.ros2.org/job/ci_linux/1232/
http://ci.ros2.org/job/ci_osx/989/
Fixed the linter warnings and launched a Windows job (pending):
http://ci.ros2.org/job/ci_windows/1273",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,28,https://github.com/ros2/rmw/pull/63#issuecomment-215111761,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.","Had to fix a rebase, the latest Windows job is clean as far as Windows CI goes: http://ci.ros2.org/job/ci_windows/1274",True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/jacquelinekay,29,https://github.com/ros2/rmw/pull/63#issuecomment-215893009,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",bump... any pending comments on this set of PRs?,True,{}
ros2/rmw,https://github.com/ros2/rmw,63,2016-04-06T19:21:09Z,2016-04-29T22:32:55Z,2016-04-29T22:32:59Z,MERGED,True,67,21,3,https://github.com/jacquelinekay,Register language of typesupport for rmw implementation,32,[],https://github.com/ros2/rmw/pull/63,https://github.com/dirk-thomas,30,https://github.com/ros2/rmw/pull/63#issuecomment-215894150,"I believe that when typesupport implementations are registered in the ament index, there should be a way to distinguish between C and C++ typesupport packages. This is one way to implement it, I'm open to feedback about how to change the design. A companion PR to rosidl_generator_py and various other packages will accompany this to show usage.
Right now a typesupport implementation is registered twice: as a ""rmw_typesupport"" and as a ""rmw_typesupport_c/cpp"". That way all typesupports can be selected using the ""rmw_typesupport"" identifier, but in contexts where either C or C++ typesupport is needed, there is a way to distinguish between them.",Beside mini comments on some of the related PRs this LGTM.,True,{}
ros2/rmw,https://github.com/ros2/rmw,64,2016-04-14T17:49:48Z,2016-04-14T17:52:53Z,2016-04-14T17:53:17Z,MERGED,True,21,22,1,https://github.com/dirk-thomas,rework get_rmw_typesupport,1,[],https://github.com/ros2/rmw/pull/64,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/64,@jacquelinekay this is an update for #63 which reworks get_rmw_typesupport.cmake.,@jacquelinekay this is an update for #63 which reworks get_rmw_typesupport.cmake.,True,{}
ros2/rmw,https://github.com/ros2/rmw,64,2016-04-14T17:49:48Z,2016-04-14T17:52:53Z,2016-04-14T17:53:17Z,MERGED,True,21,22,1,https://github.com/dirk-thomas,rework get_rmw_typesupport,1,[],https://github.com/ros2/rmw/pull/64,https://github.com/jacquelinekay,2,https://github.com/ros2/rmw/pull/64#issuecomment-210075190,@jacquelinekay this is an update for #63 which reworks get_rmw_typesupport.cmake.,"thanks, that looks better to me",True,{}
ros2/rmw,https://github.com/ros2/rmw,65,2016-04-27T22:13:43Z,2016-05-28T22:14:24Z,2016-05-28T22:14:28Z,MERGED,True,59,0,1,https://github.com/wjwwood,new api to support wait_for_service,3,[],https://github.com/ros2/rmw/pull/65,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/65,"This is my proposed API additions needed to support the wait_for_service functionality at the client library level. A similar set of functions would be in rcl (or else aliased to these functions), and the client libraries can implement wait_for_service using these two functions.
Looking for feedback before/while fixing up changes to each rmw implementation to implement these additions.
Connects to ros2/ros2#215","This is my proposed API additions needed to support the wait_for_service functionality at the client library level. A similar set of functions would be in rcl (or else aliased to these functions), and the client libraries can implement wait_for_service using these two functions.
Looking for feedback before/while fixing up changes to each rmw implementation to implement these additions.
Connects to ros2/ros2#215",True,{}
ros2/rmw,https://github.com/ros2/rmw,65,2016-04-27T22:13:43Z,2016-05-28T22:14:24Z,2016-05-28T22:14:28Z,MERGED,True,59,0,1,https://github.com/wjwwood,new api to support wait_for_service,3,[],https://github.com/ros2/rmw/pull/65,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/65#issuecomment-221977710,"This is my proposed API additions needed to support the wait_for_service functionality at the client library level. A similar set of functions would be in rcl (or else aliased to these functions), and the client libraries can implement wait_for_service using these two functions.
Looking for feedback before/while fixing up changes to each rmw implementation to implement these additions.
Connects to ros2/ros2#215",I'm putting this up for review.,True,{}
ros2/rmw,https://github.com/ros2/rmw,65,2016-04-27T22:13:43Z,2016-05-28T22:14:24Z,2016-05-28T22:14:28Z,MERGED,True,59,0,1,https://github.com/wjwwood,new api to support wait_for_service,3,[],https://github.com/ros2/rmw/pull/65,https://github.com/tfoote,3,https://github.com/ros2/rmw/pull/65#issuecomment-222277706,"This is my proposed API additions needed to support the wait_for_service functionality at the client library level. A similar set of functions would be in rcl (or else aliased to these functions), and the client libraries can implement wait_for_service using these two functions.
Looking for feedback before/while fixing up changes to each rmw implementation to implement these additions.
Connects to ros2/ros2#215",+1,True,{}
ros2/rmw,https://github.com/ros2/rmw,66,2016-04-29T01:52:01Z,2016-05-02T17:11:47Z,2016-05-02T17:11:52Z,MERGED,True,2,2,2,https://github.com/dirk-thomas,use CTest BUILD_TESTING,1,[],https://github.com/ros2/rmw/pull/66,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/66,Connect to ament/ament_cmake#68,Connect to ament/ament_cmake#68,True,{}
ros2/rmw,https://github.com/ros2/rmw,67,2016-04-30T01:22:47Z,2016-05-02T22:17:50Z,2016-05-02T22:17:53Z,MERGED,True,6,1,1,https://github.com/jacquelinekay,Check if ament index resource exists before accessing,3,[],https://github.com/ros2/rmw/pull/67,https://github.com/jacquelinekay,1,https://github.com/ros2/rmw/pull/67,"This changes the behavior of get_rmw_typesupport slightly so that it returns an empty list rather than erroring if no typesupport is found for an rmw_implementation/language label.
Connects to ros2/rclpy#21","This changes the behavior of get_rmw_typesupport slightly so that it returns an empty list rather than erroring if no typesupport is found for an rmw_implementation/language label.
Connects to ros2/rclpy#21",True,{}
ros2/rmw,https://github.com/ros2/rmw,67,2016-04-30T01:22:47Z,2016-05-02T22:17:50Z,2016-05-02T22:17:53Z,MERGED,True,6,1,1,https://github.com/jacquelinekay,Check if ament index resource exists before accessing,3,[],https://github.com/ros2/rmw/pull/67,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/67#issuecomment-216381963,"This changes the behavior of get_rmw_typesupport slightly so that it returns an empty list rather than erroring if no typesupport is found for an rmw_implementation/language label.
Connects to ros2/rclpy#21",LGTM.,True,{}
ros2/rmw,https://github.com/ros2/rmw,68,2016-05-04T02:06:31Z,2016-05-05T01:28:14Z,2016-05-05T01:28:18Z,MERGED,True,140,13,5,https://github.com/wjwwood,Fix error handling,3,[],https://github.com/ros2/rmw/pull/68,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/68,"Different fix for ros2/rclcpp#217.
Should effectively replace ros2/rcl#58.
The error state (a struct with the error message, line number, and file separated) was getting reset correctly, but the formatted error message was not. The bug exposed itself as the ""error not set"" message when an error had been set after another had been set and reset. I also fixed a few other things.
I added tests since it probably would have caught this in the first place. I ran them locally:
test 6
    Start 6: test_error_handling

6: Test command: /usr/local/bin/python3 ""-u"" ""/Users/william/ros2_ws/install_isolated/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml"" ""--output-file"" ""/Users/william/ros2_ws/build_isolated/rmw/ament_cmake_gmock/test_error_handling.txt"" ""--command"" ""/Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling"" ""--gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml""
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/Users/william/ros2_ws/src/ros2/rmw/rmw':
6:  - /Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling --gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml
6: Running main() from gmock_main.cc
6: [==========] Running 4 tests from 1 test case.
6: [----------] Global test environment set-up.
6: [----------] 4 tests from test_error_handling
6: [ RUN      ] test_error_handling.nominal
6: [       OK ] test_error_handling.nominal (0 ms)
6: [ RUN      ] test_error_handling.reset
6: [       OK ] test_error_handling.reset (0 ms)
6: [ RUN      ] test_error_handling.empty
6: [       OK ] test_error_handling.empty (0 ms)
6: [ RUN      ] test_error_handling.recursive
6: [       OK ] test_error_handling.recursive (0 ms)
6: [----------] 4 tests from test_error_handling (0 ms total)
6:
6: [----------] Global test environment tear-down
6: [==========] 4 tests from 1 test case ran. (0 ms total)
6: [  PASSED  ] 4 tests.
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml'
6/6 Test #6: test_error_handling ..............   Passed    0.15 sec

100% tests passed, 0 tests failed out of 6","Different fix for ros2/rclcpp#217.
Should effectively replace ros2/rcl#58.
The error state (a struct with the error message, line number, and file separated) was getting reset correctly, but the formatted error message was not. The bug exposed itself as the ""error not set"" message when an error had been set after another had been set and reset. I also fixed a few other things.
I added tests since it probably would have caught this in the first place. I ran them locally:
test 6
    Start 6: test_error_handling

6: Test command: /usr/local/bin/python3 ""-u"" ""/Users/william/ros2_ws/install_isolated/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml"" ""--output-file"" ""/Users/william/ros2_ws/build_isolated/rmw/ament_cmake_gmock/test_error_handling.txt"" ""--command"" ""/Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling"" ""--gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml""
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/Users/william/ros2_ws/src/ros2/rmw/rmw':
6:  - /Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling --gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml
6: Running main() from gmock_main.cc
6: [==========] Running 4 tests from 1 test case.
6: [----------] Global test environment set-up.
6: [----------] 4 tests from test_error_handling
6: [ RUN      ] test_error_handling.nominal
6: [       OK ] test_error_handling.nominal (0 ms)
6: [ RUN      ] test_error_handling.reset
6: [       OK ] test_error_handling.reset (0 ms)
6: [ RUN      ] test_error_handling.empty
6: [       OK ] test_error_handling.empty (0 ms)
6: [ RUN      ] test_error_handling.recursive
6: [       OK ] test_error_handling.recursive (0 ms)
6: [----------] 4 tests from test_error_handling (0 ms total)
6:
6: [----------] Global test environment tear-down
6: [==========] 4 tests from 1 test case ran. (0 ms total)
6: [  PASSED  ] 4 tests.
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml'
6/6 Test #6: test_error_handling ..............   Passed    0.15 sec

100% tests passed, 0 tests failed out of 6",True,{}
ros2/rmw,https://github.com/ros2/rmw,68,2016-05-04T02:06:31Z,2016-05-05T01:28:14Z,2016-05-05T01:28:18Z,MERGED,True,140,13,5,https://github.com/wjwwood,Fix error handling,3,[],https://github.com/ros2/rmw/pull/68,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/68#issuecomment-216723423,"Different fix for ros2/rclcpp#217.
Should effectively replace ros2/rcl#58.
The error state (a struct with the error message, line number, and file separated) was getting reset correctly, but the formatted error message was not. The bug exposed itself as the ""error not set"" message when an error had been set after another had been set and reset. I also fixed a few other things.
I added tests since it probably would have caught this in the first place. I ran them locally:
test 6
    Start 6: test_error_handling

6: Test command: /usr/local/bin/python3 ""-u"" ""/Users/william/ros2_ws/install_isolated/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml"" ""--output-file"" ""/Users/william/ros2_ws/build_isolated/rmw/ament_cmake_gmock/test_error_handling.txt"" ""--command"" ""/Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling"" ""--gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml""
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/Users/william/ros2_ws/src/ros2/rmw/rmw':
6:  - /Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling --gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml
6: Running main() from gmock_main.cc
6: [==========] Running 4 tests from 1 test case.
6: [----------] Global test environment set-up.
6: [----------] 4 tests from test_error_handling
6: [ RUN      ] test_error_handling.nominal
6: [       OK ] test_error_handling.nominal (0 ms)
6: [ RUN      ] test_error_handling.reset
6: [       OK ] test_error_handling.reset (0 ms)
6: [ RUN      ] test_error_handling.empty
6: [       OK ] test_error_handling.empty (0 ms)
6: [ RUN      ] test_error_handling.recursive
6: [       OK ] test_error_handling.recursive (0 ms)
6: [----------] 4 tests from test_error_handling (0 ms total)
6:
6: [----------] Global test environment tear-down
6: [==========] 4 tests from 1 test case ran. (0 ms total)
6: [  PASSED  ] 4 tests.
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml'
6/6 Test #6: test_error_handling ..............   Passed    0.15 sec

100% tests passed, 0 tests failed out of 6","I now get this (which is what I expected):
% ./talker__rmw_opensplice_cpp
libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Could not initialize rcl node: OSPL_URI not set, at /Users/william/ros2_ws/src/ros2/rmw_opensplice/rmw_opensplice_cpp/src/rmw_node.cpp:56, at /Users/william/ros2_ws/src/ros2/rcl/rcl/src/rcl/node.c:106

Where I used to get this:
% ./talker__rmw_opensplice_cpp
libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Could not initialize rcl node: error not set",True,{}
ros2/rmw,https://github.com/ros2/rmw,68,2016-05-04T02:06:31Z,2016-05-05T01:28:14Z,2016-05-05T01:28:18Z,MERGED,True,140,13,5,https://github.com/wjwwood,Fix error handling,3,[],https://github.com/ros2/rmw/pull/68,https://github.com/dirk-thomas,3,https://github.com/ros2/rmw/pull/68#issuecomment-216945801,"Different fix for ros2/rclcpp#217.
Should effectively replace ros2/rcl#58.
The error state (a struct with the error message, line number, and file separated) was getting reset correctly, but the formatted error message was not. The bug exposed itself as the ""error not set"" message when an error had been set after another had been set and reset. I also fixed a few other things.
I added tests since it probably would have caught this in the first place. I ran them locally:
test 6
    Start 6: test_error_handling

6: Test command: /usr/local/bin/python3 ""-u"" ""/Users/william/ros2_ws/install_isolated/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml"" ""--output-file"" ""/Users/william/ros2_ws/build_isolated/rmw/ament_cmake_gmock/test_error_handling.txt"" ""--command"" ""/Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling"" ""--gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml""
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/Users/william/ros2_ws/src/ros2/rmw/rmw':
6:  - /Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling --gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml
6: Running main() from gmock_main.cc
6: [==========] Running 4 tests from 1 test case.
6: [----------] Global test environment set-up.
6: [----------] 4 tests from test_error_handling
6: [ RUN      ] test_error_handling.nominal
6: [       OK ] test_error_handling.nominal (0 ms)
6: [ RUN      ] test_error_handling.reset
6: [       OK ] test_error_handling.reset (0 ms)
6: [ RUN      ] test_error_handling.empty
6: [       OK ] test_error_handling.empty (0 ms)
6: [ RUN      ] test_error_handling.recursive
6: [       OK ] test_error_handling.recursive (0 ms)
6: [----------] 4 tests from test_error_handling (0 ms total)
6:
6: [----------] Global test environment tear-down
6: [==========] 4 tests from 1 test case ran. (0 ms total)
6: [  PASSED  ] 4 tests.
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml'
6/6 Test #6: test_error_handling ..............   Passed    0.15 sec

100% tests passed, 0 tests failed out of 6",Looks good to me.,True,{}
ros2/rmw,https://github.com/ros2/rmw,68,2016-05-04T02:06:31Z,2016-05-05T01:28:14Z,2016-05-05T01:28:18Z,MERGED,True,140,13,5,https://github.com/wjwwood,Fix error handling,3,[],https://github.com/ros2/rmw/pull/68,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/68#issuecomment-217006150,"Different fix for ros2/rclcpp#217.
Should effectively replace ros2/rcl#58.
The error state (a struct with the error message, line number, and file separated) was getting reset correctly, but the formatted error message was not. The bug exposed itself as the ""error not set"" message when an error had been set after another had been set and reset. I also fixed a few other things.
I added tests since it probably would have caught this in the first place. I ran them locally:
test 6
    Start 6: test_error_handling

6: Test command: /usr/local/bin/python3 ""-u"" ""/Users/william/ros2_ws/install_isolated/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml"" ""--output-file"" ""/Users/william/ros2_ws/build_isolated/rmw/ament_cmake_gmock/test_error_handling.txt"" ""--command"" ""/Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling"" ""--gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml""
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/Users/william/ros2_ws/src/ros2/rmw/rmw':
6:  - /Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling --gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml
6: Running main() from gmock_main.cc
6: [==========] Running 4 tests from 1 test case.
6: [----------] Global test environment set-up.
6: [----------] 4 tests from test_error_handling
6: [ RUN      ] test_error_handling.nominal
6: [       OK ] test_error_handling.nominal (0 ms)
6: [ RUN      ] test_error_handling.reset
6: [       OK ] test_error_handling.reset (0 ms)
6: [ RUN      ] test_error_handling.empty
6: [       OK ] test_error_handling.empty (0 ms)
6: [ RUN      ] test_error_handling.recursive
6: [       OK ] test_error_handling.recursive (0 ms)
6: [----------] 4 tests from test_error_handling (0 ms total)
6:
6: [----------] Global test environment tear-down
6: [==========] 4 tests from 1 test case ran. (0 ms total)
6: [  PASSED  ] 4 tests.
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml'
6/6 Test #6: test_error_handling ..............   Passed    0.15 sec

100% tests passed, 0 tests failed out of 6","I addressed both the comments. Here's CI before:

http://ci.ros2.org/job/ci_linux/1261/

And after:

http://ci.ros2.org/job/ci_linux/1262/",True,{}
ros2/rmw,https://github.com/ros2/rmw,68,2016-05-04T02:06:31Z,2016-05-05T01:28:14Z,2016-05-05T01:28:18Z,MERGED,True,140,13,5,https://github.com/wjwwood,Fix error handling,3,[],https://github.com/ros2/rmw/pull/68,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/68#issuecomment-217048950,"Different fix for ros2/rclcpp#217.
Should effectively replace ros2/rcl#58.
The error state (a struct with the error message, line number, and file separated) was getting reset correctly, but the formatted error message was not. The bug exposed itself as the ""error not set"" message when an error had been set after another had been set and reset. I also fixed a few other things.
I added tests since it probably would have caught this in the first place. I ran them locally:
test 6
    Start 6: test_error_handling

6: Test command: /usr/local/bin/python3 ""-u"" ""/Users/william/ros2_ws/install_isolated/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml"" ""--output-file"" ""/Users/william/ros2_ws/build_isolated/rmw/ament_cmake_gmock/test_error_handling.txt"" ""--command"" ""/Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling"" ""--gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml""
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/Users/william/ros2_ws/src/ros2/rmw/rmw':
6:  - /Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling --gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml
6: Running main() from gmock_main.cc
6: [==========] Running 4 tests from 1 test case.
6: [----------] Global test environment set-up.
6: [----------] 4 tests from test_error_handling
6: [ RUN      ] test_error_handling.nominal
6: [       OK ] test_error_handling.nominal (0 ms)
6: [ RUN      ] test_error_handling.reset
6: [       OK ] test_error_handling.reset (0 ms)
6: [ RUN      ] test_error_handling.empty
6: [       OK ] test_error_handling.empty (0 ms)
6: [ RUN      ] test_error_handling.recursive
6: [       OK ] test_error_handling.recursive (0 ms)
6: [----------] 4 tests from test_error_handling (0 ms total)
6:
6: [----------] Global test environment tear-down
6: [==========] 4 tests from 1 test case ran. (0 ms total)
6: [  PASSED  ] 4 tests.
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml'
6/6 Test #6: test_error_handling ..............   Passed    0.15 sec

100% tests passed, 0 tests failed out of 6","CI is still good with comment addressed:

http://ci.ros2.org/job/ci_linux/1264/
http://ci.ros2.org/job/ci_osx/1010/

Except obviously Windows... I'm looking into it now.",True,{}
ros2/rmw,https://github.com/ros2/rmw,68,2016-05-04T02:06:31Z,2016-05-05T01:28:14Z,2016-05-05T01:28:18Z,MERGED,True,140,13,5,https://github.com/wjwwood,Fix error handling,3,[],https://github.com/ros2/rmw/pull/68,https://github.com/wjwwood,6,https://github.com/ros2/rmw/pull/68#issuecomment-217052987,"Different fix for ros2/rclcpp#217.
Should effectively replace ros2/rcl#58.
The error state (a struct with the error message, line number, and file separated) was getting reset correctly, but the formatted error message was not. The bug exposed itself as the ""error not set"" message when an error had been set after another had been set and reset. I also fixed a few other things.
I added tests since it probably would have caught this in the first place. I ran them locally:
test 6
    Start 6: test_error_handling

6: Test command: /usr/local/bin/python3 ""-u"" ""/Users/william/ros2_ws/install_isolated/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml"" ""--output-file"" ""/Users/william/ros2_ws/build_isolated/rmw/ament_cmake_gmock/test_error_handling.txt"" ""--command"" ""/Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling"" ""--gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml""
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/Users/william/ros2_ws/src/ros2/rmw/rmw':
6:  - /Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling --gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml
6: Running main() from gmock_main.cc
6: [==========] Running 4 tests from 1 test case.
6: [----------] Global test environment set-up.
6: [----------] 4 tests from test_error_handling
6: [ RUN      ] test_error_handling.nominal
6: [       OK ] test_error_handling.nominal (0 ms)
6: [ RUN      ] test_error_handling.reset
6: [       OK ] test_error_handling.reset (0 ms)
6: [ RUN      ] test_error_handling.empty
6: [       OK ] test_error_handling.empty (0 ms)
6: [ RUN      ] test_error_handling.recursive
6: [       OK ] test_error_handling.recursive (0 ms)
6: [----------] 4 tests from test_error_handling (0 ms total)
6:
6: [----------] Global test environment tear-down
6: [==========] 4 tests from 1 test case ran. (0 ms total)
6: [  PASSED  ] 4 tests.
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml'
6/6 Test #6: test_error_handling ..............   Passed    0.15 sec

100% tests passed, 0 tests failed out of 6",I fixed the Windows tests locally: 349f88e,True,{}
ros2/rmw,https://github.com/ros2/rmw,68,2016-05-04T02:06:31Z,2016-05-05T01:28:14Z,2016-05-05T01:28:18Z,MERGED,True,140,13,5,https://github.com/wjwwood,Fix error handling,3,[],https://github.com/ros2/rmw/pull/68,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/68#issuecomment-217053123,"Different fix for ros2/rclcpp#217.
Should effectively replace ros2/rcl#58.
The error state (a struct with the error message, line number, and file separated) was getting reset correctly, but the formatted error message was not. The bug exposed itself as the ""error not set"" message when an error had been set after another had been set and reset. I also fixed a few other things.
I added tests since it probably would have caught this in the first place. I ran them locally:
test 6
    Start 6: test_error_handling

6: Test command: /usr/local/bin/python3 ""-u"" ""/Users/william/ros2_ws/install_isolated/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml"" ""--output-file"" ""/Users/william/ros2_ws/build_isolated/rmw/ament_cmake_gmock/test_error_handling.txt"" ""--command"" ""/Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling"" ""--gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml""
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/Users/william/ros2_ws/src/ros2/rmw/rmw':
6:  - /Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling --gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml
6: Running main() from gmock_main.cc
6: [==========] Running 4 tests from 1 test case.
6: [----------] Global test environment set-up.
6: [----------] 4 tests from test_error_handling
6: [ RUN      ] test_error_handling.nominal
6: [       OK ] test_error_handling.nominal (0 ms)
6: [ RUN      ] test_error_handling.reset
6: [       OK ] test_error_handling.reset (0 ms)
6: [ RUN      ] test_error_handling.empty
6: [       OK ] test_error_handling.empty (0 ms)
6: [ RUN      ] test_error_handling.recursive
6: [       OK ] test_error_handling.recursive (0 ms)
6: [----------] 4 tests from test_error_handling (0 ms total)
6:
6: [----------] Global test environment tear-down
6: [==========] 4 tests from 1 test case ran. (0 ms total)
6: [  PASSED  ] 4 tests.
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml'
6/6 Test #6: test_error_handling ..............   Passed    0.15 sec

100% tests passed, 0 tests failed out of 6",New Windows CI with --end-with rmw for speed: http://ci.ros2.org/job/ci_windows/1299/,True,{}
ros2/rmw,https://github.com/ros2/rmw,68,2016-05-04T02:06:31Z,2016-05-05T01:28:14Z,2016-05-05T01:28:18Z,MERGED,True,140,13,5,https://github.com/wjwwood,Fix error handling,3,[],https://github.com/ros2/rmw/pull/68,https://github.com/wjwwood,8,https://github.com/ros2/rmw/pull/68#issuecomment-217054648,"Different fix for ros2/rclcpp#217.
Should effectively replace ros2/rcl#58.
The error state (a struct with the error message, line number, and file separated) was getting reset correctly, but the formatted error message was not. The bug exposed itself as the ""error not set"" message when an error had been set after another had been set and reset. I also fixed a few other things.
I added tests since it probably would have caught this in the first place. I ran them locally:
test 6
    Start 6: test_error_handling

6: Test command: /usr/local/bin/python3 ""-u"" ""/Users/william/ros2_ws/install_isolated/ament_cmake_test/share/ament_cmake_test/cmake/run_test.py"" ""/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml"" ""--output-file"" ""/Users/william/ros2_ws/build_isolated/rmw/ament_cmake_gmock/test_error_handling.txt"" ""--command"" ""/Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling"" ""--gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml""
6: Test timeout computed to be: 60
6: -- run_test.py: invoking following command in '/Users/william/ros2_ws/src/ros2/rmw/rmw':
6:  - /Users/william/ros2_ws/build_isolated/rmw/test/test_error_handling --gtest_output=xml:/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml
6: Running main() from gmock_main.cc
6: [==========] Running 4 tests from 1 test case.
6: [----------] Global test environment set-up.
6: [----------] 4 tests from test_error_handling
6: [ RUN      ] test_error_handling.nominal
6: [       OK ] test_error_handling.nominal (0 ms)
6: [ RUN      ] test_error_handling.reset
6: [       OK ] test_error_handling.reset (0 ms)
6: [ RUN      ] test_error_handling.empty
6: [       OK ] test_error_handling.empty (0 ms)
6: [ RUN      ] test_error_handling.recursive
6: [       OK ] test_error_handling.recursive (0 ms)
6: [----------] 4 tests from test_error_handling (0 ms total)
6:
6: [----------] Global test environment tear-down
6: [==========] 4 tests from 1 test case ran. (0 ms total)
6: [  PASSED  ] 4 tests.
6: -- run_test.py: return code 0
6: -- run_test.py: verify result file '/Users/william/ros2_ws/build_isolated/rmw/test_results/rmw/test_error_handling.gtest.xml'
6/6 Test #6: test_error_handling ..............   Passed    0.15 sec

100% tests passed, 0 tests failed out of 6",CI looks good.,True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/esteve,1,https://github.com/ros2/rmw/pull/69,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/69#issuecomment-224354492,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,Why does this need to be removed?,True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/69#issuecomment-224354898,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,"Not to say it shouldn't, it's just not clear to me why.",True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/esteve,4,https://github.com/ros2/rmw/pull/69#issuecomment-224392071,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,"@wjwwood the -std=c++11 flag is only valid for C++ with Clang, which fails to compile rmw for Android:
/opt/android/android-ndk-r11c/toolchains/llvm/prebuilt/linux-x86_64/bin/clang  -DANDROID -Drmw_EXPORTS -fexceptions -gcc-toolchain /opt/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86_64 -target armv7-none-linux-androideabi -Qunused-arguments --sysroot=/opt/android/android-ndk-r11c/platforms/android-21/arch-arm -funwind-tables -fsigned-char -no-canonical-prefixes -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -Xclang -mnoexecstack  -marm -fno-omit-frame-pointer -fno-strict-aliasing -O0 -g -DDEBUG -D_DEBUG -fPIC -isystem /opt/android/android-ndk-r11c/platforms/android-21/arch-arm/usr/include -isystem /opt/android/android-ndk-r11c/sources/cxx-stl/gnu-libstdc++/4.9/include -isystem /opt/android/android-ndk-r11c/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include -isystem /opt/android/android-ndk-r11c/sources/cxx-stl/gnu-libstdc++/4.9/include/backward -I/home/esteve/Projects/android_ros2/src/ros2/rmw/rmw/include    -fvisibility=hidden -fvisibility-inlines-hidden -std=c++11 -o CMakeFiles/rmw.dir/src/allocators.c.o   -c /home/esteve/Projects/android_ros2/src/ros2/rmw/rmw/src/allocators.c
error: error: invalid argument invalid argument '-std=c++11' not  allowed  with 'C/ObjC'

this PR would need to be merged at the same time as ros2/rmw_fastrtps#39, though.",True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/69#issuecomment-225288857,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,"@esteve personally I'd prefer to expand the existing exclusions in that file to avoid -std=c++11 when building for Android rather than moving where it is defined. We already avoid that flag (and others) on anything that's not gcc or clang (msvc).
Alternatively we could use CMake to check to see if the compiler supports the flag: https://cmake.org/cmake/help/v3.0/module/CheckCCompilerFlag.html",True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/esteve,6,https://github.com/ros2/rmw/pull/69#issuecomment-225533626,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,"@wjwwood the problem lies in that the CMake toolchain defines CMAKE_CXX_COMPILER_ID and that the COMPILE_FLAGS property applies to both C and C++. If you want to keep the std=c++11 flag, an option could be to use target_compile_options instead of set_target_properties, like the following, to ensure that the std=c++11 flag only applies to C++
target_compile_options(${library_target}
  PRIVATE
  $<$<COMPILE_LANGUAGE:CXX>:-fvisibility=hidden -fvisibility-inlines-hidden -std=c++11>
)

generator expressions for target_compile_options are available in CMake >= 3.3, but it won't be a problem if ROS2 switches to Xenial)
However, I'm afraid I still don't see why the flag is needed:

the comment does not match the code, since the former only mentions visibility (https://github.com/ros2/rmw/blob/master/rmw/cmake/configure_rmw_library.cmake#L41-L42)
dictates rmw implementations to use C++11. I think it should be up to the rmw implementation to decide what version of C++ to use (i.e. 11, 14, 17)
both rmw_opensplice (https://github.com/ros2/rmw_opensplice/blob/master/rmw_opensplice_cpp/CMakeLists.txt#L6) and rmw_connext (https://github.com/ros2/rmw_connext/blob/master/rmw_connext_cpp/CMakeLists.txt#L9) (https://github.com/ros2/rmw_connext/blob/master/rmw_connext_dynamic_cpp/CMakeLists.txt#L9) already set the flag themselves. It's only rmw_fastrtps that does not set it, which is why I added it there (https://github.com/eProsima/ROS-RMW-Fast-RTPS-cpp/pull/39/files#diff-1c2560c14bf3483f4f59c419be91083fR6)
ROS2 builds just fine without the std=c++11 flag in configure_rmw",True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/esteve,7,https://github.com/ros2/rmw/pull/69#issuecomment-226433343,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,"Just to add something more to the discussion, the current CMakeLists.txt for this project calls configure_rmw (https://github.com/ros2/rmw/blob/master/rmw/CMakeLists.txt#L13). However, since rmw is declared to be a C project (https://github.com/ros2/rmw/blob/master/rmw/CMakeLists.txt#L3), the code in https://github.com/ros2/rmw/blob/master/rmw/cmake/configure_rmw_library.cmake#L40-L47 never gets called on Linux, because CMAKE_CXX_COMPILER_ID is not defined. I don't know if that's intentional, though.",True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/wjwwood,8,https://github.com/ros2/rmw/pull/69#issuecomment-226601038,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,"You make a lot of good points. I think the comment could easily be updated, and for rmw_connext and rmw_opensplice setting the -std flag themselves, I think that's for the tests which also use c++11. Also ROS2 only builds fine when removed if you also add it to the FastRTPS implementation.
We're now updated to Xenial and require cmake 3.5, so we could use target_compile_options to do the language specific application of the flags as you suggested, but I'm not sure we need that now if we're just passing the visibility flags.
However, I think the idea that the rmw implementations should choose their -std= value is the most compelling. Based on that, I'm ok with removing this here and having rmw implementations explicitly set it.",True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/69#issuecomment-227947903,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,"I started CI with a custom gist (https://gist.githubusercontent.com/wjwwood/fa595f1f785990c81704c28f5f6ba3aa/raw/6af9ae91957b4836899e0e0593aa213351d10069/ros2.repos):

Linux:




OS X:




Windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/dirk-thomas,10,https://github.com/ros2/rmw/pull/69#issuecomment-228083591,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,The forks are out of date and need to be rebased. The builds show compiler warnings which have been fixed since then and likely the same for some tests.,True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/wjwwood,11,https://github.com/ros2/rmw/pull/69#issuecomment-228162203,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,"I don't see any ""new"" warnings or test failures that I can attribute to these pr's. So, since I cannot do the rebase myself without opening new pr's, I'm going to merge them as-is, run CI on master, and address anything I notice there.",True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/wjwwood,12,https://github.com/ros2/rmw/pull/69#issuecomment-228162511,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,"Follow up CI:

Linux:




OS X:




Windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/wjwwood,13,https://github.com/ros2/rmw/pull/69#issuecomment-228181789,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,The OS X job was ok (it hung on the FastRTPS test but the build was ok).,True,{}
ros2/rmw,https://github.com/ros2/rmw,69,2016-06-07T16:19:34Z,2016-06-23T19:44:35Z,2016-06-24T12:48:13Z,MERGED,True,1,1,1,https://github.com/esteve,Removed -std=c++11 flag,1,[],https://github.com/ros2/rmw/pull/69,https://github.com/esteve,14,https://github.com/ros2/rmw/pull/69#issuecomment-228336740,Removed -std=c++11 flag and added to rmw_fastrtps_cpp,@wjwwood thanks.,True,{}
ros2/rmw,https://github.com/ros2/rmw,70,2016-06-15T19:44:53Z,2016-06-16T19:19:04Z,2016-06-16T19:19:08Z,MERGED,True,9,9,6,https://github.com/dirk-thomas,require CMake 3.5,2,[],https://github.com/ros2/rmw/pull/70,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/70,Connect to ament/ament_cmake#72,Connect to ament/ament_cmake#72,True,{}
ros2/rmw,https://github.com/ros2/rmw,71,2016-06-22T22:34:18Z,2016-06-22T22:44:47Z,2016-06-22T22:44:50Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,update compiler check to match AppleClang,1,[],https://github.com/ros2/rmw/pull/71,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/71,"With using CMake 3.5 and https://cmake.org/cmake/help/v3.0/policy/CMP0025.html we need to match AppleClang.
http://ci.ros2.org/job/ci_osx/1176/","With using CMake 3.5 and https://cmake.org/cmake/help/v3.0/policy/CMP0025.html we need to match AppleClang.
http://ci.ros2.org/job/ci_osx/1176/",True,{}
ros2/rmw,https://github.com/ros2/rmw,71,2016-06-22T22:34:18Z,2016-06-22T22:44:47Z,2016-06-22T22:44:50Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,update compiler check to match AppleClang,1,[],https://github.com/ros2/rmw/pull/71,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/71#issuecomment-227898262,"With using CMake 3.5 and https://cmake.org/cmake/help/v3.0/policy/CMP0025.html we need to match AppleClang.
http://ci.ros2.org/job/ci_osx/1176/",lgtm,True,{}
ros2/rmw,https://github.com/ros2/rmw,72,2016-07-06T22:39:04Z,2016-10-29T01:30:38Z,2016-10-29T01:30:42Z,MERGED,True,2,2,1,https://github.com/wjwwood,pass node to client and service destroy func,1,[],https://github.com/ros2/rmw/pull/72,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/72,Connects to ros2/rmw_connext#168.,Connects to ros2/rmw_connext#168.,True,{}
ros2/rmw,https://github.com/ros2/rmw,73,2016-09-16T23:41:24Z,2016-09-19T20:47:41Z,2016-09-19T20:47:44Z,MERGED,True,3,1,1,https://github.com/dirk-thomas,fix compiler warning on Windows,1,[],https://github.com/ros2/rmw/pull/73,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/73,See 1b28064#commitcomment-19025901,See 1b28064#commitcomment-19025901,True,{}
ros2/rmw,https://github.com/ros2/rmw,73,2016-09-16T23:41:24Z,2016-09-19T20:47:41Z,2016-09-19T20:47:44Z,MERGED,True,3,1,1,https://github.com/dirk-thomas,fix compiler warning on Windows,1,[],https://github.com/ros2/rmw/pull/73,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/73#issuecomment-248107808,See 1b28064#commitcomment-19025901,Please review.,True,{}
ros2/rmw,https://github.com/ros2/rmw,74,2016-10-19T08:16:13Z,2017-06-14T22:51:58Z,2017-06-14T22:51:58Z,CLOSED,False,28,0,2,https://github.com/vmayoral,Add rosnode and rostopic functionality (alpha8),2,[],https://github.com/ros2/rmw/pull/74,https://github.com/vmayoral,1,https://github.com/ros2/rmw/pull/74,Follows from #60,Follows from #60,True,{}
ros2/rmw,https://github.com/ros2/rmw,74,2016-10-19T08:16:13Z,2017-06-14T22:51:58Z,2017-06-14T22:51:58Z,CLOSED,False,28,0,2,https://github.com/vmayoral,Add rosnode and rostopic functionality (alpha8),2,[],https://github.com/ros2/rmw/pull/74,https://github.com/mikaelarguedas,2,https://github.com/ros2/rmw/pull/74#issuecomment-308580381,Follows from #60,"We now have a first implementation of the ros commandline tools available on https://github.com/ros2/ros2cli. Feel free to comment on ros2/ros2#197 (comment) for any feedback.
Thanks a lot @vmayoral for all this preliminary work !",True,{}
ros2/rmw,https://github.com/ros2/rmw,75,2016-10-25T21:18:11Z,2016-10-25T21:31:40Z,2016-10-25T21:31:44Z,MERGED,True,9,2,1,https://github.com/dirk-thomas,choose FastRTPS as the default if available,1,[],https://github.com/ros2/rmw/pull/75,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/75,Connect to ros2/ros2#282,Connect to ros2/ros2#282,True,{}
ros2/rmw,https://github.com/ros2/rmw,76,2016-10-27T22:13:59Z,2016-10-28T01:59:56Z,2016-10-28T02:00:00Z,MERGED,True,91,8,6,https://github.com/mikaelarguedas,add zero init tnat sanity check,9,[],https://github.com/ros2/rmw/pull/76,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/76,"connects to ros2/rcl#85, addresses ros2/rcl#85 (comment)","connects to ros2/rcl#85, addresses ros2/rcl#85 (comment)",True,{}
ros2/rmw,https://github.com/ros2/rmw,79,2016-12-08T02:04:50Z,2016-12-13T20:26:53Z,2016-12-13T23:25:20Z,MERGED,True,1,1,1,https://github.com/dhood,Update default service QoS durability to volatile,1,[],https://github.com/ros2/rmw/pull/79,https://github.com/dhood,1,https://github.com/ros2/rmw/pull/79,"Connects to #77
As outlined in #77 with transient_local, service calls may be received inappropriately multiple times. This PR changes the default for services to be volatile.
This will affect both the datawriter and datareader on both the client and the server.
I will open a corresponding PR against this article http://design.ros2.org/articles/qos.html
what do you think about adding the following warning to rcl?
Warning: Setting QoS durability to 'transient local' for service servers can cause them to receive requests from clients that have since terminated.

I think clients should be protected against receiving requests they didn't make anyway so one for clients shouldn't be necessary.

Linux: 
OS X: 
Windows: 
There are two new test failures on OS X and Windows:
test_services__rmw_fastrtps_cpp from RCL and
test_requester_replier__Primitives__rclpy__rmw_fastrtps_cpp_Release.test_requester_replier from test_communication
These fail in nightlies sometimes on Windows e.g. http://ci.ros2.org/view/nightly/job/nightly_win_rep/484/#showFailuresLink and http://ci.ros2.org/view/nightly/job/nightly_win_rep/483/#showFailuresLink respectively but I couldn't find it fail on osx before (it's a 15s timeout and it usually takes just a few seconds). I ran the above CI jobs with --retest-until-pass 10 instead of the usual 5 and that still didn't fix it but I will keep trying... hopefully we're not accidentally relying on this.","Connects to #77
As outlined in #77 with transient_local, service calls may be received inappropriately multiple times. This PR changes the default for services to be volatile.
This will affect both the datawriter and datareader on both the client and the server.
I will open a corresponding PR against this article http://design.ros2.org/articles/qos.html
what do you think about adding the following warning to rcl?
Warning: Setting QoS durability to 'transient local' for service servers can cause them to receive requests from clients that have since terminated.

I think clients should be protected against receiving requests they didn't make anyway so one for clients shouldn't be necessary.

Linux: 
OS X: 
Windows: 
There are two new test failures on OS X and Windows:
test_services__rmw_fastrtps_cpp from RCL and
test_requester_replier__Primitives__rclpy__rmw_fastrtps_cpp_Release.test_requester_replier from test_communication
These fail in nightlies sometimes on Windows e.g. http://ci.ros2.org/view/nightly/job/nightly_win_rep/484/#showFailuresLink and http://ci.ros2.org/view/nightly/job/nightly_win_rep/483/#showFailuresLink respectively but I couldn't find it fail on osx before (it's a 15s timeout and it usually takes just a few seconds). I ran the above CI jobs with --retest-until-pass 10 instead of the usual 5 and that still didn't fix it but I will keep trying... hopefully we're not accidentally relying on this.",True,{}
ros2/rmw,https://github.com/ros2/rmw,79,2016-12-08T02:04:50Z,2016-12-13T20:26:53Z,2016-12-13T23:25:20Z,MERGED,True,1,1,1,https://github.com/dhood,Update default service QoS durability to volatile,1,[],https://github.com/ros2/rmw/pull/79,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/79#issuecomment-265871573,"Connects to #77
As outlined in #77 with transient_local, service calls may be received inappropriately multiple times. This PR changes the default for services to be volatile.
This will affect both the datawriter and datareader on both the client and the server.
I will open a corresponding PR against this article http://design.ros2.org/articles/qos.html
what do you think about adding the following warning to rcl?
Warning: Setting QoS durability to 'transient local' for service servers can cause them to receive requests from clients that have since terminated.

I think clients should be protected against receiving requests they didn't make anyway so one for clients shouldn't be necessary.

Linux: 
OS X: 
Windows: 
There are two new test failures on OS X and Windows:
test_services__rmw_fastrtps_cpp from RCL and
test_requester_replier__Primitives__rclpy__rmw_fastrtps_cpp_Release.test_requester_replier from test_communication
These fail in nightlies sometimes on Windows e.g. http://ci.ros2.org/view/nightly/job/nightly_win_rep/484/#showFailuresLink and http://ci.ros2.org/view/nightly/job/nightly_win_rep/483/#showFailuresLink respectively but I couldn't find it fail on osx before (it's a 15s timeout and it usually takes just a few seconds). I ran the above CI jobs with --retest-until-pass 10 instead of the usual 5 and that still didn't fix it but I will keep trying... hopefully we're not accidentally relying on this.","The proposed warning lgtm, and it's very possible that we were relying on that timing somewhere, but we should be able to update those places with proper usage of wait_for_service now, but I don't have time to look into it personally at the moment.
+1 in general to changing the default to volatile for services.",True,{}
ros2/rmw,https://github.com/ros2/rmw,79,2016-12-08T02:04:50Z,2016-12-13T20:26:53Z,2016-12-13T23:25:20Z,MERGED,True,1,1,1,https://github.com/dhood,Update default service QoS durability to volatile,1,[],https://github.com/ros2/rmw/pull/79,https://github.com/dirk-thomas,3,https://github.com/ros2/rmw/pull/79#issuecomment-265872539,"Connects to #77
As outlined in #77 with transient_local, service calls may be received inappropriately multiple times. This PR changes the default for services to be volatile.
This will affect both the datawriter and datareader on both the client and the server.
I will open a corresponding PR against this article http://design.ros2.org/articles/qos.html
what do you think about adding the following warning to rcl?
Warning: Setting QoS durability to 'transient local' for service servers can cause them to receive requests from clients that have since terminated.

I think clients should be protected against receiving requests they didn't make anyway so one for clients shouldn't be necessary.

Linux: 
OS X: 
Windows: 
There are two new test failures on OS X and Windows:
test_services__rmw_fastrtps_cpp from RCL and
test_requester_replier__Primitives__rclpy__rmw_fastrtps_cpp_Release.test_requester_replier from test_communication
These fail in nightlies sometimes on Windows e.g. http://ci.ros2.org/view/nightly/job/nightly_win_rep/484/#showFailuresLink and http://ci.ros2.org/view/nightly/job/nightly_win_rep/483/#showFailuresLink respectively but I couldn't find it fail on osx before (it's a 15s timeout and it usually takes just a few seconds). I ran the above CI jobs with --retest-until-pass 10 instead of the usual 5 and that still didn't fix it but I will keep trying... hopefully we're not accidentally relying on this.","The failing tests even after 10 repeated tries don't sound like a flaky test anymore but like a regression. I would suggest to investigate those before considering to merge this.
Besides that: absolute change the default qos for service to being volatile 👍",True,{}
ros2/rmw,https://github.com/ros2/rmw,79,2016-12-08T02:04:50Z,2016-12-13T20:26:53Z,2016-12-13T23:25:20Z,MERGED,True,1,1,1,https://github.com/dhood,Update default service QoS durability to volatile,1,[],https://github.com/ros2/rmw/pull/79,https://github.com/dhood,4,https://github.com/ros2/rmw/pull/79#issuecomment-266836766,"Connects to #77
As outlined in #77 with transient_local, service calls may be received inappropriately multiple times. This PR changes the default for services to be volatile.
This will affect both the datawriter and datareader on both the client and the server.
I will open a corresponding PR against this article http://design.ros2.org/articles/qos.html
what do you think about adding the following warning to rcl?
Warning: Setting QoS durability to 'transient local' for service servers can cause them to receive requests from clients that have since terminated.

I think clients should be protected against receiving requests they didn't make anyway so one for clients shouldn't be necessary.

Linux: 
OS X: 
Windows: 
There are two new test failures on OS X and Windows:
test_services__rmw_fastrtps_cpp from RCL and
test_requester_replier__Primitives__rclpy__rmw_fastrtps_cpp_Release.test_requester_replier from test_communication
These fail in nightlies sometimes on Windows e.g. http://ci.ros2.org/view/nightly/job/nightly_win_rep/484/#showFailuresLink and http://ci.ros2.org/view/nightly/job/nightly_win_rep/483/#showFailuresLink respectively but I couldn't find it fail on osx before (it's a 15s timeout and it usually takes just a few seconds). I ran the above CI jobs with --retest-until-pass 10 instead of the usual 5 and that still didn't fix it but I will keep trying... hopefully we're not accidentally relying on this.","as mentioned we are going to merge this so that the defaults change, knowing that it will introduce test failures for services in some packages, but that services are being tested without issues in other areas of the codebase.
Linux: 
OS X: 
Windows: 
The tests that are failing are
projectroot.test_services__rmw_fastrtps_cpp from rcl and
projectroot.rosidl_generator_py.test_requester_replier__{msg_type}__rclpy__rmw_fastrtps_cpp from test_communication using rclpy",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/esteve,1,https://github.com/ros2/rmw/pull/80,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/mikaelarguedas,2,https://github.com/ros2/rmw/pull/80#issuecomment-291951767,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.",@ros2/team review this please,True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/80#issuecomment-292399191,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","Oh, actually, it looks like it needs to be rebased. I'll do that too.",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/80#issuecomment-292410164,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","Looks like rmw is already defaulting to non-shared and causing issues:
02:10:57 /usr/bin/ld: /home/rosbuild/ci_scripts/ws/install/rmw/lib/librmw.a(error_handling.c.o): relocation R_X86_64_TPOFF32 against `__rmw_error_state' can not be used when making a shared object; recompile with -fPIC

-- http://ci.ros2.org/job/ci_linux/2410/consoleFull
@dirk-thomas what is blocking us from removing SHARED from the add_library call and still getting dynamic libraries by default?
@esteve since you're probably wanting to use this in the static linking mode at some point, I guess we should wait to merge this until the above issue is investigated?",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/80#issuecomment-292410748,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","All of the CI I just ran, in case it's helpful for debugging:

Linux:




Linux-aarch64:




macOS:




Windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/esteve,6,https://github.com/ros2/rmw/pull/80#issuecomment-292485694,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","@wjwwood thanks for rebasing this PR. I've readded the explicit SHARED keyword, until #81 is resolved so this PR can be merged sooner.",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/80#issuecomment-292685014,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","Ok @esteve, here's new CI with your latest commit:

Linux:




Linux-aarch64:




macOS:




Windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/wjwwood,8,https://github.com/ros2/rmw/pull/80#issuecomment-293757287,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","CI:

Linux:




Linux-aarch64:




macOS:

 (known compiler warning)


Windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/80#issuecomment-293757323,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.",Thanks @esteve!,True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/esteve,10,https://github.com/ros2/rmw/pull/80#issuecomment-293845807,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","@wjwwood thanks for fleshing out this PR. Just a minor comment, I remember deciding not using TargetConditionals.h (df1500b), but unfortunately I forgot why. I think it was because TargetConditionals.h was not available in certain versions of the iOS SDK or because some of its definitions are deprecated, but nevertheless, if any issue shows up, it can be addressed in the future.
Thanks again for testing this!",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/wjwwood,11,https://github.com/ros2/rmw/pull/80#issuecomment-294036173,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","@wjwwood thanks for fleshing out this PR. Just a minor comment, I remember deciding not using TargetConditionals.h (df1500b), but unfortunately I forgot why. I think it was because TargetConditionals.h was not available in certain versions of the iOS SDK or because some of its definitions are deprecated, but nevertheless, if any issue shows up, it can be addressed in the future.

Doh. That's what I get for trying to make it better. Ok we can address it if we need to in the future. Hopefully it works for some cases now.

Thanks again for testing this!

No worries, I wanted to get it in before #101 because this whole code block is getting moved to another package for reuse in other places.",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/esteve,12,https://github.com/ros2/rmw/pull/80#issuecomment-294135393,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","@wjwwood oh sorry, I hope I didn't sound ungrateful, the code definitely looks much better now. It's actually my fault for not documenting why I didn't use TargetConditionals.h, now I forgot why I opted not to use it 😄",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/wjwwood,13,https://github.com/ros2/rmw/pull/80#issuecomment-294228215,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","@wjwwood oh sorry, I hope I didn't sound ungrateful

Not at all.",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/wjwwood,14,https://github.com/ros2/rmw/pull/80#issuecomment-432869993,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","@esteve do you know if pthread is still required for iOS? I thought I read that it's no longer required.
The reason I'm asking is that I'm refactoring the error handling code to no longer allocate memory when setting an error (trying to improve memory management) and the pthread specific code is making things really difficult.
I'm simultaneously looking into whether or not other potential platforms need pthread support still as well.",True,{}
ros2/rmw,https://github.com/ros2/rmw,80,2016-12-08T09:55:55Z,2017-04-13T02:11:04Z,2018-10-29T16:34:33Z,MERGED,True,71,1,3,https://github.com/esteve,Add support for pthread-based thread local storage,5,[],https://github.com/ros2/rmw/pull/80,https://github.com/esteve,15,https://github.com/ros2/rmw/pull/80#issuecomment-433981402,"This PR adds support for pthread-based thread local storage on platforms that don't have compiler builtin support for it. I only enabled it for iOS < 10.0, but it can be extended to any other platform via CMake flags.","I recall needing pthread for TLS with a Linaro toolchain a while ago, but I imagine that's no longer a problem. As for iOS, C11-based TLS is supported since 10. If this code needs to be revived in the future, I can take a look at it, but for now... KILL IT WITH FIRE",True,"{'LAUGH': ['https://github.com/allenh1'], 'THUMBS_UP': ['https://github.com/wjwwood']}"
ros2/rmw,https://github.com/ros2/rmw,81,2016-12-08T10:21:08Z,2017-04-05T19:47:23Z,2017-04-07T13:04:18Z,MERGED,True,3,3,2,https://github.com/esteve,Control shared/static linking via BUILD_SHARED_LIBS,1,[],https://github.com/ros2/rmw/pull/81,https://github.com/esteve,1,https://github.com/ros2/rmw/pull/81,"This PR delegates the decision to build a shared or a static library to CMake's BUILD_SHARED_LIBS
Update:
Connects to ros2/ros2#306","This PR delegates the decision to build a shared or a static library to CMake's BUILD_SHARED_LIBS
Update:
Connects to ros2/ros2#306",True,{}
ros2/rmw,https://github.com/ros2/rmw,81,2016-12-08T10:21:08Z,2017-04-05T19:47:23Z,2017-04-07T13:04:18Z,MERGED,True,3,3,2,https://github.com/esteve,Control shared/static linking via BUILD_SHARED_LIBS,1,[],https://github.com/ros2/rmw/pull/81,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/81#issuecomment-291975885,"This PR delegates the decision to build a shared or a static library to CMake's BUILD_SHARED_LIBS
Update:
Connects to ros2/ros2#306","This PR works as-is so I will go ahead and merge it (while some other related PRs are still pending). The Jenkins status looks worse as it is since the fork is older than the upstream master Update: that assumption was obviously wrong, see comment below:",True,{}
ros2/rmw,https://github.com/ros2/rmw,81,2016-12-08T10:21:08Z,2017-04-05T19:47:23Z,2017-04-07T13:04:18Z,MERGED,True,3,3,2,https://github.com/esteve,Control shared/static linking via BUILD_SHARED_LIBS,1,[],https://github.com/ros2/rmw/pull/81,https://github.com/dirk-thomas,3,https://github.com/ros2/rmw/pull/81#issuecomment-291976000,"This PR delegates the decision to build a shared or a static library to CMake's BUILD_SHARED_LIBS
Update:
Connects to ros2/ros2#306",Thanks!,True,{}
ros2/rmw,https://github.com/ros2/rmw,81,2016-12-08T10:21:08Z,2017-04-05T19:47:23Z,2017-04-07T13:04:18Z,MERGED,True,3,3,2,https://github.com/esteve,Control shared/static linking via BUILD_SHARED_LIBS,1,[],https://github.com/ros2/rmw/pull/81,https://github.com/dirk-thomas,4,https://github.com/ros2/rmw/pull/81#issuecomment-291997813,"This PR delegates the decision to build a shared or a static library to CMake's BUILD_SHARED_LIBS
Update:
Connects to ros2/ros2#306","This change actually makes the gmock tests in rmw fail:

gmock_vendor/src/gmock_vendor/googlemock-1.7.0/include/gtest/gtest.h:2593:: pthread_key_delete(key_)failed with error 22

Looking into it...",True,{}
ros2/rmw,https://github.com/ros2/rmw,81,2016-12-08T10:21:08Z,2017-04-05T19:47:23Z,2017-04-07T13:04:18Z,MERGED,True,3,3,2,https://github.com/esteve,Control shared/static linking via BUILD_SHARED_LIBS,1,[],https://github.com/ros2/rmw/pull/81,https://github.com/dirk-thomas,5,https://github.com/ros2/rmw/pull/81#issuecomment-292020446,"This PR delegates the decision to build a shared or a static library to CMake's BUILD_SHARED_LIBS
Update:
Connects to ros2/ros2#306",I reverted the merge since it actually fails on Windows and fails tests on Linus (even when using the default of shared libraries).,True,{}
ros2/rmw,https://github.com/ros2/rmw,81,2016-12-08T10:21:08Z,2017-04-05T19:47:23Z,2017-04-07T13:04:18Z,MERGED,True,3,3,2,https://github.com/esteve,Control shared/static linking via BUILD_SHARED_LIBS,1,[],https://github.com/ros2/rmw/pull/81,https://github.com/dirk-thomas,6,https://github.com/ros2/rmw/pull/81#issuecomment-292232823,"This PR delegates the decision to build a shared or a static library to CMake's BUILD_SHARED_LIBS
Update:
Connects to ros2/ros2#306",@esteve Can you please look into the problems and create a new PR which passes.,True,{}
ros2/rmw,https://github.com/ros2/rmw,82,2016-12-08T23:04:59Z,2016-12-09T19:56:29Z,2016-12-09T19:56:36Z,MERGED,True,1,1,1,https://github.com/dhood,Update default QoS history to keep last,1,[],https://github.com/ros2/rmw/pull/82,https://github.com/dhood,1,https://github.com/ros2/rmw/pull/82,"With keep_all (as is), the depth is ignored (Section 2.2.3.18 HISTORY of http://www.omg.org/spec/DDS/1.4/PDF) and we have what is akin to an unlimited queue.
This can lead to resource issues (especially using Fast RTPS which has a default history cache size of 5000).
This ""addresses"" ros2/rmw_fastrtps#68 in the sense that it won't happen using the default QoS settings (it does not fix it because people can still use the QoS settings).
There is no regression test for ros2/rmw_fastrtps#68, I have only manually confirmed.
Linux: 
OS X: 
Windows:","With keep_all (as is), the depth is ignored (Section 2.2.3.18 HISTORY of http://www.omg.org/spec/DDS/1.4/PDF) and we have what is akin to an unlimited queue.
This can lead to resource issues (especially using Fast RTPS which has a default history cache size of 5000).
This ""addresses"" ros2/rmw_fastrtps#68 in the sense that it won't happen using the default QoS settings (it does not fix it because people can still use the QoS settings).
There is no regression test for ros2/rmw_fastrtps#68, I have only manually confirmed.
Linux: 
OS X: 
Windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,82,2016-12-08T23:04:59Z,2016-12-09T19:56:29Z,2016-12-09T19:56:36Z,MERGED,True,1,1,1,https://github.com/dhood,Update default QoS history to keep last,1,[],https://github.com/ros2/rmw/pull/82,https://github.com/dhood,2,https://github.com/ros2/rmw/pull/82#issuecomment-265883168,"With keep_all (as is), the depth is ignored (Section 2.2.3.18 HISTORY of http://www.omg.org/spec/DDS/1.4/PDF) and we have what is akin to an unlimited queue.
This can lead to resource issues (especially using Fast RTPS which has a default history cache size of 5000).
This ""addresses"" ros2/rmw_fastrtps#68 in the sense that it won't happen using the default QoS settings (it does not fix it because people can still use the QoS settings).
There is no regression test for ros2/rmw_fastrtps#68, I have only manually confirmed.
Linux: 
OS X: 
Windows:","also, there's this note in the dds spec (2.2.3.4 DURABILITY) that suggests that this might not be a good default setting (for resource reasons) even with volatile:

Note that
although related, this does not strictly control what data the Service will maintain internally. That is, the Service may choose to
maintain some data for its own purposes (e.g., flow control) and yet not make it available to late-joining readers if the
DURABILITY QoS policy is set to VOLATILE.",True,{}
ros2/rmw,https://github.com/ros2/rmw,83,2016-12-09T20:37:59Z,2016-12-13T22:40:24Z,2016-12-13T22:40:28Z,MERGED,True,1,1,1,https://github.com/codebot,c++14,1,[],https://github.com/ros2/rmw/pull/83,https://github.com/codebot,1,https://github.com/ros2/rmw/pull/83,connects to ros2/ros2#294,connects to ros2/ros2#294,True,{}
ros2/rmw,https://github.com/ros2/rmw,83,2016-12-09T20:37:59Z,2016-12-13T22:40:24Z,2016-12-13T22:40:28Z,MERGED,True,1,1,1,https://github.com/codebot,c++14,1,[],https://github.com/ros2/rmw/pull/83,https://github.com/codebot,2,https://github.com/ros2/rmw/pull/83#issuecomment-266885188,connects to ros2/ros2#294,"linux: http://ci.ros2.org/job/ci_linux/2055/
os x: http://ci.ros2.org/job/ci_osx/1588/
windows: http://ci.ros2.org/job/ci_windows/2071/",True,{}
ros2/rmw,https://github.com/ros2/rmw,84,2016-12-09T22:10:00Z,2016-12-10T00:00:27Z,2016-12-10T00:00:31Z,MERGED,True,4,4,1,https://github.com/dhood,Use volatile durability explicitly for most QoS profiles,1,[],https://github.com/ros2/rmw/pull/84,https://github.com/dhood,1,https://github.com/ros2/rmw/pull/84,"When durability settings were added in #41, all durability profiles were set to use the underlying durability defaults (services are an exception, see #79 for a matching PR)
The system defaults for durability might be different for different middlewares, and they might change over time, so this sets the durability to an explicit setting.
Right now, I understand that both connext and fastrtps use volatile for both datareaders and datawriters. So, this PR doesn't influence our system that much today. But it makes ROS 2 more robust against changes that vendors make to their defaults*.
Linux:  
OS X: 
Windows:  (warnings unrelated)
*For example, in January fastrtps changed from using transient_local to using volatile for datareaders by default, and this could happen again some day.","When durability settings were added in #41, all durability profiles were set to use the underlying durability defaults (services are an exception, see #79 for a matching PR)
The system defaults for durability might be different for different middlewares, and they might change over time, so this sets the durability to an explicit setting.
Right now, I understand that both connext and fastrtps use volatile for both datareaders and datawriters. So, this PR doesn't influence our system that much today. But it makes ROS 2 more robust against changes that vendors make to their defaults*.
Linux:  
OS X: 
Windows:  (warnings unrelated)
*For example, in January fastrtps changed from using transient_local to using volatile for datareaders by default, and this could happen again some day.",True,{}
ros2/rmw,https://github.com/ros2/rmw,86,2016-12-13T03:07:22Z,2016-12-13T05:11:49Z,2016-12-13T05:11:55Z,MERGED,True,21,21,2,https://github.com/dhood,Rename QoS policies,1,[],https://github.com/ros2/rmw/pull/86,https://github.com/dhood,1,https://github.com/ros2/rmw/pull/86,"Fixes #85
Connects to #85
Linux CI: 
I have updated the repos in the ros2 organisation.
Branches other than master will probably have to be rebased.
Here's a bash script for making the changes on other repos (e.g. external client libraries) (github only supports .txt...):
qos_name_changes.txt","Fixes #85
Connects to #85
Linux CI: 
I have updated the repos in the ros2 organisation.
Branches other than master will probably have to be rebased.
Here's a bash script for making the changes on other repos (e.g. external client libraries) (github only supports .txt...):
qos_name_changes.txt",True,{}
ros2/rmw,https://github.com/ros2/rmw,87,2016-12-13T20:19:49Z,2017-04-04T03:41:15Z,2017-04-04T03:41:18Z,CLOSED,False,188,1,5,https://github.com/wjwwood,move getenv from rcl to here for more reuse,3,[],https://github.com/ros2/rmw/pull/87,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/87,Connects to ros2/rmw_fastrtps#79,Connects to ros2/rmw_fastrtps#79,True,{}
ros2/rmw,https://github.com/ros2/rmw,87,2016-12-13T20:19:49Z,2017-04-04T03:41:15Z,2017-04-04T03:41:18Z,CLOSED,False,188,1,5,https://github.com/wjwwood,move getenv from rcl to here for more reuse,3,[],https://github.com/ros2/rmw/pull/87,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/87#issuecomment-270522980,Connects to ros2/rmw_fastrtps#79,I don't think rmw is a good location for those since it has nothing to do with the ROS middleware interface. Maybe a new package for those functions would be a good idea (so that it can be used from rmw implementations as well as rcl*).,True,{}
ros2/rmw,https://github.com/ros2/rmw,87,2016-12-13T20:19:49Z,2017-04-04T03:41:15Z,2017-04-04T03:41:18Z,CLOSED,False,188,1,5,https://github.com/wjwwood,move getenv from rcl to here for more reuse,3,[],https://github.com/ros2/rmw/pull/87,https://github.com/Karsten1987,3,https://github.com/ros2/rmw/pull/87#issuecomment-289164076,Connects to ros2/rmw_fastrtps#79,"btw, should we close this in favor of ros2/rcutils#2 ?",True,{}
ros2/rmw,https://github.com/ros2/rmw,87,2016-12-13T20:19:49Z,2017-04-04T03:41:15Z,2017-04-04T03:41:18Z,CLOSED,False,188,1,5,https://github.com/wjwwood,move getenv from rcl to here for more reuse,3,[],https://github.com/ros2/rmw/pull/87,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/87#issuecomment-289947531,Connects to ros2/rmw_fastrtps#79,"@Karsten1987 I'd say that we should use this implementation (documentation, signature, and implementation, if they're not already identical to what's in ros2/rcutils#2) before this is closed. I spent a good deal of time tweaking this implementation to work the same on Windows and Unix without any inconsistencies and avoiding memory allocation if possible.",True,{}
ros2/rmw,https://github.com/ros2/rmw,87,2016-12-13T20:19:49Z,2017-04-04T03:41:15Z,2017-04-04T03:41:18Z,CLOSED,False,188,1,5,https://github.com/wjwwood,move getenv from rcl to here for more reuse,3,[],https://github.com/ros2/rmw/pull/87,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/87#issuecomment-289947656,Connects to ros2/rmw_fastrtps#79,"Or at least as nearly as possible, given that this implementation uses RMW_* defines.",True,{}
ros2/rmw,https://github.com/ros2/rmw,87,2016-12-13T20:19:49Z,2017-04-04T03:41:15Z,2017-04-04T03:41:18Z,CLOSED,False,188,1,5,https://github.com/wjwwood,move getenv from rcl to here for more reuse,3,[],https://github.com/ros2/rmw/pull/87,https://github.com/mikaelarguedas,6,https://github.com/ros2/rmw/pull/87#issuecomment-289951106,Connects to ros2/rmw_fastrtps#79,the implementation in ros2/rcutils#2 will be identical on behaviour and argument type. The return codes will be different though,True,{}
ros2/rmw,https://github.com/ros2/rmw,87,2016-12-13T20:19:49Z,2017-04-04T03:41:15Z,2017-04-04T03:41:18Z,CLOSED,False,188,1,5,https://github.com/wjwwood,move getenv from rcl to here for more reuse,3,[],https://github.com/ros2/rmw/pull/87,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/87#issuecomment-291385317,Connects to ros2/rmw_fastrtps#79,Closing in favor of ros2/rcutils#2,True,{}
ros2/rmw,https://github.com/ros2/rmw,88,2016-12-15T07:31:18Z,2016-12-21T02:29:48Z,2016-12-21T02:29:51Z,MERGED,True,159,63,7,https://github.com/wjwwood,Doxygen setup,6,[],https://github.com/ros2/rmw/pull/88,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/88,"This pull request sets up Doxygen and fixes the documentation to look correct when rendered and to reference external data, like cppreference.com (where appropriate).
I've pushed the current state up to http://docs.ros2.org/beta1/api/rmw/ and updated the rcl stuff to cross reference the contents. I'll update this one when I've added docs for the packages it relies on.","This pull request sets up Doxygen and fixes the documentation to look correct when rendered and to reference external data, like cppreference.com (where appropriate).
I've pushed the current state up to http://docs.ros2.org/beta1/api/rmw/ and updated the rcl stuff to cross reference the contents. I'll update this one when I've added docs for the packages it relies on.",True,{}
ros2/rmw,https://github.com/ros2/rmw,88,2016-12-15T07:31:18Z,2016-12-21T02:29:48Z,2016-12-21T02:29:51Z,MERGED,True,159,63,7,https://github.com/wjwwood,Doxygen setup,6,[],https://github.com/ros2/rmw/pull/88,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/88#issuecomment-268403518,"This pull request sets up Doxygen and fixes the documentation to look correct when rendered and to reference external data, like cppreference.com (where appropriate).
I've pushed the current state up to http://docs.ros2.org/beta1/api/rmw/ and updated the rcl stuff to cross reference the contents. I'll update this one when I've added docs for the packages it relies on.","Now that the beta is out, I'd like to get these basic configurations and documentation updates merged. Looking for a review.",True,{}
ros2/rmw,https://github.com/ros2/rmw,89,2017-01-04T23:10:33Z,2017-01-05T05:39:01Z,2017-01-05T05:39:05Z,MERGED,True,1,0,1,https://github.com/dirk-thomas,don't expose rmw_implementation for now,1,[],https://github.com/ros2/rmw/pull/89,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/89,"For now don't generate separate targets and especially tests for rmw_implementation. You can remove this locally to e.g. build talker__rmw_implementation / listener__rmw_implementation.
Connect to ros2/rmw_implementation#17","For now don't generate separate targets and especially tests for rmw_implementation. You can remove this locally to e.g. build talker__rmw_implementation / listener__rmw_implementation.
Connect to ros2/rmw_implementation#17",True,{}
ros2/rmw,https://github.com/ros2/rmw,90,2017-01-26T02:21:27Z,2017-01-30T18:29:29Z,2017-01-30T18:29:33Z,MERGED,True,48,4,4,https://github.com/Karsten1987,expose list of nodes,3,[],https://github.com/ros2/rmw/pull/90,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/90,Connect to ros2/cli_tools#1,Connect to ros2/cli_tools#1,True,{}
ros2/rmw,https://github.com/ros2/rmw,90,2017-01-26T02:21:27Z,2017-01-30T18:29:29Z,2017-01-30T18:29:33Z,MERGED,True,48,4,4,https://github.com/Karsten1987,expose list of nodes,3,[],https://github.com/ros2/rmw/pull/90,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/90#issuecomment-275302498,Connect to ros2/cli_tools#1,"I would suggest connecting all other PRs to this one to group the PRs in waffle as well as have a ""master"" ticket to comment on with e.g. CI builds.
This also needs a PR for rmw_opensplice so that it at least continues to build / link.",True,{}
ros2/rmw,https://github.com/ros2/rmw,90,2017-01-26T02:21:27Z,2017-01-30T18:29:29Z,2017-01-30T18:29:33Z,MERGED,True,48,4,4,https://github.com/Karsten1987,expose list of nodes,3,[],https://github.com/ros2/rmw/pull/90,https://github.com/Karsten1987,3,https://github.com/ros2/rmw/pull/90#issuecomment-275796141,Connect to ros2/cli_tools#1,any updates on this?,True,{}
ros2/rmw,https://github.com/ros2/rmw,90,2017-01-26T02:21:27Z,2017-01-30T18:29:29Z,2017-01-30T18:29:33Z,MERGED,True,48,4,4,https://github.com/Karsten1987,expose list of nodes,3,[],https://github.com/ros2/rmw/pull/90,https://github.com/dirk-thomas,4,https://github.com/ros2/rmw/pull/90#issuecomment-275796914,Connect to ros2/cli_tools#1,I think it would be good to have a CI job which was run for OpenSplice to ensure it compiles. Also I didn't see any test where it checks that the returned nodes names are correct. I think that would be good to cover too.,True,{}
ros2/rmw,https://github.com/ros2/rmw,90,2017-01-26T02:21:27Z,2017-01-30T18:29:29Z,2017-01-30T18:29:33Z,MERGED,True,48,4,4,https://github.com/Karsten1987,expose list of nodes,3,[],https://github.com/ros2/rmw/pull/90,https://github.com/Karsten1987,5,https://github.com/ros2/rmw/pull/90#issuecomment-275866372,Connect to ros2/cli_tools#1,"I added a new test for ensuring that both supported rmw implementations are returning the same issue.
Can be found in here: https://github.com/ros2/rcl/blob/rosnode_list/rcl/test/rcl/test_get_node_names.cpp
build result:",True,{}
ros2/rmw,https://github.com/ros2/rmw,91,2017-02-10T22:38:43Z,2017-02-28T05:08:45Z,2017-02-28T05:22:24Z,MERGED,True,6,3,1,https://github.com/mikaelarguedas,Use -Wpedantic,1,[],https://github.com/ros2/rmw/pull/91,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/91,See ros2/ros2#305,See ros2/ros2#305,True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/92,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/92#issuecomment-287208251,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","@dirk-thomas I had to add 2a66f7a in order to address this Linux-only build failure:
../gmock/libgmock.a(gmock-gtest-all.cc.o): In function `testing::internal::ThreadLocal<testing::TestPartResultReporterInterface*>::~ThreadLocal()':
gmock-gtest-all.cc:(.text._ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEED2Ev[_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEED5Ev]+0x25): undefined reference to `pthread_getspecific'
gmock-gtest-all.cc:(.text._ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEED2Ev[_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEED5Ev]+0x3a): undefined reference to `pthread_key_delete'
../gmock/libgmock.a(gmock-gtest-all.cc.o): In function `testing::internal::ThreadLocal<std::vector<testing::internal::TraceInfo, std::allocator<testing::internal::TraceInfo> > >::~ThreadLocal()':
gmock-gtest-all.cc:(.text._ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEED2Ev[_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEED5Ev]+0x25): undefined reference to `pthread_getspecific'
gmock-gtest-all.cc:(.text._ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEED2Ev[_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEED5Ev]+0x3a): undefined reference to `pthread_key_delete'
../gmock/libgmock.a(gmock-gtest-all.cc.o): In function `testing::internal::ThreadLocal<std::vector<testing::internal::TraceInfo, std::allocator<testing::internal::TraceInfo> > >::GetOrCreateValue() const':
gmock-gtest-all.cc:(.text._ZNK7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE16GetOrCreateValueEv[_ZNK7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE16GetOrCreateValueEv]+0x27): undefined reference to `pthread_getspecific'
gmock-gtest-all.cc:(.text._ZNK7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE16GetOrCreateValueEv[_ZNK7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE16GetOrCreateValueEv]+0x8b): undefined reference to `pthread_setspecific'
../gmock/libgmock.a(gmock-gtest-all.cc.o): In function `testing::internal::ThreadLocal<testing::TestPartResultReporterInterface*>::CreateKey()':
gmock-gtest-all.cc:(.text._ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE9CreateKeyEv[_ZN7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE9CreateKeyEv]+0x25): undefined reference to `pthread_key_create'
../gmock/libgmock.a(gmock-gtest-all.cc.o): In function `testing::internal::ThreadLocal<std::vector<testing::internal::TraceInfo, std::allocator<testing::internal::TraceInfo> > >::CreateKey()':
gmock-gtest-all.cc:(.text._ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE9CreateKeyEv[_ZN7testing8internal11ThreadLocalISt6vectorINS0_9TraceInfoESaIS3_EEE9CreateKeyEv]+0x25): undefined reference to `pthread_key_create'
../gmock/libgmock.a(gmock-gtest-all.cc.o): In function `testing::internal::ThreadLocal<testing::Sequence*>::CreateKey()':
gmock-gtest-all.cc:(.text._ZN7testing8internal11ThreadLocalIPNS_8SequenceEE9CreateKeyEv[_ZN7testing8internal11ThreadLocalIPNS_8SequenceEE9CreateKeyEv]+0x25): undefined reference to `pthread_key_create'
../gmock/libgmock.a(gmock-gtest-all.cc.o): In function `testing::internal::ThreadLocal<testing::TestPartResultReporterInterface*>::GetOrCreateValue() const':
gmock-gtest-all.cc:(.text._ZNK7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE16GetOrCreateValueEv[_ZNK7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE16GetOrCreateValueEv]+0x25): undefined reference to `pthread_getspecific'
gmock-gtest-all.cc:(.text._ZNK7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE16GetOrCreateValueEv[_ZNK7testing8internal11ThreadLocalIPNS_31TestPartResultReporterInterfaceEE16GetOrCreateValueEv]+0x89): undefined reference to `pthread_setspecific'
../gmock/libgmock.a(gmock-gtest-all.cc.o): In function `testing::internal::ThreadLocal<testing::Sequence*>::GetOrCreateValue() const':
gmock-gtest-all.cc:(.text._ZNK7testing8internal11ThreadLocalIPNS_8SequenceEE16GetOrCreateValueEv[_ZNK7testing8internal11ThreadLocalIPNS_8SequenceEE16GetOrCreateValueEv]+0x25): undefined reference to `pthread_getspecific'
gmock-gtest-all.cc:(.text._ZNK7testing8internal11ThreadLocalIPNS_8SequenceEE16GetOrCreateValueEv[_ZNK7testing8internal11ThreadLocalIPNS_8SequenceEE16GetOrCreateValueEv]+0x89): undefined reference to `pthread_setspecific'
../gmock/libgmock.a(gmock-gtest-all.cc.o): In function `testing::internal::ThreadLocal<testing::Sequence*>::~ThreadLocal()':
gmock-gtest-all.cc:(.text._ZN7testing8internal11ThreadLocalIPNS_8SequenceEED2Ev[_ZN7testing8internal11ThreadLocalIPNS_8SequenceEED5Ev]+0x25): undefined reference to `pthread_getspecific'
gmock-gtest-all.cc:(.text._ZN7testing8internal11ThreadLocalIPNS_8SequenceEED2Ev[_ZN7testing8internal11ThreadLocalIPNS_8SequenceEED5Ev]+0x3a): undefined reference to `pthread_key_delete'
collect2: error: ld returned 1 exit status


You can see that a similar thing has been done for the other test here in rmw. Should the ament_add_gmock_test macro be doing this linking against pthread? I do not believe these tests are introducing the need for pthread based on the linked error lines above. I think it's more likely that our other tests get pthread linked in for some other reason, hiding this problem in most cases.",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/92#issuecomment-287221799,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","CI:

Linux:




macOS:




Windows: (I had to add --skip-packages fastrtps to my test args...)",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/92#issuecomment-287237913,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","Ok, CI looks good. Anyone else have comments before merging?
@Karsten1987 I tried to reply to each of your questions/comments. Can you re-review real quick.",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/92#issuecomment-288172826,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","I'm going to address #92 (comment), in the meantime does anyone have any comments on the placement of this function? Should it be in the impl part of rmw? Should it be in rmw rather than somewhere else like c_utilities or just rcl?",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/mikaelarguedas,6,https://github.com/ros2/rmw/pull/92#issuecomment-288174579,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.",I don't think we should put this in c_utilities if we want to keep c_utilities ros agnostic. not sure if it needs to be as low as rmw or can be in rcl though. It may actually be better in rcl given that different rmw_implementations and transports could decide to deal with the full topic name in different ways. I don't have a strong opinion about it though.,True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/dirk-thomas,7,https://github.com/ros2/rmw/pull/92#issuecomment-288175606,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","Imo c_utilities should only contains generic C stuff which is not specific to any ROS concepts.
If there is no strong reason why these functions are being used in rmw I would favor placing them in rcl.",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,8,https://github.com/ros2/rmw/pull/92#issuecomment-288176015,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","If there is no strong reason why these functions are being used in rmw I would favor placing them in rcl.

The only reason would be so that rmw implementations could ""double check"" the incoming topics are valid FQN. This should be asserted by rcl before passing them down, but if someone were to use rmw directly it might not always be the case.",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/dirk-thomas,9,https://github.com/ros2/rmw/pull/92#issuecomment-288177092,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","If there is no strong reason why these functions are being used in rmw I would favor placing them in rcl.



The only reason would be so that rmw implementations could ""double check"" the incoming topics are valid FQN. This should be asserted by rcl before passing them down, but if someone were to use rmw directly it might not always be the case.

If it will be used to validate parameters passed through the rmw interface https://github.com/ros2/rmw/blob/master/rmw/include/rmw/sanity_checks.h sounds like a reasonable place.",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,10,https://github.com/ros2/rmw/pull/92#issuecomment-288184772,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","Ok, so not in the impl? I'd rather not stuff it in that catch-all style header. I'd like to move slowly away from the the rmw header layout which puts everything in groups. So if I move it out of the impl, then I'd just put it in its own header as it is now. Does that sound ok?",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/dirk-thomas,11,https://github.com/ros2/rmw/pull/92#issuecomment-288186719,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","Ok, so not in the impl? I'd rather not stuff it in that catch-all style header. I'd like to move slowly away from the the rmw header layout which puts everything in groups. So if I move it out of the impl, then I'd just put it in its own header as it is now. Does that sound ok?

Sounds good to me.",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,12,https://github.com/ros2/rmw/pull/92#issuecomment-288188282,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","I implemented a custom isalnum in aaa1323, I'll reorganize the code as discussed after lunch.",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,13,https://github.com/ros2/rmw/pull/92#issuecomment-288203101,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","Ok, I reorganized the files in a4963d7 and fixed them in 3ddf742. I also refactored the macros to all start with a common prefix, RMW_TOPIC_ (e.g. RMW_TOPIC_VALID, RMW_TOPIC_INVALID_..., RMW_TOPIC_MAX_NAME_LENGTH), in f3fbb02.",True,{}
ros2/rmw,https://github.com/ros2/rmw,92,2017-03-16T07:45:52Z,2017-03-22T04:38:48Z,2017-04-19T18:06:25Z,MERGED,True,523,0,8,https://github.com/wjwwood,add a function to validate topic names,9,[],https://github.com/ros2/rmw/pull/92,https://github.com/wjwwood,14,https://github.com/ros2/rmw/pull/92#issuecomment-288292563,"This is the first step in implementing namespaces above the rmw layer. I ended up placing this function in rmw (or at least that's what I'm proposing here) because I thought it might be a useful check (if only in debug situations) that could be used in the rmw implementations as well as in rcl where I will use it to support other namespace functionality.
I'm interested in feedback on placing it here rather than in rcl. Also, I've put it in a rmw/impl namespace, because I feel that it should stand apart from the rmw interface that middleware implementations need to fulfill. In both cases, it is easily moved around or re-namespaced, so please let me know if you think it would be better elsewhere.
I feel that this function's purpose and rules (set out from the design doc) are self contained enough and well defined enough to merge ahead of more namespace work, so I'm going to go ahead and put it in review.","CI:

Linux:


Warning is unrelated to this pr, see: ros2/rclcpp#311 (comment)


macOS:




Windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,93,2017-03-29T00:19:52Z,2017-04-04T03:40:29Z,2017-04-04T03:40:33Z,MERGED,True,348,14,8,https://github.com/wjwwood,add rmw_validate_node_name(),4,['enhancement'],https://github.com/ros2/rmw/pull/93,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/93,"This is a precursor to the larger set of namespace pull requests. This one was small and reviewable as-is, so I'm submitting it separately.
The documentation for this new function also takes the opportunity to layout some rules for node names, which we've sort of had in mind informally until now.
This new function can be used by rcl* to check if a node name follows the rules for node names, or by rmw_* packages to assert that the node name it is given is valid (should always be the case, but it might be worth checking incase something other than rcl uses rmw directly).
Just like rmw_validate_topic_name(), this function will return a cause if the name is invalid, as well as an index in the string that is the culprit.
I copy-paste-modify'ed this from the other validate function, so please be on the lookout for typos 😄.","This is a precursor to the larger set of namespace pull requests. This one was small and reviewable as-is, so I'm submitting it separately.
The documentation for this new function also takes the opportunity to layout some rules for node names, which we've sort of had in mind informally until now.
This new function can be used by rcl* to check if a node name follows the rules for node names, or by rmw_* packages to assert that the node name it is given is valid (should always be the case, but it might be worth checking incase something other than rcl uses rmw directly).
Just like rmw_validate_topic_name(), this function will return a cause if the name is invalid, as well as an index in the string that is the culprit.
I copy-paste-modify'ed this from the other validate function, so please be on the lookout for typos 😄.",True,{}
ros2/rmw,https://github.com/ros2/rmw,93,2017-03-29T00:19:52Z,2017-04-04T03:40:29Z,2017-04-04T03:40:33Z,MERGED,True,348,14,8,https://github.com/wjwwood,add rmw_validate_node_name(),4,['enhancement'],https://github.com/ros2/rmw/pull/93,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/93#issuecomment-290793526,"This is a precursor to the larger set of namespace pull requests. This one was small and reviewable as-is, so I'm submitting it separately.
The documentation for this new function also takes the opportunity to layout some rules for node names, which we've sort of had in mind informally until now.
This new function can be used by rcl* to check if a node name follows the rules for node names, or by rmw_* packages to assert that the node name it is given is valid (should always be the case, but it might be worth checking incase something other than rcl uses rmw directly).
Just like rmw_validate_topic_name(), this function will return a cause if the name is invalid, as well as an index in the string that is the culprit.
I copy-paste-modify'ed this from the other validate function, so please be on the lookout for typos 😄.","CI:

Linux:




macOS:




Windows:

 (warning will eventually be addressed by ros2/system_tests#197)",True,{}
ros2/rmw,https://github.com/ros2/rmw,93,2017-03-29T00:19:52Z,2017-04-04T03:40:29Z,2017-04-04T03:40:33Z,MERGED,True,348,14,8,https://github.com/wjwwood,add rmw_validate_node_name(),4,['enhancement'],https://github.com/ros2/rmw/pull/93,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/93#issuecomment-290849725,"This is a precursor to the larger set of namespace pull requests. This one was small and reviewable as-is, so I'm submitting it separately.
The documentation for this new function also takes the opportunity to layout some rules for node names, which we've sort of had in mind informally until now.
This new function can be used by rcl* to check if a node name follows the rules for node names, or by rmw_* packages to assert that the node name it is given is valid (should always be the case, but it might be worth checking incase something other than rcl uses rmw directly).
Just like rmw_validate_topic_name(), this function will return a cause if the name is invalid, as well as an index in the string that is the culprit.
I copy-paste-modify'ed this from the other validate function, so please be on the lookout for typos 😄.",If anyone has time to review this I'd appreciate it. This is preventing me from moving forward on the next set of prs (#95 and beyond).,True,{}
ros2/rmw,https://github.com/ros2/rmw,93,2017-03-29T00:19:52Z,2017-04-04T03:40:29Z,2017-04-04T03:40:33Z,MERGED,True,348,14,8,https://github.com/wjwwood,add rmw_validate_node_name(),4,['enhancement'],https://github.com/ros2/rmw/pull/93,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/93#issuecomment-291329826,"This is a precursor to the larger set of namespace pull requests. This one was small and reviewable as-is, so I'm submitting it separately.
The documentation for this new function also takes the opportunity to layout some rules for node names, which we've sort of had in mind informally until now.
This new function can be used by rcl* to check if a node name follows the rules for node names, or by rmw_* packages to assert that the node name it is given is valid (should always be the case, but it might be worth checking incase something other than rcl uses rmw directly).
Just like rmw_validate_topic_name(), this function will return a cause if the name is invalid, as well as an index in the string that is the culprit.
I copy-paste-modify'ed this from the other validate function, so please be on the lookout for typos 😄.",One more shameless bump for a review.,True,{}
ros2/rmw,https://github.com/ros2/rmw,93,2017-03-29T00:19:52Z,2017-04-04T03:40:29Z,2017-04-04T03:40:33Z,MERGED,True,348,14,8,https://github.com/wjwwood,add rmw_validate_node_name(),4,['enhancement'],https://github.com/ros2/rmw/pull/93,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/93#issuecomment-291385122,"This is a precursor to the larger set of namespace pull requests. This one was small and reviewable as-is, so I'm submitting it separately.
The documentation for this new function also takes the opportunity to layout some rules for node names, which we've sort of had in mind informally until now.
This new function can be used by rcl* to check if a node name follows the rules for node names, or by rmw_* packages to assert that the node name it is given is valid (should always be the case, but it might be worth checking incase something other than rcl uses rmw directly).
Just like rmw_validate_topic_name(), this function will return a cause if the name is invalid, as well as an index in the string that is the culprit.
I copy-paste-modify'ed this from the other validate function, so please be on the lookout for typos 😄.","CI:

Linux:




macOS:




Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/95,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/95#issuecomment-290017389,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","Ok, now that I got all the pr's open, and took a second look at it, I think these are all ready for review and to be merged after #93.",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/dirk-thomas,3,https://github.com/ros2/rmw/pull/95#issuecomment-290135604,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.",Can you please also create a PR for rmw_opensplice.,True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/95#issuecomment-290173163,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.",Why do I need to open a pr for opensplice?,True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/dirk-thomas,5,https://github.com/ros2/rmw/pull/95#issuecomment-290178192,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","Why do I need to open a pr for opensplice?

Because we want to continue to be able to build with rmw_opensplice in order to test it in the future. Especially if the changes are as minimal as in this case.",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,6,https://github.com/ros2/rmw/pull/95#issuecomment-290280783,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","I opened ros2/rmw_opensplice#164 and made this commit ros2/rmw_connext@2e65593 in order to move this all along, but honestly I think it's waste of time.
I think we should rethink our policy of having opensplice and connext dynamic try to compile on a fresh clone, by disabling them in upstream with an AMENT_IGNORE, add a note to their README's telling people how to re-enable them, and have the farm remove those files when the options are selected.",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/95#issuecomment-291386210,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.",I rebased this after #93 was merged.,True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,8,https://github.com/ros2/rmw/pull/95#issuecomment-291689194,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","Ok, with two new pr's to fix linger issues I didn't see on my mac, here is CI post rebase:

Linux:




macOS:




Windows:





Still looking for reviews for some of these pr's. Thanks!",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/95#issuecomment-291745237,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.",@Karsten1987 can you review this pr too?,True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,10,https://github.com/ros2/rmw/pull/95#issuecomment-291787623,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","New CI after addressing comments:

Linux:




macOS:




Windows:

 (the test failures appear to be unrelated/flaky)",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,11,https://github.com/ros2/rmw/pull/95#issuecomment-292370855,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","In 383db0f I added rmw_validate_namespace() as requested here: ros2/rcl#112 (comment)
In 383db0f I made invalid_index optional as requested here: ros2/rcl#112 (comment)",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,12,https://github.com/ros2/rmw/pull/95#issuecomment-292412508,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","I believe all the comments on all pull requests have been addressed, I'm looking for final reviews. I'll probably merge later tonight if no one says anything.
Here's the latest CI:

Linux:




Linux-aarch64:




macOS:




Windows:

 (flaky python service requester test failure only)",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,13,https://github.com/ros2/rmw/pull/95#issuecomment-292705277,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","Ok, I addressed all the comments and here is passing CI:

Linux:




Linux-aarch64:

 (existing test failures)


macOS:




Windows:

 (failing tests are flaky)",True,{}
ros2/rmw,https://github.com/ros2/rmw,95,2017-03-29T07:51:53Z,2017-04-08T09:03:40Z,2017-04-08T09:03:43Z,MERGED,True,634,30,13,https://github.com/wjwwood,Support node namespaces,10,['enhancement'],https://github.com/ros2/rmw/pull/95,https://github.com/wjwwood,14,https://github.com/ros2/rmw/pull/95#issuecomment-292705320,"This is the first change (as it includes the actual storage for the namespace) in a series of several changes up and down the stack. The purpose of these pull requests are to add the notion of a namespace for each node. This namespace will later be used to expand relative topic names and remapping rules.
This pr builds on #93 and include the commits from there. It should be rebased after that is merged.
This particular pr is relatively simple as it only adds storage for the namespace and adds it to the API for rmw_create_node(), see 14cd727.
I'm going to leave this ""in progress"" until I get the other pull requests opened.","I'm going to go ahead and merge, if there are more comments I'll address them afterwards.",True,{}
ros2/rmw,https://github.com/ros2/rmw,96,2017-04-05T22:53:30Z,2017-04-05T22:53:56Z,2017-04-05T22:54:04Z,MERGED,True,3,3,2,https://github.com/dirk-thomas,"Revert ""Control shared/static linking via BUILD_SHARED_LIBS""",1,[],https://github.com/ros2/rmw/pull/96,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/96,Reverts #81,Reverts #81,True,{}
ros2/rmw,https://github.com/ros2/rmw,97,2017-04-05T23:30:52Z,2017-04-06T01:06:42Z,2017-04-06T01:06:46Z,MERGED,True,53,36,3,https://github.com/dirk-thomas,shuffle CMake code,1,[],https://github.com/ros2/rmw/pull/97,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/97,"Several things are going on here:

enable_language must be called in the root CMakeLists.txt (see docs). Due to the next bullet the call is just removed.
Since both C and CXX are needed the C argument is removed from the project() call
gmock is being build on demand and should use the same compiler flags as the actual test executables. Therefore the flag -std=c++14 is being set globally.
The rmw library should be build using the C compiler therefore explicitly setting the LANGUAGE property on the source files.
The CMake macro configure_rmw_library can't assume that the library is being built by CXX and therefore needs to perform slightly different things in the C and CXX case. Since all other rmw libs are using a C++ compiler I used an optional argument which defaults to CXX. It is explicitly being set to C in this package only.
Due to ament/gmock_vendor#2 the tests don't need to know about pthread anymore.

Depends on ament/gmock_vendor#2
CI builds:","Several things are going on here:

enable_language must be called in the root CMakeLists.txt (see docs). Due to the next bullet the call is just removed.
Since both C and CXX are needed the C argument is removed from the project() call
gmock is being build on demand and should use the same compiler flags as the actual test executables. Therefore the flag -std=c++14 is being set globally.
The rmw library should be build using the C compiler therefore explicitly setting the LANGUAGE property on the source files.
The CMake macro configure_rmw_library can't assume that the library is being built by CXX and therefore needs to perform slightly different things in the C and CXX case. Since all other rmw libs are using a C++ compiler I used an optional argument which defaults to CXX. It is explicitly being set to C in this package only.
Due to ament/gmock_vendor#2 the tests don't need to know about pthread anymore.

Depends on ament/gmock_vendor#2
CI builds:",True,{}
ros2/rmw,https://github.com/ros2/rmw,98,2017-04-07T13:13:02Z,2017-04-10T15:16:49Z,2017-04-10T15:16:52Z,MERGED,True,3,3,2,https://github.com/esteve,Control shared/static linking via BUILD_SHARED_LIBS and ament_cmake_ros,1,[],https://github.com/ros2/rmw/pull/98,https://github.com/esteve,1,https://github.com/ros2/rmw/pull/98,"Reverts #96
@dirk-thomas I got the rmw tests passing locally with this PR, ament/gtest_vendor#4 and ament/gmock_vendor#3","Reverts #96
@dirk-thomas I got the rmw tests passing locally with this PR, ament/gtest_vendor#4 and ament/gmock_vendor#3",True,{}
ros2/rmw,https://github.com/ros2/rmw,98,2017-04-07T13:13:02Z,2017-04-10T15:16:49Z,2017-04-10T15:16:52Z,MERGED,True,3,3,2,https://github.com/esteve,Control shared/static linking via BUILD_SHARED_LIBS and ament_cmake_ros,1,[],https://github.com/ros2/rmw/pull/98,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/98#issuecomment-292981451,"Reverts #96
@dirk-thomas I got the rmw tests passing locally with this PR, ament/gtest_vendor#4 and ament/gmock_vendor#3",The CI builds look good so merging this.,True,{}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/100,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75","I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75",True,{}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/IanTheEngineer,2,https://github.com/ros2/rmw/pull/100#issuecomment-293644996,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75","Outsider's view here, so feel free to take it with a grain of salt, as I likely don't see the larger picture.
It seems that this PR adds an additional dependency to every rcl* library in order to prevent code duplication. Is that the tradeoff being made? It would seem beneficial to enable the rcl* libraries to have as few external dependencies as possible.",True,{}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/dirk-thomas,3,https://github.com/ros2/rmw/pull/100#issuecomment-293645633,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75","Is that the tradeoff being made?

Yes, pretty much.",True,{'THUMBS_UP': ['https://github.com/IanTheEngineer']}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/IanTheEngineer,4,https://github.com/ros2/rmw/pull/100#issuecomment-293663238,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75",Gotcha - I missed the corresponding issue #94,True,{}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/Karsten1987,5,https://github.com/ros2/rmw/pull/100#issuecomment-293677196,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75","I had the first initial thought, given that I touched basically the complete stack of packages, however given that it's ""simply"" only utility functions, which itselves don't have any dependencies and stay a clean c-package, I think it's a reasonable trade-off.",True,{'THUMBS_UP': ['https://github.com/IanTheEngineer']}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/Karsten1987,6,https://github.com/ros2/rmw/pull/100#issuecomment-293995233,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75","Linux: 
Windows: 
OSX:",True,{}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/Karsten1987,7,https://github.com/ros2/rmw/pull/100#issuecomment-294038349,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75",I think that's up for review!,True,{}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/Karsten1987,8,https://github.com/ros2/rmw/pull/100#issuecomment-294214135,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75","linux: 
osx:  unrelated, FAST-RTPS
windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/Karsten1987,9,https://github.com/ros2/rmw/pull/100#issuecomment-294227500,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75",CI's passing. I am going to merge this (and related PR) soonish if nobody has anything comments anymore.,True,{}
ros2/rmw,https://github.com/ros2/rmw,100,2017-04-11T23:16:43Z,2017-04-14T23:19:14Z,2017-04-14T23:19:17Z,MERGED,True,24,20,6,https://github.com/Karsten1987,use string_array_t from c_utilities package,3,[],https://github.com/ros2/rmw/pull/100,https://github.com/Karsten1987,10,https://github.com/ros2/rmw/pull/100#issuecomment-294251986,"I remove the rmw_string_array_t in lieu of the implementation in c_utilities.
Connected PRs:
c_utilities: ros2/rcutils#14
rmw_fastrtps: ros2/rmw_fastrtps#102
rmw_connext: ros2/rmw_connext#224
rmw_impl: ros2/rmw_implementation#20
rcl: ros2/rcl#118
rclcpp: ros2/rclcpp#320
rclpy: ros2/rclpy#75","given the changes in c_utilities, here is a new batch:
Linux: 
OSX: Fails with network issues when downloading poco
windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,101,2017-04-13T21:31:10Z,2017-04-19T19:37:41Z,2017-04-19T19:37:45Z,MERGED,True,21,438,8,https://github.com/wjwwood,moved error handling to c_utilities,3,['enhancement'],https://github.com/ros2/rmw/pull/101,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/101,Connects to ros2/rcutils#16,Connects to ros2/rcutils#16,True,{}
ros2/rmw,https://github.com/ros2/rmw,102,2017-04-18T04:29:53Z,2017-06-15T02:49:23Z,2017-06-15T02:49:27Z,MERGED,True,86,1,5,https://github.com/mikaelarguedas,Add rmw_node_security_options,10,[],https://github.com/ros2/rmw/pull/102,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/102,connects to ros2/ros2#339,connects to ros2/ros2#339,True,{}
ros2/rmw,https://github.com/ros2/rmw,102,2017-04-18T04:29:53Z,2017-06-15T02:49:23Z,2017-06-15T02:49:27Z,MERGED,True,86,1,5,https://github.com/mikaelarguedas,Add rmw_node_security_options,10,[],https://github.com/ros2/rmw/pull/102,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/102#issuecomment-294722990,connects to ros2/ros2#339,Does this have to be a separate function or could this be added as an option to the existing rmw_create_node function?,True,{}
ros2/rmw,https://github.com/ros2/rmw,102,2017-04-18T04:29:53Z,2017-06-15T02:49:23Z,2017-06-15T02:49:27Z,MERGED,True,86,1,5,https://github.com/mikaelarguedas,Add rmw_node_security_options,10,[],https://github.com/ros2/rmw/pull/102,https://github.com/mikaelarguedas,3,https://github.com/ros2/rmw/pull/102#issuecomment-295945167,connects to ros2/ros2#339,@dirk-thomas Do you mean adding an argument to the rmw_create_node function and try to set the security parameters only if it's not NULL ?,True,{}
ros2/rmw,https://github.com/ros2/rmw,102,2017-04-18T04:29:53Z,2017-06-15T02:49:23Z,2017-06-15T02:49:27Z,MERGED,True,86,1,5,https://github.com/mikaelarguedas,Add rmw_node_security_options,10,[],https://github.com/ros2/rmw/pull/102,https://github.com/dirk-thomas,4,https://github.com/ros2/rmw/pull/102#issuecomment-295961252,connects to ros2/ros2#339,"Do you mean adding an argument to the rmw_create_node function and try to set the security parameters only if it's not NULL ?

Yes, it is only an option influencing how to configure the to be created node.",True,{}
ros2/rmw,https://github.com/ros2/rmw,103,2017-04-20T01:14:23Z,2017-04-20T18:14:57Z,2017-04-20T18:15:01Z,MERGED,True,27,27,8,https://github.com/wjwwood,rename {c_}utilities to rcutils,1,[],https://github.com/ros2/rmw/pull/103,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/103,Connects to ros2/rcutils#17,Connects to ros2/rcutils#17,True,{}
ros2/rmw,https://github.com/ros2/rmw,104,2017-04-25T22:24:00Z,2017-05-09T22:16:08Z,2017-05-09T22:16:12Z,MERGED,True,67,158,11,https://github.com/wjwwood,Namespace expansion,3,['enhancement'],https://github.com/ros2/rmw/pull/104,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/104,"This renames rmw_validate_topic_name() to rmw_validate_full_topic_name() as so to differentiate it from the new rcl_validate_topic_name() which validates non-fully qualified topic names, whereas the function in the repository does operate on fully qualified topic names.
It also removes isalnum_no_locale() from this package to use the version in rcutils which is newly added in ros2/rcutils#20.
Connects to ros2/rcl#132","This renames rmw_validate_topic_name() to rmw_validate_full_topic_name() as so to differentiate it from the new rcl_validate_topic_name() which validates non-fully qualified topic names, whereas the function in the repository does operate on fully qualified topic names.
It also removes isalnum_no_locale() from this package to use the version in rcutils which is newly added in ros2/rcutils#20.
Connects to ros2/rcl#132",True,{}
ros2/rmw,https://github.com/ros2/rmw,106,2017-05-31T02:36:27Z,2017-06-08T23:39:47Z,2017-06-08T23:39:51Z,MERGED,True,27,6,3,https://github.com/wjwwood,add avoid_ros_namespace_conventions qos option,1,[],https://github.com/ros2/rmw/pull/106,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/106,"This adds the avoid_ros_namespace_conventions QoS option to the rmw qos policies structure. It is a bool and if it is true then the underlying rmw implementations must avoid using the ROS specific prefix as described here:
http://design.ros2.org/articles/topic_and_service_names.html#communicating-with-non-ros-topics
There are several more pull requests to come, including pr's to actually use this option in Fast-RTPS and Connext, as well as tests.
(also I had a local change that crept in there, but it should be fine, it's just propagating aliases to new rcutils error handling functions which are already in rcutils master).","This adds the avoid_ros_namespace_conventions QoS option to the rmw qos policies structure. It is a bool and if it is true then the underlying rmw implementations must avoid using the ROS specific prefix as described here:
http://design.ros2.org/articles/topic_and_service_names.html#communicating-with-non-ros-topics
There are several more pull requests to come, including pr's to actually use this option in Fast-RTPS and Connext, as well as tests.
(also I had a local change that crept in there, but it should be fine, it's just propagating aliases to new rcutils error handling functions which are already in rcutils master).",True,{}
ros2/rmw,https://github.com/ros2/rmw,106,2017-05-31T02:36:27Z,2017-06-08T23:39:47Z,2017-06-08T23:39:51Z,MERGED,True,27,6,3,https://github.com/wjwwood,add avoid_ros_namespace_conventions qos option,1,[],https://github.com/ros2/rmw/pull/106,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/106#issuecomment-306969811,"This adds the avoid_ros_namespace_conventions QoS option to the rmw qos policies structure. It is a bool and if it is true then the underlying rmw implementations must avoid using the ROS specific prefix as described here:
http://design.ros2.org/articles/topic_and_service_names.html#communicating-with-non-ros-topics
There are several more pull requests to come, including pr's to actually use this option in Fast-RTPS and Connext, as well as tests.
(also I had a local change that crept in there, but it should be fine, it's just propagating aliases to new rcutils error handling functions which are already in rcutils master).","CI:

Linux:




Linux-aarch64:




macOS:




Windows:





All unstable jobs are due to an uncrustify issue that slipped through, which I fixed in ros2/rmw_connext@3996c13
Due to the trivial nature of the fix, I'll just run Linux CI again.",True,{}
ros2/rmw,https://github.com/ros2/rmw,106,2017-05-31T02:36:27Z,2017-06-08T23:39:47Z,2017-06-08T23:39:51Z,MERGED,True,27,6,3,https://github.com/wjwwood,add avoid_ros_namespace_conventions qos option,1,[],https://github.com/ros2/rmw/pull/106,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/106#issuecomment-306969932,"This adds the avoid_ros_namespace_conventions QoS option to the rmw qos policies structure. It is a bool and if it is true then the underlying rmw implementations must avoid using the ROS specific prefix as described here:
http://design.ros2.org/articles/topic_and_service_names.html#communicating-with-non-ros-topics
There are several more pull requests to come, including pr's to actually use this option in Fast-RTPS and Connext, as well as tests.
(also I had a local change that crept in there, but it should be fine, it's just propagating aliases to new rcutils error handling functions which are already in rcutils master).","Here's the remedial Linux CI job:

These pr's need reviews, thanks!",True,{}
ros2/rmw,https://github.com/ros2/rmw,106,2017-05-31T02:36:27Z,2017-06-08T23:39:47Z,2017-06-08T23:39:51Z,MERGED,True,27,6,3,https://github.com/wjwwood,add avoid_ros_namespace_conventions qos option,1,[],https://github.com/ros2/rmw/pull/106,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/106#issuecomment-307240825,"This adds the avoid_ros_namespace_conventions QoS option to the rmw qos policies structure. It is a bool and if it is true then the underlying rmw implementations must avoid using the ROS specific prefix as described here:
http://design.ros2.org/articles/topic_and_service_names.html#communicating-with-non-ros-topics
There are several more pull requests to come, including pr's to actually use this option in Fast-RTPS and Connext, as well as tests.
(also I had a local change that crept in there, but it should be fine, it's just propagating aliases to new rcutils error handling functions which are already in rcutils master).","One more round of CI before merging due to some logic changes in rmw_fastrtps:

Linux:




Linux-aarch64:




macOS:




Windows:",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/esteve,1,https://github.com/ros2/rmw/pull/107,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/mikaelarguedas,2,https://github.com/ros2/rmw/pull/107#issuecomment-306257124,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.",I remember we discussed this a while ago. While all our targetted compilers do support the declaration of variables inside loops. @ros2/team What do we want to do in general? allow ourselves to use it and add the flag wherever we do so? or always declare variables outside of the loops for better compatibility for platforms and compiuler we don't test ?,True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/dirk-thomas,3,https://github.com/ros2/rmw/pull/107#issuecomment-306257689,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","I think our developer guidelines already answer that question:

Declare variables in the narrowest scope possible.",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/dirk-thomas,4,https://github.com/ros2/rmw/pull/107#issuecomment-306257987,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","Latest CI builds:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/clalancette,5,https://github.com/ros2/rmw/pull/107#issuecomment-306258964,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","So, there is one reason I would suggest not to use -std=c11, and that is MSVC.  My understanding is that MSVC doesn't support most of C11 (with declaration-inside-loops being one of things it does support).  Thus, to keep our platform MSVC compliant, it seems better to me to not add -std=c11 and not depend on C11 features.",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/dirk-thomas,6,https://github.com/ros2/rmw/pull/107#issuecomment-306260314,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","Since all our platforms support this feature (declaring the variable inside the loop) I don't see any reason why not to utilize that.
For other features which might be C11 specific: our rule that a change needs to build on all supported platforms still applies. So C11 features not supported on Windows can't be used.",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/dirk-thomas,7,https://github.com/ros2/rmw/pull/107#issuecomment-306263500,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.",While technically one approval is sufficient I will leave the merge to a second reviewer.,True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/Karsten1987,8,https://github.com/ros2/rmw/pull/107#issuecomment-306266364,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","I have the feeling that we should somehow come to a common consensus on
that decision and mark it on a central place as we had this discussions on
multiple PRs already.
…
On Mon, Jun 5, 2017 at 11:18 AM, Dirk Thomas ***@***.***> wrote:
 While technically one approval is sufficient I will leave the merge to a
 second reviewer.

 —
 You are receiving this because you are on a team that was mentioned.
 Reply to this email directly, view it on GitHub
 <#107 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AFKzYSNN2dwbSgvBzJIkD7bZvRnZuZFfks5sBEZggaJpZM4NvH_y>
 .",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/mikaelarguedas,9,https://github.com/ros2/rmw/pull/107#issuecomment-306268672,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","I am in favor of defining the variables out of the for loops and not adding C11 flags, so I won't approve this pr as-is.

I agree with this. We officially target c99 and don't advertise anywhere that we use ""some features"" of C11.
I think we should stick to c99 (as it was the case until a few months ago), this will make it easier for people trying to get the stack to compile on different compilers. To make an educated decision I'd be interested in knowing which features of C11 supported by all compilers we want to use. (because I don't think that this one is a very compelling one of sufficient to base our decision on).

I have the feeling that we should somehow come to a common consensus on
that decision and mark it on a central place as we had this discussions on
multiple PRs already.

👍",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/wjwwood,10,https://github.com/ros2/rmw/pull/107#issuecomment-306274886,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.",Here's my alternative proposal: #108 In case we decide to go that way.,True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/clalancette,11,https://github.com/ros2/rmw/pull/107#issuecomment-306277000,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","I have the feeling that we should somehow come to a common consensus on that decision and mark it on a central place as we had this discussions on multiple PRs already.

Yeah, agreed.  Once we figure out what we want to do, we should put it in the developers guide.  Note that if we ultimately decide not to force c11, we should probably revisit the flags in rcl_lifecycle, rosidl_generator_c, rosidl_typesupport_introspection_c, and rosidl_typesupport_c .",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/Karsten1987,12,https://github.com/ros2/rmw/pull/107#issuecomment-306278702,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","Does the warning still occurs when c99 is explicitly stated instead of c11? As there is no -std currently passed, i'd assume the raspberry pi compiler uses whatever its default is.",True,{}
ros2/rmw,https://github.com/ros2/rmw,107,2017-06-03T16:04:00Z,2017-06-06T17:00:04Z,2017-06-06T17:00:11Z,CLOSED,False,1,0,1,https://github.com/esteve,Add C11 compiler flag,1,[],https://github.com/ros2/rmw/pull/107,https://github.com/esteve,13,https://github.com/ros2/rmw/pull/107#issuecomment-306550915,"This fixes a compiler error/warning with the Raspberry Pi cross compiler caused by declaring a variable in the following for loops:
https://github.com/ros2/rmw/blob/master/rmw/src/validate_node_name.c#L43
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L59
https://github.com/ros2/rmw/blob/master/rmw/src/validate_full_topic_name.c#L79
alternatively, this issue could be solved by just declaring the index variable outside the for loops.","I'm withdrawing this in favor of #109, the code compiles fine, the Raspberry Pi crosscompiler defaulted to C89/C90, instead of C99 and wrongly assumed declaring a variable in a for loop was a C11 feature. Sorry for any confusion!",True,{}
ros2/rmw,https://github.com/ros2/rmw,108,2017-06-05T19:02:30Z,2017-06-06T17:48:43Z,2017-06-06T17:48:47Z,CLOSED,False,7,4,3,https://github.com/wjwwood,"move variable declaration out of for loop, C99 style",1,[],https://github.com/ros2/rmw/pull/108,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/108,Possible alternative to #107.,Possible alternative to #107.,True,{}
ros2/rmw,https://github.com/ros2/rmw,108,2017-06-05T19:02:30Z,2017-06-06T17:48:43Z,2017-06-06T17:48:47Z,CLOSED,False,7,4,3,https://github.com/wjwwood,"move variable declaration out of for loop, C99 style",1,[],https://github.com/ros2/rmw/pull/108,https://github.com/Karsten1987,2,https://github.com/ros2/rmw/pull/108#issuecomment-306276544,Possible alternative to #107.,"this seems stange to me. Do we need that with c99? I thought that c99 would lift that constraint.
#include <stdio.h>

int main()
{
  for (size_t i = 0; i < 10; ++i) {
    fprintf(stderr, ""Hello %zu\n"", i);
  }
  return 0;
}

compiled with -std=c99 -Wpedantic -Wall outputs no error/warning",True,{}
ros2/rmw,https://github.com/ros2/rmw,108,2017-06-05T19:02:30Z,2017-06-06T17:48:43Z,2017-06-06T17:48:47Z,CLOSED,False,7,4,3,https://github.com/wjwwood,"move variable declaration out of for loop, C99 style",1,[],https://github.com/ros2/rmw/pull/108,https://github.com/dhood,3,https://github.com/ros2/rmw/pull/108#issuecomment-306277212,Possible alternative to #107.,"compiled with -std=c99 -Wpedantic -Wall outputs no error/warning

from #107 it seems it's an issue for particular compilers",True,{}
ros2/rmw,https://github.com/ros2/rmw,108,2017-06-05T19:02:30Z,2017-06-06T17:48:43Z,2017-06-06T17:48:47Z,CLOSED,False,7,4,3,https://github.com/wjwwood,"move variable declaration out of for loop, C99 style",1,[],https://github.com/ros2/rmw/pull/108,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/108#issuecomment-306281350,Possible alternative to #107.,"Most compilers allow it regardless of the standard version. But some compilers will fully enforce C99 if specified. However, I'm not sure any of our target systems will be affected. I was just being explicit (and bringing the extra warning flags in as we do in the other packages).",True,{}
ros2/rmw,https://github.com/ros2/rmw,108,2017-06-05T19:02:30Z,2017-06-06T17:48:43Z,2017-06-06T17:48:47Z,CLOSED,False,7,4,3,https://github.com/wjwwood,"move variable declaration out of for loop, C99 style",1,[],https://github.com/ros2/rmw/pull/108,https://github.com/esteve,5,https://github.com/ros2/rmw/pull/108#issuecomment-306552664,Possible alternative to #107.,"My bad, C99 actually allows declaring indexes in the for loop, the Raspberry Pi cross compiler still defaults to C89/C90, which forbids that. See #109 where I explicitly set C99 and C++14",True,{}
ros2/rmw,https://github.com/ros2/rmw,108,2017-06-05T19:02:30Z,2017-06-06T17:48:43Z,2017-06-06T17:48:47Z,CLOSED,False,7,4,3,https://github.com/wjwwood,"move variable declaration out of for loop, C99 style",1,[],https://github.com/ros2/rmw/pull/108,https://github.com/wjwwood,6,https://github.com/ros2/rmw/pull/108#issuecomment-306564639,Possible alternative to #107.,Thanks @esteve I was misinformed about that too. Closing this in favor of #109.,True,{}
ros2/rmw,https://github.com/ros2/rmw,109,2017-06-06T16:58:17Z,2017-06-16T20:23:31Z,2017-06-19T08:10:18Z,MERGED,True,8,2,1,https://github.com/esteve,Explicitly set C11 and C++14 via the CMake variables,2,[],https://github.com/ros2/rmw/pull/109,https://github.com/esteve,1,https://github.com/ros2/rmw/pull/109,This PR explicitly sets the version of the C standard to C11,This PR explicitly sets the version of the C standard to C11,True,{}
ros2/rmw,https://github.com/ros2/rmw,109,2017-06-06T16:58:17Z,2017-06-16T20:23:31Z,2017-06-19T08:10:18Z,MERGED,True,8,2,1,https://github.com/esteve,Explicitly set C11 and C++14 via the CMake variables,2,[],https://github.com/ros2/rmw/pull/109,https://github.com/mikaelarguedas,2,https://github.com/ros2/rmw/pull/109#issuecomment-306551447,This PR explicitly sets the version of the C standard to C11,@esteve just let me know when you want to run CI and I'll run it on all your PRs at once,True,{}
ros2/rmw,https://github.com/ros2/rmw,109,2017-06-06T16:58:17Z,2017-06-16T20:23:31Z,2017-06-19T08:10:18Z,MERGED,True,8,2,1,https://github.com/esteve,Explicitly set C11 and C++14 via the CMake variables,2,[],https://github.com/ros2/rmw/pull/109,https://github.com/esteve,3,https://github.com/ros2/rmw/pull/109#issuecomment-306553381,This PR explicitly sets the version of the C standard to C11,"@mikaelarguedas thanks. I think all three PRs (ros2/rcutils#26 #109 ros2/rcl#141) are ready. I've built them (up to rcl, though) with the Raspberry Pi crosscompiler and they seem fine.",True,{}
ros2/rmw,https://github.com/ros2/rmw,109,2017-06-06T16:58:17Z,2017-06-16T20:23:31Z,2017-06-19T08:10:18Z,MERGED,True,8,2,1,https://github.com/esteve,Explicitly set C11 and C++14 via the CMake variables,2,[],https://github.com/ros2/rmw/pull/109,https://github.com/dirk-thomas,4,https://github.com/ros2/rmw/pull/109#issuecomment-306554399,This PR explicitly sets the version of the C standard to C11,"I would suggest holding off changes like this until we make a ""final"" decision on which standard we want to use. That will hopefully happen in today's meeting.
Update: we will use C99 for now until we need features from C11 and they are supported by all targeted platforms.",True,{'THUMBS_UP': ['https://github.com/mikaelarguedas']}
ros2/rmw,https://github.com/ros2/rmw,109,2017-06-06T16:58:17Z,2017-06-16T20:23:31Z,2017-06-19T08:10:18Z,MERGED,True,8,2,1,https://github.com/esteve,Explicitly set C11 and C++14 via the CMake variables,2,[],https://github.com/ros2/rmw/pull/109,https://github.com/esteve,5,https://github.com/ros2/rmw/pull/109#issuecomment-308844455,This PR explicitly sets the version of the C standard to C11,"I just rebased this to resolve any potential conflicts, let me know if there's any further work that needs to be done.",True,{}
ros2/rmw,https://github.com/ros2/rmw,110,2017-06-15T10:01:14Z,2017-06-17T01:01:39Z,2017-06-17T01:01:43Z,MERGED,True,444,49,12,https://github.com/wjwwood,Refactor get topic names and types,5,[],https://github.com/ros2/rmw/pull/110,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/110,Connects to ros2/ros2#361,Connects to ros2/ros2#361,True,{}
ros2/rmw,https://github.com/ros2/rmw,111,2017-06-15T22:10:28Z,,2018-05-05T03:36:40Z,OPEN,False,9,0,1,https://github.com/BrannonKing,contributes an out-of-the-box durability profile,2,['enhancement'],https://github.com/ros2/rmw/pull/111,https://github.com/BrannonKing,1,https://github.com/ros2/rmw/pull/111,"Things like a map server benefit from a durable message (aka, send the last published map to each subscriber as they subscribe). We should have one of these in the default profile list, especially with talk of being able to select from canned QoS profiles using command line parameters.","Things like a map server benefit from a durable message (aka, send the last published map to each subscriber as they subscribe). We should have one of these in the default profile list, especially with talk of being able to select from canned QoS profiles using command line parameters.",True,{}
ros2/rmw,https://github.com/ros2/rmw,111,2017-06-15T22:10:28Z,,2018-05-05T03:36:40Z,OPEN,False,9,0,1,https://github.com/BrannonKing,contributes an out-of-the-box durability profile,2,['enhancement'],https://github.com/ros2/rmw/pull/111,https://github.com/BrannonKing,2,https://github.com/ros2/rmw/pull/111#issuecomment-310772173,"Things like a map server benefit from a durable message (aka, send the last published map to each subscriber as they subscribe). We should have one of these in the default profile list, especially with talk of being able to select from canned QoS profiles using command line parameters.","I assume that rclpy defines these as well and we would need a change there too?
Also, in thinking about it further I want depth 1 instead of depth 2. As this is typically used for large messages that change very infrequently, it is unlikely to benefit from a ""finish sending that last one before this new one goes out"" scenario.",True,{}
ros2/rmw,https://github.com/ros2/rmw,111,2017-06-15T22:10:28Z,,2018-05-05T03:36:40Z,OPEN,False,9,0,1,https://github.com/BrannonKing,contributes an out-of-the-box durability profile,2,['enhancement'],https://github.com/ros2/rmw/pull/111,https://github.com/mikaelarguedas,3,https://github.com/ros2/rmw/pull/111#issuecomment-318135898,"Things like a map server benefit from a durable message (aka, send the last published map to each subscriber as they subscribe). We should have one of these in the default profile list, especially with talk of being able to select from canned QoS profiles using command line parameters.","thanks @BrannonKing  for the contribution. We will delay this until we iterated on how to do the equivalent of ROS 1 ""latching"" in ROS2.",True,{}
ros2/rmw,https://github.com/ros2/rmw,111,2017-06-15T22:10:28Z,,2018-05-05T03:36:40Z,OPEN,False,9,0,1,https://github.com/BrannonKing,contributes an out-of-the-box durability profile,2,['enhancement'],https://github.com/ros2/rmw/pull/111,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/111#issuecomment-367802999,"Things like a map server benefit from a durable message (aka, send the last published map to each subscriber as they subscribe). We should have one of these in the default profile list, especially with talk of being able to select from canned QoS profiles using command line parameters.",Here's the issue we're using to track the latching decision: ros2/ros2#464,True,{}
ros2/rmw,https://github.com/ros2/rmw,111,2017-06-15T22:10:28Z,,2018-05-05T03:36:40Z,OPEN,False,9,0,1,https://github.com/BrannonKing,contributes an out-of-the-box durability profile,2,['enhancement'],https://github.com/ros2/rmw/pull/111,https://github.com/paulbovbel,5,https://github.com/ros2/rmw/pull/111#issuecomment-386776050,"Things like a map server benefit from a durable message (aka, send the last published map to each subscriber as they subscribe). We should have one of these in the default profile list, especially with talk of being able to select from canned QoS profiles using command line parameters.","Also, in thinking about it further I want depth 1 instead of depth 2

+1, this definitely makes sense for a 'default' durability profile, if approximating 'latched' behaviour from ROS1",True,{}
ros2/rmw,https://github.com/ros2/rmw,112,2017-06-24T02:15:46Z,2017-06-27T19:02:58Z,2017-06-27T19:03:03Z,MERGED,True,20,0,2,https://github.com/wjwwood,update docs for beta 2,1,[],https://github.com/ros2/rmw/pull/112,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/112,Connects to ros2/ros2#370,Connects to ros2/ros2#370,True,{}
ros2/rmw,https://github.com/ros2/rmw,114,2017-07-19T21:32:25Z,2017-07-19T21:34:17Z,2017-07-19T21:34:20Z,MERGED,True,1,0,1,https://github.com/Karsten1987,add allocators to macros.hpp,1,[],https://github.com/ros2/rmw/pull/114,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/114,this adds the #include rmw/allocators.h to this macros.hpp which otherwise every user of this file has to include manually.,this adds the #include rmw/allocators.h to this macros.hpp which otherwise every user of this file has to include manually.,True,{}
ros2/rmw,https://github.com/ros2/rmw,116,2017-08-04T00:53:42Z,2017-08-04T01:05:04Z,2017-08-04T01:05:08Z,MERGED,True,3,8,1,https://github.com/mikaelarguedas,use snprintf from rcutils,1,[],https://github.com/ros2/rmw/pull/116,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/116,rcutils implementation: https://github.com/ros2/rcutils/blob/aef3d6170c8f9d60e0f4c93f426f8d11e6ce8c2c/include/rcutils/snprintf.h#L33-L38,rcutils implementation: https://github.com/ros2/rcutils/blob/aef3d6170c8f9d60e0f4c93f426f8d11e6ce8c2c/include/rcutils/snprintf.h#L33-L38,True,{}
ros2/rmw,https://github.com/ros2/rmw,117,2017-08-04T18:28:20Z,2017-08-07T15:19:27Z,2017-08-07T15:19:46Z,MERGED,True,5,3,1,https://github.com/mikaelarguedas,Snprintf round2,2,[],https://github.com/ros2/rmw/pull/117,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/117,"missed some snprintfs in #116

Linux 
Linux-aarch64 
macOS 
Windows 

linter failure addressed in 8b113f5","missed some snprintfs in #116

Linux 
Linux-aarch64 
macOS 
Windows 

linter failure addressed in 8b113f5",True,{}
ros2/rmw,https://github.com/ros2/rmw,118,2017-08-10T19:06:53Z,2017-08-10T20:40:39Z,2017-08-10T20:40:42Z,MERGED,True,9,5,5,https://github.com/clalancette,Make the TOPIC and NAMESPACE macros unsigned.,2,[],https://github.com/ros2/rmw/pull/118,https://github.com/clalancette,1,https://github.com/ros2/rmw/pull/118,"This is more correct; they can never be negative, as that
doesn't make any sense.  This also fixes some warnings on
mismatched types that get thrown up when adding -Wall -Wextra
to the flags, which this commit also does.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
connects to ros2/ros2#387
CI jobs are in the above issue","This is more correct; they can never be negative, as that
doesn't make any sense.  This also fixes some warnings on
mismatched types that get thrown up when adding -Wall -Wextra
to the flags, which this commit also does.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
connects to ros2/ros2#387
CI jobs are in the above issue",True,{}
ros2/rmw,https://github.com/ros2/rmw,118,2017-08-10T19:06:53Z,2017-08-10T20:40:39Z,2017-08-10T20:40:42Z,MERGED,True,9,5,5,https://github.com/clalancette,Make the TOPIC and NAMESPACE macros unsigned.,2,[],https://github.com/ros2/rmw/pull/118,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/118#issuecomment-321648608,"This is more correct; they can never be negative, as that
doesn't make any sense.  This also fixes some warnings on
mismatched types that get thrown up when adding -Wall -Wextra
to the flags, which this commit also does.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
connects to ros2/ros2#387
CI jobs are in the above issue",How are these changes related to memory leaks?,True,{}
ros2/rmw,https://github.com/ros2/rmw,118,2017-08-10T19:06:53Z,2017-08-10T20:40:39Z,2017-08-10T20:40:42Z,MERGED,True,9,5,5,https://github.com/clalancette,Make the TOPIC and NAMESPACE macros unsigned.,2,[],https://github.com/ros2/rmw/pull/118,https://github.com/clalancette,3,https://github.com/ros2/rmw/pull/118#issuecomment-321651695,"This is more correct; they can never be negative, as that
doesn't make any sense.  This also fixes some warnings on
mismatched types that get thrown up when adding -Wall -Wextra
to the flags, which this commit also does.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
connects to ros2/ros2#387
CI jobs are in the above issue","How are these changes related to memory leaks?

They are not directly related.  I saw them while I was debugging the memory leaks, and figured I would open up this PR as well.  Other than the branch name not being exactly correct (which won't matter for the final squash/rebase), it shouldn't be much of a problem.  Unless, of course, you disagree with the change :).",True,{}
ros2/rmw,https://github.com/ros2/rmw,118,2017-08-10T19:06:53Z,2017-08-10T20:40:39Z,2017-08-10T20:40:42Z,MERGED,True,9,5,5,https://github.com/clalancette,Make the TOPIC and NAMESPACE macros unsigned.,2,[],https://github.com/ros2/rmw/pull/118,https://github.com/clalancette,4,https://github.com/ros2/rmw/pull/118#issuecomment-321667062,"This is more correct; they can never be negative, as that
doesn't make any sense.  This also fixes some warnings on
mismatched types that get thrown up when adding -Wall -Wextra
to the flags, which this commit also does.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
connects to ros2/ros2#387
CI jobs are in the above issue","Linux builds are green with this (and other fixes).  MacOS and Windows are still yellow, but those are all known flaky tests.  This is also approved, so I'm going to merge this.",True,{}
ros2/rmw,https://github.com/ros2/rmw,119,2017-08-10T22:30:12Z,2017-08-10T22:31:47Z,2017-08-10T22:31:50Z,MERGED,True,2,2,2,https://github.com/clalancette,Fix clang warnings from pedantic.,1,[],https://github.com/ros2/rmw/pull/119,https://github.com/clalancette,1,https://github.com/ros2/rmw/pull/119,"I made a mistake with my last PR turning on pedantic, and
it turns out that clang is a little more picky.  Fix
that here.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
I only ran CI on the OSX build that was throwing warnings, and only up to rmw which now seems to be fixed:
http://ci.ros2.org/job/ci_osx/2416","I made a mistake with my last PR turning on pedantic, and
it turns out that clang is a little more picky.  Fix
that here.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
I only ran CI on the OSX build that was throwing warnings, and only up to rmw which now seems to be fixed:
http://ci.ros2.org/job/ci_osx/2416",True,{}
ros2/rmw,https://github.com/ros2/rmw,119,2017-08-10T22:30:12Z,2017-08-10T22:31:47Z,2017-08-10T22:31:50Z,MERGED,True,2,2,2,https://github.com/clalancette,Fix clang warnings from pedantic.,1,[],https://github.com/ros2/rmw/pull/119,https://github.com/clalancette,2,https://github.com/ros2/rmw/pull/119#issuecomment-321691201,"I made a mistake with my last PR turning on pedantic, and
it turns out that clang is a little more picky.  Fix
that here.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org
I only ran CI on the OSX build that was throwing warnings, and only up to rmw which now seems to be fixed:
http://ci.ros2.org/job/ci_osx/2416","Thanks, merging.",True,{}
ros2/rmw,https://github.com/ros2/rmw,121,2017-09-27T20:34:58Z,2017-09-29T18:26:54Z,2017-09-29T18:26:58Z,MERGED,True,0,1,1,https://github.com/dirk-thomas,remove unused domain_id field from rmw_node_t,1,[],https://github.com/ros2/rmw/pull/121,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/121,"Remove field which is not set by any of the rmw implementation.
An alternative would be to remove the const and update all rmw implementations to set the value.","Remove field which is not set by any of the rmw implementation.
An alternative would be to remove the const and update all rmw implementations to set the value.",True,{}
ros2/rmw,https://github.com/ros2/rmw,121,2017-09-27T20:34:58Z,2017-09-29T18:26:54Z,2017-09-29T18:26:58Z,MERGED,True,0,1,1,https://github.com/dirk-thomas,remove unused domain_id field from rmw_node_t,1,[],https://github.com/ros2/rmw/pull/121,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/121#issuecomment-333201077,"Remove field which is not set by any of the rmw implementation.
An alternative would be to remove the const and update all rmw implementations to set the value.",Waiting for review.,True,{}
ros2/rmw,https://github.com/ros2/rmw,122,2017-09-29T19:42:32Z,2017-09-29T21:24:38Z,2017-09-29T21:24:42Z,MERGED,True,76,71,1,https://github.com/dirk-thomas,remove obsolete INDENT-OFF usage,1,[],https://github.com/ros2/rmw/pull/122,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/122,Connect to ament/uncrustify#18.,Connect to ament/uncrustify#18.,True,{}
ros2/rmw,https://github.com/ros2/rmw,123,2017-10-02T17:40:30Z,2017-10-02T17:59:21Z,2017-10-02T17:59:25Z,MERGED,True,0,2,1,https://github.com/mikaelarguedas,rclpy gets the default rmw_implementation through rmw_implementation_…,1,[],https://github.com/ros2/rmw/pull/123,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/123,"…cmake now.
The logic has been consolidated in ros2/rclpy#82 making this comment obsolete","…cmake now.
The logic has been consolidated in ros2/rclpy#82 making this comment obsolete",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,1,https://github.com/ros2/rmw/pull/124,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/124#issuecomment-336499881,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",The package rcutils defines logging levels and a logging API:https://github.com/ros2/rcutils/blob/6d6d5507362415fd377098c0b5973b91072dfafa/include/rcutils/logging.h#L60-L67 These should be used in rmw (or at least be referenced by rmw specific symbols).,True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,3,https://github.com/ros2/rmw/pull/124#issuecomment-336501889,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","I'll change the patch accordingly, I did check rcutils for the same. But missed checking for the actual enum.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,4,https://github.com/ros2/rmw/pull/124#issuecomment-336523063,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","Hi @dirk-thomas
I read the code from rcutils and rmw, find two ways of doing it.

To define rmw specific log_level enums and convert rcutil specific enum types to rmw specific ones.
Or to use rcutil types inside API's which might not need any changes inside rmw.h by doing that we'll have to include rcutils/logging.h inside rmw_implementation (I don't see this as the right approach) we are going against the design of rmw and rcutils already followed.

Let me know your thoughts on this.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,5,https://github.com/ros2/rmw/pull/124#issuecomment-336526120,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",I would suggest to define an rmw specific enum but use the enum values from rcutils to define their values. That way the rmw API uses rmw types but is still compatible with rcutils.,True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,6,https://github.com/ros2/rmw/pull/124#issuecomment-336727856,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","Hi @dirk-thomas
Have update the pull request based on the discussions above. Could you review the changes?",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,7,https://github.com/ros2/rmw/pull/124#issuecomment-338124421,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",@dirk-thomas fixed the comments. Have a look and let me know.,True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,8,https://github.com/ros2/rmw/pull/124#issuecomment-338250065,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","Please also add the new function declaration to actually pass the log severity.

This comment is still pending.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,9,https://github.com/ros2/rmw/pull/124#issuecomment-338862019,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",@dirk-thomas ros2/rmw_implementation#30 (comment) have implemented the same here.,True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,10,https://github.com/ros2/rmw/pull/124#issuecomment-338867022,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","The new function also needs to be declared in this file: https://github.com/ros2/rmw/blob/master/rmw/include/rmw/rmw.h
And then it needs to be implemented for all currently supported rmw implementations: rmw_fastrtps_cpp, rmw_connext_cpp, rmw_opensplice_cpp.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,11,https://github.com/ros2/rmw/pull/124#issuecomment-339240886,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",@dirk-thomas the API is included in rmw/rmw.h. I'll update the rmw_dds specific ones in other commits.,True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,12,https://github.com/ros2/rmw/pull/124#issuecomment-340613209,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","I have added the phrase ""Connect to "" to the initial description of the related PRs so that they are being grouped on the Waffle.io board.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,13,https://github.com/ros2/rmw/pull/124#issuecomment-342079036,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","@dirk-thomas I've updated the patch sets on all the linked commits. Could you review?
Except for one discussion which is still active.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,14,https://github.com/ros2/rmw/pull/124#issuecomment-353984732,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",@dirk-thomas @dhood Could you please review this patch? This is connected to another approved patch by Dirk,True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,15,https://github.com/ros2/rmw/pull/124#issuecomment-354909815,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","I triggered a set of builds with these changes:

Linux 
Linux-aarch64 
macOS 
Windows 

I think the failures are because your branches are forked from a much older version. Can you please rebase all PRs to the latest state of the default branch. Then I can rerun the CI builds.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,16,https://github.com/ros2/rmw/pull/124#issuecomment-355212071,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","@dirk-thomas Have update all the connecting PR's to master. Could you please trigger the CI build? Just asking, may I trigger the build in future? (If I'm allowed to do so, could you share an link or document for the same?)",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,17,https://github.com/ros2/rmw/pull/124#issuecomment-355367612,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","Could you please trigger the CI build?


Linux skipped
Linux-aarch64 
macOS 
Windows aborted

The code doesn't compile. Please make sure to compile your changes locally, run the tests and once that passed successfully request a new round of CI build.

Just asking, may I trigger the build in future?

Currently we can't provide access to ci.ros2.org. In the future build.ros2.org should provide that service to the community.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,18,https://github.com/ros2/rmw/pull/124#issuecomment-355578536,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","@dirk-thomas fixed the error, creeped in due to the change from error msg setting to parameterized logging made. Could you check now? I've compiled, tested. And, it is passing locally.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,19,https://github.com/ros2/rmw/pull/124#issuecomment-355694824,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","Some linters still fail (they should have also failed for you locally?):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,20,https://github.com/ros2/rmw/pull/124#issuecomment-355800400,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","@dirk-thomas Done. Missed them again! I need to practice ""ros"" style more. Sorry again.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,21,https://github.com/ros2/rmw/pull/124#issuecomment-356076359,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows 

Please also address the compiler warnings reported: http://ci.ros2.org/job/ci_linux/3848/warnings22Result/new/",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,22,https://github.com/ros2/rmw/pull/124#issuecomment-356338403,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","@dirk-thomas checked, it is due to unused parameter ""severity"" with our new API's, would you like a (void) severity; declaration just to nullify the warning. The better solution would be to implement the logging usage with connext and opensplice. Let me know your thoughts on this.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,23,https://github.com/ros2/rmw/pull/124#issuecomment-356345231,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",As mentioned before implementing the currently empty functions is the goal. If you would like to merge the current set of PR before that happens please use (void)severity to avoid the warning.,True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,24,https://github.com/ros2/rmw/pull/124#issuecomment-356564471,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",@dirk-thomas Thanks. I've made the necessary changes to prevent the warning on the connected patches.,True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,25,https://github.com/ros2/rmw/pull/124#issuecomment-356822249,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows 

I can't say if the remaining test failure are related to the patch or have a different cause. Will need to be checked before merging...",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,26,https://github.com/ros2/rmw/pull/124#issuecomment-358561192,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com",@dirk-thomas I checked those from the logs. They don't seem like regressions because of our changes. Could you let me know if you've found the cause for the same?,True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/dirk-thomas,27,https://github.com/ros2/rmw/pull/124#issuecomment-358732772,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","Thank you for the patches.
Please try to follow up with pull requests to add the missing implementation for Connext and OpenSplice when you have a chance.",True,{}
ros2/rmw,https://github.com/ros2/rmw,124,2017-10-13T15:27:23Z,2018-01-18T18:10:22Z,2018-01-19T05:43:44Z,MERGED,True,18,0,2,https://github.com/sriramster,Enable setting log levels in DDS implementation,9,[],https://github.com/ros2/rmw/pull/124,https://github.com/sriramster,28,https://github.com/ros2/rmw/pull/124#issuecomment-358872577,"…l DDS api's

This patch enables support for three basic log levels
There needs an API inside the DDS specific rmw implementation i.e
rmw_fastrtps/rmw_opensplice etc to convert the enum to DDS specific variable

Signed-off-by: Sriram Raghunathan sriram.max@gmail.com","Thank you. Sure, I'll look into it.",True,{}
ros2/rmw,https://github.com/ros2/rmw,125,2017-10-23T18:16:27Z,2018-06-16T08:35:39Z,2018-07-27T22:46:39Z,MERGED,True,407,0,7,https://github.com/Karsten1987,*_raw function,13,[],https://github.com/ros2/rmw/pull/125,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/125,Connects to ros2/demos#185,Connects to ros2/demos#185,True,{}
ros2/rmw,https://github.com/ros2/rmw,125,2017-10-23T18:16:27Z,2018-06-16T08:35:39Z,2018-07-27T22:46:39Z,MERGED,True,407,0,7,https://github.com/Karsten1987,*_raw function,13,[],https://github.com/ros2/rmw/pull/125,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/125#issuecomment-397192427,Connects to ros2/demos#185,"@Karsten1987 I added back my changes from last night in c044e2a, looks like they got force pushed over (not easy to recover since it was all in the GitHub webui), please pull before pushing in the future 🙏.",True,{'HEART': ['https://github.com/Karsten1987']}
ros2/rmw,https://github.com/ros2/rmw,125,2017-10-23T18:16:27Z,2018-06-16T08:35:39Z,2018-07-27T22:46:39Z,MERGED,True,407,0,7,https://github.com/Karsten1987,*_raw function,13,[],https://github.com/ros2/rmw/pull/125,https://github.com/dirk-thomas,3,https://github.com/ros2/rmw/pull/125#issuecomment-408557157,Connects to ros2/demos#185,"@ros2/rmw_implementations FYI these PRs added new API to publish / take raw (not deserialized) messagesto the rmw interface. For FastRTPS and Connext the new API has been implemented in the linked PRs. For OpenSplice only an issue requesting further information has been filled upstream (ADLINK-IST/opensplice#50). Other RMW implementations should be updated to implement this new API in order to stay compatible.

If you are maintaining a RMW impl but are not part of the mentioned team please feel free to reach out to be added to the team. That way you can stay in the loop for future changes.",True,{}
ros2/rmw,https://github.com/ros2/rmw,127,2017-11-09T23:11:25Z,2017-11-10T22:05:08Z,2017-11-10T22:05:10Z,MERGED,True,5,3,1,https://github.com/dirk-thomas,ignore unavailable rmw implementations,1,['in review'],https://github.com/ros2/rmw/pull/127,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/127,Connect to ros2/ros2#399.,Connect to ros2/ros2#399.,True,{}
ros2/rmw,https://github.com/ros2/rmw,128,2017-11-16T09:55:53Z,2017-11-17T19:48:51Z,2017-11-17T19:48:55Z,MERGED,True,1,2,1,https://github.com/gaoethan,optimize not to access uninitialized scalar variable,2,[],https://github.com/ros2/rmw/pull/128,https://github.com/gaoethan,1,https://github.com/ros2/rmw/pull/128,"when the validation_result is not initialized and it's better not access
it to avoid unknown issue, like in _rclpy.c, moreover, the error msg without
that value is also  enough to reflect the fact.
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","when the validation_result is not initialized and it's better not access
it to avoid unknown issue, like in _rclpy.c, moreover, the error msg without
that value is also  enough to reflect the fact.
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,128,2017-11-16T09:55:53Z,2017-11-17T19:48:51Z,2017-11-17T19:48:55Z,MERGED,True,1,2,1,https://github.com/gaoethan,optimize not to access uninitialized scalar variable,2,[],https://github.com/ros2/rmw/pull/128,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/128#issuecomment-345127520,"when the validation_result is not initialized and it's better not access
it to avoid unknown issue, like in _rclpy.c, moreover, the error msg without
that value is also  enough to reflect the fact.
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com",All jobs failed likely due to the merged PR ros2/rclcpp#371 from @tfoote.,True,{}
ros2/rmw,https://github.com/ros2/rmw,128,2017-11-16T09:55:53Z,2017-11-17T19:48:51Z,2017-11-17T19:48:55Z,MERGED,True,1,2,1,https://github.com/gaoethan,optimize not to access uninitialized scalar variable,2,[],https://github.com/ros2/rmw/pull/128,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/128#issuecomment-345127750,"when the validation_result is not initialized and it's better not access
it to avoid unknown issue, like in _rclpy.c, moreover, the error msg without
that value is also  enough to reflect the fact.
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","@dirk-thomas actually I think I screwed up the gist, I change rcl not rmw. I don't think he merged anything into rmw.",True,{}
ros2/rmw,https://github.com/ros2/rmw,129,2017-11-21T23:21:05Z,2017-11-22T03:04:35Z,2017-11-22T03:04:53Z,MERGED,True,1,1,1,https://github.com/mikaelarguedas,update service type support header name,1,[],https://github.com/ros2/rmw/pull/129,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/129,connects to ros2/rosidl#248,connects to ros2/rosidl#248,True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/gaoethan,1,https://github.com/ros2/rmw/pull/130,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/gaoethan,2,https://github.com/ros2/rmw/pull/130#issuecomment-346250183,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com",#ros2/rclcpp#405,True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/mikaelarguedas,3,https://github.com/ros2/rmw/pull/130#issuecomment-346254592,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","It looks like the string returned was changed from ""X is valid"" to NULL in c8d25e6.
So I'll leave it to @wjwwood to give feedback on this as I don't remember what motivated the change.
My guess is that this ""matches"" a return code of 0 when it succeeds, allowing you to easily know that it went well without having to do costly string operations.
If this was the motivation I would recommend returning ""unknown X validation result"" in the default case rather than changing the return value when the topic/node/namespace name is valid.
Good catch for the use of the wrong function in the namspace tests 👍",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/clalancette,4,https://github.com/ros2/rmw/pull/130#issuecomment-346362693,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","Doing a quick, dirty audit of the callers, it seems like almost none of them expect NULL to be returned from the validation_error_string APIs (most of them do something like RCUTILS_SET_ERROR_MSG, which will crash with a NULL error_string).  Therefore, I think we should probably change it so that the validation_error_string APIs never return NULL (even in the default case), and audit all of the callers to make sure the correct thing will happen.",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/gaoethan,5,https://github.com/ros2/rmw/pull/130#issuecomment-346515531,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","yes, I opt to unify all the specific error string in validation_error_string to avoid extra code to deal with NULL out.",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/gaoethan,6,https://github.com/ros2/rmw/pull/130#issuecomment-347435749,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","@wjwwood @mikaelarguedas The NULL return is removed and unify the result sting therein, and the relevant adaption required in the components which are affected by it are referenced, please review and give your comments, thanks !",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/130#issuecomment-347649079,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","I still think that having to do string comparison instead of checking for NULL is pretty expensive and would prefer to have NULL returned for the valid cases,

Agreed. -1 to string comparison. You could instead have it return a ret code and pass a cstring pointer in to be filled with the result. But it should be possible without string comparison to know if a valid string was passed.",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/gaoethan,8,https://github.com/ros2/rmw/pull/130#issuecomment-347737399,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","actually, I also think it's a little heavy to compare with the specific string, so I agree with you to return NULL for valid case.  however:


you know, when there is NULL returned, the valid case (e.g RMW_NODE_NAME_VALID) should be checked firstly before stepping next to rmw_*_validation_result_string to make sure no NULL will returned, or it's potential to deference to NULL like in RCUTILS_SET_ERROR_MSG and rclcpp PR 405


If merely checking not NULL in test to avoid specific string comparing, it's not sure for really at a certain illegal case, even though it's not a big problem here for the tests, you know, non-NULL has several illegal cases.",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/gaoethan,9,https://github.com/ros2/rmw/pull/130#issuecomment-351275669,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","@ros2/team, any new comments ? I can tweak it if there is to avoid its pending 😄 thanks !",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/mikaelarguedas,10,https://github.com/ros2/rmw/pull/130#issuecomment-351886759,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com",sorry for the delay @gaoethan I'll review this and the corresponding PRs in the next 24h 48h,True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/mikaelarguedas,11,https://github.com/ros2/rmw/pull/130#issuecomment-352228279,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com",I just reviewed these. Once last comments are addressed we'll need to rerun CI on this set of PRs before merging,True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/mikaelarguedas,12,https://github.com/ros2/rmw/pull/130#issuecomment-352431530,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com",@gaoethan can you please rebase the branches of all these PRs? as we changed some things in the rmw API this cannot be built / tested on CI without being rebased,True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/gaoethan,13,https://github.com/ros2/rmw/pull/130#issuecomment-352618178,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","@mikaelarguedas All have already been rebased, and you can go ahead now, :) thanks !",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/mikaelarguedas,14,https://github.com/ros2/rmw/pull/130#issuecomment-353498852,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","thanks @gaoethan for iterating, here's a round of ci on this set of PRs

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/gaoethan,15,https://github.com/ros2/rmw/pull/130#issuecomment-355459216,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","@mikaelarguedas it seems that CI has passed, should it be merged now ? thanks.",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/mikaelarguedas,16,https://github.com/ros2/rmw/pull/130#issuecomment-355870147,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","Sorry @gaoethan for the delay, I meant to tag @wjwwood on this set of PRs to see if the change makes sense to him as he is the original author. This looks good to me and CI is still passing
I reran CI just to make sure nothing changes since.

Linux 
Linux-aarch64 
macOS  (unrelated)
Windows  (unrelated)",True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/mikaelarguedas,17,https://github.com/ros2/rmw/pull/130#issuecomment-356061253,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com",Thanks @wjwwood I'll merge the connected PRs as well then,True,{}
ros2/rmw,https://github.com/ros2/rmw,130,2017-11-22T05:26:11Z,2018-01-08T15:31:30Z,2018-01-09T07:04:31Z,MERGED,True,24,24,6,https://github.com/gaoethan,Optimize namespace node and topic validation,4,[],https://github.com/ros2/rmw/pull/130,https://github.com/wjwwood,18,https://github.com/ros2/rmw/pull/130#issuecomment-356064398,"Make the result reflection more accurate, which should be
different from the default NULL
Use rmw_namespace_validation_result_string instead
for namespace validation
Signed-off-by: Ethan Gao ethan.gao@linux.intel.com","Oh, sorry I missed that there were connected pr's. Thanks.",True,{}
ros2/rmw,https://github.com/ros2/rmw,131,2017-11-22T22:23:58Z,2017-11-27T21:29:26Z,2017-11-27T21:29:29Z,MERGED,True,23,23,4,https://github.com/mikaelarguedas,waitset -> wait_set,2,['in review'],https://github.com/ros2/rmw/pull/131,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/131,"Linux 
Linux-aarch64 
macOS 
Windows 

Linux after linter fixes:

Linux","Linux 
Linux-aarch64 
macOS 
Windows 

Linux after linter fixes:

Linux",True,{}
ros2/rmw,https://github.com/ros2/rmw,131,2017-11-22T22:23:58Z,2017-11-27T21:29:26Z,2017-11-27T21:29:29Z,MERGED,True,23,23,4,https://github.com/mikaelarguedas,waitset -> wait_set,2,['in review'],https://github.com/ros2/rmw/pull/131,https://github.com/mikaelarguedas,2,https://github.com/ros2/rmw/pull/131#issuecomment-346894386,"Linux 
Linux-aarch64 
macOS 
Windows 

Linux after linter fixes:

Linux","New set of jobs after fixing the linter failures, ready for review

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,132,2017-12-07T22:41:41Z,2018-03-30T17:54:39Z,2018-03-30T17:54:43Z,MERGED,True,100,0,1,https://github.com/dirk-thomas,add function to parse key-value user_data,1,[],https://github.com/ros2/rmw/pull/132,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/132,"Move parse key-value function from rmw_opensplice_cpp here for reuse.
Connect to ros2/ros2#438.","Move parse key-value function from rmw_opensplice_cpp here for reuse.
Connect to ros2/ros2#438.",True,{}
ros2/rmw,https://github.com/ros2/rmw,132,2017-12-07T22:41:41Z,2018-03-30T17:54:39Z,2018-03-30T17:54:43Z,MERGED,True,100,0,1,https://github.com/dirk-thomas,add function to parse key-value user_data,1,[],https://github.com/ros2/rmw/pull/132,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/132#issuecomment-367800565,"Move parse key-value function from rmw_opensplice_cpp here for reuse.
Connect to ros2/ros2#438.",Changing label to in progress to match connected issue's status.,True,{}
ros2/rmw,https://github.com/ros2/rmw,132,2017-12-07T22:41:41Z,2018-03-30T17:54:39Z,2018-03-30T17:54:43Z,MERGED,True,100,0,1,https://github.com/dirk-thomas,add function to parse key-value user_data,1,[],https://github.com/ros2/rmw/pull/132,https://github.com/dirk-thomas,3,https://github.com/ros2/rmw/pull/132#issuecomment-367806504,"Move parse key-value function from rmw_opensplice_cpp here for reuse.
Connect to ros2/ros2#438.","I changed it back since this PR is ""in review"" (and actually already reviewed).",True,{}
ros2/rmw,https://github.com/ros2/rmw,134,2018-01-24T18:27:46Z,2018-01-24T18:58:01Z,2018-01-24T18:58:07Z,MERGED,True,1,1,1,https://github.com/sloretz,Clarify that NULL blocks forever in rmw_wait,2,[],https://github.com/ros2/rmw/pull/134,https://github.com/sloretz,1,https://github.com/ros2/rmw/pull/134,"The documentation says rmw_wait() blocks forever if the timeout is negative, but the timeout cannot be negative because rmw_time_t uses unsigned types.
typedef struct RMW_PUBLIC_TYPE rmw_time_t
{
  uint64_t sec;
  uint64_t nsec;
} rmw_time_t;
If ros2/rcutils#79 leads to rclutils_time_point_value_t using a signed type then it may make sense to propagate signed-ness down to rmw, but either way this documentation should still say it blocks when the time pointer passed in is NULL.
CI Linux, only testing rmw for any linter tests since this is a documentation change only

Linux","The documentation says rmw_wait() blocks forever if the timeout is negative, but the timeout cannot be negative because rmw_time_t uses unsigned types.
typedef struct RMW_PUBLIC_TYPE rmw_time_t
{
  uint64_t sec;
  uint64_t nsec;
} rmw_time_t;
If ros2/rcutils#79 leads to rclutils_time_point_value_t using a signed type then it may make sense to propagate signed-ness down to rmw, but either way this documentation should still say it blocks when the time pointer passed in is NULL.
CI Linux, only testing rmw for any linter tests since this is a documentation change only

Linux",True,{}
ros2/rmw,https://github.com/ros2/rmw,134,2018-01-24T18:27:46Z,2018-01-24T18:58:01Z,2018-01-24T18:58:07Z,MERGED,True,1,1,1,https://github.com/sloretz,Clarify that NULL blocks forever in rmw_wait,2,[],https://github.com/ros2/rmw/pull/134,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/134#issuecomment-360233572,"The documentation says rmw_wait() blocks forever if the timeout is negative, but the timeout cannot be negative because rmw_time_t uses unsigned types.
typedef struct RMW_PUBLIC_TYPE rmw_time_t
{
  uint64_t sec;
  uint64_t nsec;
} rmw_time_t;
If ros2/rcutils#79 leads to rclutils_time_point_value_t using a signed type then it may make sense to propagate signed-ness down to rmw, but either way this documentation should still say it blocks when the time pointer passed in is NULL.
CI Linux, only testing rmw for any linter tests since this is a documentation change only

Linux","This is the simplest change, but long term we should probably switch to rcutils_duration_value_t and remove the rmw_time_t.",True,{}
ros2/rmw,https://github.com/ros2/rmw,135,2018-03-15T18:08:28Z,2018-03-15T21:05:07Z,2018-03-15T21:05:13Z,MERGED,True,90,3,6,https://github.com/sloretz,Add validation functions accepting string length,1,[],https://github.com/ros2/rmw/pull/135,https://github.com/sloretz,1,https://github.com/ros2/rmw/pull/135,"This PR splits the validation functions to allow passing the length of the string as a parameter. Adding these methods allows ros2/rcl#217 to avoid copying some strings while parsing remap rules.

rmw_validate_full_topic_name_with_size()
rmw_validate_namespace_with_size()
rmw_validate_node_name_with_size()

CI

Linux 
Linux-aarch64 
macOS 
Windows","This PR splits the validation functions to allow passing the length of the string as a parameter. Adding these methods allows ros2/rcl#217 to avoid copying some strings while parsing remap rules.

rmw_validate_full_topic_name_with_size()
rmw_validate_namespace_with_size()
rmw_validate_node_name_with_size()

CI

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,137,2018-05-01T20:10:13Z,2018-05-01T22:22:58Z,2018-05-01T22:23:56Z,MERGED,True,30,30,15,https://github.com/mjcarroll,Change #if to #ifdef.,1,[],https://github.com/ros2/rmw/pull/137,https://github.com/mjcarroll,1,https://github.com/ros2/rmw/pull/137,"Needed because you can't use preprocessor on undefined variables in
MISRA.
Connects to ros2/rcl#229","Needed because you can't use preprocessor on undefined variables in
MISRA.
Connects to ros2/rcl#229",True,{}
ros2/rmw,https://github.com/ros2/rmw,138,2018-05-22T10:49:55Z,2018-06-16T20:48:37Z,2018-06-16T20:48:41Z,MERGED,True,40,15,2,https://github.com/wjwwood,check the return value of rcutils_snprintf,4,['enhancement'],https://github.com/ros2/rmw/pull/138,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/138,Connects to ros2/rcutils#85,Connects to ros2/rcutils#85,True,{}
ros2/rmw,https://github.com/ros2/rmw,139,2018-06-14T07:49:42Z,2018-06-14T13:02:28Z,2018-06-18T20:40:03Z,MERGED,True,6,6,3,https://github.com/wjwwood,proposed changes to expose_cdr pr's to use size_t,1,[],https://github.com/ros2/rmw/pull/139,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/139,Connects to ros2/demos#185,Connects to ros2/demos#185,True,{}
ros2/rmw,https://github.com/ros2/rmw,140,2018-06-15T23:25:13Z,2018-06-17T05:06:00Z,2018-06-17T05:06:04Z,MERGED,True,6,2,1,https://github.com/wjwwood,use rcutils allocator in allocators.c to avoid direct use of malloc/free,1,['enhancement'],https://github.com/ros2/rmw/pull/140,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/140,"This pull request makes sure that we're using rcutils_allocator_t everywhere and not using malloc, realloc, calloc, or free anywhere at all.
Connects to ros2/rcutils#102","This pull request makes sure that we're using rcutils_allocator_t everywhere and not using malloc, realloc, calloc, or free anywhere at all.
Connects to ros2/rcutils#102",True,{}
ros2/rmw,https://github.com/ros2/rmw,140,2018-06-15T23:25:13Z,2018-06-17T05:06:00Z,2018-06-17T05:06:04Z,MERGED,True,6,2,1,https://github.com/wjwwood,use rcutils allocator in allocators.c to avoid direct use of malloc/free,1,['enhancement'],https://github.com/ros2/rmw/pull/140,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/140#issuecomment-397766790,"This pull request makes sure that we're using rcutils_allocator_t everywhere and not using malloc, realloc, calloc, or free anywhere at all.
Connects to ros2/rcutils#102","I was a little worried about a performance impact with this change (as the rcutils allocator is across a shared library boundary most of the time), but I was looking at the decompiled code and apparently it jumps directly to __default_allocate in allocators.c of rcutils from rmw_allocate(). I think the compiler is smart enough to know that what rcutils_get_default_allocator() returns is stored locally as static and is unmodified, so it makes it const, and because rmw_allocate also doesn't modify the copy of it, the compiler just removes it all together and goes where .allocate points with what .state points to.",True,{}
ros2/rmw,https://github.com/ros2/rmw,141,2018-06-23T13:30:00Z,2018-06-23T16:18:59Z,2018-06-23T16:34:12Z,MERGED,True,2,2,2,https://github.com/nuclearsandwich,Prepare release 0.5.0,1,[],https://github.com/ros2/rmw/pull/141,https://github.com/nuclearsandwich,1,https://github.com/ros2/rmw/pull/141,"The commit on this PR will be fast-forwarded to master if approved.
Once rosidl is released this repository should be ready to go.","The commit on this PR will be fast-forwarded to master if approved.
Once rosidl is released this repository should be ready to go.",True,{}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/143,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).","With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).",True,{}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/143#issuecomment-405376075,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).","I am not sure if ""encoding"" is the right term here. Isn't ""serialization"" more appropriate? E.g. CDR is a serialization format.",True,{}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/mikaelarguedas,3,https://github.com/ros2/rmw/pull/143#issuecomment-405377053,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).","Yeah I had the same concern. Especially as we might use the term ""encoding"" when talking about e.g. strings",True,{}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/143#issuecomment-405381165,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).","I'm fine with serialization_format instead. Some people (at least) seem to draw some difference between the two:

https://www.quora.com/What-is-the-difference-between-serialization-and-encoding
https://stackoverflow.com/questions/22574039/serialization-versus-encoding",True,{}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/Karsten1987,5,https://github.com/ros2/rmw/pull/143#issuecomment-405381250,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).","The CDR spec also uses the expression of a ""CDR encoding"", but I really don't care.
So what's the correct function name?
rmw_get_serialization_format_identifier ?",True,{}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/wjwwood,6,https://github.com/ros2/rmw/pull/143#issuecomment-405381588,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).",I'd be fine with rmw_get_serialization_format.,True,{'THUMBS_UP': ['https://github.com/Karsten1987']}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/Karsten1987,7,https://github.com/ros2/rmw/pull/143#issuecomment-405409049,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).","CI (--packages-up-to rmw rmw_implementation rmw_connext_cpp rmw_fastrtps_cpp rmw_opensplice_cpp)
win: 
osx: 
aarch: 
linux:",True,{}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/Karsten1987,8,https://github.com/ros2/rmw/pull/143#issuecomment-405743095,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).",I changed encoding to serialization_format as requested. Putting this in review.,True,{}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/Karsten1987,9,https://github.com/ros2/rmw/pull/143#issuecomment-408553460,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).","CI:
osx: 
linux:  (unrelated)
win:",True,{}
ros2/rmw,https://github.com/ros2/rmw,143,2018-07-16T18:26:50Z,2018-07-27T22:24:00Z,2018-07-27T22:41:53Z,MERGED,True,17,0,1,https://github.com/Karsten1987,get encoding identifier,4,[],https://github.com/ros2/rmw/pull/143,https://github.com/dirk-thomas,10,https://github.com/ros2/rmw/pull/143#issuecomment-408556433,"With respect to the upcoming development for rosbags, we need to extract the encoding format for each RMW middleware.
The encoding identifier differs from the implementation identifier in the sense that each implementation has to be uniquely identified, but multiple RMW can use the same encoding (e.g. cdr for DDS implementations).","@ros2/rmw_implementations FYI these PRs added new API to the rmw interface. For FastRTPS, Connext and OpenSplice the referenced PRs implement the new API (returning ""Cdr"" as the format). Other RMW implementations should be updated to implement this new API in order to stay compatible.

If you are maintaining a RMW impl but are not part of the mentioned team please feel free to reach out to be added to the team. That way you can stay in the loop for future changes.",True,{}
ros2/rmw,https://github.com/ros2/rmw,145,2018-07-31T22:30:07Z,2018-08-02T17:38:51Z,2018-08-07T17:33:10Z,MERGED,True,10,199,5,https://github.com/Karsten1987,rmw serialized to rcutils serialized,3,[],https://github.com/ros2/rmw/pull/145,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/145,"fixes #144
I let the original test for the serialized message in this package to ensure the typedefs working.
I am happy to remove them if considered as unnecessary.","fixes #144
I let the original test for the serialized message in this package to ensure the typedefs working.
I am happy to remove them if considered as unnecessary.",True,{}
ros2/rmw,https://github.com/ros2/rmw,145,2018-07-31T22:30:07Z,2018-08-02T17:38:51Z,2018-08-07T17:33:10Z,MERGED,True,10,199,5,https://github.com/Karsten1987,rmw serialized to rcutils serialized,3,[],https://github.com/ros2/rmw/pull/145,https://github.com/mikaelarguedas,2,https://github.com/ros2/rmw/pull/145#issuecomment-411135374,"fixes #144
I let the original test for the serialized message in this package to ensure the typedefs working.
I am happy to remove them if considered as unnecessary.",@Karsten1987 do you still need this branch ?,True,{}
ros2/rmw,https://github.com/ros2/rmw,146,2018-08-01T02:49:05Z,2018-08-09T18:21:06Z,2018-08-09T18:21:10Z,MERGED,True,12,7,1,https://github.com/Karsten1987,rcutils_serialized_message -> rcutils_char_array,2,[],https://github.com/ros2/rmw/pull/146,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/146,"separate PR for renaming serialized_message to char_array.
I will rebase this once #145 is merged.","separate PR for renaming serialized_message to char_array.
I will rebase this once #145 is merged.",True,{}
ros2/rmw,https://github.com/ros2/rmw,146,2018-08-01T02:49:05Z,2018-08-09T18:21:06Z,2018-08-09T18:21:10Z,MERGED,True,12,7,1,https://github.com/Karsten1987,rcutils_serialized_message -> rcutils_char_array,2,[],https://github.com/ros2/rmw/pull/146,https://github.com/Karsten1987,2,https://github.com/ros2/rmw/pull/146#issuecomment-410096903,"separate PR for renaming serialized_message to char_array.
I will rebase this once #145 is merged.","CI:
linux: 
aarch: 
osx: 
win:",True,{}
ros2/rmw,https://github.com/ros2/rmw,146,2018-08-01T02:49:05Z,2018-08-09T18:21:06Z,2018-08-09T18:21:10Z,MERGED,True,12,7,1,https://github.com/Karsten1987,rcutils_serialized_message -> rcutils_char_array,2,[],https://github.com/ros2/rmw/pull/146,https://github.com/Karsten1987,3,https://github.com/ros2/rmw/pull/146#issuecomment-411116481,"separate PR for renaming serialized_message to char_array.
I will rebase this once #145 is merged.",@ros2/team friendly ping :),True,{}
ros2/rmw,https://github.com/ros2/rmw,146,2018-08-01T02:49:05Z,2018-08-09T18:21:06Z,2018-08-09T18:21:10Z,MERGED,True,12,7,1,https://github.com/Karsten1987,rcutils_serialized_message -> rcutils_char_array,2,[],https://github.com/ros2/rmw/pull/146,https://github.com/mikaelarguedas,4,https://github.com/ros2/rmw/pull/146#issuecomment-411135120,"separate PR for renaming serialized_message to char_array.
I will rebase this once #145 is merged.",Oh I thought this was waiting for the datastructure to diverge between rmw and rcutils: ros2/rcutils#110 (comment).,True,{}
ros2/rmw,https://github.com/ros2/rmw,147,2018-08-01T17:56:05Z,2018-08-01T18:09:56Z,2018-08-01T18:10:00Z,MERGED,True,1,1,1,https://github.com/mikaelarguedas,typo: rcutil -> rcutils,1,[],https://github.com/ros2/rmw/pull/147,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/147,Opening for visibility but will merge right away.,Opening for visibility but will merge right away.,True,{}
ros2/rmw,https://github.com/ros2/rmw,148,2018-08-28T21:55:17Z,2018-09-06T13:06:27Z,2018-09-06T13:06:52Z,MERGED,True,29,1,1,https://github.com/mjcarroll,Include node namespaces in get_node_names(),4,[],https://github.com/ros2/rmw/pull/148,https://github.com/mjcarroll,1,https://github.com/ros2/rmw/pull/148,Connects to #142,Connects to #142,True,{}
ros2/rmw,https://github.com/ros2/rmw,148,2018-08-28T21:55:17Z,2018-09-06T13:06:27Z,2018-09-06T13:06:52Z,MERGED,True,29,1,1,https://github.com/mjcarroll,Include node namespaces in get_node_names(),4,[],https://github.com/ros2/rmw/pull/148,https://github.com/mjcarroll,2,https://github.com/ros2/rmw/pull/148#issuecomment-416977793,Connects to #142,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,148,2018-08-28T21:55:17Z,2018-09-06T13:06:27Z,2018-09-06T13:06:52Z,MERGED,True,29,1,1,https://github.com/mjcarroll,Include node namespaces in get_node_names(),4,[],https://github.com/ros2/rmw/pull/148,https://github.com/mjcarroll,3,https://github.com/ros2/rmw/pull/148#issuecomment-418512153,Connects to #142,"Enough changes to justify running CI again:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,148,2018-08-28T21:55:17Z,2018-09-06T13:06:27Z,2018-09-06T13:06:52Z,MERGED,True,29,1,1,https://github.com/mjcarroll,Include node namespaces in get_node_names(),4,[],https://github.com/ros2/rmw/pull/148,https://github.com/mjcarroll,4,https://github.com/ros2/rmw/pull/148#issuecomment-419085673,Connects to #142,"Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,148,2018-08-28T21:55:17Z,2018-09-06T13:06:27Z,2018-09-06T13:06:52Z,MERGED,True,29,1,1,https://github.com/mjcarroll,Include node namespaces in get_node_names(),4,[],https://github.com/ros2/rmw/pull/148,https://github.com/mjcarroll,5,https://github.com/ros2/rmw/pull/148#issuecomment-419085740,Connects to #142,I fixed the new warnings in rmw_fastrtps,True,{}
ros2/rmw,https://github.com/ros2/rmw,149,2018-08-31T00:31:58Z,2018-08-31T00:35:34Z,2018-08-31T00:35:38Z,MERGED,True,1,0,1,https://github.com/wjwwood,Doc fixups,1,[],https://github.com/ros2/rmw/pull/149,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/149,,,True,{}
ros2/rmw,https://github.com/ros2/rmw,150,2018-10-05T12:24:20Z,2018-10-05T21:30:13Z,2018-10-05T21:30:17Z,MERGED,True,1,1,1,https://github.com/clalancette,Add semicolons to RCLCPP and RCUTILS macros.,1,[],https://github.com/ros2/rmw/pull/150,https://github.com/clalancette,1,https://github.com/ros2/rmw/pull/150,"Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Connects to ros2/rcutils#113","Signed-off-by: Chris Lalancette clalancette@openrobotics.org
Connects to ros2/rcutils#113",True,{}
ros2/rmw,https://github.com/ros2/rmw,152,2018-10-17T14:41:01Z,2018-11-29T14:07:14Z,2018-11-29T14:07:19Z,CLOSED,False,19,0,2,https://github.com/JuanCarlos-Arce,RMW configuration from XML only,1,[],https://github.com/ros2/rmw/pull/152,https://github.com/JuanCarlos-Arce,1,https://github.com/ros2/rmw/pull/152,"We have implemented a new feature to apply the RMW configuration only from XML files, avoiding the current configuration set by code. To do that we have added a new boolean value to the rmw_qos_profile_t struct.
Connects to ros2/ros2#589","We have implemented a new feature to apply the RMW configuration only from XML files, avoiding the current configuration set by code. To do that we have added a new boolean value to the rmw_qos_profile_t struct.
Connects to ros2/ros2#589",True,{}
ros2/rmw,https://github.com/ros2/rmw,152,2018-10-17T14:41:01Z,2018-11-29T14:07:14Z,2018-11-29T14:07:19Z,CLOSED,False,19,0,2,https://github.com/JuanCarlos-Arce,RMW configuration from XML only,1,[],https://github.com/ros2/rmw/pull/152,https://github.com/JuanCarlos-Arce,2,https://github.com/ros2/rmw/pull/152#issuecomment-436660449,"We have implemented a new feature to apply the RMW configuration only from XML files, avoiding the current configuration set by code. To do that we have added a new boolean value to the rmw_qos_profile_t struct.
Connects to ros2/ros2#589",@dirk-thomas  friendly ping :-),True,{}
ros2/rmw,https://github.com/ros2/rmw,152,2018-10-17T14:41:01Z,2018-11-29T14:07:14Z,2018-11-29T14:07:19Z,CLOSED,False,19,0,2,https://github.com/JuanCarlos-Arce,RMW configuration from XML only,1,[],https://github.com/ros2/rmw/pull/152,https://github.com/JuanCarlos-Arce,3,https://github.com/ros2/rmw/pull/152#issuecomment-442845527,"We have implemented a new feature to apply the RMW configuration only from XML files, avoiding the current configuration set by code. To do that we have added a new boolean value to the rmw_qos_profile_t struct.
Connects to ros2/ros2#589","After checking this solution with @dirk-thomas and @mjcarroll we have decided to change the approach and with the new management, we don't need any change in this package.",True,{}
ros2/rmw,https://github.com/ros2/rmw,153,2018-10-29T18:19:38Z,2018-11-02T02:07:41Z,2018-11-02T02:07:46Z,MERGED,True,22,57,4,https://github.com/wjwwood,use new error handling API,2,['enhancement'],https://github.com/ros2/rmw/pull/153,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/153,Connects to ros2/rcutils#121,Connects to ros2/rcutils#121,True,{}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/154,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.",True,{'THUMBS_UP': ['https://github.com/gonzodepedro']}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/Karsten1987,2,https://github.com/ros2/rmw/pull/154#issuecomment-436457863,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","This generally looks good to me (afaict). I like the idea of not having rmw_init() as global.
Just a few things which came to my mind here:

if context or init_options are implementation dependent, I believe it makes sense to add the rmw identifier to it.
if the idea is to access the init options from the context object, what's the difference between the two data types? Is context a superset of init_options then?
I wonder whether it makes sense to have these data types as generic key-value pairs which might be written to disk (a.k.a rosbags) to have a consistent environment when replaying data. But that's just an idea as I don't really know what kind of options you're thinking about here. You could also come around that later by having maybe a serialization function for them.",True,{}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/154#issuecomment-436482176,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","Thanks for the feedback.


if context or init_options are implementation dependent, I believe it makes sense to add the rmw identifier to it.


That's a good idea. I'll do that.


if the idea is to access the init options from the context object, what's the difference between the two data types? Is context a superset of init_options then?


There is overlap between the two types, but neither is necessarily a superset of the other. I could choose to include the entire options structure in the context just for potential use in the future, but that's not necessary.
For example, imagine an option like ""do_not_register_signal_handlers"", which is useful during init, but not necessarily afterwards, so it might not make it into the context by itself. But an option like instance_id is potentially needed to do initialization and should end up in the context for later use, so it has to be in the options, and so it exists in both.


I wonder whether it makes sense to have these data types as generic key-value pairs which might be written to disk (a.k.a rosbags) to have a consistent environment when replaying data. But that's just an idea as I don't really know what kind of options you're thinking about here. You could also come around that later by having maybe a serialization function for them.


I don't think that's in scope here. Also these settings will probably not influence things like node names, topic names, etc., and so I'm not sure how important they are to playback.
I think the key-value pairs might work for the options, but would be very efficient for accessing elements of the context.
On the other hand, I don't think the key-value pair makes it possible to serialize them somehow where it was impossible before. So I think I'd pass on this for now.",True,{}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/dirk-thomas,4,https://github.com/ros2/rmw/pull/154#issuecomment-436872083,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","👍 to rmw_init_context_t enabling to encapsulate state through the lifetime of an rmw between init and shutdown. For the layers above rmw it is a blackbox for passing state between rmw function calls. I would suggest to drop the init part from the name since it seems to provide context beyond just the initialization.
Regarding the rmw_init_options_t I am not sure I understand the purpose fully. Since the actual options in the strict are rmw implementation specific (do I understand that correctly?) how can the caller make use of any of this if using the generic rmw interface without locking itself to a specific implementation?",True,{}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/154#issuecomment-436876479,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","I would suggest to drop the init part from the name since it seems to provide context beyond just the initialization.

Ok. My thinking was that there was one context per init, that's why I left init in the name. I thought of it like the init handle is analogous to the node handle or something like that. But I don't feel strongly about it, I'll drop the init.

how can the caller make use of any of this if using the generic rmw interface without locking itself to a specific implementation?

Well they cannot, but the idea for now was that an rmw specific function could be used to ""mutate"" the implementation specific init options before passing them into the init. Doing so will tie you to a specific implementation.
What this does enable, however, is to have code in the implementation of rmw_init() that can do different things based on the options without relying on global state.
In the future, we might come up with a way to declare which ROS primitives you're going to create at the start (storing them in the init options) and then pass that to init, but not right now. This was talked about here:
#126",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/dirk-thomas,6,https://github.com/ros2/rmw/pull/154#issuecomment-437051405,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","Well they cannot, but the idea for now was that an rmw specific function could be used to ""mutate"" the implementation specific init options before passing them into the init. Doing so will tie you to a specific implementation.

Thanks for clarifying. Sounds good to me. I just wanted to check I understood it correctly. Maybe adding a note in the docblock would be good - just to avoid users being unsure how to set options if they are not aware that it only works for rmw specific implementation?",True,{}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/gonzodepedro,7,https://github.com/ros2/rmw/pull/154#issuecomment-442146803,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.",LGTM,True,{}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/wjwwood,8,https://github.com/ros2/rmw/pull/154#issuecomment-443073669,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","CI:

Linux 
Linux (OpenSplice) 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/154#issuecomment-443096337,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","The two warnings on macOS are unrelated to my changes, so I'm going to merge! 🎉",True,{}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/dirk-thomas,10,https://github.com/ros2/rmw/pull/154#issuecomment-443322329,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","The two warnings on macOS are unrelated to my changes

The two new warning are caused by changes in ros2/rcl#336. Also in the latest packaging job: https://ci.ros2.org/job/ci_packaging_osx/59/warnings11Result/ The patch introduced new member to existing structs hence the initialization of these structs needs to be updated to initialize one more member.",True,{}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/wjwwood,11,https://github.com/ros2/rmw/pull/154#issuecomment-443325549,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","Ok, you're right, I assumed that the statement was unaffected by me because in C {0} is supposed to initialize the whole struct. I thought it must have been a change to how the code was being compiled as part of other changes. Also I remember a pr from @sloretz about removing clang warnings which I associated with this.
I'll fix it asap.",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rmw,https://github.com/ros2/rmw,154,2018-11-06T23:53:51Z,2018-11-30T05:32:46Z,2018-11-30T21:14:17Z,MERGED,True,479,18,8,https://github.com/wjwwood,refactor init to allow options to be passed and to not be global,4,['enhancement'],https://github.com/ros2/rmw/pull/154,https://github.com/wjwwood,12,https://github.com/ros2/rmw/pull/154#issuecomment-443341437,"tl;dr I would like reviews of the proposed changes to this API while I finish refactoring things up and down the stack to use this new API. So it's ready for review, but not for CI nor merge.

This pull request is motivated by new rmw implementations that require additional configuration during initialization.
This pull request makes two major changes:

it allows for options to be passed to rmw_init() and then be accessed via a returned rmw_init_context_t instance, and
the rmw_init_context_t allows rmw_init() to be non-global

This also:

actually adds rmw_shutdown() (previously referenced in documentation but never implemented)
changes the rmw_create_node() and rmw_create_guard_condition() functions to take the rmw_init_context_t as an argument, so they do not need to access global variables

I explicitly avoided refactoring rmw_create_node() to return a ret value rather than the pointer (so you can get more discrete error reasons) so I can do that when refactoring these interfaces to take allocators. I added a TODO in the meantime.","See ros2/rcl#345, interestingly I don't see this warning on my macbook...",True,{}
ros2/rmw,https://github.com/ros2/rmw,155,2018-11-12T22:18:35Z,2018-11-28T16:36:44Z,2018-12-19T19:59:07Z,MERGED,True,36,0,1,https://github.com/mjcarroll,Methods to retrieve matched counts on publisher and subscriber,4,[],https://github.com/ros2/rmw/pull/155,https://github.com/mjcarroll,1,https://github.com/ros2/rmw/pull/155,"This provides an API for retrieving the number of matched publishers to a subscription and vice-versa.  It is a method to be used with forthcoming additions in creating a port of SubscriberStatusCallback (from ROS 1, see: https://docs.ros.org/api/roscpp/html/namespaceros.html#ac61b99a2913cd421fb915395a67e71a1) for ROS2.
This is different from the existing graph methods, as it should interact directly with a  publisher or subscription to retrieve the matched count.
Requires changes in:

 rmw_implementation ros2/rmw_implementation#48
 rcl ros2/rcl#326
 rmw_fastrtps ros2/rmw_fastrtps#234
 rmw_opensplice ros2/rmw_opensplice#248
 rmw_connext ros2/rmw_connext#310","This provides an API for retrieving the number of matched publishers to a subscription and vice-versa.  It is a method to be used with forthcoming additions in creating a port of SubscriberStatusCallback (from ROS 1, see: https://docs.ros.org/api/roscpp/html/namespaceros.html#ac61b99a2913cd421fb915395a67e71a1) for ROS2.
This is different from the existing graph methods, as it should interact directly with a  publisher or subscription to retrieve the matched count.
Requires changes in:

 rmw_implementation ros2/rmw_implementation#48
 rcl ros2/rcl#326
 rmw_fastrtps ros2/rmw_fastrtps#234
 rmw_opensplice ros2/rmw_opensplice#248
 rmw_connext ros2/rmw_connext#310",True,{}
ros2/rmw,https://github.com/ros2/rmw,155,2018-11-12T22:18:35Z,2018-11-28T16:36:44Z,2018-12-19T19:59:07Z,MERGED,True,36,0,1,https://github.com/mjcarroll,Methods to retrieve matched counts on publisher and subscriber,4,[],https://github.com/ros2/rmw/pull/155,https://github.com/mjcarroll,2,https://github.com/ros2/rmw/pull/155#issuecomment-442094852,"This provides an API for retrieving the number of matched publishers to a subscription and vice-versa.  It is a method to be used with forthcoming additions in creating a port of SubscriberStatusCallback (from ROS 1, see: https://docs.ros.org/api/roscpp/html/namespaceros.html#ac61b99a2913cd421fb915395a67e71a1) for ROS2.
This is different from the existing graph methods, as it should interact directly with a  publisher or subscription to retrieve the matched count.
Requires changes in:

 rmw_implementation ros2/rmw_implementation#48
 rcl ros2/rcl#326
 rmw_fastrtps ros2/rmw_fastrtps#234
 rmw_opensplice ros2/rmw_opensplice#248
 rmw_connext ros2/rmw_connext#310","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,155,2018-11-12T22:18:35Z,2018-11-28T16:36:44Z,2018-12-19T19:59:07Z,MERGED,True,36,0,1,https://github.com/mjcarroll,Methods to retrieve matched counts on publisher and subscriber,4,[],https://github.com/ros2/rmw/pull/155,https://github.com/mjcarroll,3,https://github.com/ros2/rmw/pull/155#issuecomment-442291105,"This provides an API for retrieving the number of matched publishers to a subscription and vice-versa.  It is a method to be used with forthcoming additions in creating a port of SubscriberStatusCallback (from ROS 1, see: https://docs.ros.org/api/roscpp/html/namespaceros.html#ac61b99a2913cd421fb915395a67e71a1) for ROS2.
This is different from the existing graph methods, as it should interact directly with a  publisher or subscription to retrieve the matched count.
Requires changes in:

 rmw_implementation ros2/rmw_implementation#48
 rcl ros2/rcl#326
 rmw_fastrtps ros2/rmw_fastrtps#234
 rmw_opensplice ros2/rmw_opensplice#248
 rmw_connext ros2/rmw_connext#310","Rerun CI after all changes:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,155,2018-11-12T22:18:35Z,2018-11-28T16:36:44Z,2018-12-19T19:59:07Z,MERGED,True,36,0,1,https://github.com/mjcarroll,Methods to retrieve matched counts on publisher and subscriber,4,[],https://github.com/ros2/rmw/pull/155,https://github.com/mjcarroll,4,https://github.com/ros2/rmw/pull/155#issuecomment-442472169,"This provides an API for retrieving the number of matched publishers to a subscription and vice-versa.  It is a method to be used with forthcoming additions in creating a port of SubscriberStatusCallback (from ROS 1, see: https://docs.ros.org/api/roscpp/html/namespaceros.html#ac61b99a2913cd421fb915395a67e71a1) for ROS2.
This is different from the existing graph methods, as it should interact directly with a  publisher or subscription to retrieve the matched count.
Requires changes in:

 rmw_implementation ros2/rmw_implementation#48
 rcl ros2/rcl#326
 rmw_fastrtps ros2/rmw_fastrtps#234
 rmw_opensplice ros2/rmw_opensplice#248
 rmw_connext ros2/rmw_connext#310","Once more with rebased rmw_fastrtps:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,156,2018-11-15T01:10:58Z,2019-01-11T16:02:05Z,2019-01-11T16:02:10Z,MERGED,True,2,0,1,https://github.com/mlautman,minor notes explaining rmw_qos_profile_t,6,[],https://github.com/ros2/rmw/pull/156,https://github.com/mlautman,1,https://github.com/ros2/rmw/pull/156,,,True,{}
ros2/rmw,https://github.com/ros2/rmw,156,2018-11-15T01:10:58Z,2019-01-11T16:02:05Z,2019-01-11T16:02:10Z,MERGED,True,2,0,1,https://github.com/mlautman,minor notes explaining rmw_qos_profile_t,6,[],https://github.com/ros2/rmw/pull/156,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/156#issuecomment-438884799,,If the helpful text should appear in the API documentation it needs to be in a docblock.,True,{}
ros2/rmw,https://github.com/ros2/rmw,156,2018-11-15T01:10:58Z,2019-01-11T16:02:05Z,2019-01-11T16:02:10Z,MERGED,True,2,0,1,https://github.com/mlautman,minor notes explaining rmw_qos_profile_t,6,[],https://github.com/ros2/rmw/pull/156,https://github.com/mlautman,3,https://github.com/ros2/rmw/pull/156#issuecomment-439985712,,@dirk-thomas Updated for Doxygen,True,{}
ros2/rmw,https://github.com/ros2/rmw,156,2018-11-15T01:10:58Z,2019-01-11T16:02:05Z,2019-01-11T16:02:10Z,MERGED,True,2,0,1,https://github.com/mlautman,minor notes explaining rmw_qos_profile_t,6,[],https://github.com/ros2/rmw/pull/156,https://github.com/mlautman,4,https://github.com/ros2/rmw/pull/156#issuecomment-447178608,,@dirk-thomas Ping,True,{}
ros2/rmw,https://github.com/ros2/rmw,156,2018-11-15T01:10:58Z,2019-01-11T16:02:05Z,2019-01-11T16:02:10Z,MERGED,True,2,0,1,https://github.com/mlautman,minor notes explaining rmw_qos_profile_t,6,[],https://github.com/ros2/rmw/pull/156,https://github.com/dirk-thomas,5,https://github.com/ros2/rmw/pull/156#issuecomment-453561274,,Thanks for the patch.,True,{}
ros2/rmw,https://github.com/ros2/rmw,157,2018-11-16T23:17:44Z,2018-11-16T23:38:47Z,2018-11-16T23:38:51Z,CLOSED,False,122,0,2,https://github.com/ross-desmond,Add node graph interface for information by node,1,[],https://github.com/ros2/rmw/pull/157,https://github.com/ross-desmond,1,https://github.com/ros2/rmw/pull/157,"Summary: Enable graph api to get information by node name and
namespace

rmw_get_subscriber_names_and_types_by_node
rmw_get_publisher_names_and_types_by_node
rmw_get_service_names_and_types_by_node","Summary: Enable graph api to get information by node name and
namespace

rmw_get_subscriber_names_and_types_by_node
rmw_get_publisher_names_and_types_by_node
rmw_get_service_names_and_types_by_node",True,{}
ros2/rmw,https://github.com/ros2/rmw,158,2018-11-16T23:45:32Z,2018-12-07T00:05:13Z,2018-12-07T00:05:18Z,MERGED,True,137,0,1,https://github.com/ross-desmond,Add node graph functions,5,[],https://github.com/ros2/rmw/pull/158,https://github.com/ross-desmond,1,https://github.com/ros2/rmw/pull/158,"rmw_get_subscriber_names_and_types_by_node
rmw_get_publisher_names_and_types_by_node
rmw_get_service_names_and_types_by_node

Connects to ros2/rcl#333","rmw_get_subscriber_names_and_types_by_node
rmw_get_publisher_names_and_types_by_node
rmw_get_service_names_and_types_by_node

Connects to ros2/rcl#333",True,{}
ros2/rmw,https://github.com/ros2/rmw,158,2018-11-16T23:45:32Z,2018-12-07T00:05:13Z,2018-12-07T00:05:18Z,MERGED,True,137,0,1,https://github.com/ross-desmond,Add node graph functions,5,[],https://github.com/ros2/rmw/pull/158,https://github.com/ross-desmond,2,https://github.com/ros2/rmw/pull/158#issuecomment-439564773,"rmw_get_subscriber_names_and_types_by_node
rmw_get_publisher_names_and_types_by_node
rmw_get_service_names_and_types_by_node

Connects to ros2/rcl#333",Connected to rcl,True,{}
ros2/rmw,https://github.com/ros2/rmw,158,2018-11-16T23:45:32Z,2018-12-07T00:05:13Z,2018-12-07T00:05:18Z,MERGED,True,137,0,1,https://github.com/ross-desmond,Add node graph functions,5,[],https://github.com/ros2/rmw/pull/158,https://github.com/mjcarroll,3,https://github.com/ros2/rmw/pull/158#issuecomment-440378949,"rmw_get_subscriber_names_and_types_by_node
rmw_get_publisher_names_and_types_by_node
rmw_get_service_names_and_types_by_node

Connects to ros2/rcl#333","I don't believe that this is actually connected to #159, is that an error?",True,{'THUMBS_UP': ['https://github.com/ross-desmond']}
ros2/rmw,https://github.com/ros2/rmw,158,2018-11-16T23:45:32Z,2018-12-07T00:05:13Z,2018-12-07T00:05:18Z,MERGED,True,137,0,1,https://github.com/ross-desmond,Add node graph functions,5,[],https://github.com/ros2/rmw/pull/158,https://github.com/thomas-moulard,4,https://github.com/ros2/rmw/pull/158#issuecomment-443479602,"rmw_get_subscriber_names_and_types_by_node
rmw_get_publisher_names_and_types_by_node
rmw_get_service_names_and_types_by_node

Connects to ros2/rcl#333",@ross-desmond PTAL at https://github.com/thomas-moulard/rmw/commits/node_graph_impl I fixed copyright and cpplint issues,True,{}
ros2/rmw,https://github.com/ros2/rmw,158,2018-11-16T23:45:32Z,2018-12-07T00:05:13Z,2018-12-07T00:05:18Z,MERGED,True,137,0,1,https://github.com/ross-desmond,Add node graph functions,5,[],https://github.com/ros2/rmw/pull/158,https://github.com/clalancette,5,https://github.com/ros2/rmw/pull/158#issuecomment-444917786,"rmw_get_subscriber_names_and_types_by_node
rmw_get_publisher_names_and_types_by_node
rmw_get_service_names_and_types_by_node

Connects to ros2/rcl#333",I just force pushed the changes to cleanup history.  No functional change.,True,{}
ros2/rmw,https://github.com/ros2/rmw,160,2018-11-21T16:54:54Z,2019-05-02T16:30:42Z,2019-05-02T16:30:47Z,MERGED,True,176,15,2,https://github.com/mjcarroll,Rmw preallocate,9,[],https://github.com/ros2/rmw/pull/160,https://github.com/mjcarroll,1,https://github.com/ros2/rmw/pull/160,Connects to #159,Connects to #159,True,{}
ros2/rmw,https://github.com/ros2/rmw,160,2018-11-21T16:54:54Z,2019-05-02T16:30:42Z,2019-05-02T16:30:47Z,MERGED,True,176,15,2,https://github.com/mjcarroll,Rmw preallocate,9,[],https://github.com/ros2/rmw/pull/160,https://github.com/mjcarroll,2,https://github.com/ros2/rmw/pull/160#issuecomment-488132439,Connects to #159,"Addressed feedback and added documentation, please take another look.",True,{}
ros2/rmw,https://github.com/ros2/rmw,160,2018-11-21T16:54:54Z,2019-05-02T16:30:42Z,2019-05-02T16:30:47Z,MERGED,True,176,15,2,https://github.com/mjcarroll,Rmw preallocate,9,[],https://github.com/ros2/rmw/pull/160,https://github.com/mjcarroll,3,https://github.com/ros2/rmw/pull/160#issuecomment-488409321,Connects to #159,"CI Status (all rmw_preallocate branches)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,160,2018-11-21T16:54:54Z,2019-05-02T16:30:42Z,2019-05-02T16:30:47Z,MERGED,True,176,15,2,https://github.com/mjcarroll,Rmw preallocate,9,[],https://github.com/ros2/rmw/pull/160,https://github.com/mjcarroll,4,https://github.com/ros2/rmw/pull/160#issuecomment-488546666,Connects to #159,"Once more after some rebases:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,160,2018-11-21T16:54:54Z,2019-05-02T16:30:42Z,2019-05-02T16:30:47Z,MERGED,True,176,15,2,https://github.com/mjcarroll,Rmw preallocate,9,[],https://github.com/ros2/rmw/pull/160,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/160#issuecomment-488553602,Connects to #159,"There are warnings on Windows, but they're in the generated IDL code.
I looked at the CI job and it looks like it is pulling in changes from more repositories than I expected:

21:03:18 ==> vcs custom . --args checkout -b rmw_preallocate --track origin/rmw_preallocate
21:03:19 EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE....EE..EEEEEEE.E.EEEEEEEEEEE..
21:03:19 === .\src\ament\ament_cmake (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ament\ament_index (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ament\ament_lint (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ament\ament_package (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ament\googletest (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ament\uncrustify_vendor (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\eProsima\Fast-CDR (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\eProsima\Fast-RTPS (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\osrf\osrf_pycommon (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\osrf\osrf_testing_tools_cpp (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-perception\laser_geometry (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-planning\navigation_msgs (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\python_qt_binding (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\qt_gui_core (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt_console (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt_msg (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt_plot (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt_publisher (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt_py_console (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt_service_caller (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt_shell (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt_srv (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros-visualization\rqt_top (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\ament_cmake_ros (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\common_interfaces (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\console_bridge_vendor (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\demos (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\example_interfaces (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\examples (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\geometry2 (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\kdl_parser (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\launch (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\launch_ros (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\libyaml_vendor (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\message_filters (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\orocos_kinematics_dynamics (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\poco_vendor (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rcl (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\rcl_interfaces (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rcl_logging (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rclcpp (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\rclpy (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\rcpputils (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rcutils (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\realtime_support (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rmw (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\rmw_connext (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\rmw_fastrtps (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\rmw_implementation (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\rmw_opensplice (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\robot_state_publisher (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\ros1_bridge (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\ros2cli (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rosidl (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\rosidl_dds (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rosidl_defaults (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rosidl_python (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rosidl_typesupport (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rosidl_typesupport_connext (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rosidl_typesupport_fastrtps (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rosidl_typesupport_opensplice (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\rviz (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\sros2 (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\system_tests (git) ===
21:03:19 Branch 'rmw_preallocate' set up to track remote branch 'rmw_preallocate' from 'origin'.
21:03:19 Switched to a new branch 'rmw_preallocate'
21:03:19 === .\src\ros2\test_interface_files (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\tinydir_vendor (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\tinyxml2_vendor (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\tinyxml_vendor (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\tlsf (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\unique_identifier_msgs (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\urdf (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\urdfdom (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros2\yaml_cpp_vendor (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros\class_loader (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros\pluginlib (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros\resource_retriever (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros\ros_environment (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it
21:03:19 === .\src\ros\urdfdom_headers (git) ===
21:03:19 fatal: 'origin/rmw_preallocate' is not a commit and a branch 'rmw_preallocate' cannot be created from it


Specifically ros2/rosidl, which may be the cause of the compiler warnings on Windows. So, I'm just not sure, so I'll leave this until tomorrow morning.",True,{}
ros2/rmw,https://github.com/ros2/rmw,160,2018-11-21T16:54:54Z,2019-05-02T16:30:42Z,2019-05-02T16:30:47Z,MERGED,True,176,15,2,https://github.com/mjcarroll,Rmw preallocate,9,[],https://github.com/ros2/rmw/pull/160,https://github.com/mjcarroll,6,https://github.com/ros2/rmw/pull/160#issuecomment-488676298,Connects to #159,That looks to be the correct set of repositories.  Were there any in there that you weren't expecting?,True,{}
ros2/rmw,https://github.com/ros2/rmw,160,2018-11-21T16:54:54Z,2019-05-02T16:30:42Z,2019-05-02T16:30:47Z,MERGED,True,176,15,2,https://github.com/mjcarroll,Rmw preallocate,9,[],https://github.com/ros2/rmw/pull/160,https://github.com/mjcarroll,7,https://github.com/ros2/rmw/pull/160#issuecomment-488712276,Connects to #159,"Looking at the CI, I don't believe that those (edit: MSBuild warnings) are related to anything that I would have changed, it's in the actual generated message code.  @jacobperron could this be related to the changes you made yesterday?",True,{}
ros2/rmw,https://github.com/ros2/rmw,160,2018-11-21T16:54:54Z,2019-05-02T16:30:42Z,2019-05-02T16:30:47Z,MERGED,True,176,15,2,https://github.com/mjcarroll,Rmw preallocate,9,[],https://github.com/ros2/rmw/pull/160,https://github.com/dirk-thomas,8,https://github.com/ros2/rmw/pull/160#issuecomment-488714885,Connects to #159,These CI warnings https://ci.ros2.org/job/ci_windows/6715/warnings43Result/ should be addressed by ros2/rosidl#375.,True,{}
ros2/rmw,https://github.com/ros2/rmw,161,2018-11-22T01:11:11Z,2018-11-26T18:51:32Z,2018-11-26T18:51:36Z,MERGED,True,25,15,2,https://github.com/Karsten1987,use uint8_t instead of char for serialized message,3,[],https://github.com/ros2/rmw/pull/161,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/161,connects to ros2/demos#279,connects to ros2/demos#279,True,{}
ros2/rmw,https://github.com/ros2/rmw,162,2018-12-20T21:15:47Z,2019-01-30T18:39:34Z,2019-01-30T18:40:25Z,MERGED,True,1,1,1,https://github.com/wjwwood,change parameter events to use KEEP_LAST,1,[],https://github.com/ros2/rmw/pull/162,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/162,"Fixes ros2/rclcpp#592
CI:

Linux 
Linux-aarch64 
macOS 
Windows","Fixes ros2/rclcpp#592
CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,162,2018-12-20T21:15:47Z,2019-01-30T18:39:34Z,2019-01-30T18:40:25Z,MERGED,True,1,1,1,https://github.com/wjwwood,change parameter events to use KEEP_LAST,1,[],https://github.com/ros2/rmw/pull/162,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/162#issuecomment-459059220,"Fixes ros2/rclcpp#592
CI:

Linux 
Linux-aarch64 
macOS 
Windows","Just as a note, this should not be selected for backport to the crystal branch.",True,{}
ros2/rmw,https://github.com/ros2/rmw,163,2019-01-10T10:02:49Z,2019-01-25T03:43:47Z,2019-01-25T03:44:50Z,MERGED,True,36,1,2,https://github.com/wjwwood,"pass context to wait set, and provide fini function for context",2,[],https://github.com/ros2/rmw/pull/163,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/163,"This is a follow up of #154.
This is not safe for inclusion in Crystal patch releases because it breaks API and adds to API, both of which would require all rmw implementations to be updated.","This is a follow up of #154.
This is not safe for inclusion in Crystal patch releases because it breaks API and adds to API, both of which would require all rmw implementations to be updated.",True,{}
ros2/rmw,https://github.com/ros2/rmw,163,2019-01-10T10:02:49Z,2019-01-25T03:43:47Z,2019-01-25T03:44:50Z,MERGED,True,36,1,2,https://github.com/wjwwood,"pass context to wait set, and provide fini function for context",2,[],https://github.com/ros2/rmw/pull/163,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/163#issuecomment-453171389,"This is a follow up of #154.
This is not safe for inclusion in Crystal patch releases because it breaks API and adds to API, both of which would require all rmw implementations to be updated.","Please create a stub page for Dashing in ros2_documentation and mention this RMW interface change there so that we keep track of such changes from the beginning.
Also @ros2/rmw_implementations FYI.",True,{}
ros2/rmw,https://github.com/ros2/rmw,163,2019-01-10T10:02:49Z,2019-01-25T03:43:47Z,2019-01-25T03:44:50Z,MERGED,True,36,1,2,https://github.com/wjwwood,"pass context to wait set, and provide fini function for context",2,[],https://github.com/ros2/rmw/pull/163,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/163#issuecomment-453202596,"This is a follow up of #154.
This is not safe for inclusion in Crystal patch releases because it breaks API and adds to API, both of which would require all rmw implementations to be updated.","CI:

Linux 
Linux OpenSplice+FastRTPS 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,163,2019-01-10T10:02:49Z,2019-01-25T03:43:47Z,2019-01-25T03:44:50Z,MERGED,True,36,1,2,https://github.com/wjwwood,"pass context to wait set, and provide fini function for context",2,[],https://github.com/ros2/rmw/pull/163,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/163#issuecomment-453262999,"This is a follow up of #154.
This is not safe for inclusion in Crystal patch releases because it breaks API and adds to API, both of which would require all rmw implementations to be updated.",See ros2/ros2_documentation#94 for documentation.,True,{}
ros2/rmw,https://github.com/ros2/rmw,163,2019-01-10T10:02:49Z,2019-01-25T03:43:47Z,2019-01-25T03:44:50Z,MERGED,True,36,1,2,https://github.com/wjwwood,"pass context to wait set, and provide fini function for context",2,[],https://github.com/ros2/rmw/pull/163,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/163#issuecomment-457400363,"This is a follow up of #154.
This is not safe for inclusion in Crystal patch releases because it breaks API and adds to API, both of which would require all rmw implementations to be updated.","CI:

Linux 
Linux OpenSplice+FastRTPS 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,164,2019-01-28T05:14:23Z,2019-01-28T15:50:00Z,2019-01-28T15:50:06Z,MERGED,True,1,1,1,https://github.com/lbegani,Fix typo error,1,[],https://github.com/ros2/rmw/pull/164,https://github.com/lbegani,1,https://github.com/ros2/rmw/pull/164,Minor typo error,Minor typo error,True,{}
ros2/rmw,https://github.com/ros2/rmw,164,2019-01-28T05:14:23Z,2019-01-28T15:50:00Z,2019-01-28T15:50:06Z,MERGED,True,1,1,1,https://github.com/lbegani,Fix typo error,1,[],https://github.com/ros2/rmw/pull/164,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/164#issuecomment-458157290,Minor typo error,"CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,165,2019-02-06T18:50:27Z,2019-02-06T23:31:31Z,2019-02-06T23:31:36Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,fix checking boolean variable which might contain a string,1,[],https://github.com/ros2/rmw/pull/165,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/165,Required for ament/ament_cmake#155.,Required for ament/ament_cmake#155.,True,{'THUMBS_UP': ['https://github.com/pbaughman']}
ros2/rmw,https://github.com/ros2/rmw,166,2019-02-08T18:28:44Z,2019-02-25T21:05:29Z,2019-04-22T19:16:43Z,CLOSED,False,1,1,1,https://github.com/nuclearsandwich,Backport #165 for Crystal.,1,[],https://github.com/ros2/rmw/pull/166,https://github.com/nuclearsandwich,1,https://github.com/ros2/rmw/pull/166,"Without backporting this change, Crystal's upstream development branches don't build since ament_cmake is still tracking master. If this change isn't compatible then we'll also need to branch ament_cmake.","Without backporting this change, Crystal's upstream development branches don't build since ament_cmake is still tracking master. If this change isn't compatible then we'll also need to branch ament_cmake.",True,{}
ros2/rmw,https://github.com/ros2/rmw,166,2019-02-08T18:28:44Z,2019-02-25T21:05:29Z,2019-04-22T19:16:43Z,CLOSED,False,1,1,1,https://github.com/nuclearsandwich,Backport #165 for Crystal.,1,[],https://github.com/ros2/rmw/pull/166,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/166#issuecomment-461907313,"Without backporting this change, Crystal's upstream development branches don't build since ament_cmake is still tracking master. If this change isn't compatible then we'll also need to branch ament_cmake.",I am not sure this is a good rational for doing backports. Nothing requires this change to be backported until the related ament_cmake change gets backported.,True,{}
ros2/rmw,https://github.com/ros2/rmw,166,2019-02-08T18:28:44Z,2019-02-25T21:05:29Z,2019-04-22T19:16:43Z,CLOSED,False,1,1,1,https://github.com/nuclearsandwich,Backport #165 for Crystal.,1,[],https://github.com/ros2/rmw/pull/166,https://github.com/nuclearsandwich,3,https://github.com/ros2/rmw/pull/166#issuecomment-461910781,"Without backporting this change, Crystal's upstream development branches don't build since ament_cmake is still tracking master. If this change isn't compatible then we'll also need to branch ament_cmake.","related ament_cmake change gets backported.

ament_cmake in Crystal is still using master for the development branch. While that change hasn't been released it's on crystal's development branch. The alternative to backporting this change is creating a crystal branch of ament_cmake which drops the fix from ament/ament_cmake#155",True,{}
ros2/rmw,https://github.com/ros2/rmw,166,2019-02-08T18:28:44Z,2019-02-25T21:05:29Z,2019-04-22T19:16:43Z,CLOSED,False,1,1,1,https://github.com/nuclearsandwich,Backport #165 for Crystal.,1,[],https://github.com/ros2/rmw/pull/166,https://github.com/dirk-thomas,4,https://github.com/ros2/rmw/pull/166#issuecomment-461963658,"Without backporting this change, Crystal's upstream development branches don't build since ament_cmake is still tracking master. If this change isn't compatible then we'll also need to branch ament_cmake.",Also the target branch being master doesn't make much sense here...,True,{'LAUGH': ['https://github.com/nuclearsandwich']}
ros2/rmw,https://github.com/ros2/rmw,166,2019-02-08T18:28:44Z,2019-02-25T21:05:29Z,2019-04-22T19:16:43Z,CLOSED,False,1,1,1,https://github.com/nuclearsandwich,Backport #165 for Crystal.,1,[],https://github.com/ros2/rmw/pull/166,https://github.com/nuclearsandwich,5,https://github.com/ros2/rmw/pull/166#issuecomment-467182678,"Without backporting this change, Crystal's upstream development branches don't build since ament_cmake is still tracking master. If this change isn't compatible then we'll also need to branch ament_cmake.",Given that our backport strategy is now explicitly only when necessary. I'm closing this backport as abandoned.,True,{}
ros2/rmw,https://github.com/ros2/rmw,167,2019-03-08T22:34:54Z,2019-04-02T02:56:51Z,2019-04-02T02:56:55Z,CLOSED,False,303,0,6,https://github.com/mm318,"Implementation for Deadline, Liveliness, and Lifespan QoS",11,[],https://github.com/ros2/rmw/pull/167,https://github.com/mm318,1,https://github.com/ros2/rmw/pull/167,"Implementation for Deadline, Liveliness, and Lifespan QoS. The design is at ros2/design#212
This is currently a work in progress.","Implementation for Deadline, Liveliness, and Lifespan QoS. The design is at ros2/design#212
This is currently a work in progress.",True,{}
ros2/rmw,https://github.com/ros2/rmw,167,2019-03-08T22:34:54Z,2019-04-02T02:56:51Z,2019-04-02T02:56:55Z,CLOSED,False,303,0,6,https://github.com/mm318,"Implementation for Deadline, Liveliness, and Lifespan QoS",11,[],https://github.com/ros2/rmw/pull/167,https://github.com/thomas-moulard,2,https://github.com/ros2/rmw/pull/167#issuecomment-473116703,"Implementation for Deadline, Liveliness, and Lifespan QoS. The design is at ros2/design#212
This is currently a work in progress.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,167,2019-03-08T22:34:54Z,2019-04-02T02:56:51Z,2019-04-02T02:56:55Z,CLOSED,False,303,0,6,https://github.com/mm318,"Implementation for Deadline, Liveliness, and Lifespan QoS",11,[],https://github.com/ros2/rmw/pull/167,https://github.com/thomas-moulard,3,https://github.com/ros2/rmw/pull/167#issuecomment-473987988,"Implementation for Deadline, Liveliness, and Lifespan QoS. The design is at ros2/design#212
This is currently a work in progress.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,167,2019-03-08T22:34:54Z,2019-04-02T02:56:51Z,2019-04-02T02:56:55Z,CLOSED,False,303,0,6,https://github.com/mm318,"Implementation for Deadline, Liveliness, and Lifespan QoS",11,[],https://github.com/ros2/rmw/pull/167,https://github.com/mm318,4,https://github.com/ros2/rmw/pull/167#issuecomment-478824343,"Implementation for Deadline, Liveliness, and Lifespan QoS. The design is at ros2/design#212
This is currently a work in progress.",Closing this pull request in favor of #171.,True,{}
ros2/rmw,https://github.com/ros2/rmw,168,2019-03-15T17:14:04Z,2019-03-15T17:16:30Z,2019-03-15T17:18:00Z,CLOSED,False,334,0,5,https://github.com/dabonnie,Rmw events,5,[],https://github.com/ros2/rmw/pull/168,https://github.com/dabonnie,1,https://github.com/ros2/rmw/pull/168,"Initial commit with the RMW QoS structs defined. I have a few questions that require changes in the code:

how should we propagate the non-pimitive types? void * could work, but this puts the burden of discovery upon the user based on RMW implementation
are the struct definitions suffcient? should they contain a field with a common struct containing the rmw_event_type_t?
which rmw_ret_t corresponds to each rmw_event_type_t?","Initial commit with the RMW QoS structs defined. I have a few questions that require changes in the code:

how should we propagate the non-pimitive types? void * could work, but this puts the burden of discovery upon the user based on RMW implementation
are the struct definitions suffcient? should they contain a field with a common struct containing the rmw_event_type_t?
which rmw_ret_t corresponds to each rmw_event_type_t?",True,{}
ros2/rmw,https://github.com/ros2/rmw,168,2019-03-15T17:14:04Z,2019-03-15T17:16:30Z,2019-03-15T17:18:00Z,CLOSED,False,334,0,5,https://github.com/dabonnie,Rmw events,5,[],https://github.com/ros2/rmw/pull/168,https://github.com/dabonnie,2,https://github.com/ros2/rmw/pull/168#issuecomment-473371575,"Initial commit with the RMW QoS structs defined. I have a few questions that require changes in the code:

how should we propagate the non-pimitive types? void * could work, but this puts the burden of discovery upon the user based on RMW implementation
are the struct definitions suffcient? should they contain a field with a common struct containing the rmw_event_type_t?
which rmw_ret_t corresponds to each rmw_event_type_t?",Closing and deleted as created a PR against the wrong repo. My mistake.,True,{}
ros2/rmw,https://github.com/ros2/rmw,169,2019-03-25T14:05:35Z,2019-04-01T20:54:02Z,2019-04-01T20:54:19Z,MERGED,True,32,3,2,https://github.com/ivanpauno,Add function to get publisher actual qos settings,2,[],https://github.com/ros2/rmw/pull/169,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/169,"Added rmw_publisher_get_actual_qos function.
This function was proposed in the discussion here: ros2/rclcpp#664 (comment).
I will complete the implementation of the api, following these steps:

Open a PR in rmw_implementation to expose the api
Open a PR in rmw_fastrtps to implement the api. It will call the appropriate fast_rtps method and translate from the FastRTPS QoS structure to the rmw QoS structure.
Open a PR in rcl proposing an equivalent api and implement it.
Open a PR in rclcpp proposing an equivalent api and implement it.
Use the rclcpp api in ros2/rclcpp#664 to solve the TODO.
Open PRs in rmw_connext and rmw_opensplice to implement the api for them.","Added rmw_publisher_get_actual_qos function.
This function was proposed in the discussion here: ros2/rclcpp#664 (comment).
I will complete the implementation of the api, following these steps:

Open a PR in rmw_implementation to expose the api
Open a PR in rmw_fastrtps to implement the api. It will call the appropriate fast_rtps method and translate from the FastRTPS QoS structure to the rmw QoS structure.
Open a PR in rcl proposing an equivalent api and implement it.
Open a PR in rclcpp proposing an equivalent api and implement it.
Use the rclcpp api in ros2/rclcpp#664 to solve the TODO.
Open PRs in rmw_connext and rmw_opensplice to implement the api for them.",True,{}
ros2/rmw,https://github.com/ros2/rmw,169,2019-03-25T14:05:35Z,2019-04-01T20:54:02Z,2019-04-01T20:54:19Z,MERGED,True,32,3,2,https://github.com/ivanpauno,Add function to get publisher actual qos settings,2,[],https://github.com/ros2/rmw/pull/169,https://github.com/ivanpauno,2,https://github.com/ros2/rmw/pull/169#issuecomment-477681162,"Added rmw_publisher_get_actual_qos function.
This function was proposed in the discussion here: ros2/rclcpp#664 (comment).
I will complete the implementation of the api, following these steps:

Open a PR in rmw_implementation to expose the api
Open a PR in rmw_fastrtps to implement the api. It will call the appropriate fast_rtps method and translate from the FastRTPS QoS structure to the rmw QoS structure.
Open a PR in rcl proposing an equivalent api and implement it.
Open a PR in rclcpp proposing an equivalent api and implement it.
Use the rclcpp api in ros2/rclcpp#664 to solve the TODO.
Open PRs in rmw_connext and rmw_opensplice to implement the api for them.","@mjcarroll @wjwwood All comments have already been solved here. Could you check it again?
Also, RMW_QOS_POLICY_*_UNKNOWN option was added to some enums, as requested here ros2/rmw_fastrtps#267 (comment).",True,{}
ros2/rmw,https://github.com/ros2/rmw,169,2019-03-25T14:05:35Z,2019-04-01T20:54:02Z,2019-04-01T20:54:19Z,MERGED,True,32,3,2,https://github.com/ivanpauno,Add function to get publisher actual qos settings,2,[],https://github.com/ros2/rmw/pull/169,https://github.com/ivanpauno,3,https://github.com/ros2/rmw/pull/169#issuecomment-478044852,"Added rmw_publisher_get_actual_qos function.
This function was proposed in the discussion here: ros2/rclcpp#664 (comment).
I will complete the implementation of the api, following these steps:

Open a PR in rmw_implementation to expose the api
Open a PR in rmw_fastrtps to implement the api. It will call the appropriate fast_rtps method and translate from the FastRTPS QoS structure to the rmw QoS structure.
Open a PR in rcl proposing an equivalent api and implement it.
Open a PR in rclcpp proposing an equivalent api and implement it.
Use the rclcpp api in ros2/rclcpp#664 to solve the TODO.
Open PRs in rmw_connext and rmw_opensplice to implement the api for them.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,169,2019-03-25T14:05:35Z,2019-04-01T20:54:02Z,2019-04-01T20:54:19Z,MERGED,True,32,3,2,https://github.com/ivanpauno,Add function to get publisher actual qos settings,2,[],https://github.com/ros2/rmw/pull/169,https://github.com/ivanpauno,4,https://github.com/ros2/rmw/pull/169#issuecomment-478665073,"Added rmw_publisher_get_actual_qos function.
This function was proposed in the discussion here: ros2/rclcpp#664 (comment).
I will complete the implementation of the api, following these steps:

Open a PR in rmw_implementation to expose the api
Open a PR in rmw_fastrtps to implement the api. It will call the appropriate fast_rtps method and translate from the FastRTPS QoS structure to the rmw QoS structure.
Open a PR in rcl proposing an equivalent api and implement it.
Open a PR in rclcpp proposing an equivalent api and implement it.
Use the rclcpp api in ros2/rclcpp#664 to solve the TODO.
Open PRs in rmw_connext and rmw_opensplice to implement the api for them.","CI again:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,170,2019-03-26T01:12:07Z,2019-05-04T01:01:57Z,2019-05-10T00:13:24Z,CLOSED,False,47,17,2,https://github.com/jacobperron,Update names and types struct,1,[],https://github.com/ros2/rmw/pull/170,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/170,"This change enables storing a fully qualified type name as a tuple, rather than a single string.
E.g. [""pkg_name"", ""msg"", ""TypeName""] vs. ""pkg_name/msg/TypeName"".
This should help avoid duplicate string splitting logic in client libraries.
Each element of the outer array represents a list (rcutils_array_list_t) of types for the associated name.
Each element of the array list is a string array (rcutils_string_array_t) that is the fully qualified type name tuple.
Connects to ros2/ros2#677","This change enables storing a fully qualified type name as a tuple, rather than a single string.
E.g. [""pkg_name"", ""msg"", ""TypeName""] vs. ""pkg_name/msg/TypeName"".
This should help avoid duplicate string splitting logic in client libraries.
Each element of the outer array represents a list (rcutils_array_list_t) of types for the associated name.
Each element of the array list is a string array (rcutils_string_array_t) that is the fully qualified type name tuple.
Connects to ros2/ros2#677",True,{}
ros2/rmw,https://github.com/ros2/rmw,170,2019-03-26T01:12:07Z,2019-05-04T01:01:57Z,2019-05-10T00:13:24Z,CLOSED,False,47,17,2,https://github.com/jacobperron,Update names and types struct,1,[],https://github.com/ros2/rmw/pull/170,https://github.com/jacobperron,2,https://github.com/ros2/rmw/pull/170#issuecomment-489280157,"This change enables storing a fully qualified type name as a tuple, rather than a single string.
E.g. [""pkg_name"", ""msg"", ""TypeName""] vs. ""pkg_name/msg/TypeName"".
This should help avoid duplicate string splitting logic in client libraries.
Each element of the outer array represents a list (rcutils_array_list_t) of types for the associated name.
Each element of the array list is a string array (rcutils_string_array_t) that is the fully qualified type name tuple.
Connects to ros2/ros2#677",Decided to return a delimited string rather than returning a nested list to keep the API simpler.,True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/ross-desmond,1,https://github.com/ros2/rmw/pull/171,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/dabonnie,2,https://github.com/ros2/rmw/pull/171#issuecomment-479133529,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",@wjwwood I believe we have addressed all of your comments. Please let us know if there is anything else outstanding given the latest changes.,True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/171#issuecomment-479616924,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",This branch has conflicts and cannot be merged.,True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/nburek,4,https://github.com/ros2/rmw/pull/171#issuecomment-480054551,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",@wjwwood We've rebased off of ros2:master and the review should now show only our commits and the changes that we've made.,True,{'THUMBS_UP': ['https://github.com/wjwwood']}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/dabonnie,5,https://github.com/ros2/rmw/pull/171#issuecomment-482671618,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",@wjwwood any other comments?,True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,6,https://github.com/ros2/rmw/pull/171#issuecomment-483573552,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","@thomas-moulard - please run the following CI job:

Gist file: https://gist.githubusercontent.com/mm318/0d91121d2e6423f08c8d4dce92f773d5/raw/c61a964afcfd6129f95edf1e5f592fc57d6da433/ros2.repos
Additional BUILD flags: --packages-up-to demo_nodes_cpp
Additional TEST flags: --packages-up-to demo_nodes_cpp
CI Job: ci_launcher",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/thomas-moulard,7,https://github.com/ros2/rmw/pull/171#issuecomment-483713885,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,8,https://github.com/ros2/rmw/pull/171#issuecomment-483876713,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Hi @thomas-moulard, I have made some fixes for the Windows build. Can you please re-run the CI? Thanks.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/thomas-moulard,9,https://github.com/ros2/rmw/pull/171#issuecomment-483887913,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/thomas-moulard,10,https://github.com/ros2/rmw/pull/171#issuecomment-483887995,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","In case anyone else wonders, Window fixes are in other PRs which is why it does not appear there.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,11,https://github.com/ros2/rmw/pull/171#issuecomment-488424152,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","@thomas-moulard - please run the following CI job:

Gist file: https://gist.githubusercontent.com/mm318/b45e2e38404c8e5ae3c3dc00cdb72b3d/raw/3a3a7a21b81c85ac36ea0ff3607d107784a68d15/ros2.repos
Additional BUILD flags: --packages-up-to demo_nodes_cpp
Additional TEST flags: --packages-up-to demo_nodes_cpp
CI Job: ci_launcher",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/thomas-moulard,12,https://github.com/ros2/rmw/pull/171#issuecomment-488443045,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/thomas-moulard,13,https://github.com/ros2/rmw/pull/171#issuecomment-488768971,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,14,https://github.com/ros2/rmw/pull/171#issuecomment-488783446,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","@thomas-moulard - please run the following CI job:

Gist file: https://gist.githubusercontent.com/mm318/582ceeae9b2d2efc4c48bfa7c2b98f12/raw/cc86a231fd3f6c20c03e576290a1968fa97ef6c8/ros2.repos
Additional BUILD flags: --packages-up-to demo_nodes_cpp
Additional TEST flags: --packages-up-to demo_nodes_cpp
CI Job: ci_launcher",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/thomas-moulard,15,https://github.com/ros2/rmw/pull/171#issuecomment-488784894,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,16,https://github.com/ros2/rmw/pull/171#issuecomment-488848731,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Let me know if I can help. Sorry about the last minute collisions, I know they're a pain.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/emersonknapp,17,https://github.com/ros2/rmw/pull/171#issuecomment-488852542,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",Thanks @wjwwood - we're running through it and will let you know - most of the rebases have been fairly straightforward but a few things are throwing us for a loop - hopefully have a good build ready to go soon,True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/thomas-moulard,18,https://github.com/ros2/rmw/pull/171#issuecomment-488853205,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,19,https://github.com/ros2/rmw/pull/171#issuecomment-488855130,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",Windows,True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/thomas-moulard,20,https://github.com/ros2/rmw/pull/171#issuecomment-488871259,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,21,https://github.com/ros2/rmw/pull/171#issuecomment-488881147,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","HI @wjwwood and @sloretz, can this be merged now based on the #171 (comment) CI run? We will have quick follow up to fix the warnings.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,22,https://github.com/ros2/rmw/pull/171#issuecomment-488904966,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","CI with (https://gist.githubusercontent.com/mm318/582ceeae9b2d2efc4c48bfa7c2b98f12/raw/cc86a231fd3f6c20c03e576290a1968fa97ef6c8/ros2.repos and --packages-up-to rcl and --packages-select rcl for testing):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,23,https://github.com/ros2/rmw/pull/171#issuecomment-488918280,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","We're investigating the test failure on macOS, but they look like flaky (new) tests.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/rutvih,24,https://github.com/ros2/rmw/pull/171#issuecomment-488919424,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",@wjwwood what are your thoughts on disabling failing tests for now and our team submitting a separate PR for the fix so we can get this merged?,True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,25,https://github.com/ros2/rmw/pull/171#issuecomment-488921950,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","@rutvih I think we're going to do that, I just started a macOS only job to see if that works:",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,26,https://github.com/ros2/rmw/pull/171#issuecomment-488928189,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Ok, here's full CI:

Linux 
Linux-aarch64 
macOS 
Windows 

EDIT: The macOS and Windows jobs got disconnected and re-queued due to the router reboot...
I'll merge if it is green 🎉.
@mm318 can you open an issue about fixing that test we disabled, just so we don't loose track of it.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,27,https://github.com/ros2/rmw/pull/171#issuecomment-488928547,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","@mm318 can you open an issue about fixing that test we disabled, just so we don't loose track of it.

Sure, will do.
EDIT: Tracked at ros2/rcl#431",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/dirk-thomas,28,https://github.com/ros2/rmw/pull/171#issuecomment-488937066,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","We're investigating the test failure on macOS, but they look like flaky (new) tests.

How exactly is the failing test flaky? The tests were run with --retest-until-pass 10 and the error output contains:
> failed to resolve symbol 'rmw_get_serialized_message_size' in shared library

which doesn't sound flaky to me. Does it work for people in local testing?
I am fine disabling the new test for now - I would just like to be clear about why / how.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,29,https://github.com/ros2/rmw/pull/171#issuecomment-488939937,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","That error output is unrelated to the test failures. rmw_fastrtps_cpp, rmw_fastrtps_dynamic_cpp, and rmw_opensplice_cpp all have rmw_get_serialized_message_size implemented, but rmw_connext_cpp/rmw_connext_shared_cpp does not (and implementing it is not supposed to be part of this set of PRs).
The test is flaky because it passes 90% of the time on @wjwwood's macOS laptop and actually only the RTI Connext version of the test kept failing on the buildfarm while the OpenSplice version did not.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,30,https://github.com/ros2/rmw/pull/171#issuecomment-488940807,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Does it work for people in local testing?

Yes, for what ever reason that message only prints when it fails. I think it might be cached when they are pre-fetched, and only prints when the test fails.
That symbol was added in https://github.com/ros2/rmw_implementation/pull/51/files#diff-0e10897bf5aa86e527bbfbb0e10759e9R299 and not in rmw_connext's pr (https://github.com/ros2/rmw_connext/pull/353/files).",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,31,https://github.com/ros2/rmw/pull/171#issuecomment-488941783,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",@mjcarroll fyi,True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,32,https://github.com/ros2/rmw/pull/171#issuecomment-488964110,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Unfortunately the linters are now failing, at some point, around 4 hours ago, code was pushed to the rmw connext branch and it has a line that's too long, see: ros2/rmw_connext#352 (comment)
I cannot get this retested before nightlies start, so we'll have to re-evaluate in the morning.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,33,https://github.com/ros2/rmw/pull/171#issuecomment-488970925,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",@wjwwood Would you be able to kick off CI to run overnight?,True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/tfoote,34,https://github.com/ros2/rmw/pull/171#issuecomment-488986702,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","Here's a retrigger of the builds

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/emersonknapp,35,https://github.com/ros2/rmw/pull/171#issuecomment-489157670,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","@tfoote I'm a bit confused about what we're seeing there - the linux aarch64 one is one that I've seen periodically that seems like it's a buildfarm quirk
projectroot.test_params_yaml
test_cli.test_params_yaml.xunit.missing_result

and the windows has a bunch of test failures for the CLI, which also seems unrelated to what we've done here - considering the previous builds did pass those tests?",True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,36,https://github.com/ros2/rmw/pull/171#issuecomment-489161033,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",@wjwwood @sloretz Can we merge this based on these results? #171 (comment),True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/clalancette,37,https://github.com/ros2/rmw/pull/171#issuecomment-489162570,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173","projectroot.test_params_yaml
test_cli.test_params_yaml.xunit.missing_result

This one is actually a bug, but a long running, known bug: ros2/build_farmer#166 .  So you can safely ignore that one.",True,{}
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/wjwwood,38,https://github.com/ros2/rmw/pull/171#issuecomment-489171811,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",We've decided to merge after looking at the CI manually. 👍,True,"{'HEART': ['https://github.com/mm318'], 'HOORAY': ['https://github.com/rutvih']}"
ros2/rmw,https://github.com/ros2/rmw,171,2019-03-29T17:30:28Z,2019-05-03T17:17:35Z,2019-05-03T17:18:45Z,MERGED,True,277,0,5,https://github.com/ross-desmond,"Implement QoS: liveliness, deadline, lifespan",30,[],https://github.com/ros2/rmw/pull/171,https://github.com/mm318,39,https://github.com/ros2/rmw/pull/171#issuecomment-489172613,"Summary
Provide init/fini and take functions for events. Modify wait_set to include event handles for notification of status changes.
Details:

ADD initial qos interface changes
ADD rmw take_event interface
ADD rmw event type enum
MODIFY events type from void** to rmw_event_t**
ADD RMW QoS Event Definitions
ADD section about DCO to CONTRIBUTING.md
EDIT liveliness policy types to reflect actual settings
ADD an invalid enum in rmw_event_type_t for variables to default to
MOVE rmw_*_event_init implementation to rmw
** Event initialization should require no modifications from the underlying rmw layer and therefore can be initialized in the rmw layer.

Signed-off-by: Ross Desmond 44277324+ross-desmond@users.noreply.github.com
Depends on #173",Awesome! Thank you!,True,{}
ros2/rmw,https://github.com/ros2/rmw,173,2019-04-12T00:04:34Z,2019-04-16T00:43:39Z,2019-04-16T00:43:43Z,MERGED,True,119,2,3,https://github.com/mm318,Add new QoS policy data types to rmw,3,[],https://github.com/ros2/rmw/pull/173,https://github.com/mm318,1,https://github.com/ros2/rmw/pull/173,"Adds more fields to the rmw_qos_profile_t struct to specify liveliness, deadline, and lifespan QoS policies.
Also, adds new structs for conveying liveliness and deadline QoS statuses.
These changes are required for implementing the upcoming QoS features.","Adds more fields to the rmw_qos_profile_t struct to specify liveliness, deadline, and lifespan QoS policies.
Also, adds new structs for conveying liveliness and deadline QoS statuses.
These changes are required for implementing the upcoming QoS features.",True,{}
ros2/rmw,https://github.com/ros2/rmw,173,2019-04-12T00:04:34Z,2019-04-16T00:43:39Z,2019-04-16T00:43:43Z,MERGED,True,119,2,3,https://github.com/mm318,Add new QoS policy data types to rmw,3,[],https://github.com/ros2/rmw/pull/173,https://github.com/mm318,2,https://github.com/ros2/rmw/pull/173#issuecomment-482768013,"Adds more fields to the rmw_qos_profile_t struct to specify liveliness, deadline, and lifespan QoS policies.
Also, adds new structs for conveying liveliness and deadline QoS statuses.
These changes are required for implementing the upcoming QoS features.","@thomas-moulard - please run the following CI job:

Gist file: https://gist.githubusercontent.com/mm318/6a515aab086c1f3e11f4a0447a417636/raw/6f01a663cbd0ad25c3d39658dcd2a9b6d11b99dd/ros2.repos
Additional BUILD flags: N/A
Additional TEST flags: N/A
CI Job: ci_launcher",True,{}
ros2/rmw,https://github.com/ros2/rmw,173,2019-04-12T00:04:34Z,2019-04-16T00:43:39Z,2019-04-16T00:43:43Z,MERGED,True,119,2,3,https://github.com/mm318,Add new QoS policy data types to rmw,3,[],https://github.com/ros2/rmw/pull/173,https://github.com/thomas-moulard,3,https://github.com/ros2/rmw/pull/173#issuecomment-482768725,"Adds more fields to the rmw_qos_profile_t struct to specify liveliness, deadline, and lifespan QoS policies.
Also, adds new structs for conveying liveliness and deadline QoS statuses.
These changes are required for implementing the upcoming QoS features.","Linux 
Linux-aarch64 
macOS 
Windows",True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rmw,https://github.com/ros2/rmw,173,2019-04-12T00:04:34Z,2019-04-16T00:43:39Z,2019-04-16T00:43:43Z,MERGED,True,119,2,3,https://github.com/mm318,Add new QoS policy data types to rmw,3,[],https://github.com/ros2/rmw/pull/173,https://github.com/mm318,4,https://github.com/ros2/rmw/pull/173#issuecomment-482833318,"Adds more fields to the rmw_qos_profile_t struct to specify liveliness, deadline, and lifespan QoS policies.
Also, adds new structs for conveying liveliness and deadline QoS statuses.
These changes are required for implementing the upcoming QoS features.",Just realized that I needed to rebase since ros2/rclcpp#673 was merged.,True,{}
ros2/rmw,https://github.com/ros2/rmw,173,2019-04-12T00:04:34Z,2019-04-16T00:43:39Z,2019-04-16T00:43:43Z,MERGED,True,119,2,3,https://github.com/mm318,Add new QoS policy data types to rmw,3,[],https://github.com/ros2/rmw/pull/173,https://github.com/mm318,5,https://github.com/ros2/rmw/pull/173#issuecomment-483335494,"Adds more fields to the rmw_qos_profile_t struct to specify liveliness, deadline, and lifespan QoS policies.
Also, adds new structs for conveying liveliness and deadline QoS statuses.
These changes are required for implementing the upcoming QoS features.","Hi @wjwwood, this PR is ready for review. It and its associated PRs make no functional changes.",True,{}
ros2/rmw,https://github.com/ros2/rmw,173,2019-04-12T00:04:34Z,2019-04-16T00:43:39Z,2019-04-16T00:43:43Z,MERGED,True,119,2,3,https://github.com/mm318,Add new QoS policy data types to rmw,3,[],https://github.com/ros2/rmw/pull/173,https://github.com/mm318,6,https://github.com/ros2/rmw/pull/173#issuecomment-483411598,"Adds more fields to the rmw_qos_profile_t struct to specify liveliness, deadline, and lifespan QoS policies.
Also, adds new structs for conveying liveliness and deadline QoS statuses.
These changes are required for implementing the upcoming QoS features.","Hi @wjwwood, this PR should be prioritized. It (and its connected PRs) should be the next QoS-related PR to be merged in, even before #171 (and its connected PRs).",True,{}
ros2/rmw,https://github.com/ros2/rmw,173,2019-04-12T00:04:34Z,2019-04-16T00:43:39Z,2019-04-16T00:43:43Z,MERGED,True,119,2,3,https://github.com/mm318,Add new QoS policy data types to rmw,3,[],https://github.com/ros2/rmw/pull/173,https://github.com/thomas-moulard,7,https://github.com/ros2/rmw/pull/173#issuecomment-483413184,"Adds more fields to the rmw_qos_profile_t struct to specify liveliness, deadline, and lifespan QoS policies.
Also, adds new structs for conveying liveliness and deadline QoS statuses.
These changes are required for implementing the upcoming QoS features.","Re-running CI now that the PR is rebased.

Linux 
Linux-aarch64 
macOS 
Windows",True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rmw,https://github.com/ros2/rmw,173,2019-04-12T00:04:34Z,2019-04-16T00:43:39Z,2019-04-16T00:43:43Z,MERGED,True,119,2,3,https://github.com/mm318,Add new QoS policy data types to rmw,3,[],https://github.com/ros2/rmw/pull/173,https://github.com/mm318,8,https://github.com/ros2/rmw/pull/173#issuecomment-483468755,"Adds more fields to the rmw_qos_profile_t struct to specify liveliness, deadline, and lifespan QoS policies.
Also, adds new structs for conveying liveliness and deadline QoS statuses.
These changes are required for implementing the upcoming QoS features.",Should be ready to be merged. Thanks!,True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/mm318,1,https://github.com/ros2/rmw/pull/175,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/mm318,2,https://github.com/ros2/rmw/pull/175#issuecomment-498396379,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","@thomas-moulard - please run the following CI job:

Gist file: https://gist.githubusercontent.com/mm318/ecabe573be68dc288bdd6ac25b6673f2/raw/d7cf86c904dc16eeb73420a51d59ea5548c4605f/ros2.repos
Additional BUILD flags: --packages-up-to rcl
Additional TEST flags: --packages-up-to rcl
CI Job: ci_launcher",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/thomas-moulard,3,https://github.com/ros2/rmw/pull/175#issuecomment-498470766,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/mm318,4,https://github.com/ros2/rmw/pull/175#issuecomment-498493997,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","Hi @thomas-moulard, can you please rerun the CI again? Thanks!",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/thomas-moulard,5,https://github.com/ros2/rmw/pull/175#issuecomment-498496634,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/mm318,6,https://github.com/ros2/rmw/pull/175#issuecomment-498775016,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","Hi @thomas-moulard, can you please rerun the CI again with OpenSplice enabled? Thanks!
EDIT: Also, please run up to rclcpp, not just rcl.",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/jacobperron,7,https://github.com/ros2/rmw/pull/175#issuecomment-498777761,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","I would feel better if we ran CI up to rclcpp too, since it also makes use of the get_actual_qos function.",True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/mm318,8,https://github.com/ros2/rmw/pull/175#issuecomment-499653475,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","@thomas-moulard - please run the following CI job:

Gist file: https://gist.githubusercontent.com/mm318/ecabe573be68dc288bdd6ac25b6673f2/raw/d7cf86c904dc16eeb73420a51d59ea5548c4605f/ros2.repos
Additional BUILD flags: --packages-up-to rclcpp
Additional TEST flags: --packages-up-to rclcpp
CI Job: ci_launcher

Please also enable the use of OpenSplice.",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/thomas-moulard,9,https://github.com/ros2/rmw/pull/175#issuecomment-499663932,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","Linux 
Linux-aarch64 
macOS 
Windows 

Edit (jacobperron): Retriggered with OpenSplice.",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/mm318,10,https://github.com/ros2/rmw/pull/175#issuecomment-499690498,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","Hi @jacobperron, can you take a look at the CI results? I think the test failures on Windows are not related to the PRs.",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/jacobperron,11,https://github.com/ros2/rmw/pull/175#issuecomment-499697493,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().","I haven't seen those failures before, but they do look unrelated. I've triggered a CI job against master with the same configuration to see if it can be reproduced:",True,{}
ros2/rmw,https://github.com/ros2/rmw,175,2019-06-03T19:23:47Z,2019-06-06T23:48:03Z,2019-06-06T23:48:04Z,MERGED,True,2,1,1,https://github.com/mm318,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum,1,[],https://github.com/ros2/rmw/pull/175,https://github.com/jacobperron,12,https://github.com/ros2/rmw/pull/175#issuecomment-499698696,"This changes adds another rmw_qos_liveliness_policy_t enum, one indicating that the liveliness policy is unknown, for use by get_actual_qos().",The line that is failing was introduced in ros2/launch#255.,True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/mm318,1,https://github.com/ros2/rmw/pull/177,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/mm318,2,https://github.com/ros2/rmw/pull/177#issuecomment-499760394,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","@emersonknapp - please run the following CI job:

Gist file: https://gist.githubusercontent.com/mm318/c119e49fca046fce6a3ec74552ac91a3/raw/a621734acbed40a8d21fcfb0b6357f068370a624/ros2.repos
Additional BUILD flags: --packages-up-to rclcpp
Additional TEST flags: --packages-up-to rclcpp
CI Job: ci_launcher

Please also enable the use of OpenSplice.",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/emersonknapp,3,https://github.com/ros2/rmw/pull/177#issuecomment-499989945,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/mm318,4,https://github.com/ros2/rmw/pull/177#issuecomment-500231281,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","Hi @emersonknapp, can you please re-run the CI when you get a chance? Thanks!",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/mm318,5,https://github.com/ros2/rmw/pull/177#issuecomment-500601291,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","Hi @ivanpauno, it looks like we don't have anybody on our side today who can start a CI run for us. Can you please kick off a CI run for this PR? Thanks!",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/ivanpauno,6,https://github.com/ros2/rmw/pull/177#issuecomment-500824589,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/ivanpauno,7,https://github.com/ros2/rmw/pull/177#issuecomment-500884465,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","rmw_connext is failing to build because of a visibility problem (fastrtps and opensplice were built ok).
The error is:
09:51:07      Creating library C:/J/workspace/ci_windows/ws/build/rmw_connext_cpp/Release/rmw_connext_cpp.lib and object C:/J/workspace/ci_windows/ws/build/rmw_connext_cpp/Release/rmw_connext_cpp.exp
09:51:07 rmw_publisher.obj : error LNK2019: unresolved external symbol ""void __cdecl dds_qos_to_rmw_qos<struct DDS_DataWriterQos>(struct DDS_DataWriterQos const &,struct rmw_qos_profile_t *)"" (??$dds_qos_to_rmw_qos@UDDS_DataWriterQos@@@@YAXAEBUDDS_DataWriterQos@@PEAUrmw_qos_profile_t@@@Z) referenced in function rmw_publisher_get_actual_qos [C:\J\workspace\ci_windows\ws\build\rmw_connext_cpp\rmw_connext_cpp.vcxproj]
09:51:07 rmw_subscription.obj : error LNK2019: unresolved external symbol ""void __cdecl dds_qos_to_rmw_qos<struct DDS_DataReaderQos>(struct DDS_DataReaderQos const &,struct rmw_qos_profile_t *)"" (??$dds_qos_to_rmw_qos@UDDS_DataReaderQos@@@@YAXAEBUDDS_DataReaderQos@@PEAUrmw_qos_profile_t@@@Z) referenced in function rmw_subscription_get_actual_qos [C:\J\workspace\ci_windows\ws\build\rmw_connext_cpp\rmw_connext_cpp.vcxproj]
09:51:07 C:\J\workspace\ci_windows\ws\build\rmw_connext_cpp\Release\rmw_connext_cpp.dll : fatal error LNK1120: 2 unresolved externals [C:\J\workspace\ci_windows\ws\build\rmw_connext_cpp\rmw_connext_cpp.vcxproj]

I guess that when you explicitly specialize a template you have to use the visibility macros (RMW_CONNEXT_SHARED_CPP_PUBLIC in this case):
https://github.com/aws-ros-dev/rmw_connext/blob/2fc13d6968d85160dd4568c0da1ecb9c8e8a607b/rmw_connext_shared_cpp/src/qos.cpp#L309-L315
I'm not pretty sure if that will solve the problem.
In opensplice the problem didn't appear, because the function was part of the same library.
PS: If you don't have a windows environment available, let me know and I will try to solve the problem.",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/ivanpauno,8,https://github.com/ros2/rmw/pull/177#issuecomment-501000847,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","I tested it on windows, the correct way of doing it is:
template RMW_CONNEXT_SHARED_CPP_PUBLIC
void dds_qos_to_rmw_qos<DDS::DataWriterQos>(
  const DDS::DataWriterQos & dds_qos,
  rmw_qos_profile_t * qos);
The visibility macro has to be after the template keyword (see this).
Note: rmw_fastrtps_shared_cpp is built as an static library, so the problem didn't appear there. rmw_connext_shared_cpp is built as a shared library.",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/mm318,9,https://github.com/ros2/rmw/pull/177#issuecomment-501010373,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754",So RMW_CONNEXT_SHARED_CPP_PUBLIC needs to go in the .cpp file as opposed to the .hpp file? I think I'll put it in the .hpp file as well to be consistent with the rest of the other function declarations.,True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/ivanpauno,10,https://github.com/ros2/rmw/pull/177#issuecomment-501014766,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","So RMW_CONNEXT_SHARED_CPP_PUBLIC needs to go in the .cpp file as opposed to the .hpp file? I think I'll put it in the .hpp file as well to be consistent with the rest of the other function declarations.

I think that visibility macros can only by used in the template specializations (and not in the template itself). And the template specialization should stay in the cpp file. I don't know if a workaround is possible.",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/mm318,11,https://github.com/ros2/rmw/pull/177#issuecomment-501016563,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","Putting the visibility macro on the explicit template instantiation seemed to have solved the linker error. Thank you!
Putting the visibility macro on the template declaration in the .hpp file didn't seem to hurt either, no errors or warnings. Is it okay to keep it there?",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/ivanpauno,12,https://github.com/ros2/rmw/pull/177#issuecomment-501022076,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","Putting the visibility macro on the explicit template instantiation seemed to have solved the linker error. Thank you!
Putting the visibility macro on the template declaration in the .hpp file didn't seem to hurt either, no errors or warnings. Is it okay to keep it there?

If it doesn't do nothing, I prefer not adding it.
The example 2 of the link I posted before is a good alternative. Add the following to the .hpp:
extern template RMW_CONNEXT_SHARED_CPP_PUBLIC
void dds_qos_to_rmw_qos<DDS::DataWriterQos>(
  const DDS::DataWriterQos & dds_qos,
  rmw_qos_profile_t * qos);

extern template RMW_CONNEXT_SHARED_CPP_PUBLIC
void dds_qos_to_rmw_qos<DDS::DataReaderQos>(
  const DDS::DataReaderQos & dds_qos,
  rmw_qos_profile_t * qos);
That's more explicit, as you know what template specializations are available, and the visibility macro is only needed in the header.
Edit: The Example 2 wasn't exactly that. I tested it, and it works.",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/mm318,13,https://github.com/ros2/rmw/pull/177#issuecomment-501031670,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","@ivanpauno, I've updated the other pull requests with your suggestion. Can you please kick off a CI run again? Thanks!",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/ivanpauno,14,https://github.com/ros2/rmw/pull/177#issuecomment-501261185,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,177,2019-06-07T05:06:19Z,2019-06-12T15:50:56Z,2019-06-12T16:18:46Z,MERGED,True,26,0,1,https://github.com/mm318,Add get_actual_qos() for subscriptions,1,[],https://github.com/ros2/rmw/pull/177,https://github.com/mm318,15,https://github.com/ros2/rmw/pull/177#issuecomment-501347819,"Currently, publishers have the get_actual_qos() feature/function. It would make sense for subscriptions to have them, too.
Depends on ros2/rmw_implementation#61
Depends on ros2/rmw_fastrtps#287
Depends on ros2/rmw_connext#358
Depends on ros2/rmw_opensplice#271
Blocks ros2/rcl#455
Blocks ros2/rclcpp#754",Thanks!,True,{}
ros2/rmw,https://github.com/ros2/rmw,178,2019-06-12T13:35:37Z,2019-06-12T20:02:27Z,2019-06-12T20:02:29Z,MERGED,True,2,1,1,https://github.com/clalancette,add RMW_QOS_POLICY_LIVELINESS_UNKNOWN enum (#175),1,[],https://github.com/ros2/rmw/pull/178,https://github.com/clalancette,1,https://github.com/ros2/rmw/pull/178,Signed-off-by: Miaofei miaofei@amazon.com,Signed-off-by: Miaofei miaofei@amazon.com,True,{}
ros2/rmw,https://github.com/ros2/rmw,179,2019-06-12T19:33:50Z,2019-07-09T16:16:22Z,2019-07-09T16:16:25Z,MERGED,True,35,0,1,https://github.com/jacobperron,Add function for getting clients by node,1,[],https://github.com/ros2/rmw/pull/179,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/179,"This enables us to distinguish between service clients and service servers when querying the ROS graph for services.
In particular, this will help resolve ros2/sros2#94.","This enables us to distinguish between service clients and service servers when querying the ROS graph for services.
In particular, this will help resolve ros2/sros2#94.",True,{}
ros2/rmw,https://github.com/ros2/rmw,179,2019-06-12T19:33:50Z,2019-07-09T16:16:22Z,2019-07-09T16:16:25Z,MERGED,True,35,0,1,https://github.com/jacobperron,Add function for getting clients by node,1,[],https://github.com/ros2/rmw/pull/179,https://github.com/jacobperron,2,https://github.com/ros2/rmw/pull/179#issuecomment-501745695,"This enables us to distinguish between service clients and service servers when querying the ROS graph for services.
In particular, this will help resolve ros2/sros2#94.","Full CI with all connected PRs:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,179,2019-06-12T19:33:50Z,2019-07-09T16:16:22Z,2019-07-09T16:16:25Z,MERGED,True,35,0,1,https://github.com/jacobperron,Add function for getting clients by node,1,[],https://github.com/ros2/rmw/pull/179,https://github.com/jacobperron,3,https://github.com/ros2/rmw/pull/179#issuecomment-502252101,"This enables us to distinguish between service clients and service servers when querying the ROS graph for services.
In particular, this will help resolve ros2/sros2#94.","The OpenSplice pendulum tests are known failures on Linux aarch64 (ros2/build_farmer#133), but looks like this has possibly introduced a similar failure for Linux amd64.
There's a number of failures on macOS that I haven't seen before; I'll take a closer look.",True,{}
ros2/rmw,https://github.com/ros2/rmw,179,2019-06-12T19:33:50Z,2019-07-09T16:16:22Z,2019-07-09T16:16:25Z,MERGED,True,35,0,1,https://github.com/jacobperron,Add function for getting clients by node,1,[],https://github.com/ros2/rmw/pull/179,https://github.com/jacobperron,4,https://github.com/ros2/rmw/pull/179#issuecomment-506809657,"This enables us to distinguish between service clients and service servers when querying the ROS graph for services.
In particular, this will help resolve ros2/sros2#94.",The test failures are not new. They are related to building with OpenSplice which we are not doing regularly (only release builds nightly where the failures do not appear). See ros2/rmw_opensplice#264 (comment) for builds against master where the same test failures appear.,True,{}
ros2/rmw,https://github.com/ros2/rmw,179,2019-06-12T19:33:50Z,2019-07-09T16:16:22Z,2019-07-09T16:16:25Z,MERGED,True,35,0,1,https://github.com/jacobperron,Add function for getting clients by node,1,[],https://github.com/ros2/rmw/pull/179,https://github.com/jacobperron,5,https://github.com/ros2/rmw/pull/179#issuecomment-507777312,"This enables us to distinguish between service clients and service servers when querying the ROS graph for services.
In particular, this will help resolve ros2/sros2#94.","Rebased all connected PRs:

Linux 
Linux-aarch64 
macOS 
Windows 

EDIT: All of the failures already exist with default branches with OpenSplice.",True,{}
ros2/rmw,https://github.com/ros2/rmw,182,2019-08-29T20:46:05Z,2019-09-17T13:25:50Z,2019-09-17T13:25:54Z,MERGED,True,9,0,2,https://github.com/ivanpauno,Add specific return type for non existent node,2,['in review'],https://github.com/ros2/rmw/pull/182,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/182,Addresses ros2/ros2cli#322 (comment),Addresses ros2/ros2cli#322 (comment),True,{}
ros2/rmw,https://github.com/ros2/rmw,185,2019-09-21T21:37:28Z,2019-10-18T21:51:06Z,2019-10-18T21:51:10Z,MERGED,True,221,0,5,https://github.com/Karsten1987,Zero copy api,13,['enhancement'],https://github.com/ros2/rmw/pull/185,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/185,connects to ros2/ros2#785,connects to ros2/ros2#785,True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,1,https://github.com/ros2/rmw/pull/186,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,2,https://github.com/ros2/rmw/pull/186#issuecomment-541729941,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","I don't get why rmw_get_qos_for_publishers and rmw_get_qos_for_subscribers return a list of rmw_qos_profile_t (with the participant name), instead of just returning one.
IMO, both of them should return only one rmw_qos_profile_t, using the data discovered by the rmw_node_t passed as an argument.

Sorry, now I see why you need a list (there may be many publishers/subscription on each topic, in different nodes).
Please, always refer to the node name and to the node.
Participant and its name are not a concept in ROS 2.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,3,https://github.com/ros2/rmw/pull/186#issuecomment-541751202,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","I don't get why rmw_get_qos_for_publishers and rmw_get_qos_for_subscribers return a list of rmw_qos_profile_t (with the participant name), instead of just returning one.
IMO, both of them should return only one rmw_qos_profile_t, using the data discovered by the rmw_node_t passed as an argument.

Sorry, now I see why you need a list (there may be many publishers/subscription on each topic, in different nodes).
Please, always refer to the node name or node.
Participant and its name are not a concept is ROS 2.


I used Participant as a blanket term for Publishers and Subscribers. Since rmw_participant_qos_profile_t and rmw_partiticpants_t can be used for both publishers and subscribers.
Since each topic can have multiple publishers/subscribers, the participant_name (aka publisher_name or subscriber_name) is important to differentiate between them when displaying from ros2cli

For eg: the command ros2 topic info my_topic should print
Topic: my_topic

Publisher count: 2

Publisher Name: _ros2cli_daemon_0
QoS Profile: 
    Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
    Durability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
    Lifespan: 1000000000 nanoseconds
    Deadline: 2000000000 nanoseconds
    Liveness: RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC
    Liveness Lease Duration: 50000 nanoseconds

Publisher Name: talker
QoS Profile: 
    Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
    Durability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
    Lifespan: 1000000000 nanoseconds
    Deadline: 2000000000 nanoseconds
    Liveness: RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC
    Liveness Lease Duration: 5 nanoseconds

Subscriber count: 0

What do you suggest is a better term to Participants as I see that Participants can be misleading?",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,4,https://github.com/ros2/rmw/pull/186#issuecomment-541756270,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Topic: my_topic
Publisher count: 2
Publisher Name: _ros2cli_daemon_0
QoS Profile:
Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
Durability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
Lifespan: 1000000000 nanoseconds
Deadline: 2000000000 nanoseconds
Liveness: RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC
Liveness Lease Duration: 50000 nanoseconds
Publisher Name: talker
QoS Profile:
Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
Durability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
Lifespan: 1000000000 nanoseconds
Deadline: 2000000000 nanoseconds
Liveness: RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC
Liveness Lease Duration: 5 nanoseconds
Subscriber count: 0

It should say node name, Publishers or Subscriptions don't have a name (the name you're printing is the node name).
You can also create many publishers/subscriptions in a node in the same topic (and with different qos settings, or not).
When that happens, you don't have a way to distinguish between one publisher/subscription and the other.
It's a strange use case, but it's possible.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,5,https://github.com/ros2/rmw/pull/186#issuecomment-541759949,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","It should say node name, Publishers or Subscriptions don't have a name (the name you're printing is the node name).
You can also create many publishers/subscriptions in a node in the same topic (and with different qos settings, or not).
When that happens, you don't have a way to distinguish between one publisher/subscription and the other.
It's a strange use case, but it's possible.

Ah, I see what you mean.
Alright, so participant_name can be renamed to node_name.
Whats your take on renaming rmw_participants_t and rmw_participant_qos_profile_t? Since rmw_nodes_t might be misleading since we already have rmw_node_t. The same goes for rmw_node_qos_profile_t. Ideally, an umbrella term for publishers and subscribers is what we want.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,6,https://github.com/ros2/rmw/pull/186#issuecomment-541838501,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Whats your take on renaming rmw_participants_t and rmw_participant_qos_profile_t? Since rmw_nodes_t might be misleading since we already have rmw_node_t. The same goes for rmw_node_qos_profile_t. Ideally, an umbrella term for publishers and subscribers is what we want.

We currently have two types of graph introspection functions:

The ones that list all available topics/services (https://github.com/ros2/rmw/blob/master/rmw/include/rmw/get_service_names_and_types.h, https://github.com/ros2/rmw/blob/master/rmw/include/rmw/get_topic_names_and_types.h).
The ones that list entities by node (https://github.com/ros2/rmw/blob/master/rmw/include/rmw/get_node_info_and_types.h).

I think that getting the list of publishers and subscribers with its qos enters in the second group, we could have a *_by_node function.
In that case, it's not necessary to retrieve the node name in the output, as it was part of the arguments. We could just add a rmw_qos_profiles_t, which is a list of the current rmw_qos_profile_t.
Does that sound reasonable?",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,7,https://github.com/ros2/rmw/pull/186#issuecomment-541864950,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","I think that getting the list of publishers and subscribers with its qos enters in the second group, we could have a *_by_node function.
In that case, it's not necessary to retrieve the node name in the output, as it was part of the arguments. We could just add a rmw_qos_profiles_t, which is a list of the current rmw_qos_profile_t.

I am a little confused. The only data available is the handle to rmw_node_t and the topic_name, with this we need to find all publishers and subscribers (along with their QoS Policies) to that topic_name. In this case aren't we also getting publishers and subscribers from other nodes as well?
How can node name not be part of the arguments when we do not know of the other nodes involved?",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,8,https://github.com/ros2/rmw/pull/186#issuecomment-541898208,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@jaisontj I'm thinking in something like this:
rmw_get_publisher_qos_by_node(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * node_name,
  const char * node_namespace,
  rmw_qos_profiles_t * qos_profiles);
I think that matches better the current API.
And actually, I would go with a method like this:
rmw_get_publisher_names_types_and_qos_by_node(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * node_name,
  const char * node_namespace,
  bool demangle,
  rmw_names_and_types_t * topic_names_and_types,
  rmw_qos_profiles_t * qos_profiles);
rmw_names_and_types_t and rmw_qos_profiles_t will have in the same index info of the same publisher (it's not possible to ensure that if it's separated in two calls).

If you want to go with something similar to your first proposal, I would rather go with:
rmw_ret_t
rmw_get_qos_for_publishers(
  const rmw_node_t * node,
  const char * topic_name,
  const char * type_name,
  bool demangle,
  rmw_node_names_t * node_names,
  rmw_qos_profiles_t * qos_profiles);
I added type_name, as you probably also want to know it.
demangle option is taken by all graph API functions, it specifies if ROS topic and type name conventions are used or not.
rmw_node_names_t would be a list of node names (and namespaces).
rmw_qos_profiles_t will have the same indexing as rmw_node_names_t.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,9,https://github.com/ros2/rmw/pull/186#issuecomment-541937547,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Thank you for this @ivanpauno. After looking at your suggestions, I have slight modifications in mind
 rmw_get_publisher_names_and_qos_for_topic(
   const rmw_node_t * node,
   rcutils_allocator_t * allocator,
   const char * topic_name,
   rcutils_string_array_t * node_names,
   rmw_qos_profiles_t * qos_profiles);
I've renamed the function from *_by_node to *_for_topic since we are getting a list of all publishers to a topic, regardless of which node it is a part of.
Parameters:

allocator is required to allocate memory for node_names and qos_profiles since we do not know the size of the array before hand.
topic_name: the topic name to get the list of publishers for; this must be a fully qualified topic_name
node_names and qos_profiles: which have the same indexing for participants

I've taken off:

type_name as I'm not sure why we need it. We can get all the data we need from the topic_name and rmw_node_t (from the data inside topic_cache). Moreover, when this call originates from the cli, the command would be ros2 topic info <topic_name>.
demangle: similar to how rmw_count_publisher does it, could we not specify that the topic name must be fully qualified; like here (linking to rcl as the rmw package has no comments/documentation for the functions)?

Let me know if I've gotten this right. If so, I will update this PR with the same :)",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/emersonknapp,10,https://github.com/ros2/rmw/pull/186#issuecomment-541947877,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@ivanpauno I think some of the confusion here is that we are querying for information for everything except this node. There isn't a precedent in the graph API of ""information_by_topic"", but we need that info for this new functionality.
@jaisontj For naming consistency, it may make more sense to name it rmw_get_qos_profiles_by_topic since it seems the _by_X naming has precedent, whereas the _for_X doesn't.
Note: the name convention in ROS2 is subscription not subscriber. There is no subscriber in ROS2. Unfortunately it seems that a handful of functions that mention subscriber have made it into rmw. Lets make sure not to continue the trend.
So to summarize that, I think you're on the right track and we're looking at
rmw_get_publisher_names_and_qos_by_topic
rmw_get_subscription_names_and_qos_by_topic

@ivanpauno does that sound about right?
EDIT: more clarification - the purpose of this code change is to gain information about the rest of the running system, with the goal of later exposing QoS mismatch when we try to subscribe to a topic whose publisher has an incompatible QoS to our subscription.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,11,https://github.com/ros2/rmw/pull/186#issuecomment-542247855,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","EDIT: more clarification - the purpose of this code change is to gain information about the rest of the running system, with the goal of later exposing QoS mismatch when we try to subscribe to a topic whose publisher has an incompatible QoS to our subscription.

There is also on_offered_incompatible_qos and on_requested_incompatible_qos listeners. See for example https://community.rti.com/static/documentation/connext-dds/5.3.0/doc/manuals/connext_dds/html_files/RTI_ConnextDDS_CoreLibraries_UsersManual/Content/UsersManual/Types_of_Listeners.htm#entities_943231811_994265 (I haven't checked support in others DDS vendors).
Of course, that doesn't help much for adding cli introspection ability (as requested in #151).
But we could use them, for example, to allow the user to register a callback.

demangle: similar to how rmw_count_publisher does it, could we not specify that the topic name must be fully qualified; like here (linking to rcl as the rmw package has no comments/documentation for the functions)?

We usually say fully qualified name when we already joined the namespace.
Demangling is something rmw vendor specific, it's not possible to do that in an upper layer.
Basically, the ROS topic name isn't directly used as the DDS topic name. Instead of that, we add a prefix/suffix.
rmw_count_publisher is actually missing the no_demangle option.

type_name as I'm not sure why we need it. We can get all the data we need from the topic_name and rmw_node_t (from the data inside topic_cache). Moreover, when this call originates from the cli, the command would be ros2 topic info <topic_name>.

I suggested adding the type name, because it allows the user to identify better each publisher/subscription. It's still impossible to uniquely identify them, the only way to do that is to add the publisher/subscription gid.

rmw_get_publisher_names_and_qos_for_topic(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * topic_name,
  rcutils_string_array_t * node_names,
  rmw_qos_profiles_t * qos_profiles);

Maybe you can split node_names in namespaces and names, mimicking 
  
    
      rmw/rmw/include/rmw/rmw.h
    
    
        Lines 898 to 904
      in
      ca572aa
    
  
  
    

        
          
           RMW_PUBLIC 
        

        
          
           RMW_WARN_UNUSED 
        

        
          
           rmw_ret_t 
        

        
          
           rmw_get_node_names( 
        

        
          
             const rmw_node_t * node, 
        

        
          
             rcutils_string_array_t * node_names, 
        

        
          
             rcutils_string_array_t * node_namespaces); 
        
    
  

.

I imagine a cli output like this:
Topic: my_topic

Publisher count: 2

Node Name: _ros2cli_daemon_0
Topic Type: std_msgs/String
gid: PUBLISHER_GID
QoS Profile: 
    Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
    Durability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
    Lifespan: 1000000000 nanoseconds
    Deadline: 2000000000 nanoseconds
    Liveness: RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC
    Liveness Lease Duration: 50000 nanoseconds

Publisher Name: talker
Topic Type: std_msgs/String
gid: PUBLISHER_GID
QoS Profile: 
    Reliability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
    Durability: RMW_QOS_POLICY_RELIABILITY_RELIABLE
    Lifespan: 1000000000 nanoseconds
    Deadline: 2000000000 nanoseconds
    Liveness: RMW_QOS_POLICY_LIVELINESS_MANUAL_BY_TOPIC
    Liveness Lease Duration: 5 nanoseconds

Subscriber count: 0

If all the information is not retrieved in one call, race conditions are possible (i.e. if you first ask for the publisher qos profiles and then for the types, a publisher can disappear/appear in the middle).
So, I imagine a function like:
rmw_get_publisher_info_by_topic(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * topic_name,
  rcutils_string_array_t * node_namespaces,
  rcutils_string_array_t * node_names,
  rcutils_string_array_t * type_names,
  rmw_gids_t * gids,
  rmw_qos_profiles_t * qos_profiles);

I don't super like the idea of an ""all in one"" function, but it's the only way to avoid the race (except if we add a mechanism to ""lock"" temporally the graph, but I don't think that's a good idea).",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,12,https://github.com/ros2/rmw/pull/186#issuecomment-542310577,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","There is also on_offered_incompatible_qos and on_requested_incompatible_qos listeners. See for example https://community.rti.com/static/documentation/connext-dds/5.3.0/doc/manuals/connext_dds/html_files/RTI_ConnextDDS_CoreLibraries_UsersManual/Content/UsersManual/Types_of_Listeners.htm#entities_943231811_994265 (I haven't checked support in others DDS vendors).

These are of great help! (not for #151 but for whats to come later) Thank you @ivanpauno

We usually say fully qualified name when we already joined the namespace.
Demangling is something rmw vendor specific, it's not possible to do that in an upper layer.
Basically, the ROS topic name isn't directly used as the DDS topic name. Instead of that, we add a prefix/suffix.
rmw_count_publisher is actually missing the no_demangle option.

rmw_count_publisher and rmw_count_subscriber do this by default (here). Just to clarify, these functions work on no_demangle = true (aka mangle) by default right?
Maybe adding a no_demangle option to these can be something I can do in another PR (if that's something we want to do in the future, then I might as well since I have context).

I suggested adding the type name, because it allows the user to identify better each publisher/subscription. It's still impossible to uniquely identify them, the only way to do that is to add the publisher/subscription gid.

Makes sense.

rmw_get_publisher_info_by_topic(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * topic_name,
  rcutils_string_array_t * node_namespaces,
  rcutils_string_array_t * node_names,
  rcutils_string_array_t * type_names,
  rmw_gids_t * gids,
  rmw_qos_profiles_t * qos_profiles);

Isn't this missing bool demangle option? or should I default to demangle=false and add the ros prefixes (like this)?
Moreover, since we have so many out params; doesn't it make sense to use a struct or tuple or something to encapsulate them?",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,13,https://github.com/ros2/rmw/pull/186#issuecomment-542389830,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","rmw_count_publisher and rmw_count_subscriber do this by default (here). Just to clarify, these functions work on no_demangle = true (aka mangle) by default right?

In functions like rmw_get_subscriber_names_and_types_by_node, the default is no_demangle = false. i.e.: you get by default the ros topic name, and you only see the raw dds name when passing true.
Maybe for rmw_count_subscriber, it should be called no_mangle (because it's kind of the opposite process). And also, the default should be false.

Maybe adding a no_demangle option to these can be something I can do in another PR (if that's something we want to do in the future, then I might as well since I have context).

Sounds good.

Isn't this missing bool demangle option? or should I default to demangle=false and add the ros prefixes (like this)?

Yes, I forgot that.

Moreover, since we have so many out params; doesn't it make sense to use a struct or tuple or something to encapsulate them?

Sure, sounds reasonable.

Unrelated, but I'm doing a big refactor of the implementation ros2/rmw_fastrtps#312.
I don't mind rebasing this after it's implemented and merged. But in the strange case I finish first, you will have to do the rebasing (and I know, it's not going to be fun).",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,14,https://github.com/ros2/rmw/pull/186#issuecomment-542400400,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","In functions like rmw_get_subscriber_names_and_types_by_node, the default is no_demangle = false. i.e.: you get by default the ros topic name, and you only see the raw dds name when passing true.
Maybe for rmw_count_subscriber, it should be called no_mangle (because it's kind of the opposite process). And also, the default should be false.

Haha, this is so confusing. Why go with the no_* convention? Why not just use demangle = true/false?



Unrelated, but I'm doing a big refactor of the implementation ros2/rmw_fastrtps#312.
I don't mind rebasing this after it's implemented and merged. But in the strange case I finish first, you will have to do the rebasing (and I know, it's not going to be fun).

This change is in the ros2/rmw repo, the refactor work seems to be in the ros2/rmw_fastrtps repo. Are you planning on changing things in this repo as well? I ask because I am not sure why the rebase needs to happen on this.
Regardless, now that we have agreed on the struct. I will send in a PR ASAP!",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,15,https://github.com/ros2/rmw/pull/186#issuecomment-542449124,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.",@ivanpauno I've taken out most things and made modifications only for the new types and functions. Let me know what you think.,True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,16,https://github.com/ros2/rmw/pull/186#issuecomment-542690044,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","This change is in the ros2/rmw repo, the refactor work seems to be in the ros2/rmw_fastrtps repo. Are you planning on changing things in this repo as well? I ask because I am not sure why the rebase needs to happen on this.

Well, it doesn't affect this PR.
But you will later have to implement this in the different rmw implementations, and I'm refactoring them (atm, just Fast-RTPS).
Particularly, I'm also modifying the TopicCache class, and moving it to a common package between the implementations.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,17,https://github.com/ros2/rmw/pull/186#issuecomment-542774758,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Well, it doesn't affect this PR.
But you will later have to implement this in the different rmw implementations, and I'm refactoring them (atm, just Fast-RTPS).
Particularly, I'm also modifying the TopicCache class, and moving it to a common package between the implementation

Yeah, I was checking it out yesterday. That is a HUGE refactor lol. I'll submit the changes to rmw_fastrtps ASAP.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,18,https://github.com/ros2/rmw/pull/186#issuecomment-542809607,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@jaisontj I will merge this when the PRs in the rmw implementations are ready (fastrtps, connext and opensplice), together with a PR in rcl testing the feature.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,19,https://github.com/ros2/rmw/pull/186#issuecomment-542809991,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@jaisontj I will merge this when the PRs in the rmw implementations are ready (fastrtps, connext and opensplice), together with a PR in rcl testing the feature.

Sure! I will get to them next and link them to this PR.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/emersonknapp,20,https://github.com/ros2/rmw/pull/186#issuecomment-542812483,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@ivanpauno what do you think of this plan: check in empty implementations of these functions, that all return RMW_RET_UNSUPPORTED for the 3 rmw implementatons - then work on the functionality one PR at a time that can be merged separately?",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,21,https://github.com/ros2/rmw/pull/186#issuecomment-542812998,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@ivanpauno what do you think of this plan: check in empty implementations of these functions, that all return RMW_RET_UNSUPPORTED for the 3 rmw implementatons - then work on the functionality one PR at a time that can be merged separately?

I'm ok with that. I will ask someone else review before merging.",True,{'THUMBS_UP': ['https://github.com/jaisontj']}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,22,https://github.com/ros2/rmw/pull/186#issuecomment-542874852,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@ivanpauno what do you think of this plan: check in empty implementations of these functions, that all return RMW_RET_UNSUPPORTED for the 3 rmw implementatons - then work on the functionality one PR at a time that can be merged separately?

There is a feature and API freeze on Friday.
If the implementation is not done before that, it's not going to be part of a realease until F-turtle.
So, I prefer no merging the API now without an implementation.
After we create an Eloquent branch, I don't have a problem with merging the unimplemented API on master. But features are usually not backported.
cc @dirk-thomas",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,23,https://github.com/ros2/rmw/pull/186#issuecomment-547593464,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.",@ivanpauno added a new topic_info_array to initialize and destroy rmw_topic_info_array_t and added tests for the same.,True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/dirk-thomas,24,https://github.com/ros2/rmw/pull/186#issuecomment-549461178,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.",I assume this is targeting F-turtle which means merging only after an eloquent branch has been created.,True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,25,https://github.com/ros2/rmw/pull/186#issuecomment-550433455,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@dirk-thomas; that is alright. In the meantime, could you please review the other related PRs which work towards implementing this feature request?
I'll list them out here:

rmw_fastrtps #336
rcl #511
rclpy #454
ros2cli #385
rmw_connext #377
rmw_opensplice #289",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/chamois94,26,https://github.com/ros2/rmw/pull/186#issuecomment-551062871,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.",@dirk-thomas @jaisontj any chance to have this in eloquent. This is a very useful feature.,True,{'THUMBS_UP': ['https://github.com/jaisontj']}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/dirk-thomas,27,https://github.com/ros2/rmw/pull/186#issuecomment-553587175,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","any chance to have this in eloquent. This is a very useful feature.

@chamois94 Please see my previous comment above which explicitly states that this is targeting F-turtle.
Since this is not a bug fix but a new feature and it affect the RMW interface it is subject to the ""API and feature freeze for core packages"". For Eloquent that deadline was almost a month ago (see https://index.ros.org/doc/ros2/Releases/Release-Eloquent-Elusor/#timeline-before-the-release). So no, we won't be adding this to Eloquent that later before the release since it would break all existing RMW implementations (there are several externally maintained RMW implementation which is why we have these kind of API guaranteed).",True,{'THUMBS_UP': ['https://github.com/thomas-moulard']}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/emersonknapp,28,https://github.com/ros2/rmw/pull/186#issuecomment-554534352,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","CI run try for this and upstream PRs

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/emersonknapp,29,https://github.com/ros2/rmw/pull/186#issuecomment-555722932,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/emersonknapp,30,https://github.com/ros2/rmw/pull/186#issuecomment-555773108,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Linux 
Linux-aarch64 
macOS 
Windows 

Linux and OSX updated to fix linter and timeout. Windows extra include added. Still exploring arm64 test failure",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/prajakta-gokhale,31,https://github.com/ros2/rmw/pull/186#issuecomment-564320910,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Rerunning CI:

Linux 
Linux-aarch64 
macOS 
Windows 

CI for only rmw package:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/mm318,32,https://github.com/ros2/rmw/pull/186#issuecomment-564341674,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@ivanpauno, can you see if you can merge this PR now? Let me know if we should revert 272a2dc or not for solving the const cast used to pass into deallocate().",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,33,https://github.com/ros2/rmw/pull/186#issuecomment-564526453,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","@ivanpauno, can you see if you can merge this PR now? Let me know if we should revert 272a2dc or not for solving the const cast used to pass into deallocate().

I think it's fine.
I will ask for another review, before merging, as this is a big set of PRs.
About the order this family of PRs can be merged, I'm ok with the following:

This PR together with ros2/rmw_implementation#72.
Implementation for fastrtps ros2/rmw_fastrtps#336 together with stubs for the others: ros2/rmw_connext#377 (pending comments), ros2/rmw_opensplice#289. Missing one PR for cyclonedds.
rcl PR: ros2/rcl#511.
rcply PR: ros2/rclpy#454.
ros2cli PR: ros2/ros2cli#385.

Also, it would be nice to add the same funtionality to rclcpp.
If you are not going to work in the implementation, please open an issue.",True,{'THUMBS_UP': ['https://github.com/jaisontj']}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/mm318,34,https://github.com/ros2/rmw/pull/186#issuecomment-564725111,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Sounds good. I have addressed your concerns. In summary:

ros2/rmw_implementation#72, #186
ros2/rmw_fastrtps#336, ros2/rmw_connext#377 (comments addressed), ros2/rmw_opensplice#289, ros2/rmw_cyclonedds#81 (PR and issue for rmw_cyclonedds opened)
ros2/rcl#511
ros2/rclpy#454 (issue for rclcpp opened)
ros2/ros2cli#385

I don't know yet who will be working on the rclcpp implementation, so I opened an issue anyway.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/mm318,35,https://github.com/ros2/rmw/pull/186#issuecomment-564803916,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Hi @ivanpauno, along with addressing @hidmic's comments, I have also reverted the change that removed the const qualifiers and put back the const casts, because it still seems more robust for the struct members to be const pointers, it seems to be common practice in C to cast away the const when free()-ing, and it is also seen done in rcl and probably other packages as well.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,36,https://github.com/ros2/rmw/pull/186#issuecomment-565002804,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Hi @ivanpauno, along with addressing @hidmic's comments, I have also reverted the change that removed the const qualifiers and put back the const casts, because it still seems more robust for the struct members to be const pointers, it seems to be common practice in C to cast away the const when free()-ing, and it is also seen done in rcl and probably other packages as well.

I don't like much the pattern, but it has been used extensively in other parts of the library, so I'm ok with it (my original comment was just because I didn't get that the cast was for getting rid of the constness).",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/mm318,37,https://github.com/ros2/rmw/pull/186#issuecomment-566679268,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Hi @ivanpauno and @hidmic, I have addressed your comments. Can you take a look again? Are there still any blockers?",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/hidmic,38,https://github.com/ros2/rmw/pull/186#issuecomment-567169963,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","CI up to ros2cli, including all patches (Linux only till all review comments have been addressed):

Linux 

""Canary"" CI on master:

Linux",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,39,https://github.com/ros2/rmw/pull/186#issuecomment-570222631,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","CI up to ros2cli, including all patches (Linux only till all review comments have been addressed):

Linux 

""Canary"" CI on master:

Linux 


The problem with those CI runs is that when you specify a gist file, it doesn't test the changes merged on ""master"". In those cases, CI just runs the specified changes, which in this cased are unupdated and failing (because of that). I pushed some branches in ros2 repositories under the name ivanpauno/test/include_qos_in_ros2_topic_info, to ease testing (and avoid unnecessary rebasings).
Also, just limiting the scope to rcl, rmw, rmw_implementation and rmw_fastrtps PRs:

Linux 
Linux-aarch64 
macOS  (unrelated error)
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/mm318,40,https://github.com/ros2/rmw/pull/186#issuecomment-570412524,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","I have added function stubs for rclcpp as well. So the comprehensive list of pull requests is:

ros2/rmw_implementation#72, #186
ros2/rmw_fastrtps#336, ros2/rmw_connext#377 (implementation tracked at ros2/rmw_connext#380), ros2/rmw_opensplice#289 (implementation tracked at ros2/rmw_opensplice#299), ros2/rmw_cyclonedds#81 (implementation tracked at ros2/rmw_cyclonedds#82)
ros2/rcl#511
ros2/rclpy#454, ros2/rclcpp#959 (implementation tracked at ros2/rclcpp#943)
ros2/ros2cli#385",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/dirk-thomas,41,https://github.com/ros2/rmw/pull/186#issuecomment-570433442,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","I have added function stubs for rclcpp as well.

When are you planning to fill these stubs with a working implementation?",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/mm318,42,https://github.com/ros2/rmw/pull/186#issuecomment-570796811,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","When are you planning to fill these stubs with a working implementation?

There is some discussion about this here: ros2/rclcpp#943 (comment)
Also, can we proceed with merging in at least a subset of these PRs, as discussed here ros2/rclcpp#943 (comment)?",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,43,https://github.com/ros2/rmw/pull/186#issuecomment-571132533,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Another CI, this time including all the rmw implementations, to check that the stubs build without problem:

Windows  (lots of unrelated error, but ok)",True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/mm318,44,https://github.com/ros2/rmw/pull/186#issuecomment-571815982,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Even though ros2/rclcpp#960 (which supersedes ros2/rclcpp#959) is out for review, are we we ready to merge the ""rcl and below"" subset now?",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,45,https://github.com/ros2/rmw/pull/186#issuecomment-573214160,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","I see rcl and downstream PRs ready for another round of CI, @wjwwood what do you think?",True,"{'THUMBS_UP': ['https://github.com/wjwwood', 'https://github.com/mm318']}"
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,46,https://github.com/ros2/rmw/pull/186#issuecomment-573639254,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Just rmw_fastrtps_cpp:

Linux 
Linux-aarch64 
macOS 
Including all the stubs:
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,47,https://github.com/ros2/rmw/pull/186#issuecomment-573841631,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.",@mm318 Can you check the macOS compiler warnings? https://ci.ros2.org/job/ci_osx/7362/warnings11Result/,True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/mm318,48,https://github.com/ros2/rmw/pull/186#issuecomment-573862604,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Hmm, interesting this post here and these examples in rcl here and here seem to say these warnings would be false positives with GCC, and would not happen with Clang in the ROS2 codebase.
Anyway, I'll implement the solution found here: https://stackoverflow.com/a/9293087",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,49,https://github.com/ros2/rmw/pull/186#issuecomment-574187578,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Hmm, interesting this post here and these examples in rcl here and here seem to say these warnings would be false positives with GCC, and would not happen with Clang in the ROS2 codebase.
Anyway, I'll implement the solution found here: https://stackoverflow.com/a/9293087

That's strange, ignoring the warning sounds reasonable.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,50,https://github.com/ros2/rmw/pull/186#issuecomment-574187988,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.",macOS,True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/ivanpauno,51,https://github.com/ros2/rmw/pull/186#issuecomment-574289661,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.",Merged!! Thanks for your work @mm318 @jaisontj !!,True,"{'HOORAY': ['https://github.com/mm318', 'https://github.com/jaisontj']}"
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/mm318,52,https://github.com/ros2/rmw/pull/186#issuecomment-574301524,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.","Thank you for merging, @ivanpauno! Let's continue the conversation at ros2/rclcpp#960.",True,{}
ros2/rmw,https://github.com/ros2/rmw,186,2019-09-27T23:40:25Z,2020-01-14T17:36:13Z,2020-01-14T18:41:07Z,MERGED,True,1116,1,13,https://github.com/jaisontj,Adding required structs and methods to get a list  of publishers or subscribers with their respective qos,31,['enhancement'],https://github.com/ros2/rmw/pull/186,https://github.com/jaisontj,53,https://github.com/ros2/rmw/pull/186#issuecomment-574314583,"Includes creating relevant data structures to enable the feature mentioned here. Relevant information about implementation is discussed here
Summary:

Added two new structs

rmw_participant_qos_profile_t to store participant name and their qos policy in one struct
rmw_participants_t to store a list of rmw_participant_qos_profile_t


Added two new functions:

rmw_participant_qos_profile_allocate
rmw_participant_qos_profile_free


Tests for the above two functions

Note: colcon build --packages-up-to rmw && colcon test --packages-up-to rmw && colcon test-result --verbose --test-result-base build/rcl passes without any errors or failures.",Thank you @mm318 for following up on these :),True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rmw,https://github.com/ros2/rmw,187,2019-10-04T23:35:20Z,2019-10-08T22:40:39Z,2019-10-08T22:40:42Z,MERGED,True,235,2,7,https://github.com/wjwwood,add pub/sub option structures to support rmw specific payload feature,2,['enhancement'],https://github.com/ros2/rmw/pull/187,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/187,Connects to ros2/rclcpp#882,Connects to ros2/rclcpp#882,True,{}
ros2/rmw,https://github.com/ros2/rmw,187,2019-10-04T23:35:20Z,2019-10-08T22:40:39Z,2019-10-08T22:40:42Z,MERGED,True,235,2,7,https://github.com/wjwwood,add pub/sub option structures to support rmw specific payload feature,2,['enhancement'],https://github.com/ros2/rmw/pull/187,https://github.com/eboasson,2,https://github.com/ros2/rmw/pull/187#issuecomment-538991071,Connects to ros2/rclcpp#882,"@wjwwood it would be really nice if there were (e.g.) a version macro for the RMW interface so that a single source can be used to cover some of these changes. I suppose RMW__PUBLISHER_OPTIONS_H_ and RMW__SUBSCRIPTION_OPTIONS_H_ could be used as a proxy, but it feels a bit dirty.",True,{}
ros2/rmw,https://github.com/ros2/rmw,187,2019-10-04T23:35:20Z,2019-10-08T22:40:39Z,2019-10-08T22:40:42Z,MERGED,True,235,2,7,https://github.com/wjwwood,add pub/sub option structures to support rmw specific payload feature,2,['enhancement'],https://github.com/ros2/rmw/pull/187,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/187#issuecomment-539121496,Connects to ros2/rclcpp#882,"@eboasson that's a good idea, can you open an issue to track that? This isn't the first time we've needed to change API in rmw and it won't be the last, so I think having tools for you to have a ""single"" source is out of scope for this pr at least.",True,{}
ros2/rmw,https://github.com/ros2/rmw,189,2019-10-10T20:28:03Z,2020-04-03T13:12:31Z,2020-04-03T13:12:36Z,MERGED,True,280,70,11,https://github.com/ivanpauno,Switch to one participant per context,23,"['enhancement', 'in review']",https://github.com/ros2/rmw/pull/189,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/189,API changes needed after ros2/rmw_fastrtps#312.,API changes needed after ros2/rmw_fastrtps#312.,True,{}
ros2/rmw,https://github.com/ros2/rmw,190,2019-10-11T15:45:40Z,2019-10-18T22:30:12Z,2019-10-18T22:30:15Z,MERGED,True,4,1,1,https://github.com/BMarchi,Add function to enable localhost communication only from env var,5,['in review'],https://github.com/ros2/rmw/pull/190,https://github.com/BMarchi,1,https://github.com/ros2/rmw/pull/190,"PR to implement network traffic restriction for localhost. There are no test yet since this is a mock open for implementation discussion. FastRTPS implementation

Linux 
Arch 
Windows 
OSX","PR to implement network traffic restriction for localhost. There are no test yet since this is a mock open for implementation discussion. FastRTPS implementation

Linux 
Arch 
Windows 
OSX",True,{}
ros2/rmw,https://github.com/ros2/rmw,190,2019-10-11T15:45:40Z,2019-10-18T22:30:12Z,2019-10-18T22:30:15Z,MERGED,True,4,1,1,https://github.com/BMarchi,Add function to enable localhost communication only from env var,5,['in review'],https://github.com/ros2/rmw/pull/190,https://github.com/BMarchi,2,https://github.com/ros2/rmw/pull/190#issuecomment-541133657,"PR to implement network traffic restriction for localhost. There are no test yet since this is a mock open for implementation discussion. FastRTPS implementation

Linux 
Arch 
Windows 
OSX","I wanted a third return option, that's why I didn't use the bool one, so proper behavior can be done if the variable has a wrong value. I guess I can remove the possibility to return the host list without parsing and just return the code. If we want list parsing for the future then we add another function as you said. Does it sound good for you?",True,{}
ros2/rmw,https://github.com/ros2/rmw,190,2019-10-11T15:45:40Z,2019-10-18T22:30:12Z,2019-10-18T22:30:15Z,MERGED,True,4,1,1,https://github.com/BMarchi,Add function to enable localhost communication only from env var,5,['in review'],https://github.com/ros2/rmw/pull/190,https://github.com/dirk-thomas,3,https://github.com/ros2/rmw/pull/190#issuecomment-541141706,"PR to implement network traffic restriction for localhost. There are no test yet since this is a mock open for implementation discussion. FastRTPS implementation

Linux 
Arch 
Windows 
OSX","I guess I can remove the possibility to return the host list without parsing and just return the code.

Sounds good to me.

#define RMW_ENV_VAR_NOT_DEFINED_OR_EMPTY 0
#define RMW_LOCAL_HOST_ENABLED 1
#define RMW_INVALID_ALLOWED_HOSTS 2

I am not sure how to name / value the three return codes for something like use_localhost_only though.
Instead of LOCAL_HOST_ENABLED I would propose LOCALHOST_ONLY since it not only states that localhost is enabled but that it is the only enabled target.
I would be worried that callers interpret the numeric return value as a boolean. So if LOCALHOST_ONLY is non-zero I would wish the two other return codes would both be zero (which is obviously not an option).
Maybe a signature like rc use_localhost_only(bool *) would be more natural to use? The rc is OK / 0 or non-zero / UNSUPPORTED_VALUE. And the bool gets set either way - in the case of an unsupported value or the env var not set at all the default value of our choice.
[All this hops are only ""necessary"" because we try to use a env var with a wider value space than we are comfortable to actually specify atm. I still think just using an env var ROS_ENABLE_NETWORK is the much cleaner choice for the time being - with a simple boolean getter function - no extras.]",True,{}
ros2/rmw,https://github.com/ros2/rmw,190,2019-10-11T15:45:40Z,2019-10-18T22:30:12Z,2019-10-18T22:30:15Z,MERGED,True,4,1,1,https://github.com/BMarchi,Add function to enable localhost communication only from env var,5,['in review'],https://github.com/ros2/rmw/pull/190,https://github.com/BMarchi,4,https://github.com/ros2/rmw/pull/190#issuecomment-542180596,"PR to implement network traffic restriction for localhost. There are no test yet since this is a mock open for implementation discussion. FastRTPS implementation

Linux 
Arch 
Windows 
OSX","After reading the discussion in the issue, it seems that people by majority prefers the boolean rather than a list of hosts. So I'll make the changes accordingly!",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rmw,https://github.com/ros2/rmw,190,2019-10-11T15:45:40Z,2019-10-18T22:30:12Z,2019-10-18T22:30:15Z,MERGED,True,4,1,1,https://github.com/BMarchi,Add function to enable localhost communication only from env var,5,['in review'],https://github.com/ros2/rmw/pull/190,https://github.com/dirk-thomas,5,https://github.com/ros2/rmw/pull/190#issuecomment-542757995,"PR to implement network traffic restriction for localhost. There are no test yet since this is a mock open for implementation discussion. FastRTPS implementation

Linux 
Arch 
Windows 
OSX",With the RMW API exposing the flag as an argument of the create node function (same as the domain ID) I would argue this function should actually be implemented in rcl instead (same as where the domain id env var is being checked).,True,{}
ros2/rmw,https://github.com/ros2/rmw,191,2019-10-16T23:51:29Z,2019-10-17T23:08:18Z,2019-10-17T23:08:22Z,MERGED,True,2,0,2,https://github.com/dirk-thomas,add call to bump dev version to the upcoming version 0.8.1,2,"['enhancement', 'in review']",https://github.com/ros2/rmw/pull/191,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/191,Fixes #188. Requires ament/ament_cmake#204.,Fixes #188. Requires ament/ament_cmake#204.,True,{}
ros2/rmw,https://github.com/ros2/rmw,192,2019-10-19T02:40:24Z,2019-10-22T03:46:02Z,2019-10-22T03:46:05Z,MERGED,True,14,16,1,https://github.com/Karsten1987,rename return functions for loaned messages,1,[],https://github.com/ros2/rmw/pull/192,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/192,"connects to ros2/rclcpp#896
Signed-off-by: Karsten Knese karsten@openrobotics.org","connects to ros2/rclcpp#896
Signed-off-by: Karsten Knese karsten@openrobotics.org",True,{}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/jaisontj,1,https://github.com/ros2/rmw/pull/193,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/193#issuecomment-554206224,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Please reference all related PR from at least one ticket for visibility.
Also for an RMW API change please include significantly more context / information.",True,{}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/jaisontj,3,https://github.com/ros2/rmw/pull/193#issuecomment-554583635,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","@dirk-thomas Apologies for the lack of context, I planned on adding more information and that is why I had open this as a draft PR.
I've now opened up an issue here tracking all of the related PRs as well as detailing out the need for this feature and the implementation details. Intention is also to initiate a design discussion towards this.",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/mm318,4,https://github.com/ros2/rmw/pull/193#issuecomment-603086330,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Updated set of pull requests:

ros2/rmw_connext#398
ros2/rmw_cyclonedds#125
ros2/rmw_opensplice#294
#193
ros2/rcl#535
ros2/rclcpp#924
ros2/rclpy#459
ros2/ros2cli#410
ros2/demos#416

TODOs:

 Add default incompatible QoS callback to rclcpp / rclpy (punted)
 Verify functionality of ros2topic changes (similar to for the changes in quality_of_service_demo_cpp / quality_of_service_demo_py)
 Re-run tests for the repos",True,{}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/mm318,5,https://github.com/ros2/rmw/pull/193#issuecomment-604529929,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","@ros2/aws-oncall - please run this CI job
Gist: https://gist.githubusercontent.com/mm318/6e086798710e344feb2df41f94baf717/raw/26f6df7bdb054887b226bac7fc22fca942c04384/ros2_qos.repos
BUILD args: --packages-up-to rclcpp rclpy
TEST args: --packages-select rmw_connext_cpp rmw_connext_shared_cpp rmw_cyclonedds_cpp rmw rcl rclcpp rclpy
Job: ci_launcher",True,{}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/dabonnie,6,https://github.com/ros2/rmw/pull/193#issuecomment-604621384,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","https://gist.githubusercontent.com/mm318/6e086798710e344feb2df41f94baf717/raw/26f6df7bdb054887b226bac7fc22fca942c04384/ros2_qos.repos

https://ci.ros2.org/job/ci_launcher/5003/console

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/mm318,7,https://github.com/ros2/rmw/pull/193#issuecomment-604683048,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Hi @ivanpauno and @wjwwood, do you think the changes up to rcl are ready to merge? I mean the following pull requests:

ros2/rmw_connext#398
ros2/rmw_cyclonedds#125
#193
ros2/rcl#535

The test results are here: #193 (comment). I don't think the test failures on Windows and macOS are related to these changes.",True,{}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/ivanpauno,8,https://github.com/ros2/rmw/pull/193#issuecomment-604692157,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","@mm318 SGTM! CI failures also look unrelated to me.
@wjwwood Do you think that does PRs are ready to be merged?",True,{}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/193#issuecomment-604717158,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Fine by me, I trust you guys to review and merge it since my initial review.",True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/mm318,10,https://github.com/ros2/rmw/pull/193#issuecomment-604856408,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Fine by me, I trust you guys to review and merge it since my initial review.

Let's merge it then please, @ivanpauno. Thanks!",True,{}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/ivanpauno,11,https://github.com/ros2/rmw/pull/193#issuecomment-604972416,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","@mm318 I merged those four PRs.
Please, open a issue in rmw_fastrtps, to track the future addition of these events.",True,{'THUMBS_UP': ['https://github.com/mm318']}
ros2/rmw,https://github.com/ros2/rmw,193,2019-11-15T01:29:08Z,2020-03-27T12:25:15Z,2020-03-27T15:32:43Z,MERGED,True,70,0,2,https://github.com/jaisontj,Support for ON_REQUESTED_INCOMPATIBLE_QOS and ON_OFFERED_INCOMPATIBLE_QOS events,11,['in review'],https://github.com/ros2/rmw/pull/193,https://github.com/mm318,12,https://github.com/ros2/rmw/pull/193#issuecomment-605064566,"Related to this feature request. The design and implementation details can also be found there.

Added new enum type RMW_EVENT_REQUESTED_INCOMPATIBLE_QOS and RMW_EVENT_OFFERED_INCOMPATIBLE_QOS to rmw_event_type_t
Defined new structures that encapsulate data for the new events above

Signed-off-by: Jaison Titus jaisontj92@gmail.com","Thanks!
I have opened ros2/rmw_fastrtps#356 to track the future addition of support for these types of QoS events.",True,{}
ros2/rmw,https://github.com/ros2/rmw,194,2020-01-27T18:18:34Z,2020-01-27T22:44:59Z,2020-01-27T22:45:03Z,MERGED,True,1,1,1,https://github.com/wjwwood,update development version after merging #186,1,"['enhancement', 'in review']",https://github.com/ros2/rmw/pull/194,https://github.com/wjwwood,1,https://github.com/ros2/rmw/pull/194,"Follow up of #186, and brought up here: ros2/rmw_cyclonedds#91 (comment)","Follow up of #186, and brought up here: ros2/rmw_cyclonedds#91 (comment)",True,{}
ros2/rmw,https://github.com/ros2/rmw,194,2020-01-27T18:18:34Z,2020-01-27T22:44:59Z,2020-01-27T22:45:03Z,MERGED,True,1,1,1,https://github.com/wjwwood,update development version after merging #186,1,"['enhancement', 'in review']",https://github.com/ros2/rmw/pull/194,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/194#issuecomment-578887570,"Follow up of #186, and brought up here: ros2/rmw_cyclonedds#91 (comment)","CI (build up to rcl, test only rmw):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,195,2020-01-31T21:06:25Z,2020-02-03T17:07:22Z,2020-02-03T17:07:26Z,MERGED,True,36,18,2,https://github.com/dirk-thomas,code style only: wrap after open parenthesis if not in one line,1,[],https://github.com/ros2/rmw/pull/195,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/195,Style update to match the ROS 2 development guide and pass with the updated linter configuration from ament/ament_lint#210.,Style update to match the ROS 2 development guide and pass with the updated linter configuration from ament/ament_lint#210.,True,{}
ros2/rmw,https://github.com/ros2/rmw,196,2020-02-12T20:37:43Z,2020-02-20T17:11:01Z,2020-02-20T17:11:06Z,MERGED,True,19,20,4,https://github.com/ivanpauno,"Rename rmw_topic_endpoint_info_array `count` to `size`, and initialize it",4,['in review'],https://github.com/ros2/rmw/pull/196,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/196,"When rmw_topic_endpoint_info_array_init_with_size was called, count was not initialized.
I renamed count to size, and initialize it with the reserved size.
I think that's more consistent with what we were doing in other arrays.","When rmw_topic_endpoint_info_array_init_with_size was called, count was not initialized.
I renamed count to size, and initialize it with the reserved size.
I think that's more consistent with what we were doing in other arrays.",True,{}
ros2/rmw,https://github.com/ros2/rmw,196,2020-02-12T20:37:43Z,2020-02-20T17:11:01Z,2020-02-20T17:11:06Z,MERGED,True,19,20,4,https://github.com/ivanpauno,"Rename rmw_topic_endpoint_info_array `count` to `size`, and initialize it",4,['in review'],https://github.com/ros2/rmw/pull/196,https://github.com/ivanpauno,2,https://github.com/ros2/rmw/pull/196#issuecomment-585407391,"When rmw_topic_endpoint_info_array_init_with_size was called, count was not initialized.
I renamed count to size, and initialize it with the reserved size.
I think that's more consistent with what we were doing in other arrays.",I will have to send a similar PR that ros2/rmw_fastrtps#348 to rmw_cyclonedds_cpp.,True,{}
ros2/rmw,https://github.com/ros2/rmw,196,2020-02-12T20:37:43Z,2020-02-20T17:11:01Z,2020-02-20T17:11:06Z,MERGED,True,19,20,4,https://github.com/ivanpauno,"Rename rmw_topic_endpoint_info_array `count` to `size`, and initialize it",4,['in review'],https://github.com/ros2/rmw/pull/196,https://github.com/ivanpauno,3,https://github.com/ros2/rmw/pull/196#issuecomment-585874957,"When rmw_topic_endpoint_info_array_init_with_size was called, count was not initialized.
I renamed count to size, and initialize it with the reserved size.
I think that's more consistent with what we were doing in other arrays.","Linux 
Linux-aarch64",True,{}
ros2/rmw,https://github.com/ros2/rmw,196,2020-02-12T20:37:43Z,2020-02-20T17:11:01Z,2020-02-20T17:11:06Z,MERGED,True,19,20,4,https://github.com/ivanpauno,"Rename rmw_topic_endpoint_info_array `count` to `size`, and initialize it",4,['in review'],https://github.com/ros2/rmw/pull/196,https://github.com/ivanpauno,4,https://github.com/ros2/rmw/pull/196#issuecomment-587009574,"When rmw_topic_endpoint_info_array_init_with_size was called, count was not initialized.
I renamed count to size, and initialize it with the reserved size.
I think that's more consistent with what we were doing in other arrays.","New CI, including ros2/rcl#576:

Linux",True,{}
ros2/rmw,https://github.com/ros2/rmw,196,2020-02-12T20:37:43Z,2020-02-20T17:11:01Z,2020-02-20T17:11:06Z,MERGED,True,19,20,4,https://github.com/ivanpauno,"Rename rmw_topic_endpoint_info_array `count` to `size`, and initialize it",4,['in review'],https://github.com/ros2/rmw/pull/196,https://github.com/ivanpauno,5,https://github.com/ros2/rmw/pull/196#issuecomment-587048914,"When rmw_topic_endpoint_info_array_init_with_size was called, count was not initialized.
I renamed count to size, and initialize it with the reserved size.
I think that's more consistent with what we were doing in other arrays.","Again, including ros2/rclpy#510 and ros2/rclcpp#996:

Linux",True,{}
ros2/rmw,https://github.com/ros2/rmw,196,2020-02-12T20:37:43Z,2020-02-20T17:11:01Z,2020-02-20T17:11:06Z,MERGED,True,19,20,4,https://github.com/ivanpauno,"Rename rmw_topic_endpoint_info_array `count` to `size`, and initialize it",4,['in review'],https://github.com/ros2/rmw/pull/196,https://github.com/ivanpauno,6,https://github.com/ros2/rmw/pull/196#issuecomment-587704716,"When rmw_topic_endpoint_info_array_init_with_size was called, count was not initialized.
I renamed count to size, and initialize it with the reserved size.
I think that's more consistent with what we were doing in other arrays.",Linux,True,{}
ros2/rmw,https://github.com/ros2/rmw,196,2020-02-12T20:37:43Z,2020-02-20T17:11:01Z,2020-02-20T17:11:06Z,MERGED,True,19,20,4,https://github.com/ivanpauno,"Rename rmw_topic_endpoint_info_array `count` to `size`, and initialize it",4,['in review'],https://github.com/ros2/rmw/pull/196,https://github.com/ivanpauno,7,https://github.com/ros2/rmw/pull/196#issuecomment-587850216,"When rmw_topic_endpoint_info_array_init_with_size was called, count was not initialized.
I renamed count to size, and initialize it with the reserved size.
I think that's more consistent with what we were doing in other arrays.","AArch64 
OsX  (unrelated failures)
Windows  (unrelated failures)",True,{}
ros2/rmw,https://github.com/ros2/rmw,198,2020-03-05T09:40:18Z,2020-04-10T10:27:43Z,2020-04-10T10:27:46Z,MERGED,True,2,2,2,https://github.com/ahcorde,Added the right dependency rosidl_runtime_c instead of rosidl_generator_c,3,['enhancement'],https://github.com/ros2/rmw/pull/198,https://github.com/ahcorde,1,https://github.com/ros2/rmw/pull/198,"This PR is related to the changes introduced in this PR ros2/rosidl#442. The full process can be followed here ros2/rosidl#443
Signed-off-by: ahcorde ahcorde@gmail.com","This PR is related to the changes introduced in this PR ros2/rosidl#442. The full process can be followed here ros2/rosidl#443
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,198,2020-03-05T09:40:18Z,2020-04-10T10:27:43Z,2020-04-10T10:27:46Z,MERGED,True,2,2,2,https://github.com/ahcorde,Added the right dependency rosidl_runtime_c instead of rosidl_generator_c,3,['enhancement'],https://github.com/ros2/rmw/pull/198,https://github.com/ahcorde,2,https://github.com/ros2/rmw/pull/198#issuecomment-611975616,"This PR is related to the changes introduced in this PR ros2/rosidl#442. The full process can be followed here ros2/rosidl#443
Signed-off-by: ahcorde ahcorde@gmail.com","Updated all repos involved in this change.
Skipping ros1_bridge, qt_*, rqt_*, and rviz_* packages.
Testing against test_rclcpp and rosbag2_tests.


Linux 
Linux-aarch64 
macOS 
Windows 


One warning made the builds unstable but there is a (PR pending)

CMake Deprecation Warning at /home/jenkins-agent/workspace/ci_linux-aarch64/ws/install/ament_cmake_export_interfaces/share/ament_cmake_export_interfaces/cmake/ament_export_interfaces.cmake:37 (message):
ament_export_interfaces() is deprecated, use ament_export_targets() instead
Call Stack (most recent call first):
CMakeLists.txt:85 (ament_export_interfaces)

In MacOS

projectroot.cppcheck

Windows

some failures in test_rclcpp",True,{}
ros2/rmw,https://github.com/ros2/rmw,199,2020-03-06T18:40:56Z,2020-03-08T04:51:05Z,2020-03-08T04:51:10Z,MERGED,True,33,0,1,https://github.com/dirk-thomas,add option to filter available RMW implementations,2,['enhancement'],https://github.com/ros2/rmw/pull/199,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/199,This allows to e.g. only test with a subset of RMW implementations in an overlay workspace - even if the underlay workspace contains more RMW implementations.,This allows to e.g. only test with a subset of RMW implementations in an overlay workspace - even if the underlay workspace contains more RMW implementations.,True,{}
ros2/rmw,https://github.com/ros2/rmw,199,2020-03-06T18:40:56Z,2020-03-08T04:51:05Z,2020-03-08T04:51:10Z,MERGED,True,33,0,1,https://github.com/dirk-thomas,add option to filter available RMW implementations,2,['enhancement'],https://github.com/ros2/rmw/pull/199,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/199#issuecomment-596001756,This allows to e.g. only test with a subset of RMW implementations in an overlay workspace - even if the underlay workspace contains more RMW implementations.,with CI to confirm nothing broke and linters are happy,True,{}
ros2/rmw,https://github.com/ros2/rmw,199,2020-03-06T18:40:56Z,2020-03-08T04:51:05Z,2020-03-08T04:51:10Z,MERGED,True,33,0,1,https://github.com/dirk-thomas,add option to filter available RMW implementations,2,['enhancement'],https://github.com/ros2/rmw/pull/199,https://github.com/jacobperron,3,https://github.com/ros2/rmw/pull/199#issuecomment-596013653,This allows to e.g. only test with a subset of RMW implementations in an overlay workspace - even if the underlay workspace contains more RMW implementations.,"@dirk-thomas Seeing how this is being used, what do you think about renaming the variable so it is less likely to be confused with RMW_IMPLEMENTATION? (see ros2/rclpy#522 (comment))",True,{}
ros2/rmw,https://github.com/ros2/rmw,199,2020-03-06T18:40:56Z,2020-03-08T04:51:05Z,2020-03-08T04:51:10Z,MERGED,True,33,0,1,https://github.com/dirk-thomas,add option to filter available RMW implementations,2,['enhancement'],https://github.com/ros2/rmw/pull/199,https://github.com/dirk-thomas,4,https://github.com/ros2/rmw/pull/199#issuecomment-596016182,This allows to e.g. only test with a subset of RMW implementations in an overlay workspace - even if the underlay workspace contains more RMW implementations.,"Seeing how this is being used, what do you think about renaming the variable so it is less likely to be confused with RMW_IMPLEMENTATION? (see ros2/rclpy#522 (comment))

See my comment there: ros2/rclpy#522 (comment)",True,{'THUMBS_UP': ['https://github.com/jacobperron']}
ros2/rmw,https://github.com/ros2/rmw,200,2020-03-10T17:32:32Z,2020-04-14T16:11:17Z,2020-04-14T16:13:23Z,CLOSED,False,19,7,1,https://github.com/iluetkeb,Add timestamps to rmw-internal structures.,12,[],https://github.com/ros2/rmw/pull/200,https://github.com/iluetkeb,1,https://github.com/ros2/rmw/pull/200,This goes together with ros2/rcl#591,This goes together with ros2/rcl#591,True,{}
ros2/rmw,https://github.com/ros2/rmw,200,2020-03-10T17:32:32Z,2020-04-14T16:11:17Z,2020-04-14T16:13:23Z,CLOSED,False,19,7,1,https://github.com/iluetkeb,Add timestamps to rmw-internal structures.,12,[],https://github.com/ros2/rmw/pull/200,https://github.com/ralph-lange,2,https://github.com/ros2/rmw/pull/200#issuecomment-597728663,This goes together with ros2/rcl#591,Connects to ros2/design#259.,True,{}
ros2/rmw,https://github.com/ros2/rmw,200,2020-03-10T17:32:32Z,2020-04-14T16:11:17Z,2020-04-14T16:13:23Z,CLOSED,False,19,7,1,https://github.com/iluetkeb,Add timestamps to rmw-internal structures.,12,[],https://github.com/ros2/rmw/pull/200,https://github.com/iluetkeb,3,https://github.com/ros2/rmw/pull/200#issuecomment-598651568,This goes together with ros2/rcl#591,"Also, we should consider any changes to tests and documentation.

In principle, I would test that a) allocation and deallocation works and b) that the fields are filled properly.
However, it seems that a) happens in rcl and b) happens in the rmw implementation. So it doesn't appear as if I can test anything in rmw.
Suggestions to the contrary very welcome, I want this to be solid :-)",True,{}
ros2/rmw,https://github.com/ros2/rmw,200,2020-03-10T17:32:32Z,2020-04-14T16:11:17Z,2020-04-14T16:13:23Z,CLOSED,False,19,7,1,https://github.com/iluetkeb,Add timestamps to rmw-internal structures.,12,[],https://github.com/ros2/rmw/pull/200,https://github.com/iluetkeb,4,https://github.com/ros2/rmw/pull/200#issuecomment-613536371,This goes together with ros2/rcl#591,Closed in favor of #214,True,{}
ros2/rmw,https://github.com/ros2/rmw,202,2020-03-17T01:47:30Z,2020-03-19T20:13:52Z,2020-03-19T20:13:52Z,MERGED,True,4,48,2,https://github.com/mm318,Move rmw_*_event_init() functions to rmw_implementation,2,[],https://github.com/ros2/rmw/pull/202,https://github.com/mm318,1,https://github.com/ros2/rmw/pull/202,"Related to ros2/ros2#822
This moves the rmw_publisher_event_init() and rmw_subscription_event_init() functions into rmw_implementation so that they will be able to check for whether or not the given type of rmw_event_type_t is supported by the chosen middleware.","Related to ros2/ros2#822
This moves the rmw_publisher_event_init() and rmw_subscription_event_init() functions into rmw_implementation so that they will be able to check for whether or not the given type of rmw_event_type_t is supported by the chosen middleware.",True,{}
ros2/rmw,https://github.com/ros2/rmw,202,2020-03-17T01:47:30Z,2020-03-19T20:13:52Z,2020-03-19T20:13:52Z,MERGED,True,4,48,2,https://github.com/mm318,Move rmw_*_event_init() functions to rmw_implementation,2,[],https://github.com/ros2/rmw/pull/202,https://github.com/mm318,2,https://github.com/ros2/rmw/pull/202#issuecomment-599841401,"Related to ros2/ros2#822
This moves the rmw_publisher_event_init() and rmw_subscription_event_init() functions into rmw_implementation so that they will be able to check for whether or not the given type of rmw_event_type_t is supported by the chosen middleware.","The full set of related pull requests are the following:

#202
ros2/rmw_implementation#88
ros2/rmw_fastrtps#354
ros2/rmw_connext#397
ros2/rmw_cyclonedds#115
ros2/rcl#600
ros2/rclcpp#1026

(rclpy did not need any changes as far as I can tell.)",True,{}
ros2/rmw,https://github.com/ros2/rmw,202,2020-03-17T01:47:30Z,2020-03-19T20:13:52Z,2020-03-19T20:13:52Z,MERGED,True,4,48,2,https://github.com/mm318,Move rmw_*_event_init() functions to rmw_implementation,2,[],https://github.com/ros2/rmw/pull/202,https://github.com/mm318,3,https://github.com/ros2/rmw/pull/202#issuecomment-600479029,"Related to ros2/ros2#822
This moves the rmw_publisher_event_init() and rmw_subscription_event_init() functions into rmw_implementation so that they will be able to check for whether or not the given type of rmw_event_type_t is supported by the chosen middleware.","@ivanpauno and @wjwwood, can we kick off CI and see if these changes are ready to be merged?",True,{}
ros2/rmw,https://github.com/ros2/rmw,202,2020-03-17T01:47:30Z,2020-03-19T20:13:52Z,2020-03-19T20:13:52Z,MERGED,True,4,48,2,https://github.com/mm318,Move rmw_*_event_init() functions to rmw_implementation,2,[],https://github.com/ros2/rmw/pull/202,https://github.com/ivanpauno,4,https://github.com/ros2/rmw/pull/202#issuecomment-600594967,"Related to ros2/ros2#822
This moves the rmw_publisher_event_init() and rmw_subscription_event_init() functions into rmw_implementation so that they will be able to check for whether or not the given type of rmw_event_type_t is supported by the chosen middleware.","@ivanpauno and @wjwwood, can we kick off CI and see if these changes are ready to be merged?

Sure thing (try to provide a gist for this cases):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,202,2020-03-17T01:47:30Z,2020-03-19T20:13:52Z,2020-03-19T20:13:52Z,MERGED,True,4,48,2,https://github.com/mm318,Move rmw_*_event_init() functions to rmw_implementation,2,[],https://github.com/ros2/rmw/pull/202,https://github.com/mm318,5,https://github.com/ros2/rmw/pull/202#issuecomment-600741827,"Related to ros2/ros2#822
This moves the rmw_publisher_event_init() and rmw_subscription_event_init() functions into rmw_implementation so that they will be able to check for whether or not the given type of rmw_event_type_t is supported by the chosen middleware.","Sure thing (try to provide a gist for this cases):

Sorry! Will do next time!",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,202,2020-03-17T01:47:30Z,2020-03-19T20:13:52Z,2020-03-19T20:13:52Z,MERGED,True,4,48,2,https://github.com/mm318,Move rmw_*_event_init() functions to rmw_implementation,2,[],https://github.com/ros2/rmw/pull/202,https://github.com/mm318,6,https://github.com/ros2/rmw/pull/202#issuecomment-601231618,"Related to ros2/ros2#822
This moves the rmw_publisher_event_init() and rmw_subscription_event_init() functions into rmw_implementation so that they will be able to check for whether or not the given type of rmw_event_type_t is supported by the chosen middleware.",Does it look like we can merge this set of pull requests?,True,{}
ros2/rmw,https://github.com/ros2/rmw,202,2020-03-17T01:47:30Z,2020-03-19T20:13:52Z,2020-03-19T20:13:52Z,MERGED,True,4,48,2,https://github.com/mm318,Move rmw_*_event_init() functions to rmw_implementation,2,[],https://github.com/ros2/rmw/pull/202,https://github.com/ivanpauno,7,https://github.com/ros2/rmw/pull/202#issuecomment-601235698,"Related to ros2/ros2#822
This moves the rmw_publisher_event_init() and rmw_subscription_event_init() functions into rmw_implementation so that they will be able to check for whether or not the given type of rmw_event_type_t is supported by the chosen middleware.","I will rerun linux CI job that failed randomly:

Linux 

Most of the failures in Windows should been fixed after ros2/launch#391, the others seem random flaky tests failing. Re-running to check:

Windows  (unrelated failures)",True,{}
ros2/rmw,https://github.com/ros2/rmw,202,2020-03-17T01:47:30Z,2020-03-19T20:13:52Z,2020-03-19T20:13:52Z,MERGED,True,4,48,2,https://github.com/mm318,Move rmw_*_event_init() functions to rmw_implementation,2,[],https://github.com/ros2/rmw/pull/202,https://github.com/mm318,8,https://github.com/ros2/rmw/pull/202#issuecomment-601343769,"Related to ros2/ros2#822
This moves the rmw_publisher_event_init() and rmw_subscription_event_init() functions into rmw_implementation so that they will be able to check for whether or not the given type of rmw_event_type_t is supported by the chosen middleware.","@ivanpauno, it looks like the Linux build randomly failed again. Also, the test failures on Windows look unrelated.",True,{}
ros2/rmw,https://github.com/ros2/rmw,203,2020-03-24T01:41:07Z,2020-04-27T07:10:55Z,2020-04-27T07:10:55Z,MERGED,True,652,2,17,https://github.com/brawner,Add tests for untested public functionality,2,[],https://github.com/ros2/rmw/pull/203,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/203,"This PR adds a bunch of simple tests for currently untested public API functionality. Gives a quick boost to coverage!

Linux 
Linux-aarch64 
macOS 
Windows 
Coverage 

Signed-off-by: Stephen Brawner brawner@gmail.com","This PR adds a bunch of simple tests for currently untested public API functionality. Gives a quick boost to coverage!

Linux 
Linux-aarch64 
macOS 
Windows 
Coverage 

Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,203,2020-03-24T01:41:07Z,2020-04-27T07:10:55Z,2020-04-27T07:10:55Z,MERGED,True,652,2,17,https://github.com/brawner,Add tests for untested public functionality,2,[],https://github.com/ros2/rmw/pull/203,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/203#issuecomment-603503633,"This PR adds a bunch of simple tests for currently untested public API functionality. Gives a quick boost to coverage!

Linux 
Linux-aarch64 
macOS 
Windows 
Coverage 

Signed-off-by: Stephen Brawner brawner@gmail.com","Adding some code to increase coverage a bit more.

Linux 
Linux-aarch64
macOS 
Windows 
Coverage",True,{}
ros2/rmw,https://github.com/ros2/rmw,203,2020-03-24T01:41:07Z,2020-04-27T07:10:55Z,2020-04-27T07:10:55Z,MERGED,True,652,2,17,https://github.com/brawner,Add tests for untested public functionality,2,[],https://github.com/ros2/rmw/pull/203,https://github.com/brawner,3,https://github.com/ros2/rmw/pull/203#issuecomment-617455511,"This PR adds a bunch of simple tests for currently untested public API functionality. Gives a quick boost to coverage!

Linux 
Linux-aarch64 
macOS 
Windows 
Coverage 

Signed-off-by: Stephen Brawner brawner@gmail.com","Rerunning CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,203,2020-03-24T01:41:07Z,2020-04-27T07:10:55Z,2020-04-27T07:10:55Z,MERGED,True,652,2,17,https://github.com/brawner,Add tests for untested public functionality,2,[],https://github.com/ros2/rmw/pull/203,https://github.com/brawner,4,https://github.com/ros2/rmw/pull/203#issuecomment-619174327,"This PR adds a bunch of simple tests for currently untested public API functionality. Gives a quick boost to coverage!

Linux 
Linux-aarch64 
macOS 
Windows 
Coverage 

Signed-off-by: Stephen Brawner brawner@gmail.com",Fixed conflicts,True,{}
ros2/rmw,https://github.com/ros2/rmw,203,2020-03-24T01:41:07Z,2020-04-27T07:10:55Z,2020-04-27T07:10:55Z,MERGED,True,652,2,17,https://github.com/brawner,Add tests for untested public functionality,2,[],https://github.com/ros2/rmw/pull/203,https://github.com/ahcorde,5,https://github.com/ros2/rmw/pull/203#issuecomment-619182725,"This PR adds a bunch of simple tests for currently untested public API functionality. Gives a quick boost to coverage!

Linux 
Linux-aarch64 
macOS 
Windows 
Coverage 

Signed-off-by: Stephen Brawner brawner@gmail.com",@brawner can we relaunch test? just in case,True,{}
ros2/rmw,https://github.com/ros2/rmw,203,2020-03-24T01:41:07Z,2020-04-27T07:10:55Z,2020-04-27T07:10:55Z,MERGED,True,652,2,17,https://github.com/brawner,Add tests for untested public functionality,2,[],https://github.com/ros2/rmw/pull/203,https://github.com/brawner,6,https://github.com/ros2/rmw/pull/203#issuecomment-619219107,"This PR adds a bunch of simple tests for currently untested public API functionality. Gives a quick boost to coverage!

Linux 
Linux-aarch64 
macOS 
Windows 
Coverage 

Signed-off-by: Stephen Brawner brawner@gmail.com","Good call

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,204,2020-03-25T22:03:00Z,2020-04-24T18:39:56Z,2020-04-24T22:40:34Z,MERGED,True,524,35,19,https://github.com/brawner,Adding doxygen documentation and READMEs to packages,3,[],https://github.com/ros2/rmw/pull/204,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/204,"Completing the API documentation of rmw. I tried to research as much as I could through rcl and rcutils packages which this package borrows from as well as design.ros2.org documentation.
One question I had for the maintainers was whether items that were strictly defined to a corresponding element in rcutils should have documention, or just link to rcutils documentation? For those, I copied the existing comments, but that does create two locations where that documentation has to be maintained.
Signed-off-by: Stephen Brawner brawner@gmail.com","Completing the API documentation of rmw. I tried to research as much as I could through rcl and rcutils packages which this package borrows from as well as design.ros2.org documentation.
One question I had for the maintainers was whether items that were strictly defined to a corresponding element in rcutils should have documention, or just link to rcutils documentation? For those, I copied the existing comments, but that does create two locations where that documentation has to be maintained.
Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,204,2020-03-25T22:03:00Z,2020-04-24T18:39:56Z,2020-04-24T22:40:34Z,MERGED,True,524,35,19,https://github.com/brawner,Adding doxygen documentation and READMEs to packages,3,[],https://github.com/ros2/rmw/pull/204,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/204#issuecomment-618657936,"Completing the API documentation of rmw. I tried to research as much as I could through rcl and rcutils packages which this package borrows from as well as design.ros2.org documentation.
One question I had for the maintainers was whether items that were strictly defined to a corresponding element in rcutils should have documention, or just link to rcutils documentation? For those, I copied the existing comments, but that does create two locations where that documentation has to be maintained.
Signed-off-by: Stephen Brawner brawner@gmail.com",Thanks for the feedback @ahcorde. Should be addressed.,True,{}
ros2/rmw,https://github.com/ros2/rmw,204,2020-03-25T22:03:00Z,2020-04-24T18:39:56Z,2020-04-24T22:40:34Z,MERGED,True,524,35,19,https://github.com/brawner,Adding doxygen documentation and READMEs to packages,3,[],https://github.com/ros2/rmw/pull/204,https://github.com/brawner,3,https://github.com/ros2/rmw/pull/204#issuecomment-618660753,"Completing the API documentation of rmw. I tried to research as much as I could through rcl and rcutils packages which this package borrows from as well as design.ros2.org documentation.
One question I had for the maintainers was whether items that were strictly defined to a corresponding element in rcutils should have documention, or just link to rcutils documentation? For those, I copied the existing comments, but that does create two locations where that documentation has to be maintained.
Signed-off-by: Stephen Brawner brawner@gmail.com","CI status:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,205,2020-03-25T22:44:15Z,2020-05-05T09:23:34Z,2020-05-05T09:23:34Z,MERGED,True,267,3,4,https://github.com/brawner,Quality declarations for rmw and rmw_implementation_cmake,3,[],https://github.com/ros2/rmw/pull/205,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/205,"Including aspirational quality declarations for rmw and rmw_implementation_cmake. While this only has one commit, it does technically depend on #203 and #204 and should be rebased when they are merged.
Signed-off-by: Stephen Brawner brawner@gmail.com","Including aspirational quality declarations for rmw and rmw_implementation_cmake. While this only has one commit, it does technically depend on #203 and #204 and should be rebased when they are merged.
Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,205,2020-03-25T22:44:15Z,2020-05-05T09:23:34Z,2020-05-05T09:23:34Z,MERGED,True,267,3,4,https://github.com/brawner,Quality declarations for rmw and rmw_implementation_cmake,3,[],https://github.com/ros2/rmw/pull/205,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/205#issuecomment-618728682,"Including aspirational quality declarations for rmw and rmw_implementation_cmake. While this only has one commit, it does technically depend on #203 and #204 and should be rebased when they are merged.
Signed-off-by: Stephen Brawner brawner@gmail.com",Updating to reflect current QL status (4).,True,{}
ros2/rmw,https://github.com/ros2/rmw,207,2020-03-26T18:15:40Z,,2020-12-21T21:34:25Z,OPEN,False,1,0,1,https://github.com/Karsten1987,add topic endpoint info to rmw,1,[],https://github.com/ros2/rmw/pull/207,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/207,"#186 introduces two functions to the RMW interface which are not present when including rmw/rmw.h.
For convenience to the rmw implementer, I think it makes sense to include all functions when including rmw/rmw.h.","#186 introduces two functions to the RMW interface which are not present when including rmw/rmw.h.
For convenience to the rmw implementer, I think it makes sense to include all functions when including rmw/rmw.h.",True,{}
ros2/rmw,https://github.com/ros2/rmw,207,2020-03-26T18:15:40Z,,2020-12-21T21:34:25Z,OPEN,False,1,0,1,https://github.com/Karsten1987,add topic endpoint info to rmw,1,[],https://github.com/ros2/rmw/pull/207,https://github.com/ivanpauno,2,https://github.com/ros2/rmw/pull/207#issuecomment-749207431,"#186 introduces two functions to the RMW interface which are not present when including rmw/rmw.h.
For convenience to the rmw implementer, I think it makes sense to include all functions when including rmw/rmw.h.","I'm not quite in favor of ""huge"" headers, as they make compilation times much slower.
IMO, we shouldn't keep adding things to rmw/rmw.h and similar, but I'm ok with this if somebody else approves.",True,{}
ros2/rmw,https://github.com/ros2/rmw,208,2020-03-29T23:57:24Z,2020-03-30T00:59:27Z,2020-03-30T01:00:38Z,MERGED,True,9,4,1,https://github.com/fujitatomoya,add comment about RMW_RET_UNSUPPORTED for loaned_message.,1,[],https://github.com/ros2/rmw/pull/208,https://github.com/fujitatomoya,1,https://github.com/ros2/rmw/pull/208,just adding some comment for RMW_RET_UNSUPPORTED corresponds to most of the rmw_implementation.,just adding some comment for RMW_RET_UNSUPPORTED corresponds to most of the rmw_implementation.,True,{}
ros2/rmw,https://github.com/ros2/rmw,208,2020-03-29T23:57:24Z,2020-03-30T00:59:27Z,2020-03-30T01:00:38Z,MERGED,True,9,4,1,https://github.com/fujitatomoya,add comment about RMW_RET_UNSUPPORTED for loaned_message.,1,[],https://github.com/ros2/rmw/pull/208,https://github.com/fujitatomoya,2,https://github.com/ros2/rmw/pull/208#issuecomment-605731442,just adding some comment for RMW_RET_UNSUPPORTED corresponds to most of the rmw_implementation.,"@Karsten1987
appreciate for the quick response!",True,{}
ros2/rmw,https://github.com/ros2/rmw,211,2020-04-09T22:10:31Z,2020-04-13T13:30:07Z,2020-04-13T14:20:17Z,MERGED,True,8,8,3,https://github.com/mikaelarguedas,security-context -> enclave,3,[],https://github.com/ros2/rmw/pull/211,https://github.com/mikaelarguedas,1,https://github.com/ros2/rmw/pull/211,Signed-off-by: Mikael Arguedas mikael.arguedas@gmail.com,Signed-off-by: Mikael Arguedas mikael.arguedas@gmail.com,True,{}
ros2/rmw,https://github.com/ros2/rmw,211,2020-04-09T22:10:31Z,2020-04-13T13:30:07Z,2020-04-13T14:20:17Z,MERGED,True,8,8,3,https://github.com/mikaelarguedas,security-context -> enclave,3,[],https://github.com/ros2/rmw/pull/211,https://github.com/mikaelarguedas,2,https://github.com/ros2/rmw/pull/211#issuecomment-612017264,Signed-off-by: Mikael Arguedas mikael.arguedas@gmail.com,CI at ros2/sros2#198 (comment),True,{}
ros2/rmw,https://github.com/ros2/rmw,212,2020-04-10T20:29:24Z,2020-04-24T00:13:42Z,2020-04-24T00:13:46Z,MERGED,True,382,80,9,https://github.com/mjcarroll,Add API for taking a sequence of messages,8,[],https://github.com/ros2/rmw/pull/212,https://github.com/mjcarroll,1,https://github.com/ros2/rmw/pull/212,"This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org","This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org",True,{}
ros2/rmw,https://github.com/ros2/rmw,212,2020-04-10T20:29:24Z,2020-04-24T00:13:42Z,2020-04-24T00:13:46Z,MERGED,True,382,80,9,https://github.com/mjcarroll,Add API for taking a sequence of messages,8,[],https://github.com/ros2/rmw/pull/212,https://github.com/mjcarroll,2,https://github.com/ros2/rmw/pull/212#issuecomment-612205627,"This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org","Covering all branches:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,212,2020-04-10T20:29:24Z,2020-04-24T00:13:42Z,2020-04-24T00:13:46Z,MERGED,True,382,80,9,https://github.com/mjcarroll,Add API for taking a sequence of messages,8,[],https://github.com/ros2/rmw/pull/212,https://github.com/mjcarroll,3,https://github.com/ros2/rmw/pull/212#issuecomment-617972919,"This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org","CI incorporating all changes:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,212,2020-04-10T20:29:24Z,2020-04-24T00:13:42Z,2020-04-24T00:13:46Z,MERGED,True,382,80,9,https://github.com/mjcarroll,Add API for taking a sequence of messages,8,[],https://github.com/ros2/rmw/pull/212,https://github.com/mjcarroll,4,https://github.com/ros2/rmw/pull/212#issuecomment-618131065,"This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,212,2020-04-10T20:29:24Z,2020-04-24T00:13:42Z,2020-04-24T00:13:46Z,MERGED,True,382,80,9,https://github.com/mjcarroll,Add API for taking a sequence of messages,8,[],https://github.com/ros2/rmw/pull/212,https://github.com/mjcarroll,5,https://github.com/ros2/rmw/pull/212#issuecomment-618414917,"This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org","Linux and macOS are failing with Connext patching issues, similar to here: ros2/rmw_connext#399 (comment)
Windows went green too quickly.",True,{}
ros2/rmw,https://github.com/ros2/rmw,212,2020-04-10T20:29:24Z,2020-04-24T00:13:42Z,2020-04-24T00:13:46Z,MERGED,True,382,80,9,https://github.com/mjcarroll,Add API for taking a sequence of messages,8,[],https://github.com/ros2/rmw/pull/212,https://github.com/mjcarroll,6,https://github.com/ros2/rmw/pull/212#issuecomment-618501608,"This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,212,2020-04-10T20:29:24Z,2020-04-24T00:13:42Z,2020-04-24T00:13:46Z,MERGED,True,382,80,9,https://github.com/mjcarroll,Add API for taking a sequence of messages,8,[],https://github.com/ros2/rmw/pull/212,https://github.com/mjcarroll,7,https://github.com/ros2/rmw/pull/212#issuecomment-618633763,"This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org","One more?

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,212,2020-04-10T20:29:24Z,2020-04-24T00:13:42Z,2020-04-24T00:13:46Z,MERGED,True,382,80,9,https://github.com/mjcarroll,Add API for taking a sequence of messages,8,[],https://github.com/ros2/rmw/pull/212,https://github.com/mjcarroll,8,https://github.com/ros2/rmw/pull/212#issuecomment-618693686,"This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,212,2020-04-10T20:29:24Z,2020-04-24T00:13:42Z,2020-04-24T00:13:46Z,MERGED,True,382,80,9,https://github.com/mjcarroll,Add API for taking a sequence of messages,8,[],https://github.com/ros2/rmw/pull/212,https://github.com/mjcarroll,9,https://github.com/ros2/rmw/pull/212#issuecomment-618710855,"This will allow users to take multiple messages in one take call if they
are available in the underlying middleware, versus having to make
multiple rmw_take calls in a row.
Signed-off-by: Michael Carroll michael@openrobotics.org",macOS rebuild,True,{}
ros2/rmw,https://github.com/ros2/rmw,213,2020-04-11T03:45:00Z,2020-04-11T04:58:30Z,2020-04-11T04:58:33Z,MERGED,True,3,3,1,https://github.com/dirk-thomas,rename rosidl_generator_c namespace to rosidl_runtime_c,1,[],https://github.com/ros2/rmw/pull/213,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/213,Related to ros2/rosidl#458.,Related to ros2/rosidl#458.,True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/iluetkeb,1,https://github.com/ros2/rmw/pull/214,"See ros2/design#259
This replaces #200 as discussed.","See ros2/design#259
This replaces #200 as discussed.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/rotu,2,https://github.com/ros2/rmw/pull/214#issuecomment-616026794,"See ros2/design#259
This replaces #200 as discussed.","BTW, I think rmw_time_t represents a duration - and it might be more appropriate to use rcutils_time_point_value_t.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/rotu,3,https://github.com/ros2/rmw/pull/214#issuecomment-616425651,"See ros2/design#259
This replaces #200 as discussed.","Agree on send_response, but why should they not be applicable to take_response?

Because these are request ID timestamps (being in the rmw_request_id_t struct). If you mean timestamps for the response message in a rmw_message_info_t, I support that.

Using rmw_message_info_t would duplicate the sender ID

I have to think about duplicating the sender ID. I think the intent is to identify the service, which might or might not correspond with a publisher ID. AFAICT, nobody defined how “services” map to DDS entities, and I don’t know what sender IDs are actually used for nor how this is supposed to behave if a service has multiple servers available

Personally, I'm not a big fan of the with_info methods.

👍 maybe there’s a principled reason they exist, but I hate them too. I’d rather keep the number of RMW methods down. Leave them null or just ignore the value. (But please document if the argument is nullable).",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/rotu,4,https://github.com/ros2/rmw/pull/214#issuecomment-616625268,"See ros2/design#259
This replaces #200 as discussed.","I’m implementing, it occurs that this breaks the time abstraction https://design.ros2.org/articles/clock_and_time.html since ROS Time is not defined at the RMW level. I’m not sure what if anything should be done about this.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/iluetkeb,5,https://github.com/ros2/rmw/pull/214#issuecomment-616641853,"See ros2/design#259
This replaces #200 as discussed.","I’m implementing, it occurs that this breaks the time abstraction

Yeah, I've worried a bit about that as well. It's not so easy to fix that.
However, since we're not planning on giving these timestamps to the application, it should not really matter. They are only used by the executor and there, only ordering does matter, really.
In any case, if we intend to implement the clock abstraction at some point, we should be able to do so without breaking ABI. Therefore, right now I'm more thinking about whether we need to change from rmw_time_t to rcutils_time_point_value_t.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/rotu,6,https://github.com/ros2/rmw/pull/214#issuecomment-617088978,"See ros2/design#259
This replaces #200 as discussed.","so we don't put the message info changes at schedule risk

@wjwwood for Earth 2.0, let’s enable use_sim_time, okay?",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/iluetkeb,7,https://github.com/ros2/rmw/pull/214#issuecomment-617136581,"See ros2/design#259
This replaces #200 as discussed.","for Earth 2.0, let’s enable use_sim_time, okay?

Can you start a design issue on that? Otherwise we probably forget. Personally I'm not convinced it's necessary, so I'm not going to drive it, but I will gladly participate in a discussion.",True,{'THUMBS_UP': ['https://github.com/rotu']}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,8,https://github.com/ros2/rmw/pull/214#issuecomment-617320764,"See ros2/design#259
This replaces #200 as discussed.","AFAICT, nobody defined how “services” map to DDS entities, and I don’t know what sender IDs are actually used for nor how this is supposed to behave if a service has multiple servers available

Yeah, I didn't write that part of the rmw interface, but my guess is that ""writer_guid"" should be ""requester_guid"" and it should identify the sender of the request, this might be a DDS entity guid, like a data writer, or it might be something else, but the goal is that with the writer/requester id and a sequence number that it uniquely identifies a single request.
Separately we might need a responder id so the requester can know who responded, but that's not strictly needed I think. The response does need to include the writer/requester id and the sequence number so it can ensure the response is intended for themselves and to which request the response should be delivered, in the case of concurrent requests.

I’m implementing, it occurs that this breaks the time abstraction https://design.ros2.org/articles/clock_and_time.html since ROS Time is not defined at the RMW level. I’m not sure what if anything should be done about this.

I don't think we need source and received timestamps in ROS time, I think system time is ok instead of ROS time.
However, we have to keep in mind that system time can slew and jump, and also that it has leap seconds. Perhaps there should be a third timestamp which is steady_received_timestamp which uses a monotonically increasing steady clock? You could imagine a fourth steady_source_timestamp, but that would only be useful for comparing time deltas in multiple messages as it would not be associated with a specific system time stamp, though it should be ""close"" to the source_timestamp.
I've long wanted to have an option in our software stack for TAI time, which is both a time point (uses unix epoch) but also is monotonically increasing (no leap seconds).

In any case, if we intend to implement the clock abstraction at some point, we should be able to do so without breaking ABI. Therefore, right now I'm more thinking about whether we need to change from rmw_time_t to rcutils_time_point_value_t.

Since these times are time points and not durations (because we're using system time), using rcutils_time_point_value_t is ok. I'm not sure why we are still using the split struct style in rmw, maybe because that's what the messages are using, or maybe I just never had time to push down my ""single variable timestamp"" ideas into rmw from rcl.
I would recommend doing a #define rmw_time_point_value_t rcutils_time_point_value_t and similar aliases for the related time functions, and then use rmw_time_point_value_t in the struct. Just in case we need to refactor and not use rcutils (or change the name or something) in the future.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/iluetkeb,9,https://github.com/ros2/rmw/pull/214#issuecomment-617336900,"See ros2/design#259
This replaces #200 as discussed.","Since these times are time points and not durations (because we're using system time), using rcutils_time_point_value_t is ok.

Done in b5d636a",True,"{'THUMBS_UP': ['https://github.com/wjwwood', 'https://github.com/rotu']}"
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,10,https://github.com/ros2/rmw/pull/214#issuecomment-617961750,"See ros2/design#259
This replaces #200 as discussed.","Ok, here's CI:

Linux 
Linux-aarch64 
macOS 
Windows 

This CI includes these pull requests:

#214
ros2/rcl#619
ros2/rclpy#542
ros2/rmw_fastrtps#368
ros2/rmw_cyclonedds#157

And builds up to demo_nodes_cpp and demo_nodes_py, just to check things out quickly.
Also, it only builds with Fast-RTPS static, as the cyclone pr doesn't look to be updated with the new timestamp type.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,11,https://github.com/ros2/rmw/pull/214#issuecomment-618192302,"See ros2/design#259
This replaces #200 as discussed.","I was going to try and do the message info along with the service info pr's, but there's too much missing still for the service info, e.g. connext is not working, and I cannot edit the bosch forks, so I have been spending a lot of time making my own. Also, I cannot edit the cyclone pr that @iluetkeb put forward, but there are issues with it, so I won't take it as-is either.
Instead, here is CI building and testing everything including only this pr, the associated ones above it, and the fast rtps changes:

Linux 
Linux-aarch64 
macOS 
Windows 

To be specific this includes:

#214
ros2/rcl#619
ros2/rclpy#542
ros2/rmw_fastrtps#368",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,12,https://github.com/ros2/rmw/pull/214#issuecomment-618199270,"See ros2/design#259
This replaces #200 as discussed.","So, maybe services with Connext is further along than I thought, but I was missing this pull request: ros2/rosidl_typesupport_connext#53
Either way, I think trying to get messages tested before nightly's run was the best bet.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,13,https://github.com/ros2/rmw/pull/214#issuecomment-618596040,"See ros2/design#259
This replaces #200 as discussed.","Ok another round of CI, building and testing with --packages-up-to test_rclcpp demo_nodes_cpp demo_nodes_py, including cyclone and Connext too:

Linux 
Linux-aarch64 
macOS 
Windows 

This one now includes @iluetkeb's cyclone pr:

#214
ros2/rcl#619
ros2/rclpy#542
ros2/rmw_fastrtps#368
ros2/rmw_cyclonedds#163",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/iluetkeb,14,https://github.com/ros2/rmw/pull/214#issuecomment-618606723,"See ros2/design#259
This replaces #200 as discussed.",This has a patch failure with connext. Is that my failure?,True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/iluetkeb,15,https://github.com/ros2/rmw/pull/214#issuecomment-618608423,"See ros2/design#259
This replaces #200 as discussed.","@wjwwood This fails with a connext patch failure, but I didn't change rmw_connext for these PRs, so it shouldn't be me...",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,16,https://github.com/ros2/rmw/pull/214#issuecomment-618610236,"See ros2/design#259
This replaces #200 as discussed.",Not sure I’m checking.,True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,17,https://github.com/ros2/rmw/pull/214#issuecomment-618617495,"See ros2/design#259
This replaces #200 as discussed.",I don’t think it was my ci setting or your changes. I’m raising it up the chain.,True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/iluetkeb,18,https://github.com/ros2/rmw/pull/214#issuecomment-618634610,"See ros2/design#259
This replaces #200 as discussed.",#212 seemed to have a similar issue.,True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,19,https://github.com/ros2/rmw/pull/214#issuecomment-618645904,"See ros2/design#259
This replaces #200 as discussed.","@iluetkeb there are linter failures...
https://ci.ros2.org/job/ci_linux-aarch64/5943/testReport/junit/(root)/projectroot/flake8/
https://ci.ros2.org/job/ci_linux-aarch64/5943/testReport/junit/(root)/projectroot/uncrustify/
Are you still around to have a look, or should I?
Please try to run the tests (at least the linters) locally before pushing things. Our CI turn around is very long to catch things like this which can easily be caught locally.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,20,https://github.com/ros2/rmw/pull/214#issuecomment-618648095,"See ros2/design#259
This replaces #200 as discussed.",The failure on Linux is apparently some kind of known flaky build issue. I'll just have to re-run it after we fix the linter issues.,True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/iluetkeb,21,https://github.com/ros2/rmw/pull/214#issuecomment-618648489,"See ros2/design#259
This replaces #200 as discussed.","I'm still around.

there are linter failures...

The links you provided don't contain errors... Are they the right ones?

Please try to run the tests (at least the linters) locally before pushing things.

I do, at least before asking for CI. Sometimes I forget, but I think in this case there may be something else going on.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,22,https://github.com/ros2/rmw/pull/214#issuecomment-618649154,"See ros2/design#259
This replaces #200 as discussed.","No, sorry that's yet another bug in Jenkins, sometimes it links you to a different result, here you can check the arm64 linux job directly, under failing tests:
https://ci.ros2.org/job/ci_linux-aarch64/5943/",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,23,https://github.com/ros2/rmw/pull/214#issuecomment-618650474,"See ros2/design#259
This replaces #200 as discussed.","I do, at least before asking for CI. Sometimes I forget, but I think in this case there may be something else going on.

Of course, I just want to remind you in case you weren't. It's not obvious to everyone.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/iluetkeb,24,https://github.com/ros2/rmw/pull/214#issuecomment-618657502,"See ros2/design#259
This replaces #200 as discussed.","So, the rclpy style issues should be addressed now, and I also added returning 0 for received timestamp in rmw_cyclonedds.",True,{}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/wjwwood,25,https://github.com/ros2/rmw/pull/214#issuecomment-618669106,"See ros2/design#259
This replaces #200 as discussed.","New CI with everything, but with --packages-up-to rclpy on Linux to see that we fixed linting issues:

Windows and macOS looked ok though.",True,{'ROCKET': ['https://github.com/iluetkeb']}
ros2/rmw,https://github.com/ros2/rmw,214,2020-04-14T15:33:21Z,2020-04-23T21:28:52Z,2020-09-01T16:04:33Z,MERGED,True,35,1,3,https://github.com/iluetkeb,Add timestamps to message info,3,[],https://github.com/ros2/rmw/pull/214,https://github.com/ros-discourse,26,https://github.com/ros2/rmw/pull/214#issuecomment-684963743,"See ros2/design#259
This replaces #200 as discussed.","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros2-middleware-change-proposal/15863/7",True,{}
ros2/rmw,https://github.com/ros2/rmw,216,2020-04-20T21:54:58Z,2020-04-21T03:34:38Z,2020-04-21T03:34:41Z,MERGED,True,6,0,1,https://github.com/sloretz,Document rmw_destroy_node may assume correct destruction order,1,[],https://github.com/ros2/rmw/pull/216,https://github.com/sloretz,1,https://github.com/ros2/rmw/pull/216,"I looked at three rmw implementations, rmw_fastrtps_shared_cpp, rmw_connect_shared_cpp, and rmw_cyclone_cpp, and it seems like they all assume higher layers destroy entities created from nodes before the node itself is destroyed. This PR documents that rmw implementations may assume this.
This also adds an option for rmw implementations to choose to check that assumption and refuse to destroy the node if not all entities created from it have been destroyed. No rmw implementation does this, but I think it would be nice if one did to make it easier to catch destruction order bugs.
Context: ros2/rcl#585
Another PR in rcl documenting that the destruction order responsibility belongs to the client libraries: ros2/rcl#625","I looked at three rmw implementations, rmw_fastrtps_shared_cpp, rmw_connect_shared_cpp, and rmw_cyclone_cpp, and it seems like they all assume higher layers destroy entities created from nodes before the node itself is destroyed. This PR documents that rmw implementations may assume this.
This also adds an option for rmw implementations to choose to check that assumption and refuse to destroy the node if not all entities created from it have been destroyed. No rmw implementation does this, but I think it would be nice if one did to make it easier to catch destruction order bugs.
Context: ros2/rcl#585
Another PR in rcl documenting that the destruction order responsibility belongs to the client libraries: ros2/rcl#625",True,{}
ros2/rmw,https://github.com/ros2/rmw,216,2020-04-20T21:54:58Z,2020-04-21T03:34:38Z,2020-04-21T03:34:41Z,MERGED,True,6,0,1,https://github.com/sloretz,Document rmw_destroy_node may assume correct destruction order,1,[],https://github.com/ros2/rmw/pull/216,https://github.com/sloretz,2,https://github.com/ros2/rmw/pull/216#issuecomment-616878352,"I looked at three rmw implementations, rmw_fastrtps_shared_cpp, rmw_connect_shared_cpp, and rmw_cyclone_cpp, and it seems like they all assume higher layers destroy entities created from nodes before the node itself is destroyed. This PR documents that rmw implementations may assume this.
This also adds an option for rmw implementations to choose to check that assumption and refuse to destroy the node if not all entities created from it have been destroyed. No rmw implementation does this, but I think it would be nice if one did to make it easier to catch destruction order bugs.
Context: ros2/rcl#585
Another PR in rcl documenting that the destruction order responsibility belongs to the client libraries: ros2/rcl#625","CI (test just rmw)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/iluetkeb,1,https://github.com/ros2/rmw/pull/217,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/iluetkeb,2,https://github.com/ros2/rmw/pull/217#issuecomment-618067965,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","This looks reasonable, but it will definitely require changes in rclcpp and rclpy.

What kind of changes? There are compatibility methods in rcl, so you can still call it the old way.",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/217#issuecomment-618086480,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","There is no ""nice"" way to get this information in C++, we'd need new functions and callback types for rclcpp Clients/Services. It is completely inaccessible in Python atm, AFAICT.",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/iluetkeb,4,https://github.com/ros2/rmw/pull/217#issuecomment-618308257,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","There is no ""nice"" way to get this information in C++, we'd need new functions and callback types for rclcpp Clients/Services.

The ""user"", as in a person writing a ROS node, shouldn't need it. AFAICT, the user cannot currently get the message_info_t either, right? At least I could not find a way to create a subscription callback receiving it.
For the executor, the rcl-functions should suffice, shouldn't they?
I mean, I'm happy to add a better way to access this, but currently I don't understand the use-case.",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/217#issuecomment-618512155,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","Without python code to convert the new struct into a pyobj the executor, which is in python, cannot use it either. Either way it needs to be in python so user could use it if they wanted.",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/iluetkeb,6,https://github.com/ros2/rmw/pull/217#issuecomment-618512892,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","Got it. That’s in the works already, I’ll push after dinner.",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/217#issuecomment-618513387,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","Sorry you were speaking about c++, still the user should have the option of looking at the time stamps in think. It would require new callback signatures to expose that to them. Also for the case of using it without an executor the user needs all this information to make decisions about when to execute it.",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/wjwwood,8,https://github.com/ros2/rmw/pull/217#issuecomment-618731588,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","CI with all rmw's, building and testing --packages-up-to demo_nodes_cpp demo_nodes_py test_rclcpp:

Linux 
Linux-aarch64 
macOS 
Windows 

This includes these pull requests:

#217
ros2/rmw_implementation#96
ros2/rcl#627
ros2/rclpy#545
ros2/rmw_fastrtps#369
ros2/rmw_connext#412
ros2/rosidl_typesupport_connext#53
ros2/rmw_cyclonedds#161",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/217#issuecomment-618766758,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","New CI after linter fixes:

Linux: 

this failure looks new to me, but has nothing to do with the changes in rcl or rmw_cyclone for this pr:

https://ci.ros2.org/job/ci_linux/10480/testReport/rcl/TestGuardConditionFixture__rmw_cyclonedds_cpp/test_rcl_guard_condition_accessors/


the rest of the failures look to be known flaky",True,{}
ros2/rmw,https://github.com/ros2/rmw,217,2020-04-21T13:35:08Z,2020-04-24T04:30:56Z,2020-09-01T16:04:32Z,MERGED,True,12,4,2,https://github.com/iluetkeb,Service timestamps,3,['enhancement'],https://github.com/ros2/rmw/pull/217,https://github.com/ros-discourse,10,https://github.com/ros2/rmw/pull/217#issuecomment-684963732,"Proposal to add timestamps on service request and response (for ros2/design#259)
This requires a few related PR's (see below for mentions).","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros2-middleware-change-proposal/15863/7",True,{}
ros2/rmw,https://github.com/ros2/rmw,218,2020-04-21T23:21:47Z,2020-04-22T15:36:40Z,2020-04-22T15:36:44Z,MERGED,True,5,3,1,https://github.com/dirk-thomas,export targets in a addition to include directories / libraries,1,[],https://github.com/ros2/rmw/pull/218,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/218,Related to ros2/ros2#904.,Related to ros2/ros2#904.,True,{}
ros2/rmw,https://github.com/ros2/rmw,218,2020-04-21T23:21:47Z,2020-04-22T15:36:40Z,2020-04-22T15:36:44Z,MERGED,True,5,3,1,https://github.com/dirk-thomas,export targets in a addition to include directories / libraries,1,[],https://github.com/ros2/rmw/pull/218,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/218#issuecomment-617854602,Related to ros2/ros2#904.,"Linux 
Linux-aarch64 
macOS 
Windows 

All warnings and test failures seem to be the same as on the target branch already.",True,{}
ros2/rmw,https://github.com/ros2/rmw,220,2020-04-22T22:12:41Z,2020-04-23T01:33:01Z,2020-04-23T19:57:03Z,MERGED,True,23,1,2,https://github.com/dirk-thomas,fix missing target dependency on rosidl_runtime_c,1,[],https://github.com/ros2/rmw/pull/220,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/220,"Related to ros2/ros2#904.
Needed for 
  
    
      rmw/rmw/include/rmw/rmw.h
    
    
        Lines 93 to 95
      in
      21dc0db
    
  
  
    

        
          
           #include ""rosidl_runtime_c/message_bounds_struct.h"" 
        

        
          
           #include ""rosidl_runtime_c/message_type_support_struct.h"" 
        

        
          
           #include ""rosidl_runtime_c/service_type_support_struct.h"" 
        
    
  

.","Related to ros2/ros2#904.
Needed for 
  
    
      rmw/rmw/include/rmw/rmw.h
    
    
        Lines 93 to 95
      in
      21dc0db
    
  
  
    

        
          
           #include ""rosidl_runtime_c/message_bounds_struct.h"" 
        

        
          
           #include ""rosidl_runtime_c/message_type_support_struct.h"" 
        

        
          
           #include ""rosidl_runtime_c/service_type_support_struct.h"" 
        
    
  

.",True,{}
ros2/rmw,https://github.com/ros2/rmw,220,2020-04-22T22:12:41Z,2020-04-23T01:33:01Z,2020-04-23T19:57:03Z,MERGED,True,23,1,2,https://github.com/dirk-thomas,fix missing target dependency on rosidl_runtime_c,1,[],https://github.com/ros2/rmw/pull/220,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/220#issuecomment-618124920,"Related to ros2/ros2#904.
Needed for 
  
    
      rmw/rmw/include/rmw/rmw.h
    
    
        Lines 93 to 95
      in
      21dc0db
    
  
  
    

        
          
           #include ""rosidl_runtime_c/message_bounds_struct.h"" 
        

        
          
           #include ""rosidl_runtime_c/message_type_support_struct.h"" 
        

        
          
           #include ""rosidl_runtime_c/service_type_support_struct.h"" 
        
    
  

.","CI builds up to rclcpp, testing only the touched packages (for CMake linters):

Linux  (unrelated compiler warnings)
Linux-aarch64  (unrelated compiler warnings)
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,221,2020-04-23T20:07:36Z,2020-04-23T20:47:03Z,2020-04-23T20:47:08Z,MERGED,True,5,23,3,https://github.com/dirk-thomas,add build dep on rosidl_runtime_c to work with CMake < 3.13,2,['bug'],https://github.com/ros2/rmw/pull/221,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/221,"Fixes #220 (comment)
Bionic builds:

Before: 
After:","Fixes #220 (comment)
Bionic builds:

Before: 
After:",True,{}
ros2/rmw,https://github.com/ros2/rmw,222,2020-04-23T20:48:12Z,2020-04-24T22:42:21Z,2020-04-24T22:42:24Z,MERGED,True,0,1,1,https://github.com/Karsten1987,Delete superfluous empty line,1,[],https://github.com/ros2/rmw/pull/222,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/222,,,True,{}
ros2/rmw,https://github.com/ros2/rmw,222,2020-04-23T20:48:12Z,2020-04-24T22:42:21Z,2020-04-24T22:42:24Z,MERGED,True,0,1,1,https://github.com/Karsten1987,Delete superfluous empty line,1,[],https://github.com/ros2/rmw/pull/222,https://github.com/dirk-thomas,2,https://github.com/ros2/rmw/pull/222#issuecomment-619267096,,@Karsten1987 Ping.,True,{}
ros2/rmw,https://github.com/ros2/rmw,223,2020-04-24T13:25:06Z,2020-04-24T20:56:05Z,2020-04-24T21:00:14Z,MERGED,True,4,4,1,https://github.com/mjcarroll,Rename rosidl_message_bounds_t,1,[],https://github.com/ros2/rmw/pull/223,https://github.com/mjcarroll,1,https://github.com/ros2/rmw/pull/223,"Addresses changes from ros2/rosidl#475
Signed-off-by: Michael Carroll michael@openrobotics.org","Addresses changes from ros2/rosidl#475
Signed-off-by: Michael Carroll michael@openrobotics.org",True,{}
ros2/rmw,https://github.com/ros2/rmw,223,2020-04-24T13:25:06Z,2020-04-24T20:56:05Z,2020-04-24T21:00:14Z,MERGED,True,4,4,1,https://github.com/mjcarroll,Rename rosidl_message_bounds_t,1,[],https://github.com/ros2/rmw/pull/223,https://github.com/clalancette,2,https://github.com/ros2/rmw/pull/223#issuecomment-619236614,"Addresses changes from ros2/rosidl#475
Signed-off-by: Michael Carroll michael@openrobotics.org",Approved.,True,{}
ros2/rmw,https://github.com/ros2/rmw,224,2020-04-24T22:39:35Z,2020-04-24T22:41:00Z,2020-04-24T22:42:57Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,fix linter warning,1,['bug'],https://github.com/ros2/rmw/pull/224,https://github.com/dirk-thomas,1,https://github.com/ros2/rmw/pull/224,"Fix regression introduced in #204.
@brawner FYI.","Fix regression introduced in #204.
@brawner FYI.",True,{}
ros2/rmw,https://github.com/ros2/rmw,224,2020-04-24T22:39:35Z,2020-04-24T22:41:00Z,2020-04-24T22:42:57Z,MERGED,True,1,1,1,https://github.com/dirk-thomas,fix linter warning,1,['bug'],https://github.com/ros2/rmw/pull/224,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/224#issuecomment-619268606,"Fix regression introduced in #204.
@brawner FYI.",My bad Dirk. The CI job I ran on that PR did catch the linter error and I missed it. Thanks for fixing it.,True,{}
ros2/rmw,https://github.com/ros2/rmw,225,2020-05-05T09:33:09Z,2020-05-05T17:15:18Z,2020-05-05T17:15:22Z,MERGED,True,23,9,2,https://github.com/ahcorde,Improved Quality Declarations,1,[],https://github.com/ros2/rmw/pull/225,https://github.com/ahcorde,1,https://github.com/ros2/rmw/pull/225,Signed-off-by: ahcorde ahcorde@gmail.com,Signed-off-by: ahcorde ahcorde@gmail.com,True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/227,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,2,https://github.com/ros2/rmw/pull/227#issuecomment-625355472,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","@wjwwood @jacobperron can you review this and the connected PRs?
I will then add a note to Foxy release notes, and update tutorials/design docs.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/rotu,3,https://github.com/ros2/rmw/pull/227#issuecomment-625410825,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","This is not yet deprecated. Shouldn't we be deprecating instead?
https://index.ros.org/doc/ros2/Contributing/Developer-Guide/#deprecation-strategy
https://semver.org/#how-should-i-handle-deprecating-functionality",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,4,https://github.com/ros2/rmw/pull/227#issuecomment-625412457,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","This is not yet deprecated. Shouldn't we be deprecating instead?
https://index.ros.org/doc/ros2/Contributing/Developer-Guide/#deprecation-strategy
https://semver.org/#how-should-i-handle-deprecating-functionality

No, I think it's not going to be deprecated, but directly removed.
The reasons are two:

It isn't working as it was intended to work.
It's rarely used, so it won't affect much users.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/227#issuecomment-625423667,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","I'll defer to @ivanpauno on this, as he has the most context, but my understanding is that the move to one participant per context makes this feature impossible to have working in a way that makes sense. So, it would not satisfy the first conditional of the linked policy, ""where possible"". But maybe my interpretation is wrong.",True,{'HEART': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/wjwwood,6,https://github.com/ros2/rmw/pull/227#issuecomment-625424611,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","@ivanpauno this is way past the API freeze date though, I think we need approval from several people to make this change at this point...",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/rotu,7,https://github.com/ros2/rmw/pull/227#issuecomment-625429628,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","I'll defer to @ivanpauno on this, as he has the most context, but my understanding is that the move to one participant per context makes this feature impossible to have working in a way that makes sense. So, it would not satisfy the first conditional of the linked policy, ""where possible"". But maybe my interpretation is wrong.

That seems to be a reason for deprecating it! Deprecate it and stub out the implementations if necessary. But don't introduce binary incompatibility just for the heck of it.


This is not yet deprecated. Shouldn't we be deprecating instead?
https://index.ros.org/doc/ros2/Contributing/Developer-Guide/#deprecation-strategy
https://semver.org/#how-should-i-handle-deprecating-functionality

No, I think it's not going to be deprecated, but directly removed.
The reasons are two:

It isn't working as it was intended to work.


That's a great reason to deprecate and gently redirect users.


It's rarely used, so it won't affect much users.


That's not even a consideration of either our developer guidelines nor SemVer
.I looked into this because I got pushback from @clalancette and @sloretz on a completely unused API function ros2/kdl_parser#7 (comment), who both felt it was incorrect to remove a function without first deprecating. We should enforce the policy or update the documented expectations.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,8,https://github.com/ros2/rmw/pull/227#issuecomment-625434699,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","@rotu The difference with ros2/kdl_parser#7 (comment), is that you can still use the deprecated API, and it will do what's supposed to do.
That's not the case here.
There will be a note in the release notes, so people will have enough information to understand the issue.
@ros2/team for approval",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/227#issuecomment-625436361,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","It isn't working as it was intended to work.
That's a great reason to deprecate and gently redirect users.


Well I can't speak for everyone on our team, that's part of why I said we should include more reviewers, but I see no value in providing an API where the most reliable thing to do is throw ""intentionally not implemented"". I think it's better to remove it. It's not a ""this other version is better"" or ""we wanted to change the name"", it's a ""this no longer even works and we can't replicate the old behavior"".",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/rotu,10,https://github.com/ros2/rmw/pull/227#issuecomment-625447893,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","I think many will assume that a deprecated API will still work.

That's what the message is for - informing the user of why an API is removed and how code should evolve.
C++: [[deprecated(""Broken. Please use XXX instead."")]].
C: RCUTILS_DEPRECATED_WITH_MSG(""Broken. Please use XXX instead."")
Removing a function is disruptive. It breaks the build and blocks direct testing of different versions of the same package. e.g. we couldn't test yesterday's CycloneDDS with tomorrow's rmw_implementation to compare whether a certain commit on a master branch broke the nightly.
Also, this redefines the existing numeric values of enum rmw_qos_liveliness_policy_t, another breaking change.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/wjwwood,11,https://github.com/ros2/rmw/pull/227#issuecomment-625480904,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","If the main concern is a message for the user, I'd be fine with having a stub in rmw which is deprecated, but continue with removing the implementations. The result will be a deprecation warning when using it, and a linker error later since the symbol is not provided.
I do not agree with providing a stub that just asserts or throws at runtime. I think that's just not useful for users.",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/wjwwood,12,https://github.com/ros2/rmw/pull/227#issuecomment-625482946,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","Removing a function is disruptive. It breaks the build and blocks direct testing of different versions of the same package. e.g. we couldn't test yesterday's CycloneDDS with tomorrow's rmw_implementation to compare whether a certain commit on a master branch broke the nightly.

You could still do this test, you would just have to include the commit that removes these functions. Btw, if cyclone still implements these functions, but they are removed from rmw there will be no build failure...
The point about the enum's is a good one though, I agree with the suggestion to explicitly set them to avoid changes in the number for now.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/rotu,13,https://github.com/ros2/rmw/pull/227#issuecomment-625503638,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","You could still do this test, you would just have to include the commit that removes these functions. Btw, if cyclone still implements these functions, but they are removed from rmw there will be no build failure...

Removing the enum breaks the build of rmw_cyclonedds. Removing the function definition in rmw.h breaks rcl. The overall effect of this PR is to require everything to change in lockstep.
The purpose of deprecation in SemVer is for exactly this reason. You deprecate the API in the next minor release, then adjust downstream consumers, then remove the API in the next major release.
If deprecation is not a priority, then we should remove it from the developer guideline and update the quality declaration for this package to state the actual versioning policy. Let's fix this instead of ignoring it.

I do think the current policy is a bit onerous - by having a cycle of annual releases and a policy of not introducing deprecations into a released distribution, we're saying it takes 2 years to fully delete any public API.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/wjwwood,14,https://github.com/ros2/rmw/pull/227#issuecomment-625543975,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","Removing the function definition in rmw.h breaks rcl. The overall effect of this PR is to require everything to change in lockstep.

I think that's fine since we're in pre-release. If this were post foxy release, then deprecation would be the only option so that old versions of rcl would continue to work. Before a release we commonly make changes that require synchronized changes between things like rmw and rcl. I don't see any issues with that myself.

If deprecation is not a priority, then we should remove it from the developer guideline and update the quality declaration for this package to state the actual versioning policy. Let's fix this instead of ignoring it.

We're not ignoring it, in my opinion. Our docs say ""where possible"". We can expand that to more clearly point out that there is developer discretion in the decision to deprecate or not, but from my perspective it is possible to avoid deprecation with some reasoning behind it. There are cases were it is simply not technically feasible and cases were it just isn't worth it.
Even semver only states how you should deprecate (with docs and the like) and that if you deprecate you should at least do the minor version bump. It does not indicate when you must deprecate, nor does it advise on how to decide when to do that or not. If you asked on stack overflow I bet you'd get several opinions on this point, but nothing obviously definitive in my opinion.

I'm sorry you don't agree with me, but I remain unswayed in my opinion that keeping this functions in a broken or unimplemented state simply adds no value.
I am still open to having the declarations in rmw with deprecation messages and fixing the enums so they don't change values. @ivanpauno would you be willing to do that?",True,{'THUMBS_UP': ['https://github.com/dirk-thomas']}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/rotu,15,https://github.com/ros2/rmw/pull/227#issuecomment-625937723,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","I think that's fine since we're in pre-release. If this were post foxy release, then deprecation would be the only option so that old versions of rcl would continue to work. Before a release we commonly make changes that require synchronized changes between things like rmw and rcl. I don't see any issues with that myself.

ROS2 is in prerelease but rmw_cyclonedds_cpp, rmw_fastrtps, etc. have already released new minor versions. This change would necessarily entail at least a minor version bump for them. SemVer is very particular on this: ""Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications MUST be released as a new version.""


If deprecation is not a priority, then we should remove it from the developer guideline and update the quality declaration for this package to state the actual versioning policy. Let's fix this instead of ignoring it.

We're not ignoring it, in my opinion. Our docs say ""where possible"". We can expand that to more clearly point out that there is developer discretion in the decision to deprecate or not, but from my perspective it is possible to avoid deprecation with some reasoning behind it. There are cases were it is simply not technically feasible and cases were it just isn't worth it.

Deprecation is feasible. In this case I think it involves a ""harder deprecation"", e.g. making the function a no-op for one release cycle. I agree that ""soft deprecation"", i.e. ""keep everything working and document that it is going away"", is unattainable here.

Even semver only states how you should deprecate (with docs and the like) and that if you deprecate you should at least do the minor version bump. It does not indicate when you must deprecate, nor does it advise on how to decide when to do that or not. If you asked on stack overflow I bet you'd get several opinions on this point, but nothing obviously definitive in my opinion.

Yes, the SemVer specification on deprecations is all ""shoulds"" and no ""musts"". This is so downstream packages like every RMW implementation don't have to do a new release immediately in order to maintain compatibility.

I'm sorry you don't agree with me, but I remain unswayed in my opinion that keeping this functions in a broken or unimplemented state simply adds no value.

It keeps the build building and allows us to evolve the software rather than ""break everything and fix the fallout"" that usually accompanies sweeping changes across many repos. Allowing packages to evolve and roll back PRs independently, even in ROS2 ""core"" packages, is a massive value add.

I am still open to having the declarations in rmw with deprecation messages and fixing the enums so they don't change values. @ivanpauno would you be willing to do that?

This sounds like exactly what I'm looking for here too. I don't know that we still disagree?",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/wjwwood,16,https://github.com/ros2/rmw/pull/227#issuecomment-625945247,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","ROS2 is in prerelease but rmw_cyclonedds_cpp, rmw_fastrtps, etc. have already released new minor versions. This change would necessarily entail at least a minor version bump for them. SemVer is very particular on this: ""Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications MUST be released as a new version.""

And what's stopping them from releasing another version?

This sounds like exactly what I'm looking for here too. I don't know that we still disagree?

Well in my version they would not have implementations, even ones that do nothing. So you'd get a linking error (or possibly a runtime error when dlopening the rmw implementation) after getting a deprecation warning during compile.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/rotu,17,https://github.com/ros2/rmw/pull/227#issuecomment-625968167,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","Maybe instead of thinking about version numbers in terms of what API they change, it's easier to think about them in terms of change propagation:

MAJOR changes require downstream packages to make changes or break.
MINOR changes allow downstream packages to make changes.
PATCH changes don't ask anything of downstream packages.



ROS2 is in prerelease but rmw_cyclonedds_cpp, rmw_fastrtps, etc. have already released new minor versions. This change would necessarily entail at least a minor version bump for them. SemVer is very particular on this: ""Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications MUST be released as a new version.""

And what's stopping them from releasing another version?

I think it's bad practice, but nothing makes it illegal. In retrospect, maybe these should have all been prerelease versions.

For Cyclone DDS, this means the rmw version being out of sync with the eclipse-cyclonedds version.
The proposed changes in e.g. ros2/rmw_cyclonedds#178, ros2/rmw_fastrtps#379 are not backwards compatible and would necessitate a MAJOR version bump, not a minor one.



This sounds like exactly what I'm looking for here too. I don't know that we still disagree?

Well in my version they would not have implementations, even ones that do nothing. So you'd get a linking error (or possibly a runtime error when dlopening the rmw implementation) after getting a deprecation warning during compile.

I think you have it backwards - you want to delete the declaration before the implementation.
Here's one way to make this change without requiring a synchronized version break:

Deprecate in rmw by adding a deprecation notice to the declaration and to the enum value. (MINOR change)
Stub out the function in rmw_implementation and stop loading the function so it's no longer exposed when loading the RMW at runtime. (PATCH change)
Remove the declaration in rmw so it's no longer exposed when loading the function at compile time. (MAJOR change)
Delete the function implementations in each rmw_... package. (MAJOR change)
Delete the stub in rmw_implementation (MAJOR change)",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,18,https://github.com/ros2/rmw/pull/227#issuecomment-625969049,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","I am still open to having the declarations in rmw with deprecation messages and fixing the enums so they don't change values. @ivanpauno would you be willing to do that?

Sure.
I've already solved the second point (fixing the enums).
I'm not sure of what you mean by the first one.
Do you mean leaving a rmw_node_assert_liveliness function that returns RMW_UNIMPLEMENTED and is marked with a deprecation attribute?
I can also create a rmw_node_assert_liveliness macro that generates a build error with a message.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/wjwwood,19,https://github.com/ros2/rmw/pull/227#issuecomment-625978051,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","I think it's bad practice

Why?

are not backwards compatible and would necessitate a MAJOR version bump, not a minor one.

Why is that an issue?

I think you have it backwards - you want to delete the declaration before the implementation.

If we were deprecating functionality we wanted to remove in the future, I'd agree. However, the difference here is that the functionality is gone now, no other option. There is no way to preserve the existing behavior, and that point is the reason why we cannot do what you laid out, not because we just don't want the take the steps. There's no opportunity to delete the declaration after the definition, we can either delete both now (original proposal for this pr) or delete the (no longer working) definition and leave the declaration only as a way to inform users why it is no longer there and then remove it later.
The alternative: ""replacing the broken definition with a noop, then removing the declaration, then removing the noop (doing a release for each step)"" is what I think is not worth the effort. If you want a version with the function available, use the current version, if you want to move forward you have to stop using the function immediately, there is no in between where you get to keep using the function and just have a warning. That's not ideal, but there's no alternative that actually works, as far as I see. If we left the definition with a throw not implemented, it would allow you to compile, but none of your tests for that function would pass anyways. There's no choice but to stop calling, implementing, and/or testing that function right now, so in effect its not deprecated it's already gone.
At any rate, I'm personally done discussing this in circles. My preference is to remove the definition now, leave something behind for users to run into (deprecated declaration or error macro), and do one major version bump release, and I don't think I will be persuaded otherwise. Others can weigh in if they want. Also, we can take what ever steps possible to avoid unnecessary breaks downstream, like the enum fix.


Do you mean leaving a rmw_node_assert_liveliness function that returns RMW_UNIMPLEMENTED and is marked with a deprecation attribute?

No, I mean leaving the declaration in rmw, adding a deprecation warning, and deleting it from everywhere else.

I can also create a rmw_node_assert_liveliness macro that generates a build error with a message.

Is that different than the deprecation warning with no implementation? I guess it's always a compiler error and not a warning? I'm fine with either.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,20,https://github.com/ros2/rmw/pull/227#issuecomment-625984494,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","Is that different than the deprecation warning with no implementation? I guess it's always a compiler error and not a warning? I'm fine with either.

Ah, yeah you're right. I will do that.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,21,https://github.com/ros2/rmw/pull/227#issuecomment-626012721,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,22,https://github.com/ros2/rmw/pull/227#issuecomment-626013772,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","@wjwwood I think this is ready.
I've made changes in:

#227
ros2/rmw_cyclonedds#178
ros2/rclpy#556",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/rotu,23,https://github.com/ros2/rmw/pull/227#issuecomment-626014231,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","I think it's bad practice

Why?



are not backwards compatible and would necessitate a MAJOR version bump, not a minor one.

Why is that an issue?

In the end, it just comes down to a personal judgement. I think API compatibility and stability are attractive software features; and that major releases of a package should happen when necessary due to package needs, and not just because an upstream package wants to tie up loose ends. Contrary to a long history of the ""ROS way"" of big releases spanning many repositories with long periods of instability between releases, I think it's important to decouple development of different, individually versioned and repositoried codebases.


I think you have it backwards - you want to delete the declaration before the implementation.

If we were deprecating functionality we wanted to remove in the future, I'd agree. However, the difference here is that the functionality is gone now, no other option. There is no way to preserve the existing behavior, and that point is the reason why we cannot do what you laid out, not because we just don't want the take the steps. There's no opportunity to delete the declaration after the definition, we can either delete both now (original proposal for this pr) or delete the (no longer working) definition and leave the declaration only as a way to inform users why it is no longer there and then remove it later.
If you want a version with the function available, use the current version, if you want to move forward you have to stop using the function immediately, there is no in between where you get to keep using the function and just have a warning.

Sorry. I mean the function declaration before the function definition. You're right that the functionality is already gone. I think API stability and build compatibility are still worth preserving, even if that means gutting a few function implementations to no-ops for a release.

At any rate, I'm personally done discussing this in circles. My preference is to remove the definition now, leave something behind for users to run into (deprecated declaration or error macro), and do one major version bump release, and I don't think I will be persuaded otherwise. Others can weigh in if they want. Also, we can take what ever steps possible to avoid unnecessary breaks downstream, like the enum fix.

I agree. I think everything has been said and we've both laid out our cases fully. I'm sympathetic to your take. It's very sensible and well-thought out, and nobody want to release broken or ugly code.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/jacobperron,24,https://github.com/ros2/rmw/pull/227#issuecomment-626027496,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","On the topic of bumping the version, I don't think it necessarily has to be a major bump as we have not release a 1.0.0 yet. I think a minor bump is also acceptable.
From https://semver.org/:

Major version zero (0.y.z) is for initial development. Anything MAY change at any time. The public API SHOULD NOT be considered stable.",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/wjwwood,25,https://github.com/ros2/rmw/pull/227#issuecomment-626028543,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","@jacobperron sure, but the plan is to move this to 1.0.0 for foxy anyways, since as semver recommends:

How do I know when to release 1.0.0?
If your software is being used in production, it should probably already be 1.0.0. If you have a stable API on which users have come to depend, you should be 1.0.0. If you’re worrying a lot about backwards compatibility, you should probably already be 1.0.0.

I think some or all of those things are true for this package now.",True,"{'THUMBS_UP': ['https://github.com/jacobperron', 'https://github.com/rotu']}"
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ros-discourse,26,https://github.com/ros2/rmw/pull/227#issuecomment-626075173,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros-2-foxy-fitzroy-call-for-testing-and-package-releases/13998/1",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,27,https://github.com/ros2/rmw/pull/227#issuecomment-626761527,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","New CI round:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,28,https://github.com/ros2/rmw/pull/227#issuecomment-626954878,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","Build up to rmw_implementation, test rmw (to test that linters now pass, and enum value deprecation is fine):

Linux 
Linux-aarch64 
Windows 

MacOS failed randomly last few times, another try:

macOS 


Retriggered Windows after failures:

Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,227,2020-05-07T16:07:24Z,2020-05-12T17:52:15Z,2020-05-12T17:52:19Z,MERGED,True,32,29,4,https://github.com/ivanpauno,Remove MANUAL_BY_NODE liveliness API,9,['in review'],https://github.com/ros2/rmw/pull/227,https://github.com/ivanpauno,29,https://github.com/ros2/rmw/pull/227#issuecomment-627319642,"It was agreed in the discussion here, that we were going to remove MANUAL_BY_NODE related liveliness API.
It would be great to actually do it before Foxy release, as it doesn't have more sense after the Participant/Context change.","Build up to rmw_implementation test rmw, after updated style in deprecation code:

Linux 
Linux-aarch64 
Windows 

Another full macos, because IDK what happened in last one:

macOS  (unrelated failures)",True,{}
ros2/rmw,https://github.com/ros2/rmw,228,2020-05-12T21:33:55Z,2020-05-13T06:28:34Z,2020-05-13T06:28:37Z,MERGED,True,4,2,2,https://github.com/brawner,Update QDs to reflect 1.0,1,[],https://github.com/ros2/rmw/pull/228,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/228,Signed-off-by: Stephen Brawner brawner@gmail.com,Signed-off-by: Stephen Brawner brawner@gmail.com,True,{}
ros2/rmw,https://github.com/ros2/rmw,229,2020-05-13T17:54:06Z,2020-05-13T19:48:54Z,2020-05-13T19:48:57Z,MERGED,True,2,0,1,https://github.com/hidmic,Fix cppcheck error,1,[],https://github.com/ros2/rmw/pull/229,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/229,Precisely what the title says. See this job for a failure example. .,Precisely what the title says. See this job for a failure example. .,True,{}
ros2/rmw,https://github.com/ros2/rmw,229,2020-05-13T17:54:06Z,2020-05-13T19:48:54Z,2020-05-13T19:48:57Z,MERGED,True,2,0,1,https://github.com/hidmic,Fix cppcheck error,1,[],https://github.com/ros2/rmw/pull/229,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/229#issuecomment-628163658,Precisely what the title says. See this job for a failure example. .,"CI up to ros2cli, launch, launch_ros, rmw and ament_lint:

Linux",True,{}
ros2/rmw,https://github.com/ros2/rmw,229,2020-05-13T17:54:06Z,2020-05-13T19:48:54Z,2020-05-13T19:48:57Z,MERGED,True,2,0,1,https://github.com/hidmic,Fix cppcheck error,1,[],https://github.com/ros2/rmw/pull/229,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/229#issuecomment-628179725,Precisely what the title says. See this job for a failure example. .,"I didn't see that failure when I ran CI, but maybe I omitted it.

It doesn't show up in rmw, but in source files of downstream packages that include it e.g. rmw_connext_shared_cpp which is included in above's CI run.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,230,2020-05-22T19:07:32Z,2020-05-29T20:50:00Z,2020-05-29T20:50:03Z,MERGED,True,1,1,1,https://github.com/clalancette,QD Security Vulnerability Declaration: REP 2006,1,[],https://github.com/ros2/rmw/pull/230,https://github.com/clalancette,1,https://github.com/ros2/rmw/pull/230,"This PR adds a link to REP-2006 (the Security Vulnerability Declaration) to the Quality Declaration for this repository.
Connects to ros2/ros2#924.","This PR adds a link to REP-2006 (the Security Vulnerability Declaration) to the Quality Declaration for this repository.
Connects to ros2/ros2#924.",True,{}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/232,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.","See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.",True,{}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/jacobperron,2,https://github.com/ros2/rmw/pull/232#issuecomment-641582195,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.","I'm happy if we distribute the event status definitions into their own header files, but I think it would be best done in it's own PR as it seems completely orthogonal to adding a new event type. At the very least, we should update this PR title to reflect that change and avoid squashing the two changes if we keep them in the same PR.",True,{}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/ivanpauno,3,https://github.com/ros2/rmw/pull/232#issuecomment-641597155,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.","I'm happy if we distribute the event status definitions into their own header files, but I think it would be best done in it's own PR as it seems completely orthogonal to adding a new event type. At the very least, we should update this PR title to reflect that change and avoid squashing the two changes if we keep them in the same PR.

Yes, I'm not planning to squash both commits.
The header redistribution was to avoid increasing the size of (the already big) types.h.
I then added the extra events_statuses folder, to avoid having a lots of headers in a flat layout.",True,{}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/232#issuecomment-642279219,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.","Yes, I'm not planning to squash both commits.

I'd much prefer you did and have two separate pr's. It makes changelogs and cherry-picking much easier... But that's fine this time.",True,{}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/ivanpauno,5,https://github.com/ros2/rmw/pull/232#issuecomment-642282802,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.","I'd much prefer you did and have two separate pr's. It makes changelogs and cherry-picking much easier... But that's fine this time.

If I rebase merge, the changelog generation and cherry-picking process will be exactly the same than if I open 2 PRs.
I also do the extra step of editing commit messages and adding a reference to the PR (like is automatically done when squash-merging) when rebase merging. So, it's easy to find the original PR from the commit.
I preferred in this case not splitting the PR, as this feature is already composed by 6 PRs.
I can split it if there's a strong preference for that workflow.",True,{}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/wjwwood,6,https://github.com/ros2/rmw/pull/232#issuecomment-642287623,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.","If I rebase merge, the changelog generation and cherry-picking process will be exactly the same than if I open 2 PRs. I also do the extra step of editing commit messages and adding a reference to the PR (like is automatically done when squash-merging) when rebase merging. So, it's easy to find the original PR from the commit.

If you're adding the back reference in the commit message then that's ok, that's the main thing that's nice to have in the changelog.",True,{}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/232#issuecomment-642288378,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.","I preferred in this case not splitting the PR, as this feature is already composed by 6 PRs.

Yeah, but the file reorganization could have been merged directly I think. This pr could have been based on it, and re-targeted  after it was merged. Just say, I'd prefer not to couple things into pull requests in those cases.",True,{}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/wjwwood,8,https://github.com/ros2/rmw/pull/232#issuecomment-642288509,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.","Again, this is all just for future reference. I think think this pr doesn't need to change.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/ivanpauno,9,https://github.com/ros2/rmw/pull/232#issuecomment-642793141,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.",Last force push edited commit messages without introducing code changes.,True,{}
ros2/rmw,https://github.com/ros2/rmw,232,2020-05-28T21:04:40Z,2020-06-17T21:57:30Z,2020-06-17T21:57:34Z,MERGED,True,330,120,10,https://github.com/ivanpauno,Add message lost event,2,['enhancement'],https://github.com/ros2/rmw/pull/232,https://github.com/ivanpauno,10,https://github.com/ros2/rmw/pull/232#issuecomment-642796344,"See #226.
First commit reorganizes event statuses headers in a subfolder, so we stop populating the old big rmw/types.h (the old headers are still including the new ones, to avoid creating a bunch of PRs together with this one).
The second commit actually implements what the title says.","Linux 
Linux-aarch64 
macOS  (unrelated failures)
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,233,2020-06-05T23:50:40Z,2020-06-06T20:25:03Z,2020-06-06T20:25:06Z,MERGED,True,17,6,2,https://github.com/brawner,Update Quality Declaration for QL 2,1,[],https://github.com/ros2/rmw/pull/233,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/233,"This updates the Quality Declaration to reflect this packages current status as QL 2.
Signed-off-by: Stephen Brawner brawner@gmail.com","This updates the Quality Declaration to reflect this packages current status as QL 2.
Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,235,2020-06-09T23:47:16Z,2020-06-10T19:08:40Z,2020-06-11T00:42:07Z,MERGED,True,14,4,1,https://github.com/brawner,Fix rmw_names_and_types_fini test to address issue #234,3,[],https://github.com/ros2/rmw/pull/235,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/235,"After recent PR in rcutils (ros2/rcutils#247), this test rmw_names_and_types_init had some fragile assumptions break, which were reported in issue #234. It also reinitializes names_and_types after it successfully finalizes it the first time, which was another issue.

Linux 
Linux-aarch64 
macOS 
Windows 

Signed-off-by: Stephen Brawner brawner@gmail.com","After recent PR in rcutils (ros2/rcutils#247), this test rmw_names_and_types_init had some fragile assumptions break, which were reported in issue #234. It also reinitializes names_and_types after it successfully finalizes it the first time, which was another issue.

Linux 
Linux-aarch64 
macOS 
Windows 

Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,236,2020-06-09T23:52:14Z,2020-06-10T17:44:26Z,2020-06-10T18:21:57Z,MERGED,True,33,0,2,https://github.com/brawner,RMW_PUBLIC to security_options_set_root_path,2,[],https://github.com/ros2/rmw/pull/236,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/236,"rmw_security_options_set_root_path was not exported as a public symbol and was untested. This adds the RMW_PUBLIC macro and relevant unit tests for the function.

Linux 
Linux-aarch64 
macOS 
Windows 

Signed-off-by: Stephen Brawner brawner@gmail.com","rmw_security_options_set_root_path was not exported as a public symbol and was untested. This adds the RMW_PUBLIC macro and relevant unit tests for the function.

Linux 
Linux-aarch64 
macOS 
Windows 

Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,236,2020-06-09T23:52:14Z,2020-06-10T17:44:26Z,2020-06-10T18:21:57Z,MERGED,True,33,0,2,https://github.com/brawner,RMW_PUBLIC to security_options_set_root_path,2,[],https://github.com/ros2/rmw/pull/236,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/236#issuecomment-641640808,"rmw_security_options_set_root_path was not exported as a public symbol and was untested. This adds the RMW_PUBLIC macro and relevant unit tests for the function.

Linux 
Linux-aarch64 
macOS 
Windows 

Signed-off-by: Stephen Brawner brawner@gmail.com",These remaining test failures are addressed in #235,True,{}
ros2/rmw,https://github.com/ros2/rmw,237,2020-06-09T23:55:54Z,2020-06-10T00:17:47Z,2020-06-10T00:17:50Z,MERGED,True,0,3,1,https://github.com/brawner,Remove redundant check,1,[],https://github.com/ros2/rmw/pull/237,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/237,"Based on the logic in this function, this check is currently never entered. Line 91 currently assures that size and types match each other. Therefore inside the for loop, names_and_types->types is always valid.
Signed-off-by: Stephen Brawner brawner@gmail.com","Based on the logic in this function, this check is currently never entered. Line 91 currently assures that size and types match each other. Therefore inside the for loop, names_and_types->types is always valid.
Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,237,2020-06-09T23:55:54Z,2020-06-10T00:17:47Z,2020-06-10T00:17:50Z,MERGED,True,0,3,1,https://github.com/brawner,Remove redundant check,1,[],https://github.com/ros2/rmw/pull/237,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/237#issuecomment-641640500,"Based on the logic in this function, this check is currently never entered. Line 91 currently assures that size and types match each other. Therefore inside the for loop, names_and_types->types is always valid.
Signed-off-by: Stephen Brawner brawner@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,237,2020-06-09T23:55:54Z,2020-06-10T00:17:47Z,2020-06-10T00:17:50Z,MERGED,True,0,3,1,https://github.com/brawner,Remove redundant check,1,[],https://github.com/ros2/rmw/pull/237,https://github.com/brawner,3,https://github.com/ros2/rmw/pull/237#issuecomment-641642968,"Based on the logic in this function, this check is currently never entered. Line 91 currently assures that size and types match each other. Therefore inside the for loop, names_and_types->types is always valid.
Signed-off-by: Stephen Brawner brawner@gmail.com",Failed test is resolved in #235,True,{}
ros2/rmw,https://github.com/ros2/rmw,237,2020-06-09T23:55:54Z,2020-06-10T00:17:47Z,2020-06-10T00:17:50Z,MERGED,True,0,3,1,https://github.com/brawner,Remove redundant check,1,[],https://github.com/ros2/rmw/pull/237,https://github.com/brawner,4,https://github.com/ros2/rmw/pull/237#issuecomment-641646286,"Based on the logic in this function, this check is currently never entered. Line 91 currently assures that size and types match each other. Therefore inside the for loop, names_and_types->types is always valid.
Signed-off-by: Stephen Brawner brawner@gmail.com",Merging since test failures are unrelated and addressed in separate PR.,True,{}
ros2/rmw,https://github.com/ros2/rmw,238,2020-06-10T00:02:49Z,2020-06-10T23:49:06Z,2020-06-18T21:14:25Z,MERGED,True,313,22,7,https://github.com/brawner,Increase rmw testing coverage above 95%,5,[],https://github.com/ros2/rmw/pull/238,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/238,"Following up #235, and #236 this PR adds a bit more coverage. With those two and this one, I believe coverage will be boosted above 95%. However, it likely conflicts with #236, and whichever gets approved last will have to be rebased.
Signed-off-by: Stephen Brawner brawner@gmail.com","Following up #235, and #236 this PR adds a bit more coverage. With those two and this one, I believe coverage will be boosted above 95%. However, it likely conflicts with #236, and whichever gets approved last will have to be rebased.
Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,238,2020-06-10T00:02:49Z,2020-06-10T23:49:06Z,2020-06-18T21:14:25Z,MERGED,True,313,22,7,https://github.com/brawner,Increase rmw testing coverage above 95%,5,[],https://github.com/ros2/rmw/pull/238,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/238#issuecomment-641642279,"Following up #235, and #236 this PR adds a bit more coverage. With those two and this one, I believe coverage will be boosted above 95%. However, it likely conflicts with #236, and whichever gets approved last will have to be rebased.
Signed-off-by: Stephen Brawner brawner@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,238,2020-06-10T00:02:49Z,2020-06-10T23:49:06Z,2020-06-18T21:14:25Z,MERGED,True,313,22,7,https://github.com/brawner,Increase rmw testing coverage above 95%,5,[],https://github.com/ros2/rmw/pull/238,https://github.com/brawner,3,https://github.com/ros2/rmw/pull/238#issuecomment-642312993,"Following up #235, and #236 this PR adds a bit more coverage. With those two and this one, I believe coverage will be boosted above 95%. However, it likely conflicts with #236, and whichever gets approved last will have to be rebased.
Signed-off-by: Stephen Brawner brawner@gmail.com","Moment of truth!

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,238,2020-06-10T00:02:49Z,2020-06-10T23:49:06Z,2020-06-18T21:14:25Z,MERGED,True,313,22,7,https://github.com/brawner,Increase rmw testing coverage above 95%,5,[],https://github.com/ros2/rmw/pull/238,https://github.com/brawner,4,https://github.com/ros2/rmw/pull/238#issuecomment-642319286,"Following up #235, and #236 this PR adds a bit more coverage. With those two and this one, I believe coverage will be boosted above 95%. However, it likely conflicts with #236, and whichever gets approved last will have to be rebased.
Signed-off-by: Stephen Brawner brawner@gmail.com","Building again for test_types.cpp

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,238,2020-06-10T00:02:49Z,2020-06-10T23:49:06Z,2020-06-18T21:14:25Z,MERGED,True,313,22,7,https://github.com/brawner,Increase rmw testing coverage above 95%,5,[],https://github.com/ros2/rmw/pull/238,https://github.com/ivanpauno,5,https://github.com/ros2/rmw/pull/238#issuecomment-646298685,"Following up #235, and #236 this PR adds a bit more coverage. With those two and this one, I believe coverage will be boosted above 95%. However, it likely conflicts with #236, and whichever gets approved last will have to be rebased.
Signed-off-by: Stephen Brawner brawner@gmail.com",@brawner nit noted when editing changelogs: remember to squash merge instead of using plain merge.,True,{}
ros2/rmw,https://github.com/ros2/rmw,238,2020-06-10T00:02:49Z,2020-06-10T23:49:06Z,2020-06-18T21:14:25Z,MERGED,True,313,22,7,https://github.com/brawner,Increase rmw testing coverage above 95%,5,[],https://github.com/ros2/rmw/pull/238,https://github.com/brawner,6,https://github.com/ros2/rmw/pull/238#issuecomment-646302112,"Following up #235, and #236 this PR adds a bit more coverage. With those two and this one, I believe coverage will be boosted above 95%. However, it likely conflicts with #236, and whichever gets approved last will have to be rebased.
Signed-off-by: Stephen Brawner brawner@gmail.com",@ivanpauno This went in as a regular merge? I'm so sorry. I wish github could just disable that option for me entirely.,True,{}
ros2/rmw,https://github.com/ros2/rmw,238,2020-06-10T00:02:49Z,2020-06-10T23:49:06Z,2020-06-18T21:14:25Z,MERGED,True,313,22,7,https://github.com/brawner,Increase rmw testing coverage above 95%,5,[],https://github.com/ros2/rmw/pull/238,https://github.com/ivanpauno,7,https://github.com/ros2/rmw/pull/238#issuecomment-646309184,"Following up #235, and #236 this PR adds a bit more coverage. With those two and this one, I believe coverage will be boosted above 95%. However, it likely conflicts with #236, and whichever gets approved last will have to be rebased.
Signed-off-by: Stephen Brawner brawner@gmail.com","@ivanpauno This went in as a regular merge? I'm so sorry. I wish github could just disable that option for me entirely.

Yeah it's a bit annoying, it happens to everybody.
I'm not sure if there is a way to disable merge, that would be pretty interesting.",True,{}
ros2/rmw,https://github.com/ros2/rmw,239,2020-06-10T18:04:22Z,2020-06-10T22:15:21Z,2020-06-10T22:15:25Z,MERGED,True,41,19,2,https://github.com/cottsay,Handle zero-length names_and_types properly,8,"['bug', 'in review']",https://github.com/ros2/rmw/pull/239,https://github.com/cottsay,1,https://github.com/ros2/rmw/pull/239,"from malloc(3):

If nmemb or size is 0, then calloc() returns either NULL, or a unique
pointer value that can later be successfully passed to free().

So depending on implementation-specific behavior, the existing behavior might fail during a call to rmw_names_and_types_init with a size of 0.","from malloc(3):

If nmemb or size is 0, then calloc() returns either NULL, or a unique
pointer value that can later be successfully passed to free().

So depending on implementation-specific behavior, the existing behavior might fail during a call to rmw_names_and_types_init with a size of 0.",True,{}
ros2/rmw,https://github.com/ros2/rmw,239,2020-06-10T18:04:22Z,2020-06-10T22:15:21Z,2020-06-10T22:15:25Z,MERGED,True,41,19,2,https://github.com/cottsay,Handle zero-length names_and_types properly,8,"['bug', 'in review']",https://github.com/ros2/rmw/pull/239,https://github.com/cottsay,2,https://github.com/ros2/rmw/pull/239#issuecomment-642176547,"from malloc(3):

If nmemb or size is 0, then calloc() returns either NULL, or a unique
pointer value that can later be successfully passed to free().

So depending on implementation-specific behavior, the existing behavior might fail during a call to rmw_names_and_types_init with a size of 0.","I'm expecting the tests to fail right now. I'll adjust them once #235 is merged.
In addition to handling zero-length allocation in all cases, this change also resolves a memory leak when names_and_types->types allocation fails in rmw_names_and_types_init, where the names array is not cleaned up because rmw_names_and_types_fini refuses to run.",True,{}
ros2/rmw,https://github.com/ros2/rmw,239,2020-06-10T18:04:22Z,2020-06-10T22:15:21Z,2020-06-10T22:15:25Z,MERGED,True,41,19,2,https://github.com/cottsay,Handle zero-length names_and_types properly,8,"['bug', 'in review']",https://github.com/ros2/rmw/pull/239,https://github.com/cottsay,3,https://github.com/ros2/rmw/pull/239#issuecomment-642243854,"from malloc(3):

If nmemb or size is 0, then calloc() returns either NULL, or a unique
pointer value that can later be successfully passed to free().

So depending on implementation-specific behavior, the existing behavior might fail during a call to rmw_names_and_types_init with a size of 0.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,240,2020-06-16T15:23:48Z,2020-06-16T18:02:01Z,2020-06-16T18:02:04Z,MERGED,True,0,1,1,https://github.com/Karsten1987,remove double empty lines,1,[],https://github.com/ros2/rmw/pull/240,https://github.com/Karsten1987,1,https://github.com/ros2/rmw/pull/240,as per title,as per title,True,{}
ros2/rmw,https://github.com/ros2/rmw,242,2020-06-22T15:16:40Z,2020-06-23T18:40:22Z,2020-06-23T18:40:27Z,CLOSED,False,2,2,1,https://github.com/hidmic,Relax rmw_context_fini() API contract,1,[],https://github.com/ros2/rmw/pull/242,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/242,Relax rmw_context_fini() API contract to better match what the current implementations do and are capable of doing.,Relax rmw_context_fini() API contract to better match what the current implementations do and are capable of doing.,True,{}
ros2/rmw,https://github.com/ros2/rmw,242,2020-06-22T15:16:40Z,2020-06-23T18:40:22Z,2020-06-23T18:40:27Z,CLOSED,False,2,2,1,https://github.com/hidmic,Relax rmw_context_fini() API contract,1,[],https://github.com/ros2/rmw/pull/242,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/242#issuecomment-647748784,Relax rmw_context_fini() API contract to better match what the current implementations do and are capable of doing.,"CI up to test_rmw_implementation against all RMW implementations:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,242,2020-06-22T15:16:40Z,2020-06-23T18:40:22Z,2020-06-23T18:40:27Z,CLOSED,False,2,2,1,https://github.com/hidmic,Relax rmw_context_fini() API contract,1,[],https://github.com/ros2/rmw/pull/242,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/242#issuecomment-648344391,Relax rmw_context_fini() API contract to better match what the current implementations do and are capable of doing.,Closing in favor of #243.,True,{}
ros2/rmw,https://github.com/ros2/rmw,243,2020-06-23T15:12:38Z,2020-06-29T17:14:53Z,2020-06-29T17:14:57Z,MERGED,True,35,14,1,https://github.com/hidmic,Update init/shutdown API documentation.,2,[],https://github.com/ros2/rmw/pull/243,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/243,Constrain behavior for known context states. Alternative to #242.,Constrain behavior for known context states. Alternative to #242.,True,{}
ros2/rmw,https://github.com/ros2/rmw,243,2020-06-23T15:12:38Z,2020-06-29T17:14:53Z,2020-06-29T17:14:57Z,MERGED,True,35,14,1,https://github.com/hidmic,Update init/shutdown API documentation.,2,[],https://github.com/ros2/rmw/pull/243,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/243#issuecomment-651251040,Constrain behavior for known context states. Alternative to #242.,"Alright, going in!",True,{}
ros2/rmw,https://github.com/ros2/rmw,244,2020-06-23T15:28:41Z,2020-06-24T20:50:19Z,2020-06-24T20:50:23Z,MERGED,True,34,13,1,https://github.com/hidmic,Update init options API documentation.,3,[],https://github.com/ros2/rmw/pull/244,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/244,Clarify pre- and post-conditions. Clean up a bit.,Clarify pre- and post-conditions. Clean up a bit.,True,{}
ros2/rmw,https://github.com/ros2/rmw,244,2020-06-23T15:28:41Z,2020-06-24T20:50:19Z,2020-06-24T20:50:23Z,MERGED,True,34,13,1,https://github.com/hidmic,Update init options API documentation.,3,[],https://github.com/ros2/rmw/pull/244,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/244#issuecomment-648329047,Clarify pre- and post-conditions. Clean up a bit.,@ivanpauno @Blast545 I just constrained the API a bit more e.g. you cannot copy from a zero-initialized source (it's redundant w/ finalization). PTAL.,True,{}
ros2/rmw,https://github.com/ros2/rmw,244,2020-06-23T15:28:41Z,2020-06-24T20:50:19Z,2020-06-24T20:50:23Z,MERGED,True,34,13,1,https://github.com/hidmic,Update init options API documentation.,3,[],https://github.com/ros2/rmw/pull/244,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/244#issuecomment-648347271,Clarify pre- and post-conditions. Clean up a bit.,"CI up to rcl and test_rmw_implementation against all RMW implementations:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,244,2020-06-23T15:28:41Z,2020-06-24T20:50:19Z,2020-06-24T20:50:23Z,MERGED,True,34,13,1,https://github.com/hidmic,Update init options API documentation.,3,[],https://github.com/ros2/rmw/pull/244,https://github.com/hidmic,4,https://github.com/ros2/rmw/pull/244#issuecomment-649049567,Clarify pre- and post-conditions. Clean up a bit.,"One last sanity CI run after API contract updates:

Linux",True,{}
ros2/rmw,https://github.com/ros2/rmw,244,2020-06-23T15:28:41Z,2020-06-24T20:50:19Z,2020-06-24T20:50:23Z,MERGED,True,34,13,1,https://github.com/hidmic,Update init options API documentation.,3,[],https://github.com/ros2/rmw/pull/244,https://github.com/hidmic,5,https://github.com/ros2/rmw/pull/244#issuecomment-649064123,Clarify pre- and post-conditions. Clean up a bit.,Alright going in!,True,{}
ros2/rmw,https://github.com/ros2/rmw,245,2020-06-24T22:53:12Z,2020-06-25T17:53:32Z,2020-06-25T19:24:31Z,CLOSED,False,114,0,3,https://github.com/hidmic,Add atexit helper,1,[],https://github.com/ros2/rmw/pull/245,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/245,A dumb helper to minimize and simplify cleanup logic in rmw implementations.,A dumb helper to minimize and simplify cleanup logic in rmw implementations.,True,{}
ros2/rmw,https://github.com/ros2/rmw,245,2020-06-24T22:53:12Z,2020-06-25T17:53:32Z,2020-06-25T19:24:31Z,CLOSED,False,114,0,3,https://github.com/hidmic,Add atexit helper,1,[],https://github.com/ros2/rmw/pull/245,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/245#issuecomment-649624151,A dumb helper to minimize and simplify cleanup logic in rmw implementations.,"CI up to rmw:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,245,2020-06-24T22:53:12Z,2020-06-25T17:53:32Z,2020-06-25T19:24:31Z,CLOSED,False,114,0,3,https://github.com/hidmic,Add atexit helper,1,[],https://github.com/ros2/rmw/pull/245,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/245#issuecomment-649730093,A dumb helper to minimize and simplify cleanup logic in rmw implementations.,"Considering that we already have https://github.com/ros2/rclcpp/blob/master/rclcpp/include/rclcpp/scope_exit.hpp, can we add this to rcpputils and get rid of the duplication?

Aha! I wasn't aware of that one. Ok, I'll improve the situation with that one instead. Closing.",True,{}
ros2/rmw,https://github.com/ros2/rmw,246,2020-07-02T02:30:31Z,2020-10-21T05:50:15Z,2020-10-21T05:50:15Z,CLOSED,False,3,0,1,https://github.com/fujitatomoya,ContentFilteredTopic Support,1,[],https://github.com/ros2/rmw/pull/246,https://github.com/fujitatomoya,1,https://github.com/ros2/rmw/pull/246,part of #241,part of #241,True,{}
ros2/rmw,https://github.com/ros2/rmw,246,2020-07-02T02:30:31Z,2020-10-21T05:50:15Z,2020-10-21T05:50:15Z,CLOSED,False,3,0,1,https://github.com/fujitatomoya,ContentFilteredTopic Support,1,[],https://github.com/ros2/rmw/pull/246,https://github.com/fujitatomoya,2,https://github.com/ros2/rmw/pull/246#issuecomment-713320516,part of #241,we will re-open the new PR since this is old.,True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/247,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/247#issuecomment-654441182,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"Considering that it is mandatory, I'd rather make enclave an argument of rmw_init(). However, this work, i.e. that of improving rmw test coverage, must be available for Foxy and so I can't change the signature. CC @chapulina.",True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/clalancette,3,https://github.com/ros2/rmw/pull/247#issuecomment-654445681,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"Considering that it is mandatory, I'd rather make enclave an argument of rmw_init(). However, this work, i.e. that of improving rmw test coverage, must be available for Foxy and so I can't change the signature. CC @chapulina.

For what it's worth, I think we should do the right thing for dealing with Galactic, and then worry about backporting it (which may need a different solution).  If that means breaking the API here, then I'd be for it (though we also have to worry about deprecating the old API).",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/hidmic,4,https://github.com/ros2/rmw/pull/247#issuecomment-654446704,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"@clalancette that's fair. But because we have to backport it, I'll get documentation and tests right for Foxy first. Then we can change the API and propagate all changes. Do you agree?",True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/ivanpauno,5,https://github.com/ros2/rmw/pull/247#issuecomment-654470139,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"Considering that it is mandatory, I'd rather make enclave an argument of rmw_init(). However, this work, i.e. that of improving rmw test coverage, must be available for Foxy and so I can't change the signature. CC @chapulina.

I don't see a benefit of adding an extra argument.
I prefer passing only the init_options, so we don't have to extend the signature each time we add one.

For what it's worth, I think we should do the right thing for dealing with Galactic, and then worry about backporting it (which may need a different solution). If that means breaking the API here, then I'd be for it (though we also have to worry about deprecating the old API).

👍",True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/hidmic,6,https://github.com/ros2/rmw/pull/247#issuecomment-654475091,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"I don't see a benefit of adding an extra argument. I prefer passing only the init_options, so we don't have to extend the signature each time we add one.

I understand how convenient it is, but IMHO it is conceptually inaccurate. As it stands, enclave is not an option, just like a namespace isn't an option when creating nodes. I'd rather leverage the compiler to check that all mandatory arguments have been provided instead of relying on runtime checks.",True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/ivanpauno,7,https://github.com/ros2/rmw/pull/247#issuecomment-654828161,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"I understand how convenient it is, but IMHO it is conceptually inaccurate. As it stands, enclave is not an option, just like a namespace isn't an option when creating nodes. I'd rather leverage the compiler to check that all mandatory arguments have been provided instead of relying on runtime checks.

I don't get the point. If the API would be:
rmw_init(rmw_context_t * context, rmw_init_options_t *init_options, const char * enclave_name);
enclave_name can still be NULL, the compiler can't check that for you.",True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/clalancette,8,https://github.com/ros2/rmw/pull/247#issuecomment-654832980,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"enclave_name can still be NULL, the compiler can't check that for you.

While that is true, that is a quirk of this code being in C.  If this was in C++, for instance, that argument would likely be a const std::string &, so you would always have to pass something there.  In either case, you have to check for string validity at runtime anyway.",True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/hidmic,9,https://github.com/ros2/rmw/pull/247#issuecomment-654864847,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"While that is true, that is a quirk of this code being in C.

This. Even though a check for nullity is still required because of language support, the API would better convey the fact that an enclave_name is expected.",True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/hidmic,10,https://github.com/ros2/rmw/pull/247#issuecomment-654874035,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"Ok, going in with this.",True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/ivanpauno,11,https://github.com/ros2/rmw/pull/247#issuecomment-654903112,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"This. Even though a check for nullity is still required because of language support, the API would better convey the fact that an enclave_name is expected.

Ok, I think it's a valid change, though I don't see a huge win in C.
It's true that currently the ""zero initialized"" init options are invalid, and that might be a bit confusing.",True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/jacobperron,12,https://github.com/ros2/rmw/pull/247#issuecomment-656276571,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,Looks like changes to from the related PRs caused rmw_implementation tests to start failing: https://ci.ros2.org/view/nightly/job/nightly_linux_repeated/1927/testReport/,True,{}
ros2/rmw,https://github.com/ros2/rmw,247,2020-07-06T20:08:02Z,2020-07-07T13:48:07Z,2020-07-09T18:20:24Z,MERGED,True,4,1,1,https://github.com/hidmic,Require enclave upon rmw_init() call.,1,[],https://github.com/ros2/rmw/pull/247,https://github.com/jacobperron,13,https://github.com/ros2/rmw/pull/247#issuecomment-656279165,Follow-up after #243. Enclave is within rmw_init_options_t but it isn't an option to provide one.,"Looks like changes to from the related PRs caused rmw_implementation tests to start failing: https://ci.ros2.org/view/nightly/job/nightly_linux_repeated/1927/testReport/

Looks like ros2/rmw_implementation#113 should be merged to resolve the failures.",True,{}
ros2/rmw,https://github.com/ros2/rmw,248,2020-07-06T21:36:43Z,2020-07-08T13:18:58Z,2020-07-08T13:19:03Z,MERGED,True,2,4,2,https://github.com/ivanpauno,Remove domain_id and localhost_only from node API,2,['enhancement'],https://github.com/ros2/rmw/pull/248,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/248,See ros2/rcl#708.,See ros2/rcl#708.,True,{}
ros2/rmw,https://github.com/ros2/rmw,249,2020-07-07T15:25:35Z,2020-07-15T13:22:53Z,2020-07-15T13:22:58Z,MERGED,True,20,26,1,https://github.com/hidmic,Update node creation/destruction API documentation.,6,[],https://github.com/ros2/rmw/pull/249,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/249,Precisely what the title says.,Precisely what the title says.,True,{}
ros2/rmw,https://github.com/ros2/rmw,249,2020-07-07T15:25:35Z,2020-07-15T13:22:53Z,2020-07-15T13:22:58Z,MERGED,True,20,26,1,https://github.com/hidmic,Update node creation/destruction API documentation.,6,[],https://github.com/ros2/rmw/pull/249,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/249#issuecomment-655150826,Precisely what the title says.,"One thing I changed in RMW implementations but didn't reflect here yet. Should we specify how memory is to be allocated?
rmw_context_t comes with an rcutils_allocator_t in options (which I went along with it naturally in some places). But there's also rmw_allocate() and friends, and C++ new / delete operators. I don't mind rolling back some changes, but I think having three different allocators that can be used interchangeably is a mess. CC @wjwwood .",True,{}
ros2/rmw,https://github.com/ros2/rmw,249,2020-07-07T15:25:35Z,2020-07-15T13:22:53Z,2020-07-15T13:22:58Z,MERGED,True,20,26,1,https://github.com/hidmic,Update node creation/destruction API documentation.,6,[],https://github.com/ros2/rmw/pull/249,https://github.com/clalancette,3,https://github.com/ros2/rmw/pull/249#issuecomment-655517659,Precisely what the title says.,"rmw_context_t comes with an rcutils_allocator_t in options (which I went along with it naturally in some places). But there's also rmw_allocate() and friends, and C++ new / delete operators. I don't mind rolling back some changes, but I think having three different allocators that can be used interchangeably is a mess. CC @wjwwood .

I agree that this is kind of messy.  But it seems orthogonal to this PR; should we go ahead and merge this one, and open an issue for further discussion of this topic?",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,249,2020-07-07T15:25:35Z,2020-07-15T13:22:53Z,2020-07-15T13:22:58Z,MERGED,True,20,26,1,https://github.com/hidmic,Update node creation/destruction API documentation.,6,[],https://github.com/ros2/rmw/pull/249,https://github.com/hidmic,4,https://github.com/ros2/rmw/pull/249#issuecomment-657731813,Precisely what the title says.,"But it seems orthogonal to this PR; should we go ahead and merge this one, and open an issue for further discussion of this topic?

Yeah, I guess. I do think that the way memory is allocated should be consistent and documented though.",True,{}
ros2/rmw,https://github.com/ros2/rmw,249,2020-07-07T15:25:35Z,2020-07-15T13:22:53Z,2020-07-15T13:22:58Z,MERGED,True,20,26,1,https://github.com/hidmic,Update node creation/destruction API documentation.,6,[],https://github.com/ros2/rmw/pull/249,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/249#issuecomment-657777166,Precisely what the title says.,"I would agree with merge then fix in a follow up, just because there's so much inconsistency already.
I think the ""right way"" to do this is to always use the passed rcutils allocator, or pass one if there's not one being passed atm. We should deprecate the rmw_* allocator functions, and we should convert the rcutils allocator into a C++ allocator if we must use new/delete, otherwise placement new can be used in combination with the rcutils allocator.",True,"{'THUMBS_UP': ['https://github.com/hidmic', 'https://github.com/ivanpauno']}"
ros2/rmw,https://github.com/ros2/rmw,249,2020-07-07T15:25:35Z,2020-07-15T13:22:53Z,2020-07-15T13:22:58Z,MERGED,True,20,26,1,https://github.com/hidmic,Update node creation/destruction API documentation.,6,[],https://github.com/ros2/rmw/pull/249,https://github.com/hidmic,6,https://github.com/ros2/rmw/pull/249#issuecomment-658160178,Precisely what the title says.,Rebased to reflect #248 API changes.,True,{}
ros2/rmw,https://github.com/ros2/rmw,249,2020-07-07T15:25:35Z,2020-07-15T13:22:53Z,2020-07-15T13:22:58Z,MERGED,True,20,26,1,https://github.com/hidmic,Update node creation/destruction API documentation.,6,[],https://github.com/ros2/rmw/pull/249,https://github.com/hidmic,7,https://github.com/ros2/rmw/pull/249#issuecomment-658162201,Precisely what the title says.,"Running CI up to test_rmw_implementation and all RMW implementations:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,249,2020-07-07T15:25:35Z,2020-07-15T13:22:53Z,2020-07-15T13:22:58Z,MERGED,True,20,26,1,https://github.com/hidmic,Update node creation/destruction API documentation.,6,[],https://github.com/ros2/rmw/pull/249,https://github.com/hidmic,8,https://github.com/ros2/rmw/pull/249#issuecomment-658764453,Precisely what the title says.,"Alright, all green. Merging.",True,{}
ros2/rmw,https://github.com/ros2/rmw,250,2020-07-14T07:06:15Z,2020-07-14T14:21:55Z,2022-05-09T14:01:21Z,MERGED,True,2,2,1,https://github.com/gbiggs,Correct parameter names to match documentation,1,[],https://github.com/ros2/rmw/pull/250,https://github.com/gbiggs,1,https://github.com/ros2/rmw/pull/250,"In get_node_info_and_types.h, the parameter documentation for two functions lists a no_demangle parameter, stating that if it is true then topics, etc. should be listed without demangling. However the function declarations themselves have a parameter called demangle, implying that if true, the topics, etc. will be listed with demangling.
For example:
 * \param[in] no_demangle if true, list all topics without any demangling
vs.
RMW_PUBLIC
RMW_WARN_UNUSED
rmw_ret_t
rmw_get_publisher_names_and_types_by_node(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * node_name,
  const char * node_namespace,
  bool demangle,
  rmw_names_and_types_t * topic_names_and_types);

rmw_get_subscriber_names_and_types_by_node: documentation, declaration
rmw_get_publisher_names_and_types_by_node: documentation, declaration

In get_topic_names_and_types.h, the documentation is the same but the parameter is named no_demangle so I'm guessing the documentation is correct.
This pull request corrects the parameter names to no_demangle.","In get_node_info_and_types.h, the parameter documentation for two functions lists a no_demangle parameter, stating that if it is true then topics, etc. should be listed without demangling. However the function declarations themselves have a parameter called demangle, implying that if true, the topics, etc. will be listed with demangling.
For example:
 * \param[in] no_demangle if true, list all topics without any demangling
vs.
RMW_PUBLIC
RMW_WARN_UNUSED
rmw_ret_t
rmw_get_publisher_names_and_types_by_node(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * node_name,
  const char * node_namespace,
  bool demangle,
  rmw_names_and_types_t * topic_names_and_types);

rmw_get_subscriber_names_and_types_by_node: documentation, declaration
rmw_get_publisher_names_and_types_by_node: documentation, declaration

In get_topic_names_and_types.h, the documentation is the same but the parameter is named no_demangle so I'm guessing the documentation is correct.
This pull request corrects the parameter names to no_demangle.",True,{}
ros2/rmw,https://github.com/ros2/rmw,250,2020-07-14T07:06:15Z,2020-07-14T14:21:55Z,2022-05-09T14:01:21Z,MERGED,True,2,2,1,https://github.com/gbiggs,Correct parameter names to match documentation,1,[],https://github.com/ros2/rmw/pull/250,https://github.com/clalancette,2,https://github.com/ros2/rmw/pull/250#issuecomment-658161227,"In get_node_info_and_types.h, the parameter documentation for two functions lists a no_demangle parameter, stating that if it is true then topics, etc. should be listed without demangling. However the function declarations themselves have a parameter called demangle, implying that if true, the topics, etc. will be listed with demangling.
For example:
 * \param[in] no_demangle if true, list all topics without any demangling
vs.
RMW_PUBLIC
RMW_WARN_UNUSED
rmw_ret_t
rmw_get_publisher_names_and_types_by_node(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * node_name,
  const char * node_namespace,
  bool demangle,
  rmw_names_and_types_t * topic_names_and_types);

rmw_get_subscriber_names_and_types_by_node: documentation, declaration
rmw_get_publisher_names_and_types_by_node: documentation, declaration

In get_topic_names_and_types.h, the documentation is the same but the parameter is named no_demangle so I'm guessing the documentation is correct.
This pull request corrects the parameter names to no_demangle.","CI:

Linux 
Linux-aarch64  <-- no Connext on arm64
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,250,2020-07-14T07:06:15Z,2020-07-14T14:21:55Z,2022-05-09T14:01:21Z,MERGED,True,2,2,1,https://github.com/gbiggs,Correct parameter names to match documentation,1,[],https://github.com/ros2/rmw/pull/250,https://github.com/clalancette,3,https://github.com/ros2/rmw/pull/250#issuecomment-1121140776,"In get_node_info_and_types.h, the parameter documentation for two functions lists a no_demangle parameter, stating that if it is true then topics, etc. should be listed without demangling. However the function declarations themselves have a parameter called demangle, implying that if true, the topics, etc. will be listed with demangling.
For example:
 * \param[in] no_demangle if true, list all topics without any demangling
vs.
RMW_PUBLIC
RMW_WARN_UNUSED
rmw_ret_t
rmw_get_publisher_names_and_types_by_node(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * node_name,
  const char * node_namespace,
  bool demangle,
  rmw_names_and_types_t * topic_names_and_types);

rmw_get_subscriber_names_and_types_by_node: documentation, declaration
rmw_get_publisher_names_and_types_by_node: documentation, declaration

In get_topic_names_and_types.h, the documentation is the same but the parameter is named no_demangle so I'm guessing the documentation is correct.
This pull request corrects the parameter names to no_demangle.",@Mergifyio backport foxy,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rmw,https://github.com/ros2/rmw,250,2020-07-14T07:06:15Z,2020-07-14T14:21:55Z,2022-05-09T14:01:21Z,MERGED,True,2,2,1,https://github.com/gbiggs,Correct parameter names to match documentation,1,[],https://github.com/ros2/rmw/pull/250,https://github.com/apps/mergify,4,https://github.com/ros2/rmw/pull/250#issuecomment-1121141720,"In get_node_info_and_types.h, the parameter documentation for two functions lists a no_demangle parameter, stating that if it is true then topics, etc. should be listed without demangling. However the function declarations themselves have a parameter called demangle, implying that if true, the topics, etc. will be listed with demangling.
For example:
 * \param[in] no_demangle if true, list all topics without any demangling
vs.
RMW_PUBLIC
RMW_WARN_UNUSED
rmw_ret_t
rmw_get_publisher_names_and_types_by_node(
  const rmw_node_t * node,
  rcutils_allocator_t * allocator,
  const char * node_name,
  const char * node_namespace,
  bool demangle,
  rmw_names_and_types_t * topic_names_and_types);

rmw_get_subscriber_names_and_types_by_node: documentation, declaration
rmw_get_publisher_names_and_types_by_node: documentation, declaration

In get_topic_names_and_types.h, the documentation is the same but the parameter is named no_demangle so I'm guessing the documentation is correct.
This pull request corrects the parameter names to no_demangle.","backport foxy

✅ Backports have been created


#322 Correct parameter names to match documentation (backport #250) has been created for branch foxy",True,{}
ros2/rmw,https://github.com/ros2/rmw,251,2020-07-17T14:29:47Z,2020-07-22T13:00:28Z,2020-07-22T13:00:33Z,MERGED,True,10,0,2,https://github.com/ivanpauno,Add actual domain id to rmw_context_t,2,['in review'],https://github.com/ros2/rmw/pull/251,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/251,See ros2/rcl#718.,See ros2/rcl#718.,True,{}
ros2/rmw,https://github.com/ros2/rmw,252,2020-07-20T18:03:26Z,2020-07-28T22:03:10Z,2020-07-28T22:03:15Z,MERGED,True,56,6,1,https://github.com/hidmic,Update publisher creation/destruction API documentation.,5,['enhancement'],https://github.com/ros2/rmw/pull/252,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/252,Precisely what the title says.,Precisely what the title says.,True,{}
ros2/rmw,https://github.com/ros2/rmw,252,2020-07-20T18:03:26Z,2020-07-28T22:03:10Z,2020-07-28T22:03:15Z,MERGED,True,56,6,1,https://github.com/hidmic,Update publisher creation/destruction API documentation.,5,['enhancement'],https://github.com/ros2/rmw/pull/252,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/252#issuecomment-665121475,Precisely what the title says.,"CI up test_rmw_implementation against all RMW implementations:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,253,2020-07-21T09:38:58Z,2020-07-28T02:41:16Z,2020-07-28T02:41:16Z,CLOSED,False,17,0,2,https://github.com/Ada-King,Expose qos setting for /rosout,1,[],https://github.com/ros2/rmw/pull/253,https://github.com/Ada-King,1,https://github.com/ros2/rmw/pull/253,"Related issue 581
Signed-off-by: Ada-King Bingtao.Du@sony.com","Related issue 581
Signed-off-by: Ada-King Bingtao.Du@sony.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,253,2020-07-21T09:38:58Z,2020-07-28T02:41:16Z,2020-07-28T02:41:16Z,CLOSED,False,17,0,2,https://github.com/Ada-King,Expose qos setting for /rosout,1,[],https://github.com/ros2/rmw/pull/253,https://github.com/Ada-King,2,https://github.com/ros2/rmw/pull/253#issuecomment-664742380,"Related issue 581
Signed-off-by: Ada-King Bingtao.Du@sony.com","I don't see the value of defining the default rosout topic qos here

The definition of default rosout qos profile has been moved to rcl layer, so i will close this PR. And the 722 needs you to re-check.
Besides, i have completed the rclcpp layer, i will create a new PR after the internal code-review.",True,{}
ros2/rmw,https://github.com/ros2/rmw,254,2020-07-29T19:03:47Z,2020-08-31T19:52:18Z,2020-08-31T19:52:22Z,MERGED,True,29,0,3,https://github.com/brawner,Add fault injection macros for use in other packages,4,[],https://github.com/ros2/rmw/pull/254,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/254,"This adds fault injection macros for use in rcl_action and rcl_lifecycle.
Signed-off-by: Stephen Brawner brawner@gmail.com","This adds fault injection macros for use in rcl_action and rcl_lifecycle.
Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,254,2020-07-29T19:03:47Z,2020-08-31T19:52:18Z,2020-08-31T19:52:22Z,MERGED,True,29,0,3,https://github.com/brawner,Add fault injection macros for use in other packages,4,[],https://github.com/ros2/rmw/pull/254,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/254#issuecomment-682114415,"This adds fault injection macros for use in rcl_action and rcl_lifecycle.
Signed-off-by: Stephen Brawner brawner@gmail.com","Testing this PR branch against current ros 2 branches (--packages-select rmw)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,254,2020-07-29T19:03:47Z,2020-08-31T19:52:18Z,2020-08-31T19:52:22Z,MERGED,True,29,0,3,https://github.com/brawner,Add fault injection macros for use in other packages,4,[],https://github.com/ros2/rmw/pull/254,https://github.com/brawner,3,https://github.com/ros2/rmw/pull/254#issuecomment-683951169,"This adds fault injection macros for use in rcl_action and rcl_lifecycle.
Signed-off-by: Stephen Brawner brawner@gmail.com","Rebased onto master after merging #269, retesting

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,254,2020-07-29T19:03:47Z,2020-08-31T19:52:18Z,2020-08-31T19:52:22Z,MERGED,True,29,0,3,https://github.com/brawner,Add fault injection macros for use in other packages,4,[],https://github.com/ros2/rmw/pull/254,https://github.com/brawner,4,https://github.com/ros2/rmw/pull/254#issuecomment-683958549,"This adds fault injection macros for use in rcl_action and rcl_lifecycle.
Signed-off-by: Stephen Brawner brawner@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,254,2020-07-29T19:03:47Z,2020-08-31T19:52:18Z,2020-08-31T19:52:22Z,MERGED,True,29,0,3,https://github.com/brawner,Add fault injection macros for use in other packages,4,[],https://github.com/ros2/rmw/pull/254,https://github.com/brawner,5,https://github.com/ros2/rmw/pull/254#issuecomment-684000768,"This adds fault injection macros for use in rcl_action and rcl_lifecycle.
Signed-off-by: Stephen Brawner brawner@gmail.com",A rebase did the trick,True,{}
ros2/rmw,https://github.com/ros2/rmw,255,2020-07-31T00:12:21Z,2021-02-19T23:42:59Z,2021-02-19T23:43:00Z,CLOSED,False,49,49,4,https://github.com/emersonknapp,RMW_DURATION_INFINITE constant - use in QoS API contracts,3,[],https://github.com/ros2/rmw/pull/255,https://github.com/emersonknapp,1,https://github.com/ros2/rmw/pull/255,"Resolves #210
Depends on #298 (which resolves #215)
Create explicit RMW_DURATION_INFINITE constant for use in requesting/offering QoS policies with durations, to be used as the default value instead of 0. Enforce using these values in the API contract.
Linked PRs:

 ros2/rmw_fastrtps#512
 ros2/rmw_cyclonedds#287
 ros2/rmw_connext#487

Note: non-linked followups:

 ros2cli (print ""Infinite"" instead of constant literal value)
 rosbag2 (interpret old implementation-specific ""infinite"" values and rewrite them as RMW_DURATION_INFINITE, for playback)

Testing
Gist:

src: https://gist.github.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a
raw: https://gist.githubusercontent.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a/raw/d743e24087109283bb9f6f3ae21f1feae4436b80/ros2.repos

Build:

Linux 
Linux-aarch64 
macOS 
Windows","Resolves #210
Depends on #298 (which resolves #215)
Create explicit RMW_DURATION_INFINITE constant for use in requesting/offering QoS policies with durations, to be used as the default value instead of 0. Enforce using these values in the API contract.
Linked PRs:

 ros2/rmw_fastrtps#512
 ros2/rmw_cyclonedds#287
 ros2/rmw_connext#487

Note: non-linked followups:

 ros2cli (print ""Infinite"" instead of constant literal value)
 rosbag2 (interpret old implementation-specific ""infinite"" values and rewrite them as RMW_DURATION_INFINITE, for playback)

Testing
Gist:

src: https://gist.github.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a
raw: https://gist.githubusercontent.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a/raw/d743e24087109283bb9f6f3ae21f1feae4436b80/ros2.repos

Build:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,255,2020-07-31T00:12:21Z,2021-02-19T23:42:59Z,2021-02-19T23:43:00Z,CLOSED,False,49,49,4,https://github.com/emersonknapp,RMW_DURATION_INFINITE constant - use in QoS API contracts,3,[],https://github.com/ros2/rmw/pull/255,https://github.com/emersonknapp,2,https://github.com/ros2/rmw/pull/255#issuecomment-764981181,"Resolves #210
Depends on #298 (which resolves #215)
Create explicit RMW_DURATION_INFINITE constant for use in requesting/offering QoS policies with durations, to be used as the default value instead of 0. Enforce using these values in the API contract.
Linked PRs:

 ros2/rmw_fastrtps#512
 ros2/rmw_cyclonedds#287
 ros2/rmw_connext#487

Note: non-linked followups:

 ros2cli (print ""Infinite"" instead of constant literal value)
 rosbag2 (interpret old implementation-specific ""infinite"" values and rewrite them as RMW_DURATION_INFINITE, for playback)

Testing
Gist:

src: https://gist.github.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a
raw: https://gist.githubusercontent.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a/raw/d743e24087109283bb9f6f3ae21f1feae4436b80/ros2.repos

Build:

Linux 
Linux-aarch64 
macOS 
Windows",Closed by unintentional language in another PR comment - still working on this,True,{}
ros2/rmw,https://github.com/ros2/rmw,255,2020-07-31T00:12:21Z,2021-02-19T23:42:59Z,2021-02-19T23:43:00Z,CLOSED,False,49,49,4,https://github.com/emersonknapp,RMW_DURATION_INFINITE constant - use in QoS API contracts,3,[],https://github.com/ros2/rmw/pull/255,https://github.com/emersonknapp,3,https://github.com/ros2/rmw/pull/255#issuecomment-776367718,"Resolves #210
Depends on #298 (which resolves #215)
Create explicit RMW_DURATION_INFINITE constant for use in requesting/offering QoS policies with durations, to be used as the default value instead of 0. Enforce using these values in the API contract.
Linked PRs:

 ros2/rmw_fastrtps#512
 ros2/rmw_cyclonedds#287
 ros2/rmw_connext#487

Note: non-linked followups:

 ros2cli (print ""Infinite"" instead of constant literal value)
 rosbag2 (interpret old implementation-specific ""infinite"" values and rewrite them as RMW_DURATION_INFINITE, for playback)

Testing
Gist:

src: https://gist.github.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a
raw: https://gist.githubusercontent.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a/raw/d743e24087109283bb9f6f3ae21f1feae4436b80/ros2.repos

Build:

Linux 
Linux-aarch64 
macOS 
Windows","I am actively working on this right now (for any interested parties). I've gathered more information to illustrate how the RMW API is currently incomplete.
The following values are gathered from get_publishers_info_by_topic when a single publisher is publishing with unspecified Deadline duration. It doesn't matter which RMW implementation is being used to publish, the value only depends on the implementation of the subscripton - I have tested it with only Cyclone and FastDDS, with all 4 pub/sub combinations. These same values are reported for Deadline, Lifespan, and Liveliness Lease Duration



Value Type
Fast sec
Fast nsec
Fast total nsec
Cyclone sec
Cyclone nsec
Cyclone total nsec




decimal
2147483647
4294967295
2147483651294967295
9223372036
854775807
9223372036854775807


hex
0x7FFFFFFF
0xFFFFFFFF
0x1DCD6500C46535FF
0x225C17D04
0x32F2D7FF
0x7FFFFFFFFFFFFFFF


DDS IDL PSM Constant
DURATION_INFINITE_SEC
TIME_INVALID_SEC
nothing
nothing
nothing
nothing


int limits
INT32_MAX
UINT32_MAX (or -1)
nothing
nothing
nothing
INT64_MAX



""DDS IDL PSM Constant"" above refers to the values laid out in Section 2.3.3 of the DDS 1.4 spec. From my understanding this PSM is meant to provide common interfaces for programming languages. There are separate docs available as well:

C language (Cyclone) - https://www.omg.org/spec/DDS/20140501/dds_dcps.idl
C++ language (FastDDS) - https://www.omg.org/spec/DDS-PSM-Cxx/1.0/PDF
The C++ one doesn't lay out new constants, from what I understand is it is meant to replace the IDL-generated API with more idiomatic language

Based on the above information, the two implementations are providing values that are neither consistent with each other or guidelines from the specification - seems like we just have exposed implementation details.
My next step is an updated API proposal, which will come with coupled prototype PRs for the RMW implementations.
Interesting note: the IDL PSM specifies Durations as:
struct Duration_t {
  long sec;
  unsigned long nanosec;
};

But we use exclusively unsigned values within the RMW API.",True,{}
ros2/rmw,https://github.com/ros2/rmw,255,2020-07-31T00:12:21Z,2021-02-19T23:42:59Z,2021-02-19T23:43:00Z,CLOSED,False,49,49,4,https://github.com/emersonknapp,RMW_DURATION_INFINITE constant - use in QoS API contracts,3,[],https://github.com/ros2/rmw/pull/255,https://github.com/emersonknapp,4,https://github.com/ros2/rmw/pull/255#issuecomment-782458819,"Resolves #210
Depends on #298 (which resolves #215)
Create explicit RMW_DURATION_INFINITE constant for use in requesting/offering QoS policies with durations, to be used as the default value instead of 0. Enforce using these values in the API contract.
Linked PRs:

 ros2/rmw_fastrtps#512
 ros2/rmw_cyclonedds#287
 ros2/rmw_connext#487

Note: non-linked followups:

 ros2cli (print ""Infinite"" instead of constant literal value)
 rosbag2 (interpret old implementation-specific ""infinite"" values and rewrite them as RMW_DURATION_INFINITE, for playback)

Testing
Gist:

src: https://gist.github.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a
raw: https://gist.githubusercontent.com/emersonknapp/5f998a7e585c8a7bdc1f4845a67bd27a/raw/d743e24087109283bb9f6f3ae21f1feae4436b80/ros2.repos

Build:

Linux 
Linux-aarch64 
macOS 
Windows",Closing this in favor of #301 for now,True,{}
ros2/rmw,https://github.com/ros2/rmw,256,2020-07-31T21:29:38Z,2020-08-06T13:44:10Z,2021-04-22T18:06:20Z,MERGED,True,60,5,1,https://github.com/hidmic,Update subscription API documentation,5,[],https://github.com/ros2/rmw/pull/256,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/256,Precisely what the title says. Each commit is to be kept separately.,Precisely what the title says. Each commit is to be kept separately.,True,{}
ros2/rmw,https://github.com/ros2/rmw,256,2020-07-31T21:29:38Z,2020-08-06T13:44:10Z,2021-04-22T18:06:20Z,MERGED,True,60,5,1,https://github.com/hidmic,Update subscription API documentation,5,[],https://github.com/ros2/rmw/pull/256,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/256#issuecomment-667391942,Precisely what the title says. Each commit is to be kept separately.,"CI up to test_rmw_implementation and rcl, against all RMW implementations:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,256,2020-07-31T21:29:38Z,2020-08-06T13:44:10Z,2021-04-22T18:06:20Z,MERGED,True,60,5,1,https://github.com/hidmic,Update subscription API documentation,5,[],https://github.com/ros2/rmw/pull/256,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/256#issuecomment-669494018,Precisely what the title says. Each commit is to be kept separately.,@gbiggs PTAL!,True,{}
ros2/rmw,https://github.com/ros2/rmw,258,2020-08-10T21:40:36Z,2020-08-14T17:04:43Z,2020-08-18T00:53:00Z,MERGED,True,108,10,2,https://github.com/hidmic,Update serialization/deserialization API documentation.,7,[],https://github.com/ros2/rmw/pull/258,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/258,"Precisely what the title says. Just clarifying what was already given, plus specifying rmw_serialized_message_t (regardless of it being an alias).
I'll point out that this API departs from the rest, in that every argument MUST be correct or you'll incur UB.","Precisely what the title says. Just clarifying what was already given, plus specifying rmw_serialized_message_t (regardless of it being an alias).
I'll point out that this API departs from the rest, in that every argument MUST be correct or you'll incur UB.",True,{}
ros2/rmw,https://github.com/ros2/rmw,258,2020-08-10T21:40:36Z,2020-08-14T17:04:43Z,2020-08-18T00:53:00Z,MERGED,True,108,10,2,https://github.com/hidmic,Update serialization/deserialization API documentation.,7,[],https://github.com/ros2/rmw/pull/258,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/258#issuecomment-672023851,"Precisely what the title says. Just clarifying what was already given, plus specifying rmw_serialized_message_t (regardless of it being an alias).
I'll point out that this API departs from the rest, in that every argument MUST be correct or you'll incur UB.","Alright, PTAL! I've also added API attributes based on what current implementations do, thread-safety being the most constraining spec.",True,{}
ros2/rmw,https://github.com/ros2/rmw,258,2020-08-10T21:40:36Z,2020-08-14T17:04:43Z,2020-08-18T00:53:00Z,MERGED,True,108,10,2,https://github.com/hidmic,Update serialization/deserialization API documentation.,7,[],https://github.com/ros2/rmw/pull/258,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/258#issuecomment-672267535,"Precisely what the title says. Just clarifying what was already given, plus specifying rmw_serialized_message_t (regardless of it being an alias).
I'll point out that this API departs from the rest, in that every argument MUST be correct or you'll incur UB.","CI up to test_rmw_implementation and rmw:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,259,2020-08-11T12:04:59Z,2020-08-27T19:48:50Z,2020-08-28T08:18:12Z,MERGED,True,1,1,1,https://github.com/esteve,Do not link against pthread on Android,1,[],https://github.com/ros2/rmw/pull/259,https://github.com/esteve,1,https://github.com/ros2/rmw/pull/259,"Android does not have support for pthread, this change just avoids linking against it.","Android does not have support for pthread, this change just avoids linking against it.",True,{}
ros2/rmw,https://github.com/ros2/rmw,259,2020-08-11T12:04:59Z,2020-08-27T19:48:50Z,2020-08-28T08:18:12Z,MERGED,True,1,1,1,https://github.com/esteve,Do not link against pthread on Android,1,[],https://github.com/ros2/rmw/pull/259,https://github.com/jacobperron,2,https://github.com/ros2/rmw/pull/259#issuecomment-682119569,"Android does not have support for pthread, this change just avoids linking against it.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,259,2020-08-11T12:04:59Z,2020-08-27T19:48:50Z,2020-08-28T08:18:12Z,MERGED,True,1,1,1,https://github.com/esteve,Do not link against pthread on Android,1,[],https://github.com/ros2/rmw/pull/259,https://github.com/jacobperron,3,https://github.com/ros2/rmw/pull/259#issuecomment-682120129,"Android does not have support for pthread, this change just avoids linking against it.",It's probably worth porting this change to Foxy and the default branch as well.,True,{}
ros2/rmw,https://github.com/ros2/rmw,259,2020-08-11T12:04:59Z,2020-08-27T19:48:50Z,2020-08-28T08:18:12Z,MERGED,True,1,1,1,https://github.com/esteve,Do not link against pthread on Android,1,[],https://github.com/ros2/rmw/pull/259,https://github.com/jacobperron,4,https://github.com/ros2/rmw/pull/259#issuecomment-682158330,"Android does not have support for pthread, this change just avoids linking against it.","I've opened PRs to port this to other distros:

#266
#268
#267",True,{}
ros2/rmw,https://github.com/ros2/rmw,259,2020-08-11T12:04:59Z,2020-08-27T19:48:50Z,2020-08-28T08:18:12Z,MERGED,True,1,1,1,https://github.com/esteve,Do not link against pthread on Android,1,[],https://github.com/ros2/rmw/pull/259,https://github.com/esteve,5,https://github.com/ros2/rmw/pull/259#issuecomment-682394794,"Android does not have support for pthread, this change just avoids linking against it.",@jacobperron thanks for the review and for the ports,True,{}
ros2/rmw,https://github.com/ros2/rmw,261,2020-08-14T17:14:14Z,2020-08-18T14:10:25Z,2020-08-18T14:10:29Z,MERGED,True,138,27,2,https://github.com/hidmic,Extend rmw_serialized_message_t tests.,2,[],https://github.com/ros2/rmw/pull/261,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/261,Precisely what the title says. Follow-up after #258,Precisely what the title says. Follow-up after #258,True,{}
ros2/rmw,https://github.com/ros2/rmw,261,2020-08-14T17:14:14Z,2020-08-18T14:10:25Z,2020-08-18T14:10:29Z,MERGED,True,138,27,2,https://github.com/hidmic,Extend rmw_serialized_message_t tests.,2,[],https://github.com/ros2/rmw/pull/261,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/261#issuecomment-674285925,Precisely what the title says. Follow-up after #258,"CI up to rmw:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,261,2020-08-14T17:14:14Z,2020-08-18T14:10:25Z,2020-08-18T14:10:29Z,MERGED,True,138,27,2,https://github.com/hidmic,Extend rmw_serialized_message_t tests.,2,[],https://github.com/ros2/rmw/pull/261,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/261#issuecomment-675501553,Precisely what the title says. Follow-up after #258,Going in!,True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/262,Precisely what the title says.,Precisely what the title says.,True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/262#issuecomment-677696961,Precisely what the title says.,"Writing tests for this portion of the API brings up an interesting question. What's a reasonable latency for pub/sub match events (within the same process, within the same host, within the same network)? We don't have (nor specify) a guaranteed upper bound to rely on , and there's no API to wait for these events.
Edit: Hmm, there's the graph guard condition. rcl tests wait repeatedly on it, though I suspect 9 times is arbitrary. Or maybe not, and within 10 graph events is that reasonable latency I'm after.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/262#issuecomment-677704840,Precisely what the title says.,"Just to clarify, I'm looking for a way to specify within which time interval (in seconds or in received graph events) the API is expected to reflect the state of the system, in a given environment. Otherwise I can't tell which implementation behaves correctly and which doesn't.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,4,https://github.com/ros2/rmw/pull/262#issuecomment-677743599,Precisely what the title says.,Thanks for the prompt reviews guys! What do we do about #262 (comment)? I need a boundary for tests in ros2/rmw_implementation#119 and I think it'd be good to make that explicit here.,True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/262#issuecomment-677748311,Precisely what the title says.,I don't think we can put a latency on that which will be meaningful for all rmw implementations... Either in terms of time or number of events. Why does that need to be part of the documentation?,True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,6,https://github.com/ros2/rmw/pull/262#issuecomment-677754879,Precisely what the title says.,"I don't think we can put a latency on that which will be meaningful for all rmw implementations... Either in terms of time or number of events. Why does that need to be part of the documentation?

In my mind, I cannot test for pub/sub matching if I don't have a way to wait for it to happen. If I use the graph guard condition and  say, a retry count, that count becomes an implicit requirement for the implementation. I think that it should be explicit (along with all the necessary constraints, like for pub/sub within the same process or for pub/sub within the same host with < 10% CPU load).
Or not test pub/sub matching (which is a bit of a bummer).",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/262#issuecomment-677759258,Precisely what the title says.,"I don't understand why we need a number in the docs. Why can we not have a retry loop with an empirically calculated number? That's what we do everywhere.
When we send a message and check to see it is received we have a wait period and/or a retry loop but that's not documented and I don't think it could be given that it would be impacted by the underlying system.
I think we shouldn't put numbers on things like this because it depends too much on the underlying hardware and middleware implementation.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,8,https://github.com/ros2/rmw/pull/262#issuecomment-677772932,Precisely what the title says.,"I don't understand why we need a number in the docs. Why can we not have a retry loop with an empirically calculated number? That's what we do everywhere.

I know. And we have a bunch of conditionals in gtests, launch tests, pytests, and CMakeLists.txt to cope with the nitty-gritty of the implementations we have in our source tree.
Having test_rmw_implementation is good for RMW implementations coverage, but it also gives us the opportunity to refine rmw API specifications and have a test suite in place that checks if any given implementation reasonably meets those specifications (all for the same price). But to do that, API specifications have to be complete.
Now that I think about this again, perhaps we can mention the tests themselves, and document in what conditions test_rmw_implementation tests are valid.

and middleware implementation.

Hmm, wait, is that the case? Would it be OK if a middleware doesn't match publishers and subscriptions that don't stay around for more than, say, 5 minutes? I mean, that's fine, but then (a) generic RMW implementation testing is not possible, and I have to separate these from the rest, and (b) we should add that to the docs! Like, check your RMW implementation documentation to understand what to expect from this API.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/262#issuecomment-677790416,Precisely what the title says.,"Well we can have large upper bounds, like ""a subscription and publisher shall be matched within 2 minutes of their creation"", but to make that tighter would just make it hard to avoid flaky tests, and to make it broader makes it less and less useful of a number while still not completely eliminating the chance that some hardware or new middleware implementation not meeting the goal.
So if we want to add them that's fine, but I can't give you a number that isn't arbitrary myself. Sorry, I know that's not satisfying but I've been dealing with this while trying to write requirements for rclcpp for Apex and in my opinion there are no satisfying answers.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,10,https://github.com/ros2/rmw/pull/262#issuecomment-677882374,Precisely what the title says.,"Yeah, this is a tough one. For worst, skimming through RMW implementations, it doesn't seem like pub/sub matching triggers graph guard conditions at all -- which is curious considering rcl tests appear to rely on that.
Perhaps, the conclusion here is that the rmw API is lacking the features to enable these tests, and, for the time being, we'll have to move forward without it. That is, loops around checks, with an arbitrary cap like we do elsewhere, and a big TODO for change in the future.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/ivanpauno,11,https://github.com/ros2/rmw/pull/262#issuecomment-678276723,Precisely what the title says.,"We don't have (nor specify) a guaranteed upper bound to rely on

If you're waiting to an event that happens asynchronously, it's impossible to specify an upper time bound.
It depends on the platform, on your network, on the rmw implementation, on everything.
I don't see how the API could improve to avoid this issue, we already have a way of getting a notification, that's the best thing we can do.
The only way to write a reasonable test for this kind of things is to put a random upper bound based on previous experimentation (much bigger that the actually measured delays (x10), so the test isn't flaky at all).
That upper bound only avoids unnecessary hangs, and it is not part of the rmw API specification (ideally, it should be large enough to work with currenltly unsupported platforms/rmw implementations, etc).",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,12,https://github.com/ros2/rmw/pull/262#issuecomment-678363229,Precisely what the title says.,"I don't see how the API could improve to avoid this issue, we already have a way of getting a notification, that's the best thing we can do.

Having some form of notification mechanism for every single asynchronous side-effect, and not just for a subset (e.g. as I mention above, AFAICS pub/sub matching doesn't currently trigger the graph guard condition on any Tier 1 RMW implementation).

If you're waiting to an event that happens asynchronously, it's impossible to specify an upper time bound.
It depends on the platform, on your network, on the rmw implementation, on everything.

That's true generically, but:

It's not pure asynchronous events we're dealing with. We have full control of what's executed and when it's executed (in a single thread, synchronizing threads/processes, take your pick).
Perhaps I didn't express myself correctly, but by upper bound I don't expect an specification that can hold ground for every single possible use case. We can tie them to specific tests and/or specific setups (like other engineering disciplines do).

Of course, performance expectations will join the mix. And for good reason. No ROS-powered robot stack that I've worked with would tolerate ~10s delays for pub/sub, so I wouldn't deem that as correct behavior.

The only way to write a reasonable test for this kind of things is to put a random upper bound based on previous experimentation (much bigger that the actually measured delays (x10), so the test isn't flaky at all).

While that's exactly what's going to happen next (😅), I disagree with the approach. It keeps expectations implicit.  And I don't think we'd be happy ever increasing timeouts just to get tests passing.
IMHO long term we have to:

Have a documented set of tests and/or model platform(s) to complete API specs.

And it would be perfectly reasonable to have different specs for different setups and use cases. Perhaps not all RMW implementations can be expected to make the cut in every situation and that's fine.


Improve rmw API to sleep less and wait more.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/wjwwood,13,https://github.com/ros2/rmw/pull/262#issuecomment-678367407,Precisely what the title says.,"I don't agree that large timeouts are bad. The tests are there to test that something works, eventually. If we want to know how quickly or reliably it works that is, in my opinion, a performance test and should be run separately and with limits that are appropriate for the hardware it is being run on.
For the same reason I do not think we can document what the response time of an API should be, or the throughput or resource overhead.",True,{'HEART': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/ivanpauno,14,https://github.com/ros2/rmw/pull/262#issuecomment-678369735,Precisely what the title says.,"Having some form of notification mechanism for every single asynchronous side-effect, and not just for a subset (e.g. as I mention above, AFAICS pub/sub matching doesn't currently trigger the graph guard condition on any Tier 1 RMW implementation).

That's a bug IMO.
We could have more fine grained ""graph"" guard conditions, or we could have a way to pass a condition specifying what graph change we're waiting for (the last option is really tricky to implement).

Of course, performance expectations will join the mix. And for good reason. No ROS-powered robot stack that I've worked with would tolerate ~10s delays for pub/sub, so I wouldn't deem that as correct behavior.

As you commented, this is a performance problem, not an API specification problem.
How long an event takes to get triggered has to be measured in a performance test, not in an unit/integration/system test.
The API documentation doesn't have to say anything about how long an event can take to get triggered.

Improve rmw API to sleep less and wait more.

IMHO, rmw API must not require sleeps at all.
If we're requiring sleeps without providing an alternative wait mechanism, that's a bug and should be fixed.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,15,https://github.com/ros2/rmw/pull/262#issuecomment-678410511,Precisely what the title says.,"Re-reading this thread, I think we have fundamentally different views of what to expect from rmw API documentation and tests.
I expect (hope for?) them to be the contract and verification process that any RMW implementation has to comply with and go through, respectively, and not just the tests that ensure our current code doesn't regress. Therefore, while in theory:

The tests are there to test that something works, eventually.


How long an event takes to get triggered has to be measured in a performance test, not in an unit/integration/system test.

are valid points, in practice we cannot test for correct behavior unless the definition of correct includes a time cap, and thus a performance expectation (well, we could wait w/o timeouts or try solve the halting problem 😁). Unless we close that door and we switch to regression testing. Measuring delays and making timeouts 10x those delays makes perfect sense if you're testing for regressions in a given implementation.
Unfortunately, it doesn't look like we can do better than regression testing for the time being. I'll make it easy for those timeouts to be tuned though, so that RMW authors can still make some use of these tests.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,16,https://github.com/ros2/rmw/pull/262#issuecomment-678410554,Precisely what the title says.,"That's a bug IMO.

Perhaps it is. I don't know what triggering the graph guard condition on every pub/sub match would do to wait set performance. FWIW I couldn't find anything in documentation that'd suggest it should be this way or the other.

IMHO, rmw API must not require sleeps at all.

Agreed.",True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/gbiggs,17,https://github.com/ros2/rmw/pull/262#issuecomment-678863702,Precisely what the title says.,"So if we want to add them that's fine, but I can't give you a number that isn't arbitrary myself. Sorry, I know that's not satisfying but I've been dealing with this while trying to write requirements for rclcpp for Apex and in my opinion there are no satisfying answers.

In my experience, the best way to deal with requirements like that is to be relative, rather than absolute. ""A must happen before B can happen"", ""A must happen before the system attempts C"", ""The system shall not be considered started until A has happened"", etc. Specific time limits are too dependent on the hardware, the underlying implementation, and the needs of the application (my application might be happy to wait 5 minutes, yours might not) to be worth it.

I expect (hope for?) them to be the contract and verification process that any RMW implementation has to comply with and go through, respectively, and not just the tests that ensure our current code doesn't regress.

I 100% agree with the sentiment that we want the API documentation to be the enforceable contract. However I don't think that contract must include specific time limits even where we can't provide them in any meaningful way. Specifying it in terms of ""if this has not happened, you can't do X"" makes more sense to me. It's more stateful, but it's a stateful API anyway.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,18,https://github.com/ros2/rmw/pull/262#issuecomment-679128385,Precisely what the title says.,"Specific time limits are too dependent on the hardware, the underlying implementation, and the needs of the application (my application might be happy to wait 5 minutes, yours might not) to be worth it.

I agree with that. Still, we will have a finite timeout. A timeout that will just be enough to get rmw_fastrtps*_cpp, rmw_cyclonedds_cpp, and rmw_connext_cpp passing tests in our CI machines w/o flakes. And thus test results won't be generic.

This was a very interesting discussion, but I will not push it any further. Thank you all for the time!",True,{'THUMBS_UP': ['https://github.com/gbiggs']}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,19,https://github.com/ros2/rmw/pull/262#issuecomment-679319260,Precisely what the title says.,FYI #264,True,{}
ros2/rmw,https://github.com/ros2/rmw,262,2020-08-20T14:16:29Z,2020-08-27T15:55:52Z,2020-08-27T15:55:55Z,MERGED,True,22,0,1,https://github.com/hidmic,Update publisher/subscription matched count API documentation.,2,[],https://github.com/ros2/rmw/pull/262,https://github.com/hidmic,20,https://github.com/ros2/rmw/pull/262#issuecomment-680866770,Precisely what the title says.,"CI up to test_rmw_implementation, against all Tier 1 RMW implementations:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,263,2020-08-20T14:46:46Z,2020-08-24T21:13:57Z,2020-08-24T21:14:01Z,MERGED,True,28,6,1,https://github.com/hidmic,Update publisher/subscription QoS query API documentation.,2,[],https://github.com/ros2/rmw/pull/263,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/263,Follow-up after 0176872 (#256).,Follow-up after 0176872 (#256).,True,{}
ros2/rmw,https://github.com/ros2/rmw,263,2020-08-20T14:46:46Z,2020-08-24T21:13:57Z,2020-08-24T21:14:01Z,MERGED,True,28,6,1,https://github.com/hidmic,Update publisher/subscription QoS query API documentation.,2,[],https://github.com/ros2/rmw/pull/263,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/263#issuecomment-679177877,Follow-up after 0176872 (#256).,"Well, it appears that ""no allocation"" is too strict for our current RMW implementations.",True,{}
ros2/rmw,https://github.com/ros2/rmw,263,2020-08-20T14:46:46Z,2020-08-24T21:13:57Z,2020-08-24T21:14:01Z,MERGED,True,28,6,1,https://github.com/hidmic,Update publisher/subscription QoS query API documentation.,2,[],https://github.com/ros2/rmw/pull/263,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/263#issuecomment-679201123,Follow-up after 0176872 (#256).,"CI up to test_rmw_implementation:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,265,2020-08-26T00:54:39Z,2020-08-26T01:59:45Z,2020-08-26T01:59:49Z,MERGED,True,14,4,1,https://github.com/jacobperron,[foxy backport] Fix rmw_names_and_types_fini test to address issue #234 (#235),1,['bug'],https://github.com/ros2/rmw/pull/265,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/265,"Backport #235 to Foxy.
I'm hoping this fixes the same test failure we're seeing in Foxy, for example:
https://ci.ros2.org/job/ci_linux/12067/testReport/(root)/rmw_names_and_types/rmw_names_and_types_fini/","Backport #235 to Foxy.
I'm hoping this fixes the same test failure we're seeing in Foxy, for example:
https://ci.ros2.org/job/ci_linux/12067/testReport/(root)/rmw_names_and_types/rmw_names_and_types_fini/",True,{}
ros2/rmw,https://github.com/ros2/rmw,266,2020-08-27T19:51:50Z,2020-08-28T15:28:10Z,2020-08-28T15:28:13Z,MERGED,True,1,1,1,https://github.com/jacobperron,[eloquent] Do not link against pthread on Android (#259),1,[],https://github.com/ros2/rmw/pull/266,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/266,Porting #259 to Eloquent,Porting #259 to Eloquent,True,{}
ros2/rmw,https://github.com/ros2/rmw,267,2020-08-27T19:52:26Z,2020-09-16T22:52:05Z,2020-09-16T22:52:09Z,MERGED,True,1,1,1,https://github.com/jacobperron,Do not link against pthread on Android (#259),1,[],https://github.com/ros2/rmw/pull/267,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/267,Porting #259 to Rolling,Porting #259 to Rolling,True,{}
ros2/rmw,https://github.com/ros2/rmw,268,2020-08-27T19:52:58Z,2020-09-16T23:04:27Z,2020-09-16T23:04:31Z,MERGED,True,1,1,1,https://github.com/jacobperron,[foxy] Do not link against pthread on Android (#259),1,[],https://github.com/ros2/rmw/pull/268,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/268,Porting #259 to Foxy,Porting #259 to Foxy,True,{}
ros2/rmw,https://github.com/ros2/rmw,269,2020-08-27T23:30:52Z,2020-08-28T21:10:12Z,2020-08-28T21:10:15Z,MERGED,True,7,0,2,https://github.com/brawner,Add bad_alloc return to topic_endpoint_info functions,1,[],https://github.com/ros2/rmw/pull/269,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/269,"From feedback on #254, it was recommended to add a bad_alloc return to topic_endpoint_info functions that do string duplication with an allocator.
Signed-off-by: Stephen Brawner brawner@gmail.com","From feedback on #254, it was recommended to add a bad_alloc return to topic_endpoint_info functions that do string duplication with an allocator.
Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,269,2020-08-27T23:30:52Z,2020-08-28T21:10:12Z,2020-08-28T21:10:15Z,MERGED,True,7,0,2,https://github.com/brawner,Add bad_alloc return to topic_endpoint_info functions,1,[],https://github.com/ros2/rmw/pull/269,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/269#issuecomment-682242581,"From feedback on #254, it was recommended to add a bad_alloc return to topic_endpoint_info functions that do string duplication with an allocator.
Signed-off-by: Stephen Brawner brawner@gmail.com","Testing --packages-select rmw

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,270,2020-09-01T16:16:59Z,2020-09-04T20:31:29Z,2020-09-04T20:31:33Z,MERGED,True,254,51,1,https://github.com/hidmic,Update publishing API documentation.,10,[],https://github.com/ros2/rmw/pull/270,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/270,Precisely what the title says.,Precisely what the title says.,True,{}
ros2/rmw,https://github.com/ros2/rmw,270,2020-09-01T16:16:59Z,2020-09-04T20:31:29Z,2020-09-04T20:31:33Z,MERGED,True,254,51,1,https://github.com/hidmic,Update publishing API documentation.,10,[],https://github.com/ros2/rmw/pull/270,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/270#issuecomment-685812057,Precisely what the title says.,"Alright, I think this is now complete. PTAL !",True,{}
ros2/rmw,https://github.com/ros2/rmw,270,2020-09-01T16:16:59Z,2020-09-04T20:31:29Z,2020-09-04T20:31:33Z,MERGED,True,254,51,1,https://github.com/hidmic,Update publishing API documentation.,10,[],https://github.com/ros2/rmw/pull/270,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/270#issuecomment-685828262,Precisely what the title says.,"Ok, now it is ready. A couple things were either not constrained enough or not generic enough.",True,{}
ros2/rmw,https://github.com/ros2/rmw,270,2020-09-01T16:16:59Z,2020-09-04T20:31:29Z,2020-09-04T20:31:33Z,MERGED,True,254,51,1,https://github.com/hidmic,Update publishing API documentation.,10,[],https://github.com/ros2/rmw/pull/270,https://github.com/hidmic,4,https://github.com/ros2/rmw/pull/270#issuecomment-686610505,Precisely what the title says.,"Alright, that should be it.",True,{}
ros2/rmw,https://github.com/ros2/rmw,270,2020-09-01T16:16:59Z,2020-09-04T20:31:29Z,2020-09-04T20:31:33Z,MERGED,True,254,51,1,https://github.com/hidmic,Update publishing API documentation.,10,[],https://github.com/ros2/rmw/pull/270,https://github.com/hidmic,5,https://github.com/ros2/rmw/pull/270#issuecomment-687367792,Precisely what the title says.,Going in!,True,{}
ros2/rmw,https://github.com/ros2/rmw,271,2020-09-02T16:36:32Z,2020-09-07T15:21:32Z,2020-09-07T15:21:35Z,MERGED,True,596,86,1,https://github.com/hidmic,Update taking API documentation.,6,[],https://github.com/ros2/rmw/pull/271,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/271,Precisely what the title says. Closely related to #270.,Precisely what the title says. Closely related to #270.,True,{}
ros2/rmw,https://github.com/ros2/rmw,271,2020-09-02T16:36:32Z,2020-09-07T15:21:32Z,2020-09-07T15:21:35Z,MERGED,True,596,86,1,https://github.com/hidmic,Update taking API documentation.,6,[],https://github.com/ros2/rmw/pull/271,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/271#issuecomment-686065760,Precisely what the title says. Closely related to #270.,"Oof, this is getting big. On top of what we discussed, I added a few more clarifications as to what to expect when a logical/runtime error occurs.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,271,2020-09-02T16:36:32Z,2020-09-07T15:21:32Z,2020-09-07T15:21:35Z,MERGED,True,596,86,1,https://github.com/hidmic,Update taking API documentation.,6,[],https://github.com/ros2/rmw/pull/271,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/271#issuecomment-686066395,Precisely what the title says. Closely related to #270.,"Another thing we should also document is if take (and publish) calls are: blocking or not, synchronous or not. OR leave that door open.",True,{'THUMBS_UP': ['https://github.com/wjwwood']}
ros2/rmw,https://github.com/ros2/rmw,271,2020-09-02T16:36:32Z,2020-09-07T15:21:32Z,2020-09-07T15:21:35Z,MERGED,True,596,86,1,https://github.com/hidmic,Update taking API documentation.,6,[],https://github.com/ros2/rmw/pull/271,https://github.com/ivanpauno,4,https://github.com/ros2/rmw/pull/271#issuecomment-686489350,Precisely what the title says. Closely related to #270.,"blocking or not, synchronous or not. OR leave that door open.

publish depends on the rmw implementation now.
I think take is always non-blocking and synchronous.
Considering how we use it, I think that that should be an API requirement.",True,{}
ros2/rmw,https://github.com/ros2/rmw,271,2020-09-02T16:36:32Z,2020-09-07T15:21:32Z,2020-09-07T15:21:35Z,MERGED,True,596,86,1,https://github.com/hidmic,Update taking API documentation.,6,[],https://github.com/ros2/rmw/pull/271,https://github.com/hidmic,5,https://github.com/ros2/rmw/pull/271#issuecomment-686509731,Precisely what the title says. Closely related to #270.,"I think take is always non-blocking and synchronous.

I agree with it being synchronous, but non-blocking is a tricky one. Well, it depends on how you define it. take will not wait for the queue to fill up, that for sure, and the documentation already says so. But it may have to contend with other threads for the reader queue (or the message loaning pool if any). Presumably for a limited amount of time, but the thread will get re-scheduled anyways.
I'd say we allow implementations to wait on locks, but we don't allow them to wait for external events (like a message arriving, or an empty message loaning pool getting refilled, effectively banning semaphores). Some implementation may choose to go full non-blocking, but that's a bit too much for all, I think.",True,{}
ros2/rmw,https://github.com/ros2/rmw,271,2020-09-02T16:36:32Z,2020-09-07T15:21:32Z,2020-09-07T15:21:35Z,MERGED,True,596,86,1,https://github.com/hidmic,Update taking API documentation.,6,[],https://github.com/ros2/rmw/pull/271,https://github.com/ivanpauno,6,https://github.com/ros2/rmw/pull/271#issuecomment-686529158,Precisely what the title says. Closely related to #270.,"I agree with it being synchronous, but non-blocking is a tricky one. Well, it depends on how you define it. take will not wait for the queue to fill up, that for sure, and the documentation already says so. But it may have to contend with other threads for the reader queue (or the message loaning pool if any). Presumably for a limited amount of time, but the thread will get re-scheduled anyways.

I think that non-blocking isn't the same as lock-free, but maybe I'm wrong.
But yeah, I agree with your requirements above.
(edit) Mutex locking is considered a blocking operation, so I think you're right. It would be great to have a clear requirement in the doc block.",True,{'THUMBS_UP': ['https://github.com/hidmic']}
ros2/rmw,https://github.com/ros2/rmw,271,2020-09-02T16:36:32Z,2020-09-07T15:21:32Z,2020-09-07T15:21:35Z,MERGED,True,596,86,1,https://github.com/hidmic,Update taking API documentation.,6,[],https://github.com/ros2/rmw/pull/271,https://github.com/hidmic,7,https://github.com/ros2/rmw/pull/271#issuecomment-686593226,Precisely what the title says. Closely related to #270.,"See be1db39. Couldn't come up with a better subtitle than "" Runtime behavior"". I'm open to better naming.",True,{}
ros2/rmw,https://github.com/ros2/rmw,271,2020-09-02T16:36:32Z,2020-09-07T15:21:32Z,2020-09-07T15:21:35Z,MERGED,True,596,86,1,https://github.com/hidmic,Update taking API documentation.,6,[],https://github.com/ros2/rmw/pull/271,https://github.com/hidmic,8,https://github.com/ros2/rmw/pull/271#issuecomment-688390065,Precisely what the title says. Closely related to #270.,"Alright, going in!",True,{}
ros2/rmw,https://github.com/ros2/rmw,272,2020-09-11T22:33:19Z,2020-09-24T18:25:37Z,2020-09-24T18:25:40Z,MERGED,True,980,371,8,https://github.com/hidmic,Update graph API documentation.,4,[],https://github.com/ros2/rmw/pull/272,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/272,Precisely what the title says. First pass.,Precisely what the title says. First pass.,True,{}
ros2/rmw,https://github.com/ros2/rmw,272,2020-09-11T22:33:19Z,2020-09-24T18:25:37Z,2020-09-24T18:25:40Z,MERGED,True,980,371,8,https://github.com/hidmic,Update graph API documentation.,4,[],https://github.com/ros2/rmw/pull/272,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/272#issuecomment-692226822,Precisely what the title says. First pass.,"Comments addressed, PTAL!",True,{}
ros2/rmw,https://github.com/ros2/rmw,272,2020-09-11T22:33:19Z,2020-09-24T18:25:37Z,2020-09-24T18:25:40Z,MERGED,True,980,371,8,https://github.com/hidmic,Update graph API documentation.,4,[],https://github.com/ros2/rmw/pull/272,https://github.com/gbiggs,3,https://github.com/ros2/rmw/pull/272#issuecomment-694066056,Precisely what the title says. First pass.,"@clalancette Regarding writing a higher level concepts document, ""write a tutorial on how to write an RMW implementation"" is one of the outputs we planned for the Zenoh work. I'm happy to help out with writing the higher-level concepts document, provided someone with more experience with the API is willing to review it in detail.",True,"{'HEART': ['https://github.com/ivanpauno', 'https://github.com/clalancette']}"
ros2/rmw,https://github.com/ros2/rmw,272,2020-09-11T22:33:19Z,2020-09-24T18:25:37Z,2020-09-24T18:25:40Z,MERGED,True,980,371,8,https://github.com/hidmic,Update graph API documentation.,4,[],https://github.com/ros2/rmw/pull/272,https://github.com/hidmic,4,https://github.com/ros2/rmw/pull/272#issuecomment-694970431,Precisely what the title says. First pass.,FYI I'll start writing tests and adapting implementation to comply with this. We can sort out where to put documentation later on.,True,{}
ros2/rmw,https://github.com/ros2/rmw,272,2020-09-11T22:33:19Z,2020-09-24T18:25:37Z,2020-09-24T18:25:40Z,MERGED,True,980,371,8,https://github.com/hidmic,Update graph API documentation.,4,[],https://github.com/ros2/rmw/pull/272,https://github.com/hidmic,5,https://github.com/ros2/rmw/pull/272#issuecomment-698510944,Precisely what the title says. First pass.,"Alright, going in!",True,{}
ros2/rmw,https://github.com/ros2/rmw,274,2020-09-21T22:50:33Z,2020-09-22T15:32:04Z,2021-04-22T18:06:19Z,MERGED,True,55,9,1,https://github.com/hidmic,Update gid API documentation.,3,[],https://github.com/ros2/rmw/pull/274,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/274,"Namely, rmw_get_gid_for_publisher() and rmw_compare_gids_equal().","Namely, rmw_get_gid_for_publisher() and rmw_compare_gids_equal().",True,{}
ros2/rmw,https://github.com/ros2/rmw,275,2020-09-22T17:42:38Z,2020-09-25T13:25:23Z,2020-09-25T13:25:27Z,MERGED,True,109,44,1,https://github.com/hidmic,Update wait and wait sets' API documentation.,3,[],https://github.com/ros2/rmw/pull/275,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/275,Precisely what the title says. It includes some remarks about how time is measured to document ros2/rcl#687.,Precisely what the title says. It includes some remarks about how time is measured to document ros2/rcl#687.,True,{}
ros2/rmw,https://github.com/ros2/rmw,275,2020-09-22T17:42:38Z,2020-09-25T13:25:23Z,2020-09-25T13:25:27Z,MERGED,True,109,44,1,https://github.com/hidmic,Update wait and wait sets' API documentation.,3,[],https://github.com/ros2/rmw/pull/275,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/275#issuecomment-698926678,Precisely what the title says. It includes some remarks about how time is measured to document ros2/rcl#687.,"Alright, in the interest of time, I'll get this in. More tests will come soon after.",True,{}
ros2/rmw,https://github.com/ros2/rmw,276,2020-09-22T19:03:50Z,2020-09-24T17:27:55Z,2020-09-24T17:27:58Z,MERGED,True,129,21,1,https://github.com/hidmic,Update service server/client creation/destruction API documentation.,3,[],https://github.com/ros2/rmw/pull/276,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/276,Precisely what the title says.,Precisely what the title says.,True,{}
ros2/rmw,https://github.com/ros2/rmw,276,2020-09-22T19:03:50Z,2020-09-24T17:27:55Z,2020-09-24T17:27:58Z,MERGED,True,129,21,1,https://github.com/hidmic,Update service server/client creation/destruction API documentation.,3,[],https://github.com/ros2/rmw/pull/276,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/276#issuecomment-697880839,Precisely what the title says.,"CI up to test_rmw_implementation and rcl:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,276,2020-09-22T19:03:50Z,2020-09-24T17:27:55Z,2020-09-24T17:27:58Z,MERGED,True,129,21,1,https://github.com/hidmic,Update service server/client creation/destruction API documentation.,3,[],https://github.com/ros2/rmw/pull/276,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/276#issuecomment-698445718,Precisely what the title says.,"CI up to test_rmw_implementation and rcl:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,276,2020-09-22T19:03:50Z,2020-09-24T17:27:55Z,2020-09-24T17:27:58Z,MERGED,True,129,21,1,https://github.com/hidmic,Update service server/client creation/destruction API documentation.,3,[],https://github.com/ros2/rmw/pull/276,https://github.com/hidmic,4,https://github.com/ros2/rmw/pull/276#issuecomment-698482114,Precisely what the title says.,"Alright, going in !",True,{}
ros2/rmw,https://github.com/ros2/rmw,277,2020-09-23T19:38:37Z,2022-02-03T14:33:44Z,2022-02-03T14:33:47Z,MERGED,True,30,21,1,https://github.com/hidmic,Update rmw_server_is_available() API documentation.,1,[],https://github.com/ros2/rmw/pull/277,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/277,"Precisely what the title says. Related to #272, but in a separate PR after #276.","Precisely what the title says. Related to #272, but in a separate PR after #276.",True,{}
ros2/rmw,https://github.com/ros2/rmw,277,2020-09-23T19:38:37Z,2022-02-03T14:33:44Z,2022-02-03T14:33:47Z,MERGED,True,30,21,1,https://github.com/hidmic,Update rmw_server_is_available() API documentation.,1,[],https://github.com/ros2/rmw/pull/277,https://github.com/clalancette,2,https://github.com/ros2/rmw/pull/277#issuecomment-1029050504,"Precisely what the title says. Related to #272, but in a separate PR after #276.","Given that this has two approvals, and just updates documentation, I'm going to take Rpr job as good enough and merge this one in.",True,{}
ros2/rmw,https://github.com/ros2/rmw,278,2020-09-23T21:24:23Z,2020-09-24T13:11:09Z,2020-09-24T13:11:13Z,MERGED,True,4,0,1,https://github.com/ahcorde,Updated docblock rmw_*_*_allocation returns,1,['documentation'],https://github.com/ros2/rmw/pull/278,https://github.com/ahcorde,1,https://github.com/ros2/rmw/pull/278,"Updated API documentation. Related with these PRs:

ros2/rmw_connext#463
ros2/rmw_cyclonedds#246
ros2/rmw_fastrtps#443

Signed-off-by: ahcorde ahcorde@gmail.com","Updated API documentation. Related with these PRs:

ros2/rmw_connext#463
ros2/rmw_cyclonedds#246
ros2/rmw_fastrtps#443

Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,278,2020-09-23T21:24:23Z,2020-09-24T13:11:09Z,2020-09-24T13:11:13Z,MERGED,True,4,0,1,https://github.com/ahcorde,Updated docblock rmw_*_*_allocation returns,1,['documentation'],https://github.com/ros2/rmw/pull/278,https://github.com/ahcorde,2,https://github.com/ros2/rmw/pull/278#issuecomment-698193819,"Updated API documentation. Related with these PRs:

ros2/rmw_connext#463
ros2/rmw_cyclonedds#246
ros2/rmw_fastrtps#443

Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,279,2020-09-24T17:24:55Z,2020-09-30T13:23:16Z,2020-09-30T13:23:19Z,MERGED,True,263,22,1,https://github.com/hidmic,Update service request/response API documentation.,3,[],https://github.com/ros2/rmw/pull/279,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/279,Precisely what the title says.,Precisely what the title says.,True,{}
ros2/rmw,https://github.com/ros2/rmw,279,2020-09-24T17:24:55Z,2020-09-30T13:23:16Z,2020-09-30T13:23:19Z,MERGED,True,263,22,1,https://github.com/hidmic,Update service request/response API documentation.,3,[],https://github.com/ros2/rmw/pull/279,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/279#issuecomment-698529363,Precisely what the title says.,@clalancette PTAL @ b8d74be,True,{}
ros2/rmw,https://github.com/ros2/rmw,279,2020-09-24T17:24:55Z,2020-09-30T13:23:16Z,2020-09-30T13:23:19Z,MERGED,True,263,22,1,https://github.com/hidmic,Update service request/response API documentation.,3,[],https://github.com/ros2/rmw/pull/279,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/279#issuecomment-701387449,Precisely what the title says.,Alright going in!,True,{}
ros2/rmw,https://github.com/ros2/rmw,280,2020-09-28T09:43:38Z,2020-09-28T18:50:11Z,2020-09-28T18:50:15Z,MERGED,True,2,0,1,https://github.com/ahcorde,Update rmw_service_server_is_available doc,1,['documentation'],https://github.com/ros2/rmw/pull/280,https://github.com/ahcorde,1,https://github.com/ros2/rmw/pull/280,"Update rmw_service_server_is_available doc. rmw_service_server_is_available returns RMW_RET_INCORRECT_RMW_IMPLEMENTATION.
Signed-off-by: ahcorde ahcorde@gmail.com","Update rmw_service_server_is_available doc. rmw_service_server_is_available returns RMW_RET_INCORRECT_RMW_IMPLEMENTATION.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,280,2020-09-28T09:43:38Z,2020-09-28T18:50:11Z,2020-09-28T18:50:15Z,MERGED,True,2,0,1,https://github.com/ahcorde,Update rmw_service_server_is_available doc,1,['documentation'],https://github.com/ros2/rmw/pull/280,https://github.com/ahcorde,2,https://github.com/ros2/rmw/pull/280#issuecomment-699902577,"Update rmw_service_server_is_available doc. rmw_service_server_is_available returns RMW_RET_INCORRECT_RMW_IMPLEMENTATION.
Signed-off-by: ahcorde ahcorde@gmail.com","Related:

ros2/rmw_fastrtps#451
ros2/rmw_connext#466",True,{}
ros2/rmw,https://github.com/ros2/rmw,280,2020-09-28T09:43:38Z,2020-09-28T18:50:11Z,2020-09-28T18:50:15Z,MERGED,True,2,0,1,https://github.com/ahcorde,Update rmw_service_server_is_available doc,1,['documentation'],https://github.com/ros2/rmw/pull/280,https://github.com/ahcorde,3,https://github.com/ros2/rmw/pull/280#issuecomment-699905652,"Update rmw_service_server_is_available doc. rmw_service_server_is_available returns RMW_RET_INCORRECT_RMW_IMPLEMENTATION.
Signed-off-by: ahcorde ahcorde@gmail.com","Compiling up-to rmw and testing rmw:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,281,2020-09-28T15:07:47Z,2020-09-29T08:11:39Z,2021-04-22T18:06:19Z,MERGED,True,1,0,1,https://github.com/ahcorde,Update rmw_get_serialized_message_size docblock,1,['documentation'],https://github.com/ros2/rmw/pull/281,https://github.com/ahcorde,1,https://github.com/ros2/rmw/pull/281,"Update rmw_get_serialized_message_size docblock to return the right error code.
Signed-off-by: ahcorde ahcorde@gmail.com","Update rmw_get_serialized_message_size docblock to return the right error code.
Signed-off-by: ahcorde ahcorde@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,281,2020-09-28T15:07:47Z,2020-09-29T08:11:39Z,2021-04-22T18:06:19Z,MERGED,True,1,0,1,https://github.com/ahcorde,Update rmw_get_serialized_message_size docblock,1,['documentation'],https://github.com/ros2/rmw/pull/281,https://github.com/ahcorde,2,https://github.com/ros2/rmw/pull/281#issuecomment-700069942,"Update rmw_get_serialized_message_size docblock to return the right error code.
Signed-off-by: ahcorde ahcorde@gmail.com","Related:

ros2/rmw_fastrtps#452
ros2/rmw_connext#467
ros2/rmw_cyclonedds#250",True,{}
ros2/rmw,https://github.com/ros2/rmw,281,2020-09-28T15:07:47Z,2020-09-29T08:11:39Z,2021-04-22T18:06:19Z,MERGED,True,1,0,1,https://github.com/ahcorde,Update rmw_get_serialized_message_size docblock,1,['documentation'],https://github.com/ros2/rmw/pull/281,https://github.com/ahcorde,3,https://github.com/ros2/rmw/pull/281#issuecomment-700505963,"Update rmw_get_serialized_message_size docblock to return the right error code.
Signed-off-by: ahcorde ahcorde@gmail.com","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,282,2020-10-07T14:03:12Z,2020-10-08T12:34:52Z,2021-04-22T18:06:18Z,MERGED,True,6,4,2,https://github.com/ivanpauno,Update maintainers,1,[],https://github.com/ros2/rmw/pull/282,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/282,,,True,{}
ros2/rmw,https://github.com/ros2/rmw,283,2020-10-13T07:21:28Z,2020-10-13T18:56:07Z,2020-10-13T18:56:10Z,MERGED,True,3332,757,23,https://github.com/ahcorde,"[Backport Foxy] Bug fixed, improved return codes and documentation",32,[],https://github.com/ros2/rmw/pull/283,https://github.com/ahcorde,1,https://github.com/ros2/rmw/pull/283,"Backported some of the improvements done to increase the code coverage: Bug fixed, improved return codes and documentation","Backported some of the improvements done to increase the code coverage: Bug fixed, improved return codes and documentation",True,{}
ros2/rmw,https://github.com/ros2/rmw,283,2020-10-13T07:21:28Z,2020-10-13T18:56:07Z,2020-10-13T18:56:10Z,MERGED,True,3332,757,23,https://github.com/ahcorde,"[Backport Foxy] Bug fixed, improved return codes and documentation",32,[],https://github.com/ros2/rmw/pull/283,https://github.com/ahcorde,2,https://github.com/ros2/rmw/pull/283#issuecomment-707548289,"Backported some of the improvements done to increase the code coverage: Bug fixed, improved return codes and documentation","Compiled up-to rmw and testing rmw:

Linux 
Linux-aarch64 
macOS 
Windows 

This will require a release.",True,{}
ros2/rmw,https://github.com/ros2/rmw,283,2020-10-13T07:21:28Z,2020-10-13T18:56:07Z,2020-10-13T18:56:10Z,MERGED,True,3332,757,23,https://github.com/ahcorde,"[Backport Foxy] Bug fixed, improved return codes and documentation",32,[],https://github.com/ros2/rmw/pull/283,https://github.com/brawner,3,https://github.com/ros2/rmw/pull/283#issuecomment-707909666,"Backported some of the improvements done to increase the code coverage: Bug fixed, improved return codes and documentation","Connext only:

Linux 
Linux-aarch64 
macOS 
Windows 

CycloneDDS only:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,284,2020-10-19T13:56:30Z,2020-10-19T17:48:04Z,2020-10-19T17:48:07Z,MERGED,True,335,0,5,https://github.com/ivanpauno,Add functions to convert between qos policy values and strings,5,['enhancement'],https://github.com/ros2/rmw/pull/284,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/284,"Required by ros2/rclcpp#1408, the idea is to avoid custom conversions in different clients (rclcpp, rclpy).
Replaces ros2/rcl#836.","Required by ros2/rclcpp#1408, the idea is to avoid custom conversions in different clients (rclcpp, rclpy).
Replaces ros2/rcl#836.",True,{}
ros2/rmw,https://github.com/ros2/rmw,284,2020-10-19T13:56:30Z,2020-10-19T17:48:04Z,2020-10-19T17:48:07Z,MERGED,True,335,0,5,https://github.com/ivanpauno,Add functions to convert between qos policy values and strings,5,['enhancement'],https://github.com/ros2/rmw/pull/284,https://github.com/ivanpauno,2,https://github.com/ros2/rmw/pull/284#issuecomment-712320575,"Required by ros2/rclcpp#1408, the idea is to avoid custom conversions in different clients (rclcpp, rclpy).
Replaces ros2/rcl#836.","CI (testing only rmw):

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,285,2020-10-19T19:17:12Z,2020-10-19T21:41:43Z,2020-10-19T21:41:48Z,MERGED,True,189,13,5,https://github.com/ivanpauno,"Extend rmw_qos_policy_kind_t, add functions to convert it to/from a string",2,['enhancement'],https://github.com/ros2/rmw/pull/285,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/285,"Follow-up of #284.
Useful for ros2/rclcpp#1408.
What this PR does?:

Move rmw_qos_policy_kind_t to a standalone header.
Extend its definition to cover all posible policies.
Add functions to convert it to/from a string.
Null checking for the functions added in #284.","Follow-up of #284.
Useful for ros2/rclcpp#1408.
What this PR does?:

Move rmw_qos_policy_kind_t to a standalone header.
Extend its definition to cover all posible policies.
Add functions to convert it to/from a string.
Null checking for the functions added in #284.",True,{}
ros2/rmw,https://github.com/ros2/rmw,285,2020-10-19T19:17:12Z,2020-10-19T21:41:43Z,2020-10-19T21:41:48Z,MERGED,True,189,13,5,https://github.com/ivanpauno,"Extend rmw_qos_policy_kind_t, add functions to convert it to/from a string",2,['enhancement'],https://github.com/ros2/rmw/pull/285,https://github.com/ivanpauno,2,https://github.com/ros2/rmw/pull/285#issuecomment-712436539,"Follow-up of #284.
Useful for ros2/rclcpp#1408.
What this PR does?:

Move rmw_qos_policy_kind_t to a standalone header.
Extend its definition to cover all posible policies.
Add functions to convert it to/from a string.
Null checking for the functions added in #284.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/irobot-ros,1,https://github.com/ros2/rmw/pull/286,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/ros-discourse,2,https://github.com/ros2/rmw/pull/286#issuecomment-713638034,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros2-middleware-change-proposal/15863/20",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/ros-discourse,3,https://github.com/ros2/rmw/pull/286#issuecomment-725483300,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros2-middleware-change-proposal/15863/29",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/rpaaron,4,https://github.com/ros2/rmw/pull/286#issuecomment-793565471,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305",I see there is some discussion over on ros2/design#305 about executors being supported out of tree.  Will this PR get merged even if the other is still being discussed?,True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/286#issuecomment-794960011,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","I've been testing these changes with some rebasing. I think things are looking good. I still have one item to follow up on design wise, but in the mean time we need to clean up the commit history. Ideally, we could organize the commits (maybe squash them into one or at least fewer commits), but at the very least we need to have all the commits passing the DCO checker. This goes for the other pull requests too.
I would offer to do this for you, but I really need you guys to do the DCO signing.
I cannot test it until master is merged in or rebased against master (my preference).",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/wjwwood,6,https://github.com/ros2/rmw/pull/286#issuecomment-794961073,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","I see there is some discussion over on ros2/design#305 about executors being supported out of tree. Will this PR get merged even if the other is still being discussed?

That's the plan. Merge the rmw/rcl changes related to ""listener"" style API, and then iterate on the c++ executor designs asynchronously.",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/wjwwood,7,https://github.com/ros2/rmw/pull/286#issuecomment-811759558,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","@irobot-ros or @mauropasse, is it ok if I push directly (maybe force push to rebase) to this pull request branch? Or should I make my own?",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/irobot-ros,8,https://github.com/ros2/rmw/pull/286#issuecomment-811839746,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","@wjwwood yes sure, go ahead and push to this branch if you prefer.
FYI we just pushed a commit (here and in other PRs) that removes guard condition listeners as discussed in last Middleware WG.",True,{'THUMBS_UP': ['https://github.com/wjwwood']}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/286#issuecomment-812319284,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/wjwwood,10,https://github.com/ros2/rmw/pull/286#issuecomment-812331153,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","@irobot-ros @mauropasse there are some test failures (I can fix the uncrustify one for rmw_fastrtps), but the others need some investigation, so if you have any time that would be great:
https://ci.ros2.org/job/ci_linux/14198/testReport/
I know it must be getting close to you guy's weekend, so if not I'll try to investigate tomorrow some if I have time.",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/irobot-ros,11,https://github.com/ros2/rmw/pull/286#issuecomment-812540949,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","I fixed the fastrtps uncrustify errors.
I had a quick look at the other failures, but I don't really know the internals of how QoS events work.
@mauropasse should be able to address them, but he will be back on Tuesday.",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/mauropasse,12,https://github.com/ros2/rmw/pull/286#issuecomment-813443853,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","@irobot-ros @mauropasse there are some test failures (I can fix the uncrustify one for rmw_fastrtps), but the others need some investigation, so if you have any time that would be great: https://ci.ros2.org/job/ci_linux/14198/testReport/

projectroot.test.rclcpp.test_qos_event fails because assigning listener callbacks in CycloneDDS breaks the wait_set based executors notify mechanisms: see ros2/rmw_cyclonedds#256 (comment) (Issue 1).
A temporary workaround is done in this PR: eclipse-cyclonedds/cyclonedds#699
The test_qos_event is based on the SingleThreadedExecutor so is never notified about a happened event.
I'll take a look to the other failing tests.",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/wjwwood,13,https://github.com/ros2/rmw/pull/286#issuecomment-813814447,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","I'm rerunning CI for this without the rclcpp pull request (ros2/rclcpp#1579):

Linux 
Linux-aarch64 
macOS 
Windows 

If it looks good, then we can at least take those API's in, and maybe we can do ABI stable additions to rclcpp after the release. I'm going to propose we extend our pimpl pattern usage before the release to make that possible.",True,{}
ros2/rmw,https://github.com/ros2/rmw,286,2020-10-21T14:43:07Z,2022-02-24T08:32:06Z,2022-02-24T08:32:06Z,MERGED,True,195,1,2,https://github.com/irobot-ros,Add EventsExecutor,10,[],https://github.com/ros2/rmw/pull/286,https://github.com/mauropasse,14,https://github.com/ros2/rmw/pull/286#issuecomment-816101514,"This PR introduces the changes required to implement the EventsExecutor design in rmw.
See design and Discourse post.
The new executor uses an events queue and a timers manager as opposed to waitsets, to efficiently execute entities with work to do.
This new executor greatly reduces CPU usage of a ROS 2 application.
See the blog post for more details on the tests that we run.
The bulk of the changes for this implementation are in the rclcpp layer, with some minor changes in other repositories (rcl, rmw, rmw_implementation) for forwarding entities, the declaration of some data types in rcutils, and finally some additional changes in the vendor specific rmw implementations..
We currently implemented this only on top of the default ROS middleware fastrtps, while we provided stubs for other middlewares.
See the main PR to rclcpp ros2/rclcpp#1416.
The current implementation does not support ROS 2 actions, which will be added in a follow up PR.
Developed by iRobot
Mauro Passerino
Lenny Story
Alberto Soragna

Connects to:

design:

ros2/design#305","I went through the failing tests
projectroot.test.test_graph__rmw_cyclonedds_cpp
projectroot.test.test_events__rmw_cyclonedds_cpp
rcl.NodeGraphMultiNodeFixture.test_node_info_subscriptions
rcl.NodeGraphMultiNodeFixture.test_node_info_publishers
rcl.NodeGraphMultiNodeFixture.test_node_info_services
rcl.NodeGraphMultiNodeFixture.test_node_info_clients
rcl.test_events__rmw_cyclonedds_cpp.gtest.missing_result

They are all fixed with my temporary workaround on CycloneDDS eclipse-cyclonedds/cyclonedds#699 , the issue is what I explained on #286 (comment)",True,{}
ros2/rmw,https://github.com/ros2/rmw,287,2020-10-27T12:01:04Z,2020-10-28T08:16:57Z,2020-10-28T08:17:00Z,MERGED,True,5,5,2,https://github.com/ahcorde,[backport Foxy] Update QD,2,[],https://github.com/ros2/rmw/pull/287,https://github.com/ahcorde,1,https://github.com/ros2/rmw/pull/287,,,True,{}
ros2/rmw,https://github.com/ros2/rmw,288,2020-10-28T15:30:20Z,2020-10-29T09:20:59Z,2021-04-22T18:06:17Z,CLOSED,False,330,120,10,https://github.com/ahcorde,[Backport Foxy] Lost subscription events,2,[],https://github.com/ros2/rmw/pull/288,https://github.com/ahcorde,1,https://github.com/ros2/rmw/pull/288,,,True,{}
ros2/rmw,https://github.com/ros2/rmw,288,2020-10-28T15:30:20Z,2020-10-29T09:20:59Z,2021-04-22T18:06:17Z,CLOSED,False,330,120,10,https://github.com/ahcorde,[Backport Foxy] Lost subscription events,2,[],https://github.com/ros2/rmw/pull/288,https://github.com/ivanpauno,2,https://github.com/ros2/rmw/pull/288#issuecomment-718160351,,"Do we need the feature backported because some special reason?
I would rather not backport a feature.",True,{}
ros2/rmw,https://github.com/ros2/rmw,288,2020-10-28T15:30:20Z,2020-10-29T09:20:59Z,2021-04-22T18:06:17Z,CLOSED,False,330,120,10,https://github.com/ahcorde,[Backport Foxy] Lost subscription events,2,[],https://github.com/ros2/rmw/pull/288,https://github.com/ahcorde,3,https://github.com/ros2/rmw/pull/288#issuecomment-718528806,,I was backporting some tests. But there is no specific reason to add a new feature. Closing this then.,True,{}
ros2/rmw,https://github.com/ros2/rmw,289,2020-11-25T18:59:32Z,2020-11-25T19:06:34Z,2020-11-25T19:06:37Z,MERGED,True,17,134,4,https://github.com/brawner,Update rmw QD to QL 1,2,[],https://github.com/ros2/rmw/pull/289,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/289,"This also removes the QD for rmw_implementation_cmake, which isn't a runtime package and its QD has been neglected.","This also removes the QD for rmw_implementation_cmake, which isn't a runtime package and its QD has been neglected.",True,{'THUMBS_UP': ['https://github.com/chapulina']}
ros2/rmw,https://github.com/ros2/rmw,290,2020-11-25T19:13:21Z,2020-11-25T19:14:20Z,2020-11-25T19:47:28Z,CLOSED,False,1,1,1,https://github.com/brawner,Fix QL 1 language,1,[],https://github.com/ros2/rmw/pull/290,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/290,"Forgot this tidbit
Signed-off-by: Stephen Brawner brawner@gmail.com","Forgot this tidbit
Signed-off-by: Stephen Brawner brawner@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,290,2020-11-25T19:13:21Z,2020-11-25T19:14:20Z,2020-11-25T19:47:28Z,CLOSED,False,1,1,1,https://github.com/brawner,Fix QL 1 language,1,[],https://github.com/ros2/rmw/pull/290,https://github.com/brawner,2,https://github.com/ros2/rmw/pull/290#issuecomment-733901143,"Forgot this tidbit
Signed-off-by: Stephen Brawner brawner@gmail.com","Nevermind, it's not applicable to this package",True,{'ROCKET': ['https://github.com/chapulina']}
ros2/rmw,https://github.com/ros2/rmw,291,2020-11-25T23:38:33Z,2020-11-25T23:57:47Z,2020-11-25T23:57:50Z,MERGED,True,23,140,4,https://github.com/brawner,[foxy] Update QD to QL 1,2,[],https://github.com/ros2/rmw/pull/291,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/291,,,True,{}
ros2/rmw,https://github.com/ros2/rmw,292,2020-11-26T01:21:53Z,2020-11-26T01:24:06Z,2020-11-26T01:24:09Z,MERGED,True,0,2,1,https://github.com/brawner,[foxy] Remove extra link,1,[],https://github.com/ros2/rmw/pull/292,https://github.com/brawner,1,https://github.com/ros2/rmw/pull/292,Signed-off-by: Stephen Brawner brawner@gmail.com,Signed-off-by: Stephen Brawner brawner@gmail.com,True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,1,https://github.com/ros2/rmw/pull/293,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,2,https://github.com/ros2/rmw/pull/293#issuecomment-748144351,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"CI:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug 
Linux CentOS",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/ivanpauno,3,https://github.com/ros2/rmw/pull/293#issuecomment-749202675,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"There's an interesting number of new failures, which might be expected considering that a lot of tests are only run with the default implementation.
It's strange that there aren't similar failures in the cyclonedds only rolling CI job.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,4,https://github.com/ros2/rmw/pull/293#issuecomment-749232801,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"Maybe we should investigate the failures before switching, but the code of this PR LGTM!

Yeah, I think we really need to figure out what is going on with the test failures before merging.  Otherwise all builds will be yellow going forward.  @eboasson and I are planning to take a look at this, though not until early January.  Any help in that direction is of course welcome.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/eboasson,5,https://github.com/ros2/rmw/pull/293#issuecomment-750027037,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"I think it is all related to this: ros2/rmw_cyclonedds#271 (comment) :

It looks to me like this fix was insufficient to resolve all the test failures that check the error string because of the work done in make_message_value_type and make_request_response_value_types. See, e.g., https://ci.ros2.org/job/ci_linux/13296/#showFailuresLink
I really think the underlying issue is that get_typesupport_handle_function in rosidl_typesupport_cpp sets an error message even though the function is being used to poll for the presence of some type support, and so a lookup failure should simply not be treated as an error at that point.
One way to fix this would be to not set a global error string in get_typesupport_handle_function and instead let the callers do it once they know what the error means. That would also eliminate the messing about with error strings in handling typesupports in the RMW implementations, which is an improvement in itself.
I think the nicest option would be to enhance the rosidl_typesupport interface so that one can specify the allowed ""suffixes"", then dispatch in the RMW implementation based on the one that was found. That sounds like it is more work in the typesupport code, but it would remove the need to fix all the RMW layers.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,6,https://github.com/ros2/rmw/pull/293#issuecomment-754267959,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"New CI incorporating ros2/rmw_cyclonedds#274:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug 
Linux CentOS 
Linux clang",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/eboasson,7,https://github.com/ros2/rmw/pull/293#issuecomment-754480273,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"@clalancette, ros2/rmw_cyclonedds#274 certainly did what it was expected to do 😄
I had a look through the errors and after filtering out uncrustify and cppcheck issues on Windows and CentOS a handful of things warranting further investigation remain. I'll try to get my Windows box back up and see if I can easily replicate that problem.
Linux
Looks to me like it is unrelated (Connext-specific)

projectroot.test_requester_replier__rclcpp__rclpy__rmw_connext_cpp
test_communication.TestRequesterReplierAfterShutdown.test_processes_finished_gracefully[Empty]
projectroot.test.test_graph__rmw_connext_cpp
rcl.test_graph__rmw_connext_cpp.gtest.missing_result

Linux-aarch64
One failure that I do find suspicious:

https://ci.ros2.org/job/ci_linux-aarch64/8271/testReport/junit/projectroot.test/rclcpp/test_node_interfaces__node_graph/

macOS
Looks to me like it is unrelated (Connext-specific)

projectroot.test.test_graph__rmw_connext_cpp
rcl.TestGraphFixture__rmw_connext_cpp.test_graph_guard_condition_trigger_check

CentOS
Tons of cppcheck errors, plus:

https://ci.ros2.org/job/ci_linux-centos/95/testReport/junit/sros2.test/test_mypy/test_mypy/ -- which merely declares ""Found errors"", which is also present in the regular nightly build

and a number of them that I suspect may be real (the Mimick warnings are also present in the nightly build, but the test failures are not):

https://ci.ros2.org/job/ci_linux-centos/95/testReport/junit/projectroot.test/rclcpp/test_node_interfaces__node_base/
projectroot.test_lifecycle_node
https://ci.ros2.org/job/ci_linux-centos/95/testReport/junit/rclcpp_lifecycle/TestDefaultStateMachine/test_graph_topics/
https://ci.ros2.org/job/ci_linux-centos/95/testReport/junit/(root)/rclcpp/test_node_interfaces__node_base_gtest_missing_result/

Linux-clang
Compiler warnings only, in urdfdom and tlsf (seems like it must be unrelated).
Windows/Windows Debug
Tons of uncrustify errors, plus a substantial amount of other failed tests. I looked at a couple of them and those at least all have the test print ""PASSED"" but the framework declare a failure with ""return code 3221225477"".  That is 0xc000000005 which is also the exception code used for an access violation, so that looks like a crash on termination:
e.g. https://ci.ros2.org/job/ci_windows/13394/testReport/junit/projectroot.test/rclcpp/test_wait_set/
-- run_test.py: extra environment variables to append:
 - PATH+=C:/ci/ws/build/rclcpp/test/rclcpp/Release
-- run_test.py: invoking following command in 'C:\ci\ws\build\rclcpp\test\rclcpp':
 - C:/ci/ws/build/rclcpp/test/rclcpp/Release/test_wait_set.exe --gtest_output=xml:C:/ci/ws/build/rclcpp/test_results/rclcpp/test_wait_set.gtest.xml
Running main() from C:\ci\ws\install\src\gtest_vendor\src\gtest_main.cc
[==========] Running 7 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 7 tests from TestWaitSet
[ RUN      ] TestWaitSet.construction_and_destruction
[WARN] [1609811695.766400700] [rclcpp]: logging was initialized more than once
[       OK ] TestWaitSet.construction_and_destruction (0 ms)
[ RUN      ] TestWaitSet.get_rcl_wait_set
[       OK ] TestWaitSet.get_rcl_wait_set (0 ms)
[ RUN      ] TestWaitSet.add_remove_guard_condition
[       OK ] TestWaitSet.add_remove_guard_condition (1 ms)
[ RUN      ] TestWaitSet.add_guard_condition_to_two_different_wait_set
[       OK ] TestWaitSet.add_guard_condition_to_two_different_wait_set (62 ms)
[ RUN      ] TestWaitSet.add_remove_wait
[       OK ] TestWaitSet.add_remove_wait (44 ms)
[ RUN      ] TestWaitSet.get_result_from_wait_result
[       OK ] TestWaitSet.get_result_from_wait_result (1 ms)
[ RUN      ] TestWaitSet.get_result_from_wait_result_not_ready_error
[       OK ] TestWaitSet.get_result_from_wait_result_not_ready_error (10 ms)
[----------] 7 tests from TestWaitSet (118 ms total)

[----------] Global test environment tear-down
[==========] 7 tests from 1 test suite ran. (127 ms total)
[  PASSED  ] 7 tests.
-- run_test.py: return code 3221225477
-- run_test.py: inject classname prefix into gtest result file 'C:/ci/ws/build/rclcpp/test_results/rclcpp/test_wait_set.gtest.xml'
-- run_test.py: verify result file 'C:/ci/ws/build/rclcpp/test_results/rclcpp/test_wait_set.gtest.xml'",True,{'THUMBS_UP': ['https://github.com/joespeed']}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,8,https://github.com/ros2/rmw/pull/293#issuecomment-754671893,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"@clalancette, ros2/rmw_cyclonedds#274 certainly did what it was expected to do smile

Yep!  I've now merged it, so at least that piece of the puzzle is in.

I had a look through the errors and after filtering out uncrustify and cppcheck issues on Windows and CentOS a handful of things warranting further investigation remain. I'll try to get my Windows box back up and see if I can easily replicate that problem.

Yeah, the uncrustify errors popped up during break.  Our buildfarmer is looking into it, but they have nothing to do with this PR.

Linux
Looks to me like it is unrelated (Connext-specific)
* projectroot.test_requester_replier__rclcpp__rclpy__rmw_connext_cpp
  test_communication.TestRequesterReplierAfterShutdown.test_processes_finished_gracefully[Empty]


While I agree that this looks Connext specific, the one thing that worries me is that this problem doesn't seem to pop up in the Linux release nightlies or repeated nightlies.  I'll leave this at the bottom of the pile to worry about.

* projectroot.test.test_graph__rmw_connext_cpp
  rcl.test_graph__rmw_connext_cpp.gtest.missing_result


This one shows up pretty consistently in the nightlies, so it is not the fault of this PR.

Linux-aarch64
One failure that I do find suspicious:
* https://ci.ros2.org/job/ci_linux-aarch64/8271/testReport/junit/projectroot.test/rclcpp/test_node_interfaces__node_graph/


Agreed that this one looks suspicious.  I don't see any evidence of it in the nightly aarch64 release or aarch64 repeated one.  This needs to be looked into.

macOS
Looks to me like it is unrelated (Connext-specific)
* projectroot.test.test_graph__rmw_connext_cpp
  rcl.TestGraphFixture__rmw_connext_cpp.test_graph_guard_condition_trigger_check


This one shows up in the nightlies, so we can ignore it.

CentOS
Tons of cppcheck errors, plus:
* https://ci.ros2.org/job/ci_linux-centos/95/testReport/junit/sros2.test/test_mypy/test_mypy/ -- which merely declares ""Found errors"", which is also present in the regular nightly build


Yes, we can ignore that one; ros2/sros2#248 is an attempt to fix it.

and a number of them that I suspect may be real (the Mimick warnings are also present in the nightly build, but the test failures are not):
* https://ci.ros2.org/job/ci_linux-centos/95/testReport/junit/projectroot.test/rclcpp/test_node_interfaces__node_base/
  projectroot.test_lifecycle_node

* https://ci.ros2.org/job/ci_linux-centos/95/testReport/junit/rclcpp_lifecycle/TestDefaultStateMachine/test_graph_topics/

* https://ci.ros2.org/job/ci_linux-centos/95/testReport/junit/(root)/rclcpp/test_node_interfaces__node_base_gtest_missing_result/


Yeah, those bear looking into to.  CentOS isn't currently officially supported, but we do try and keep it working.

Linux-clang
Compiler warnings only, in urdfdom and tlsf (seems like it must be unrelated).

Yeah, these are present in the nightlies, so we can ignore it.

Windows/Windows Debug
Tons of uncrustify errors, plus a substantial amount of other failed tests. I looked at a couple of them and those at least all have the test print ""PASSED"" but the framework declare a failure with ""return code 3221225477"". That is 0xc000000005 which is also the exception code used for an access violation, so that looks like a crash on termination:

OK, yeah, that looks like the biggest problem.  @eboasson I'm going to leave the Windows problems to you for now, and take a look at the aarch64 test_node_interfaces__node_graph failure myself.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/eboasson,9,https://github.com/ros2/rmw/pull/293#issuecomment-754764767,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"I think I've caught the crash on Windows crash in the debugger (this is a debug build, BTW), saving it here just to make sure it isn't lost, one never knows with Windows ...
C:\dev\ros2_ws\build\rclcpp\test\rclcpp>cdb Debug\test_allocator_memory_strategy.exe

Microsoft (R) Windows Debugger Version 10.0.18362.1 AMD64
Copyright (c) Microsoft Corporation. All rights reserved.

CommandLine: Debug\test_allocator_memory_strategy.exe
Symbol search path is: srv*
Executable search path is:
ModLoad: 00007ff7`e2fe0000 00007ff7`e3223000   test_allocator_memory_strategy.exe
ModLoad: 00007ffc`25710000 00007ffc`25906000   ntdll.dll
ModLoad: 00007ffc`24270000 00007ffc`2432d000   C:\WINDOWS\System32\KERNEL32.DLL
ModLoad: 00007ffc`233c0000 00007ffc`23689000   C:\WINDOWS\System32\KERNELBASE.dll
ModLoad: 00007ffc`03530000 00007ffc`035b1000   C:\dev\ros2_ws\install\bin\rcl.dll
ModLoad: 00007ffc`144d0000 00007ffc`144f6000   C:\dev\ros2_ws\install\bin\libstatistics_collector.dll
ModLoad: 00007ffc`14500000 00007ffc`14522000   C:\dev\ros2_ws\install\bin\test_msgs__rosidl_typesupport_cpp.dll
ModLoad: 00007ffc`12380000 00007ffc`123a7000   C:\dev\ros2_ws\install\bin\rmw_implementation.dll
ModLoad: 00007ffc`12360000 00007ffc`1237d000   C:\dev\ros2_ws\install\bin\rmw.dll
ModLoad: 00007ffb`fc820000 00007ffb`fcc09000   C:\dev\ros2_ws\install\bin\rclcpp.dll
ModLoad: 00007ffc`11bc0000 00007ffc`11bd4000   C:\dev\ros2_ws\install\bin\statistics_msgs__rosidl_typesupport_cpp.dll
ModLoad: 00007ffc`11a50000 00007ffc`11a90000   C:\dev\ros2_ws\install\bin\rcutils.dll
ModLoad: 00007ffb`fc730000 00007ffb`fc817000   C:\WINDOWS\SYSTEM32\MSVCP140D.dll
ModLoad: 00007ffc`11b90000 00007ffc`11bba000   C:\WINDOWS\SYSTEM32\VCRUNTIME140D.dll
ModLoad: 00007ffc`1b4f0000 00007ffc`1b4ff000   C:\WINDOWS\SYSTEM32\VCRUNTIME140_1D.dll
ModLoad: 00007ffb`fa1c0000 00007ffb`fa383000   C:\WINDOWS\SYSTEM32\ucrtbased.dll
ModLoad: 00007ffc`11a30000 00007ffc`11a45000   C:\dev\ros2_ws\install\bin\action_msgs__rosidl_typesupport_cpp.dll
ModLoad: 00007ffc`11800000 00007ffc`11819000   C:\dev\ros2_ws\install\bin\rcl_interfaces__rosidl_typesupport_c.dll
ModLoad: 00007ffc`0c010000 00007ffc`0c02b000   C:\dev\ros2_ws\install\bin\rosidl_typesupport_cpp.dll
ModLoad: 00007ffc`09120000 00007ffc`09144000   C:\dev\ros2_ws\install\bin\rcl_yaml_param_parser.dll
ModLoad: 00007ffc`038a0000 00007ffc`038c6000   C:\dev\ros2_ws\install\bin\rcl_interfaces__rosidl_generator_c.dll
ModLoad: 00007ffc`03b50000 00007ffc`03b6b000   C:\dev\ros2_ws\install\bin\rosidl_runtime_c.dll
ModLoad: 00007ffb`fc5b0000 00007ffb`fc728000   C:\dev\ros2_ws\install\bin\rcl_logging_spdlog.dll
ModLoad: 00007ffc`037a0000 00007ffc`037c6000   C:\dev\ros2_ws\install\bin\rcpputils.dll
ModLoad: 00007ffc`03780000 00007ffc`0379b000   C:\dev\ros2_ws\install\bin\rosidl_typesupport_c.dll
ModLoad: 00007ffc`036d0000 00007ffc`036e3000   C:\dev\ros2_ws\install\bin\rosgraph_msgs__rosidl_typesupport_cpp.dll
ModLoad: 00007ffc`03760000 00007ffc`0377c000   C:\dev\ros2_ws\install\bin\rcl_interfaces__rosidl_typesupport_cpp.dll
ModLoad: 00007ffc`02060000 00007ffc`020c8000   C:\dev\ros2_ws\install\bin\yaml.dll
ModLoad: 00007ffc`036b0000 00007ffc`036c4000   C:\dev\ros2_ws\install\bin\builtin_interfaces__rosidl_generator_c.dll
ModLoad: 00007ffc`01f80000 00007ffc`01f92000   C:\dev\ros2_ws\install\bin\rcl_logging_interface.dll
(4e8.e0c): Break instruction exception - code 80000003 (first chance)
ntdll!LdrpDoDebuggerBreak+0x30:
00007ffc`257e06d0 cc              int     3
0:000> g
Running main() from C:\dev\ros2_ws\install\src\gtest_vendor\src\gtest_main.cc
[==========] Running 29 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 29 tests from TestAllocatorMemoryStrategy
[ RUN      ] TestAllocatorMemoryStrategy.construct_destruct
ModLoad: 00007ffb`fb290000 00007ffb`fb3d7000   C:\dev\ros2_ws\install\bin\rmw_cyclonedds_cpp.dll
ModLoad: 00007ffc`00a80000 00007ffc`00adc000   C:\dev\ros2_ws\install\bin\rmw_dds_common.dll
ModLoad: 00007ffb`f8460000 00007ffb`f86b1000   C:\dev\ros2_ws\install\bin\ddsc.dll
ModLoad: 00007ffc`1ac80000 00007ffc`1ac8f000   C:\dev\ros2_ws\install\bin\rosidl_typesupport_introspection_cpp.dll
ModLoad: 00007ffc`1aac0000 00007ffc`1aacf000   C:\dev\ros2_ws\install\bin\rosidl_typesupport_introspection_c.dll
ModLoad: 00007ffc`249e0000 00007ffc`24a4b000   C:\WINDOWS\System32\WS2_32.dll
ModLoad: 00007ffc`01dd0000 00007ffc`01de4000   C:\dev\ros2_ws\install\bin\rmw_dds_common__rosidl_typesupport_cpp.dll
ModLoad: 00007ffb`fd8b0000 00007ffb`fd95c000   C:\WINDOWS\SYSTEM32\libssl-1_1-x64.dll
ModLoad: 00007ffc`22e50000 00007ffc`22f50000   C:\WINDOWS\System32\ucrtbase.dll
ModLoad: 000001e6`a4160000 000001e6`a44a9000   C:\WINDOWS\SYSTEM32\libcrypto-1_1-x64.dll
ModLoad: 00007ffb`f8110000 00007ffb`f8459000   C:\WINDOWS\SYSTEM32\libcrypto-1_1-x64.dll
ModLoad: 00007ffc`01d80000 00007ffc`01d99000   C:\WINDOWS\SYSTEM32\VCRUNTIME140.dll
ModLoad: 00007ffc`25140000 00007ffc`2526b000   C:\WINDOWS\System32\RPCRT4.dll
ModLoad: 00007ffc`24010000 00007ffc`240bc000   C:\WINDOWS\System32\ADVAPI32.dll
ModLoad: 00007ffc`23820000 00007ffc`238be000   C:\WINDOWS\System32\msvcrt.dll
ModLoad: 00007ffc`22260000 00007ffc`2229b000   C:\WINDOWS\SYSTEM32\IPHLPAPI.DLL
ModLoad: 00007ffc`25630000 00007ffc`256cc000   C:\WINDOWS\System32\sechost.dll
ModLoad: 00007ffc`24470000 00007ffc`24610000   C:\WINDOWS\System32\USER32.dll
ModLoad: 00007ffc`230e0000 00007ffc`23102000   C:\WINDOWS\System32\win32u.dll
ModLoad: 00007ffc`24440000 00007ffc`2446a000   C:\WINDOWS\System32\GDI32.dll
ModLoad: 00007ffc`22f50000 00007ffc`23059000   C:\WINDOWS\System32\gdi32full.dll
ModLoad: 00007ffc`232c0000 00007ffc`2335d000   C:\WINDOWS\System32\msvcp_win.dll
ModLoad: 00007ffc`23690000 00007ffc`236b7000   C:\WINDOWS\System32\bcrypt.dll
ModLoad: 00007ffc`243b0000 00007ffc`243e0000   C:\WINDOWS\System32\IMM32.DLL
ModLoad: 00007ffc`23060000 00007ffc`230e0000   C:\WINDOWS\System32\bcryptprimitives.dll
ModLoad: 00007ffc`208a0000 00007ffc`208b2000   C:\WINDOWS\SYSTEM32\kernel.appcore.dll
ModLoad: 00007ffc`25620000 00007ffc`25628000   C:\WINDOWS\System32\NSI.dll
ModLoad: 00007ffc`18b90000 00007ffc`18ba7000   C:\WINDOWS\SYSTEM32\dhcpcsvc6.DLL
ModLoad: 00007ffc`18ad0000 00007ffc`18aed000   C:\WINDOWS\SYSTEM32\dhcpcsvc.DLL
ModLoad: 00007ffc`222a0000 00007ffc`2236b000   C:\WINDOWS\SYSTEM32\DNSAPI.dll
ModLoad: 00007ffc`22570000 00007ffc`225da000   C:\WINDOWS\system32\mswsock.dll
ModLoad: 00007ffc`19040000 00007ffc`19057000   C:\WINDOWS\system32\napinsp.dll
ModLoad: 00007ffc`190b0000 00007ffc`190cb000   C:\WINDOWS\system32\pnrpnsp.dll
ModLoad: 00007ffc`15fe0000 00007ffc`15ff5000   C:\WINDOWS\system32\wshbth.dll
ModLoad: 00007ffc`18e20000 00007ffc`18e3d000   C:\WINDOWS\system32\NLAapi.dll
ModLoad: 00007ffc`1ac50000 00007ffc`1ac62000   C:\WINDOWS\System32\winrnr.dll
ModLoad: 00007ffc`01d60000 00007ffc`01d80000   C:\dev\ros2_ws\install\bin\rmw_dds_common__rosidl_typesupport_introspection_cpp.dll
ModLoad: 00007ffc`00550000 00007ffc`0056c000   C:\dev\ros2_ws\install\bin\rcl_interfaces__rosidl_typesupport_introspection_c.dll
ModLoad: 00007ffc`00530000 00007ffc`00543000   C:\dev\ros2_ws\install\bin\builtin_interfaces__rosidl_typesupport_introspection_c.dll
ModLoad: 00007ffb`fbe60000 00007ffb`fbea2000   C:\dev\ros2_ws\install\bin\rcl_interfaces__rosidl_typesupport_introspection_cpp.dll
ModLoad: 00007ffc`00510000 00007ffc`00524000   C:\dev\ros2_ws\install\bin\builtin_interfaces__rosidl_typesupport_introspection_cpp.dll
[       OK ] TestAllocatorMemoryStrategy.construct_destruct (273 ms)
[ RUN      ] TestAllocatorMemoryStrategy.add_remove_guard_conditions
[       OK ] TestAllocatorMemoryStrategy.add_remove_guard_conditions (3 ms)
[ RUN      ] TestAllocatorMemoryStrategy.add_remove_waitables
(4e8.e0c): C++ EH exception - code e06d7363 (first chance)
[       OK ] TestAllocatorMemoryStrategy.add_remove_waitables (3 ms)
[ RUN      ] TestAllocatorMemoryStrategy.number_of_entities_with_subscription
ModLoad: 00007ffb`fba10000 00007ffb`fbac0000   C:\dev\ros2_ws\install\bin\test_msgs__rosidl_typesupport_introspection_cpp.dll
ModLoad: 00007ffc`004f0000 00007ffc`00505000   C:\dev\ros2_ws\install\bin\unique_identifier_msgs__rosidl_typesupport_introspection_cpp.dll
[       OK ] TestAllocatorMemoryStrategy.number_of_entities_with_subscription (163 ms)
[ RUN      ] TestAllocatorMemoryStrategy.number_of_entities_with_service
[       OK ] TestAllocatorMemoryStrategy.number_of_entities_with_service (107 ms)
[ RUN      ] TestAllocatorMemoryStrategy.number_of_entities_with_client
[       OK ] TestAllocatorMemoryStrategy.number_of_entities_with_client (93 ms)
[ RUN      ] TestAllocatorMemoryStrategy.number_of_entities_with_timer
[       OK ] TestAllocatorMemoryStrategy.number_of_entities_with_timer (108 ms)
[ RUN      ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_bad_arguments
[ERROR] [1609865731.739643600] [rclcpp]: Couldn't add subscription to wait set: wait_set argument is null, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:323
[       OK ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_bad_arguments (155 ms)
[ RUN      ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_subscription
[ERROR] [1609865731.896142900] [rclcpp]: Couldn't add subscription to wait set: subscriptions set is full, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:323
[       OK ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_subscription (78 ms)
[ RUN      ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_service

>>> [rcutils|error_handling.c:108] rcutils_set_error_state()
This error state is being overwritten:

  'subscriptions set is full, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:323'

with this new error message:

  'Handle's typesupport identifier (rosidl_typesupport_cpp) is not supported by this library, at C:\dev\ros2_ws\src\ros2\rosidl_typesupport\rosidl_typesupport_cpp\src\type_support_dispatch.hpp:113'

rcutils_reset_error() should be called after error handling to avoid this.
<<<
[ERROR] [1609865731.981892300] [rclcpp]: Couldn't add service to wait set: services set is full, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:504
[       OK ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_service (107 ms)
[ RUN      ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_client

>>> [rcutils|error_handling.c:108] rcutils_set_error_state()
This error state is being overwritten:

  'services set is full, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:504'

with this new error message:

  'Handle's typesupport identifier (rosidl_typesupport_cpp) is not supported by this library, at C:\dev\ros2_ws\src\ros2\rosidl_typesupport\rosidl_typesupport_cpp\src\type_support_dispatch.hpp:113'

rcutils_reset_error() should be called after error handling to avoid this.
<<<
[ERROR] [1609865732.098596600] [rclcpp]: Couldn't add client to wait set: clients set is full, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:493
[       OK ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_client (117 ms)
[ RUN      ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_guard_condition

>>> [rcutils|error_handling.c:108] rcutils_set_error_state()
This error state is being overwritten:

  'clients set is full, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:493'

with this new error message:

  'Handle's typesupport identifier (rosidl_typesupport_cpp) is not supported by this library, at C:\dev\ros2_ws\src\ros2\rosidl_typesupport\rosidl_typesupport_cpp\src\type_support_dispatch.hpp:113'

rcutils_reset_error() should be called after error handling to avoid this.
<<<
[ERROR] [1609865732.223195200] [rclcpp]: Couldn't add guard_condition to wait set: guard_conditions set is full, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:459
[       OK ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_guard_condition (149 ms)
[ RUN      ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_timer

>>> [rcutils|error_handling.c:108] rcutils_set_error_state()
This error state is being overwritten:

  'guard_conditions set is full, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:459'

with this new error message:

  'Handle's typesupport identifier (rosidl_typesupport_cpp) is not supported by this library, at C:\dev\ros2_ws\src\ros2\rosidl_typesupport\rosidl_typesupport_cpp\src\type_support_dispatch.hpp:113'

rcutils_reset_error() should be called after error handling to avoid this.
<<<
[ERROR] [1609865732.372875200] [rclcpp]: Couldn't add timer to wait set: timers set is full, at C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\wait.c:473
[       OK ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_timer (92 ms)
[ RUN      ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_waitable
[ERROR] [1609865732.411448200] [rclcpp]: Couldn't add waitable to wait set: error not set
[       OK ] TestAllocatorMemoryStrategy.add_handles_to_wait_set_waitable (7 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_subscription
[       OK ] TestAllocatorMemoryStrategy.get_next_subscription (258 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_service
[       OK ] TestAllocatorMemoryStrategy.get_next_service (815 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_client
[       OK ] TestAllocatorMemoryStrategy.get_next_client (796 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_timer
[       OK ] TestAllocatorMemoryStrategy.get_next_timer (811 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_waitable
[       OK ] TestAllocatorMemoryStrategy.get_next_waitable (812 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_subscription_mutually_exclusive
[       OK ] TestAllocatorMemoryStrategy.get_next_subscription_mutually_exclusive (310 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_service_mutually_exclusive
[       OK ] TestAllocatorMemoryStrategy.get_next_service_mutually_exclusive (370 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_client_mutually_exclusive
[       OK ] TestAllocatorMemoryStrategy.get_next_client_mutually_exclusive (296 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_timer_mutually_exclusive
[       OK ] TestAllocatorMemoryStrategy.get_next_timer_mutually_exclusive (312 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_waitable_mutually_exclusive
[       OK ] TestAllocatorMemoryStrategy.get_next_waitable_mutually_exclusive (317 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_subscription_out_of_scope
[       OK ] TestAllocatorMemoryStrategy.get_next_subscription_out_of_scope (192 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_service_out_of_scope
[       OK ] TestAllocatorMemoryStrategy.get_next_service_out_of_scope (156 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_client_out_of_scope
[       OK ] TestAllocatorMemoryStrategy.get_next_client_out_of_scope (155 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_timer_out_of_scope
[       OK ] TestAllocatorMemoryStrategy.get_next_timer_out_of_scope (155 ms)
[ RUN      ] TestAllocatorMemoryStrategy.get_next_waitable_out_of_scope
[       OK ] TestAllocatorMemoryStrategy.get_next_waitable_out_of_scope (155 ms)
[----------] 29 tests from TestAllocatorMemoryStrategy (7430 ms total)

[----------] Global test environment tear-down
[==========] 29 tests from 1 test suite ran. (7439 ms total)
[  PASSED  ] 29 tests.
(4e8.e0c): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
*** WARNING: Unable to verify checksum for C:\dev\ros2_ws\install\bin\rmw_cyclonedds_cpp.dll
rmw_cyclonedds_cpp!clean_waitset_caches+0x8a:
00007ffb`fb2ae90a 488b00          mov     rax,qword ptr [rax] ds:feeefeee`feeefefe=????????????????
0:000> k
Child-SP          RetAddr           Call Site
00000062`968fa3a0 00007ffb`fb2ad1ac rmw_cyclonedds_cpp!clean_waitset_caches+0x8a
00000062`968fa450 00007ffb`fb2a87c8 rmw_cyclonedds_cpp!destroy_guard_condition+0x6c
*** WARNING: Unable to verify checksum for C:\dev\ros2_ws\install\bin\rmw_implementation.dll
00000062`968fa4a0 00007ffc`12386251 rmw_cyclonedds_cpp!rmw_destroy_guard_condition+0x28
*** WARNING: Unable to verify checksum for C:\dev\ros2_ws\install\bin\rcl.dll
00000062`968fa4d0 00007ffc`03545445 rmw_implementation!rmw_destroy_guard_condition+0x61
*** WARNING: Unable to verify checksum for C:\dev\ros2_ws\install\bin\rclcpp.dll
00000062`968fa510 00007ffb`fc8c81d2 rcl!rcl_guard_condition_fini+0xd5
00000062`968fa9a0 00007ffb`fc8c77de rclcpp!rclcpp::graph_listener::GraphListener::__shutdown+0xc2
00000062`968faa20 00007ffb`fc8c6fde rclcpp!rclcpp::graph_listener::GraphListener::shutdown+0x4e
00000062`968fcc40 00007ffb`fc8cbede rclcpp!rclcpp::graph_listener::GraphListener::~GraphListener+0x3e
00000062`968fcc70 00007ffb`fc926d79 rclcpp!rclcpp::graph_listener::GraphListener::`vector deleting destructor'+0x8e
00000062`968fcca0 00007ffb`fc928490 rclcpp!<lambda_7d4fb7196c5dd46371ba9d14810f4ed5>::operator()+0x49
00000062`968fcce0 00007ffb`fc8546a7 rclcpp!std::_Ref_count_resource<rclcpp::graph_listener::GraphListener *,<lambda_7d4fb7196c5dd46371ba9d14810f4ed5> >::_Destroy+0x40
00000062`968fcd10 00007ffb`fc854648 rclcpp!std::_Ref_count_base::_Decref+0x47
00000062`968fcd40 00007ffb`fc852388 rclcpp!std::_Ptr_base<void>::_Decref+0x38
00000062`968fcd70 00007ffb`fc87675f rclcpp!std::shared_ptr<void>::~shared_ptr<void>+0x28
00000062`968fcda0 00007ffb`fc87800c rclcpp!std::pair<std::type_index const ,std::shared_ptr<void> >::~pair<std::type_index const ,std::shared_ptr<void> >+0x2f
00000062`968fcdd0 00007ffb`fc8722df rclcpp!std::pair<std::type_index const ,std::shared_ptr<void> >::`scalar deleting destructor'+0x2c
00000062`968fce00 00007ffb`fc870541 rclcpp!std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *> > >::destroy<std::pair<std::type_index const ,std::shared_ptr<void> > >+0x2f
00000062`968fce30 00007ffb`fc870450 rclcpp!std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *>::_Freenode<std::allocator<std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *> > >+0x41
00000062`968fce60 00007ffb`fc87c2ad rclcpp!std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *>::_Free_non_head<std::allocator<std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *> > >+0x70
00000062`968fcea0 00007ffb`fc87c1f9 rclcpp!std::list<std::pair<std::type_index const ,std::shared_ptr<void> >,std::allocator<std::pair<std::type_index const ,std::shared_ptr<void> > > >::clear+0x4d
00000062`968fcee0 00007ffb`fc86ccac rclcpp!std::_Hash<std::_Umap_traits<std::type_index,std::shared_ptr<void>,std::_Uhash_compare<std::type_index,std::hash<std::type_index>,std::equal_to<std::type_index> >,std::allocator<std::pair<std::type_index const ,std::shared_ptr<void> > >,0> >::clear+0x89
00000062`968fcf30 00007ffb`fc86bb1b rclcpp!rclcpp::Context::clean_up+0x5c
00000062`968fcf60 00007ffb`fc87f908 rclcpp!rclcpp::Context::~Context+0xab
00000062`968ff180 00007ffb`fc87f9bc rclcpp!rclcpp::contexts::DefaultContext::~DefaultContext+0x28
00000062`968ff1b0 00007ffb`fc87f39f rclcpp!rclcpp::contexts::DefaultContext::`scalar deleting destructor'+0x2c
00000062`968ff1e0 00007ffb`fc87faff rclcpp!std::_Destroy_in_place<rclcpp::contexts::DefaultContext>+0x2f
00000062`968ff210 00007ffb`fc8546a7 rclcpp!std::_Ref_count_obj2<rclcpp::contexts::DefaultContext>::_Destroy+0x2f
00000062`968ff240 00007ffb`fc87fa38 rclcpp!std::_Ref_count_base::_Decref+0x47
00000062`968ff270 00007ffb`fc87f8c8 rclcpp!std::_Ptr_base<rclcpp::contexts::DefaultContext>::_Decref+0x38
00000062`968ff2a0 00007ffb`fcab73f1 rclcpp!std::shared_ptr<rclcpp::contexts::DefaultContext>::~shared_ptr<rclcpp::contexts::DefaultContext>+0x28
00000062`968ff2d0 00007ffb`fa235107 rclcpp!`rclcpp::contexts::get_global_default_context'::`2'::`dynamic atexit destructor for 'default_context''+0x21
00000062`968ff300 00007ffb`fa234b15 ucrtbased!<lambda_d121dba8a4adeaf3a9819e48611155df>::operator()+0x127
00000062`968ff390 00007ffb`fa234c4a ucrtbased!__crt_seh_guarded_call<int>::operator()<<lambda_6a47f4c8fd0152770a780fc1d70204eb>,<lambda_d121dba8a4adeaf3a9819e48611155df> &,<lambda_6aaa2265f5b6a89667e7d7630012e97a> >+0x35
00000062`968ff3d0 00007ffb`fa2352b1 ucrtbased!__acrt_lock_and_call<<lambda_d121dba8a4adeaf3a9819e48611155df> >+0x4a
00000062`968ff420 00007ffb`fca78089 ucrtbased!_execute_onexit_table+0x31
00000062`968ff460 00007ffb`fca78cbc rclcpp!__scrt_dllmain_uninitialize_c+0x19
00000062`968ff490 00007ffb`fca78a97 rclcpp!dllmain_crt_process_detach+0x4c
00000062`968ff4d0 00007ffb`fca78e2e rclcpp!dllmain_crt_dispatch+0x67
00000062`968ff510 00007ffb`fca78fa1 rclcpp!dllmain_dispatch+0xfe
00000062`968ff560 00007ffc`25747cad rclcpp!_DllMainCRTStartup+0x31
00000062`968ff590 00007ffc`25773ff1 ntdll!LdrpCallInitRoutine+0x61
00000062`968ff600 00007ffc`25773e8d ntdll!LdrShutdownProcess+0x141
00000062`968ff700 00007ffc`2428e0ab ntdll!RtlExitUserProcess+0xad
00000062`968ff730 00007ffb`fa23467a KERNEL32!ExitProcessImplementation+0xb
00000062`968ff760 00007ffb`fa234629 ucrtbased!exit_or_terminate_process+0x3a
00000062`968ff790 00007ffb`fa2349a6 ucrtbased!common_exit+0x79
*** WARNING: Unable to verify checksum for test_allocator_memory_strategy.exe
00000062`968ff7f0 00007ff7`e3138167 ucrtbased!exit+0x16
00000062`968ff820 00007ff7`e313800e test_allocator_memory_strategy!__scrt_common_main_seh+0x147
00000062`968ff890 00007ff7`e3138339 test_allocator_memory_strategy!__scrt_common_main+0xe
00000062`968ff8c0 00007ffc`24287034 test_allocator_memory_strategy!mainCRTStartup+0x9
00000062`968ff8f0 00007ffc`2575d0d1 KERNEL32!BaseThreadInitThunk+0x14
00000062`968ff920 00000000`00000000 ntdll!RtlUserThreadStart+0x21
0:000>

Edit, it's at the *:
static void clean_waitset_caches()
{
  /* Called whenever a subscriber, guard condition, service or client is deleted (as these may
     have been cached in a waitset), and drops all cached entities from all waitsets (just to keep
     life simple). I'm assuming one is not allowed to delete an entity while it is still being
     used ... */
  std::lock_guard<std::mutex> lock(gcdds.lock);
  for (auto && ws : gcdds.waitsets) {
*   std::lock_guard<std::mutex> wslock(ws->lock);
    if (!ws->inuse) {
      waitset_detach(ws);
    }
  }
}
in the current state
0:000> dv
         wslock = class std::lock_guard<std::mutex>
             ws = 0xfeeefeee`feeefefe
     <range>$L0 = 0x00007ffb`fb3ba630 { size=0x0 }
     <begin>$L0 = class std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CddsWaitset *> >,std::_Iterator_base0>
       <end>$L0 = class std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<CddsWaitset *> >,std::_Iterator_base0>
           lock = class std::lock_guard<std::mutex>

There's some issue with destructor ordering, it seems.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,10,https://github.com/ros2/rmw/pull/293#issuecomment-754923971,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"From my side, I looked a bit into the aarch64 failure.  On an unloaded machine, I got it to fail only once in about 2 hours of testing.  After that, I added some load to the machine, and now I'm able to make it happen fairly regularly (though not every time).  It looks like under load, calling node_graph()->get_publishers_info_by_topic sometimes doesn't have the expected publisher.
It looks like there can be a delay between create_publisher, and the publisher actually showing up in the graph.  This was likely a problem before the switch to CycloneDDS as the default, but may have been exacerbated by some details of CycloneDDS.  In any case, I've opened ros2/rclcpp#1503 to use wait_for_graph_change to make this more robust, which should take care of this failure.
I also had some time to look into the CentOS failures.  They generally fall into two categories that I'll discuss separately below.
Injection failures
For example https://ci.ros2.org/job/ci_linux-centos/94/testReport/junit/(root)/projectroot/test_lifecycle_node/
The mimick library does not support inject_on_return on CentOS.  This has something to do with how the PLT is built on that platform, though I admit to not understanding the details.  When this fails, you typically get an error like:
[WARNING] mocking_utils::inject_on_return() cannot forward call to original 'foo' function before injection

This has been a source of irritation in the past, though we have mostly worked around it at this point.  It seems that a few more workarounds would be needed to make it fully work with CycloneDDS as the default.  It is typically, though not always, possible to rewrite these tests to use patch_and_return or some other variant to handle these cases.  Because of this, and because CentOS isn't a Tier 1 platform, I'm not going to worry about these failures right now.
Detecting type support failures
For example https://ci.ros2.org/job/ci_linux-centos/94/testReport/junit/projectroot.test/rclcpp/test_static_single_threaded_executor/
Even with the fix in ros2/rmw_cyclonedds#274 in place, we are still hitting areas of the code in CentOS where an error is set that is just not expected.  Because of this, I'm going to look into solving ros2/rosidl_typesupport#100 now.  Hopefully that will solve it for good, though we'll need a bunch of testing with different rmw vendors to make sure there are no side-effects.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/eboasson,11,https://github.com/ros2/rmw/pull/293#issuecomment-755300359,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"I think this is actually a bug in the rclcpp tests (or perhaps rclcpp itself) that's causing trouble with rmw_cyclonedds_cpp because of global destructor ordering. Below is a slightly shortened version of a cdb log and it shows the global destructor(s) of rmw_cyclonedds_cpp running before rclcpp stops using the RMW interface. I think that's broken ...
The global state that is being destroyed is really not very interesting, just a few mutexes, an empty map and an empty set. Perhaps it would be an option to simply do nothing in Cdds::~Cdds() but I don't know how to do that, nor what the implications of that might be.
I figured I could avoid the problem by converting the global variable into std::atomic<std::shared_ptr<Cdds>> because that would make it possible to keep it alive until the last reference disappears. Unfortunately, that type got introduced in C++20 ... Another option could be to rewrite the tests to not rely on global destructors, but I don't know if that'd be considered an acceptable option.
So, if anyone has a good suggestion ...
(2484.2754): Break instruction exception - code 80000003 (first chance)
ntdll!LdrpDoDebuggerBreak+0x30:
00007ffc`257e06d0 cc              int     3
0:000> bp rmw_cyclonedds_cpp!Cdds::~Cdds
Bp expression 'rmw_cyclonedds_cpp!Cdds::~Cdds' could not be resolved, adding deferred bp
0:000> g
Running main() from C:\dev\ros2_ws\install\src\gtest_vendor\src\gtest_main.cc
[==========] Running 20 tests from 3 test suites.
[----------] Global test environment set-up.
[----------] 17 tests from TestPublisher
<snip>
[----------] Global test environment tear-down
[==========] 20 tests from 3 test suites ran. (2839 ms total)
[  PASSED  ] 20 tests.
Breakpoint 0 hit
rmw_cyclonedds_cpp!Cdds::~Cdds:
00007ffc`038372e0 48894c2408      mov     qword ptr [rsp+8],rcx ss:0000008f`b72ff740=cccccccccccccccc


0:000> dx gcdds
gcdds            [Type: Cdds]
    [+0x000] lock             [Type: std::mutex]
    [+0x050] domains_lock     [Type: std::mutex]
    [+0x0a0] domains          : { size=0x0 } [Type: std::map<unsigned int,CddsDomain,std::less<unsigned int>,std::allocator<std::pair<unsigned int const ,CddsDomain> > >]
    [+0x0b8] gc_for_empty_waitset : 0 [Type: int]
    [+0x0c0] waitsets         : { size=0x0 } [Type: std::unordered_set<CddsWaitset *,std::hash<CddsWaitset *>,std::equal_to<CddsWaitset *>,std::allocator<CddsWaitset *> >]
0:000> k
Child-SP          RetAddr           Call Site
0000008f`b72ff738 00007ffc`038a99e1 rmw_cyclonedds_cpp!Cdds::~Cdds
0000008f`b72ff740 00007ffc`08af5107 rmw_cyclonedds_cpp!`dynamic atexit destructor for 'gcdds''+0x21
0000008f`b72ff770 00007ffc`08af4b15 ucrtbased!<lambda_d121dba8a4adeaf3a9819e48611155df>::operator()+0x127 [minkernel\crts\ucrt\src\appcrt\startup\onexit.cpp @ 206]
0000008f`b72ff800 00007ffc`08af4c4a ucrtbased!__crt_seh_guarded_call<int>::operator()<<lambda_6a47f4c8fd0152770a780fc1d70204eb>,<lambda_d121dba8a4adeaf3a9819e48611155df> &,<lambda_6aaa2265f5b6a89667e7d7630012e97a> >+0x35 [vccrt\vcruntime\inc\internal_shared.h @ 204]
0000008f`b72ff840 00007ffc`08af52b1 ucrtbased!__acrt_lock_and_call<<lambda_d121dba8a4adeaf3a9819e48611155df> >+0x4a [minkernel\crts\ucrt\inc\corecrt_internal.h @ 975]
0000008f`b72ff890 00007ffc`038979c9 ucrtbased!_execute_onexit_table+0x31 [minkernel\crts\ucrt\src\appcrt\startup\onexit.cpp @ 231]
0000008f`b72ff8d0 00007ffc`038991cc rmw_cyclonedds_cpp!__scrt_dllmain_uninitialize_c+0x19 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\utility\utility.cpp @ 399]
0000008f`b72ff900 00007ffc`03898fa7 rmw_cyclonedds_cpp!dllmain_crt_process_detach+0x4c [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 182]
0000008f`b72ff940 00007ffc`0389933e rmw_cyclonedds_cpp!dllmain_crt_dispatch+0x67 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 220]
0000008f`b72ff980 00007ffc`038994b1 rmw_cyclonedds_cpp!dllmain_dispatch+0xfe [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 293]
0000008f`b72ff9d0 00007ffc`25747cad rmw_cyclonedds_cpp!_DllMainCRTStartup+0x31 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 335]
0000008f`b72ffa00 00007ffc`25773ff1 ntdll!LdrpCallInitRoutine+0x61
0000008f`b72ffa70 00007ffc`25773e8d ntdll!LdrShutdownProcess+0x141
0000008f`b72ffb70 00007ffc`2428e0ab ntdll!RtlExitUserProcess+0xad
0000008f`b72ffba0 00007ffc`08af467a KERNEL32!ExitProcessImplementation+0xb
0000008f`b72ffbd0 00007ffc`08af4629 ucrtbased!exit_or_terminate_process+0x3a [minkernel\crts\ucrt\src\appcrt\startup\exit.cpp @ 144]
0000008f`b72ffc00 00007ffc`08af49a6 ucrtbased!common_exit+0x79 [minkernel\crts\ucrt\src\appcrt\startup\exit.cpp @ 282]
*** WARNING: Unable to verify checksum for test_publisher.exe
0000008f`b72ffc60 00007ff6`0ba559d7 ucrtbased!exit+0x16 [minkernel\crts\ucrt\src\appcrt\startup\exit.cpp @ 294]
0000008f`b72ffc90 00007ff6`0ba5587e test_publisher!__scrt_common_main_seh+0x147 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 297]
0000008f`b72ffd00 00007ff6`0ba55b69 test_publisher!__scrt_common_main+0xe [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 331]
0000008f`b72ffd30 00007ffc`24287034 test_publisher!mainCRTStartup+0x9 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\exe_main.cpp @ 17]
0000008f`b72ffd60 00007ffc`2575d0d1 KERNEL32!BaseThreadInitThunk+0x14
0000008f`b72ffd90 00000000`00000000 ntdll!RtlUserThreadStart+0x21



0:000> g
(2484.2754): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
rmw_cyclonedds_cpp!clean_waitset_caches+0x8a:
00007ffc`037ee97a 488b00          mov     rax,qword ptr [rax] ds:feeefeee`feeefefe=????????????????



0:000> k
Child-SP          RetAddr           Call Site
0000008f`b72fa810 00007ffc`037ed21c rmw_cyclonedds_cpp!clean_waitset_caches+0x8a [C:\dev\ros2_ws\src\ros2\rmw_cyclonedds\rmw_cyclonedds_cpp\src\rmw_node.cpp @ 3225]
0000008f`b72fa8c0 00007ffc`037e87c8 rmw_cyclonedds_cpp!rmw_context_impl_t::init+0x1c [C:\dev\ros2_ws\src\ros2\rmw_cyclonedds\rmw_cyclonedds_cpp\src\rmw_node.cpp @ 3055]
*** WARNING: Unable to verify checksum for C:\dev\ros2_ws\install\bin\rmw_implementation.dll
0000008f`b72fa910 00007ffc`144d6251 rmw_cyclonedds_cpp!rmw_destroy_guard_condition+0x28 [C:\dev\ros2_ws\src\ros2\rmw_cyclonedds\rmw_cyclonedds_cpp\src\rmw_node.cpp @ 3064]
*** WARNING: Unable to verify checksum for C:\dev\ros2_ws\install\bin\rcl.dll
0000008f`b72fa940 00007ffc`0ced5445 rmw_implementation!rmw_destroy_guard_condition+0x61 [C:\dev\ros2_ws\src\ros2\rmw_implementation\rmw_implementation\src\functions.cpp @ 471]
*** WARNING: Unable to verify checksum for C:\dev\ros2_ws\install\bin\rclcpp.dll
0000008f`b72fa980 00007ffb`fc8c81d2 rcl!rcl_guard_condition_fini+0xd5 [C:\dev\ros2_ws\src\ros2\rcl\rcl\src\rcl\guard_condition.c @ 132]
0000008f`b72fae10 00007ffb`fc8c77de rclcpp!rclcpp::graph_listener::GraphListener::__shutdown+0xc2 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 354]
0000008f`b72fae90 00007ffb`fc8c6fde rclcpp!rclcpp::graph_listener::GraphListener::shutdown+0x4e [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 374]
0000008f`b72fd0b0 00007ffb`fc8cbede rclcpp!rclcpp::graph_listener::GraphListener::~GraphListener+0x3e [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 61]
0000008f`b72fd0e0 00007ffb`fc926d79 rclcpp!rclcpp::graph_listener::GraphListener::`vector deleting destructor'+0x8e
0000008f`b72fd110 00007ffb`fc928490 rclcpp!<lambda_7d4fb7196c5dd46371ba9d14810f4ed5>::operator()+0x49 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\include\rclcpp\context.hpp @ 266]
0000008f`b72fd150 00007ffb`fc8546a7 rclcpp!std::_Ref_count_resource<rclcpp::graph_listener::GraphListener *,<lambda_7d4fb7196c5dd46371ba9d14810f4ed5> >::_Destroy+0x40 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\memory @ 702]
0000008f`b72fd180 00007ffb`fc854648 rclcpp!std::_Ref_count_base::_Decref+0x47 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\memory @ 644]
0000008f`b72fd1b0 00007ffb`fc852388 rclcpp!std::_Ptr_base<void>::_Decref+0x38 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\memory @ 878]
0000008f`b72fd1e0 00007ffb`fc87675f rclcpp!std::shared_ptr<void>::~shared_ptr<void>+0x28 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\memory @ 1170]
0000008f`b72fd210 00007ffb`fc87800c rclcpp!std::pair<std::type_index const ,std::shared_ptr<void> >::~pair<std::type_index const ,std::shared_ptr<void> >+0x2f
0000008f`b72fd240 00007ffb`fc8722df rclcpp!std::pair<std::type_index const ,std::shared_ptr<void> >::`scalar deleting destructor'+0x2c
0000008f`b72fd270 00007ffb`fc870541 rclcpp!std::_Default_allocator_traits<std::allocator<std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *> > >::destroy<std::pair<std::type_index const ,std::shared_ptr<void> > >+0x2f [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory @ 707]
0000008f`b72fd2a0 00007ffb`fc870450 rclcpp!std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *>::_Freenode<std::allocator<std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *> > >+0x41 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list @ 318]
0000008f`b72fd2d0 00007ffb`fc87c2ad rclcpp!std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *>::_Free_non_head<std::allocator<std::_List_node<std::pair<std::type_index const ,std::shared_ptr<void> >,void *> > >+0x70 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list @ 330]
0000008f`b72fd310 00007ffb`fc87c1f9 rclcpp!std::list<std::pair<std::type_index const ,std::shared_ptr<void> >,std::allocator<std::pair<std::type_index const ,std::shared_ptr<void> > > >::clear+0x4d [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\list @ 1430]
0000008f`b72fd350 00007ffb`fc86ccac rclcpp!std::_Hash<std::_Umap_traits<std::type_index,std::shared_ptr<void>,std::_Uhash_compare<std::type_index,std::hash<std::type_index>,std::equal_to<std::type_index> >,std::allocator<std::pair<std::type_index const ,std::shared_ptr<void> > >,0> >::clear+0x89 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xhash @ 1277]
0000008f`b72fd3a0 00007ffb`fc86bb1b rclcpp!rclcpp::Context::clean_up+0x5c [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\context.cpp @ 399]
0000008f`b72fd3d0 00007ffb`fc87f908 rclcpp!rclcpp::Context::~Context+0xab [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\context.cpp @ 161]
0000008f`b72ff5f0 00007ffb`fc87f9bc rclcpp!rclcpp::contexts::DefaultContext::~DefaultContext+0x28
0000008f`b72ff620 00007ffb`fc87f39f rclcpp!rclcpp::contexts::DefaultContext::`scalar deleting destructor'+0x2c
0000008f`b72ff650 00007ffb`fc87faff rclcpp!std::_Destroy_in_place<rclcpp::contexts::DefaultContext>+0x2f [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xmemory @ 279]
0000008f`b72ff680 00007ffb`fc8546a7 rclcpp!std::_Ref_count_obj2<rclcpp::contexts::DefaultContext>::_Destroy+0x2f [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\memory @ 1582]
0000008f`b72ff6b0 00007ffb`fc87fa38 rclcpp!std::_Ref_count_base::_Decref+0x47 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\memory @ 644]
0000008f`b72ff6e0 00007ffb`fc87f8c8 rclcpp!std::_Ptr_base<rclcpp::contexts::DefaultContext>::_Decref+0x38 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\memory @ 878]
0000008f`b72ff710 00007ffb`fcab73f1 rclcpp!std::shared_ptr<rclcpp::contexts::DefaultContext>::~shared_ptr<rclcpp::contexts::DefaultContext>+0x28 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\memory @ 1170]
0000008f`b72ff740 00007ffc`08af5107 rclcpp!`rclcpp::contexts::get_global_default_context'::`2'::`dynamic atexit destructor for 'default_context''+0x21
0000008f`b72ff770 00007ffc`08af4b15 ucrtbased!<lambda_d121dba8a4adeaf3a9819e48611155df>::operator()+0x127 [minkernel\crts\ucrt\src\appcrt\startup\onexit.cpp @ 206]
0000008f`b72ff800 00007ffc`08af4c4a ucrtbased!__crt_seh_guarded_call<int>::operator()<<lambda_6a47f4c8fd0152770a780fc1d70204eb>,<lambda_d121dba8a4adeaf3a9819e48611155df> &,<lambda_6aaa2265f5b6a89667e7d7630012e97a> >+0x35 [vccrt\vcruntime\inc\internal_shared.h @ 204]
0000008f`b72ff840 00007ffc`08af52b1 ucrtbased!__acrt_lock_and_call<<lambda_d121dba8a4adeaf3a9819e48611155df> >+0x4a [minkernel\crts\ucrt\inc\corecrt_internal.h @ 975]
0000008f`b72ff890 00007ffb`fca78089 ucrtbased!_execute_onexit_table+0x31 [minkernel\crts\ucrt\src\appcrt\startup\onexit.cpp @ 231]
0000008f`b72ff8d0 00007ffb`fca78cbc rclcpp!__scrt_dllmain_uninitialize_c+0x19 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\utility\utility.cpp @ 399]
0000008f`b72ff900 00007ffb`fca78a97 rclcpp!dllmain_crt_process_detach+0x4c [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 182]
0000008f`b72ff940 00007ffb`fca78e2e rclcpp!dllmain_crt_dispatch+0x67 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 220]
0000008f`b72ff980 00007ffb`fca78fa1 rclcpp!dllmain_dispatch+0xfe [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 293]
0000008f`b72ff9d0 00007ffc`25747cad rclcpp!_DllMainCRTStartup+0x31 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 335]
0000008f`b72ffa00 00007ffc`25773ff1 ntdll!LdrpCallInitRoutine+0x61
0000008f`b72ffa70 00007ffc`25773e8d ntdll!LdrShutdownProcess+0x141
0000008f`b72ffb70 00007ffc`2428e0ab ntdll!RtlExitUserProcess+0xad
0000008f`b72ffba0 00007ffc`08af467a KERNEL32!ExitProcessImplementation+0xb
0000008f`b72ffbd0 00007ffc`08af4629 ucrtbased!exit_or_terminate_process+0x3a [minkernel\crts\ucrt\src\appcrt\startup\exit.cpp @ 144]
0000008f`b72ffc00 00007ffc`08af49a6 ucrtbased!common_exit+0x79 [minkernel\crts\ucrt\src\appcrt\startup\exit.cpp @ 282]
0000008f`b72ffc60 00007ff6`0ba559d7 ucrtbased!exit+0x16 [minkernel\crts\ucrt\src\appcrt\startup\exit.cpp @ 294]
0000008f`b72ffc90 00007ff6`0ba5587e test_publisher!__scrt_common_main_seh+0x147 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 297]
0000008f`b72ffd00 00007ff6`0ba55b69 test_publisher!__scrt_common_main+0xe [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl @ 331]
0000008f`b72ffd30 00007ffc`24287034 test_publisher!mainCRTStartup+0x9 [d:\agent\_work\63\s\src\vctools\crt\vcstartup\src\startup\exe_main.cpp @ 17]
0000008f`b72ffd60 00007ffc`2575d0d1 KERNEL32!BaseThreadInitThunk+0x14
0000008f`b72ffd90 00000000`00000000 ntdll!RtlUserThreadStart+0x21
0:000>",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,12,https://github.com/ros2/rmw/pull/293#issuecomment-755411160,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"I think this is actually a bug in the rclcpp tests (or perhaps rclcpp itself) that's causing trouble with rmw_cyclonedds_cpp because of global destructor ordering. Below is a slightly shortened version of a cdb log and it shows the global destructor(s) of rmw_cyclonedds_cpp running before rclcpp stops using the RMW interface. I think that's broken ...

Arg, yes, global destructor ordering.  This has bitten us before.

The global state that is being destroyed is really not very interesting, just a few mutexes, an empty map and an empty set. Perhaps it would be an option to simply do nothing in Cdds::~Cdds() but I don't know how to do that, nor what the implications of that might be.

Yeah, that seems too hacky.

I figured I could avoid the problem by converting the global variable into std::atomic<std::shared_ptr<Cdds>> because that would make it possible to keep it alive until the last reference disappears. Unfortunately, that type got introduced in C++20 ...

I also couldn't make it work here with gcc, even with -std=c++20, but maybe I messed something up.

Another option could be to rewrite the tests to not rely on global destructors, but I don't know if that'd be considered an acceptable option.

I don't think that we should rely on that.

So, if anyone has a good suggestion ...

Two suggestions:

Use the Construct on First Use Idiom for gcdds.  Essentially that will just ensure that we never call the destructor of gcdds, which should fix the problem but will also show up as a memory ""leak"" to analyzers.  It also has a non-zero overhead on every call, but that should be pretty minor.
Revamp rmw_node.cpp to not need the global gcdds variable.  I have a vague notion that we may be able to store a shared pointer to a heap-allocated Cdds structure somewhere else, but I'm not sure how feasible this is.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,13,https://github.com/ros2/rmw/pull/293#issuecomment-755446300,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"Another option:

During rmw_init, allocate or take an additional reference to a heap-allocated Cdds structure.  During rmw_shutdown, release the reference and destroy the structure if there are no references left.  (There may be some thread safety issues to work out here)",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,14,https://github.com/ros2/rmw/pull/293#issuecomment-755772663,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"OK, ros2/rosidl_typesupport#102 should solve most of the remaining issues on CentOS.  I'm still not certain that is the way we want to go, but I'll gather additional opinions on that PR.  Between that and ros2/rmw_cyclonedds#275 , I think we may be pretty close to getting this in.",True,{'THUMBS_UP': ['https://github.com/joespeed']}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,15,https://github.com/ros2/rmw/pull/293#issuecomment-756358921,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"All right.  With ros2/rmw_cyclonedds#275 merged, we can look at the CI run in ros2/rmw_cyclonedds#275 (comment) again.

Linux - 5 failing tests.  The 2 test_graph__rmw_connext_cpp failures should already be addressed by ros2/rcl#883, so I'll ignore them here.  The other 3 tests are in test_graph__rmw_connext_cpp.  That is ostensibly a failure in Connext-only, but it does not show up in the nightlies, so it does seem specific to this change.  Needs to be looked into.
Linux-aarch64 - Green
macOS - The only failing tests should be addressed by ros2/rcl#883
Windows - All of the failing tests are in the nightlies: https://ci.ros2.org/view/nightly/job/nightly_win_rel/1808/#showFailuresLink
Windows Debug - There are 5 failures listed.  4 of them are in the nightlies as well: https://ci.ros2.org/view/nightly/job/nightly_win_deb/1860/#showFailuresLink .  The one remaining one seems to be a false positive; clicking through to https://ci.ros2.org/job/ci_windows/13419/testReport/junit/projectroot.test/rclcpp/test_node/ says ""Failed"", but it looks like the tests succeeded.

So I think the one remaining issue we have to deal with before merging this is the Linux test_graph__rmw_connext_cpp failure.  I have so far been unable to reproduce it locally, but I'll keep trying.  @eboasson any help with that is appreciated.",True,{'THUMBS_UP': ['https://github.com/joespeed']}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/eboasson,16,https://github.com/ros2/rmw/pull/293#issuecomment-756403015,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"So I think the one remaining issue we have to deal with before merging this is the Linux test_graph__rmw_connext_cpp failure. I have so far been unable to reproduce it locally, but I'll keep trying. @eboasson any help with that is appreciated.

A complication for me is that I don't have Connext and probably never will (RTI is quite sensitive about such things), so I can't try anything involving Connext myself.
Something that comes to mind that might play a role is the ros 2 daemon. If that one is perchance started prior to these tests and then remains running, it would be running in a slightly different environment with this PR in. I don't know when exactly that thing gets started, but you could try running the CI limiting testing to rcl only. That might be a datapoint.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,17,https://github.com/ros2/rmw/pull/293#issuecomment-756421802,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"Something that comes to mind that might play a role is the ros 2 daemon. If that one is perchance started prior to these tests and then remains running, it would be running in a slightly different environment with this PR in. I don't know when exactly that thing gets started, but you could try running the CI limiting testing to rcl only. That might be a datapoint.

Well, that is interesting.  I ran a job just running the test_communication tests, and it did indeed succeed: https://ci.ros2.org/job/ci_linux/13371/ (ignore the flake8 errors; that has nothing to do with this PR).
So at the very least, it looks like there is some state being kept around and potentially causing problems.  I'll add some code to kill off the daemon before running these tests, and see if that is any better when running the full suite.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,18,https://github.com/ros2/rmw/pull/293#issuecomment-756769055,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"It does look like killing the daemon before starting the tests improved things.  Here is another CI with this PR and the contents of
https://github.com/ros2/system_tests/tree/clalancette/test-requester-debug .  Assuming this is happy, I'll open a PR for that change, then I can convert this PR from a draft.

Linux 
Linux-aarch64 
macOS 
Windows",True,{'THUMBS_UP': ['https://github.com/joespeed']}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,19,https://github.com/ros2/rmw/pull/293#issuecomment-757040921,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"All right, one more mega-set of CI:

Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug 
Linux CentOS 
Linux clang 
Linux packaging (ros1_bridge)",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,20,https://github.com/ros2/rmw/pull/293#issuecomment-758322651,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"Looking through the test failures in the last CI, most of them are known.  However, after looking at it more carefully, there is one test failure in Windows which seems unique to this PR.  That test failure is in rclcpp's test_node.  What seems to happen is that all of tests complete successfully in a reasonable amount of time (about 1 second), but then the cleanup hangs until the timeout happens.  @eboasson we will need to investigate that one, since something is clearly not right there.
Even so, I'm going to go ahead and merge this so that we can start doing testing beyond just the CI.  Thanks for all of the work so far!",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/eboasson,21,https://github.com/ros2/rmw/pull/293#issuecomment-759497963,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"The test_node problem is caused by these two lines:
https://github.com/ros2/rclcpp/blob/56a037a3da15a7b3a5902a6cce2ef6b7c4aa8599/rclcpp/test/rclcpp/test_node.cpp#L71
and
https://github.com/ros2/rclcpp/blob/56a037a3da15a7b3a5902a6cce2ef6b7c4aa8599/rclcpp/test/rclcpp/test_node.cpp#L2525-L2554
Or more precisely, it's caused by Windows and those are the two lines that trigger it: in these two locations, the graph_listener thread defined at https://github.com/ros2/rclcpp/blob/56a037a3da15a7b3a5902a6cce2ef6b7c4aa8599/rclcpp/src/rclcpp/graph_listener.cpp#L109 is started, and it is then still blocked on a waitset by the time Windows decides that thread really shouldn't exist. Indiscriminately killing that thread from a global destructor then corrupts internal state of Cyclone and leaves it blocking on trying to delete the entity.
I'd say Windows needs to be eliminated for the good of humankind, or if that's impossible, fixed, or, assuming that too is an impossibility, those rclcpp tests need to be fixed because one can't support Windows and have the possibility that threads survive beyond main. But I don't quite know how to do that ... I suppose I should file an issue for rclcpp.
See below for a recording of a stripped down version of test_node, where everything but that very first call I mentioned has been commented out. Line 187 is the call to rcl_wait, line 188 the next line.
0:000> bp `graph_listener.cpp:187` ""k;g""
*** WARNING: Unable to verify checksum for test_node.exe
*** WARNING: Unable to verify checksum for C:\dev\ros2_ws\install\bin\rclcpp.dll
0:000> bp `graph_listener.cpp:188` ""k;g""
0:000> g
ModLoad: 00007ffc`243b0000 00007ffc`243e0000   C:\WINDOWS\System32\IMM32.DLL
Running main() from C:\dev\ros2_ws\install\src\gtest_vendor\src\gtest_main.cc
[==========] Running 1 test from 1 test suite.
[----------] Global test environment set-up.
[----------] 1 test from TestNode
ModLoad: 00007ffb`f99b0000 00007ffb`f9afa000   C:\dev\ros2_ws\install\bin\rmw_cyclonedds_cpp.dll
ModLoad: 00007ffb`f5cc0000 00007ffb`f5f11000   C:\dev\ros2_ws\install\bin\ddsc.dll
ModLoad: 00007ffc`020c0000 00007ffc`0211c000   C:\dev\ros2_ws\install\bin\rmw_dds_common.dll
ModLoad: 00007ffc`1ae70000 00007ffc`1ae7f000   C:\dev\ros2_ws\install\bin\rosidl_typesupport_introspection_cpp.dll
ModLoad: 00007ffc`036d0000 00007ffc`036e4000   C:\dev\ros2_ws\install\bin\rmw_dds_common__rosidl_typesupport_cpp.dll
ModLoad: 00007ffc`249e0000 00007ffc`24a4b000   C:\WINDOWS\System32\WS2_32.dll
ModLoad: 00007ffb`f2780000 00007ffb`f2ac9000   C:\WINDOWS\SYSTEM32\libcrypto-1_1-x64.dll
ModLoad: 00007ffc`25140000 00007ffc`2526b000   C:\WINDOWS\System32\RPCRT4.dll
ModLoad: 00007ffc`144a0000 00007ffc`144af000   C:\dev\ros2_ws\install\bin\rosidl_typesupport_introspection_c.dll
ModLoad: 00007ffc`24010000 00007ffc`240bc000   C:\WINDOWS\System32\ADVAPI32.dll
ModLoad: 00007ffc`23690000 00007ffc`236b7000   C:\WINDOWS\System32\bcrypt.dll
ModLoad: 00007ffc`23820000 00007ffc`238be000   C:\WINDOWS\System32\msvcrt.dll
ModLoad: 00007ffc`25630000 00007ffc`256cc000   C:\WINDOWS\System32\sechost.dll
ModLoad: 00007ffc`01ef0000 00007ffc`01f9c000   C:\WINDOWS\SYSTEM32\libssl-1_1-x64.dll
ModLoad: 00007ffc`22260000 00007ffc`2229b000   C:\WINDOWS\SYSTEM32\IPHLPAPI.DLL
ModLoad: 00007ffc`036b0000 00007ffc`036c9000   C:\WINDOWS\SYSTEM32\VCRUNTIME140.dll
ModLoad: 000001e6`666e0000 000001e6`666f9000   C:\WINDOWS\SYSTEM32\VCRUNTIME140.dll
ModLoad: 00007ffc`23060000 00007ffc`230e0000   C:\WINDOWS\System32\bcryptprimitives.dll
[ RUN      ] TestNode.construction_and_destructionModLoad: 00007ffc`208a0000 00007ffc`208b2000   C:\WINDOWS\SYSTEM32\kernel.appcore.dll

ModLoad: 00007ffc`25620000 00007ffc`25628000   C:\WINDOWS\System32\NSI.dll
ModLoad: 00007ffc`18b90000 00007ffc`18ba7000   C:\WINDOWS\SYSTEM32\dhcpcsvc6.DLL
ModLoad: 00007ffc`18ad0000 00007ffc`18aed000   C:\WINDOWS\SYSTEM32\dhcpcsvc.DLL
ModLoad: 00007ffc`222a0000 00007ffc`2236b000   C:\WINDOWS\SYSTEM32\DNSAPI.dll
ModLoad: 00007ffc`22570000 00007ffc`225da000   C:\WINDOWS\system32\mswsock.dll
ModLoad: 00007ffc`19040000 00007ffc`19057000   C:\WINDOWS\system32\napinsp.dll
ModLoad: 00007ffc`190b0000 00007ffc`190cb000   C:\WINDOWS\system32\pnrpnsp.dll
ModLoad: 00007ffc`15fe0000 00007ffc`15ff5000   C:\WINDOWS\system32\wshbth.dll
ModLoad: 00007ffc`18e20000 00007ffc`18e3d000   C:\WINDOWS\system32\NLAapi.dll
ModLoad: 00007ffc`1ac50000 00007ffc`1ac62000   C:\WINDOWS\System32\winrnr.dll
ModLoad: 00007ffc`020a0000 00007ffc`020c0000   C:\dev\ros2_ws\install\bin\rmw_dds_common__rosidl_typesupport_introspection_cpp.dll
ModLoad: 00007ffc`02080000 00007ffc`0209c000   C:\dev\ros2_ws\install\bin\rcl_interfaces__rosidl_typesupport_introspection_c.dll
ModLoad: 00007ffc`02060000 00007ffc`02073000   C:\dev\ros2_ws\install\bin\builtin_interfaces__rosidl_typesupport_introspection_c.dll
ModLoad: 00007ffc`00a90000 00007ffc`00ad2000   C:\dev\ros2_ws\install\bin\rcl_interfaces__rosidl_typesupport_introspection_cpp.dll
ModLoad: 00007ffc`00a70000 00007ffc`00a84000   C:\dev\ros2_ws\install\bin\builtin_interfaces__rosidl_typesupport_introspection_cpp.dll
Child-SP          RetAddr           Call Site
00000043`cd5fd800 00007ffb`f0e278c2 rclcpp!rclcpp::graph_listener::GraphListener::run_loop+0x407 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 187]
00000043`cd5fda60 00007ffb`f0e2a4de rclcpp!rclcpp::graph_listener::GraphListener::run+0x52 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 113]
00000043`cd5ffb80 00007ffb`f0e29ca5 rclcpp!std::invoke<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>+0x3e [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits @ 1614]
00000043`cd5ffbb0 00007ffb`fc7d542c rclcpp!std::thread::_Invoke<std::tuple<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>,0,1>+0x75 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\thread @ 44]
00000043`cd5ffc10 00007ffc`24287034 ucrtbased!thread_start<unsigned int (__cdecl*)(void *),1>+0x9c [minkernel\crts\ucrt\src\appcrt\startup\thread.cpp @ 97]
00000043`cd5ffc70 00007ffc`2575d0d1 KERNEL32!BaseThreadInitThunk+0x14
00000043`cd5ffca0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
Child-SP          RetAddr           Call Site
00000043`cd5fd800 00007ffb`f0e278c2 rclcpp!rclcpp::graph_listener::GraphListener::run_loop+0x429 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 188]
00000043`cd5fda60 00007ffb`f0e2a4de rclcpp!rclcpp::graph_listener::GraphListener::run+0x52 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 113]
00000043`cd5ffb80 00007ffb`f0e29ca5 rclcpp!std::invoke<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>+0x3e [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits @ 1614]
00000043`cd5ffbb0 00007ffb`fc7d542c rclcpp!std::thread::_Invoke<std::tuple<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>,0,1>+0x75 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\thread @ 44]
00000043`cd5ffc10 00007ffc`24287034 ucrtbased!thread_start<unsigned int (__cdecl*)(void *),1>+0x9c [minkernel\crts\ucrt\src\appcrt\startup\thread.cpp @ 97]
00000043`cd5ffc70 00007ffc`2575d0d1 KERNEL32!BaseThreadInitThunk+0x14
00000043`cd5ffca0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
Child-SP          RetAddr           Call Site
00000043`cd5fd800 00007ffb`f0e278c2 rclcpp!rclcpp::graph_listener::GraphListener::run_loop+0x407 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 187]
00000043`cd5fda60 00007ffb`f0e2a4de rclcpp!rclcpp::graph_listener::GraphListener::run+0x52 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 113]
00000043`cd5ffb80 00007ffb`f0e29ca5 rclcpp!std::invoke<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>+0x3e [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits @ 1614]
00000043`cd5ffbb0 00007ffb`fc7d542c rclcpp!std::thread::_Invoke<std::tuple<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>,0,1>+0x75 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\thread @ 44]
00000043`cd5ffc10 00007ffc`24287034 ucrtbased!thread_start<unsigned int (__cdecl*)(void *),1>+0x9c [minkernel\crts\ucrt\src\appcrt\startup\thread.cpp @ 97]
00000043`cd5ffc70 00007ffc`2575d0d1 KERNEL32!BaseThreadInitThunk+0x14
00000043`cd5ffca0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
Child-SP          RetAddr           Call Site
00000043`cd5fd800 00007ffb`f0e278c2 rclcpp!rclcpp::graph_listener::GraphListener::run_loop+0x429 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 188]
00000043`cd5fda60 00007ffb`f0e2a4de rclcpp!rclcpp::graph_listener::GraphListener::run+0x52 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 113]
00000043`cd5ffb80 00007ffb`f0e29ca5 rclcpp!std::invoke<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>+0x3e [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits @ 1614]
00000043`cd5ffbb0 00007ffb`fc7d542c rclcpp!std::thread::_Invoke<std::tuple<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>,0,1>+0x75 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\thread @ 44]
00000043`cd5ffc10 00007ffc`24287034 ucrtbased!thread_start<unsigned int (__cdecl*)(void *),1>+0x9c [minkernel\crts\ucrt\src\appcrt\startup\thread.cpp @ 97]
00000043`cd5ffc70 00007ffc`2575d0d1 KERNEL32!BaseThreadInitThunk+0x14
00000043`cd5ffca0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
Child-SP          RetAddr           Call Site
00000043`cd5fd800 00007ffb`f0e278c2 rclcpp!rclcpp::graph_listener::GraphListener::run_loop+0x407 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 187]
00000043`cd5fda60 00007ffb`f0e2a4de rclcpp!rclcpp::graph_listener::GraphListener::run+0x52 [C:\dev\ros2_ws\src\ros2\rclcpp\rclcpp\src\rclcpp\graph_listener.cpp @ 113]
00000043`cd5ffb80 00007ffb`f0e29ca5 rclcpp!std::invoke<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>+0x3e [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\type_traits @ 1614]
00000043`cd5ffbb0 00007ffb`fc7d542c rclcpp!std::thread::_Invoke<std::tuple<void (__cdecl rclcpp::graph_listener::GraphListener::*)(void),rclcpp::graph_listener::GraphListener *>,0,1>+0x75 [C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\thread @ 44]
00000043`cd5ffc10 00007ffc`24287034 ucrtbased!thread_start<unsigned int (__cdecl*)(void *),1>+0x9c [minkernel\crts\ucrt\src\appcrt\startup\thread.cpp @ 97]
00000043`cd5ffc70 00007ffc`2575d0d1 KERNEL32!BaseThreadInitThunk+0x14
00000043`cd5ffca0 00000000`00000000 ntdll!RtlUserThreadStart+0x21
[       OK ] TestNode.construction_and_destruction (296 ms)
[----------] 1 test from TestNode (296 ms total)

[----------] Global test environment tear-down
[==========] 1 test from 1 test suite ran. (317 ms total)
[  PASSED  ] 1 test.
(1f50.2720): Break instruction exception - code 80000003 (first chance)
ntdll!DbgBreakPoint:
00007ffc`257afaa0 cc              int     3",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/ivanpauno,22,https://github.com/ros2/rmw/pull/293#issuecomment-759503282,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"those rclcpp tests need to be fixed because one can't support Windows and have the possibility that threads survive beyond main. But I don't quite know how to do that ... I suppose I should file an issue for rclcpp.

IIUC rclcpp::shutdown kills the graph listener thread, so adding that to the test should fix the issue (if not, the ""default context"" destructor will call shutdown, but that object has static lifetime and then you get this kind of problems ....)",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/clalancette,23,https://github.com/ros2/rmw/pull/293#issuecomment-759592281,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"@ivanpauno Thanks for the feedback.  @eboasson and I discussed this, and he is going to give that a shot to see if it fixes the issue.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/wjwwood,24,https://github.com/ros2/rmw/pull/293#issuecomment-759755784,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"but that object has static lifetime and then you get this kind of problems

I'd like to understand this more. Can someone point me to some documentation or discussion about this buggy (insane?) behavior for Windows that it can just eliminate a thread before static objects which may or may not interact with it can be destroyed. That sounds broken to the point that it's not possible to me...",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/ivanpauno,25,https://github.com/ros2/rmw/pull/293#issuecomment-759763226,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"I don't know about this pull request, it sounds like we need to ensure this doesn't happen without an explicit shutdown.

Specifically, we allow and even encourage our users to not necessarily explicitly shutdown in their code and in our examples. So this would not work on Windows. It's not a very satisfying solution (requiring an explicit shutdown).

The best reference I've found is this and this.
See particularly steps 1. and 3. in the first link, step 1. is to kill threads, step 3. is to call global destructors (if I'm understanding things correctly, this is the kind of thing you need to re-read 10 times 😄 )",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/wjwwood,26,https://github.com/ros2/rmw/pull/293#issuecomment-760080968,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"I'll read those tomorrow, but it seems really odd to me that we don't see problems elsewhere. Also, it's not obvious to me when ExitProcess is being called. Maybe it's called implicitly at the end of main? But I thought the main function wrapper did static object destruction... The documentation you linked to seems to be from the perspective that the user code calls that from within the main function or something. Similar to abort or exit/quick_exit.",True,{}
ros2/rmw,https://github.com/ros2/rmw,293,2020-12-18T15:12:01Z,2021-01-12T00:59:56Z,2021-01-14T13:00:33Z,MERGED,True,2,2,1,https://github.com/clalancette,Change default RMW vendor to CycloneDDS.,1,[],https://github.com/ros2/rmw/pull/293,https://github.com/ivanpauno,27,https://github.com/ros2/rmw/pull/293#issuecomment-760181936,Signed-off-by: Chris Lalancette clalancette@openrobotics.org,"Maybe it's called implicitly at the end of main? But I thought the main function wrapper did static object destruction...

My understanding is that ExitProcess is called at end of main, but I'm really not sure if that's the case (best reference saying that happens is this article).

But I thought the main function wrapper did static object destruction...

I think that the main wrapper may call destructors from static objects of the executable before calling ExitProcess, but destructors from static objects of loaded DLLs seem to be called by ExitProcess (which first kills all running threads).
To actually check what happens, we would need to check the generated object code or debug step by step process termination, but honestly I prefer not knowing the details and assume that I don't know when destructors of static lifetime objects will be run 😂.",True,{}
ros2/rmw,https://github.com/ros2/rmw,294,2020-12-21T14:36:04Z,2021-04-05T17:15:42Z,2021-04-05T17:15:42Z,MERGED,True,789,0,14,https://github.com/anamud,Unique network flows,21,['enhancement'],https://github.com/ros2/rmw/pull/294,https://github.com/anamud,1,https://github.com/ros2/rmw/pull/294,"This PR implements unique network flows for publishers and subscribers in communicating nodes.
Associated pull-requests:

design
examples
rclcpp
rcl
rmw_implementation
rmw_fastrtps
rmw_cyclonedds
rmw_connext (NB: This repository is soon to be deprecated)
rmw_connextdds
Fast DDS

Initial contributions stem from Ericsson and eProsima.
Signed-off-by: Ananya Muddukrishna ananya.x.muddukrishna@ericsson.com","This PR implements unique network flows for publishers and subscribers in communicating nodes.
Associated pull-requests:

design
examples
rclcpp
rcl
rmw_implementation
rmw_fastrtps
rmw_cyclonedds
rmw_connext (NB: This repository is soon to be deprecated)
rmw_connextdds
Fast DDS

Initial contributions stem from Ericsson and eProsima.
Signed-off-by: Ananya Muddukrishna ananya.x.muddukrishna@ericsson.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,294,2020-12-21T14:36:04Z,2021-04-05T17:15:42Z,2021-04-05T17:15:42Z,MERGED,True,789,0,14,https://github.com/anamud,Unique network flows,21,['enhancement'],https://github.com/ros2/rmw/pull/294,https://github.com/wjwwood,2,https://github.com/ros2/rmw/pull/294#issuecomment-811522062,"This PR implements unique network flows for publishers and subscribers in communicating nodes.
Associated pull-requests:

design
examples
rclcpp
rcl
rmw_implementation
rmw_fastrtps
rmw_cyclonedds
rmw_connext (NB: This repository is soon to be deprecated)
rmw_connextdds
Fast DDS

Initial contributions stem from Ericsson and eProsima.
Signed-off-by: Ananya Muddukrishna ananya.x.muddukrishna@ericsson.com",@Mergifyio rebase,True,{'THUMBS_UP': ['https://github.com/mergify%5Bbot%5D']}
ros2/rmw,https://github.com/ros2/rmw,294,2020-12-21T14:36:04Z,2021-04-05T17:15:42Z,2021-04-05T17:15:42Z,MERGED,True,789,0,14,https://github.com/anamud,Unique network flows,21,['enhancement'],https://github.com/ros2/rmw/pull/294,https://github.com/apps/mergify,3,https://github.com/ros2/rmw/pull/294#issuecomment-811522291,"This PR implements unique network flows for publishers and subscribers in communicating nodes.
Associated pull-requests:

design
examples
rclcpp
rcl
rmw_implementation
rmw_fastrtps
rmw_cyclonedds
rmw_connext (NB: This repository is soon to be deprecated)
rmw_connextdds
Fast DDS

Initial contributions stem from Ericsson and eProsima.
Signed-off-by: Ananya Muddukrishna ananya.x.muddukrishna@ericsson.com","Command rebase: failure

Pull request can't be updated with latest base branch changes
Mergify needs the author permission to update the base branch of the pull request.
Ericsson needs to authorize modification on its head branch.
err-code: 51E08",True,{}
ros2/rmw,https://github.com/ros2/rmw,294,2020-12-21T14:36:04Z,2021-04-05T17:15:42Z,2021-04-05T17:15:42Z,MERGED,True,789,0,14,https://github.com/anamud,Unique network flows,21,['enhancement'],https://github.com/ros2/rmw/pull/294,https://github.com/wjwwood,4,https://github.com/ros2/rmw/pull/294#issuecomment-811522572,"This PR implements unique network flows for publishers and subscribers in communicating nodes.
Associated pull-requests:

design
examples
rclcpp
rcl
rmw_implementation
rmw_fastrtps
rmw_cyclonedds
rmw_connext (NB: This repository is soon to be deprecated)
rmw_connextdds
Fast DDS

Initial contributions stem from Ericsson and eProsima.
Signed-off-by: Ananya Muddukrishna ananya.x.muddukrishna@ericsson.com",@anamud can you rebase this pull request onto master? Probably worth doing that now for all the pull requests if you can. Just so they're up-to-date.,True,{'THUMBS_UP': ['https://github.com/anamud']}
ros2/rmw,https://github.com/ros2/rmw,294,2020-12-21T14:36:04Z,2021-04-05T17:15:42Z,2021-04-05T17:15:42Z,MERGED,True,789,0,14,https://github.com/anamud,Unique network flows,21,['enhancement'],https://github.com/ros2/rmw/pull/294,https://github.com/anamud,5,https://github.com/ros2/rmw/pull/294#issuecomment-811924784,"This PR implements unique network flows for publishers and subscribers in communicating nodes.
Associated pull-requests:

design
examples
rclcpp
rcl
rmw_implementation
rmw_fastrtps
rmw_cyclonedds
rmw_connext (NB: This repository is soon to be deprecated)
rmw_connextdds
Fast DDS

Initial contributions stem from Ericsson and eProsima.
Signed-off-by: Ananya Muddukrishna ananya.x.muddukrishna@ericsson.com","@anamud can you rebase this pull request onto master? Probably worth doing that now for all the pull requests if you can. Just so they're up-to-date.

Done! Tested OK.",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,1,https://github.com/ros2/rmw/pull/296,Signed-off-by: Barry Xu Barry.Xu@sony.com,Signed-off-by: Barry Xu Barry.Xu@sony.com,True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,2,https://github.com/ros2/rmw/pull/296#issuecomment-750825992,Signed-off-by: Barry Xu Barry.Xu@sony.com,Related to #295,True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/ivanpauno,3,https://github.com/ros2/rmw/pull/296#issuecomment-808194369,Signed-off-by: Barry Xu Barry.Xu@sony.com,"The next step is to complete the implementations for rmw_fastrtps, rmw_cyclonedds, rmw_connextdds.",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,4,https://github.com/ros2/rmw/pull/296#issuecomment-808824715,Signed-off-by: Barry Xu Barry.Xu@sony.com,"The next step is to complete the implementations for rmw_fastrtps, rmw_cyclonedds, rmw_connextdds.

Yeah. I will implement them.",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,5,https://github.com/ros2/rmw/pull/296#issuecomment-813862733,Signed-off-by: Barry Xu Barry.Xu@sony.com,"After checking some DDS implementations, I think DDS interface should be thread-safe.
So I change the description of Thread-Safe.",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,6,https://github.com/ros2/rmw/pull/296#issuecomment-821048328,Signed-off-by: Barry Xu Barry.Xu@sony.com,Do rebase.,True,{'THUMBS_UP': ['https://github.com/asorbini']}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/ivanpauno,7,https://github.com/ros2/rmw/pull/296#issuecomment-850658893,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@Barry-Xu-2018 @fujitatomoya can you run CI, including all the rmw* PRs related to this feature?
Please address the comments in ros2/rmw_connextdds#20 first.
My plan is to get these PRs in first, and then move forward with rcl, rcl* PRs.",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/fujitatomoya,8,https://github.com/ros2/rmw/pull/296#issuecomment-850920356,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@ivanpauno thanks for the effort, really appreciate it.

can you run CI, including all the rmw* PRs related to this feature?

sounds good, we will run CI with rmw_* changes at 1st.",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,9,https://github.com/ros2/rmw/pull/296#issuecomment-850920673,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@ivanpauno

can you run CI, including all the rmw* PRs related to this feature?
Please address the comments in ros2/rmw_connextdds#20 first

Okay.  Thanks.",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/fujitatomoya,10,https://github.com/ros2/rmw/pull/296#issuecomment-850928063,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@Barry-Xu-2018
once you addressed ros2/rmw_connextdds#20, could you let me know? i will create the repo file and start CI for rmw_* changes.",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,11,https://github.com/ros2/rmw/pull/296#issuecomment-850930605,Signed-off-by: Barry Xu Barry.Xu@sony.com,"once you addressed ros2/rmw_connextdds#20, could you let me know? i will create the repo file and start CI for rmw_* changes.

Okay，thanks.",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,12,https://github.com/ros2/rmw/pull/296#issuecomment-850948183,Signed-off-by: Barry Xu Barry.Xu@sony.com,Do rebase.,True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,13,https://github.com/ros2/rmw/pull/296#issuecomment-852649130,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@fujitatomoya
All changes for rmw* are all approved.
Please help to create the repo file and start CI.
Except this PR, it includes below

rmw_fastrtps
ros2/rmw_fastrtps#519
rmw_connextdds
ros2/rmw_connextdds#20
rmw_cyclonedds
ros2/rmw_cyclonedds#294
rmw_implementation
ros2/rmw_implementation#188",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/fujitatomoya,14,https://github.com/ros2/rmw/pull/296#issuecomment-852723580,Signed-off-by: Barry Xu Barry.Xu@sony.com,"CI: (for rmw related repositories)

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,15,https://github.com/ros2/rmw/pull/296#issuecomment-852863178,Signed-off-by: Barry Xu Barry.Xu@sony.com,"macOS Build Status is failing

After checking the log, the cause seems to remote connection problem.
I have no idea to resolve this. Maybe we should re-execute it.
13:59:18 �]0;colcon build [238/308 done] [3 ongoing]�Starting >>> image_transport
13:59:18 �]0;colcon build [238/308 done] [4 ongoing]�[Processing: image_transport, rclcpp_lifecycle, rosbag2_cpp, tf2_ros]
13:59:48 FATAL: command execution failed
14:07:20 java.nio.channels.ClosedChannelException
14:07:20 	at org.jenkinsci.remoting.protocol.impl.ChannelApplicationLayer.onReadClosed(ChannelApplicationLayer.java:209)
14:07:20 	at org.jenkinsci.remoting.protocol.ApplicationLayer.onRecvClosed(ApplicationLayer.java:221)
14:07:20 	at org.jenkinsci.remoting.protocol.ProtocolStack$Ptr.onRecvClosed(ProtocolStack.java:817)
14:07:20 	at org.jenkinsci.remoting.protocol.FilterLayer.onRecvClosed(FilterLayer.java:288)
14:07:20 	at org.jenkinsci.remoting.protocol.impl.SSLEngineFilterLayer.onRecvClosed(SSLEngineFilterLayer.java:179)
14:07:20 	at org.jenkinsci.remoting.protocol.impl.SSLEngineFilterLayer.switchToNoSecure(SSLEngineFilterLayer.java:281)
14:07:20 	at org.jenkinsci.remoting.protocol.impl.SSLEngineFilterLayer.processWrite(SSLEngineFilterLayer.java:501)
14:07:20 	at org.jenkinsci.remoting.protocol.impl.SSLEngineFilterLayer.processQueuedWrites(SSLEngineFilterLayer.java:246)
14:07:20 	at org.jenkinsci.remoting.protocol.impl.SSLEngineFilterLayer.doSend(SSLEngineFilterLayer.java:198)
14:07:20 	at org.jenkinsci.remoting.protocol.impl.SSLEngineFilterLayer.doCloseSend(SSLEngineFilterLayer.java:211)
14:07:20 	at org.jenkinsci.remoting.protocol.ProtocolStack$Ptr.doCloseSend(ProtocolStack.java:785)
14:07:20 	at org.jenkinsci.remoting.protocol.ApplicationLayer.doCloseWrite(ApplicationLayer.java:172)
14:07:20 	at org.jenkinsci.remoting.protocol.impl.ChannelApplicationLayer$ByteBufferCommandTransport.closeWrite(ChannelApplicationLayer.java:311)
14:07:20 	at hudson.remoting.Channel.close(Channel.java:1502)
14:07:20 	at hudson.remoting.Channel.close(Channel.java:1455)
14:07:20 	at hudson.slaves.SlaveComputer.closeChannel(SlaveComputer.java:884)
14:07:20 	at hudson.slaves.SlaveComputer.access$100(SlaveComputer.java:110)
14:07:20 	at hudson.slaves.SlaveComputer$2.run(SlaveComputer.java:765)
14:07:20 	at jenkins.util.ContextResettingExecutorService$1.run(ContextResettingExecutorService.java:28)
14:07:20 	at jenkins.security.ImpersonatingExecutorService$1.run(ImpersonatingExecutorService.java:68)
14:07:20 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
14:07:20 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
14:07:20 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
14:07:20 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
14:07:20 	at java.lang.Thread.run(Thread.java:748)
14:07:20 Caused: hudson.remoting.ChannelClosedException: Channel ""hudson.remoting.Channel@52f33c80:JNLP4-connect connection from 70-35-50-58.static.wiline.com/70.35.50.58:62051"": Remote call on JNLP4-connect connection from 70-35-50-58.static.wiline.com/70.35.50.58:62051 failed. The channel is closing down or has closed down",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/fujitatomoya,16,https://github.com/ros2/rmw/pull/296#issuecomment-852964977,Signed-off-by: Barry Xu Barry.Xu@sony.com,"CI (macOS):

macOS",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/fujitatomoya,17,https://github.com/ros2/rmw/pull/296#issuecomment-852965229,Signed-off-by: Barry Xu Barry.Xu@sony.com,@Barry-Xu-2018 i just restarted the CI for macOS.,True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/fujitatomoya,18,https://github.com/ros2/rmw/pull/296#issuecomment-853423362,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@ivanpauno appreciate for the help, thanks 👍",True,{}
ros2/rmw,https://github.com/ros2/rmw,296,2020-12-24T09:40:08Z,2021-06-02T17:16:00Z,2021-06-03T01:08:05Z,MERGED,True,45,0,1,https://github.com/Barry-Xu-2018,Add rmw_publisher_wait_for_all_acked support,5,[],https://github.com/ros2/rmw/pull/296,https://github.com/Barry-Xu-2018,19,https://github.com/ros2/rmw/pull/296#issuecomment-853484397,Signed-off-by: Barry Xu Barry.Xu@sony.com,"@fujitatomoya @ivanpauno
Thank you.",True,{}
ros2/rmw,https://github.com/ros2/rmw,297,2021-02-03T15:19:30Z,2021-02-03T22:08:13Z,2021-02-03T22:08:16Z,MERGED,True,2,2,1,https://github.com/clalancette,Update the rmw_take_sequence documentation.,1,[],https://github.com/ros2/rmw/pull/297,https://github.com/clalancette,1,https://github.com/ros2/rmw/pull/297,"In particular, ""taken"" is not a flag but a ""count"" of messages
returned.  Update the documentation to reflect that.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","In particular, ""taken"" is not a flag but a ""count"" of messages
returned.  Update the documentation to reflect that.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rmw,https://github.com/ros2/rmw,297,2021-02-03T15:19:30Z,2021-02-03T22:08:13Z,2021-02-03T22:08:16Z,MERGED,True,2,2,1,https://github.com/clalancette,Update the rmw_take_sequence documentation.,1,[],https://github.com/ros2/rmw/pull/297,https://github.com/clalancette,2,https://github.com/ros2/rmw/pull/297#issuecomment-772859441,"In particular, ""taken"" is not a flag but a ""count"" of messages
returned.  Update the documentation to reflect that.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",I'm not going to run CI on this one since it just a documentation update.  Thanks for the review.,True,{}
ros2/rmw,https://github.com/ros2/rmw,298,2021-02-11T00:29:07Z,2021-03-13T00:56:15Z,2021-03-13T00:56:15Z,CLOSED,False,39,46,3,https://github.com/emersonknapp,Deprecate rmw_time_t,2,[],https://github.com/ros2/rmw/pull/298,https://github.com/emersonknapp,1,https://github.com/ros2/rmw/pull/298,"Resolves #215
Removes rmw_time_t from the RMW API in favor of an int-based nanosecond type.
This simplifies most time-based code in the core, since rcl, rclcpp, and rclpy (and cyclonedds) all use an int64-based nanosecond timestamp already - it's a net-negative code change.
This should make #255 a lot easier to define - no special allowances will be needed around conversions to and from duration representations, nor can there be non-normalized durations (nanoseconds > 1billion)
Linked PRs:

 ros2/rmw_implementation#178
 ros2/rmw_dds_common#43
 ros2/rmw_cyclonedds#283
 ros2/rmw_fastrtps#508
 ros2/rmw_connext#485
 ros2/rcl#889
 ros2/rclcpp#1549
 ros2/rclpy#679
 ros2/rosbag2#646
 ros2/demos#484

Gist: https://gist.githubusercontent.com/emersonknapp/32eb5733086c7f6876e4bf9ece5d5fef/raw/caa6d31a0a84866cbc4e51afb60ad8b551a05acd/ros2.repos

Linux 
Linux-aarch64 
macOS 
Windows","Resolves #215
Removes rmw_time_t from the RMW API in favor of an int-based nanosecond type.
This simplifies most time-based code in the core, since rcl, rclcpp, and rclpy (and cyclonedds) all use an int64-based nanosecond timestamp already - it's a net-negative code change.
This should make #255 a lot easier to define - no special allowances will be needed around conversions to and from duration representations, nor can there be non-normalized durations (nanoseconds > 1billion)
Linked PRs:

 ros2/rmw_implementation#178
 ros2/rmw_dds_common#43
 ros2/rmw_cyclonedds#283
 ros2/rmw_fastrtps#508
 ros2/rmw_connext#485
 ros2/rcl#889
 ros2/rclcpp#1549
 ros2/rclpy#679
 ros2/rosbag2#646
 ros2/demos#484

Gist: https://gist.githubusercontent.com/emersonknapp/32eb5733086c7f6876e4bf9ece5d5fef/raw/caa6d31a0a84866cbc4e51afb60ad8b551a05acd/ros2.repos

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,298,2021-02-11T00:29:07Z,2021-03-13T00:56:15Z,2021-03-13T00:56:15Z,CLOSED,False,39,46,3,https://github.com/emersonknapp,Deprecate rmw_time_t,2,[],https://github.com/ros2/rmw/pull/298,https://github.com/emersonknapp,2,https://github.com/ros2/rmw/pull/298#issuecomment-780233122,"Resolves #215
Removes rmw_time_t from the RMW API in favor of an int-based nanosecond type.
This simplifies most time-based code in the core, since rcl, rclcpp, and rclpy (and cyclonedds) all use an int64-based nanosecond timestamp already - it's a net-negative code change.
This should make #255 a lot easier to define - no special allowances will be needed around conversions to and from duration representations, nor can there be non-normalized durations (nanoseconds > 1billion)
Linked PRs:

 ros2/rmw_implementation#178
 ros2/rmw_dds_common#43
 ros2/rmw_cyclonedds#283
 ros2/rmw_fastrtps#508
 ros2/rmw_connext#485
 ros2/rcl#889
 ros2/rclcpp#1549
 ros2/rclpy#679
 ros2/rosbag2#646
 ros2/demos#484

Gist: https://gist.githubusercontent.com/emersonknapp/32eb5733086c7f6876e4bf9ece5d5fef/raw/caa6d31a0a84866cbc4e51afb60ad8b551a05acd/ros2.repos

Linux 
Linux-aarch64 
macOS 
Windows","A couple minor comments, otherwise LGTM.
Would be good to get a second approval before moving forward with the deprecation.

Thanks for the comments - I'll take care of them.
Do you think we should deprecate the existing rmw_wait signature (to be removed in H-turtle) and add this new signature as an override? Or, is replacing the existing function OK?
I'm not actually sure if RMW implementations are allowed to leave RMW APIs unimplemented. If it's an error to not implement the new signature, then I wouldn't see a reason to deprecate+overload considering they would have to be touched regardless. But otherwise if it's not an error, then maybe it makes sense in the tick-tock strategy to do it that way.",True,{}
ros2/rmw,https://github.com/ros2/rmw,298,2021-02-11T00:29:07Z,2021-03-13T00:56:15Z,2021-03-13T00:56:15Z,CLOSED,False,39,46,3,https://github.com/emersonknapp,Deprecate rmw_time_t,2,[],https://github.com/ros2/rmw/pull/298,https://github.com/jacobperron,3,https://github.com/ros2/rmw/pull/298#issuecomment-780272625,"Resolves #215
Removes rmw_time_t from the RMW API in favor of an int-based nanosecond type.
This simplifies most time-based code in the core, since rcl, rclcpp, and rclpy (and cyclonedds) all use an int64-based nanosecond timestamp already - it's a net-negative code change.
This should make #255 a lot easier to define - no special allowances will be needed around conversions to and from duration representations, nor can there be non-normalized durations (nanoseconds > 1billion)
Linked PRs:

 ros2/rmw_implementation#178
 ros2/rmw_dds_common#43
 ros2/rmw_cyclonedds#283
 ros2/rmw_fastrtps#508
 ros2/rmw_connext#485
 ros2/rcl#889
 ros2/rclcpp#1549
 ros2/rclpy#679
 ros2/rosbag2#646
 ros2/demos#484

Gist: https://gist.githubusercontent.com/emersonknapp/32eb5733086c7f6876e4bf9ece5d5fef/raw/caa6d31a0a84866cbc4e51afb60ad8b551a05acd/ros2.repos

Linux 
Linux-aarch64 
macOS 
Windows","Do you think we should deprecate the existing rmw_wait signature (to be removed in H-turtle) and add this new signature as an override? Or, is replacing the existing function OK?

How do you propose to deprecate the signature? C doesn't support overloading, so I'm not sure how best to deprecate the existing signature short of introducing a new symbol (e.g. rmw_wait_v2).",True,{}
ros2/rmw,https://github.com/ros2/rmw,298,2021-02-11T00:29:07Z,2021-03-13T00:56:15Z,2021-03-13T00:56:15Z,CLOSED,False,39,46,3,https://github.com/emersonknapp,Deprecate rmw_time_t,2,[],https://github.com/ros2/rmw/pull/298,https://github.com/emersonknapp,4,https://github.com/ros2/rmw/pull/298#issuecomment-780738420,"Resolves #215
Removes rmw_time_t from the RMW API in favor of an int-based nanosecond type.
This simplifies most time-based code in the core, since rcl, rclcpp, and rclpy (and cyclonedds) all use an int64-based nanosecond timestamp already - it's a net-negative code change.
This should make #255 a lot easier to define - no special allowances will be needed around conversions to and from duration representations, nor can there be non-normalized durations (nanoseconds > 1billion)
Linked PRs:

 ros2/rmw_implementation#178
 ros2/rmw_dds_common#43
 ros2/rmw_cyclonedds#283
 ros2/rmw_fastrtps#508
 ros2/rmw_connext#485
 ros2/rcl#889
 ros2/rclcpp#1549
 ros2/rclpy#679
 ros2/rosbag2#646
 ros2/demos#484

Gist: https://gist.githubusercontent.com/emersonknapp/32eb5733086c7f6876e4bf9ece5d5fef/raw/caa6d31a0a84866cbc4e51afb60ad8b551a05acd/ros2.repos

Linux 
Linux-aarch64 
macOS 
Windows","C doesn't support overloading,

Of course, I was still thinking in C++. I don't have an answer then - introducing a function with a different name is not a great alternative.",True,{}
ros2/rmw,https://github.com/ros2/rmw,298,2021-02-11T00:29:07Z,2021-03-13T00:56:15Z,2021-03-13T00:56:15Z,CLOSED,False,39,46,3,https://github.com/emersonknapp,Deprecate rmw_time_t,2,[],https://github.com/ros2/rmw/pull/298,https://github.com/ivanpauno,5,https://github.com/ros2/rmw/pull/298#issuecomment-781567771,"Resolves #215
Removes rmw_time_t from the RMW API in favor of an int-based nanosecond type.
This simplifies most time-based code in the core, since rcl, rclcpp, and rclpy (and cyclonedds) all use an int64-based nanosecond timestamp already - it's a net-negative code change.
This should make #255 a lot easier to define - no special allowances will be needed around conversions to and from duration representations, nor can there be non-normalized durations (nanoseconds > 1billion)
Linked PRs:

 ros2/rmw_implementation#178
 ros2/rmw_dds_common#43
 ros2/rmw_cyclonedds#283
 ros2/rmw_fastrtps#508
 ros2/rmw_connext#485
 ros2/rcl#889
 ros2/rclcpp#1549
 ros2/rclpy#679
 ros2/rosbag2#646
 ros2/demos#484

Gist: https://gist.githubusercontent.com/emersonknapp/32eb5733086c7f6876e4bf9ece5d5fef/raw/caa6d31a0a84866cbc4e51afb60ad8b551a05acd/ros2.repos

Linux 
Linux-aarch64 
macOS 
Windows","Of course, I was still thinking in C++. I don't have an answer then - introducing a function with a different name is not a great alternative.

You can achieve ""overloading"" in C with the _Generic macro (part of the C11 standard).
See for example https://stackoverflow.com/a/25026358 or https://devblogs.microsoft.com/cppblog/c11-and-c17-standard-support-arriving-in-msvc/.
I'm not sure if we want to use that thingy or not (I'm pretty sure MSVC/gcc/clang support that, but probably not other compilers).
If we want to move forward with this change, I also don't mind about having a rcl_wait2 or rmw_wait2 (or if considered ok, breaking API).",True,{}
ros2/rmw,https://github.com/ros2/rmw,298,2021-02-11T00:29:07Z,2021-03-13T00:56:15Z,2021-03-13T00:56:15Z,CLOSED,False,39,46,3,https://github.com/emersonknapp,Deprecate rmw_time_t,2,[],https://github.com/ros2/rmw/pull/298,https://github.com/emersonknapp,6,https://github.com/ros2/rmw/pull/298#issuecomment-781670118,"Resolves #215
Removes rmw_time_t from the RMW API in favor of an int-based nanosecond type.
This simplifies most time-based code in the core, since rcl, rclcpp, and rclpy (and cyclonedds) all use an int64-based nanosecond timestamp already - it's a net-negative code change.
This should make #255 a lot easier to define - no special allowances will be needed around conversions to and from duration representations, nor can there be non-normalized durations (nanoseconds > 1billion)
Linked PRs:

 ros2/rmw_implementation#178
 ros2/rmw_dds_common#43
 ros2/rmw_cyclonedds#283
 ros2/rmw_fastrtps#508
 ros2/rmw_connext#485
 ros2/rcl#889
 ros2/rclcpp#1549
 ros2/rclpy#679
 ros2/rosbag2#646
 ros2/demos#484

Gist: https://gist.githubusercontent.com/emersonknapp/32eb5733086c7f6876e4bf9ece5d5fef/raw/caa6d31a0a84866cbc4e51afb60ad8b551a05acd/ros2.repos

Linux 
Linux-aarch64 
macOS 
Windows","Would be good to get a second approval before moving forward with the deprecation.

@jacobperron who would be best to weigh in with a second opinion? I have the followup of #255, which I'd like to get these both done in time for Galactic API freeze - just want to make sure we have a good buffer, I am not a fan of the scramble at distro freeze time.",True,{}
ros2/rmw,https://github.com/ros2/rmw,298,2021-02-11T00:29:07Z,2021-03-13T00:56:15Z,2021-03-13T00:56:15Z,CLOSED,False,39,46,3,https://github.com/emersonknapp,Deprecate rmw_time_t,2,[],https://github.com/ros2/rmw/pull/298,https://github.com/emersonknapp,7,https://github.com/ros2/rmw/pull/298#issuecomment-797836240,"Resolves #215
Removes rmw_time_t from the RMW API in favor of an int-based nanosecond type.
This simplifies most time-based code in the core, since rcl, rclcpp, and rclpy (and cyclonedds) all use an int64-based nanosecond timestamp already - it's a net-negative code change.
This should make #255 a lot easier to define - no special allowances will be needed around conversions to and from duration representations, nor can there be non-normalized durations (nanoseconds > 1billion)
Linked PRs:

 ros2/rmw_implementation#178
 ros2/rmw_dds_common#43
 ros2/rmw_cyclonedds#283
 ros2/rmw_fastrtps#508
 ros2/rmw_connext#485
 ros2/rcl#889
 ros2/rclcpp#1549
 ros2/rclpy#679
 ros2/rosbag2#646
 ros2/demos#484

Gist: https://gist.githubusercontent.com/emersonknapp/32eb5733086c7f6876e4bf9ece5d5fef/raw/caa6d31a0a84866cbc4e51afb60ad8b551a05acd/ros2.repos

Linux 
Linux-aarch64 
macOS 
Windows","I am closing this for now as I have no specific plan to readdress it later. I'm fairly convinced that there is not much benefit, and the simple helper functions added in #301 meet current needs.",True,{}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/299,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/jacobperron,2,https://github.com/ros2/rmw/pull/299#issuecomment-780266379,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","I've refactored the proposed API. Two major changes:


Now instead of a bool, it outputs the compatibility result as an enum type parameter. The return code is reserved for other errors not related to compatibility.
The compatibility can have one of three states:

""OK"": the profiles are compatible
""WARNING"": because one or more policies was set to ""system default"", we don't actually know if the profiles are compatible.
""ERROR"": the profiles are incompatible.



Added a string buffer (and size) parameter for setting the reason for an incompatibility or warning.
The user should provide a pre-allocated array so that memory management is completely in their hands.


@mjeronimo @gbiggs PTAL",True,{}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/jacobperron,3,https://github.com/ros2/rmw/pull/299#issuecomment-780266707,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","Oh, and I also renamed the function on a whim.",True,{}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/mjeronimo,4,https://github.com/ros2/rmw/pull/299#issuecomment-780279893,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","I agree with the name change given the change in the return type.
Looks good to me, although I would've preferred a definitive yes/no answer, which would, of course, require a way to query the underlying implementation for its QoS system defaults.",True,{}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/wjwwood,5,https://github.com/ros2/rmw/pull/299#issuecomment-780834208,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","Added a string buffer (and size) parameter for setting the reason for an incompatibility or warning.
The user should provide a pre-allocated array so that memory management is completely in their hands.

👍 like this even more than what we talked about.",True,{'HEART': ['https://github.com/jacobperron']}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/jacobperron,6,https://github.com/ros2/rmw/pull/299#issuecomment-781065095,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows",I've opened a PR with the implementation for DDS RMWs here: ros2/rmw_dds_common#45,True,{}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/jacobperron,7,https://github.com/ros2/rmw/pull/299#issuecomment-782310738,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","Thanks for the feedback! I've updated this PR and opened a bunch of connected PRs that implement this for our supported RMWs (see the updated description for a list). The common implementation lives in rmw_dds_common, so this one could use the most scrutiny: ros2/rmw_dds_common#45",True,{}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/jacobperron,8,https://github.com/ros2/rmw/pull/299#issuecomment-785319595,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","Thanks for all the feedback so far!
I'm just waiting for ci.ros2.org to come back online and then I'll trigger CI and get this merged/released.",True,{}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/asorbini,9,https://github.com/ros2/rmw/pull/299#issuecomment-791714548,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","I noticed this new API from a new test failure in test_rmw_implementation, and added support for it to rmw_connextdds in 91753dc.
I also noticed that these changes have not yet made it to the Rolling Debian binaries, and I had to build the tree from source in order to validate them. What is the period with which those packages are usually regenerated?",True,{}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/ivanpauno,10,https://github.com/ros2/rmw/pull/299#issuecomment-792778575,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","I think that releasing rmw_implementation is pending, but IIUC @jacobperron already released up to rmw.

I also noticed that these changes have not yet made it to the Rolling Debian binaries, and I had to build the tree from source in order to validate them. What is the period with which those packages are usually regenerated?

IIUC the packages used by build.ros2.org for testing will be updated almost right away (delay of some hours), but the public ones (the ones you download when apt install ...) will only get updated after a sync.
I guess there will be a sync in about May as ROS 2 Galactic will be released for that date, though IDK.",True,{'THUMBS_UP': ['https://github.com/asorbini']}
ros2/rmw,https://github.com/ros2/rmw,299,2021-02-11T01:58:37Z,2021-02-25T19:14:56Z,2021-03-08T17:45:55Z,MERGED,True,70,0,2,https://github.com/jacobperron,Add declaration for function to check QoS profile compatibility,10,[],https://github.com/ros2/rmw/pull/299,https://github.com/jacobperron,11,https://github.com/ros2/rmw/pull/299#issuecomment-792944278,"Currently, users who are creating a publisher or subscription can receive 'QoS incompatibility'
events from the RMW if an incompatible endpoint is discovered. While this is useful, we
currently don't have a nice way for application to generally check if two QoS profiles are
compatible. For example, it would be nice if tooling could query the communication graph and
report any detected QoS incompatibilities.
In order to reduce code duplication, I think an API for checking QoS compatibilty should live
in a common place. I've opted for rmw (over a place like rcl) since it's possible QoS
compatiblity rules may vary per RMW vendor. Since rules for all DDS implementations should be
the same, we could put that common logic in rmw_dds_common.

The motivation for this API is to add features to tooling like rqt_graph and ros2doctor to help diagnose QoS compatibility issues. E.g. it would be useful to change how incompatible links in the ROS graph are rendered in rqt_graph.

Connected PRs:

rmw_dds_common (implementation): ros2/rmw_dds_common#45
rmw_cyclonedds: ros2/rmw_cyclonedds#286
rmw_fastrtps: ros2/rmw_fastrtps#511
rmw_connext: ros2/rmw_connext#488
rmw_implementation: ros2/rmw_implementation#180
rmw_connextdds: TODO

CI for connected PRs listed above:

Linux 
Linux-aarch64 
macOS 
Windows","@ivanpauno is correct. If you switch to the testing repo (see instructions), then you should see these changes already released there. Syncs to main happen periodically (roughly every three weeks), though I don't think there has been one for a couple months now.
@nuclearsandwich what do you think about doing a Rolling sync in the near future?",True,{'THUMBS_UP': ['https://github.com/asorbini']}
ros2/rmw,https://github.com/ros2/rmw,300,2021-02-11T23:13:35Z,2021-02-12T18:08:24Z,2021-02-12T18:08:27Z,MERGED,True,3,1,1,https://github.com/cottsay,Shorten some excessively long lines of CMake,1,[],https://github.com/ros2/rmw/pull/300,https://github.com/cottsay,1,https://github.com/ros2/rmw/pull/300,"The line length enforcement in ament_lint_cmake has been broken for some time, but will be fixed by ament/ament_lint#236. This change brings this package into compliance with a 120 column limit.

Linux 
Linux-aarch64 
macOS 
Windows","The line length enforcement in ament_lint_cmake has been broken for some time, but will be fixed by ament/ament_lint#236. This change brings this package into compliance with a 120 column limit.

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,300,2021-02-11T23:13:35Z,2021-02-12T18:08:24Z,2021-02-12T18:08:27Z,MERGED,True,3,1,1,https://github.com/cottsay,Shorten some excessively long lines of CMake,1,[],https://github.com/ros2/rmw/pull/300,https://github.com/cottsay,2,https://github.com/ros2/rmw/pull/300#issuecomment-777860517,"The line length enforcement in ament_lint_cmake has been broken for some time, but will be fixed by ament/ament_lint#236. This change brings this package into compliance with a 120 column limit.

Linux 
Linux-aarch64 
macOS 
Windows",The PR job had cmake line length test failures that will go away once we merge the detection fix along with the change to limit lines to 140 columns.,True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/emersonknapp,1,https://github.com/ros2/rmw/pull/301,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.","Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.",True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/emersonknapp,2,https://github.com/ros2/rmw/pull/301#issuecomment-782461850,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.","@jacobperron @clalancette @mm318 @hidmic @fujitatomoya @Barry-Xu-2018
Hey all, as participants in the #210 discussion, I would like your feedback on this. See discussion on #298 for why I'm not addressing #215 here.
I've only performed one RMW implementation update, to show the pattern, without doing too much extra work. After going too far on other iterations of this feature, I wanted to wait until we have some consensus on the API before opening more update PRs.",True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/emersonknapp,3,https://github.com/ros2/rmw/pull/301#issuecomment-788408354,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.","@jacobperron @hidmic @fujitatomoya Thanks for the feedback - I've pushed a new version that I hope addresses all concerns:

Move time declarations and utilities into time.h, time.c, test_time.cpp
Explicitly state the differences between RMW_DURATION_UNSPECIFIED and RMW_DURATION_INFINITE
Add bounds checking to time utilities (negative durations, overflows)",True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/emersonknapp,4,https://github.com/ros2/rmw/pull/301#issuecomment-791548209,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/emersonknapp,5,https://github.com/ros2/rmw/pull/301#issuecomment-791631144,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.","Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/emersonknapp,6,https://github.com/ros2/rmw/pull/301#issuecomment-791817123,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.",@jacobperron looks all good except the rcl_action tests on Windows - it looks like those same tests failed in last night's nightly https://ci.ros2.org/view/nightly/job/nightly_win_rel/1863/#showFailuresLink so I'm assuming it's a preexisting issue - should we block on merging?,True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/jacobperron,7,https://github.com/ros2/rmw/pull/301#issuecomment-792998599,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.","@emersonknapp Looks like this is the related issue: ros2/rmw_connext#472
I think it's okay to not block on the rcl_action graph test failures.",True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/emersonknapp,8,https://github.com/ros2/rmw/pull/301#issuecomment-793111698,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.",Sounds good to me! Note: I don't have merge access here so a maintainer will need to merge,True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/emersonknapp,9,https://github.com/ros2/rmw/pull/301#issuecomment-796957327,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.",@jacobperron @hidmic friendly ping: can you merge this or direct it to the person who can?,True,{}
ros2/rmw,https://github.com/ros2/rmw,301,2021-02-19T23:38:52Z,2021-03-11T18:48:40Z,2021-03-11T18:48:40Z,MERGED,True,316,18,7,https://github.com/emersonknapp,Introduce RMW_DURATION_INFINITE constant and API return value promise,4,[],https://github.com/ros2/rmw/pull/301,https://github.com/hidmic,10,https://github.com/ros2/rmw/pull/301#issuecomment-796961219,"Resolves #210
Alternative to #255
Introduce a new constant, RMW_DURATION_INFINITE. Specify in get_topic_endpoint_info that it is expected to be returned to represent infinite durations. Add some helper functions that enable better usage of this new value.
This change is non-breaking, all RMW implementations will continue to work correctly as-is. However, there are two expectations that they must eventually implement:

If a user inputs RMW_DURATION_INFINITE for Deadline, Lifespan, or Liveliness Lease Duration QoS policy values, this should be translated into the implementation-specific infinity value.
When returning values in get_topic_endpoint_info, RMW impementations must intercept their own internall-defined ""infinity"" definitions and replace those values with RMW_DURATION_INFINITE, so that they can be understood correctly.

Today, I will not be changing the default qos_profile values to RMW_DURATION_INFINITY, as this would break existing implementations that do not know how to handle this value correctly. I would like to create a ""value deprecation"" so that this default value could be switched over in time for H-Turtle, but I'm not sure how this should be done.
Dependent (but not linked, can be merged after) PRs:

 ros2/rmw_fastrtps#515
 ros2/rmw_cyclonedds#288
 ros2/rmw_connext#491
 rosbag2 playback
 ros2topic info should print ""Infinite"" instead of some large number for readability
Out of tree DDS implementations are recommended to follow suit. This feature will affect their ability to have rosbags played back correctly, and for the CLI to print ""infinite"" in the right places.",Thanks for the bump @emersonknapp. Merging.,True,"{'HOORAY': ['https://github.com/jacobperron', 'https://github.com/emersonknapp']}"
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/iuhilnehc-ynos,1,https://github.com/ros2/rmw/pull/302,Related to ros2/design#282 to add content-filtered-topic interfaces.,Related to ros2/design#282 to add content-filtered-topic interfaces.,True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/iuhilnehc-ynos,2,https://github.com/ros2/rmw/pull/302#issuecomment-939611627,Related to ros2/design#282 to add content-filtered-topic interfaces.,rebase and ready to implement CFT for rmw_fastrtps,True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,3,https://github.com/ros2/rmw/pull/302#issuecomment-1027561961,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@ivanpauno @wjwwood @clalancette could you review this?
CC: @MiguelCompany @asorbini",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,4,https://github.com/ros2/rmw/pull/302#issuecomment-1054692581,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@ivanpauno

What is going to be the behavior for DDS vendors that don't support content filtering?

NOT SUPPORT will be returned to application for now.
https://github.com/ros2/design/pull/282/files#diff-0cb9ecc495b4e57ddcb33bd070916b8cc1a2c5a812c4ec2020f93b5bb858d197R221-R225
we have been discussing internally, but not implementing the rcl filtering function yet. this is something we could do as follow-up, but we are not positive on this approach.",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/iuhilnehc-ynos,5,https://github.com/ros2/rmw/pull/302#issuecomment-1054941862,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@ivanpauno @fujitatomoya

What is going to be the behavior for DDS vendors that don't support content filtering?

There are two cases(1. create a subscriber with the content filter at the beginning; 2. set content filter after creating a subscriber that can be non-content filter) to set content filtering.
In the first case, it just returns the subscriber as normal with an is_cft_enabled flag that is false.
In the second, it returns NOT SUPPORT as @fujitatomoya mentioned.",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/ivanpauno,6,https://github.com/ros2/rmw/pull/302#issuecomment-1055511889,Related to ros2/design#282 to add content-filtered-topic interfaces.,"we have been discussing internally, but not implementing the rcl filtering function yet. this is something we could do as follow-up, but we are not positive on this approach.

I'm not sure if it's a good idea to add a feature only supported by one DDS vendor.
In that case, we're not going to be able to take much advantage of the feature.
@clalancette @wjwwood any opinion?",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/MiguelCompany,7,https://github.com/ros2/rmw/pull/302#issuecomment-1055561373,Related to ros2/design#282 to add content-filtered-topic interfaces.,"I'm not sure if it's a good idea to add a feature only supported by one DDS vendor.

@ivanpauno We've been working hard to have this feature on Fast DDS. It has just been released with v2.5.1
We are changing the Fast DDS branch for rolling in ros2/ros2#1241
@iuhilnehc-ynos Has been working on the rmw_fastrtps integration but we didn't want ros2/ros2#1241 to block the review of the RMW interfaces, so that's why we decided to start with the empty stub, and the content filter implementation on rmw_fastrtps will be done on a follow-up PR.",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/ivanpauno,8,https://github.com/ros2/rmw/pull/302#issuecomment-1055573957,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@iuhilnehc-ynos Has been working on the rmw_fastrtps integration but we didn't want ros2/ros2#1241 to block the review of the RMW interfaces, so that's why we decided to start with the empty stub, and the content filter implementation on rmw_fastrtps will be done on a follow-up PR.

Well that sounds way better!
It's still a bit strange to me to add a major feature not supported by all rmw implementations.
Ideally, we should have a way to still use content filtering in the implementations that don't support the feature, even if in that case there's no performance benefit.",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,9,https://github.com/ros2/rmw/pull/302#issuecomment-1055628593,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@MiguelCompany thanks for the follow-up
@ivanpauno sorry i did not mention that rmw_fastrtps status. that will be supported as well. (So rmw_fastrtps and rmw_connextdds will be supported with this PR for Humble.)

Ideally, we should have a way to still use content filtering in the implementations that don't support the feature, even if in that case there's no performance benefit.

okay we just wanted to discuss with community how we wanna go for sure. if that is the way to go, we are expecting that we could integrate this filtering in rcl. (expecting that no interfaces need to be changed.) that is something we can do, and we will do that after this.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,10,https://github.com/ros2/rmw/pull/302#issuecomment-1055629822,Related to ros2/design#282 to add content-filtered-topic interfaces.,"Or if rmw_cyclonedds has a plan to support content filtering, we are also willing to work on rmw_cyclonedds to enable that. in this case, we do not really need filtering in rcl?",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/ivanpauno,11,https://github.com/ros2/rmw/pull/302#issuecomment-1055635646,Related to ros2/design#282 to add content-filtered-topic interfaces.,"Or if rmw_cyclonedds has a plan to support content filtering, we are also willing to work on rmw_cyclonedds to enable that. in this case, we do not really need filtering in rcl?

Maybe not in that case, but it will make implementing a fully featured rmw implementation much harder.",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,12,https://github.com/ros2/rmw/pull/302#issuecomment-1055642455,Related to ros2/design#282 to add content-filtered-topic interfaces.,"okay, sounds good to us. but can we do that as follow-up, we do not think that is required to have this PR in the mainline.
Since we have been waiting for a long time to have feedback, we would like to have some time to address rcl filtering if it is required after consensus. (but we will do that!)",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/ivanpauno,13,https://github.com/ros2/rmw/pull/302#issuecomment-1055648998,Related to ros2/design#282 to add content-filtered-topic interfaces.,"That sounds good to me.
@clalancette @wjwwood opinions?",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,14,https://github.com/ros2/rmw/pull/302#issuecomment-1055651121,Related to ros2/design#282 to add content-filtered-topic interfaces.,@iuhilnehc-ynos could you also share your thought?,True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,15,https://github.com/ros2/rmw/pull/302#issuecomment-1057147883,Related to ros2/design#282 to add content-filtered-topic interfaces.,@wjwwood can you review this?,True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,16,https://github.com/ros2/rmw/pull/302#issuecomment-1063209151,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@iuhilnehc-ynos

There are two cases(1. create a subscriber with the content filter at the beginning;
2. set content filter after creating a subscriber that can be non-content filter) to set content filtering.
In the first case, it just returns the subscriber as normal with an is_cft_enabled flag that is false.

precisely this is more like, user can create a subscriber with content filtering option that include expression and parameters.
i thought that this was okay to create subscriber implicitly, and application can ask if CFT is enabled.
but it would be nice to fail the subscriber creation with error code? this is more direct message that user cannot use CFT with current RMW implementation?
what would you think? @ivanpauno @wjwwood (sorry in today's call, i mentioned this incorrectly.)

In the second, it returns NOT SUPPORT as @fujitatomoya mentioned.

this seems to be no problem.",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,17,https://github.com/ros2/rmw/pull/302#issuecomment-1071704871,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@ivanpauno  @wjwwood
CC: @MiguelCompany @asorbini
could you do another final review before this goes in.
and i think that the followings need to be merged at the same time, right?

#302 (this PR)
ros2/rmw_implementation#181
ros2/rmw_connextdds#68
ros2/rmw_fastrtps#513
ros2/rmw_cyclonedds#289

@iuhilnehc-ynos i think ros2/rclcpp#1561 and ros2/rcl#894 can be merged later w/o any problem? just checking cz 1st we need to have all green for above RMW changes before merge with mainline.",True,{'THUMBS_UP': ['https://github.com/iuhilnehc-ynos']}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,18,https://github.com/ros2/rmw/pull/302#issuecomment-1071763251,Related to ros2/design#282 to add content-filtered-topic interfaces.,"CI only with CFT RMW Changes: (https://gist.githubusercontent.com/fujitatomoya/e591118d872be65c4c3821f7c710b12f/raw/2abba2d25836f36e6d0392024d649bd04556be56/ros2.repos)

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,19,https://github.com/ros2/rmw/pull/302#issuecomment-1071794950,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@iuhilnehc-ynos @asorbini CI fails with rmw_connextdds, we probably want to have stub implementation for rmw_connextdds at this moment since we need to fix the APIs soon. then we can probably address unstable issues for rmw_connextdds later to enable CFT after release?
Mon. March 21, 2022 - Alpha + RMW freeze",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,20,https://github.com/ros2/rmw/pull/302#issuecomment-1071799713,Related to ros2/design#282 to add content-filtered-topic interfaces.,"CI: same with #302 (comment) but rmw_connextdds

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,21,https://github.com/ros2/rmw/pull/302#issuecomment-1071857811,Related to ros2/design#282 to add content-filtered-topic interfaces.,"CI still fails, i think we need to rebase https://github.com/ros2/rmw_connextdds/tree/asorbini/cft as @iuhilnehc-ynos mentioned before ros2/design#282 (comment), and fix a bit for rcutils_string_array_t ros2/rmw_connextdds#68 (comment)",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,22,https://github.com/ros2/rmw/pull/302#issuecomment-1071971744,Related to ros2/design#282 to add content-filtered-topic interfaces.,"CI: (using ros2/rmw_connextdds#77 rmw_connextdds stub, just to make sure this goes green.)

Linux 
Linux-aarch64 
Windows 

repo is https://gist.githubusercontent.com/fujitatomoya/312c1308d8dcd48991be734c9c7d23f1/raw/664b83b531bc1b85faab9a042edf37329a795867/ros2.repos",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/iuhilnehc-ynos,23,https://github.com/ros2/rmw/pull/302#issuecomment-1072005358,Related to ros2/design#282 to add content-filtered-topic interfaces.,"Rebased the 5 repositories, then re-run CI based on #302 (comment)

Linux 
Linux-aarch64 
Windows 

Updated (linked error on windows, fixed in rmw_fastrtps):

Windows",True,"{'EYES': ['https://github.com/fujitatomoya', 'https://github.com/Barry-Xu-2018']}"
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,24,https://github.com/ros2/rmw/pull/302#issuecomment-1072572088,Related to ros2/design#282 to add content-filtered-topic interfaces.,"windows CI unstable, https://ci.ros2.org/job/ci_windows/16730/, this is not related to CFT RMW fix.
@ivanpauno @wjwwood
CC: @iuhilnehc-ynos
could you help us to merge the following PRs for RMW CFT? we do not have access permission for cyclone and connextdds.

#302 (this PR)
ros2/rmw_implementation#181
ros2/rmw_connextdds#77 (currently stub)
ros2/rmw_fastrtps#513
ros2/rmw_cyclonedds#289

rmw_connextdds is currently stub to push the interfaces, but the following can be pushed afterwards. (CC: @asorbini )
we tried to fix the problem, but for now we ended up having stub to get the interfaces at 1st.

ros2/rmw_connextdds#68 (CFT enabled, but some minor errors detected.)",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,25,https://github.com/ros2/rmw/pull/302#issuecomment-1072931048,Related to ros2/design#282 to add content-filtered-topic interfaces.,"CI with ros2/rmw_connextdds#68

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,26,https://github.com/ros2/rmw/pull/302#issuecomment-1073137065,Related to ros2/design#282 to add content-filtered-topic interfaces.,"CI again with ros2/rmw_connextdds#68 (see ros2/rmw_connextdds#68 (comment))

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/asorbini,27,https://github.com/ros2/rmw/pull/302#issuecomment-1073150826,Related to ros2/design#282 to add content-filtered-topic interfaces.,I started another Windows build since I should have now resolved the build issues:,True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,28,https://github.com/ros2/rmw/pull/302#issuecomment-1074051943,Related to ros2/design#282 to add content-filtered-topic interfaces.,"CI is green, i will merge this into mainline.

#302 (comment)
#302 (comment)",True,{'THUMBS_UP': ['https://github.com/wjwwood']}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/ivanpauno,29,https://github.com/ros2/rmw/pull/302#issuecomment-1074080271,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@fujitatomoya are the other PRs ready as well?
e.g. ros2/rmw_connextdds#68 has some conflicts",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/ivanpauno,30,https://github.com/ros2/rmw/pull/302#issuecomment-1074081890,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@fujitatomoya are the other PRs ready as well?
e.g. ros2/rmw_connextdds#68 has some conflicts

Sorry, I see you merged ros2/rmw_connextdds#77 instead.",True,{'THUMBS_UP': ['https://github.com/fujitatomoya']}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,31,https://github.com/ros2/rmw/pull/302#issuecomment-1074082493,Related to ros2/design#282 to add content-filtered-topic interfaces.,"@ivanpauno we still have some unstable problems for ros2/rmw_connextdds#68, so we pushed stub version ros2/rmw_connextdds#77 to push the interfaces in the master.",True,{}
ros2/rmw,https://github.com/ros2/rmw,302,2021-02-25T02:00:58Z,2022-03-21T15:56:59Z,2022-03-21T16:04:19Z,MERGED,True,620,0,9,https://github.com/iuhilnehc-ynos,Add support for content filtered topics,14,[],https://github.com/ros2/rmw/pull/302,https://github.com/fujitatomoya,32,https://github.com/ros2/rmw/pull/302#issuecomment-1074083362,Related to ros2/design#282 to add content-filtered-topic interfaces.,"yeah, i will check the unstable reasons but i am not sure if we can fix it in today. (CC: @asorbini )",True,{}
ros2/rmw,https://github.com/ros2/rmw,303,2021-02-25T19:21:22Z,2021-02-25T19:32:39Z,2021-02-25T19:32:48Z,CLOSED,False,2,1,1,https://github.com/jacobperron,Fix CMake lint test failure,1,[],https://github.com/ros2/rmw/pull/303,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/303,"Line length should be <= 80 characters
Fixes https://build.ros2.org/view/Rdev/job/Rdev__rmw__ubuntu_focal_amd64/40/testReport","Line length should be <= 80 characters
Fixes https://build.ros2.org/view/Rdev/job/Rdev__rmw__ubuntu_focal_amd64/40/testReport",True,{}
ros2/rmw,https://github.com/ros2/rmw,303,2021-02-25T19:21:22Z,2021-02-25T19:32:39Z,2021-02-25T19:32:48Z,CLOSED,False,2,1,1,https://github.com/jacobperron,Fix CMake lint test failure,1,[],https://github.com/ros2/rmw/pull/303,https://github.com/cottsay,2,https://github.com/ros2/rmw/pull/303#issuecomment-786143085,"Line length should be <= 80 characters
Fixes https://build.ros2.org/view/Rdev/job/Rdev__rmw__ubuntu_focal_amd64/40/testReport","Hold on a moment - the limit should be 140 columns, not 80. Something's not working right.",True,{}
ros2/rmw,https://github.com/ros2/rmw,303,2021-02-25T19:21:22Z,2021-02-25T19:32:39Z,2021-02-25T19:32:48Z,CLOSED,False,2,1,1,https://github.com/jacobperron,Fix CMake lint test failure,1,[],https://github.com/ros2/rmw/pull/303,https://github.com/cottsay,3,https://github.com/ros2/rmw/pull/303#issuecomment-786146161,"Line length should be <= 80 characters
Fixes https://build.ros2.org/view/Rdev/job/Rdev__rmw__ubuntu_focal_amd64/40/testReport","The referenced job used ros-rolling-ament-cmake-lint-cmake-0.10.1-1focal.20210208.022417.
Version 0.10.2 was tagged and built on Feb 12, and the build was sync'd to main on Feb 19th.
It appears this build failure was just a race with the ament_lint fixes merged on Feb 12th.",True,{'THUMBS_UP': ['https://github.com/jacobperron']}
ros2/rmw,https://github.com/ros2/rmw,303,2021-02-25T19:21:22Z,2021-02-25T19:32:39Z,2021-02-25T19:32:48Z,CLOSED,False,2,1,1,https://github.com/jacobperron,Fix CMake lint test failure,1,[],https://github.com/ros2/rmw/pull/303,https://github.com/jacobperron,4,https://github.com/ros2/rmw/pull/303#issuecomment-786148577,"Line length should be <= 80 characters
Fixes https://build.ros2.org/view/Rdev/job/Rdev__rmw__ubuntu_focal_amd64/40/testReport","Yeah, you're right. I also had a stale workspace locally. Pulling the latest changes fixes the test failure for me. Sorry for the noise!",True,{'HOORAY': ['https://github.com/cottsay']}
ros2/rmw,https://github.com/ros2/rmw,305,2021-04-02T02:16:59Z,2021-04-02T03:31:56Z,2021-04-02T03:31:56Z,CLOSED,False,840,6,5,https://github.com/shonigmann,Updating Quality Declaration,2,[],https://github.com/ros2/rmw/pull/305,https://github.com/shonigmann,1,https://github.com/ros2/rmw/pull/305,"Updating obsolete links in the QUALITY_DECLARATION.md files, re: ros2/docs.ros2.org#52","Updating obsolete links in the QUALITY_DECLARATION.md files, re: ros2/docs.ros2.org#52",True,{}
ros2/rmw,https://github.com/ros2/rmw,305,2021-04-02T02:16:59Z,2021-04-02T03:31:56Z,2021-04-02T03:31:56Z,CLOSED,False,840,6,5,https://github.com/shonigmann,Updating Quality Declaration,2,[],https://github.com/ros2/rmw/pull/305,https://github.com/shonigmann,2,https://github.com/ros2/rmw/pull/305#issuecomment-812298208,"Updating obsolete links in the QUALITY_DECLARATION.md files, re: ros2/docs.ros2.org#52","apologies for the confusion on this... I was working on a script to automatically update quality declarations for each package that has them, and i seem to have found a bug on the pull requests... please ignore.",True,{}
ros2/rmw,https://github.com/ros2/rmw,306,2021-04-02T02:17:02Z,2021-04-02T06:16:55Z,2021-04-02T06:16:55Z,MERGED,True,6,6,1,https://github.com/shonigmann,Updating Quality Declaration,1,[],https://github.com/ros2/rmw/pull/306,https://github.com/shonigmann,1,https://github.com/ros2/rmw/pull/306,"Updating obsolete links in the QUALITY_DECLARATION.md files, re: ros2/docs.ros2.org#52","Updating obsolete links in the QUALITY_DECLARATION.md files, re: ros2/docs.ros2.org#52",True,{}
ros2/rmw,https://github.com/ros2/rmw,307,2021-04-02T03:45:48Z,2021-04-02T06:38:15Z,2021-04-02T06:38:15Z,MERGED,True,6,6,1,https://github.com/shonigmann,updating quality declaration links (re: ros2/docs.ros2.org#52),1,[],https://github.com/ros2/rmw/pull/307,https://github.com/shonigmann,1,https://github.com/ros2/rmw/pull/307,"Updating obsolete links in the QUALITY_DECLARATION.md files, re: ros2/docs.ros2.org#52
Signed-off-by: Simon Honigmann shonigmann@blueorigin.com","Updating obsolete links in the QUALITY_DECLARATION.md files, re: ros2/docs.ros2.org#52
Signed-off-by: Simon Honigmann shonigmann@blueorigin.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,308,2021-04-12T14:10:56Z,2021-04-13T19:23:52Z,2021-04-13T19:23:55Z,MERGED,True,11,0,1,https://github.com/ivanpauno,Document which QoS policies are correctly read by rmw_get_publishers/subscriptions_info_by_topic,6,['enhancement'],https://github.com/ros2/rmw/pull/308,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/308,Based on ros2/rclcpp#1626 (comment).,Based on ros2/rclcpp#1626 (comment).,True,{}
ros2/rmw,https://github.com/ros2/rmw,308,2021-04-12T14:10:56Z,2021-04-13T19:23:52Z,2021-04-13T19:23:55Z,MERGED,True,11,0,1,https://github.com/ivanpauno,Document which QoS policies are correctly read by rmw_get_publishers/subscriptions_info_by_topic,6,['enhancement'],https://github.com/ros2/rmw/pull/308,https://github.com/ivanpauno,2,https://github.com/ros2/rmw/pull/308#issuecomment-818133554,Based on ros2/rclcpp#1626 (comment).,"LGTM
I guess some RMW implementations should probably be updated to match this documentation. In that case, this may be considered an API change and perhaps we should hold until after we branch for Galactic.

The rmw implementations already match this behavior, so this is only documentation.
I don't remember if they set the policies that are not updated to RMW_QOS_POLICY_*_UNKNOWN, so I can delete that line of the docs.
But I think they should be doing that, if not it's hard/impossible to understand the output.",True,{}
ros2/rmw,https://github.com/ros2/rmw,308,2021-04-12T14:10:56Z,2021-04-13T19:23:52Z,2021-04-13T19:23:55Z,MERGED,True,11,0,1,https://github.com/ivanpauno,Document which QoS policies are correctly read by rmw_get_publishers/subscriptions_info_by_topic,6,['enhancement'],https://github.com/ros2/rmw/pull/308,https://github.com/ivanpauno,3,https://github.com/ros2/rmw/pull/308#issuecomment-818758480,Based on ros2/rclcpp#1626 (comment).,"I don't remember if they set the policies that are not updated to RMW_QOS_POLICY_*_UNKNOWN, so I can delete that line of the docs.
But I think they should be doing that, if not it's hard/impossible to understand the output.

Fastrtps was already doing that https://github.com/ros2/rmw_fastrtps/blob/7bb3563bebd20c3cae03231c2e321bf132651449/rmw_fastrtps_shared_cpp/include/rmw_fastrtps_shared_cpp/custom_participant_info.hpp#L149.
Cyclonedds shares through discovery all qos policies.
I send a patch to connextdds to fix this ros2/rmw_connextdds#28.",True,{}
ros2/rmw,https://github.com/ros2/rmw,308,2021-04-12T14:10:56Z,2021-04-13T19:23:52Z,2021-04-13T19:23:55Z,MERGED,True,11,0,1,https://github.com/ivanpauno,Document which QoS policies are correctly read by rmw_get_publishers/subscriptions_info_by_topic,6,['enhancement'],https://github.com/ros2/rmw/pull/308,https://github.com/ivanpauno,4,https://github.com/ros2/rmw/pull/308#issuecomment-818994302,Based on ros2/rclcpp#1626 (comment).,"PR checker is happy, this a docs only PR so no need of more CI.",True,{}
ros2/rmw,https://github.com/ros2/rmw,310,2021-07-14T23:30:49Z,2021-07-15T12:19:38Z,2021-07-15T12:25:49Z,MERGED,True,1,1,1,https://github.com/christophebedard,Fix copy-paste error in API doc for rmw_get_gid_for_publisher,1,[],https://github.com/ros2/rmw/pull/310,https://github.com/christophebedard,1,https://github.com/ros2/rmw/pull/310,"Simple fix!
Signed-off-by: Christophe Bedard bedard.christophe@gmail.com","Simple fix!
Signed-off-by: Christophe Bedard bedard.christophe@gmail.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,310,2021-07-14T23:30:49Z,2021-07-15T12:19:38Z,2021-07-15T12:25:49Z,MERGED,True,1,1,1,https://github.com/christophebedard,Fix copy-paste error in API doc for rmw_get_gid_for_publisher,1,[],https://github.com/ros2/rmw/pull/310,https://github.com/clalancette,2,https://github.com/ros2/rmw/pull/310#issuecomment-880648422,"Simple fix!
Signed-off-by: Christophe Bedard bedard.christophe@gmail.com","Merging with just an Rpr check, as this is documentation only.",True,{}
ros2/rmw,https://github.com/ros2/rmw,311,2021-08-10T19:43:15Z,2021-08-19T14:22:12Z,2021-09-20T20:52:43Z,MERGED,True,75,40,11,https://github.com/clalancette,Fix up errors in doxygen documentation.,2,[],https://github.com/ros2/rmw/pull/311,https://github.com/clalancette,1,https://github.com/ros2/rmw/pull/311,"While running the rosdoc2 tool against this repository, I
came across these documentation errors.  This PR fixes them
all up so that doxygen runs clean.  We still can't successfully
run rosdoc2 on this package due to one other error, but at
least this will get us ready once we figure that issue out.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","While running the rosdoc2 tool against this repository, I
came across these documentation errors.  This PR fixes them
all up so that doxygen runs clean.  We still can't successfully
run rosdoc2 on this package due to one other error, but at
least this will get us ready once we figure that issue out.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org",True,{}
ros2/rmw,https://github.com/ros2/rmw,311,2021-08-10T19:43:15Z,2021-08-19T14:22:12Z,2021-09-20T20:52:43Z,MERGED,True,75,40,11,https://github.com/clalancette,Fix up errors in doxygen documentation.,2,[],https://github.com/ros2/rmw/pull/311,https://github.com/clalancette,2,https://github.com/ros2/rmw/pull/311#issuecomment-897081448,"While running the rosdoc2 tool against this repository, I
came across these documentation errors.  This PR fixes them
all up so that doxygen runs clean.  We still can't successfully
run rosdoc2 on this package due to one other error, but at
least this will get us ready once we figure that issue out.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","I don't feel strongly about [inout] vs [in,out], but I think we use [inout] elsewhere like in rclcpp.

Yeah, that's true.  I was following that pattern here, though @aprotyas is correct about Doxygen suggesting [in,out].  Is it better to be consistent with our style elsewhere, or correct in terms of the Doxygen documentation?  I'm not sure.  My inclination is to be consistent, and leave this as [inout].  Maybe in the future we can do a pass where we update all of them (but I also don't feel strongly about this point).",True,{'THUMBS_UP': ['https://github.com/aprotyas']}
ros2/rmw,https://github.com/ros2/rmw,311,2021-08-10T19:43:15Z,2021-08-19T14:22:12Z,2021-09-20T20:52:43Z,MERGED,True,75,40,11,https://github.com/clalancette,Fix up errors in doxygen documentation.,2,[],https://github.com/ros2/rmw/pull/311,https://github.com/wjwwood,3,https://github.com/ros2/rmw/pull/311#issuecomment-897095042,"While running the rosdoc2 tool against this repository, I
came across these documentation errors.  This PR fixes them
all up so that doxygen runs clean.  We still can't successfully
run rosdoc2 on this package due to one other error, but at
least this will get us ready once we figure that issue out.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","Yeah, I don't mind about the inout thing. I would say just leave it inout for consistency.",True,{}
ros2/rmw,https://github.com/ros2/rmw,311,2021-08-10T19:43:15Z,2021-08-19T14:22:12Z,2021-09-20T20:52:43Z,MERGED,True,75,40,11,https://github.com/clalancette,Fix up errors in doxygen documentation.,2,[],https://github.com/ros2/rmw/pull/311,https://github.com/clalancette,4,https://github.com/ros2/rmw/pull/311#issuecomment-901958342,"While running the rosdoc2 tool against this repository, I
came across these documentation errors.  This PR fixes them
all up so that doxygen runs clean.  We still can't successfully
run rosdoc2 on this package due to one other error, but at
least this will get us ready once we figure that issue out.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","I believe the conversation in #311 (comment) is wrapped up (with further work to come, but in a different PR).
With that said, this now has approvals.  It also has green PR job.  I'm going to skip CI since this is a documentation change only.  Thanks for the reviews!",True,{}
ros2/rmw,https://github.com/ros2/rmw,311,2021-08-10T19:43:15Z,2021-08-19T14:22:12Z,2021-09-20T20:52:43Z,MERGED,True,75,40,11,https://github.com/clalancette,Fix up errors in doxygen documentation.,2,[],https://github.com/ros2/rmw/pull/311,https://github.com/ros-discourse,5,https://github.com/ros2/rmw/pull/311#issuecomment-904204326,"While running the rosdoc2 tool against this repository, I
came across these documentation errors.  This PR fixes them
all up so that doxygen runs clean.  We still can't successfully
run rosdoc2 on this package due to one other error, but at
least this will get us ready once we figure that issue out.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-08-19/22008/1",True,{}
ros2/rmw,https://github.com/ros2/rmw,311,2021-08-10T19:43:15Z,2021-08-19T14:22:12Z,2021-09-20T20:52:43Z,MERGED,True,75,40,11,https://github.com/clalancette,Fix up errors in doxygen documentation.,2,[],https://github.com/ros2/rmw/pull/311,https://github.com/ros-discourse,6,https://github.com/ros2/rmw/pull/311#issuecomment-923292524,"While running the rosdoc2 tool against this repository, I
came across these documentation errors.  This PR fixes them
all up so that doxygen runs clean.  We still can't successfully
run rosdoc2 on this package due to one other error, but at
least this will get us ready once we figure that issue out.
Signed-off-by: Chris Lalancette clalancette@openrobotics.org","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-9-16/22372/1",True,{}
ros2/rmw,https://github.com/ros2/rmw,313,2021-09-07T16:53:56Z,2021-09-14T19:42:59Z,2021-09-20T20:52:43Z,MERGED,True,94,96,27,https://github.com/hidmic,Fix up documentation build for rmw when using rosdoc2,7,['documentation'],https://github.com/ros2/rmw/pull/313,https://github.com/hidmic,1,https://github.com/ros2/rmw/pull/313,"Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.","Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.",True,{}
ros2/rmw,https://github.com/ros2/rmw,313,2021-09-07T16:53:56Z,2021-09-14T19:42:59Z,2021-09-20T20:52:43Z,MERGED,True,94,96,27,https://github.com/hidmic,Fix up documentation build for rmw when using rosdoc2,7,['documentation'],https://github.com/ros2/rmw/pull/313,https://github.com/hidmic,2,https://github.com/ros2/rmw/pull/313#issuecomment-914481069,"Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.","Full CI!

Linux 
Linux-aarch64 
macOS 
Windows 

Argh, build issues in rmw_connextdds_cpp...",True,{}
ros2/rmw,https://github.com/ros2/rmw,313,2021-09-07T16:53:56Z,2021-09-14T19:42:59Z,2021-09-20T20:52:43Z,MERGED,True,94,96,27,https://github.com/hidmic,Fix up documentation build for rmw when using rosdoc2,7,['documentation'],https://github.com/ros2/rmw/pull/313,https://github.com/hidmic,3,https://github.com/ros2/rmw/pull/313#issuecomment-915469611,"Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.","Alright, it wasn't just rmw_connextdds_cpp.
Re-running full CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,313,2021-09-07T16:53:56Z,2021-09-14T19:42:59Z,2021-09-20T20:52:43Z,MERGED,True,94,96,27,https://github.com/hidmic,Fix up documentation build for rmw when using rosdoc2,7,['documentation'],https://github.com/ros2/rmw/pull/313,https://github.com/ivanpauno,4,https://github.com/ros2/rmw/pull/313#issuecomment-915488551,"Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.","De-duplicates some declarations.

Is there a way to make doxygen ignore that instead of renaming *_t to *_s.
I don't mind much, but it seems a bit unnecessary to break API that way.
Though, I think we're never using struct *_t in code and always *_t directly.",True,{}
ros2/rmw,https://github.com/ros2/rmw,313,2021-09-07T16:53:56Z,2021-09-14T19:42:59Z,2021-09-20T20:52:43Z,MERGED,True,94,96,27,https://github.com/hidmic,Fix up documentation build for rmw when using rosdoc2,7,['documentation'],https://github.com/ros2/rmw/pull/313,https://github.com/hidmic,5,https://github.com/ros2/rmw/pull/313#issuecomment-915493518,"Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.","Is there a way to make doxygen ignore that instead of renaming *_t to *_s.

I followed ros2/rcutils#333 precedent here, but perhaps \cond based suppression of typedefs is possible e.g.:
/// \cond flag
typedef
/// \endcond
struct type_name_t {

}
/// \cond flag
type_name_t
/// \endcond
;
Though I do find duplicate type definitions awkward albeit legal.

Though, I think we're never using struct *_t in code and always *_t directly.

Well, I've found some cases. Specially in rcl. Definitely not a policy. More like an easter egg I'd say.",True,{}
ros2/rmw,https://github.com/ros2/rmw,313,2021-09-07T16:53:56Z,2021-09-14T19:42:59Z,2021-09-20T20:52:43Z,MERGED,True,94,96,27,https://github.com/hidmic,Fix up documentation build for rmw when using rosdoc2,7,['documentation'],https://github.com/ros2/rmw/pull/313,https://github.com/ivanpauno,6,https://github.com/ros2/rmw/pull/313#issuecomment-915503123,"Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.","I followed ros2/rcutils#333 precedent here, but perhaps \cond based suppression of typedefs is possible e.g.:

That seems to be enough precedent, we will have to bump the major number next release.",True,{}
ros2/rmw,https://github.com/ros2/rmw,313,2021-09-07T16:53:56Z,2021-09-14T19:42:59Z,2021-09-20T20:52:43Z,MERGED,True,94,96,27,https://github.com/hidmic,Fix up documentation build for rmw when using rosdoc2,7,['documentation'],https://github.com/ros2/rmw/pull/313,https://github.com/hidmic,7,https://github.com/ros2/rmw/pull/313#issuecomment-919214141,"Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.","Re-running full CI:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,313,2021-09-07T16:53:56Z,2021-09-14T19:42:59Z,2021-09-20T20:52:43Z,MERGED,True,94,96,27,https://github.com/hidmic,Fix up documentation build for rmw when using rosdoc2,7,['documentation'],https://github.com/ros2/rmw/pull/313,https://github.com/hidmic,8,https://github.com/ros2/rmw/pull/313#issuecomment-919456539,"Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.","Alright, all green !",True,{}
ros2/rmw,https://github.com/ros2/rmw,313,2021-09-07T16:53:56Z,2021-09-14T19:42:59Z,2021-09-20T20:52:43Z,MERGED,True,94,96,27,https://github.com/hidmic,Fix up documentation build for rmw when using rosdoc2,7,['documentation'],https://github.com/ros2/rmw/pull/313,https://github.com/ros-discourse,9,https://github.com/ros2/rmw/pull/313#issuecomment-923292539,"Precisely what the title says. This patch:

Substitutes trailing [] tokens for leading * tokens for pointer argument types.
Normalizes type naming to preclude duplication warnings.
Handles RCUTILS_DEPRECATED_WITH_MSG() macros
Handles RMW_PUBLIC_TYPE macros.
De-duplicates some declarations.","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-9-16/22372/1",True,{}
ros2/rmw,https://github.com/ros2/rmw,314,2021-09-24T16:42:19Z,2021-11-19T20:21:42Z,2021-11-19T20:24:50Z,MERGED,True,152,0,1,https://github.com/mauropasse,Add client/service QoS getters,2,[],https://github.com/ros2/rmw/pull/314,https://github.com/mauropasse,1,https://github.com/ros2/rmw/pull/314,"Blocked by:
ros2/rmw_fastrtps#560
ros2/rmw_implementation#196
Signed-off-by: Mauro Passerino mpasserino@irobot.com","Blocked by:
ros2/rmw_fastrtps#560
ros2/rmw_implementation#196
Signed-off-by: Mauro Passerino mpasserino@irobot.com",True,{}
ros2/rmw,https://github.com/ros2/rmw,314,2021-09-24T16:42:19Z,2021-11-19T20:21:42Z,2021-11-19T20:24:50Z,MERGED,True,152,0,1,https://github.com/mauropasse,Add client/service QoS getters,2,[],https://github.com/ros2/rmw/pull/314,https://github.com/mauropasse,2,https://github.com/ros2/rmw/pull/314#issuecomment-956303842,"Blocked by:
ros2/rmw_fastrtps#560
ros2/rmw_implementation#196
Signed-off-by: Mauro Passerino mpasserino@irobot.com",After some discussion (see ros2/rmw_connextdds#67 (comment)) I updated all PRs to retrieve independently the QoS for Client request publisher / response subscription and Services request subscription / response publisher.,True,{}
ros2/rmw,https://github.com/ros2/rmw,314,2021-09-24T16:42:19Z,2021-11-19T20:21:42Z,2021-11-19T20:24:50Z,MERGED,True,152,0,1,https://github.com/mauropasse,Add client/service QoS getters,2,[],https://github.com/ros2/rmw/pull/314,https://github.com/ivanpauno,3,https://github.com/ros2/rmw/pull/314#issuecomment-956437683,"Blocked by:
ros2/rmw_fastrtps#560
ros2/rmw_implementation#196
Signed-off-by: Mauro Passerino mpasserino@irobot.com","@wjwwood do you have any thoughts on the proposed API?
See discussion here.",True,{}
ros2/rmw,https://github.com/ros2/rmw,314,2021-09-24T16:42:19Z,2021-11-19T20:21:42Z,2021-11-19T20:24:50Z,MERGED,True,152,0,1,https://github.com/mauropasse,Add client/service QoS getters,2,[],https://github.com/ros2/rmw/pull/314,https://github.com/ivanpauno,4,https://github.com/ros2/rmw/pull/314#issuecomment-973237633,"Blocked by:
ros2/rmw_fastrtps#560
ros2/rmw_implementation#196
Signed-off-by: Mauro Passerino mpasserino@irobot.com","I have already discussed this with other members of the ROS 2 team and the proposed API looks fine.
I will work on getting it merged tomorrow.",True,{'HOORAY': ['https://github.com/mauropasse']}
ros2/rmw,https://github.com/ros2/rmw,314,2021-09-24T16:42:19Z,2021-11-19T20:21:42Z,2021-11-19T20:24:50Z,MERGED,True,152,0,1,https://github.com/mauropasse,Add client/service QoS getters,2,[],https://github.com/ros2/rmw/pull/314,https://github.com/ivanpauno,5,https://github.com/ros2/rmw/pull/314#issuecomment-974420318,"Blocked by:
ros2/rmw_fastrtps#560
ros2/rmw_implementation#196
Signed-off-by: Mauro Passerino mpasserino@irobot.com",CI ros2/rmw_implementation#196 (comment),True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/audrow,1,https://github.com/ros2/rmw/pull/315,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.",True,{'THUMBS_UP': ['https://github.com/JaimeMartin']}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/audrow,2,https://github.com/ros2/rmw/pull/315#issuecomment-981972657,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","Linux 
Linux-aarch64 
macOS 
Windows 
Windows Debug 
Linux clang",True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/emersonknapp,3,https://github.com/ros2/rmw/pull/315#issuecomment-982042839,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","EDIT: def not related - sorry for the noise
Is this change related at all to ros2/ci#601 issue? The Windows CI started failing, and the other activity I see there is related to this. Not sure if that's just a coincidence though",True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/emersonknapp,4,https://github.com/ros2/rmw/pull/315#issuecomment-982151563,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","@audrow if you're overriding builds when making newer changes, might make sense to cancel the older ones still running in the queue/runners (unless their results are still relevant). There's a pretty big backup right now since a full windows build takes 3+ hrs, it's hard to tell from this context here if all the builds are needed.",True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/audrow,5,https://github.com/ros2/rmw/pull/315#issuecomment-982162220,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","@audrow if you're overriding builds when making newer changes, might make sense to cancel the older ones still running in the queue/runners (unless their results are still relevant). There's a pretty big backup right now since a full windows build takes 3+ hrs, it's hard to tell from this context here if all the builds are needed.

@emersonknapp, it's a good suggestion. I don't think I've left any jobs running. I restarted the Windows jobs, since the previous runs already failed and it looks like it was a connectivity issue.",True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/emersonknapp,6,https://github.com/ros2/rmw/pull/315#issuecomment-982166471,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","EDIT: sorry I was slightly misreading the situation, please ignore the noise i am making today",True,"{'THUMBS_UP': ['https://github.com/audrow'], 'LAUGH': ['https://github.com/audrow']}"
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/ros-discourse,7,https://github.com/ros2/rmw/pull/315#issuecomment-998317286,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-12-16-2021/23541/1",True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/audrow,8,https://github.com/ros2/rmw/pull/315#issuecomment-1002867908,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","Here's another run:

Linux 
Linux-aarch64 
macOS 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/audrow,9,https://github.com/ros2/rmw/pull/315#issuecomment-1013515226,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","Linux 
Linux-aarch64 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/MiguelCompany,10,https://github.com/ros2/rmw/pull/315#issuecomment-1018426302,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.",@audrow I just checked locally that merging eProsima/Fast-DDS#2358 fixes the crash on Windows when the tests of tf2_ros_py exit.,True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/MiguelCompany,11,https://github.com/ros2/rmw/pull/315#issuecomment-1018439744,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","@audrow eProsima/Fast-DDS#2358 has just been merged. Please run CI again, thank you",True,"{'HOORAY': ['https://github.com/audrow'], 'THUMBS_UP': ['https://github.com/audrow']}"
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/clalancette,12,https://github.com/ros2/rmw/pull/315#issuecomment-1018505453,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","Another try at CI:

Linux 
Linux-aarch64 
Windows",True,"{'HOORAY': ['https://github.com/audrow', 'https://github.com/MiguelCompany', 'https://github.com/clalancette']}"
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/clalancette,13,https://github.com/ros2/rmw/pull/315#issuecomment-1018855230,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","@MiguelCompany It works!  Thanks for the fix.
Here's a few more jobs now to see where we are at:

Windows Debug 

Rerun 


Linux Clang 
RHEL 
Linux packaging",True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/ros-discourse,14,https://github.com/ros2/rmw/pull/315#issuecomment-1020699700,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","This pull request has been mentioned on ROS Discourse. There might be relevant details there:
https://discourse.ros.org/t/ros-2-tsc-meeting-january-20th-2022/23986/1",True,{}
ros2/rmw,https://github.com/ros2/rmw,315,2021-11-29T19:54:29Z,2022-01-25T13:22:15Z,2022-01-25T13:22:44Z,MERGED,True,2,2,1,https://github.com/audrow,Use FastDDS Sync as default DDS,1,[],https://github.com/ros2/rmw/pull/315,https://github.com/clalancette,15,https://github.com/ros2/rmw/pull/315#issuecomment-1021177813,"Switching the default DDS to FastDDS Sync after the Technical Steering Committee's recent vote  (results). You can find the full meeting minutes here: https://discourse.ros.org/t/ros-2-tsc-meeting-minutes-2021-11-18/23209.
This PR relies on ros2/rmw_fastrtps#571.
FYI @JaimeMartin and @MiguelCompany.","All right, with CI mostly green (RHEL is a known problem, and Windows Debug looks a bit flaky), I think we are good to merge this.  I'm going to do that and also merge in ros2/rmw_fastrtps#571 at the same time.",True,{}
ros2/rmw,https://github.com/ros2/rmw,316,2022-02-04T15:05:53Z,2022-02-07T21:47:11Z,2022-02-07T21:47:14Z,MERGED,True,4,4,1,https://github.com/ivanpauno,Document that rmw_wait() SHOULD use a monotonic clock,2,['enhancement'],https://github.com/ros2/rmw/pull/316,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/316,Update based on ros2/ros2#1080 discussion.,Update based on ros2/ros2#1080 discussion.,True,{}
ros2/rmw,https://github.com/ros2/rmw,317,2022-02-04T21:55:40Z,2022-02-07T17:49:31Z,2022-02-07T17:49:34Z,MERGED,True,7,3,1,https://github.com/sloretz,Install headers to include/${PROJECT_NAME},1,[],https://github.com/ros2/rmw/pull/317,https://github.com/sloretz,1,https://github.com/ros2/rmw/pull/317,Part of ros2/ros2#1150 - this installs headers to a unique directory in a merged workspace.,Part of ros2/ros2#1150 - this installs headers to a unique directory in a merged workspace.,True,{}
ros2/rmw,https://github.com/ros2/rmw,317,2022-02-04T21:55:40Z,2022-02-07T17:49:31Z,2022-02-07T17:49:34Z,MERGED,True,7,3,1,https://github.com/sloretz,Install headers to include/${PROJECT_NAME},1,[],https://github.com/ros2/rmw/pull/317,https://github.com/sloretz,2,https://github.com/ros2/rmw/pull/317#issuecomment-1030381561,Part of ros2/ros2#1150 - this installs headers to a unique directory in a merged workspace.,"CI (build: --packages-above-and-dependencies rmw test: --packages-select rmw)

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,1,https://github.com/ros2/rmw/pull/318,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/christophebedard,2,https://github.com/ros2/rmw/pull/318#issuecomment-1058397238,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","Do we need to add both? Is only having the publication sequence number enough?


What's the intended use-case?
I've used source_timestamp as a kind of unique message ID. Obviously, I could get collisions if two publishers publish at the same exact time on the same exact topic (from different machines, or even the same process/node). Getting source_timestamps does require collecting it from the DDS implementation on the publisher side, since it's not provided to rmw, so publication_sequence_numbers at the rmw level could replace this.
Could we have collisions with (publication) sequence numbers? How are they generated, and what are the guarantees? Since it's not a standard DDS feature, and since rmw is not DDS-only(™️), rmw probably needs to have its own definition or requirements for these sequence numbers. Also, do reception sequence numbers provide anything that publication sequences numbers do not provide? Maybe I'm not thinking of the right use-case.",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,3,https://github.com/ros2/rmw/pull/318#issuecomment-1058411778,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","Could we have collisions with (publication) sequence numbers?

Yes, each publisher will use unique sequence numbers, but sample of different publishes may use the same.
You can disambiguate with the publisher gid though (which is available in the sample info struct).
After a long long time, the sequence number may wrap around IIUC.

Getting source_timestamps does require collecting it from the DDS implementation on the publisher side, since it's not provided to rmw

I think that's already part of the message info struct, though IIRC it's not being filled by all the DDS vendors.

do reception sequence numbers provide anything that publication sequences numbers do not provide?

I think they don't provide much extra info, but I'm not sure.

What's the intended use-case?

IIUC, the idea is to use this to collect statistics (which messages were lost, etc).
@wjwwood can probably expand more.
There's also the sample lost status and sample rejected status in DDS, that can be used for this. We already have bindings for the first one (this).
The sequence numbers might be more insightful to make statistics than those statuses, but I think that having only the publication sequence number should be enough.

How are they generated, and what are the guarantees?

This is a good question, because I actually don't know if the ""publication_sequence_number"" provided by FastDDS has the same guarantees that the one provided by Connext.
Based on some basic testing, they seem to be the same thing.",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/christophebedard,4,https://github.com/ros2/rmw/pull/318#issuecomment-1058709146,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","Yes, each publisher will use unique sequence numbers, but sample of different publishes may use the same. You can disambiguate with the publisher gid though (which is available in the sample info struct)

Oh right, that's a great point.

I think that's already part of the message info struct, though IIRC it's not being filled by all the DDS vendors.

Unless I'm mistaken, I don't think the source timestamp is made available to ROS 2 (rmw and up) on the publisher side (there is no ""message info"" when publishing a message). The source timestamp is generated inside the DDS implementation right before writing/sending a message. However, it is indeed available on the receiver side.

IIUC, the idea is to use this to collect statistics (which messages were lost, etc). @wjwwood can probably expand more.
There's also the sample lost status and sample rejected status in DDS, that can be used for this. We already have bindings for the first one (this). The sequence numbers might be more insightful to make statistics than those statuses, but I think that having only the publication sequence number should be enough.

This makes sense! It's similar to what I'm doing.

This is a good question, because I actually don't know if the ""publication_sequence_number"" provided by FastDDS has the same guarantees that the one provided by Connext. Based on some basic testing, they seem to be the same thing.

I'm wondering what downstream users of rmw can expect, i.e., if this is part of the interface/abstraction, or if the behaviour is always going to come down to the middleware implementation.",True,{'THUMBS_UP': ['https://github.com/ivanpauno']}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,5,https://github.com/ros2/rmw/pull/318#issuecomment-1059193540,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","Unless I'm mistaken, I don't think the source timestamp is made available to ROS 2 (rmw and up) on the publisher side

Ah yes, it's only available in the subscription side at the moment (and supported only by some rmw implementations).",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,6,https://github.com/ros2/rmw/pull/318#issuecomment-1059324212,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","I'm wondering what downstream users of rmw can expect, i.e., if this is part of the interface/abstraction, or if the behaviour is always going to come down to the middleware implementation.

IMO, the requisites should be:

Publication sequence numbers should monotonically increase for the same publisher.
i.e. if a take() operation 1 happened before take() operation 2 and the publisher gid is the same, then sn1 < sn2.
exception: it can wrap around at some point
(sn2 - sn1 - 1) = NMessagesLost, where sn1 and sn2 are the publication sequence numbers of two consecutive take() operations that received messages from the same publisher (i.e. also same publisher_gid).

I think it's reasonable to always expect that from any rmw implementation that support sequence numbers, so we can maybe add that to the docs.
@wjwwood what do you think?
Similarly for the reception sequence number, it should be a monotonically increasing number, contiguous take() operations differ always by 1.",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,7,https://github.com/ros2/rmw/pull/318#issuecomment-1059337756,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","Do we need a method to check if this feature is supported separate from the max value? I'm just thinking that it might be useful for a tool to know if this is supported before receiving a message (or even creating a publisher/subscription).

That sounds okay to me.
What's the best API for this?
I think that maybe
bool rmw_message_info_publication_sequence_number_supported(void);
bool rmw_message_info_subscription_sequence_number_supported(void);
can easily become too verbose if we start adding similar functions for other features (e.g. is source_timestamp supported?),
Maybe:
bool rmw_feature_supported(rmw_feature_t feature_v);

typedef enum rmw_feature_e {
  RMW_FEATURE_MESSAGE_INFO_PUBLICATION_SEQUENCE_NUMBER,
  ...
} rmw_feature_t;
is a better idea.",True,"{'THUMBS_UP': ['https://github.com/christophebedard', 'https://github.com/wjwwood']}"
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,8,https://github.com/ros2/rmw/pull/318#issuecomment-1059382380,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","I'm wondering what downstream users of rmw can expect, i.e., if this is part of the interface/abstraction, or if the behaviour is always going to come down to the middleware implementation.

I have listed some requirements of what clients can expect in 7810f90.
Maybe I have specified more than needed or we want to add extra requirements.
Please feel free to suggest improvements to my wording as well!",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/wjwwood,9,https://github.com/ros2/rmw/pull/318#issuecomment-1061316901,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).",The rmw_feature_supported() route sounds good to me.,True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/vmayoral,10,https://github.com/ros2/rmw/pull/318#issuecomment-1061844345,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).",Pinging @eboasson in here. This seems a rather promissing feature in rmw and It'd be awesome for CycloneDDS to consider adding capabilities to support it fully.,True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,11,https://github.com/ros2/rmw/pull/318#issuecomment-1064415140,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","This PR and ros2/rmw_fastrtps#587 are ready, I still need to update ros2/rmw_connextdds#74 and create a PR in rmw_cyclonedds.",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,12,https://github.com/ros2/rmw/pull/318#issuecomment-1071230792,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","Linux 
Linux-aarch64 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,13,https://github.com/ros2/rmw/pull/318#issuecomment-1071372706,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","Linux 
Linux-aarch64 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/wjwwood,14,https://github.com/ros2/rmw/pull/318#issuecomment-1071459329,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","@ivanpauno you might want to update the content of the issue description (now that we've iterated a bit) and link to all the related prs, rather than relying on cross-references from github.",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,15,https://github.com/ros2/rmw/pull/318#issuecomment-1071483553,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","GID (Global Identifier): what we use now, where global means per process, but could mean in the ROS graph
GUID (Globally Unique Identifier): means the same as GID except each is unique and should never be reused withing the scope of ""global""
UUID (universally unique identifier): unique in the literal universe, within statistical bounds, which is what the general purpose uuid's are used for CS and usually require as ""good"" as is possible random numbers

I think that the idea of the gid was always for it to be global and unique.
And with global, I mean all the processes involved would see the same ids.
AFAIU, UUID/GUID are the same thing (though the term UUID is typically used to refer to a particular standard).",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,16,https://github.com/ros2/rmw/pull/318#issuecomment-1071499224,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).",Windows,True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,17,https://github.com/ros2/rmw/pull/318#issuecomment-1072448804,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","@ivanpauno you might want to update the content of the issue description (now that we've iterated a bit) and link to all the related prs, rather than relying on cross-references from github.

Done",True,{}
ros2/rmw,https://github.com/ros2/rmw,318,2022-03-03T16:57:21Z,2022-03-21T13:23:09Z,2022-03-21T13:23:11Z,MERGED,True,142,1,3,https://github.com/ivanpauno,Add sequence numbers to message info structure,23,['enhancement'],https://github.com/ros2/rmw/pull/318,https://github.com/ivanpauno,18,https://github.com/ros2/rmw/pull/318#issuecomment-1073890195,"Add publication/reception sequence numbers to rmw_message_info_t.
Add rmw_feature_supported() function, to query if the rmw implementation being used supports a feature.

Related PRs:

ros2/rmw_implementation#204
ros2/rmw_fastrtps#587
ros2/rmw_connextdds#74
ros2/rmw_cyclonedds#381


This information is not provided by all DDS vendors.
Both sequence numbers are an extension, and not specified by the DDS standard AFAIU.
Connext provides both numbers, see publication_sequence_number and reception_sequence_number here.
FastDDS provides the publication_sequence_number, but not the reception_sequence_number.
See here and here (docs aren't super clear, but based on some testing that's the publication sequence number).
CycloneDDS doesn't seem to provide any of both (see here).","All PRs were approved and CI is passing, going in!",True,"{'ROCKET': ['https://github.com/christophebedard', 'https://github.com/jacobperron']}"
ros2/rmw,https://github.com/ros2/rmw,319,2022-04-08T19:07:57Z,2022-04-20T18:40:57Z,2022-04-20T18:40:57Z,CLOSED,False,112,0,1,https://github.com/jacobperron,Add functions to get a compatible QoS profiles,4,[],https://github.com/ros2/rmw/pull/319,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/319,"Connects to #304
Given one or more publisher (subscription) QoS profiles, modify the given subscription (publisher) QoS profile such that it is compatible with most of the publisher (subscription) profiles.
Do this while not sacrificing the level of service when possible.
This API is ultimately intended to be leveraged by ROS tools that typically want to be flexible with respect to the QoS when subscribing or publishing to a topic.

Opening for early feedback about the API. There is a reference implementation for one of the functions in ros2/rmw_dds_common#59
My next step is to add rcl functions that query the ROS graph to collect QoS info and then use this API to return the most compatible QoS profile, e.g.
rcl_ret_t rcl_get_compatible_subscription_qos_from_topic(
  const rcl_node_t * node,
  const char * topic_name,
  rmw_qos_profile_t * subscription_qos_profile
)
I'm leaning towards putting the endpoint query logic in rcl, since it can be implemented in an RMW-agnostic way (using the API proposed in this PR). However, we could also consider doing all of that logic in RMW in case the RMW implementation can do something more efficient 🤷","Connects to #304
Given one or more publisher (subscription) QoS profiles, modify the given subscription (publisher) QoS profile such that it is compatible with most of the publisher (subscription) profiles.
Do this while not sacrificing the level of service when possible.
This API is ultimately intended to be leveraged by ROS tools that typically want to be flexible with respect to the QoS when subscribing or publishing to a topic.

Opening for early feedback about the API. There is a reference implementation for one of the functions in ros2/rmw_dds_common#59
My next step is to add rcl functions that query the ROS graph to collect QoS info and then use this API to return the most compatible QoS profile, e.g.
rcl_ret_t rcl_get_compatible_subscription_qos_from_topic(
  const rcl_node_t * node,
  const char * topic_name,
  rmw_qos_profile_t * subscription_qos_profile
)
I'm leaning towards putting the endpoint query logic in rcl, since it can be implemented in an RMW-agnostic way (using the API proposed in this PR). However, we could also consider doing all of that logic in RMW in case the RMW implementation can do something more efficient 🤷",True,{}
ros2/rmw,https://github.com/ros2/rmw,319,2022-04-08T19:07:57Z,2022-04-20T18:40:57Z,2022-04-20T18:40:57Z,CLOSED,False,112,0,1,https://github.com/jacobperron,Add functions to get a compatible QoS profiles,4,[],https://github.com/ros2/rmw/pull/319,https://github.com/jacobperron,2,https://github.com/ros2/rmw/pull/319#issuecomment-1093528889,"Connects to #304
Given one or more publisher (subscription) QoS profiles, modify the given subscription (publisher) QoS profile such that it is compatible with most of the publisher (subscription) profiles.
Do this while not sacrificing the level of service when possible.
This API is ultimately intended to be leveraged by ROS tools that typically want to be flexible with respect to the QoS when subscribing or publishing to a topic.

Opening for early feedback about the API. There is a reference implementation for one of the functions in ros2/rmw_dds_common#59
My next step is to add rcl functions that query the ROS graph to collect QoS info and then use this API to return the most compatible QoS profile, e.g.
rcl_ret_t rcl_get_compatible_subscription_qos_from_topic(
  const rcl_node_t * node,
  const char * topic_name,
  rmw_qos_profile_t * subscription_qos_profile
)
I'm leaning towards putting the endpoint query logic in rcl, since it can be implemented in an RMW-agnostic way (using the API proposed in this PR). However, we could also consider doing all of that logic in RMW in case the RMW implementation can do something more efficient 🤷",Here's a WIP PR for rcl: ros2/rcl#976,True,{}
ros2/rmw,https://github.com/ros2/rmw,319,2022-04-08T19:07:57Z,2022-04-20T18:40:57Z,2022-04-20T18:40:57Z,CLOSED,False,112,0,1,https://github.com/jacobperron,Add functions to get a compatible QoS profiles,4,[],https://github.com/ros2/rmw/pull/319,https://github.com/jacobperron,3,https://github.com/ros2/rmw/pull/319#issuecomment-1100474619,"Connects to #304
Given one or more publisher (subscription) QoS profiles, modify the given subscription (publisher) QoS profile such that it is compatible with most of the publisher (subscription) profiles.
Do this while not sacrificing the level of service when possible.
This API is ultimately intended to be leveraged by ROS tools that typically want to be flexible with respect to the QoS when subscribing or publishing to a topic.

Opening for early feedback about the API. There is a reference implementation for one of the functions in ros2/rmw_dds_common#59
My next step is to add rcl functions that query the ROS graph to collect QoS info and then use this API to return the most compatible QoS profile, e.g.
rcl_ret_t rcl_get_compatible_subscription_qos_from_topic(
  const rcl_node_t * node,
  const char * topic_name,
  rmw_qos_profile_t * subscription_qos_profile
)
I'm leaning towards putting the endpoint query logic in rcl, since it can be implemented in an RMW-agnostic way (using the API proposed in this PR). However, we could also consider doing all of that logic in RMW in case the RMW implementation can do something more efficient 🤷","See #320 (and connected PRs) for an alternative to this PR. IMO, it makes the interface a lot nicer for the user for a couple reasons:

They only have to change the QoS policy value in order to take advantage of the feature; instead of calling extra functions and doing error handling.
They can choose which policies they was to be adaptive; it's not all-or-nothing like this PR.",True,{}
ros2/rmw,https://github.com/ros2/rmw,319,2022-04-08T19:07:57Z,2022-04-20T18:40:57Z,2022-04-20T18:40:57Z,CLOSED,False,112,0,1,https://github.com/jacobperron,Add functions to get a compatible QoS profiles,4,[],https://github.com/ros2/rmw/pull/319,https://github.com/jacobperron,4,https://github.com/ros2/rmw/pull/319#issuecomment-1104327639,"Connects to #304
Given one or more publisher (subscription) QoS profiles, modify the given subscription (publisher) QoS profile such that it is compatible with most of the publisher (subscription) profiles.
Do this while not sacrificing the level of service when possible.
This API is ultimately intended to be leveraged by ROS tools that typically want to be flexible with respect to the QoS when subscribing or publishing to a topic.

Opening for early feedback about the API. There is a reference implementation for one of the functions in ros2/rmw_dds_common#59
My next step is to add rcl functions that query the ROS graph to collect QoS info and then use this API to return the most compatible QoS profile, e.g.
rcl_ret_t rcl_get_compatible_subscription_qos_from_topic(
  const rcl_node_t * node,
  const char * topic_name,
  rmw_qos_profile_t * subscription_qos_profile
)
I'm leaning towards putting the endpoint query logic in rcl, since it can be implemented in an RMW-agnostic way (using the API proposed in this PR). However, we could also consider doing all of that logic in RMW in case the RMW implementation can do something more efficient 🤷",Closing in favor of #320,True,{}
ros2/rmw,https://github.com/ros2/rmw,320,2022-04-15T23:48:48Z,2022-05-03T17:34:43Z,2022-05-03T17:34:46Z,MERGED,True,151,3,4,https://github.com/jacobperron,Add 'best available' QoS policies,9,[],https://github.com/ros2/rmw/pull/320,https://github.com/jacobperron,1,https://github.com/ros2/rmw/pull/320,"Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.","Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.",True,{}
ros2/rmw,https://github.com/ros2/rmw,320,2022-04-15T23:48:48Z,2022-05-03T17:34:43Z,2022-05-03T17:34:46Z,MERGED,True,151,3,4,https://github.com/jacobperron,Add 'best available' QoS policies,9,[],https://github.com/ros2/rmw/pull/320,https://github.com/jacobperron,2,https://github.com/ros2/rmw/pull/320#issuecomment-1100475033,"Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.","The implementation for DDS middlewares is in ros2/rmw_dds_common#60
I've integrated the feature into rmw_fastrtps in ros2/rmw_fastrtps#598
I still need to:

 integrate feature into rmw_cyclonedds and rmw_connextdds
 add some integration tests (e.g. in system_tests).
 find and update places above rcl that might care about the new enum values.",True,{}
ros2/rmw,https://github.com/ros2/rmw,320,2022-04-15T23:48:48Z,2022-05-03T17:34:43Z,2022-05-03T17:34:46Z,MERGED,True,151,3,4,https://github.com/jacobperron,Add 'best available' QoS policies,9,[],https://github.com/ros2/rmw/pull/320,https://github.com/jacobperron,3,https://github.com/ros2/rmw/pull/320#issuecomment-1103014818,"Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.","""best"" seems natural, but technically there's no reason to consider some of these better than the alternative.

True. It could be misleading to users who may think this is the ""best"" option. While a name like RMW_QOS_POLICY_RELIABILITY_RELIABLE_IF_POSSIBLE makes sense for reliability, durability, and liveliness, what would we call the new deadline and lease duration sentinel values? Maybe something like  RMW_QOS_DEADLINE_MATCH_ENDPOINTS?",True,{}
ros2/rmw,https://github.com/ros2/rmw,320,2022-04-15T23:48:48Z,2022-05-03T17:34:43Z,2022-05-03T17:34:46Z,MERGED,True,151,3,4,https://github.com/jacobperron,Add 'best available' QoS policies,9,[],https://github.com/ros2/rmw/pull/320,https://github.com/jacobperron,4,https://github.com/ros2/rmw/pull/320#issuecomment-1103139640,"Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.","I think there is something nice about using the same term for all policy types, e.g. how should we name the functions introduced in ros2/rmw_dds_common#60?",True,{}
ros2/rmw,https://github.com/ros2/rmw,320,2022-04-15T23:48:48Z,2022-05-03T17:34:43Z,2022-05-03T17:34:46Z,MERGED,True,151,3,4,https://github.com/jacobperron,Add 'best available' QoS policies,9,[],https://github.com/ros2/rmw/pull/320,https://github.com/jacobperron,5,https://github.com/ros2/rmw/pull/320#issuecomment-1103146901,"Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.","Maybe instead of ""best available"" we call it ""highest available"" (as in highest level of service, while matching the most endpoints)?",True,{}
ros2/rmw,https://github.com/ros2/rmw,320,2022-04-15T23:48:48Z,2022-05-03T17:34:43Z,2022-05-03T17:34:46Z,MERGED,True,151,3,4,https://github.com/jacobperron,Add 'best available' QoS policies,9,[],https://github.com/ros2/rmw/pull/320,https://github.com/jacobperron,6,https://github.com/ros2/rmw/pull/320#issuecomment-1103186093,"Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.","We should really document that this options should be used with care.

PTAL at the latest changes to the documentation.",True,{}
ros2/rmw,https://github.com/ros2/rmw,320,2022-04-15T23:48:48Z,2022-05-03T17:34:43Z,2022-05-03T17:34:46Z,MERGED,True,151,3,4,https://github.com/jacobperron,Add 'best available' QoS policies,9,[],https://github.com/ros2/rmw/pull/320,https://github.com/jacobperron,7,https://github.com/ros2/rmw/pull/320#issuecomment-1109164767,"Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.",I added a note about services: 492c48f,True,{}
ros2/rmw,https://github.com/ros2/rmw,320,2022-04-15T23:48:48Z,2022-05-03T17:34:43Z,2022-05-03T17:34:46Z,MERGED,True,151,3,4,https://github.com/jacobperron,Add 'best available' QoS policies,9,[],https://github.com/ros2/rmw/pull/320,https://github.com/jacobperron,8,https://github.com/ros2/rmw/pull/320#issuecomment-1110346763,"Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.","CI is passing for all connected PRs 🎉 #320 (comment)
I think the only thing left to resolve is the comment on this ticket: ros2/rmw_connextdds#84 (comment)",True,{'ROCKET': ['https://github.com/j-rivero']}
ros2/rmw,https://github.com/ros2/rmw,320,2022-04-15T23:48:48Z,2022-05-03T17:34:43Z,2022-05-03T17:34:46Z,MERGED,True,151,3,4,https://github.com/jacobperron,Add 'best available' QoS policies,9,[],https://github.com/ros2/rmw/pull/320,https://github.com/j-rivero,9,https://github.com/ros2/rmw/pull/320#issuecomment-1113540357,"Resolves #304
Alternative to #319
The best available policy should select the highest level of service for the QoS setting while matching with the majority of endpoints.
For example, in the case of a DDS middleware subscription, this means:

Prefer reliable reliability if all existing publishers on the same topic are reliable, otherwise use best effort.
Prefer transient local durability if all existing publishers on the same topic are transient local, otherwise use volatile.
Prefer manual by topic liveliness if all existing publishers on the same topic are manual by topic, otherwise use automatic.
Use a deadline that is equal to the largest deadline of existing publishers on the same topic.
Use a liveliness lease duration that is equal to the largest lease duration of existing publishers on the same topic.


Connected PRs:

ros2/rmw_dds_common#60
ros2/rmw_fastrtps#598
ros2/rmw_connextdds#85
ros2/rmw_cyclonedds#389
ros2/rclcpp#1920
ros2/rclpy#928
ros2/system_tests#501

CI:

Linux 
Linux-aarch64 
Windows 

I've created branches named jacob/qos_best_available from PRs which are not using that name so CI will pick up the relevant changes.","Run an smoke CI on ci_linux with --packages-up-to test_communication test_quality_of_service to check how things are in all the open PRs after latest changes on ros2/rmw_connextdds#85. I've used this ros2.repos file.
CI is passing there 🎉  @jacobperron a final look to that rmw_connextdds PR and we should be in a good moment to run the full CI again I think.",True,{'THUMBS_UP': ['https://github.com/jacobperron']}
ros2/rmw,https://github.com/ros2/rmw,322,2022-05-09T14:01:20Z,2022-05-09T19:06:10Z,2022-05-09T19:06:13Z,MERGED,True,1,1,1,https://github.com/apps/mergify,Correct parameter names to match documentation (backport #250),1,['conflicts'],https://github.com/ros2/rmw/pull/322,https://github.com/apps/mergify,1,https://github.com/ros2/rmw/pull/322,"This is an automatic backport of pull request #250 done by Mergify.
Cherry-pick of c00d365 has failed:
On branch mergify/bp/foxy/pr-250
Your branch is up to date with 'origin/foxy'.

You are currently cherry-picking commit c00d365.
  (fix conflicts and run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)
	both modified:   rmw/include/rmw/get_node_info_and_types.h

no changes added to commit (use ""git add"" and/or ""git commit -a"")

To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com

Fixes #321","This is an automatic backport of pull request #250 done by Mergify.
Cherry-pick of c00d365 has failed:
On branch mergify/bp/foxy/pr-250
Your branch is up to date with 'origin/foxy'.

You are currently cherry-picking commit c00d365.
  (fix conflicts and run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)
	both modified:   rmw/include/rmw/get_node_info_and_types.h

no changes added to commit (use ""git add"" and/or ""git commit -a"")

To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com

Fixes #321",True,{}
ros2/rmw,https://github.com/ros2/rmw,322,2022-05-09T14:01:20Z,2022-05-09T19:06:10Z,2022-05-09T19:06:13Z,MERGED,True,1,1,1,https://github.com/apps/mergify,Correct parameter names to match documentation (backport #250),1,['conflicts'],https://github.com/ros2/rmw/pull/322,https://github.com/clalancette,2,https://github.com/ros2/rmw/pull/322#issuecomment-1121161090,"This is an automatic backport of pull request #250 done by Mergify.
Cherry-pick of c00d365 has failed:
On branch mergify/bp/foxy/pr-250
Your branch is up to date with 'origin/foxy'.

You are currently cherry-picking commit c00d365.
  (fix conflicts and run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)
	both modified:   rmw/include/rmw/get_node_info_and_types.h

no changes added to commit (use ""git add"" and/or ""git commit -a"")

To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com

Fixes #321","CI:

Linux 
Linux-aarch64 
Windows",True,{}
ros2/rmw,https://github.com/ros2/rmw,322,2022-05-09T14:01:20Z,2022-05-09T19:06:10Z,2022-05-09T19:06:13Z,MERGED,True,1,1,1,https://github.com/apps/mergify,Correct parameter names to match documentation (backport #250),1,['conflicts'],https://github.com/ros2/rmw/pull/322,https://github.com/clalancette,3,https://github.com/ros2/rmw/pull/322#issuecomment-1121469306,"This is an automatic backport of pull request #250 done by Mergify.
Cherry-pick of c00d365 has failed:
On branch mergify/bp/foxy/pr-250
Your branch is up to date with 'origin/foxy'.

You are currently cherry-picking commit c00d365.
  (fix conflicts and run ""git cherry-pick --continue"")
  (use ""git cherry-pick --skip"" to skip this patch)
  (use ""git cherry-pick --abort"" to cancel the cherry-pick operation)

Unmerged paths:
  (use ""git add <file>..."" to mark resolution)
	both modified:   rmw/include/rmw/get_node_info_and_types.h

no changes added to commit (use ""git add"" and/or ""git commit -a"")

To fix up this pull request, you can check it out locally. See documentation: https://docs.github.com/en/github/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally


Mergify commands and options

More conditions and actions can be found in the documentation.
You can also trigger Mergify actions by commenting on this pull request:

@Mergifyio refresh will re-evaluate the rules
@Mergifyio rebase will rebase this PR on its base branch
@Mergifyio update will merge the base branch into this PR
@Mergifyio backport <destination> will backport this PR on <destination> branch

Additionally, on Mergify dashboard you can:

look at your merge queues
generate the Mergify configuration with the config editor.

Finally, you can contact us on https://mergify.com

Fixes #321","Lots of different failures in Windows CI, but that is probably preexisting.  I'm going to go ahead and merge this in.",True,{}
