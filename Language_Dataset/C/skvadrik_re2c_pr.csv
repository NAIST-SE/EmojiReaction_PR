skvadrik/re2c,https://github.com/skvadrik/re2c,136,2016-02-07T13:51:46Z,2016-02-07T14:44:33Z,2016-02-07T14:45:03Z,MERGED,True,32,1,2,https://github.com/trofi,Added basic support for travis-ci.org integration.,2,[],https://github.com/skvadrik/re2c/pull/136,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/136,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,136,2016-02-07T13:51:46Z,2016-02-07T14:44:33Z,2016-02-07T14:45:03Z,MERGED,True,32,1,2,https://github.com/trofi,Added basic support for travis-ci.org integration.,2,[],https://github.com/skvadrik/re2c/pull/136,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/136#issuecomment-181025854,,Pulled! Hooray :),True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,157,2016-11-02T23:59:24Z,2016-11-03T08:41:54Z,2016-11-03T23:02:01Z,CLOSED,False,5,5,1,https://github.com/pauloscustodio,Fix #156 - Visual Studio 14 2015: symbol name conflict,1,[],https://github.com/skvadrik/re2c/pull/157,https://github.com/pauloscustodio,1,https://github.com/skvadrik/re2c/pull/157,"Rename INFINITY to INFINITE so that it does not clash with infinity from
the MS C++ library.","Rename INFINITY to INFINITE so that it does not clash with infinity from
the MS C++ library.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,157,2016-11-02T23:59:24Z,2016-11-03T08:41:54Z,2016-11-03T23:02:01Z,CLOSED,False,5,5,1,https://github.com/pauloscustodio,Fix #156 - Visual Studio 14 2015: symbol name conflict,1,[],https://github.com/skvadrik/re2c/pull/157,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/157#issuecomment-258087661,"Rename INFINITY to INFINITE so that it does not clash with infinity from
the MS C++ library.","Merged your fix, thanks!
c428429",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,159,2016-11-05T00:32:09Z,2016-11-05T10:22:34Z,2016-11-05T12:26:26Z,MERGED,True,7,7,4,https://github.com/pauloscustodio,Fix #158 Inconsistent forward declaration of struct/class vs definition,1,[],https://github.com/skvadrik/re2c/pull/159,https://github.com/pauloscustodio,1,https://github.com/skvadrik/re2c/pull/159,"structs State and OutputFile forward declared as class.
classes Range, RegExp and RuleOp forward declared as struct.
Fixed forward declarations.","structs State and OutputFile forward declared as class.
classes Range, RegExp and RuleOp forward declared as struct.
Fixed forward declarations.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,159,2016-11-05T00:32:09Z,2016-11-05T10:22:34Z,2016-11-05T12:26:26Z,MERGED,True,7,7,4,https://github.com/pauloscustodio,Fix #158 Inconsistent forward declaration of struct/class vs definition,1,[],https://github.com/skvadrik/re2c/pull/159,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/159#issuecomment-258602962,"structs State and OutputFile forward declared as class.
classes Range, RegExp and RuleOp forward declared as struct.
Fixed forward declarations.","Pulled, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,161,2016-11-05T16:02:31Z,2016-11-05T16:18:05Z,2016-11-05T16:34:46Z,MERGED,True,2,2,1,https://github.com/pauloscustodio,"Fix #160 - Open text files with ""wb"" causes issues on Windows",1,[],https://github.com/skvadrik/re2c/pull/161,https://github.com/pauloscustodio,1,https://github.com/skvadrik/re2c/pull/161,"Text files need to be opened for writing with ""w"", so that stdio does
the right thing in respect to the correct line endings for the current OS.
(""\r\n"" in Windows, ""\n"" in Linux).","Text files need to be opened for writing with ""w"", so that stdio does
the right thing in respect to the correct line endings for the current OS.
(""\r\n"" in Windows, ""\n"" in Linux).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,161,2016-11-05T16:02:31Z,2016-11-05T16:18:05Z,2016-11-05T16:34:46Z,MERGED,True,2,2,1,https://github.com/pauloscustodio,"Fix #160 - Open text files with ""wb"" causes issues on Windows",1,[],https://github.com/skvadrik/re2c/pull/161,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/161#issuecomment-258622006,"Text files need to be opened for writing with ""w"", so that stdio does
the right thing in respect to the correct line endings for the current OS.
(""\r\n"" in Windows, ""\n"" in Linux).","Pulled, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,164,2016-11-11T21:46:37Z,2016-11-11T22:15:20Z,2016-11-11T22:32:34Z,CLOSED,False,11,1,1,https://github.com/pauloscustodio,Fix163,2,[],https://github.com/skvadrik/re2c/pull/164,https://github.com/pauloscustodio,1,https://github.com/skvadrik/re2c/pull/164,"The previous fix to #163 (a51c7c8) was not working properly, simplified and fixed.","The previous fix to #163 (a51c7c8) was not working properly, simplified and fixed.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,164,2016-11-11T21:46:37Z,2016-11-11T22:15:20Z,2016-11-11T22:32:34Z,CLOSED,False,11,1,1,https://github.com/pauloscustodio,Fix163,2,[],https://github.com/skvadrik/re2c/pull/164,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/164#issuecomment-260068290,"The previous fix to #163 (a51c7c8) was not working properly, simplified and fixed.","Cherry-picked, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,169,2017-01-23T19:29:51Z,2017-01-23T21:26:04Z,2017-01-23T21:26:04Z,CLOSED,False,6,6,1,https://github.com/jcfp,correct some minor manpage typos,1,[],https://github.com/skvadrik/re2c/pull/169,https://github.com/jcfp,1,https://github.com/skvadrik/re2c/pull/169,these showed up in lintian during a maintenance update of the debian re2c package,these showed up in lintian during a maintenance update of the debian re2c package,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,169,2017-01-23T19:29:51Z,2017-01-23T21:26:04Z,2017-01-23T21:26:04Z,CLOSED,False,6,6,1,https://github.com/jcfp,correct some minor manpage typos,1,[],https://github.com/skvadrik/re2c/pull/169,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/169#issuecomment-274621957,these showed up in lintian during a maintenance update of the debian re2c package,"Pulled (see dd5a007), thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,170,2017-02-12T17:57:12Z,2017-02-12T18:33:18Z,2017-02-12T18:33:18Z,CLOSED,False,20,21,12,https://github.com/trofi,re2c: cleanup a few clang ++ warnings,1,[],https://github.com/skvadrik/re2c/pull/170,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/170,"Found those as:
$ make CXXFLAGS=""-Weverything -Werror -Wno-gnu-statement-expression -Wno-nested-anon-types""


cleaned struct<->class declaration mismatch
'static' around local function
'RE2C_GXX_ATTRIBUTE ((noreturn))' around functions known to fail

Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","Found those as:
$ make CXXFLAGS=""-Weverything -Werror -Wno-gnu-statement-expression -Wno-nested-anon-types""


cleaned struct<->class declaration mismatch
'static' around local function
'RE2C_GXX_ATTRIBUTE ((noreturn))' around functions known to fail

Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,170,2017-02-12T17:57:12Z,2017-02-12T18:33:18Z,2017-02-12T18:33:18Z,CLOSED,False,20,21,12,https://github.com/trofi,re2c: cleanup a few clang ++ warnings,1,[],https://github.com/skvadrik/re2c/pull/170,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/170#issuecomment-279237856,"Found those as:
$ make CXXFLAGS=""-Weverything -Werror -Wno-gnu-statement-expression -Wno-nested-anon-types""


cleaned struct<->class declaration mismatch
'static' around local function
'RE2C_GXX_ATTRIBUTE ((noreturn))' around functions known to fail

Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",Merged: 4c856dd ;),True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,171,2017-03-18T20:12:01Z,2017-03-18T20:52:53Z,2017-03-18T20:53:19Z,MERGED,True,2,2,1,https://github.com/unixod,Typo fix,1,[],https://github.com/skvadrik/re2c/pull/171,https://github.com/unixod,1,https://github.com/skvadrik/re2c/pull/171,"Hi, a few typos in 'manual/syntax' have been fixed.","Hi, a few typos in 'manual/syntax' have been fixed.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,171,2017-03-18T20:12:01Z,2017-03-18T20:52:53Z,2017-03-18T20:53:19Z,MERGED,True,2,2,1,https://github.com/unixod,Typo fix,1,[],https://github.com/skvadrik/re2c/pull/171,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/171#issuecomment-287574006,"Hi, a few typos in 'manual/syntax' have been fixed.","Pulled, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,172,2017-04-03T16:39:52Z,2017-04-03T20:07:55Z,2017-04-03T20:12:21Z,MERGED,True,448,463,34,https://github.com/pskocik,Grammar fixes in the docs,1,[],https://github.com/skvadrik/re2c/pull/172,https://github.com/pskocik,1,https://github.com/skvadrik/re2c/pull/172,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,172,2017-04-03T16:39:52Z,2017-04-03T20:07:55Z,2017-04-03T20:12:21Z,MERGED,True,448,463,34,https://github.com/pskocik,Grammar fixes in the docs,1,[],https://github.com/skvadrik/re2c/pull/172,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/172#issuecomment-291259638,,"Great patch, thanks!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,173,2017-04-03T16:41:47Z,2017-04-03T20:14:34Z,2017-04-03T21:46:32Z,MERGED,True,259,258,1,https://github.com/pskocik,Grammar fixes in the manpage,1,[],https://github.com/skvadrik/re2c/pull/173,https://github.com/pskocik,1,https://github.com/skvadrik/re2c/pull/173,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,173,2017-04-03T16:41:47Z,2017-04-03T20:14:34Z,2017-04-03T21:46:32Z,MERGED,True,259,258,1,https://github.com/pskocik,Grammar fixes in the manpage,1,[],https://github.com/skvadrik/re2c/pull/173,https://github.com/pskocik,2,https://github.com/skvadrik/re2c/pull/173#issuecomment-291200896,,"It's not perfect, but it hopefully makes the docs a little bit more readable. It's cross-referenced with the gh-pages-gen branch via comments.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,173,2017-04-03T16:41:47Z,2017-04-03T20:14:34Z,2017-04-03T21:46:32Z,MERGED,True,259,258,1,https://github.com/pskocik,Grammar fixes in the manpage,1,[],https://github.com/skvadrik/re2c/pull/173,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/173#issuecomment-291260945,,"Looks quite perfect to me. ;)
Thanks again!",True,{'THUMBS_UP': ['https://github.com/pskocik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,173,2017-04-03T16:41:47Z,2017-04-03T20:14:34Z,2017-04-03T21:46:32Z,MERGED,True,259,258,1,https://github.com/pskocik,Grammar fixes in the manpage,1,[],https://github.com/skvadrik/re2c/pull/173,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/173#issuecomment-291262748,,I really appreciate your fix; my wording is sometimes terrible.,True,{'LAUGH': ['https://github.com/pskocik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,173,2017-04-03T16:41:47Z,2017-04-03T20:14:34Z,2017-04-03T21:46:32Z,MERGED,True,259,258,1,https://github.com/pskocik,Grammar fixes in the manpage,1,[],https://github.com/skvadrik/re2c/pull/173,https://github.com/pskocik,5,https://github.com/skvadrik/re2c/pull/173#issuecomment-291281827,,"Glad it's well received. It's possible I'll make another PR that fixes this one. It's quite likely there's still some minor issues, some of which I probably introduced myself (overall I believe this patch is an improvement, though).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,173,2017-04-03T16:41:47Z,2017-04-03T20:14:34Z,2017-04-03T21:46:32Z,MERGED,True,259,258,1,https://github.com/pskocik,Grammar fixes in the manpage,1,[],https://github.com/skvadrik/re2c/pull/173,https://github.com/skvadrik,6,https://github.com/skvadrik/re2c/pull/173#issuecomment-291283761,,"It definitely is. When writing docs, I often spend a lot of time thinking over some phrase and end up not seeing obvious mistakes in it.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,174,2017-04-04T19:12:45Z,2017-04-04T20:34:40Z,2017-04-04T21:03:22Z,MERGED,True,218,211,21,https://github.com/pskocik,more documentation fixes,1,[],https://github.com/skvadrik/re2c/pull/174,https://github.com/pskocik,1,https://github.com/skvadrik/re2c/pull/174,"This should be it. This pair of patches fixes parts that I had left out, and it revises some of the already edited text.","This should be it. This pair of patches fixes parts that I had left out, and it revises some of the already edited text.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,174,2017-04-04T19:12:45Z,2017-04-04T20:34:40Z,2017-04-04T21:03:22Z,MERGED,True,218,211,21,https://github.com/pskocik,more documentation fixes,1,[],https://github.com/skvadrik/re2c/pull/174,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/174#issuecomment-291625053,"This should be it. This pair of patches fixes parts that I had left out, and it revises some of the already edited text.","Great job, thank you!
I added a tiny fix on top of your patch (one missed word: 506f42d)",True,{'THUMBS_UP': ['https://github.com/pskocik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,174,2017-04-04T19:12:45Z,2017-04-04T20:34:40Z,2017-04-04T21:03:22Z,MERGED,True,218,211,21,https://github.com/pskocik,more documentation fixes,1,[],https://github.com/skvadrik/re2c/pull/174,https://github.com/pskocik,3,https://github.com/skvadrik/re2c/pull/174#issuecomment-291626474,"This should be it. This pair of patches fixes parts that I had left out, and it revises some of the already edited text.",Glad I could help. It helped me learn re2c better ;).,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,174,2017-04-04T19:12:45Z,2017-04-04T20:34:40Z,2017-04-04T21:03:22Z,MERGED,True,218,211,21,https://github.com/pskocik,more documentation fixes,1,[],https://github.com/skvadrik/re2c/pull/174,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/174#issuecomment-291631167,"This should be it. This pair of patches fixes parts that I had left out, and it revises some of the already edited text.",I wish all re2c users had your approach to learning :D,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,175,2017-04-04T19:14:27Z,2017-04-04T20:34:30Z,2017-04-04T20:34:30Z,MERGED,True,90,94,1,https://github.com/pskocik,more manpage fixes,1,[],https://github.com/skvadrik/re2c/pull/175,https://github.com/pskocik,1,https://github.com/skvadrik/re2c/pull/175,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,177,2017-04-07T23:33:30Z,2017-04-08T07:29:07Z,2017-04-10T12:59:08Z,MERGED,True,222,149,1,https://github.com/pskocik,sync --help output w/ manpage,1,[],https://github.com/skvadrik/re2c/pull/177,https://github.com/pskocik,1,https://github.com/skvadrik/re2c/pull/177,"+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176","+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,177,2017-04-07T23:33:30Z,2017-04-08T07:29:07Z,2017-04-10T12:59:08Z,MERGED,True,222,149,1,https://github.com/pskocik,sync --help output w/ manpage,1,[],https://github.com/skvadrik/re2c/pull/177,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/177#issuecomment-292701269,"+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176","@pskocik, thanks!
Especially thank you for leaving that useful command in comment.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,177,2017-04-07T23:33:30Z,2017-04-08T07:29:07Z,2017-04-10T12:59:08Z,MERGED,True,222,149,1,https://github.com/pskocik,sync --help output w/ manpage,1,[],https://github.com/skvadrik/re2c/pull/177,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/177#issuecomment-292702315,"+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176","@pskocik if you feel like contributing more to re2c and get tired of sending pull requests, I could give you github access. All your patches so far have been flawless.
I myself make changes in the devel branch most of the time (except applying patches and releasing), so there probably won't be any conflicts between us. We can make an agreement that you push small changes to master and big/controversial changes to some other branch.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,177,2017-04-07T23:33:30Z,2017-04-08T07:29:07Z,2017-04-10T12:59:08Z,MERGED,True,222,149,1,https://github.com/pskocik,sync --help output w/ manpage,1,[],https://github.com/skvadrik/re2c/pull/177,https://github.com/pskocik,4,https://github.com/skvadrik/re2c/pull/177#issuecomment-292749081,"+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176","I think  using the rsts from the gh-pages-gen branch is a more viable approach towards deduplicating the docs. It's easier, because the options sections of the manpage (or the --help page, which is basically the same thing sans formatting) is comprised of multiple rsts (the manpaged patched to .. include:: the rsts from gh-pages-gen), so if you wanted to start there, you'd need to split rather than concatenate, and concatenation (.. include:: somefile.rst from manpage.rst.in) is easier than splitting. I think that for robustness, gh-pages-gen/src/manual could go from gh-pages-gen to master/re2c/doc and the build script of the website could pull it back with git worktree.
Anyway, that's what I've done experimentally in my fork now. I've also pruned the original gh-pages-gen/src/manual off of the pngs before moving it to master, and the buildscript now lazily regenerates the pngs from the text.
The last thing I think should be done as part of refactoring the docs should be to make the master/re2c build script generate the --help page from the manpage. Unfortunately, I don't really know a good way to make autotools do that (IDK autotools well). It could run something like the oneliner from my last patch,
MANWIDTH=88 PAGER=cat man $buildir/doc/re2c.1| sed -n '/^OPTIONS/,/^INTERFACE/ { s/^       //; /^[ -]/ p;}' 

although that would need to be piped to a throw-away text-to-c(++) serializer, which could be as simple as:
#include  <stdio.h>
int main(int c, char **v)
{
    int  ch; FILE *f = c <= 1 ? stdin : fopen(v[1],""r"");
    puts(""namespace re2c { extern char const help_string [] = { "");
    while (EOF != (ch=fgetc(f)))
        printf(""'\\x%x',\n"", ch);
    puts(""}; }"");
    return (!ferror(stdin) && !ferror(stdout)) ? EXIT_SUCCESS : EXIT_FAILURE;

}

Again, I'm a little helpless as to how to integrate something like this with autotools well.
As for my contributions, I only wanted to study and fix the docs. I don't plan on contributing much beyond this.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,177,2017-04-07T23:33:30Z,2017-04-08T07:29:07Z,2017-04-10T12:59:08Z,MERGED,True,222,149,1,https://github.com/pskocik,sync --help output w/ manpage,1,[],https://github.com/skvadrik/re2c/pull/177,https://github.com/skvadrik,5,https://github.com/skvadrik/re2c/pull/177#issuecomment-292773310,"+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176","I think it's better if .rst files were autogenerated from .h file, so that source files remain as simple and self-contained as possible. What you suggest (generate .h from .rst) keeps the source files self-contained, but it adds complications into the main build system. I'm convinced that all the complexity should be on the documentation side. Synchronization with documentation should not affect source files.
That .h file could be split in two (options and warnings).
Integration with build system is not much different from other preprocessors. We already use two of them: bison (for the parser) and re2c (for the lexer, configuration parser and parser of options). Makefile.am has a couple of special rules that generate .cc files from .re and .y files. In this case we'll probably need a rule that autogenerates manpage from .h files (and .rst files on gh-pages-gen branch).
The generator itself could be written in C++ (but then it has to be built) or in POSIX shell, I think. C++ program has the advantage that it can run on Windows, but one should be careful with crosscompilation. POSIX shell is portable with the exception of Windows, but the build system doesn't support Windows anyway. I probably prefer shell script (it is simpler).
All the autogenerated files should have backup copies in bootstrap subdirectory, so that one can build re2c with minimum dependencies on any system.

As for my contributions, I only wanted to study and fix the docs. I don't plan on contributing much beyond this.

You are welcome in any case. :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,177,2017-04-07T23:33:30Z,2017-04-08T07:29:07Z,2017-04-10T12:59:08Z,MERGED,True,222,149,1,https://github.com/pskocik,sync --help output w/ manpage,1,[],https://github.com/skvadrik/re2c/pull/177,https://github.com/pskocik,6,https://github.com/skvadrik/re2c/pull/177#issuecomment-292775017,"+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176","Feel free to reject my proposed changes, but take a look at it at least, please. I think the setup is pretty simple and robust. What I've done is I've moved the manual directory (after removing the pngs) from gh-pages-gen to re2c/doc/manual and I'm including those rsts inside manpage.rst.in which shrank to  this
This adds nothing to the build system in master, but I have expanded the build script on gh-pages-gen
to now pull the manual directory from master and regenerate the pngs.
I think it is simple and deduplicates the documentation well.
The build system on master could additionally use something like:
#include  <stdio.h>
#include  <unistd.h>

int main(void)
{
    FILE *f = popen(
    ""MANWIDTH=88 PAGER=cat man re2c 2>/dev/null| sed -n '/^OPTIONS/,/^INTERFACE/ { s/^       //; /^[ -]/ p;}'""
    , 
    ""r"");
    if(!f) { perror(""popen"");  exit(1); }

    int  ch; 
    puts(""namespace re2c { extern char const help_string [] = { "");
    while (EOF != (ch=fgetc(f)))
        printf(""'\\x%x',\n"", ch);
    puts(""}; }"");
    return (!ferror(f) && 0==pclose(f) && !ferror(stdout)) ? EXIT_SUCCESS : EXIT_FAILURE;

}


to generate  a  help_string.cc out of the newly built manpage. The file would define  char const re2c::help_string[]; and usage() could simply echo this string (generating this on the fly would make the --help flag laggy as the man command takes about 200ms).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,177,2017-04-07T23:33:30Z,2017-04-08T07:29:07Z,2017-04-10T12:59:08Z,MERGED,True,222,149,1,https://github.com/pskocik,sync --help output w/ manpage,1,[],https://github.com/skvadrik/re2c/pull/177,https://github.com/skvadrik,7,https://github.com/skvadrik/re2c/pull/177#issuecomment-292778655,"+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176","The first part (syncing online docs with manpage) looks good, except for the following:

don't move the whole manual directory, move only those files that are included in doc/manpage.rst.in on master
don't regenerate pictures (it is hard to check if they still look as intended on every build)

If we agree on these two issues, I would gladly accept this part.
Now for the second part (syncing help with manpage).
I still think that it's better to generate .rst from source files, except for the disadvantage that C-strings lack markup (highlighting keywords, etc.). But no matter which direction we choose, the way to add synchronization is as follows:

create a synchronization utility (the C++ program you suggested is fine, but a simple shell scrpt would be better)
create bootstrap versions of the autogenerated files and put them in bootstrap/... subdir: these files would be used by build system, unless
re2c was configured with option --enable-docs: currently this option makes the build system regenerate manpage using rst2man, we would need one more step to regenarate help from .rst or .rst from help.

If you don't feel like digging in Makefile.am, I can do this.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,177,2017-04-07T23:33:30Z,2017-04-08T07:29:07Z,2017-04-10T12:59:08Z,MERGED,True,222,149,1,https://github.com/pskocik,sync --help output w/ manpage,1,[],https://github.com/skvadrik/re2c/pull/177,https://github.com/pskocik,8,https://github.com/skvadrik/re2c/pull/177#issuecomment-292785898,"+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176","I've implemented part 1. As for part 2, please do the reconfiguration of Makefile.am. (I don't have much of an incentive to learn autotools. :D)
I don't know how to convert text to a c array with a shell script portably, but we could immediately use the above C program with a specifiable manpage, unless you have a better alternative.
#include  <stdio.h>

int main(int c, char **v)
{
    if(0>setenv( ""RE2C_MANPAGE"", c>1 ? v[1] : ""re2c"",  1))
        { perror(""setenv""); return EXIT_FAILURE; }

    FILE *f = popen(
    ""MANWIDTH=88 PAGER=cat man \""$RE2C_MANPAGE\"" 2>/dev/null| sed -n '/^OPTIONS/,/^INTERFACE/ { s/^       //; /^[ -]/ p;}'""
    , 
    ""r"");
    if(!f) { perror(""popen"");  exit(1); }

    int  ch; 
    puts(""namespace re2c { extern char const help_string [] = { "");
    while (EOF != (ch=fgetc(f)))
        printf(""'\\x%x',\n"", ch);
    puts(""}; }"");
    return (!ferror(f) && 0==pclose(f) && !ferror(stdout)) ? EXIT_SUCCESS : EXIT_FAILURE;

}",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,177,2017-04-07T23:33:30Z,2017-04-08T07:29:07Z,2017-04-10T12:59:08Z,MERGED,True,222,149,1,https://github.com/pskocik,sync --help output w/ manpage,1,[],https://github.com/skvadrik/re2c/pull/177,https://github.com/skvadrik,9,https://github.com/skvadrik/re2c/pull/177#issuecomment-292941834,"+ set output width to 80
+ make help output go to stdout rather than stderr

fixes  #176","Part 2: f9a34ba, not the best way it but at least make distcheck seems to work.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,178,2017-04-09T13:04:35Z,2017-04-09T20:02:11Z,2017-04-09T20:06:53Z,MERGED,True,0,0,0,https://github.com/pskocik,Moves rts used in the manpage to master,0,[],https://github.com/skvadrik/re2c/pull/178,https://github.com/pskocik,1,https://github.com/skvadrik/re2c/pull/178,and modifies the buildscript to bring them back for the build,and modifies the buildscript to bring them back for the build,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,178,2017-04-09T13:04:35Z,2017-04-09T20:02:11Z,2017-04-09T20:06:53Z,MERGED,True,0,0,0,https://github.com/pskocik,Moves rts used in the manpage to master,0,[],https://github.com/skvadrik/re2c/pull/178,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/178#issuecomment-292809227,and modifies the buildscript to bring them back for the build,Pulled! I slightly changed your script to use git archive instead of git worktree (the first one is present in older versions of git).,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,179,2017-04-09T13:05:10Z,2017-04-09T18:41:24Z,2017-04-09T19:26:03Z,MERGED,True,887,882,12,https://github.com/pskocik,compose manpage out of rsts from gh-pages-gen,1,[],https://github.com/skvadrik/re2c/pull/179,https://github.com/pskocik,1,https://github.com/skvadrik/re2c/pull/179,uses the rsts moved from gh-pages-gen to compose the manpage,uses the rsts moved from gh-pages-gen to compose the manpage,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,179,2017-04-09T13:05:10Z,2017-04-09T18:41:24Z,2017-04-09T19:26:03Z,MERGED,True,887,882,12,https://github.com/pskocik,compose manpage out of rsts from gh-pages-gen,1,[],https://github.com/skvadrik/re2c/pull/179,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/179#issuecomment-292790499,uses the rsts moved from gh-pages-gen to compose the manpage,"It's almost ok, except that a couple of Travis CI builds failed: https://travis-ci.org/skvadrik/re2c/builds/220255998
I believe that failures are caused by include paths in doc/manpage.rst: they should be relative to top source directory, that is, doc/manual/options/options_list.rst instead of manual/options/options_list.rst an so on.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,179,2017-04-09T13:05:10Z,2017-04-09T18:41:24Z,2017-04-09T19:26:03Z,MERGED,True,887,882,12,https://github.com/pskocik,compose manpage out of rsts from gh-pages-gen,1,[],https://github.com/skvadrik/re2c/pull/179,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/179#issuecomment-292790956,uses the rsts moved from gh-pages-gen to compose the manpage,I'll pull your patch and add a fix on top of it.,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,179,2017-04-09T13:05:10Z,2017-04-09T18:41:24Z,2017-04-09T19:26:03Z,MERGED,True,887,882,12,https://github.com/pskocik,compose manpage out of rsts from gh-pages-gen,1,[],https://github.com/skvadrik/re2c/pull/179,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/179#issuecomment-292804330,uses the rsts moved from gh-pages-gen to compose the manpage,"Pulled your patch; fixed paths to be relative to @top_srcdir@ (see e5c74f4). Now all checks pass: https://travis-ci.org/skvadrik/re2c.
Thanks!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,179,2017-04-09T13:05:10Z,2017-04-09T18:41:24Z,2017-04-09T19:26:03Z,MERGED,True,887,882,12,https://github.com/pskocik,compose manpage out of rsts from gh-pages-gen,1,[],https://github.com/skvadrik/re2c/pull/179,https://github.com/pskocik,5,https://github.com/skvadrik/re2c/pull/179#issuecomment-292806918,uses the rsts moved from gh-pages-gen to compose the manpage,"Thanks for fixing it. I should've had it run through travis too.
I named the fragments rst_ to prevent them from being picked up by the build system for rst to html conversion.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,185,2017-04-20T15:40:59Z,2017-08-11T12:54:37Z,2017-08-11T12:54:37Z,CLOSED,False,2,2,1,https://github.com/pskocik,fix documentation issue #184,1,[],https://github.com/skvadrik/re2c/pull/185,https://github.com/pskocik,1,https://github.com/skvadrik/re2c/pull/185,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,185,2017-04-20T15:40:59Z,2017-08-11T12:54:37Z,2017-08-11T12:54:37Z,CLOSED,False,2,2,1,https://github.com/pskocik,fix documentation issue #184,1,[],https://github.com/skvadrik/re2c/pull/185,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/185#issuecomment-295788396,,Could you please revert re2c/bootstrap/src/parse/parser.cc and re2c/bootstrap/src/parse/y.tab.h as these changes are not related to the patch? Thanks.,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,185,2017-04-20T15:40:59Z,2017-08-11T12:54:37Z,2017-08-11T12:54:37Z,CLOSED,False,2,2,1,https://github.com/pskocik,fix documentation issue #184,1,[],https://github.com/skvadrik/re2c/pull/185,https://github.com/pskocik,3,https://github.com/skvadrik/re2c/pull/185#issuecomment-295790008,,Done. (I force-pushed it).,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,185,2017-04-20T15:40:59Z,2017-08-11T12:54:37Z,2017-08-11T12:54:37Z,CLOSED,False,2,2,1,https://github.com/pskocik,fix documentation issue #184,1,[],https://github.com/skvadrik/re2c/pull/185,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/185#issuecomment-295794216,,"I pulled your fix and added regenerated bootstrap manpage with git commit --amend: 43681dc (I also made a mistake and force-pushed).
You probably want to build with make docs, not make bootstrap.
Thanks!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,187,2017-07-01T22:37:59Z,2017-07-01T22:51:33Z,2017-07-01T22:51:48Z,CLOSED,False,1,1,1,https://github.com/nightlark,Add const qualifier to operator() in newver_cmp_t,1,[],https://github.com/skvadrik/re2c/pull/187,https://github.com/nightlark,1,https://github.com/skvadrik/re2c/pull/187,"I was getting an error with newver_cmp_t's operator() in certain compilers due to losing ""const-volatile qualifiers"".","I was getting an error with newver_cmp_t's operator() in certain compilers due to losing ""const-volatile qualifiers"".",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,188,2017-07-01T23:09:55Z,2017-08-11T12:55:19Z,2018-10-21T02:11:45Z,CLOSED,False,305,0,2,https://github.com/nightlark,Add const to operator() of newver_cmp_t,5,[],https://github.com/skvadrik/re2c/pull/188,https://github.com/nightlark,1,https://github.com/skvadrik/re2c/pull/188,"A certain set of compilers gives a compiler error due to losing ""const-volatile qualifiers"".","A certain set of compilers gives a compiler error due to losing ""const-volatile qualifiers"".",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,188,2017-07-01T23:09:55Z,2017-08-11T12:55:19Z,2018-10-21T02:11:45Z,CLOSED,False,305,0,2,https://github.com/nightlark,Add const to operator() of newver_cmp_t,5,[],https://github.com/skvadrik/re2c/pull/188,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/188#issuecomment-312479233,"A certain set of compilers gives a compiler error due to losing ""const-volatile qualifiers"".","I pulled the first patch: fa60d94
I'm not sure about Cmake.  On one hand, I appreciate the effort, and your code might be reused by others. On the other hand, I doubt my ability to support two different build systems: we already tried to support both MSVC and Autotools, and it ended up in a bunch of unusable ancient MSVC stuff hanging around for years. Pulling in a couple of Cmake files probably won't hurt (as long as they are few and don't get mixed up with the primary build system), but they will quickly fall behind, unless you are ready to maintain them on a regular basis.
As for the third patch, I think it is better to rewrite the code.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,188,2017-07-01T23:09:55Z,2017-08-11T12:55:19Z,2018-10-21T02:11:45Z,CLOSED,False,305,0,2,https://github.com/nightlark,Add const to operator() of newver_cmp_t,5,[],https://github.com/skvadrik/re2c/pull/188,https://github.com/nightlark,3,https://github.com/skvadrik/re2c/pull/188#issuecomment-312496855,"A certain set of compilers gives a compiler error due to losing ""const-volatile qualifiers"".","Ah oops, actually I meant to only send in the first part of that PR (the const keyword addition). Gotta remember to create a separate branch for PRs next time. Though its good to know your thoughts on the other two things. 👍
Maybe I'll look at the iterator issue again; getting rid of done.resize to e-b might be the easiest way, but working through the corner cases I wasn't sure about the behavior of std::sort being given an iterator that is technically within the bounds of the vector, compared to one that is pointing at something outside the bounds of the resized vector. I think it should be okay as long as std::sort doesn't include what the ending iterator points to, but need to double check that.
For the CMake scripts, yea, multiple build systems are hard to maintain. I'm trying to integrate re2c into build system for another project, and I want it to be easy for people to get it set up without installing and building a bunch of dependencies on their own (particularly annoying for getting started developing on Windows...). As the scripts are right now, I need to add support for some some build options and running tests, and add cmake modules (which should rarely need changes) to help other projects use re2c as part of their build scripts.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,188,2017-07-01T23:09:55Z,2017-08-11T12:55:19Z,2018-10-21T02:11:45Z,CLOSED,False,305,0,2,https://github.com/nightlark,Add const to operator() of newver_cmp_t,5,[],https://github.com/skvadrik/re2c/pull/188,https://github.com/Qix-,4,https://github.com/skvadrik/re2c/pull/188#issuecomment-431632906,"A certain set of compilers gives a compiler error due to losing ""const-volatile qualifiers"".","I know this is grave-digging, but CMake is an all-in-one solution and most new projects use it nowadays. It makes including nested dependencies a breeze compared to other build systems, and you wouldn't have to distribute MSVC projects alongside the source code (instead letting users generate them from CMake itself).
Further, it supports Ninja, XCode, and a slew of other generators.
I really recommend switching to it. It's not perfect but its adoption is really unparalleled.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,189,2017-07-02T01:30:22Z,2017-07-02T08:39:39Z,2017-07-02T08:44:05Z,MERGED,True,4,4,1,https://github.com/nightlark,Typo fix and small grammatical change,1,[],https://github.com/skvadrik/re2c/pull/189,https://github.com/nightlark,1,https://github.com/skvadrik/re2c/pull/189,"I noticed that the pages on re2c.org seem to match the gh-pages branch, which appears to be out-dated compared to the gh-pages-gen contents. I'm guessing they only getting sync'ed occasionally?","I noticed that the pages on re2c.org seem to match the gh-pages branch, which appears to be out-dated compared to the gh-pages-gen contents. I'm guessing they only getting sync'ed occasionally?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,189,2017-07-02T01:30:22Z,2017-07-02T08:39:39Z,2017-07-02T08:44:05Z,MERGED,True,4,4,1,https://github.com/nightlark,Typo fix and small grammatical change,1,[],https://github.com/skvadrik/re2c/pull/189,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/189#issuecomment-312478607,"I noticed that the pages on re2c.org seem to match the gh-pages branch, which appears to be out-dated compared to the gh-pages-gen contents. I'm guessing they only getting sync'ed occasionally?","Pulled, thank you!

I'm guessing they only getting sync'ed occasionally?

Generally I update website and docs after release. There's quite a bit of  important new stuff that needs new examples, man sections an so on, and some of the old documentation must be fixed (see #140 ).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,190,2017-07-02T19:59:45Z,2017-08-11T12:55:38Z,2017-08-11T12:55:38Z,CLOSED,False,3,1,1,https://github.com/nightlark,Fix for possible invalidated iterator after resize,1,[],https://github.com/skvadrik/re2c/pull/190,https://github.com/nightlark,1,https://github.com/skvadrik/re2c/pull/190,"Avoids potentially invalid iterator after vector resize. Should double check that the logic for this is still sound. From what I can tell, e acts like done.end() and won't be included in the sorted elements. Since e >= j, resize j-b+1 will cover dropping the same elements as resize e-b,  if e != j. Otherwise, if e == j then either all states after the first partition call need to be dropped with resize e-b, or there are no states to be dropped and the resize will do nothing.","Avoids potentially invalid iterator after vector resize. Should double check that the logic for this is still sound. From what I can tell, e acts like done.end() and won't be included in the sorted elements. Since e >= j, resize j-b+1 will cover dropping the same elements as resize e-b,  if e != j. Otherwise, if e == j then either all states after the first partition call need to be dropped with resize e-b, or there are no states to be dropped and the resize will do nothing.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,190,2017-07-02T19:59:45Z,2017-08-11T12:55:38Z,2017-08-11T12:55:38Z,CLOSED,False,3,1,1,https://github.com/nightlark,Fix for possible invalidated iterator after resize,1,[],https://github.com/skvadrik/re2c/pull/190,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/190#issuecomment-312517384,"Avoids potentially invalid iterator after vector resize. Should double check that the logic for this is still sound. From what I can tell, e acts like done.end() and won't be included in the sorted elements. Since e >= j, resize j-b+1 will cover dropping the same elements as resize e-b,  if e != j. Otherwise, if e == j then either all states after the first partition call need to be dropped with resize e-b, or there are no states to be dropped and the resize will do nothing.","I pulled your fix and tweaked it a bit: 2d8def8
Thanks!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,191,2017-07-31T14:47:18Z,2017-07-31T15:15:46Z,2017-07-31T22:27:55Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/191,https://github.com/rossburton,1,https://github.com/skvadrik/re2c/pull/191,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,191,2017-07-31T14:47:18Z,2017-07-31T15:15:46Z,2017-07-31T22:27:55Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/191,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/191#issuecomment-319100616,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","Pulled, thank you!
I've just ran into (seemingly) the same error (on a very slow VM running NetBSD-7.0), but I can't reproduce the failure.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,191,2017-07-31T14:47:18Z,2017-07-31T15:15:46Z,2017-07-31T22:27:55Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/191,https://github.com/rossburton,3,https://github.com/skvadrik/re2c/pull/191#issuecomment-319101144,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","On 31 July 2017 at 16:22, skvadrik ***@***.***> wrote:
 Pulled, thank you!
 I've just ran into (seemingly) the same error (on a very slow VM running
 NetBSD-7.0), but I can't reproduce the failure.

Normally the build works fine as automake dependency files are written
during configure so the directory exists, but if they're not enabled then
you can hit the race by building one of the generated files manually.

Ross",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,191,2017-07-31T14:47:18Z,2017-07-31T15:15:46Z,2017-07-31T22:27:55Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/191,https://github.com/trofi,4,https://github.com/skvadrik/re2c/pull/191#issuecomment-319214510,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","For posterity before this change applied to re2c build broke in out-of-source mode.
To reproduce the failure it should be enough to pass --disable-dependency-tracking
option to configure:
$ ../re2c/configure --disable-dependency-tracking
$ make src/conf/parse_opts.o V=1
...
if test -x re2c; \
then \
        ./re2c -b -o src/conf/parse_opts.cc ../re2c/src/conf/parse_opts.re && \
        cp src/conf/parse_opts.cc ../re2c/bootstrap/src/conf/parse_opts.cc; \
else \
        cp ../re2c/bootstrap/src/conf/parse_opts.cc src/conf/parse_opts.cc; \
fi
cp: cannot create regular file 'src/conf/parse_opts.cc': No such file or directory

https://www.gnu.org/software/automake/manual/automake.html#Dependencies
Thanks for the fix!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,192,2017-08-01T09:20:07Z,2017-08-01T09:40:14Z,2017-08-01T12:32:51Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/192,https://github.com/rossburton,1,https://github.com/skvadrik/re2c/pull/192,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,192,2017-08-01T09:20:07Z,2017-08-01T09:40:14Z,2017-08-01T12:32:51Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/192,https://github.com/rossburton,2,https://github.com/skvadrik/re2c/pull/192#issuecomment-319316868,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","Well this is embarrassing.
Found the identical race ten lines up.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,192,2017-08-01T09:20:07Z,2017-08-01T09:40:14Z,2017-08-01T12:32:51Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/192,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/192#issuecomment-319323628,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","Pulled, thanks.

Well this is embarrassing.

Absolutely, it would help if you provided more details how to trigger build failures though. :)
There is a couple of other custom rules in Makefile.am (mostly for building docs), so I expect that it is possible to trigger even more build failures. I'll try to find them all as @trofi suggested in #191 (comment) with  --disable-dependency-tracking option.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,192,2017-08-01T09:20:07Z,2017-08-01T09:40:14Z,2017-08-01T12:32:51Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/192,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/192#issuecomment-319324668,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","Also, you mention src/parse/ subdirectory --- but there is no such subdirectory in current source tree (it was moved to src/ast some time ago). Is it possible that your build failures are caused by unfortunate update/rebuild cycle?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,192,2017-08-01T09:20:07Z,2017-08-01T09:40:14Z,2017-08-01T12:32:51Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/192,https://github.com/skvadrik,5,https://github.com/skvadrik/re2c/pull/192#issuecomment-319329747,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.",One more build failure fixed in 00a0b8b,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,192,2017-08-01T09:20:07Z,2017-08-01T09:40:14Z,2017-08-01T12:32:51Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/192,https://github.com/skvadrik,6,https://github.com/skvadrik/re2c/pull/192#issuecomment-319331600,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.",Yet another build failure fixed in f4734c4,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,192,2017-08-01T09:20:07Z,2017-08-01T09:40:14Z,2017-08-01T12:32:51Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/192,https://github.com/rossburton,7,https://github.com/skvadrik/re2c/pull/192#issuecomment-319336278,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","Ah, the errors were hit using the 0.16 release, and I rebased the patches
to master as the rules were identical.

Ross
…
On 1 August 2017 at 10:52, skvadrik ***@***.***> wrote:
 Also, you mention src/parse/ subdirectory --- but there is no such
 subdirectory in current source tree (it was moved to src/ast some time
 ago). Is it possible that your build failures are caused by unfortunate
 update/rebuild cycle?

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 <#192 (comment)>, or mute
 the thread
 <https://github.com/notifications/unsubscribe-auth/AAB-iqx7GZ6yotWrwj8PZhYf6zldZW3Mks5sTvVfgaJpZM4Opc1v>
 .",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,192,2017-08-01T09:20:07Z,2017-08-01T09:40:14Z,2017-08-01T12:32:51Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/192,https://github.com/skvadrik,8,https://github.com/skvadrik/re2c/pull/192#issuecomment-319338006,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","Anyway, it helped to reveal potential build failures with --disable-dependency-tracking.
I fixed the remaining custom rules in af3a69b.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,192,2017-08-01T09:20:07Z,2017-08-01T09:40:14Z,2017-08-01T12:32:51Z,MERGED,True,1,0,1,https://github.com/rossburton,Makefile.am: create target directory before writing into it,1,[],https://github.com/skvadrik/re2c/pull/192,https://github.com/skvadrik,9,https://github.com/skvadrik/re2c/pull/192#issuecomment-319356793,"In some situations src/parse/ may not exist before a file is copied into the
directory. Ensure that this doesn't happen by creating the directory first.","@rossburton  also it turns out that $(dir $@)  is not portable: it requires secondary expansion feature of GNU make (breaks on bmake). It is better to use POSIX make macro $(@D) (documented here: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html, section ""Internal Macros"").
Fixed in cd48d98.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,212,2018-08-28T16:03:30Z,2018-08-28T19:29:56Z,2018-08-28T19:29:56Z,CLOSED,False,13,14,1,https://github.com/floppym,Rewrite vernum function,1,[],https://github.com/skvadrik/re2c/pull/212,https://github.com/floppym,1,https://github.com/skvadrik/re2c/pull/212,Fixes: #211,Fixes: #211,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,212,2018-08-28T16:03:30Z,2018-08-28T19:29:56Z,2018-08-28T19:29:56Z,CLOSED,False,13,14,1,https://github.com/floppym,Rewrite vernum function,1,[],https://github.com/skvadrik/re2c/pull/212,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/212#issuecomment-416711612,Fixes: #211,"Pulled: 348d868, thanks!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,213,2018-08-28T23:02:14Z,2018-08-29T06:19:22Z,2018-08-29T06:19:22Z,CLOSED,False,105,18,5,https://github.com/trofi,vernum: move version-string-to-vernum converter to a separate helper,1,[],https://github.com/skvadrik/re2c/pull/213,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/213,"No functional change. While at it added tests
to cover past failures:

""1.1"": #211
""0.14"": https://sourceforge.net/p/re2c/bugs/55/

Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","No functional change. While at it added tests
to cover past failures:

""1.1"": #211
""0.14"": https://sourceforge.net/p/re2c/bugs/55/

Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,213,2018-08-28T23:02:14Z,2018-08-29T06:19:22Z,2018-08-29T06:19:22Z,CLOSED,False,105,18,5,https://github.com/trofi,vernum: move version-string-to-vernum converter to a separate helper,1,[],https://github.com/skvadrik/re2c/pull/213,https://github.com/floppym,2,https://github.com/skvadrik/re2c/pull/213#issuecomment-416787225,"No functional change. While at it added tests
to cover past failures:

""1.1"": #211
""0.14"": https://sourceforge.net/p/re2c/bugs/55/

Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","When I rewrote the vernum function, I wondered about the possibility of a version component with 3 or more digits, like 1.123.0. That sort of version number should probably be rejected somewhere.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,213,2018-08-28T23:02:14Z,2018-08-29T06:19:22Z,2018-08-29T06:19:22Z,CLOSED,False,105,18,5,https://github.com/trofi,vernum: move version-string-to-vernum converter to a separate helper,1,[],https://github.com/skvadrik/re2c/pull/213,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/213#issuecomment-416836316,"No functional change. While at it added tests
to cover past failures:

""1.1"": #211
""0.14"": https://sourceforge.net/p/re2c/bugs/55/

Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","@floppym I'm going to use re2c to implement vernum function (as we do with lexer, option parser and configuration parser). This will allow some flexibility and better error handling.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,213,2018-08-28T23:02:14Z,2018-08-29T06:19:22Z,2018-08-29T06:19:22Z,CLOSED,False,105,18,5,https://github.com/trofi,vernum: move version-string-to-vernum converter to a separate helper,1,[],https://github.com/skvadrik/re2c/pull/213,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/213#issuecomment-416837776,"No functional change. While at it added tests
to cover past failures:

""1.1"": #211
""0.14"": https://sourceforge.net/p/re2c/bugs/55/

Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","@trofi  Pulled, thank you! c17fa5a
It's good to have a test.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,216,2018-09-04T19:06:19Z,2018-09-04T19:49:47Z,2018-09-04T19:50:01Z,MERGED,True,1,1,1,https://github.com/trofi,.travis.yml: run all tests behind 'make check',1,[],https://github.com/skvadrik/re2c/pull/216,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/216,Signed-off-by: Sergei Trofimovich slyfox@gentoo.org,Signed-off-by: Sergei Trofimovich slyfox@gentoo.org,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,216,2018-09-04T19:06:19Z,2018-09-04T19:49:47Z,2018-09-04T19:50:01Z,MERGED,True,1,1,1,https://github.com/trofi,.travis.yml: run all tests behind 'make check',1,[],https://github.com/skvadrik/re2c/pull/216,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/216#issuecomment-418495638,Signed-off-by: Sergei Trofimovich slyfox@gentoo.org,Thank you!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,217,2018-09-04T19:17:14Z,2018-09-04T19:42:51Z,2018-09-04T19:43:13Z,MERGED,True,13,3,3,https://github.com/trofi,__alltest.sh: add clang's -fsanitize=memory flavour,1,[],https://github.com/skvadrik/re2c/pull/217,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/217,"Bug: #215
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","Bug: #215
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,217,2018-09-04T19:17:14Z,2018-09-04T19:42:51Z,2018-09-04T19:43:13Z,MERGED,True,13,3,3,https://github.com/trofi,__alltest.sh: add clang's -fsanitize=memory flavour,1,[],https://github.com/skvadrik/re2c/pull/217,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/217#issuecomment-418493570,"Bug: #215
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","Pulled, thanks. :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,218,2018-09-04T21:07:16Z,2019-12-27T20:23:22Z,2019-12-27T20:23:42Z,MERGED,True,8,1,1,https://github.com/trofi,.travis.yml: add sanitizers into test matrix,1,[],https://github.com/skvadrik/re2c/pull/218,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/218,"Bug: #215
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","Bug: #215
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,218,2018-09-04T21:07:16Z,2019-12-27T20:23:22Z,2019-12-27T20:23:42Z,MERGED,True,8,1,1,https://github.com/trofi,.travis.yml: add sanitizers into test matrix,1,[],https://github.com/skvadrik/re2c/pull/218,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/218#issuecomment-569339930,"Bug: #215
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",Thank you! ;),True,{'LAUGH': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,220,2018-09-29T21:16:10Z,2018-09-29T21:29:35Z,2018-09-29T21:32:16Z,MERGED,True,7,2,1,https://github.com/trofi,src/dfa/dfa.h: simplify constructor to avoid g++-3.4 bug,1,[],https://github.com/skvadrik/re2c/pull/220,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/220,"On g++-3.4.6 re2c tests SIGSEGVed due to use of uninitialized data:
$ valgrind ... ./re2c -8 a.re -o foo.c
Conditional jump or move depends on uninitialised value(s)
   at 0x432F23: re2c::tcpool_t::insert(re2c::tcmd_t const*) (tcmd.cc:202)
   by 0x421FDA: re2c::freeze_tags(re2c::dfa_t&) (freeze.cc:45)
   by 0x43A7FF: re2c::ast_to_dfa(re2c::spec_t const&, re2c::Output&) (compile.cc:88)
   by 0x43B052: push_back (stl_iterator.h:614)
   by 0x43B052: re2c::compile(re2c::Scanner&, re2c::Output&, re2c::Opt&) (???:0)
   by 0x449D29: main (main.cc:31)
 Uninitialised value was created by a heap allocation
   at 0x403252F: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
   by 0x42FC9E: re2c::find_state(re2c::determ_context_t&) (dfa.h:37)
   by 0x429BD9: re2c::dfa_t::dfa_t(re2c::nfa_t const&, re2c::opt_t const*, std::string const&, re2c::Warn&) (determinization.cc:56)
   by 0x43A76C: re2c::ast_to_dfa(re2c::spec_t const&, re2c::Output&) (compile.cc:69)
   by 0x43B052: push_back (stl_iterator.h:614)
   by 0x43B052: re2c::compile(re2c::Scanner&, re2c::Output&, re2c::Opt&) (???:0)
   by 0x449D29: main (main.cc:31)

the prolme here arose in default array constructor:
     explicit dfa_state_t(size_t nchars)
         : // ...
         , tcmd(new tcmd_t*[nchars + 2]()) // +2 for final and fallback epsilon-transitions
         // ...
g++-3.4.6 can't figure out zero-initialization rule (likely a gcc bug).
The change uses non-initializing new[] and memset() instead.
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","On g++-3.4.6 re2c tests SIGSEGVed due to use of uninitialized data:
$ valgrind ... ./re2c -8 a.re -o foo.c
Conditional jump or move depends on uninitialised value(s)
   at 0x432F23: re2c::tcpool_t::insert(re2c::tcmd_t const*) (tcmd.cc:202)
   by 0x421FDA: re2c::freeze_tags(re2c::dfa_t&) (freeze.cc:45)
   by 0x43A7FF: re2c::ast_to_dfa(re2c::spec_t const&, re2c::Output&) (compile.cc:88)
   by 0x43B052: push_back (stl_iterator.h:614)
   by 0x43B052: re2c::compile(re2c::Scanner&, re2c::Output&, re2c::Opt&) (???:0)
   by 0x449D29: main (main.cc:31)
 Uninitialised value was created by a heap allocation
   at 0x403252F: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
   by 0x42FC9E: re2c::find_state(re2c::determ_context_t&) (dfa.h:37)
   by 0x429BD9: re2c::dfa_t::dfa_t(re2c::nfa_t const&, re2c::opt_t const*, std::string const&, re2c::Warn&) (determinization.cc:56)
   by 0x43A76C: re2c::ast_to_dfa(re2c::spec_t const&, re2c::Output&) (compile.cc:69)
   by 0x43B052: push_back (stl_iterator.h:614)
   by 0x43B052: re2c::compile(re2c::Scanner&, re2c::Output&, re2c::Opt&) (???:0)
   by 0x449D29: main (main.cc:31)

the prolme here arose in default array constructor:
     explicit dfa_state_t(size_t nchars)
         : // ...
         , tcmd(new tcmd_t*[nchars + 2]()) // +2 for final and fallback epsilon-transitions
         // ...
g++-3.4.6 can't figure out zero-initialization rule (likely a gcc bug).
The change uses non-initializing new[] and memset() instead.
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,220,2018-09-29T21:16:10Z,2018-09-29T21:29:35Z,2018-09-29T21:32:16Z,MERGED,True,7,2,1,https://github.com/trofi,src/dfa/dfa.h: simplify constructor to avoid g++-3.4 bug,1,[],https://github.com/skvadrik/re2c/pull/220,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/220#issuecomment-425676899,"On g++-3.4.6 re2c tests SIGSEGVed due to use of uninitialized data:
$ valgrind ... ./re2c -8 a.re -o foo.c
Conditional jump or move depends on uninitialised value(s)
   at 0x432F23: re2c::tcpool_t::insert(re2c::tcmd_t const*) (tcmd.cc:202)
   by 0x421FDA: re2c::freeze_tags(re2c::dfa_t&) (freeze.cc:45)
   by 0x43A7FF: re2c::ast_to_dfa(re2c::spec_t const&, re2c::Output&) (compile.cc:88)
   by 0x43B052: push_back (stl_iterator.h:614)
   by 0x43B052: re2c::compile(re2c::Scanner&, re2c::Output&, re2c::Opt&) (???:0)
   by 0x449D29: main (main.cc:31)
 Uninitialised value was created by a heap allocation
   at 0x403252F: operator new[](unsigned long) (in /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so)
   by 0x42FC9E: re2c::find_state(re2c::determ_context_t&) (dfa.h:37)
   by 0x429BD9: re2c::dfa_t::dfa_t(re2c::nfa_t const&, re2c::opt_t const*, std::string const&, re2c::Warn&) (determinization.cc:56)
   by 0x43A76C: re2c::ast_to_dfa(re2c::spec_t const&, re2c::Output&) (compile.cc:69)
   by 0x43B052: push_back (stl_iterator.h:614)
   by 0x43B052: re2c::compile(re2c::Scanner&, re2c::Output&, re2c::Opt&) (???:0)
   by 0x449D29: main (main.cc:31)

the prolme here arose in default array constructor:
     explicit dfa_state_t(size_t nchars)
         : // ...
         , tcmd(new tcmd_t*[nchars + 2]()) // +2 for final and fallback epsilon-transitions
         // ...
g++-3.4.6 can't figure out zero-initialization rule (likely a gcc bug).
The change uses non-initializing new[] and memset() instead.
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","Merged, thank you. :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,222,2018-10-16T19:39:41Z,2018-10-16T22:36:16Z,2018-10-16T22:37:23Z,MERGED,True,1,1,1,https://github.com/trofi,configure.ac: enable xz tarballs instead of gzip by default,1,[],https://github.com/skvadrik/re2c/pull/222,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/222,"xz compresses twice as good as gzip on re2c sources:
$ ls -lh *1.1.1*
4,8M re2c-1.1.1.tar.gz
2,5M re2c-1.1.1.tar.xz

Switch make dist to xz by default. gzipis still available viamake dist-gzip`.
Reported-by: rofl0r
Bug: #221
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","xz compresses twice as good as gzip on re2c sources:
$ ls -lh *1.1.1*
4,8M re2c-1.1.1.tar.gz
2,5M re2c-1.1.1.tar.xz

Switch make dist to xz by default. gzipis still available viamake dist-gzip`.
Reported-by: rofl0r
Bug: #221
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,222,2018-10-16T19:39:41Z,2018-10-16T22:36:16Z,2018-10-16T22:37:23Z,MERGED,True,1,1,1,https://github.com/trofi,configure.ac: enable xz tarballs instead of gzip by default,1,[],https://github.com/skvadrik/re2c/pull/222,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/222#issuecomment-430425453,"xz compresses twice as good as gzip on re2c sources:
$ ls -lh *1.1.1*
4,8M re2c-1.1.1.tar.gz
2,5M re2c-1.1.1.tar.xz

Switch make dist to xz by default. gzipis still available viamake dist-gzip`.
Reported-by: rofl0r
Bug: #221
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","Thank you @trofi , a very elegant fix! Merged.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,223,2018-10-17T08:24:31Z,2018-10-17T22:29:07Z,2018-10-17T22:29:21Z,MERGED,True,1,1,1,https://github.com/metab0t,Fix typo,1,[],https://github.com/skvadrik/re2c/pull/223,https://github.com/metab0t,1,https://github.com/skvadrik/re2c/pull/223,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,223,2018-10-17T08:24:31Z,2018-10-17T22:29:07Z,2018-10-17T22:29:21Z,MERGED,True,1,1,1,https://github.com/metab0t,Fix typo,1,[],https://github.com/skvadrik/re2c/pull/223,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/223#issuecomment-430811850,,"Merged, thanks!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,224,2018-10-22T22:09:05Z,2018-10-22T22:33:03Z,2018-10-22T22:34:31Z,MERGED,True,11,1,1,https://github.com/trofi,src/dfa/closure_posix.cc: pack() tweaks,2,[],https://github.com/skvadrik/re2c/pull/224,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/224,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,224,2018-10-22T22:09:05Z,2018-10-22T22:33:03Z,2018-10-22T22:34:31Z,MERGED,True,11,1,1,https://github.com/trofi,src/dfa/closure_posix.cc: pack() tweaks,2,[],https://github.com/skvadrik/re2c/pull/224,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/224#issuecomment-432014946,,Merged! :),True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,230,2018-11-21T20:23:17Z,2018-11-21T21:54:59Z,2018-11-21T22:15:25Z,MERGED,True,0,2,1,https://github.com/sergeyklay,Changes for upcoming Travis' infra migration,1,[],https://github.com/skvadrik/re2c/pull/230,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/230,See: https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration,See: https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,230,2018-11-21T20:23:17Z,2018-11-21T21:54:59Z,2018-11-21T22:15:25Z,MERGED,True,0,2,1,https://github.com/sergeyklay,Changes for upcoming Travis' infra migration,1,[],https://github.com/skvadrik/re2c/pull/230,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/230#issuecomment-440822935,See: https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration,"Merged, thank you!",True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,240,2019-01-13T21:22:46Z,2019-01-13T21:24:42Z,2019-01-13T21:34:01Z,CLOSED,False,2,2,1,https://github.com/mwberry,[#239] Uses --storable-state argument in push model example,1,[],https://github.com/skvadrik/re2c/pull/240,https://github.com/mwberry,1,https://github.com/skvadrik/re2c/pull/240,"Fixes issue #239. The mistaken '--input custom' argument was replaced
with --storable-state. Additionally a URL typo was fixed","Fixes issue #239. The mistaken '--input custom' argument was replaced
with --storable-state. Additionally a URL typo was fixed",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,240,2019-01-13T21:22:46Z,2019-01-13T21:24:42Z,2019-01-13T21:34:01Z,CLOSED,False,2,2,1,https://github.com/mwberry,[#239] Uses --storable-state argument in push model example,1,[],https://github.com/skvadrik/re2c/pull/240,https://github.com/mwberry,2,https://github.com/skvadrik/re2c/pull/240#issuecomment-453866901,"Fixes issue #239. The mistaken '--input custom' argument was replaced
with --storable-state. Additionally a URL typo was fixed","Whoops, you already fixed. Also it was issue #239!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,240,2019-01-13T21:22:46Z,2019-01-13T21:24:42Z,2019-01-13T21:34:01Z,CLOSED,False,2,2,1,https://github.com/mwberry,[#239] Uses --storable-state argument in push model example,1,[],https://github.com/skvadrik/re2c/pull/240,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/240#issuecomment-453867571,"Fixes issue #239. The mistaken '--input custom' argument was replaced
with --storable-state. Additionally a URL typo was fixed",But your fix was perfect anyway. :D,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,255,2019-08-12T10:44:53Z,2019-08-13T05:47:33Z,2019-08-13T05:47:33Z,MERGED,True,21,21,12,https://github.com/jcfp,fix documentation typos,1,[],https://github.com/skvadrik/re2c/pull/255,https://github.com/jcfp,1,https://github.com/skvadrik/re2c/pull/255,came across these while working on updating the debian package,came across these while working on updating the debian package,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,256,2019-08-13T04:29:22Z,2019-08-13T05:54:05Z,2019-08-13T05:59:56Z,MERGED,True,1,0,1,https://github.com/certik,Package LICENSE file in the release tarball,1,[],https://github.com/skvadrik/re2c/pull/256,https://github.com/certik,1,https://github.com/skvadrik/re2c/pull/256,"This is important when re2c is packaged in distributions, so that one can
quickly check what license the re2c is distributed under. Distributions
typically use the release tarball, not the git repository, and so this commit
puts the LICENSE file into the release tarball also.","This is important when re2c is packaged in distributions, so that one can
quickly check what license the re2c is distributed under. Distributions
typically use the release tarball, not the git repository, and so this commit
puts the LICENSE file into the release tarball also.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,256,2019-08-13T04:29:22Z,2019-08-13T05:54:05Z,2019-08-13T05:59:56Z,MERGED,True,1,0,1,https://github.com/certik,Package LICENSE file in the release tarball,1,[],https://github.com/skvadrik/re2c/pull/256,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/256#issuecomment-520699662,"This is important when re2c is packaged in distributions, so that one can
quickly check what license the re2c is distributed under. Distributions
typically use the release tarball, not the git repository, and so this commit
puts the LICENSE file into the release tarball also.","Pulled, thank you!",True,{'THUMBS_UP': ['https://github.com/certik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,258,2019-08-13T20:54:51Z,2019-08-14T06:18:19Z,2019-08-17T20:53:08Z,MERGED,True,6,2,1,https://github.com/lamby,Make the build reproducible,1,[],https://github.com/skvadrik/re2c/pull/258,https://github.com/lamby,1,https://github.com/skvadrik/re2c/pull/258,"Whilst working on the Reproducible Builds effort we noticed that re2c could not be built reproducibly. This is because it used the current build date in the manual page and was originally filed in Debian as #934697.
This patch uses the SOURCE_DATE_EPOCH environment variable.","Whilst working on the Reproducible Builds effort we noticed that re2c could not be built reproducibly. This is because it used the current build date in the manual page and was originally filed in Debian as #934697.
This patch uses the SOURCE_DATE_EPOCH environment variable.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,258,2019-08-13T20:54:51Z,2019-08-14T06:18:19Z,2019-08-17T20:53:08Z,MERGED,True,6,2,1,https://github.com/lamby,Make the build reproducible,1,[],https://github.com/skvadrik/re2c/pull/258,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/258#issuecomment-521119807,"Whilst working on the Reproducible Builds effort we noticed that re2c could not be built reproducibly. This is because it used the current build date in the manual page and was originally filed in Debian as #934697.
This patch uses the SOURCE_DATE_EPOCH environment variable.","@lamby Merged, thank you.
However, I need to make it compatible with POSIX date, as re2c is built on other platforms as well. Can you suggest a fix? From the guidelines:

If you need to support BSD date as well you should fallback to trying ther -r seconds timestamp variant:

DATE_FMT=""%Y-%m-%d""
SOURCE_DATE_EPOCH=""${SOURCE_DATE_EPOCH:-$(date +%s)}""
BUILD_DATE=$(date -u -d ""@$SOURCE_DATE_EPOCH"" ""+$DATE_FMT"" 2>/dev/null || date -u -r ""$SOURCE_DATE_EPOCH"" ""+$DATE_FMT"" 2>/dev/null || date -u ""+$DATE_FMT"")

This is not completely POSIX-compliant as well (because of the -d and -r options).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,258,2019-08-13T20:54:51Z,2019-08-14T06:18:19Z,2019-08-17T20:53:08Z,MERGED,True,6,2,1,https://github.com/lamby,Make the build reproducible,1,[],https://github.com/skvadrik/re2c/pull/258,https://github.com/lamby,3,https://github.com/skvadrik/re2c/pull/258#issuecomment-521290540,"Whilst working on the Reproducible Builds effort we noticed that re2c could not be built reproducibly. This is because it used the current build date in the manual page and was originally filed in Debian as #934697.
This patch uses the SOURCE_DATE_EPOCH environment variable.","IIRC whilst you are entirely correct about the lack of d and -r is POSIX there is, unfortunately, no way around this. POSIX is minimal after all. I suspect one of the ||/OR'd will capture 99.99999% of platforms. I guess if you are still worried then you could do something like an additional suffix of || echo ""[some kind of fallback]""",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,258,2019-08-13T20:54:51Z,2019-08-14T06:18:19Z,2019-08-17T20:53:08Z,MERGED,True,6,2,1,https://github.com/lamby,Make the build reproducible,1,[],https://github.com/skvadrik/re2c/pull/258,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/258#issuecomment-522269815,"Whilst working on the Reproducible Builds effort we noticed that re2c could not be built reproducibly. This is because it used the current build date in the manual page and was originally filed in Debian as #934697.
This patch uses the SOURCE_DATE_EPOCH environment variable.","@lamby Thanks, I think you are right about 99.99999%. However, I realized that PACKAGE_DATE was used only in one place (in the manpage) and it was not really needed there. So it was easier to get rid of it altogether: 7648f8d (thanks to @trofi  for suggesting the idea).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,265,2019-12-27T20:27:23Z,2019-12-27T21:19:21Z,2019-12-27T21:19:33Z,MERGED,True,3,0,1,https://github.com/trofi,.travis.yml: enable ccache to speed up incremental builds,1,[],https://github.com/skvadrik/re2c/pull/265,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/265,"I'm not sure what would be the actual benefit. Let's try it in action!
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org","I'm not sure what would be the actual benefit. Let's try it in action!
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,265,2019-12-27T20:27:23Z,2019-12-27T21:19:21Z,2019-12-27T21:19:33Z,MERGED,True,3,0,1,https://github.com/trofi,.travis.yml: enable ccache to speed up incremental builds,1,[],https://github.com/skvadrik/re2c/pull/265,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/265#issuecomment-569347588,"I'm not sure what would be the actual benefit. Let's try it in action!
Signed-off-by: Sergei Trofimovich slyfox@gentoo.org",Thank you!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,271,2020-03-05T09:08:57Z,2020-03-05T10:24:06Z,2020-03-11T17:33:39Z,MERGED,True,1,1,1,https://github.com/samebchase,Fix typo in README.md,1,[],https://github.com/skvadrik/re2c/pull/271,https://github.com/samebchase,1,https://github.com/skvadrik/re2c/pull/271,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,271,2020-03-05T09:08:57Z,2020-03-05T10:24:06Z,2020-03-11T17:33:39Z,MERGED,True,1,1,1,https://github.com/samebchase,Fix typo in README.md,1,[],https://github.com/skvadrik/re2c/pull/271,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/271#issuecomment-595150817,,"Pulled, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/ligfx,1,https://github.com/skvadrik/re2c/pull/275,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.",True,"{'HEART': ['https://github.com/sergeyklay', 'https://github.com/meme', 'https://github.com/nightlark', 'https://github.com/certik'], 'HOORAY': ['https://github.com/nightlark'], 'ROCKET': ['https://github.com/nightlark']}"
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/275#issuecomment-606933111,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","Thanks for your effort! I will do my best to integrate it, but there are a few problems that need to be solved before merging. (And I may discover some more as I try various build scenarios and configurations.) If you don't feel like working on this, many thanks for your work anyway. Here is what I found so far:


Autogenerated lexers and parser contain absolute paths to .re/.ypp file in the #line directives. This is unacceptable as absolute paths are specific to the environment of the developer who happened to regenerate these files last. This should probably be fixed by passing a relative path to the .re/.ypp file when generating lexers and parser (but I have some difficulties as set(CMAKE_USE_RELATIVE_PATHS ON) doesn't seem to work).


A typo in target_link_libraries: using re2c instead of libre2c. Fixed in the obvious way:


--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -344,6 +344,6 @@ if (RE2C_BUILD_LIBS)
   include(CheckIncludeFileCXX)
   check_include_file_cxx(""re2/re2.h"" HAVE_RE2_H)
   if(HAVE_RE2_H)
-    target_link_libraries(bench_libre2c re2c)
+    target_link_libraries(bench_libre2c libre2c)
   endif()
 endif()


Sometimes intermediate build directories are not created and the commands that write to them fail (always reproducible with make -j1). Fixed by adding ${CMAKE_COMMAND} -E make_directory in a few places:

--- a/cmake/Re2cBootstrapLexer.cmake
+++ b/cmake/Re2cBootstrapLexer.cmake
@@ -32,8 +32,10 @@ function(re2c_bootstrap_lexer re_file cc_file)
   if(NOT TARGET re2c)
     message(FATAL_ERROR ""'re2c' is not a valid target"")
   endif()
+  get_filename_component(parent_dir ""${cc_file}"" DIRECTORY)
   add_custom_command(
     OUTPUT ${outputs}
+    COMMAND ${CMAKE_COMMAND} -E make_directory ${parent_dir}
     COMMAND
       cmake -Dre2c=""$<TARGET_FILE:re2c>"" -Dsource_dir=""${CMAKE_CURRENT_SOURCE_DIR}""
       -Dre_file=""${re_file}"" -Dcc_file=""${cc_file}"" -Dh_file=""${h_file}""
--- a/cmake/Re2cBootstrapParser.cmake
+++ b/cmake/Re2cBootstrapParser.cmake
@@ -1,7 +1,9 @@
 function(re2c_bootstrap_parser ypp_file cc_file h_file)
+  get_filename_component(parser_dir ""${cc_file}"" DIRECTORY)
   if (BISON_EXECUTABLE)
     add_custom_command(
       OUTPUT ${cc_file} ${h_file}
+      COMMAND cmake -E make_directory ""${parser_dir}""
       COMMAND ""${BISON_EXECUTABLE}"" --defines=""${h_file}"" -o ""${cc_file}"" ""${CMAKE_CURRENT_SOURCE_DIR}/${ypp_file}""
       COMMAND cmake -E copy_if_different ""${cc_file}"" ""${CMAKE_CURRENT_SOURCE_DIR}/bootstrap/${cc_file}""
       COMMAND cmake -E copy_if_different ""${h_file}"" ""${CMAKE_CURRENT_SOURCE_DIR}/bootstrap/${h_file}""
@@ -10,9 +12,9 @@ function(re2c_bootstrap_parser ypp_file cc_file h_file)
   else()
     add_custom_command(
       OUTPUT ${cc_file} ${h_file}
-      COMMAND cmake -E make_directory ""src/parse""
-      COMMAND cmake -E copy ""${CMAKE_CURRENT_SOURCE_DIR}/bootstrap/${cc_file}"" ""src/parse""
-      COMMAND cmake -E copy ""${CMAKE_CURRENT_SOURCE_DIR}/bootstrap/${h_file}"" ""src/parse""
+      COMMAND cmake -E make_directory ""${parser_dir}""
+      COMMAND cmake -E copy ""${CMAKE_CURRENT_SOURCE_DIR}/bootstrap/${cc_file}"" ""${parser_dir}""
+      COMMAND cmake -E copy ""${CMAKE_CURRENT_SOURCE_DIR}/bootstrap/${h_file}"" ""${parser_dir}""
       DEPENDS
         ""${CMAKE_CURRENT_SOURCE_DIR}/bootstrap/${cc_file}""
         ""${CMAKE_CURRENT_SOURCE_DIR}/bootstrap/${h_file}""


Use 4-space indentation everywhere (currently there is a mix of tabs and spaces).


Add a list of all the configurations you used to test the new build system, for example cmake -DRE2C_BUILD_LIBS=on -DCMAKE_BUILD_TYPE=Debug -B build && make -C build (these are helpful not only for historical reasons, but also as a hint to people trying to build new re2c version and not familiar with cmake).


Need a way to build shared library libre2c.so. Currently I can only build static library, and it is named liblibre2c.a.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/ligfx,3,https://github.com/skvadrik/re2c/pull/275#issuecomment-607522191,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","@skvadrik , thanks for the thoughtful review comments.


Autogenerated lexers and parser contain absolute paths to .re/.ypp file in the #line directives. Fixed!


A typo in target_link_libraries: using re2c instead of libre2c Ah, this was actually supposed to link to RE2. I rewrote this part as it wasn't working correctly anyways (check_include_file_cxx needs explicit include directories), and checked that it works against a system install of RE2.


Sometimes intermediate build directories are not created and the commands that write to them fail (always reproducible with make -j1) I was able to reproduce this behavior. I added the make_directory commands as you suggested, and can no longer reproduce it.


Use 4-space indentation everywhere Done


Need a way to build shared library libre2c.so. Currently I can only build static library, and it is named liblibre2c.a. Added logic to build both libre2c and libre2c_static targets, with appropriate filenames, depending on the value of CMake's BUILD_SHARED_LIBS. If BUILD_SHARED_LIBS is uninitialized (the default), it builds both. Otherwise, it will only build one or the other. Works fine on my Mac (an install has both libraries), haven't checked on Windows yet.



Add a list of all the configurations you used to test the new build system, for example cmake -DRE2C_BUILD_LIBS=on -DCMAKE_BUILD_TYPE=Debug -B build && make -C build (these are helpful not only for historical reasons, but also as a hint to people trying to build new re2c version and not familiar with cmake)._

Can you explain more what you'd like here? By my count, there are over 100 unique configurations. I've tested the different features separately (with and without Bison, with and without docs enabled, with and without library enabled, with and without RE2, dual libraries/shared-only/static-only), with Makefiles and Ninja.
The general way to invoke CMake for this CMakeLists.txt looks like this:
mkdir build
cd build
cmake .. \
  [-DCMAKE_BUILD_TYPE=Debug|Release|RelWithDebInfo] \
  [-DRE2C_REBUILD_DOCS=YES] \
  [-DRE2C_BUILD_LIBS=YES [-DBUILD_SHARED_LIBS=YES|NO]] \
  [-G Ninja]
make -j # or ninja, if ""-G Ninja"" was used
On Windows, install Visual Studio's ""C++ CMake Tools for Windows"", then open the folder. It will configure CMake with the default settings. You can use the CMake settings editor from there to edit the configuration.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/275#issuecomment-608150855,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","Great, thank you! Very good going!
Meanwhile I found a few more things:


Need to fix absolute paths in #line directives for parsers, in the same way as you fixed them for lexers.


Need to keep the dependency of main lexer on the generated parser (see the comment in Makefile.am ""lexer depends on bison-generated header"").


Need to copy the autogenerated lexer header (if any) to the bootstrap files (currently only the .cc file is copied).


All autogenerated sources should be generated before anything else is built (sort of pre-build order only dependency). Otherwise the bootstrap lexer for libre2c is always regenerated (on a fresh build from unmodified sources), because re2c happens to be built by the time the the lexer for libre2c is generated. In automake there is a variable BUILT_SOURCES (see the comment in Makefile.am: ""custom rules create headers and must go before normal rules"").


Currently the compiler flags specified in CMakeLists.txt take override whatever is passed in -DCMAKE_CXX_FLAGS on the command-line during configuration; this is wrong. Command-line flags should be appended, not prepended, so that they take precedence (otherwise it is not possible to override the default flags without modifying the source code).


Currently I cannot build shared libre2c because of a missing -fPIC somewhere (I get an error from ld: relocation R_X86_64_PC32 against symbol _ZN4re2c4Code5flistE can not be used when making a shared object; recompile with -fPIC). I haven't looked into it yet, but I wonder if you also get this.


What about cross-compilation? In autotools is as simple as passing --host i686-w64-mingw32 to configure. In cmake I think it requires something like this.


In general, there is a bunch of scripts __build*.sh in the root directory which build re2c in various configurations; they all will need to be ported to cmake one way or another.


To answer your question:

Can you explain more what you'd like here? By my count, there are over 100 unique configurations.

Sure, I by no means meant testing all of them, just a few different configurations that are often used:

with or without debug
with or without libre2c (static and shared)
with or without docs
passing extra flags to compiler and linker (optimizations, debug, sanitizers)
overriding compiler (e.g. using clang++ instead of g++, or using include-what-you-use, etc.)
cross-compilation (and running tests under wine)

It's good that you keep separate commits while working on the patch set, but before merging I think all commits should be squashed in one with a descriptive commit message that lists a few of the above configure/build scenarios (what you wrote above, ""The general way to invoke CMake ..."", is also very useful information). Not that it can't be found elsewhere (e.g. in re2c release notes), but some people may read the commits instead of release notes.
Thanks again for what you've done already.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/ligfx,5,https://github.com/skvadrik/re2c/pull/275#issuecomment-608215465,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","Need to fix absolute paths in #line directives for parsers, in the same way as you fixed them for lexers. Ah, missed that because the version of Bison on my system is so old the files have significant changes anyways. Fixed.



Need to keep the dependency of main lexer on the generated parser (see the comment in Makefile.am ""lexer depends on bison-generated header"").

Can you explain this more? I tested it, and when touching the bison source the parser is first rebuilt, then the lexer code is recompiled. I think CMake picks up the dependency automatically after the first build, and on the first build all generated files are generated before object files are compiled.


Need to copy the autogenerated lexer header (if any) to the bootstrap files (currently only the .cc file is copied). Fixed.



All autogenerated sources should be generated before anything else is built (sort of pre-build order only dependency). Otherwise the bootstrap lexer for libre2c is always regenerated (on a fresh build from unmodified sources), because re2c happens to be built by the time the the lexer for libre2c is generated. In automake there is a variable BUILT_SOURCES (see the comment in Makefile.am: ""custom rules create headers and must go before normal rules"").

I fixed it to generate ver_to_vernum.cc before re2c and libre2c. Unfortunately, this involves a bit of a hack, since CMake detects a cyclical dependency between ver_to_vernum.cc and re2c: we have to guess the re2c executable location and name manually ${CMAKE_CURRENT_BINARY_DIR}/re2c${CMAKE_EXECUTABLE_SUFFIX}
I thought about adding the rest of the generated files to the object library, but ver_to_vernum.cc is the only one shared between re2c and libre2c.



Currently the compiler flags specified in CMakeLists.txt take override whatever is passed in -DCMAKE_CXX_FLAGS on the command-line during configuration; this is wrong. Command-line flags should be appended, not prepended, so that they take precedence (otherwise it is not possible to override the default flags without modifying the source code).

I'm not sure what to do here— this is how standard CMake works. Does Autotools do something different? When would you want to override default flags? AFAICT they're harmless warnings.



Currently I cannot build shared libre2c because of a missing -fPIC somewhere

Think I fixed this... my macOS box is building everything PIC by default. Can you check on your computer that this works now?



What about cross-compilation? In autotools is as simple as passing --host i686-w64-mingw32 to configure. In cmake I think it requires something like this.

Configuring for cross compilation varies depending on the target. The standard way is to use/write a toolchain file, as indicated in that link. Usually, platforms which require cross-compilation will come with toolchain files (like Android). I believe the thinking with Windows is, with CMake you can just compile on a Windows build box directly. That said, the simplest way to compile for mingw on my system is:
cmake .. \
    -DCMAKE_SYSTEM_NAME=Windows \
    -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc \
    -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++
but probably has issues around finding libraries/packages/tools etc that I haven't thought about.



In general, there is a bunch of scripts __build*.sh in the root directory which build re2c in various configurations; they all will need to be ported to cmake one way or another.

Are you thinking of moving entirely to CMake with this PR? I was thinking it would live alongside Autotools for a bit, to flesh out any bugs/gotchas.



Sure, I by no means meant testing all of them, just a few different configurations that are often used

I can write command lines for each of the scenarios you describe (except cross-compilation) but I think I'm missing the point here? I added a few more of these scenarios to the general usage bit, below.



It's good that you keep separate commits while working on the patch set, but before merging I think all commits should be squashed in one with a descriptive commit message that lists a few of the above configure/build scenarios

Merged the commits, and added this commit message:
 Add a CMake build system

 Invoke it like this on Unix:

 mkdir build
 cd build
 cmake .. \
   [-DCMAKE_C_FLAGS=...] [-DCMAKE_CXX_FLAGS=...] \
   [-DCMAKE_EXE_LINKER_FLAGS=...] [-DCMAKE_SHARED_LINKER_FLAGS=...] \
   [-DCMAKE_C_COMPILER=...] [-DCMAKE_CXX_COMPILER=...] \
   [-DCMAKE_BUILD_TYPE=Debug|Release|RelWithDebInfo] \
   [-DRE2C_REBUILD_DOCS=YES] \
   [-DRE2C_BUILD_LIBS=YES [-DBUILD_SHARED_LIBS=YES|NO]] \
   [-G Ninja]
 make -j # or ninja, if ""-G Ninja"" was used

 Or on Windows, install Visual Studio's CMake tools and then open this folder.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/skvadrik,6,https://github.com/skvadrik/re2c/pull/275#issuecomment-609075598,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","Almost there!
I have two things to fix (and for both I have suggestions how to fix them), and then I can merge.

First, can we use simpler logic for dealing with shared/static libraries? Maybe I confused you the previous time. but what I think is needed is to always build static libraries (and link tests/benchmarks against them), but to also have optional support for building shared libraries. In other words, this:

    # optionally build shared libraries
    if (RE2C_BUILD_LIBS_SHARED)
        add_library(libre2c_shared SHARED ${libre2c_sources})
        if (UNIX)
            install(TARGETS libre2c_shared)
        endif()
        set_target_properties(libre2c_shared PROPERTIES OUTPUT_NAME ""re2c"")
    endif()

    # build static libraries
    add_library(libre2c_static STATIC ${libre2c_sources})
    if (UNIX)
        install(TARGETS libre2c_static)
    endif()
    set_target_properties(libre2c_static PROPERTIES OUTPUT_NAME ""re2c"")
To be used like cmake ... [-DRE2C_BUILD_LIBS [-DRE2C_BUILD_LIBS_SHARED]]. I also changed library names a bit (simplified to be always libre2c.<suffix>) and tested on Linix, maybe you will find that I broke something for Windows or macOS.

Second thing is about specifying CMAKE_CXX_FLAGS on command line when configuring re2c. I'm absolutely convinced that there should be a way to override default flags without interfering with the build system. The default flags may not work for any number of reasons (even harmless warnings may suddenly change into fatal build errors on a compiler upgrade, and we also set optimization level, so one should be able to override it with something else). To fix this in a quick and somewhat hacky way I suggest this in cmake/Re2cTryCXXFlag.cmake:

...
function(try_cxxflag flag)
    set(varname ""cxxflag_${flag}"")
    string(REPLACE ""="" ""_"" varname ""${varname}"")
    check_cxx_compiler_flag(""${flag}"" ${varname})
    if(${varname})
        set(CMAKE_CXX_FLAGS ""${flag} ${CMAKE_CXX_FLAGS}"" PARENT_SCOPE)
        foreach(implied_flag IN LISTS ARGN)
            set(CMAKE_CXX_FLAGS ""${implied_flag} ${CMAKE_CXX_FLAGS}"" PARENT_SCOPE)
        endforeach()
    endif()
endfunction()
This way default flags are prepended, not appended. Later on this can be changed to avoid reversing the list of default flags.


Need to keep the dependency of main lexer on the generated parser (see the comment in Makefile.am ""lexer depends on bison-generated header"").

Can you explain this more? I tested it, and when touching the bison source the parser is first rebuilt, then the lexer code is recompiled. I think CMake picks up the dependency automatically after the first build, and on the first build all generated files are generated before object files are compiled.

I thought it over, and I agree with you reasoning. This was probably needed before we enforced the ordering requirement that all generated sources must be built before any compilation starts.


Currently I cannot build shared libre2c because of a missing -fPIC somewhere

Think I fixed this... my macOS box is building everything PIC by default. Can you check on your computer that this works now?

Thanks, works for me now. What did you fix?

Configuring for cross compilation varies depending on the target. The standard way is to use/write a toolchain file, as indicated in that link. Usually, platforms which require cross-compilation will come with toolchain files (like Android). I believe the thinking with Windows is, with CMake you can just compile on a Windows build box directly. That said, the simplest way to compile for mingw on my system is [...] but probably has issues around finding libraries/packages/tools etc that I haven't thought about.

I found a way to do build mingw-compiled re2c and libre2c and test them under wine, so this one is solved. I took me a bit of time because linker flags -static-libgcc -static-libstdc++ and shared libraries do not play well together.

Are you thinking of moving entirely to CMake with this PR? I was thinking it would live alongside Autotools for a bit, to flesh out any bugs/gotchas.

Yes, maybe even until the next release cycle to give maintainers more time. But as a paranoid maintainer I don't want to take responsibility for anything that I cannot maintain, and I certainly want cmake build system to used, tested and covered by CI, and I plan to use it myself and eventually deprecate autotools. Not because I don't like autotools --- quite the contrary, I think for Unix systems they are more elegant than cmake. But living with two build systems just won't work in the long run.

I can write command lines for each of the scenarios you describe (except cross-compilation) but I think I'm missing the point here? I added a few more of these scenarios to the general usage bit, below.

Your commit message is is quite perfect (and helped me a few times already). Just make sure you update it if you do any last-minute changes.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/ligfx,7,https://github.com/skvadrik/re2c/pull/275#issuecomment-609094986,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","First, can we use simpler logic for dealing with shared/static libraries? Maybe I confused you the previous time. but what I think is needed is to always build static libraries (and link tests/benchmarks against them), but to also have optional support for building shared libraries.

Can you explain this more?  Why does it always need to build static libraries? The built tests and benchmarks work on my system with either shared or static.
I was trying to emulate Autotools' behavior of always building both static and shared libraries, while still letting the user/parent project choose using the standard BUILD_SHARED_LIBS flag (and in the case of parent projects, always having a libre2c target to point to).


Second thing is about specifying CMAKE_CXX_FLAGS on command line when configuring re2c. I'm absolutely convinced that there should be a way to override default flags without interfering with the build system. Done. Note that specifying CMAKE_BUILD_TYPE will still append CMake's default flags to the user's flags. I did add a condition to not add the -O2 flag if a CMAKE_BUILD_TYPE is specified (mainly for pure debug builds, since you presumably don't want optimizations).


Currently I cannot build shared libre2c because of a missing -fPIC somewhere [...] Thanks, works for me now. What did you fix? I told CMake to always build position independent code with set(CMAKE_POSITION_INDEPENDENT_CODE ON).



I found a way to do build mingw-compiled re2c and libre2c and test them under wine, so this one is solved. I took me a bit of time because linker flags -static-libgcc -static-libstdc++ and shared libraries do not play well together.

How did you solve it? I would do cmake -DBUILD_SHARED_LIBS=OFF. Unfortunately, this is a case where CMake's lack of knowledge about dual shared/static libraries becomes an issue.
I could add a check for -static in the linker flags to the logic that chooses the types of library to build, if that'd be easier.




Are you thinking of moving entirely to CMake with this PR?

Yes, maybe even until the next release cycle to give maintainers more time.

Sure. Want me to update the __build_*.sh files in this PR? Or I can do them in a separate one.


Your commit message is is quite perfect (and helped me a few times already). Just make sure you update it if you do any last-minute changes. Added CMAKE_STATIC_LINKER_FLAGS to the message as well, forgot about that last time.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/skvadrik,8,https://github.com/skvadrik/re2c/pull/275#issuecomment-609397085,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","Can you explain this more? Why does it always need to build static libraries? The built tests and benchmarks work on my system with either shared or static.

I had two reasons to change the code: first, I wanted to simplify the logic, and second, I wanted to get rid of the mingw linking error in the default configuration.

I was trying to emulate Autotools' behavior of always building both static and shared libraries, while still letting the user/parent project choose using the standard BUILD_SHARED_LIBS flag (and in the case of parent projects, always having a libre2c target to point to).

Thanks for keeping close to Autotools. Your reasoning indeed makes sense.
This is the final variant that I ended up with. It behaves like your original code: build both shared and static libraries by default, but it is possible to choose either variant exclusively with BUILD_SHARED_LIBS option, and there is a top-level target alias. The only functional difference is that by default the alias points to the static library. This helps in cases like mingw (see the details below). Also I restructured the code to be (in my opinion) a bit easier to follow the logic:
    # build shared libraries
    if ((NOT DEFINED BUILD_SHARED_LIBS) OR BUILD_SHARED_LIBS)
        add_library(libre2c_shared SHARED ${libre2c_sources})
        set_target_properties(libre2c_shared PROPERTIES OUTPUT_NAME ""re2c"")
        if (UNIX)
            install(TARGETS libre2c_shared)
        endif()
    endif()

    # build static libraries
    if ((NOT DEFINED BUILD_SHARED_LIBS) OR (NOT BUILD_SHARED_LIBS))
        add_library(libre2c_static STATIC ${libre2c_sources})
        set_target_properties(libre2c_static PROPERTIES OUTPUT_NAME ""re2c"")
        if (UNIX)
            install(TARGETS libre2c_static)
        endif()
    endif()

    # define top-level aliases to either static or shared libraries (default is static)
    if (BUILD_SHARED_LIBS)
        add_library(libre2c ALIAS libre2c_shared)
    else()
        add_library(libre2c ALIAS libre2c_static)
    endif()

    ...
    target_link_libraries(test_libre2c libre2c)
    ...
    target_link_libraries(bench_libre2c libre2c)

Note that specifying CMAKE_BUILD_TYPE will still append CMake's default flags to the user's flags. I did add a condition to not add the -O2 flag if a CMAKE_BUILD_TYPE is specified (mainly for pure debug builds, since you presumably don't want optimizations).

Yes, I know that cmake appends some flags on its own when a certain build type is used. This should not be a problem, because it is possible to configure without CMAKE_BUILD_TYPE, or choose a suitable type. Thanks for adding the check for -O2, it makes sense.

I told CMake to always build position independent code with set(CMAKE_POSITION_INDEPENDENT_CODE ON).

Ah! I was grepping for -fPIC and -fPIE and didn't find anything.

How did you solve it? I would do cmake -DBUILD_SHARED_LIBS=OFF. Unfortunately, this is a case where CMake's lack of knowledge about dual shared/static libraries becomes an issue.

I was experimenting with various combinations of -static -statc-libgcc -static-libstdc++ in CMAKE_EXE_LINKER_FLAGS and CMAKE_SHARED_LINKER_FLAGS, getting either unresolved symbols from libgcc and libstdc++, or multiple definition of Unwind_SjLj_Register from libgcc_eh.a if I tried to link libgcc into shared libre2c. Curiously, multiple definition only happened for this one symbol, and only for bench_libre2c (test_libre2c linked successfully and ran without issues under wine). It could be a Mingw issue with forgetting to hide internal symbols, I'm not sure.
At first I didn't realize that I was trying to link against shared libre2c. When I realized it, I changed CMakeLists.txt to link test and benchmark against static library, and this resolved the linking problem. I was also lucky in that I had a working case to compare against (the libtool example).
My understanding is that linking with static libraries libre2c and libgcc that contain definitions of the same symbols from libgcc is fine, although probably the order of static libraries matters (unless every symbol is in its own section).

I could add a check for -static in the linker flags to the logic that chooses the types of library to build, if that'd be easier.

No, let's not add a check --- it is best to keep such workarounds out of the build system, preferably in helper scripts. Every bit of extra logic in the build system makes it harder to read and understand. This complexity is ok in cases like bootstrap, but for simple or rare cases it is better not to clutter the build rules with extra logic.
One minor fix that is needed is to do chmod +1 run_tests.sh in case of MINGW as well as UNIX.

Sure. Want me to update the _build*.sh files in this PR? Or I can do them in a separate one.

Let's do it in a follow-up commit, and let's keep the autotools scripts and write a new set of scripts for cmake. I wanted to make sure that it is possible to cover all these scenarios in principle.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/ligfx,9,https://github.com/skvadrik/re2c/pull/275#issuecomment-609449471,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","This is the final variant that I ended up with. The only functional difference is that by default the alias points to the static library. Also I restructured the code to be (in my opinion) a bit easier to follow the logic. Ah, love it. CMake defaults to static libraries so that makes more sense. And your structure is much cleaner. I added this in.
One minor fix that is needed is to do chmod +x run_tests.sh in case of MINGW as well as UNIX. I changed the condition if(UNIX) to if(CMAKE_HOST_UNIX). Works for me when running a mingw build.
Let's do it in a follow-up commit, and let's keep the autotools scripts and write a new set of scripts for cmake. I wanted to make sure that it is possible to cover all these scenarios in principle. See #277",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/skvadrik,10,https://github.com/skvadrik/re2c/pull/275#issuecomment-610014913,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","Hooray \o/ I've merged this. Thanks @ligfx for all your work!
One question regarding static libraries, why do you have to add _static suffix to the library name on Windows?
A few things are still needed before we can switch to this as default build system (like make check or make wtests that currently trigger regeneration of lexers), but we'll deal with them.",True,"{'HOORAY': ['https://github.com/ligfx', 'https://github.com/sergeyklay', 'https://github.com/certik']}"
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/ligfx,11,https://github.com/skvadrik/re2c/pull/275#issuecomment-610017205,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","One question regarding static libraries, why do you have to add _static suffix to the library name on Windows?

Windows shared libraries generate a .dll file (the shared object) and a .lib file (the static object to interface with the shared object.. or something like that). Static libraries just generate a .lib file. If a shared and static library have the same name, their .lib files will conflict",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,275,2020-03-31T02:03:39Z,2020-04-06T20:11:51Z,2020-04-06T20:28:14Z,MERGED,True,579,0,7,https://github.com/ligfx,Add a CMake build system,1,[],https://github.com/skvadrik/re2c/pull/275,https://github.com/skvadrik,12,https://github.com/skvadrik/re2c/pull/275#issuecomment-610019417,"Attempt at #244
Built successfully on macOS, and on Windows with Visual Studio. Works great for embedding in other projects that use re2c to generate lexers!
I tried to copy the autotools build system as much as possible, including writing CMake functions to mimic autoconf, and using CMake script mode to do the bootstrap vs. use-built-re2c cycle.","Ah, got it. I should add a comment in CMakeLists.txt to remember this.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,277,2020-04-05T17:10:49Z,2020-04-07T20:20:26Z,2020-04-07T20:20:30Z,CLOSED,False,236,2,16,https://github.com/ligfx,Add build scripts using CMake,1,[],https://github.com/skvadrik/re2c/pull/277,https://github.com/ligfx,1,https://github.com/skvadrik/re2c/pull/277,"Follow-up to #275.
This adds __cmakebuild*.sh scripts analogous to the existing __build*.sh scripts, for a variety of scenarios.","Follow-up to #275.
This adds __cmakebuild*.sh scripts analogous to the existing __build*.sh scripts, for a variety of scenarios.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,277,2020-04-05T17:10:49Z,2020-04-07T20:20:26Z,2020-04-07T20:20:30Z,CLOSED,False,236,2,16,https://github.com/ligfx,Add build scripts using CMake,1,[],https://github.com/skvadrik/re2c/pull/277,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/277#issuecomment-610040797,"Follow-up to #275.
This adds __cmakebuild*.sh scripts analogous to the existing __build*.sh scripts, for a variety of scenarios.","Can you please fix two things:


Add -DCMAKE_CXX_FLAGS=""-O2"" to all scripts except the one that builds in release mode (most of them already set CMAKE_CXX_FLAGS, so just add -O2 there). This will correspond to the behavior of existing scripts, which have -O2 enabled.


For Mingw builds, it is necessary to set a few more things (like paths to include files), otherwise Mingw uses wrong headers and the build fails (on my Linux system at least). Instead of -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=i686-w64-mingw32-gcc -DCMAKE_CXX_COMPILER=i686-w64-mingw32-g++  use -DCMAKE_TOOLCHAIN_FILE=cmake/Toolchain-cross-mingw32-linux.cmake and add the following file cmake/Toolchain-cross-mingw32-linux.cmake:


# the name of the target operating system
SET(CMAKE_SYSTEM_NAME Windows)

SET(COMPILER_PREFIX ""i686-w64-mingw32"")

# which compilers to use for C and C++
find_program(CMAKE_RC_COMPILER NAMES ${COMPILER_PREFIX}-windres)
find_program(CMAKE_C_COMPILER NAMES ${COMPILER_PREFIX}-gcc)
find_program(CMAKE_CXX_COMPILER NAMES ${COMPILER_PREFIX}-g++)

# here is the target environment located
SET(CMAKE_FIND_ROOT_PATH ${CMAKE_FIND_ROOT_PATH} /usr/${COMPILER_PREFIX})

# adjust the default behaviour of the FIND_XXX() commands:
# search headers and libraries in the target environment, search.
# programs in the host environment
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
And also a similar file cmake/Toolchain-cross-mingw64-linux.cmake for Mingw64:
# the name of the target operating system
SET(CMAKE_SYSTEM_NAME Windows)

SET(COMPILER_PREFIX ""x86_64-w64-mingw32"")

# which compilers to use for C and C++
find_program(CMAKE_RC_COMPILER NAMES ${COMPILER_PREFIX}-windres)
find_program(CMAKE_C_COMPILER NAMES ${COMPILER_PREFIX}-gcc)
find_program(CMAKE_CXX_COMPILER NAMES ${COMPILER_PREFIX}-g++)

# here is the target environment located
SET(CMAKE_FIND_ROOT_PATH ${CMAKE_FIND_ROOT_PATH} /usr/${COMPILER_PREFIX})

# adjust the default behaviour of the FIND_XXX() commands:
# search headers and libraries in the target environment, search.
# programs in the host environment
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,277,2020-04-05T17:10:49Z,2020-04-07T20:20:26Z,2020-04-07T20:20:30Z,CLOSED,False,236,2,16,https://github.com/ligfx,Add build scripts using CMake,1,[],https://github.com/skvadrik/re2c/pull/277,https://github.com/ligfx,3,https://github.com/skvadrik/re2c/pull/277#issuecomment-610113414,"Follow-up to #275.
This adds __cmakebuild*.sh scripts analogous to the existing __build*.sh scripts, for a variety of scenarios.","Add -DCMAKE_CXX_FLAGS=""-O2"" to all scripts except the one that builds in release mode (most of them already set CMAKE_CXX_FLAGS, so just add -O2 there). This will correspond to the behavior of existing scripts, which have -O2 enabled.

What do you think about using -DCMAKE_BUILD_TYPE=RelWithDebInfo instead? That expresses the semantics of ""an optimized build with debug symbols.""


For Mingw builds, it is necessary to set a few more things Added toolchain files and fixed the __cmakebuild_mingw.sh script",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,277,2020-04-05T17:10:49Z,2020-04-07T20:20:26Z,2020-04-07T20:20:30Z,CLOSED,False,236,2,16,https://github.com/ligfx,Add build scripts using CMake,1,[],https://github.com/skvadrik/re2c/pull/277,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/277#issuecomment-610195867,"Follow-up to #275.
This adds __cmakebuild*.sh scripts analogous to the existing __build*.sh scripts, for a variety of scenarios.","What do you think about using -DCMAKE_BUILD_TYPE=RelWithDebInfo instead? That expresses the semantics of ""an optimized build with debug symbols.""

That would be ok if you add add_compile_definitions($<$<CONFIG:RelWithDebInfo>:RE2C_DEBUG>). The main purpose of the build scripts is to provide a fast way of building in a ""development configuration"", which means 1) with RE2C_DEBUG, 2) with -g and 3) with -O2.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,277,2020-04-05T17:10:49Z,2020-04-07T20:20:26Z,2020-04-07T20:20:30Z,CLOSED,False,236,2,16,https://github.com/ligfx,Add build scripts using CMake,1,[],https://github.com/skvadrik/re2c/pull/277,https://github.com/ligfx,5,https://github.com/skvadrik/re2c/pull/277#issuecomment-610479239,"Follow-up to #275.
This adds __cmakebuild*.sh scripts analogous to the existing __build*.sh scripts, for a variety of scenarios.","That would be ok if you add add_compile_definitions($<$<CONFIG:RelWithDebInfo>:RE2C_DEBUG>). The main purpose of the build scripts is to provide a fast way of building in a ""development configuration"", which means 1) with RE2C_DEBUG, 2) with -g and 3) with -O2. Okay, I added the RE2C_DEBUG flag in RelWithDebInfo builds, and changed all the scripts except __cmakebuild_nodebug.sh to use it. The RelWithDebInfo build type automatically adds -g and -O2, or the equivalent options depending on the platform.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,277,2020-04-05T17:10:49Z,2020-04-07T20:20:26Z,2020-04-07T20:20:30Z,CLOSED,False,236,2,16,https://github.com/ligfx,Add build scripts using CMake,1,[],https://github.com/skvadrik/re2c/pull/277,https://github.com/skvadrik,6,https://github.com/skvadrik/re2c/pull/277#issuecomment-610597147,"Follow-up to #275.
This adds __cmakebuild*.sh scripts analogous to the existing __build*.sh scripts, for a variety of scenarios.","Merged: 80cd01b, thank you! (Github doesn't show this pull-request as merge probably because I cherry-picked to keep history linear.)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,278,2020-04-07T16:19:25Z,2020-04-07T21:03:26Z,2020-04-07T21:03:27Z,CLOSED,False,1,1,1,https://github.com/ligfx,CMake: clean up generator expression checking for Windows,1,[],https://github.com/skvadrik/re2c/pull/278,https://github.com/ligfx,1,https://github.com/skvadrik/re2c/pull/278,"- set(RE2C_STATIC_LIB_SFX ""$<IF:$<BOOL:${WIN32}>,_static,>"")
+ set(RE2C_STATIC_LIB_SFX ""$<$<PLATFORM_ID:Windows>:_static>"")","- set(RE2C_STATIC_LIB_SFX ""$<IF:$<BOOL:${WIN32}>,_static,>"")
+ set(RE2C_STATIC_LIB_SFX ""$<$<PLATFORM_ID:Windows>:_static>"")",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,278,2020-04-07T16:19:25Z,2020-04-07T21:03:26Z,2020-04-07T21:03:27Z,CLOSED,False,1,1,1,https://github.com/ligfx,CMake: clean up generator expression checking for Windows,1,[],https://github.com/skvadrik/re2c/pull/278,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/278#issuecomment-610602996,"- set(RE2C_STATIC_LIB_SFX ""$<IF:$<BOOL:${WIN32}>,_static,>"")
+ set(RE2C_STATIC_LIB_SFX ""$<$<PLATFORM_ID:Windows>:_static>"")","Merged, thanks! (Cherry-picked to keel the history linear: b85de4e.)
@ligfx Did my WIN32 detection break the Windows build, or is it just a clean up?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,278,2020-04-07T16:19:25Z,2020-04-07T21:03:26Z,2020-04-07T21:03:27Z,CLOSED,False,1,1,1,https://github.com/ligfx,CMake: clean up generator expression checking for Windows,1,[],https://github.com/skvadrik/re2c/pull/278,https://github.com/ligfx,3,https://github.com/skvadrik/re2c/pull/278#issuecomment-610619264,"- set(RE2C_STATIC_LIB_SFX ""$<IF:$<BOOL:${WIN32}>,_static,>"")
+ set(RE2C_STATIC_LIB_SFX ""$<$<PLATFORM_ID:Windows>:_static>"")",@skvadrik Just a clean up,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,279,2020-04-10T23:18:42Z,2020-04-11T00:41:57Z,2020-04-11T00:42:09Z,MERGED,True,7,5,1,https://github.com/ligfx,CMake: only add `check` target if toplevel project,1,[],https://github.com/skvadrik/re2c/pull/279,https://github.com/ligfx,1,https://github.com/skvadrik/re2c/pull/279,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,279,2020-04-10T23:18:42Z,2020-04-11T00:41:57Z,2020-04-11T00:42:09Z,MERGED,True,7,5,1,https://github.com/ligfx,CMake: only add `check` target if toplevel project,1,[],https://github.com/skvadrik/re2c/pull/279,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/279#issuecomment-612282004,,"Merged, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,285,2020-05-31T13:18:27Z,2020-05-31T15:43:21Z,2020-05-31T15:43:22Z,CLOSED,False,353,0,1,https://github.com/fanf2,Add a C preprocessor lexer to the tests.,1,[],https://github.com/skvadrik/re2c/pull/285,https://github.com/fanf2,1,https://github.com/skvadrik/re2c/pull/285,"As discussed in #284, here is the lexer I was working on when I encountered the YYBACKUP/YYRESTORE bug.
Signed-off-by: Tony Finch dot@dotat.at","As discussed in #284, here is the lexer I was working on when I encountered the YYBACKUP/YYRESTORE bug.
Signed-off-by: Tony Finch dot@dotat.at",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,285,2020-05-31T13:18:27Z,2020-05-31T15:43:21Z,2020-05-31T15:43:22Z,CLOSED,False,353,0,1,https://github.com/fanf2,Add a C preprocessor lexer to the tests.,1,[],https://github.com/skvadrik/re2c/pull/285,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/285#issuecomment-636488398,"As discussed in #284, here is the lexer I was working on when I encountered the YYBACKUP/YYRESTORE bug.
Signed-off-by: Tony Finch dot@dotat.at","Thank you! This is very helpful. I have tweaked your commit a tiny bit and merged it as e9764de. The only changes I made are:

Add a test result file so that re2c tests don't fail (including Travis CI that runs on every push).
Rename the test so that re2c runs it with -i option (line directives in large real tests make it difficult to separate real changes from trivial ones when reviewing diffs).

As Github cannot track the relation between my commit and this pull request, I'm closing it manually (it won't show as merged, but in fact it is).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,287,2020-06-07T13:27:50Z,2020-06-07T13:39:27Z,2020-06-07T13:40:09Z,MERGED,True,1,0,1,https://github.com/trofi,configure.ac: store auxiliary configure files in build-aux/,1,[],https://github.com/skvadrik/re2c/pull/287,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/287,"This makes root directory less cluttered. Autoconf-specific
scripts like 'config.guess'. 'install-sh' and friends
are moved to build-aux/ now.","This makes root directory less cluttered. Autoconf-specific
scripts like 'config.guess'. 'install-sh' and friends
are moved to build-aux/ now.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,287,2020-06-07T13:27:50Z,2020-06-07T13:39:27Z,2020-06-07T13:40:09Z,MERGED,True,1,0,1,https://github.com/trofi,configure.ac: store auxiliary configure files in build-aux/,1,[],https://github.com/skvadrik/re2c/pull/287,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/287#issuecomment-640220860,"This makes root directory less cluttered. Autoconf-specific
scripts like 'config.guess'. 'install-sh' and friends
are moved to build-aux/ now.",\o/ Thank you.,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,289,2020-06-18T22:58:43Z,2020-06-18T23:08:19Z,2020-06-18T23:08:19Z,MERGED,True,1,0,1,https://github.com/trofi,autogen.sh: always attempt to create m4/ directory,1,[],https://github.com/skvadrik/re2c/pull/289,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/289,"On a fresh checkout autogen.sh complains about missing m4:
$ ./autogen.sh
aclocal-1.16: warning: couldn't open directory 'm4': No such file or directory
libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
...

The change always attempts to create the directory.","On a fresh checkout autogen.sh complains about missing m4:
$ ./autogen.sh
aclocal-1.16: warning: couldn't open directory 'm4': No such file or directory
libtoolize: putting auxiliary files in AC_CONFIG_AUX_DIR, 'build-aux'.
...

The change always attempts to create the directory.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,292,2020-07-04T13:51:45Z,2020-07-04T17:13:47Z,2020-07-05T00:19:23Z,MERGED,True,2,1,1,https://github.com/ryandesign,Fix for old compilers like gcc 4.2 and clang 3.4,1,[],https://github.com/skvadrik/re2c/pull/292,https://github.com/ryandesign,1,https://github.com/skvadrik/re2c/pull/292,"Hi, I'm the MacPorts maintainer of re2c. We discussed a problem a few years ago in #198 where old versions of gcc were unable to compile your code, and you committed a simple fix but warned that it might break in the future.
It did, and we received a couple reports about it. It was reported last year that re2c 1.2.1 didn't build with gcc 4.2 on Mac OS X 10.4 on PowerPC:
./src/dfa/closure_posix.h:128: error: no match for 'operator!=' in 'c != std::vector<_Tp, _Alloc>::rend() [with _Tp = re2c::clos_t, _Alloc = std::allocator<re2c::clos_t>]()'

I had forgotten about our previous discussion and worked around the problem by using a newer compiler, but then it was reported a few days ago that re2c 1.3 didn't build with clang 3.4 on Mac OS X 10.4 on Intel:
./src/dfa/closure_posix.h:128:61: error: invalid operands to binary expression ('typename determ_context_t<phistory_t>::rcconfiter_t' (aka 'reverse_iterator<const_iterator>') and 'reverse_iterator' (aka 'reverse_iterator<iterator>'))
    for (typename ctx_t::rcconfiter_t c = reach.rbegin(); c != reach.rend(); ++c) {

This prompted me to investigate and find our previous discussion again and to try the patch in this PR, which worked for me. I hope you'll accept it.","Hi, I'm the MacPorts maintainer of re2c. We discussed a problem a few years ago in #198 where old versions of gcc were unable to compile your code, and you committed a simple fix but warned that it might break in the future.
It did, and we received a couple reports about it. It was reported last year that re2c 1.2.1 didn't build with gcc 4.2 on Mac OS X 10.4 on PowerPC:
./src/dfa/closure_posix.h:128: error: no match for 'operator!=' in 'c != std::vector<_Tp, _Alloc>::rend() [with _Tp = re2c::clos_t, _Alloc = std::allocator<re2c::clos_t>]()'

I had forgotten about our previous discussion and worked around the problem by using a newer compiler, but then it was reported a few days ago that re2c 1.3 didn't build with clang 3.4 on Mac OS X 10.4 on Intel:
./src/dfa/closure_posix.h:128:61: error: invalid operands to binary expression ('typename determ_context_t<phistory_t>::rcconfiter_t' (aka 'reverse_iterator<const_iterator>') and 'reverse_iterator' (aka 'reverse_iterator<iterator>'))
    for (typename ctx_t::rcconfiter_t c = reach.rbegin(); c != reach.rend(); ++c) {

This prompted me to investigate and find our previous discussion again and to try the patch in this PR, which worked for me. I hope you'll accept it.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,292,2020-07-04T13:51:45Z,2020-07-04T17:13:47Z,2020-07-05T00:19:23Z,MERGED,True,2,1,1,https://github.com/ryandesign,Fix for old compilers like gcc 4.2 and clang 3.4,1,[],https://github.com/skvadrik/re2c/pull/292,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/292#issuecomment-653790973,"Hi, I'm the MacPorts maintainer of re2c. We discussed a problem a few years ago in #198 where old versions of gcc were unable to compile your code, and you committed a simple fix but warned that it might break in the future.
It did, and we received a couple reports about it. It was reported last year that re2c 1.2.1 didn't build with gcc 4.2 on Mac OS X 10.4 on PowerPC:
./src/dfa/closure_posix.h:128: error: no match for 'operator!=' in 'c != std::vector<_Tp, _Alloc>::rend() [with _Tp = re2c::clos_t, _Alloc = std::allocator<re2c::clos_t>]()'

I had forgotten about our previous discussion and worked around the problem by using a newer compiler, but then it was reported a few days ago that re2c 1.3 didn't build with clang 3.4 on Mac OS X 10.4 on Intel:
./src/dfa/closure_posix.h:128:61: error: invalid operands to binary expression ('typename determ_context_t<phistory_t>::rcconfiter_t' (aka 'reverse_iterator<const_iterator>') and 'reverse_iterator' (aka 'reverse_iterator<iterator>'))
    for (typename ctx_t::rcconfiter_t c = reach.rbegin(); c != reach.rend(); ++c) {

This prompted me to investigate and find our previous discussion again and to try the patch in this PR, which worked for me. I hope you'll accept it.","Thank you for the fix, and for keeping re2c portable on old compilers!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,293,2020-07-04T18:55:34Z,2020-07-04T19:46:18Z,2020-07-04T19:47:19Z,MERGED,True,2,1,1,https://github.com/trofi,.travis.yml: split build commands into individual entries,1,[],https://github.com/skvadrik/re2c/pull/293,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/293,This should allow travis CI measure individual times on each step,This should allow travis CI measure individual times on each step,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,293,2020-07-04T18:55:34Z,2020-07-04T19:46:18Z,2020-07-04T19:47:19Z,MERGED,True,2,1,1,https://github.com/trofi,.travis.yml: split build commands into individual entries,1,[],https://github.com/skvadrik/re2c/pull/293,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/293#issuecomment-653804226,This should allow travis CI measure individual times on each step,Thank you! \o/,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,298,2020-07-20T00:03:19Z,2020-07-20T00:17:18Z,2020-07-20T00:17:41Z,MERGED,True,18,0,1,https://github.com/trofi,run_tests.sh.in: add usage example,1,[],https://github.com/skvadrik/re2c/pull/298,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/298,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,298,2020-07-20T00:03:19Z,2020-07-20T00:17:18Z,2020-07-20T00:17:41Z,MERGED,True,18,0,1,https://github.com/trofi,run_tests.sh.in: add usage example,1,[],https://github.com/skvadrik/re2c/pull/298,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/298#issuecomment-660733720,,\o/  Thank you!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,304,2020-09-04T16:21:11Z,2020-09-04T20:43:36Z,2020-09-12T06:34:53Z,MERGED,True,3,3,1,https://github.com/s-yasu,Fix CMake command from cmake to ${CMAKE_COMMAND},1,[],https://github.com/skvadrik/re2c/pull/304,https://github.com/s-yasu,1,https://github.com/skvadrik/re2c/pull/304,Fix build in environment where CMake is not in path.,Fix build in environment where CMake is not in path.,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,304,2020-09-04T16:21:11Z,2020-09-04T20:43:36Z,2020-09-12T06:34:53Z,MERGED,True,3,3,1,https://github.com/s-yasu,Fix CMake command from cmake to ${CMAKE_COMMAND},1,[],https://github.com/skvadrik/re2c/pull/304,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/304#issuecomment-687373319,Fix build in environment where CMake is not in path.,Thanks for the fix!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,307,2020-09-13T08:02:36Z,2020-09-14T21:07:52Z,2020-09-16T15:47:47Z,MERGED,True,305,114,3,https://github.com/s-yasu,Fix UTF-8 decode for 4bytes rune,2,[],https://github.com/skvadrik/re2c/pull/307,https://github.com/s-yasu,1,https://github.com/skvadrik/re2c/pull/307,"Masked a character with a bit at 0x0F0000 position with MAX_4BYTE_RUNE (0x10FFFF) that bit was missing.
Such as 𤰖 (0x024C16).","Masked a character with a bit at 0x0F0000 position with MAX_4BYTE_RUNE (0x10FFFF) that bit was missing.
Such as 𤰖 (0x024C16).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,307,2020-09-13T08:02:36Z,2020-09-14T21:07:52Z,2020-09-16T15:47:47Z,MERGED,True,305,114,3,https://github.com/s-yasu,Fix UTF-8 decode for 4bytes rune,2,[],https://github.com/skvadrik/re2c/pull/307,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/307#issuecomment-691645233,"Masked a character with a bit at 0x0F0000 position with MAX_4BYTE_RUNE (0x10FFFF) that bit was missing.
Such as 𤰖 (0x024C16).","Hi @s-yasu, thanks for finding this nasty bug!
I think your patch can be simplified a bit, in fact all that is needed is to change the value of MAX_4BYTE_RUNE from 0x10FFFFu to 0x1FFFFFu. The algorithm in re2c is an adaptation of re2 decoder with some validity checks thrown away (as re2c validates the input when lexing it), so I'd rather minimize the changes to it.
-const utf8::rune utf8::MAX_4BYTE_RUNE = 0x10FFFFu;
+const utf8::rune utf8::MAX_4BYTE_RUNE = 0x1FFFFFu;
After this change, the test passes with your newly added testcases.
Also, please can you can you return the assert in the test, as it is easy to overlook a non-zero return code, and much harder to overlook an assertion failure. Thanks again for the fix!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,307,2020-09-13T08:02:36Z,2020-09-14T21:07:52Z,2020-09-16T15:47:47Z,MERGED,True,305,114,3,https://github.com/s-yasu,Fix UTF-8 decode for 4bytes rune,2,[],https://github.com/skvadrik/re2c/pull/307,https://github.com/s-yasu,3,https://github.com/skvadrik/re2c/pull/307#issuecomment-691669443,"Masked a character with a bit at 0x0F0000 position with MAX_4BYTE_RUNE (0x10FFFF) that bit was missing.
Such as 𤰖 (0x024C16).","I think so that if MAX_4BYTE_RUNE change to 0x1FFFFFu, MAX_RUNE will has same value, and maximum value check in rune_to_bytes() may not be expected.

  
    
      re2c/src/encoding/utf8/utf8.cc
    
    
         Line 11
      in
      ee125da
    
  
  
    

        
          
           const utf8::rune utf8::MAX_4BYTE_RUNE = 0x10FFFFu; 
        
    
  


const utf8::rune utf8::MAX_4BYTE_RUNE = 0x1FFFFFu;
const utf8::rune utf8::MAX_RUNE       = utf8::MAX_4BYTE_RUNE;

  
    
      re2c/src/encoding/utf8/utf8.cc
    
    
         Line 45
      in
      ee125da
    
  
  
    

        
          
           if (c > MAX_RUNE) 
        
    
  


uint32_t utf8::rune_to_bytes(uint32_t *str, rune c)
{
       :
    if (c > MAX_RUNE)
        c = ERROR;
I understand to return the test to be the assert().",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,307,2020-09-13T08:02:36Z,2020-09-14T21:07:52Z,2020-09-16T15:47:47Z,MERGED,True,305,114,3,https://github.com/s-yasu,Fix UTF-8 decode for 4bytes rune,2,[],https://github.com/skvadrik/re2c/pull/307,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/307#issuecomment-691694495,"Masked a character with a bit at 0x0F0000 position with MAX_4BYTE_RUNE (0x10FFFF) that bit was missing.
Such as 𤰖 (0x024C16).","I think so that if MAX_4BYTE_RUNE change to 0x1FFFFFu, MAX_RUNE will has same value, and maximum value check in rune_to_bytes() may not be expected.

This explains the origin of the error, I must have thought that the maximum Unicode value 0x10FFFF and the 4-byte mask is the same value. MAX_RUNE should remain 0x10FFFF,  but MAX_4BYTE_RUNE should be changed to 0x1FFFFF, because it is a bit mask that should match all code points up to 0x10FFFF (for example, 0xFFFFF is in this range, but it's not covered by bit mask 0x10FFFF).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,307,2020-09-13T08:02:36Z,2020-09-14T21:07:52Z,2020-09-16T15:47:47Z,MERGED,True,305,114,3,https://github.com/s-yasu,Fix UTF-8 decode for 4bytes rune,2,[],https://github.com/skvadrik/re2c/pull/307,https://github.com/s-yasu,5,https://github.com/skvadrik/re2c/pull/307#issuecomment-692143429,"Masked a character with a bit at 0x0F0000 position with MAX_4BYTE_RUNE (0x10FFFF) that bit was missing.
Such as 𤰖 (0x024C16).","OK.
I've fixed the branch so check it out.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,307,2020-09-13T08:02:36Z,2020-09-14T21:07:52Z,2020-09-16T15:47:47Z,MERGED,True,305,114,3,https://github.com/s-yasu,Fix UTF-8 decode for 4bytes rune,2,[],https://github.com/skvadrik/re2c/pull/307,https://github.com/s-yasu,6,https://github.com/skvadrik/re2c/pull/307#issuecomment-692148684,"Masked a character with a bit at 0x0F0000 position with MAX_4BYTE_RUNE (0x10FFFF) that bit was missing.
Such as 𤰖 (0x024C16).","Oops.
It's the same in the end, but a little fix.
(First commit's utf8_literals.c)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,307,2020-09-13T08:02:36Z,2020-09-14T21:07:52Z,2020-09-16T15:47:47Z,MERGED,True,305,114,3,https://github.com/s-yasu,Fix UTF-8 decode for 4bytes rune,2,[],https://github.com/skvadrik/re2c/pull/307,https://github.com/skvadrik,7,https://github.com/skvadrik/re2c/pull/307#issuecomment-692315315,"Masked a character with a bit at 0x0F0000 position with MAX_4BYTE_RUNE (0x10FFFF) that bit was missing.
Such as 𤰖 (0x024C16).","Great, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,309,2020-09-28T06:51:35Z,2020-09-28T12:57:08Z,2020-09-28T13:34:27Z,MERGED,True,24,0,1,https://github.com/sergeyklay,Initial support of CI using GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/309,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/309,"Hello,
This PR introduces initial GitHub Actions support by adding Configure, Build and Test steps. Right now it uses only Linux. I'll add macOS and Windows support a bit later.
To see how it works now refer to: https://github.com/sergeyklay/re2c/runs/1175055832?check_suite_focus=true","Hello,
This PR introduces initial GitHub Actions support by adding Configure, Build and Test steps. Right now it uses only Linux. I'll add macOS and Windows support a bit later.
To see how it works now refer to: https://github.com/sergeyklay/re2c/runs/1175055832?check_suite_focus=true",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,309,2020-09-28T06:51:35Z,2020-09-28T12:57:08Z,2020-09-28T13:34:27Z,MERGED,True,24,0,1,https://github.com/sergeyklay,Initial support of CI using GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/309,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/309#issuecomment-699833701,"Hello,
This PR introduces initial GitHub Actions support by adding Configure, Build and Test steps. Right now it uses only Linux. I'll add macOS and Windows support a bit later.
To see how it works now refer to: https://github.com/sergeyklay/re2c/runs/1175055832?check_suite_focus=true","Thanks for the PR @sergeyklay! I have a few questions.
As you know, re2c uses Travis CI with an elaborate testing matrix (see travis.yml script and the latest set of builds). It works well and has captured numerous bugs. The build matrix is a killer feature: it allows CMake coexist with Autotools, it runs various sanitizer builds and so on. Do you intend GitHub Actions to replace Travis CI (then would it be possible to migrate travis.yml), or as a complimentary workflow (then what are the additional features it provides that Travis CI doesn't)?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,309,2020-09-28T06:51:35Z,2020-09-28T12:57:08Z,2020-09-28T13:34:27Z,MERGED,True,24,0,1,https://github.com/sergeyklay,Initial support of CI using GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/309,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/309#issuecomment-699845319,"Hello,
This PR introduces initial GitHub Actions support by adding Configure, Build and Test steps. Right now it uses only Linux. I'll add macOS and Windows support a bit later.
To see how it works now refer to: https://github.com/sergeyklay/re2c/runs/1175055832?check_suite_focus=true","Well, yes. It would be nice to have CI alongside of source code. I mean use the same vendor to store source code as well as run CI pipelines.
In the future, I would like to get all-in-one workflow, which covers all the features used in Travis CI as well as:

macOS builds / tests
Windows builds / tests (Mingw, Visual Studio)
Create nightly (unstable) builds
Create releases and attach artifacts
Code coverage repoort

Right now it is just a (working) skeleton which is simple enough to add functionality step by step.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,309,2020-09-28T06:51:35Z,2020-09-28T12:57:08Z,2020-09-28T13:34:27Z,MERGED,True,24,0,1,https://github.com/sergeyklay,Initial support of CI using GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/309,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/309#issuecomment-699989149,"Hello,
This PR introduces initial GitHub Actions support by adding Configure, Build and Test steps. Right now it uses only Linux. I'll add macOS and Windows support a bit later.
To see how it works now refer to: https://github.com/sergeyklay/re2c/runs/1175055832?check_suite_focus=true",That would be great! Let's have GitHub Actions alongside with Travis for now.,True,{'HOORAY': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,310,2020-10-01T19:22:36Z,2020-10-01T21:43:54Z,2020-10-01T21:50:59Z,MERGED,True,42,3,1,https://github.com/sergeyklay,Add macOS support for GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/310,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/310,"Hello,
This PR adds macOS with Apple Clang to the build matrix on GitHub Action. I'd prefer not to complicate the workflow configuration at this time until I have a complete matrix.
To see how it works now refer to: https://github.com/sergeyklay/re2c/actions/runs/282978499","Hello,
This PR adds macOS with Apple Clang to the build matrix on GitHub Action. I'd prefer not to complicate the workflow configuration at this time until I have a complete matrix.
To see how it works now refer to: https://github.com/sergeyklay/re2c/actions/runs/282978499",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,310,2020-10-01T19:22:36Z,2020-10-01T21:43:54Z,2020-10-01T21:50:59Z,MERGED,True,42,3,1,https://github.com/sergeyklay,Add macOS support for GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/310,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/310#issuecomment-702414414,"Hello,
This PR adds macOS with Apple Clang to the build matrix on GitHub Action. I'd prefer not to complicate the workflow configuration at this time until I have a complete matrix.
To see how it works now refer to: https://github.com/sergeyklay/re2c/actions/runs/282978499","Good stuff, thank you \o/",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,310,2020-10-01T19:22:36Z,2020-10-01T21:43:54Z,2020-10-01T21:50:59Z,MERGED,True,42,3,1,https://github.com/sergeyklay,Add macOS support for GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/310,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/310#issuecomment-702416907,"Hello,
This PR adds macOS with Apple Clang to the build matrix on GitHub Action. I'd prefer not to complicate the workflow configuration at this time until I have a complete matrix.
To see how it works now refer to: https://github.com/sergeyklay/re2c/actions/runs/282978499",You're welcome :),True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,311,2020-10-02T06:45:47Z,2020-10-02T09:35:07Z,2020-10-02T09:41:19Z,MERGED,True,46,5,2,https://github.com/sergeyklay,Add Windows support for GitHub Actions,3,[],https://github.com/skvadrik/re2c/pull/311,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/311,"Hello,
This PR adds Windows  with Visual Studio 16 2019 to the build matrix on GitHub Action. There still a lot of work, e.g. provide ability to run tests, compiler flags definition and so on. But right now it works. I'll try to improve Windows builds a bit later.","Hello,
This PR adds Windows  with Visual Studio 16 2019 to the build matrix on GitHub Action. There still a lot of work, e.g. provide ability to run tests, compiler flags definition and so on. But right now it works. I'll try to improve Windows builds a bit later.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,311,2020-10-02T06:45:47Z,2020-10-02T09:35:07Z,2020-10-02T09:41:19Z,MERGED,True,46,5,2,https://github.com/sergeyklay,Add Windows support for GitHub Actions,3,[],https://github.com/skvadrik/re2c/pull/311,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/311#issuecomment-702602215,"Hello,
This PR adds Windows  with Visual Studio 16 2019 to the build matrix on GitHub Action. There still a lot of work, e.g. provide ability to run tests, compiler flags definition and so on. But right now it works. I'll try to improve Windows builds a bit later.","By the way, it's the first time I use GitHub review tool, it seems a recent addition. Not bad!",True,{'LAUGH': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,311,2020-10-02T06:45:47Z,2020-10-02T09:35:07Z,2020-10-02T09:41:19Z,MERGED,True,46,5,2,https://github.com/sergeyklay,Add Windows support for GitHub Actions,3,[],https://github.com/skvadrik/re2c/pull/311,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/311#issuecomment-702628135,"Hello,
This PR adds Windows  with Visual Studio 16 2019 to the build matrix on GitHub Action. There still a lot of work, e.g. provide ability to run tests, compiler flags definition and so on. But right now it works. I'll try to improve Windows builds a bit later.","Merged, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,311,2020-10-02T06:45:47Z,2020-10-02T09:35:07Z,2020-10-02T09:41:19Z,MERGED,True,46,5,2,https://github.com/sergeyklay,Add Windows support for GitHub Actions,3,[],https://github.com/skvadrik/re2c/pull/311,https://github.com/sergeyklay,4,https://github.com/skvadrik/re2c/pull/311#issuecomment-702630804,"Hello,
This PR adds Windows  with Visual Studio 16 2019 to the build matrix on GitHub Action. There still a lot of work, e.g. provide ability to run tests, compiler flags definition and so on. But right now it works. I'll try to improve Windows builds a bit later.",You're welcome :),True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,312,2020-10-02T10:06:58Z,2020-10-02T10:36:07Z,2020-10-02T10:36:55Z,MERGED,True,1,9,1,https://github.com/sergeyklay,Cleaned up CMakeLists.txt to use platform independent bison search,1,[],https://github.com/skvadrik/re2c/pull/312,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/312,"This PR fixes my previous PR (#311) to use platform independent bison search.
After discussion in #311 (comment), I decided to double-check this approach again and made sure that it actually works.  I don't quite understand why I wasn't able to get this to work before, maybe I didn't read the documentation carefully or missed something important. Anyway now it works, and looks clear and simple as initially.
To see how it works refer https://github.com/sergeyklay/re2c/runs/1198167217?check_suite_focus=true#step:8:16","This PR fixes my previous PR (#311) to use platform independent bison search.
After discussion in #311 (comment), I decided to double-check this approach again and made sure that it actually works.  I don't quite understand why I wasn't able to get this to work before, maybe I didn't read the documentation carefully or missed something important. Anyway now it works, and looks clear and simple as initially.
To see how it works refer https://github.com/sergeyklay/re2c/runs/1198167217?check_suite_focus=true#step:8:16",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,312,2020-10-02T10:06:58Z,2020-10-02T10:36:07Z,2020-10-02T10:36:55Z,MERGED,True,1,9,1,https://github.com/sergeyklay,Cleaned up CMakeLists.txt to use platform independent bison search,1,[],https://github.com/skvadrik/re2c/pull/312,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/312#issuecomment-702657431,"This PR fixes my previous PR (#311) to use platform independent bison search.
After discussion in #311 (comment), I decided to double-check this approach again and made sure that it actually works.  I don't quite understand why I wasn't able to get this to work before, maybe I didn't read the documentation carefully or missed something important. Anyway now it works, and looks clear and simple as initially.
To see how it works refer https://github.com/sergeyklay/re2c/runs/1198167217?check_suite_focus=true#step:8:16","Awesome, thanks for double checking!",True,{'HOORAY': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,314,2020-10-03T19:58:18Z,2020-10-03T21:05:00Z,2020-10-03T21:06:01Z,MERGED,True,1,1,1,https://github.com/zenwerk,fix typo,1,[],https://github.com/skvadrik/re2c/pull/314,https://github.com/zenwerk,1,https://github.com/skvadrik/re2c/pull/314,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,314,2020-10-03T19:58:18Z,2020-10-03T21:05:00Z,2020-10-03T21:06:01Z,MERGED,True,1,1,1,https://github.com/zenwerk,fix typo,1,[],https://github.com/skvadrik/re2c/pull/314,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/314#issuecomment-703164718,,Thanks!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,315,2020-10-05T10:22:46Z,2020-10-05T12:55:42Z,2020-10-05T13:17:38Z,MERGED,True,8,7,1,https://github.com/sergeyklay,Add Release build type to the build matrix,1,[],https://github.com/skvadrik/re2c/pull/315,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/315,"Hello,
This PR amends build matrix by adding Release configuration. There are no compiler flags changes yet because I still trying to choice a better way to set flags for various compilers.","Hello,
This PR amends build matrix by adding Release configuration. There are no compiler flags changes yet because I still trying to choice a better way to set flags for various compilers.",True,{'THUMBS_UP': ['https://github.com/skvadrik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/316,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.","Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/316#issuecomment-704591622,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.","Thanks! I have a few suggestions:

Let's rename cmake/Re2cBootstrapCompilerFlags.cmake -> cmake/Re2cCompilerFlags.cmake and cmake/Re2cBootstrapBuildType.cmake -> cmake/Re2cBuildType.cmake.
Maybe merge cmake/Re2cTryCXXFlag.cmake contents into cmake/Re2cCompilerFlags.cmake?


Should we use Release build type by default?

Yes.

Do we need append to CMAKE_CXX_FLAGS_ some custom flags?

-DRE2C_DEBUG for debug builds and a few other defines, currently added here: 
  
    
      re2c/CMakeLists.txt
    
    
        Lines 116 to 121
      in
      c23ed63
    
  
  
    

        
          
           set(RE2C_STDLIB_DIR ""${CMAKE_INSTALL_PREFIX}/share/re2c/stdlib"") 
        

        
          
           add_compile_definitions( 
        

        
          
             ""RE2C_STDLIB_DIR=\""${RE2C_STDLIB_DIR}\"""" 
        

        
          
             $<$<CONFIG:Debug>:RE2C_DEBUG> 
        

        
          
           ) 
        

        
          
           include_directories(. ""${CMAKE_CURRENT_BINARY_DIR}"") 
        
    
  

 It is not necessary to move them, but feel free if you think it's cleaner.

Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Yes, I'd remove it. Maybe ALLOWABLE_BUILD_TYPES is not needed, if the build type is always set and cmake outputs a reasonable error message for inexistent build types.

This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS)

Why is it meaningless? COMMON_FLAGS always set -O2 -g , except for release build. Debug build with -O2 is the type of build used for development: it has debug symbols and debug checks/asserts, but it isoptimized so that the tests run fast (cmake has RelWithDebInfo, but there was something that prevented me from using it -- I forgot what). I don't see much sense in testing purely debug build (without -O0), because it's just slower than debug build with -O2 but has all the same debug checks.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/316#issuecomment-704761205,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.","Done :) Thank you for the feedback!


Yes, I'd remove it. Maybe ALLOWABLE_BUILD_TYPES is not needed, if the build type is always set and cmake outputs a reasonable error message for inexistent build types.

ALLOWABLE_BUILD_TYPES is needed because everyone can run cmake as follows:
$ cmake -S . \
    -B cmake-build \
    -DCMAKE_BUILD_TYPE=FooBarBaz
What is FooBarBaz? What flags should we use?
There are strategies when, depending on configuration you may want to set specific flag inside CMake lists:
target_compile_options(
  some-target-name
  INTERFACE
      # Baseline reasonable warnings for MSVC
      $<$<CXX_COMPILER_ID:MSVC>:$<$<CONFIG:Debug>:/W4>>

      # Baseline reasonable warnings for CLang/GCC
      $<$<NOT:$<CXX_COMPILER_ID:MSVC>>:$<$<CONFIG:Debug>:-Wall>>>)
But now, with FooBarBaz, you know nothing. Thus we need to check it (see Re2cBuildType.cmake). But you're right, we don need to check it later and keep ALLOWABLE_BUILD_TYPES variable in global scope.

COMMON_FLAGS always set -O2 -g , except for release build.

I meant optimization (-O) is set internally by CMake depends on build type and no need to set it by hand, except when the default level of -O is not enough for you. I'm not sure if this significantly speeds up the build/tests (especially at Travis CI). But of course we can leave that as it is. I'm OK with this. Nevertheless -g is not needed in COMMON_FLAGS, because CMake always sets -g internally for Debug configuration.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/sergeyklay,4,https://github.com/skvadrik/re2c/pull/316#issuecomment-704852269,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.","I also added verbose output about the flags used. This may help in future to debug used flags:
-- Common compiler flags for C: 
-- Debug compiler flags for C: -g
-- Common compiler flags for CXX: -fdiagnostics-color=always -Werror=return-type -Wsign-conversion -Wconversion -Wsuggest-attribute=format -Wredundant-decls -Wformat=2 -pedantic -Weffc++ -Wextra -Wall -W 
-- Debug compiler flags for CXX: -g

It is interesting that for Windows we have three languages:
-- Common compiler flags for C: /DWIN32 /D_WINDOWS /W3
-- Debug compiler flags for C: /MDd /Zi /Ob0 /Od /RTC1
-- Common compiler flags for CXX: -Wall /DWIN32 /D_WINDOWS /W3 /GR /EHsc
-- Debug compiler flags for CXX: /MDd /Zi /Ob0 /Od /RTC1
-- Common compiler flags for RC: -DWIN32
-- Debug compiler flags for RC: -D_DEBUG

And as we can see only -Wall is supported by Visual C++. However there are native /Wall flag. The Visual C++ /Wall enables all of the warnings that are disabled by default at /W4. But that's another story and I'll deal with it later :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/sergeyklay,5,https://github.com/skvadrik/re2c/pull/316#issuecomment-705123878,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.","Well, I think the general idea is not to force user to play with flags and dealing which one is better to compiler program (-O2, -O3, -Os, etc). This is why there are build types (e.g. configuration names). All the user needs to know is the use of a named configuration. However, even this is not necessary if the user just wants to compile the program.
As for the impossibility of redefinition - I strongly doubt it. At least I have never heard of such behavior. AFAIK, if we have the following flags together <some other flags> ...  -O1 -O2 -O3 <some other flags> ... , then the last one has the highest priority. Can you share a reference that describes impossibility of redefinition in case of using CMake build types?
P.S. Anyway there are good and well known techniques to tune up CMake build types:
# Now 'Debug' build type will use '-g -O2'
set(CMAKE_CXX_FLAGS_DEBUG ""${CMAKE_CXX_FLAGS_DEBUG} -O2"")
 
   
# Add definitions just for re2c executable
target_compile_definitions(re2c
    PUBLIC ""RE2C_STDLIB_DIR=\""${RE2C_STDLIB_DIR}\""""
            $<$<CONFIG:Debug>:RE2C_DEBUG> )",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/skvadrik,6,https://github.com/skvadrik/re2c/pull/316#issuecomment-705221836,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.","Well, I think the general idea is not to force user to play with flags

For the most users CMake defaults should be ok. But I have in mind someone like a distro maintainer trying to rebuild re2c after a compiler upgrade, hitting a bug that reproduces with some weird flag combination. In such cases it is useful to be able to pass user-defined CXXFLAGS in some standard way, without patching the build files.

Can you share a reference that describes impossibility of redefinition in case of using CMake build types?

I don't really have an official doc (here is some related discussion). My understanding is that the standard way to pass user-defined CXXFLAGS in CMake is to define CMAKE_CXX_FLAGS variable. The problem is, in the final flag sequence CMAKE_CXX_FLAGS comes before build flavour specific variables CMAKE_CXX_FLAGS_RELEASE, CMAKE_CXX_FLAGS_DEBUG and so on. Therefore if a non-empty build type is used, CMake will append some flags after the user-defined ones and override them.
You can see this if you try to build re2c with -O2, but without -g. With your PR it is hard to achieve, because CMake either appends -O3 in release builds, or -g in debug builds. It is possible to override with -DCMAKE_CXX_FLAGS_RELEASE=""-O2"", but this has the drawback that it resets all CMake-defined release flags, and requires special CMake knowledge.
I understand that it is perhaps the ""CMake way"" to keep to some predefined configurations that are known to work and well-tested on all platforms, and I have seen an email thread suggesting that empty build type is a bad idea. Therefore I'm leaning towards setting -DCMAKE_BUILD_TYPE=Release by default. But I still think this is a bad design decision in CMake, and user-defined flags should always take priority.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/skvadrik,7,https://github.com/skvadrik/re2c/pull/316#issuecomment-705223885,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.","I also added verbose output about the flags used.

This is very useful!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/sergeyklay,8,https://github.com/skvadrik/re2c/pull/316#issuecomment-705440729,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.","Done. Now there are only few changes:

Verify build type (if provided)
Verbose output about the flags used
Moved flags-related stuff to the common place",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/skvadrik,9,https://github.com/skvadrik/re2c/pull/316#issuecomment-705842792,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.","Merged, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,316,2020-10-06T07:54:35Z,2020-10-08T21:46:48Z,2020-10-08T22:45:33Z,MERGED,True,79,43,4,https://github.com/sergeyklay,Setting up build type and debug compiler flags,8,[],https://github.com/skvadrik/re2c/pull/316,https://github.com/sergeyklay,10,https://github.com/skvadrik/re2c/pull/316#issuecomment-705861832,"Hello,
Proposal
This PR adds/changes the following things:

Setting build type to 'Debug' when no build type was specified by user (see Re2cBootstrapBuildType.cmake), because the default build type is an empty string
Verify build type (see Re2cBootstrapBuildType.cmake) to use only known ad supported types
Move flags related stuff to common place (see Re2cBootstrapCompilerFlags.cmake) to keep CMakeLists.txt clean
Output used compiler flags (see Re2cBootstrapCompilerFlags.cmake) to verify default ones

The four build types that CMake includes out of the box are Release, Debug, RelWithDebInfo, and MinSizeRel. Correspondingly, CMake ships with default values for each defined build type in CMAKE_CXX_FLAGS_<buildType>. Thus, right now we have the following default flags:




Debug
Release




GCC/Clang
-g
-O3 -DNDEBUG


MSVC
/MDd /Zi /Ob0 /Od /RTC1
/MD /O2 /Ob2 /DNDEBUG



Also I removed the following hardcoded flag:
if(NOT CMAKE_BUILD_TYPE)
     try_cxxflag(""-O2"")
endif()
because this one should be set by build type.
Questions

Should we use Release build type by default?
Do we need append to CMAKE_CXX_FLAGS_<buildType> some custom flags?
Should I remove redundant check if(CMAKE_BUILD_TYPE IN_LIST ALLOWABLE_BUILD_TYPES) (see Re2cBootstrapCompilerFlags.cmake) due to the fact that now the configuration will always be set?

Notes
This PR reveals some ""meaninglessness"" of the Travis' matrix configuration (see COMMON_FLAGS):

  
    
      re2c/.travis.yml
    
    
        Lines 21 to 25
      in
      c23ed63
    
  
  
    

        
          
           - CMAKE=yes BUILD_DIR=.      CONFIG_DIR=.  BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g"" SKELETON=yes 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Release 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=address"" 
        

        
          
           - CMAKE=yes BUILD_DIR=.build CONFIG_DIR=.. BUILD_TYPE=Debug              COMMON_FLAGS=""-O2 -g -fsanitize=undefined"" 
        
    
  


I also plan to modify how the try_cxxflag function works to get rid of bad practices, however I'd prefer to do this a bit later.",You're welcome :),True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/317,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/317#issuecomment-706419574,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","Awesome!
I have one question about common-flags: shouldn't linker use a different variable from compiler flags? Otherwise they end up with -O2, and it may get inconvenient later even if -O2 is fine now. Linker flags should be empty for the most builds (except Asan and Ubsan).
Here is a wishlist, if you have time and energy for that:


Build libre2c, re2go and documentation (CMake flags -DRE2C_BUILD_RE2GO=on, -DRE2C_BUILD_LIBS=on and -DRE2C_REBUILD_DOCS=on).


Rebuild lexers: this requires a two-stage build. The first stage should build re2c in the minimal configuration, and the second stage should use the binary built at the first stage in -DRE2C_FOR_BUILD and set -DRE2C_REBUILD_LEXERS=on, and it should be a full build.


Add a build with -DCMAKE_CXX_FLAGS=""-O2 -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC"".


Add Autotools build system.


Why is it not possible to run tests on Windows? I think it should be fine in a Bash shell.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/317#issuecomment-706435170,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","(To clarify, I don't mean the wishlist for this PR.)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/sergeyklay,4,https://github.com/skvadrik/re2c/pull/317#issuecomment-706439279,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","I have one question about common-flags: shouldn't linker use a different variable from compiler flags?

Yes, this was a most strange stuff I'd like ask for. As I see in Travis' configuration the same flags are used for linker as well as compiler:

  
    
      re2c/.travis.yml
    
    
        Lines 29 to 38
      in
      8e56ce3
    
  
  
    

        
          
               function run_cmake() { 
        

        
          
                   cmake \ 
        

        
          
                       -B . -S ${CONFIG_DIR} \ 
        

        
          
                       -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \ 
        

        
          
                       -DCMAKE_C_FLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       -DCMAKE_CXX_FLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       -DCMAKE_EXE_LINKER_FLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       -DCMAKE_SHARED_LINKER_FLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       $@ 
        

        
          
               } 
        
    
  


It looks like a mistake. So yes, only CMAKE_CXX_FLAGS is needed (and also perhaps CMAKE_C_FLAGS).  Should I fix this in GitHub workflow?
About wishlist: yes, all the points from it are in my plans.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/sergeyklay,5,https://github.com/skvadrik/re2c/pull/317#issuecomment-706440409,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","Why is it not possible to run tests on Windows? I think it should be fine in a Bash shell.

I'd like to write a pure PowerShell wrapper for it a bit later and also add mingw support :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/sergeyklay,6,https://github.com/skvadrik/re2c/pull/317#issuecomment-706441407,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","By the way, today I thought about the fact that build using Ninja are usually faster. So, it would probably good to add this support too. What do you think about Ninja support? Should we just add yet another matrix item or just replace Make (used  by default by CMake)? We can use Ninja for any OS.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/skvadrik,7,https://github.com/skvadrik/re2c/pull/317#issuecomment-706444045,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","It looks like a mistake. So yes, only CMAKE_CXX_FLAGS is needed (and also perhaps CMAKE_C_FLAGS). Should I fix this in GitHub workflow?

Ah, it's actually my own mistake in travis.yml. Please correct it in the GitHub version. Note that you need to keep -fsanitize=... in CMAKE_EXE_LINKER_FLAGS and CMAKE_SHARED_LINKER_FLAGS.

I'd like to write a pure PowerShell wrapper for it a bit later and also add mingw support :)

Nice! The run_test.sh.in script is quite horrible. It is too complex for bash and very inefficient. Most of the time is spend on sed and similar things. One day it will be rewritten in something like python.

What do you think about Ninja support?

Can we enable if for some of the builds, and keep make for some others?
It might also be a good idea to build with bmake, to help portability on BSD. It's more restrictive than GNU make and sometimes the build breaks in unexpected ways.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/sergeyklay,8,https://github.com/skvadrik/re2c/pull/317#issuecomment-706526437,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","Done. Take look at c90189f. I added some additional output to verify linker flags to be used. I hope they are OK now. We still don't say anything about which flags should be used for MSVC, but I'd like to do this work a bit later, in a separated PRs.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/skvadrik,9,https://github.com/skvadrik/re2c/pull/317#issuecomment-706533964,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","Merged, thanks! I have one feature request: if possible, can you make the names of the builds (as they appear in left column in the GutHub UI) more descriptive? Right now one needs to click at each build to see the debug output (for example, there are many builds titled Debug: linux-gcc).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/sergeyklay,10,https://github.com/skvadrik/re2c/pull/317#issuecomment-706545756,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","I want to make them a bit more clearer, but I can't think of a template yet. Do you have an idea?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,317,2020-10-09T16:50:47Z,2020-10-10T11:24:22Z,2020-10-11T10:49:04Z,MERGED,True,141,27,2,https://github.com/sergeyklay,GitHub actions improvements,3,[],https://github.com/skvadrik/re2c/pull/317,https://github.com/skvadrik,11,https://github.com/skvadrik/re2c/pull/317#issuecomment-706685657,"Hello,
This PR amends the build matrix on GitHub Actions. The full used matrix is:



OS
Build Type
Build Dir
Common Flags
Skeleton




Linux
Debug
out-of-tree
-O2 -fsanitize=undefined
false


Linux
Debug
out-of-tree
-O2 -fsanitize=address
false


Linux
Debug
out-of-tree
-O2
false


Linux
Debug
in-tree
-O2
false


Linux
Debug
out-of-tree
-O2
true


Linux
Release
out-of-tree
—
false


macOs
Debug
out-of-tree
-O2
false


macOs
Debug
out-of-tree
-O2
true


macOs
Debug
in-tree
-O2
false


macOs
Release
out-of-tree
—
false


Windows
Debug
out-of-tree
—
false


Windows
Debug
in-tree
—
false


Windows
Release
out-of-tree
—
false



I removed -g for Debug configurations as it is used by default (see discussion in #316). There are still some things I need to port from Travis' configuration, but I'd like to do this in a separated PR. Let me know if I should amend this matrix.
Also I replaced deprecated set-env and add-path commands (see https://github.blog/changelog/2020-10-01-github-actions-deprecating-set-env-and-add-path-commands/ and CVE-2020-15228).","Do you have an idea?

I'd probably just store a variable name in each build, and call them something like linux-gcc-debug-ootree-skeleton, macos-clang-release-intree and so on (manually hardcoding names in each build), if it's hard to come up with a good template.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,318,2020-10-10T14:40:40Z,2020-10-12T16:43:14Z,2020-10-12T16:45:38Z,MERGED,True,118,56,5,https://github.com/sergeyklay,Added Asan and Ubsan CMake profiles,2,[],https://github.com/skvadrik/re2c/pull/318,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/318,"Hello,
This PR adds support of Asan and Ubsan build types for CMake. I prefer this option since it expresses the intent (run sanitizers) rather than modifies a number of flags. This also simplifies a bit build matrix on GitHub workflow.
Usage:
$ cmake \
    -DCMAKE_BUILD_TYPE=Asan \
    ...
    ...
Old school fans can still use the way with explicit passing of flags:
$ cmake \
    -DCMAKE_C_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_CXX_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_EXE_LINKER_FLAGS=""-fsanitize=address"" \
    -DCMAKE_SHARED_LINKER_FLAGS=""-fsanitize=address"" \
    ...
    ...
Note, I added -fno-omit-frame-pointer to Asan build type and do not added -O2 (it is added by workflow matrix). Let me know if you'd like to modify Asan/Ubsan build types by adding/removing flags.","Hello,
This PR adds support of Asan and Ubsan build types for CMake. I prefer this option since it expresses the intent (run sanitizers) rather than modifies a number of flags. This also simplifies a bit build matrix on GitHub workflow.
Usage:
$ cmake \
    -DCMAKE_BUILD_TYPE=Asan \
    ...
    ...
Old school fans can still use the way with explicit passing of flags:
$ cmake \
    -DCMAKE_C_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_CXX_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_EXE_LINKER_FLAGS=""-fsanitize=address"" \
    -DCMAKE_SHARED_LINKER_FLAGS=""-fsanitize=address"" \
    ...
    ...
Note, I added -fno-omit-frame-pointer to Asan build type and do not added -O2 (it is added by workflow matrix). Let me know if you'd like to modify Asan/Ubsan build types by adding/removing flags.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,318,2020-10-10T14:40:40Z,2020-10-12T16:43:14Z,2020-10-12T16:45:38Z,MERGED,True,118,56,5,https://github.com/sergeyklay,Added Asan and Ubsan CMake profiles,2,[],https://github.com/skvadrik/re2c/pull/318,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/318#issuecomment-706698104,"Hello,
This PR adds support of Asan and Ubsan build types for CMake. I prefer this option since it expresses the intent (run sanitizers) rather than modifies a number of flags. This also simplifies a bit build matrix on GitHub workflow.
Usage:
$ cmake \
    -DCMAKE_BUILD_TYPE=Asan \
    ...
    ...
Old school fans can still use the way with explicit passing of flags:
$ cmake \
    -DCMAKE_C_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_CXX_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_EXE_LINKER_FLAGS=""-fsanitize=address"" \
    -DCMAKE_SHARED_LINKER_FLAGS=""-fsanitize=address"" \
    ...
    ...
Note, I added -fno-omit-frame-pointer to Asan build type and do not added -O2 (it is added by workflow matrix). Let me know if you'd like to modify Asan/Ubsan build types by adding/removing flags.",Can you squash the commits for this PR into one before merging?,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,318,2020-10-10T14:40:40Z,2020-10-12T16:43:14Z,2020-10-12T16:45:38Z,MERGED,True,118,56,5,https://github.com/sergeyklay,Added Asan and Ubsan CMake profiles,2,[],https://github.com/skvadrik/re2c/pull/318,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/318#issuecomment-706698799,"Hello,
This PR adds support of Asan and Ubsan build types for CMake. I prefer this option since it expresses the intent (run sanitizers) rather than modifies a number of flags. This also simplifies a bit build matrix on GitHub workflow.
Usage:
$ cmake \
    -DCMAKE_BUILD_TYPE=Asan \
    ...
    ...
Old school fans can still use the way with explicit passing of flags:
$ cmake \
    -DCMAKE_C_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_CXX_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_EXE_LINKER_FLAGS=""-fsanitize=address"" \
    -DCMAKE_SHARED_LINKER_FLAGS=""-fsanitize=address"" \
    ...
    ...
Note, I added -fno-omit-frame-pointer to Asan build type and do not added -O2 (it is added by workflow matrix). Let me know if you'd like to modify Asan/Ubsan build types by adding/removing flags.","A general recommendation that I have is to move all complexity out of the build system and to various build scripts, CI configs and so on. In the future re2c may move to a different hosting, or to a different CI, but the build system lives as long as the project lives, and the fewer gory details it has, the better.

Does this mean that you'd like to get building tools dispersed across various build scripts as well as CI configuration instead of a centralized and specialized tool? IMO, having a vendor lock on the CI configuration isn't a forward-looking strategy. On the other hand, the project build logic scattered across various scripts doesn't help to get rid of build errors and overall project complexity. And this design makes project depend on the particular OS/shell. I'm sorry, however I didn't fully understand your point here. Could you please elaborate on that a bit more?

One of the things about CMake is that it allows a lot of flexibility, because it has conditional statements and loops in the configuration part of the build system. It is convenient, but it also means that it is easy to write a lot of code, which is always a double-sided sword.

CMake looks like more cross-platform than, for example Autotools or Bash. This means that you are likely will get fewer issues on various systems, including BSD, Windows, macOS and so on. So I'd like to know more about the double-sided sword :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,318,2020-10-10T14:40:40Z,2020-10-12T16:43:14Z,2020-10-12T16:45:38Z,MERGED,True,118,56,5,https://github.com/sergeyklay,Added Asan and Ubsan CMake profiles,2,[],https://github.com/skvadrik/re2c/pull/318,https://github.com/sergeyklay,4,https://github.com/skvadrik/re2c/pull/318#issuecomment-706699051,"Hello,
This PR adds support of Asan and Ubsan build types for CMake. I prefer this option since it expresses the intent (run sanitizers) rather than modifies a number of flags. This also simplifies a bit build matrix on GitHub workflow.
Usage:
$ cmake \
    -DCMAKE_BUILD_TYPE=Asan \
    ...
    ...
Old school fans can still use the way with explicit passing of flags:
$ cmake \
    -DCMAKE_C_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_CXX_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_EXE_LINKER_FLAGS=""-fsanitize=address"" \
    -DCMAKE_SHARED_LINKER_FLAGS=""-fsanitize=address"" \
    ...
    ...
Note, I added -fno-omit-frame-pointer to Asan build type and do not added -O2 (it is added by workflow matrix). Let me know if you'd like to modify Asan/Ubsan build types by adding/removing flags.","Also I think it's important to keep Autotools on par with CMake when possible.

I'll try add Asan and Ubsan for Autotools a bit later.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,318,2020-10-10T14:40:40Z,2020-10-12T16:43:14Z,2020-10-12T16:45:38Z,MERGED,True,118,56,5,https://github.com/sergeyklay,Added Asan and Ubsan CMake profiles,2,[],https://github.com/skvadrik/re2c/pull/318,https://github.com/skvadrik,5,https://github.com/skvadrik/re2c/pull/318#issuecomment-706715048,"Hello,
This PR adds support of Asan and Ubsan build types for CMake. I prefer this option since it expresses the intent (run sanitizers) rather than modifies a number of flags. This also simplifies a bit build matrix on GitHub workflow.
Usage:
$ cmake \
    -DCMAKE_BUILD_TYPE=Asan \
    ...
    ...
Old school fans can still use the way with explicit passing of flags:
$ cmake \
    -DCMAKE_C_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_CXX_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_EXE_LINKER_FLAGS=""-fsanitize=address"" \
    -DCMAKE_SHARED_LINKER_FLAGS=""-fsanitize=address"" \
    ...
    ...
Note, I added -fno-omit-frame-pointer to Asan build type and do not added -O2 (it is added by workflow matrix). Let me know if you'd like to modify Asan/Ubsan build types by adding/removing flags.","Does this mean that you'd like to get building tools dispersed across various build scripts as well as CI configuration instead of a centralized and specialized tool?

I think that CI, maintainers/developers and users have slightly different needs. Users need a very simple and standard way to build the project, preferably documented in README (configure && make && make install for Autotools, or cmake . -B $BUILDDIR && make for CMake). Maintainers/developers need flexibility, such as the ability to enable/disable parts of the project, do bootstrap builds or enable certain build flags. And CI just needs to be able to build the project in different configurations in some automated way.
I think that build system should not be cluttered with details related to VCS, hosting, CI and other infrastructural details, in the sense that should be possible to migrate any of these details without rewriting the build system. Build scripts are for developers' convenience, so they don't have to be portable and can afford some lousiness (they can be easily written or removed). CI configs are for automated testing, they can be relatively complex or cluttered with details.
Documentation and READMEs should reference only the build system, not build scrips or CI.

IMO, having a vendor lock on the CI configuration isn't a forward-looking strategy.

I very much agree with this, therefore I don't think that GitHub Actions can be a canonical reference of how to build re2c. On one hand, it's an infrastructural detail and can go away in the future (I hope not, but there are sad examples). On the other hand, it is too complex and cluttered with details to serve as a good reference of how to build the project (and it requires understanding of the special syntax).

On the other hand, the project build logic scattered across various scripts doesn't help to get rid of build errors and overall project complexity. And this design makes project depend on the particular OS/shell.

I never thought of the build scripts as anything but a convenience for developers. Sure, they are not very clean or portable, but they can be added or thrown away at any time without much consideration.

CMake looks like more cross-platform than, for example Autotools or Bash. This means that you are likely will get fewer issues on various systems, including BSD, Windows, macOS and so on. So I'd like to know more about the double-sided sword :)

True, CMake has this great advantage. But as a build system, it lacks clear separation between the configuration part and the scripting part of the build system. It allows to write a lot of code easily, with many conditionals and complex logic, and that should be used with caution.
But this is only my vision, I may be wrong and I don't want to enforce it on the project. Since you contribute so much, I can just give you commit access. Then you'll be able to implement your ideas more freely and just ask me for advice if necessary. What do you think?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,318,2020-10-10T14:40:40Z,2020-10-12T16:43:14Z,2020-10-12T16:45:38Z,MERGED,True,118,56,5,https://github.com/sergeyklay,Added Asan and Ubsan CMake profiles,2,[],https://github.com/skvadrik/re2c/pull/318,https://github.com/sergeyklay,6,https://github.com/skvadrik/re2c/pull/318#issuecomment-706724149,"Hello,
This PR adds support of Asan and Ubsan build types for CMake. I prefer this option since it expresses the intent (run sanitizers) rather than modifies a number of flags. This also simplifies a bit build matrix on GitHub workflow.
Usage:
$ cmake \
    -DCMAKE_BUILD_TYPE=Asan \
    ...
    ...
Old school fans can still use the way with explicit passing of flags:
$ cmake \
    -DCMAKE_C_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_CXX_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_EXE_LINKER_FLAGS=""-fsanitize=address"" \
    -DCMAKE_SHARED_LINKER_FLAGS=""-fsanitize=address"" \
    ...
    ...
Note, I added -fno-omit-frame-pointer to Asan build type and do not added -O2 (it is added by workflow matrix). Let me know if you'd like to modify Asan/Ubsan build types by adding/removing flags.","Well, as you mentioned there are three ""consumers"" groups:
A. Regular users
B. Maintainers / developers
C. CI/CD systems
I think my efforts at this time are aimed for C and partially for B. I believe that proper CMake design will not interfere for A and will help for B and C. I'm trying to make interop with CI a little simpler and clearer, this is why some CMake changes are needed. In the end I would like to get a portable build system without dependencies on CI platform. Let's look at what I'm doing from a different side. The fact that we are getting more and more powerful build tools does not interfere (I hope it helps) any of the consumers groups listed.
I am impressed by the idea of ​​sending the user to read the CI configuration, especially when the documentation isn't comprehensive. May be because this is an easiest and short way. But I absolutely agree with you that documentation should reference only the build system and this is what I planed to ask you in the future -- create a complete and comprehensive documentation on how to build project using CMake, various OSes and supported build options. And I'll be happy to help with this. We should probably do the same for Autotools as long as it planned for long term support. To summarize -- lack of clear and comprehensive documentation should not be a reason for rejecting a build  tool or good practices.
I’d be happy to have commit access, but don’t think you’ll get rid of me so easily haha. I will still need a review for my PRs and your opinion on that.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,318,2020-10-10T14:40:40Z,2020-10-12T16:43:14Z,2020-10-12T16:45:38Z,MERGED,True,118,56,5,https://github.com/sergeyklay,Added Asan and Ubsan CMake profiles,2,[],https://github.com/skvadrik/re2c/pull/318,https://github.com/skvadrik,7,https://github.com/skvadrik/re2c/pull/318#issuecomment-707225508,"Hello,
This PR adds support of Asan and Ubsan build types for CMake. I prefer this option since it expresses the intent (run sanitizers) rather than modifies a number of flags. This also simplifies a bit build matrix on GitHub workflow.
Usage:
$ cmake \
    -DCMAKE_BUILD_TYPE=Asan \
    ...
    ...
Old school fans can still use the way with explicit passing of flags:
$ cmake \
    -DCMAKE_C_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_CXX_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_EXE_LINKER_FLAGS=""-fsanitize=address"" \
    -DCMAKE_SHARED_LINKER_FLAGS=""-fsanitize=address"" \
    ...
    ...
Note, I added -fno-omit-frame-pointer to Asan build type and do not added -O2 (it is added by workflow matrix). Let me know if you'd like to modify Asan/Ubsan build types by adding/removing flags.","Approved, I will leave it for you to click the merge button. :)",True,{'LAUGH': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,318,2020-10-10T14:40:40Z,2020-10-12T16:43:14Z,2020-10-12T16:45:38Z,MERGED,True,118,56,5,https://github.com/sergeyklay,Added Asan and Ubsan CMake profiles,2,[],https://github.com/skvadrik/re2c/pull/318,https://github.com/sergeyklay,8,https://github.com/skvadrik/re2c/pull/318#issuecomment-707230150,"Hello,
This PR adds support of Asan and Ubsan build types for CMake. I prefer this option since it expresses the intent (run sanitizers) rather than modifies a number of flags. This also simplifies a bit build matrix on GitHub workflow.
Usage:
$ cmake \
    -DCMAKE_BUILD_TYPE=Asan \
    ...
    ...
Old school fans can still use the way with explicit passing of flags:
$ cmake \
    -DCMAKE_C_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_CXX_FLAGS=""-g -fsanitize=address -fno-omit-frame-pointer"" \
    -DCMAKE_EXE_LINKER_FLAGS=""-fsanitize=address"" \
    -DCMAKE_SHARED_LINKER_FLAGS=""-fsanitize=address"" \
    ...
    ...
Note, I added -fno-omit-frame-pointer to Asan build type and do not added -O2 (it is added by workflow matrix). Let me know if you'd like to modify Asan/Ubsan build types by adding/removing flags.","Thank you for sharing your opinion, help with the review, and for helping me making this feature better.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,319,2020-10-13T13:43:33Z,2020-10-14T07:38:39Z,2020-10-14T07:38:42Z,MERGED,True,35,29,2,https://github.com/sergeyklay,Add minimal install test on GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/319,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/319,"This PR adds ability to install re2c as well as re2go on GitHub Actions.
Another notable changes are:
Install on Windows
I've started work to enable install targets for Windows. There is no ability to install libs yet, but the main binaries can be already installed.
Minimal Install Test
Renamed Minimal Load Test (Windows) job to more generic  Minimal Install Test. We'll amend this job in the future. But right now it tests that after installation the necessary binaries are in the expected place and you can run them (on Windows too).
Jobs Naming
Make the names of the builds more descriptive as discussed here:  #317 (comment)","This PR adds ability to install re2c as well as re2go on GitHub Actions.
Another notable changes are:
Install on Windows
I've started work to enable install targets for Windows. There is no ability to install libs yet, but the main binaries can be already installed.
Minimal Install Test
Renamed Minimal Load Test (Windows) job to more generic  Minimal Install Test. We'll amend this job in the future. But right now it tests that after installation the necessary binaries are in the expected place and you can run them (on Windows too).
Jobs Naming
Make the names of the builds more descriptive as discussed here:  #317 (comment)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/320,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/320#issuecomment-709617201,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","When changing re2c source code written in re2c (generally any source files that have .re extension), it is necessary to rebuild the precompiled files in the bootstrap directory. These files are used to build re2c without an already existing re2c executable.
$ mkdir stage1 && cd stage1
$ cmake .. && make
$ cd .. && mkdir stage2 && cd stage2
$ cmake .. -DRE2C_REBUILD_LEXERS=yes -DRE2C_FOR_BUILD=$(pwd)/../stage1/re2c && make

This will update all bootstrap lexers but for the most part the only change will be an updated generation date (this should be reverted). There will be one truly updated bootstrap file, bootstrap/src/parse/lex.cc, that should be committed together with src/parse/lex.re. It is not necessary to build stage1 if you have a fresh enough (and stable enough) re2c elsewhere on your system.
Regarding the change itself, I'm a bit concerned that not all compilers will see that fatal is noreturn. It is specified as an attribute on the function declaration in a header file, but RE2C_ATTR is conditionally defined under __GNUC__. So I'd expect that Visual Studio wouldn't be able to see that fatal does not return. And the control flow after fatal depends on where re2c puts this semantic action. Also, it is really easy to change fatal to, say, error (which is like fatal but returns) and forget to add goto or return.
The same problem is raised from time to time by re2c users: it would be good to have a dead goto or assert(false) or some similar statement after semantic actions that would serve as a precaution, but not trigger -Wunreachable-code warnings.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/320#issuecomment-709859777,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","Regarding the change itself, I'm a bit concerned that not all compilers will see that fatal is noreturn. It is specified as an attribute on the function declaration in a header file, but RE2C_ATTR is conditionally defined under __GNUC__.

In fact, I am impressed by the idea of making this macro a bit more portable. For example Clang supports
__attribute__((noreturn)) and Visual Studio supports __declspec(noreturn). I have never applied this widely. However, I am curious if a more generic implementation is possible. A naive example:
#ifdef __GNUC__
#    define RE2C_ATTR(x) __attribute__((x))
#elif __MINGW32__
#    define RE2C_ATTR(x) __attribute__((x))
#elif __clang__
#    define RE2C_ATTR(x) __attribute__((x))
#elif _MSC_VER
#    define RE2C_ATTR(x) __declspec(x)
#else
#    define RE2C_ATTR(x)
#endif

it is really easy to change fatal to, say, error (which is like fatal but returns) and forget to add goto or return.

Well, only this file has 22 places with fatal  without any dead code after. For example:

  
    
      re2c/src/parse/lex.re
    
    
        Lines 255 to 257
      in
      a904ff8
    
  
  
    

        
          
               eof { 
        

        
          
                   msg.fatal(cur_loc(), ""expected end of block""); 
        

        
          
               } 
        
    
  



  
    
      re2c/src/parse/lex.re
    
    
        Lines 278 to 280
      in
      a904ff8
    
  
  
    

        
          
               * { 
        

        
          
                   msg.fatal(cur_loc(), ""unrecognized configuration""); 
        

        
          
               } 
        
    
  



  
    
      re2c/src/parse/lex.re
    
    
        Lines 340 to 342
      in
      a904ff8
    
  
  
    

        
          
                   if (!s_to_u32_unsafe (tok + 1, cur - 1, yylval.bounds.min)) { 
        

        
          
                       msg.fatal(tok_loc(), ""repetition count overflow""); 
        

        
          
                   } 
        
    
  


So, to be more precise, my change affected the only usage of fatal where dead code is used. All other occurrences don't use such approach. Should we take a similar approach everywhere and add dead code since it is part of the design?
In fact, it looks like fatal should never have interrupted the main thread and exit(1) was added by mistake because a quick inspection showed about 60 use cases across src/ w/o dead code :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,4,https://github.com/skvadrik/re2c/pull/320#issuecomment-709884866,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","From conceptual point of view I'd like propose to drop this function at all and use error everywhere  with an explicit exit(1). It seems to me doubtful to introduce into the design such an obscure thing that can mislead not only an user, but also the compiler, just to save 1 line of code. Explicit is better than implicit.
I'm not even saying that it is somewhat strange to delegate the termination of the program to the message object whose apparent functionality includes only informational messaging",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/skvadrik,5,https://github.com/skvadrik/re2c/pull/320#issuecomment-710004392,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","I am impressed by the idea of making this macro a bit more portable.

Yes, that would be good. Initially I wanted some quick and dirty hack to have some validation with GCC, but there is no reason not to make it more portable.

Well, only this file has 22 places with fatal without any dead code after.

Good point, I don't like all 22. :D

In fact, it looks like fatal should never have interrupted the main thread and exit(1) was added by mistake because a quick inspection showed about 60 use cases across src/ w/o dead code :)

No, I don't think it was added accidentally, previously there was only fatal that exits, but no error.

From conceptual point of view I'd like propose to drop this function at all and use error everywhere with an explicit exit(1).

I think this is the best way. A bit more work, a bit more code, but no assumptions and workarounds.
In the future I'd like to have better error handling without exit(1) in the middle of a program, as this doesn't clean up resources and makes Valgrind tests fail.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,6,https://github.com/skvadrik/re2c/pull/320#issuecomment-710007498,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","I think this is the best way. A bit more work, a bit more code, but no assumptions and workarounds.

So, should I continue the work was started in this PR? Or will be better close this and create a new one for removing fatal in favor of error & exit(1)?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,7,https://github.com/skvadrik/re2c/pull/320#issuecomment-710022422,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","No, I don't think it was added accidentally, previously there was only fatal that exits, but no error.

BTW, from my point of view its more about C-style, not C++ one. I mean it is a common (albeit perverse) approach of doing things in the C world :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/skvadrik,8,https://github.com/skvadrik/re2c/pull/320#issuecomment-710035089,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","So, should I continue the work was started in this PR? Or will be better close this and create a new one for removing fatal in favor of error & exit(1)?

I think the second option is better (removing fatal).

BTW, from my point of view its more about C-style, not C++ one. I mean it is a common (albeit perverse) approach of doing things in the C world :)

Do you mean that explicit exit(1) without freeing resources is C style?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,9,https://github.com/skvadrik/re2c/pull/320#issuecomment-710038012,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","Do you mean that explicit exit(1) without freeing resources is C style?

I meant the design with for example 'message'-function with implicit program termination (or any other implicit side effect) - any subroutine which does more than initially appears. OOP from C++ is more about Events, Exception, Objects and so on, not about exit from message-function.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/skvadrik,10,https://github.com/skvadrik/re2c/pull/320#issuecomment-710784699,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","Hmm, I see, there is a problem with doing the cmake .. -DRE2C_REBUILD_LEXERS=yes -DRE2C_FOR_BUILD=$(pwd)/../stage1/re2c && make for the first time. I normally don't see it because I reconfigure in an already existing directory. You can use a workaround and do the first stage2 build without RE2C_REBUILD_LEXERS, and the second one with it:
$ mkdir stage1 && cd stage1
$ cmake .. && make
$ cd .. && mkdir stage2 && cd stage2
$ cmake .. && make
$ #... make your changes
$ cmake .. -DRE2C_REBUILD_LEXERS=yes -DRE2C_FOR_BUILD=$(pwd)/../stage1/re2c && make

The problem with first build needs to be fixed, but it's a separate problem.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/skvadrik,11,https://github.com/skvadrik/re2c/pull/320#issuecomment-710787428,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~",I have a patch to fix the issue with the first boot: #322.,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,12,https://github.com/skvadrik/re2c/pull/320#issuecomment-710788448,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","After re-generating the bootstrap folder (using my own workaround) and force-pushed to my repo I have 1 failed test: https://github.com/sergeyklay/re2c/runs/1268151861
...
OK         encodings/code_points_error_w.re
FAIL       posix_captures/implicit_grouping1.re
OK         encodings/code_points_error_x.re
...

Do you have ant idea? The diff is https://github.com/skvadrik/re2c/compare/master...sergeyklay:drop-message-fatal?expand=1",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/skvadrik,13,https://github.com/skvadrik/re2c/pull/320#issuecomment-710802064,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","I don't see any obvious reason for that test to fail. Did you run the tests locally after applying your patch? If any tests fail, there will be a temporary test directory with the failed ones, where you can see all outputs and compare the expected result with the actual one. Can you convert your patch into a PR, so that I can test it locally?
Also, it is important to make sure that your RE2C_FOR_BUILD was build from a clean source tree that passes all the tests. With self-hosting programs it is easy to get into a vicious feedback loop when the error propagates from one stage to another.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,14,https://github.com/skvadrik/re2c/pull/320#issuecomment-710803683,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","OK, lets merge #322 and I'll try again",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/skvadrik,15,https://github.com/skvadrik/re2c/pull/320#issuecomment-710805534,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","Ah, I see it. You forgot an exit(1) at line 448 of src/regexp/ast_to_re.cc. I found it by looking at the error message text in the failed test, and searching for it in the diff.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,16,https://github.com/skvadrik/re2c/pull/320#issuecomment-710806455,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","Ah, I see it. You forgot an exit(1) at line 448 of src/regexp/ast_to_re.cc. I found it by looking at the error message text in the failed test, and searching for it in the diff.

Yay! Thank you very much!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/skvadrik,17,https://github.com/skvadrik/re2c/pull/320#issuecomment-710808273,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","One thing I just noticed is that GitHub ""Merge pull request"" button now has variants in the drop-down menu. I have a suggestion: let's always use ""Rebase and merge"" option, ok? I don't want the history to be cluttered with merge commits.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/sergeyklay,18,https://github.com/skvadrik/re2c/pull/320#issuecomment-710815108,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","One thing I just noticed is that GitHub ""Merge pull request"" button now has variants in the drop-down menu.

Oh! Just FYI, this feature is from 2016 https://github.blog/2016-09-26-rebase-and-merge-pull-requests/ :)

I have a suggestion: let's always use ""Rebase and merge"" option, ok? I want the history to be cluttered with merge commits.

I completely agree with you! Lets use ""Rebase and Merge"". Btw, How long have you been looking at the settings?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,320,2020-10-15T17:12:07Z,2020-10-17T13:07:50Z,2020-10-17T13:08:14Z,CLOSED,False,0,1,1,https://github.com/sergeyklay,Fixed '-Wunreachable-code' warning,1,[],https://github.com/skvadrik/re2c/pull/320,https://github.com/skvadrik,19,https://github.com/skvadrik/re2c/pull/320#issuecomment-710831769,"Hello,
This code will never be executed (was found by Clang):
../src/parse/lex.re:428:9: warning: code will never be executed
      [-Wunreachable-code]
        goto scan;
        ^~~~~~~~~","Just FYI, this feature is from 2016

Eh... and I always bothered with command-line instructions. :D

Btw, How long have you been looking at the settings?

A while ago. :) Thank for reminding, I checked box ""Allow rebase merging"" and ""Automatically delete head branches"". Good stuff.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,321,2020-10-16T12:36:57Z,2020-10-16T16:49:13Z,2020-10-17T11:37:25Z,MERGED,True,0,10,2,https://github.com/sergeyklay,Fixed linker flags for Asan and Ubsan profiles.,1,[],https://github.com/skvadrik/re2c/pull/321,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/321,"This is a fix for linker flags that were mistakenly added after discussion at #318.
Here I fell into the trap of terminology, because although STATIC_LINKER is technically a program for ""getting one library from a bundle of something"", it works completely differently than EXE_LINKER and SHARED_LINKER.
Right now I'm preparing another (unrelated) PR and this issue was discovered during linking static libraries.","This is a fix for linker flags that were mistakenly added after discussion at #318.
Here I fell into the trap of terminology, because although STATIC_LINKER is technically a program for ""getting one library from a bundle of something"", it works completely differently than EXE_LINKER and SHARED_LINKER.
Right now I'm preparing another (unrelated) PR and this issue was discovered during linking static libraries.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,321,2020-10-16T12:36:57Z,2020-10-16T16:49:13Z,2020-10-17T11:37:25Z,MERGED,True,0,10,2,https://github.com/sergeyklay,Fixed linker flags for Asan and Ubsan profiles.,1,[],https://github.com/skvadrik/re2c/pull/321,https://github.com/sergeyklay,2,https://github.com/skvadrik/re2c/pull/321#issuecomment-710047517,"This is a fix for linker flags that were mistakenly added after discussion at #318.
Here I fell into the trap of terminology, because although STATIC_LINKER is technically a program for ""getting one library from a bundle of something"", it works completely differently than EXE_LINKER and SHARED_LINKER.
Right now I'm preparing another (unrelated) PR and this issue was discovered during linking static libraries.","I have a few suggestions regarding commit message (they apply to all commits in general):

Oh, no problem! I'm sorry, it wasn't obvious to me :-/ And of course your comments are clear to me, although I must admit I have often met the opposite point of view about commit patterns. Nevertheless, Is there any other rules? How about adding a few lines to CONTRIBUTING.md? It definitely will help contributors in the future. What about PR subject? Is there any rule?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,321,2020-10-16T12:36:57Z,2020-10-16T16:49:13Z,2020-10-17T11:37:25Z,MERGED,True,0,10,2,https://github.com/sergeyklay,Fixed linker flags for Asan and Ubsan profiles.,1,[],https://github.com/skvadrik/re2c/pull/321,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/321#issuecomment-710080981,"This is a fix for linker flags that were mistakenly added after discussion at #318.
Here I fell into the trap of terminology, because although STATIC_LINKER is technically a program for ""getting one library from a bundle of something"", it works completely differently than EXE_LINKER and SHARED_LINKER.
Right now I'm preparing another (unrelated) PR and this issue was discovered during linking static libraries.","No worries, the rules are not set in stone, it's just something I think makes sense. But it's a good idea to have guidelines for contributors. Hopefully we can save the effort and borrow them from some other project, but here are a few guidelines for a start:

Commit headline should use present tense, start with capital letter, end with period.
Commit headline should be specific (avoid generic uncertain terms like ""fix"", ""refactoring"", ""code cleanup"", etc. when possible).
Long commit message bodies with explanations, examples, test instructions are welcome.
Unrelated changes should be split into multiple commits.

... feel free o suggest other good practices.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,321,2020-10-16T12:36:57Z,2020-10-16T16:49:13Z,2020-10-17T11:37:25Z,MERGED,True,0,10,2,https://github.com/sergeyklay,Fixed linker flags for Asan and Ubsan profiles.,1,[],https://github.com/skvadrik/re2c/pull/321,https://github.com/sergeyklay,4,https://github.com/skvadrik/re2c/pull/321#issuecomment-710128708,"This is a fix for linker flags that were mistakenly added after discussion at #318.
Here I fell into the trap of terminology, because although STATIC_LINKER is technically a program for ""getting one library from a bundle of something"", it works completely differently than EXE_LINKER and SHARED_LINKER.
Right now I'm preparing another (unrelated) PR and this issue was discovered during linking static libraries.","ommit headline should be specific (avoid generic uncertain terms like ""fix"", ""refactoring"", ""code cleanup"", etc. when possible).


There is an example http://whatthecommit.com/ (refresh page) :D",True,{'LAUGH': ['https://github.com/skvadrik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,321,2020-10-16T12:36:57Z,2020-10-16T16:49:13Z,2020-10-17T11:37:25Z,MERGED,True,0,10,2,https://github.com/sergeyklay,Fixed linker flags for Asan and Ubsan profiles.,1,[],https://github.com/skvadrik/re2c/pull/321,https://github.com/sergeyklay,5,https://github.com/skvadrik/re2c/pull/321#issuecomment-710130374,"This is a fix for linker flags that were mistakenly added after discussion at #318.
Here I fell into the trap of terminology, because although STATIC_LINKER is technically a program for ""getting one library from a bundle of something"", it works completely differently than EXE_LINKER and SHARED_LINKER.
Right now I'm preparing another (unrelated) PR and this issue was discovered during linking static libraries.","... feel free o suggest other good practices.

There is a good reference: https://www.conventionalcommits.org/en/v1.0.0/",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,322,2020-10-17T09:53:33Z,2020-10-17T10:35:16Z,2020-10-17T10:35:22Z,MERGED,True,6,0,1,https://github.com/skvadrik,Create output directories for CMake builds with RE2C_REBUILD_LEXERS=yes.,1,[],https://github.com/skvadrik/re2c/pull/322,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/322,"Fixes the following build scenario:
$ mkdir stage1 && cd stage1
$ cmake .. && make
$ cd .. && mkdir stage2 && cd stage2
$ cmake .. \
    -DRE2C_REBUILD_LEXERS=yes \
    -DRE2C_FOR_BUILD=$(pwd)/../stage1/re2c && make","Fixes the following build scenario:
$ mkdir stage1 && cd stage1
$ cmake .. && make
$ cd .. && mkdir stage2 && cd stage2
$ cmake .. \
    -DRE2C_REBUILD_LEXERS=yes \
    -DRE2C_FOR_BUILD=$(pwd)/../stage1/re2c && make",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,323,2020-10-17T10:51:57Z,2020-10-17T13:07:50Z,2020-10-17T13:07:55Z,MERGED,True,1225,1009,17,https://github.com/sergeyklay,Drop 'fatal' and 'Msg::fatal' in favor of 'error' and 'Msg::error',1,[],https://github.com/skvadrik/re2c/pull/323,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/323,"This is aimed to reduce assumptions, workarounds and potential misunderstandings due to not a completely obvious behavior of
'fatal' function. I hope that overall this will make the code a little more understandable (albeit a little more verbose).
Closes #320","This is aimed to reduce assumptions, workarounds and potential misunderstandings due to not a completely obvious behavior of
'fatal' function. I hope that overall this will make the code a little more understandable (albeit a little more verbose).
Closes #320",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,323,2020-10-17T10:51:57Z,2020-10-17T13:07:50Z,2020-10-17T13:07:55Z,MERGED,True,1225,1009,17,https://github.com/sergeyklay,Drop 'fatal' and 'Msg::fatal' in favor of 'error' and 'Msg::error',1,[],https://github.com/skvadrik/re2c/pull/323,https://github.com/sergeyklay,2,https://github.com/skvadrik/re2c/pull/323#issuecomment-710868594,"This is aimed to reduce assumptions, workarounds and potential misunderstandings due to not a completely obvious behavior of
'fatal' function. I hope that overall this will make the code a little more understandable (albeit a little more verbose).
Closes #320","I don't see bootstrap parser being regenerated (it should, because parser.ypp has changed). Do you have bison? If not, can you get it?

Well, I reverted these changes on my local machine and did not commit them :( This was done on purpose because you didn't mention them on #320 (comment)
I have a more recent bison version (3.5.1) that creates a huge diff. Is this acceptable?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,323,2020-10-17T10:51:57Z,2020-10-17T13:07:50Z,2020-10-17T13:07:55Z,MERGED,True,1225,1009,17,https://github.com/sergeyklay,Drop 'fatal' and 'Msg::fatal' in favor of 'error' and 'Msg::error',1,[],https://github.com/skvadrik/re2c/pull/323,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/323#issuecomment-710893578,"This is aimed to reduce assumptions, workarounds and potential misunderstandings due to not a completely obvious behavior of
'fatal' function. I hope that overall this will make the code a little more understandable (albeit a little more verbose).
Closes #320","Well, I reverted these changes on my local machine and did not commit them :( This was done on purpose because you didn't mention them on #320 (comment)

Sorry! I missed that bit. There my be a few files (a header in addition to a source file). The general rule is, inspect all changes to autogenerated (bootstrap) files and rollback those that are trivial (like a timestamp). But I see that in your case it is difficult to see if there are real changes or just those caused by a bison update. In this particular case, since you changed parser code in the .ypp file, it definitely needs regeneration (it wouldn't compile on the next non-incremental build with RE2C_REBUILD_LEXERS=off).

I have a more recent bison version (3.5.1) that creates a huge diff. Is this acceptable?

Yes, I guess we'll have to live with this. If there are too many parser changes back and forth we can agree on some common bison version, but right now it's my system that's lagging behind and needs updating.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,324,2020-10-17T11:45:16Z,2020-10-19T07:22:54Z,2020-10-19T07:28:25Z,MERGED,True,59,0,2,https://github.com/sergeyklay,Add contributing guidelines,1,[],https://github.com/skvadrik/re2c/pull/324,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/324,As discussed on #321,As discussed on #321,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,324,2020-10-17T11:45:16Z,2020-10-19T07:22:54Z,2020-10-19T07:28:25Z,MERGED,True,59,0,2,https://github.com/sergeyklay,Add contributing guidelines,1,[],https://github.com/skvadrik/re2c/pull/324,https://github.com/sergeyklay,2,https://github.com/skvadrik/re2c/pull/324#issuecomment-710857597,As discussed on #321,Question: should (can) we somehow convert (add) this to the docs on re2c.org site?,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,324,2020-10-17T11:45:16Z,2020-10-19T07:22:54Z,2020-10-19T07:28:25Z,MERGED,True,59,0,2,https://github.com/sergeyklay,Add contributing guidelines,1,[],https://github.com/skvadrik/re2c/pull/324,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/324#issuecomment-710871779,As discussed on #321,"I noticed that there are still some requirements that are not obvious:

#320 (comment)
#323 (review)

Should I add this to the CONTRIBUTING.md file?  If so, could you please provide the correct and clean instructions?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,324,2020-10-17T11:45:16Z,2020-10-19T07:22:54Z,2020-10-19T07:28:25Z,MERGED,True,59,0,2,https://github.com/sergeyklay,Add contributing guidelines,1,[],https://github.com/skvadrik/re2c/pull/324,https://github.com/sergeyklay,4,https://github.com/skvadrik/re2c/pull/324#issuecomment-711158014,As discussed on #321,All the proposed changes are perfectly fine with me. Thank you for the review!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,324,2020-10-17T11:45:16Z,2020-10-19T07:22:54Z,2020-10-19T07:28:25Z,MERGED,True,59,0,2,https://github.com/sergeyklay,Add contributing guidelines,1,[],https://github.com/skvadrik/re2c/pull/324,https://github.com/sergeyklay,5,https://github.com/skvadrik/re2c/pull/324#issuecomment-711159584,As discussed on #321,@skvadrik I've added notes regarding bootstrap regeneration. Please take a look,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,324,2020-10-17T11:45:16Z,2020-10-19T07:22:54Z,2020-10-19T07:28:25Z,MERGED,True,59,0,2,https://github.com/sergeyklay,Add contributing guidelines,1,[],https://github.com/skvadrik/re2c/pull/324,https://github.com/skvadrik,6,https://github.com/skvadrik/re2c/pull/324#issuecomment-711161403,As discussed on #321,"I noticed that there are still some requirements that are not obvious:
* #320 (comment)
* #323 (review)
Should I add this to the CONTRIBUTING.md file? If so, could you please provide the correct and clean instructions?

Sorry, I missed this point on the previous review. Yes, I think it should be added in a separate section after ""Contributions"":
## Updating bootstrap files

For changes affect lexers (.re files), it is necessary to regenerate
the corresponding bootstrap files. This can be done by reconfiguring
and rebuilding re2c with options `--enable-lexers` (Autotools) or
`-DRE2C_REBUILD_LEXERS=yes` (CMake). `RE2C_FOR_BUILD` should
be defined to a path to an already existing re2c executable that will
be used to regenerate the lexers.

For changes that affect parser (.ypp file), it is necessary to regenerate
bootstrap parser files. This happens automatically if bison is installed.

For changes that update documentation, it is necessary to rebuild the
bootstrap manpages by reconfiguring and rebuilding re2c with options
`--enable-docs` (Autotools) or `-DRE2C_REBUILD_DOCS=yes` (CMake).

Please do not commit trivial updates to the bootstrap files, such as
changes of the generator version or generation date.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,324,2020-10-17T11:45:16Z,2020-10-19T07:22:54Z,2020-10-19T07:28:25Z,MERGED,True,59,0,2,https://github.com/sergeyklay,Add contributing guidelines,1,[],https://github.com/skvadrik/re2c/pull/324,https://github.com/skvadrik,7,https://github.com/skvadrik/re2c/pull/324#issuecomment-711161499,As discussed on #321,"I've added notes regarding bootstrap regeneration. Please take a look

I was just finishing the comment about that, see my suggestions there. :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,324,2020-10-17T11:45:16Z,2020-10-19T07:22:54Z,2020-10-19T07:28:25Z,MERGED,True,59,0,2,https://github.com/sergeyklay,Add contributing guidelines,1,[],https://github.com/skvadrik/re2c/pull/324,https://github.com/sergeyklay,8,https://github.com/skvadrik/re2c/pull/324#issuecomment-711196767,As discussed on #321,All the proposed changes were applied. Is there anything else we forgot to mention?,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,326,2020-10-19T20:03:32Z,2020-10-20T06:34:52Z,2022-05-29T13:04:10Z,MERGED,True,46,16,3,https://github.com/sergeyklay,Add the ability to generate manpage and documentation for BSD systems,4,[],https://github.com/skvadrik/re2c/pull/326,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/326,"Add the ability to generate manpage and documentation for BSD systems

Stripping headers may not work as expected, as man output differs on different systems. This should work now.
Simplified output parsing procedure by replacing the regular expression by TERM=dumb.
Stripping escape sequences.
Added documentation about the intentions of this script.

Check for man and sed on Windows when RE2C_REBUILD_DOCS is ON
Windows does not have a native man and sed commands. Therefore, we are looking for the Cygwin versions of  man and sed. This doesn't add full Windows support. However, in case of the absence of the required programs, this shows error messages before the build stage.
Rephrase error messages for RE2C_REBUILD_DOCS=ON
This aims to provide a bit more clear error messages on regenerate manpage stage as well as documentation.
Remove rst2man output redirection as it doesn't work on Windows
There is no need for redirect output with > (which doesn't work on Windows) as this is how rst2man works:
  rst2man [options] [<source> [<destination>]]


For the discussion see: #325","Add the ability to generate manpage and documentation for BSD systems

Stripping headers may not work as expected, as man output differs on different systems. This should work now.
Simplified output parsing procedure by replacing the regular expression by TERM=dumb.
Stripping escape sequences.
Added documentation about the intentions of this script.

Check for man and sed on Windows when RE2C_REBUILD_DOCS is ON
Windows does not have a native man and sed commands. Therefore, we are looking for the Cygwin versions of  man and sed. This doesn't add full Windows support. However, in case of the absence of the required programs, this shows error messages before the build stage.
Rephrase error messages for RE2C_REBUILD_DOCS=ON
This aims to provide a bit more clear error messages on regenerate manpage stage as well as documentation.
Remove rst2man output redirection as it doesn't work on Windows
There is no need for redirect output with > (which doesn't work on Windows) as this is how rst2man works:
  rst2man [options] [<source> [<destination>]]


For the discussion see: #325",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,328,2020-10-20T08:45:08Z,2020-10-20T12:18:35Z,2020-10-20T12:18:38Z,MERGED,True,51,27,1,https://github.com/sergeyklay,Restructuring Configure and Build jobs on GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/328,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/328,"This is a planned, intermediate change that prepares the following things:

Preparing to use different generators (Xcode, NMake, Ninja)
Preparing to use rebuild and test documentation (thanks to #326). This required renaming some steps
Preparing to build libs
Preparing to use Autotools
Preparing to make a full migration of CMake builds from Travis CI

Notable improvements include the unification of the Configure job (now it is Fast Configure) for all platforms","This is a planned, intermediate change that prepares the following things:

Preparing to use different generators (Xcode, NMake, Ninja)
Preparing to use rebuild and test documentation (thanks to #326). This required renaming some steps
Preparing to build libs
Preparing to use Autotools
Preparing to make a full migration of CMake builds from Travis CI

Notable improvements include the unification of the Configure job (now it is Fast Configure) for all platforms",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,328,2020-10-20T08:45:08Z,2020-10-20T12:18:35Z,2020-10-20T12:18:38Z,MERGED,True,51,27,1,https://github.com/sergeyklay,Restructuring Configure and Build jobs on GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/328,https://github.com/sergeyklay,2,https://github.com/skvadrik/re2c/pull/328#issuecomment-712786905,"This is a planned, intermediate change that prepares the following things:

Preparing to use different generators (Xcode, NMake, Ninja)
Preparing to use rebuild and test documentation (thanks to #326). This required renaming some steps
Preparing to build libs
Preparing to use Autotools
Preparing to make a full migration of CMake builds from Travis CI

Notable improvements include the unification of the Configure job (now it is Fast Configure) for all platforms","I'm not sure if you mean to remove Travis CI,

I didn't plan to remove its support, at least in the near future, even though it is clearly slower than GitHub Action and provides less features. You are probably confused by the word ""migration"". Should I change the commit message?

Why is it necessary to rename Configure into Fast Configure

Because there is another 'Configure'  job called 'Full Configure' with RE2C_REBUILD_LEXERS, RE2C_BUILD_LIBS, RE2C_REBUILD_DOCS (I'll send a PR soon). The same as Travis CI does right now:
Fast:

  
    
      re2c/.travis.yml
    
    
        Lines 47 to 55
      in
      8bfac01
    
  
  
    

        
          
             - | 
        

        
          
               if [ x${CMAKE} = ""xyes"" ]; then 
        

        
          
                   mkdir -p ${BUILD_DIR} && cd ${BUILD_DIR} 
        

        
          
                   run_cmake -DCMAKE_INSTALL_PREFIX=""$(pwd)/install"" 
        

        
          
               else 
        

        
          
                   ./autogen.sh 
        

        
          
                   mkdir -p ${BUILD_DIR} && cd ${BUILD_DIR} 
        

        
          
                   run_configure --prefix=""$(pwd)/install"" 
        

        
          
               fi 
        
    
  


Full:

  
    
      re2c/.travis.yml
    
    
        Lines 58 to 73
      in
      8bfac01
    
  
  
    

        
          
             - | 
        

        
          
               if [ x${CMAKE} = ""xyes"" ]; then 
        

        
          
                   run_cmake -DCMAKE_INSTALL_PREFIX=""$(pwd)/install-2"" \ 
        

        
          
                       -DRE2C_BUILD_RE2GO=on \ 
        

        
          
                       -DRE2C_BUILD_LIBS=on \ 
        

        
          
                       -DRE2C_REBUILD_DOCS=on \ 
        

        
          
                       -DRE2C_REBUILD_LEXERS=on \ 
        

        
          
                       -DRE2C_FOR_BUILD=""$(pwd)/install/bin/re2c"" 
        

        
          
               else 
        

        
          
                   run_configure --prefix=""$(pwd)/install-2"" \ 
        

        
          
                       --enable-golang \ 
        

        
          
                       --enable-libs \ 
        

        
          
                       --enable-docs \ 
        

        
          
                       --enable-lexers \ 
        

        
          
                       RE2C_FOR_BUILD=""$(pwd)/install/bin/re2c"" 
        

        
          
               fi 
        
    
  


The same for 'Build' step. I don't mind any other name.

and split it in two steps?

No, I just moved the preparation of the configure arguments, not configuration. The same as Travis CI does right now:

  
    
      re2c/.travis.yml
    
    
        Lines 29 to 46
      in
      8bfac01
    
  
  
    

        
          
               function run_cmake() { 
        

        
          
                   cmake \ 
        

        
          
                       -B . -S ${CONFIG_DIR} \ 
        

        
          
                       -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \ 
        

        
          
                       -DCMAKE_C_FLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       -DCMAKE_CXX_FLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       -DCMAKE_EXE_LINKER_FLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       -DCMAKE_SHARED_LINKER_FLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       $@ 
        

        
          
               } 
        

        
          
               function run_configure() { 
        

        
          
                   ${CONFIG_DIR}/configure \ 
        

        
          
                       ${CONFIG_FLAGS} \ 
        

        
          
                       CFLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       CXXFLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       LDFLAGS=""${COMMON_FLAGS}"" \ 
        

        
          
                       $@ 
        

        
          
               } 
        
    
  



Why is it necessary to rename Build step into Fast Build?

See above.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,328,2020-10-20T08:45:08Z,2020-10-20T12:18:35Z,2020-10-20T12:18:38Z,MERGED,True,51,27,1,https://github.com/sergeyklay,Restructuring Configure and Build jobs on GitHub Actions,1,[],https://github.com/skvadrik/re2c/pull/328,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/328#issuecomment-712797176,"This is a planned, intermediate change that prepares the following things:

Preparing to use different generators (Xcode, NMake, Ninja)
Preparing to use rebuild and test documentation (thanks to #326). This required renaming some steps
Preparing to build libs
Preparing to use Autotools
Preparing to make a full migration of CMake builds from Travis CI

Notable improvements include the unification of the Configure job (now it is Fast Configure) for all platforms","You are probably confused by the word ""migration"". Should I change the commit message?

No, it's absolutely fine, I just want to be on the same page.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,329,2020-10-20T13:17:28Z,2020-10-20T22:00:57Z,2020-10-20T22:32:15Z,MERGED,True,72,12,1,https://github.com/sergeyklay,Complete CI implementation using CMake and GitHub  Actions,1,[],https://github.com/skvadrik/re2c/pull/329,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/329,"This PR adds ability to build re2c on GitHub Actions with the following options:

-DRE2C_REBUILD_LEXERS=ON: Windows, macOs, Linux
-DRE2C_BUILD_LIBS=ON: Windows, macOs, Linux
-DRE2C_REBUILD_DOCS=ON: macOs, Linux

With this PR I completely implement CI on GitHub Actions using CMake. Current workflow configuration fully cover the Travis' configuration (even more).","This PR adds ability to build re2c on GitHub Actions with the following options:

-DRE2C_REBUILD_LEXERS=ON: Windows, macOs, Linux
-DRE2C_BUILD_LIBS=ON: Windows, macOs, Linux
-DRE2C_REBUILD_DOCS=ON: macOs, Linux

With this PR I completely implement CI on GitHub Actions using CMake. Current workflow configuration fully cover the Travis' configuration (even more).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,329,2020-10-20T13:17:28Z,2020-10-20T22:00:57Z,2020-10-20T22:32:15Z,MERGED,True,72,12,1,https://github.com/sergeyklay,Complete CI implementation using CMake and GitHub  Actions,1,[],https://github.com/skvadrik/re2c/pull/329,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/329#issuecomment-713141053,"This PR adds ability to build re2c on GitHub Actions with the following options:

-DRE2C_REBUILD_LEXERS=ON: Windows, macOs, Linux
-DRE2C_BUILD_LIBS=ON: Windows, macOs, Linux
-DRE2C_REBUILD_DOCS=ON: macOs, Linux

With this PR I completely implement CI on GitHub Actions using CMake. Current workflow configuration fully cover the Travis' configuration (even more).","Thanks and sorry for the delayed review!
Please don't feel obliged to wait for my review if that's an obstacle for you. I'm glad you do, but I shouldn't be holding back your work. If something is wrong it can always be fixed in a follow-up commit.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,329,2020-10-20T13:17:28Z,2020-10-20T22:00:57Z,2020-10-20T22:32:15Z,MERGED,True,72,12,1,https://github.com/sergeyklay,Complete CI implementation using CMake and GitHub  Actions,1,[],https://github.com/skvadrik/re2c/pull/329,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/329#issuecomment-713162679,"This PR adds ability to build re2c on GitHub Actions with the following options:

-DRE2C_REBUILD_LEXERS=ON: Windows, macOs, Linux
-DRE2C_BUILD_LIBS=ON: Windows, macOs, Linux
-DRE2C_REBUILD_DOCS=ON: macOs, Linux

With this PR I completely implement CI on GitHub Actions using CMake. Current workflow configuration fully cover the Travis' configuration (even more).","We can merge skeleton configurations with normal configurations and run skeleton tests after normal tests. They should be enabled for a few selected configurations (such as linux-gcc-debug-ootree), not for every one. It's only +2 minutes, the total time will still be less than a sanitizer build.

Just to clarify: Do you suggest enable skeleton test for some more configurations and merge with 'Standard Tests' job?
If so, could you please list the configurations in which we should include skeleton test?

Why is it a problem to run tests on Windows (in Cygwin environment)?

As I said before, I'd like to write pure PowerShell wrapper for this. This is in my plans. As for Cygwin: I'd like to provide a separated Cygwin matrix item to go all the way, from build to tests. This is planned on purpose to mix Cygwin with Visual Studio. You may have noticed that the current Windows builds proves that the Windows users can build and even test re2c using native tools, without resorting to Mingw, Cygwin and so on.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,329,2020-10-20T13:17:28Z,2020-10-20T22:00:57Z,2020-10-20T22:32:15Z,MERGED,True,72,12,1,https://github.com/sergeyklay,Complete CI implementation using CMake and GitHub  Actions,1,[],https://github.com/skvadrik/re2c/pull/329,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/329#issuecomment-713177798,"This PR adds ability to build re2c on GitHub Actions with the following options:

-DRE2C_REBUILD_LEXERS=ON: Windows, macOs, Linux
-DRE2C_BUILD_LIBS=ON: Windows, macOs, Linux
-DRE2C_REBUILD_DOCS=ON: macOs, Linux

With this PR I completely implement CI on GitHub Actions using CMake. Current workflow configuration fully cover the Travis' configuration (even more).","Just to clarify: Do you suggest enable skeleton test for some more configurations and merge with 'Standard Tests' job?
If so, could you please list the configurations in which we should include skeleton test?

Yes, I had something like this in mind: #330.

As I said before, I'd like to write pure PowerShell wrapper for this. This is in my plans. As for Cygwin: I'd like to provide a separated Cygwin matrix item to go all the way, from build to tests. This is planned on purpose to mix Cygwin with Visual Studio.

Cool!

You may have noticed that the current Windows builds proves that the Windows users can build and even test re2c using native tools, without resorting to Mingw, Cygwin and so on.

Yes, that's nice.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,330,2020-10-20T22:30:34Z,2020-10-21T07:08:54Z,2020-10-21T07:08:55Z,MERGED,True,19,32,1,https://github.com/skvadrik,GitHub Actions: run skeleton tests after normal tests in the same build.,1,[],https://github.com/skvadrik/re2c/pull/330,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/330,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,330,2020-10-20T22:30:34Z,2020-10-21T07:08:54Z,2020-10-21T07:08:55Z,MERGED,True,19,32,1,https://github.com/skvadrik,GitHub Actions: run skeleton tests after normal tests in the same build.,1,[],https://github.com/skvadrik/re2c/pull/330,https://github.com/sergeyklay,2,https://github.com/skvadrik/re2c/pull/330#issuecomment-713190944,,Just for your info: There is an ability to cancel builds in case of force-push,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,330,2020-10-20T22:30:34Z,2020-10-21T07:08:54Z,2020-10-21T07:08:55Z,MERGED,True,19,32,1,https://github.com/skvadrik,GitHub Actions: run skeleton tests after normal tests in the same build.,1,[],https://github.com/skvadrik/re2c/pull/330,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/330#issuecomment-713191522,,"Just for your info: There is an ability to cancel builds in case of force-push

Ah, I was wondering about that. I hoped it would auto-cancel, but apparently not (or maybe they get cancelled, but still show in the UI). :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,330,2020-10-20T22:30:34Z,2020-10-21T07:08:54Z,2020-10-21T07:08:55Z,MERGED,True,19,32,1,https://github.com/skvadrik,GitHub Actions: run skeleton tests after normal tests in the same build.,1,[],https://github.com/skvadrik/re2c/pull/330,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/330#issuecomment-713194484,,"I'm not sure about ""${{ matrix.skeleton }}"" == true

Seems to work as expected (skeleton build runs skeleton tests, non-skeleton one doesn't). Are you worries about the usual shell things like empty variable on the left hand side, or not quoting true? Maybe it should be ""x${{ matrix.skeleton }}"" == ""xtrue"".",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,330,2020-10-20T22:30:34Z,2020-10-21T07:08:54Z,2020-10-21T07:08:55Z,MERGED,True,19,32,1,https://github.com/skvadrik,GitHub Actions: run skeleton tests after normal tests in the same build.,1,[],https://github.com/skvadrik/re2c/pull/330,https://github.com/sergeyklay,5,https://github.com/skvadrik/re2c/pull/330#issuecomment-713197436,,"Maybe it should be ""x${{ matrix.skeleton }}"" == ""xtrue"".

Yeah, I usually prefer something like this. But, if everything is OK, then great!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,332,2020-10-31T11:40:06Z,2020-10-31T23:42:22Z,2020-10-31T23:42:25Z,MERGED,True,40,19,3,https://github.com/sergeyklay,Use CMAKE_BUILD_TYPE for single-config build types only,3,[],https://github.com/skvadrik/re2c/pull/332,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/332,"Hello,
There are some commits I'd like to separate from my current working branch and push them to master.  They are enough trivial and I hope provided patch doesn't need additional description:

Use CMAKE_BUILD_TYPE for single-config build types only
Ignore autogenerated directories and files
Add .log extension for auto generated test logs","Hello,
There are some commits I'd like to separate from my current working branch and push them to master.  They are enough trivial and I hope provided patch doesn't need additional description:

Use CMAKE_BUILD_TYPE for single-config build types only
Ignore autogenerated directories and files
Add .log extension for auto generated test logs",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,333,2020-11-04T09:44:27Z,2020-11-04T13:09:03Z,2020-11-04T13:09:31Z,MERGED,True,5,1,1,https://github.com/trofi,skeleton: delete '.input' and '.keys' files before overwriting them,1,[],https://github.com/skvadrik/re2c/pull/333,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/333,"At least on ext4 open(O_TRUNC); write(); close() works a lot
slower than unlink(); open(); write(); close().
My speculation is that ext4 has to do non-trivial free block
accounting at close() time that were freed by O_TRUNC.
Before the patch:
$ rm 1.c.line8.input 1.c.line8.keys; time ../re2c bug128.re -o 1.c -Si
real    0m3,011s
user    0m2,091s
sys     0m0,907s

$ time ../re2c bug128.re -o 1.c -Si
real    0m9,506s
user    0m1,708s
sys     0m0,946s

After the patch:
$ rm 1.c.line8.input 1.c.line8.keys;  time ../re2c bug128.re -o 1.c -Si
real    0m3,785s
user    0m2,615s
sys     0m1,152s

$ time ../re2c bug128.re -o 1.c -Si
real    0m3,570s
user    0m2,348s
sys     0m1,205s

It's a 3x speedup.","At least on ext4 open(O_TRUNC); write(); close() works a lot
slower than unlink(); open(); write(); close().
My speculation is that ext4 has to do non-trivial free block
accounting at close() time that were freed by O_TRUNC.
Before the patch:
$ rm 1.c.line8.input 1.c.line8.keys; time ../re2c bug128.re -o 1.c -Si
real    0m3,011s
user    0m2,091s
sys     0m0,907s

$ time ../re2c bug128.re -o 1.c -Si
real    0m9,506s
user    0m1,708s
sys     0m0,946s

After the patch:
$ rm 1.c.line8.input 1.c.line8.keys;  time ../re2c bug128.re -o 1.c -Si
real    0m3,785s
user    0m2,615s
sys     0m1,152s

$ time ../re2c bug128.re -o 1.c -Si
real    0m3,570s
user    0m2,348s
sys     0m1,205s

It's a 3x speedup.",True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,333,2020-11-04T09:44:27Z,2020-11-04T13:09:03Z,2020-11-04T13:09:31Z,MERGED,True,5,1,1,https://github.com/trofi,skeleton: delete '.input' and '.keys' files before overwriting them,1,[],https://github.com/skvadrik/re2c/pull/333,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/333#issuecomment-721722078,"At least on ext4 open(O_TRUNC); write(); close() works a lot
slower than unlink(); open(); write(); close().
My speculation is that ext4 has to do non-trivial free block
accounting at close() time that were freed by O_TRUNC.
Before the patch:
$ rm 1.c.line8.input 1.c.line8.keys; time ../re2c bug128.re -o 1.c -Si
real    0m3,011s
user    0m2,091s
sys     0m0,907s

$ time ../re2c bug128.re -o 1.c -Si
real    0m9,506s
user    0m1,708s
sys     0m0,946s

After the patch:
$ rm 1.c.line8.input 1.c.line8.keys;  time ../re2c bug128.re -o 1.c -Si
real    0m3,785s
user    0m2,615s
sys     0m1,152s

$ time ../re2c bug128.re -o 1.c -Si
real    0m3,570s
user    0m2,348s
sys     0m1,205s

It's a 3x speedup.","Merged, thank you!",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,335,2020-11-07T11:13:56Z,2020-11-07T12:17:09Z,2020-11-07T12:17:23Z,MERGED,True,5,1,1,https://github.com/trofi,--skeleton: add 'auto_da_alloc' reference around remove()/fopen() comment,1,[],https://github.com/skvadrik/re2c/pull/335,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/335,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,335,2020-11-07T11:13:56Z,2020-11-07T12:17:09Z,2020-11-07T12:17:23Z,MERGED,True,5,1,1,https://github.com/trofi,--skeleton: add 'auto_da_alloc' reference around remove()/fopen() comment,1,[],https://github.com/skvadrik/re2c/pull/335,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/335#issuecomment-723439036,,Thanks @trofi !,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,336,2020-11-07T11:44:15Z,2020-11-07T18:56:41Z,2020-11-07T18:56:45Z,MERGED,True,36,25,1,https://github.com/sergeyklay,Speed up the CMake configuration by avoiding unnecessary checks,1,[],https://github.com/skvadrik/re2c/pull/336,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/336,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,337,2020-12-17T10:21:39Z,2020-12-17T13:53:03Z,2020-12-17T13:53:19Z,MERGED,True,1,1,1,https://github.com/timgates42,"docs: fix simple typo, otheriwse -> otherwise",1,[],https://github.com/skvadrik/re2c/pull/337,https://github.com/timgates42,1,https://github.com/skvadrik/re2c/pull/337,"There is a small typo in libre2c_old/examples/compare/compare.h.
Should read otherwise rather than otheriwse.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","There is a small typo in libre2c_old/examples/compare/compare.h.
Should read otherwise rather than otheriwse.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,337,2020-12-17T10:21:39Z,2020-12-17T13:53:03Z,2020-12-17T13:53:19Z,MERGED,True,1,1,1,https://github.com/timgates42,"docs: fix simple typo, otheriwse -> otherwise",1,[],https://github.com/skvadrik/re2c/pull/337,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/337#issuecomment-747451856,"There is a small typo in libre2c_old/examples/compare/compare.h.
Should read otherwise rather than otheriwse.
Semi-automated pull request generated by
https://github.com/timgates42/meticulous/blob/master/docs/NOTE.md","Merged, thank you!",True,{'THUMBS_UP': ['https://github.com/timgates42']}
skvadrik/re2c,https://github.com/skvadrik/re2c,338,2020-12-29T15:23:21Z,2020-12-29T17:03:07Z,2020-12-29T20:01:36Z,MERGED,True,2,1,1,https://github.com/unixod,Fix compiling on Windows (MSVC),1,[],https://github.com/skvadrik/re2c/pull/338,https://github.com/unixod,1,https://github.com/skvadrik/re2c/pull/338,"Hi,
By trying to build re2c on Windows, using MSVS 2017 I faced the compile-time error: C2039: 'isalnum': is not a member of 'std'. This PR fixes this issue.
By the way I added a small fix of using this function: in order to avoid UB (which may occur in some situations, see links below) the argument should be passed by preliminary converting it to unsigned char. More info about this issue:

https://stackoverflow.com/a/39520176/1117306
https://en.cppreference.com/w/cpp/string/byte/isalnum.","Hi,
By trying to build re2c on Windows, using MSVS 2017 I faced the compile-time error: C2039: 'isalnum': is not a member of 'std'. This PR fixes this issue.
By the way I added a small fix of using this function: in order to avoid UB (which may occur in some situations, see links below) the argument should be passed by preliminary converting it to unsigned char. More info about this issue:

https://stackoverflow.com/a/39520176/1117306
https://en.cppreference.com/w/cpp/string/byte/isalnum.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,338,2020-12-29T15:23:21Z,2020-12-29T17:03:07Z,2020-12-29T20:01:36Z,MERGED,True,2,1,1,https://github.com/unixod,Fix compiling on Windows (MSVC),1,[],https://github.com/skvadrik/re2c/pull/338,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/338#issuecomment-752161786,"Hi,
By trying to build re2c on Windows, using MSVS 2017 I faced the compile-time error: C2039: 'isalnum': is not a member of 'std'. This PR fixes this issue.
By the way I added a small fix of using this function: in order to avoid UB (which may occur in some situations, see links below) the argument should be passed by preliminary converting it to unsigned char. More info about this issue:

https://stackoverflow.com/a/39520176/1117306
https://en.cppreference.com/w/cpp/string/byte/isalnum.",Thank you!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,339,2020-12-29T20:25:07Z,2020-12-29T22:11:57Z,2020-12-30T12:22:06Z,MERGED,True,1,0,1,https://github.com/unixod,Enable support of C++ exceptions on MSVC builds.,1,[],https://github.com/skvadrik/re2c/pull/339,https://github.com/unixod,1,https://github.com/skvadrik/re2c/pull/339,"HI,
By looking at build log on Windows (MSVC) I noticed a number of warnings of the form:
'noexcept' used with no exception handling mode specified; termination on exception is not guaranteed. Specify /EHsc (compiling source file ...src\codegen\gen_state.cc)
If I recall correctly from my experience, if this flag isn't set then we may encounter situations when destructors of automatic objects aren't called during the exception propagation process.
The following doc also recommends (if project doesn't use SEH) to set this flag:
https://docs.microsoft.com/ru-ru/cpp/build/reference/eh-exception-handling-model?view=msvc-160","HI,
By looking at build log on Windows (MSVC) I noticed a number of warnings of the form:
'noexcept' used with no exception handling mode specified; termination on exception is not guaranteed. Specify /EHsc (compiling source file ...src\codegen\gen_state.cc)
If I recall correctly from my experience, if this flag isn't set then we may encounter situations when destructors of automatic objects aren't called during the exception propagation process.
The following doc also recommends (if project doesn't use SEH) to set this flag:
https://docs.microsoft.com/ru-ru/cpp/build/reference/eh-exception-handling-model?view=msvc-160",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,339,2020-12-29T20:25:07Z,2020-12-29T22:11:57Z,2020-12-30T12:22:06Z,MERGED,True,1,0,1,https://github.com/unixod,Enable support of C++ exceptions on MSVC builds.,1,[],https://github.com/skvadrik/re2c/pull/339,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/339#issuecomment-752260631,"HI,
By looking at build log on Windows (MSVC) I noticed a number of warnings of the form:
'noexcept' used with no exception handling mode specified; termination on exception is not guaranteed. Specify /EHsc (compiling source file ...src\codegen\gen_state.cc)
If I recall correctly from my experience, if this flag isn't set then we may encounter situations when destructors of automatic objects aren't called during the exception propagation process.
The following doc also recommends (if project doesn't use SEH) to set this flag:
https://docs.microsoft.com/ru-ru/cpp/build/reference/eh-exception-handling-model?view=msvc-160","@unixod Thanks! I wonder which version of MSVC you are using, as I see no such warnings in the CI logs: https://github.com/skvadrik/re2c/runs/1622655634, which uses Visual Studio 2019 (C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.28.29333\bin\HostX64\x64\CL.exe).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,339,2020-12-29T20:25:07Z,2020-12-29T22:11:57Z,2020-12-30T12:22:06Z,MERGED,True,1,0,1,https://github.com/unixod,Enable support of C++ exceptions on MSVC builds.,1,[],https://github.com/skvadrik/re2c/pull/339,https://github.com/unixod,3,https://github.com/skvadrik/re2c/pull/339#issuecomment-752357341,"HI,
By looking at build log on Windows (MSVC) I noticed a number of warnings of the form:
'noexcept' used with no exception handling mode specified; termination on exception is not guaranteed. Specify /EHsc (compiling source file ...src\codegen\gen_state.cc)
If I recall correctly from my experience, if this flag isn't set then we may encounter situations when destructors of automatic objects aren't called during the exception propagation process.
The following doc also recommends (if project doesn't use SEH) to set this flag:
https://docs.microsoft.com/ru-ru/cpp/build/reference/eh-exception-handling-model?view=msvc-160","@unixod Thanks! I wonder which version of MSVC you are using, as I see no such warnings in the CI logs: https://github.com/skvadrik/re2c/runs/1622655634, which uses Visual Studio 2019 (C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.28.29333\bin\HostX64\x64\CL.exe).

Ah, I see. Now I realized that disappearance of /EHsc in my case was caused by using -DCMAKE_CXX_FLAGS=/MP in command line on our CI script (i.e. default flags (https://github.com/skvadrik/re2c/runs/1622655634#step:9:43) were inadvertently overwritten). Be that as it may, I think it is good choice to enforce  using of this flag regardless of what users put in CMAKE_CXX_FLAGS because they may accedently, as it happend in my case, disable this important feature)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,339,2020-12-29T20:25:07Z,2020-12-29T22:11:57Z,2020-12-30T12:22:06Z,MERGED,True,1,0,1,https://github.com/unixod,Enable support of C++ exceptions on MSVC builds.,1,[],https://github.com/skvadrik/re2c/pull/339,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/339#issuecomment-752405638,"HI,
By looking at build log on Windows (MSVC) I noticed a number of warnings of the form:
'noexcept' used with no exception handling mode specified; termination on exception is not guaranteed. Specify /EHsc (compiling source file ...src\codegen\gen_state.cc)
If I recall correctly from my experience, if this flag isn't set then we may encounter situations when destructors of automatic objects aren't called during the exception propagation process.
The following doc also recommends (if project doesn't use SEH) to set this flag:
https://docs.microsoft.com/ru-ru/cpp/build/reference/eh-exception-handling-model?view=msvc-160","Ok, let's keep /EHsc.
I noticed that in Visual Studio builds whatever we set in https://github.com/skvadrik/re2c/blob/master/cmake/Re2cCompilerFlags.cmake gets overridden by CMAKE_CXX_FLAGS that is populated by CMake (it ends up being /EHsc /Wall /DWIN32 /D_WINDOWS /W3 /GR /EHsc, where /W3 overrides /Wall). This happens because we prepend flags to this variable instead of appending them (to avoid overriding the flags set by the user on the command-line). Usually it works because CMake uses build-type specific variables CMAKE_CXX_FLAGS_DEBUG, CMAKE_CXX_FLAGS_RELEASE etc. to set defaults instead of CMAKE_CXX_FLAGS, but this is not the case for multiconfiguration builds used by Visual Studio.
I fixed this by changing the logic to override CMAKE_CXX_FLAGS in MSVC builds (ee6e6d7). Now the flags come in this order: /DWIN32 /D_WINDOWS /W3 /GR /EHsc  /Wall /EHsc, and there is a flood of warnings.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,339,2020-12-29T20:25:07Z,2020-12-29T22:11:57Z,2020-12-30T12:22:06Z,MERGED,True,1,0,1,https://github.com/unixod,Enable support of C++ exceptions on MSVC builds.,1,[],https://github.com/skvadrik/re2c/pull/339,https://github.com/unixod,5,https://github.com/skvadrik/re2c/pull/339#issuecomment-752511545,"HI,
By looking at build log on Windows (MSVC) I noticed a number of warnings of the form:
'noexcept' used with no exception handling mode specified; termination on exception is not guaranteed. Specify /EHsc (compiling source file ...src\codegen\gen_state.cc)
If I recall correctly from my experience, if this flag isn't set then we may encounter situations when destructors of automatic objects aren't called during the exception propagation process.
The following doc also recommends (if project doesn't use SEH) to set this flag:
https://docs.microsoft.com/ru-ru/cpp/build/reference/eh-exception-handling-model?view=msvc-160",Thanks!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,340,2021-01-04T12:16:26Z,2021-01-06T08:15:46Z,2021-01-06T08:15:46Z,MERGED,True,1036636,1898,487,https://github.com/skvadrik,Benchmarks,55,[],https://github.com/skvadrik/re2c/pull/340,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/340,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,344,2021-03-12T08:04:54Z,2021-03-12T08:47:11Z,2021-03-12T08:47:19Z,MERGED,True,6,5,3,https://github.com/trofi,A few clang++ -Weverything warning cleanups.,3,[],https://github.com/skvadrik/re2c/pull/344,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/344,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,344,2021-03-12T08:04:54Z,2021-03-12T08:47:11Z,2021-03-12T08:47:19Z,MERGED,True,6,5,3,https://github.com/trofi,A few clang++ -Weverything warning cleanups.,3,[],https://github.com/skvadrik/re2c/pull/344,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/344#issuecomment-797335342,,Thank you \o/,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,345,2021-03-26T09:24:15Z,2021-03-26T09:44:54Z,2021-03-26T09:44:54Z,MERGED,True,22,37,1,https://github.com/skvadrik,Add -m32 build to GitHub Actions (plus a few cleanups).,4,[],https://github.com/skvadrik/re2c/pull/345,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/345,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,348,2021-03-31T18:52:05Z,2021-03-31T21:09:44Z,2021-03-31T21:10:10Z,MERGED,True,2,2,1,https://github.com/trofi,configure.ac: avoid bash-specific '==' comparison,1,[],https://github.com/skvadrik/re2c/pull/348,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/348,"In https://bugs.gentoo.org/779187 Matt noticed errors when running ./configure
on dash:
./configure: 5339: test: x: unexpected operator
./configure: 5386: test: x: unexpected operator
The change is to use POSIX '=' comparison instead of bash-specific ==.
Patch-by: Matt Whitlock
Bug: https://bugs.gentoo.org/779187","In https://bugs.gentoo.org/779187 Matt noticed errors when running ./configure
on dash:
./configure: 5339: test: x: unexpected operator
./configure: 5386: test: x: unexpected operator
The change is to use POSIX '=' comparison instead of bash-specific ==.
Patch-by: Matt Whitlock
Bug: https://bugs.gentoo.org/779187",True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,348,2021-03-31T18:52:05Z,2021-03-31T21:09:44Z,2021-03-31T21:10:10Z,MERGED,True,2,2,1,https://github.com/trofi,configure.ac: avoid bash-specific '==' comparison,1,[],https://github.com/skvadrik/re2c/pull/348,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/348#issuecomment-811467528,"In https://bugs.gentoo.org/779187 Matt noticed errors when running ./configure
on dash:
./configure: 5339: test: x: unexpected operator
./configure: 5386: test: x: unexpected operator
The change is to use POSIX '=' comparison instead of bash-specific ==.
Patch-by: Matt Whitlock
Bug: https://bugs.gentoo.org/779187",Thank you @trofi !,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,349,2021-04-25T22:26:13Z,2021-04-25T23:00:53Z,2021-04-26T18:34:01Z,MERGED,True,1,1,1,https://github.com/AlexKVal,Fix the link to CONTRIBUTING.md,1,[],https://github.com/skvadrik/re2c/pull/349,https://github.com/AlexKVal,1,https://github.com/skvadrik/re2c/pull/349,Thanks for maintaining this nice project :) 👍,Thanks for maintaining this nice project :) 👍,True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,349,2021-04-25T22:26:13Z,2021-04-25T23:00:53Z,2021-04-26T18:34:01Z,MERGED,True,1,1,1,https://github.com/AlexKVal,Fix the link to CONTRIBUTING.md,1,[],https://github.com/skvadrik/re2c/pull/349,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/349#issuecomment-826403754,Thanks for maintaining this nice project :) 👍,"You are welcome, thanks for the fix!",True,{'THUMBS_UP': ['https://github.com/AlexKVal']}
skvadrik/re2c,https://github.com/skvadrik/re2c,352,2021-05-21T07:46:45Z,2021-05-21T07:55:34Z,2021-05-21T07:55:35Z,MERGED,True,2280,1587,22,https://github.com/skvadrik,Inline include directive,2,[],https://github.com/skvadrik/re2c/pull/352,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/352,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,352,2021-05-21T07:46:45Z,2021-05-21T07:55:34Z,2021-05-21T07:55:35Z,MERGED,True,2280,1587,22,https://github.com/skvadrik,Inline include directive,2,[],https://github.com/skvadrik/re2c/pull/352,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/352#issuecomment-845741754,,"(I cancelled some of the checks myself, that's why they are red.)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,353,2021-05-27T22:59:36Z,2021-05-27T23:18:55Z,2021-05-27T23:18:56Z,MERGED,True,5188,3651,95,https://github.com/skvadrik,Named blocks and in-block use directive.,9,[],https://github.com/skvadrik/re2c/pull/353,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/353,A fix for #51.,A fix for #51.,True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,354,2021-05-28T10:41:24Z,2021-05-28T11:16:45Z,2021-05-28T11:16:46Z,MERGED,True,2861,2158,40,https://github.com/skvadrik,Better handling of syntax errors in re2c directives.,1,[],https://github.com/skvadrik/re2c/pull/354,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/354,"Fail with an error in some confusing cases like
/*!include:re2c x.re */ that are likely to be unintentional syntax
errors (double quotes missing around the filename), but previously did
not fail and were treated like comments (no code was generated).


Improve error messages for syntax errors such as a bad block name.


AFL tests had to be updated, because the original tests that crashed the
lexer now fail earlier due to an unrelated reason, so a space character
had to be added in some tests to make them hit the same error as before.","Fail with an error in some confusing cases like
/*!include:re2c x.re */ that are likely to be unintentional syntax
errors (double quotes missing around the filename), but previously did
not fail and were treated like comments (no code was generated).


Improve error messages for syntax errors such as a bad block name.


AFL tests had to be updated, because the original tests that crashed the
lexer now fail earlier due to an unrelated reason, so a space character
had to be added in some tests to make them hit the same error as before.",True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,355,2021-06-13T19:53:56Z,2021-06-13T20:13:17Z,2021-06-13T20:25:56Z,MERGED,True,1,7,1,https://github.com/sergeyklay,Speedup CI workflow by removing not used cache step,1,[],https://github.com/skvadrik/re2c/pull/355,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/355,,,True,{'THUMBS_UP': ['https://github.com/skvadrik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,356,2021-06-15T06:25:47Z,2021-06-15T06:53:22Z,2021-06-15T06:53:23Z,MERGED,True,17254,19,22,https://github.com/skvadrik,Add ReTdfa benchmark,16,[],https://github.com/skvadrik/re2c/pull/356,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/356,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,358,2021-06-15T22:15:31Z,2021-06-15T23:23:41Z,2021-06-15T23:23:41Z,MERGED,True,8,5,1,https://github.com/skvadrik,cleanup benchmarks.yml,2,[],https://github.com/skvadrik/re2c/pull/358,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/358,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,359,2021-06-16T06:22:53Z,2021-06-16T09:17:38Z,2021-06-16T09:17:41Z,CLOSED,False,2,2,1,https://github.com/sergeyklay,Run regular re2c tests on macOs too,1,[],https://github.com/skvadrik/re2c/pull/359,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/359,"I noticed that we don't run regular re2c tests for macOs. macos-clang-debug-ootree-skeleton and macos-clang-debug-intree-skeleton are very similar, so I changed skeleton: ${{ true }} to skeleton: ${{ false }} to run non-skeleton tests on macOs too.
With change we'll have the following tests matrix:
Linux

skeleton tests: 3
non-skeleton tests: 2

macOS

skeleton tests: 2
non-skeleton tests: 1  (I introduced this)

Windows

skeleton tests: 0
non-skeleton tests: 3","I noticed that we don't run regular re2c tests for macOs. macos-clang-debug-ootree-skeleton and macos-clang-debug-intree-skeleton are very similar, so I changed skeleton: ${{ true }} to skeleton: ${{ false }} to run non-skeleton tests on macOs too.
With change we'll have the following tests matrix:
Linux

skeleton tests: 3
non-skeleton tests: 2

macOS

skeleton tests: 2
non-skeleton tests: 1  (I introduced this)

Windows

skeleton tests: 0
non-skeleton tests: 3",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,359,2021-06-16T06:22:53Z,2021-06-16T09:17:38Z,2021-06-16T09:17:41Z,CLOSED,False,2,2,1,https://github.com/sergeyklay,Run regular re2c tests on macOs too,1,[],https://github.com/skvadrik/re2c/pull/359,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/359#issuecomment-862182368,"I noticed that we don't run regular re2c tests for macOs. macos-clang-debug-ootree-skeleton and macos-clang-debug-intree-skeleton are very similar, so I changed skeleton: ${{ true }} to skeleton: ${{ false }} to run non-skeleton tests on macOs too.
With change we'll have the following tests matrix:
Linux

skeleton tests: 3
non-skeleton tests: 2

macOS

skeleton tests: 2
non-skeleton tests: 1  (I introduced this)

Windows

skeleton tests: 0
non-skeleton tests: 3","The naming may be confusing, but ""skeleton"" configurations run regular tests as well, they just run skeleton tests in addition. Skeleton tests do not require any special build type, it is just an option of run_tests.sh. For example, if you expand build https://github.com/skvadrik/re2c/pull/359/checks?check_run_id=2836412286 (the ""Test"" step), you can see that it runs regular tests before the skeleton ones (it is easy to distinguish them visually because skeleton tests have many (expected re2c error) messages after OK and the name of the test).",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,359,2021-06-16T06:22:53Z,2021-06-16T09:17:38Z,2021-06-16T09:17:41Z,CLOSED,False,2,2,1,https://github.com/sergeyklay,Run regular re2c tests on macOs too,1,[],https://github.com/skvadrik/re2c/pull/359,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/359#issuecomment-862196895,"I noticed that we don't run regular re2c tests for macOs. macos-clang-debug-ootree-skeleton and macos-clang-debug-intree-skeleton are very similar, so I changed skeleton: ${{ true }} to skeleton: ${{ false }} to run non-skeleton tests on macOs too.
With change we'll have the following tests matrix:
Linux

skeleton tests: 3
non-skeleton tests: 2

macOS

skeleton tests: 2
non-skeleton tests: 1  (I introduced this)

Windows

skeleton tests: 0
non-skeleton tests: 3",Oh! My bad. I completely missed this,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/360,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,2,https://github.com/skvadrik/re2c/pull/360#issuecomment-862775131,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","There is no /home/skvadrik/devel/50/re2c/include among them, and no suitable relative path (considering that the working directory is /home/skvadrik/devel/50/re2c/test_210616222213/, -I include means a copy of /home/skvadrik/devel/50/re2c/test/include, not /home/skvadrik/devel/50/re2c/include.
If I patch the command and add -I ../include then
{c,go}/unicode_identifier.re do not fail anymore and I'm down to two
failures:

Yes you are right. This is exactly what I decided at the very beginning. However, this doesn't work for some reason:
Right now I tried:
diff --git a/run_tests.py b/run_tests.py
index 9c93e4a9..2551e9ee 100644
--- a/run_tests.py
+++ b/run_tests.py
@@ -539,7 +539,8 @@ def init_process(base_path, skeleton=False, keep_temp_files=False,
     # abshere('@top_srcdir@', 'include')
     #   vs
     # abshere('..', '@top_srcdir@', 'include')
-    _ctx.incpaths.append(f""-I {abshere(base_path, 'include')}"")
+    _ctx.incpaths.append(""-I /Users/egrep/work/re2c/include"")
+    _ctx.incpaths.append(""-I ../include"")
 
     # Set tools paths
     _ctx.diff = which('diff')[0]
And output is still the same:
$ python run_tests.py --keep-temp-files

-----------------
All:         1615
Ran:         1615
Passed:      1611
Soft errors: 0
Hard errors: 4
-----------------
FAILED",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/360#issuecomment-862776094,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance",@skvadrik Can you please commit your patch with the fix of the two tests?  I may be missing something,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/360#issuecomment-862776460,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","Thanks a lot for working on this!
One thing off the top of my head is that skeleton test failures can be deceptive: if re2c fails with an error, it is counted as a ""soft error"" because we have some tests that deliberately fail. Currently I see 222 soft failures in run_tests.py and 221 for run_tests.sh. The one extra error will likely go away after fixing non-skeleton tests, but the whole ""soft error"" concept is very weak and I added it as a temporary hack to monitor how many tests actually run and how many fail before that.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/skvadrik,5,https://github.com/skvadrik/re2c/pull/360#issuecomment-862779238,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","@skvadrik Can you please commit your patch with the fix of the two tests? I may be missing something

I think I know what it is, it should be two separate arguments -I and ./include, not -I ../include. At least I tried that change and the errors dropped from 4 to 2.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,6,https://github.com/skvadrik/re2c/pull/360#issuecomment-862779643,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","Currently I see 222 soft failures in run_tests.py and 221 for run_tests.sh.

Yeah, I saw this yesterday, but for now I decided to focus on non-skeleton tests.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,7,https://github.com/skvadrik/re2c/pull/360#issuecomment-862780527,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","I think I know what it is, it should be two separate arguments -I and ./include, not -I ../include. At least I tried that change and the errors dropped from 4 to 2.

Yay! I spent about 8 hours on this! You're Chuck Norris :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/skvadrik,8,https://github.com/skvadrik/re2c/pull/360#issuecomment-862781660,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","Yay! I spent about 8 hours on this! You're Chuck Norris :)

I'm used to spending 8h a day on things like this (most of my working day really), so no wonder I could spot it. :D",True,{'LAUGH': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,9,https://github.com/skvadrik/re2c/pull/360#issuecomment-862789779,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","I think I know what it is, it should be two separate arguments -I and ./include, not -I ../include. At least I tried that change and the errors dropped from 4 to 2.

Yay!
diff --git a/run_tests.py b/run_tests.py
index 8b84fa3d..ecd8ae57 100644
--- a/run_tests.py
+++ b/run_tests.py
@@ -532,7 +532,8 @@ def init_process(base_path, skeleton=False, keep_temp_files=False,
     # Set include paths, relative to build directory
     cwd = os.getcwd()
     os.chdir(_ctx.base_path)
-    _ctx.incpaths = [f'-I {d}' for d in Path('.').rglob('*') if os.path.isdir(d)]
+    paths = Path('.').rglob('*')
+    _ctx.incpaths = sum([['-I', str(d)] for d in paths if os.path.isdir(d)], [])
     os.chdir(cwd)
 
     # TODO: Fix this to sort out with absolute and relative paths + @top_srcdir@
-----------------
All:         1615
Ran:         1615
Passed:      1615
Soft errors: 0
Hard errors: 0
-----------------
Explanation
list1 = ['111', '222', '333']
sum([['-I', item] for item in list1], [])

# Out: ['-I', '111', '-I', '222', '-I', '333']",True,{'THUMBS_UP': ['https://github.com/skvadrik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,10,https://github.com/skvadrik/re2c/pull/360#issuecomment-862802832,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance",@skvadrik I updated the description of the PR. All tests are passed now.,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/skvadrik,11,https://github.com/skvadrik/re2c/pull/360#issuecomment-862958486,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","@skvadrik I updated the description of the PR. All tests are passed now.

\o/",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,12,https://github.com/skvadrik/re2c/pull/360#issuecomment-863077624,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance",It is ready to review,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/skvadrik,13,https://github.com/skvadrik/re2c/pull/360#issuecomment-863130455,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","It is ready to review

Awesome, thanks! I may be unable to review it today, but I'll do it at the first opportunity.",True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,14,https://github.com/skvadrik/re2c/pull/360#issuecomment-863143466,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance",There are some issues with external tools on Windows. I'll try to sort out in next PRs to not mix changes in this one,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,15,https://github.com/skvadrik/re2c/pull/360#issuecomment-863619386,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","Some good (or bad) news: I managed to run tests runner under Windows. And I see half of the tests are failed. On the one hand, this is bad news, but on the other hand, we did not have the opportunity to run native compilation (not Mingw) and tests under WIndows until this moment. So now we see the real picture",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/skvadrik,16,https://github.com/skvadrik/re2c/pull/360#issuecomment-863622703,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","Some good (or bad) news: I managed to run tests runner under Windows. And I see half of the tests are failed.

Can you start a new bug and post detail how the tests failed? E.g. upload the temporary test directory as an archive.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,17,https://github.com/skvadrik/re2c/pull/360#issuecomment-863626043,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","Can you start a new bug and post detail how the tests failed? E.g. upload the temporary test directory as an archive.

Sure. Let me some time to sort out with unstable test runner under the Windows (some regex compilation issues under the loops)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,18,https://github.com/skvadrik/re2c/pull/360#issuecomment-863747228,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","Some good (or bad) news: I managed to run tests runner under Windows. And I see half of the tests are failed. On the one hand, this is bad news, but on the other hand, we did not have the opportunity to run native compilation (not Mingw) and tests under WIndows until this moment. So now we see the real picture

I fixed tests runner to run under the Windows. There were some funny bugs like Windows directory separator \ interpreted as a regex escape command, some Cmake issues related to build under the Windows and so on. And at the moment we have the following at GitHub actions:
Running in 2 job(s) 
----------------- 
All: 1615 
Ran: 1615 
Passed: 264 
Soft errors: 0
Hard errors: 1351 
----------------- 
FAILED

I'll open a new PR with all necessary changes and show you all the remaining issues. But lets do it after this one will be merged so that I can rebase onto the proper branch and open a PR.",True,{'THUMBS_UP': ['https://github.com/skvadrik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/skvadrik,19,https://github.com/skvadrik/re2c/pull/360#issuecomment-864308862,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","By the way, the new script is already ~2x faster than the old one (maybe more). :)",True,{'HOORAY': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,20,https://github.com/skvadrik/re2c/pull/360#issuecomment-864390895,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance",@skvadrik It is ready to merge now.,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/skvadrik,21,https://github.com/skvadrik/re2c/pull/360#issuecomment-864405668,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","Great, I have just merged it! \o/",True,{'ROCKET': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,360,2021-06-16T17:03:58Z,2021-06-19T13:20:35Z,2021-06-19T18:40:05Z,MERGED,True,680,332,7,https://github.com/sergeyklay,Rewrite re2c tests runner in Python,1,[],https://github.com/skvadrik/re2c/pull/360,https://github.com/sergeyklay,22,https://github.com/skvadrik/re2c/pull/360#issuecomment-864409834,"This pull request introduces a completely rewritten test runner in Python.
The main goals of this change:

Provide a OS-independent way to run tests (at least using CMake)
Getting rid of dependence on Unix utilities in tests (grep, cat, tr, etc.)
Flexibility
Ease of maintenance","Great, I have just merged it! \o/

Yay! I'm glad this finally happened :)",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,362,2021-06-19T21:43:26Z,2021-06-20T14:59:38Z,2021-06-20T14:59:39Z,MERGED,True,177,491,3,https://github.com/skvadrik,"run_tests.py: don't shard tests, use chunk size 1.",2,[],https://github.com/skvadrik/re2c/pull/362,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/362,"Previously the script divided all tests into chunks of equal size, which
is suboptimal as different tests take different time, and often large
tests end up in the same chunk. This adds imbalance and makes the test
runner slower than it could be with chunk size 1.
Also, use a more pythonic way to gather results from threads. The old
bash script did that via per-thread log files because it is hard to do
it otherwise in bash. But in python one can simply return results from
each thread, avoiding the overhead on file I/O.","Previously the script divided all tests into chunks of equal size, which
is suboptimal as different tests take different time, and often large
tests end up in the same chunk. This adds imbalance and makes the test
runner slower than it could be with chunk size 1.
Also, use a more pythonic way to gather results from threads. The old
bash script did that via per-thread log files because it is hard to do
it otherwise in bash. But in python one can simply return results from
each thread, avoiding the overhead on file I/O.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,362,2021-06-19T21:43:26Z,2021-06-20T14:59:38Z,2021-06-20T14:59:39Z,MERGED,True,177,491,3,https://github.com/skvadrik,"run_tests.py: don't shard tests, use chunk size 1.",2,[],https://github.com/skvadrik/re2c/pull/362,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/362#issuecomment-864467591,"Previously the script divided all tests into chunks of equal size, which
is suboptimal as different tests take different time, and often large
tests end up in the same chunk. This adds imbalance and makes the test
runner slower than it could be with chunk size 1.
Also, use a more pythonic way to gather results from threads. The old
bash script did that via per-thread log files because it is hard to do
it otherwise in bash. But in python one can simply return results from
each thread, avoiding the overhead on file I/O.",@trofi Reducing chunk size to 1 as you suggested in #360 (comment).,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,362,2021-06-19T21:43:26Z,2021-06-20T14:59:38Z,2021-06-20T14:59:39Z,MERGED,True,177,491,3,https://github.com/skvadrik,"run_tests.py: don't shard tests, use chunk size 1.",2,[],https://github.com/skvadrik/re2c/pull/362,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/362#issuecomment-864533974,"Previously the script divided all tests into chunks of equal size, which
is suboptimal as different tests take different time, and often large
tests end up in the same chunk. This adds imbalance and makes the test
runner slower than it could be with chunk size 1.
Also, use a more pythonic way to gather results from threads. The old
bash script did that via per-thread log files because it is hard to do
it otherwise in bash. But in python one can simply return results from
each thread, avoiding the overhead on file I/O.","grep_count is no longer needed here. Could you please remove it too?

Removed.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,362,2021-06-19T21:43:26Z,2021-06-20T14:59:38Z,2021-06-20T14:59:39Z,MERGED,True,177,491,3,https://github.com/skvadrik,"run_tests.py: don't shard tests, use chunk size 1.",2,[],https://github.com/skvadrik/re2c/pull/362,https://github.com/skvadrik,4,https://github.com/skvadrik/re2c/pull/362#issuecomment-864534188,"Previously the script divided all tests into chunks of equal size, which
is suboptimal as different tests take different time, and often large
tests end up in the same chunk. This adds imbalance and makes the test
runner slower than it could be with chunk size 1.
Also, use a more pythonic way to gather results from threads. The old
bash script did that via per-thread log files because it is hard to do
it otherwise in bash. But in python one can simply return results from
each thread, avoiding the overhead on file I/O.",@sergeyklay I rebased this on top of #363. The only change wrt. that PR is that I moved pattern compilation out of the function to the top level.,True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,362,2021-06-19T21:43:26Z,2021-06-20T14:59:38Z,2021-06-20T14:59:39Z,MERGED,True,177,491,3,https://github.com/skvadrik,"run_tests.py: don't shard tests, use chunk size 1.",2,[],https://github.com/skvadrik/re2c/pull/362,https://github.com/sergeyklay,5,https://github.com/skvadrik/re2c/pull/362#issuecomment-864550585,"Previously the script divided all tests into chunks of equal size, which
is suboptimal as different tests take different time, and often large
tests end up in the same chunk. This adds imbalance and makes the test
runner slower than it could be with chunk size 1.
Also, use a more pythonic way to gather results from threads. The old
bash script did that via per-thread log files because it is hard to do
it otherwise in bash. But in python one can simply return results from
each thread, avoiding the overhead on file I/O.",The macos-clang-debug-intree-skeleton job was stuck and failed after a hour or so. I rerun workflow,True,{'THUMBS_UP': ['https://github.com/skvadrik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,363,2021-06-19T22:37:08Z,2021-06-20T09:59:58Z,2021-06-20T10:01:11Z,MERGED,True,67,18,4,https://github.com/sergeyklay,Run regular tests under Windows (disabled),1,[],https://github.com/skvadrik/re2c/pull/363,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/363,Currently Windows tests are disabled until we dealing with failures,Currently Windows tests are disabled until we dealing with failures,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,363,2021-06-19T22:37:08Z,2021-06-20T09:59:58Z,2021-06-20T10:01:11Z,MERGED,True,67,18,4,https://github.com/sergeyklay,Run regular tests under Windows (disabled),1,[],https://github.com/skvadrik/re2c/pull/363,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/363#issuecomment-864524176,Currently Windows tests are disabled until we dealing with failures,"One last thing, can you squash the commits please?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,364,2021-06-20T10:29:21Z,2021-06-20T10:45:16Z,2021-06-20T15:21:58Z,CLOSED,False,8,0,1,https://github.com/sergeyklay,Cancel any previous runs that are not completed for a given workflow,1,[],https://github.com/skvadrik/re2c/pull/364,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/364,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,364,2021-06-20T10:29:21Z,2021-06-20T10:45:16Z,2021-06-20T15:21:58Z,CLOSED,False,8,0,1,https://github.com/sergeyklay,Cancel any previous runs that are not completed for a given workflow,1,[],https://github.com/skvadrik/re2c/pull/364,https://github.com/sergeyklay,2,https://github.com/skvadrik/re2c/pull/364#issuecomment-864534251,,"I deliberately force-pushed to see how it works. To cancel previous builds, GitHub Action needs to run the latest one. But it does not run builds in parallel and wait to complete all previous. Useless feature. I am closing this pull request.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,364,2021-06-20T10:29:21Z,2021-06-20T10:45:16Z,2021-06-20T15:21:58Z,CLOSED,False,8,0,1,https://github.com/sergeyklay,Cancel any previous runs that are not completed for a given workflow,1,[],https://github.com/skvadrik/re2c/pull/364,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/364#issuecomment-864539513,,"Eh, sad! It was a nice try anyway.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,365,2021-06-20T18:40:29Z,2021-06-20T19:24:00Z,2021-06-20T19:24:01Z,MERGED,True,9,14,1,https://github.com/sergeyklay,Make remove() function simpler,1,[],https://github.com/skvadrik/re2c/pull/365,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/365,"The previous version of this function has multiple responsibilities and actually had knowledge for which it was not intended.
These changes are about ""S"" in SOLID.
P.S.  This should also speed up a bit  the test run, since now, in few places, we don't do additional FS scans.","The previous version of this function has multiple responsibilities and actually had knowledge for which it was not intended.
These changes are about ""S"" in SOLID.
P.S.  This should also speed up a bit  the test run, since now, in few places, we don't do additional FS scans.",True,{'THUMBS_UP': ['https://github.com/skvadrik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,367,2021-06-23T22:08:45Z,2021-06-24T22:36:05Z,2021-06-24T22:36:05Z,MERGED,True,4,2,3,https://github.com/trofi,configure.ac: allow user to set non-standard PYTHON,1,[],https://github.com/skvadrik/re2c/pull/367,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/367,"Useful on systems with multiple python implementations.
While at it allow both 'python3' (preferred) and 'python' spellings.","Useful on systems with multiple python implementations.
While at it allow both 'python3' (preferred) and 'python' spellings.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,367,2021-06-23T22:08:45Z,2021-06-24T22:36:05Z,2021-06-24T22:36:05Z,MERGED,True,4,2,3,https://github.com/trofi,configure.ac: allow user to set non-standard PYTHON,1,[],https://github.com/skvadrik/re2c/pull/367,https://github.com/trofi,2,https://github.com/skvadrik/re2c/pull/367#issuecomment-867992869,"Useful on systems with multiple python implementations.
While at it allow both 'python3' (preferred) and 'python' spellings.",For posterity: looks like cmake way to set non-standard python is via Python3_EXECUTABLE: cmake .. -DPython3_EXECUTABLE=/usr/bin/python3.10.,True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,367,2021-06-23T22:08:45Z,2021-06-24T22:36:05Z,2021-06-24T22:36:05Z,MERGED,True,4,2,3,https://github.com/trofi,configure.ac: allow user to set non-standard PYTHON,1,[],https://github.com/skvadrik/re2c/pull/367,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/367#issuecomment-867998447,"Useful on systems with multiple python implementations.
While at it allow both 'python3' (preferred) and 'python' spellings.",Thank you @trofi !,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,368,2021-06-26T23:25:15Z,2021-06-27T15:23:28Z,2021-06-27T15:23:29Z,MERGED,True,226,126,19,https://github.com/skvadrik,Fix tests on windows.,7,[],https://github.com/skvadrik/re2c/pull/368,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/368,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,368,2021-06-26T23:25:15Z,2021-06-27T15:23:28Z,2021-06-27T15:23:29Z,MERGED,True,226,126,19,https://github.com/skvadrik,Fix tests on windows.,7,[],https://github.com/skvadrik/re2c/pull/368,https://github.com/sergeyklay,2,https://github.com/skvadrik/re2c/pull/368#issuecomment-869176050,,Looks great!,True,{'THUMBS_UP': ['https://github.com/skvadrik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,370,2021-07-17T19:59:00Z,2021-07-17T20:38:36Z,2021-07-17T20:38:36Z,MERGED,True,10809,7367,335,https://github.com/skvadrik,Local blocks and scoped directives.,42,[],https://github.com/skvadrik/re2c/pull/370,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/370,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,371,2021-07-25T17:34:14Z,2021-07-25T20:13:51Z,2021-07-25T20:13:51Z,MERGED,True,1127,873,16,https://github.com/skvadrik,Update docs,1,[],https://github.com/skvadrik/re2c/pull/371,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/371,,,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,374,2021-08-11T21:40:17Z,2021-08-12T11:30:45Z,2021-08-12T11:34:22Z,MERGED,True,500,142,3,https://github.com/sergeyklay,Provide support of CMake Presets,1,[],https://github.com/skvadrik/re2c/pull/374,https://github.com/sergeyklay,1,https://github.com/skvadrik/re2c/pull/374,"Since 3.19.8 CMake looks in the top source directory of a project for files named CMakePresets.json and CMakeUserPresets.json. Neither file is required to be present, but if the user tries to list or use presets, at least one of the files must exist. If both files are present, they will effectively be merged by reading the CMakePresets.json file first and then the CMakeUserPresets.json file.
CMakePresets.json can be used to define presets for things like continuous integration jobs or cross-compilation setups using toolchains provided as part of the project. In general this feature allows us to simplify CI configuration phase by taking out all the logic into presets-file and helps us to make reproducible builds. From now on, you no longer need to carefully read and copy all the flags locally in order to reproduce CI configuration or build. Simple use the same one line command as at CI.
As a bonus, users of modern CMake can use a cross-platform and portable way instead of build/__cmake*.sh scripts.
To see the list of available presets use:
cmake --list-presets

To configure re2c use:
cmake --preset=<NAME>

To build re2c use:
cmake --build --preset=<NAME>

To test re2c use:
cmake --build --preset=<NAME> --target tests

References:

https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
https://gitlab.kitware.com/cmake/cmake/-/issues/21164
https://cmake.org/cmake/help/latest/guide/user-interaction/index.html#presets","Since 3.19.8 CMake looks in the top source directory of a project for files named CMakePresets.json and CMakeUserPresets.json. Neither file is required to be present, but if the user tries to list or use presets, at least one of the files must exist. If both files are present, they will effectively be merged by reading the CMakePresets.json file first and then the CMakeUserPresets.json file.
CMakePresets.json can be used to define presets for things like continuous integration jobs or cross-compilation setups using toolchains provided as part of the project. In general this feature allows us to simplify CI configuration phase by taking out all the logic into presets-file and helps us to make reproducible builds. From now on, you no longer need to carefully read and copy all the flags locally in order to reproduce CI configuration or build. Simple use the same one line command as at CI.
As a bonus, users of modern CMake can use a cross-platform and portable way instead of build/__cmake*.sh scripts.
To see the list of available presets use:
cmake --list-presets

To configure re2c use:
cmake --preset=<NAME>

To build re2c use:
cmake --build --preset=<NAME>

To test re2c use:
cmake --build --preset=<NAME> --target tests

References:

https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
https://gitlab.kitware.com/cmake/cmake/-/issues/21164
https://cmake.org/cmake/help/latest/guide/user-interaction/index.html#presets",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,374,2021-08-11T21:40:17Z,2021-08-12T11:30:45Z,2021-08-12T11:34:22Z,MERGED,True,500,142,3,https://github.com/sergeyklay,Provide support of CMake Presets,1,[],https://github.com/skvadrik/re2c/pull/374,https://github.com/sergeyklay,2,https://github.com/skvadrik/re2c/pull/374#issuecomment-897366561,"Since 3.19.8 CMake looks in the top source directory of a project for files named CMakePresets.json and CMakeUserPresets.json. Neither file is required to be present, but if the user tries to list or use presets, at least one of the files must exist. If both files are present, they will effectively be merged by reading the CMakePresets.json file first and then the CMakeUserPresets.json file.
CMakePresets.json can be used to define presets for things like continuous integration jobs or cross-compilation setups using toolchains provided as part of the project. In general this feature allows us to simplify CI configuration phase by taking out all the logic into presets-file and helps us to make reproducible builds. From now on, you no longer need to carefully read and copy all the flags locally in order to reproduce CI configuration or build. Simple use the same one line command as at CI.
As a bonus, users of modern CMake can use a cross-platform and portable way instead of build/__cmake*.sh scripts.
To see the list of available presets use:
cmake --list-presets

To configure re2c use:
cmake --preset=<NAME>

To build re2c use:
cmake --build --preset=<NAME>

To test re2c use:
cmake --build --preset=<NAME> --target tests

References:

https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
https://gitlab.kitware.com/cmake/cmake/-/issues/21164
https://cmake.org/cmake/help/latest/guide/user-interaction/index.html#presets","@skvadrik I managed to reduce the total number of presets through inheritance. Take a look at this commit 4ee6ea6 I deleted 11 presets
Also, I'd like to note that we have a similar approach in current workflow.
Base config:

  
    
      re2c/.github/workflows/ci.yml
    
    
        Lines 161 to 188
      in
      aa2da70
    
  
  
    

        
          
                 - name: Prepare Configure Command 
        

        
          
                   id: configure-command 
        

        
          
                   run: | 
        

        
          
                     # Common CMake arguments 
        

        
          
                     args=( -S . -B ${{ matrix.build-dir }} ) 
        

        
          
            
        

        
          
                     # Generator's specific stuff. 
        

        
          
                     args+=( -G ""${{ matrix.generator }}"" ) 
        

        
          
                     case ""${{ matrix.generator }}"" in 
        

        
          
                       'Visual Studio'*) 
        

        
          
                         args+=( -A x64 ) 
        

        
          
                         ;; 
        

        
          
                       *) 
        

        
          
                         # CMAKE_BUILD_TYPE is not used by multi-config build 
        

        
          
                         # types (e.g Visual Studio) at the configure time 
        

        
          
                         # thus we add it only for single-config build types 
        

        
          
                         args+=( -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} ) 
        

        
          
                         ;; 
        

        
          
                     esac 
        

        
          
            
        

        
          
                     # CFLAGS, CXXFLAGS, LDFLAGS 
        

        
          
                     args+=( -DCMAKE_C_FLAGS=""${{ matrix.cxx-flags }}"" ) 
        

        
          
                     args+=( -DCMAKE_CXX_FLAGS=""${{ matrix.cxx-flags }}"" ) 
        

        
          
                     args+=( -DCMAKE_EXE_LINKER_FLAGS=""${{ matrix.ld-flags }}"" ) 
        

        
          
                     args+=( -DCMAKE_SHARED_LINKER_FLAGS=""${{ matrix.ld-flags }}"" ) 
        

        
          
            
        

        
          
                     # Quote each argument to prevent word split. 
        

        
          
                     echo ""::set-output name=cmake::$(printf "" '%s'"" ""${args[@]}"")"" 
        
    
  


Fast config:

  
    
      re2c/.github/workflows/ci.yml
    
    
        Lines 190 to 206
      in
      aa2da70
    
  
  
    

        
          
                 - name: Fast Configure 
        

        
          
                   run: | 
        

        
          
                     # Read prepared command into an array 
        

        
          
                     args=( ${{ steps.configure-command.outputs.cmake }} ) 
        

        
          
            
        

        
          
                     # Amend Build Options 
        

        
          
                     args+=( -DCMAKE_INSTALL_PREFIX=""$(pwd)/install"" ) 
        

        
          
            
        

        
          
                     # Disable some defaults for now to speed up the build as 
        

        
          
                     # they are not necessary in a minimal installation 
        

        
          
                     args+=( -DRE2C_BUILD_RE2GO=OFF ) 
        

        
          
            
        

        
          
                     # Print the resulting command line for debugging purposes 
        

        
          
                     printf ""cmake"" && printf "" '%s'"" ""${args[@]}"" && printf ""\n"" 
        

        
          
            
        

        
          
                     # Run CMake, pass quoted arguments to prevent word split. 
        

        
          
                     printf "" '%s'"" ""${args[@]}"" | xargs cmake 
        
    
  


Full config:

  
    
      re2c/.github/workflows/ci.yml
    
    
        Lines 220 to 239
      in
      aa2da70
    
  
  
    

        
          
                 - name: Full Configure 
        

        
          
                   run: | 
        

        
          
                     # Read prepared command into an array 
        

        
          
                     args=( ${{ steps.configure-command.outputs.cmake }} ) 
        

        
          
            
        

        
          
                     # Amend Build Options 
        

        
          
                     args+=( -DCMAKE_INSTALL_PREFIX=""$(pwd)/install-2"" -DRE2C_BUILD_RE2GO=ON -DRE2C_BUILD_LIBS=ON ) 
        

        
          
                     args+=( -DRE2C_REBUILD_LEXERS=ON -DRE2C_FOR_BUILD=""$(pwd)/install/bin/re2c"" ) 
        

        
          
            
        

        
          
                     # Windows does not have a native 'man' and 'sed' commands. 
        

        
          
                     # Disabled until this https://github.com/skvadrik/re2c/issues/327 
        

        
          
                     # will be implemented 
        

        
          
                     case ${{ runner.os }} in 
        

        
          
                       Windows*) 
        

        
          
                         args+=( -DRE2C_REBUILD_DOCS=OFF ) 
        

        
          
                         ;; 
        

        
          
                       *) 
        

        
          
                         args+=( -DRE2C_REBUILD_DOCS=ON ) 
        

        
          
                         ;; 
        

        
          
                     esac 
        
    
  


The same for build.",True,{'THUMBS_UP': ['https://github.com/skvadrik']}
skvadrik/re2c,https://github.com/skvadrik/re2c,376,2021-09-03T15:10:26Z,2021-09-03T15:35:43Z,2021-09-03T15:41:46Z,MERGED,True,4,0,1,https://github.com/Biswa96,Define _POSIX_SOURCE for fdopen in cygwin,1,[],https://github.com/skvadrik/re2c/pull/376,https://github.com/Biswa96,1,https://github.com/skvadrik/re2c/pull/376,"This fixes the error:
error: ‘fdopen’ was not declared in this scope; did you mean ‘fopen’?","This fixes the error:
error: ‘fdopen’ was not declared in this scope; did you mean ‘fopen’?",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,376,2021-09-03T15:10:26Z,2021-09-03T15:35:43Z,2021-09-03T15:41:46Z,MERGED,True,4,0,1,https://github.com/Biswa96,Define _POSIX_SOURCE for fdopen in cygwin,1,[],https://github.com/skvadrik/re2c/pull/376,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/376#issuecomment-912627040,"This fixes the error:
error: ‘fdopen’ was not declared in this scope; did you mean ‘fopen’?",Thanks for the patch!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,377,2021-10-31T15:37:16Z,2021-10-31T20:30:36Z,2021-10-31T20:30:48Z,MERGED,True,207,150,3,https://github.com/pmetzger,minor fixes to interface.rst_,1,[],https://github.com/skvadrik/re2c/pull/377,https://github.com/pmetzger,1,https://github.com/skvadrik/re2c/pull/377,"Improve grammar, make some small style improvements, and keep the
lines consistently under 80 columns.","Improve grammar, make some small style improvements, and keep the
lines consistently under 80 columns.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,377,2021-10-31T15:37:16Z,2021-10-31T20:30:36Z,2021-10-31T20:30:48Z,MERGED,True,207,150,3,https://github.com/pmetzger,minor fixes to interface.rst_,1,[],https://github.com/skvadrik/re2c/pull/377,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/377#issuecomment-955768970,"Improve grammar, make some small style improvements, and keep the
lines consistently under 80 columns.",Also can you please squash commits before merging?,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,377,2021-10-31T15:37:16Z,2021-10-31T20:30:36Z,2021-10-31T20:30:48Z,MERGED,True,207,150,3,https://github.com/pmetzger,minor fixes to interface.rst_,1,[],https://github.com/skvadrik/re2c/pull/377,https://github.com/pmetzger,3,https://github.com/skvadrik/re2c/pull/377#issuecomment-955770575,"Improve grammar, make some small style improvements, and keep the
lines consistently under 80 columns.","Will lowercase, squash, and push.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,377,2021-10-31T15:37:16Z,2021-10-31T20:30:36Z,2021-10-31T20:30:48Z,MERGED,True,207,150,3,https://github.com/pmetzger,minor fixes to interface.rst_,1,[],https://github.com/skvadrik/re2c/pull/377,https://github.com/pmetzger,4,https://github.com/skvadrik/re2c/pull/377#issuecomment-955771658,"Improve grammar, make some small style improvements, and keep the
lines consistently under 80 columns.",Fixed and squished.,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,377,2021-10-31T15:37:16Z,2021-10-31T20:30:36Z,2021-10-31T20:30:48Z,MERGED,True,207,150,3,https://github.com/pmetzger,minor fixes to interface.rst_,1,[],https://github.com/skvadrik/re2c/pull/377,https://github.com/skvadrik,5,https://github.com/skvadrik/re2c/pull/377#issuecomment-955786711,"Improve grammar, make some small style improvements, and keep the
lines consistently under 80 columns.","Merged, thank you!",True,{'THUMBS_UP': ['https://github.com/pmetzger']}
skvadrik/re2c,https://github.com/skvadrik/re2c,378,2021-11-02T04:15:07Z,2021-11-02T07:25:00Z,2021-11-02T15:26:02Z,MERGED,True,1,1,1,https://github.com/nightlark,Setup Java for the benchmarks workflow using actions/setup-java,1,[],https://github.com/skvadrik/re2c/pull/378,https://github.com/nightlark,1,https://github.com/skvadrik/re2c/pull/378,Use actions/setup-java instead of actions/setup-python for the Setup Java step in the benchmarks workflow. Something seemed off about the action that was currently being used for setting up Java.,Use actions/setup-java instead of actions/setup-python for the Setup Java step in the benchmarks workflow. Something seemed off about the action that was currently being used for setting up Java.,True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,378,2021-11-02T04:15:07Z,2021-11-02T07:25:00Z,2021-11-02T15:26:02Z,MERGED,True,1,1,1,https://github.com/nightlark,Setup Java for the benchmarks workflow using actions/setup-java,1,[],https://github.com/skvadrik/re2c/pull/378,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/378#issuecomment-957162408,Use actions/setup-java instead of actions/setup-python for the Setup Java step in the benchmarks workflow. Something seemed off about the action that was currently being used for setting up Java.,Thanks! I think it was copy-paste.,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,381,2021-11-09T14:51:43Z,2021-11-09T21:54:48Z,2021-11-09T21:55:01Z,MERGED,True,3224,2917,31,https://github.com/Raekye,Initial implementation of --loop-switch for Rust support,5,[],https://github.com/skvadrik/re2c/pull/381,https://github.com/Raekye,1,https://github.com/skvadrik/re2c/pull/381,"With this option, instead of the usual goto/label approach, the DFA is wrapped in a loop with a switch statement on a yystate variable. Each DFA state is an individual case. Transitions between states are done by setting the yystate variable to the index of the target state and continueing the loop.
This is option is necessary in order to support Rust as a future target language as Rust does not have gotos. See the commit message for further details.","With this option, instead of the usual goto/label approach, the DFA is wrapped in a loop with a switch statement on a yystate variable. Each DFA state is an individual case. Transitions between states are done by setting the yystate variable to the index of the target state and continueing the loop.
This is option is necessary in order to support Rust as a future target language as Rust does not have gotos. See the commit message for further details.",True,{'THUMBS_UP': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,381,2021-11-09T14:51:43Z,2021-11-09T21:54:48Z,2021-11-09T21:55:01Z,MERGED,True,3224,2917,31,https://github.com/Raekye,Initial implementation of --loop-switch for Rust support,5,[],https://github.com/skvadrik/re2c/pull/381,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/381#issuecomment-964581585,"With this option, instead of the usual goto/label approach, the DFA is wrapped in a loop with a switch statement on a yystate variable. Each DFA state is an individual case. Transitions between states are done by setting the yystate variable to the index of the target state and continueing the loop.
This is option is necessary in order to support Rust as a future target language as Rust does not have gotos. See the commit message for further details.",Thank you \o/,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,382,2021-11-17T22:28:01Z,2021-11-17T22:52:02Z,2021-11-17T22:53:39Z,MERGED,True,3,3,3,https://github.com/trofi,fix struct/class declaration mismatch (-Wmismatched-tags),1,[],https://github.com/skvadrik/re2c/pull/382,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/382,"Detected by clang's-Weverything:
./src/regexp/re.h:17:1: warning: struct 'Msg' was previously declared as a class;
  this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]
struct Msg;
^","Detected by clang's-Weverything:
./src/regexp/re.h:17:1: warning: struct 'Msg' was previously declared as a class;
  this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]
struct Msg;
^",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,382,2021-11-17T22:28:01Z,2021-11-17T22:52:02Z,2021-11-17T22:53:39Z,MERGED,True,3,3,3,https://github.com/trofi,fix struct/class declaration mismatch (-Wmismatched-tags),1,[],https://github.com/skvadrik/re2c/pull/382,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/382#issuecomment-972204218,"Detected by clang's-Weverything:
./src/regexp/re.h:17:1: warning: struct 'Msg' was previously declared as a class;
  this is valid, but may result in linker errors under the Microsoft C++ ABI [-Wmismatched-tags]
struct Msg;
^",\o/,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,383,2021-11-17T22:33:52Z,2021-11-17T22:52:30Z,2021-11-17T22:53:29Z,MERGED,True,9,9,2,https://github.com/trofi,avoid using reserved identifiers (underscores),1,[],https://github.com/skvadrik/re2c/pull/383,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/383,"clang with -Weverything detects these as:
./src/util/free_list.h:9:16:
  warning: identifier '_Ty' is reserved
  because it starts with '_' followed by a capital letter [-Wreserved-identifier]
template<class _Ty>
               ^","clang with -Weverything detects these as:
./src/util/free_list.h:9:16:
  warning: identifier '_Ty' is reserved
  because it starts with '_' followed by a capital letter [-Wreserved-identifier]
template<class _Ty>
               ^",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,383,2021-11-17T22:33:52Z,2021-11-17T22:52:30Z,2021-11-17T22:53:29Z,MERGED,True,9,9,2,https://github.com/trofi,avoid using reserved identifiers (underscores),1,[],https://github.com/skvadrik/re2c/pull/383,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/383#issuecomment-972205188,"clang with -Weverything detects these as:
./src/util/free_list.h:9:16:
  warning: identifier '_Ty' is reserved
  because it starts with '_' followed by a capital letter [-Wreserved-identifier]
template<class _Ty>
               ^",Thank you @trofi !,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,387,2021-11-27T09:38:31Z,2021-11-28T16:38:52Z,2021-11-28T17:20:34Z,MERGED,True,15,11,2,https://github.com/skvadrik,"CMakePresets.json: inherit ""full"" configuration before ""fast"".",2,[],https://github.com/skvadrik/re2c/pull/387,https://github.com/skvadrik,1,https://github.com/skvadrik/re2c/pull/387,"Otherwise variable definitions from ""fast"" configuration take precedence
over the ""full"" configuration, resulting in disabling some important
configrations, such as Go language support.
For example, if ""fast"" is inherited before ""full"" we have the following
incorrect configrations that sets RE2C_BUILD_RE2GO:BOOL=""FALSE"":
$ cmake -S .. --preset=linux-gcc-release-ootree-skeleton-full
Preset CMake variables:
CMAKE_BUILD_TYPE=""Release""
CMAKE_CXX_COMPILER=""g++""
CMAKE_C_COMPILER=""gcc""
CMAKE_INSTALL_PREFIX:PATH=""[CUT]/re2c/install""
RE2C_BUILD_LIBS:BOOL=""TRUE""
RE2C_BUILD_RE2GO:BOOL=""FALSE""
RE2C_FOR_BUILD=""[CUT]/re2c/install/bin/re2c""
RE2C_REBUILD_DOCS:BOOL=""TRUE""
RE2C_REBUILD_LEXERS:BOOL=""TRUE""

But if ""full"" is inherited after ""fast"" we have the following (correct):
$ cmake -S .. --preset=linux-gcc-release-ootree-skeleton-full
Preset CMake variables:
CMAKE_BUILD_TYPE=""Release""
CMAKE_CXX_COMPILER=""g++""
CMAKE_C_COMPILER=""gcc""
CMAKE_INSTALL_PREFIX:PATH=""[CUT]/re2c/install-2""
RE2C_BUILD_LIBS:BOOL=""TRUE""
RE2C_BUILD_RE2GO:BOOL=""TRUE""
RE2C_FOR_BUILD=""[CUT]/re2c/install/bin/re2c""
RE2C_REBUILD_DOCS:BOOL=""TRUE""
RE2C_REBUILD_LEXERS:BOOL=""TRUE""","Otherwise variable definitions from ""fast"" configuration take precedence
over the ""full"" configuration, resulting in disabling some important
configrations, such as Go language support.
For example, if ""fast"" is inherited before ""full"" we have the following
incorrect configrations that sets RE2C_BUILD_RE2GO:BOOL=""FALSE"":
$ cmake -S .. --preset=linux-gcc-release-ootree-skeleton-full
Preset CMake variables:
CMAKE_BUILD_TYPE=""Release""
CMAKE_CXX_COMPILER=""g++""
CMAKE_C_COMPILER=""gcc""
CMAKE_INSTALL_PREFIX:PATH=""[CUT]/re2c/install""
RE2C_BUILD_LIBS:BOOL=""TRUE""
RE2C_BUILD_RE2GO:BOOL=""FALSE""
RE2C_FOR_BUILD=""[CUT]/re2c/install/bin/re2c""
RE2C_REBUILD_DOCS:BOOL=""TRUE""
RE2C_REBUILD_LEXERS:BOOL=""TRUE""

But if ""full"" is inherited after ""fast"" we have the following (correct):
$ cmake -S .. --preset=linux-gcc-release-ootree-skeleton-full
Preset CMake variables:
CMAKE_BUILD_TYPE=""Release""
CMAKE_CXX_COMPILER=""g++""
CMAKE_C_COMPILER=""gcc""
CMAKE_INSTALL_PREFIX:PATH=""[CUT]/re2c/install-2""
RE2C_BUILD_LIBS:BOOL=""TRUE""
RE2C_BUILD_RE2GO:BOOL=""TRUE""
RE2C_FOR_BUILD=""[CUT]/re2c/install/bin/re2c""
RE2C_REBUILD_DOCS:BOOL=""TRUE""
RE2C_REBUILD_LEXERS:BOOL=""TRUE""",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,387,2021-11-27T09:38:31Z,2021-11-28T16:38:52Z,2021-11-28T17:20:34Z,MERGED,True,15,11,2,https://github.com/skvadrik,"CMakePresets.json: inherit ""full"" configuration before ""fast"".",2,[],https://github.com/skvadrik/re2c/pull/387,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/387#issuecomment-981113815,"Otherwise variable definitions from ""fast"" configuration take precedence
over the ""full"" configuration, resulting in disabling some important
configrations, such as Go language support.
For example, if ""fast"" is inherited before ""full"" we have the following
incorrect configrations that sets RE2C_BUILD_RE2GO:BOOL=""FALSE"":
$ cmake -S .. --preset=linux-gcc-release-ootree-skeleton-full
Preset CMake variables:
CMAKE_BUILD_TYPE=""Release""
CMAKE_CXX_COMPILER=""g++""
CMAKE_C_COMPILER=""gcc""
CMAKE_INSTALL_PREFIX:PATH=""[CUT]/re2c/install""
RE2C_BUILD_LIBS:BOOL=""TRUE""
RE2C_BUILD_RE2GO:BOOL=""FALSE""
RE2C_FOR_BUILD=""[CUT]/re2c/install/bin/re2c""
RE2C_REBUILD_DOCS:BOOL=""TRUE""
RE2C_REBUILD_LEXERS:BOOL=""TRUE""

But if ""full"" is inherited after ""fast"" we have the following (correct):
$ cmake -S .. --preset=linux-gcc-release-ootree-skeleton-full
Preset CMake variables:
CMAKE_BUILD_TYPE=""Release""
CMAKE_CXX_COMPILER=""g++""
CMAKE_C_COMPILER=""gcc""
CMAKE_INSTALL_PREFIX:PATH=""[CUT]/re2c/install-2""
RE2C_BUILD_LIBS:BOOL=""TRUE""
RE2C_BUILD_RE2GO:BOOL=""TRUE""
RE2C_FOR_BUILD=""[CUT]/re2c/install/bin/re2c""
RE2C_REBUILD_DOCS:BOOL=""TRUE""
RE2C_REBUILD_LEXERS:BOOL=""TRUE""","@sergeyklay 2017418 could be interesting to you as it was not at all obvious that we were testing a slightly wrong configuration (I noticed it accidentally). See one of the old builds that disabled Go support in the ""full"" config: https://github.com/skvadrik/re2c/runs/4293511127?check_suite_focus=true#step:12:14",True,{'HOORAY': ['https://github.com/sergeyklay']}
skvadrik/re2c,https://github.com/skvadrik/re2c,387,2021-11-27T09:38:31Z,2021-11-28T16:38:52Z,2021-11-28T17:20:34Z,MERGED,True,15,11,2,https://github.com/skvadrik,"CMakePresets.json: inherit ""full"" configuration before ""fast"".",2,[],https://github.com/skvadrik/re2c/pull/387,https://github.com/sergeyklay,3,https://github.com/skvadrik/re2c/pull/387#issuecomment-981120919,"Otherwise variable definitions from ""fast"" configuration take precedence
over the ""full"" configuration, resulting in disabling some important
configrations, such as Go language support.
For example, if ""fast"" is inherited before ""full"" we have the following
incorrect configrations that sets RE2C_BUILD_RE2GO:BOOL=""FALSE"":
$ cmake -S .. --preset=linux-gcc-release-ootree-skeleton-full
Preset CMake variables:
CMAKE_BUILD_TYPE=""Release""
CMAKE_CXX_COMPILER=""g++""
CMAKE_C_COMPILER=""gcc""
CMAKE_INSTALL_PREFIX:PATH=""[CUT]/re2c/install""
RE2C_BUILD_LIBS:BOOL=""TRUE""
RE2C_BUILD_RE2GO:BOOL=""FALSE""
RE2C_FOR_BUILD=""[CUT]/re2c/install/bin/re2c""
RE2C_REBUILD_DOCS:BOOL=""TRUE""
RE2C_REBUILD_LEXERS:BOOL=""TRUE""

But if ""full"" is inherited after ""fast"" we have the following (correct):
$ cmake -S .. --preset=linux-gcc-release-ootree-skeleton-full
Preset CMake variables:
CMAKE_BUILD_TYPE=""Release""
CMAKE_CXX_COMPILER=""g++""
CMAKE_C_COMPILER=""gcc""
CMAKE_INSTALL_PREFIX:PATH=""[CUT]/re2c/install-2""
RE2C_BUILD_LIBS:BOOL=""TRUE""
RE2C_BUILD_RE2GO:BOOL=""TRUE""
RE2C_FOR_BUILD=""[CUT]/re2c/install/bin/re2c""
RE2C_REBUILD_DOCS:BOOL=""TRUE""
RE2C_REBUILD_LEXERS:BOOL=""TRUE""",Very interesting 🤔 Thank you!,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,396,2022-02-20T11:39:52Z,2022-02-20T12:14:04Z,2022-02-20T13:24:08Z,MERGED,True,22,6,1,https://github.com/trofi,"run_tests.py.in: add --verbose flag, disable successful printing by d…",1,[],https://github.com/skvadrik/re2c/pull/396,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/396,"…efault
re2c test are so fast that text output in terminal takes comparable time
on slower terminals. Let's disable it by default. Can still be brought
back with --verbose option.","…efault
re2c test are so fast that text output in terminal takes comparable time
on slower terminals. Let's disable it by default. Can still be brought
back with --verbose option.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,396,2022-02-20T11:39:52Z,2022-02-20T12:14:04Z,2022-02-20T13:24:08Z,MERGED,True,22,6,1,https://github.com/trofi,"run_tests.py.in: add --verbose flag, disable successful printing by d…",1,[],https://github.com/skvadrik/re2c/pull/396,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/396#issuecomment-1046224649,"…efault
re2c test are so fast that text output in terminal takes comparable time
on slower terminals. Let's disable it by default. Can still be brought
back with --verbose option.",Thanks! \o/,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,396,2022-02-20T11:39:52Z,2022-02-20T12:14:04Z,2022-02-20T13:24:08Z,MERGED,True,22,6,1,https://github.com/trofi,"run_tests.py.in: add --verbose flag, disable successful printing by d…",1,[],https://github.com/skvadrik/re2c/pull/396,https://github.com/skvadrik,3,https://github.com/skvadrik/re2c/pull/396#issuecomment-1046224846,"…efault
re2c test are so fast that text output in terminal takes comparable time
on slower terminals. Let's disable it by default. Can still be brought
back with --verbose option.",The failed CI builds are due to the recent Github migration to the new MSVC toolchain (unrelated to this PR).,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,400,2022-03-30T08:11:15Z,2022-03-30T09:07:43Z,2022-03-30T10:47:14Z,MERGED,True,11,0,1,https://github.com/trofi,.github/workflows/ci.yml: set up trivial apt cache,2,[],https://github.com/skvadrik/re2c/pull/400,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/400,"CI runs occasionally fail to fetch apt packages due to unavailable
remote. Let's try to cache heavyweight .deb packages and see if it
helps.
.deb files should not normally change frequently.","CI runs occasionally fail to fetch apt packages due to unavailable
remote. Let's try to cache heavyweight .deb packages and see if it
helps.
.deb files should not normally change frequently.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,400,2022-03-30T08:11:15Z,2022-03-30T09:07:43Z,2022-03-30T10:47:14Z,MERGED,True,11,0,1,https://github.com/trofi,.github/workflows/ci.yml: set up trivial apt cache,2,[],https://github.com/skvadrik/re2c/pull/400,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/400#issuecomment-1082819141,"CI runs occasionally fail to fetch apt packages due to unavailable
remote. Let's try to cache heavyweight .deb packages and see if it
helps.
.deb files should not normally change frequently.",Thank you \o/,True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,401,2022-03-30T10:46:46Z,2022-03-30T12:01:29Z,2022-03-30T13:36:38Z,MERGED,True,1,0,1,https://github.com/trofi,.github/workflows/benchmarks.yml: update apt indices for benchmarks a…,1,[],https://github.com/skvadrik/re2c/pull/401,https://github.com/trofi,1,https://github.com/skvadrik/re2c/pull/401,"…s well
ci.yml already updates indices to pull in most recent packges.
Let's update benchmarks as well.","…s well
ci.yml already updates indices to pull in most recent packges.
Let's update benchmarks as well.",True,{}
skvadrik/re2c,https://github.com/skvadrik/re2c,401,2022-03-30T10:46:46Z,2022-03-30T12:01:29Z,2022-03-30T13:36:38Z,MERGED,True,1,0,1,https://github.com/trofi,.github/workflows/benchmarks.yml: update apt indices for benchmarks a…,1,[],https://github.com/skvadrik/re2c/pull/401,https://github.com/skvadrik,2,https://github.com/skvadrik/re2c/pull/401#issuecomment-1083052713,"…s well
ci.yml already updates indices to pull in most recent packges.
Let's update benchmarks as well.",Thanks!,True,{}
