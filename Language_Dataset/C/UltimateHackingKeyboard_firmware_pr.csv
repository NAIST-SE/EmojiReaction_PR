UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,1,2016-02-10T02:12:31Z,2016-02-10T11:49:55Z,2016-02-10T11:50:07Z,MERGED,True,1,1,1,https://github.com/stephengroat,Update README with link to KDS,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/1,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/1,"It was hard for me to find quickly, just adding a link","It was hard for me to find quickly, just adding a link",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,1,2016-02-10T02:12:31Z,2016-02-10T11:49:55Z,2016-02-10T11:50:07Z,MERGED,True,1,1,1,https://github.com/stephengroat,Update README with link to KDS,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/1,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/1#issuecomment-182329528,"It was hard for me to find quickly, just adding a link",Thanks Stephen!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,4,2016-11-13T16:26:16Z,2016-11-13T16:45:09Z,2016-11-13T16:45:09Z,MERGED,True,246,49,15,https://github.com/RobertCsordas,Simple keymap,7,[],https://github.com/UltimateHackingKeyboard/firmware/pull/4,https://github.com/RobertCsordas,1,https://github.com/UltimateHackingKeyboard/firmware/pull/4,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,5,2016-11-13T17:49:03Z,2016-11-13T20:12:57Z,2016-11-13T20:12:57Z,MERGED,True,209,18,1,https://github.com/RobertCsordas,Fix i2c hangs when disconnecting the left half.,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/5,https://github.com/RobertCsordas,1,https://github.com/UltimateHackingKeyboard/firmware/pull/5,"Fixes the tricky i2c hang bug. It's mainly copy-paste from Kinetis library, so it uses the same coding style as the original.","Fixes the tricky i2c hang bug. It's mainly copy-paste from Kinetis library, so it uses the same coding style as the original.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,6,2016-11-14T21:52:18Z,2016-11-14T21:55:04Z,2016-11-14T21:55:04Z,MERGED,True,87,55,3,https://github.com/RobertCsordas,Modifier mask,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/6,https://github.com/RobertCsordas,1,https://github.com/UltimateHackingKeyboard/firmware/pull/6,Mask out keys after releasing the modifiers to prevent invalid keypresses to occour.,Mask out keys after releasing the modifiers to prevent invalid keypresses to occour.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,12,2016-12-11T08:32:24Z,2016-12-11T18:09:49Z,2016-12-11T18:09:52Z,CLOSED,False,120,84,3,https://github.com/algernon,Use 16-bits to describe each key,3,['enhancement'],https://github.com/UltimateHackingKeyboard/firmware/pull/12,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/12,"Turns the keymap into an array of uhk_key_t elements, in order to be able to describe behaviour outside of simple keys. As a test, the Fn key on the right side now acts as a test key, and will toggle the LEDs on and off.
Doubles the memory use of the keymap, but this - or something like this - will be needed for layers, mouse functions, and other things, anyway.","Turns the keymap into an array of uhk_key_t elements, in order to be able to describe behaviour outside of simple keys. As a test, the Fn key on the right side now acts as a test key, and will toggle the LEDs on and off.
Doubles the memory use of the keymap, but this - or something like this - will be needed for layers, mouse functions, and other things, anyway.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,12,2016-12-11T08:32:24Z,2016-12-11T18:09:49Z,2016-12-11T18:09:52Z,CLOSED,False,120,84,3,https://github.com/algernon,Use 16-bits to describe each key,3,['enhancement'],https://github.com/UltimateHackingKeyboard/firmware/pull/12,https://github.com/algernon,2,https://github.com/UltimateHackingKeyboard/firmware/pull/12#issuecomment-266297238,"Turns the keymap into an array of uhk_key_t elements, in order to be able to describe behaviour outside of simple keys. As a test, the Fn key on the right side now acts as a test key, and will toggle the LEDs on and off.
Doubles the memory use of the keymap, but this - or something like this - will be needed for layers, mouse functions, and other things, anyway.","Closing this one, as I'm reworking the whole thing, and the result will bear little resemblance to this attempt. I'll open a new PR soonish.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,13,2016-12-11T08:59:09Z,2016-12-11T10:52:56Z,2016-12-11T11:33:31Z,MERGED,True,10,4,2,https://github.com/algernon,LEDs: Add a method to set all LEDs to a given brightness,1,['enhancement'],https://github.com/UltimateHackingKeyboard/firmware/pull/13,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/13,"Mostly for testing purposes, but can be used later for backlight up/down stuff, too.","Mostly for testing purposes, but can be used later for backlight up/down stuff, too.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,13,2016-12-11T08:59:09Z,2016-12-11T10:52:56Z,2016-12-11T11:33:31Z,MERGED,True,10,4,2,https://github.com/algernon,LEDs: Add a method to set all LEDs to a given brightness,1,['enhancement'],https://github.com/UltimateHackingKeyboard/firmware/pull/13,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/13#issuecomment-266274331,"Mostly for testing purposes, but can be used later for backlight up/down stuff, too.","This seems redundant to me given that the brightness of the individual LEDs can already be set via USB. We expose the LED driver of both keyboard halves by protocol translating from USB HID to I2C, allowing for scripting the LEDs.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,13,2016-12-11T08:59:09Z,2016-12-11T10:52:56Z,2016-12-11T11:33:31Z,MERGED,True,10,4,2,https://github.com/algernon,LEDs: Add a method to set all LEDs to a given brightness,1,['enhancement'],https://github.com/UltimateHackingKeyboard/firmware/pull/13,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/13#issuecomment-266274406,"Mostly for testing purposes, but can be used later for backlight up/down stuff, too.",Any objections are welcome. :),True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,13,2016-12-11T08:59:09Z,2016-12-11T10:52:56Z,2016-12-11T11:33:31Z,MERGED,True,10,4,2,https://github.com/algernon,LEDs: Add a method to set all LEDs to a given brightness,1,['enhancement'],https://github.com/UltimateHackingKeyboard/firmware/pull/13,https://github.com/algernon,4,https://github.com/UltimateHackingKeyboard/firmware/pull/13#issuecomment-266274677,"Mostly for testing purposes, but can be used later for backlight up/down stuff, too.","Yup, I know its possible via USB HID, but that's not the most convenient thing when testing changes made to how the keys are handled. Furthermore, this makes it easier to have a way to adjust the backlighting, without needing any software on the host. That's very convenient when you plug your keyboard into computers you don't control, and where you can't have additional software installed, yet, still would like to use most features.
And backlighting is a very useful feature. Something I may want to use in, say, a server room, where I'm not going to install any keyboard-related stuff on the host system. :)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,13,2016-12-11T08:59:09Z,2016-12-11T10:52:56Z,2016-12-11T11:33:31Z,MERGED,True,10,4,2,https://github.com/algernon,LEDs: Add a method to set all LEDs to a given brightness,1,['enhancement'],https://github.com/UltimateHackingKeyboard/firmware/pull/13,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/13#issuecomment-266275287,"Mostly for testing purposes, but can be used later for backlight up/down stuff, too.","Thanks for explaining, makes sense! :)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,14,2016-12-11T18:27:46Z,2016-12-11T18:56:35Z,2016-12-11T18:57:10Z,MERGED,True,191,108,3,https://github.com/algernon,Rework the keyboard layout handling,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/14,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/14,"We now use a 32-bit structure to describe each key, and an uhk_key_t type that wraps all the supported things into a union. But this is not the only change: to be able to move the Fn/Mod keys anywhere, instead of hardcoding their location, they are now proper layer keys. To make it easier to handle turning a layer off, key releases can be handled explicitly, too.
There's more to it than described above... as far as I see, this should cover all bases. Not entirely happy with the code, but it appears to work, and my understanding is that everything the Agent supports, should fit into this structure. (Macros separately, of course, but the type & index is included)
One thing I'm not entirely sure about is the layers, I don't quite understand how the mod/fn/mouse layers are supposed to interact. But that part can be tuned later, I believe.","We now use a 32-bit structure to describe each key, and an uhk_key_t type that wraps all the supported things into a union. But this is not the only change: to be able to move the Fn/Mod keys anywhere, instead of hardcoding their location, they are now proper layer keys. To make it easier to handle turning a layer off, key releases can be handled explicitly, too.
There's more to it than described above... as far as I see, this should cover all bases. Not entirely happy with the code, but it appears to work, and my understanding is that everything the Agent supports, should fit into this structure. (Macros separately, of course, but the type & index is included)
One thing I'm not entirely sure about is the layers, I don't quite understand how the mod/fn/mouse layers are supposed to interact. But that part can be tuned later, I believe.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,14,2016-12-11T18:27:46Z,2016-12-11T18:56:35Z,2016-12-11T18:57:10Z,MERGED,True,191,108,3,https://github.com/algernon,Rework the keyboard layout handling,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/14,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/14#issuecomment-266299948,"We now use a 32-bit structure to describe each key, and an uhk_key_t type that wraps all the supported things into a union. But this is not the only change: to be able to move the Fn/Mod keys anywhere, instead of hardcoding their location, they are now proper layer keys. To make it easier to handle turning a layer off, key releases can be handled explicitly, too.
There's more to it than described above... as far as I see, this should cover all bases. Not entirely happy with the code, but it appears to work, and my understanding is that everything the Agent supports, should fit into this structure. (Macros separately, of course, but the type & index is included)
One thing I'm not entirely sure about is the layers, I don't quite understand how the mod/fn/mouse layers are supposed to interact. But that part can be tuned later, I believe.","Thank you so much for the PR! This is definitely a big step in the right direction. Please let me create a couple of issues, and then we'll be able iterate further step by step.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,14,2016-12-11T18:27:46Z,2016-12-11T18:56:35Z,2016-12-11T18:57:10Z,MERGED,True,191,108,3,https://github.com/algernon,Rework the keyboard layout handling,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/14,https://github.com/algernon,3,https://github.com/UltimateHackingKeyboard/firmware/pull/14#issuecomment-266299994,"We now use a 32-bit structure to describe each key, and an uhk_key_t type that wraps all the supported things into a union. But this is not the only change: to be able to move the Fn/Mod keys anywhere, instead of hardcoding their location, they are now proper layer keys. To make it easier to handle turning a layer off, key releases can be handled explicitly, too.
There's more to it than described above... as far as I see, this should cover all bases. Not entirely happy with the code, but it appears to work, and my understanding is that everything the Agent supports, should fit into this structure. (Macros separately, of course, but the type & index is included)
One thing I'm not entirely sure about is the layers, I don't quite understand how the mod/fn/mouse layers are supposed to interact. But that part can be tuned later, I believe.",\o/,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,16,2016-12-11T20:17:10Z,2016-12-12T19:15:28Z,2016-12-12T19:15:32Z,CLOSED,False,27,11,2,https://github.com/algernon,Improved key state tracking,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/16,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/16,"This adds the prevLeftKeyStates and prevRightKeyStates arrays, which are used to store the previous state of the matrix. These are then used to determine when a key is released, as opposed to when it is just not pressed. Without these, if we had two or more layer keys, only the last one would work, because the rest would keep getting handled as releases (since we can't make a difference between release and noop, unless we know the previous state).
We could just track layer keys, but there could be any number of them, so it is easier to just save the full matrix state. It's a memcpy of 70 bytes, fairly light.
(As an added bonus, the first commit adds the Mod & Space keys below the bottom row, as they appear on the default layout.)","This adds the prevLeftKeyStates and prevRightKeyStates arrays, which are used to store the previous state of the matrix. These are then used to determine when a key is released, as opposed to when it is just not pressed. Without these, if we had two or more layer keys, only the last one would work, because the rest would keep getting handled as releases (since we can't make a difference between release and noop, unless we know the previous state).
We could just track layer keys, but there could be any number of them, so it is easier to just save the full matrix state. It's a memcpy of 70 bytes, fairly light.
(As an added bonus, the first commit adds the Mod & Space keys below the bottom row, as they appear on the default layout.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,16,2016-12-11T20:17:10Z,2016-12-12T19:15:28Z,2016-12-12T19:15:32Z,CLOSED,False,27,11,2,https://github.com/algernon,Improved key state tracking,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/16,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/16#issuecomment-266321209,"This adds the prevLeftKeyStates and prevRightKeyStates arrays, which are used to store the previous state of the matrix. These are then used to determine when a key is released, as opposed to when it is just not pressed. Without these, if we had two or more layer keys, only the last one would work, because the rest would keep getting handled as releases (since we can't make a difference between release and noop, unless we know the previous state).
We could just track layer keys, but there could be any number of them, so it is easier to just save the full matrix state. It's a memcpy of 70 bytes, fairly light.
(As an added bonus, the first commit adds the Mod & Space keys below the bottom row, as they appear on the default layout.)",Thank you for the PR! Please see my comment in #15.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,16,2016-12-11T20:17:10Z,2016-12-12T19:15:28Z,2016-12-12T19:15:32Z,CLOSED,False,27,11,2,https://github.com/algernon,Improved key state tracking,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/16,https://github.com/algernon,3,https://github.com/UltimateHackingKeyboard/firmware/pull/16#issuecomment-266523529,"This adds the prevLeftKeyStates and prevRightKeyStates arrays, which are used to store the previous state of the matrix. These are then used to determine when a key is released, as opposed to when it is just not pressed. Without these, if we had two or more layer keys, only the last one would work, because the rest would keep getting handled as releases (since we can't make a difference between release and noop, unless we know the previous state).
We could just track layer keys, but there could be any number of them, so it is easier to just save the full matrix state. It's a memcpy of 70 bytes, fairly light.
(As an added bonus, the first commit adds the Mod & Space keys below the bottom row, as they appear on the default layout.)","Closing this PR, there's another coming that fixes #17, and includes this one too.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,18,2016-12-12T19:17:55Z,2016-12-13T13:50:04Z,2016-12-13T13:52:42Z,MERGED,True,286,160,5,https://github.com/algernon,Big Keymap Restructure,5,[],https://github.com/UltimateHackingKeyboard/firmware/pull/18,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/18,"This changes the keymap layout to be as described in #17, and updates the default layout to follow. (Also adds the missing Space and Mod keys on the two keys below the bottom row)
The layout itself was considerably simplified by introducing a few local macros to hide some of the uglier details.
Also includes #16, rebased and slightly redone, on top of the restructuring.
Quick tests show that at least the MOD layer is working, as does the base.","This changes the keymap layout to be as described in #17, and updates the default layout to follow. (Also adds the missing Space and Mod keys on the two keys below the bottom row)
The layout itself was considerably simplified by introducing a few local macros to hide some of the uglier details.
Also includes #16, rebased and slightly redone, on top of the restructuring.
Quick tests show that at least the MOD layer is working, as does the base.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,18,2016-12-12T19:17:55Z,2016-12-13T13:50:04Z,2016-12-13T13:52:42Z,MERGED,True,286,160,5,https://github.com/algernon,Big Keymap Restructure,5,[],https://github.com/UltimateHackingKeyboard/firmware/pull/18,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/18#issuecomment-266742935,"This changes the keymap layout to be as described in #17, and updates the default layout to follow. (Also adds the missing Space and Mod keys on the two keys below the bottom row)
The layout itself was considerably simplified by introducing a few local macros to hide some of the uglier details.
Also includes #16, rebased and slightly redone, on top of the restructuring.
Quick tests show that at least the MOD layer is working, as does the base.","All good, thank you for the great work!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,19,2016-12-13T13:52:23Z,2016-12-13T13:57:05Z,2016-12-13T14:00:05Z,MERGED,True,25,0,1,https://github.com/algernon,Add a clang-format config file,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/19,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/19,"This helps with formatting sources to be closer to the coding style explained in CONTRIBUTING.md. It's not perfect, but provides a reasonable base.","This helps with formatting sources to be closer to the coding style explained in CONTRIBUTING.md. It's not perfect, but provides a reasonable base.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,21,2016-12-13T17:46:34Z,2016-12-13T19:05:34Z,2016-12-13T19:07:57Z,MERGED,True,8,16,1,https://github.com/algernon,"Layer handling simplified, and streamlined",4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/21,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/21,"This simplifies the layer handling by only allowing a single layer to be active at any one time. As such, the behaviour after this patch should be as described, and as discussed in #15, as far as I understand.
Also moved the layer handling to a separate file, let me know if that is not desired.
Fixes #15, if all goes well.","This simplifies the layer handling by only allowing a single layer to be active at any one time. As such, the behaviour after this patch should be as described, and as discussed in #15, as far as I understand.
Also moved the layer handling to a separate file, let me know if that is not desired.
Fixes #15, if all goes well.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,21,2016-12-13T17:46:34Z,2016-12-13T19:05:34Z,2016-12-13T19:07:57Z,MERGED,True,8,16,1,https://github.com/algernon,"Layer handling simplified, and streamlined",4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/21,https://github.com/algernon,2,https://github.com/UltimateHackingKeyboard/firmware/pull/21#issuecomment-266829739,"This simplifies the layer handling by only allowing a single layer to be active at any one time. As such, the behaviour after this patch should be as described, and as discussed in #15, as far as I understand.
Also moved the layer handling to a separate file, let me know if that is not desired.
Fixes #15, if all goes well.","Updated, should be much simpler now.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,21,2016-12-13T17:46:34Z,2016-12-13T19:05:34Z,2016-12-13T19:07:57Z,MERGED,True,8,16,1,https://github.com/algernon,"Layer handling simplified, and streamlined",4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/21,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/21#issuecomment-266830617,"This simplifies the layer handling by only allowing a single layer to be active at any one time. As such, the behaviour after this patch should be as described, and as discussed in #15, as far as I understand.
Also moved the layer handling to a separate file, let me know if that is not desired.
Fixes #15, if all goes well.","Looks great, thanks!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,23,2016-12-13T19:35:54Z,2016-12-13T22:42:28Z,2016-12-13T22:50:07Z,MERGED,True,25,1,3,https://github.com/algernon,Light up LEDs on the display when switching layers,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/23,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/23,"When switching layers, light up the appropriate LED on the display. For this purpose, start led_display.[ch], which as a start, has a function to set the brightness of a layer led.
The function will also turn all other LEDs off, and turn all of them off when on the base layer.","When switching layers, light up the appropriate LED on the display. For this purpose, start led_display.[ch], which as a start, has a function to set the brightness of a layer led.
The function will also turn all other LEDs off, and turn all of them off when on the base layer.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,23,2016-12-13T19:35:54Z,2016-12-13T22:42:28Z,2016-12-13T22:50:07Z,MERGED,True,25,1,3,https://github.com/algernon,Light up LEDs on the display when switching layers,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/23,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/23#issuecomment-266885693,"When switching layers, light up the appropriate LED on the display. For this purpose, start led_display.[ch], which as a start, has a function to set the brightness of a layer led.
The function will also turn all other LEDs off, and turn all of them off when on the base layer.",This is awesome! Little improvements like this one go a long way!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,24,2016-12-14T16:05:36Z,2016-12-14T22:10:51Z,2016-12-15T06:30:41Z,MERGED,True,244,23,2,https://github.com/algernon,Rearrange the layout to follow the factory layout more closely,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/24,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/24,"Rearranges the Base and Mod layers to follow the factory layout more closely, and also adds the Fn and Mouse layers. Apart from the Mouse layer, and two small TODO items in the Fn layer, it should all be functional.
There is a minor deviation from the factory layout: modifiers are all present on every layer, in the same position. This is so that one can do Shift + Mouse + J to augment a  Mouse Left action with Shift, among other things.
The mouse layer has all its actions filled in, for which I created a number of enums, to make them clearer. There are no actions implemented yet, though. One thing to note here, is that all actions are bitfields, so we can have a Mouse Up + Mouse Right action, or a Mouse Button Left + Mouse Button Right action, and so on. Once I get to implementing mouse actions, the handler will do the right thing in all these cases.","Rearranges the Base and Mod layers to follow the factory layout more closely, and also adds the Fn and Mouse layers. Apart from the Mouse layer, and two small TODO items in the Fn layer, it should all be functional.
There is a minor deviation from the factory layout: modifiers are all present on every layer, in the same position. This is so that one can do Shift + Mouse + J to augment a  Mouse Left action with Shift, among other things.
The mouse layer has all its actions filled in, for which I created a number of enums, to make them clearer. There are no actions implemented yet, though. One thing to note here, is that all actions are bitfields, so we can have a Mouse Up + Mouse Right action, or a Mouse Button Left + Mouse Button Right action, and so on. Once I get to implementing mouse actions, the handler will do the right thing in all these cases.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,24,2016-12-14T16:05:36Z,2016-12-14T22:10:51Z,2016-12-15T06:30:41Z,MERGED,True,244,23,2,https://github.com/algernon,Rearrange the layout to follow the factory layout more closely,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/24,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/24#issuecomment-267092879,"Rearranges the Base and Mod layers to follow the factory layout more closely, and also adds the Fn and Mouse layers. Apart from the Mouse layer, and two small TODO items in the Fn layer, it should all be functional.
There is a minor deviation from the factory layout: modifiers are all present on every layer, in the same position. This is so that one can do Shift + Mouse + J to augment a  Mouse Left action with Shift, among other things.
The mouse layer has all its actions filled in, for which I created a number of enums, to make them clearer. There are no actions implemented yet, though. One thing to note here, is that all actions are bitfields, so we can have a Mouse Up + Mouse Right action, or a Mouse Button Left + Mouse Button Right action, and so on. Once I get to implementing mouse actions, the handler will do the right thing in all these cases.","I applaud your decision to feature modifier keys on every layer. This is the right thing to do, and we will fix the layouts on our site and campaign page accordingly eventually.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,25,2016-12-15T06:33:36Z,2016-12-15T10:44:18Z,2016-12-15T10:46:02Z,MERGED,True,1,1,1,https://github.com/algernon,Fix Mod+d to be Alt+Tab,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/25,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/25,"Due to a copy & paste error, Mod+d was doing Shift+Tab instead of Alt+Tab, this fixes that.","Due to a copy & paste error, Mod+d was doing Shift+Tab instead of Alt+Tab, this fixes that.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,26,2016-12-15T17:44:13Z,2016-12-15T18:50:12Z,2016-12-15T19:04:20Z,MERGED,True,326,281,9,https://github.com/algernon,Mouse action handling,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/26,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/26,"This is another one of those bigger changes. It implements mouse actions (most of them, anyway, see below for some TODOs), and renames keyboard_layout.* to action.*, because they handle actions, all kinds of them, not just keyboard report filling.
What is missing, is mouse acceleration while holding the movement keys. I experimented with that, trying to base it on the AVR firmware's version of mouse keys, but the results were so annoying that I opted not to do them, as I wouldn't be able to judge if acceleration behaves properly.
Tweaking things further should be a lot easier than doing it from scratch, so we're at least further down the road! Mind you, acceleration is something I'd rather not touch, and will leave someone else to implement/finish.","This is another one of those bigger changes. It implements mouse actions (most of them, anyway, see below for some TODOs), and renames keyboard_layout.* to action.*, because they handle actions, all kinds of them, not just keyboard report filling.
What is missing, is mouse acceleration while holding the movement keys. I experimented with that, trying to base it on the AVR firmware's version of mouse keys, but the results were so annoying that I opted not to do them, as I wouldn't be able to judge if acceleration behaves properly.
Tweaking things further should be a lot easier than doing it from scratch, so we're at least further down the road! Mind you, acceleration is something I'd rather not touch, and will leave someone else to implement/finish.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,26,2016-12-15T17:44:13Z,2016-12-15T18:50:12Z,2016-12-15T19:04:20Z,MERGED,True,326,281,9,https://github.com/algernon,Mouse action handling,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/26,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/26#issuecomment-267408692,"This is another one of those bigger changes. It implements mouse actions (most of them, anyway, see below for some TODOs), and renames keyboard_layout.* to action.*, because they handle actions, all kinds of them, not just keyboard report filling.
What is missing, is mouse acceleration while holding the movement keys. I experimented with that, trying to base it on the AVR firmware's version of mouse keys, but the results were so annoying that I opted not to do them, as I wouldn't be able to judge if acceleration behaves properly.
Tweaking things further should be a lot easier than doing it from scratch, so we're at least further down the road! Mind you, acceleration is something I'd rather not touch, and will leave someone else to implement/finish.","Yay, mouse keys! Thanks for the great work! Will do the acceleration later.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,28,2017-01-06T07:11:34Z,2017-01-06T12:17:18Z,2017-01-07T07:59:17Z,MERGED,True,4,3,1,https://github.com/algernon,Minor key_action_t updates,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/28,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/28,"This adds keystroke.longPress and switchLayer.isToggle to key_action_t, and renames switchKeymap.layer to switchKeymap.keymap.
These will be used by the deserialization, and are stuff the Agent already supports. There is no code yet to handle these, but at least with these changes, they can be represented.","This adds keystroke.longPress and switchLayer.isToggle to key_action_t, and renames switchKeymap.layer to switchKeymap.keymap.
These will be used by the deserialization, and are stuff the Agent already supports. There is no code yet to handle these, but at least with these changes, they can be represented.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,29,2017-01-06T08:14:03Z,2017-01-06T17:55:44Z,2017-01-08T22:27:30Z,MERGED,True,266,3,4,https://github.com/algernon,WIP: Initial deserialization code,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/29,https://github.com/algernon,1,https://github.com/UltimateHackingKeyboard/firmware/pull/29,"Depends on #28, for the key_action_t changes.
Currently updates CurrentKeymap directly, this should change in the future, but to keep things simple, I did not want to make the keymap changeable too. That will be a separate step.
At first, I'd like to run this code by you, to see if the direction is fine, or if there's anything I'd need to change substantially.
To try it, uncomment the deserialize_Layer line in main.c.
The hardcoded layer serialization is this:

The Esc key is a longpress one, and the longpress action is to switch to the Mouse layer.","Depends on #28, for the key_action_t changes.
Currently updates CurrentKeymap directly, this should change in the future, but to keep things simple, I did not want to make the keymap changeable too. That will be a separate step.
At first, I'd like to run this code by you, to see if the direction is fine, or if there's anything I'd need to change substantially.
To try it, uncomment the deserialize_Layer line in main.c.
The hardcoded layer serialization is this:

The Esc key is a longpress one, and the longpress action is to switch to the Mouse layer.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,29,2017-01-06T08:14:03Z,2017-01-06T17:55:44Z,2017-01-08T22:27:30Z,MERGED,True,266,3,4,https://github.com/algernon,WIP: Initial deserialization code,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/29,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/29#issuecomment-270964891,"Depends on #28, for the key_action_t changes.
Currently updates CurrentKeymap directly, this should change in the future, but to keep things simple, I did not want to make the keymap changeable too. That will be a separate step.
At first, I'd like to run this code by you, to see if the direction is fine, or if there's anything I'd need to change substantially.
To try it, uncomment the deserialize_Layer line in main.c.
The hardcoded layer serialization is this:

The Esc key is a longpress one, and the longpress action is to switch to the Mouse layer.","@algernon What a major step forward! We salute you! 🖖
Luckily, we will be able to remove findIndex in the near future but it's very much necessary in the meantime.
It'd be nice to decompose the code of the various serialization items into different files eventually. I'm thinking about a new config_parser directory under right/src. The directory hierarchy could resemble https://github.com/UltimateHackingKeyboard/agent/tree/master/src/config-serializer/config-items - What's your take on this?
How should we proceed further? Should Jozsef make Agent export the current keymap, for example?
Thank you so much!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,29,2017-01-06T08:14:03Z,2017-01-06T17:55:44Z,2017-01-08T22:27:30Z,MERGED,True,266,3,4,https://github.com/algernon,WIP: Initial deserialization code,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/29,https://github.com/algernon,3,https://github.com/UltimateHackingKeyboard/firmware/pull/29#issuecomment-271069934,"Depends on #28, for the key_action_t changes.
Currently updates CurrentKeymap directly, this should change in the future, but to keep things simple, I did not want to make the keymap changeable too. That will be a separate step.
At first, I'd like to run this code by you, to see if the direction is fine, or if there's anything I'd need to change substantially.
To try it, uncomment the deserialize_Layer line in main.c.
The hardcoded layer serialization is this:

The Esc key is a longpress one, and the longpress action is to switch to the Mouse layer.","I'd keep it in a single file, for a number of reasons:

It's simpler that way, and the code isn't all that large.
Having them in one file, most functions static allows better compiler optimizations.
Having a file for the None type alone, which is pretty much a one-liner feels like overkill.

For the agent, it makes sense to split them into files, because it has serialization too, into multiple formats, and deserialization likewise. The firmware can only deserialize the binary - a lot less code.

How should we proceed further? Should Jozsef make Agent export the current keymap, for example?

That would be grand, yes. As an orthogonal step, I'd like to refactor the code so that it does not work with CurrentKeymap directly, but the keymap array would have to be passed to the deserialize_Layer function. That would lay the foundation for being able to update multiple keymaps, and to deserialize into a temporary place, upon which we could run verification, for example.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,29,2017-01-06T08:14:03Z,2017-01-06T17:55:44Z,2017-01-08T22:27:30Z,MERGED,True,266,3,4,https://github.com/algernon,WIP: Initial deserialization code,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/29,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/29#issuecomment-271084134,"Depends on #28, for the key_action_t changes.
Currently updates CurrentKeymap directly, this should change in the future, but to keep things simple, I did not want to make the keymap changeable too. That will be a separate step.
At first, I'd like to run this code by you, to see if the direction is fine, or if there's anything I'd need to change substantially.
To try it, uncomment the deserialize_Layer line in main.c.
The hardcoded layer serialization is this:

The Esc key is a longpress one, and the longpress action is to switch to the Mouse layer.","Your reasons make a lot of sense to me. Let's keep the configuration parser in one file them. Later on, it might make sense to put the macro parser to a separate file, though. I'm comfortable having about 200 lines per file but not much more, and chances are the keymap + macro parser would grow way beyond that.
I'm not sure whether we want to use an alternative keymap array besides CurrentKeymap. The reason is that a single keymap array occupies about 5K RAM and the configuration can contain loads of keymaps resulting in a shortage of memory, even on our processor. I imagined an alternative approach.
The parser would read the whole configuration and index the offset of every keymap into a  uint16_t KeymapOffsets[] array. Then whenever a keymap switch action gets triggered, we'd parse the relevant keymap and extract it to CurrentKeymap.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,29,2017-01-06T08:14:03Z,2017-01-06T17:55:44Z,2017-01-08T22:27:30Z,MERGED,True,266,3,4,https://github.com/algernon,WIP: Initial deserialization code,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/29,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/29#issuecomment-271095537,"Depends on #28, for the key_action_t changes.
Currently updates CurrentKeymap directly, this should change in the future, but to keep things simple, I did not want to make the keymap changeable too. That will be a separate step.
At first, I'd like to run this code by you, to see if the direction is fine, or if there's anything I'd need to change substantially.
To try it, uncomment the deserialize_Layer line in main.c.
The hardcoded layer serialization is this:

The Esc key is a longpress one, and the longpress action is to switch to the Mouse layer.","As for the verification, a configuration validation step is very much planned, indeed. We'll execute it every time before writing the config into the EEPROM. It would be very nice if the parser returned whether its execution was successful, and if not, it would return the offset where it failed and an error code. That way, debugging would be a pleasure.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,29,2017-01-06T08:14:03Z,2017-01-06T17:55:44Z,2017-01-08T22:27:30Z,MERGED,True,266,3,4,https://github.com/algernon,WIP: Initial deserialization code,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/29,https://github.com/algernon,6,https://github.com/UltimateHackingKeyboard/firmware/pull/29#issuecomment-271184671,"Depends on #28, for the key_action_t changes.
Currently updates CurrentKeymap directly, this should change in the future, but to keep things simple, I did not want to make the keymap changeable too. That will be a separate step.
At first, I'd like to run this code by you, to see if the direction is fine, or if there's anything I'd need to change substantially.
To try it, uncomment the deserialize_Layer line in main.c.
The hardcoded layer serialization is this:

The Esc key is a longpress one, and the longpress action is to switch to the Mouse layer.","Yeah, the macro parser is worth putting elsewhere, that one is likely going to be big enough.
I like the keymap idea, having them as an array makes a lot of things simpler.
I'll see what I can do about the error reporting!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,39,2017-05-08T18:30:07Z,2017-05-09T19:05:43Z,2017-05-09T19:57:44Z,MERGED,True,18,0,1,https://github.com/stephengroat,Create .travis.yml,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/39,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/39,Adds travis builds for left and right,Adds travis builds for left and right,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,39,2017-05-08T18:30:07Z,2017-05-09T19:05:43Z,2017-05-09T19:57:44Z,MERGED,True,18,0,1,https://github.com/stephengroat,Create .travis.yml,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/39,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/39#issuecomment-299963119,Adds travis builds for left and right,"On one hand, I'm very happy that you managed to automate the build, but I'm afraid that your solution won't work on the long term due to a major sweeping change. Kinetis Development Studio has been deprecated, and I'll be porting the firmware to MCUXpresso IDE, its replacement.
The major question to ask is whether your solution relies on the GCC ARM Eclipse plugins. If so, your approach won't work. The reason is that MCUXpresso IDE doesn't use the GCC ARM Eclipse plugins by default and installing them is a pain in the ass, so we'll realy the native build system of MCUXpresso IDE.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,39,2017-05-08T18:30:07Z,2017-05-09T19:05:43Z,2017-05-09T19:57:44Z,MERGED,True,18,0,1,https://github.com/stephengroat,Create .travis.yml,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/39,https://github.com/stephengroat,3,https://github.com/UltimateHackingKeyboard/firmware/pull/39#issuecomment-299989839,Adds travis builds for left and right,"@mondalaci I just looked and MCUXpresso doesn't use the GCC ARM Eclipse plugin, but it still relies on Eclipse CDT. I can't be 100% sure, but I think the projects should still import and build. Lines 8-12 would be removed from the travis script, and something else might have to be added, but the basic concept should still work",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,39,2017-05-08T18:30:07Z,2017-05-09T19:05:43Z,2017-05-09T19:57:44Z,MERGED,True,18,0,1,https://github.com/stephengroat,Create .travis.yml,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/39,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/39#issuecomment-299997441,Adds travis builds for left and right,"@stephengroat I'll give your script a try tomorrow. I'm delighted that the build can be executed from the command line this way. Seems like this capability is implemented in the core of Eclipse and not dependent on the GCC ARM Eclipse plugins. If it properly returns with success or error then it should work for us.
I'd be a little more comfortable with a Linux travis script because the majority of us (developers and backers included) use Linux, so we could maintain it easier on the long run, but it's a minor issue, and porting the script should be trivial.
I'm also excited to ditch the ARM GCC Makefile based command line build scripts because they're a mainteance burden.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,39,2017-05-08T18:30:07Z,2017-05-09T19:05:43Z,2017-05-09T19:57:44Z,MERGED,True,18,0,1,https://github.com/stephengroat,Create .travis.yml,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/39,https://github.com/stephengroat,5,https://github.com/UltimateHackingKeyboard/firmware/pull/39#issuecomment-300021944,Adds travis builds for left and right,"@mondalaci the reason i chose osx was because of installing eclipse and the gnu-arm-embedded toolchain. the versions in brew cask are very up to date, the versions in apt are old (in the case of eclipse) and non-existent (in the case of gnu-arm-embedded toolchain).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,39,2017-05-08T18:30:07Z,2017-05-09T19:05:43Z,2017-05-09T19:57:44Z,MERGED,True,18,0,1,https://github.com/stephengroat,Create .travis.yml,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/39,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/39#issuecomment-300283461,Adds travis builds for left and right,@stephengroat Works like a charm! Thank you so much!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/40,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300587738,,"@stephengroat I can see that now Eclipse is installed from a tarball but this build still seems to target OSX. How is it a Linux build? Why is it a step forward compared to the current version?
Thank you!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/stephengroat,3,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300589263,,"@mondalaci it's building two jobs now, one osx and one precise",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300590220,,@stephengroat Where can I see the Linux target in the file? Why not build the whole thing only on Linux?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/stephengroat,5,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300596498,,"@mondalaci i can add in os: linux at the top, but it's just the default.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300597488,,"@stephengroat I see. I think I was confused by matrix.include.os = osx. Does it tell Travis to build it also on OSX, not just on Linux? If so, why is this used?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/stephengroat,7,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300604585,,"i don't know if you can see, but the versions of gcc that i'm using are currently causing the compilation issues on linux.
could you paste a gcc --version for me?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300613972,,"Sure thing!
laci@spark ~ $ gcc --version
gcc (Ubuntu 5.4.0-6ubuntu1~16.04.4) 5.4.0 20160609
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/stephengroat,9,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300614669,,"sorry, i was referring to the arm-none-eabi-gcc --version",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/mondalaci,10,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300615941,,"Ah, sure! Sorry, my bad.
laci@spark ~ $ arm-none-eabi-gcc --version
arm-none-eabi-gcc (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)
Copyright (C) 2014 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

But actually, there's another version installed by KDS. I believe this is the one actually used.
laci@spark /opt/Freescale/KDS_v3/toolchain/bin $ ./arm-none-eabi-gcc --version
arm-none-eabi-gcc (GNU Tools for ARM Embedded Processors) 4.8.4 20140725 (release) [ARM/embedded-4_8-branch revision 213147]
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/stephengroat,11,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300617741,,ah. i can't actually get the a toolchain that old from the arm toolchain site,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/mondalaci,12,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300621677,,"I'm sorry to hear about it. I'm surprised that newer versions of gcc don't build the firmware. Alternatively, maybe gcc could be installed from a PPA such as this. In any case, thank you for your work!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/stephengroat,13,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300652909,,you can see the errors here (https://travis-ci.org/UltimateHackingKeyboard/firmware/jobs/230896520) that i get with a newer arm toolchain,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,40,2017-05-10T16:59:51Z,2017-05-10T21:30:01Z,2017-05-11T16:02:56Z,CLOSED,False,25,6,1,https://github.com/stephengroat,add linux builds,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/40,https://github.com/mondalaci,14,https://github.com/UltimateHackingKeyboard/firmware/pull/40#issuecomment-300836692,,"Thanks for the link! Unfortunately, I have no idea how to resolve this error:
/home/travis/build/UltimateHackingKeyboard/firmware/gcc-arm-none-eabi-6-2017-q1-update/bin/../lib/gcc/arm-none-eabi/6.3.1/../../../../arm-none-eabi/bin/ld: section m_usb_bdt VMA [000000001fffa400,000000001fffa5ff] overlaps section .bss VMA [000000001fff2000,000000001fffac03]",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,43,2017-06-19T16:43:54Z,2017-06-22T19:15:06Z,2017-06-22T19:15:43Z,MERGED,True,28,111,8,https://github.com/ErichStyger,"enabled parallel build, fixed refresh policy and ignoring generated Eclipse settings",2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/43,https://github.com/ErichStyger,1,https://github.com/UltimateHackingKeyboard/firmware/pull/43,"minor modifications. Fixed refresh policy setting and enabled parallel build for faster building time, plus ignoring generated eclipse settings files.","minor modifications. Fixed refresh policy setting and enabled parallel build for faster building time, plus ignoring generated eclipse settings files.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,43,2017-06-19T16:43:54Z,2017-06-22T19:15:06Z,2017-06-22T19:15:43Z,MERGED,True,28,111,8,https://github.com/ErichStyger,"enabled parallel build, fixed refresh policy and ignoring generated Eclipse settings",2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/43,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/43#issuecomment-310475712,"minor modifications. Fixed refresh policy setting and enabled parallel build for faster building time, plus ignoring generated eclipse settings files.","The build got so much faster! Thank you very much, @ErichStyger!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,45,2017-07-07T15:19:46Z,2017-07-07T17:56:17Z,2017-07-07T18:02:47Z,MERGED,True,88,26,3,https://github.com/eltang,Improve the configuration parser,9,[],https://github.com/UltimateHackingKeyboard/firmware/pull/45,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/45,"This allows the configuration parser to parse keymap configurations and resolves #42. In addition, it introduces a bit of error checking to so that unexpected data is less likely to cause problems.","This allows the configuration parser to parse keymap configurations and resolves #42. In addition, it introduces a bit of error checking to so that unexpected data is less likely to cause problems.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,48,2017-07-09T17:40:48Z,2017-07-09T20:05:49Z,2017-07-09T20:08:38Z,MERGED,True,150,84,7,https://github.com/eltang,Add the parser for the top-level configuration,6,[],https://github.com/UltimateHackingKeyboard/firmware/pull/48,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/48,This resolves #46 and also does some minor refactoring to support the primary changes.,This resolves #46 and also does some minor refactoring to support the primary changes.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,50,2017-07-14T20:24:07Z,2017-07-14T20:34:52Z,2017-07-14T20:50:49Z,MERGED,True,14,14,2,https://github.com/eltang,Polish up the configuration parser,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/50,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/50,"This makes some changes which didn't make it into #48, and more importantly cleans up config_state.c and its readString function.","This makes some changes which didn't make it into #48, and more importantly cleans up config_state.c and its readString function.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,51,2017-07-14T21:03:46Z,2017-07-14T21:18:28Z,2017-07-14T23:40:46Z,MERGED,True,132,29,15,https://github.com/eltang,Add code to drive the LED display,13,[],https://github.com/UltimateHackingKeyboard/firmware/pull/51,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/51,This resolves #47. The current layer and the abbreviation of the current keymap will be shown on the display.,This resolves #47. The current layer and the abbreviation of the current keymap will be shown on the display.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,53,2017-07-21T19:26:48Z,2017-07-21T19:40:35Z,2017-07-21T19:41:05Z,MERGED,True,151,4,7,https://github.com/eltang,Add the macro parser,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/53,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/53,This resolves #49.,This resolves #49.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,55,2017-08-08T16:26:53Z,2017-08-08T18:49:08Z,2017-08-08T18:51:22Z,MERGED,True,42,9,5,https://github.com/eltang,Verify a new configuration before applying it,10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/55,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/55,This is the first step towards resolving #52.,This is the first step towards resolving #52.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,57,2017-08-08T19:13:35Z,2017-08-08T20:21:30Z,2017-08-08T20:27:56Z,MERGED,True,94,28,9,https://github.com/eltang,Implement keymap switching,8,[],https://github.com/UltimateHackingKeyboard/firmware/pull/57,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/57,This resolves #52.,This resolves #52.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,58,2017-09-27T23:26:26Z,2017-10-06T20:21:06Z,2017-11-08T18:54:31Z,MERGED,True,3,2,2,https://github.com/stephengroat,Improve OSX dependency management through brew bundle,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/58,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/58,"a new and improved osx dependency management system, takes the dependencies out of .travis.yml and moves them into a more track-able file","a new and improved osx dependency management system, takes the dependencies out of .travis.yml and moves them into a more track-able file",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,58,2017-09-27T23:26:26Z,2017-10-06T20:21:06Z,2017-11-08T18:54:31Z,MERGED,True,3,2,2,https://github.com/stephengroat,Improve OSX dependency management through brew bundle,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/58,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/58#issuecomment-332800885,"a new and improved osx dependency management system, takes the dependencies out of .travis.yml and moves them into a more track-able file","Thanks for your help! Unfortunately, just like the master branch, this PR fails in Travis. Can you possibly resolve this issue?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,58,2017-09-27T23:26:26Z,2017-10-06T20:21:06Z,2017-11-08T18:54:31Z,MERGED,True,3,2,2,https://github.com/stephengroat,Improve OSX dependency management through brew bundle,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/58,https://github.com/stephengroat,3,https://github.com/UltimateHackingKeyboard/firmware/pull/58#issuecomment-332846940,"a new and improved osx dependency management system, takes the dependencies out of .travis.yml and moves them into a more track-able file","@mondalaci i looked (even tried a bump) and it seems like there's a timeout during a download.
could you try restarting the last travis job that succeeded on master to double check?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,58,2017-09-27T23:26:26Z,2017-10-06T20:21:06Z,2017-11-08T18:54:31Z,MERGED,True,3,2,2,https://github.com/stephengroat,Improve OSX dependency management through brew bundle,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/58,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/58#issuecomment-332862626,"a new and improved osx dependency management system, takes the dependencies out of .travis.yml and moves them into a more track-able file","I've just restarted the last Travis job of the master branch. In any case, by looking at the commit history of the repo it's easy to notice that sometimes the build succeeds and most of the times it doesn't regardless of the state of the repo. It'd be great if the build worked consistently.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,58,2017-09-27T23:26:26Z,2017-10-06T20:21:06Z,2017-11-08T18:54:31Z,MERGED,True,3,2,2,https://github.com/stephengroat,Improve OSX dependency management through brew bundle,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/58,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/58#issuecomment-332882551,"a new and improved osx dependency management system, takes the dependencies out of .travis.yml and moves them into a more track-able file","The build that was successful now errored when rebuilt, proving the inconsistency of the current build process.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,58,2017-09-27T23:26:26Z,2017-10-06T20:21:06Z,2017-11-08T18:54:31Z,MERGED,True,3,2,2,https://github.com/stephengroat,Improve OSX dependency management through brew bundle,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/58,https://github.com/stephengroat,6,https://github.com/UltimateHackingKeyboard/firmware/pull/58#issuecomment-332883568,"a new and improved osx dependency management system, takes the dependencies out of .travis.yml and moves them into a more track-able file","travis is having problems with their osx infrastructure.
i'll look into simplifying a script for linux",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,58,2017-09-27T23:26:26Z,2017-10-06T20:21:06Z,2017-11-08T18:54:31Z,MERGED,True,3,2,2,https://github.com/stephengroat,Improve OSX dependency management through brew bundle,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/58,https://github.com/mondalaci,7,https://github.com/UltimateHackingKeyboard/firmware/pull/58#issuecomment-334860197,"a new and improved osx dependency management system, takes the dependencies out of .travis.yml and moves them into a more track-able file",I'm merging this in the hope that it'll make the build issues less prevalent.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/59,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335312950,,"This also seems to fail, unfortunately:
$ /Applications/Eclipse.app/Contents/MacOS/eclipse -noSplash -application org.eclipse.equinox.p2.director -repository http://gnuarmeclipse.sourceforge.net/updates -installIUs ilg.gnuarmeclipse.managedbuild.cross.feature.group -profileProperties org.eclipse.update.install.features=true
/Users/travis/.travis/job_stages: line 57: /Applications/Eclipse.app/Contents/MacOS/eclipse: No such file or directory
The command ""/Applications/Eclipse.app/Contents/MacOS/eclipse -noSplash -application org.eclipse.equinox.p2.director -repository http://gnuarmeclipse.sourceforge.net/updates -installIUs ilg.gnuarmeclipse.managedbuild.cross.feature.group -profileProperties org.eclipse.update.install.features=true"" failed and exited with 127 during .
Your build has been stopped.
/Users/travis/.travis/job_stages: line 166: shell_session_update: command not found

Would you please explain why this is an improvement over the exisitng build script?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/stephengroat,3,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335315028,,"sure, bundle is definitely brew's solution for dependency management. currently, brew install [PKG] fails if the package is already installed. bundle and Brewfiles are a way around that particular feature, allow packages to be listed and upgraded individually. it also controls the dependency outside of travis, allow a user to grab the repo and get all dependencies and tools with a single file.
linuxbrew is trying to do the same thing for linux",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335316194,,Thanks for explaining! Why would be a package already installed that is to be installed by brew? Is it sometimes cached by Travis?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/stephengroat,5,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335317446,,"@mondalaci kinda, travis (in their infinite wisdom) installs some packages (poorly documented) and updates their osx images kinda randomly (maybe they tell their on-prem customers, but i'm an enterprise customer and don't hear about it)
since the osx images are randomly updated, those pre-installed packages get randomly out of date. when dependencies exist, i've found that listing them in Brewfile allows them to be installed and updated with crazy scripting",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335318635,,"Ah, now I see! How about migrating to a Linux build eventually as a long term solution? I assume that you're more familiar with OSX, right?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/stephengroat,7,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335319219,,"@mondalaci i'm probably more familiar with linux, just maintaining the eclipse and arm-gcc install scripts can be a real pain (java moves around, etc). i'm hoping to see if i can get the nix package manager or linuxbrew in eventually",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335319535,,"Ok, Thanks! Well, seems like you're making progress. Please keep it up! It'd be great to see CI work.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/stephengroat,9,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335323204,,"@mondalaci running again, there's a linker error, but that's not me :-)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/mondalaci,10,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335327216,,"Thank you, great work!
I cannot reproduce this linker error on my machine. Let me ask our Kinetis guru. :)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,59,2017-10-09T21:14:47Z,2017-10-10T14:24:23Z,2017-10-10T14:26:03Z,MERGED,True,3,3,1,https://github.com/stephengroat,"brew updated, travis is behind",3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/59,https://github.com/mondalaci,11,https://github.com/UltimateHackingKeyboard/firmware/pull/59#issuecomment-335489741,,"As it turns out, even Erich, our Kinetis expert hasn't ever encountered with this linker issue:

The error is not apparent. I have never seen this VMA (Virtual Memory Area?) message.
To me it seems that the linker tries to do something with this, and this very much could be because of that different GCC/linker version you are using

I'm merging your PR because it's clearly a step forward. Going forward, it'd be great to set up a build environment with matching GCC and linker versions.
The current toolchain versions that ship with KDS 3.2.0 (Kinetis Design Studio, an Eclipse fork for Kinetis microcontrollers):

gcc version 4.8.4 20140725 (release) [ARM/embedded-4_8-branch revision 213147] (GNU Tools for ARM Embedded Processors)
GNU ld (GNU Tools for ARM Embedded Processors) 2.23.2.20140731",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,60,2017-10-10T15:39:46Z,2017-10-10T18:46:56Z,2017-10-27T15:16:06Z,MERGED,True,36,1,2,https://github.com/stephengroat,Fix gcc-arm-embedded version in cask,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/60,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/60,"#59 pin version of gcc-arm-embedded by manually including the cask formula
gcc-arm-embedded.rb can be moved around to get it out of the root directory, just make sure to update the Brewfile with the path","#59 pin version of gcc-arm-embedded by manually including the cask formula
gcc-arm-embedded.rb can be moved around to get it out of the root directory, just make sure to update the Brewfile with the path",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,60,2017-10-10T15:39:46Z,2017-10-10T18:46:56Z,2017-10-27T15:16:06Z,MERGED,True,36,1,2,https://github.com/stephengroat,Fix gcc-arm-embedded version in cask,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/60,https://github.com/stephengroat,2,https://github.com/UltimateHackingKeyboard/firmware/pull/60#issuecomment-335544060,"#59 pin version of gcc-arm-embedded by manually including the cask formula
gcc-arm-embedded.rb can be moved around to get it out of the root directory, just make sure to update the Brewfile with the path","success
not exactly speedy, but it works. super excited to get my keyboard soon!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,60,2017-10-10T15:39:46Z,2017-10-10T18:46:56Z,2017-10-27T15:16:06Z,MERGED,True,36,1,2,https://github.com/stephengroat,Fix gcc-arm-embedded version in cask,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/60,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/60#issuecomment-335570492,"#59 pin version of gcc-arm-embedded by manually including the cask formula
gcc-arm-embedded.rb can be moved around to get it out of the root directory, just make sure to update the Brewfile with the path","You're so awesome! So happy you've made it work!
We're working on your keyboard, and eager to deliver. :)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,61,2017-10-10T22:08:13Z,2017-10-19T17:11:01Z,2017-10-22T09:42:03Z,MERGED,True,21,14,1,https://github.com/stephengroat,Build linux in CI,9,[],https://github.com/UltimateHackingKeyboard/firmware/pull/61,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/61,"Haven't gotten the perfect gcc-arm-embedded package from nix and the travis file is a little bit messy, but it includes a ~3 minute linux build on travis using nix as a package manager","Haven't gotten the perfect gcc-arm-embedded package from nix and the travis file is a little bit messy, but it includes a ~3 minute linux build on travis using nix as a package manager",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,61,2017-10-10T22:08:13Z,2017-10-19T17:11:01Z,2017-10-22T09:42:03Z,MERGED,True,21,14,1,https://github.com/stephengroat,Build linux in CI,9,[],https://github.com/UltimateHackingKeyboard/firmware/pull/61,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/61#issuecomment-336583633,"Haven't gotten the perfect gcc-arm-embedded package from nix and the travis file is a little bit messy, but it includes a ~3 minute linux build on travis using nix as a package manager","Am I right that now the Linux build succeeded and OSX failed? Do we need two builds? If not, which one would you prefer and why?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,61,2017-10-10T22:08:13Z,2017-10-19T17:11:01Z,2017-10-22T09:42:03Z,MERGED,True,21,14,1,https://github.com/stephengroat,Build linux in CI,9,[],https://github.com/UltimateHackingKeyboard/firmware/pull/61,https://github.com/stephengroat,3,https://github.com/UltimateHackingKeyboard/firmware/pull/61#issuecomment-336845673,"Haven't gotten the perfect gcc-arm-embedded package from nix and the travis file is a little bit messy, but it includes a ~3 minute linux build on travis using nix as a package manager","slight issue with the linux build: the version of gcc-arm-embedded (the toolchain) doesn't exactly match what you guys are using. let me see if i can get both working, the only problem i'm currently having is some whitespace issues that should be solve-able",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,61,2017-10-10T22:08:13Z,2017-10-19T17:11:01Z,2017-10-22T09:42:03Z,MERGED,True,21,14,1,https://github.com/stephengroat,Build linux in CI,9,[],https://github.com/UltimateHackingKeyboard/firmware/pull/61,https://github.com/stephengroat,4,https://github.com/UltimateHackingKeyboard/firmware/pull/61#issuecomment-336859145,"Haven't gotten the perfect gcc-arm-embedded package from nix and the travis file is a little bit messy, but it includes a ~3 minute linux build on travis using nix as a package manager","fixed, you now get both osx and linux
i need to work on how to use nix to get the proper version of gcc-arm-embedded toolchain installed, but this is ready to merge",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,61,2017-10-10T22:08:13Z,2017-10-19T17:11:01Z,2017-10-22T09:42:03Z,MERGED,True,21,14,1,https://github.com/stephengroat,Build linux in CI,9,[],https://github.com/UltimateHackingKeyboard/firmware/pull/61,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/61#issuecomment-336897257,"Haven't gotten the perfect gcc-arm-embedded package from nix and the travis file is a little bit messy, but it includes a ~3 minute linux build on travis using nix as a package manager","Thanks, you're seriously awesome!
What's the advantage of building for two OSes? I'd think that it can break easier (in case either build breaks) which is not an advantage, although if either breaks I can just comment it out temporarily and the other will keep working.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,61,2017-10-10T22:08:13Z,2017-10-19T17:11:01Z,2017-10-22T09:42:03Z,MERGED,True,21,14,1,https://github.com/stephengroat,Build linux in CI,9,[],https://github.com/UltimateHackingKeyboard/firmware/pull/61,https://github.com/stephengroat,6,https://github.com/UltimateHackingKeyboard/firmware/pull/61#issuecomment-337961300,"Haven't gotten the perfect gcc-arm-embedded package from nix and the travis file is a little bit messy, but it includes a ~3 minute linux build on travis using nix as a package manager","Sorry, i thought the comment sent (i'm currently suffering from some sketchy internet).
the linux build currently has the wrong version of the gcc-arm-embedded toolchain. I haven't figure out nix well enough to get the right version yet.
in short: linux is fast but has the wrong gcc-arm-embedded toolchain version, osx is correct but super slow",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,61,2017-10-10T22:08:13Z,2017-10-19T17:11:01Z,2017-10-22T09:42:03Z,MERGED,True,21,14,1,https://github.com/stephengroat,Build linux in CI,9,[],https://github.com/UltimateHackingKeyboard/firmware/pull/61,https://github.com/mondalaci,7,https://github.com/UltimateHackingKeyboard/firmware/pull/61#issuecomment-337974660,"Haven't gotten the perfect gcc-arm-embedded package from nix and the travis file is a little bit messy, but it includes a ~3 minute linux build on travis using nix as a package manager","Makes perfect sense, thank you for explaining! Let me merge this one, and then you can send another one if you'll have time to figure out Linux even better.
Thanks so much!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,91,2018-02-11T05:46:35Z,2018-02-11T11:45:46Z,2018-02-11T19:00:58Z,MERGED,True,25,1,1,https://github.com/Lauszus,Detect Caps Lock state and set the LED accordingly,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/91,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/91,Fixes #65,Fixes #65,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,92,2018-02-11T21:44:27Z,2018-02-12T03:51:59Z,2018-02-12T10:50:02Z,MERGED,True,5,5,4,https://github.com/Lauszus,Logical maximum is wrongly assumed to be an unsigned integer,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/92,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/92,"Thus 0xFF is interpreted as -1 and not 255.
Simply setting the number of bits to 16 solves this.","Thus 0xFF is interpreted as -1 and not 255.
Simply setting the number of bits to 16 solves this.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,92,2018-02-11T21:44:27Z,2018-02-12T03:51:59Z,2018-02-12T10:50:02Z,MERGED,True,5,5,4,https://github.com/Lauszus,Logical maximum is wrongly assumed to be an unsigned integer,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/92,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/92#issuecomment-364823157,"Thus 0xFF is interpreted as -1 and not 255.
Simply setting the number of bits to 16 solves this.",Great catch!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,93,2018-02-13T20:57:46Z,2018-02-13T23:27:54Z,2018-02-13T23:35:17Z,MERGED,True,11,9,1,https://github.com/Lauszus,"Fix system keyboard descriptor, so it is byte-aligned",1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/93,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/93,"I have verified that the descriptor shows up correctly on Windows 7 and macOS.
The descriptor is based on the two following pages: https://github.com/Microsoft/Windows-driver-samples/tree/master/hid/hidusbfx2 and https://docs.microsoft.com/en-us/windows-hardware/drivers/gpiobtn/hid-button-report-descriptors.
Fixes #76.
I believe this fixes #66 as well.
From my testing this fixes #75 and #80 on Windows.","I have verified that the descriptor shows up correctly on Windows 7 and macOS.
The descriptor is based on the two following pages: https://github.com/Microsoft/Windows-driver-samples/tree/master/hid/hidusbfx2 and https://docs.microsoft.com/en-us/windows-hardware/drivers/gpiobtn/hid-button-report-descriptors.
Fixes #76.
I believe this fixes #66 as well.
From my testing this fixes #75 and #80 on Windows.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,94,2018-02-22T19:03:44Z,2018-02-22T19:11:38Z,2018-02-23T03:08:15Z,CLOSED,False,1,0,1,https://github.com/stephengroat,read install log after failure,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/94,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/94,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,94,2018-02-22T19:03:44Z,2018-02-22T19:11:38Z,2018-02-23T03:08:15Z,CLOSED,False,1,0,1,https://github.com/stephengroat,read install log after failure,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/94,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/94#issuecomment-367895874,,Wondering what was that. Just curious.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,94,2018-02-22T19:03:44Z,2018-02-22T19:11:38Z,2018-02-23T03:08:15Z,CLOSED,False,1,0,1,https://github.com/stephengroat,read install log after failure,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/94,https://github.com/stephengroat,3,https://github.com/UltimateHackingKeyboard/firmware/pull/94#issuecomment-367896243,,"saw the build errors on https://travis-ci.org/UltimateHackingKeyboard/firmware/builds/342834999 and https://travis-ci.org/UltimateHackingKeyboard/firmware/builds/342878046, but when i ran to debug i got a pass (https://travis-ci.org/UltimateHackingKeyboard/firmware/builds/344933572), so i figured it was just sporatic travis downtime! no worries!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,94,2018-02-22T19:03:44Z,2018-02-22T19:11:38Z,2018-02-23T03:08:15Z,CLOSED,False,1,0,1,https://github.com/stephengroat,read install log after failure,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/94,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/94#issuecomment-367896517,,"Yeah, Travis is not perfect, unfortunately. Maybe later we'll move to a more robust build platform. Thanks for looking into it!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,95,2018-03-10T21:38:56Z,2018-03-11T01:31:40Z,2018-03-11T01:44:41Z,MERGED,True,1,1,1,https://github.com/Lauszus,Replace HID_KEYBOARD_SC_MENU scancode with HID_KEYBOARD_SC_APPLICATION,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/95,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/95,Fixes UltimateHackingKeyboard/agent#563,Fixes UltimateHackingKeyboard/agent#563,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,96,2018-03-11T04:24:28Z,2018-03-11T18:19:15Z,2018-03-11T18:25:12Z,MERGED,True,69,52,17,https://github.com/Lauszus,Various fixes and improvements,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/96,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/96,See commit messages,See commit messages,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,96,2018-03-11T04:24:28Z,2018-03-11T18:19:15Z,2018-03-11T18:25:12Z,MERGED,True,69,52,17,https://github.com/Lauszus,Various fixes and improvements,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/96,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/96#issuecomment-372091454,See commit messages,"This makes the speed of the mouse pointer vary, and doesn't fix neither #84 nor #85.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/97,Fixes #83,Fixes #83,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372091423,Fixes #83,"This works fine when suspending a machine and then waking it up, but has some issues. When I reboot a machine and boot up an OS, backlighting gets permamently disabled until I replug USB. This PR also makes the mouse pointer move very slowly.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,3,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372092676,Fixes #83,"Okay, I will look into it. This PR does not affect the mouse interface, so I can't see how it should affect it?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372106586,Fixes #83,"By the looks of it the code should not affect mouse speed, but according to my testing it clearly does. Give it a try on Linux. Mouse speed is very sensitive to code changes. Maybe it could be implemented in a more robust manner.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,5,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372135368,Fixes #83,"The following PR needs to be merged for this to work: UltimateHackingKeyboard/KSDK_2.0_MK22FN512xxx12#1.
#96 also needs to be merged, as I use that to test if a button is pressed.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,6,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372135492,Fixes #83,"Regarding mouse speed, then yes I believe that the real issue if the mouse implementation, as it should not be that sensitive to code changes.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,7,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372135660,Fixes #83,I assume the mouse speed also depends on the optimization setting then?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372135914,Fixes #83,I don't know but chances are good it does.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,9,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372135921,Fixes #83,Hmm it seems like the layer keys are not always restored correctly when the LEDs are turned back on.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/mondalaci,10,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372136066,Fixes #83,"I can merge #96 but only if you can fix the mouse speed issue soon (about within a week), because that will break the mouse feature usability-wise.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,11,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372136133,Fixes #83,Just create a dev branch and I will change the base of these PR's.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/mondalaci,12,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372136324,Fixes #83,dev branch pushed.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,13,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372136408,Fixes #83,"Great, I have now changed the base for both of them :)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/mondalaci,14,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372137170,Fixes #83,"Cool, thanks! Please resolve the conflicts so that I can merge this one, too.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,15,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372137509,Fixes #83,"Will do that now. The problem is that you are not actually merging my commit, but are rebasing them. Just tell me to rebase them into one commit if you prefer that.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/mondalaci,16,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372137615,Fixes #83,"I just usually use the ""squash and merge"" feature of GitHub to merge PRs. Should I use something else?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,17,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372137746,Fixes #83,"I usually just use the default ""Create a merge commit"", so the history is preserved and you do not rewrite the commits.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/mondalaci,18,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372137834,Fixes #83,Thanks! Did as you suggested.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,97,2018-03-11T04:25:44Z,2018-03-11T18:34:57Z,2018-03-11T23:51:35Z,MERGED,True,98,15,11,https://github.com/Lauszus,"Turn LEDs, backlight and display off when sleeping",10,[],https://github.com/UltimateHackingKeyboard/firmware/pull/97,https://github.com/Lauszus,19,https://github.com/UltimateHackingKeyboard/firmware/pull/97#issuecomment-372138772,Fixes #83,"Wait, I did not push the fix for #97 (comment), but I will just open a new PR :)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,98,2018-03-11T19:06:03Z,2018-03-11T19:08:00Z,2018-03-11T19:24:17Z,MERGED,True,6,4,1,https://github.com/Lauszus,Wake up the keyboard if there is any activity on the bus,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/98,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/98,This fixes: #97 (comment),This fixes: #97 (comment),True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,100,2018-04-08T19:22:03Z,2018-04-08T19:27:52Z,2018-04-08T19:28:15Z,MERGED,True,68,55,10,https://github.com/Lauszus,Mouse issue and other fixes,9,[],https://github.com/UltimateHackingKeyboard/firmware/pull/100,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/100,"Fixes mouse speed
Linker error on newer compilers","Fixes mouse speed
Linker error on newer compilers",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,101,2018-04-08T20:02:15Z,2018-04-08T20:09:56Z,2018-04-08T20:09:56Z,MERGED,True,5,46,1,https://github.com/Lauszus,More mouse fixes,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/101,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/101,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,102,2018-04-08T20:12:37Z,2018-04-08T20:13:39Z,2018-04-08T20:13:39Z,MERGED,True,7,6,1,https://github.com/Lauszus,Moved timer used for mouse speed into processMouseActions and renamed…,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/102,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/102,… the variables,… the variables,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,103,2018-04-08T20:21:49Z,2018-04-08T20:24:32Z,2018-04-08T20:24:32Z,MERGED,True,3,3,1,https://github.com/Lauszus,Cast mouseElapsedTime to float when calculating the speed and distance,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/103,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/103,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,104,2018-04-08T20:47:05Z,2018-04-10T12:13:59Z,2018-04-10T12:16:59Z,MERGED,True,258,133,35,https://github.com/Lauszus,Merge dev into master,33,[],https://github.com/UltimateHackingKeyboard/firmware/pull/104,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/104,"Turn LEDs, backlight and display off when sleeping - see #83
The keyboard can now wake up the computer from sleep
Fix mouse speed issue - see #99
A lot of other various fixed and improvements","Turn LEDs, backlight and display off when sleeping - see #83
The keyboard can now wake up the computer from sleep
Fix mouse speed issue - see #99
A lot of other various fixed and improvements",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,108,2018-04-29T18:19:36Z,2018-04-29T18:24:16Z,2018-04-30T15:14:32Z,CLOSED,False,2,2,1,https://github.com/stephengroat,use new nix commands,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/108,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/108,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,108,2018-04-29T18:19:36Z,2018-04-29T18:24:16Z,2018-04-30T15:14:32Z,CLOSED,False,2,2,1,https://github.com/stephengroat,use new nix commands,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/108,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/108#issuecomment-385275529,,Hey @stephengroat! Would you please explain what was this?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,108,2018-04-29T18:19:36Z,2018-04-29T18:24:16Z,2018-04-30T15:14:32Z,CLOSED,False,2,2,1,https://github.com/stephengroat,use new nix commands,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/108,https://github.com/stephengroat,3,https://github.com/UltimateHackingKeyboard/firmware/pull/108#issuecomment-385429827,,"sorry, a bum pr. nix version 2 has some syntactical updates, but i'm on a more bleeding edge version. i'll re-update when the changes are pushed mainstream",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/110,Needs some testing before merging,Needs some testing before merging,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/Lauszus,2,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-385813627,Needs some testing before merging,"I also have some code for flashing the firmware using JLink, but I have not added it yet since I have not tested it yet.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/eltang,3,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-385820952,Needs some testing before merging,"GPLv2 only and GPLv3 are incompatible, so wouldn't this create a license conflict?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/Lauszus,4,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-385834438,Needs some testing before merging,@eltang fixed in aa4105b.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/Lauszus,5,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-385907179,Needs some testing before merging,"I added support for flashing the two half using JLink flash in 66252ea. Can someone with a JLink debugger test it?
Just run:
make flash-jlink",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-385926570,Needs some testing before merging,"I got the following error on Linux Mint:
laci@spark ~/projects/firmware/right $ make
    CC    key_states.c
In file included from /home/laci/projects/firmware/right/src/key_states.h:6:0,
                 from /home/laci/projects/firmware/right/src/key_states.c:1:
../lib/KSDK_2.0_MK22FN512xxx12/devices/MK22F51212/drivers/fsl_common.h:34:20: fatal error: assert.h: No such file or directory
 #include <assert.h>
                    ^
compilation terminated.
../scripts/Makedefs.mk:202: recipe for target 'build_make//home/laci/projects/firmware/right/src/key_states.o' failed
make: *** [build_make//home/laci/projects/firmware/right/src/key_states.o] Error 1",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/Lauszus,7,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-385932644,Needs some testing before merging,What version of ARM gcc are you using?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-385936919,Needs some testing before merging,"laci@spark ~/projects/firmware $ arm-none-eabi-gcc --version
arm-none-eabi-gcc (15:4.9.3+svn231177-1) 4.9.3 20150529 (prerelease)
Copyright (C) 2014 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/Lauszus,9,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-385938748,Needs some testing before merging,Can you try to update it to something more recent (see .travis.yml)?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/Lauszus,10,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-385990134,Needs some testing before merging,@mondalaci see: https://stackoverflow.com/a/34467175.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,110,2018-05-01T21:58:45Z,2018-05-02T22:22:06Z,2018-05-04T23:43:05Z,MERGED,True,694,73,15,https://github.com/Lauszus,Added Makefiles for compiling the two projects,12,[],https://github.com/UltimateHackingKeyboard/firmware/pull/110,https://github.com/mondalaci,11,https://github.com/UltimateHackingKeyboard/firmware/pull/110#issuecomment-386118299,Needs some testing before merging,"Finally, it builds! I installed the GNU Arm Embedded Toolchain PPA by typing:
sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa
sudo apt-get update
sudo apt-get install gcc-arm-embedded",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,112,2018-05-06T13:12:41Z,2018-05-06T18:14:52Z,2018-10-23T18:45:29Z,MERGED,True,7,7,3,https://github.com/Lauszus,Fix vendor specific usage page entry,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/112,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/112,See: node-hid/node-hid#258,See: node-hid/node-hid#258,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,113,2018-05-06T13:24:38Z,2018-05-06T21:00:27Z,2018-06-24T21:21:25Z,MERGED,True,73,190,10,https://github.com/Lauszus,Make,8,[],https://github.com/UltimateHackingKeyboard/firmware/pull/113,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/113,See commit messages.,See commit messages.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,114,2018-05-07T20:24:01Z,2018-05-07T22:02:48Z,2018-05-07T22:02:48Z,MERGED,True,0,2,2,https://github.com/Lauszus,Removed unneeded sources,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/114,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/114,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,115,2018-05-07T22:58:10Z,2018-05-07T23:39:13Z,2018-05-07T23:49:35Z,MERGED,True,3,0,1,https://github.com/Lauszus,"Enable the link-time optimizer for the left side, as this was also us…",1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/115,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/115,"…ed before the Makefile were added
I also checked the effect of adding it to the right side, but in this case it actually makes the binary size larger since we using -O3: https://stackoverflow.com/questions/24718652/why-does-link-time-optimization-results-in-larger-binaries.
With lto:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       37280 B       463 KB      7.86%
          m_data:       49728 B        64 KB     75.88%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%
Without:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       37152 B       463 KB      7.84%
          m_data:       49912 B        64 KB     76.16%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%","…ed before the Makefile were added
I also checked the effect of adding it to the right side, but in this case it actually makes the binary size larger since we using -O3: https://stackoverflow.com/questions/24718652/why-does-link-time-optimization-results-in-larger-binaries.
With lto:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       37280 B       463 KB      7.86%
          m_data:       49728 B        64 KB     75.88%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%
Without:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       37152 B       463 KB      7.84%
          m_data:       49912 B        64 KB     76.16%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,115,2018-05-07T22:58:10Z,2018-05-07T23:39:13Z,2018-05-07T23:49:35Z,MERGED,True,3,0,1,https://github.com/Lauszus,"Enable the link-time optimizer for the left side, as this was also us…",1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/115,https://github.com/Lauszus,2,https://github.com/UltimateHackingKeyboard/firmware/pull/115#issuecomment-387232249,"…ed before the Makefile were added
I also checked the effect of adding it to the right side, but in this case it actually makes the binary size larger since we using -O3: https://stackoverflow.com/questions/24718652/why-does-link-time-optimization-results-in-larger-binaries.
With lto:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       37280 B       463 KB      7.86%
          m_data:       49728 B        64 KB     75.88%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%
Without:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       37152 B       463 KB      7.84%
          m_data:       49912 B        64 KB     76.16%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%","Here are the result for the left side:
With lto:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:         192 B        256 B     75.00%
m_bootloader_config:          32 B         64 B     50.00%
  m_flash_config:          16 B         16 B    100.00%
          m_text:        3432 B      31728 B     10.82%
          m_data:        1112 B         2 KB     54.30%
Without:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:         192 B        256 B     75.00%
m_bootloader_config:          32 B         64 B     50.00%
  m_flash_config:          16 B         16 B    100.00%
          m_text:        6060 B      31728 B     19.10%
          m_data:        1168 B         2 KB     57.03%",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,120,2018-06-06T22:19:10Z,2018-06-07T01:02:38Z,2018-06-07T13:33:57Z,MERGED,True,51,61,9,https://github.com/Lauszus,The UHK now only sends out data when it changes,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/120,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/120,"Fixes #72, fixes #84 and fixes #85","Fixes #72, fixes #84 and fixes #85",True,"{'THUMBS_UP': ['https://github.com/Jos512', 'https://github.com/Hurricaaane', 'https://github.com/LukePammant'], 'HOORAY': ['https://github.com/Hurricaaane']}"
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,120,2018-06-06T22:19:10Z,2018-06-07T01:02:38Z,2018-06-07T13:33:57Z,MERGED,True,51,61,9,https://github.com/Lauszus,The UHK now only sends out data when it changes,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/120,https://github.com/Lauszus,2,https://github.com/UltimateHackingKeyboard/firmware/pull/120#issuecomment-395235978,"Fixes #72, fixes #84 and fixes #85","This affects the mouse, as it moves irregular after this commit.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,120,2018-06-06T22:19:10Z,2018-06-07T01:02:38Z,2018-06-07T13:33:57Z,MERGED,True,51,61,9,https://github.com/Lauszus,The UHK now only sends out data when it changes,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/120,https://github.com/Lauszus,3,https://github.com/UltimateHackingKeyboard/firmware/pull/120#issuecomment-395238342,"Fixes #72, fixes #84 and fixes #85",#120 (comment) should be fixed in ad72377.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,120,2018-06-06T22:19:10Z,2018-06-07T01:02:38Z,2018-06-07T13:33:57Z,MERGED,True,51,61,9,https://github.com/Lauszus,The UHK now only sends out data when it changes,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/120,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/120#issuecomment-395260074,"Fixes #72, fixes #84 and fixes #85","@Lauszus You're epic! I can confirm that you've just smashed all the 3 bugs referenced.
MULTIKILL!",True,{'THUMBS_UP': ['https://github.com/LukePammant']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,120,2018-06-06T22:19:10Z,2018-06-07T01:02:38Z,2018-06-07T13:33:57Z,MERGED,True,51,61,9,https://github.com/Lauszus,The UHK now only sends out data when it changes,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/120,https://github.com/Lauszus,5,https://github.com/UltimateHackingKeyboard/firmware/pull/120#issuecomment-395304542,"Fixes #72, fixes #84 and fixes #85",@mondalaci thanks! Note that this might also solve: #87.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,120,2018-06-06T22:19:10Z,2018-06-07T01:02:38Z,2018-06-07T13:33:57Z,MERGED,True,51,61,9,https://github.com/Lauszus,The UHK now only sends out data when it changes,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/120,https://github.com/Jopie01,6,https://github.com/UltimateHackingKeyboard/firmware/pull/120#issuecomment-395403097,"Fixes #72, fixes #84 and fixes #85","Can you release a new (beta) version of the firmware, so I can test #87",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,120,2018-06-06T22:19:10Z,2018-06-07T01:02:38Z,2018-06-07T13:33:57Z,MERGED,True,51,61,9,https://github.com/Lauszus,The UHK now only sends out data when it changes,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/120,https://github.com/mondalaci,7,https://github.com/UltimateHackingKeyboard/firmware/pull/120#issuecomment-395421848,"Fixes #72, fixes #84 and fixes #85","@Jopie01 Just did that, and commented #87. Please let's continue this discussion there.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/123,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-395928064,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","@Lauszus Oops, it did it again.
Seriously though, unfortunately this fix doesn't work. The up arrow scancode just stuck after several hours of use.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,3,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-399773912,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",I have been running the test in: 8edc17e for an hour now. So far it's rock solid :),True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-399774125,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",Awesome! :) Thanks for the hard work! Let test this for a couple of days to make sure it doesn't ever freeze.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401563394,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","I've just finished bisecting the Lauszus-dev branch of this repo, and found that 4214f3e fixed the freeze bug.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,6,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401563753,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",Awesome!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,7,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401563768,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",I'll merge @eltang changes into this one.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/eltang,8,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401564517,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","I still have some more changes to make, after which I'll do a full test.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,9,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401565281,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",@eltang are they relevant to this PR or are they other fixes like the mouse scrolling issue #133?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/eltang,10,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401565841,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","Yes, there are some issues with sleep and wake right now and I am tweaking the code to make it so that it looks for changes in the key states rather than the reports.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,11,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401566091,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","@eltang okay great. Just let me know when you are done and I will merge it into this PR.
Assuming your second comment was an answer to the following comment: d3dfc9b#commitcomment-29555490, then I will revert your revert then :)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,12,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401566814,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",Btw I just tried to set USB_BASIC_KEYBOARD_INTERRUPT_IN_INTERVAL to 1 and checked the output in Wireshark and it seems to work as well :),True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/mondalaci,13,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401567341,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","This PR contains a lot of commits and I'm starting to get lost. I'd like to merge this the way it is and encourage other commits in other PRs.
Any objections? Also, any difference between @Lauszus branch and the Lauszus-dev branch of this repo?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,14,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401567524,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","I agree, best to fix the other issues in separate PR's.
No, I have merged all the changes in Lauszus-dev into this one. Most mentionable is  4214f3e.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/mondalaci,15,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401567631,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","Any objections, @eltang? If not, I'll finally merge this.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,16,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401567736,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","Shouldn't we wait and test this overnight just to be 100 % sure this time?
Btw I need to remove the test code before it is merged.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/mondalaci,17,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401567872,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","Good idea. I'll test it on two machines during night.
I'd be worth to extract the test code into a separate file and #ifdef it for future testing.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,18,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401568251,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","I have disabled the test code in 5b32c0d. However I did not put into a separate file, as it only works at those lines in usb_report_updater.c anyway.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/mondalaci,19,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401568331,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",@Lauszus Thanks! It's fine the way it is.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/eltang,20,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401568711,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",It seems an extraneous CurrentTime variable got introduced somewhere along the way.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,21,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401568982,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",Thanks @eltang. This was due to a merge conflict in c69f664.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/mondalaci,22,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401570046,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127","Excellent work, guys! Please don't add any further commits to this PR. Let's test it overnight and I'll merge it if it works at everyone's end.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/Lauszus,23,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401594294,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",I stopped the test on my computer. Everything works fine :),True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,123,2018-06-08T18:24:48Z,2018-07-01T14:19:50Z,2018-07-01T14:20:21Z,MERGED,True,346,143,18,https://github.com/Lauszus,Fix issue with keyboard freezing,52,[],https://github.com/UltimateHackingKeyboard/firmware/pull/123,https://github.com/mondalaci,24,https://github.com/UltimateHackingKeyboard/firmware/pull/123#issuecomment-401609947,"Fixes #122
Fix PIT timer period and added functions for getting the current time in microseconds - see #127",I fully agree. I tested it on 2 computers for 8 hours each and it was rock stable. I'm merging this. What a wonderful way to close the previous month!,True,{'HOORAY': ['https://github.com/Lauszus']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,127,2018-06-22T15:24:47Z,2018-06-27T19:51:02Z,2018-06-27T20:45:39Z,CLOSED,False,43,7,2,https://github.com/Lauszus,Fix PIT timer period and added functions for getting the current time…,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/127,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/127,"… in microseconds
Before:

After:","… in microseconds
Before:

After:",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,127,2018-06-22T15:24:47Z,2018-06-27T19:51:02Z,2018-06-27T20:45:39Z,CLOSED,False,43,7,2,https://github.com/Lauszus,Fix PIT timer period and added functions for getting the current time…,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/127,https://github.com/Lauszus,2,https://github.com/UltimateHackingKeyboard/firmware/pull/127#issuecomment-399564232,"… in microseconds
Before:

After:",Note that this fix will make the mouse move twice as fast.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,127,2018-06-22T15:24:47Z,2018-06-27T19:51:02Z,2018-06-27T20:45:39Z,CLOSED,False,43,7,2,https://github.com/Lauszus,Fix PIT timer period and added functions for getting the current time…,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/127,https://github.com/Lauszus,3,https://github.com/UltimateHackingKeyboard/firmware/pull/127#issuecomment-399691080,"… in microseconds
Before:

After:","Closing, as this PR is part of #123 as well.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,127,2018-06-22T15:24:47Z,2018-06-27T19:51:02Z,2018-06-27T20:45:39Z,CLOSED,False,43,7,2,https://github.com/Lauszus,Fix PIT timer period and added functions for getting the current time…,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/127,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/127#issuecomment-400807659,"… in microseconds
Before:

After:","@Lauszus Thank you for reopening this PR.
@eltang I know you'd like to get this PR merged for the macro engine but I cannot merge it yet because it makes the movement of the mouse pointer choppy. Sorry, but it will only be merged with #123 which addresses the mouse issue and contains this code.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,127,2018-06-22T15:24:47Z,2018-06-27T19:51:02Z,2018-06-27T20:45:39Z,CLOSED,False,43,7,2,https://github.com/Lauszus,Fix PIT timer period and added functions for getting the current time…,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/127,https://github.com/Lauszus,5,https://github.com/UltimateHackingKeyboard/firmware/pull/127#issuecomment-400819461,"… in microseconds
Before:

After:","@mondalaci sorry but this does not effect the mouse choppiness. It will make the report actually be sent out at 4 ms and not 8 ms, which is the case with the current code in master. So the real fix should be to update the code that uses the timer, as this make the milliseconds timer actually count correctly.
Btw there is a bug in this line of the USB report updater code: https://github.com/UltimateHackingKeyboard/firmware/blob/master/right/src/usb_report_updater.c#L399-L404, as hasActiveMouseState should only be set true if the wheel or the mouse is moved.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,127,2018-06-22T15:24:47Z,2018-06-27T19:51:02Z,2018-06-27T20:45:39Z,CLOSED,False,43,7,2,https://github.com/Lauszus,Fix PIT timer period and added functions for getting the current time…,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/127,https://github.com/Lauszus,6,https://github.com/UltimateHackingKeyboard/firmware/pull/127#issuecomment-400821223,"… in microseconds
Before:

After:","I.e. this will effect every piece of code that is relying on the timer. For instance the KEY_DEBOUNCER_TIMEOUT_MSEC value is currently set to 100, but in reality it is 200 ms, because of this bug in the timer implementation.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,127,2018-06-22T15:24:47Z,2018-06-27T19:51:02Z,2018-06-27T20:45:39Z,CLOSED,False,43,7,2,https://github.com/Lauszus,Fix PIT timer period and added functions for getting the current time…,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/127,https://github.com/mondalaci,7,https://github.com/UltimateHackingKeyboard/firmware/pull/127#issuecomment-400823236,"… in microseconds
Before:

After:","@Lauszus Thanks for the explanation! I understand that this PR shouldn't affect mouse chopiness but according to my testing it clearly does. I'd much rather wait for #123 than delving into this. I understand that the timer affects everything.
@Lauszus @eltang You're welcome to send a PR regarding the hasActiveMouseState related issue. I have a lot on my plate right now.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,129,2018-06-27T01:00:41Z,2018-06-27T01:13:36Z,2018-06-27T01:13:41Z,MERGED,True,61,51,9,https://github.com/eltang,"Revert ""The UHK now only sends out data when it changes""",1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/129,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/129,Reverts #120,Reverts #120,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,130,2018-06-27T01:44:13Z,2018-06-27T12:13:06Z,2018-07-01T14:44:40Z,MERGED,True,6,6,3,https://github.com/eltang,Fix key chattering,3,[],https://github.com/UltimateHackingKeyboard/firmware/pull/130,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/130,This resolves #128.,This resolves #128.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,131,2018-06-27T02:01:35Z,2018-06-27T21:02:10Z,2018-06-27T21:28:24Z,MERGED,True,313,116,16,https://github.com/eltang,Implement the macro engine,19,[],https://github.com/UltimateHackingKeyboard/firmware/pull/131,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/131,This resolves #56 (finally).,This resolves #56 (finally).,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,135,2018-06-30T22:32:35Z,2018-06-30T22:43:07Z,2018-06-30T22:43:32Z,MERGED,True,11,25,1,https://github.com/Lauszus,Remove Eclipse build from the Travis job and cache the gcc archives,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/135,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/135,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,143,2018-07-21T19:34:57Z,2018-07-22T14:04:56Z,2018-07-22T14:08:12Z,MERGED,True,177,84,12,https://github.com/eltang,Expose variables via USB,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/143,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/143,This closes #142.,This closes #142.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,144,2018-07-22T22:45:36Z,2018-07-26T20:47:41Z,2018-07-26T20:47:45Z,MERGED,True,28,25,3,https://github.com/eltang,Make some improvements to the sleep/wake code,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/144,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/144,"This was originally an attempt to fix some issues with waking up a certain computer. It turned out that the problem was on the computer side, but this is still an improvement which increases compliance with the USB spec.","This was originally an attempt to fix some issues with waking up a certain computer. It turned out that the problem was on the computer side, but this is still an improvement which increases compliance with the USB spec.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,144,2018-07-22T22:45:36Z,2018-07-26T20:47:41Z,2018-07-26T20:47:45Z,MERGED,True,28,25,3,https://github.com/eltang,Make some improvements to the sleep/wake code,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/144,https://github.com/Lauszus,2,https://github.com/UltimateHackingKeyboard/firmware/pull/144#issuecomment-408013226,"This was originally an attempt to fix some issues with waking up a certain computer. It turned out that the problem was on the computer side, but this is still an improvement which increases compliance with the USB spec.",Looks good to me :),True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,149,2018-08-02T00:56:21Z,2018-08-02T01:41:26Z,2018-08-02T01:52:31Z,MERGED,True,21,10,1,https://github.com/eltang,Fix various secondary role bugs,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/149,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/149,"This closes #145, closes #125, closes #119, closes #117, and closes #69.","This closes #145, closes #125, closes #119, closes #117, and closes #69.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,153,2018-08-13T19:08:29Z,2018-08-13T19:42:47Z,2018-08-13T19:52:54Z,MERGED,True,4,13,1,https://github.com/eltang,Don't wake the host if a key is held down through the beginning of sleep,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/153,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/153,This closes #141.,This closes #141.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,154,2018-08-13T19:32:01Z,2018-08-13T21:03:49Z,2018-08-13T22:16:59Z,MERGED,True,6,8,1,https://github.com/eltang,Ensure that secondary roles are triggered consistently,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/154,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/154,This closes #152.,This closes #152.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,159,2018-08-19T02:53:52Z,2018-08-19T03:00:11Z,2018-08-19T03:04:34Z,MERGED,True,6,2,3,https://github.com/eltang,Suppress pressed keys when the layer or keymap changes,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/159,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/159,This closes #157.,This closes #157.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,163,2018-08-26T16:47:33Z,2018-08-26T18:47:11Z,2018-08-26T18:47:15Z,MERGED,True,4,4,1,https://github.com/eltang,Only allow layer switcher keys to deactivate toggled layers,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/163,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/163,This closes #162.,This closes #162.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,168,2018-09-02T05:03:34Z,2018-09-03T06:38:09Z,2018-10-06T19:06:55Z,MERGED,True,1,0,1,https://github.com/eltang,Send primary role modifiers consistently,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/168,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/168,This closes #165.,This closes #165.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,168,2018-09-02T05:03:34Z,2018-09-03T06:38:09Z,2018-10-06T19:06:55Z,MERGED,True,1,0,1,https://github.com/eltang,Send primary role modifiers consistently,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/168,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/168#issuecomment-417985388,This closes #165.,"This doesn't work well. Let's say that on the base layer I pick a key and set Alt+Tab as the primary role, and Alt as the secondary role. Then I tap the key. Alt+Tab triggers, but Alt stays held which shouldn't happen.
Please test your fixes in the future. Not testing them causes extra communication overhead and delays.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,168,2018-09-02T05:03:34Z,2018-09-03T06:38:09Z,2018-10-06T19:06:55Z,MERGED,True,1,0,1,https://github.com/eltang,Send primary role modifiers consistently,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/168,https://github.com/eltang,3,https://github.com/UltimateHackingKeyboard/firmware/pull/168#issuecomment-417989902,This closes #165.,I did test this fix. The behavior you described is the one that was chosen for fixing #125. This fix doesn't change it.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,168,2018-09-02T05:03:34Z,2018-09-03T06:38:09Z,2018-10-06T19:06:55Z,MERGED,True,1,0,1,https://github.com/eltang,Send primary role modifiers consistently,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/168,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/168#issuecomment-418000863,This closes #165.,"I understand your reasoning, but the current behavior is clearly wrong from a usability standpoint. To make a simpler example, let's say I bind Alt+Tab to a key on the base layer. (No secondary roles are involved.) Then I tap the key, and Alt gets stuck.
I think the modifiers of a shortcut key should stick only as long as as the current layer switcher key is being held. On the base layer, no layer switcher key is held, so the modifiers of shortcuts should not stick.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,168,2018-09-02T05:03:34Z,2018-09-03T06:38:09Z,2018-10-06T19:06:55Z,MERGED,True,1,0,1,https://github.com/eltang,Send primary role modifiers consistently,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/168,https://github.com/eltang,5,https://github.com/UltimateHackingKeyboard/firmware/pull/168#issuecomment-418014492,This closes #165.,"The purpose of this PR is to ensure that a key's primary role functions the same way regardless of whether that key has a secondary role. I get that you have concerns about the behavior of sticky modifiers, but this PR doesn't touch it at all. That can be dealt with separately after this PR is merged.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,175,2018-09-19T04:14:56Z,2018-09-19T12:22:02Z,2018-09-19T12:22:09Z,MERGED,True,1,1,1,https://github.com/eltang,Use the correct scancode so that commas are outputted,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/175,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/175,Closes #174.,Closes #174.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,186,2018-10-06T15:03:47Z,2018-10-06T18:56:07Z,2018-10-06T19:06:53Z,MERGED,True,4,12,3,https://github.com/eltang,Extend the behavior of keys upon layer changes to keymap changes,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/186,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/186,This closes #167.,This closes #167.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,1,https://github.com/UltimateHackingKeyboard/firmware/pull/193,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/luteijn,2,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431743006,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Nice, at least one other person is interested in this, me. I've got most of my modifiers as secondary keys and especially shift (on space) tends to get hit when typing on the fast side, causing a spaceToBeEatenAnd things to be writtenInUnintendedCamelCase...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431746988,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","I am also interested in this. I find the idea of using home row keys as modifiers quite interesting since it solves multiple ergonomy problems I've been struggling with. However, I am skeptical about predictability of behaviour of such delay mechanism too...
Could you upload a firmware release package for testing please? (Run /firmware/scripts/make-release.js package via node, then upload the uhk-firmware...tar.bz2 from the same directory.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,4,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431764433,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","The firmware is attached (I've had to wrap the .bz2 archive into a zip, cause of gh's attachement mime-type filters).
Feel free to try it out! Currently the sec role timeout is hardcoded to 150ms, which seems to go nicely with my typing habbits. When i have time/ if needed I can upload the variations with 100/200ms timeouts.
All the feedback will be much appreciated.
p.s. also in order to run the make-release script, I've had to install typescript and ts-node modules globally by hand (dunno if it is okay with the npm infra or maybe should be handed by the module.json).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,5,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431778080,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","UPD: the attachment has been re-uploaded (the first one was an accidental snapshot of master).
uhk-firmware-8.5.3-issue-187.tar.bz2.zip",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/kareltucek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431789149,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Ok, I've got first bug for you.
Consider the following UserConfig file
UserConfiguration.json.txt
Press and hold 's' on the (default) ""MA"" map ;-). I expect it to send 's', instead, cursor moves.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,7,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431805640,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","could you pls re-upload the config file, seems like smth went wrong with the current link.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,8,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431823252,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","ok, github seems to be back to life and I can see the config - indeed, there's a bug, the 's' shouldn't execute the mouse-layer functions while held as a switch (that should be fairly easy to fix though I am afraid there might be other glitches like this - the state management in C language doesn't seem like an easy thing to do =)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,9,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431824872,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","I quickly patched the algorithm, testing it now, the glitch seems to have gone (trying to see if any side-effect is introduced, oh wonderful world w/out unit tests =))
uhk-firmware-8.5.3-issue-187-2.tar.bz2.zip",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,10,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431831016,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Here's another iteration - I played with timeouts a bit more: reduced the ""typing"" timeout to just 120ms, but increased the press/release sec role timeout to 300ms, so that if only the sec-role key was held for some time without any interference - it'll emit the first role within 300ms.
uhk-firmware-8.5.3-issue-187-3.tar.bz2.zip",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/kareltucek,11,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431836972,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Github has been having problems since yesterday (see https://twitter.com/githubstatus )... I had to wait for ~ an hour before being able to download your firmware uploads.
Anyway, I've been playing with the uhk-firmware-8.5.3-issue-187.tar.bz2.zip version and I've noticed that now the primary action often kicks in when not desired/anticipated - exactly in those case where I don't wait for the delay. I have built muscle memory for many keys like arrow keys, backspace/del, enter, esc via case buttons. I don't want to have to slow down in these cases.
My conclusion is that implementing this via setting simple timeout on activation is not very fortunate.
Thinking a bit more about this, I think a solution might be to resolve this depending on release of the secondary role button. Pseudo code would look like this:
time secondaryRoleActivated;
bool secondaryRoleInTimeoutPhase;
bool secondaryRoleActive;

onKeyPress(key) {
  if(key has secondary role)
  {
    secondaryRoleInTimeoutPhase = true;
    secondaryRoleActivated = now();

    sleep for timeout or until released;
    if (still active)
    {
      secondaryRoleInTimeoutPhase = false;
      secondaryRoleActive = true;
    }
    else
    {
      produce primary action
    }
  }
  else{
    if (secondaryRoleInTimeoutPhase)
    {
      sleep for secondaryRoleActivated + timeout - now();
    }
    activate the action according to currently active secondary roles, etc.
  }
}

onKeyRelease() {
  deactivate secondary role
}

Another way - more reliable, but also more intrusive way would be to state that secondary role release has to happen after action key release in order to activate secondary role.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,12,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431842620,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Can you try the uhk-firmware-8.5.3-issue-187-3.tar.bz2? cause I've been experimenting with the timeouts a little bit there - might improve your experience, since I reduced the sec-role activation timeout significantly.
As for your suggestion - the algo I implemented kinda works in a similar way (need to think a bit more for the differences). Also, I'll maybe provide the schematic outline of my logic (not get confused myself =)).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,13,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431845337,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Here's btw another build with  a very short timeout that surprisingly doesn't still interfere with my typing that much (my speed is fairly moderate 45-50 wpm), and triggers the sec role super fast - just in 100ms.
uhk-firmware-8.5.3-issue-187-100ms-timeout.tar.bz2.zip",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/kareltucek,14,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431848144,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","At version 3: Yes, the problem still persists. I think that I actually make longer delays between writting key presses than between mod+action key presses. Since your algorithm seems to rely on delay between keyDowns of the two keys, I think that simply lowering timeouts won't make the issue go away.
I.e., I expect this feature to work (i.e., activate the secondary role+action) in the following scenario:

almost simultaneous press on secondary-role-key and then action key
immediate release of the action key
possibly long pause
release of the role key

I cannot download the newest firmware atm, will get back to it later...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,15,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431850327,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","yeah, my pattern is a bit different - I always press the switcher slightly before the action key is down, giving it some time (got used since Karabiner and later Hammerspoon times, both of which required such behavior).
What I can try to do is to handle the case when the keys are pressed really together - that is a pattern different from typing (where there's usually a detectable delay between key presses).

Since your algorithm seems to rely on delay between keyDowns of the two keys

true, it works that way, but I believe it has to in order to send the char in case I am typing.
One possible way out is to try to decide what to do with the action key once it is released: if the sec role key is also released by then - emit chars, if sec-role key is still held - emit the modded action",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/kareltucek,16,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431853125,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","What I can try to do is to handle the case when the keys are pressed really together - that is a pattern different from typing (where there's usually a detectable delay between key presses).

I think that you cannot rely on any pattern which consists purely of keyDowns. I think that in order to introduce the functionality in a way which will not interfere with other user's expectations (or at least mine), you need to take into account the releases too somehow.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,17,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431853833,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Yeah, added similar thought to my previous comment

One possible way out is to try to decide what to do with the action key once it is released: if the sec role key is also released by then - emit chars, if sec-role key is still held - emit the modded action",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/kareltucek,18,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431853915,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","but I believe it has to in order to send the char in case I am typing.

I don't think so. In case of typing, you can still afford to postpone keypresses as long as you keep them in correct order. Of course, postponing actions may ba annoying for gamers.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,19,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431854967,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","yeah, since I anyway introduced the buffers to track the states of currently active keys, I'll just have to turn the action key buffer into a global one (like the one for the sec-role keys) and then sprinkle in a little bit more fuzzy logic in the blend.
Thanks for the suggestions, Karel, pls stay tuned for the updates.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/kareltucek,20,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-431855483,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Sure, I will!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,21,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-433084685,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","@kareltucek here's the first draft of the re-implemented algorithm (indeed I like it better than my previous version):

the secondary role keys are tracked and triggered if any primary role key is released while they're held.
primary role keys are either triggered immediately (no pending secondary roles are there currently) or blocked until release, in which case if the sec role is still held - it is applied, or the first role is emmited.
finally, if one holds the sec role for a little bit without no action - it triggers the activation automatically.

This way the secondary role can indeed kick in pretty much immediately.
The algorithm looks much cleaner than before (imo), but I didn't have much time to test it (typing with it being on tho and it looks okay most of the time, though I see some room for improvement still).
uhk-firmware-8.5.3-fuzzy-issue-187-4.tar.bz2.zip",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/kareltucek,22,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-433095837,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","Hm... interferes a lot with my writing now.
Writing ""test"" repeatedly with secondary role on 's' mapping to a layer with capital letters bound (appx. 50-70 wpm writer here, probably faster on these simple words):
teest tetest teest teEt teest teest teest teETt
teETt teET teETT test teET teETTE teest tetest teETt teset teest tetEt teETt teest teest teEt 
teest teETt teET tetest teEt teETt teEt teest teET tetEt

Also, I get quite a lot of key chatter (unwanted double characters) even on keys without aaaany secondary role.
UserConfiguration.json.txt (cycle to M2T via Mouse + '+', then write... Also, while cycling via the shortcut,  you will notice a bug regarding keymap switching and role activation.)
Also, I have noticed that now activation of secondary roles suffers a short lag... I didn't realize this consequence in my proposal...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,23,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-433097815,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","yeah, this unwanted chatter seems to be caused by the debouncing logic interfering with the algorithm (probably), I'll try to eliminate that when I have a chance.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/mondalaci,24,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-433669075,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","@p4elkin Thank you for your contribution, and sorry for the late follow-up!
UltimateHackingKeyboard/agent#792 is planned to be implemented both in Agent and in the firmware, but #187 is currently not planned. Also, the amount of change in your commit seems to be much more than necessary which is probably due to the algorithm you implemented, I assume.
Given the above, I'll probably end up closing this PR eventually. I know that you deeply care about this feature, and I don't want to be seen as ungrateful, but I wanted to make this clear.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,25,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-433822059,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","@mondalaci thanks for clarification - no worries whatsoever! For me the ability to be able to sneak peek and dabble with the source is one of the biggest perks of UHK actually, the code base is super understandable and a great start for those who hardly worked with embedded stuff before.
I can carry on working on this in my fork (cause indeed the algorithm got quite forked anyway) and maybe post the incremental improvements in the #187/#792 discussion. If @kareltucek and @luteijn are still interested - they can follow it there.
btw, @kareltucek I'm attaching the latest state of the firmware, which is supposedly a lot less chatty (found some reasons for that in my impl). Still seeing some chattiness occasionally though, but a lot less than before. I've split the implementation into three parts (corresponding to three possible states of the keyboard) and that helped quite a bit to debug and to understand what is going on.
Also it handles the deferring of the key events and ordering better - in theory it should never mix the chars when sending them. The work is stilll ongoing though: the biggest current problem i have is that sometimes (quite rarely for me, but still) the 'hold modifier and wait' state falls into 'just type the all the stuff' state, causing e.g. 'ssssssss' to be typed. I am yet to figure out that.
uhk-firmware-8.5.3-issue-187-5-not-so-chatty.tar.bz2.zip
UPD: after testing this for a day at work - I see quite some chattiness at random moments and I probably know how to fix that (try to stay away from trying to extend the 'pressed' state programmatically, since it backfires occasionally).
that being said - feel free to close this onef",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/mondalaci,26,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-433870824,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","@p4elkin Sure, feel free to comment to the relevant issues from the point I close this PR.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/kareltucek,27,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-434324258,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","@p4elkin yep, I won't miss any followups at either location. I am still interested in this if you are confident that you can make it work well (i.e., without having users relearn their customs in non-intuitive manner). On the other hand, I am not going to go too far out of my way in order to have this feature (e.g., if it turns out that it is not possible to do in a non-buggy fashion, if your branch is not merged into official master and if it can't keep up with official upstream...).
It seems I can't unzip the last version 5, but if it doesn't work well for you, I will rather wait for the next followup.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,193,2018-10-21T20:49:37Z,2018-11-01T13:39:23Z,2018-12-22T15:26:53Z,CLOSED,False,355,135,4,https://github.com/p4elkin,re-implement secondary role support with timeout-based algorithm,23,[],https://github.com/UltimateHackingKeyboard/firmware/pull/193,https://github.com/p4elkin,28,https://github.com/UltimateHackingKeyboard/firmware/pull/193#issuecomment-435045955,"Disclaimer: the following is an attempt to experiment with the firmware and improve the behaviour of the secondary key role functionallity. This is a follow-up of the discussion started in #187.
The changeset below re-works the mechanics of the secondary role function to the timeout-based solution. I am aware that the maintainers are quite sceptical of such an approach, but I'd still like to offer it as a food for thought because it could have a couple of advantages over the existing solution.
1 - it does not interfere with typing (at least at lot less). E.g. when 's' has a second role, quickly typing 'st' will yield 'st': typing single-role key 't' breaks the timeout of 's' and forces its first role to be triggered before 't' is typed. Current firmware's experience on the other hand is quite unpredictable sometimes (yields just 't' sometimes or secondary role of 's' activates.
2 - secondary role keys are handled independently from each other. Here's an example:
I have a secondary role for 'a' key (mouse layer), and CMD modifier assigned as a secondary role for one of the keys on the frame. When I hold the frame key (CMD on) and merely tap 'a' I expect CMD+A emitted (select all). Current firmware however completely ignores 'a'-tap since the secondary role is already flagged by the algorithm and 'a' is discarded.
The proposed solution tracks both keys sepately and 'a' will be sent - timeout didn't elapse.
3 -  LED indicators light up more or less instantly (currently - they won't light up while the layer key is held, you need to 'activate' it with another key tap).
Of course timeout has its own drawback: one has to hold the modifier a little bit for it to kick in, but I think this is quite essential to the user because when you trigger a shortcut you are intuitively ready to ""slow-down"" a bit compared to normal typing flow.
The PR is of course not ready to be merged and is very WIP. I am submitting it mostly as a food for thought and would love to discuss it if it is of any interest. In the worst case - feel free to decline it, I would still be the happy user of the patch since it makes my personal UHK experience finally quite perfect =)
commit details:

introduce structure for currently pressed key info
merely collect the currently pressed keys during matrix traversal,
push single-role keys in a local array, keep track of the dual-role keys
in a global array (they last over time)
activate secondary role only after timeout (hardcoded value of 150m)
prevent activation of a secondary role on early key release or
single-role key tap before timeout (typing detection). Conditionally
emit primary role in some cases

Sticky modifier logic might be affected by this (though things seem to work fine so far), also generally the code is quite drafty and should be refactored more for better resource-efficiency and read-ability.","@kareltucek fair enough, thanks again for helping and for feedback. In the meantime - I've found some time to fiddle with the algorithm this week and have created a tentative pre-release version (rebased on current canonical master). The link's here: #187 . I suggest to move the duscussion to the issue thread.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,200,2018-11-18T11:42:24Z,2018-11-18T13:44:47Z,2020-01-17T18:56:50Z,MERGED,True,7,0,1,https://github.com/kareltucek,Feature firmware forks in readme,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/200,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/200,"So, here we go. Is it ok this way? :-)","So, here we go. Is it ok this way? :-)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,200,2018-11-18T11:42:24Z,2018-11-18T13:44:47Z,2020-01-17T18:56:50Z,MERGED,True,7,0,1,https://github.com/kareltucek,Feature firmware forks in readme,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/200,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/200#issuecomment-439693871,"So, here we go. Is it ok this way? :-)",Looks great! Thanks! :),True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,200,2018-11-18T11:42:24Z,2018-11-18T13:44:47Z,2020-01-17T18:56:50Z,MERGED,True,7,0,1,https://github.com/kareltucek,Feature firmware forks in readme,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/200,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/200#issuecomment-439695079,"So, here we go. Is it ok this way? :-)",Thanks goes to you! ;-),True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,203,2018-12-26T00:15:52Z,2018-12-26T02:42:48Z,2018-12-26T02:42:56Z,MERGED,True,87,64,4,https://github.com/eltang,Adjust the behavior of sticky modifiers,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/203,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/203,"This closes #169 and makes sticky modifiers play nice with secondary role keys. This also removes key suppression, which no longer serves a purpose.","This closes #169 and makes sticky modifiers play nice with secondary role keys. This also removes key suppression, which no longer serves a purpose.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,210,2019-03-06T07:20:10Z,2019-03-06T09:33:51Z,2019-03-06T10:35:12Z,MERGED,True,3,1,2,https://github.com/p4elkin,add https://github.com/p4elkin/firmware to the list of featured forks,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/210,https://github.com/p4elkin,1,https://github.com/UltimateHackingKeyboard/firmware/pull/210,this changeset proposes to add https://github.com/p4elkin/firmware to the list of the custom firmware forks.,this changeset proposes to add https://github.com/p4elkin/firmware to the list of the custom firmware forks.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,210,2019-03-06T07:20:10Z,2019-03-06T09:33:51Z,2019-03-06T10:35:12Z,MERGED,True,3,1,2,https://github.com/p4elkin,add https://github.com/p4elkin/firmware to the list of featured forks,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/210,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/210#issuecomment-470036296,this changeset proposes to add https://github.com/p4elkin/firmware to the list of the custom firmware forks.,Thank you!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,215,2019-03-31T19:37:19Z,2019-04-01T00:19:46Z,2020-05-02T20:19:57Z,MERGED,True,3,3,1,https://github.com/kareltucek,fix wrong type,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/215,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/215,...,...,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,215,2019-03-31T19:37:19Z,2019-04-01T00:19:46Z,2020-05-02T20:19:57Z,MERGED,True,3,3,1,https://github.com/kareltucek,fix wrong type,2,[],https://github.com/UltimateHackingKeyboard/firmware/pull/215,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/215#issuecomment-478399584,...,Great catches! Thanks!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,217,2019-04-01T10:55:56Z,2019-04-01T11:14:51Z,2020-05-02T20:21:37Z,MERGED,True,3,0,1,https://github.com/kareltucek,Fix play of empty macro,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/217,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/217,fixes #216,fixes #216,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,217,2019-04-01T10:55:56Z,2019-04-01T11:14:51Z,2020-05-02T20:21:37Z,MERGED,True,3,0,1,https://github.com/kareltucek,Fix play of empty macro,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/217,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/217#issuecomment-478537791,fixes #216,Thanks so much!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,223,2019-06-07T19:49:34Z,2019-06-07T19:49:51Z,2019-06-07T19:49:54Z,MERGED,True,1,0,1,https://github.com/mondalaci,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/223,https://github.com/mondalaci,1,https://github.com/UltimateHackingKeyboard/firmware/pull/223,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,224,2019-06-08T15:51:18Z,2019-06-08T18:45:43Z,2020-05-02T20:21:34Z,MERGED,True,1,0,1,https://github.com/kareltucek,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/224,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/224,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,225,2019-06-09T11:00:32Z,2019-06-09T18:27:30Z,2019-06-09T18:27:30Z,MERGED,True,1,0,1,https://github.com/RobertCsordas,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/225,https://github.com/RobertCsordas,1,https://github.com/UltimateHackingKeyboard/firmware/pull/225,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,226,2019-06-24T15:58:43Z,2019-06-24T17:29:02Z,2019-06-24T17:29:02Z,MERGED,True,1,0,1,https://github.com/santiagogf89,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/226,https://github.com/santiagogf89,1,https://github.com/UltimateHackingKeyboard/firmware/pull/226,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,232,2019-07-01T17:39:03Z,2019-07-02T00:44:00Z,2019-07-02T00:44:00Z,MERGED,True,1,0,1,https://github.com/Lauszus,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/232,https://github.com/Lauszus,1,https://github.com/UltimateHackingKeyboard/firmware/pull/232,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,236,2019-07-21T20:59:43Z,2019-07-21T21:08:13Z,2019-07-21T21:23:12Z,MERGED,True,1,0,1,https://github.com/eltang,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/236,https://github.com/eltang,1,https://github.com/UltimateHackingKeyboard/firmware/pull/236,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,238,2019-08-09T06:51:44Z,2019-08-09T10:55:07Z,2019-08-09T12:03:20Z,MERGED,True,2,0,1,https://github.com/stephengroat,stephengroat sign cla,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/238,https://github.com/stephengroat,1,https://github.com/UltimateHackingKeyboard/firmware/pull/238,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,238,2019-08-09T06:51:44Z,2019-08-09T10:55:07Z,2019-08-09T12:03:20Z,MERGED,True,2,0,1,https://github.com/stephengroat,stephengroat sign cla,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/238,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/238#issuecomment-519875818,,Thanks so much!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,239,2019-08-23T17:22:32Z,2019-08-23T17:31:16Z,2019-08-23T17:31:19Z,MERGED,True,5,5,1,https://github.com/ert78gb,chore: refactor the make-release.js file,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/239,https://github.com/ert78gb,1,https://github.com/UltimateHackingKeyboard/firmware/pull/239,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,239,2019-08-23T17:22:32Z,2019-08-23T17:31:16Z,2019-08-23T17:31:19Z,MERGED,True,5,5,1,https://github.com/ert78gb,chore: refactor the make-release.js file,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/239,https://github.com/apps/cla-sign-bot,2,https://github.com/UltimateHackingKeyboard/firmware/pull/239#issuecomment-524395891,,"Thank you for your contribution!
Please sign the CLA.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,240,2019-08-23T17:25:10Z,2019-08-23T17:29:30Z,2019-08-23T17:29:34Z,MERGED,True,1,1,1,https://github.com/ert78gb,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/240,https://github.com/ert78gb,1,https://github.com/UltimateHackingKeyboard/firmware/pull/240,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,247,2019-11-19T10:21:58Z,2019-12-02T22:30:11Z,2020-05-02T20:21:32Z,MERGED,True,31,14,3,https://github.com/kareltucek,Fix debouncer related data races,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/247,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/247,"Fixes #245
Please, give it some testing - there is some chance that I have overlooked some interference with secondary roles and with debouncing. I've done basic test of secondary roles and basic debouncer test with 500ms timeout.","Fixes #245
Please, give it some testing - there is some chance that I have overlooked some interference with secondary roles and with debouncing. I've done basic test of secondary roles and basic debouncer test with 500ms timeout.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,247,2019-11-19T10:21:58Z,2019-12-02T22:30:11Z,2020-05-02T20:21:32Z,MERGED,True,31,14,3,https://github.com/kareltucek,Fix debouncer related data races,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/247,https://github.com/p4elkin,2,https://github.com/UltimateHackingKeyboard/firmware/pull/247#issuecomment-555588288,"Fixes #245
Please, give it some testing - there is some chance that I have overlooked some interference with secondary roles and with debouncing. I've done basic test of secondary roles and basic debouncer test with 500ms timeout.",lgtm 👍,True,{'HOORAY': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,247,2019-11-19T10:21:58Z,2019-12-02T22:30:11Z,2020-05-02T20:21:32Z,MERGED,True,31,14,3,https://github.com/kareltucek,Fix debouncer related data races,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/247,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/247#issuecomment-560762738,"Fixes #245
Please, give it some testing - there is some chance that I have overlooked some interference with secondary roles and with debouncing. I've done basic test of secondary roles and basic debouncer test with 500ms timeout.",Thank you so much!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,248,2019-11-19T11:05:20Z,2019-12-02T19:44:15Z,2020-05-02T20:21:27Z,CLOSED,False,23,4,2,https://github.com/kareltucek,- Fix two bugs of secondary roles,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/248,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/248,Fixes both bugs mentioned in #246,Fixes both bugs mentioned in #246,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,248,2019-11-19T11:05:20Z,2019-12-02T19:44:15Z,2020-05-02T20:21:27Z,CLOSED,False,23,4,2,https://github.com/kareltucek,- Fix two bugs of secondary roles,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/248,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/248#issuecomment-560550841,Fixes both bugs mentioned in #246,Simple fix implemented in b6511bb,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,249,2019-12-23T12:36:33Z,2019-12-24T21:36:29Z,2020-05-02T20:21:38Z,MERGED,True,2,2,1,https://github.com/kareltucek,Fix first tick of scroll timer,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/249,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/249,"Should solve #209.
Conditions at 130 && 150 apparently handle the first update cycle tick of scroll event. Clauses at 130 & 151 defaulted to 0, due to zeroing at 108. (Distance is always zero in the first tick since elapsed time is also zero.) I believe that copysignf(1.0, kineticState->ySum) was unreachable.","Should solve #209.
Conditions at 130 && 150 apparently handle the first update cycle tick of scroll event. Clauses at 130 & 151 defaulted to 0, due to zeroing at 108. (Distance is always zero in the first tick since elapsed time is also zero.) I believe that copysignf(1.0, kineticState->ySum) was unreachable.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,249,2019-12-23T12:36:33Z,2019-12-24T21:36:29Z,2020-05-02T20:21:38Z,MERGED,True,2,2,1,https://github.com/kareltucek,Fix first tick of scroll timer,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/249,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/249#issuecomment-568804554,"Should solve #209.
Conditions at 130 && 150 apparently handle the first update cycle tick of scroll event. Clauses at 130 & 151 defaulted to 0, due to zeroing at 108. (Distance is always zero in the first tick since elapsed time is also zero.) I believe that copysignf(1.0, kineticState->ySum) was unreachable.","@kareltucek Excellent job! Please use a close keyword in upcoming PRs, so that the relevant issues will be automatically closed upon merging them.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,250,2019-12-23T12:39:47Z,2019-12-26T13:05:56Z,2020-05-02T20:21:40Z,MERGED,True,19,10,2,https://github.com/kareltucek,Refactor keyState queries to be more descriptive,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/250,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/250,"Should increase readability of the code, since this way it should always be clear when the condition is actually met.","Should increase readability of the code, since this way it should always be clear when the condition is actually met.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,250,2019-12-23T12:39:47Z,2019-12-26T13:05:56Z,2020-05-02T20:21:40Z,MERGED,True,19,10,2,https://github.com/kareltucek,Refactor keyState queries to be more descriptive,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/250,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/250#issuecomment-568713183,"Should increase readability of the code, since this way it should always be clear when the condition is actually met.","I like your macros, and I think they're an improvement when it comes to readability. They should be prefixed with KEYSTATE_ however, because general names like ACTIVE can easily lead to name collisions in the future when including other files.
I've been actually considering to change the coding style of macros as all caps like KEYSTATE_ACTIVE() is rather hard to read and KeyState_Active() would be easier on the eyes. Unless you have objections, let's use the new style from this point forward. We'd change the rest of the macros later according to the new style.
I'm slightly worried that the extra conditions introduced by these macros will make the code slightly slower. Chances are the GCC optimizations currently used for the release version will make this a non-issue, but it'd give me a peace of mind if you could check this.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,250,2019-12-23T12:39:47Z,2019-12-26T13:05:56Z,2020-05-02T20:21:40Z,MERGED,True,19,10,2,https://github.com/kareltucek,Refactor keyState queries to be more descriptive,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/250,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/250#issuecomment-569016383,"Should increase readability of the code, since this way it should always be clear when the condition is actually met.","They should be prefixed with KEYSTATE_

Sure.

I've been actually considering to change the coding style of macros as all caps [...]

Well, there are many good reasons to want to know that a macro is a macro when you see it, and therefore I would rather not violate the convention...
One more option (maybe cleaner one) is to use inline functions in this case rather than macros? (Here I am slightly worried if the inlining will work just as well as macros regarding performace, but theoretically it should.)

I'm slightly worried that the extra conditions introduced by these macros will make the code slightly slower.

I don't think this is a problem - even if there are some additional instructions, they are cheap instructions inlined with other code in easy-to-optimize manner.
The only condition which is at top call-level and is not same as before is the one at 441. Admittedly, the generated asm is different, even though I believe that compiler could legaly optimize it out. However, the line is secondary-role related, which means that it will probably be removed soon anyway.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,250,2019-12-23T12:39:47Z,2019-12-26T13:05:56Z,2020-05-02T20:21:40Z,MERGED,True,19,10,2,https://github.com/kareltucek,Refactor keyState queries to be more descriptive,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/250,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/250#issuecomment-569032229,"Should increase readability of the code, since this way it should always be clear when the condition is actually met.","Well, I see I've made a mistake on 324, which means that the line also contains one additional check.
Still this is marginal. If you feel performance of these parts of those code to be an issue, please create a new ticket, and I will look at how to optimize the control flow once the open problems are solved. I am sure much more can be saved there, but no point in optimizing it before needed changes are finished.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,250,2019-12-23T12:39:47Z,2019-12-26T13:05:56Z,2020-05-02T20:21:40Z,MERGED,True,19,10,2,https://github.com/kareltucek,Refactor keyState queries to be more descriptive,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/250,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/250#issuecomment-569047670,"Should increase readability of the code, since this way it should always be clear when the condition is actually met.","I've been thinking about using inline functions, too. By doing so, looks like we could avoid various issues down the road. Please check whether inline functions actually get inlined for the release build. If so, let's use them instead of macros.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,250,2019-12-23T12:39:47Z,2019-12-26T13:05:56Z,2020-05-02T20:21:40Z,MERGED,True,19,10,2,https://github.com/kareltucek,Refactor keyState queries to be more descriptive,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/250,https://github.com/kareltucek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/250#issuecomment-569052895,"Should increase readability of the code, since this way it should always be clear when the condition is actually met.","They seem to be inlined allright.
So I think that this is prepared for merge. I've made a lot of mess here with commits, so I recommend to merge it as a ""squash""...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,251,2019-12-26T11:56:19Z,2020-01-01T19:55:28Z,2020-05-02T20:20:59Z,MERGED,True,51,10,1,https://github.com/kareltucek,Refactor of sticky keys.,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/251,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/251,"Did this accidentally while digging into sticky mod related tickets. Feel free to discard.
It:

adds a few explanatory comments
moves the logic behind stickies to one reserved place so that it is not entangled with other logic more than necessary
adds machinery to easily match selected shortcuts

I could further add a ""strategy"" settings, which would allow to globaly specify StickinessStrategy_Never, StickinessStrategy_Always, StickinessStrategy_Smart if desired.","Did this accidentally while digging into sticky mod related tickets. Feel free to discard.
It:

adds a few explanatory comments
moves the logic behind stickies to one reserved place so that it is not entangled with other logic more than necessary
adds machinery to easily match selected shortcuts

I could further add a ""strategy"" settings, which would allow to globaly specify StickinessStrategy_Never, StickinessStrategy_Always, StickinessStrategy_Smart if desired.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,251,2019-12-26T11:56:19Z,2020-01-01T19:55:28Z,2020-05-02T20:20:59Z,MERGED,True,51,10,1,https://github.com/kareltucek,Refactor of sticky keys.,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/251,https://github.com/kareltucek,2,https://github.com/UltimateHackingKeyboard/firmware/pull/251#issuecomment-570065468,"Did this accidentally while digging into sticky mod related tickets. Feel free to discard.
It:

adds a few explanatory comments
moves the logic behind stickies to one reserved place so that it is not entangled with other logic more than necessary
adds machinery to easily match selected shortcuts

I could further add a ""strategy"" settings, which would allow to globaly specify StickinessStrategy_Never, StickinessStrategy_Always, StickinessStrategy_Smart if desired.","Please make sure to follow the coding standards in light of the recently spotted inconsistencies.

@mondalaci  Just fixed all codestyle problems I could find.
If there are any more problems, please point them out. (In case you already did so, note that I apparently do not see it)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,251,2019-12-26T11:56:19Z,2020-01-01T19:55:28Z,2020-05-02T20:20:59Z,MERGED,True,51,10,1,https://github.com/kareltucek,Refactor of sticky keys.,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/251,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/251#issuecomment-570071633,"Did this accidentally while digging into sticky mod related tickets. Feel free to discard.
It:

adds a few explanatory comments
moves the logic behind stickies to one reserved place so that it is not entangled with other logic more than necessary
adds machinery to easily match selected shortcuts

I could further add a ""strategy"" settings, which would allow to globaly specify StickinessStrategy_Never, StickinessStrategy_Always, StickinessStrategy_Smart if desired.","@kareltucek Ah, sorry. I thought my comments were visible but they were in pending state and I had to explicitly publish them. I'll know better next time. Can you see them now?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,251,2019-12-26T11:56:19Z,2020-01-01T19:55:28Z,2020-05-02T20:20:59Z,MERGED,True,51,10,1,https://github.com/kareltucek,Refactor of sticky keys.,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/251,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/251#issuecomment-570071971,"Did this accidentally while digging into sticky mod related tickets. Feel free to discard.
It:

adds a few explanatory comments
moves the logic behind stickies to one reserved place so that it is not entangled with other logic more than necessary
adds machinery to easily match selected shortcuts

I could further add a ""strategy"" settings, which would allow to globaly specify StickinessStrategy_Never, StickinessStrategy_Always, StickinessStrategy_Smart if desired.","Ah, explains a lot :-). Yes, I can see them now.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,252,2019-12-26T11:59:55Z,2019-12-26T13:42:08Z,2019-12-26T13:42:08Z,CLOSED,False,113,45,3,https://github.com/kareltucek,Extra usb reports,15,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/252,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/252,"Closes #221.
Depends on the state refactor PR and therefore will need some minor fixes yet...","Closes #221.
Depends on the state refactor PR and therefore will need some minor fixes yet...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,252,2019-12-26T11:59:55Z,2019-12-26T13:42:08Z,2019-12-26T13:42:08Z,CLOSED,False,113,45,3,https://github.com/kareltucek,Extra usb reports,15,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/252,https://github.com/kareltucek,2,https://github.com/UltimateHackingKeyboard/firmware/pull/252#issuecomment-569060685,"Closes #221.
Depends on the state refactor PR and therefore will need some minor fixes yet...",Github refuses to update the diff-against branch/commit... Will open a new PR.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,253,2019-12-26T14:10:27Z,2020-01-04T21:33:45Z,2020-05-02T20:20:54Z,MERGED,True,100,36,2,https://github.com/kareltucek,Extra usb reports,23,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/253,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/253,Closes #221,Closes #221,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,253,2019-12-26T14:10:27Z,2020-01-04T21:33:45Z,2020-05-02T20:20:54Z,MERGED,True,100,36,2,https://github.com/kareltucek,Extra usb reports,23,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/253,https://github.com/kareltucek,2,https://github.com/UltimateHackingKeyboard/firmware/pull/253#issuecomment-570075895,Closes #221,@mondalaci I suspect that there might be some unpublished comments too?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,257,2020-01-01T18:24:05Z,2020-01-01T20:07:09Z,2020-05-02T20:21:02Z,MERGED,True,64,16,2,https://github.com/kareltucek,Fix symmetry of mouse movement behaviour,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/257,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/257,"Solves symmetry problem mentioned in #256 .
I am afraid that this adds a bit of complexity into the code, unfortunately I don't see any way around.
Basically, I am extracting ""sign"" related switches from 115 and 136 into their own functions, and adding them into the kinetic state.
Please test that up&down scrolling works as expected on Mac.","Solves symmetry problem mentioned in #256 .
I am afraid that this adds a bit of complexity into the code, unfortunately I don't see any way around.
Basically, I am extracting ""sign"" related switches from 115 and 136 into their own functions, and adding them into the kinetic state.
Please test that up&down scrolling works as expected on Mac.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,258,2020-01-01T18:27:10Z,2020-01-07T10:55:35Z,2020-05-02T20:21:12Z,CLOSED,False,7,0,1,https://github.com/kareltucek,Compensate diagonal speed of mouse pointer,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/258,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/258,"Implements speed compensation discussed in #256 .
Opening a PR so that the topic is not forgotten.","Implements speed compensation discussed in #256 .
Opening a PR so that the topic is not forgotten.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/265,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.",True,"{'HEART': ['https://github.com/asymmetric', 'https://github.com/Ofenhed', 'https://github.com/anilanar']}"
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/kareltucek,2,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-575950997,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","Btw, I gathered some performance measurements which might be of interest - or not. Feel totally free to ignore.
TL;DR Performance of this PR is good. Besides this PR, I have noticed increase in time on the keystate refactor merge (originally, I have been trying to investigate the freezing problem).
One update cycle takes on average:

on pure v8.7.0, 0.4ms/cycle
on 8.7.0 with keystate refactor via inlined functions 0.7ms/cycle (!)
on 8.7.0 with keystate refactor via macros (exactly same expressions) 0.4ms/cycle
on this PR with keystates via inlined functions 0.3ms/cycle
on his PR  with keystates via inlined functions and non-volatile keystate 0.2ms/cycle
on his PR  with keystates via macros 0.5ms/cycle

Removing volatile from keystate->next/hardwareSwitchState does not seem to have any significant effect (under 0.1ms) - sometimes time decreases but sometimes increases.
As seen above, using inlined functions vs macros yields drastically different results even if the code is ""same"", however it differs whether macros or inlined functions are faster. I assume that language semantics might slightly differ (e.g., I might expect an inlined function to act as a memory barrier), still I am quite surprised by macro version being significantly slower in some cases.
Furthermore, sending a set of USB reports (measured on usb testing mode, so sending mouse report + basic keyboard report every cycle) takes around 4ms/cycle.
If desired, I can integrate simple stopwatch into firmware (it is a short snippet, just as the one which controls the ""simulate keypress"" option). Then LED display shows time, updated once per 1000 cycles.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-600859245,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","@kareltucek I've been thinking about this PR recently, and I'm wondering if postponing is truly necessary. It makes application logic quite a bit more complex, and I don't believe it's the only way. The recursive resolution of secondary roles should be possible without it. Would you please elaborate about this?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-600881155,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","Yes and no.
If we talk on abstract level, then the secondary role is an action whose behaviour depends on something that is going to happen ""in future"". So in this sense yes it is necessary, and doing so by a general mechanism is a clean way to implement it.
The old secondary role mechanism basically does the same thing, but instead of delegating the logic and complexity into separate units, it achieves similar result by placing special branchings all over the place.
Having full-fledged postponer is not necessary for the simple resolution strategy because there only the ""secondary role"" needs to be postponed. Advanced strategies however need postponing of the primary role too so they are not possible without the general mechanism.
However, under more scrutiny, the even the simple case runs into (more and more) problems with the ""simple"" implementation - the old implementation is prone to race conditions, and is pretty much incompatible with the extra usb reports.
Basically:

I can make the secondary roles work recursively even without the postponer. But thats pretty much all I can do:
I cannot implement more advanced resolution strategies without postponer.
I cannot deal with race conditions (without adding a bunch of new states and additional complexity (right into logic of usb_report_updater)).
I cannot make the extra usb reports compatible with secondary roles (without adding more states and complexity).
I cannot simplify the code because the hooks are just placed where they are placed and cannot be moved.
The old mechanism makes the control flow hard to optimize and eats up time near the top of the calltree where the performance impact is multiplied by number of keys. The proposed mechanism will take a few more instruction in the leaves of the calltree, but only once per update cycle and only in case that the secondary role is actually bound on the activated key.

Regarding structure of the code -  I see that the odds of red and green lines are strongly against accepting the PR, because the call tree is deeper and the code is longer, but does it really seem more complex when you read the new version in a top-down manner without any diffs shown?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-600892280,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","What makes it difficult for me to accept the postponer is not only the added code, but the nature of the algorithm. In specific, cycles_until_activation gets incremented every now and then, gets decremented in every update cycle, and when it reaches zero then the events get processed, one at a time. It seems rather arbitrary, and I find it hard to wrap my head around it.
I'd much prefer a more straightforward and predictable algorithm that doesn't try to postpone processing into the future, but rather deals with it in the now based on the current and past state. You're welcome to add state whenever needed, and it's preferred to make it specific rather than general.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/kareltucek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-600911861,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","It seems rather arbitrary, and I find it hard to wrap my head around it.

It is corresponds to a three state automaton:

INACTIVE (queue is empty, everything is executed in time)
WAITING_FOR_INPUT (There is a secondary role which needs further input. In the simple case it is either its own release, or press of another key.)
REPLAYING_EVENTS (There is a periodic timer - cycles_per_activation which executes one event from the queue every second cycle, which is necessary for events to properly complete - it allows a key to go through all four states of its lifecycle.)

(In the simple strategy the queue always contains at most one keystroke (two events), unless new event manages to come earlier than the old keystroke is finished - and in that case, this strategy inherently prevents race conditions.)

one at a time

That's the whole point - doing things otherwise leads to long hours spent on hunting for race conditions.

I'd much prefer a more straightforward and predictable algorithm

That is the thing - I do not have anything which is more straightforward and more predictable at the same time.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/kareltucek,7,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-600925739,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","I will see what I can do with the old algorithm, but I am not very optimistic in terms of long term maintainability.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-600927616,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","Maybe your algorithm is the best one, and my understanding is limited. I'll try to dig into this more, but it requires deep thinking, and I'm quite overloaded nowadays. Your patience is much appreciated.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/kareltucek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-600929046,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","On the other hand I am clearly biased and not seeing its drawbacks (especially w.r.t. readability of the code, which is obviously not as good as it should be).

quite overloaded nowadays

I see, btw congratulations on progress with modules.",True,{'HEART': ['https://github.com/mondalaci']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/greneholt,10,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-603972503,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","@kareltucek do you have a build available of this branch for testing? I've tried the latest build of your version of the firmware, but it does not fix the issues I'm seeing with activating the mod layer via a secondary role while one secondary role is already active. I'd like to see if this branch does.",True,{'THUMBS_UP': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/kareltucek,11,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-603980527,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","do you have a build available of this branch for testing?

Sure. uhk-fw-8.8.1-origin_secondary_roles-v2.tar.gz
Thanks for help with testing! If you encounter any inconsistencies, please do not hesitate to report them :-).",True,{'THUMBS_UP': ['https://github.com/greneholt']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/kareltucek,12,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-603991969,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","@mondalaci I have tried to clear up things in the Refactor commit above. If anything is unclear, unreadable, I will gladly supplement more comments or refactors. I definitely think that code should be readable without headaches.
After a few days of thinking I still prefer this variant. Brief motivations:

I feel uneasy about trying to maintain the current solution, because it is complex, has bad locality in the code, is hard to extend and gives no general guarantees on event interfecence.
I do not feel strongly about writing a new minimalistic solution, because I do not have clear idea about how it should look like and how it should be different from the current one in order to actually improve the state of affairs and yet remain acceptably minimalistic for you.
This PR is a bit of an overkill, but gives strong guarantees regarding interference and chronology of events. Also, it allows me to maintain, test and improve the same code for both branches, which in the end should be a benefit for you too, because this PR simply has a built-in developer who is going to keep using the implementation on daily basis.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/greneholt,13,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-604532146,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","Thank you @kareltucek! That build works perfectly, and fixes all the issues I've had with multiple secondary roles. You have saved me from many future undo operations when I press modifiers in the wrong order :)",True,"{'THUMBS_UP': ['https://github.com/kareltucek', 'https://github.com/daenney']}"
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/mondalaci,14,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-612520732,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","@kareltucek Sorry for delaying this PR so long! I've been unsure whether this is the best solution possible, and I'm still not sure to be honest, but I can't offer a better solution.
Most importantly, your solution works, you're much more experienced with this part of the firmware than I am, and you deeply care. Keep up the great work!",True,{'HOORAY': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/mondalaci,15,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-612520989,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","@kareltucek Please close the issues which are resolved by this PR, and reference this PR in their comments.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,265,2020-01-17T10:28:21Z,2020-04-11T21:47:37Z,2020-05-02T20:20:49Z,MERGED,True,436,133,8,https://github.com/kareltucek,Rewrite of secondary roles,8,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/265,https://github.com/kareltucek,16,https://github.com/UltimateHackingKeyboard/firmware/pull/265#issuecomment-612529735,"So, rough list of changes:

added postponer
renamed keystate->next to keystate->hardwareSwitchState and added keystate->debouncedSwitchState
integrated postponer on transition between the keystate->debouncedSwitchState and keystate->current (search for ""PostponerCore"" in usb_report_updater.c)
added secondary role driver
moved keystroke code from applyAction to applyKeystroke and added one indirection to decide between primary and secondary ""keystroke"" scenario. (Integrated secondaryRoleDriver here.)
removed old secondary role hooks (updateActiveUsbReports simplified)
""inverted"" keystate handling of applyKeyAction. The switch is now carried out whenever the state is non-zero rather than if it is active. This allows key deactivation handling at the same place as the corresponding activation, rather than in a separate switch.
applied proposal from #264. Can revert any time.

Unfortunately, the last three changes have made the diffs pretty unreadable, which is why I offered postponer for separate revision yesterday.
Closes #228, #192, #254, #260.
#207 and UltimateHackingKeyboard/agent#792 will be taken care of separately.","Happy to hear that!
Sure!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,266,2020-01-17T11:22:08Z,2020-01-19T16:59:08Z,2020-05-02T20:20:38Z,MERGED,True,10,1,1,https://github.com/kareltucek,Make arrows stick their modifiers.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/266,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/266,Closes #263.,Closes #263.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,267,2020-01-17T11:41:38Z,2020-01-19T17:37:11Z,2020-05-02T20:20:41Z,MERGED,True,27,29,1,https://github.com/kareltucek,Refactor extra reports of macro text action.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/267,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/267,"I have realized that the innermost extra report branching should have never been treated as subcase of the conditions, and that it should be extracted as a separate ""subaction"".
This way, the modifier-related code does not need to be duplicated, and the thing is much easier to reason about.","I have realized that the innermost extra report branching should have never been treated as subcase of the conditions, and that it should be extracted as a separate ""subaction"".
This way, the modifier-related code does not need to be duplicated, and the thing is much easier to reason about.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,272,2020-01-24T14:24:52Z,2020-01-25T13:26:57Z,2020-05-02T20:20:42Z,MERGED,True,17,0,2,https://github.com/kareltucek,"Implement mouse buttons 4,5,6,7,8",1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/272,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/272,Closes #271.,Closes #271.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,273,2020-01-24T14:35:21Z,2020-01-25T13:17:51Z,2020-01-25T13:17:58Z,MERGED,True,1,1,1,https://github.com/kareltucek,Indicate toggled layer in UsbCommand_GetKeyboardState,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/273,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/273,Closes #268.,Closes #268.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,275,2020-01-27T20:52:48Z,2020-01-27T21:34:56Z,2020-05-02T20:20:43Z,MERGED,True,1,0,1,https://github.com/kareltucek,fix make-release script,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/275,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/275,"If the user has not ran all makes manually first, the build_make directory (which is part of ${buildDir} does not exist and therefore the cd on line 29 fails.","If the user has not ran all makes manually first, the build_make directory (which is part of ${buildDir} does not exist and therefore the cd on line 29 fails.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,277,2020-01-30T19:51:01Z,2020-01-31T09:05:25Z,2020-05-02T20:20:45Z,MERGED,True,1,1,1,https://github.com/kareltucek,Fix typo in buspal.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/277,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/277,Closes #276,Closes #276,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,277,2020-01-30T19:51:01Z,2020-01-31T09:05:25Z,2020-05-02T20:20:45Z,MERGED,True,1,1,1,https://github.com/kareltucek,Fix typo in buspal.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/277,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/277#issuecomment-580488479,Closes #276,"The firmware update is unchanged based on my tests, but what makes you think that this change doesn't affect BusPal negatively?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,277,2020-01-30T19:51:01Z,2020-01-31T09:05:25Z,2020-05-02T20:20:45Z,MERGED,True,1,1,1,https://github.com/kareltucek,Fix typo in buspal.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/277,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/277#issuecomment-580516061,Closes #276,"Not sure if you want to actually know.
In the first place, it is quite clear that the author most likely didn't mean if (kStatus_Success!=kStatus_Success). If he did, he would have written it in more direct fashion. Like if (true), or something along those lines. He most likely meant status!=kStatus_Success.
Now, if you look at the preprocessor directive, you can notice that the first branch is just a different version of the second branch. Second branch is original, the first is ""fixed"". The first branch therefore follows API signature of the second branch.
So the logic should quite clearly be:
    if (peripheral_read(rxBuf, sizeof(framing_data_packet_t)) != kStatus_Success)
    {
        status = kStatus_Fail;
    }

The ""fixed"" branch is just a more chatty way of saying the if (peripheral_read(rxBuf, sizeof(framing_data_packet_t)) != kStatus_Success)
Now this is actually written at multiple places - 182+185, then at 174+176. It is the line 174+176 which makes me quite confident that the author meant the same by 179+185. This is consistent with the original code. Also, I simply don't believe that the author meant ""If reading bus failed, then skip failed branch and perform success branch instead, but at the same time leave failed status"".
Second reason is that it looks much safer to me to simply set ""failed"" status and leave in case of failure (even at the risk is that it does affect BusPal negatively) than to leave there the variant which carries out ""success"" branch of computation in ""failed"" case.
Third reason is actually reading what it does. The only change in the flow is the line 190 (whether or not it is performed in the failed scenario). Question whether or not it has some side effects is surely relevant, but it does not seem to make sense to be obliged to ""consume"" data from the input stream if the communication has simply failed. Under more scrutiny there are two arguments:

peripheral_read at 42 does not take care of returning data into the buffer if it did not find what it was searching for. If the side effect was important, it would have to do its job with much more care.
amount of data read at 190 depends on length extracted from the framing packet. But if read of the frame packet failed, then the value is junk.

Disclaimer and a funny fact: I still have no idea what the code does. If it bothers you, feel totally free to close this.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,277,2020-01-30T19:51:01Z,2020-01-31T09:05:25Z,2020-05-02T20:20:45Z,MERGED,True,1,1,1,https://github.com/kareltucek,Fix typo in buspal.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/277,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/277#issuecomment-580518458,Closes #276,"Either way, I am very sorry for wasting your time with this entire buspal problem. It turns out to be a no-problem in either case...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,277,2020-01-30T19:51:01Z,2020-01-31T09:05:25Z,2020-05-02T20:20:45Z,MERGED,True,1,1,1,https://github.com/kareltucek,Fix typo in buspal.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/277,https://github.com/kareltucek,5,https://github.com/UltimateHackingKeyboard/firmware/pull/277#issuecomment-580519709,Closes #276,And one more detail - I looked into git history and found #44 .,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,277,2020-01-30T19:51:01Z,2020-01-31T09:05:25Z,2020-05-02T20:20:45Z,MERGED,True,1,1,1,https://github.com/kareltucek,Fix typo in buspal.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/277,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/277#issuecomment-580647892,Closes #276,"Thanks for the thorough explanation, and I deeply appreciate that you care about these issues so much!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,278,2020-02-02T12:06:58Z,2020-02-16T21:35:55Z,2020-05-02T20:20:46Z,MERGED,True,25,12,2,https://github.com/kareltucek,Prevent deadlocks and races in usb semaphores.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/278,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/278,"See code comments.
Relates to #172 and #261.","See code comments.
Relates to #172 and #261.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,278,2020-02-02T12:06:58Z,2020-02-16T21:35:55Z,2020-05-02T20:20:46Z,MERGED,True,25,12,2,https://github.com/kareltucek,Prevent deadlocks and races in usb semaphores.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/278,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/278#issuecomment-581368289,"See code comments.
Relates to #172 and #261.","Very interested whether this will fix the the issue. I assume that uhk-fw-8.7.1-fix_candidate_2.tar.gz contains this PR, and we'll be testing it for a while before I can safely merge it.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,278,2020-02-02T12:06:58Z,2020-02-16T21:35:55Z,2020-05-02T20:20:46Z,MERGED,True,25,12,2,https://github.com/kareltucek,Prevent deadlocks and races in usb semaphores.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/278,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/278#issuecomment-581540120,"See code comments.
Relates to #172 and #261.","Very interested whether this will fix the the issue.

Me too...

I assume that uhk-fw-8.7.1-fix_candidate_2.tar.gz contains this PR

Correct.

, and we'll be testing it for a while before I can safely merge it.

Testing it for a while is a reasonable course of action, but I think this should be considered mostly independently of the two freeze problems, and based on logic argumentation rather than just on testing. The variables (the InterruptPipeBusy ones) are read and written at very few places, which makes logic argumentation possible even without detailed knowledge of the rest of the usb stack. (And leads me to a belief that the PR should be safe.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,280,2020-02-26T09:24:19Z,2020-02-26T10:29:04Z,2020-02-26T10:29:08Z,MERGED,True,2,1,1,https://github.com/kareltucek,Add ctrl+tab and ctrl+arrows shortcuts into the sticky set.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/280,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/280,"I am adding ""ctrl + arrows"" too. The reason to remain as consistent and intuitive as possible. If it turns out to be a problem, we can always revert...
Closes #279.","I am adding ""ctrl + arrows"" too. The reason to remain as consistent and intuitive as possible. If it turns out to be a problem, we can always revert...
Closes #279.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,284,2020-03-28T22:14:52Z,2020-03-29T14:02:56Z,2020-05-02T20:20:09Z,MERGED,True,1,1,1,https://github.com/kareltucek,Fix memory corruption in led_display driver,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/284,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/284,"What happened here (in case it is not obvious):
LedDisplayIcon_Last allocated array of 2 states instead of 3. As a result, writing adaptive mode led resulted into rewriting someone else's piece of memory - whatever the linker placed right after the ledIconStates array. In this case it blew up macro recorder on my fork.
Please, lets be careful about memory corruptions (allocations, indices, etc.). These bugs can be pretty nasty, and today I was very lucky to be able to hunt it down so easily.","What happened here (in case it is not obvious):
LedDisplayIcon_Last allocated array of 2 states instead of 3. As a result, writing adaptive mode led resulted into rewriting someone else's piece of memory - whatever the linker placed right after the ledIconStates array. In this case it blew up macro recorder on my fork.
Please, lets be careful about memory corruptions (allocations, indices, etc.). These bugs can be pretty nasty, and today I was very lucky to be able to hunt it down so easily.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,284,2020-03-28T22:14:52Z,2020-03-29T14:02:56Z,2020-05-02T20:20:09Z,MERGED,True,1,1,1,https://github.com/kareltucek,Fix memory corruption in led_display driver,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/284,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/284#issuecomment-605641077,"What happened here (in case it is not obvious):
LedDisplayIcon_Last allocated array of 2 states instead of 3. As a result, writing adaptive mode led resulted into rewriting someone else's piece of memory - whatever the linker placed right after the ledIconStates array. In this case it blew up macro recorder on my fork.
Please, lets be careful about memory corruptions (allocations, indices, etc.). These bugs can be pretty nasty, and today I was very lucky to be able to hunt it down so easily.",Great catch! I'll do my best to not make such bugs in the future.,True,{'THUMBS_UP': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,290,2020-04-21T15:23:42Z,2020-04-21T16:46:38Z,2020-05-02T20:20:26Z,MERGED,True,18,18,1,https://github.com/kareltucek,Fix naming conventions,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/290,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/290,Closes #285 .,Closes #285 .,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,293,2020-04-23T21:08:49Z,2020-04-23T21:30:38Z,2020-05-02T20:19:40Z,MERGED,True,20,8,2,https://github.com/kareltucek,Fix toggle key,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/293,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/293,"Broken by postponer-related changes in the keystate flow and the fact that the layer activations are done ""outside"" of the flow.
The layer switching code is in a pretty bad shape, unfortunatelly, for some hold layer scenarios, it is quite hard to decide what is actually a feature and what is a bug.
Closes #291 .","Broken by postponer-related changes in the keystate flow and the fact that the layer activations are done ""outside"" of the flow.
The layer switching code is in a pretty bad shape, unfortunatelly, for some hold layer scenarios, it is quite hard to decide what is actually a feature and what is a bug.
Closes #291 .",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,294,2020-04-24T20:12:02Z,2020-04-29T23:24:42Z,2020-05-02T20:19:36Z,MERGED,True,341,213,8,https://github.com/kareltucek,Layer handling refactor,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/294,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/294,"I have found some time to finally refactor layer switching. Some code has just moved to different places, some code was rewritten but the idea remained the same. But generally I chose to do such changes which would allow me to reason about correctness of the solution, which mostly means that I have deleted and refactored a lot.
The main ideas:

This time I am not introducing any new abstract constructs, and am keeping it in a minimal form.
I have moved the end logic of layer switching into a new file layer_switcher.c, so it is no longer scattered across many different places. Decision making logic is generally branched in usb_report_updater.c according to action structure, but all calls end up in layer_switcher.c. This should allow better overview of the logic. Of course, this again means deeper call tree and a bit more code, but (I believe) better locality of the code.
I have tried to write down some actual ""specification"" of the logic so that there is something to refer to when reasoning about issues and feature requests. -> layer_switcher.c
I have strictly separated ""hold"" effects from ""toggle"" effects. ""Hold"" effects are now always decided based on base-layer action, irrespectively of actual active layer. On the other hand, ""Toggle"" effects are always treated as regular actions (they always respect active layer and code branching structure).

This is unfortunately not very nice, since double-tap-toggle actions have effects of both types, and therefore in these case the flow goes independently by two different paths.
This allowed me to get rid of the antipattern of ""toggle"" action which (for instance) went through layer hold mechanism and even intercepted non-base-layer actions.
Holds are now evaluated as part of the standard action branching and evaluation. This should simplify the code a bit and also speed up the update loop considerably.


I even managed to make secondary roles comply with behaviour of regular hold switches. However, in this case, I am not very sure if my sense for detail haven't gotten ahead of myself. At the moment, I leave the regular implementation in place via SECONDARY_AS_REGULAR_HOLD directive.
I have done some small refactors, like moving the UsbStackTest into a separate procedure.

Although I have considered all design decisions carefully and am therefore quite sure about correctness and sanity of the design, the thing should definitely be tested for some time before accepted into upstream (esp. due to possible presence of typos and other dumb mistakes). However, anyone interested is welcome to give it a try and report back:
uhk-fw-8.9.0-layer-switching-refactor.tar.gz
Fixes #291 properly.
Closes #222 .
Closes #199 .
Closes #195 .
Closes #167 . (Even including secondary roles.)
(The ratio of added code is not as bad as it looks like if one considers amount of added comments, and layer.c whose deletion github doesn't render by default.)","I have found some time to finally refactor layer switching. Some code has just moved to different places, some code was rewritten but the idea remained the same. But generally I chose to do such changes which would allow me to reason about correctness of the solution, which mostly means that I have deleted and refactored a lot.
The main ideas:

This time I am not introducing any new abstract constructs, and am keeping it in a minimal form.
I have moved the end logic of layer switching into a new file layer_switcher.c, so it is no longer scattered across many different places. Decision making logic is generally branched in usb_report_updater.c according to action structure, but all calls end up in layer_switcher.c. This should allow better overview of the logic. Of course, this again means deeper call tree and a bit more code, but (I believe) better locality of the code.
I have tried to write down some actual ""specification"" of the logic so that there is something to refer to when reasoning about issues and feature requests. -> layer_switcher.c
I have strictly separated ""hold"" effects from ""toggle"" effects. ""Hold"" effects are now always decided based on base-layer action, irrespectively of actual active layer. On the other hand, ""Toggle"" effects are always treated as regular actions (they always respect active layer and code branching structure).

This is unfortunately not very nice, since double-tap-toggle actions have effects of both types, and therefore in these case the flow goes independently by two different paths.
This allowed me to get rid of the antipattern of ""toggle"" action which (for instance) went through layer hold mechanism and even intercepted non-base-layer actions.
Holds are now evaluated as part of the standard action branching and evaluation. This should simplify the code a bit and also speed up the update loop considerably.


I even managed to make secondary roles comply with behaviour of regular hold switches. However, in this case, I am not very sure if my sense for detail haven't gotten ahead of myself. At the moment, I leave the regular implementation in place via SECONDARY_AS_REGULAR_HOLD directive.
I have done some small refactors, like moving the UsbStackTest into a separate procedure.

Although I have considered all design decisions carefully and am therefore quite sure about correctness and sanity of the design, the thing should definitely be tested for some time before accepted into upstream (esp. due to possible presence of typos and other dumb mistakes). However, anyone interested is welcome to give it a try and report back:
uhk-fw-8.9.0-layer-switching-refactor.tar.gz
Fixes #291 properly.
Closes #222 .
Closes #199 .
Closes #195 .
Closes #167 . (Even including secondary roles.)
(The ratio of added code is not as bad as it looks like if one considers amount of added comments, and layer.c whose deletion github doesn't render by default.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,294,2020-04-24T20:12:02Z,2020-04-29T23:24:42Z,2020-05-02T20:19:36Z,MERGED,True,341,213,8,https://github.com/kareltucek,Layer handling refactor,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/294,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/294#issuecomment-619657322,"I have found some time to finally refactor layer switching. Some code has just moved to different places, some code was rewritten but the idea remained the same. But generally I chose to do such changes which would allow me to reason about correctness of the solution, which mostly means that I have deleted and refactored a lot.
The main ideas:

This time I am not introducing any new abstract constructs, and am keeping it in a minimal form.
I have moved the end logic of layer switching into a new file layer_switcher.c, so it is no longer scattered across many different places. Decision making logic is generally branched in usb_report_updater.c according to action structure, but all calls end up in layer_switcher.c. This should allow better overview of the logic. Of course, this again means deeper call tree and a bit more code, but (I believe) better locality of the code.
I have tried to write down some actual ""specification"" of the logic so that there is something to refer to when reasoning about issues and feature requests. -> layer_switcher.c
I have strictly separated ""hold"" effects from ""toggle"" effects. ""Hold"" effects are now always decided based on base-layer action, irrespectively of actual active layer. On the other hand, ""Toggle"" effects are always treated as regular actions (they always respect active layer and code branching structure).

This is unfortunately not very nice, since double-tap-toggle actions have effects of both types, and therefore in these case the flow goes independently by two different paths.
This allowed me to get rid of the antipattern of ""toggle"" action which (for instance) went through layer hold mechanism and even intercepted non-base-layer actions.
Holds are now evaluated as part of the standard action branching and evaluation. This should simplify the code a bit and also speed up the update loop considerably.


I even managed to make secondary roles comply with behaviour of regular hold switches. However, in this case, I am not very sure if my sense for detail haven't gotten ahead of myself. At the moment, I leave the regular implementation in place via SECONDARY_AS_REGULAR_HOLD directive.
I have done some small refactors, like moving the UsbStackTest into a separate procedure.

Although I have considered all design decisions carefully and am therefore quite sure about correctness and sanity of the design, the thing should definitely be tested for some time before accepted into upstream (esp. due to possible presence of typos and other dumb mistakes). However, anyone interested is welcome to give it a try and report back:
uhk-fw-8.9.0-layer-switching-refactor.tar.gz
Fixes #291 properly.
Closes #222 .
Closes #199 .
Closes #195 .
Closes #167 . (Even including secondary roles.)
(The ratio of added code is not as bad as it looks like if one considers amount of added comments, and layer.c whose deletion github doesn't render by default.)",Was #291 not fixed properly?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,294,2020-04-24T20:12:02Z,2020-04-29T23:24:42Z,2020-05-02T20:19:36Z,MERGED,True,341,213,8,https://github.com/kareltucek,Layer handling refactor,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/294,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/294#issuecomment-619816506,"I have found some time to finally refactor layer switching. Some code has just moved to different places, some code was rewritten but the idea remained the same. But generally I chose to do such changes which would allow me to reason about correctness of the solution, which mostly means that I have deleted and refactored a lot.
The main ideas:

This time I am not introducing any new abstract constructs, and am keeping it in a minimal form.
I have moved the end logic of layer switching into a new file layer_switcher.c, so it is no longer scattered across many different places. Decision making logic is generally branched in usb_report_updater.c according to action structure, but all calls end up in layer_switcher.c. This should allow better overview of the logic. Of course, this again means deeper call tree and a bit more code, but (I believe) better locality of the code.
I have tried to write down some actual ""specification"" of the logic so that there is something to refer to when reasoning about issues and feature requests. -> layer_switcher.c
I have strictly separated ""hold"" effects from ""toggle"" effects. ""Hold"" effects are now always decided based on base-layer action, irrespectively of actual active layer. On the other hand, ""Toggle"" effects are always treated as regular actions (they always respect active layer and code branching structure).

This is unfortunately not very nice, since double-tap-toggle actions have effects of both types, and therefore in these case the flow goes independently by two different paths.
This allowed me to get rid of the antipattern of ""toggle"" action which (for instance) went through layer hold mechanism and even intercepted non-base-layer actions.
Holds are now evaluated as part of the standard action branching and evaluation. This should simplify the code a bit and also speed up the update loop considerably.


I even managed to make secondary roles comply with behaviour of regular hold switches. However, in this case, I am not very sure if my sense for detail haven't gotten ahead of myself. At the moment, I leave the regular implementation in place via SECONDARY_AS_REGULAR_HOLD directive.
I have done some small refactors, like moving the UsbStackTest into a separate procedure.

Although I have considered all design decisions carefully and am therefore quite sure about correctness and sanity of the design, the thing should definitely be tested for some time before accepted into upstream (esp. due to possible presence of typos and other dumb mistakes). However, anyone interested is welcome to give it a try and report back:
uhk-fw-8.9.0-layer-switching-refactor.tar.gz
Fixes #291 properly.
Closes #222 .
Closes #199 .
Closes #195 .
Closes #167 . (Even including secondary roles.)
(The ratio of added code is not as bad as it looks like if one considers amount of added comments, and layer.c whose deletion github doesn't render by default.)","It was a quick hotfix which simply restored pre-8.9.0 behaviour. It works as far as we are content with the way it worked before.
But in principle, the fix it is making the environment around the bug behave the same way as before, rather than fixing the nature of the problem, which in my opinion lays in design.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,294,2020-04-24T20:12:02Z,2020-04-29T23:24:42Z,2020-05-02T20:19:36Z,MERGED,True,341,213,8,https://github.com/kareltucek,Layer handling refactor,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/294,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/294#issuecomment-621521308,"I have found some time to finally refactor layer switching. Some code has just moved to different places, some code was rewritten but the idea remained the same. But generally I chose to do such changes which would allow me to reason about correctness of the solution, which mostly means that I have deleted and refactored a lot.
The main ideas:

This time I am not introducing any new abstract constructs, and am keeping it in a minimal form.
I have moved the end logic of layer switching into a new file layer_switcher.c, so it is no longer scattered across many different places. Decision making logic is generally branched in usb_report_updater.c according to action structure, but all calls end up in layer_switcher.c. This should allow better overview of the logic. Of course, this again means deeper call tree and a bit more code, but (I believe) better locality of the code.
I have tried to write down some actual ""specification"" of the logic so that there is something to refer to when reasoning about issues and feature requests. -> layer_switcher.c
I have strictly separated ""hold"" effects from ""toggle"" effects. ""Hold"" effects are now always decided based on base-layer action, irrespectively of actual active layer. On the other hand, ""Toggle"" effects are always treated as regular actions (they always respect active layer and code branching structure).

This is unfortunately not very nice, since double-tap-toggle actions have effects of both types, and therefore in these case the flow goes independently by two different paths.
This allowed me to get rid of the antipattern of ""toggle"" action which (for instance) went through layer hold mechanism and even intercepted non-base-layer actions.
Holds are now evaluated as part of the standard action branching and evaluation. This should simplify the code a bit and also speed up the update loop considerably.


I even managed to make secondary roles comply with behaviour of regular hold switches. However, in this case, I am not very sure if my sense for detail haven't gotten ahead of myself. At the moment, I leave the regular implementation in place via SECONDARY_AS_REGULAR_HOLD directive.
I have done some small refactors, like moving the UsbStackTest into a separate procedure.

Although I have considered all design decisions carefully and am therefore quite sure about correctness and sanity of the design, the thing should definitely be tested for some time before accepted into upstream (esp. due to possible presence of typos and other dumb mistakes). However, anyone interested is welcome to give it a try and report back:
uhk-fw-8.9.0-layer-switching-refactor.tar.gz
Fixes #291 properly.
Closes #222 .
Closes #199 .
Closes #195 .
Closes #167 . (Even including secondary roles.)
(The ratio of added code is not as bad as it looks like if one considers amount of added comments, and layer.c whose deletion github doesn't render by default.)",Very impressed by your work and appreciate your thorough explanation. Keep it up!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,296,2020-05-02T18:55:37Z,2020-05-03T00:27:39Z,2021-08-13T15:55:10Z,MERGED,True,1,1,1,https://github.com/kareltucek,Fix held layer flag.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/296,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/296,"The refactor accidentally made base layer clasify as ""held layer"", which made sticky mods stick on base layer (which is wrong).","The refactor accidentally made base layer clasify as ""held layer"", which made sticky mods stick on base layer (which is wrong).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,297,2020-05-02T19:02:57Z,2020-05-03T00:18:35Z,2021-08-13T15:55:12Z,MERGED,True,1,28,3,https://github.com/kareltucek,Remove SECONDARY_AS_REGULAR_HOLD branching.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/297,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/297,Closes #295 .,Closes #295 .,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,298,2020-05-02T19:37:12Z,2020-05-03T00:39:25Z,2021-08-13T15:55:14Z,MERGED,True,325,289,5,https://github.com/kareltucek,Split mouse_controller from usb_report_updater.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/298,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/298,"Just moved code from usb_report_updater into a new file.
Refers to #259 .","Just moved code from usb_report_updater into a new file.
Refers to #259 .",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/xxxajk,1,https://github.com/UltimateHackingKeyboard/firmware/pull/301,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine","Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/apps/cla-sign-bot,2,https://github.com/UltimateHackingKeyboard/firmware/pull/301#issuecomment-647126786,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine",The CLA sign PR can contain only the latest CLA file!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/301#issuecomment-647130838,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine","Could you elaborate a bit more on why does this fix the issue please? (Just interested.)
Also, is there any reason why you did not lower the USB_BASIC_KEYBOARD_INTERRUPT_IN_INTERVAL when lowering all other four intervals?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/xxxajk,4,https://github.com/UltimateHackingKeyboard/firmware/pull/301#issuecomment-647132482,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine","SOME USB implementations have bugs and strange quirks, where they get all stupid and report the wrong bandwidth, or only have a single transaction translator. Since the TT is busy, it can't handle the low speed or full speed device... Well it CAN, but it's fooled it's self, and thinks you will be eating 750% of the bandwidth when all are set to 4. Fun.
By setting it to 1, it says to the controller that you are only going to use one FS micro-frame. it's happy with 125uS. :-)
As far as the other one, You are correct, I missed that one.
Adding it. Thanks for the sharp eye!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/apps/cla-sign-bot,5,https://github.com/UltimateHackingKeyboard/firmware/pull/301#issuecomment-647132602,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine",The CLA sign PR can contain only the latest CLA file!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/kareltucek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/301#issuecomment-647133029,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine",Thanks for clarification!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/xxxajk,7,https://github.com/UltimateHackingKeyboard/firmware/pull/301#issuecomment-647134727,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine","@kareltucek  Yeah, no problem.
Now someone needs to teach Travis how to do /bin/sh which or at least fake it.
Who takes care of that?
I like to keep my (several dozen, not kidding) ARM tool chains separate.
On a normal system, which fixes that for those who don't care and have it either on $PATH or global workspace or project setting. It also allows me to just use the command line, and pretty much ditch eclipse (ok, KDS, whatever) for any IDE I want.",True,{'THUMBS_UP': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/kareltucek,8,https://github.com/UltimateHackingKeyboard/firmware/pull/301#issuecomment-647140253,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine","Who takes care of that?

@mondalaci ?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/Agrendalath,9,https://github.com/UltimateHackingKeyboard/firmware/pull/301#issuecomment-647146430,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine","BIOS on the ASUS machine

I just tested this within ASUS BIOS and inside Windows and it works like a charm.",True,{'THUMBS_UP': ['https://github.com/xxxajk']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,301,2020-06-21T13:14:15Z,2020-06-21T17:58:25Z,2020-06-21T17:58:26Z,MERGED,True,15,6,7,https://github.com/xxxajk,Fix for USB3.x issues,4,[],https://github.com/UltimateHackingKeyboard/firmware/pull/301,https://github.com/xxxajk,10,https://github.com/UltimateHackingKeyboard/firmware/pull/301#issuecomment-647146602,"Fixes #269.
This eliminates the bandwidth issue. Linux no longer complains.
This should fix USB3.x on Mac too.
I'll have to see if the following are happier:

Ancient Mac that I have
BIOS on the ASUS machine",Great! Happy that it's not a problem any more.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,311,2020-10-13T07:58:12Z,2020-10-13T20:29:27Z,2020-10-13T20:29:34Z,MERGED,True,1,0,1,https://github.com/kareltucek,Make mod plus backtick sticky,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/311,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/311,Closes #310,Closes #310,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/dancek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/318,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware","add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/apps/cla-sign-bot,2,https://github.com/UltimateHackingKeyboard/firmware/pull/318#issuecomment-730599306,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware","Thank you for your contribution!
Please sign the CLA.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/apps/cla-sign-bot,3,https://github.com/UltimateHackingKeyboard/firmware/pull/318#issuecomment-730603081,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware",The CLA sign PR can contain only the latest CLA file!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/apps/cla-sign-bot,4,https://github.com/UltimateHackingKeyboard/firmware/pull/318#issuecomment-730605099,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware",The CLA sign PR can contain only the latest CLA file!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/318#issuecomment-730610117,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware","Thank you for your PR, but I don't think it fits our use case. The release script is meant to build a fully-fledged release tarball for which Agent is necessary to construct the binary representation of the user configuration. Unless you have a valid objection, I'd rather close this PR.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/dancek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/318#issuecomment-731090197,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware","Hi @mondalaci! I'm not completely sure what you mean. I'm currently running a firmware built with this script on my UHK and it works for me.
I wanted to modify the firmware (I'll send another PR your way later) but didn't want to install anything unnecessary. If this approach doesn't fully work, I'll suggest removing the --skip-agent part but editing the README anyway. It took me a while to figure out how to build so I think the instructions are valuable for other contributors in the future.
EDIT: just to clarify: I built a tarball with ./make-release.js --skip-agent, then flashed it with UHK Agent installed from the official AppImage.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/dancek,7,https://github.com/UltimateHackingKeyboard/firmware/pull/318#issuecomment-731100841,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware","Since we're talking, I'm planning on adding the HID Usage Page for controlling the led display, Auxiliary Display Page (0x14). I already have a proof of concept for changing the text with a Set_Report request and some libusb code for controlling it from userspace, but there's a lot to be done before it's a good implementation.
I'm thinking of adding the usages for text and 14-segment display as specified in HID Usage Tables, p. 191-203 to UsbBasicKeyboardReportDescriptor. If you have any comments about that, I'd be very happy to hear them.
Of course I realize you might not want the change. In that case I'll just have a fork with the feature.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/318#issuecomment-731118695,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware","Thank you for elaborating on your use case and goal.
It's unnecessary to include the user configuration into the tarball for flashing it via Agent, but it should be necessary to reset the user configuration via Agent. Hence, firmware releases that don't contain the user configuration are incomplete.
As for building the firmware as easily as possible, you can simply execute make in the top-level directories of this repo where Makefile is present. make flash flashes the individual firmware projects to the UHK, and it depends on Agent. I consider building the tarball and uploading it via Agent in each development iteration counter-productive. Feel free to revise the readme accordingly, and I'll take a look.
Regarding making the LED display controllable via USB, a new USB command should be added to the existing ones instead of modifying the descriptors. See right/src/usb_commands. We can discuss this further if you want to, but perhaps a separate issue would be better suited.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/dancek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/318#issuecomment-731119646,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware",Ok! Thanks for the pointers. I'll consider another stab at the README once I better understand what I'm doing :),True,{'THUMBS_UP': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,318,2020-11-19T19:50:46Z,2020-11-20T11:39:56Z,2020-11-20T11:42:05Z,CLOSED,False,19,1,2,https://github.com/dancek,Simplify building firmware,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/318,https://github.com/mondalaci,10,https://github.com/UltimateHackingKeyboard/firmware/pull/318#issuecomment-731120582,"add make-release.js option --skip-agent to avoid building the agent
add instructions for the simplest way of building the firmware","Cool! I can write a specification for controlling UHK LEDs via USB in a new issue. Let me know if you're serious about this, and I'll do it.",True,{'THUMBS_UP': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,319,2020-11-19T19:57:38Z,2020-11-19T20:02:13Z,2020-11-19T20:02:13Z,MERGED,True,1,0,1,https://github.com/dancek,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/319,https://github.com/dancek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/319,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,320,2020-11-20T22:04:39Z,2020-11-23T10:48:44Z,2020-11-23T10:48:45Z,CLOSED,False,47,5,6,https://github.com/dancek,WIP / RFC: commands for setting led segments,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/320,https://github.com/dancek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/320,"So, here's some code. Thanks for the hint about using the same command system as for everything else. I was planning to fully model the display as a HID feature with usage pages, reports and all, but that's probably overkill. The only slight downside of this much simpler approach is that it's vendor specific. But there probably are no generic HID segment display drivers anyway.
For this firmware patch there's proof-of-concept userspace code for writing to the display at https://github.com/dancek/uhk-leds/blob/master/src/main.rs .
I arbitrarily chose the command ids 0x21 and 0x22 but expect them to change. Please recommend whatever suits your plans.
Any code review is welcome, as are comments regarding what should be done so this can be included in the official firmware (as opposed to a fork).","So, here's some code. Thanks for the hint about using the same command system as for everything else. I was planning to fully model the display as a HID feature with usage pages, reports and all, but that's probably overkill. The only slight downside of this much simpler approach is that it's vendor specific. But there probably are no generic HID segment display drivers anyway.
For this firmware patch there's proof-of-concept userspace code for writing to the display at https://github.com/dancek/uhk-leds/blob/master/src/main.rs .
I arbitrarily chose the command ids 0x21 and 0x22 but expect them to change. Please recommend whatever suits your plans.
Any code review is welcome, as are comments regarding what should be done so this can be included in the official firmware (as opposed to a fork).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,320,2020-11-20T22:04:39Z,2020-11-23T10:48:44Z,2020-11-23T10:48:45Z,CLOSED,False,47,5,6,https://github.com/dancek,WIP / RFC: commands for setting led segments,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/320,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/320#issuecomment-731734788,"So, here's some code. Thanks for the hint about using the same command system as for everything else. I was planning to fully model the display as a HID feature with usage pages, reports and all, but that's probably overkill. The only slight downside of this much simpler approach is that it's vendor specific. But there probably are no generic HID segment display drivers anyway.
For this firmware patch there's proof-of-concept userspace code for writing to the display at https://github.com/dancek/uhk-leds/blob/master/src/main.rs .
I arbitrarily chose the command ids 0x21 and 0x22 but expect them to change. Please recommend whatever suits your plans.
Any code review is welcome, as are comments regarding what should be done so this can be included in the official firmware (as opposed to a fork).","Your PR looks good, but I'd much rather prefer getting #322 implemented.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,320,2020-11-20T22:04:39Z,2020-11-23T10:48:44Z,2020-11-23T10:48:45Z,CLOSED,False,47,5,6,https://github.com/dancek,WIP / RFC: commands for setting led segments,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/320,https://github.com/dancek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/320#issuecomment-732080915,"So, here's some code. Thanks for the hint about using the same command system as for everything else. I was planning to fully model the display as a HID feature with usage pages, reports and all, but that's probably overkill. The only slight downside of this much simpler approach is that it's vendor specific. But there probably are no generic HID segment display drivers anyway.
For this firmware patch there's proof-of-concept userspace code for writing to the display at https://github.com/dancek/uhk-leds/blob/master/src/main.rs .
I arbitrarily chose the command ids 0x21 and 0x22 but expect them to change. Please recommend whatever suits your plans.
Any code review is welcome, as are comments regarding what should be done so this can be included in the official firmware (as opposed to a fork).","Cool, let's work on that!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,321,2020-11-20T22:05:54Z,2021-03-02T07:55:23Z,2021-03-02T07:55:23Z,MERGED,True,21,1,2,https://github.com/dancek,Documentation for a CLI-based dev setup,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/321,https://github.com/dancek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/321,This is another try at better documenting how this firmware can be developed without installing the full IDE.,This is another try at better documenting how this firmware can be developed without installing the full IDE.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,323,2020-12-26T23:07:53Z,2021-01-10T13:53:21Z,2021-08-13T15:55:17Z,CLOSED,False,60,4,1,https://github.com/kareltucek,WIP: Exponential speed driver for trackball/touchpad,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/323,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/323,"Here is some experimental code, which should make the touchpad and trackball modules behave even nicer.
Constants may need some tweaking  (esp. for touchpad; these are for the trackball; touchpad will need higher minimum speed coeficient and lower mid speed)...
Feel free to discard it :-).","Here is some experimental code, which should make the touchpad and trackball modules behave even nicer.
Constants may need some tweaking  (esp. for touchpad; these are for the trackball; touchpad will need higher minimum speed coeficient and lower mid speed)...
Feel free to discard it :-).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,323,2020-12-26T23:07:53Z,2021-01-10T13:53:21Z,2021-08-13T15:55:17Z,CLOSED,False,60,4,1,https://github.com/kareltucek,WIP: Exponential speed driver for trackball/touchpad,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/323,https://github.com/kareltucek,2,https://github.com/UltimateHackingKeyboard/firmware/pull/323#issuecomment-751446481,"Here is some experimental code, which should make the touchpad and trackball modules behave even nicer.
Constants may need some tweaking  (esp. for touchpad; these are for the trackball; touchpad will need higher minimum speed coeficient and lower mid speed)...
Feel free to discard it :-).","In order to function properly, the code will need proper float handling. (This is prerequisite for any speed scaling, so it is not directly related to this proposal.)
It already exists in the keyboard mouse handler, therefore just needs to be refactored so that it is applicable to all module types.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,325,2021-01-10T13:55:31Z,2021-02-27T16:51:38Z,2021-03-01T10:13:56Z,MERGED,True,144,11,6,https://github.com/kareltucek,Experimental mouse driver code,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/325,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/325,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,325,2021-01-10T13:55:31Z,2021-02-27T16:51:38Z,2021-03-01T10:13:56Z,MERGED,True,144,11,6,https://github.com/kareltucek,Experimental mouse driver code,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/325,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/325#issuecomment-786923619,,@kareltucek Why haven't you used the exponential driver for the trackpoint?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,325,2021-01-10T13:55:31Z,2021-02-27T16:51:38Z,2021-03-01T10:13:56Z,MERGED,True,144,11,6,https://github.com/kareltucek,Experimental mouse driver code,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/325,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/325#issuecomment-787064870,,"@kareltucek Why haven't you used the exponential driver for the trackpoint?

Because it does not make sense and worsens usability.
The reason is that touchpad and trackball control directly the position of the cursor, while trackpoint controls the speed of cursor - i.e., the derivative of position (i.e., the speed of change of position).
Thereforel, by applying the exp driver to the trackball/touchpad, we let the user to somehow affect the derivative of position (i.e., speed) on top of controlling the position directly. On the other hand, trackpoint already controls that speed directly, and therefore the only thing to control there is the speed coefficient constant.
Expressed mathematically, applying the exp driver to the touchpad/trackball output is same as applying the derivative of the exp driver to trackpoint output. And  the constant speed coefficient of trackpoint is exactly the derivative of the exp function (for whom the 'exp' name no longer makes any sense, since now it is actually a simple polynomial, not an exponential).




Touchpad/Trackball ..................................
Trackpoint ..................................




User directly controls
position  p
speed of cursor i.e., derivative of position  d(p)


Firmware sees (i.e., our input inp equals)
change of positiond(p)
change of speed  d(d(p))


Output d_out without any driver (by definition) equals 1
d_out(p) := d(p)
d_out(p) := d(d(p))


We want to apply the driver to d(p), therefore we apply it as
d_out(p) := = d(p)*drv(p)
d_out(p) :=   = d(d(p)*drv(p))    = d(d(p))*d(drv(p))


Since  drv(p) = a*p+b
d_out(p) :=   = d(p)*(a*p+b) 
d_out(p) :=  = d(d(p))*d(a*p+b)


Substituted with inp again 2
d_out(p) :=  = inp*(a*d'(inp)+b)
d_out(p) := = inp*a




Footnotes


note that basically d_out (as output delta) and d both denote the same thing - a derivative or a difference, just since we are applying some transformations, writing equality between them would be... ...awkward. ↩


for d' being inversion of derivative. ↩",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,325,2021-01-10T13:55:31Z,2021-02-27T16:51:38Z,2021-03-01T10:13:56Z,MERGED,True,144,11,6,https://github.com/kareltucek,Experimental mouse driver code,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/325,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/325#issuecomment-787101301,,"Thank you for explaining the difference of the trackpoint in detail! It makes sense, and it also highlights that your math is much stronger than mine. :)
I have yet to figure out exactly what options to expose per module. I'll merge your PR soon, and I appreciate your contributions very much!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/326,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.","Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/326#issuecomment-788700402,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.",@kareltucek Do you plan to pursue this any further? I don't like to keep PRs hanging for long.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/326#issuecomment-788716565,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.","@kareltucek Do you plan to pursue this any further?

Yes. I do already have written the more advanced version, but need to find time to test it and hunt down any problems...

I don't like to keep PRs hanging for long.

Feel free to close it for the moment so that it does not bug you :-).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/326#issuecomment-788739234,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.","Thanks for the quick follow-up! No worries, I'm not bothered by it so much. :) Feel free to make further commits, and I'll merge this PR when the time comes.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/kareltucek,5,https://github.com/UltimateHackingKeyboard/firmware/pull/326#issuecomment-814550707,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.","This should be now prepared. To test the advanced strategy, you will need to set the strategy in code, and then to go through parameters (there are actually multiple ways of parametrizing, each fitting different sort of writers...).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/326#issuecomment-817378130,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.","Thanks for your PR! It looks highly configurable, and I'm getting totally lost. :)
Can you make some firmware builds with different configuration values, and post them to #207 for everyone to test?
Does your PR perhaps address this issue, too?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/kareltucek,7,https://github.com/UltimateHackingKeyboard/firmware/pull/326#issuecomment-817382243,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.","Thanks for your PR! It looks highly configurable, and I'm getting totally lost.

Well, part of the features are implemented based on the djrenren's elaboration. I don't have any idea how exactly are other people used to incorporate those features into their setups, therefore I can only provide my preferred setup and djrenren's.
Will do that tomorrow, and will throw in some documentation, since I guess it will be much more useful than just the two random configurations...

Does your PR perhaps address this issue, too?

Well, yes and no. The alphanumeric-friendly strategy contains the timeout just as requested in 792, but it still remains the alphanumeric-friendly strategy. It cannot be configured to act as the simple resolution strategy.
Yet the simple strategy has some strong benefits over the alphanumeric-friendly one due to which (IMHO) should not be considered deprecated. As a result I would consider that a separate feature request.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/326#issuecomment-1013744875,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.","@kareltucek Is this PR still relevant, or should it be closed?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/kareltucek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/326#issuecomment-1013744975,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.",Still relevant.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,326,2021-01-17T00:37:42Z,,2022-03-11T11:37:04Z,OPEN,False,272,16,7,https://github.com/kareltucek,Secondary roles.,12,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/326,https://github.com/ration,10,https://github.com/UltimateHackingKeyboard/firmware/pull/326#issuecomment-1065033279,"Resolves #207.
Here is some code - mainly for testing purposes and for discussion at this point.
I have extended the postponer by time management and implemented djrenren's proposal. At this point it is not working very well. I will probably implement my original strategy later.",Is there any progress on this? I tried this PR version and the timing options appear to make the secondary role timing configurations much much more usable.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,331,2021-03-04T16:46:30Z,2021-03-04T16:51:30Z,2021-08-13T15:55:27Z,CLOSED,False,1,1,1,https://github.com/kareltucek,Fix typo in led matrix.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/331,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/331,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,333,2021-03-11T12:36:10Z,2021-03-11T19:46:01Z,2021-08-13T15:56:37Z,MERGED,True,14,8,3,https://github.com/kareltucek,Accel driver constant offset,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/333,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/333,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,333,2021-03-11T12:36:10Z,2021-03-11T19:46:01Z,2021-08-13T15:56:37Z,MERGED,True,14,8,3,https://github.com/kareltucek,Accel driver constant offset,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/333,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/333#issuecomment-797002977,,"Excellent work! baseSpeed seems useful, indeed, and the defaults feel right.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,335,2021-03-12T13:38:26Z,2021-03-12T20:20:16Z,2021-03-12T20:20:23Z,MERGED,True,17,20,1,https://github.com/kareltucek,Restore correct handling of fractional cursor move remainders.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/335,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/335,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,335,2021-03-12T13:38:26Z,2021-03-12T20:20:16Z,2021-03-12T20:20:23Z,MERGED,True,17,20,1,https://github.com/kareltucek,Restore correct handling of fractional cursor move remainders.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/335,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/335#issuecomment-797732498,,Thank you!,True,{'THUMBS_UP': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,336,2021-03-14T18:52:18Z,2021-03-14T19:37:09Z,2021-03-14T21:34:14Z,MERGED,True,1,0,1,https://github.com/steamraven,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/336,https://github.com/steamraven,1,https://github.com/UltimateHackingKeyboard/firmware/pull/336,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,337,2021-03-14T19:43:20Z,2021-03-14T19:59:18Z,2021-03-14T21:33:58Z,MERGED,True,1,1,1,https://github.com/steamraven,fixes #332 tab backlight,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/337,https://github.com/steamraven,1,https://github.com/UltimateHackingKeyboard/firmware/pull/337,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,337,2021-03-14T19:43:20Z,2021-03-14T19:59:18Z,2021-03-14T21:33:58Z,MERGED,True,1,1,1,https://github.com/steamraven,fixes #332 tab backlight,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/337,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/337#issuecomment-798969738,,@steamraven Thanks so much! Now only backspace is left to be fixed. The issue is possibly the same.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,338,2021-03-14T21:36:56Z,2021-03-15T09:34:07Z,2021-03-15T15:56:47Z,MERGED,True,106,101,2,https://github.com/steamraven,General ledmap & led_display formatting and fixes,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/338,https://github.com/steamraven,1,https://github.com/UltimateHackingKeyboard/firmware/pull/338,"Convert to hex to easily see patterns
Extra comments
Fix backspace ledmap
Update ledmap unused/zero detection","Convert to hex to easily see patterns
Extra comments
Fix backspace ledmap
Update ledmap unused/zero detection",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,338,2021-03-14T21:36:56Z,2021-03-15T09:34:07Z,2021-03-15T15:56:47Z,MERGED,True,106,101,2,https://github.com/steamraven,General ledmap & led_display formatting and fixes,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/338,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/338#issuecomment-799268547,"Convert to hex to easily see patterns
Extra comments
Fix backspace ledmap
Update ledmap unused/zero detection",@steamraven Thanks so much for the fix! Very nicely refactored.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,338,2021-03-14T21:36:56Z,2021-03-15T09:34:07Z,2021-03-15T15:56:47Z,MERGED,True,106,101,2,https://github.com/steamraven,General ledmap & led_display formatting and fixes,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/338,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/338#issuecomment-799304160,"Convert to hex to easily see patterns
Extra comments
Fix backspace ledmap
Update ledmap unused/zero detection",@steamraven nice!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,341,2021-04-04T00:08:32Z,2021-04-08T20:53:05Z,2021-04-09T17:03:36Z,MERGED,True,6,7,4,https://github.com/steamraven,Bugfix: slave count should be 8,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/341,https://github.com/steamraven,1,https://github.com/UltimateHackingKeyboard/firmware/pull/341,,,True,{'THUMBS_UP': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,341,2021-04-04T00:08:32Z,2021-04-08T20:53:05Z,2021-04-09T17:03:36Z,MERGED,True,6,7,4,https://github.com/steamraven,Bugfix: slave count should be 8,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/341,https://github.com/steamraven,2,https://github.com/UltimateHackingKeyboard/firmware/pull/341#issuecomment-813453978,,"FYI, this bug is probably leading to memory corruption as i2c errors are being logged outside the array bounds.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,341,2021-04-04T00:08:32Z,2021-04-08T20:53:05Z,2021-04-09T17:03:36Z,MERGED,True,6,7,4,https://github.com/steamraven,Bugfix: slave count should be 8,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/341,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/341#issuecomment-813487909,,"Nice catch!
On my fork, this seems to correspond to:
 .bss.I2cWatchdog_RecoveryCounter
                0x000000001fff3914        0x4 build_make//opt/firmware/right/src/i2c_watchdog.o
                0x000000001fff3914                I2cWatchdog_RecoveryCounter
 .bss.I2cWatchdog_WatchCounter
                0x000000001fff3918        0x4 build_make//opt/firmware/right/src/i2c_watchdog.o
                0x000000001fff3918                I2cWatchdog_WatchCounter
 .bss.prevWatchdogCounter
                0x000000001fff391c        0x4 build_make//opt/firmware/right/src/i2c_watchdog.o
 .bss.I2cMainBusActualBaudRateBps
                0x000000001fff3920        0x4 build_make//opt/firmware/right/src/init_peripherals.o
                0x000000001fff3920                I2cMainBusActualBaudRateBps
 .bss.IsBusPalOn
                0x000000001fff3924        0x1 build_make//opt/firmware/right/src/init_peripherals.o
                0x000000001fff3924                IsBusPalOn
 .bss.AllKeymapsCount
                0x000000001fff3925        0x1 build_make//opt/firmware/right/src/keymap.o
                0x000000001fff3925                AllKeymapsCount
 .bss.CurrentKeymapIndex
                0x000000001fff3926        0x1 build_make//opt/firmware/right/src/keymap.o
                0x000000001fff3926                CurrentKeymapIndex
 .bss.DefaultKeymapIndex
                0x000000001fff3927        0x1 build_make//opt/firmware/right/src/keymap.o
                0x000000001fff3927                DefaultKeymapIndex
 .bss.KeyStates
                0x000000001fff3928      0x200 build_make//opt/firmware/right/src/key_states.o
                0x000000001fff3928                KeyStates

Which would explain some of my problems, including the weird baud rate...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,341,2021-04-04T00:08:32Z,2021-04-08T20:53:05Z,2021-04-09T17:03:36Z,MERGED,True,6,7,4,https://github.com/steamraven,Bugfix: slave count should be 8,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/341,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/341#issuecomment-813530518,,Looked into origin/master affected regions - looks the same within local build.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,341,2021-04-04T00:08:32Z,2021-04-08T20:53:05Z,2021-04-09T17:03:36Z,MERGED,True,6,7,4,https://github.com/steamraven,Bugfix: slave count should be 8,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/341,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/341#issuecomment-816186319,,@steamraven Thanks for the fix! Great catch!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,343,2021-04-05T16:57:16Z,2021-04-08T21:20:55Z,2021-04-08T21:21:02Z,MERGED,True,16,6,2,https://github.com/kareltucek,Pack memory maps with builds.,5,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/343,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/343,"If I am right in assuming that memory order of stuff is not guaranteed by the linker (or is it?), then memory maps are not easily reproducible.
Packing them with every binary should help in memory corruption hunts...","If I am right in assuming that memory order of stuff is not guaranteed by the linker (or is it?), then memory maps are not easily reproducible.
Packing them with every binary should help in memory corruption hunts...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,343,2021-04-05T16:57:16Z,2021-04-08T21:20:55Z,2021-04-08T21:21:02Z,MERGED,True,16,6,2,https://github.com/kareltucek,Pack memory maps with builds.,5,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/343,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/343#issuecomment-814836775,"If I am right in assuming that memory order of stuff is not guaranteed by the linker (or is it?), then memory maps are not easily reproducible.
Packing them with every binary should help in memory corruption hunts...","I don't know whether the linker guarantees memory order. I assume it's not guaranteed. If you think memory maps are useful for debugging purposes, we can include them into firmware releases, but then the module firmwares should have their own maps, too.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,343,2021-04-05T16:57:16Z,2021-04-08T21:20:55Z,2021-04-08T21:21:02Z,MERGED,True,16,6,2,https://github.com/kareltucek,Pack memory maps with builds.,5,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/343,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/343#issuecomment-814840293,"If I am right in assuming that memory order of stuff is not guaranteed by the linker (or is it?), then memory maps are not easily reproducible.
Packing them with every binary should help in memory corruption hunts...","I sure can add them too, but I don't think modules are that important since their construction is much simpler and therefore less prone to problems of this type. E.g., I do not remember any single memory corruption or race condition which would be caused by a problem in a module. It is the right half where all the strings come together in one complex knot.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,343,2021-04-05T16:57:16Z,2021-04-08T21:20:55Z,2021-04-08T21:21:02Z,MERGED,True,16,6,2,https://github.com/kareltucek,Pack memory maps with builds.,5,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/343,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/343#issuecomment-814843420,"If I am right in assuming that memory order of stuff is not guaranteed by the linker (or is it?), then memory maps are not easily reproducible.
Packing them with every binary should help in memory corruption hunts...","I generally agree, but still, it'd be nice to add memory maps for the modules, too, because we might found module-related bugs eventually.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,343,2021-04-05T16:57:16Z,2021-04-08T21:20:55Z,2021-04-08T21:21:02Z,MERGED,True,16,6,2,https://github.com/kareltucek,Pack memory maps with builds.,5,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/343,https://github.com/kareltucek,5,https://github.com/UltimateHackingKeyboard/firmware/pull/343#issuecomment-814844378,"If I am right in assuming that memory order of stuff is not guaranteed by the linker (or is it?), then memory maps are not easily reproducible.
Packing them with every binary should help in memory corruption hunts...","Sure, will add them in the evening!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,343,2021-04-05T16:57:16Z,2021-04-08T21:20:55Z,2021-04-08T21:21:02Z,MERGED,True,16,6,2,https://github.com/kareltucek,Pack memory maps with builds.,5,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/343,https://github.com/kareltucek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/343#issuecomment-815289950,"If I am right in assuming that memory order of stuff is not guaranteed by the linker (or is it?), then memory maps are not easily reproducible.
Packing them with every binary should help in memory corruption hunts...",Done.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/344,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819785552,,"I'm blown away by how sophisticated, and well-made your caret implementation is! Axis locking is especially thoughtful and useful.

When using the trackball in caret mode, it feels like applying an exponential would make it even more useable.
The horizontal axis of the touchpad should be inverted.
As usual, the coding style... :)

This PR is great as it is, so please let me know if you plan to improve it soon. If not, I'll merge it, and we can improve it later.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819794185,,"I'm blown away by how sophisticated, and well-made your caret implementation is! Axis locking is especially thoughtful and useful.

:-)

* When using the trackball in caret mode, it feels like applying an exponential would make it even more useable.


What exactly do you mean? The standard acceleration driver is already applied to the caret mode. The only trouble might be that the actual speed is bounded by the usb polling rate (remember, one movement, one key tap) to approximately 500 ticks/s.

* The horizontal axis of the touchpad should be inverted.


Oh, I see I am applying the yInversion irrespectively of the actual axis.

* As usual, the coding style... :)


Thanks!

This PR is great as it is, so please let me know if you plan to improve it soon. If not, I'll merge it, and we can improve it later.

I do not have any improvement plans atm.. I.e., I just plan to resolve the review findings.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819804089,,"As for my exponential suggestion, it might be useful to use an exponential on top of the existing exponential.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/kareltucek,5,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819893964,,"As for my exponential suggestion, it might be useful to use an exponential on top of the existing exponential.

I am still quite unclear on the exact idea and motivations behind.
I guess you are having troubles with activation of the axis locks, which decreases sensitivity of the first tick. I have pushed a tweak which increases first tick sensitivity of right side modules while keeping dampened sensitivity of the mini-trackball.
If you still think that additional acceleration is needed, I am offering this refactor: #352 (I have created new instance of caret_mode branch in your repo in order to be able to open a PR. Careful with actual merging.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/kareltucek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819894274,,"As usual, the coding style... :)


Better now? :-)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/mondalaci,7,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819897205,,"Thank you! Caret navigation feels noticeably faster, but now I often switch lines accidentally with the trackball when only trying to move the caret horizontally. If I had to choose, I'd choose the previous version, all things considered.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/kareltucek,8,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819898591,,"Allright, will revert it.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/kareltucek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819899426,,Done.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/kareltucek,10,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819910211,,"On second though the current strongly nonlinear version is hardly ideal. I guess that leaving it with 1.0f (halfway between the two versions) is correct.
Regarding locking sensitivity - If you have the mentioned problems, then I think that indeed the correct solution is to apply an aditional acceleration on top of the thing (-> #352). (Acceleration affects locking properties just as much as the skew parameter, so they are interchangable.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/kareltucek,11,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819910963,,"But feel free to experiment with the values (in that case, I suggest that you check out the caret_mode_exp branch and try to fiddle with the values on lines 312 (acceleration) and 324 & 325 (the ""first tick"" skew)).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,344,2021-04-05T20:44:13Z,2021-04-15T08:39:54Z,2021-08-13T15:55:42Z,MERGED,True,172,7,5,https://github.com/kareltucek,Implement caret mode,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/344,https://github.com/kareltucek,12,https://github.com/UltimateHackingKeyboard/firmware/pull/344#issuecomment-819913603,,"On third though, I am no longer sure, so please pick the variant which feels the best to you.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,345,2021-04-05T21:04:31Z,2021-04-12T20:50:27Z,2021-08-13T15:56:36Z,MERGED,True,145,0,4,https://github.com/kareltucek,Add minimalistic debug library.,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/345,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/345,"This is just an offer of my private debugging mini library.
It is quite handy when one needs to watch just a couple of variables.
Usage:

Define/uncomment WATCHES directive.
Place some watches (i.e., macro calls) into the code, while specifying unique slot in range 0-6 as second parameter.
While using the keyboard, tap one of the left half top row keys.
Led display will start watching that value every 500ms (i.e., first call of the macro after 500ms since last call is shown onto display and will remain for at least the next 500ms)","This is just an offer of my private debugging mini library.
It is quite handy when one needs to watch just a couple of variables.
Usage:

Define/uncomment WATCHES directive.
Place some watches (i.e., macro calls) into the code, while specifying unique slot in range 0-6 as second parameter.
While using the keyboard, tap one of the left half top row keys.
Led display will start watching that value every 500ms (i.e., first call of the macro after 500ms since last call is shown onto display and will remain for at least the next 500ms)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,345,2021-04-05T21:04:31Z,2021-04-12T20:50:27Z,2021-08-13T15:56:36Z,MERGED,True,145,0,4,https://github.com/kareltucek,Add minimalistic debug library.,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/345,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/345#issuecomment-817195637,"This is just an offer of my private debugging mini library.
It is quite handy when one needs to watch just a couple of variables.
Usage:

Define/uncomment WATCHES directive.
Place some watches (i.e., macro calls) into the code, while specifying unique slot in range 0-6 as second parameter.
While using the keyboard, tap one of the left half top row keys.
Led display will start watching that value every 500ms (i.e., first call of the macro after 500ms since last call is shown onto display and will remain for at least the next 500ms)","Your debug library seems quite handy! I'll merge it, but let me make a couple of suggestions first.

ShowNumberExp might be a better name than ShowNumberMag. I'm not sure if it's worth exposing it because it can be used via other relevant functions. It would be more intuitive for me if the alphabetic exponent part were placed at the end, not at the beginning.
The exponent notation shouldn't be used for numbers below 1,000.
I think it's overkill to create a dedicated directory for these files for the time being. Let's use right/src/debug.[ch] for now.
Please follow our coding standards.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,345,2021-04-05T21:04:31Z,2021-04-12T20:50:27Z,2021-08-13T15:56:36Z,MERGED,True,145,0,4,https://github.com/kareltucek,Add minimalistic debug library.,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/345,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/345#issuecomment-817196306,"This is just an offer of my private debugging mini library.
It is quite handy when one needs to watch just a couple of variables.
Usage:

Define/uncomment WATCHES directive.
Place some watches (i.e., macro calls) into the code, while specifying unique slot in range 0-6 as second parameter.
While using the keyboard, tap one of the left half top row keys.
Led display will start watching that value every 500ms (i.e., first call of the macro after 500ms since last call is shown onto display and will remain for at least the next 500ms)","All good points, will refactor it.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,345,2021-04-05T21:04:31Z,2021-04-12T20:50:27Z,2021-08-13T15:56:36Z,MERGED,True,145,0,4,https://github.com/kareltucek,Add minimalistic debug library.,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/345,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/345#issuecomment-817670935,"This is just an offer of my private debugging mini library.
It is quite handy when one needs to watch just a couple of variables.
Usage:

Define/uncomment WATCHES directive.
Place some watches (i.e., macro calls) into the code, while specifying unique slot in range 0-6 as second parameter.
While using the keyboard, tap one of the left half top row keys.
Led display will start watching that value every 500ms (i.e., first call of the macro after 500ms since last call is shown onto display and will remain for at least the next 500ms)","Resolved.
Is the codestyle fine like this? (I am quite blind in this respect 😅.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,345,2021-04-05T21:04:31Z,2021-04-12T20:50:27Z,2021-08-13T15:56:36Z,MERGED,True,145,0,4,https://github.com/kareltucek,Add minimalistic debug library.,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/345,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/345#issuecomment-818224266,"This is just an offer of my private debugging mini library.
It is quite handy when one needs to watch just a couple of variables.
Usage:

Define/uncomment WATCHES directive.
Place some watches (i.e., macro calls) into the code, while specifying unique slot in range 0-6 as second parameter.
While using the keyboard, tap one of the left half top row keys.
Led display will start watching that value every 500ms (i.e., first call of the macro after 500ms since last call is shown onto display and will remain for at least the next 500ms)","Well done, and thank you! :)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,346,2021-04-05T23:09:33Z,2021-04-08T22:02:48Z,2021-04-09T17:03:28Z,MERGED,True,8,9,6,https://github.com/steamraven,bugfix: isModuleactive ,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/346,https://github.com/steamraven,1,https://github.com/UltimateHackingKeyboard/firmware/pull/346,This fixes some bugs in ismoduleActive and its use in parseKeymap.,This fixes some bugs in ismoduleActive and its use in parseKeymap.,True,{'HEART': ['https://github.com/mondalaci']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,347,2021-04-06T19:15:08Z,2021-04-07T09:33:07Z,2021-04-07T10:03:59Z,MERGED,True,9,1,1,https://github.com/kareltucek,Fix release instructions in README.md,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/347,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/347,Should decrease amount of confusion around misbehaving npm... UltimateHackingKeyboard/agent#1475,Should decrease amount of confusion around misbehaving npm... UltimateHackingKeyboard/agent#1475,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,347,2021-04-06T19:15:08Z,2021-04-07T09:33:07Z,2021-04-07T10:03:59Z,MERGED,True,9,1,1,https://github.com/kareltucek,Fix release instructions in README.md,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/347,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/347#issuecomment-814768032,Should decrease amount of confusion around misbehaving npm... UltimateHackingKeyboard/agent#1475,"Looks like the points below ""To build a full firmware tarball:"" are not indented and numbered properly.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,347,2021-04-06T19:15:08Z,2021-04-07T09:33:07Z,2021-04-07T10:03:59Z,MERGED,True,9,1,1,https://github.com/kareltucek,Fix release instructions in README.md,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/347,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/347#issuecomment-814782071,Should decrease amount of confusion around misbehaving npm... UltimateHackingKeyboard/agent#1475,"I see, will fix it.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,347,2021-04-06T19:15:08Z,2021-04-07T09:33:07Z,2021-04-07T10:03:59Z,MERGED,True,9,1,1,https://github.com/kareltucek,Fix release instructions in README.md,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/347,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/347#issuecomment-814785411,Should decrease amount of confusion around misbehaving npm... UltimateHackingKeyboard/agent#1475,"A bit better now, although newline convention of IDE setup 3 is still not respected for some reason (no idea why).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/350,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/350#issuecomment-817126587,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","Great job at noticing the SQUAL value (of which I didn't know), and excellent job at exposing the value via the LED display. I've made some tests with the 3 balls we currently provide with the trackball module.

The red plastic ball is my favorite, and its tracking is flawless. Its SQUAL value is 30.
The black resin ball generally has good tracking, but the sensor doesn't detect swift motions from time to time. Its SQUAL value is 40.
The steel ball has flawless tracking, and its SQUAL value is 60.

Given the above findings, the SQUAL value doesn't precisely correlate with tracking accuracy, and it's rather a development feature, so I rather wouldn't merge this PR.
Nevertheless, seeing the SQUAL value is interesting and educational, so anyone interested is welcome to give a shot:
uhk-firmware-squal-8.10.8.tar.gz
Even though I don't merge this PR, I highly appreciate your work, and please keep it up!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/350#issuecomment-817128815,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","(Just for the record, I would love to be able to do testing too, have prepared some resin balls with metallic pigment of my own, but without a functional trackball module, I simply cannot :-).)

Given the above findings, the SQUAL value doesn't precisely correlate with tracking accuracy, and it's rather a development feature, so I rather wouldn't merge this PR.

What about merging it into a separate development branch? If that's fine with you, I will implement reading of the ""camera"" output, do some refactors and then it can live in your repository... would prefer that over having to juggle with a dozen of branches in my repos.

The black resin ball generally has good tracking, but the sensor doesn't detect swift motions from time to time. Its SQUAL value is 40.

Just out of curiosity what value will you get if you polish the ball gently with a bit of resin polish paste (in order to simulate what happens to the ball after some months of use)?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/350#issuecomment-817130457,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","* The black resin ball generally has good tracking, but the sensor doesn't detect swift motions from time to time. Its SQUAL value is 40.


But that's not a problem of the SQUAL command. If you read the datasheet, you will notice that is uses dynamically adjusted shutter interval.
In order to pick up black surface, it obviously will need to use much longer shutter interval in order to get the same amount of light. Results are two:


the image is going to be over-exposed. Yielding something that can detect many details on the ball, yet overall, the image is probably pretty bad quality.


fast movement is going to be blurred because of the longer shutter interval (and therefore miss out at high speeds). (Edit: It is not about blur - much more about framerate, because that has to drop significantly in order to pick up light.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/kareltucek,5,https://github.com/UltimateHackingKeyboard/firmware/pull/350#issuecomment-817130520,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","Will expose that, and probably also some other values too...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/350#issuecomment-817130990,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","Thanks for the explanation, but then, what the SQUAL value is supposed to indicate in practical terms?
How about forking this repo as a firmware-trackball-dev repo under your account? I think the suggested features are amusing and educational, but I'd rather keep this repo as clean as possible and not even have any extra branches.
I haven't forgotten about you, and we'll send you one of each production module and plenty of balls to play with. I'm waiting for a final ball; then we'll send your package. I wouldn't like to spend time polishing balls, but I'll make sure to send you extra balls for this purpose.",True,{'HEART': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/kareltucek,7,https://github.com/UltimateHackingKeyboard/firmware/pull/350#issuecomment-817131730,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","Thanks for the explanation, but then, what the SQUAL value is supposed to indicate in practical terms?

From the data sheet:

SQUAL (Surface Quality) is a measure of the number of valid features visible by the sensor in the current frame. The maximum SQUAL register value is 167. Since small changes in the current frame can result in changes in SQUAL, variations in SQUAL when looking at a surface are expected.

It just tells you data which are rock solid. Making out conclusions whose reliability is hard to quantify is up to you.

How about forking this repo as a firmware-trackball-dev repo under your account? I think the suggested features are amusing and educational, but I'd rather keep this repo as clean as possible and not even have any extra branches.

It seems like I will have to :D. Fair enough.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/kareltucek,8,https://github.com/UltimateHackingKeyboard/firmware/pull/350#issuecomment-823479659,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","Allright, the new module has arrived, an therefore - here goes some data:





Min squal
Shutter
Observed rating
Computed rating
Note




Production balls (matte)







Steel ball
40
100
500
400



Red Plastic ball
13 (avg 30)
200
100
65



Black resin ball
45
400
170
128



Modified prod balls







Polished black resin
20
1000 (600-2000)
40
20



Custom resin balls (all shiny)







Blackish
60
400
170
150



Bronze (J&L)
90
70
1100
1285



Yellow (J&L)
70
60
1400
1166



Blue (J&L)
60
600 (400-2000)
100
100



Red
110
200 (100-500)
500
550



Custom resin balls (all shiny) gen 2







Wine Red (mica)
80
100 (60-300)
600-1500
800



Bronze (mica)
100
60 (30-150)
1300
1666




Column meaning:

Squal is taken as minimum encountered value (the minimum is computed by firmware across 500ms intervals, which are then shown on the display).
Shutter is a rough average.
Observed rating and Computed rating are taken by the formule below. Observed one is computed on board from current values, while the computed one is computed from the first two columns. (The computed one uses the minimum squal while observed one uses current value in the firmware, therefore the differences.)

My conclusions (or rather draft hypotheses) from this are:


All tested balls have a fair surface quality. Therefore the most important value is probably the shutter interval (which I believe stands for sharper image and better framerate of the sensor). The shorter the better. The ratings in the table are computed by squal * 1000 / shutter.


Therefore the most important column is probably shutter interval. Obviously lighter colours yield shorter values and should theoretically behave better with fast movement. (This correlates with your liking of the red and steel balls. The rating metric is obviously not perfect.)


While the matte black balls have relatively low shutter (~400), a polished black ball has still decent squal, but significantly worse shutter (800-2000). This (probably) means that specular highlight is (correctly) reflected away from the sensor. Consequently, diffuse/subsurface texture is picked up by the sensor. This is good news. Probably means that all your problems are in the balls and not in the housing.


High shutter value for shiny balls might mean that bad pickup quality of your shiny balls was most likely caused by combination of lack of subsurface texture and insufficient amount of light that could be picked up by the sensor. (Since shiny balls reflected most of the light away from the sensor, and consequently there was not enough diffuse light to be picked up.)


Unfortunately, the custom balls are all pretty low quality so I cannot actually test how fast motion fares in practice. This makes the analysis an entirely theoretical thing.


Custom balls are all shiny resin balls with some added pigment to give them a grainy glittering subsurface texture. I will probably make some higher quality ones sometime in the future...",True,{'THUMBS_UP': ['https://github.com/mondalaci']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/kareltucek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/350#issuecomment-823491830,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","(If anyone wants to try it out - uhk-firmware-8.10.8.squalv2.tar.gz . ~ = squal, 1 = min squal, 2 = shutter, 3 = rating)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,350,2021-04-09T23:41:47Z,2021-04-10T12:08:09Z,2021-06-17T23:37:02Z,CLOSED,False,148,6,12,https://github.com/kareltucek,Squal,7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/350,https://github.com/kareltucek,10,https://github.com/UltimateHackingKeyboard/firmware/pull/350#issuecomment-841893377,"Here is some code that shows trackball's surface quality value by default on the led display (slot 0, activated via left half's ~ key).
This is more for reference and testing than a serious PR, process it however you want.
In any case if you decide to merge it, you will want to throw out the WATCH_VALUE call and WATCHES  define first...","The squal branch is now able to stream data from the sensor and show them on screen in ""real"" time. Some shots either at:

http://ktweb.cz/uhk_balls/
or https://github.com/kareltucek/uhk-squal_research-agent/tree/master/packages/usb/Balls

The code now lives in separate repositories:

https://github.com/kareltucek/uhk-squal_research-agent
https://github.com/kareltucek/uhk-squal_research-firmware",True,{'HEART': ['https://github.com/mondalaci']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,352,2021-04-14T22:36:38Z,2021-04-15T15:59:49Z,2021-08-13T15:55:40Z,CLOSED,False,16,7,1,https://github.com/kareltucek, Apply additional acceleration to caret mode. ,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/352,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/352,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,352,2021-04-14T22:36:38Z,2021-04-15T15:59:49Z,2021-08-13T15:55:40Z,CLOSED,False,16,7,1,https://github.com/kareltucek, Apply additional acceleration to caret mode. ,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/352,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/352#issuecomment-820543908,,"I've been playing with various values as suggested, but the master branch feels much better, so I'm closing this PR.
Thanks for tweaking it regardless!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,355,2021-04-18T13:32:09Z,2021-04-18T17:17:43Z,2021-04-18T17:17:46Z,MERGED,True,2,2,1,https://github.com/ert78gb,fix: change device ids,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/355,https://github.com/ert78gb,1,https://github.com/UltimateHackingKeyboard/firmware/pull/355,When implemented the UltimateHackingKeyboard/agent#1483 identified the current v1 device uses 1 deviceId.,When implemented the UltimateHackingKeyboard/agent#1483 identified the current v1 device uses 1 deviceId.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,356,2021-04-19T20:16:33Z,2021-04-19T21:59:47Z,2021-08-13T15:55:39Z,MERGED,True,2,2,1,https://github.com/kareltucek,Fix caret mode,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/356,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/356,Closes #354.,Closes #354.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,356,2021-04-19T20:16:33Z,2021-04-19T21:59:47Z,2021-08-13T15:55:39Z,MERGED,True,2,2,1,https://github.com/kareltucek,Fix caret mode,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/356,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/356#issuecomment-822814455,Closes #354.,Thanks so much for the quick fix!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,357,2021-04-19T20:30:24Z,2021-04-20T19:15:54Z,2021-08-13T15:55:34Z,MERGED,True,2,1,1,https://github.com/kareltucek,Fix interruptions of doubletap toggle.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/357,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/357,Closes #327.,Closes #327.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,358,2021-04-19T20:52:05Z,2021-05-02T16:19:54Z,2021-08-13T16:00:04Z,MERGED,True,38,0,2,https://github.com/kareltucek,Port keystroke delay.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/358,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/358,Closes #353.,Closes #353.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,358,2021-04-19T20:52:05Z,2021-05-02T16:19:54Z,2021-08-13T16:00:04Z,MERGED,True,38,0,2,https://github.com/kareltucek,Port keystroke delay.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/358,https://github.com/kareltucek,2,https://github.com/UltimateHackingKeyboard/firmware/pull/358#issuecomment-822777499,Closes #353.,"(This, if set to non-zero value, currently slows down all firmware scancode actions such as macros or caret mode. Atm., I consider it a feature...)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,358,2021-04-19T20:52:05Z,2021-05-02T16:19:54Z,2021-08-13T16:00:04Z,MERGED,True,38,0,2,https://github.com/kareltucek,Port keystroke delay.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/358,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/358#issuecomment-824159838,Closes #353.,"I set the delay to 300. The first character appeared instantly, then rapidly typed characters afterward appeared with significant delay. The delay wasn't 300 ms, but more like a second, and shortly, some of the keys behaved as they got stuck.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,358,2021-04-19T20:52:05Z,2021-05-02T16:19:54Z,2021-08-13T16:00:04Z,MERGED,True,38,0,2,https://github.com/kareltucek,Port keystroke delay.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/358,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/358#issuecomment-824635772,Closes #353.,"I set the delay to 300. The first character appeared instantly,

This is correct.

then rapidly typed characters afterward appeared with significant delay. The delay wasn't 300 ms, but more like a second, and shortly,

300ms is interval between report changes. Since every keystroke consists of  two such changes (keydown and keyup) or more (extra modifier reports), the observed delay should be 600ms. Give or take 30% on inaccuracies of the firmware timer.

some of the keys behaved as they got stuck.

The postponer's queue is 32 events deep, which is 16 keystrokes. If it gets almost filled, it will usually start replaying keys one by one even if the postponing mode is kept active, except for the keystroke delay which is honored in all situations.
So if you set this ridiculously long delay and overfill the buffer, then I guess loosing some of he events is an almost correct behaviour. Except that having keys stuck is not good -> fixed.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,358,2021-04-19T20:52:05Z,2021-05-02T16:19:54Z,2021-08-13T16:00:04Z,MERGED,True,38,0,2,https://github.com/kareltucek,Port keystroke delay.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/358,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/358#issuecomment-824659238,Closes #353.,"The stuck keys issue got resolved, indeed, but

When I use the 300ms value, type ""asdf"" quickly, and don't hold the ""f"" key, I get ""asdffffffffffffffffff"".
When the postponer kicks in, module pointer movement becomes jaggy.

I'm unsure whether the above is considered normal, but they're not ideal.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,358,2021-04-19T20:52:05Z,2021-05-02T16:19:54Z,2021-08-13T16:00:04Z,MERGED,True,38,0,2,https://github.com/kareltucek,Port keystroke delay.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/358,https://github.com/kareltucek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/358#issuecomment-824697042,Closes #353.,"The stuck keys issue got resolved, indeed, but
1. When I use the 300ms value, type ""asdf"" quickly, and don't hold the ""f"" key, I get ""asdffffffffffffffffff"".


Standard ""autorepeat"" delay of most operating systems is 400ms. Which means that yeah - by definition the behaviour is correct. (And at 5ms resolution is a non-issue.)

2. When the postponer kicks in, module pointer movement becomes jaggy.

I'm unsure whether the above is considered normal, but they're not ideal.

This is again specific to the keystroke delay, not to the postponer. Since I never move cursor while writing heavily at the same time, I consider it a non issue. Of course the situation can be improved, but would probably need some refactors and would make the code more complex.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,358,2021-04-19T20:52:05Z,2021-05-02T16:19:54Z,2021-08-13T16:00:04Z,MERGED,True,38,0,2,https://github.com/kareltucek,Port keystroke delay.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/358,https://github.com/mondalaci,7,https://github.com/UltimateHackingKeyboard/firmware/pull/358#issuecomment-825445384,Closes #353.,"I've been testing more in the meantime. Even a 10ms delay interferes with the caret mode substantially, as caret navigation becomes slower, and I often change lines in the IDE inadvertently.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,358,2021-04-19T20:52:05Z,2021-05-02T16:19:54Z,2021-08-13T16:00:04Z,MERGED,True,38,0,2,https://github.com/kareltucek,Port keystroke delay.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/358,https://github.com/kareltucek,8,https://github.com/UltimateHackingKeyboard/firmware/pull/358#issuecomment-830807812,Closes #353.,"Sorry for the delay - this inquiry needed a bit testing and thinking on my part... unfortunately while testing the 10ms delay + caret mode, I have ran into strange problems (namely caret mode getting stuck) that so far withstanded all my debugging attempts.
But to the point:

I've been testing more in the meantime. Even a 10ms delay interferes with the caret mode substantially, as caret navigation becomes slower, and I often change lines in the IDE inadvertently.

The keystroke delay inherently does slow down the caret navigation. That is known since by definition it is supposed to make firmware send at most one usb state change per the delay interval. After looking into the code, I am afraid I am not able to make an exception for the caret mode in a simple manner.
Also, axis locking breaks due to the keystroke delay, since over the 10ms chunks of time, much larger deltas are fed into the algorithm - namely sufficiently large to override current lock. I can deal with this by resetting the module deltas over the delayed time. This is also likely to solve the problem which I mentioned in the beginning, but unfortunately without uncovering the root cause.
The question is whether such solution is desired.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,358,2021-04-19T20:52:05Z,2021-05-02T16:19:54Z,2021-08-13T16:00:04Z,MERGED,True,38,0,2,https://github.com/kareltucek,Port keystroke delay.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/358,https://github.com/mondalaci,9,https://github.com/UltimateHackingKeyboard/firmware/pull/358#issuecomment-830834070,Closes #353.,@kareltucek Thanks for your PR and for addressing the pointer delta issue!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,362,2021-05-02T06:13:55Z,2021-05-02T07:38:44Z,2021-05-09T11:09:06Z,MERGED,True,1,0,1,https://github.com/abcminiuser,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/362,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/362,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,362,2021-05-02T06:13:55Z,2021-05-02T07:38:44Z,2021-05-09T11:09:06Z,MERGED,True,1,0,1,https://github.com/abcminiuser,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/362,https://github.com/apps/cla-sign-bot,2,https://github.com/UltimateHackingKeyboard/firmware/pull/362#issuecomment-830757600,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.",The CLA sign PR can contain only the latest CLA file!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,362,2021-05-02T06:13:55Z,2021-05-02T07:38:44Z,2021-05-09T11:09:06Z,MERGED,True,1,0,1,https://github.com/abcminiuser,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/362,https://github.com/apps/cla-sign-bot,3,https://github.com/UltimateHackingKeyboard/firmware/pull/362#issuecomment-830757834,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.",The CLA sign PR can contain only the latest CLA file!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,363,2021-05-02T06:32:22Z,2021-05-03T11:22:09Z,2021-05-09T11:11:51Z,MERGED,True,75,32,14,https://github.com/abcminiuser,"Enable and fix additional warnings, switch to -O3 and LTO.",7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/363,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/363,"This is more of a RFC than an actual request to pull as-is. I'm just getting acquainted with the project and code.
This is a roll-up of several minor changes:


Switching from -O3 to -Os. Most ARM embedded platforms don't really gain a whole lot from -O3 other than code bloat, and generally any hot loops can be marked as such with attributes, or compiled with alternative settings.


Enabling Link Time Optimization. As long as we're OK targeting modern GCC installations, i.e. GCC 8+, LTO is quite stable for ARM Cortex M. This greatly reduces the code size and helps inlining across translation units, leading to smaller and faster code.


Right V2 firmware with -O3:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:         52 KB       463 KB     11.23%
          m_data:       53496 B        64 KB     81.63%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%

Right V2 firmware with LTO and -Os:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       39384 B       463 KB      8.31%
          m_data:       52288 B        64 KB     79.79%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%



Enabling additional warnings. Fairly self-explanatory. I've disabled some of the nosier ones that are enabled with -Wextra and patched the code to fix the new warnings that were generated.


Add missing const to pointer params. Just a few instances I noticed where functions that were not expected to alter their pointer arguments pass into them, which I've now altered to be passed as const T`.


I've built and tested the repo on my local Drone CI, and built/flashed my new V2 unit with it without any apparent issues.","This is more of a RFC than an actual request to pull as-is. I'm just getting acquainted with the project and code.
This is a roll-up of several minor changes:


Switching from -O3 to -Os. Most ARM embedded platforms don't really gain a whole lot from -O3 other than code bloat, and generally any hot loops can be marked as such with attributes, or compiled with alternative settings.


Enabling Link Time Optimization. As long as we're OK targeting modern GCC installations, i.e. GCC 8+, LTO is quite stable for ARM Cortex M. This greatly reduces the code size and helps inlining across translation units, leading to smaller and faster code.


Right V2 firmware with -O3:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:         52 KB       463 KB     11.23%
          m_data:       53496 B        64 KB     81.63%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%

Right V2 firmware with LTO and -Os:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       39384 B       463 KB      8.31%
          m_data:       52288 B        64 KB     79.79%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%



Enabling additional warnings. Fairly self-explanatory. I've disabled some of the nosier ones that are enabled with -Wextra and patched the code to fix the new warnings that were generated.


Add missing const to pointer params. Just a few instances I noticed where functions that were not expected to alter their pointer arguments pass into them, which I've now altered to be passed as const T`.


I've built and tested the repo on my local Drone CI, and built/flashed my new V2 unit with it without any apparent issues.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,363,2021-05-02T06:32:22Z,2021-05-03T11:22:09Z,2021-05-09T11:11:51Z,MERGED,True,75,32,14,https://github.com/abcminiuser,"Enable and fix additional warnings, switch to -O3 and LTO.",7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/363,https://github.com/apps/cla-sign-bot,2,https://github.com/UltimateHackingKeyboard/firmware/pull/363#issuecomment-830759242,"This is more of a RFC than an actual request to pull as-is. I'm just getting acquainted with the project and code.
This is a roll-up of several minor changes:


Switching from -O3 to -Os. Most ARM embedded platforms don't really gain a whole lot from -O3 other than code bloat, and generally any hot loops can be marked as such with attributes, or compiled with alternative settings.


Enabling Link Time Optimization. As long as we're OK targeting modern GCC installations, i.e. GCC 8+, LTO is quite stable for ARM Cortex M. This greatly reduces the code size and helps inlining across translation units, leading to smaller and faster code.


Right V2 firmware with -O3:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:         52 KB       463 KB     11.23%
          m_data:       53496 B        64 KB     81.63%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%

Right V2 firmware with LTO and -Os:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       39384 B       463 KB      8.31%
          m_data:       52288 B        64 KB     79.79%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%



Enabling additional warnings. Fairly self-explanatory. I've disabled some of the nosier ones that are enabled with -Wextra and patched the code to fix the new warnings that were generated.


Add missing const to pointer params. Just a few instances I noticed where functions that were not expected to alter their pointer arguments pass into them, which I've now altered to be passed as const T`.


I've built and tested the repo on my local Drone CI, and built/flashed my new V2 unit with it without any apparent issues.","Thank you for your contribution!
Please sign the CLA.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,363,2021-05-02T06:32:22Z,2021-05-03T11:22:09Z,2021-05-09T11:11:51Z,MERGED,True,75,32,14,https://github.com/abcminiuser,"Enable and fix additional warnings, switch to -O3 and LTO.",7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/363,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/363#issuecomment-830819445,"This is more of a RFC than an actual request to pull as-is. I'm just getting acquainted with the project and code.
This is a roll-up of several minor changes:


Switching from -O3 to -Os. Most ARM embedded platforms don't really gain a whole lot from -O3 other than code bloat, and generally any hot loops can be marked as such with attributes, or compiled with alternative settings.


Enabling Link Time Optimization. As long as we're OK targeting modern GCC installations, i.e. GCC 8+, LTO is quite stable for ARM Cortex M. This greatly reduces the code size and helps inlining across translation units, leading to smaller and faster code.


Right V2 firmware with -O3:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:         52 KB       463 KB     11.23%
          m_data:       53496 B        64 KB     81.63%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%

Right V2 firmware with LTO and -Os:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       39384 B       463 KB      8.31%
          m_data:       52288 B        64 KB     79.79%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%



Enabling additional warnings. Fairly self-explanatory. I've disabled some of the nosier ones that are enabled with -Wextra and patched the code to fix the new warnings that were generated.


Add missing const to pointer params. Just a few instances I noticed where functions that were not expected to alter their pointer arguments pass into them, which I've now altered to be passed as const T`.


I've built and tested the repo on my local Drone CI, and built/flashed my new V2 unit with it without any apparent issues.","Thanks for your contribution!
Unfortunately, after flashing your branch, my UHK doesn't enumerate anymore over USB. Any ideas why?
I'm running gcc 9.3.0",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,363,2021-05-02T06:32:22Z,2021-05-03T11:22:09Z,2021-05-09T11:11:51Z,MERGED,True,75,32,14,https://github.com/abcminiuser,"Enable and fix additional warnings, switch to -O3 and LTO.",7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/363,https://github.com/abcminiuser,4,https://github.com/UltimateHackingKeyboard/firmware/pull/363#issuecomment-831076815,"This is more of a RFC than an actual request to pull as-is. I'm just getting acquainted with the project and code.
This is a roll-up of several minor changes:


Switching from -O3 to -Os. Most ARM embedded platforms don't really gain a whole lot from -O3 other than code bloat, and generally any hot loops can be marked as such with attributes, or compiled with alternative settings.


Enabling Link Time Optimization. As long as we're OK targeting modern GCC installations, i.e. GCC 8+, LTO is quite stable for ARM Cortex M. This greatly reduces the code size and helps inlining across translation units, leading to smaller and faster code.


Right V2 firmware with -O3:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:         52 KB       463 KB     11.23%
          m_data:       53496 B        64 KB     81.63%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%

Right V2 firmware with LTO and -Os:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       39384 B       463 KB      8.31%
          m_data:       52288 B        64 KB     79.79%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%



Enabling additional warnings. Fairly self-explanatory. I've disabled some of the nosier ones that are enabled with -Wextra and patched the code to fix the new warnings that were generated.


Add missing const to pointer params. Just a few instances I noticed where functions that were not expected to alter their pointer arguments pass into them, which I've now altered to be passed as const T`.


I've built and tested the repo on my local Drone CI, and built/flashed my new V2 unit with it without any apparent issues.","Interesting.
That's almost certainly the LTO -- it works for me on GCC 10 and in my experience has been OK for embedded ARM since GCC 8 or so, but it does depend on well defined behaviors of the code.
It's possible that there's some latent undefined behaviour in the Kinetis SDK or just a bad interaction on the version you have installed.
In that case, given the large amount of flash available, it's not worth trying to troubleshoot and can be re-disabled. The other changes in this branch should still be valid.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,363,2021-05-02T06:32:22Z,2021-05-03T11:22:09Z,2021-05-09T11:11:51Z,MERGED,True,75,32,14,https://github.com/abcminiuser,"Enable and fix additional warnings, switch to -O3 and LTO.",7,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/363,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/363#issuecomment-831197457,"This is more of a RFC than an actual request to pull as-is. I'm just getting acquainted with the project and code.
This is a roll-up of several minor changes:


Switching from -O3 to -Os. Most ARM embedded platforms don't really gain a whole lot from -O3 other than code bloat, and generally any hot loops can be marked as such with attributes, or compiled with alternative settings.


Enabling Link Time Optimization. As long as we're OK targeting modern GCC installations, i.e. GCC 8+, LTO is quite stable for ARM Cortex M. This greatly reduces the code size and helps inlining across translation units, leading to smaller and faster code.


Right V2 firmware with -O3:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:         52 KB       463 KB     11.23%
          m_data:       53496 B        64 KB     81.63%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%

Right V2 firmware with LTO and -Os:
Memory region         Used Size  Region Size  %age Used
    m_interrupts:          1 KB         1 KB    100.00%
          m_text:       39384 B       463 KB      8.31%
          m_data:       52288 B        64 KB     79.79%
        m_data_2:       41920 B      65280 B     64.22%
        m_noinit:          16 B        255 B      6.27%



Enabling additional warnings. Fairly self-explanatory. I've disabled some of the nosier ones that are enabled with -Wextra and patched the code to fix the new warnings that were generated.


Add missing const to pointer params. Just a few instances I noticed where functions that were not expected to alter their pointer arguments pass into them, which I've now altered to be passed as const T`.


I've built and tested the repo on my local Drone CI, and built/flashed my new V2 unit with it without any apparent issues.",LTO has indeed caused the issue and removing it made the firmware work with gcc 9.3.0. We can enable LTO later when newer GCC versions are more widely available.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,365,2021-05-04T22:00:00Z,2021-05-05T07:43:26Z,2021-08-13T16:00:08Z,MERGED,True,3,0,2,https://github.com/kareltucek,"Add ""legal"" way to disable mini trackball's navigation.",1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/365,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/365,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/steamraven,1,https://github.com/UltimateHackingKeyboard/firmware/pull/367,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-834781314,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","@steamraven Thanks so much for your PR and the detailed description! Your N-key rollover implementation works great on Linux and Windows 8, but it triggers all kinds of characters, keyboard combinations, and media keys on Mac.
@abcminiuser @xxxajk You guys are tremendously knowledgeable about USB. How do you suggest implementing N-key rollover in a cross-platform way and with boot protocol support?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/abcminiuser,3,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-834908954,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","Boot protocol support (the old legacy fixed report structures used to support simple hosts that lack a full report parser) is entirely orthogonal to the regular USB HID report protocol, and won't be affected by this.
I was actually going to start work on last last weekend only to find the only machine in the house old enough to have the USB 2.0 ports and controller needed to run the compliance test suite has died, so I need to source some other test hardware first to ensure I get all the implementation details right.
When the keyboard or mouse boot protocol is advertised on a HID interface, and the host enables it, the normal HID report structure of that interface is disabled, and the fixed report format specified in the HID documentation takes its place instead. The one further non-spec caveat to this is that MacOS (at least up to Catalina) will break horribly on boot protocol interfaces that have an OUT endpoint for host-to-device data, instead of using the control endpoint.
For N-Key rollover, I'll need to do some research as it's not something I've had to implement myself (always using the standard 6 key rollover support along with a key matrix that uses a diode per key to prevent ghosting). I'm certain compatibility will be the sticking point more than anything else, as I've had horrible troubles only recently trying to make ""standard and well specified"" implementations work across all the various OSes.",True,{'THUMBS_UP': ['https://github.com/mondalaci']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/steamraven,4,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-841596583,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","@mondalaci It is unfortunate that it is not working on Macs. Unfortunately, I was not able to test Macs, but I was really hopeful based on my Windows and Linux test.
All is not lost, though.  I found the the openbsd driver code, and it hasn't had much change in 5 years. And I bet it mostly the same in macOS ( I really wish more oses were open source).   Looking through the code, there is a hard limit of 128 bit fields and 6 scancodes.  The hybrid approach falls with this range, using 112 bit fields, and 6 element scancode list.
Here is that branch rebased to the latest on master. I wish I had a Mac to test on, but this works under windows 10 and linux
https://github.com/steamraven/firmware/releases/tag/v8.10.9-nkey-hybrid
The branch this is build from is:
https://github.com/steamraven/firmware/tree/nkey-hybrid
If testing works, I will update this pull request.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-841638739,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","@steamraven I've just tested your branch, and the issue persists on OSX.
How about implementing NKRO this way?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-851469729,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","I'm unsure whether I should have tested this PR, but I've just tested it, and it exhibits the same issues on MacOS as previously.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/steamraven,7,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-853266705,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","@mondalaci That is pretty weird. It is working fine on MacOS BigSur 11.4. Could it be a language or config setting?
Things I tested on MacOs:

All standard keystrokes
All Modifiers
Media Keys
Mouse Keys
Macro
Keys with modifiers
High scancodes (106,107, 145)

Here are the firmwares using all three methods (including the one linked by @mondalaci ). Each have a relevant branch.
https://github.com/steamraven/firmware/releases/tag/v8.10.10-nkey-bitfield
https://github.com/steamraven/firmware/releases/tag/v8.10.10-nkey-hybrid
https://github.com/steamraven/firmware/releases/tag/v8.10.10-nkey",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-854175862,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","@steamraven Your change actually works! Sorry, it was totally my bad. My git repo was messed up, I re-cloned it, flashed the firmware, and it works flawlessly with NKRO on, even on MacOS.
@kareltucek @abcminiuser It'd give me peace of mind if you guys could review this PR.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/kareltucek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-882552315,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","It'd give me peace of mind if you guys could review this PR.

Oops, did not notice your request.
Looks good, just two notes:

processTextAction (macro text action) does not seem to be converted, so it is probably going to do funny things.
It might be a good idea to abstract the pieces of code that add/remove basic scancodes - for better readability.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/benedekkupper,10,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1003628664,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","The commits look good from USB HID point of view. There is a possible synchronization bug when getting the HID protocol mode, I have submitted #439 which has the fix commits from this PR and another on top to facilitate getting the correct protocol mode. In addition, it would probably make sense to skip sending an assembled packet while the protocol has changed (when the packet has different layout in different protocol modes).
I'm not sufficiently familiar with the overall codebase to perform the rebase myself, as there was a major macro overhaul (53535a9) merged in recently that brings in a lot of conflicts.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/mondalaci,11,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1013746299,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release",@steamraven @benedekkupper @kareltucek Can any of you guys resolve the conflicts? Then I'd test it thoroughly and merge it.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/kareltucek,12,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1013746997,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","I will take a look, I guess they are consequence of the fork squash merge.",True,{'THUMBS_UP': ['https://github.com/mondalaci']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/kareltucek,13,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1015828603,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","@mondalaci @benedekkupper https://github.com/kareltucek/firmware/tree/nkey-bitfield_rebased is this PR with uhk/master merged in. I have resolved conflicts, refactored report handling and fixed logic around the macro engine, but I lack deeper understanding of the USB subsystem, so it would be ideal if you @benedekkupper could take over it again.
It seems to work fine, except first scancode doesn't get sent.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/mondalaci,14,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1019301032,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release",@kareltucek What do you mean by that the first scancode doesn't get sent?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/kareltucek,15,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1019520197,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","@mondalaci :

powercycle the UHK
(optional) give it a few seconds
(optional) tap a key to switch keymap (works as expected)
(focus text editor)
tap 'a' (nothing happens)
tap 'a' (""a"" appears in the text editor)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/mondalaci,16,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1020594158,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","@kareltucek Thanks for elaborating! The mentioned bug is a show-stopper. Now that common trunk is merged, would you please rebase this PR? It'd be much easier if we could work with this repo. Afterward, @benedekkupper will do his magic.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/kareltucek,17,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1020715527,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release",Here you go: https://github.com/UltimateHackingKeyboard/firmware/tree/nkey-rollover,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/mondalaci,18,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1022200682,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release",@kareltucek Thank you! I can reproduce the issue with the nkey-rollover branch.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/benedekkupper,19,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1040880804,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release","I have done my ""magic"", see #448. I revised the commits and put them in order for easy bisecting. Not tested at all yet, some testing / reviewing would be appreciated.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,367,2021-05-06T03:22:38Z,2022-02-18T17:19:39Z,2022-02-18T17:19:40Z,CLOSED,False,129,49,9,https://github.com/steamraven,Request for testing: Full N-Key support,6,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/367,https://github.com/mondalaci,20,https://github.com/UltimateHackingKeyboard/firmware/pull/367#issuecomment-1044870120,"Resolves #70.
This provides full, true nkey support.  This is one of three ways to implelemnt:
This implemented via a bitfield with one bit for every hid usage (scan-code).  All 222 of them. Plus the 8 modifier keys.
N-key is implemented only on the non-boot interface, so if a device uses the boot keyboard interface (like your bios firmware) it will get a normal, compatible keyboard.
Firmware bundle available here:
https://github.com/steamraven/firmware/releases/tag/v8.10.9
Pros:

Full n-key
Fast path in the keyboard driver

Cons:

Does not support scancodes above 0xE8
Unknown compatibility (especially with smaller embedded devices), though they should use the boot keyboard interface.

eh:

Middle of the pack packet size: 30 bytes

There are two other implementations:
62 key Scancode list
This basically takes the 6 key scancode list, and expands it to the max usb full-speed packet size.  This enable 62 simultanious keys.  Since there are 28 (left) + 30 (right) + 3 (module)  =61 non-modifier keys, this gives full n-key support
Pros:

N-key for normal operation
supports full 8-bit scancodes

Cons:

Slow path in the driver.  It executes a loop 2 * 62 * 62 = 7688 times per report
Large packet size - 64 bytes
Barely n-key. If you use modifier keys for real-scancodes, may get past 62 real keys

Hybrid:
This is hybrid of the two. It has bit field for the first 0x6C scancodes, and a 6 key list of scan-codes.  This covers all of the PC-AT and Mac scancodes within the bitfield
Pros:

Fast path in the keyboard driver: bit-field + only 6 scancodes
Smallest packet size: 21 bytes
n-key for normal operation
supports full 8-bit scancodes

cons:

If you use a lot of keys with scancodes over 0x6C, you may not have full n-key

If you would like to test these versions, I can put a together a firmware release",Superseded by #448 which just got merged.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,369,2021-05-08T09:51:26Z,2021-05-09T09:01:12Z,2021-05-16T08:25:16Z,MERGED,True,31,48,15,https://github.com/abcminiuser,Fix up mouse HID report descriptors.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/369,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/369,"I've noticed the key cluster trackball (mouse X/Y scrollwheel) is quite janky on my system, with movements being rather chaotic. I haven't had any luck with fixing that yet today - first I assumed the trackball was actually dual quadrature rather than pulsed axis, then I tried using ISRs to handle the pin changes just in case the MCU was missing them.
While testing, I did find a few oddities in the HID descriptors that should be corrected:

Constant padding entries should be marked as CONSTANT only, without DATA or other flags
The mouse X/Y wheel reports had some bizarre feature reports listed for configurable resolution multipliers that weren't actually implemented in the firmware
The mouse HID descriptors have some PUSH/POP HID entries in them that are both not required, and will have some very ""interesting"" (read: incorrect) behaviors on some systems.

This PR cleans up the HID report descriptors so we at least advertise to the host reports that we will actually send, or will actually consume.
The bcdDevice bump is to force Windows and other hosts to re-fetch the descriptors when the device re-enumerates, rather than using any cached versions.
This PR also changes the reported endpoint size of the system HID interface from 1 byte to the more standard 8 bytes; even if the extra bytes aren't used, it's better to report standard endpoint sizes for broader compatibility.","I've noticed the key cluster trackball (mouse X/Y scrollwheel) is quite janky on my system, with movements being rather chaotic. I haven't had any luck with fixing that yet today - first I assumed the trackball was actually dual quadrature rather than pulsed axis, then I tried using ISRs to handle the pin changes just in case the MCU was missing them.
While testing, I did find a few oddities in the HID descriptors that should be corrected:

Constant padding entries should be marked as CONSTANT only, without DATA or other flags
The mouse X/Y wheel reports had some bizarre feature reports listed for configurable resolution multipliers that weren't actually implemented in the firmware
The mouse HID descriptors have some PUSH/POP HID entries in them that are both not required, and will have some very ""interesting"" (read: incorrect) behaviors on some systems.

This PR cleans up the HID report descriptors so we at least advertise to the host reports that we will actually send, or will actually consume.
The bcdDevice bump is to force Windows and other hosts to re-fetch the descriptors when the device re-enumerates, rather than using any cached versions.
This PR also changes the reported endpoint size of the system HID interface from 1 byte to the more standard 8 bytes; even if the extra bytes aren't used, it's better to report standard endpoint sizes for broader compatibility.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,369,2021-05-08T09:51:26Z,2021-05-09T09:01:12Z,2021-05-16T08:25:16Z,MERGED,True,31,48,15,https://github.com/abcminiuser,Fix up mouse HID report descriptors.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/369,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/369#issuecomment-835755035,"I've noticed the key cluster trackball (mouse X/Y scrollwheel) is quite janky on my system, with movements being rather chaotic. I haven't had any luck with fixing that yet today - first I assumed the trackball was actually dual quadrature rather than pulsed axis, then I tried using ISRs to handle the pin changes just in case the MCU was missing them.
While testing, I did find a few oddities in the HID descriptors that should be corrected:

Constant padding entries should be marked as CONSTANT only, without DATA or other flags
The mouse X/Y wheel reports had some bizarre feature reports listed for configurable resolution multipliers that weren't actually implemented in the firmware
The mouse HID descriptors have some PUSH/POP HID entries in them that are both not required, and will have some very ""interesting"" (read: incorrect) behaviors on some systems.

This PR cleans up the HID report descriptors so we at least advertise to the host reports that we will actually send, or will actually consume.
The bcdDevice bump is to force Windows and other hosts to re-fetch the descriptors when the device re-enumerates, rather than using any cached versions.
This PR also changes the reported endpoint size of the system HID interface from 1 byte to the more standard 8 bytes; even if the extra bytes aren't used, it's better to report standard endpoint sizes for broader compatibility.",@abcminiuser Thanks so much for these fixes! We would have never noticed the USB-related issues. Do you think it was the cause of #314?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,369,2021-05-08T09:51:26Z,2021-05-09T09:01:12Z,2021-05-16T08:25:16Z,MERGED,True,31,48,15,https://github.com/abcminiuser,Fix up mouse HID report descriptors.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/369,https://github.com/abcminiuser,3,https://github.com/UltimateHackingKeyboard/firmware/pull/369#issuecomment-835770545,"I've noticed the key cluster trackball (mouse X/Y scrollwheel) is quite janky on my system, with movements being rather chaotic. I haven't had any luck with fixing that yet today - first I assumed the trackball was actually dual quadrature rather than pulsed axis, then I tried using ISRs to handle the pin changes just in case the MCU was missing them.
While testing, I did find a few oddities in the HID descriptors that should be corrected:

Constant padding entries should be marked as CONSTANT only, without DATA or other flags
The mouse X/Y wheel reports had some bizarre feature reports listed for configurable resolution multipliers that weren't actually implemented in the firmware
The mouse HID descriptors have some PUSH/POP HID entries in them that are both not required, and will have some very ""interesting"" (read: incorrect) behaviors on some systems.

This PR cleans up the HID report descriptors so we at least advertise to the host reports that we will actually send, or will actually consume.
The bcdDevice bump is to force Windows and other hosts to re-fetch the descriptors when the device re-enumerates, rather than using any cached versions.
This PR also changes the reported endpoint size of the system HID interface from 1 byte to the more standard 8 bytes; even if the extra bytes aren't used, it's better to report standard endpoint sizes for broader compatibility.","Hard to say, but I suspect that's more of an issue on the Linux end. The descriptors for the device were advertising reports that the device wouldn't accept, which could cause all sorts of issues, as well as using push/pops which are frequently implemented poorly.
More likely the device lacking support for boot protocol support is what's broken support with some KVMs and BIOS, and the lack of support for the mandatory HID interface requests like SetIdle and GetReport will break various hosts.
The best place to start would be to download and run the keyboard firmware (as it is now) against the USB-IF compliance test tool to see how many tests we fail. I've been trying to do that to see what needs to be fixed, but lack a Windows host with the required EHCI controller at the moment. If you do have suitable hardware, try running the full Chapter 9 tests along with the HID tests and send me the generated report - that will greatly help.
Getting 100% compliance with the tool doesn't guarantee no compatibility issues, but it at least gives us a fighting chance to work against most hosts.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,369,2021-05-08T09:51:26Z,2021-05-09T09:01:12Z,2021-05-16T08:25:16Z,MERGED,True,31,48,15,https://github.com/abcminiuser,Fix up mouse HID report descriptors.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/369,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/369#issuecomment-841713472,"I've noticed the key cluster trackball (mouse X/Y scrollwheel) is quite janky on my system, with movements being rather chaotic. I haven't had any luck with fixing that yet today - first I assumed the trackball was actually dual quadrature rather than pulsed axis, then I tried using ISRs to handle the pin changes just in case the MCU was missing them.
While testing, I did find a few oddities in the HID descriptors that should be corrected:

Constant padding entries should be marked as CONSTANT only, without DATA or other flags
The mouse X/Y wheel reports had some bizarre feature reports listed for configurable resolution multipliers that weren't actually implemented in the firmware
The mouse HID descriptors have some PUSH/POP HID entries in them that are both not required, and will have some very ""interesting"" (read: incorrect) behaviors on some systems.

This PR cleans up the HID report descriptors so we at least advertise to the host reports that we will actually send, or will actually consume.
The bcdDevice bump is to force Windows and other hosts to re-fetch the descriptors when the device re-enumerates, rather than using any cached versions.
This PR also changes the reported endpoint size of the system HID interface from 1 byte to the more standard 8 bytes; even if the extra bytes aren't used, it's better to report standard endpoint sizes for broader compatibility.","@abcminiuser You piqued my interest regarding the USB compatibility tool, which I was unaware of. I think my ThinkPad T520 has the required EHCI controller, and I've installed the tool, but I get the following upon pressing the Run button:

Looks like a permission issue. When right-clicking on the icon of the tool, the ""Run as Administrator"" option is unavailable. I'm not exactly a Windows guru. Any ideas?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,369,2021-05-08T09:51:26Z,2021-05-09T09:01:12Z,2021-05-16T08:25:16Z,MERGED,True,31,48,15,https://github.com/abcminiuser,Fix up mouse HID report descriptors.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/369,https://github.com/abcminiuser,5,https://github.com/UltimateHackingKeyboard/firmware/pull/369#issuecomment-841755279,"I've noticed the key cluster trackball (mouse X/Y scrollwheel) is quite janky on my system, with movements being rather chaotic. I haven't had any luck with fixing that yet today - first I assumed the trackball was actually dual quadrature rather than pulsed axis, then I tried using ISRs to handle the pin changes just in case the MCU was missing them.
While testing, I did find a few oddities in the HID descriptors that should be corrected:

Constant padding entries should be marked as CONSTANT only, without DATA or other flags
The mouse X/Y wheel reports had some bizarre feature reports listed for configurable resolution multipliers that weren't actually implemented in the firmware
The mouse HID descriptors have some PUSH/POP HID entries in them that are both not required, and will have some very ""interesting"" (read: incorrect) behaviors on some systems.

This PR cleans up the HID report descriptors so we at least advertise to the host reports that we will actually send, or will actually consume.
The bcdDevice bump is to force Windows and other hosts to re-fetch the descriptors when the device re-enumerates, rather than using any cached versions.
This PR also changes the reported endpoint size of the system HID interface from 1 byte to the more standard 8 bytes; even if the extra bytes aren't used, it's better to report standard endpoint sizes for broader compatibility.","Hrm, your user directory shouldn't be protected against apps run with your user account - more likely it's the (lack of) UTF-8 awareness in that tool that's breaking it (note the wonky characters in the path). The tool is fairly...errr...engineering quality, so I wouldn't be surprised. It might be worth making a new account with a latin name and see if that fixes it.
There's a newer 3.0 compliance tool that will run on newer xHCI USB host controllers, but I suspect it'll have the same issues even  if you have compatible hardware. It's been a frustrating week for me; of all the systems in my house, they either have a single USB controller (and I don't have any PS2 mice to control the app while the tester takes over the controller), have hardware failures since I last tried to boot them, or both.
I've ordered a cheap USB3 PCI Express card from eBay, so I should (finally) be able to run the tests myself later this week.
At a minimum you're going to fail the HID specific tests due to missing mandatory HID class requests. I've started work on those in https://github.com/abcminiuser/uhk-firmware/tree/feature/hid_class_requests but need to understand the timer system in the codebase before I can implement the SetIdle request. Once those are fixed, there's still legacy boot protocol to consider, as well as fixing any other failures the compliance tool points out.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,369,2021-05-08T09:51:26Z,2021-05-09T09:01:12Z,2021-05-16T08:25:16Z,MERGED,True,31,48,15,https://github.com/abcminiuser,Fix up mouse HID report descriptors.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/369,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/369#issuecomment-841785761,"I've noticed the key cluster trackball (mouse X/Y scrollwheel) is quite janky on my system, with movements being rather chaotic. I haven't had any luck with fixing that yet today - first I assumed the trackball was actually dual quadrature rather than pulsed axis, then I tried using ISRs to handle the pin changes just in case the MCU was missing them.
While testing, I did find a few oddities in the HID descriptors that should be corrected:

Constant padding entries should be marked as CONSTANT only, without DATA or other flags
The mouse X/Y wheel reports had some bizarre feature reports listed for configurable resolution multipliers that weren't actually implemented in the firmware
The mouse HID descriptors have some PUSH/POP HID entries in them that are both not required, and will have some very ""interesting"" (read: incorrect) behaviors on some systems.

This PR cleans up the HID report descriptors so we at least advertise to the host reports that we will actually send, or will actually consume.
The bcdDevice bump is to force Windows and other hosts to re-fetch the descriptors when the device re-enumerates, rather than using any cached versions.
This PR also changes the reported endpoint size of the system HID interface from 1 byte to the more standard 8 bytes; even if the extra bytes aren't used, it's better to report standard endpoint sizes for broader compatibility.","Thank you! Then I'm abandoning my attempts at the USB compliance too, and waiting for you. Excited about your findings!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,370,2021-05-09T04:55:20Z,2021-05-15T11:43:55Z,2021-05-15T11:44:41Z,CLOSED,False,4,4,1,https://github.com/abcminiuser,Ensure LEDs are updated on the key cluster when it is initialized.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/370,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/370,"Fixes #366.
When the key cluster is hot-swapped in, the LED driver wasn't pushing the initial LED driver states over correctly. This fixes that (although it's not immediately obvious to me why the module ID checks are needed at all) and updates the slave scheduler logic to initialize the modules when the firmware boots, and once when a module is connected (rather than continuously when disconnected).
I've tested by setting the cluster keys to various special modifiers, then hot-swapping it in and out. Without this patch the cluster LEDs are all a off-shade white (not the same as regular key white) and with the patch all the initial colours are set correctly.","Fixes #366.
When the key cluster is hot-swapped in, the LED driver wasn't pushing the initial LED driver states over correctly. This fixes that (although it's not immediately obvious to me why the module ID checks are needed at all) and updates the slave scheduler logic to initialize the modules when the firmware boots, and once when a module is connected (rather than continuously when disconnected).
I've tested by setting the cluster keys to various special modifiers, then hot-swapping it in and out. Without this patch the cluster LEDs are all a off-shade white (not the same as regular key white) and with the patch all the initial colours are set correctly.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,370,2021-05-09T04:55:20Z,2021-05-15T11:43:55Z,2021-05-15T11:44:41Z,CLOSED,False,4,4,1,https://github.com/abcminiuser,Ensure LEDs are updated on the key cluster when it is initialized.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/370,https://github.com/abcminiuser,2,https://github.com/UltimateHackingKeyboard/firmware/pull/370#issuecomment-841642102,"Fixes #366.
When the key cluster is hot-swapped in, the LED driver wasn't pushing the initial LED driver states over correctly. This fixes that (although it's not immediately obvious to me why the module ID checks are needed at all) and updates the slave scheduler logic to initialize the modules when the firmware boots, and once when a module is connected (rather than continuously when disconnected).
I've tested by setting the cluster keys to various special modifiers, then hot-swapping it in and out. Without this patch the cluster LEDs are all a off-shade white (not the same as regular key white) and with the patch all the initial colours are set correctly.","@mondalaci happy to split this into just the fix and a separate pull for the refactoring, if you prefer.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,370,2021-05-09T04:55:20Z,2021-05-15T11:43:55Z,2021-05-15T11:44:41Z,CLOSED,False,4,4,1,https://github.com/abcminiuser,Ensure LEDs are updated on the key cluster when it is initialized.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/370,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/370#issuecomment-841644699,"Fixes #366.
When the key cluster is hot-swapped in, the LED driver wasn't pushing the initial LED driver states over correctly. This fixes that (although it's not immediately obvious to me why the module ID checks are needed at all) and updates the slave scheduler logic to initialize the modules when the firmware boots, and once when a module is connected (rather than continuously when disconnected).
I've tested by setting the cluster keys to various special modifiers, then hot-swapping it in and out. Without this patch the cluster LEDs are all a off-shade white (not the same as regular key white) and with the patch all the initial colours are set correctly.","@abcminiuser Thanks, but I've noticed an issue with your PR. When reconnecting the left keyboard half, quite often, its LEDs don't turn on. In the meantime, I've fixed the key cluster LED initialization issue with 5d46451.
Theoretically, your fix should work, and I don't understand why it doesn't because the state machine is rather complex. Feel free to fix your PR, or we can abandon it if you choose so.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,370,2021-05-09T04:55:20Z,2021-05-15T11:43:55Z,2021-05-15T11:44:41Z,CLOSED,False,4,4,1,https://github.com/abcminiuser,Ensure LEDs are updated on the key cluster when it is initialized.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/370,https://github.com/abcminiuser,4,https://github.com/UltimateHackingKeyboard/firmware/pull/370#issuecomment-841644908,"Fixes #366.
When the key cluster is hot-swapped in, the LED driver wasn't pushing the initial LED driver states over correctly. This fixes that (although it's not immediately obvious to me why the module ID checks are needed at all) and updates the slave scheduler logic to initialize the modules when the firmware boots, and once when a module is connected (rather than continuously when disconnected).
I've tested by setting the cluster keys to various special modifiers, then hot-swapping it in and out. Without this patch the cluster LEDs are all a off-shade white (not the same as regular key white) and with the patch all the initial colours are set correctly.","If you have a better fix, let's abandon this as I fully admit I don't entirely understand the full update state machine yet.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,371,2021-05-09T10:47:57Z,2021-05-09T11:04:03Z,2021-05-09T11:10:26Z,MERGED,True,6,34,5,https://github.com/abcminiuser,"Remove Travis CI configuration file, update Drone config.",1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/371,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/371,"This removes the now unused Travis CI configuration, and updates the Drone build config to build with -Werror and verbose output (which will make figuring out build failures easier when they appear).","This removes the now unused Travis CI configuration, and updates the Drone build config to build with -Werror and verbose output (which will make figuring out build failures easier when they appear).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,372,2021-05-09T11:27:28Z,2021-05-09T12:00:52Z,2021-05-09T12:11:12Z,MERGED,True,7,0,1,https://github.com/abcminiuser,"Enable more warnings, generate assembly listing files.",1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/372,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/372,"There's a few more useful GCC warnings that aren't covered by -Wall -Wextra, enabled here.
When building in VERBOSE=1 mode, firmware builds will now generate assembly listing files (LSS) which can be inspected. These take a few seconds to generate, hence the current restriction to verbose builds.","There's a few more useful GCC warnings that aren't covered by -Wall -Wextra, enabled here.
When building in VERBOSE=1 mode, firmware builds will now generate assembly listing files (LSS) which can be inspected. These take a few seconds to generate, hence the current restriction to verbose builds.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,376,2021-05-22T00:10:12Z,2021-05-22T15:34:33Z,2021-05-23T00:24:20Z,MERGED,True,4,2,3,https://github.com/abcminiuser,Add missing logical min/max elements to the system keyboard HID report descriptor.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/376,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/376,"Fixed #375.
This patch adds in missing logical minimum/maximum elements to the system keyboard HID report descriptor, which are mandatory according to the HID spec.
Adding the extra elements showed up a secondary (previously benign) bug: the wrong HID descriptor length is sent to the host when the system keyboard HID descriptor is requested. This is only a problem now as the report length differs to the HID media keyboard HID descriptor with these changes.","Fixed #375.
This patch adds in missing logical minimum/maximum elements to the system keyboard HID report descriptor, which are mandatory according to the HID spec.
Adding the extra elements showed up a secondary (previously benign) bug: the wrong HID descriptor length is sent to the host when the system keyboard HID descriptor is requested. This is only a problem now as the report length differs to the HID media keyboard HID descriptor with these changes.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,377,2021-05-22T00:18:04Z,2021-05-22T13:43:10Z,2021-05-22T13:52:06Z,MERGED,True,29,29,10,https://github.com/abcminiuser,Swap naming of generic hid IN/OUT buffers.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/377,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/377,"This isn't a compliance fix, more of a correctness patch. The USB In/Out terminology should always be used with respect to the host, so ""In"" transactions flow from device to host.
The generic HID code in the firmware has the names reversed for the report buffers, which confused me at first. This patch swaps them around to use the correct terminology, and fixes a (currently) benign mis-use of the wrong report size constant (which currently works as the in/out lengths are identical).","This isn't a compliance fix, more of a correctness patch. The USB In/Out terminology should always be used with respect to the host, so ""In"" transactions flow from device to host.
The generic HID code in the firmware has the names reversed for the report buffers, which confused me at first. This patch swaps them around to use the correct terminology, and fixes a (currently) benign mis-use of the wrong report size constant (which currently works as the in/out lengths are identical).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,378,2021-05-22T00:31:36Z,2021-05-22T19:47:54Z,2021-05-23T00:24:43Z,MERGED,True,307,49,13,https://github.com/abcminiuser,Add support for additional mandatory HID class requests.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/378,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/378,"Fixes #374.
This implements the remaining HID class requests, several of which are mandatory for HID class interfaces that implement boot protocol functionality (the restricted subset of HID that is used by limited hosts, such as PC BIOS).

Add SetProtocol/GetProtocol:
Only mandatory for the boot protocol keyboard/mouse interfaces, as they advertise boot protocol support in the configuration descriptors. These should initially report 1 (report protocol) but should be settable to 0 (boot protocol) by the host on demand.

Happily we don't actually need to translate the reports themselves right now, as they are already boot protocol keyboard and mouse compliant - i.e. they are no more than 8 bytes in length, and the first N bytes match the boot protocol report structure given in the HID specification.
If the reports are adjusted later on, we might need to revisit this and add additional code to translate the complex reports to the restricted boot protocol subset when the host has enabled boot protocol mode.
The Kinetis SDK has a bug here which I've fixed, where it gives the wrong event callback to the application code.

Add SetIdle/GetIdle:
Mandatory in all cases; this allows the host to request that the device only send changed reports (idle period of 0) or to keep automatically re-issuing the same previous report every N*4 milliseconds. Implemented with software timers.

This one's tricky to validate as the compliance tool only does surface tests (can the idle period be adjusted) without actually verifying the correct number of reports per interval are issued.","Fixes #374.
This implements the remaining HID class requests, several of which are mandatory for HID class interfaces that implement boot protocol functionality (the restricted subset of HID that is used by limited hosts, such as PC BIOS).

Add SetProtocol/GetProtocol:
Only mandatory for the boot protocol keyboard/mouse interfaces, as they advertise boot protocol support in the configuration descriptors. These should initially report 1 (report protocol) but should be settable to 0 (boot protocol) by the host on demand.

Happily we don't actually need to translate the reports themselves right now, as they are already boot protocol keyboard and mouse compliant - i.e. they are no more than 8 bytes in length, and the first N bytes match the boot protocol report structure given in the HID specification.
If the reports are adjusted later on, we might need to revisit this and add additional code to translate the complex reports to the restricted boot protocol subset when the host has enabled boot protocol mode.
The Kinetis SDK has a bug here which I've fixed, where it gives the wrong event callback to the application code.

Add SetIdle/GetIdle:
Mandatory in all cases; this allows the host to request that the device only send changed reports (idle period of 0) or to keep automatically re-issuing the same previous report every N*4 milliseconds. Implemented with software timers.

This one's tricky to validate as the compliance tool only does surface tests (can the idle period be adjusted) without actually verifying the correct number of reports per interval are issued.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,379,2021-05-23T01:12:31Z,2021-05-23T14:36:01Z,2021-05-24T03:37:57Z,MERGED,True,11,4,4,https://github.com/abcminiuser,Replace incorrect/hard-coded GetDeviceStatus flags with correct remote wake-up information.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/379,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/379,"Fixes #373.
Note that this will not build as-is, and requires the following one-liner Kinetis K22 patch (which I am too time-poor to PR today, but can be manually applied if desired):
commit 3d73483096cc5a4387fa581486411ec01b1bb4ab (HEAD -> feature/add-device-get-status-event)
Author: Dean Camera <dean@fourwalledcubicle.com>
Date:   Sun May 23 10:56:16 2021 +1000

    Patch in a new device status callback event so the application layer can provide accurate information.

diff --git a/middleware/usb_1.0.0/device/usb_device.h b/middleware/usb_1.0.0/device/usb_device.h
index f60ac64..fff0622 100644
--- a/middleware/usb_1.0.0/device/usb_device.h
+++ b/middleware/usb_1.0.0/device/usb_device.h
@@ -110,6 +110,7 @@ typedef enum _usb_device_event
     kUSB_DeviceEventSetRemoteWakeup,            /*!< Enable or disable remote wakeup function. */
     kUSB_DeviceEventGetConfiguration,           /*!< Get current configuration index */
     kUSB_DeviceEventGetInterface,               /*!< Get current interface alternate setting value */
+    kUSB_DeviceEventGetDeviceStatus,            /*!< Get current device status flags (self powered, remote wake-up enabled) */
 } usb_device_event_t;

 /*! @brief Endpoint callback message structure */

This corrects the bafflingly hard-coded responses to GetDeviceStatus control requests from the host. This request is supposed to return the current device status flags including self/bus powered state and remote wakeup enable state, but right now just returns hard-coded SELF_POWER and REMOTE_WAKE_ENABLED flags.
This makes us fail USB compliance testing as the host is unable to see the remote wake feature being disabled after a SetFeature control request. That's mostly just a technical failure with no serious real-world implications, but it's worth getting right so we finally pass the compliance suite.
The other flag is more serious; we advertise that we are self powered all the time. We are an exclusively bus powered device with no internal or external means of power other than the host, and an over-zealous host may detect that we are drawing more than the 50mA budget allotted to self-powered devices and shut down the port. Most hosts are cheap and just use a 1A fuse per-port, but it's entirely possible that more correct implementations exist.
@mondalaci do you know the maximum real-world current draw of the keyboard with maximum brightness and all the LEDs on white? We will need to set that correctly in the USB descriptors -- but note that if it is more than ~150mA the keyboard may be rejected if plugged into unpowered USB hubs.","Fixes #373.
Note that this will not build as-is, and requires the following one-liner Kinetis K22 patch (which I am too time-poor to PR today, but can be manually applied if desired):
commit 3d73483096cc5a4387fa581486411ec01b1bb4ab (HEAD -> feature/add-device-get-status-event)
Author: Dean Camera <dean@fourwalledcubicle.com>
Date:   Sun May 23 10:56:16 2021 +1000

    Patch in a new device status callback event so the application layer can provide accurate information.

diff --git a/middleware/usb_1.0.0/device/usb_device.h b/middleware/usb_1.0.0/device/usb_device.h
index f60ac64..fff0622 100644
--- a/middleware/usb_1.0.0/device/usb_device.h
+++ b/middleware/usb_1.0.0/device/usb_device.h
@@ -110,6 +110,7 @@ typedef enum _usb_device_event
     kUSB_DeviceEventSetRemoteWakeup,            /*!< Enable or disable remote wakeup function. */
     kUSB_DeviceEventGetConfiguration,           /*!< Get current configuration index */
     kUSB_DeviceEventGetInterface,               /*!< Get current interface alternate setting value */
+    kUSB_DeviceEventGetDeviceStatus,            /*!< Get current device status flags (self powered, remote wake-up enabled) */
 } usb_device_event_t;

 /*! @brief Endpoint callback message structure */

This corrects the bafflingly hard-coded responses to GetDeviceStatus control requests from the host. This request is supposed to return the current device status flags including self/bus powered state and remote wakeup enable state, but right now just returns hard-coded SELF_POWER and REMOTE_WAKE_ENABLED flags.
This makes us fail USB compliance testing as the host is unable to see the remote wake feature being disabled after a SetFeature control request. That's mostly just a technical failure with no serious real-world implications, but it's worth getting right so we finally pass the compliance suite.
The other flag is more serious; we advertise that we are self powered all the time. We are an exclusively bus powered device with no internal or external means of power other than the host, and an over-zealous host may detect that we are drawing more than the 50mA budget allotted to self-powered devices and shut down the port. Most hosts are cheap and just use a 1A fuse per-port, but it's entirely possible that more correct implementations exist.
@mondalaci do you know the maximum real-world current draw of the keyboard with maximum brightness and all the LEDs on white? We will need to set that correctly in the USB descriptors -- but note that if it is more than ~150mA the keyboard may be rejected if plugged into unpowered USB hubs.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,379,2021-05-23T01:12:31Z,2021-05-23T14:36:01Z,2021-05-24T03:37:57Z,MERGED,True,11,4,4,https://github.com/abcminiuser,Replace incorrect/hard-coded GetDeviceStatus flags with correct remote wake-up information.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/379,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/379#issuecomment-846529909,"Fixes #373.
Note that this will not build as-is, and requires the following one-liner Kinetis K22 patch (which I am too time-poor to PR today, but can be manually applied if desired):
commit 3d73483096cc5a4387fa581486411ec01b1bb4ab (HEAD -> feature/add-device-get-status-event)
Author: Dean Camera <dean@fourwalledcubicle.com>
Date:   Sun May 23 10:56:16 2021 +1000

    Patch in a new device status callback event so the application layer can provide accurate information.

diff --git a/middleware/usb_1.0.0/device/usb_device.h b/middleware/usb_1.0.0/device/usb_device.h
index f60ac64..fff0622 100644
--- a/middleware/usb_1.0.0/device/usb_device.h
+++ b/middleware/usb_1.0.0/device/usb_device.h
@@ -110,6 +110,7 @@ typedef enum _usb_device_event
     kUSB_DeviceEventSetRemoteWakeup,            /*!< Enable or disable remote wakeup function. */
     kUSB_DeviceEventGetConfiguration,           /*!< Get current configuration index */
     kUSB_DeviceEventGetInterface,               /*!< Get current interface alternate setting value */
+    kUSB_DeviceEventGetDeviceStatus,            /*!< Get current device status flags (self powered, remote wake-up enabled) */
 } usb_device_event_t;

 /*! @brief Endpoint callback message structure */

This corrects the bafflingly hard-coded responses to GetDeviceStatus control requests from the host. This request is supposed to return the current device status flags including self/bus powered state and remote wakeup enable state, but right now just returns hard-coded SELF_POWER and REMOTE_WAKE_ENABLED flags.
This makes us fail USB compliance testing as the host is unable to see the remote wake feature being disabled after a SetFeature control request. That's mostly just a technical failure with no serious real-world implications, but it's worth getting right so we finally pass the compliance suite.
The other flag is more serious; we advertise that we are self powered all the time. We are an exclusively bus powered device with no internal or external means of power other than the host, and an over-zealous host may detect that we are drawing more than the 50mA budget allotted to self-powered devices and shut down the port. Most hosts are cheap and just use a 1A fuse per-port, but it's entirely possible that more correct implementations exist.
@mondalaci do you know the maximum real-world current draw of the keyboard with maximum brightness and all the LEDs on white? We will need to set that correctly in the USB descriptors -- but note that if it is more than ~150mA the keyboard may be rejected if plugged into unpowered USB hubs.","Thanks for your contribution!
Please see the power consumption of various UHK versions.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,379,2021-05-23T01:12:31Z,2021-05-23T14:36:01Z,2021-05-24T03:37:57Z,MERGED,True,11,4,4,https://github.com/abcminiuser,Replace incorrect/hard-coded GetDeviceStatus flags with correct remote wake-up information.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/379,https://github.com/abcminiuser,3,https://github.com/UltimateHackingKeyboard/firmware/pull/379#issuecomment-846531367,"Fixes #373.
Note that this will not build as-is, and requires the following one-liner Kinetis K22 patch (which I am too time-poor to PR today, but can be manually applied if desired):
commit 3d73483096cc5a4387fa581486411ec01b1bb4ab (HEAD -> feature/add-device-get-status-event)
Author: Dean Camera <dean@fourwalledcubicle.com>
Date:   Sun May 23 10:56:16 2021 +1000

    Patch in a new device status callback event so the application layer can provide accurate information.

diff --git a/middleware/usb_1.0.0/device/usb_device.h b/middleware/usb_1.0.0/device/usb_device.h
index f60ac64..fff0622 100644
--- a/middleware/usb_1.0.0/device/usb_device.h
+++ b/middleware/usb_1.0.0/device/usb_device.h
@@ -110,6 +110,7 @@ typedef enum _usb_device_event
     kUSB_DeviceEventSetRemoteWakeup,            /*!< Enable or disable remote wakeup function. */
     kUSB_DeviceEventGetConfiguration,           /*!< Get current configuration index */
     kUSB_DeviceEventGetInterface,               /*!< Get current interface alternate setting value */
+    kUSB_DeviceEventGetDeviceStatus,            /*!< Get current device status flags (self powered, remote wake-up enabled) */
 } usb_device_event_t;

 /*! @brief Endpoint callback message structure */

This corrects the bafflingly hard-coded responses to GetDeviceStatus control requests from the host. This request is supposed to return the current device status flags including self/bus powered state and remote wakeup enable state, but right now just returns hard-coded SELF_POWER and REMOTE_WAKE_ENABLED flags.
This makes us fail USB compliance testing as the host is unable to see the remote wake feature being disabled after a SetFeature control request. That's mostly just a technical failure with no serious real-world implications, but it's worth getting right so we finally pass the compliance suite.
The other flag is more serious; we advertise that we are self powered all the time. We are an exclusively bus powered device with no internal or external means of power other than the host, and an over-zealous host may detect that we are drawing more than the 50mA budget allotted to self-powered devices and shut down the port. Most hosts are cheap and just use a 1A fuse per-port, but it's entirely possible that more correct implementations exist.
@mondalaci do you know the maximum real-world current draw of the keyboard with maximum brightness and all the LEDs on white? We will need to set that correctly in the USB descriptors -- but note that if it is more than ~150mA the keyboard may be rejected if plugged into unpowered USB hubs.","Uh oh, 700mA is out of spec - the only hosts that can (legally) supply that are USB3.x ports, with special negotiation. For USB 2 ports, 500mA is the max current that can be negotiated between the host and device, with 100mA max draw being allowed before the configuration has been set.
I propose we merge in this fix so we accurately report the remote wake and power states to the host, even if we are still non-compliant for the power draw. We can then look into the power issue.
One immediate partial fix would be to specify 500mA max draw. This will prevent the keyboard from working in unpowered hub situations, but would be closer to the actual spec (especially since with the current code we would just draw wildly over spec current anyway).
We can then look into two areas to fix this up:

See if we can limit the overall max current to something close to 500mA. That would reduce the overall max brightness, but probably not by as much as you would imagine due to the non-linear response of the human eye
Potentially add a second configuration with a 100mA max current draw specified, so the keyboard can work in some limited fashion (no backlights?) when plugged into an unpowered hub.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,379,2021-05-23T01:12:31Z,2021-05-23T14:36:01Z,2021-05-24T03:37:57Z,MERGED,True,11,4,4,https://github.com/abcminiuser,Replace incorrect/hard-coded GetDeviceStatus flags with correct remote wake-up information.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/379,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/379#issuecomment-846532660,"Fixes #373.
Note that this will not build as-is, and requires the following one-liner Kinetis K22 patch (which I am too time-poor to PR today, but can be manually applied if desired):
commit 3d73483096cc5a4387fa581486411ec01b1bb4ab (HEAD -> feature/add-device-get-status-event)
Author: Dean Camera <dean@fourwalledcubicle.com>
Date:   Sun May 23 10:56:16 2021 +1000

    Patch in a new device status callback event so the application layer can provide accurate information.

diff --git a/middleware/usb_1.0.0/device/usb_device.h b/middleware/usb_1.0.0/device/usb_device.h
index f60ac64..fff0622 100644
--- a/middleware/usb_1.0.0/device/usb_device.h
+++ b/middleware/usb_1.0.0/device/usb_device.h
@@ -110,6 +110,7 @@ typedef enum _usb_device_event
     kUSB_DeviceEventSetRemoteWakeup,            /*!< Enable or disable remote wakeup function. */
     kUSB_DeviceEventGetConfiguration,           /*!< Get current configuration index */
     kUSB_DeviceEventGetInterface,               /*!< Get current interface alternate setting value */
+    kUSB_DeviceEventGetDeviceStatus,            /*!< Get current device status flags (self powered, remote wake-up enabled) */
 } usb_device_event_t;

 /*! @brief Endpoint callback message structure */

This corrects the bafflingly hard-coded responses to GetDeviceStatus control requests from the host. This request is supposed to return the current device status flags including self/bus powered state and remote wakeup enable state, but right now just returns hard-coded SELF_POWER and REMOTE_WAKE_ENABLED flags.
This makes us fail USB compliance testing as the host is unable to see the remote wake feature being disabled after a SetFeature control request. That's mostly just a technical failure with no serious real-world implications, but it's worth getting right so we finally pass the compliance suite.
The other flag is more serious; we advertise that we are self powered all the time. We are an exclusively bus powered device with no internal or external means of power other than the host, and an over-zealous host may detect that we are drawing more than the 50mA budget allotted to self-powered devices and shut down the port. Most hosts are cheap and just use a 1A fuse per-port, but it's entirely possible that more correct implementations exist.
@mondalaci do you know the maximum real-world current draw of the keyboard with maximum brightness and all the LEDs on white? We will need to set that correctly in the USB descriptors -- but note that if it is more than ~150mA the keyboard may be rejected if plugged into unpowered USB hubs.","I actually meant to set the default brightness of the UHK so that it draws 500 mA and almost forgot it. Then users would still be able to max it out via Agent, but at least it'd be in spec by default.
In practice, a number of USB keyboards draw more than 500 mA. I talked with Jacob Alexander of the Input Club, who designed many keyboards, and he said that drawing above 500 mA is rarely an issue in practice.
As for the choice you mentioned, I'm unsure which solution would be the best. What do you suggest in light (pun clearly intended) of the above?
I'll test and merge your PR soon.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,379,2021-05-23T01:12:31Z,2021-05-23T14:36:01Z,2021-05-24T03:37:57Z,MERGED,True,11,4,4,https://github.com/abcminiuser,Replace incorrect/hard-coded GetDeviceStatus flags with correct remote wake-up information.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/379,https://github.com/abcminiuser,5,https://github.com/UltimateHackingKeyboard/firmware/pull/379#issuecomment-846533522,"Fixes #373.
Note that this will not build as-is, and requires the following one-liner Kinetis K22 patch (which I am too time-poor to PR today, but can be manually applied if desired):
commit 3d73483096cc5a4387fa581486411ec01b1bb4ab (HEAD -> feature/add-device-get-status-event)
Author: Dean Camera <dean@fourwalledcubicle.com>
Date:   Sun May 23 10:56:16 2021 +1000

    Patch in a new device status callback event so the application layer can provide accurate information.

diff --git a/middleware/usb_1.0.0/device/usb_device.h b/middleware/usb_1.0.0/device/usb_device.h
index f60ac64..fff0622 100644
--- a/middleware/usb_1.0.0/device/usb_device.h
+++ b/middleware/usb_1.0.0/device/usb_device.h
@@ -110,6 +110,7 @@ typedef enum _usb_device_event
     kUSB_DeviceEventSetRemoteWakeup,            /*!< Enable or disable remote wakeup function. */
     kUSB_DeviceEventGetConfiguration,           /*!< Get current configuration index */
     kUSB_DeviceEventGetInterface,               /*!< Get current interface alternate setting value */
+    kUSB_DeviceEventGetDeviceStatus,            /*!< Get current device status flags (self powered, remote wake-up enabled) */
 } usb_device_event_t;

 /*! @brief Endpoint callback message structure */

This corrects the bafflingly hard-coded responses to GetDeviceStatus control requests from the host. This request is supposed to return the current device status flags including self/bus powered state and remote wakeup enable state, but right now just returns hard-coded SELF_POWER and REMOTE_WAKE_ENABLED flags.
This makes us fail USB compliance testing as the host is unable to see the remote wake feature being disabled after a SetFeature control request. That's mostly just a technical failure with no serious real-world implications, but it's worth getting right so we finally pass the compliance suite.
The other flag is more serious; we advertise that we are self powered all the time. We are an exclusively bus powered device with no internal or external means of power other than the host, and an over-zealous host may detect that we are drawing more than the 50mA budget allotted to self-powered devices and shut down the port. Most hosts are cheap and just use a 1A fuse per-port, but it's entirely possible that more correct implementations exist.
@mondalaci do you know the maximum real-world current draw of the keyboard with maximum brightness and all the LEDs on white? We will need to set that correctly in the USB descriptors -- but note that if it is more than ~150mA the keyboard may be rejected if plugged into unpowered USB hubs.","I've updated the review to include removal of the self-powered attribute and increase of the max current consumption to 500mA. That's the quickest way to make this closest to what is actually going on, as right now we effectively report a 50mA total draw to the host. You are correct that most hosts won't care and I am very aware of some commercial products that violate this - most hosts just use a 1A or so polyfuse for limiting without any smart monitoring.
If you want to try to support the use case of being inserted into an unpowered hub (without back-lighting at all) I can start doing some testing, although frankly I don't think it will be of much practical use. Doing so would require multiple alternative configuration descriptors which might decrease compatibility.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,379,2021-05-23T01:12:31Z,2021-05-23T14:36:01Z,2021-05-24T03:37:57Z,MERGED,True,11,4,4,https://github.com/abcminiuser,Replace incorrect/hard-coded GetDeviceStatus flags with correct remote wake-up information.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/379,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/379#issuecomment-846559065,"Fixes #373.
Note that this will not build as-is, and requires the following one-liner Kinetis K22 patch (which I am too time-poor to PR today, but can be manually applied if desired):
commit 3d73483096cc5a4387fa581486411ec01b1bb4ab (HEAD -> feature/add-device-get-status-event)
Author: Dean Camera <dean@fourwalledcubicle.com>
Date:   Sun May 23 10:56:16 2021 +1000

    Patch in a new device status callback event so the application layer can provide accurate information.

diff --git a/middleware/usb_1.0.0/device/usb_device.h b/middleware/usb_1.0.0/device/usb_device.h
index f60ac64..fff0622 100644
--- a/middleware/usb_1.0.0/device/usb_device.h
+++ b/middleware/usb_1.0.0/device/usb_device.h
@@ -110,6 +110,7 @@ typedef enum _usb_device_event
     kUSB_DeviceEventSetRemoteWakeup,            /*!< Enable or disable remote wakeup function. */
     kUSB_DeviceEventGetConfiguration,           /*!< Get current configuration index */
     kUSB_DeviceEventGetInterface,               /*!< Get current interface alternate setting value */
+    kUSB_DeviceEventGetDeviceStatus,            /*!< Get current device status flags (self powered, remote wake-up enabled) */
 } usb_device_event_t;

 /*! @brief Endpoint callback message structure */

This corrects the bafflingly hard-coded responses to GetDeviceStatus control requests from the host. This request is supposed to return the current device status flags including self/bus powered state and remote wakeup enable state, but right now just returns hard-coded SELF_POWER and REMOTE_WAKE_ENABLED flags.
This makes us fail USB compliance testing as the host is unable to see the remote wake feature being disabled after a SetFeature control request. That's mostly just a technical failure with no serious real-world implications, but it's worth getting right so we finally pass the compliance suite.
The other flag is more serious; we advertise that we are self powered all the time. We are an exclusively bus powered device with no internal or external means of power other than the host, and an over-zealous host may detect that we are drawing more than the 50mA budget allotted to self-powered devices and shut down the port. Most hosts are cheap and just use a 1A fuse per-port, but it's entirely possible that more correct implementations exist.
@mondalaci do you know the maximum real-world current draw of the keyboard with maximum brightness and all the LEDs on white? We will need to set that correctly in the USB descriptors -- but note that if it is more than ~150mA the keyboard may be rejected if plugged into unpowered USB hubs.","Thanks for the update! I'd much prefer not to support the more sophisticated use case at the expense of reduced compatibility.
As for the exact power consumption, how about branching based on DEVICE_ID and reporting 130 mA for DEVICE_ID_UHK60V1 and 500 mA for DEVICE_ID_UHK60V2?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,379,2021-05-23T01:12:31Z,2021-05-23T14:36:01Z,2021-05-24T03:37:57Z,MERGED,True,11,4,4,https://github.com/abcminiuser,Replace incorrect/hard-coded GetDeviceStatus flags with correct remote wake-up information.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/379,https://github.com/abcminiuser,7,https://github.com/UltimateHackingKeyboard/firmware/pull/379#issuecomment-846559824,"Fixes #373.
Note that this will not build as-is, and requires the following one-liner Kinetis K22 patch (which I am too time-poor to PR today, but can be manually applied if desired):
commit 3d73483096cc5a4387fa581486411ec01b1bb4ab (HEAD -> feature/add-device-get-status-event)
Author: Dean Camera <dean@fourwalledcubicle.com>
Date:   Sun May 23 10:56:16 2021 +1000

    Patch in a new device status callback event so the application layer can provide accurate information.

diff --git a/middleware/usb_1.0.0/device/usb_device.h b/middleware/usb_1.0.0/device/usb_device.h
index f60ac64..fff0622 100644
--- a/middleware/usb_1.0.0/device/usb_device.h
+++ b/middleware/usb_1.0.0/device/usb_device.h
@@ -110,6 +110,7 @@ typedef enum _usb_device_event
     kUSB_DeviceEventSetRemoteWakeup,            /*!< Enable or disable remote wakeup function. */
     kUSB_DeviceEventGetConfiguration,           /*!< Get current configuration index */
     kUSB_DeviceEventGetInterface,               /*!< Get current interface alternate setting value */
+    kUSB_DeviceEventGetDeviceStatus,            /*!< Get current device status flags (self powered, remote wake-up enabled) */
 } usb_device_event_t;

 /*! @brief Endpoint callback message structure */

This corrects the bafflingly hard-coded responses to GetDeviceStatus control requests from the host. This request is supposed to return the current device status flags including self/bus powered state and remote wakeup enable state, but right now just returns hard-coded SELF_POWER and REMOTE_WAKE_ENABLED flags.
This makes us fail USB compliance testing as the host is unable to see the remote wake feature being disabled after a SetFeature control request. That's mostly just a technical failure with no serious real-world implications, but it's worth getting right so we finally pass the compliance suite.
The other flag is more serious; we advertise that we are self powered all the time. We are an exclusively bus powered device with no internal or external means of power other than the host, and an over-zealous host may detect that we are drawing more than the 50mA budget allotted to self-powered devices and shut down the port. Most hosts are cheap and just use a 1A fuse per-port, but it's entirely possible that more correct implementations exist.
@mondalaci do you know the maximum real-world current draw of the keyboard with maximum brightness and all the LEDs on white? We will need to set that correctly in the USB descriptors -- but note that if it is more than ~150mA the keyboard may be rejected if plugged into unpowered USB hubs.","Yep, fixed (off to bed now, so that was good timing). I used 50mA units since that's what hosts will compute the loads in, practically speaking.
It'll be worth re-testing #219 with all these compliance fixes, as I know various MacOS versions are finicky about USB remote wake-up for devices that don't implement all the standard and HID class requests properly.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,393,2021-08-07T08:06:01Z,2021-08-07T15:22:33Z,2021-08-07T15:22:48Z,MERGED,True,12,12,4,https://github.com/abcminiuser,"Fix overflow of the HID idle period, when a period above 16 (64ms) is set.",1,"['bug', 'cla:signed']",https://github.com/UltimateHackingKeyboard/firmware/pull/393,https://github.com/abcminiuser,1,https://github.com/UltimateHackingKeyboard/firmware/pull/393,"I did this originally, locally, but later changed it to us units to avoid the division and forgot to update the size of the intermediate types. As a result, this causes an arithmetic overflow on HID idle periods above 64ms, which is very likely.
If set, the actual idle period would be extremely uneven, and much faster than intended - so BIOS and other reduced feature hosts would see many key repeats rather than just one or two per second.","I did this originally, locally, but later changed it to us units to avoid the division and forgot to update the size of the intermediate types. As a result, this causes an arithmetic overflow on HID idle periods above 64ms, which is very likely.
If set, the actual idle period would be extremely uneven, and much faster than intended - so BIOS and other reduced feature hosts would see many key repeats rather than just one or two per second.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,393,2021-08-07T08:06:01Z,2021-08-07T15:22:33Z,2021-08-07T15:22:48Z,MERGED,True,12,12,4,https://github.com/abcminiuser,"Fix overflow of the HID idle period, when a period above 16 (64ms) is set.",1,"['bug', 'cla:signed']",https://github.com/UltimateHackingKeyboard/firmware/pull/393,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/393#issuecomment-894668237,"I did this originally, locally, but later changed it to us units to avoid the division and forgot to update the size of the intermediate types. As a result, this causes an arithmetic overflow on HID idle periods above 64ms, which is very likely.
If set, the actual idle period would be extremely uneven, and much faster than intended - so BIOS and other reduced feature hosts would see many key repeats rather than just one or two per second.",Thank you for the fix!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,396,2021-08-12T15:26:50Z,2021-08-12T21:04:57Z,2021-08-13T15:54:30Z,CLOSED,False,23356,354,43,https://github.com/kareltucek,Kt fork rebase.,70,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/396,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/396,"So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/397,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)",True,"{'HEART': ['https://github.com/MatCyg', 'https://github.com/m42e', 'https://github.com/digitalsurgeon']}"
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-898935309,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","When I hold Mod+D, it gets mapped to Alt+Tab, but Alt is not held.
Extended macros should be enabled by default, and consequently, --extendedMacros, CUSTOM_CFLAGS=-DEXTENDED_MACROS, and processStockCommandAction() should be removed.

I keep testing your PR. This feature is super exciting, so please keep it up, @kareltucek!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-898937177,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Actually, I can't keep testing this PR until the Alt+Tab issue is fixed because I rely so heavily on it.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-899078261,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Regarding smart macro versioning, please extend protocolVersions with SMART_MACROS_{MAJOR,MINOR,PATCH}_VERSION and let's start with version 1.0.0
scripts/package.json should also be extended with smartMacrosVersion and so should generate-versions-h.js accordingly.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,5,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-903091590,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","1. When I hold Mod+D, it gets mapped to Alt+Tab, but Alt is not held.


Fixed. Caused by a typo which broke the ActiveLayerHeld flag. Only one of the two switcher types was affected.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-903174689,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)",Thanks for the fix! I'll be testing your PR for a while before merging it.,True,{'THUMBS_UP': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,7,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-903313928,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Some more code implemented on separate branch, please have a look at it and let's merge it into this branch. (I would create the PR in this repo, but github does not allow me to create a PR here that goes between two branches living in my repository...)
kareltucek#65",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,8,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-903340824,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)",Similarly with 12-layer support -> kareltucek#66,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-904996784,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","One more update - proper multiline support. Pushing directly into the PR branch since it deals with requirements of 351 directly, and does not touch original stock code much.
This was a bit troublesome affair, due to which I have after all refactored return values in entire macros.c. I also dropped the old $ notation, so extended commands are now available only by UltimateHackingKeyboard/agent#1545 agent. This also allows me to easily rectify the scheduling related problems. But for the moment, I don't plan to clutter this PR any more.
So atm., my suggestion is to review and merge kareltucek#65 and kareltucek#66 into this PR first, and then continue with testing and discussions of this PR.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,10,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-911687147,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","@kareltucek Please run $onInit, then $onKeymapChange $currentKeymap every time the configuration gets saved. The rationale is that many folks will be experimenting with various macro commands and parameters, and power cycling the UHK from time to time would be very cumbersome.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,11,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-911720231,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)",@mondalaci done.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,12,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-911794303,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","@kareltucek Thanks for the quick commit, but only $onInit gets called. I'd also like $onKeymapChange $currentKeymap to get called afterward.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,13,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-911802715,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","@mondalaci what exactly do you mean by $onKeymapChange $currentKeymap? I take $currentKeymap to stand for a  keymap abbreviation, like QTY, in full, $onKeymapChange QTY. That I believe works correctly.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,14,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-911825850,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","I mean that when saving the configuration, I expect $onInit to be called followed by $onKeymapChange QTY assuming that QTY is the current keymap. The same should happen upon firmware startup.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,15,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-911862388,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Retested. On save, both $onInit and $onKeymapChange QTY get executed. Their commands are interleaved, so if your two macros are overwriting the same value, result is either of the two.
On firmware startup, the same happens (both macros get executed), except any produced usb reports don't get sent, probably because USB stack is not initialized yet at that point? I assume that happens in the background via interrupt routines. I didn't pay much attention to this, but it is true that it should be probably fixed, even if only to avoid confusion. The update loop should probably not start until all interfaces are running properly. How do I determine the moment when everything is set up and working?
If you are still having issues with the ""on save"" behaviour, would you share your UserConfig?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,16,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-911992713,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","I tried to overwrite the same navigation mode value in $onInit and $onKeymapChange QTY, so that must be the culprit. I strongly feel that this use case should work, and I expect users to specify general settings in $onInit and keymap-specific settings in $onKeymapChange $keymapName, so the latter should be fully executed after the former, and the two macro events shouldn't interfere.
I agree that the USB stack is probably uninitialized at startup. There must be some variables, or better yet, callbacks that could be used to detect the initialization of the stack, but I don't know which ones, and I don't have time to look into this. In any case, this is not so important as the first issue.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,17,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-912032560,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Well... there is the other macro executor on https://github.com/kareltucek/firmware/tree/common_trunk_upstream (a branch which contains the other PRs as already merged and some more functionality that has accumulated since this PR was opened). Currently, it is considered experimental feature enabled by set macroEngine.scheduler blocking. So the proposal is to merge common_trunk_upstream directly and make that other executor default. It will need some little changes, but should fit the bill even without ugly hacking. In that case, execution order will be preserved as long as the $onInit macro event does not enter any waiting/sleeping state (that is, delay or holdKey, holdLayer and similar commands).
Otherwise I am open to suggestions.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,18,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-912052979,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)",Or I can alter current execution strategy to execute as many commands as possible in each cycle. Not sure how good idea that is however.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,19,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-912058384,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","What's the practical drawback of altering the current execution strategy?
In any case, after merging this PR, I'll make a release before merging additional PRs since it's already huge, and I want folks to be able to test the individual releases when encountering a bug.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,20,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-912090539,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Hard to tell. Except touchpad-related problems (which are targeted by one of those additional PRs), nothing serious I think. One drawback may be that if multiple macros are running, they will tend to fall in sync on output operations. Also, If anyone relies on stepping logic, they might be surprised. But those are corner cases that probably don't have practical relevance.
In the end the biggest practical drawback I can foresee is that the further your codebase is going to be from my own setup, the more troublesome may providing support be. (But this relates much more to the overall decision to go step-by-step than to the execution strategy itself.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,21,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-912118505,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)",There you go.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,22,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-951324390,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","I've been sitting on this PR for ages, and it's time to merge it. Let me give some feedback.
First up, let's not merge any more branches into this one, unless necessary because this PR is already quite overwhelming. Please resolve the conflict in this branch, though.
I haven't encountered any touchpad-related bugs. In case there are any known bugs that cause practical issues, please let me know how to reproduce them.
I'd much rather only have a minimal set of commands for the 1.0.0 version of smart macros, namely only set and printStatus. Please put all other commands into ifdefs, so you can enable them in your fork. I'd like to review the inactive commands one by one later.
I'd expect the error buffer to get flushed when fixing the macro commands in macro events and saving the configuration, so printStatusshouldn't output anything in such cases.
As for set, the bodies of some parameters are unimplemented, so the firmware doesn't error out when encountering them. I strongly feel that every unimplemented parameter should throw errors, so please don't only uncomment the bodies of unused parameters, but their branching, too.
set mouseKeys.move.* values should reflect the values of the Mouse speed page, so specified values should be transformed accordingly.
I strongly prefer to only support the # macro syntax. The // syntax adds redundancy.
I'd much prefer to use true vs false for boolean set values instead of 1 and 0 because it makes their boolean nature apparent.
I'd prefer using diagonalSpeedCompensation instead of compensateDiagonalSpeed. As a rule of thumb, using nouns instead of verbs feel right for set variable names.
I prefer stickyModifiers over stickyMods because it's more explicit and one can't mistake this command for the Mod layer this way. The values should be never instead of 0 and always instead of 1. But even more importantly, what's the practical significance of this setting? I'd only use the smart option and can't see why the other values are practical.
Do you know anyone who ever benefitted from adjusting debounceDelay? I'm afraid that some folks will be messing with sane factory defaults causing additional support burden.
What's the practical use of set chording?
In which pratical cases can set emergencyKey be useful?
Can you easily deactivate conditions, modifiers and labels for the time being. It'd keep smart macros 1.0.0 minimal?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,23,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-958715384,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Allright:

 - revert the revert of extended macros parameter.
 - clear error buffer when configuration is written
 - fill missing unimplemented throws.
 - fix mouseKeys.move.* multiplier


I strongly prefer to only support the # macro syntax. The // syntax adds redundancy.

# syntax is nice, but ambiguous. The language will probably need a proper tokenizer at some point, which will among other things deal with this ambiguity. I would prefer not to discuss it here and now.

 - extend boolean parsing to also accept true and false
 - rename  compensateDiagonalSpeed to diagonalSpeedCompensation.
 - rename stickyMods to stickyModifiers.


But even more importantly, what's the practical significance of this setting? I'd only use the smart option and can't see why the other values are practical.

I can't see a setting which makes ""random"" keys stuck on purpose as practical. The significance is that I am not using these keybindings and want to be able to disable a feature which is going to make my keyboard misbehave ""at random"".

Do you know anyone who ever benefitted from adjusting debounceDelay?

Yes. Me and p4elkin, for development purposes.

What's the practical use of set chording?

If I want to be able to strike complex chords as a single motion.
E.g., without having to pay attention to correct order and without having to mentally split the motion into multiple phases.

In which practical cases can set emergencyKey be useful?

Again, debug and development. Postponer-related features may cause the keyboard to lock up in case of either bug, or certain (although by definition correct) macro sequences. emergencyKey allows both debug and recovery from such conditions.

Can you easily deactivate conditions, modifiers and labels for the time being. It'd keep smart macros 1.0.0 minimal?

Yes, I can.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,24,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-958732785,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Done. Still, please note that I do not consider the decision to release several months old and deprecated code as an unquestionably good one.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,25,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-960268828,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Thanks for the quick changes!
The 0 and 1 values are still allowed as booleans. I'd like to restrict the use of false and true as the only accepted boolean values. I know they're a mouthful compared to 0 and 1, but they're more explicit, and users wouldn't mistake them for integer values.
Please give me some practical examples regarding the chording variable.

Done. Still, please note that I do not consider the decision to release several months old and deprecated code as an unquestionably good one.

What do you mean? Would you merge more commits into this PR to make it more up-to-date? I'd much rather merge this huge PR first and then merge separate PRs one by one afterward.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,26,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-960326362,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","The 0 and 1 values are still allowed as booleans. I'd like to restrict the use of false and true as the only accepted boolean values. I know they're a mouthful compared to 0 and 1, but they're more explicit, and users wouldn't mistake them for integer values.

Yes they are, and there is a reason for it - maintaining integer compatibility provides regular integer features - for instance substituting register values.

Please give me some practical examples regarding the chording variable.

If I hit A+Ctrl instead of Ctrl+A, UHK will still send Ctrl+A.


Done. Still, please note that I do not consider the decision to release several months old and deprecated code as an unquestionably good one.

What do you mean? Would you merge more commits into this PR to make it more up-to-date? I'd much rather merge this huge PR first and then merge separate PRs one by one afterward.

Those other three PRs are in fact open just for your convenience - so that you can read them and review them separately from other things if you wish. They are already merged into common_trunk_upstream, together with some other new features and refactors, which have been accumulating for some time already. As a consequence, from my point of view, this code is already quite old and partially irrelevant.
So yes, alternative is to jump straight to common_trunk_upstream (which - just as you say - contains more commits and is more up-to-date). I admit I am not entirelly sure which way to go - code in this PR is more stable, but since you want (non-set) commands disabled anyway, this (only) benefit does not apply. Apart from that, I can see only downsides to releasing outdated code.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,27,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-960536339,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","I'm not proposing getting rid of integer values. I'm proposing not using integers for booleans. Any objections?
I'll merge the rest of the PRs separately. I only plan to make a release afterward.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,28,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-962662878,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","As for the chording option, I'm sure that 50 ms is a reasonable default, but it may be practical to make this value configurable. Also, chordingDelay may be a more explicit name.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,29,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-967162491,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","As for the chording option, I'm sure that 50 ms is a reasonable default, but it may be practical to make this value configurable. Also, chordingDelay may be a more explicit name.

Both good suggestions.

I'm not proposing getting rid of integer values. I'm proposing not using integers for booleans. Any objections?

Technically taken still the same one - features provided by the integer subsystem which do benefit boolean settings this way too. Although to be fair, practical concerns are not very grave and the most proper solution is probably to introduce proper variable (register) typing (which then could also work with things like floats, keymap abbreviations, and scancode actions).
More importantly, I have realized that I actually do like the brevity of 1|0, and do not think that folks are going to have problems with this specific thing. (I mean - sure, smart macros do carry some support burden, but I think folks are going to be confused about actual features rather than about messing up integers with booleans.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,30,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-969371572,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","I'm fine with using 0 and 1 for booleans, but then please remove false and true for the sake of minimizing redundancy.
The speed settings of the key cluster module don't seem to affect its mini trackball except for the acceleration setting, which makes the mini trackball less responsive when set to 10, for example.
For the trackball, acceleration=1 works very well, but other values make me feel that the pointer follows my trackball movements poorly.
For the trackpoint, acceleration values such as 1.1 or 3 make pointer movements jaggy.
For the touchpad acceleration values, my experience is similar to the trackball.
I think the acceleration driver is a blessing because it allows for smooth movement at low speeds, but it can run wild quite early when experimenting with various values. Maybe the acceleration values should be limited to a range, to certain values, or for some modules, not even exposed, or else users will get confused and file bug reports. Interested in your opinion.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,31,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-969745351,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","I'm fine with using 0 and 1 for booleans, but then please remove false and true for the sake of minimizing redundancy.

Allright - is it fine like this, or do you have something else in mind?

The speed settings of the key cluster module don't seem to affect its mini trackball except for the acceleration setting, which makes the mini trackball less responsive when set to 10, for example.

Yes. This branch still contains your hardcoded speed settings (which is 5 for cursor, 1 otherwise). My reworked handling waits in kareltucek#65 .

For the trackpoint, acceleration values such as 1.1 or 3 make pointer movements jaggy.

I see. The pow does some crazy things to performance with exponent values greater than one. I have thrown in a fast approximate computation instead...

I think the acceleration driver is a blessing because it allows for smooth movement at low speeds, but it can run wild quite early when experimenting with various values. Maybe the acceleration values should be limited to a range, to certain values, or for some modules, not even exposed, or else users will get confused and file bug reports. Interested in your opinion.

I think we should wait whether or not people really get confused, and if they do, then see why. Then fix docs. Limiting the acceleration range might make sense, but I am afraid that just limiting it will not improve user experience a bit - it will cause the same non-intuitive effects (and consequent headaches) even within reasonable bounds.
In any case, recommended ranges should be clearly indicated in documentation (preferably worded as ""valid"" rather than ""recommended"").
(Btw., I indicate 0-1 as recommended range for the acceleration exponent.)

For the trackball, acceleration=1 works very well, but other values make me feel that the pointer follows my trackball movements poorly.
For the touchpad acceleration values, my experience is similar to the trackball.

This is very nondescript - If you have been trying acceleration values greater than 1, bad experience is expected since (1) such values are crazy high (2) the above pow performance issue.
As a rule of thumb, Acceleration exponent controls shape of the curve (i.e., low speed to high speed ratio), but does not serve to increase pointer speed. (I suspect that this misunderstanding will be a common one.) The curve sort of pivots around midSpeed (which currently is defined in code only) - increasing acceleration will increase the highest speeds and decrease the lowest ones, but will not really affect overall perception of speed/responsiveness.
Speed should be used to tune either the accelerated speed or the overall speed.
When Acceleration and Speed are tuned, BaseSpeed should be used to finetune the near-zero speed multiplier.
(Difference between BaseSpeed and Speed is that Speed is affected by Acceleration, while BaseSpeed is not. Therefore, nonzero BaseSpeed can be used as a counterweight to high Acceleration values.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,32,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-970154647,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","I'm fine with using 0 and 1 for booleans, but then please remove false and true for the sake of minimizing redundancy.

Allright - is it fine like this, or do you have something else in mind?

Currently, false and true are supported as valid boolean values in this branch. Please remove them, and only leave 0 and 1 as valid boolean values.

As a rule of thumb, Acceleration exponent controls shape of the curve (i.e., low speed to high speed ratio), but does not serve to increase pointer speed. (I suspect that this misunderstanding will be a common one.) The curve sort of pivots around midSpeed (which currently is defined in code only) - increasing acceleration will increase the highest speeds and decrease the lowest ones, but will not really affect overall perception of speed/responsiveness.

For this very reason, this setting shouldn't be named acceleration. We should come up with a more intuitive name. The way I see it, the primary role of this feature is to allow precise movement at lower speed while allowing fast movement at higher speed. The term ""precision smoothing"" is the best that comes to my mind. If you don't have a better alternative, please rename acceleration to precisionSmoothing in smart macro names and in the source. I agree that we should advise the [0, 1] interval as legit values for this setting.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,33,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-970236910,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","I'm fine with using 0 and 1 for booleans, but then please remove false and true for the sake of minimizing redundancy.

Allright - is it fine like this, or do you have something else in mind?

Currently, false and true are supported as valid boolean values in this branch.

No, they are not - now 0 and 1 are documented as valid booleans and other integers are accepted.

The term ""precision smoothing"" is the best that comes to my mind. If you don't have a better alternative, please rename acceleration to precisionSmoothing in smart macro names and in the source. I agree that we should advise the [0, 1] interval as legit values for this setting.

I am not convinced. I do not have a perfect name, but acceleration still describes the resulting effect of increasing speed gradient pretty well, and in linux the very same mouse settings is also called acceleration. (And in linux, it features the same non-intuitiveness as well.)
Maybe accelerationExponent? But then other values should probably be changed to speedMultiplier and baseSpeedMultiplier.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,34,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-970246326,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Or maybe accelerationExponent, accelerationMultiplier and baseSpeedMultiplier?
//Edit: not a very good one, since it does not cover that accelerationMultiplier will still affect speed even if accelerationExponent is set to zero.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,35,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-970273293,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Or we could switch to an actual exponential. That would remove some degree of freedom, but would make configuration a bit more intuitive.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,36,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-970458617,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","We shouldn't append Multiplier to the names of speed and baseSpeed. The actual variable names are simpler and describe the role of these variables well.
In the same vein, I don't think it's a good idea to change acceleration to accelerationExponent. We shouldn't bother users with math terms and make variable names as intuitive as possible. My main gripe with the acceleration name is that it affects both acceleration and deceleration. Actually, I can notice deceleration much more in the case of the trackpoint, and it helps greatly to hit small targets. Let's think about a better name a bit more.
Please only accept 0 and 1 for boolean values and throw an error is if any other value is specified.
I think the acceleration feature works well in the [0, 1] interval and shouldn't be modified.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,37,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-970463555,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)",I've just made up xceleration hinting at both deceleration and acceleration.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,38,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-970555826,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Please only accept 0 and 1 for boolean values and throw an error is if any other value is specified.

Ok.

I've just made up xceleration hinting at both deceleration and acceleration.

I like this idea.

Done",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,39,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-970576128,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Looks like you only switched to xceleration in the docs, but not in the code.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,40,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-970589796,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","Looks like you only switched to xceleration in the docs, but not in the code.

Indeed. Fixed.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mhantsch,41,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-971529671,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","If you want something more user understandable, how about naming xceleration -> speedboost or speedfactor ? (just tossing in my ideas.. ignore me if you don't like it)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,42,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-971657620,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","@mhantsch Thanks for the suggestion. speedboost suggests acceleration, even though deceleration is also involved, and speedfactor is quite vague. I'd rather stick to xceleration, which hints at both acceleration and deceleration.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/kareltucek,43,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-978047038,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","@mondalaci btw, I do agree that one single commit looks nice in the uhk/master repository for PRs like this one, but do you realize that this way the commits are probably going to haunt you till the end of the days in all subsequent PRs?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,397,2021-08-12T21:05:26Z,2021-11-16T19:29:04Z,2021-11-24T16:58:09Z,MERGED,True,5468,353,42,https://github.com/kareltucek,Extended macro engine.,38,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/397,https://github.com/mondalaci,44,https://github.com/UltimateHackingKeyboard/firmware/pull/397#issuecomment-978054436,"(once more, since the original branch caught flame...)
So here we go... There are some things to be polished later, but this should be the minimal version.
Some notes here - kareltucek#61 - most notably - should the language version be actually represented in the firmware and queriable via usb? (I sort of assume so, but did not implement it so far...)","@kareltucek I wasn't even conscious that I merged this PR as a single commit. It's probably not a good idea, although I'm unsure of the best practice in various cases.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,407,2021-09-15T02:19:19Z,2021-09-15T08:07:49Z,2021-09-15T08:08:14Z,MERGED,True,2,1,1,https://github.com/kareltucek,Fix hardware config allignment.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/407,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/407,"@mondalaci alignment.
Closes #406.","@mondalaci alignment.
Closes #406.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,407,2021-09-15T02:19:19Z,2021-09-15T08:07:49Z,2021-09-15T08:08:14Z,MERGED,True,2,1,1,https://github.com/kareltucek,Fix hardware config allignment.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/407,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/407#issuecomment-919796276,"@mondalaci alignment.
Closes #406.","Great catch, and thanks so much for the quick fix!",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,419,2021-11-12T13:56:34Z,2021-11-14T13:34:17Z,2021-11-14T13:35:15Z,MERGED,True,94,42,3,https://github.com/kareltucek,Trackpoint jumps fix,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/419,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/419,Closes #383 .,Closes #383 .,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,419,2021-11-12T13:56:34Z,2021-11-14T13:34:17Z,2021-11-14T13:35:15Z,MERGED,True,94,42,3,https://github.com/kareltucek,Trackpoint jumps fix,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/419,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/419#issuecomment-968292244,Closes #383 .,"@kareltucek Great job on this one! This issue was highly nontrivial, and your persistence is much appreciated.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/420,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/420#issuecomment-1001246803,,"@kareltucek This PR contains so many changes, I'm getting quite lost. In any case, I'm eager to merge it and catch up with your repo. Would you please write a summary of this PR?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/420#issuecomment-1002052122,,"Relevant changes:

more layers feature support
bug fixes (esp. related to stability and correctness of the macro engine in context of the new macro-sleeping performance optimizations - macro engine now should not eat performance on ""hold""/""delay"" features)
new elegant way to queue/chain macros (relevant to the onInit issues)
some timeouts were changed (performance optimizations made the internal clock run somewhat faster, resulting in doubletaps not being correctly registered)
some bugs fixed relating to layer switching and to sticky modifiers

Semi-relevant features:

rebinding both keys and navigation mode slot actions (only to macros)
adding monochromatic LED backlight mode (via set command)
doubletapDelay can now be set via smart macros

Other features:

tapKeySeq command that allows specifying more complex scancode sequences easily (codename ""emoji support"")
ifKeymap and ifLayer conditions and ifShortcut/ifGesture orGate option  (thanks to @soraxas)
fork command added, which allows spawning new macro without blocking
the blocking scheduler is now default
The blocking scheduler now uses a circular linked list to keep track of order of execution - this allows more deterministic behaviour when spawning/calling new macros.
decreased macro state pool size to 16.
activateKeyPostponed can now trigger actions from other layers

(I assume that the commit history is not relevant due to reasons discussed in common_trunk PR. Since then, I have emloyed new merging scheme thanks to which I hope I should be able to deal with squash merges without any more problems.)
For some reason, I see the mouse-related functionality shown in current PR as new, although it should already be merged and therefore same on both sides.
Also, some changes from past PRs seem to be reverted - this is not intentional from my side and needs further investigation -> please do not merge this yet.
My todos:

 check that semver versioning was bumped whenever it should have been
 check health of the PR (relating to above note of unexpected things showing in the diff)
 check that changing led rgb also switches driver automatically

Todos for @mondalaci :

 please resolve #438",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/420#issuecomment-1005171168,,"Thanks for the detailed list! I'm very impressed, and I'd love to merge this as soon as possible, but the configuration transformation in Agent for the ""more layers"" feature will be time-consuming to get right. If you can remove the ""more layers"" feature from this PR with reasonable effort, please do it because it can block the merging of this PR for a while.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/kareltucek,5,https://github.com/UltimateHackingKeyboard/firmware/pull/420#issuecomment-1005187488,,"If you can remove the ""more layers"" feature from this PR with reasonable effort, please do it because it can block the merging of this PR for a while.

You don't have to enable it. The firmware is backwards compatible with the old config - it is up to you when you decide to bump the version.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/420#issuecomment-1005197237,,"Maybe I'm mistaken then. So does this PR nothing have to do with UltimateHackingKeyboard/agent#617, and is the latter implemented by #422 on the firmware side?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/kareltucek,7,https://github.com/UltimateHackingKeyboard/firmware/pull/420#issuecomment-1005211140,,"#422 is a courtesy / pro-forma PR. It's purpose is to allow you to review code changes which I made to the code which was originally written by you and other contributors. (Contrary to this PR, which is mostly my changes to my own code.)
#422 is fully included in this PR and implements UltimateHackingKeyboard/agent#617. However, it does so in a backward compatible manner.
Maybe I'm mistaken, but I believe that config user version is actually included within the flashed user config. This gives the firmware ability to switch depending on the version of config which is actually written in the ROM (rather than which is expected to be written). In other words, if Agent writes a 5.x user config and correctly tags it as a 5.x version user config, the firmware will read it correctly as a 5.x config. If the Agent writes a 4.x user config and correctly tags it as 4.x, the firmware will read it correctly as a 4.x config.
In other words, if you release the firmware with 5.x, it will act as a 5.x version. If you release it as 4.x, it will act as 4.x. (More precisely, it will be treated as the corresponding version by Agent.)
(Also please note that this is exactly the reason why I have opened the #422 PR - because it is important that you know how I implemented the version transition and can point out any misunderstanding about the version transition process.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/420#issuecomment-1013731716,,"Thanks for separately submitting #422! It's much appreciated, I'll review it and give it a try as soon as its conflicts are resolved.
I planned to modify the configuration parser for user config 5.0.0 in a non-backward compatible manner to minimize the amount of legacy code, but if backward compatibility doesn't add much cruft, then your implementation is preferred.
Does this PR contain (almost) all the code of your fork? It'd be nice to catch up and only receive smaller PRs from that point forward.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/kareltucek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/420#issuecomment-1013732731,,"Does this PR contain (almost) all the code of your fork? It'd be nice to catch up and only receive smaller PRs from that point forward.

Yes, it is a long-living branch which is intended to contain the most up-to-date code.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,420,2021-11-16T19:41:14Z,2022-01-24T21:58:48Z,2022-01-24T21:58:48Z,MERGED,True,963,187,24,https://github.com/kareltucek,Common trunk upstream,91,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/420,https://github.com/kareltucek,10,https://github.com/UltimateHackingKeyboard/firmware/pull/420#issuecomment-1015680977,,"Conflicts resolved. As for the health, I have not found any real problem.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/421,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-977112858,,"First things first, I'm officially blown away by these configuration options, and I'm sure our customers will be, too. Keep on rocking! Let me provide some insights.
zoomSpeedDivisor should behave just like scrollSpeedDivisor, but for the zoom navigation mode for the sake of consistency.
I suggest adding module.touchpad.pinchToZoomSensitivity for setting touchpad-specific zoom sensitivity.
I don't think divisors are intuitive. Let's rather use multipliers exclusively. This way, people don't have to think about inversely proportional relationships, only proportional relationships. As for the related variable names, I wouldn't feature ""multiplier"" instead of ""divisor"" for the sake of brevity. Accordingly, let's rename caretSpeedDivisor to caretSpeed, scrollSpeedDivisor to scrollSpeed, and zoomSpeedDivisor to zoomSpeed, and let's make their default values 1/defaultValue of their current value.
It'd be worth introducing mediaSpeed to complement caretSpeed, scrollSpeed and zoomSpeed.
*AxisLockEnabled should be renamed to *AxisLock for brevity's sake.
cursorAxisLock should be removed as it doesn't make practical sense, but caretAxisLock does make sense, so it should be added.
scrollAxisLock is very useful, so it should be enabled by default.
Axis locking worked for me very reliably regardless of the value of axisLockStrength. How about you? This variable may not be needed and a reasonable default suffices.
As for axisLockStrengthFirstTick, I don't know what ""tick"" means, and I don't understand the use case of this variable. Please give me an example.
swapAxes only makes practical sense for the key cluster, so an error should be thrown when using this setting with other modules. When using swapAxes with the key cluster, horizontal scrolling works backwards than what is intuitive for me, so I think it'd be worth to reverse it.
The Ctrl- and Ctrl+ don't work on Mac on which Cmd- and Cmd+ are the relevant shortcuts. First, I wanted to introduce a pc|mac smart macro variable for this purpose, but it'd be a better solution to send both Ctrl- and Cmd- versus Ctrl+ and Cmd+ respectively. Based on my testing, the extra shortcuts don't trigger unwanted behavior in any platform. If they will, we can still introduce a pc|mac variable.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-979374205,,"I don't think divisors are intuitive.

Let's see:


Assume scrollSpeedDivisor = 16. Interpretation is simply ""It takes covering 16 pixels to produce one scroll event.""


Assume scrollSpeedMultiplier = 0.0625. What is your interpretation of that? I really don't think that human brain is good at dealing with numbers that inherently begin with two leading zeroes.



This way, people don't have to think about inversely proportional relationships, only proportional relationships.

Yes, that's exactly the reason why I introduce divisors and not multipliers.


I suggest adding module.touchpad.pinchToZoomSensitivity for setting touchpad-specific zoom sensitivity.

That's exactly the intended meaning of zoomSpeedDivisor, except I have packed it the way I have packed it in order to avoid introducing unnecessary special-case branchings into the code which would be going to cause confusion an bugs.
Also, other ways of packing it would/will void regularity of the grammar.


It'd be worth introducing mediaSpeed to complement caretSpeed, scrollSpeed and zoomSpeed.

You are actually suggesting expanding caretSpeed into three new config values. What is the practical benefit of doing such a thing? Any caret binding which I can think of needs sensitivity which will allow control up to a single event, which means that they will need the same coefficient anyway.
I am probably rather going to figure out how remove the offending options since they clearly cause misunderstandings...


The Ctrl- and Ctrl+ don't work on Mac on which Cmd- and Cmd+ are the relevant shortcuts. First, I wanted to introduce a pc|mac smart macro variable for this purpose, but it'd be a better solution to send both Ctrl- and Cmd- versus Ctrl+ and Cmd+ respectively. Based on my testing, the extra shortcuts don't trigger unwanted behavior in any platform. If they will, we can still introduce a pc|mac variable.

If you mean producing Ctrl + Alt + +/-, that does not work on linux.
If you mean to send first one and then the another, how exactly do you propose to send the two events? Let me remind you that your standard way of encoding actions has no support for macro-like trains of actions.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-979379700,,"Let me be clear on one thing: from design, zoom navigation mode was intended to serve the touchpad pinch gesture only, and to allow implementation of the pinch gesture using already available features. The documentation (which you have clearly not read) explains that.
Ability to reference the mode and change its properties, rebind it, etc., is from my side meant just as ""When we have the options, lets interface them (just as they are) rather than to try to hide them."". I.e., to interface them without introducing any more complexity.
What you are suggesting is taking it and expanding it into a new set of features, which I see as complex, unnecessary and awkward to implement and maintain.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/mondalaci,5,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-980330782,,"My comment regarding proportional versus inversely proportional relationships still stands. When increasing non-divisor variables like module.trackpoint.speed, the higher the value, the faster the movement. But when increasing divisor values, the higher the value, the slower the movement.
In practice, nobody would use values like 0.0625. Users would rather use values like 0.1, perhaps 0.06, and numerous other smart macro variables also use fractional numbers.

Anyone who's aware of all the different navigational modes, including zoom, will potentially confuse module.touchpad.zoomSpeed as a general module setting. The set module.MODULEID.{... | zoomSpeedDivisor | ...} part in MACRO_DOCS.md further contributes to this confusion.
Module-specific values, such as the pinch to zoom value should be explicitly marked as such. swapAxes should also be module-specific according to my previous comment, and I'm sure there will be other module-specific values, too. A mechanism is needed to handle module-specific versus general module variables at the code and documentation level.
The way I see it, it'd be practical to configure module.MODULEID.zoomSpeed, just as all the other navigation modes, and use a separate module-specific variable for pinch-to-zoom.


You are actually suggesting expanding caretSpeed into three new config values.

I don't see how. If we remove the Divisor part of the related variables, we'll end up with scrollSpeed, mediaSpeed, and zoomSpeed. caretSpeed would be the fourth in the line.

As for the zoom shortcuts, I meant sending one, then sending the other. I'm unsure what you mean by ""the standard way of encoding actions"". It's not like binding a shortcut to a key. This is a special case that could be separately implemented for the zoom navigation mode.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/kareltucek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-980458679,,"My comment regarding proportional versus inversely proportional relationships still stands.

My arguments against it still stand too.

In practice, nobody would use values like 0.0625. Users would rather use values like 0.1, perhaps 0.06.

Still exactly my point. How do you intuitively explain to me how fast a 0.06 is? Is it really obvious and intuitive that a step between 0.1 and 0.05 is the same size as the step between 0.02 and 0.01? Shouldn't the first one be 5x more pronounced?
Also, operation of the mini trackball is discreet in nature, so if you want it to behave deterministically (without pseudorandom skips), you actually need to feed it exact fractions (like 0.0625 rather than 0.06).
Furthermore this will make people mix the values up with the actual speed and baseSpeed which have somewhat different meaning.



You are actually suggesting expanding caretSpeed into three new config values.

I don't see how. If we remove the Divisor part of the related variables, we'll end up with scrollSpeed, mediaSpeed, and zoomSpeed. caretSpeed would be the fourth in the line.

Internally, there are just three modes. Cursor, scroll and ""discrete action"" mode. The last one can be bound to arbitrary discrete actions - at the moment three bindings of the last mode exist (caret, media, zoom).
I still don't see any practical reason why would anyone want to use different values for different bindings of the mode. Btw., this claim takes just one good counter-example to tear down.
I think it would be much more productive to try to figure out some way to distinguish between ""the caret"" mode and set of all the three ""action"" modes (which is a problem no matter what the resolution of this one point is - see bellow).


As for the zoom shortcuts, I meant sending one, then sending the other. I'm unsure what you mean by ""the standard way of encoding actions"". It's not like binding a shortcut to a key. This is a special case that could be separately implemented for the zoom navigation mode.

I am saying that I do not know how to describe the thing with an instance of key_action_t.

It's not like binding a shortcut to a key.

Currently, it is exactly like that. Performing actions is usb_report_updater's domain. Interpreting mouse events is mouse_controller's domain. Anything can be bound in navigation modes. Then, mouse_controller takes care of transforming the coordinate signal into regular usb_report_updater input, and then feeds it into the usb_report_updater, which executes it including features like the ""extra usb reports"". Currently, pinch zoom actions even can be changed from userspace.
It surely can be implemented the way you suggest, and if you take special care, you might even get it right without glitches (like the missing extra usb report), but I don't like the idea because it means slowly transforming the code into a minefield.


As for axisLockStrengthFirstTick, I don't know what ""tick"" means, and I don't understand the use case of this variable. Please give me an example.


tick means an output event. (Or more precisely one trigger of an action which is bound to a navigation mode.) (Edit: On semantics - I use it in context when discrete actions/events are triggered by accumulation of some continuous (aka non-discreet) signal.)
first means the first tick, which happens to be the one tick which is evaluated while an axis is not locked yet. Also, first tick after any 500ms of inactivity.

Usecase - if you want mini-trackball to require two ""pushes"" (roll by two units) to produce the first event, yet then to register 1:1. Or on the contrary, if you want first event to register with a very slight push of the big trackball and just then start counting the ""gap"" given by scollSpeedDivisor.


cursorAxisLock should be removed as it doesn't make practical sense,

Of course it makes sense - testing purposes (both for sake of development and for folks to be able to try out what exactly different values of the axis locks do), and maybe some uses of mini-trackball.


but caretAxisLock does make sense, so it should be added.

Interesting point. Axis lock is always on with caret modes (caret, media, zoom), and ""disabling"" it is same as setting both skews at 1.0, but for sake of intuitiveness, it should indeed be overloaded.


...we'll end up with scrollSpeed, mediaSpeed, and zoomSpeed. caretSpeed would be the fourth in the line.
but caretAxisLock does make sense, so it should be added.

These two patterns are becoming dangerously similar. I hope it does not mean that every navigation mode should have its own axisLock and a pair of axisLockStrength variables. If I count correctly, it would mean 12 new fields per module.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/mondalaci,7,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-981174424,,"Instead of divisors, we could use percentage values like scrollSpeedPercent. It'd allow for proportional behavior like for other variables.
The mini trackball of the key cluster module emits merely 8 pulses over 360 degrees, so it's very low resolution. Consequently, I don't think we should provide a divisor value for it.

It'd probably be a better idea not to expose caret, media, and zoom navigation modes, but only the discreet mode. I'd name it custom mode and make up, down, left, and right directions configurable as arbitrary key actions.
I do think it has merit to configure the sensitivity of the custom mode on a per-module and per-layer basis. There are very different use cases, such as cycling through workspaces, windows, characters (caret), adjusting volume (media), and a hardcoded solution won't be satisfactory for all these cases.

As for the double (PC and Mac) zoom shortcuts, I wasn't aware of their implementation challenges, but I strongly favor them because they just work.

axisLockStrengthFirstTick is perfectly suited for the mini trackball of the key cluster module. Some users reported accidentally activating the mini trackball, so it'd definitely be useful.
However, I can't see this option being useful for any other module. I think it should be made specific to the mini trackball of the key cluster.

We shouldn't expose developer options like cursorAxisLock via smart macros along with other options. I really can't think of any practical uses of this option, and we shouldn't burden users with it. If users want to experiment with axis locking, we should enable them via navigation modes for which it's useful, such as scrollAxisLock.

How about ditching axis lock enabling and only exposing axis lock strength? The way I see it, it'd reduce redundancy and allow for the same configuration possibilities.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-988919498,,@kareltucek I'm eager to merge this PR after resolving the standing issues. Is this your focus nowadays?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/kareltucek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-991380059,,"Is this your focus nowadays?

Not at the moment.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/mondalaci,10,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-998682083,,@kareltucek Would you resolve the conflicts? I want to merge this PR and release a new firmware version because it'd already provide great value to our customers. We'll keep tweaking and adding macro commands.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,421,2021-11-16T19:45:10Z,2021-12-26T21:47:15Z,2021-12-26T21:56:30Z,MERGED,True,613,172,15,https://github.com/kareltucek,Mouse controller refactors and extensions,54,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/421,https://github.com/mondalaci,11,https://github.com/UltimateHackingKeyboard/firmware/pull/421#issuecomment-1001246464,,I could merge this PR via the command line.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,422,2021-11-16T19:47:13Z,2022-01-24T22:00:54Z,2022-01-24T22:00:54Z,CLOSED,False,129,55,10,https://github.com/kareltucek,More layers,43,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/422,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/422,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,422,2021-11-16T19:47:13Z,2022-01-24T22:00:54Z,2022-01-24T22:00:54Z,CLOSED,False,129,55,10,https://github.com/kareltucek,More layers,43,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/422,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/422#issuecomment-1013730092,,@kareltucek Would you please resolve the conflict? I'm eager to review this PR.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,422,2021-11-16T19:47:13Z,2022-01-24T22:00:54Z,2022-01-24T22:00:54Z,CLOSED,False,129,55,10,https://github.com/kareltucek,More layers,43,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/422,https://github.com/mondalaci,3,https://github.com/UltimateHackingKeyboard/firmware/pull/422#issuecomment-1020590544,,"@kareltucek Thanks for the courtesy PR! Your code is tight, and I've just merged #420 which contains this PR.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,423,2021-11-16T19:53:34Z,2021-11-16T20:08:50Z,2021-11-16T20:08:51Z,CLOSED,False,5464,352,39,https://github.com/kareltucek,Performance tweaks,30,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/423,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/423,This PR is mostly irrelevant now.,This PR is mostly irrelevant now.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,423,2021-11-16T19:53:34Z,2021-11-16T20:08:50Z,2021-11-16T20:08:51Z,CLOSED,False,5464,352,39,https://github.com/kareltucek,Performance tweaks,30,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/423,https://github.com/kareltucek,2,https://github.com/UltimateHackingKeyboard/firmware/pull/423#issuecomment-970638459,This PR is mostly irrelevant now.,"Actually, I am abandoning this one - too many conflicts, and no good reason to go through the pain of resolving them...",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,424,2021-11-16T20:32:43Z,2021-11-17T18:42:27Z,2021-11-17T18:42:31Z,MERGED,True,151,28,9,https://github.com/kareltucek,Performance tweaks,46,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/424,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/424,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,430,2021-12-05T22:32:14Z,2021-12-06T06:42:12Z,2021-12-06T06:42:12Z,MERGED,True,2,1,1,https://github.com/benedekkupper,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/430,https://github.com/benedekkupper,1,https://github.com/UltimateHackingKeyboard/firmware/pull/430,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,432,2021-12-15T23:13:03Z,2021-12-21T10:55:37Z,2021-12-29T21:16:06Z,MERGED,True,111,267,12,https://github.com/benedekkupper,Attempt to fix #390,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/432,https://github.com/benedekkupper,1,https://github.com/UltimateHackingKeyboard/firmware/pull/432,"Fixes #390.
I was set out to implement my suggestion, but on the way I found several other issues that I think should be fixed. I myself don't have any way to verify the functionality, I can only be certain that this branch builds. I can also imagine that removing the SET_IDLE support isn't even necessary to get the issue fixed, that's why that change is the last commit.","Fixes #390.
I was set out to implement my suggestion, but on the way I found several other issues that I think should be fixed. I myself don't have any way to verify the functionality, I can only be certain that this branch builds. I can also imagine that removing the SET_IDLE support isn't even necessary to get the issue fixed, that's why that change is the last commit.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,434,2021-12-23T11:27:06Z,2021-12-23T12:54:22Z,2021-12-23T12:54:22Z,MERGED,True,1,0,1,https://github.com/soraxas,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/434,https://github.com/soraxas,1,https://github.com/UltimateHackingKeyboard/firmware/pull/434,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.","I have read the Agreement, and fully agree to it by signing it with my GitHub username.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,434,2021-12-23T11:27:06Z,2021-12-23T12:54:22Z,2021-12-23T12:54:22Z,MERGED,True,1,0,1,https://github.com/soraxas,Sign CLA,1,[],https://github.com/UltimateHackingKeyboard/firmware/pull/434,https://github.com/soraxas,2,https://github.com/UltimateHackingKeyboard/firmware/pull/434#issuecomment-1000245465,"I have read the Agreement, and fully agree to it by signing it with my GitHub username.",For kareltucek#76,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,439,2022-01-01T22:23:08Z,2022-01-15T19:52:29Z,2022-01-16T21:17:32Z,MERGED,True,40,12,7,https://github.com/benedekkupper,rebase for first part of #367,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/439,https://github.com/benedekkupper,1,https://github.com/UltimateHackingKeyboard/firmware/pull/439,"These commits are actually generic bugfixes, so could be merged independently as well.","These commits are actually generic bugfixes, so could be merged independently as well.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/benedekkupper,1,https://github.com/UltimateHackingKeyboard/firmware/pull/448,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/kareltucek,2,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1041810694,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","@benedekkupper uhk pretty much stops working with this branch.
Bisecting leads to:
$ git bisect bad
Bisecting: 0 revisions left to test after this (roughly 0 steps)
[3e244f9555dd64505c867bbec43c54ba90650e00] remove external report scancode indexing
$ git bisect good
1b53f367307803932b74dd8269932f5fd115ed57 is the first bad commit
commit 1b53f367307803932b74dd8269932f5fd115ed57
Author: Benedek Kupper <kupper.benedek@gmail.com>
Date:   Thu Dec 2 23:13:08 2021 +0100

    hid report descriptors: put them in .rodata

    The report descriptors are fixed, so mark them const in order to stop wasting
    precious RAM just for storing a copy of them.

    Signed-off-by: Benedek Kupper <kupper.benedek@gmail.com>

 .../src/usb_descriptors/usb_descriptor_basic_keyboard_report.c |  2 +-
 .../src/usb_descriptors/usb_descriptor_basic_keyboard_report.h |  2 +-
 right/src/usb_descriptors/usb_descriptor_generic_hid_report.c  |  2 +-
 right/src/usb_descriptors/usb_descriptor_generic_hid_report.h  |  2 +-
 right/src/usb_descriptors/usb_descriptor_hid.c                 | 10 +++++-----
 .../src/usb_descriptors/usb_descriptor_media_keyboard_report.c |  2 +-
 .../src/usb_descriptors/usb_descriptor_media_keyboard_report.h |  2 +-
 right/src/usb_descriptors/usb_descriptor_mouse_report.c        |  2 +-
 right/src/usb_descriptors/usb_descriptor_mouse_report.h        |  2 +-
 .../usb_descriptors/usb_descriptor_system_keyboard_report.c    |  2 +-
 .../usb_descriptors/usb_descriptor_system_keyboard_report.h    |  2 +-
 11 files changed, 15 insertions(+), 15 deletions(-)

Edit: removed some misleading parts",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1041826626,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","With benedekkuper/nkro (unmodified), I am getting:

dmesg
[36768.355351] usb 1-4: new full-speed USB device number 82 using xhci_hcd
[36768.509560] usb 1-4: New USB device found, idVendor=1d50, idProduct=6124, bcdDevice= 1.02
[36768.509575] usb 1-4: New USB device strings: Mfr=1, Product=2, SerialNumber=0
[36768.509581] usb 1-4: Product: UHK 60 v2
[36768.509585] usb 1-4: Manufacturer: Ultimate Gadget Laboratories
[36768.513338] hid (null): global environment stack underflow
[36768.513546] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513567] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513583] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513598] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513613] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513629] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513644] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513659] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513674] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513690] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513705] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513720] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513735] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513750] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513766] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513781] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513797] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513812] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513831] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513850] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513870] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x0
[36768.513889] hid-generic 0003:1D50:6124.00E0: unknown main item tag 0x3
[36768.513908] hid-generic 0003:1D50:6124.00E0: global environment stack underflow
[36768.513915] hid-generic 0003:1D50:6124.00E0: item 0 0 1 11 parsing failed
[36768.513955] hid-generic: probe of 0003:1D50:6124.00E0 failed with error -22
[36768.515130] hid (null): global environment stack underflow
[36768.515621] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515646] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515664] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515683] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515703] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515735] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515742] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515749] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515756] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515763] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515769] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515777] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515784] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515790] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515797] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515804] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515811] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515818] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515824] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515830] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515837] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515844] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515850] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515858] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515864] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x6
[36768.515871] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x5
[36768.515878] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515885] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515892] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515898] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515906] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x0
[36768.515912] hid-generic 0003:1D50:6124.00E1: unknown main item tag 0x3
[36768.515919] hid-generic 0003:1D50:6124.00E1: global environment stack underflow
[36768.515922] hid-generic 0003:1D50:6124.00E1: item 0 0 1 11 parsing failed
[36768.515936] hid-generic: probe of 0003:1D50:6124.00E1 failed with error -22
[36768.516212] hid (null): global environment stack underflow
[36768.516262] hid-generic 0003:1D50:6124.00E2: collection stack underflow
[36768.516269] hid-generic 0003:1D50:6124.00E2: item 0 4 0 12 parsing failed
[36768.516279] hid-generic: probe of 0003:1D50:6124.00E2 failed with error -22
[36768.516643] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516650] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516656] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516661] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516667] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516672] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516678] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516683] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516689] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516694] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516700] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516705] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516711] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516717] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516724] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516729] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516740] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516745] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516751] hid-generic 0003:1D50:6124.00E3: unknown main item tag 0x0
[36768.516825] hid-generic 0003:1D50:6124.00E3: hidraw2: USB HID v1.10 Device [Ultimate Gadget Laboratories UHK 60 v2] on usb-0000:00:14.0-4/input3
[36768.517203] hid (null): unknown global tag 0xd
[36768.517331] hid (null): global environment stack underflow
[36768.517357] hid (null): global environment stack underflow
[36768.517403] hid (null): global environment stack underflow
[36768.517486] hid-generic 0003:1D50:6124.00E4: unknown main item tag 0x0
[36768.517497] hid-generic 0003:1D50:6124.00E4: unknown main item tag 0x0
[36768.517504] hid-generic 0003:1D50:6124.00E4: unknown main item tag 0x0
[36768.517512] hid-generic 0003:1D50:6124.00E4: unknown main item tag 0x0
[36768.517520] hid-generic 0003:1D50:6124.00E4: unknown global tag 0xd
[36768.517523] hid-generic 0003:1D50:6124.00E4: item 0 0 1 13 parsing failed
[36768.517539] hid-generic: probe of 0003:1D50:6124.00E4 failed with error -22",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1041848782,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","With proper patch, at (1b53f36) :

patch
index d3874fa4..ff283f1c 100644
--- a/right/src/usb_interfaces/usb_interface_basic_keyboard.c
+++ b/right/src/usb_interfaces/usb_interface_basic_keyboard.c
@@ -238,8 +238,8 @@ void UsbBasicKeyboard_MergeReports(const usb_basic_keyboard_report_t* sourceRepo
 void UsbBasicKeyboard_ForeachScancode(const usb_basic_keyboard_report_t* report, void(*action)(uint8_t))
 {
     if (UsbBasicKeyboardGetProtocol() == USB_HID_BOOT_PROTOCOL) {
-        for (uint8_t i = 0; (i < ARRAY_SIZE(report->boot.scancodes)) && (report->boot.scancodes[i] != 0); i++) {
-            action(report->boot.scancodes[i]);
+        for (uint8_t i = 0; (i < ARRAY_SIZE(report->scancodes)) && (report->scancodes[i] != 0); i++) {
+            action(report->scancodes[i]);
         }
     }
 }



dmesg
[37887.372883] usb 1-4: new full-speed USB device number 116 using xhci_hcd
[37887.523113] usb 1-4: New USB device found, idVendor=1d50, idProduct=6124, bcdDevice= 1.02
[37887.523130] usb 1-4: New USB device strings: Mfr=1, Product=2, SerialNumber=0
[37887.523137] usb 1-4: Product: UHK 60 v2
[37887.523142] usb 1-4: Manufacturer: Ultimate Gadget Laboratories
[37887.529246] hid (null): unknown global tag 0xd
[37887.529726] hid-generic 0003:1D50:6124.0146: unknown main item tag 0x0
[37887.529746] hid-generic 0003:1D50:6124.0146: unknown global tag 0xd
[37887.529753] hid-generic 0003:1D50:6124.0146: item 0 0 1 13 parsing failed
[37887.529780] hid-generic: probe of 0003:1D50:6124.0146 failed with error -22
[37887.530433] hid (null): unknown global tag 0xd
[37887.531061] hid-generic 0003:1D50:6124.0147: unknown main item tag 0x0
[37887.531080] hid-generic 0003:1D50:6124.0147: unknown global tag 0xd
[37887.531086] hid-generic 0003:1D50:6124.0147: item 0 0 1 13 parsing failed
[37887.531112] hid-generic: probe of 0003:1D50:6124.0147 failed with error -22
[37887.531896] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x2
[37887.531917] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.531933] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.531948] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.531962] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.531980] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.531995] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.532011] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.532026] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.532041] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.532057] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.532072] hid-generic 0003:1D50:6124.0148: unknown main item tag 0x0
[37887.532294] hid-generic 0003:1D50:6124.0148: hidraw2: USB HID v1.10 Device [Ultimate Gadget Laboratories UHK 60 v2] on usb-0000:00:14.0-4/input2
[37887.542128] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542155] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542179] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542199] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542220] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542240] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542264] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542285] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542305] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542324] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542344] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542365] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542385] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542404] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542424] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542444] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542465] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542484] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542504] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542524] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542544] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542564] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542584] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542604] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542624] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542643] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542663] hid-generic 0003:1D50:6124.0149: unknown main item tag 0x0
[37887.542922] hid-generic 0003:1D50:6124.0149: hidraw3: USB HID v1.10 Device [Ultimate Gadget Laboratories UHK 60 v2] on usb-0000:00:14.0-4/input3
[37887.544014] hid-generic 0003:1D50:6124.014A: collection stack underflow
[37887.544040] hid-generic 0003:1D50:6124.014A: item 0 4 0 12 parsing failed
[37887.544067] hid-generic: probe of 0003:1D50:6124.014A failed with error -22",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/benedekkupper,5,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1042380904,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","@kareltucek thanks for the testing, I didn't expect it that this part would fail. The branch is now rebased, the main change is that the USB_DESC_STORAGE_TYPE define in usb_api.h controls what type the descriptors use. I also now changed all descriptors to be in .rodata, and set forced 4-byte alignment for all descriptors, that's the only possible problem I can imagine with this change. If it isn't, then you will see even bigger errors during USB enumeration, in this case please just test the rest with USB_DESC_STORAGE_TYPE set to uint8_t.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/kareltucek,6,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1042398037,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","@benedekkupper const version yields following in dmesg:
[58573.048158] usb 1-4: new full-speed USB device number 78 using xhci_hcd
[58573.176312] usb 1-4: device descriptor read/64, error 18
[58573.412219] usb 1-4: device descriptor read/64, error 18
[58573.648240] usb 1-4: new full-speed USB device number 79 using xhci_hcd
[58573.776317] usb 1-4: device descriptor read/64, error 18
[58574.016164] usb 1-4: device descriptor read/64, error 18
[58574.124366] usb usb1-port4: attempt power cycle
[58574.776076] usb 1-4: new full-speed USB device number 80 using xhci_hcd
[58574.796370] usb 1-4: device descriptor read/8, error -61
[58574.924882] usb 1-4: device descriptor read/8, error -61
[58575.164047] usb 1-4: new full-speed USB device number 81 using xhci_hcd
[58575.184441] usb 1-4: device descriptor read/8, error -61
[58575.312953] usb 1-4: device descriptor read/8, error -61
[58575.420334] usb usb1-port4: unable to enumerate USB device

With uint8_t everything seems to work fine (just throws tons of warning: 'Usb*KeyboardReportDescriptor' defined but not used during compilation).",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/benedekkupper,7,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1043016065,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","FFS who designs such pieces of silicon/SDK? As evidenced by this and this post, the USB controller doesn't have access to flash by default, but this can be changed with a flag.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/benedekkupper,8,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1043018992,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","Can you test with the new commit on top? Also, ""everything seems to work fine"" means that there is also no missed first key press, as in your branch?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/mondalaci,9,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1043021989,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.",@benedekkupper Why can't you test the firmware?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/benedekkupper,10,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1043025232,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","I still haven't been able to set up the agent's libraries so the makefile can run the necessary scripts from it for flashing. Note that I can flash from the agent itself, but the agent UI requires a packaged firmware, which the makefile itself doesn't produce.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/kareltucek,11,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1043043521,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","Can you test with the new commit on top?

Works and compiles, no warnings!

Also, ""everything seems to work fine"" means that there is also no missed first key press, as in your branch?

Yes, no missed scancode.",True,{'THUMBS_UP': ['https://github.com/benedekkupper']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/kareltucek,12,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1043059191,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.",Also... great job with the refactors!,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/benedekkupper,13,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1043063997,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","I imagine that there would still be errors with macros if the keyboard's protocol is changed at runtime, but in reality there should be few cases where the boot protocol is activated, so I guess we can deal with all the corner cases later.",True,{'THUMBS_UP': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/mondalaci,14,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1044430801,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","I've just tested this PR, and NKRO is working flawlessly on Linux, Mac, Windows 10, and in the BIOS of my Ryzen PC. Excellent job!
Upon merging this PR, I can close #367, right?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,448,2022-02-15T22:47:39Z,2022-02-18T17:19:04Z,2022-02-18T17:19:04Z,MERGED,True,617,342,29,https://github.com/benedekkupper,My attempt to complete #367 (NKRO),10,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/448,https://github.com/benedekkupper,15,https://github.com/UltimateHackingKeyboard/firmware/pull/448#issuecomment-1044804718,"This branch is a rebase-refactor-review of the #367 original, and the subsequent nkey-rollover branch. The commits are restructured in a way that at each commit the keyboard should work at least as well as before. I still don't have the means to test this branch, so please do that before merging. In case of problems, please bisect the commit that breaks something.","Yes, this ticket supersedes #367 (all the changes are incorporated from there), and closes #70.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,449,2022-02-18T10:47:48Z,2022-02-21T14:44:45Z,2022-02-21T14:44:45Z,MERGED,True,252,74,16,https://github.com/kareltucek,Implement modifier layers.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/449,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/449,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,449,2022-02-18T10:47:48Z,2022-02-21T14:44:45Z,2022-02-21T14:44:45Z,MERGED,True,252,74,16,https://github.com/kareltucek,Implement modifier layers.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/449,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/449#issuecomment-1046022610,,"Great job! As soon as you resolve the conflicts, I'll merge this one.
As for the documentation, in set modifierLayerTriggers.LAYERID, only modifier layer ids are allowed. I leave it up to you whether you'll fix the documentation.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,449,2022-02-18T10:47:48Z,2022-02-21T14:44:45Z,2022-02-21T14:44:45Z,MERGED,True,252,74,16,https://github.com/kareltucek,Implement modifier layers.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/449,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/449#issuecomment-1046689404,,Done. Fixed.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,449,2022-02-18T10:47:48Z,2022-02-21T14:44:45Z,2022-02-21T14:44:45Z,MERGED,True,252,74,16,https://github.com/kareltucek,Implement modifier layers.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/449,https://github.com/kareltucek,4,https://github.com/UltimateHackingKeyboard/firmware/pull/449#issuecomment-1046911497,,"Another conflict (since the hybrid zoom mode merge) fixed.
(Also, I have just managed to shoot myself into the foot with the origin/master remote. My bad, just sharing.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/450,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046117005,,"As for the zoom shortcuts, Shift is actually not needed for ""+"", so rather, ""="" needs to be invoked. Also, Mac uses Super (Gui) for the zoom shortcut, not Alt.
Perhaps even more importantly, I've just realized that emulating zooming via keyboard shortcuts is fundamentally problematic and may result in a lot of support burden; I've tested this feature with a laptop using Hungarian layout, and unsurprisingly, the scancodes didn't map to the +/- characters.
@benedekkupper Do you know of a platform-independent way to implement zooming via USB?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/benedekkupper,3,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046118746,,"To answer that I just jump into the HID usage tables document:

22D AC Zoom In Sel
22E AC Zoom Out Sel
22F AC Zoom LC
230 AC Full Screen View Sel
231 AC Normal View Sel
232 AC View Toggle Sel
233 AC Scroll Up Sel
234 AC Scroll Down Sel
235 AC Scroll LC

Where the ""Sel"" elements are the ones that can be mapped to a key as scancode, the LC means it's a linear value, so that would need modification of the report desciptor and layout.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046124479,,"@benedekkupper I've just tried the two referenced zoom scancodes by mapping two keys to M557 and M558 in Agent, and they didn't zoom in the browser. Anything else that might work?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/benedekkupper,5,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046125443,,"Nope, this is the best we have. The concept is defined by HID, but it's not enforced that each OS has to implement it (we can see in Linux source code that KEY_ZOOMIN exists and bound to this scancode), and that each application running on these OSes handle these key events. We can only say: ""Hey, we can zoom in-out with our keyboard, but your shitty OS / application doesn't handle it as it should, please fix it.""",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/mondalaci,6,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046179274,,@benedekkupper Gotcha. How do touchpads communicate pinch to zoom toward the OS?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/benedekkupper,7,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046321617,,"Some googling tells me that touch pads have a very different level of abstraction on HID, see the Digitizers usage page. Such device just tells the host where the physical contacts are made on the surface, and the host OS/application interprets gestures such as pinch zoom. There is some vague Windows-specific guide to implement such HID devices. I myself never had the chance to test a touchpad, so I cannot really give you further insight.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/mondalaci,8,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046660585,,Thanks for looking into this! We should implement the planned solution then.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/kareltucek,9,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046681251,,@mondalaci this means that you just want the ALT and SHIFT fixed?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/kareltucek,10,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046709815,,(Done.),True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/kareltucek,11,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046876667,,"@mondalaci just out of curiosity, which ones?
(My original line of thought was exactly that Ctrl+= should reset zoom to default rather than act as Ctrl++, but I failed to find a single example on my workstation.)",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,450,2022-02-18T21:56:04Z,2022-02-21T12:30:17Z,2022-02-21T13:27:53Z,MERGED,True,111,24,7,https://github.com/kareltucek,Implement hybrid pinch zoom mode.,3,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/450,https://github.com/mondalaci,12,https://github.com/UltimateHackingKeyboard/firmware/pull/450#issuecomment-1046881688,,Gnome Terminal didn't work with Ctrl + =,True,{'HEART': ['https://github.com/kareltucek']}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,451,2022-02-21T16:29:28Z,2022-02-26T12:49:12Z,2022-02-26T12:49:12Z,MERGED,True,111,51,7,https://github.com/kareltucek,Axis lock refactor and other module-related polishing.,5,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/451,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/451,Closes #435.,Closes #435.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,454,2022-02-24T12:51:40Z,2022-02-25T21:23:59Z,2022-02-25T21:23:59Z,MERGED,True,39,20,1,https://github.com/kareltucek,Split right/left module kinetic state.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/454,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/454,Closes kareltucek#94.,Closes kareltucek#94.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,455,2022-02-24T13:49:57Z,2022-02-24T22:20:52Z,2022-02-24T22:20:53Z,MERGED,True,10,2,2,https://github.com/kareltucek,Allow modifier layers to be overriden.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/455,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/455,Closes #453.,Closes #453.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,459,2022-03-14T15:50:13Z,2022-03-14T20:08:04Z,2022-03-14T20:08:04Z,MERGED,True,7,0,1,https://github.com/kareltucek,Make acceleration modifiers work with modules.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/459,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/459,Closes #458 .,Closes #458 .,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,460,2022-03-17T11:59:11Z,2022-03-19T14:53:45Z,2022-03-19T14:53:45Z,MERGED,True,168,11,14,https://github.com/kareltucek,Add git properties.,4,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/460,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/460,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,465,2022-04-05T20:32:10Z,2022-04-06T09:54:20Z,2022-04-06T09:54:20Z,MERGED,True,6,0,1,https://github.com/kareltucek,WIP: finalize smart macros.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/465,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/465,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,467,2022-04-13T09:01:44Z,2022-04-13T14:36:52Z,2022-04-13T14:36:52Z,MERGED,True,124,11,4,https://github.com/kareltucek,Sanitize inputs via Macros_ParseError.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/467,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/467,"I am not sanitizing value reads at the moment - like Int or Float parsing. I will consider it when dealing with the config management, and relative value adjustments - I hope it will be possible to deal with these in some reasonable generic fashion.","I am not sanitizing value reads at the moment - like Int or Float parsing. I will consider it when dealing with the config management, and relative value adjustments - I hope it will be possible to deal with these in some reasonable generic fashion.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,470,2022-04-22T10:47:32Z,2022-04-24T15:09:30Z,2022-04-24T15:09:30Z,MERGED,True,9,3,2,https://github.com/kareltucek,Rename doubletapDelay to doubletapTimeout.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/470,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/470,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,470,2022-04-22T10:47:32Z,2022-04-24T15:09:30Z,2022-04-24T15:09:30Z,MERGED,True,9,3,2,https://github.com/kareltucek,Rename doubletapDelay to doubletapTimeout.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/470,https://github.com/mondalaci,2,https://github.com/UltimateHackingKeyboard/firmware/pull/470#issuecomment-1106405391,,I'd much rather prefer branching based on smart macro version and explicitly disallow deprecated language elements.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,470,2022-04-22T10:47:32Z,2022-04-24T15:09:30Z,2022-04-24T15:09:30Z,MERGED,True,9,3,2,https://github.com/kareltucek,Rename doubletapDelay to doubletapTimeout.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/470,https://github.com/kareltucek,3,https://github.com/UltimateHackingKeyboard/firmware/pull/470#issuecomment-1106448651,,"How?
I can't efficiently branch based on semver in the macro engine given that stock and fork use separate semver spaces. (Which cannot be avoided as long as you keep insisting on changes to already released features while also refusing to inherit macro versioning of the fork.)
I would also much rather not break people's setups when there is no reason to do so.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,470,2022-04-22T10:47:32Z,2022-04-24T15:09:30Z,2022-04-24T15:09:30Z,MERGED,True,9,3,2,https://github.com/kareltucek,Rename doubletapDelay to doubletapTimeout.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/470,https://github.com/mondalaci,4,https://github.com/UltimateHackingKeyboard/firmware/pull/470#issuecomment-1106449818,,Then please comment out the old naming for the official UHK firmware build.,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,470,2022-04-22T10:47:32Z,2022-04-24T15:09:30Z,2022-04-24T15:09:30Z,MERGED,True,9,3,2,https://github.com/kareltucek,Rename doubletapDelay to doubletapTimeout.,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/470,https://github.com/kareltucek,5,https://github.com/UltimateHackingKeyboard/firmware/pull/470#issuecomment-1106452881,,Like this?,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,472,2022-05-06T19:42:58Z,2022-05-08T21:54:06Z,2022-05-08T21:54:07Z,MERGED,True,74,4,8,https://github.com/kareltucek,Implement global brightness controls.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/472,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/472,"Here is some brightness control implementation.
I don't see any way to simplify the code by removing the brightness control, as disabling leds by a boolean also requires same actions and precautions.
Did you have some other implementation in mind?","Here is some brightness control implementation.
I don't see any way to simplify the code by removing the brightness control, as disabling leds by a boolean also requires same actions and precautions.
Did you have some other implementation in mind?",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,473,2022-05-09T09:47:52Z,2022-05-10T13:45:04Z,2022-05-10T13:45:04Z,MERGED,True,6,4,3,https://github.com/kareltucek,Fix brightness control bugs,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/473,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/473,"make leds respect sleep mode.
fix layer led update.
make RecalculateLedbrightness static.
fix LedSleepTimeout = 0 to mean timeout disabled.","make leds respect sleep mode.
fix layer led update.
make RecalculateLedbrightness static.
fix LedSleepTimeout = 0 to mean timeout disabled.",True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,474,2022-05-09T12:45:24Z,2022-05-10T15:26:53Z,2022-05-10T15:26:53Z,MERGED,True,6,5,3,https://github.com/kareltucek,Fix unused warnings and consequently cicd.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/474,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/474,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,475,2022-05-10T20:36:17Z,2022-05-10T21:46:58Z,2022-05-10T21:47:28Z,MERGED,True,28,7,2,https://github.com/ert78gb,feat(doc): set action property of the smart macro doc of postMessages,2,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/475,https://github.com/ert78gb,1,https://github.com/UltimateHackingKeyboard/firmware/pull/475,,,True,{}
UltimateHackingKeyboard/firmware,https://github.com/UltimateHackingKeyboard/firmware,477,2022-05-18T11:01:29Z,2022-05-18T19:31:18Z,2022-05-18T19:31:18Z,MERGED,True,1,1,1,https://github.com/kareltucek,Disable led fade by default.,1,['cla:signed'],https://github.com/UltimateHackingKeyboard/firmware/pull/477,https://github.com/kareltucek,1,https://github.com/UltimateHackingKeyboard/firmware/pull/477,,,True,{}
